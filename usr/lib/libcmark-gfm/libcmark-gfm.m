uint64_t cmark_parser_feed(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  return S_parser_feed(a1, a2, a3, 0);
}

uint64_t cmark_parser_new(int a1)
{
  return cmark_parser_new_with_mem(a1, (uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR);
}

uint64_t S_parser_feed(uint64_t result, unsigned char *a2, unint64_t a3, int a4)
{
  v5 = a2;
  uint64_t v6 = result;
  v7 = &a2[a3];
  int v8 = *(_DWORD *)(result + 120);
  uint64_t v9 = *(void *)(result + 128);
  unint64_t v10 = 0xFFFFFFFFLL - v9;
  uint64_t v11 = v9 + a3;
  if (v10 < a3) {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  *(void *)(result + 128) = v11;
  if (*(unsigned char *)(result + 124) && *a2 == 10) {
    v5 = a2 + 1;
  }
  *(unsigned char *)(result + 124) = 0;
  if (v5 >= v7) {
    return result;
  }
  int v12 = v8 & 0xC0000;
  int v13 = a4 ^ 1;
  do
  {
    uint64_t v14 = 0;
    while (1)
    {
      int v15 = v5[v14];
      if (!v5[v14])
      {
        cmark_strbuf_put((_DWORD *)(v6 + 96), v5, v14);
        v19 = (_DWORD *)(v6 + 96);
        v20 = &S_parser_feed_repl;
        int v21 = 3;
        goto LABEL_29;
      }
      if (v15 == 10 || v15 == 13) {
        break;
      }
      if (&v5[++v14] >= v7)
      {
        if (a4)
        {
          int v17 = 0;
          goto LABEL_18;
        }
        v19 = (_DWORD *)(v6 + 96);
        v20 = v5;
        int v21 = v14;
LABEL_29:
        result = (uint64_t)cmark_strbuf_put(v19, v20, v21);
        goto LABEL_30;
      }
    }
    int v17 = 1;
LABEL_18:
    if (*(int *)(v6 + 116) < 1)
    {
      if (v12) {
        int v22 = v17 | v13;
      }
      else {
        int v22 = 1;
      }
      result = S_process_line(v6, v5, v14, v22);
    }
    else
    {
      cmark_strbuf_put((_DWORD *)(v6 + 96), v5, v14);
      if (v12) {
        int v18 = v17 | v13;
      }
      else {
        int v18 = 1;
      }
      S_process_line(v6, *(const void **)(v6 + 104), *(_DWORD *)(v6 + 116), v18);
      result = cmark_strbuf_clear(v6 + 96);
    }
LABEL_30:
    v5 += (int)v14;
    if (v5 >= v7) {
      continue;
    }
    if (*v5 == 13)
    {
      if (++v5 != v7) {
        goto LABEL_35;
      }
      *(unsigned char *)(v6 + 124) = 1;
      return result;
    }
    if (!*v5)
    {
      ++v5;
      continue;
    }
LABEL_35:
    if (v5 < v7 && *v5 == 10) {
      ++v5;
    }
  }
  while (v5 < v7);
  return result;
}

void cmark_register_plugin(unsigned int (*a1)(void))
{
  v2 = cmark_plugin_new();
  if (a1())
  {
    v3 = (void *)cmark_plugin_steal_syntax_extensions(v2);
    pthread_once(&extensions_once, (void (*)(void))initialize_extensions);
    pthread_mutex_lock(&extensions_lock);
    if (v3)
    {
      v4 = (void *)syntax_extensions;
      v5 = v3;
      do
      {
        v4 = cmark_llist_append((uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR, v4, v5[1]);
        syntax_extensions = (uint64_t)v4;
        v5 = (void *)*v5;
      }
      while (v5);
    }
    pthread_mutex_unlock(&extensions_lock);
    cmark_llist_free((uint64_t)&CMARK_DEFAULT_MEM_ALLOCATOR, v3);
  }

  cmark_plugin_free((void **)v2);
}

void *cmark_syntax_extension_new(const char *a1)
{
  v2 = CMARK_DEFAULT_MEM_ALLOCATOR(1uLL, 0xB8uLL);
  size_t v3 = strlen(a1);
  v4 = (char *)CMARK_DEFAULT_MEM_ALLOCATOR(v3 + 1, 1uLL);
  v2[5] = v4;
  strcpy(v4, a1);
  return v2;
}

uint64_t cmark_parser_attach_syntax_extension(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 136) = cmark_llist_append(*(uint64_t (***)(uint64_t, uint64_t))a1, *(void **)(a1 + 136), a2);
  if (*(void *)(a2 + 16) || *(void *)(a2 + 24))
  {
    v4 = *(void **)(a1 + 144);
    if (!v4)
    {
      *(void *)(a1 + 160) = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 256);
      cmark_set_default_skip_chars((long long **)(a1 + 160), 1);
      *(void *)(a1 + 168) = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 256);
      cmark_set_default_special_chars((long long **)(a1 + 168), 1);
      v4 = *(void **)(a1 + 144);
    }
    *(void *)(a1 + 144) = cmark_llist_append(*(uint64_t (***)(uint64_t, uint64_t))a1, v4, a2);
  }
  return 1;
}

void *cmark_llist_append(uint64_t (**a1)(uint64_t, uint64_t), void *a2, uint64_t a3)
{
  v5 = (void *)(*a1)(1, 16);
  void *v5 = 0;
  v5[1] = a3;
  if (!a2) {
    return v5;
  }
  uint64_t v6 = a2;
  do
  {
    v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6);
  void *v7 = v5;
  return a2;
}

void *xcalloc(size_t a1, size_t a2)
{
  result = malloc_type_calloc(a1, a2, 0xA9181AE9uLL);
  if (!result) {
    xcalloc_cold_1();
  }
  return result;
}

uint64_t cmark_parser_new_with_mem(int a1, uint64_t (**a2)(uint64_t, uint64_t))
{
  uint64_t v4 = (*a2)(1, 176);
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 120) = a1;
  cmark_set_default_skip_chars((long long **)(v4 + 160), 0);
  cmark_set_default_special_chars((long long **)(v4 + 168), 0);
  cmark_parser_reset(v4);
  return v4;
}

long long **cmark_set_default_special_chars(long long **result, int a2)
{
  if (a2)
  {
    v2 = *result;
    long long v3 = cmark_set_default_special_chars_default_special_chars;
    long long v4 = unk_267C85648;
    long long v5 = unk_267C85668;
    v2[2] = xmmword_267C85658;
    v2[3] = v5;
    long long *v2 = v3;
    v2[1] = v4;
    long long v6 = xmmword_267C85678;
    long long v7 = unk_267C85688;
    long long v8 = unk_267C856A8;
    v2[6] = xmmword_267C85698;
    v2[7] = v8;
    v2[4] = v6;
    v2[5] = v7;
    long long v9 = xmmword_267C856B8;
    long long v10 = unk_267C856C8;
    long long v11 = unk_267C856E8;
    v2[10] = xmmword_267C856D8;
    v2[11] = v11;
    v2[8] = v9;
    v2[9] = v10;
    long long v12 = xmmword_267C856F8;
    long long v13 = unk_267C85708;
    long long v14 = unk_267C85728;
    v2[14] = xmmword_267C85718;
    v2[15] = v14;
    v2[12] = v12;
    v2[13] = v13;
  }
  else
  {
    void *result = &cmark_set_default_special_chars_default_special_chars;
  }
  return result;
}

long long **cmark_set_default_skip_chars(long long **result, int a2)
{
  if (a2)
  {
    v2 = *result;
    long long v3 = cmark_set_default_skip_chars_default_skip_chars;
    long long v4 = unk_267C85768;
    long long v5 = unk_267C85788;
    v2[2] = xmmword_267C85778;
    v2[3] = v5;
    long long *v2 = v3;
    v2[1] = v4;
    long long v6 = xmmword_267C85798;
    long long v7 = unk_267C857A8;
    long long v8 = unk_267C857C8;
    v2[6] = xmmword_267C857B8;
    v2[7] = v8;
    v2[4] = v6;
    v2[5] = v7;
    long long v9 = xmmword_267C857D8;
    long long v10 = unk_267C857E8;
    long long v11 = unk_267C85808;
    v2[10] = xmmword_267C857F8;
    v2[11] = v11;
    v2[8] = v9;
    v2[9] = v10;
    long long v12 = xmmword_267C85818;
    long long v13 = unk_267C85828;
    long long v14 = unk_267C85848;
    v2[14] = xmmword_267C85838;
    v2[15] = v14;
    v2[12] = v12;
    v2[13] = v13;
  }
  else
  {
    void *result = &cmark_set_default_skip_chars_default_skip_chars;
  }
  return result;
}

uint64_t S_process_line(uint64_t a1, const void *a2, int a3, int a4)
{
  v164 = (_DWORD *)(a1 + 64);
  cmark_strbuf_clear(a1 + 64);
  if ((*(unsigned char *)(a1 + 121) & 2) != 0) {
    cmark_utf8proc_check(v164, (uint64_t)a2, a3);
  }
  else {
    cmark_strbuf_put(v164, a2, a3);
  }
  v165 = 0;
  uint64_t v166 = 0;
  int v8 = *(_DWORD *)(a1 + 84);
  if (a4)
  {
    if (!v8
      || ((int v9 = *(unsigned __int8 *)(v8 + *(void *)(a1 + 72) - 1), v9 != 10) ? (v10 = v9 == 13) : (v10 = 1), !v10))
    {
      cmark_strbuf_putc((uint64_t)v164, 10);
      int v8 = *(_DWORD *)(a1 + 84);
    }
  }
  *(void *)(a1 + 36) = 0;
  long long v11 = (int *)(a1 + 36);
  *(_WORD *)(a1 + 60) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 52) = 0;
  long long v12 = *(unsigned __int8 **)(a1 + 72);
  v165 = v12;
  uint64_t v166 = v8;
  int v13 = *(_DWORD *)(a1 + 32);
  if (!v13 && v8 >= 3)
  {
    int v14 = *(unsigned __int16 *)v12;
    int v15 = v12[2];
    if (v14 == 48111 && v15 == 191) {
      *long long v11 = 3;
    }
  }
  *(_DWORD *)(a1 + 32) = v13 + 1;
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v17 + 56);
  if (!v18 || (*(_WORD *)(v18 + 102) & 1) == 0)
  {
LABEL_21:
    int v161 = 1;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v17 = v18;
    int v117 = *(unsigned __int16 *)(v18 + 100);
    S_find_first_nonspace(a1, (uint64_t *)&v165);
    v118 = *(unsigned int (***)(void))(v17 + 112);
    if (!v118) {
      break;
    }
    if (!*v118 || !(*v118)()) {
      goto LABEL_227;
    }
LABEL_178:
    uint64_t v18 = *(void *)(v17 + 56);
    if (!v18 || (*(_WORD *)(v18 + 102) & 1) == 0) {
      goto LABEL_21;
    }
  }
  switch(v117)
  {
    case 32770:
      int v119 = *(_DWORD *)(a1 + 56);
      if (v119 > 3) {
        goto LABEL_227;
      }
      v120 = v165;
      if (v165[*(int *)(a1 + 44)] != 62) {
        goto LABEL_227;
      }
      S_advance_offset(a1, (uint64_t *)&v165, v119 + 1, 1);
      int v121 = v120[*(int *)(a1 + 36)];
      if (v121 != 32 && v121 != 9) {
        goto LABEL_178;
      }
      uint64_t v123 = a1;
      int v124 = 1;
      goto LABEL_223;
    case 32772:
      int v124 = *(_DWORD *)(v17 + 152) + *(_DWORD *)(v17 + 148);
      if (*(_DWORD *)(a1 + 56) >= v124)
      {
        uint64_t v123 = a1;
LABEL_223:
        int v134 = 1;
        goto LABEL_226;
      }
      if (*(unsigned char *)(a1 + 60) && *(void *)(v17 + 48))
      {
LABEL_225:
        int v124 = *(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 36);
        uint64_t v123 = a1;
        int v134 = 0;
LABEL_226:
        S_advance_offset(v123, (uint64_t *)&v165, v124, v134);
        goto LABEL_178;
      }
LABEL_227:
      uint64_t v17 = *(void *)(v17 + 40);
      if (!v17) {
        goto LABEL_264;
      }
      int v161 = 0;
LABEL_22:
      uint64_t v19 = *(void *)(a1 + 24);
      uint64_t v20 = v17;
      if ((*(unsigned char *)(a1 + 122) & 4) != 0) {
        goto LABEL_163;
      }
      unint64_t v21 = 0;
      BOOL v22 = *(unsigned __int16 *)(v19 + 100) == 32776;
      int v23 = *(unsigned __int16 *)(v17 + 100);
      uint64_t v20 = v17;
      while ((v23 - 32775) <= 0xFFFFFFFD)
      {
        BOOL v162 = v22;
        ++v21;
        S_find_first_nonspace(a1, (uint64_t *)&v165);
        int v24 = *(_DWORD *)(a1 + 56);
        if (v24 > 3) {
          goto LABEL_26;
        }
        v44 = v165;
        uint64_t v45 = *(int *)(a1 + 44);
        if (v165[v45] == 62)
        {
          int v46 = v45 + 1;
          S_advance_offset(a1, (uint64_t *)&v165, v45 + 1 - *(_DWORD *)(a1 + 36), 0);
          int v47 = v44[*(int *)(a1 + 36)];
          if (v47 == 32 || v47 == 9) {
            S_advance_offset(a1, (uint64_t *)&v165, 1, 1);
          }
          uint64_t v49 = add_child(a1, v20, 32770, v46);
          goto LABEL_64;
        }
        int v159 = *(_DWORD *)(a1 + 56);
        int v50 = _scan_at((uint64_t (*)(uint64_t))_scan_atx_heading_start, (uint64_t *)&v165, v45);
        int v51 = *(_DWORD *)(a1 + 44);
        if (v50)
        {
          int v52 = v50;
          unint64_t v53 = v21;
          S_advance_offset(a1, (uint64_t *)&v165, v51 + v50 - *(_DWORD *)(a1 + 36), 0);
          uint64_t v20 = add_child(a1, v20, 32777, v51 + 1);
          v54 = v165;
          int v55 = v166;
          v56 = memchr(&v165[*(int *)(a1 + 44)], 35, (int)v166 - (uint64_t)*(int *)(a1 + 44));
          LODWORD(v57) = 0;
          int v58 = v56 - v54;
          if (!v56) {
            int v58 = v55;
          }
          if (v54[v58] == 35)
          {
            uint64_t v57 = 0;
            uint64_t v59 = (uint64_t)&v54[v58 + 1];
            do
              int v60 = *(unsigned __int8 *)(v59 + v57++);
            while (v60 == 35);
          }
          *(_DWORD *)(v20 + 144) = v57;
          *(unsigned char *)(v20 + 148) = 0;
          *(_DWORD *)(v20 + 96) = v52;
LABEL_72:
          unint64_t v21 = v53;
          goto LABEL_144;
        }
        int v61 = _scan_at((uint64_t (*)(uint64_t))_scan_open_code_fence, (uint64_t *)&v165, *(_DWORD *)(a1 + 44));
        int v62 = *(_DWORD *)(a1 + 44);
        if (v61)
        {
          int v63 = v61;
          uint64_t v64 = add_child(a1, v20, 32773, v62 + 1);
          uint64_t v20 = v64;
          *(unsigned char *)(v64 + 179) = 1;
          *(unsigned char *)(v64 + 178) = v165[*(int *)(a1 + 44)];
          if (v63 >= 255) {
            char v65 = -1;
          }
          else {
            char v65 = v63;
          }
          *(unsigned char *)(v64 + 176) = v65;
          *(unsigned char *)(v64 + 177) = *(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 36);
          *(void *)(v64 + 144) = &unk_21C3B4D0E;
          *(void *)(v64 + 152) = 0;
          int v66 = *(_DWORD *)(a1 + 44) + v63 - *(_DWORD *)(a1 + 36);
          goto LABEL_78;
        }
        int v67 = _scan_at((uint64_t (*)(uint64_t))_scan_html_block_start, (uint64_t *)&v165, v62);
        if (v67)
        {
LABEL_80:
          uint64_t v20 = add_child(a1, v20, 32774, *(_DWORD *)(a1 + 44) + 1);
          *(_DWORD *)(v20 + 144) = v67;
          goto LABEL_144;
        }
        int v76 = *(_DWORD *)(a1 + 44);
        if (v23 == 32776)
        {
          int v77 = _scan_at((uint64_t (*)(uint64_t))_scan_setext_heading_line, (uint64_t *)&v165, v76);
          if (v77)
          {
            int v78 = v77;
            if (resolve_reference_link_definitions(a1, v20))
            {
              *(_WORD *)(v20 + 100) = -32759;
              *(_DWORD *)(v20 + 144) = v78;
              *(unsigned char *)(v20 + 148) = 1;
              goto LABEL_93;
            }
            goto LABEL_144;
          }
          if (!v161) {
            goto LABEL_153;
          }
        }
        else
        {
          int v67 = _scan_at((uint64_t (*)(uint64_t))_scan_html_block_start_7, (uint64_t *)&v165, v76);
          if (v67) {
            goto LABEL_80;
          }
        }
        int v85 = *(_DWORD *)(a1 + 44);
        if (*(_DWORD *)(a1 + 52) > v85) {
          goto LABEL_153;
        }
        int v86 = v165[v85];
        if ((v86 - 42) > 0x35 || ((1 << (v86 - 42)) & 0x20000000000009) == 0) {
          goto LABEL_152;
        }
        uint64_t v87 = v85 + 1;
        int v88 = v165[v87];
        if (!v165[v87])
        {
          ++v85;
          goto LABEL_152;
        }
        v89 = &v165[v87 + 1];
        int v90 = 1;
        int v91 = v85 + 1;
        while (2)
        {
          if (v88 == v86)
          {
            ++v90;
            goto LABEL_125;
          }
          if (v88 == 32 || v88 == 9)
          {
LABEL_125:
            ++v91;
            int v92 = *v89++;
            int v88 = v92;
            if (!v92) {
              break;
            }
            continue;
          }
          break;
        }
        if (v90 < 3 || v88 != 13 && v88 != 10)
        {
          int v85 = v91;
LABEL_152:
          *(_DWORD *)(a1 + 52) = v85;
LABEL_153:
          int v24 = v159;
          if ((*(unsigned char *)(a1 + 121) & 0x20) != 0 && v21 <= 0x63)
          {
            int v98 = _scan_at((uint64_t (*)(uint64_t))_scan_footnote_definition, (uint64_t *)&v165, *(_DWORD *)(a1 + 44));
            int v24 = v159;
            if (v98)
            {
              int v99 = v98;
              unint64_t v53 = v21;
              uint64_t v100 = *(int *)(a1 + 44);
              v101 = &v165[v100 + 2];
              uint64_t v102 = v98 - 3;
              if (v101[v102] == 93)
              {
                LODWORD(v103) = v98 - 2;
                int v104 = v98 - 2;
              }
              else
              {
                uint64_t v103 = v98 - 2;
                v105 = &v165[v100];
                do
                {
                  int v104 = v102;
                  int v106 = v105[v103];
                  LODWORD(v102) = v102 - 1;
                  --v103;
                }
                while (v106 != 93);
              }
              size_t v107 = v102;
              v108 = (void *)(**(uint64_t (***)(void, uint64_t))a1)((int)v103, 1);
              if (v104 >= 2)
              {
                v109 = v108;
                memcpy(v108, v101, v107);
                v108 = v109;
              }
              *((unsigned char *)v108 + (int)v107) = 0;
              uint64_t v110 = v107 | 0x100000000;
              v111 = v108;
              S_advance_offset(a1, (uint64_t *)&v165, *(_DWORD *)(a1 + 44) + v99 - *(_DWORD *)(a1 + 36), 0);
              uint64_t v20 = add_child(a1, v20, 32779, v99 + *(_DWORD *)(a1 + 44) + 1);
              *(void *)(v20 + 144) = v111;
              *(void *)(v20 + 152) = v110;
              *(_DWORD *)(v20 + 96) = v99;
              goto LABEL_72;
            }
          }
LABEL_26:
          int v160 = v23;
          if (v23 != 32771 && v24 > 3 || *(int *)(a1 + 56) > 3 || v21 > 0x63) {
            goto LABEL_136;
          }
          v153 = *(uint64_t (***)(uint64_t, uint64_t))a1;
          uint64_t v25 = *(int *)(a1 + 44);
          int v155 = *(unsigned __int16 *)(v20 + 100);
          int v157 = v24;
          unsigned int v26 = v165[v25];
          if (v26 > 0x2D || ((1 << v26) & 0x2C0000000000) == 0)
          {
            uint64_t v152 = *(int *)(a1 + 44);
            BOOL v68 = cmark_isdigit(v26);
            int v24 = v157;
            if (!v68) {
              goto LABEL_136;
            }
            int v69 = 0;
            uint64_t v70 = v152;
            int v71 = -8;
            while (1)
            {
              int v69 = v165[v70] + 10 * v69 - 48;
              if (!v71) {
                break;
              }
              uint64_t v72 = v70 + 1;
              BOOL v73 = cmark_isdigit(v165[v70 + 1]);
              ++v71;
              uint64_t v70 = v72;
              if (!v73)
              {
                int v74 = v152 + v71 + 7;
                int v75 = v152 + v71 + 8;
                goto LABEL_95;
              }
            }
            int v74 = v152 + 8;
            int v75 = v152 + 9;
LABEL_95:
            int v24 = v157;
            if (v155 == 32776 && v69 != 1) {
              goto LABEL_136;
            }
            int v79 = v165[v75];
            if (v79 != 46 && v79 != 41) {
              goto LABEL_136;
            }
            uint64_t v151 = v74 + 2;
            BOOL v80 = cmark_isspace(v165[v151]);
            int v24 = v157;
            if (!v80) {
              goto LABEL_136;
            }
            if (v155 != 32776) {
              goto LABEL_132;
            }
            v81 = &v165[v151];
            do
            {
              while (1)
              {
                int v83 = *v81++;
                int v82 = v83;
                if (v83 > 12) {
                  break;
                }
                if (v82 != 9)
                {
                  if (v82 != 10) {
                    goto LABEL_132;
                  }
                  goto LABEL_136;
                }
              }
            }
            while (v82 == 32);
            if (v82 == 13) {
              goto LABEL_136;
            }
LABEL_132:
            uint64_t v93 = (*v153)(1, 24);
            int v24 = v157;
            *(void *)uint64_t v93 = 2;
            *(_WORD *)(v93 + 20) = 0;
            *(_DWORD *)(v93 + 12) = v69;
            if (v79 == 46) {
              int v94 = 1;
            }
            else {
              int v94 = 2;
            }
            *(_DWORD *)(v93 + 16) = v94;
            if (v151 == v152)
            {
LABEL_136:
              if (v24 >= 4 && !v162 && !*(unsigned char *)(a1 + 60))
              {
                S_advance_offset(a1, (uint64_t *)&v165, 4, 1);
                uint64_t v20 = add_child(a1, v20, 32773, *(_DWORD *)(a1 + 36) + 1);
                *(_DWORD *)(v20 + 176) = 0;
                *(void *)(v20 + 144) = &unk_21C3B4D0E;
                *(void *)(v20 + 152) = 0;
                goto LABEL_144;
              }
              v95 = *(void **)(a1 + 136);
              if (!v95) {
                break;
              }
              while (1)
              {
                v96 = *(uint64_t (**)(void))(v95[1] + 8);
                if (v96)
                {
                  uint64_t v49 = v96();
                  if (v49) {
                    break;
                  }
                }
                v95 = (void *)*v95;
                if (!v95) {
                  goto LABEL_163;
                }
              }
LABEL_64:
              uint64_t v20 = v49;
              goto LABEL_144;
            }
            uint64_t v34 = v93;
            v154 = (_DWORD *)(v93 + 16);
            unint64_t v158 = v21;
            uint64_t v163 = v19;
            int v33 = v151 - v152;
          }
          else
          {
            uint64_t v28 = v25 + 1;
            BOOL v29 = cmark_isspace(v165[v25 + 1]);
            int v24 = v157;
            if (!v29) {
              goto LABEL_136;
            }
            if (v155 == 32776)
            {
              v30 = &v165[v28];
              do
              {
                do
                {
                  int v32 = *v30++;
                  int v31 = v32;
                }
                while (v32 == 9);
              }
              while (v31 == 32);
              if (v31 == 10) {
                goto LABEL_136;
              }
            }
            unint64_t v158 = v21;
            uint64_t v163 = v19;
            int v33 = 1;
            uint64_t v34 = (*v153)(1, 24);
            *(void *)uint64_t v34 = 1;
            *(unsigned char *)(v34 + 20) = v26;
            *(_DWORD *)(v34 + 16) = 0;
            v154 = (_DWORD *)(v34 + 16);
            *(_DWORD *)(v34 + 12) = 0;
            *(unsigned char *)(v34 + 21) = 0;
          }
          int v35 = v33;
          S_advance_offset(a1, (uint64_t *)&v165, *(_DWORD *)(a1 + 44) + v33 - *(_DWORD *)(a1 + 36), 0);
          int v36 = 0;
          char v156 = *(unsigned char *)(a1 + 61);
          int v37 = *(_DWORD *)(a1 + 36);
          int v38 = *(_DWORD *)(a1 + 40);
          v39 = v165;
          while (1)
          {
            int v40 = v39[*v11];
            if (v40 != 32 && v40 != 9) {
              break;
            }
            S_advance_offset(a1, (uint64_t *)&v165, 1, 1);
            int v36 = *(_DWORD *)(a1 + 40) - v38;
            if (v36 >= 6) {
              goto LABEL_48;
            }
          }
          if ((v36 - 5) >= 0xFFFFFFFC)
          {
            if (v40 != 13 && v40 != 10)
            {
              *(_DWORD *)(v34 + 8) = v36 + v35;
              uint64_t v19 = v163;
              unint64_t v21 = v158;
              goto LABEL_50;
            }
LABEL_48:
            *(_DWORD *)(v34 + 8) = v35 + 1;
            *(_DWORD *)(a1 + 36) = v37;
            *(_DWORD *)(a1 + 40) = v38;
            *(unsigned char *)(a1 + 61) = v156;
            uint64_t v19 = v163;
            unint64_t v21 = v158;
          }
          else
          {
            *(_DWORD *)(v34 + 8) = v35 + 1;
            *(_DWORD *)(a1 + 36) = v37;
            *(_DWORD *)(a1 + 40) = v38;
            *(unsigned char *)(a1 + 61) = v156;
            uint64_t v19 = v163;
            unint64_t v21 = v158;
            if (v36 < 1)
            {
LABEL_50:
              *(_DWORD *)(v34 + 4) = *(_DWORD *)(a1 + 56);
              if (v160 != 32771
                || *(_DWORD *)(v20 + 144) != *(_DWORD *)v34
                || *(_DWORD *)(v20 + 160) != *v154
                || *(unsigned __int8 *)(v20 + 164) != *(unsigned __int8 *)(v34 + 20))
              {
                uint64_t v20 = add_child(a1, v20, 32771, *(_DWORD *)(a1 + 44) + 1);
                uint64_t v42 = *(void *)(v34 + 16);
                *(_OWORD *)(v20 + 144) = *(_OWORD *)v34;
                *(void *)(v20 + 160) = v42;
              }
              uint64_t v20 = add_child(a1, v20, 32772, *(_DWORD *)(a1 + 44) + 1);
              long long v43 = *(_OWORD *)v34;
              *(void *)(v20 + 160) = *(void *)(v34 + 16);
              *(_OWORD *)(v20 + 144) = v43;
              (*(void (**)(uint64_t))(*(void *)a1 + 16))(v34);
              goto LABEL_144;
            }
          }
          S_advance_offset(a1, (uint64_t *)&v165, 1, 1);
          goto LABEL_50;
        }
        if (v91 - v85 == -1) {
          goto LABEL_153;
        }
        uint64_t v20 = add_child(a1, v20, 32778, v87);
LABEL_93:
        int v66 = v166 + ~*(_DWORD *)(a1 + 36);
LABEL_78:
        S_advance_offset(a1, (uint64_t *)&v165, v66, 0);
LABEL_144:
        BOOL v22 = 0;
        int v23 = *(unsigned __int16 *)(v20 + 100);
        if ((v23 - 32773) > 4 || ((1 << (v23 - 5)) & 0x19) == 0) {
          continue;
        }
        break;
      }
LABEL_163:
      if (v19 == *(void *)(a1 + 24))
      {
        S_find_first_nonspace(a1, (uint64_t *)&v165);
        int v112 = *(unsigned __int8 *)(a1 + 60);
        if (*(unsigned char *)(a1 + 60))
        {
          uint64_t v113 = *(void *)(v20 + 56);
          if (v113) {
            *(_WORD *)(v113 + 102) |= 2u;
          }
        }
        if (!v112 || (int v114 = *(unsigned __int16 *)(v20 + 100), v114 == 32770) || v114 == 32777 || v114 == 32778)
        {
LABEL_174:
          __int16 v115 = 0;
          __int16 v116 = *(_WORD *)(v20 + 102) & 0xFFFD;
        }
        else
        {
          if (v114 != 32772)
          {
            if (v114 == 32773 && *(unsigned char *)(v20 + 179)) {
              goto LABEL_174;
            }
LABEL_230:
            __int16 v116 = *(_WORD *)(v20 + 102) & 0xFFFD;
            goto LABEL_231;
          }
          if (*(void *)(v20 + 48)) {
            goto LABEL_230;
          }
          __int16 v116 = *(_WORD *)(v20 + 102) & 0xFFFD;
          if (*(_DWORD *)(v20 + 80) == *(_DWORD *)(a1 + 32)) {
            __int16 v115 = 0;
          }
          else {
LABEL_231:
          }
            __int16 v115 = 2;
        }
        *(_WORD *)(v20 + 102) = v115 | v116;
        for (uint64_t i = *(void *)(v20 + 40); i; uint64_t i = *(void *)(i + 40))
          *(_WORD *)(i + 102) &= ~2u;
        uint64_t v136 = *(void *)(a1 + 24);
        if (v20 == v17
          && v136 != v17
          && (!v112 || (*(unsigned char *)(a1 + 122) & 0xC) != 0)
          && *(unsigned __int16 *)(v136 + 100) == 32776)
        {
          add_line(*(void *)(a1 + 24), (uint64_t)&v165, a1);
          goto LABEL_264;
        }
        while (v136 != v17)
        {
          uint64_t v136 = finalize(a1, v136);
          *(void *)(a1 + 24) = v136;
          if (!v136) {
            S_process_line_cold_4();
          }
        }
        int v137 = *(unsigned __int16 *)(v20 + 100);
        if (v137 == 32774)
        {
          add_line(v20, (uint64_t)&v165, a1);
          int v138 = *(_DWORD *)(v20 + 144) - 1;
          if (v138 <= 4
            && _scan_at((uint64_t (*)(uint64_t))*(&off_26CC7A720 + v138), (uint64_t *)&v165, *(_DWORD *)(a1 + 44)))
          {
            uint64_t v139 = finalize(a1, v20);
            if (!*(void *)(a1 + 24)) {
              S_process_line_cold_3();
            }
            uint64_t v20 = v139;
          }
        }
        else
        {
          if (v137 == 32773) {
            goto LABEL_262;
          }
          if (!*(unsigned char *)(a1 + 60) || (*(unsigned char *)(a1 + 122) & 0xC) != 0)
          {
            if ((v137 & 0xFFFE) == 0x8008)
            {
              if (v137 == 32777 && !*(unsigned char *)(v20 + 148))
              {
                if (HIDWORD(v166)) {
                  S_process_line_cold_1();
                }
                int v145 = v166;
                if ((int)v166 >= 1)
                {
                  while (1)
                  {
                    BOOL v146 = cmark_isspace(v165[v145 - 1]);
                    int v145 = v166 - 1;
                    BOOL v147 = (int)v166 <= 1;
                    if (!v146) {
                      break;
                    }
                    LODWORD(v166) = v166 - 1;
                    if (v147) {
                      goto LABEL_250;
                    }
                  }
                  if ((int)v166 > 1)
                  {
                    int v148 = 0;
                    while (1)
                    {
                      int v149 = v165[v145];
                      if (v149 != 35) {
                        break;
                      }
                      ++v148;
                      BOOL v147 = v145-- <= 0;
                      if (v147) {
                        goto LABEL_250;
                      }
                    }
                    if (v148)
                    {
                      if (v149 == 32 || v149 == 9)
                      {
                        LODWORD(v166) = v145;
                        if (HIDWORD(v166)) {
                          S_process_line_cold_1();
                        }
                        if (v145)
                        {
                          do
                          {
                            if (!cmark_isspace(v165[v145 - 1])) {
                              break;
                            }
                            int v145 = v166 - 1;
                            BOOL v147 = (int)v166 <= 1;
                            LODWORD(v166) = v166 - 1;
                          }
                          while (!v147);
                        }
                      }
                    }
                  }
                }
              }
LABEL_250:
              if ((*(unsigned char *)(a1 + 122) & 0xC) == 0) {
LABEL_261:
              }
                S_advance_offset(a1, (uint64_t *)&v165, *(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 36), 0);
            }
            else
            {
              if ((*(unsigned char *)(a1 + 122) & 0xC) == 0)
              {
                uint64_t v20 = add_child(a1, v20, 32776, *(_DWORD *)(a1 + 44) + 1);
                goto LABEL_261;
              }
              uint64_t v20 = add_child(a1, v20, 32776, *(_DWORD *)(a1 + 36) + 1);
            }
LABEL_262:
            add_line(v20, (uint64_t)&v165, a1);
          }
        }
        *(void *)(a1 + 24) = v20;
      }
LABEL_264:
      int v140 = v166;
      *(_DWORD *)(a1 + 88) = v166;
      if (v140)
      {
        v141 = v165;
        uint64_t v142 = v140 - 1;
        if (v165[v142] != 10 || (*(_DWORD *)(a1 + 88) = v142, --v140, v142))
        {
          uint64_t v143 = v140 - 1;
          if (v141[v143] == 13) {
            *(_DWORD *)(a1 + 88) = v143;
          }
        }
      }
      return cmark_strbuf_clear((uint64_t)v164);
    case 32773:
      int v125 = *(_DWORD *)(a1 + 56);
      if (*(unsigned char *)(v17 + 179))
      {
        if (v125 <= 3 && (uint64_t v126 = *(int *)(a1 + 44), v165[v126] == *(unsigned __int8 *)(v17 + 178))) {
          int v127 = _scan_at((uint64_t (*)(uint64_t))_scan_close_code_fence, (uint64_t *)&v165, v126);
        }
        else {
          int v127 = 0;
        }
        if (v127 >= *(unsigned __int8 *)(v17 + 176))
        {
          S_advance_offset(a1, (uint64_t *)&v165, v127, 0);
          *(void *)(a1 + 24) = finalize(a1, v17);
          goto LABEL_264;
        }
        if (*(unsigned char *)(v17 + 177))
        {
          v130 = v165;
          int v131 = *(unsigned __int8 *)(v17 + 177) + 1;
          do
          {
            int v132 = v130[*v11];
            if (v132 != 32 && v132 != 9) {
              break;
            }
            S_advance_offset(a1, (uint64_t *)&v165, 1, 1);
            --v131;
          }
          while (v131 > 1);
        }
        goto LABEL_178;
      }
      if (v125 >= 4)
      {
LABEL_222:
        uint64_t v123 = a1;
        int v124 = 4;
        goto LABEL_223;
      }
      if (!*(unsigned char *)(a1 + 60)) {
        goto LABEL_227;
      }
      goto LABEL_225;
    case 32774:
      int v128 = *(_DWORD *)(v17 + 144);
      if ((v128 - 8) <= 0xFFFFFFF8) {
        S_process_line_cold_5();
      }
      if ((v128 - 1) < 5) {
        goto LABEL_178;
      }
      if ((v128 - 6) <= 1) {
        goto LABEL_201;
      }
      goto LABEL_227;
    case 32776:
LABEL_201:
      if (*(unsigned char *)(a1 + 60)) {
        goto LABEL_227;
      }
      goto LABEL_178;
    case 32777:
      goto LABEL_227;
    case 32779:
      if (*(int *)(a1 + 56) >= 4) {
        goto LABEL_222;
      }
      if ((int)v166 < 1) {
        goto LABEL_227;
      }
      int v129 = *v165;
      if (v129 != 10 && (v129 != 13 || v165[1] != 10)) {
        goto LABEL_227;
      }
      goto LABEL_178;
    default:
      goto LABEL_178;
  }
}

_DWORD *cmark_strbuf_put(_DWORD *result, const void *a2, int a3)
{
  if (a3 >= 1)
  {
    long long v5 = result;
    cmark_strbuf_grow((uint64_t)result, result[5] + a3);
    result = memmove((void *)(*((void *)v5 + 1) + (int)v5[5]), a2, a3);
    uint64_t v6 = (int)v5[5] + (uint64_t)a3;
    v5[5] = v6;
    *(unsigned char *)(*((void *)v5 + 1) + v6) = 0;
  }
  return result;
}

uint64_t cmark_strbuf_clear(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  if (*(int *)(result + 16) >= 1) {
    **(unsigned char **)(result + 8) = 0;
  }
  return result;
}

__n128 cmark_parser_reset(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 120);
  uint64_t v3 = *(void *)a1;
  long long v7 = *(_OWORD *)(a1 + 136);
  __n128 v8 = *(__n128 *)(a1 + 160);
  cmark_parser_dispose(a1);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)a1 = v3;
  cmark_strbuf_init(v3, (uint64_t *)(a1 + 64), 256);
  cmark_strbuf_init(*(void *)a1, (uint64_t *)(a1 + 96), 0);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 184);
  cmark_strbuf_init(v4, (uint64_t *)v5, 32);
  *(_DWORD *)(v5 + 100) = 98305;
  *(void *)(v5 + 80) = 0x100000001;
  *(_DWORD *)(v5 + 88) = 1;
  *(void *)(a1 + 8) = cmark_reference_map_new(*(uint64_t (***)(uint64_t, uint64_t))a1);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 136) = v7;
  *(_DWORD *)(a1 + 120) = v2;
  __n128 result = v8;
  *(__n128 *)(a1 + 160) = v8;
  return result;
}

uint64_t cmark_strbuf_grow(uint64_t result, int a2)
{
  if (a2 <= 0) {
    cmark_strbuf_grow_cold_1();
  }
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 16);
  if (v3 <= a2)
  {
    if (a2 >> 30) {
      cmark_strbuf_grow_cold_2();
    }
    unsigned int v4 = ((a2 + (a2 >> 1)) & 0xFFFFFFF8) + 8;
    if (v3) {
      uint64_t v5 = *(void *)(result + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    __n128 result = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 8))(v5, ((a2 + (a2 >> 1)) & 0xFFFFFFF8) + 8);
    *(void *)(v2 + 8) = result;
    *(_DWORD *)(v2 + 16) = v4;
  }
  return result;
}

uint64_t cmark_strbuf_init(uint64_t result, uint64_t *a2, int a3)
{
  *a2 = result;
  a2[1] = (uint64_t)&cmark_strbuf__initbuf;
  a2[2] = 0;
  if (a3 >= 1) {
    return cmark_strbuf_grow((uint64_t)a2, a3);
  }
  return result;
}

void *xrealloc(void *a1, size_t a2)
{
  __n128 result = malloc_type_realloc(a1, a2, 0xC424ACAFuLL);
  if (!result) {
    xrealloc_cold_1();
  }
  return result;
}

uint64_t cmark_parser_dispose(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2) {
    cmark_node_free(v2);
  }
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    return cmark_map_free(result);
  }
  return result;
}

uint64_t (***cmark_reference_map_new(uint64_t (**a1)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  return cmark_map_new(a1, (uint64_t (**)(uint64_t, uint64_t))reference_free);
}

uint64_t (***cmark_map_new(uint64_t (**a1)(uint64_t, uint64_t), uint64_t (**a2)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t result = (uint64_t (***)(uint64_t, uint64_t))(*a1)(1, 56);
  void *result = a1;
  result[5] = (uint64_t (**)(uint64_t, uint64_t))0xFFFFFFFFLL;
  result[6] = a2;
  return result;
}

uint64_t cmark_map_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 8);
    if (v2)
    {
      do
      {
        int v3 = (void *)*v2;
        (*(void (**)(uint64_t))(v1 + 48))(v1);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    (*(void (**)(void, void *))(*(void *)v1 + 16))(*(void *)(v1 + 16), v2);
    unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 16);
    return v4(v1);
  }
  return result;
}

uint64_t S_find_first_nonspace(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(int *)(result + 44);
  int v3 = *(_DWORD *)(result + 36);
  if ((int)v2 <= v3)
  {
    int v5 = *(_DWORD *)(result + 40);
    if (v5 <= 0) {
      int v10 = -(-v5 & 3);
    }
    else {
      int v10 = *(_DWORD *)(result + 40) & 3;
    }
    int v11 = 4 - v10;
    *(_DWORD *)(result + 44) = v3;
    *(_DWORD *)(result + 48) = v5;
    uint64_t v6 = *a2;
    int v4 = v5;
    while (1)
    {
      while (1)
      {
        uint64_t v2 = v3;
        int v12 = *(unsigned __int8 *)(v6 + v3);
        if (v12 != 9) {
          break;
        }
        int v3 = v2 + 1;
        v4 += v11;
        *(_DWORD *)(result + 44) = v2 + 1;
        *(_DWORD *)(result + 48) = v4;
        int v11 = 4;
      }
      if (v12 != 32) {
        break;
      }
      int v3 = v2 + 1;
      ++v4;
      *(_DWORD *)(result + 44) = v2 + 1;
      *(_DWORD *)(result + 48) = v4;
      if (!--v11) {
        int v11 = 4;
      }
    }
  }
  else
  {
    int v4 = *(_DWORD *)(result + 48);
    int v5 = *(_DWORD *)(result + 40);
    uint64_t v6 = *a2;
  }
  *(_DWORD *)(result + 56) = v4 - v5;
  int v7 = *(unsigned __int8 *)(v6 + v2);
  BOOL v9 = v7 == 10 || v7 == 13;
  *(unsigned char *)(result + 60) = v9;
  return result;
}

uint64_t cmark_parser_finish(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = a1 + 96;
  int v4 = *(_DWORD *)(a1 + 116);
  if (v4)
  {
    S_process_line(a1, *(const void **)(a1 + 104), v4, (*(_DWORD *)(a1 + 120) & 0xC0000) == 0);
    cmark_strbuf_clear(v3);
    uint64_t v1 = *(void *)(a1 + 16);
  }
  if (*(void *)(a1 + 24) != v1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    do
    {
      uint64_t v1 = finalize(a1, v1);
      *(void *)(a1 + 24) = v1;
    }
    while (v1 != *(void *)(a1 + 16));
  }
  finalize(a1, v1);
  unint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v5 <= 0x186A0) {
    unint64_t v5 = 100000;
  }
  *(void *)(v6 + 40) = v5;
  int v7 = *(_DWORD *)(a1 + 120);
  uint64_t v8 = cmark_iter_new(*(void *)(a1 + 16));
  cmark_manage_extensions_special_characters(a1, 1);
  int v9 = cmark_iter_next(v8);
  if (v9 != 1)
  {
    for (int i = v9; i != 1; int i = cmark_iter_next(v8))
    {
      uint64_t node = cmark_iter_get_node(v8);
      if (i == 2)
      {
        uint64_t v12 = node;
        uint64_t v13 = *(void *)(node + 112);
        if (v13)
        {
          int v14 = *(unsigned int (**)(void))(v13 + 88);
          if (v14)
          {
            if (!v14()) {
              continue;
            }
LABEL_17:
            cmark_parse_inlines((uint64_t (***)(uint64_t, uint64_t))a1, v12, v6, v7);
            continue;
          }
        }
        if ((*(_WORD *)(v12 + 100) & 0xFFFE) == 0x8008) {
          goto LABEL_17;
        }
      }
    }
  }
  cmark_manage_extensions_special_characters(a1, 0);
  cmark_iter_free(v8);
  if ((*(unsigned char *)(a1 + 121) & 0x20) != 0)
  {
    int v15 = cmark_footnote_map_new(*(uint64_t (***)(uint64_t, uint64_t))a1);
    uint64_t v16 = cmark_iter_new(*(void *)(a1 + 16));
    int v17 = cmark_iter_next(v16);
    if (v17 != 1)
    {
      for (int j = v17; j != 1; int j = cmark_iter_next(v16))
      {
        uint64_t v19 = cmark_iter_get_node(v16);
        if (j == 3 && *(unsigned __int16 *)(v19 + 100) == 32779) {
          cmark_footnote_create((uint64_t *)v15, v19);
        }
      }
    }
    cmark_iter_free(v16);
    uint64_t v20 = cmark_iter_new(*(void *)(a1 + 16));
    int v21 = cmark_iter_next(v20);
    if (v21 != 1)
    {
      int v22 = v21;
      int v23 = 0;
      do
      {
        uint64_t v24 = cmark_iter_get_node(v20);
        if (v22 == 3)
        {
          uint64_t v25 = v24;
          if (*(unsigned __int16 *)(v24 + 100) == 49163)
          {
            unsigned int v26 = (void *)(v24 + 144);
            v27 = cmark_map_lookup((uint64_t *)v15, v24 + 144);
            if (v27)
            {
              if (!*((_DWORD *)v27 + 10)) {
                *((_DWORD *)v27 + 10) = ++v23;
              }
              uint64_t v28 = *((void *)v27 + 4);
              *(void *)(v25 + 136) = v28;
              int v29 = *(_DWORD *)(v28 + 128) + 1;
              *(_DWORD *)(v28 + 128) = v29;
              *(_DWORD *)(v25 + 128) = v29;
              snprintf(__str, 0x20uLL, "%d", *((_DWORD *)v27 + 10));
              if (*(_DWORD *)(v25 + 156)) {
                (*(void (**)(void))(*(void *)a1 + 16))(*v26);
              }
              *unsigned int v26 = 0;
              *(void *)(v25 + 152) = 0;
              v43[0] = *(void *)a1;
              v43[1] = &cmark_strbuf__initbuf;
              uint64_t v44 = 0;
              cmark_strbuf_puts(v43, __str);
              uint64_t v30 = HIDWORD(v44);
              *(void *)(v25 + 144) = cmark_strbuf_detach((uint64_t)v43);
              *(void *)(v25 + 152) = v30 | 0x100000000;
            }
            else
            {
              uint64_t v31 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 184);
              cmark_strbuf_init(*(void *)a1, (uint64_t *)v31, 0);
              *(_WORD *)(v31 + 100) = -16383;
              *(void *)__str = *(void *)a1;
              int v46 = &cmark_strbuf__initbuf;
              uint64_t v47 = 0;
              cmark_strbuf_puts(__str, "[^");
              cmark_strbuf_put(__str, *(const void **)(v25 + 144), *(_DWORD *)(v25 + 152));
              cmark_strbuf_putc((uint64_t)__str, 93);
              uint64_t v32 = HIDWORD(v47);
              *(void *)(v31 + 144) = cmark_strbuf_detach((uint64_t)__str);
              *(void *)(v31 + 152) = v32 | 0x100000000;
              cmark_node_insert_after(v25, (void *)v31);
              cmark_node_free((void *)v25);
            }
          }
        }
        int v22 = cmark_iter_next(v20);
      }
      while (v22 != 1);
    }
    cmark_iter_free(v20);
    int v33 = v15[2];
    if (v33)
    {
      qsort(v33, (size_t)v15[3], 8uLL, (int (__cdecl *)(const void *, const void *))sort_footnote_by_ix);
      if (v15[3])
      {
        uint64_t v34 = 0;
        unsigned int v35 = 1;
        do
        {
          int v36 = v15[2][v34];
          if (*((_DWORD *)v36 + 10))
          {
            cmark_node_append_child(*(void **)(a1 + 16), *((void **)v36 + 4));
            *((void *)v36 + 4) = 0;
          }
          else
          {
            cmark_node_unlink(*((void **)v36 + 4));
          }
          uint64_t v34 = v35;
        }
        while ((unint64_t)v15[3] > v35++);
      }
    }
    cmark_unlink_footnotes_map(v15);
    cmark_map_free((uint64_t)v15);
  }
  cmark_consolidate_text_nodes(*(void **)(a1 + 16));
  cmark_strbuf_free(a1 + 64);
  cmark_strbuf_free(v3);
  for (k = *(void **)(a1 + 136); k; k = (void *)*k)
  {
    v39 = *(uint64_t (**)(void))(k[1] + 152);
    if (v39)
    {
      uint64_t v40 = v39();
      if (v40) {
        *(void *)(a1 + 16) = v40;
      }
    }
  }
  uint64_t v41 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  cmark_parser_reset(a1);
  return v41;
}

uint64_t cmark_iter_new(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(uint64_t (***)(void, void))result;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t))result)(1, 48);
    *(void *)uint64_t result = v2;
    *(void *)(result + 8) = v1;
    *(_DWORD *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 2;
    *(void *)(result + 40) = v1;
  }
  return result;
}

uint64_t cmark_iter_free(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t finalize(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 102);
  if ((v2 & 1) == 0) {
    finalize_cold_1();
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(_WORD *)(a2 + 102) = v2 & 0xFFFE;
  int v6 = *(_DWORD *)(a1 + 84);
  if (v6)
  {
    int v7 = *(unsigned __int16 *)(a2 + 100);
    if (v7 == 32769) {
      goto LABEL_12;
    }
    if (v7 == 32777)
    {
      if (*(unsigned char *)(a2 + 148)) {
        goto LABEL_12;
      }
    }
    else if (v7 == 32773 && *(unsigned char *)(a2 + 179))
    {
      goto LABEL_12;
    }
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 > *(_DWORD *)(a2 + 88))
    {
      *(_DWORD *)(a2 + 88) = v8 - 1;
      *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 88);
      goto LABEL_16;
    }
LABEL_12:
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 92) = v6;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = v6 - 1;
    if (*(unsigned char *)(v9 + v10) != 10 || (*(_DWORD *)(a2 + 92) = v10, --v6, v10))
    {
      uint64_t v11 = v6 - 1;
      if (*(unsigned char *)(v9 + v11) == 13) {
        *(_DWORD *)(a2 + 92) = v11;
      }
    }
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 88);
  int v7 = *(unsigned __int16 *)(a2 + 100);
LABEL_16:
  switch(v7)
  {
    case 32771:
      *(unsigned char *)(a2 + 165) = 1;
      uint64_t v12 = *(void *)(a2 + 48);
      if (!v12) {
        return v5;
      }
      while ((*(_WORD *)(v12 + 102) & 2) == 0 || !*(void *)(v12 + 24))
      {
        uint64_t v13 = *(void *)(v12 + 48);
        if (!v13) {
          goto LABEL_79;
        }
        uint64_t v14 = *(void *)(v12 + 24);
        do
        {
          if (!v14 && !*(void *)(v13 + 24)) {
            break;
          }
          uint64_t v16 = (_WORD *)(v13 + 102);
          __int16 v15 = *(_WORD *)(v13 + 102);
          if ((v15 & 4) == 0)
          {
            uint64_t v17 = v13;
            while (*(unsigned __int16 *)(v17 + 100) - 32771 <= 1)
            {
              uint64_t v17 = *(void *)(v17 + 56);
              if (!v17) {
                break;
              }
              *uint64_t v16 = v15 | 4;
              uint64_t v16 = (_WORD *)(v17 + 102);
              __int16 v15 = *(_WORD *)(v17 + 102);
              if ((v15 & 4) != 0) {
                goto LABEL_31;
              }
            }
            *uint64_t v16 = v15 | 4;
          }
LABEL_31:
          if ((v15 & 2) != 0) {
            goto LABEL_55;
          }
          uint64_t v13 = *(void *)(v13 + 24);
        }
        while (v13);
        if (*(unsigned char *)(a2 + 165))
        {
LABEL_79:
          uint64_t v12 = *(void *)(v12 + 24);
          if (v12) {
            continue;
          }
        }
        return v5;
      }
LABEL_55:
      *(unsigned char *)(a2 + 165) = 0;
      return v5;
    case 32773:
      uint64_t v18 = *(unsigned int *)(a2 + 20);
      if (!*(unsigned char *)(a2 + 179))
      {
        if ((int)v18 < 1)
        {
LABEL_63:
          cmark_strbuf_clear(a2);
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(a2 + 8);
          while (1)
          {
            unsigned int v31 = *(unsigned __int8 *)(v30 + (v18 + v29 - 1));
            BOOL v32 = v31 > 0x20;
            uint64_t v33 = (1 << v31) & 0x100002600;
            if (v32 || v33 == 0) {
              break;
            }
            --v29;
            if ((unint64_t)(v18 + v29 + 1) <= 1) {
              goto LABEL_63;
            }
          }
          if ((int)v18 >= (int)v18 + (int)v29)
          {
            uint64_t v37 = v18 + v30 - 1;
            while (1)
            {
              int v38 = *(unsigned __int8 *)(v37 + v29);
              if (v38 == 13 || v38 == 10) {
                break;
              }
              if (++v29 == 1) {
                goto LABEL_64;
              }
            }
            cmark_strbuf_truncate(a2, v18 + v29 - 1);
          }
        }
LABEL_64:
        cmark_strbuf_putc(a2, 10);
        goto LABEL_65;
      }
      if ((int)v18 < 1) {
LABEL_44:
      }
        finalize_cold_2();
      uint64_t v19 = 0;
      uint64_t v20 = *(unsigned __int8 **)(a2 + 8);
      while (1)
      {
        int v21 = v20[v19];
        if (v21 == 10 || v21 == 13) {
          break;
        }
        if (v18 == ++v19) {
          goto LABEL_44;
        }
      }
      v40[0] = *(void *)a1;
      v40[1] = &cmark_strbuf__initbuf;
      uint64_t v41 = 0;
      houdini_unescape_html_f(v40, v20, v19);
      cmark_strbuf_trim((uint64_t)v40);
      cmark_strbuf_unescape((uint64_t)v40);
      uint64_t v24 = HIDWORD(v41);
      *(void *)(a2 + 144) = cmark_strbuf_detach((uint64_t)v40);
      *(void *)(a2 + 152) = v24 | 0x100000000;
      uint64_t v25 = (unsigned char *)(*(void *)(a2 + 8) + v19);
      int v26 = *v25;
      BOOL v27 = v26 == 13;
      if (v26 == 13) {
        ++v25;
      }
      if (*v25 == 10) {
        int v28 = v27 + 1;
      }
      else {
        int v28 = v27;
      }
      cmark_strbuf_drop((void *)a2, v28 + v19);
LABEL_65:
      uint64_t v35 = *(unsigned int *)(a2 + 20);
      *(void *)(a2 + 160) = cmark_strbuf_detach(a2);
      *(void *)(a2 + 168) = v35 | 0x100000000;
      return v5;
    case 32774:
      uint64_t v23 = *(unsigned int *)(a2 + 20);
      *(void *)(a2 + 144) = cmark_strbuf_detach(a2);
      *(void *)(a2 + 152) = v23 | 0x100000000;
      return v5;
    case 32776:
      if ((resolve_reference_link_definitions(a1, a2) & 1) == 0 && (*(unsigned char *)(a1 + 122) & 0xC) == 0) {
        cmark_node_free((void *)a2);
      }
      return v5;
    default:
      return v5;
  }
}

uint64_t cmark_manage_extensions_special_characters(uint64_t result, int a2)
{
  __int16 v2 = *(void **)(result + 144);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = v2[1];
      for (int i = *(uint64_t ***)(v5 + 32); i; int i = (uint64_t **)*i)
      {
        BOOL v7 = *(unsigned char *)(v5 + 56) != 0;
        unsigned int v8 = *((unsigned __int8 *)i + 8);
        if (a2) {
          uint64_t result = cmark_inlines_add_special_character(v4, v8, v7);
        }
        else {
          uint64_t result = cmark_inlines_remove_special_character(v4, v8, v7);
        }
      }
      __int16 v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t cmark_inlines_remove_special_character(uint64_t result, unsigned int a2, int a3)
{
  *(unsigned char *)(*(void *)(result + 168) + a2) = 0;
  if (a3) {
    *(unsigned char *)(*(void *)(result + 160) + a2) = 0;
  }
  return result;
}

uint64_t cmark_inlines_add_special_character(uint64_t result, unsigned int a2, int a3)
{
  *(unsigned char *)(*(void *)(result + 168) + a2) = 1;
  if (a3) {
    *(unsigned char *)(*(void *)(result + 160) + a2) = 1;
  }
  return result;
}

uint64_t resolve_reference_link_definitions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)(a2 + 8);
  *(void *)&long long v12 = v3;
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  *((void *)&v12 + 1) = v4;
  if (v4)
  {
    do
    {
      if (*v3 == 91)
      {
        int v6 = cmark_parse_reference_inline(*(void *)a1, &v12, *(uint64_t **)(a1 + 8));
        if (v6) {
          goto LABEL_8;
        }
        unsigned int v4 = DWORD2(v12);
        if (!DWORD2(v12)) {
          break;
        }
      }
      if (*(unsigned char *)v12 != 94 || *(unsigned char *)(v12 + 1) != 91) {
        break;
      }
      int v6 = cmark_parse_reference_attributes_inline(*(void *)a1, &v12, *(uint64_t **)(a1 + 8));
      if (!v6)
      {
        unsigned int v4 = DWORD2(v12);
        break;
      }
LABEL_8:
      uint64_t v3 = (unsigned char *)(v12 + v6);
      *(void *)&long long v12 = v3;
      unsigned int v4 = DWORD2(v12) - v6;
      DWORD2(v12) -= v6;
    }
    while (DWORD2(v12));
  }
  cmark_strbuf_drop((void *)a2, *(_DWORD *)(a2 + 20) - v4);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  if ((int)v7 < 1) {
    return 0;
  }
  unsigned int v8 = *(unsigned __int8 **)(a2 + 8);
  while (1)
  {
    int v10 = *v8++;
    int v9 = v10;
    if (v10 > 12) {
      break;
    }
    if (v9 != 9)
    {
      uint64_t result = 0;
      if (v9 == 10) {
        return result;
      }
      return 1;
    }
LABEL_17:
    if (!--v7) {
      return 0;
    }
  }
  if (v9 == 32) {
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v9 == 13) {
    return result;
  }
  return 1;
}

void *postprocess(uint64_t a1, uint64_t (***a2)(uint64_t, uint64_t), void *a3)
{
  cmark_consolidate_text_nodes(a3);
  uint64_t v49 = a3;
  uint64_t v5 = cmark_iter_new((uint64_t)a3);
  int v51 = cmark_iter_next(v5);
  if (v51 == 1) {
    goto LABEL_2;
  }
  BOOL v7 = 0;
  v54 = a2;
  uint64_t v50 = v5;
LABEL_4:
  int v8 = v51;
  BOOL v52 = v7;
  do
  {
    uint64_t node = cmark_iter_get_node(v5);
    uint64_t v10 = node;
    if (v7)
    {
      if (v51 == 3)
      {
        BOOL v7 = *(unsigned __int16 *)(node + 100) != 49161;
        goto LABEL_79;
      }
LABEL_78:
      BOOL v7 = 1;
LABEL_79:
      int v51 = cmark_iter_next(v5);
      if (v51 == 1) {
        break;
      }
      goto LABEL_4;
    }
    if (v8 != 2) {
      goto LABEL_74;
    }
    int v11 = *(unsigned __int16 *)(node + 100);
    if (v11 != 49153)
    {
      if (v11 != 49161) {
        goto LABEL_74;
      }
      goto LABEL_78;
    }
    uint64_t v12 = *(void *)(node + 144);
    uint64_t v13 = *(unsigned int *)(node + 152);
    int v14 = *(_DWORD *)(node + 156);
    *(void *)(node + 152) = v13;
    if (!v13) {
      goto LABEL_70;
    }
    int v53 = v14;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = (int)v13;
    uint64_t v57 = v12 - 1;
    uint64_t v58 = node;
    uint64_t v56 = v12 + 1;
    uint64_t v60 = v12;
    do
    {
      uint64_t v18 = v12 + v15;
      uint64_t v19 = (unsigned char *)(v12 + v15 + v16);
      uint64_t v20 = memchr(v19, 64, v17 - v16);
      if (!v20) {
        break;
      }
      uint64_t v21 = v20 - v19;
      if (v20 == v19) {
        goto LABEL_50;
      }
      unint64_t v62 = v17;
      uint64_t v22 = 0;
      char v23 = 0;
      uint64_t v24 = v57 + v15;
      uint64_t v59 = v56 + v15;
      char v65 = 1;
      uint64_t v64 = v15;
      uint64_t v55 = v57 + v15;
LABEL_15:
      uint64_t v25 = 0;
      uint64_t v61 = v16 + v21 + v15;
      unint64_t v63 = v16 + v21;
      uint64_t v26 = v16 + v21 + v18;
      uint64_t v27 = v24 + v16;
      do
      {
        unsigned __int8 v28 = *(unsigned char *)(v27 + v21);
        if (!cmark_isalnum(v28) && !memchr(".+-_", v28, 5uLL))
        {
          if (v28 != 58 && v28 != 0) {
            goto LABEL_29;
          }
          if (validate_protocol("mailto:", v16 + v21 + v18, v25, v21))
          {
            char v65 = 0;
          }
          else
          {
            if (!validate_protocol("xmpp:", v16 + v21 + v18, v25, v21)) {
              goto LABEL_29;
            }
            char v65 = 0;
            char v23 = 1;
          }
        }
        --v27;
        ++v25;
      }
      while (v21 != v25);
      uint64_t v25 = v21;
LABEL_29:
      uint64_t v15 = v64;
      unint64_t v17 = v62;
      if (!v25)
      {
LABEL_50:
        v16 += v21 + 1;
        uint64_t v12 = v60;
        continue;
      }
      if (*(unsigned char *)(v60 + v61) != 64) {
        postprocess_cold_2();
      }
      unint64_t v30 = v62 - v63;
      if (v62 - v63 < 2)
      {
        unint64_t v32 = 1;
        uint64_t v12 = v60;
LABEL_63:
        uint64_t v15 = v64;
        unint64_t v17 = v62;
        unint64_t v16 = v32 + v63;
        continue;
      }
      uint64_t v31 = v59 + v63;
      unint64_t v32 = 1;
      while (1)
      {
        unsigned __int8 v33 = *(unsigned char *)(v31 + v32 - 1);
        if (!cmark_isalnum(v33))
        {
          if (v33 <= 0x2Eu)
          {
            if (v33 != 45)
            {
              if (v33 != 46 || v32 >= v30 - 1 || !cmark_isalnum(*(unsigned char *)(v31 + v32))) {
                goto LABEL_51;
              }
              ++v22;
            }
            goto LABEL_34;
          }
          if (v33 == 47)
          {
            if ((v23 & 1) == 0) {
              goto LABEL_51;
            }
            goto LABEL_34;
          }
          if (v33 != 95) {
            break;
          }
        }
LABEL_34:
        if (v30 == ++v32)
        {
          unint64_t v32 = v62 - v63;
          goto LABEL_51;
        }
      }
      if (v33 == 64)
      {
        uint64_t v15 = v64;
        unint64_t v16 = v63 + 1;
        uint64_t v21 = v32 - 1;
        uint64_t v24 = v55;
        if (v21) {
          goto LABEL_15;
        }
        unint64_t v17 = v62;
        goto LABEL_50;
      }
LABEL_51:
      uint64_t v12 = v60;
      if (v32 < 2) {
        goto LABEL_63;
      }
      if (!v22) {
        goto LABEL_63;
      }
      uint64_t v34 = v61 + v32 - 1;
      if (!cmark_isalpha(*(unsigned char *)(v60 + v34)) && *(unsigned char *)(v60 + v34) != 46) {
        goto LABEL_63;
      }
      unint64_t v35 = autolink_delim(v26, v32);
      if (v35)
      {
        unint64_t v36 = v35;
        uint64_t v37 = (void *)cmark_node_new_with_mem(0xC009u, *v54);
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        cmark_strbuf_init((uint64_t)*v54, v66, 10);
        if (v65) {
          cmark_strbuf_puts(v66, "mailto:");
        }
        cmark_strbuf_put(v66, (const void *)(v26 - v25), v36 + v25);
        uint64_t v38 = HIDWORD(v67);
        v37[18] = cmark_strbuf_detach((uint64_t)v66);
        v37[19] = v38 | 0x100000000;
        v39 = (void *)cmark_node_new_with_mem(0xC001u, *v54);
        uint64_t v40 = (unsigned char *)(**v54)((uint64_t)(((v36 + v25) << 32) + 0x100000000) >> 32, 1);
        uint64_t v41 = v40;
        if ((int)v36 + (int)v25 >= 1) {
          memcpy(v40, (const void *)(v60 + (int)v61 - (int)v25), (v36 + v25));
        }
        v41[(int)v36 + (int)v25] = 0;
        v39[18] = v41;
        v39[19] = (v36 + v25) | 0x100000000;
        cmark_node_append_child(v37, v39);
        cmark_node_insert_after(v58, v37);
        uint64_t v42 = (void *)cmark_node_new_with_mem(0xC001u, *v54);
        v42[18] = v60 + (int)v36 + (int)v61;
        v42[19] = (v62 - (v36 + v63));
        cmark_node_insert_after((uint64_t)v37, v42);
        *(void *)(v58 + 144) = v60 + (int)v64;
        *(void *)(v58 + 152) = (v63 - v25);
        long long v43 = (unsigned char *)(**v54)((int)v63 - (int)v25 + 1, 1);
        uint64_t v44 = v43;
        size_t v45 = *(unsigned int *)(v58 + 152);
        if ((int)v45 >= 1)
        {
          memcpy(v43, *(const void **)(v58 + 144), v45);
          LODWORD(v45) = *(_DWORD *)(v58 + 152);
        }
        unint64_t v16 = 0;
        v44[(int)v45] = 0;
        *(void *)(v58 + 144) = v44;
        uint64_t v15 = v36 + v63 + v64;
        *(_DWORD *)(v58 + 156) = 1;
        uint64_t v58 = (uint64_t)v42;
        unint64_t v17 = v62 - (v36 + v63);
      }
      else
      {
        uint64_t v15 = v64;
        unint64_t v16 = v63 + 1;
        unint64_t v17 = v62;
      }
    }
    while (v16 < v17);
    uint64_t v10 = v58;
    a2 = v54;
    if (*(_DWORD *)(v58 + 156)) {
      postprocess_cold_1();
    }
    LODWORD(v13) = *(_DWORD *)(v58 + 152);
    uint64_t v5 = v50;
    BOOL v7 = v52;
    int v14 = v53;
LABEL_70:
    int v46 = (unsigned char *)(**a2)((int)v13 + 1, 1);
    uint64_t v47 = v46;
    size_t v48 = *(unsigned int *)(v10 + 152);
    if ((int)v48 >= 1)
    {
      memcpy(v46, *(const void **)(v10 + 144), v48);
      LODWORD(v48) = *(_DWORD *)(v10 + 152);
    }
    v47[(int)v48] = 0;
    *(void *)(v10 + 144) = v47;
    *(_DWORD *)(v10 + 156) = 1;
    if (v14) {
      ((void (*)(uint64_t))(*a2)[2])(v12);
    }
LABEL_74:
    int v8 = cmark_iter_next(v5);
  }
  while (v8 != 1);
LABEL_2:
  cmark_iter_free(v5);
  return v49;
}

uint64_t cmark_iter_get_node(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *cmark_consolidate_text_nodes(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    __int16 v2 = (uint64_t (**)(uint64_t, uint64_t))*result;
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))*result)(1, 48);
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v1;
    *(_DWORD *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 32) = 2;
    *(void *)(v3 + 40) = v1;
    v11[0] = v2;
    v11[1] = &cmark_strbuf__initbuf;
    uint64_t v12 = 0;
    for (int i = cmark_iter_next(v3); i != 1; int i = cmark_iter_next(v3))
    {
      if (i == 2)
      {
        uint64_t v5 = *(void *)(v3 + 24);
        if (*(unsigned __int16 *)(v5 + 100) == 49153)
        {
          uint64_t v6 = *(void *)(v5 + 24);
          if (v6)
          {
            if (*(unsigned __int16 *)(v6 + 100) == 49153)
            {
              cmark_strbuf_clear((uint64_t)v11);
              BOOL v7 = (void *)(v5 + 144);
              cmark_strbuf_put(v11, *(const void **)(v5 + 144), *(_DWORD *)(v5 + 152));
              uint64_t v8 = *(void *)(v5 + 24);
              if (v8)
              {
                do
                {
                  if (*(unsigned __int16 *)(v8 + 100) != 49153) {
                    break;
                  }
                  cmark_iter_next(v3);
                  cmark_strbuf_put(v11, *(const void **)(v8 + 144), *(_DWORD *)(v8 + 152));
                  *(_DWORD *)(v5 + 92) = *(_DWORD *)(v8 + 92);
                  uint64_t v9 = *(void *)(v8 + 24);
                  cmark_node_free((void *)v8);
                  uint64_t v8 = v9;
                }
                while (v9);
              }
              if (*(_DWORD *)(v5 + 156)) {
                (*(void (**)(void))(*(void *)v3 + 16))(*v7);
              }
              void *v7 = 0;
              *(void *)(v5 + 152) = 0;
              uint64_t v10 = HIDWORD(v12);
              *(void *)(v5 + 144) = cmark_strbuf_detach((uint64_t)v11);
              *(void *)(v5 + 152) = v10 | 0x100000000;
            }
          }
        }
      }
    }
    cmark_strbuf_free((uint64_t)v11);
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  return result;
}

uint64_t cmark_iter_next(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v3;
  if (result != 1)
  {
    if (result == 2
      && (int v4 = *(unsigned __int16 *)(v3 + 100), (v4 - 49153) >= 5)
      && ((v5 = v4 - 32773, BOOL v6 = v5 > 5, v7 = (1 << v5) & 0x23, !v6) ? (v8 = v7 == 0) : (v8 = 1), v8))
    {
      uint64_t v10 = *(void *)(v3 + 48);
      if (!v10)
      {
        *(_DWORD *)(a1 + 32) = 3;
        return result;
      }
      int v11 = 2;
    }
    else
    {
      if (v3 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 32) = 1;
        *(void *)(a1 + 40) = 0;
        return result;
      }
      uint64_t v9 = *(void *)(v3 + 24);
      if (v9)
      {
        *(_DWORD *)(a1 + 32) = 2;
        *(void *)(a1 + 40) = v9;
        return result;
      }
      uint64_t v10 = *(void *)(v3 + 40);
      if (!v10) {
        cmark_iter_next_cold_1();
      }
      int v11 = 3;
    }
    *(_DWORD *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v10;
  }
  return result;
}

void *cmark_strbuf_drop(void *result, int a2)
{
  if (a2 >= 1)
  {
    __int16 v2 = result;
    int v3 = *((_DWORD *)result + 5);
    if (v3 >= a2) {
      int v4 = a2;
    }
    else {
      int v4 = *((_DWORD *)result + 5);
    }
    int v5 = v3 - v4;
    *((_DWORD *)result + 5) = v3 - v4;
    if (v3 > a2)
    {
      uint64_t result = memmove(*((void **)result + 1), (const void *)(*((void *)result + 1) + v4), v5);
      int v5 = v2[5];
    }
    *(unsigned char *)(*((void *)v2 + 1) + v5) = 0;
  }
  return result;
}

uint64_t cmark_parser_free(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)(a1 + 144))
  {
    (*(void (**)(void))(v2 + 16))(*(void *)(a1 + 168));
    (*(void (**)(void))(v2 + 16))(*(void *)(a1 + 160));
  }
  cmark_parser_dispose(a1);
  cmark_strbuf_free(a1 + 64);
  cmark_strbuf_free(a1 + 96);
  cmark_llist_free(*(void *)a1, *(void **)(a1 + 136));
  cmark_llist_free(*(void *)a1, *(void **)(a1 + 144));
  int v3 = *(uint64_t (**)(uint64_t))(v2 + 16);

  return v3(a1);
}

uint64_t cmark_node_free(void *a1)
{
  uint64_t v1 = a1;
  S_node_unlink(a1);
  v1[3] = 0;
  do
  {
    cmark_strbuf_free((uint64_t)v1);
    if (v1[8])
    {
      uint64_t v2 = (void (*)(void))v1[9];
      if (v2) {
        v2(*v1);
      }
    }
    if (v1[18])
    {
      uint64_t v3 = v1[14];
      if (v3)
      {
        int v4 = *(void (**)(void))(v3 + 168);
        if (v4) {
          v4();
        }
      }
    }
    free_node_as((uint64_t)v1);
    uint64_t v5 = v1[7];
    BOOL v6 = (void *)v1[3];
    if (v5)
    {
      *(void *)(v5 + 24) = v6;
      BOOL v6 = (void *)v1[6];
      v1[3] = v6;
    }
    uint64_t result = (*(uint64_t (**)(void *))(*v1 + 16))(v1);
    uint64_t v1 = v6;
  }
  while (v6);
  return result;
}

uint64_t cmark_strbuf_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *(void *)(result + 8);
    if ((_UNKNOWN *)result != &cmark_strbuf__initbuf) {
      uint64_t result = (*(uint64_t (**)(void))(*v1 + 16))();
    }
    v1[1] = &cmark_strbuf__initbuf;
    v1[2] = 0;
  }
  return result;
}

uint64_t free_node_as(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(_WORD *)(result + 100))
  {
    case 0xC001:
    case 0xC004:
    case 0xC005:
    case 0xC00B:
    case 0xC00C:
LABEL_7:
      uint64_t v3 = (void *)(result + 144);
      if (!*(_DWORD *)(result + 156)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    case 0xC002:
    case 0xC003:
    case 0xC007:
    case 0xC008:
      return result;
    case 0xC006:
    case 0xC009:
    case 0xC00A:
LABEL_3:
      uint64_t v2 = (void *)(result + 144);
      if (*(_DWORD *)(result + 156)) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 16))(*(void *)(result + 144));
      }
      void *v2 = 0;
      *(void *)(v1 + 152) = 0;
      uint64_t v3 = (void *)(v1 + 160);
      if (*(_DWORD *)(v1 + 172)) {
LABEL_8:
      }
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 16))(*v3);
LABEL_9:
      void *v3 = 0;
      v3[1] = 0;
      break;
    default:
      switch(*(_WORD *)(result + 100))
      {
        case 0x8005:
        case 0x8007:
          goto LABEL_3;
        case 0x8006:
        case 0x800B:
          goto LABEL_7;
        default:
          return result;
      }
  }
  return result;
}

uint64_t cmark_find_syntax_extension(const char *a1)
{
  pthread_once(&extensions_once, (void (*)(void))initialize_extensions);
  pthread_mutex_lock(&extensions_lock);
  uint64_t v2 = &syntax_extensions;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    uint64_t v3 = v2[1];
    if (!strcmp(*(const char **)(v3 + 40), a1)) {
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  pthread_mutex_unlock(&extensions_lock);
  return v3;
}

void *S_node_unlink(void *result)
{
  if (result)
  {
    uint64_t v1 = result[4];
    if (v1) {
      *(void *)(v1 + 24) = result[3];
    }
    uint64_t v2 = result[3];
    if (v2) {
      *(void *)(v2 + 32) = v1;
    }
    uint64_t v3 = result[5];
    if (v3)
    {
      if (*(void **)(v3 + 48) == result) {
        *(void *)(v3 + 48) = v2;
      }
      if (*(void **)(v3 + 56) == result) {
        *(void *)(v3 + 56) = result[4];
      }
    }
  }
  return result;
}

uint64_t cmark_llist_free(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = (void *)*a2;
      uint64_t result = (*(uint64_t (**)(void *))(v2 + 16))(a2);
      a2 = v3;
    }
    while (v3);
  }
  return result;
}

_DWORD *add_line(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 102) & 1) == 0) {
    add_line_cold_1();
  }
  if (*(unsigned char *)(a3 + 61))
  {
    int v6 = *(_DWORD *)(a3 + 40);
    ++*(_DWORD *)(a3 + 36);
    BOOL v7 = -v6 < 0;
    int v8 = -v6 & 3;
    int v9 = v6 & 3;
    if (v7) {
      int v10 = v9;
    }
    else {
      int v10 = -v8;
    }
    int v11 = v10 - 4;
    do
      cmark_strbuf_putc(a1, 32);
    while (!__CFADD__(v11++, 1));
  }
  uint64_t v13 = *(int *)(a3 + 36);
  int v14 = (const void *)(*(void *)a2 + v13);
  int v15 = *(_DWORD *)(a2 + 8) - v13;

  return cmark_strbuf_put((_DWORD *)a1, v14, v15);
}

uint64_t add_child(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a2) {
    add_child_cold_1();
  }
  for (uint64_t i = a2; !cmark_node_can_contain_type(i, a3); uint64_t i = finalize(a1, i))
    ;
  int v8 = *(uint64_t (***)(void, void))a1;
  int v9 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 184);
  cmark_strbuf_init((uint64_t)v8, (uint64_t *)v10, 32);
  *(_WORD *)(v10 + 100) = a3;
  *(_WORD *)(v10 + 102) = 1;
  *(_DWORD *)(v10 + 80) = v9;
  *(_DWORD *)(v10 + 84) = a4;
  *(_DWORD *)(v10 + 88) = v9;
  *(void *)(v10 + 40) = i;
  uint64_t v11 = *(void *)(i + 56);
  uint64_t v12 = (uint64_t *)(i + 48);
  if (v11) {
    uint64_t v12 = (uint64_t *)(v11 + 24);
  }
  *uint64_t v12 = v10;
  *(void *)(v10 + 32) = v11;
  *(void *)(i + 56) = v10;
  return v10;
}

BOOL cmark_node_can_contain_type(uint64_t a1, int a2)
{
  if (a2 == 32769) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5)
  {
    int v6 = *(unsigned int (**)(void))(v5 + 80);
    if (v6) {
      return v6() != 0;
    }
  }
  BOOL result = 1;
  switch(*(_WORD *)(a1 + 100))
  {
    case 0x8001:
    case 0x8002:
    case 0x8004:
    case 0x800B:
      BOOL v7 = a2 != 32772 && (a2 & 0xC000) == 0x8000;
      goto LABEL_15;
    case 0x8003:
      BOOL v7 = a2 == 32772;
      goto LABEL_15;
    case 0x8005:
    case 0x8006:
    case 0x800A:
      return 0;
    case 0x8007:
      return result;
    case 0x8008:
    case 0x8009:
      goto LABEL_14;
    default:
      unsigned int v8 = *(unsigned __int16 *)(a1 + 100) - 49158;
      if (v8 > 6 || v8 == 5) {
        return 0;
      }
LABEL_14:
      BOOL v7 = (~a2 & 0xC000) == 0;
LABEL_15:
      BOOL result = v7;
      break;
  }
  return result;
}

uint64_t _scan_at(uint64_t (*a1)(uint64_t), uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = *((int *)a2 + 2);
  if ((int)v5 < a3) {
    return 0;
  }
  char v7 = *(unsigned char *)(v3 + v5);
  *(unsigned char *)(v3 + v5) = 0;
  uint64_t result = a1(v3 + a3);
  *(unsigned char *)(v3 + *((int *)a2 + 2)) = v7;
  return result;
}

BOOL cmark_isalnum(unsigned __int8 a1)
{
  return cmark_ctype_class[a1] - 3 < 2;
}

uint64_t core_extensions_registration(void **a1)
{
  table_extension = create_table_extension();
  cmark_plugin_register_syntax_extension(a1, (uint64_t)table_extension);
  strikethrough_extension = create_strikethrough_extension();
  cmark_plugin_register_syntax_extension(a1, (uint64_t)strikethrough_extension);
  autolink_extension = create_autolink_extension();
  cmark_plugin_register_syntax_extension(a1, (uint64_t)autolink_extension);
  tagfilter_extension = create_tagfilter_extension();
  cmark_plugin_register_syntax_extension(a1, (uint64_t)tagfilter_extension);
  tasklist_extension = create_tasklist_extension();
  cmark_plugin_register_syntax_extension(a1, (uint64_t)tasklist_extension);
  return 1;
}

uint64_t cmark_plugin_register_syntax_extension(void **a1, uint64_t a2)
{
  *a1 = cmark_llist_append((uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR, *a1, a2);
  return 1;
}

void *create_tagfilter_extension()
{
  v0 = cmark_syntax_extension_new("tagfilter");
  cmark_syntax_extension_set_html_filter_func((uint64_t)v0, (uint64_t)filter);
  return v0;
}

void *create_table_extension()
{
  v0 = cmark_syntax_extension_new("table");
  cmark_register_node_flag(&CMARK_NODE__TABLE_VISITED);
  cmark_syntax_extension_set_match_block_func(v0, (uint64_t)matches_0);
  cmark_syntax_extension_set_open_block_func((uint64_t)v0, (uint64_t)try_opening_table_block);
  cmark_syntax_extension_set_get_type_string_func((uint64_t)v0, (uint64_t)get_type_string_1);
  cmark_syntax_extension_set_can_contain_func((uint64_t)v0, (uint64_t)can_contain_1);
  cmark_syntax_extension_set_contains_inlines_func((uint64_t)v0, (uint64_t)contains_inlines);
  cmark_syntax_extension_set_commonmark_render_func((uint64_t)v0, (uint64_t)commonmark_render_1);
  cmark_syntax_extension_set_plaintext_render_func((uint64_t)v0, (uint64_t)commonmark_render_1);
  cmark_syntax_extension_set_latex_render_func((uint64_t)v0, (uint64_t)latex_render_0);
  cmark_syntax_extension_set_xml_attr_func((uint64_t)v0, (uint64_t)xml_attr_0);
  cmark_syntax_extension_set_man_render_func((uint64_t)v0, (uint64_t)man_render_0);
  cmark_syntax_extension_set_html_render_func((uint64_t)v0, (uint64_t)html_render_1);
  cmark_syntax_extension_set_opaque_alloc_func((uint64_t)v0, (uint64_t)opaque_alloc);
  cmark_syntax_extension_set_opaque_free_func((uint64_t)v0, (uint64_t)opaque_free);
  cmark_syntax_extension_set_commonmark_escape_func((uint64_t)v0, (uint64_t)escape);
  CMARK_NODE_TABLE = cmark_syntax_extension_add_node(0);
  CMARK_NODE_TABLE_ROW = cmark_syntax_extension_add_node(0);
  CMARK_NODE_TABLE_CELL = cmark_syntax_extension_add_node(0);
  return v0;
}

uint64_t cmark_syntax_extension_add_node(int a1)
{
  uint64_t v1 = &CMARK_NODE_LAST_INLINE;
  if (!a1) {
    uint64_t v1 = &CMARK_NODE_LAST_BLOCK;
  }
  if ((~*v1 & 0x3FFF) == 0) {
    cmark_syntax_extension_add_node_cold_1();
  }
  uint64_t result = (*v1 + 1);
  *uint64_t v1 = result;
  return result;
}

void *create_tasklist_extension()
{
  v0 = cmark_syntax_extension_new("tasklist");
  cmark_syntax_extension_set_match_block_func(v0, (uint64_t)matches);
  cmark_syntax_extension_set_get_type_string_func((uint64_t)v0, (uint64_t)get_type_string);
  cmark_syntax_extension_set_open_block_func((uint64_t)v0, (uint64_t)open_tasklist_item);
  cmark_syntax_extension_set_can_contain_func((uint64_t)v0, (uint64_t)can_contain);
  cmark_syntax_extension_set_commonmark_render_func((uint64_t)v0, (uint64_t)commonmark_render);
  cmark_syntax_extension_set_plaintext_render_func((uint64_t)v0, (uint64_t)commonmark_render);
  cmark_syntax_extension_set_html_render_func((uint64_t)v0, (uint64_t)html_render);
  cmark_syntax_extension_set_xml_attr_func((uint64_t)v0, (uint64_t)xml_attr);
  return v0;
}

uint64_t cmark_syntax_extension_set_xml_attr_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_open_block_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

void *cmark_syntax_extension_set_match_block_func(void *result, uint64_t a2)
{
  void *result = a2;
  return result;
}

void *create_strikethrough_extension()
{
  v0 = cmark_syntax_extension_new("strikethrough");
  cmark_syntax_extension_set_get_type_string_func((uint64_t)v0, (uint64_t)get_type_string_0);
  cmark_syntax_extension_set_can_contain_func((uint64_t)v0, (uint64_t)can_contain_0);
  cmark_syntax_extension_set_commonmark_render_func((uint64_t)v0, (uint64_t)commonmark_render_0);
  cmark_syntax_extension_set_latex_render_func((uint64_t)v0, (uint64_t)latex_render);
  cmark_syntax_extension_set_man_render_func((uint64_t)v0, (uint64_t)man_render);
  cmark_syntax_extension_set_html_render_func((uint64_t)v0, (uint64_t)html_render_0);
  cmark_syntax_extension_set_plaintext_render_func((uint64_t)v0, (uint64_t)plaintext_render);
  CMARK_NODE_STRIKETHROUGH = cmark_syntax_extension_add_node(1);
  cmark_syntax_extension_set_match_inline_func((uint64_t)v0, (uint64_t)match_0);
  cmark_syntax_extension_set_inline_from_delim_func((uint64_t)v0, (uint64_t)insert);
  default_mem_allocator = cmark_get_default_mem_allocator();
  uint64_t v2 = cmark_llist_append((uint64_t (**)(uint64_t, uint64_t))default_mem_allocator, 0, 126);
  cmark_syntax_extension_set_special_inline_chars((uint64_t)v0, (uint64_t)v2);
  cmark_syntax_extension_set_emphasis((uint64_t)v0, 1);
  return v0;
}

uint64_t cmark_syntax_extension_set_plaintext_render_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_html_render_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 136) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_get_type_string_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_commonmark_render_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_can_contain_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_special_inline_chars(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_match_inline_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_man_render_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_latex_render_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = a2;
  return result;
}

uint64_t (**cmark_get_default_mem_allocator())()
{
  return &CMARK_DEFAULT_MEM_ALLOCATOR;
}

void *create_autolink_extension()
{
  v0 = cmark_syntax_extension_new("autolink");
  cmark_syntax_extension_set_match_inline_func((uint64_t)v0, (uint64_t)match);
  cmark_syntax_extension_set_postprocess_func((uint64_t)v0, (uint64_t)postprocess);
  default_mem_allocator = cmark_get_default_mem_allocator();
  uint64_t v2 = cmark_llist_append((uint64_t (**)(uint64_t, uint64_t))default_mem_allocator, 0, 58);
  uint64_t v3 = cmark_llist_append((uint64_t (**)(uint64_t, uint64_t))default_mem_allocator, v2, 119);
  cmark_syntax_extension_set_special_inline_chars((uint64_t)v0, (uint64_t)v3);
  return v0;
}

uint64_t cmark_syntax_extension_set_postprocess_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 152) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_opaque_free_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 168) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_opaque_alloc_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 160) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_inline_from_delim_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_html_filter_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 144) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_emphasis(uint64_t result, int a2)
{
  *(unsigned char *)(result + 56) = a2 == 1;
  return result;
}

uint64_t cmark_syntax_extension_set_contains_inlines_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t cmark_syntax_extension_set_commonmark_escape_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t cmark_register_node_flag(_WORD *a1)
{
  pthread_once(&nextflag_once, (void (*)(void))initialize_nextflag);
  pthread_mutex_lock(&nextflag_lock);
  if (*a1) {
    cmark_register_node_flag_cold_2();
  }
  __int16 v2 = cmark_register_node_flag_nextflag;
  if (!cmark_register_node_flag_nextflag) {
    cmark_register_node_flag_cold_1();
  }
  *a1 = cmark_register_node_flag_nextflag;
  cmark_register_node_flag_nextflag = 2 * v2;

  return pthread_mutex_unlock(&nextflag_lock);
}

uint64_t cmark_plugin_steal_syntax_extensions(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  return v1;
}

void *cmark_plugin_new()
{
  uint64_t result = CMARK_DEFAULT_MEM_ALLOCATOR(1uLL, 8uLL);
  void *result = 0;
  return result;
}

uint64_t cmark_strbuf_detach(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 1);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = &cmark_strbuf__initbuf;
  *(void *)(a1 + 16) = 0;
  return v1;
}

uint64_t cmark_strbuf_putc(uint64_t a1, char a2)
{
  uint64_t result = cmark_strbuf_grow(a1, *(_DWORD *)(a1 + 20) + 1);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(int *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = v6 + 1;
  *(unsigned char *)(v5 + v6) = a2;
  *(unsigned char *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)) = 0;
  return result;
}

BOOL cmark_isdigit(unsigned __int8 a1)
{
  return cmark_ctype_class[a1] == 3;
}

uint64_t _scan_open_code_fence(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (v2 != 126)
  {
    if (v2 != 96 || a1[1] != 96 || (_scan_open_code_fence_yybm[a1[2]] & 0x10) == 0) {
      return 0;
    }
    uint64_t v3 = 0;
    do
      uint64_t result = a1[v3++ + 3];
    while ((_scan_open_code_fence_yybm[result] & 0x10) != 0);
    uint64_t v5 = &a1[v3];
    uint64_t v6 = (uint64_t)&a1[v3 + 2];
    if (result > 0xDF)
    {
      uint64_t v9 = (uint64_t)(v5 + 1);
      if (result > 0xEF)
      {
        if (result == 240) {
          goto LABEL_60;
        }
        BOOL v11 = result == 244;
        if (result >= 0xF4) {
          goto LABEL_39;
        }
        goto LABEL_57;
      }
      if (result < 0xE1) {
        goto LABEL_50;
      }
      if (result == 237) {
        goto LABEL_54;
      }
      goto LABEL_43;
    }
    if (result > 0xC)
    {
      if (result == 13) {
        return (v3 + 2);
      }
      if ((result & 0x80) == 0) {
        goto LABEL_45;
      }
      if (result >= 0xC2) {
        goto LABEL_44;
      }
      return 0;
    }
    if (!result) {
      return result;
    }
    if (result == 10) {
      return (v3 + 2);
    }
    while (1)
    {
      do
      {
LABEL_45:
        unsigned int v17 = *(unsigned __int8 *)++v6;
        unsigned int v16 = v17;
      }
      while ((_scan_open_code_fence_yybm[v17] & 0x40) != 0);
      uint64_t v9 = v6 - 1;
      if (v16 > 0xEC)
      {
        if (v16 > 0xF0)
        {
          BOOL v11 = v16 == 244;
          if (v16 >= 0xF4)
          {
LABEL_39:
            if (!v11) {
              return 0;
            }
            int v13 = *(char *)(v9 + 2);
            uint64_t v12 = v9 + 2;
            if (v13 >= -112) {
              return 0;
            }
            uint64_t v6 = v12;
          }
          else
          {
LABEL_57:
            uint64_t v6 = v9 + 2;
            if (*(char *)(v9 + 2) >= -64) {
              return 0;
            }
          }
          goto LABEL_43;
        }
        if (v16 >= 0xEE)
        {
          if (v16 >= 0xF0)
          {
LABEL_60:
            uint64_t v6 = v9 + 2;
            if ((*(unsigned char *)(v9 + 2) + 112) >= 0x30u) {
              return 0;
            }
          }
LABEL_43:
          int v14 = *(char *)++v6;
          if (v14 >= -64) {
            return 0;
          }
          goto LABEL_44;
        }
LABEL_54:
        uint64_t v6 = v9 + 2;
        if (*(char *)(v9 + 2) >= -96) {
          return 0;
        }
      }
      else
      {
        if (v16 <= 0xC1) {
          goto LABEL_90;
        }
        if (v16 >= 0xE0)
        {
          if (v16 != 224) {
            goto LABEL_43;
          }
LABEL_50:
          uint64_t v6 = v9 + 2;
          if ((*(unsigned char *)(v9 + 2) & 0xE0) != 0xA0) {
            return 0;
          }
        }
      }
LABEL_44:
      int v15 = *(char *)++v6;
      if (v15 >= -64) {
        return 0;
      }
    }
  }
  if (a1[1] != 126 || (_scan_open_code_fence_yybm[a1[2]] & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = 0;
  do
    uint64_t result = a1[v3++ + 3];
  while ((_scan_open_code_fence_yybm[result] & 0x20) != 0);
  char v7 = &a1[v3];
  uint64_t v8 = (uint64_t)&a1[v3 + 2];
  if (result > 0xDF)
  {
    uint64_t v10 = (uint64_t)(v7 + 1);
    if (result > 0xEF)
    {
      if (result == 240) {
        goto LABEL_85;
      }
      BOOL v18 = result == 244;
      if (result >= 0xF4) {
        goto LABEL_64;
      }
      goto LABEL_82;
    }
    if (result < 0xE1) {
      goto LABEL_75;
    }
    if (result == 237) {
      goto LABEL_79;
    }
    goto LABEL_68;
  }
  if (result > 0xC)
  {
    if (result == 13) {
      return (v3 + 2);
    }
    if ((result & 0x80) == 0) {
      goto LABEL_70;
    }
    if (result >= 0xC2) {
      goto LABEL_69;
    }
    return 0;
  }
  if (result)
  {
    if (result == 10) {
      return (v3 + 2);
    }
    while (1)
    {
      do
      {
LABEL_70:
        unsigned int v23 = *(unsigned __int8 *)++v8;
        unsigned int v16 = v23;
      }
      while (_scan_open_code_fence_yybm[v23] < 0);
      uint64_t v10 = v8 - 1;
      if (v16 > 0xEC)
      {
        if (v16 > 0xF0)
        {
          BOOL v18 = v16 == 244;
          if (v16 >= 0xF4)
          {
LABEL_64:
            if (!v18) {
              return 0;
            }
            int v20 = *(char *)(v10 + 2);
            uint64_t v19 = v10 + 2;
            if (v20 >= -112) {
              return 0;
            }
            uint64_t v8 = v19;
          }
          else
          {
LABEL_82:
            uint64_t v8 = v10 + 2;
            if (*(char *)(v10 + 2) >= -64) {
              return 0;
            }
          }
          goto LABEL_68;
        }
        if (v16 >= 0xEE)
        {
          if (v16 >= 0xF0)
          {
LABEL_85:
            uint64_t v8 = v10 + 2;
            if ((*(unsigned char *)(v10 + 2) + 112) >= 0x30u) {
              return 0;
            }
          }
LABEL_68:
          int v21 = *(char *)++v8;
          if (v21 >= -64) {
            return 0;
          }
          goto LABEL_69;
        }
LABEL_79:
        uint64_t v8 = v10 + 2;
        if (*(char *)(v10 + 2) >= -96) {
          return 0;
        }
      }
      else
      {
        if (v16 <= 0xC1)
        {
LABEL_90:
          if (v16 - 14 >= 0xFFFFFFF3) {
            return (v3 + 2);
          }
          return 0;
        }
        if (v16 >= 0xE0)
        {
          if (v16 != 224) {
            goto LABEL_68;
          }
LABEL_75:
          uint64_t v8 = v10 + 2;
          if ((*(unsigned char *)(v10 + 2) & 0xE0) != 0xA0) {
            return 0;
          }
        }
      }
LABEL_69:
      int v22 = *(char *)++v8;
      if (v22 >= -64) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _scan_html_block_start_7(unsigned char *a1)
{
  if (*a1 != 60) {
    return 0;
  }
  unsigned int v1 = a1[1];
  if (v1 <= 0x40)
  {
    if (v1 != 47) {
      return 0;
    }
    unsigned int v2 = a1[2];
    if (v2 < 0x41 || v2 >= 0x5B && v2 - 97 > 0x19) {
      return 0;
    }
    for (uint64_t i = a1 + 3; ; ++i)
    {
      unsigned int v4 = *i;
      if (v4 > 0x2F)
      {
        if (v4 > 0x40)
        {
          if (v4 >= 0x5B && v4 - 97 >= 0x1A) {
            return 0;
          }
        }
        else if (v4 > 0x39)
        {
          goto LABEL_178;
        }
      }
      else
      {
        if (v4 <= 0x1F)
        {
          if (v4 - 9 >= 5) {
            return 0;
          }
          do
          {
LABEL_174:
            while (1)
            {
              unsigned int v50 = *++i;
              unsigned int v4 = v50;
              if (v50 > 0x1F) {
                break;
              }
              if (v4 - 9 > 4) {
                return 0;
              }
            }
          }
          while (v4 == 32);
LABEL_178:
          if (v4 != 62) {
            return 0;
          }
LABEL_179:
          for (int j = 1; ; int j = 0)
          {
            BOOL v52 = i + 2;
            int v53 = i;
            do
            {
              uint64_t i = v52;
              unsigned int v55 = *++v53;
              unsigned int v54 = v55;
              ++v52;
            }
            while ((_scan_html_block_start_7_yybm[v55] & 4) != 0);
            if (v54 < 9) {
              break;
            }
            if (v54 > 0xA)
            {
              BOOL v58 = v54 == 11 || v54 > 0xD;
              if (v58 & j) {
                return 0;
              }
              return 7;
            }
            while (1)
            {
              int v56 = *i;
              if ((_scan_html_block_start_7_yybm[*i] & 4) != 0) {
                break;
              }
              ++i;
              if ((v56 - 9) >= 2) {
                return 7;
              }
            }
          }
          if (j) {
            return 0;
          }
          return 7;
        }
        if (v4 != 45)
        {
          if (v4 != 32) {
            return 0;
          }
          goto LABEL_174;
        }
      }
    }
  }
  if (v1 >= 0x5B && v1 - 97 > 0x19) {
    return 0;
  }
  unsigned int v8 = a1[2];
  uint64_t i = a1 + 2;
  for (unsigned int k = v8; (_scan_html_block_start_7_yybm[k] & 2) == 0; unsigned int k = v9)
  {
    if (k > 0x3D)
    {
      if (k > 0x5A)
      {
        if (k - 97 >= 0x1A) {
          return 0;
        }
      }
      else
      {
        if (k < 0x3F) {
          goto LABEL_179;
        }
        if (k < 0x41) {
          return 0;
        }
      }
    }
    else if (k > 0x2E)
    {
      if (k == 47) {
        goto LABEL_170;
      }
      if (k >= 0x3A) {
        return 0;
      }
    }
    else if (k != 45)
    {
      return 0;
    }
    unsigned int v9 = *++i;
  }
  do
  {
LABEL_164:
    unsigned int v48 = *++i;
    unsigned int v47 = v48;
  }
  while ((_scan_html_block_start_7_yybm[v48] & 2) != 0);
  if (v47 <= 0x3E)
  {
    if (v47 > 0x39)
    {
      if (v47 != 58)
      {
        if (v47 < 0x3E) {
          return 0;
        }
        goto LABEL_179;
      }
      goto LABEL_46;
    }
    BOOL v16 = v47 == 47;
    goto LABEL_168;
  }
  if (v47 > 0x5E)
  {
    uint64_t v10 = 0;
    if (v47 == 96 || v47 > 0x7A) {
      return v10;
    }
  }
  else if (v47 - 65 >= 0x1A)
  {
    return 0;
  }
  while (1)
  {
    do
    {
LABEL_46:
      BOOL v11 = i;
      unsigned int v13 = *++i;
      unsigned int v12 = v13;
    }
    while ((_scan_html_block_start_7_yybm[v13] & 8) != 0);
    if (v12 > 0x2C) {
      break;
    }
    if (v12 > 0xD)
    {
      if (v12 != 32) {
        return 0;
      }
    }
    else if (v12 < 9)
    {
      return 0;
    }
    for (uint64_t i = v11 + 2; ; ++i)
    {
      unsigned int v14 = *i;
      if (v14 > 0x3C) {
        break;
      }
      if (v14 > 0x20)
      {
        BOOL v16 = v14 == 47;
        if (v14 > 0x2F)
        {
          uint64_t v10 = 0;
          if (v14 != 58) {
            return v10;
          }
          goto LABEL_46;
        }
LABEL_168:
        if (!v16) {
          return 0;
        }
        goto LABEL_170;
      }
      if (v14 < 9 || v14 - 14 < 0x12) {
        return 0;
      }
    }
    if (v14 > 0x5A)
    {
      if (v14 > 0x5F)
      {
        uint64_t v10 = 0;
        if (v14 == 96 || v14 >= 0x7B) {
          return v10;
        }
      }
      else
      {
        uint64_t v10 = 0;
        if (v14 != 95) {
          return v10;
        }
      }
    }
    else
    {
      if (v14 < 0x3E) {
        goto LABEL_76;
      }
      if (v14 == 62) {
        goto LABEL_179;
      }
      uint64_t v10 = 0;
      if (v14 < 0x41) {
        return v10;
      }
    }
  }
  if (v12 <= 0x3C)
  {
    if (v12 >= 0x30) {
      return 0;
    }
    goto LABEL_170;
  }
  if (v12 != 61)
  {
    if (v12 >= 0x3F) {
      return 0;
    }
    goto LABEL_179;
  }
LABEL_76:
  ++i;
  while (1)
  {
    unsigned int v17 = *i;
    if ((_scan_html_block_start_7_yybm[*i] & 0x20) != 0) {
      goto LABEL_155;
    }
    if (v17 > 0xE0)
    {
      uint64_t v31 = i - 1;
      goto LABEL_141;
    }
    if (v17 > 0x22) {
      break;
    }
    if (!*i) {
      return 0;
    }
    ++i;
    if (v17 >= 0x21)
    {
      BOOL v18 = i - 1;
      while (1)
      {
        do
        {
          uint64_t v19 = v18;
          unsigned int v21 = *++v18;
          unsigned int v20 = v21;
        }
        while ((_scan_html_block_start_7_yybm[v21] & 0x40) != 0);
        if (v20 > 0xEC) {
          break;
        }
        if (v20 <= 0xC1)
        {
          if (v20 - 1 >= 0x22) {
            return 0;
          }
LABEL_137:
          int v43 = v19[2];
          uint64_t i = v19 + 2;
          if ((_scan_html_block_start_7_yybm[v19[2]] & 2) == 0)
          {
            if (v43 != 47)
            {
              if (v43 != 62) {
                return 0;
              }
              goto LABEL_179;
            }
LABEL_170:
            unsigned int v49 = *++i;
            unsigned int v4 = v49;
            goto LABEL_178;
          }
          goto LABEL_164;
        }
        if (v20 >= 0xE0)
        {
          if (v20 != 224) {
            goto LABEL_103;
          }
          char v23 = v19[2];
          int v22 = v19 + 2;
          if ((v23 & 0xE0) != 0xA0) {
            return 0;
          }
LABEL_93:
          BOOL v18 = v22;
        }
LABEL_104:
        uint64_t v10 = 0;
        int v30 = (char)*++v18;
        if (v30 >= -64) {
          return v10;
        }
      }
      if (v20 > 0xF0)
      {
        if (v20 >= 0xF4)
        {
          if (v20 != 244) {
            return 0;
          }
          int v28 = (char)v19[2];
          uint64_t v25 = v19 + 2;
          if (v28 >= -112) {
            return 0;
          }
        }
        else
        {
          int v26 = (char)v19[2];
          uint64_t v25 = v19 + 2;
          if (v26 >= -64) {
            return 0;
          }
        }
LABEL_102:
        BOOL v18 = v25;
LABEL_103:
        int v29 = (char)*++v18;
        if (v29 >= -64) {
          return 0;
        }
        goto LABEL_104;
      }
      if (v20 >= 0xEE)
      {
        if (v20 >= 0xF0)
        {
          char v27 = v19[2];
          uint64_t v25 = v19 + 2;
          if ((v27 + 112) >= 0x30u) {
            return 0;
          }
          goto LABEL_102;
        }
        goto LABEL_103;
      }
      int v24 = (char)v19[2];
      int v22 = v19 + 2;
      if (v24 >= -96) {
        return 0;
      }
      goto LABEL_93;
    }
  }
  if (v17 <= 0x27)
  {
    while (1)
    {
      do
      {
        uint64_t v19 = i;
        unsigned int v33 = *++i;
        unsigned int v32 = v33;
      }
      while (_scan_html_block_start_7_yybm[v33] < 0);
      if (v32 > 0xEC)
      {
        if (v32 > 0xF0)
        {
          if (v32 >= 0xF4)
          {
            if (v32 != 244) {
              return 0;
            }
            int v40 = (char)v19[2];
            uint64_t v37 = v19 + 2;
            if (v40 >= -112) {
              return 0;
            }
          }
          else
          {
            int v38 = (char)v19[2];
            uint64_t v37 = v19 + 2;
            if (v38 >= -64) {
              return 0;
            }
          }
LABEL_127:
          uint64_t i = v37;
LABEL_128:
          int v41 = (char)*++i;
          if (v41 >= -64) {
            return 0;
          }
          goto LABEL_129;
        }
        if (v32 >= 0xEE)
        {
          if (v32 >= 0xF0)
          {
            char v39 = v19[2];
            uint64_t v37 = v19 + 2;
            if ((v39 + 112) >= 0x30u) {
              return 0;
            }
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        int v36 = (char)v19[2];
        uint64_t v34 = v19 + 2;
        if (v36 >= -96) {
          return 0;
        }
      }
      else
      {
        if (v32 <= 0xC1)
        {
          if (v32 - 1 >= 0x27) {
            return 0;
          }
          goto LABEL_137;
        }
        if (v32 < 0xE0) {
          goto LABEL_129;
        }
        if (v32 != 224) {
          goto LABEL_128;
        }
        char v35 = v19[2];
        uint64_t v34 = v19 + 2;
        if ((v35 & 0xE0) != 0xA0) {
          return 0;
        }
      }
      uint64_t i = v34;
LABEL_129:
      uint64_t v10 = 0;
      int v42 = (char)*++i;
      if (v42 >= -64) {
        return v10;
      }
    }
  }
  if (v17 < 0xC2) {
    return 0;
  }
  if (v17 >= 0xE0)
  {
    uint64_t v31 = i - 1;
LABEL_139:
    uint64_t i = v31 + 2;
    if ((v31[2] & 0xE0) != 0xA0) {
      return 0;
    }
    goto LABEL_154;
  }
  while (1)
  {
    while (1)
    {
LABEL_154:
      int v45 = (char)*++i;
      if (v45 > -65) {
        return 0;
      }
      do
      {
LABEL_155:
        unsigned int v46 = *++i;
        unsigned int v17 = v46;
      }
      while ((_scan_html_block_start_7_yybm[v46] & 0x20) != 0);
      uint64_t v31 = i - 1;
      if (v17 <= 0xE0) {
        break;
      }
LABEL_141:
      if (v17 > 0xEF)
      {
        if (v17 == 240)
        {
          uint64_t i = v31 + 2;
          if ((v31[2] + 112) >= 0x30u) {
            return 0;
          }
        }
        else if (v17 >= 0xF4)
        {
          if (v17 != 244) {
            return 0;
          }
          uint64_t i = v31 + 2;
          if ((char)v31[2] >= -112) {
            return 0;
          }
        }
        else
        {
          uint64_t i = v31 + 2;
          if ((char)v31[2] >= -64) {
            return 0;
          }
        }
LABEL_153:
        int v44 = (char)*++i;
        if (v44 >= -64) {
          return 0;
        }
      }
      else
      {
        if (v17 != 237) {
          goto LABEL_153;
        }
        uint64_t i = v31 + 2;
        if ((char)v31[2] >= -96) {
          return 0;
        }
      }
    }
    if (v17 <= 0x3D) {
      break;
    }
    if (v17 == 62) {
      goto LABEL_179;
    }
    if (v17 < 0xC2) {
      return 0;
    }
    if (v17 >= 0xE0) {
      goto LABEL_139;
    }
  }
  uint64_t v10 = 0;
  if (v17 - 1 < 0x20) {
    goto LABEL_164;
  }
  return v10;
}

uint64_t _scan_html_block_start(unsigned __int8 *a1)
{
  if (*a1 != 60) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v3 = a1 + 1;
  switch(a1[1])
  {
    case '/':
      uint64_t result = 0;
      uint64_t v3 = a1 + 2;
      switch(a1[2])
      {
        case 'A':
        case 'a':
          goto LABEL_3;
        case 'B':
        case 'b':
          goto LABEL_34;
        case 'C':
        case 'c':
          goto LABEL_38;
        case 'D':
        case 'd':
          goto LABEL_42;
        case 'F':
        case 'f':
          goto LABEL_44;
        case 'H':
        case 'h':
          goto LABEL_48;
        case 'I':
        case 'i':
          goto LABEL_52;
        case 'L':
        case 'l':
          goto LABEL_57;
        case 'M':
        case 'm':
          goto LABEL_61;
        case 'N':
        case 'n':
          goto LABEL_65;
        case 'O':
        case 'o':
          goto LABEL_69;
        case 'P':
        case 'p':
          unsigned int v91 = a1[3];
          uint64_t v6 = a1 + 3;
          unsigned int v90 = v91;
          if (v91 <= 0x2F) {
            goto LABEL_407;
          }
          if (v90 <= 0x40) {
            goto LABEL_415;
          }
          if ((v90 & 0xFFFFFFDF) != 0x41) {
            return 0;
          }
          goto LABEL_209;
        case 'S':
        case 's':
          unsigned int v92 = a1[3];
          uint64_t v10 = a1 + 3;
          if (v92 > 0x55)
          {
            if (v92 <= 0x6E)
            {
              if (v92 == 101) {
                goto LABEL_235;
              }
              return 0;
            }
            if (v92 == 111) {
              goto LABEL_397;
            }
            if (v92 == 117) {
              goto LABEL_136;
            }
          }
          else
          {
            if (v92 <= 0x4E)
            {
              if (v92 == 69) {
                goto LABEL_235;
              }
              return 0;
            }
            if (v92 == 79) {
              goto LABEL_397;
            }
            if (v92 >= 0x55) {
              goto LABEL_136;
            }
          }
          break;
        case 'T':
        case 't':
          uint64_t result = 0;
          unsigned int v93 = a1[3];
          BOOL v11 = a1 + 3;
          if (v93 > 0x60)
          {
            switch(a1[3])
            {
              case 'a':
                goto LABEL_142;
              case 'b':
                goto LABEL_359;
              case 'c':
              case 'e':
              case 'g':
                return result;
              case 'd':
                goto LABEL_364;
              case 'f':
                goto LABEL_376;
              case 'h':
                goto LABEL_380;
              case 'i':
                goto LABEL_385;
              default:
                if (v93 == 114) {
                  goto LABEL_406;
                }
                break;
            }
          }
          else
          {
            switch(a1[3])
            {
              case 'A':
                goto LABEL_142;
              case 'B':
                goto LABEL_359;
              case 'C':
              case 'E':
              case 'G':
                return result;
              case 'D':
                goto LABEL_364;
              case 'F':
                goto LABEL_376;
              case 'H':
                goto LABEL_380;
              case 'I':
                goto LABEL_385;
              default:
                if (v93 == 82) {
                  goto LABEL_406;
                }
                break;
            }
          }
          return result;
        case 'U':
        case 'u':
          goto LABEL_181;
        default:
          return result;
      }
      return 0;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'E':
    case 'G':
    case 'J':
    case 'K':
    case 'Q':
    case 'R':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'e':
    case 'g':
    case 'j':
    case 'k':
    case 'q':
    case 'r':
      return result;
    case '?':
      return 3;
    case 'A':
    case 'a':
LABEL_3:
      unsigned int v4 = v3[1];
      if (v4 > 0x53)
      {
        if (v4 > 0x71)
        {
          if (v4 != 114)
          {
            if (v4 >= 0x74) {
              return 0;
            }
LABEL_271:
            if ((v3[2] & 0xDF) == 0x49)
            {
              int v80 = v3[3];
              int v22 = v3 + 3;
              if ((v80 & 0xFFFFFFDF) == 0x44) {
                goto LABEL_401;
              }
            }
            return 0;
          }
          goto LABEL_145;
        }
        BOOL v5 = v4 == 100;
      }
      else
      {
        BOOL v5 = v4 == 68;
        if (v4 > 0x44)
        {
          if (v4 < 0x52) {
            return 0;
          }
          if (v4 != 82) {
            goto LABEL_271;
          }
LABEL_145:
          if ((v3[2] & 0xDF) == 0x54 && (v3[3] & 0xDF) == 0x49)
          {
            int v51 = v3[4];
            unsigned int v50 = v3 + 4;
            if ((v51 & 0xFFFFFFDF) == 0x43)
            {
              unsigned int v48 = v50;
LABEL_386:
              int v111 = v48[1];
              uint64_t v110 = v48 + 1;
              if ((v111 & 0xFFFFFFDF) == 0x4C) {
                goto LABEL_400;
              }
            }
          }
          return 0;
        }
      }
      if (v5 && (v3[2] & 0xDF) == 0x44 && (v3[3] & 0xDF) == 0x52 && (v3[4] & 0xDF) == 0x45)
      {
        int v14 = v3[5];
        unsigned int v13 = v3 + 5;
        if ((v14 & 0xFFFFFFDF) == 0x53) {
          goto LABEL_202;
        }
      }
      return 0;
    case 'B':
    case 'b':
LABEL_34:
      BOOL v16 = v3 + 1;
      unsigned int v15 = v3[1];
      if (v15 > 0x4F)
      {
        if (v15 <= 0x6B)
        {
          if (v15 != 97) {
            return 0;
          }
LABEL_75:
          if ((v3[2] & 0xDF) != 0x53 || (v3[3] & 0xDF) != 0x45) {
            return 0;
          }
          uint64_t v6 = v3 + 4;
          unsigned int v28 = v3[4];
          if (v28 <= 0x2F) {
            goto LABEL_185;
          }
          if (v28 > 0x45)
          {
            if ((v28 & 0xFFFFFFDF) == 0x46 && (v3[5] & 0xDF) == 0x4F)
            {
              int v30 = v3[6];
              int v29 = v3 + 6;
              if ((v30 & 0xFFFFFFDF) == 0x4E) {
                goto LABEL_269;
              }
            }
            return 0;
          }
LABEL_275:
          if (v28 != 62) {
            return 0;
          }
          return 6;
        }
        if (v15 != 108)
        {
          if (v15 != 111) {
            return 0;
          }
LABEL_360:
          int v99 = v16[1];
          unsigned int v46 = v16 + 1;
          if ((v99 & 0xFFFFFFDF) != 0x44) {
            return 0;
          }
          goto LABEL_361;
        }
      }
      else
      {
        if (v15 <= 0x4B)
        {
          if (v15 != 65) {
            return 0;
          }
          goto LABEL_75;
        }
        if (v15 != 76)
        {
          if (v15 < 0x4F) {
            return 0;
          }
          goto LABEL_360;
        }
      }
      if ((v3[2] & 0xDF) == 0x4F
        && (v3[3] & 0xDF) == 0x43
        && (v3[4] & 0xDF) == 0x4B
        && (v3[5] & 0xDF) == 0x51
        && (v3[6] & 0xDF) == 0x55
        && (v3[7] & 0xDF) == 0x4F)
      {
        int v62 = v3[8];
        int v22 = v3 + 8;
        if ((v62 & 0xFFFFFFDF) == 0x54) {
          goto LABEL_401;
        }
      }
      return 0;
    case 'C':
    case 'c':
LABEL_38:
      BOOL v18 = v3 + 1;
      unsigned int v17 = v3[1];
      if (v17 <= 0x4F)
      {
        if (v17 <= 0x44)
        {
          if (v17 == 65) {
            goto LABEL_85;
          }
          return 0;
        }
        if (v17 != 69)
        {
          if (v17 < 0x4F) {
            return 0;
          }
LABEL_165:
          if ((v3[2] & 0xDF) != 0x4C) {
            return 0;
          }
          unsigned int v28 = v3[3];
          uint64_t v6 = v3 + 3;
          if (v28 <= 0x2F)
          {
LABEL_185:
            if (v28 <= 0x1F)
            {
              unsigned int v55 = v28 - 9;
LABEL_409:
              if (v55 >= 5) {
                return 0;
              }
              return 6;
            }
            if (v28 == 32) {
              return 6;
            }
            if (v28 < 0x2F) {
              return 0;
            }
            goto LABEL_373;
          }
          if (v28 <= 0x46) {
            goto LABEL_275;
          }
          if ((v28 & 0xFFFFFFDF) != 0x47) {
            return 0;
          }
LABEL_312:
          if ((v6[1] & 0xDF) != 0x52) {
            return 0;
          }
          if ((v6[2] & 0xDF) != 0x4F) {
            return 0;
          }
          if ((v6[3] & 0xDF) != 0x55) {
            return 0;
          }
          int v85 = v6[4];
          int v69 = v6 + 4;
          if ((v85 & 0xFFFFFFDF) != 0x50) {
            return 0;
          }
LABEL_229:
          BOOL v11 = v69;
LABEL_364:
          unsigned int v103 = v11[1];
          uint64_t v102 = v11 + 1;
          unsigned int v101 = v103;
          if (v103 <= 0x20)
          {
            if (v101 < 9 || v101 - 14 < 0x12) {
              return 0;
            }
            return 6;
          }
          BOOL v105 = v101 == 47;
          if (v101 > 0x2F) {
            goto LABEL_374;
          }
          uint64_t v6 = v102;
          if (!v105) {
            return 0;
          }
LABEL_373:
          unsigned int v101 = v6[1];
LABEL_374:
          if (v101 == 62) {
            return 6;
          }
          return 0;
        }
        goto LABEL_220;
      }
      if (v17 > 0x64)
      {
        if (v17 != 101)
        {
          if (v17 != 111) {
            return 0;
          }
          goto LABEL_165;
        }
LABEL_220:
        int v63 = v3[2];
        int v56 = v3 + 2;
        BOOL v64 = (v63 & 0xFFFFFFDF) == 78;
        goto LABEL_221;
      }
      if (v17 != 97) {
        return 0;
      }
      goto LABEL_85;
    case 'D':
    case 'd':
LABEL_42:
      uint64_t result = 0;
      BOOL v11 = v3 + 1;
      unsigned int v19 = v3[1];
      if (v19 > 0x63)
      {
        switch(v3[1])
        {
          case 'd':
          case 'l':
            goto LABEL_364;
          case 'e':
LABEL_88:
            if ((v3[2] & 0xDF) != 0x54) {
              return 0;
            }
            if ((v3[3] & 0xDF) != 0x41) {
              return 0;
            }
            if ((v3[4] & 0xDF) != 0x49) {
              return 0;
            }
            int v33 = v3[5];
            unsigned int v13 = v3 + 5;
            if ((v33 & 0xFFFFFFDF) != 0x4C) {
              return 0;
            }
            goto LABEL_202;
          case 'f':
          case 'g':
          case 'h':
          case 'j':
          case 'k':
            return result;
          case 'i':
LABEL_239:
            BOOL v11 = v3 + 2;
            unsigned int v74 = v3[2];
            if (v74 > 0x56)
            {
              if (v74 > 0x71)
              {
                BOOL v44 = (v74 & 0xFFFFFFFB) == 114;
                goto LABEL_362;
              }
              if (v74 != 97) {
                return 0;
              }
            }
            else
            {
              if (v74 > 0x51)
              {
                if (v74 != 82 && v74 < 0x56) {
                  return 0;
                }
                goto LABEL_364;
              }
              if (v74 != 65) {
                return 0;
              }
            }
            if ((v3[3] & 0xDF) == 0x4C && (v3[4] & 0xDF) == 0x4F)
            {
              int v84 = v3[5];
              int v41 = v3 + 5;
              if ((v84 & 0xFFFFFFDF) == 0x47) {
                goto LABEL_182;
              }
            }
            return 0;
          default:
            if (v19 == 116) {
              goto LABEL_364;
            }
            return result;
        }
      }
      switch(v3[1])
      {
        case 'D':
        case 'L':
          goto LABEL_364;
        case 'E':
          goto LABEL_88;
        case 'F':
        case 'G':
        case 'H':
        case 'J':
        case 'K':
          return result;
        case 'I':
          goto LABEL_239;
        default:
          if (v19 == 84) {
            goto LABEL_364;
          }
          break;
      }
      return result;
    case 'F':
    case 'f':
LABEL_44:
      unsigned int v20 = v3[1];
      if (v20 > 0x52)
      {
        if (v20 <= 0x6E)
        {
          if (v20 != 105) {
            return 0;
          }
          goto LABEL_95;
        }
        if (v20 != 111)
        {
          if (v20 != 114) {
            return 0;
          }
          goto LABEL_172;
        }
      }
      else
      {
        if (v20 <= 0x4E)
        {
          if (v20 != 73) {
            return 0;
          }
LABEL_95:
          unsigned int v34 = v3[2];
          if (v34 > 0x47)
          {
            if (v34 > 0x65)
            {
              if (v34 != 103) {
                return 0;
              }
              goto LABEL_318;
            }
            if (v34 != 101) {
              return 0;
            }
          }
          else if (v34 != 69)
          {
            if (v34 < 0x47) {
              return 0;
            }
LABEL_318:
            unsigned int v86 = v3[3];
            if (v86 > 0x55)
            {
              if (v86 > 0x63)
              {
                if (v86 != 117) {
                  return 0;
                }
LABEL_389:
                int v112 = v3[4];
                int v22 = v3 + 4;
                if ((v112 & 0xFFFFFFDF) == 0x52) {
                  goto LABEL_401;
                }
                return 0;
              }
              if (v86 != 99) {
                return 0;
              }
            }
            else if (v86 != 67)
            {
              if (v86 < 0x55) {
                return 0;
              }
              goto LABEL_389;
            }
            int v97 = v3[4];
            v96 = v3 + 4;
            if ((v97 & 0xFFFFFFDF) != 0x41) {
              return 0;
            }
            BOOL v18 = v96;
LABEL_85:
            int v32 = v18[1];
            uint64_t v31 = v18 + 1;
            if ((v32 & 0xFFFFFFDF) != 0x50) {
              return 0;
            }
LABEL_236:
            if ((v31[1] & 0xDF) != 0x54) {
              return 0;
            }
            int v73 = v31[2];
            uint64_t v72 = v31 + 2;
            if ((v73 & 0xFFFFFFDF) != 0x49) {
              return 0;
            }
            uint64_t v6 = v72;
LABEL_349:
            int v95 = v6[1];
            int v94 = v6 + 1;
            if ((v95 & 0xFFFFFFDF) != 0x4F) {
              return 0;
            }
            char v39 = v94;
LABEL_114:
            int v42 = v39[1];
            int v41 = v39 + 1;
            if ((v42 & 0xFFFFFFDF) != 0x4E) {
              return 0;
            }
LABEL_182:
            BOOL v11 = v41;
            goto LABEL_364;
          }
          if ((v3[3] & 0xDF) != 0x4C || (v3[4] & 0xDF) != 0x44) {
            return 0;
          }
          unsigned int v52 = v3[5] & 0xDF;
LABEL_267:
          if (v52 != 83) {
            return 0;
          }
          int v78 = v3[6];
          int v29 = v3 + 6;
          if ((v78 & 0xFFFFFFDF) != 0x45) {
            return 0;
          }
LABEL_269:
          int v79 = v29;
LABEL_378:
          int v107 = v79[1];
          BOOL v11 = v79 + 1;
          if ((v107 & 0xFFFFFFDF) != 0x54) {
            return 0;
          }
          goto LABEL_364;
        }
        if (v20 != 79)
        {
          if (v20 < 0x52) {
            return 0;
          }
LABEL_172:
          if ((v3[2] & 0xDF) != 0x41 || (v3[3] & 0xDF) != 0x4D || (v3[4] & 0xDF) != 0x45) {
            return 0;
          }
          uint64_t v6 = v3 + 5;
          unsigned int v28 = v3[5];
          if (v28 <= 0x2F) {
            goto LABEL_185;
          }
          if (v28 <= 0x52) {
            goto LABEL_275;
          }
          unsigned int v52 = v28 & 0xFFFFFFDF;
          goto LABEL_267;
        }
      }
      unsigned int v66 = v3[2];
      int v56 = v3 + 2;
      unsigned int v65 = v66;
      if (v66 > 0x52)
      {
        BOOL v64 = v65 == 111;
        if (v65 > 0x6F)
        {
          if (v65 == 114) {
            goto LABEL_326;
          }
          return 0;
        }
LABEL_221:
        if (!v64) {
          return 0;
        }
      }
      else if (v65 != 79)
      {
        if (v65 < 0x52) {
          return 0;
        }
LABEL_326:
        int v88 = v56[1];
        int v41 = v56 + 1;
        if ((v88 & 0xFFFFFFDF) != 0x4D) {
          return 0;
        }
        goto LABEL_182;
      }
      if ((v56[1] & 0xDF) == 0x54)
      {
        int v68 = v56[2];
        uint64_t v67 = v56 + 2;
        if ((v68 & 0xFFFFFFDF) == 0x45)
        {
          uint64_t v6 = v67;
          goto LABEL_228;
        }
      }
      return 0;
    case 'H':
    case 'h':
LABEL_48:
      BOOL v11 = v3 + 1;
      unsigned int v21 = v3[1];
      if (v21 <= 0x53)
      {
        if (v21 <= 0x44)
        {
          if (v21 - 49 < 6) {
            goto LABEL_364;
          }
          return 0;
        }
        if (v21 != 69)
        {
          BOOL v44 = v21 == 82;
          goto LABEL_362;
        }
LABEL_253:
        if ((v3[2] & 0xDF) != 0x41 || (v3[3] & 0xDF) != 0x44) {
          return 0;
        }
        unsigned int v28 = v3[4];
        uint64_t v6 = v3 + 4;
        if (v28 <= 0x2F) {
          goto LABEL_185;
        }
        if (v28 > 0x44)
        {
          if ((v28 & 0xFFFFFFDF) != 0x45) {
            return 0;
          }
LABEL_228:
          int v70 = v6[1];
          int v69 = v6 + 1;
          if ((v70 & 0xFFFFFFDF) != 0x52) {
            return 0;
          }
          goto LABEL_229;
        }
        goto LABEL_275;
      }
      if (v21 > 0x71)
      {
        if (v21 == 114) {
          goto LABEL_364;
        }
        if (v21 != 116) {
          return 0;
        }
      }
      else if (v21 >= 0x55)
      {
        if (v21 != 101) {
          return 0;
        }
        goto LABEL_253;
      }
      int v53 = v3[2];
      v3 += 2;
      if ((v53 & 0xFFFFFFDF) != 0x4D) {
        return 0;
      }
LABEL_181:
      int v54 = v3[1];
      int v41 = v3 + 1;
      if ((v54 & 0xFFFFFFDF) != 0x4C) {
        return 0;
      }
      goto LABEL_182;
    case 'I':
    case 'i':
LABEL_52:
      if ((v3[1] & 0xDF) != 0x46) {
        return 0;
      }
      if ((v3[2] & 0xDF) != 0x52) {
        return 0;
      }
      if ((v3[3] & 0xDF) != 0x41) {
        return 0;
      }
      int v23 = v3[4];
      int v22 = v3 + 4;
      if ((v23 & 0xFFFFFFDF) != 0x4D) {
        return 0;
      }
      goto LABEL_401;
    case 'L':
    case 'l':
LABEL_57:
      unsigned int v24 = v3[1];
      if (v24 > 0x49)
      {
        if (v24 > 0x65)
        {
          if (v24 != 105) {
            return 0;
          }
LABEL_184:
          uint64_t v6 = v3 + 2;
          unsigned int v28 = v3[2];
          if (v28 <= 0x2F) {
            goto LABEL_185;
          }
          if (v28 <= 0x4D) {
            goto LABEL_275;
          }
          if ((v28 & 0xFFFFFFDF) != 0x4E) {
            return 0;
          }
LABEL_323:
          int v87 = v3[3];
          int v41 = v3 + 3;
          if ((v87 & 0xFFFFFFDF) != 0x4B) {
            return 0;
          }
          goto LABEL_182;
        }
        if (v24 != 101) {
          return 0;
        }
      }
      else if (v24 != 69)
      {
        if (v24 < 0x49) {
          return 0;
        }
        goto LABEL_184;
      }
      if ((v3[2] & 0xDF) == 0x47 && (v3[3] & 0xDF) == 0x45)
      {
        int v36 = v3[4];
        char v35 = v3 + 4;
        if ((v36 & 0xFFFFFFDF) == 0x4E)
        {
          uint64_t v37 = v35;
LABEL_109:
          int v38 = v37[1];
          BOOL v11 = v37 + 1;
          if ((v38 & 0xFFFFFFDF) == 0x44) {
            goto LABEL_364;
          }
        }
      }
      return 0;
    case 'M':
    case 'm':
LABEL_61:
      unsigned int v25 = v3[1];
      if (v25 > 0x45)
      {
        if (v25 > 0x61)
        {
          if (v25 != 101) {
            return 0;
          }
LABEL_188:
          if ((v3[2] & 0xDF) != 0x4E || (v3[3] & 0xDF) != 0x55) {
            return 0;
          }
          uint64_t v6 = v3 + 4;
          unsigned int v28 = v3[4];
          if (v28 <= 0x2F) {
            goto LABEL_185;
          }
          if (v28 > 0x48)
          {
            if ((v28 & 0xFFFFFFDF) == 0x49 && (v3[5] & 0xDF) == 0x54)
            {
              int v57 = v3[6];
              int v56 = v3 + 6;
              if ((v57 & 0xFFFFFFDF) == 0x45) {
                goto LABEL_326;
              }
            }
            return 0;
          }
          goto LABEL_275;
        }
        if (v25 != 97) {
          return 0;
        }
      }
      else if (v25 != 65)
      {
        if (v25 < 0x45) {
          return 0;
        }
        goto LABEL_188;
      }
      int v40 = v3[2];
      char v39 = v3 + 2;
      if ((v40 & 0xFFFFFFDF) != 0x49) {
        return 0;
      }
      goto LABEL_114;
    case 'N':
    case 'n':
LABEL_65:
      unsigned int v26 = v3[1];
      if (v26 > 0x4F)
      {
        if (v26 > 0x61)
        {
          if (v26 != 111) {
            return 0;
          }
LABEL_197:
          if ((v3[2] & 0xDF) == 0x46 && (v3[3] & 0xDF) == 0x52 && (v3[4] & 0xDF) == 0x41 && (v3[5] & 0xDF) == 0x4D)
          {
            int v58 = v3[6];
            unsigned int v13 = v3 + 6;
            if ((v58 & 0xFFFFFFDF) == 0x45)
            {
LABEL_202:
              int v59 = v13[1];
              int v41 = v13 + 1;
              if ((v59 & 0xFFFFFFDF) == 0x53) {
                goto LABEL_182;
              }
            }
          }
          return 0;
        }
        if (v26 != 97) {
          return 0;
        }
      }
      else if (v26 != 65)
      {
        if (v26 < 0x4F) {
          return 0;
        }
        goto LABEL_197;
      }
      int v43 = v3[2];
      int v41 = v3 + 2;
      if ((v43 & 0xFFFFFFDF) == 0x56) {
        goto LABEL_182;
      }
      return 0;
    case 'O':
    case 'o':
LABEL_69:
      BOOL v11 = v3 + 1;
      unsigned int v27 = v3[1];
      if (v27 > 0x50)
      {
        BOOL v44 = v27 == 108;
        if (v27 <= 0x6C) {
          goto LABEL_362;
        }
        if (v27 != 112) {
          return 0;
        }
      }
      else
      {
        if (v27 == 76) {
          goto LABEL_364;
        }
        if (v27 < 0x50) {
          return 0;
        }
      }
      if ((v3[2] & 0xDF) != 0x54) {
        return 0;
      }
      unsigned int v45 = v3[3];
      uint64_t v6 = v3 + 3;
      if (v45 <= 0x49)
      {
        if (v45 == 71) {
          goto LABEL_312;
        }
        if (v45 >= 0x49) {
          goto LABEL_349;
        }
        return 0;
      }
      if (v45 <= 0x67)
      {
        if (v45 != 103) {
          return 0;
        }
        goto LABEL_312;
      }
      if (v45 != 105) {
        return 0;
      }
      goto LABEL_349;
    case 'P':
    case 'p':
      unsigned int v8 = a1[2];
      uint64_t v6 = a1 + 2;
      unsigned int v7 = v8;
      if (v8 > 0x3E)
      {
        if (v7 > 0x52)
        {
          if (v7 > 0x61)
          {
            if (v7 != 114) {
              return 0;
            }
LABEL_278:
            int v81 = v6[1];
            int v76 = v6 + 1;
            if ((v81 & 0xFFFFFFDF) != 0x45) {
              return 0;
            }
LABEL_279:
            unsigned int v82 = v76[1];
            if (v82 > 0x1F) {
              return v82 == 62 || v82 == 32;
            }
            else {
              return v82 - 9 < 5;
            }
          }
          if (v7 != 97) {
            return 0;
          }
        }
        else if (v7 != 65)
        {
          if (v7 >= 0x52) {
            goto LABEL_278;
          }
          return 0;
        }
LABEL_209:
        if ((v6[1] & 0xDF) == 0x52)
        {
          int v61 = v6[2];
          uint64_t v60 = v6 + 2;
          if ((v61 & 0xFFFFFFDF) == 0x41)
          {
            int v56 = v60;
            goto LABEL_326;
          }
        }
        return 0;
      }
      if (v7 > 0x20)
      {
        if (v7 == 47) {
          goto LABEL_373;
        }
        if (v7 >= 0x3E) {
          return 6;
        }
        return 0;
      }
      uint64_t result = 0;
      if (v7 >= 9 && v7 - 14 >= 0x12) {
        return 6;
      }
      return result;
    case 'S':
    case 's':
      uint64_t result = 0;
      uint64_t v10 = a1 + 2;
      unsigned int v9 = a1[2];
      if (v9 > 0x62)
      {
        if (a1[2] > 0x6Eu)
        {
          if (v9 != 111)
          {
            if (v9 != 116)
            {
              if (v9 != 117) {
                return result;
              }
LABEL_136:
              if ((v10[1] & 0xDF) != 0x4D) {
                return 0;
              }
              if ((v10[2] & 0xDF) != 0x4D) {
                return 0;
              }
              if ((v10[3] & 0xDF) != 0x41) {
                return 0;
              }
              int v47 = v10[4];
              unsigned int v46 = v10 + 4;
              if ((v47 & 0xFFFFFFDF) != 0x52) {
                return 0;
              }
LABEL_361:
              int v100 = v46[1];
              BOOL v11 = v46 + 1;
              BOOL v44 = (v100 & 0xFFFFFFDF) == 89;
LABEL_362:
              if (!v44) {
                return 0;
              }
              goto LABEL_364;
            }
LABEL_245:
            if ((a1[3] & 0xDF) == 0x59)
            {
              int v75 = a1[4];
              uint64_t v6 = a1 + 4;
              if ((v75 & 0xFFFFFFDF) == 0x4C) {
                goto LABEL_278;
              }
            }
            return 0;
          }
LABEL_397:
          if ((v10[1] & 0xDF) != 0x55) {
            return 0;
          }
          if ((v10[2] & 0xDF) != 0x52) {
            return 0;
          }
          int v113 = v10[3];
          uint64_t v110 = v10 + 3;
          if ((v113 & 0xFFFFFFDF) != 0x43) {
            return 0;
          }
LABEL_400:
          int v22 = v110;
LABEL_401:
          int v114 = v22[1];
          int v41 = v22 + 1;
          if ((v114 & 0xFFFFFFDF) != 0x45) {
            return 0;
          }
          goto LABEL_182;
        }
        if (v9 != 99)
        {
          if (v9 != 101) {
            return result;
          }
LABEL_235:
          int v71 = v10[1];
          uint64_t v31 = v10 + 1;
          if ((v71 & 0xFFFFFFDF) != 0x43) {
            return 0;
          }
          goto LABEL_236;
        }
      }
      else
      {
        if (a1[2] > 0x4Eu)
        {
          if (v9 != 79)
          {
            if (v9 != 84)
            {
              if (v9 != 85) {
                return result;
              }
              goto LABEL_136;
            }
            goto LABEL_245;
          }
          goto LABEL_397;
        }
        if (v9 != 67)
        {
          if (v9 != 69) {
            return result;
          }
          goto LABEL_235;
        }
      }
      if ((a1[3] & 0xDF) == 0x52 && (a1[4] & 0xDF) == 0x49 && (a1[5] & 0xDF) == 0x50)
      {
        int v77 = a1[6];
        int v76 = a1 + 6;
        if ((v77 & 0xFFFFFFDF) == 0x54) {
          goto LABEL_279;
        }
      }
      return 0;
    case 'T':
    case 't':
      uint64_t result = 0;
      BOOL v11 = a1 + 2;
      switch(a1[2])
      {
        case 'A':
LABEL_142:
          int v49 = v11[1];
          unsigned int v48 = v11 + 1;
          if ((v49 & 0xFFFFFFDF) != 0x42) {
            return 0;
          }
          goto LABEL_386;
        case 'B':
LABEL_359:
          int v98 = v11[1];
          BOOL v16 = v11 + 1;
          if ((v98 & 0xFFFFFFDF) == 0x4F) {
            goto LABEL_360;
          }
          return 0;
        case 'C':
        case 'G':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
          return result;
        case 'D':
          goto LABEL_364;
        case 'E':
LABEL_281:
          if ((a1[3] & 0xDF) != 0x58) {
            return 0;
          }
          if ((a1[4] & 0xDF) != 0x54) {
            return 0;
          }
          if ((a1[5] & 0xDF) != 0x41) {
            return 0;
          }
          if ((a1[6] & 0xDF) != 0x52) {
            return 0;
          }
          if ((a1[7] & 0xDF) != 0x45) {
            return 0;
          }
          int v83 = a1[8];
          int v76 = a1 + 8;
          if ((v83 & 0xFFFFFFDF) != 0x41) {
            return 0;
          }
          goto LABEL_279;
        case 'F':
LABEL_376:
          if ((v11[1] & 0xDF) == 0x4F)
          {
            int v106 = v11[2];
            int v79 = v11 + 2;
            if ((v106 & 0xFFFFFFDF) == 0x4F) {
              goto LABEL_378;
            }
          }
          return 0;
        case 'H':
LABEL_380:
          uint64_t v6 = v11 + 1;
          unsigned int v90 = v11[1];
          if (v90 <= 0x2F) {
            goto LABEL_407;
          }
          if (v90 <= 0x44) {
            goto LABEL_415;
          }
          if ((v90 & 0xFFFFFFDF) != 0x45) {
            return 0;
          }
          int v108 = v11[2];
          uint64_t v37 = v11 + 2;
          if ((v108 & 0xFFFFFFDF) != 0x41) {
            return 0;
          }
          goto LABEL_109;
        case 'I':
LABEL_385:
          int v109 = v11[1];
          unsigned int v48 = v11 + 1;
          if ((v109 & 0xFFFFFFDF) == 0x54) {
            goto LABEL_386;
          }
          return 0;
        case 'R':
LABEL_406:
          uint64_t v6 = v11 + 1;
          unsigned int v90 = v11[1];
          if (v90 > 0x2F)
          {
            if (v90 > 0x40)
            {
              if ((v90 & 0xFFFFFFDF) == 0x41)
              {
                uint64_t v3 = v11;
                if ((v11[2] & 0xDF) == 0x43) {
                  goto LABEL_323;
                }
              }
            }
            else
            {
LABEL_415:
              if (v90 == 62) {
                return 6;
              }
            }
          }
          else
          {
LABEL_407:
            if (v90 <= 0x1F)
            {
              unsigned int v55 = v90 - 9;
              goto LABEL_409;
            }
            if (v90 == 32) {
              return 6;
            }
            if (v90 >= 0x2F) {
              goto LABEL_373;
            }
          }
          break;
        default:
          switch(a1[2])
          {
            case 'a':
              goto LABEL_142;
            case 'b':
              goto LABEL_359;
            case 'd':
              goto LABEL_364;
            case 'e':
              goto LABEL_281;
            case 'f':
              goto LABEL_376;
            case 'h':
              goto LABEL_380;
            case 'i':
              goto LABEL_385;
            case 'r':
              goto LABEL_406;
            default:
              return result;
          }
          return result;
      }
      return 0;
    case 'U':
    case 'u':
      goto LABEL_181;
    default:
      if (a1[1] != 33) {
        return result;
      }
      unsigned int v12 = a1[2];
      if (v12 <= 0x40)
      {
        if (v12 != 45) {
          return 0;
        }
        return 2 * (a1[3] == 45);
      }
      if (v12 < 0x5B) {
        return 4;
      }
      if (v12 == 91
        && (a1[3] & 0xDF) == 0x43
        && (a1[4] & 0xDF) == 0x44
        && (a1[5] & 0xDF) == 0x41
        && (a1[6] & 0xDF) == 0x54
        && (a1[7] & 0xDF) == 0x41)
      {
        if (a1[8] == 91) {
          return 5;
        }
        else {
          return 0;
        }
      }
      return 0;
  }
}

uint64_t _scan_atx_heading_start(unsigned char *a1)
{
  if (*a1 != 35) {
    return 0;
  }
  unsigned int v1 = a1 + 1;
  unsigned int v2 = a1[1];
  if (_scan_atx_heading_start_yybm[a1[1]] < 0) {
    goto LABEL_29;
  }
  if (v2 <= 0xC) {
    goto LABEL_4;
  }
  if (v2 != 13)
  {
    if (v2 != 35) {
      return 0;
    }
    unsigned int v1 = a1 + 2;
    unsigned int v2 = a1[2];
    if (_scan_atx_heading_start_yybm[a1[2]] < 0) {
      goto LABEL_29;
    }
    if (v2 <= 0xC) {
      goto LABEL_4;
    }
    if (v2 == 13) {
      goto LABEL_31;
    }
    if (v2 != 35) {
      return 0;
    }
    unsigned int v1 = a1 + 3;
    unsigned int v2 = a1[3];
    if (_scan_atx_heading_start_yybm[a1[3]] < 0) {
      goto LABEL_29;
    }
    if (v2 <= 0xC) {
      goto LABEL_4;
    }
    if (v2 == 13) {
      goto LABEL_31;
    }
    if (v2 != 35) {
      return 0;
    }
    unsigned int v1 = a1 + 4;
    unsigned int v2 = a1[4];
    if (_scan_atx_heading_start_yybm[a1[4]] < 0) {
      goto LABEL_29;
    }
    if (v2 <= 0xC) {
      goto LABEL_4;
    }
    if (v2 == 13) {
      goto LABEL_31;
    }
    if (v2 != 35) {
      return 0;
    }
    unsigned int v1 = a1 + 5;
    unsigned int v2 = a1[5];
    if (_scan_atx_heading_start_yybm[a1[5]] < 0) {
      goto LABEL_29;
    }
    if (v2 <= 0xC)
    {
LABEL_4:
      if (v2 - 9 < 2) {
        goto LABEL_31;
      }
      return 0;
    }
    if (v2 != 13)
    {
      if (v2 != 35) {
        return 0;
      }
      unsigned int v1 = a1 + 6;
      unsigned int v3 = a1[6];
      if ((_scan_atx_heading_start_yybm[a1[6]] & 0x80000000) == 0)
      {
        if (v3 >= 9 && (v3 < 0xB || v3 == 13)) {
          goto LABEL_31;
        }
        return 0;
      }
      do
LABEL_29:
        int v5 = *++v1;
      while (_scan_atx_heading_start_yybm[v5] < 0);
      return (v1 - a1);
    }
  }
LABEL_31:
  LODWORD(v1) = v1 + 1;
  return (v1 - a1);
}

uint64_t S_advance_offset(uint64_t result, uint64_t *a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = *a2;
    int v5 = *(_DWORD *)(result + 36);
    do
    {
      if (*(unsigned char *)(v4 + v5) == 9)
      {
        int v7 = *(_DWORD *)(result + 40);
        if (v7 <= 0) {
          int v8 = -(-v7 & 3);
        }
        else {
          int v8 = *(_DWORD *)(result + 40) & 3;
        }
        unsigned int v9 = 4 - v8;
        if (a4)
        {
          BOOL v10 = v9 > a3;
          *(unsigned char *)(result + 61) = v9 > a3;
          if ((int)v9 >= a3) {
            unsigned int v9 = a3;
          }
          unsigned int v11 = v9 + v7;
          if (!v10) {
            ++v5;
          }
          *(_DWORD *)(result + 36) = v5;
          *(_DWORD *)(result + 40) = v11;
          a3 -= v9;
          continue;
        }
        *(unsigned char *)(result + 61) = 0;
        int v6 = v9 + v7;
        ++v5;
      }
      else
      {
        if (!*(unsigned char *)(v4 + v5)) {
          return result;
        }
        *(unsigned char *)(result + 61) = 0;
        ++v5;
        int v6 = *(_DWORD *)(result + 40) + 1;
      }
      *(_DWORD *)(result + 36) = v5;
      *(_DWORD *)(result + 40) = v6;
      --a3;
    }
    while (a3 > 0);
  }
  return result;
}

uint64_t initialize_nextflag()
{
  return pthread_mutex_init(&nextflag_lock, 0);
}

uint64_t initialize_extensions()
{
  return pthread_mutex_init(&extensions_lock, 0);
}

void register_plugins()
{
}

uint64_t cmark_gfm_core_extensions_ensure_registered()
{
  return pthread_once(&registered_once, register_plugins);
}

unsigned char *cmark_node_get_literal(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 100);
  if (v3 > 0xC000)
  {
    unsigned int v4 = v3 - 49153;
    BOOL v5 = v4 > 0xA;
    int v6 = (1 << v4) & 0x419;
    if (v5 || v6 == 0) {
      return v2;
    }
LABEL_16:
    if (*(_DWORD *)(a1 + 156)) {
      return *(unsigned char **)(a1 + 144);
    }
    unsigned int v9 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 152) + 1, 1);
    unsigned int v2 = v9;
    size_t v10 = *(unsigned int *)(a1 + 152);
    if ((int)v10 >= 1)
    {
      memcpy(v9, *(const void **)(a1 + 144), v10);
      LODWORD(v10) = *(_DWORD *)(a1 + 152);
    }
    v2[(int)v10] = 0;
    *(void *)(a1 + 144) = v2;
    *(_DWORD *)(a1 + 156) = 1;
    return v2;
  }
  if (v3 != 32773)
  {
    if (v3 != 32774 && v3 != 32779) {
      return v2;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 172)) {
    return *(unsigned char **)(a1 + 160);
  }
  unsigned int v11 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 168) + 1, 1);
  unsigned int v2 = v11;
  size_t v12 = *(unsigned int *)(a1 + 168);
  if ((int)v12 >= 1)
  {
    memcpy(v11, *(const void **)(a1 + 160), v12);
    LODWORD(v12) = *(_DWORD *)(a1 + 168);
  }
  v2[(int)v12] = 0;
  *(void *)(a1 + 160) = v2;
  *(_DWORD *)(a1 + 172) = 1;
  return v2;
}

uint64_t try_opening_table_block(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  int type = cmark_node_get_type(a4);
  if (!a2 && type == 32776)
  {
    if (((unsigned __int16)CMARK_NODE__TABLE_VISITED & *(_WORD *)(a4 + 102)) == 0)
    {
      int first_nonspace = cmark_parser_get_first_nonspace(a3);
      if (_ext_scan_at((uint64_t (*)(uint64_t))_scan_table_start, (uint64_t)a5, a6, first_nonspace))
      {
        uint64_t v17 = (uint64_t)&a5[(int)cmark_parser_get_first_nonspace(a3)];
        int v18 = cmark_parser_get_first_nonspace(a3);
        unsigned int v19 = row_from_string((uint64_t *)a3, v17, a6 - v18);
        if (v19)
        {
          unsigned int v20 = v19;
          cmark_arena_push();
          string_content = (const char *)cmark_node_get_string_content(a4);
          int v22 = strlen(string_content);
          int v23 = row_from_string((uint64_t *)a3, (uint64_t)string_content, v22);
          if (v23)
          {
            unsigned int v24 = v23;
            if (*v23 == *v20)
            {
              if (!cmark_arena_pop())
              {
LABEL_18:
                if (cmark_node_set_type(a4, CMARK_NODE_TABLE))
                {
                  int v29 = *((_DWORD *)v24 + 1);
                  if (v29)
                  {
                    int v30 = (char *)cmark_node_new_with_mem(0x8008u, *(uint64_t (***)(uint64_t, uint64_t))a3);
                    uint64_t v31 = unescape_pipes(*(uint64_t (***)(uint64_t, uint64_t))a3, string_content, v29);
                    cmark_strbuf_trim((uint64_t)v31);
                    cmark_node_set_string_content(v30, (char *)v31[1]);
                    cmark_strbuf_free((uint64_t)v31);
                    (*(void (**)(uint64_t *))(*(void *)a3 + 16))(v31);
                    if (!cmark_node_insert_before(a4, v30)) {
                      (*(void (**)(char *))(*(void *)a3 + 16))(v30);
                    }
                  }
                  cmark_node_set_syntax_extension(a4, a1);
                  int v32 = (unsigned __int16 *)(**(uint64_t (***)(uint64_t, uint64_t))a3)(1, 24);
                  *(void *)(a4 + 144) = v32;
                  if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a4 + 100)) {
                    *int v32 = *v24;
                  }
                  uint64_t v33 = (**(uint64_t (***)(void, uint64_t))a3)(*v20, 1);
                  unsigned int v34 = *v20;
                  if (*v20)
                  {
                    uint64_t v35 = 0;
                    unint64_t v36 = 0;
                    do
                    {
                      uint64_t v37 = *(void *)(*((void *)v20 + 1) + v35);
                      int v38 = *(unsigned __int8 **)(v37 + 8);
                      int v39 = *v38;
                      int v40 = v38[*(int *)(v37 + 20) - 1];
                      if (v39 == 58 || v40 == 58)
                      {
                        if (v40 == 58 && v39 == 58) {
                          char v42 = 99;
                        }
                        else {
                          char v42 = 108;
                        }
                        if (v39 != 58) {
                          char v42 = 114;
                        }
                        *(unsigned char *)(v33 + v36) = v42;
                        unsigned int v34 = *v20;
                      }
                      ++v36;
                      v35 += 32;
                    }
                    while (v36 < v34);
                  }
                  if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a4 + 100)) {
                    *(void *)(*(void *)(a4 + 144) + 8) = v33;
                  }
                  uint64_t v43 = cmark_parser_add_child(a3, a4, CMARK_NODE_TABLE_ROW, *(unsigned int *)(a4 + 84));
                  cmark_node_set_syntax_extension(v43, a1);
                  int v44 = *(_DWORD *)(a4 + 84);
                  int v45 = strlen(string_content);
                  int v46 = *(_DWORD *)(a4 + 80);
                  *(_DWORD *)(v43 + 88) = v46;
                  *(_DWORD *)(v43 + 92) = v44 + v45 - 2;
                  *(_DWORD *)(v43 + 80) = v46;
                  int v47 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a3)(1, 1);
                  *(void *)(v43 + 144) = v47;
                  *int v47 = 1;
                  if (*v24)
                  {
                    int v99 = v20;
                    uint64_t v48 = a1;
                    uint64_t v49 = 0;
                    unint64_t v50 = 0;
                    uint64_t v51 = CMARK_NODE_TABLE_CELL;
                    do
                    {
                      uint64_t v52 = *((void *)v24 + 1) + v49;
                      uint64_t v53 = cmark_parser_add_child(a3, v43, v51, (*(_DWORD *)(v52 + 8) + *(_DWORD *)(a4 + 84)));
                      int v54 = *(_DWORD *)(v52 + 12);
                      *(_DWORD *)(v53 + 96) = *(_DWORD *)(v52 + 16);
                      int v55 = *(_DWORD *)(a4 + 80);
                      int v56 = v54 + *(_DWORD *)(a4 + 84);
                      *(_DWORD *)(v53 + 80) = v55;
                      *(_DWORD *)(v53 + 88) = v55;
                      *(_DWORD *)(v53 + 92) = v56;
                      *(void *)(v53 + 144) = *(void *)(v52 + 24);
                      *(void *)(v52 + 24) = 0;
                      cmark_node_set_string_content((char *)v53, *(char **)(*(void *)v52 + 8));
                      cmark_node_set_syntax_extension(v53, v48);
                      uint64_t v51 = CMARK_NODE_TABLE_CELL;
                      if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(v53 + 100))
                      {
                        uint64_t v57 = *(void *)(v53 + 144);
                        if (v57) {
                          *(_DWORD *)(v57 + 8) = v50;
                        }
                      }
                      ++v50;
                      v49 += 32;
                    }
                    while (v50 < *v24);
                    unsigned int v20 = v99;
                  }
                  else
                  {
                    LODWORD(v50) = 0;
                  }
                  if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a4 + 100))
                  {
                    ++*(_DWORD *)(*(void *)(a4 + 144) + 16);
                    *(_DWORD *)(*(void *)(a4 + 144) + 20) += v50;
                  }
                  unsigned int v90 = a5;
                  int v91 = strlen(a5);
                  int offset = cmark_parser_get_offset(a3);
                  cmark_parser_advance_offset(a3, v90, ~offset + v91, 0);
                }
                uint64_t v93 = *(void *)a3;
                free_row_cells(*(void *)a3, v24);
                (*(void (**)(unsigned __int16 *))(v93 + 16))(v24);
                uint64_t v94 = *(void *)a3;
                free_row_cells(v94, v20);
                (*(void (**)(unsigned __int16 *))(v94 + 16))(v20);
                return a4;
              }
              uint64_t v25 = (uint64_t)&a5[(int)cmark_parser_get_first_nonspace(a3)];
              int v26 = cmark_parser_get_first_nonspace(a3);
              unsigned int v20 = row_from_string((uint64_t *)a3, v25, a6 - v26);
              int v27 = strlen(string_content);
              unsigned int v28 = row_from_string((uint64_t *)a3, (uint64_t)string_content, v27);
              unsigned int v24 = v28;
              if (v20 && v28)
              {
                if (*v28 == *v20) {
                  goto LABEL_18;
                }
              }
              else if (!v20)
              {
                goto LABEL_102;
              }
              uint64_t v88 = *(void *)a3;
              free_row_cells(*(void *)a3, v20);
              (*(void (**)(unsigned __int16 *))(v88 + 16))(v20);
LABEL_102:
              if (v24)
              {
                uint64_t v89 = *(void *)a3;
                free_row_cells(v89, v24);
                (*(void (**)(unsigned __int16 *))(v89 + 16))(v24);
              }
              return a4;
            }
            uint64_t v74 = *(void *)a3;
            free_row_cells(*(void *)a3, v20);
            (*(void (**)(unsigned __int16 *))(v74 + 16))(v20);
            uint64_t v63 = *(void *)a3;
            free_row_cells(v63, v24);
          }
          else
          {
            uint64_t v63 = *(void *)a3;
            free_row_cells(v63, v20);
            unsigned int v24 = v20;
          }
          (*(void (**)(unsigned __int16 *))(v63 + 16))(v24);
          cmark_arena_pop();
          *(_WORD *)(a4 + 102) |= CMARK_NODE__TABLE_VISITED;
        }
      }
    }
    return a4;
  }
  uint64_t v13 = 0;
  if (!a2)
  {
    unint64_t v14 = 0x26AA4D000uLL;
    if (type == CMARK_NODE_TABLE)
    {
      if (!cmark_parser_is_blank(a3)
        && (!a4
         || CMARK_NODE_TABLE != *(unsigned __int16 *)(a4 + 100)
         || *(_DWORD *)(*(void *)(a4 + 144) + 16) * **(unsigned __int16 **)(a4 + 144)
          - *(_DWORD *)(*(void *)(a4 + 144) + 20) <= 0x80000))
      {
        uint64_t v13 = cmark_parser_add_child(a3, a4, CMARK_NODE_TABLE_ROW, *(unsigned int *)(a4 + 84));
        cmark_node_set_syntax_extension(v13, a1);
        *(_DWORD *)(v13 + 92) = *(_DWORD *)(a4 + 92);
        *(void *)(v13 + 144) = (**(uint64_t (***)(uint64_t, uint64_t))a3)(1, 1);
        uint64_t v58 = (uint64_t)&a5[(int)cmark_parser_get_first_nonspace(a3)];
        int v59 = cmark_parser_get_first_nonspace(a3);
        uint64_t v60 = row_from_string((uint64_t *)a3, v58, a6 - v59);
        if (v60)
        {
          int v61 = v60;
          if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a4 + 100)) {
            int v62 = **(unsigned __int16 **)(a4 + 144);
          }
          else {
            int v62 = -1;
          }
          LODWORD(v64) = *v60;
          if ((*(unsigned char *)(a3 + 122) & 0x10) != 0 && *v60 && v62 >= 1)
          {
            uint64_t v95 = a1;
            unsigned int v65 = v62;
            unint64_t v66 = 0;
            int v97 = v65;
            unint64_t v67 = v65;
            do
            {
              int v68 = (uint64_t *)(*((void *)v61 + 1) + 32 * v66);
              if (!*(_DWORD *)(v68[3] + 4))
              {
                uint64_t v70 = *(void *)(v13 + 32);
                while (v70)
                {
                  uint64_t v71 = cmark_node_nth_child(v70, v66);
                  if (v71)
                  {
                    if (CMARK_NODE_TABLE_CELL != *(unsigned __int16 *)(v71 + 100)) {
                      goto LABEL_75;
                    }
                    uint64_t v72 = *(void *)(v71 + 144);
                    if (!v72) {
                      goto LABEL_75;
                    }
                    int v73 = *(_DWORD *)(v72 + 4);
                    if (v73)
                    {
                      *(_DWORD *)(v72 + 4) = v73 + 1;
LABEL_75:
                      cmark_strbuf_truncate(*v68, 0);
                      break;
                    }
                    uint64_t v70 = *(void *)(v70 + 32);
                  }
                }
              }
              ++v66;
              unint64_t v64 = *v61;
            }
            while (v66 < v64 && v66 < v67);
            a1 = v95;
            int v62 = v97;
            unint64_t v14 = 0x26AA4D000;
          }
          if (v64) {
            BOOL v75 = v62 < 1;
          }
          else {
            BOOL v75 = 1;
          }
          if (v75)
          {
            LODWORD(v77) = 0;
            if (!a4)
            {
LABEL_93:
              if ((int)v77 < v62)
              {
                do
                {
                  uint64_t v84 = cmark_parser_add_child(a3, v13, CMARK_NODE_TABLE_CELL, 0);
                  cmark_node_set_syntax_extension(v84, a1);
                  if (v84)
                  {
                    if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(v84 + 100))
                    {
                      uint64_t v85 = *(void *)(v84 + 144);
                      if (v85) {
                        *(_DWORD *)(v85 + 8) = v77;
                      }
                    }
                  }
                  LODWORD(v77) = v77 + 1;
                }
                while (v62 != v77);
              }
              uint64_t v86 = *(void *)a3;
              free_row_cells(*(void *)a3, v61);
              (*(void (**)(unsigned __int16 *))(v86 + 16))(v61);
              int v87 = cmark_parser_get_offset(a3);
              cmark_parser_advance_offset(a3, a5, ~v87 + a6, 0);
              return v13;
            }
          }
          else
          {
            int v98 = v62;
            int v100 = a6;
            v96 = a5;
            uint64_t v76 = 0;
            unint64_t v77 = 0;
            unint64_t v78 = v62;
            uint64_t v79 = CMARK_NODE_TABLE_CELL;
            do
            {
              uint64_t v80 = *((void *)v61 + 1) + v76;
              uint64_t v81 = cmark_parser_add_child(a3, v13, v79, (*(_DWORD *)(v80 + 8) + *(_DWORD *)(a4 + 84)));
              int v82 = *(_DWORD *)(v80 + 16);
              *(_DWORD *)(v81 + 92) = *(_DWORD *)(v80 + 12) + *(_DWORD *)(a4 + 84);
              *(_DWORD *)(v81 + 96) = v82;
              *(void *)(v81 + 144) = *(void *)(v80 + 24);
              *(void *)(v80 + 24) = 0;
              cmark_node_set_string_content((char *)v81, *(char **)(*(void *)v80 + 8));
              cmark_node_set_syntax_extension(v81, a1);
              uint64_t v79 = CMARK_NODE_TABLE_CELL;
              if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(v81 + 100))
              {
                uint64_t v83 = *(void *)(v81 + 144);
                if (v83) {
                  *(_DWORD *)(v83 + 8) = v77;
                }
              }
              if (++v77 >= *v61) {
                break;
              }
              v76 += 32;
            }
            while (v77 < v78);
            a5 = v96;
            int v62 = v98;
            a6 = v100;
            unint64_t v14 = 0x26AA4D000uLL;
          }
          if (*(_DWORD *)(v14 + 364) == *(unsigned __int16 *)(a4 + 100))
          {
            ++*(_DWORD *)(*(void *)(a4 + 144) + 16);
            *(_DWORD *)(*(void *)(a4 + 144) + 20) += v77;
          }
          goto LABEL_93;
        }
        cmark_node_free((void *)v13);
      }
      return 0;
    }
  }
  return v13;
}

uint64_t cmark_node_get_type(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 100);
  }
  return result;
}

void cmark_plugin_free(void **a1)
{
  cmark_llist_free_full((uint64_t)&CMARK_DEFAULT_MEM_ALLOCATOR, *a1, (void (*)(uint64_t, void))cmark_syntax_extension_free);
  unsigned int v2 = (void (__cdecl *)(void *))off_26B52D870;

  v2(a1);
}

uint64_t cmark_llist_free_full(uint64_t result, void *a2, void (*a3)(uint64_t, void))
{
  if (a2)
  {
    unsigned int v4 = a2;
    uint64_t v5 = result;
    do
    {
      if (a3) {
        a3(v5, v4[1]);
      }
      int v6 = (void *)*v4;
      uint64_t result = (*(uint64_t (**)(void *))(v5 + 16))(v4);
      unsigned int v4 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t cmark_parse_inlines(uint64_t (***a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, int a4)
{
  __int16 v4 = a4;
  int v6 = a1;
  long long v268 = 0u;
  memset(v269, 0, sizeof(v269));
  long long v266 = 0u;
  long long v267 = 0u;
  long long v264 = 0u;
  long long v265 = 0u;
  long long v262 = 0u;
  long long v263 = 0u;
  long long v261 = 0u;
  long long v260 = 0u;
  long long v259 = 0u;
  long long v258 = 0u;
  long long v257 = 0u;
  long long v256 = 0u;
  long long v255 = 0u;
  long long v254 = 0u;
  long long v253 = 0u;
  long long v252 = 0u;
  long long v251 = 0u;
  long long v250 = 0u;
  long long v249 = 0u;
  long long v248 = 0u;
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 20);
  int v9 = *(_DWORD *)(a2 + 80);
  int v10 = *(_DWORD *)(a2 + 84) + *(_DWORD *)(a2 + 96) - 1;
  v240 = *a1;
  uint64_t v241 = v7;
  int v242 = v8;
  int v243 = 0;
  int v244 = 0;
  int v245 = v9;
  int v246 = 0;
  int v247 = v10;
  *((void *)&v248 + 1) = a3;
  long long v262 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  long long v265 = 0u;
  long long v266 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  memset(v269, 0, 21);
  long long v249 = 0u;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v254 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  BYTE5(v269[2]) = 1;
  int v11 = a4 & 0xC0000;
  if ((a4 & 0xC0000) != 0)
  {
    if (v8 < 1) {
      goto LABEL_385;
    }
  }
  else
  {
    if (v8 < 1) {
      goto LABEL_385;
    }
    v232 = (unsigned __int8 *)(v7 + (v8 - 1));
    while (1)
    {
      unsigned __int8 v233 = *v232--;
      if (!cmark_isspace(v233)) {
        break;
      }
      int v242 = --v8;
      if ((v8 + 1) <= 1) {
        goto LABEL_385;
      }
    }
  }
  int v12 = 0;
  uint64_t v236 = (uint64_t)v6;
  v238 = v6 + 18;
  __int16 v239 = v4;
  int v237 = v11;
  while (2)
  {
    autolinunsigned int k = 0;
    uint64_t v14 = v241;
    unsigned int v15 = (unsigned char *)(v241 + v12);
    unsigned int v16 = *v15;
    if (v16 <= 0x20)
    {
      BOOL v17 = v16 == 10 || v16 == 13;
      if (v17)
      {
        if (v11)
        {
          int v246 = v12 + 1;
          autolinunsigned int k = (*v240)(1, 184);
          cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
          *(_WORD *)(autolink + 100) = -16383;
          *(void *)(autolink + 144) = v15;
          *(void *)(autolink + 152) = 1;
          int v18 = v245;
          int v19 = v248 + v12 + 1 + v247;
          *(_DWORD *)(autolink + 80) = v245;
          *(_DWORD *)(autolink + 84) = v19;
          *(_DWORD *)(autolink + 88) = v18;
          *(_DWORD *)(autolink + 92) = v19;
        }
        else
        {
          int v25 = *v15;
          int v26 = v12;
          if (v16 == 13)
          {
            int v26 = v12 + 1;
            int v246 = v12 + 1;
            int v25 = *(unsigned __int8 *)(v241 + v12 + 1);
          }
          if (v25 == 10) {
            int v246 = ++v26;
          }
          ++v245;
          LODWORD(v248) = -v26;
          if (v26 < v8)
          {
            int v27 = (unsigned __int8 *)(v241 + v26);
            while (1)
            {
              int v29 = *v27++;
              int v28 = v29;
              if (v29 != 32 && v28 != 9) {
                break;
              }
              int v246 = ++v26;
              if (v8 == v26) {
                goto LABEL_45;
              }
            }
            if (!v28) {
              cmark_parse_inlines_cold_1();
            }
          }
LABEL_45:
          if (v12 >= 2
            && *(unsigned char *)(v241 + (v12 - 1)) == 32
            && *(unsigned char *)(v241 + (v12 - 2)) == 32)
          {
            unsigned int v34 = v240;
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v34, (uint64_t *)autolink, 0);
            __int16 v35 = -16381;
          }
          else
          {
            unint64_t v36 = v240;
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v36, (uint64_t *)autolink, 0);
            __int16 v35 = -16382;
          }
          *(_WORD *)(autolink + 100) = v35;
        }
      }
      else if (!*v15)
      {
        cmark_parse_inlines_cold_1();
      }
      goto LABEL_193;
    }
    switch(*v15)
    {
      case '[':
        int v246 = v12 + 1;
        autolinunsigned int k = (*v240)(1, 184);
        cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
        *(_WORD *)(autolink + 100) = -16383;
        *(void *)(autolink + 144) = "[";
        *(void *)(autolink + 152) = 1;
        int v20 = v245;
        __int16 v4 = v239;
        int v21 = v248 + v12 + 1 + v247;
        *(_DWORD *)(autolink + 80) = v245;
        *(_DWORD *)(autolink + 84) = v21;
        *(_DWORD *)(autolink + 88) = v20;
        *(_DWORD *)(autolink + 92) = v21;
        push_bracket((uint64_t)&v240, 0, autolink);
        goto LABEL_193;
      case '\\':
        uint64_t v54 = v12 + 1;
        int v246 = v54;
        if ((int)v54 >= v8)
        {
          char v55 = 0;
        }
        else
        {
          char v55 = *(unsigned char *)(v241 + v54);
          if (!v55) {
            cmark_parse_inlines_cold_1();
          }
        }
        uint64_t v80 = (BOOL (*))v6[19];
        if (!v80) {
          uint64_t v80 = cmark_ispunct;
        }
        int v81 = ((uint64_t (*)(void))v80)(v55);
        int v82 = v246;
        uint64_t v83 = v246;
        if (v81)
        {
          ++v246;
          uint64_t v84 = v241 + v83;
          autolinunsigned int k = (*v240)(1, 184);
          cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
          *(_WORD *)(autolink + 100) = -16383;
          *(void *)(autolink + 144) = v84;
          *(void *)(autolink + 152) = 1;
          int v85 = v245;
          int v86 = v247 + v248;
          int v87 = v247 + v248 + v82;
          *(_DWORD *)(autolink + 80) = v245;
          *(_DWORD *)(autolink + 84) = v87;
          int v88 = v86 + v82 + 1;
LABEL_240:
          *(_DWORD *)(autolink + 88) = v85;
          *(_DWORD *)(autolink + 92) = v88;
          goto LABEL_193;
        }
        if (v246 >= v242) {
          goto LABEL_239;
        }
        if (*(unsigned char *)(v241 + v246) == 13)
        {
          int v82 = ++v246;
          int v91 = 1;
        }
        else
        {
          if (!*(unsigned char *)(v241 + v246)) {
            cmark_parse_inlines_cold_1();
          }
          int v91 = 0;
        }
        if (v82 >= v242) {
          goto LABEL_238;
        }
        if (*(unsigned char *)(v241 + v82) == 10)
        {
          int v246 = v82 + 1;
        }
        else
        {
          if (!*(unsigned char *)(v241 + v82)) {
            cmark_parse_inlines_cold_1();
          }
LABEL_238:
          if (((v82 < v242) & ~v91) != 0)
          {
LABEL_239:
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
            *(_WORD *)(autolink + 100) = -16383;
            *(void *)(autolink + 144) = "\\"";
            *(void *)(autolink + 152) = 1;
            int v85 = v245;
            int v88 = v248 + v82 + v247;
            *(_DWORD *)(autolink + 80) = v245;
            *(_DWORD *)(autolink + 84) = v88;
            goto LABEL_240;
          }
        }
        int v155 = v240;
        autolinunsigned int k = (*v240)(1, 184);
        cmark_strbuf_init((uint64_t)v155, (uint64_t *)autolink, 0);
        *(_WORD *)(autolink + 100) = -16381;
        goto LABEL_193;
      case ']':
        uint64_t v277 = 0;
        uint64_t v278 = 0;
        v275 = 0;
        uint64_t v276 = 0;
        v273 = 0;
        uint64_t v274 = 0;
        uint64_t v56 = v12 + 1;
        int v246 = v12 + 1;
        uint64_t v57 = *((void *)&v249 + 1);
        if (!*((void *)&v249 + 1)) {
          goto LABEL_351;
        }
        int v58 = *(_DWORD *)(*((void *)&v249 + 1) + 20);
        if (v58 != 2)
        {
          if (v58 != 1 && BYTE5(v269[2]) != 0)
          {
            *((void *)&v249 + 1) = **((void **)&v249 + 1);
            ((void (*)(uint64_t))v240[2])(v57);
            int v128 = v246;
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
            *(_WORD *)(autolink + 100) = -16383;
            *(void *)(autolink + 144) = "]";
            *(void *)(autolink + 152) = 1;
            int v129 = v245;
            int v130 = v248 + v128;
            __int16 v4 = v239;
            int v131 = v130 + v247;
            *(_DWORD *)(autolink + 80) = v245;
            *(_DWORD *)(autolink + 84) = v131;
            *(_DWORD *)(autolink + 88) = v129;
            *(_DWORD *)(autolink + 92) = v131;
            int v6 = (void *)v236;
            goto LABEL_352;
          }
          if ((int)v56 < v8)
          {
            if (*(unsigned char *)(v241 + v56) == 40)
            {
              int v156 = _scan_at((uint64_t (*)(uint64_t))_scan_spacechars, &v241, v12 + 2);
              if ((v156 & 0x80000000) == 0)
              {
                int v157 = v156 + 1;
                int v158 = manual_scan_link_url((uint64_t)&v241, v246 + v156 + 1, (uint64_t)&v277);
                if ((v158 & 0x80000000) == 0)
                {
                  int v159 = v158 + v157 + v246;
                  int v160 = _scan_at((uint64_t (*)(uint64_t))_scan_spacechars, &v241, v159);
                  int v161 = v159 + v160;
                  if (v160) {
                    int v162 = _scan_at((uint64_t (*)(uint64_t))_scan_link_title, &v241, v161) + v161;
                  }
                  else {
                    int v162 = v161;
                  }
                  int v195 = _scan_at((uint64_t (*)(uint64_t))_scan_spacechars, &v241, v162) + v162;
                  if (*(unsigned char *)(v241 + v195) == 41)
                  {
                    int v246 = v195 + 1;
                    v275 = (unsigned __int8 *)(v241 + v161);
                    uint64_t v276 = (v162 - v161);
                    uint64_t v196 = cmark_clean_url((uint64_t)v240, (uint64_t)&v277);
                    uint64_t v198 = v197;
                    uint64_t v199 = cmark_clean_title((uint64_t)v240, &v275);
                    uint64_t v201 = v200;
                    v235 = (unsigned char *)v196;
                    if (HIDWORD(v278)) {
                      ((void (*)(uint64_t))v240[2])(v277);
                    }
                    uint64_t v202 = v201;
                    goto LABEL_354;
                  }
                  int v246 = v12 + 1;
                }
              }
            }
            else if (!*(unsigned char *)(v241 + v56))
            {
              cmark_parse_inlines_cold_1();
            }
          }
          v273 = &unk_21C3B4D0E;
          uint64_t v274 = 0;
          if (link_label((uint64_t)&v240, (int *)&v273, 0))
          {
            if (v274 || *(unsigned char *)(v57 + 25))
            {
LABEL_330:
              v204 = cmark_map_lookup(*((uint64_t **)&v248 + 1), (uint64_t)&v273);
              if (HIDWORD(v274)) {
                ((void (*)(void *))v240[2])(v273);
              }
              v273 = 0;
              uint64_t v274 = 0;
              if (!v204 || v204[32]) {
                goto LABEL_334;
              }
              v235 = chunk_clone(v240, (uint64_t)(v204 + 40));
              uint64_t v198 = v218;
              uint64_t v199 = (uint64_t)chunk_clone(v240, (uint64_t)(v204 + 56));
              uint64_t v202 = v219;
LABEL_354:
              v220 = v240;
              uint64_t v221 = (*v240)(1, 184);
              cmark_strbuf_init((uint64_t)v220, (uint64_t *)v221, 0);
              if (v58 == 1) {
                __int16 v222 = -16374;
              }
              else {
                __int16 v222 = -16375;
              }
              *(_WORD *)(v221 + 100) = v222;
              *(void *)(v221 + 144) = v235;
              *(void *)(v221 + 152) = v198;
              *(void *)(v221 + 160) = v199;
              *(void *)(v221 + 168) = v202;
              uint64_t v223 = *(void *)(v57 + 8);
              *(void *)(v221 + 80) = *(void *)(v223 + 80);
              int v224 = v248 + v246 + v247;
              *(_DWORD *)(v221 + 88) = v245;
              *(_DWORD *)(v221 + 92) = v224;
              cmark_node_insert_before(v223, (void *)v221);
              v225 = *(void **)(v57 + 8);
              v226 = (void *)v225[3];
              if (v226)
              {
                int v11 = v237;
                do
                {
                  v227 = (void *)v226[3];
                  cmark_node_unlink(v226);
                  uint64_t v228 = *(void *)(v221 + 56);
                  v226[3] = 0;
                  v226[4] = v228;
                  v226[5] = v221;
                  *(void *)(v221 + 56) = v226;
                  if (v228) {
                    v229 = (void *)(v228 + 24);
                  }
                  else {
                    v229 = (void *)(v221 + 48);
                  }
                  void *v229 = v226;
                  v226 = v227;
                }
                while (v227);
                v225 = *(void **)(v57 + 8);
                __int16 v4 = v239;
              }
              else
              {
                int v11 = v237;
              }
              cmark_node_free(v225);
              process_emphasis(v236, (uint64_t *)&v240, *(_DWORD *)(v57 + 16));
              if (*((void *)&v249 + 1))
              {
                *((void *)&v249 + 1) = **((void **)&v249 + 1);
                ((void (*)(void))v240[2])();
              }
              autolinunsigned int k = 0;
              if (v58 != 1) {
                BYTE5(v269[2]) = 1;
              }
              int v6 = (void *)v236;
              goto LABEL_193;
            }
          }
          else
          {
            int v246 = v12 + 1;
            if (*(unsigned char *)(v57 + 25))
            {
LABEL_334:
              int v6 = (void *)v236;
              if ((*(unsigned char *)(v236 + 121) & 0x20) != 0)
              {
                uint64_t v205 = *(void *)(*(void *)(v57 + 8) + 24);
                if (v205)
                {
                  if (*(unsigned __int16 *)(v205 + 100) == 49153)
                  {
                    int v206 = *(_DWORD *)(v205 + 152);
                    if (v206 >= 1
                      && **(unsigned char **)(v205 + 144) == 94
                      && (v206 > 1 || *(void *)(v205 + 24)))
                    {
                      int v246 = v12 + 1;
                      v207 = v240;
                      uint64_t v208 = (*v240)(1, 184);
                      cmark_strbuf_init((uint64_t)v207, (uint64_t *)v208, 0);
                      *(_WORD *)(v208 + 100) = -16373;
                      int v209 = v245;
                      int v210 = v248 + v246 + v247;
                      int v211 = *(_DWORD *)(*(void *)(v57 + 8) + 84);
                      LODWORD(v212) = v210 - v211 - 2;
                      if (v211 + 2 <= v210) {
                        uint64_t v212 = v212;
                      }
                      else {
                        uint64_t v212 = 0;
                      }
                      *(void *)(v208 + 144) = *(void *)(v205 + 144) + 1;
                      *(void *)(v208 + 152) = v212;
                      *(_DWORD *)(v208 + 80) = v209;
                      *(_DWORD *)(v208 + 84) = v211;
                      *(_DWORD *)(v208 + 88) = v209;
                      *(_DWORD *)(v208 + 92) = v210;
                      cmark_node_insert_before(*(void *)(v57 + 8), (void *)v208);
                      process_emphasis(v236, (uint64_t *)&v240, *(_DWORD *)(v57 + 16));
                      v213 = *(void **)(v57 + 8);
                      v214 = (void *)v213[3];
                      if (v214)
                      {
                        int v11 = v237;
                        do
                        {
                          v215 = (void *)v214[3];
                          cmark_node_free(v214);
                          v214 = v215;
                        }
                        while (v215);
                        v213 = *(void **)(v57 + 8);
                        __int16 v4 = v239;
                      }
                      else
                      {
                        int v11 = v237;
                      }
                      cmark_node_free(v213);
                      goto LABEL_299;
                    }
                  }
                }
              }
              if (*((void *)&v249 + 1))
              {
                *((void *)&v249 + 1) = **((void **)&v249 + 1);
                ((void (*)(void))v240[2])();
              }
              int v246 = v12 + 1;
LABEL_351:
              autolinunsigned int k = (*v240)(1, 184);
              cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
              *(_WORD *)(autolink + 100) = -16383;
              *(void *)(autolink + 144) = "]";
              *(void *)(autolink + 152) = 1;
              int v216 = v245;
              int v217 = v248 + v56 + v247;
              *(_DWORD *)(autolink + 80) = v245;
              *(_DWORD *)(autolink + 84) = v217;
              *(_DWORD *)(autolink + 88) = v216;
              *(_DWORD *)(autolink + 92) = v217;
LABEL_352:
              int v11 = v237;
              goto LABEL_193;
            }
          }
          if (HIDWORD(v274)) {
            ((void (*)(void *))v240[2])(v273);
          }
          uint64_t v203 = *(int *)(v57 + 16);
          v273 = (void *)(v241 + v203);
          uint64_t v274 = (v12 - v203);
          goto LABEL_330;
        }
        if ((int)v56 >= v8) {
          goto LABEL_280;
        }
        if (*(unsigned char *)(v241 + v56) != 40)
        {
          if (!*(unsigned char *)(v241 + v56)) {
            cmark_parse_inlines_cold_1();
          }
LABEL_280:
          uint64_t v163 = 0;
          LODWORD(v164) = 0;
LABEL_281:
          char v166 = 0;
          goto LABEL_282;
        }
        uint64_t v144 = v12 + 2;
        if (v8 <= v12 + 2)
        {
          LODWORD(v148) = v12 + 2;
          goto LABEL_274;
        }
        uint64_t v145 = 0;
        int v146 = v12 + 2;
        while (1)
        {
          int v147 = *(unsigned __int8 *)(v241 + v146);
          if (v147 != 92) {
            break;
          }
          uint64_t v148 = v146 + 1;
          if ((int)v148 < v8)
          {
            if (!cmark_ispunct(*(unsigned char *)(v241 + v148)))
            {
              int v147 = *(unsigned __int8 *)(v241 + v146);
              break;
            }
            LODWORD(v148) = v146 + 2;
          }
LABEL_254:
          int v8 = v242;
          int v146 = v148;
          if ((int)v148 >= v242) {
            goto LABEL_274;
          }
        }
        if (v147 == 40)
        {
          if ((unint64_t)++v145 > 0x20) {
            goto LABEL_280;
          }
          goto LABEL_253;
        }
        if (v147 != 41) {
          goto LABEL_253;
        }
        if (v145)
        {
          --v145;
LABEL_253:
          LODWORD(v148) = v146 + 1;
          goto LABEL_254;
        }
        int v8 = v242;
        LODWORD(v148) = v146;
LABEL_274:
        if ((int)v148 >= v8) {
          goto LABEL_280;
        }
        uint64_t v163 = (unsigned char *)(v241 + v144);
        LODWORD(v164) = v148 - v144;
        if ((int)v148 - (int)v144 < 0) {
          goto LABEL_281;
        }
        int v165 = v164 + v246 + 1;
        if (*(unsigned char *)(v241 + v165) != 41) {
          goto LABEL_281;
        }
        v246 += v164 + 2;
        LODWORD(v164) = v165 - v144;
        if (v165 == v144) {
          uint64_t v163 = 0;
        }
        char v166 = 1;
LABEL_282:
        v270 = (uint64_t (**)(uint64_t, uint64_t))&unk_21C3B4D0E;
        v271 = 0;
        if (link_label((uint64_t)&v240, (int *)&v270, 0))
        {
          v167 = cmark_map_lookup(*((uint64_t **)&v248 + 1), (uint64_t)&v270);
          if (HIDWORD(v271)) {
            ((void (*)(uint64_t (**)(uint64_t, uint64_t)))v240[2])(v270);
          }
          v270 = 0;
          v271 = 0;
          if (v167)
          {
            if (v167[32])
            {
              uint64_t v163 = chunk_clone(v240, (uint64_t)(v167 + 72));
              uint64_t v164 = v168;
              goto LABEL_290;
            }
          }
        }
        if ((v166 & 1) == 0)
        {
          int v6 = (void *)v236;
          if (*((void *)&v249 + 1))
          {
            *((void *)&v249 + 1) = **((void **)&v249 + 1);
            ((void (*)(void))v240[2])();
          }
          int v177 = v246;
          autolinunsigned int k = (*v240)(1, 184);
          cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
          *(_WORD *)(autolink + 100) = -16383;
          *(void *)(autolink + 144) = "]";
          *(void *)(autolink + 152) = 1;
          int v178 = v245;
          int v179 = v248 + v177 + v247;
          *(_DWORD *)(autolink + 80) = v245;
          *(_DWORD *)(autolink + 84) = v179;
          *(_DWORD *)(autolink + 88) = v178;
          *(_DWORD *)(autolink + 92) = v179;
          __int16 v4 = v239;
          goto LABEL_352;
        }
        uint64_t v164 = v164;
LABEL_290:
        v169 = v240;
        uint64_t v170 = (*v240)(1, 184);
        cmark_strbuf_init((uint64_t)v169, (uint64_t *)v170, 0);
        *(_WORD *)(v170 + 100) = -16372;
        *(void *)(v170 + 144) = v163;
        *(void *)(v170 + 152) = v164;
        int v171 = v245;
        int v172 = v246;
        *(_DWORD *)(v170 + 88) = v245;
        *(_DWORD *)(v170 + 80) = v171;
        uint64_t v173 = *(void *)(v57 + 8);
        *(_DWORD *)(v170 + 84) = *(_DWORD *)(v173 + 84);
        *(_DWORD *)(v170 + 92) = v248 + v172 + v247;
        cmark_node_insert_before(v173, (void *)v170);
        v174 = *(void **)(v57 + 8);
        v175 = (void *)v174[3];
        if (v175)
        {
          int v6 = (void *)v236;
          int v11 = v237;
          do
          {
            v176 = (void *)v175[3];
            cmark_node_append_child((void *)v170, v175);
            v175 = v176;
          }
          while (v176);
          v174 = *(void **)(v57 + 8);
          __int16 v4 = v239;
        }
        else
        {
          int v6 = (void *)v236;
          int v11 = v237;
        }
        cmark_node_free(v174);
        process_emphasis((uint64_t)v6, (uint64_t *)&v240, *(_DWORD *)(v57 + 16));
LABEL_299:
        if (*((void *)&v249 + 1))
        {
          *((void *)&v249 + 1) = **((void **)&v249 + 1);
          ((void (*)(void))v240[2])();
        }
        autolinunsigned int k = 0;
LABEL_193:
        if (v246 == v12)
        {
          if (!autolink)
          {
            int v107 = v238;
            while (1)
            {
              int v107 = (void *)*v107;
              if (!v107) {
                break;
              }
              uint64_t v108 = (*(uint64_t (**)(void))(v107[1] + 16))();
              if (v108)
              {
                autolinunsigned int k = v108;
                goto LABEL_225;
              }
            }
            uint64_t v109 = v246;
            int v110 = v246 + 1;
            if (v246 + 1 >= v242)
            {
LABEL_207:
              int v112 = v242;
            }
            else
            {
              int v111 = (unsigned __int8 *)(v241 + v246 + 1);
              int v112 = v246 + 1;
              while (1)
              {
                unsigned int v114 = *v111++;
                uint64_t v113 = v114;
                if (*(unsigned char *)(v6[21] + v114) || (v4 & 0x400) != 0 && SMART_PUNCT_CHARS[v113]) {
                  break;
                }
                if (v242 == ++v112) {
                  goto LABEL_207;
                }
              }
            }
            if (v112 == v246)
            {
              ++v246;
              uint64_t v115 = v241 + v109;
              autolinunsigned int k = (*v240)(1, 184);
              cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
              *(_WORD *)(autolink + 100) = -16383;
              *(void *)(autolink + 144) = v115;
              __int16 v4 = v239;
              *(void *)(autolink + 152) = 1;
              int v116 = v245;
              int v117 = v248 + v110 + v247;
              *(_DWORD *)(autolink + 80) = v245;
              *(_DWORD *)(autolink + 84) = v117;
              *(_DWORD *)(autolink + 88) = v116;
            }
            else
            {
              uint64_t v118 = (v112 - v246);
              uint64_t v119 = v241 + v246;
              int v246 = v112;
              if (!v11 && v112 < v242)
              {
                int v120 = *(unsigned __int8 *)(v241 + v112);
                if (v120 == 10 || v120 == 13)
                {
                  if ((int)v118 >= 1)
                  {
                    do
                    {
                      if (!cmark_isspace(*(unsigned char *)(v119 + (v118 - 1)))) {
                        break;
                      }
                      BOOL v122 = __OFSUB__(v118, 1);
                      uint64_t v118 = (v118 - 1);
                    }
                    while (!(((int)v118 < 0) ^ v122 | (v118 == 0)));
                  }
                }
                else if (!*(unsigned char *)(v241 + v112))
                {
                  cmark_parse_inlines_cold_1();
                }
              }
              autolinunsigned int k = (*v240)(1, 184);
              cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
              *(_WORD *)(autolink + 100) = -16383;
              *(void *)(autolink + 144) = v119;
              *(void *)(autolink + 152) = v118;
              int v123 = v245;
              int v124 = v247 + v248;
              *(_DWORD *)(autolink + 80) = v245;
              *(_DWORD *)(autolink + 84) = v124 + v110;
              *(_DWORD *)(autolink + 88) = v123;
              int v117 = v124 + v112;
            }
            *(_DWORD *)(autolink + 92) = v117;
          }
LABEL_225:
          uint64_t v125 = *(void *)(a2 + 56);
          *(void *)(autolink + 24) = 0;
          *(void *)(autolink + 32) = v125;
          *(void *)(autolink + 40) = a2;
          *(void *)(a2 + 56) = autolink;
          uint64_t v126 = (uint64_t *)(v125 + 24);
          BOOL v17 = v125 == 0;
          int v127 = (uint64_t *)(a2 + 48);
          if (!v17) {
            int v127 = v126;
          }
          *int v127 = autolink;
          int v12 = v246;
        }
        else
        {
          if (autolink) {
            goto LABEL_225;
          }
          int v12 = v246;
        }
        int v8 = v242;
        if (v12 < v242) {
          continue;
        }
LABEL_385:
        process_emphasis((uint64_t)v6, (uint64_t *)&v240, 0);
        while ((void)v249)
          remove_delimiter(&v240, (uint64_t *)v249);
        while (1)
        {
          uint64_t result = *((void *)&v249 + 1);
          if (!*((void *)&v249 + 1)) {
            break;
          }
          *((void *)&v249 + 1) = **((void **)&v249 + 1);
          ((void (*)(void))v240[2])();
        }
        return result;
      case '^':
        uint64_t v59 = v12 + 1;
        if (v12 + 1 >= v8) {
          goto LABEL_86;
        }
        if (*(unsigned char *)(v241 + v59) == 91)
        {
          int v246 = v12 + 2;
          autolinunsigned int k = (*v240)(1, 184);
          cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
          *(_WORD *)(autolink + 100) = -16383;
          *(void *)(autolink + 144) = "^[";
          *(void *)(autolink + 152) = 2;
          int v93 = v245;
          int v94 = v248 + v247 + 1;
          *(_DWORD *)(autolink + 80) = v245;
          *(_DWORD *)(autolink + 84) = v94 + v12;
          *(_DWORD *)(autolink + 88) = v93;
          *(_DWORD *)(autolink + 92) = v94 + v59;
          push_bracket((uint64_t)&v240, 2u, autolink);
        }
        else
        {
          if (!*(unsigned char *)(v241 + v59)) {
            cmark_parse_inlines_cold_1();
          }
LABEL_86:
          autolinunsigned int k = 0;
        }
        goto LABEL_193;
      case '_':
        LODWORD(v270) = 0;
        LODWORD(v277) = 0;
        if (!v12) {
          goto LABEL_40;
        }
        for (uint64_t i = 0; ; --i)
        {
          uint64_t v23 = v12 + i;
          uint64_t v24 = *(unsigned __int8 *)(v241 + v12 - 1 + i);
          if ((v24 & 0xC0) == 0x80)
          {
            if (v23 < 2) {
              goto LABEL_37;
            }
          }
          else if (v23 < 2 || !*(unsigned char *)(v6[20] + v24))
          {
LABEL_37:
            if (cmark_utf8proc_iterate((unsigned __int8 *)(v241 + v12 + i - 1), 1 - (int)i, (unsigned int *)&v277) == -1|| (int)v277 <= 255 && *(unsigned char *)(v6[20] + v277))
            {
LABEL_40:
              LODWORD(v277) = 10;
            }
            if (v16 == 34 || v16 == 39)
            {
              int v31 = v242;
              int v32 = ++v246;
              LODWORD(v33) = 1;
            }
            else
            {
              uint64_t v33 = 0;
              int v31 = v242;
              int v43 = v246;
              uint64_t v44 = v246;
              uint64_t v45 = v241 + v246;
              while (1)
              {
                if (v44 + v33 >= v242)
                {
                  int v46 = 0;
                }
                else
                {
                  int v46 = *(unsigned __int8 *)(v45 + v33);
                  if (!*(unsigned char *)(v45 + v33)) {
                    cmark_parse_inlines_cold_1();
                  }
                }
                if (v46 != v16) {
                  break;
                }
                int v246 = v43 + v33++ + 1;
              }
              int v32 = v44 + v33;
            }
            if (v32 == v31) {
              goto LABEL_69;
            }
            uint64_t v47 = v32;
            uint64_t v48 = v31;
            int v49 = v31 - v32 + 1;
            do
            {
              uint64_t v50 = v47 + 1;
              --v49;
              if (v47 >= v48) {
                break;
              }
            }
            while (*(unsigned __int8 *)(v6[20] + *(unsigned __int8 *)(v241 + v47++)));
            if (cmark_utf8proc_iterate((unsigned __int8 *)(v241 + v50 - 1), v49, (unsigned int *)&v270) == -1
              || (unsigned int v52 = v270, (int)v270 <= 255) && *(unsigned char *)(v6[20] + v270))
            {
LABEL_69:
              unsigned int v52 = 10;
              LODWORD(v270) = 10;
            }
            if (!v33)
            {
              BOOL is_punctuation = 0;
              goto LABEL_154;
            }
            if (cmark_utf8proc_is_space(v52)) {
              BOOL is_punctuation = 0;
            }
            else {
              BOOL is_punctuation = !cmark_utf8proc_is_punctuation((int)v270)
            }
                            || cmark_utf8proc_is_space(v277)
                            || cmark_utf8proc_is_punctuation(v277);
            if (cmark_utf8proc_is_space(v277)) {
LABEL_154:
            }
              int v95 = 0;
            else {
              int v95 = !cmark_utf8proc_is_punctuation(v277)
            }
                 || cmark_utf8proc_is_space(v270)
                 || cmark_utf8proc_is_punctuation((int)v270);
            if (v16 == 34 || v16 == 39)
            {
              if (is_punctuation)
              {
                if (v277 == 41) {
                  BOOL is_punctuation = 0;
                }
                else {
                  BOOL is_punctuation = (v277 != 93) & ~v95;
                }
              }
            }
            else if (v16 == 95)
            {
              int v96 = !is_punctuation;
              int v97 = v95 ^ 1;
              if (is_punctuation && (v97 & 1) == 0) {
                BOOL is_punctuation = cmark_utf8proc_is_punctuation(v277);
              }
              if (((v96 | v97) & 1) == 0) {
                int v95 = cmark_utf8proc_is_punctuation((int)v270);
              }
LABEL_176:
              int v98 = (const char *)(v241 - (int)v33 + v246);
              uint64_t v99 = v33;
              goto LABEL_177;
            }
            if ((v4 & 0x400) != 0 && v16 == 39)
            {
              int v98 = "’";
            }
            else
            {
              if ((v4 & 0x400) == 0 || v16 != 34) {
                goto LABEL_176;
              }
              if (v95) {
                int v98 = "”";
              }
              else {
                int v98 = "“";
              }
            }
            uint64_t v99 = 3;
LABEL_177:
            int v100 = v246;
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
            *(void *)(autolink + 144) = v98;
            *(void *)(autolink + 152) = v99;
            int v101 = v245;
            int v102 = v247 + v248;
            *(_WORD *)(autolink + 100) = -16383;
            *(_DWORD *)(autolink + 80) = v101;
            *(_DWORD *)(autolink + 84) = v100 - v33 + v102 + 1;
            *(_DWORD *)(autolink + 88) = v101;
            *(_DWORD *)(autolink + 92) = v102 + v100;
            if (is_punctuation | v95)
            {
              int v6 = (void *)v236;
              __int16 v4 = v239;
              if (v16 != 39 && v16 != 34 || (v239 & 0x400) != 0)
              {
                uint64_t v103 = (*v240)(1, 48);
                *(unsigned char *)(v103 + 32) = v16;
                *(_DWORD *)(v103 + 36) = is_punctuation;
                *(_DWORD *)(v103 + 40) = v95;
                *(void *)(v103 + 16) = autolink;
                *(_DWORD *)(v103 + 24) = v246;
                *(_DWORD *)(v103 + 28) = *(_DWORD *)(autolink + 152);
                uint64_t v104 = v249;
                *(void *)uint64_t v103 = v249;
                *(void *)(v103 + 8) = 0;
                if (v104) {
                  *(void *)(v104 + 8) = v103;
                }
                *(void *)&long long v249 = v103;
              }
            }
            else
            {
              int v6 = (void *)v236;
              __int16 v4 = v239;
            }
            goto LABEL_192;
          }
        }
        int v60 = v8 - v12;
        int v61 = 1;
        int v62 = (unsigned __int8 *)(v241 + v12);
        int v63 = v12;
        while (1)
        {
          int v65 = *v62++;
          int v64 = v65;
          if (v65 != 96) {
            break;
          }
          int v246 = ++v63;
          ++v61;
          if (v8 == v63)
          {
            int v63 = v8;
            goto LABEL_96;
          }
        }
        if (!v64) {
          cmark_parse_inlines_cold_1();
        }
        int v60 = v61 - 1;
LABEL_96:
        if (v60 > 80 || BYTE4(v269[2]) && *((_DWORD *)&v250 + v60) <= v63) {
          goto LABEL_190;
        }
        int v66 = v63;
        while (1)
        {
          if (v66 < v8)
          {
            uint64_t v67 = v8 - (uint64_t)v66;
            int v68 = (unsigned __int8 *)(v14 + v66);
            while (1)
            {
              int v70 = *v68++;
              int v69 = v70;
              if (v70 == 96) {
                break;
              }
              if (!v69) {
                cmark_parse_inlines_cold_1();
              }
              int v246 = ++v66;
              if (!--v67) {
                goto LABEL_189;
              }
            }
          }
          unsigned int v71 = v8 - v66;
          if (v8 <= v66) {
            break;
          }
          uint64_t v72 = 0;
          while (*(unsigned char *)(v14 + v66 + v72) == 96)
          {
            int v246 = v66 + v72++ + 1;
            if (v8 - (uint64_t)v66 == v72)
            {
              int v66 = v8;
              goto LABEL_113;
            }
          }
          if (!*(unsigned char *)(v14 + v66 + v72)) {
            cmark_parse_inlines_cold_1();
          }
          v66 += v72;
          unsigned int v71 = v72;
LABEL_113:
          if (v71 <= 0x50) {
            *((_DWORD *)&v250 + v71) = v66 - v71;
          }
          if (v71 == v60)
          {
            if (v66)
            {
              v270 = v240;
              v271 = &cmark_strbuf__initbuf;
              uint64_t v272 = 0;
              cmark_strbuf_set((char *)&v270, (char *)(v14 + v63), (v66 - v63 - v60));
              int v73 = HIDWORD(v272);
              if (SHIDWORD(v272) < 1)
              {
                int v76 = 0;
                goto LABEL_307;
              }
              uint64_t v74 = 0;
              char v75 = 0;
              int v76 = 0;
              unint64_t v77 = v271;
              while (1)
              {
                int v78 = v77[v74];
                if (v78 == 10) {
                  break;
                }
                if (v78 != 13) {
                  goto LABEL_124;
                }
                if (v77[v74 + 1] != 10) {
                  break;
                }
                int v79 = 13;
                ++v74;
LABEL_125:
                v75 |= v79 != 32;
                if (v74 >= v73)
                {
                  if ((v75 & 1) != 0 && *v77 == 32 && v77[v76 - 1] == 32)
                  {
                    cmark_strbuf_drop(&v270, 1);
                    v76 -= 2;
                  }
LABEL_307:
                  cmark_strbuf_truncate((uint64_t)&v270, v76);
                  uint64_t v187 = HIDWORD(v272);
                  uint64_t v188 = cmark_strbuf_detach((uint64_t)&v270);
                  autolinunsigned int k = (*v240)(1, 184);
                  cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
                  *(void *)(autolink + 144) = v188;
                  *(void *)(autolink + 152) = v187 | 0x100000000;
                  int v189 = v247;
                  int v190 = v245;
                  int v191 = v248 + 1;
                  int v192 = v247 + v63 + v248 + 1;
                  *(_DWORD *)(autolink + 80) = v245;
                  *(_DWORD *)(autolink + 84) = v192;
                  *(_WORD *)(autolink + 100) = -16380;
                  *(_DWORD *)(autolink + 88) = v190;
                  *(_DWORD *)(autolink + 92) = v66 + ~v60 + v189 + v191;
                  *(_DWORD *)(autolink + 104) = v60;
                  adjust_subj_node_newlines((uint64_t)&v240, autolink, v66 - v63, v60, v4);
LABEL_191:
                  int v6 = (void *)v236;
LABEL_192:
                  int v11 = v237;
                  goto LABEL_193;
                }
              }
              LOBYTE(v78) = 32;
LABEL_124:
              v77[v76++] = v78;
              unint64_t v77 = v271;
              int v73 = HIDWORD(v272);
              int v79 = v271[v74++];
              goto LABEL_125;
            }
LABEL_190:
            int v246 = v63;
            autolinunsigned int k = (*v240)(1, 184);
            cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
            *(void *)(autolink + 144) = v15;
            *(void *)(autolink + 152) = v60;
            int v105 = v245;
            int v106 = v12 + v248 + v247;
            *(_DWORD *)(autolink + 80) = v245;
            *(_DWORD *)(autolink + 84) = v106 + 1;
            *(_WORD *)(autolink + 100) = -16383;
            *(_DWORD *)(autolink + 88) = v105;
            *(_DWORD *)(autolink + 92) = v106 + v60;
            goto LABEL_191;
          }
        }
LABEL_189:
        BYTE4(v269[2]) = 1;
        goto LABEL_190;
      default:
        if (v16 != 60) {
          goto LABEL_193;
        }
        int v246 = v12 + 1;
        int v37 = _scan_at((uint64_t (*)(uint64_t))_scan_autolink_uri, &v241, v12 + 1);
        unint64_t v38 = (v37 - 1);
        if (v37 >= 1)
        {
          int v39 = (unsigned __int8 *)(v241 + v246);
          v246 += v37;
          int v40 = v246 - 1;
          int v41 = v246 - 1 - v37;
          int v42 = 0;
LABEL_137:
          autolinunsigned int k = make_autolink((uint64_t)&v240, v41, v40, v39, v38, v42);
          goto LABEL_193;
        }
        int v89 = _scan_at((uint64_t (*)(uint64_t))_scan_autolink_email, &v241, v246);
        uint64_t v90 = v246;
        unint64_t v38 = (v89 - 1);
        if (v89 >= 1)
        {
          int v39 = (unsigned __int8 *)(v241 + v246);
          v246 += v89;
          int v40 = v246 - 1;
          int v41 = v246 - 1 - v89;
          int v42 = 1;
          goto LABEL_137;
        }
        if (v246 + 2 > v242) {
          goto LABEL_231;
        }
        int v151 = *(unsigned __int8 *)(v241 + v246);
        if (v151 == 63)
        {
          if ((v244 & 4) != 0) {
            goto LABEL_231;
          }
          int v154 = _scan_at((uint64_t (*)(uint64_t))_scan_html_pi, &v241, v246 + 1) + 3;
          if (v246 + v154 > v242)
          {
            int v193 = 4;
LABEL_311:
            v244 |= v193;
            goto LABEL_231;
          }
        }
        else
        {
          if (v151 == 33 && (v244 & 8) == 0)
          {
            int v152 = *(unsigned __int8 *)(v241 + v246 + 1);
            if (v152 == 91)
            {
              if (v244) {
                goto LABEL_231;
              }
              int v230 = _scan_at((uint64_t (*)(uint64_t))_scan_html_cdata, &v241, v246 + 2);
              if (v230 < 1) {
                goto LABEL_231;
              }
              int v154 = v230 + 5;
              if (v246 + v230 + 5 <= v242) {
                goto LABEL_304;
              }
              int v193 = 1;
            }
            else if (v152 == 45 && *(unsigned char *)(v241 + v246 + 2) == 45)
            {
              int v153 = *(unsigned __int8 *)(v246 + v241 + 3);
              if (v153 == 62)
              {
                int v154 = 4;
                goto LABEL_304;
              }
              if (v153 == 45 && *(unsigned char *)(v246 + v241 + 4) == 62)
              {
                int v154 = 5;
LABEL_304:
                int v180 = v246;
                uint64_t v181 = v246 + v241 - 1;
                v246 += v154;
                int v182 = v246;
                autolinunsigned int k = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v240)(1, 184, v90);
                cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
                *(_WORD *)(autolink + 100) = -16379;
                *(void *)(autolink + 144) = v181;
                *(void *)(autolink + 152) = (v154 + 1);
                int v183 = v245;
                int v184 = v247 + v248;
                int v185 = v247 + v248 + v180;
                *(_DWORD *)(autolink + 80) = v245;
                *(_DWORD *)(autolink + 84) = v185;
                int v186 = v184 + v182;
                int v11 = v237;
                *(_DWORD *)(autolink + 88) = v183;
                *(_DWORD *)(autolink + 92) = v186;
                uint64_t v142 = autolink;
                int v143 = v154;
LABEL_305:
                adjust_subj_node_newlines((uint64_t)&v240, v142, v143, 1, v4);
                goto LABEL_193;
              }
              int v231 = _scan_at((uint64_t (*)(uint64_t))_scan_html_comment, &v241, v246 + 1);
              if (v231 >= 1)
              {
                int v154 = v231 + 1;
                goto LABEL_304;
              }
              int v193 = 8;
            }
            else
            {
              if ((v244 & 2) != 0) {
                goto LABEL_231;
              }
              int v194 = _scan_at((uint64_t (*)(uint64_t))_scan_html_declaration, &v241, v246 + 1);
              if (v194 < 1) {
                goto LABEL_231;
              }
              int v154 = v194 + 2;
              if (v246 + v194 + 2 <= v242) {
                goto LABEL_304;
              }
              int v193 = 2;
            }
            goto LABEL_311;
          }
          int v154 = _scan_at((uint64_t (*)(uint64_t))_scan_html_tag, &v241, v246);
        }
        if (v154 >= 1) {
          goto LABEL_304;
        }
LABEL_231:
        int v132 = v246;
        if ((v4 & 0x1000) == 0
          || (int v133 = _scan_at((uint64_t (*)(uint64_t))_scan_liberal_html_tag, &v241, v246),
              int v132 = v246,
              v133 < 1))
        {
          autolinunsigned int k = (*v240)(1, 184);
          cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
          *(_WORD *)(autolink + 100) = -16383;
          *(void *)(autolink + 144) = "<";
          *(void *)(autolink + 152) = 1;
          int v149 = v245;
          int v150 = v248 + v132 + v247;
          *(_DWORD *)(autolink + 80) = v245;
          *(_DWORD *)(autolink + 84) = v150;
          *(_DWORD *)(autolink + 88) = v149;
          *(_DWORD *)(autolink + 92) = v150;
          goto LABEL_193;
        }
        int v134 = v133;
        uint64_t v135 = (v133 + 1);
        uint64_t v136 = v246 + v241 - 1;
        v246 += v133;
        int v137 = v246;
        autolinunsigned int k = (*v240)(1, 184);
        cmark_strbuf_init((uint64_t)v240, (uint64_t *)autolink, 0);
        *(_WORD *)(autolink + 100) = -16379;
        *(void *)(autolink + 144) = v136;
        *(void *)(autolink + 152) = v135;
        int v138 = v245;
        int v139 = v247 + v248;
        int v140 = v247 + v248 + v132;
        *(_DWORD *)(autolink + 80) = v245;
        *(_DWORD *)(autolink + 84) = v140;
        int v141 = v139 + v137;
        int v11 = v237;
        *(_DWORD *)(autolink + 88) = v138;
        *(_DWORD *)(autolink + 92) = v141;
        uint64_t v142 = autolink;
        int v143 = v134;
        goto LABEL_305;
    }
  }
}

uint64_t match(uint64_t a1, uint64_t (***a2)(uint64_t, uint64_t), uint64_t a3, int a4, _DWORD *a5)
{
  if (cmark_inline_parser_in_bracket((uint64_t)a5, 0)
    || cmark_inline_parser_in_bracket((uint64_t)a5, 1))
  {
    return 0;
  }
  if (a4 != 119)
  {
    if (a4 != 58) {
      return 0;
    }
    chununsigned int k = cmark_inline_parser_get_chunk((uint64_t)a5);
    int offset = cmark_inline_parser_get_offset((uint64_t)a5);
    uint64_t v13 = *(int *)(chunk + 8) - (uint64_t)offset;
    if (v13 < 4) {
      return 0;
    }
    unsigned int v14 = offset;
    uint64_t v15 = *(void *)chunk + offset;
    if (*(unsigned char *)(v15 + 1) != 47 || *(unsigned char *)(v15 + 2) != 47) {
      return 0;
    }
    uint64_t v50 = offset;
    uint64_t v51 = (void *)chunk;
    int v52 = offset;
    if (offset < 1)
    {
      unsigned int v18 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = offset + *(void *)chunk - 1;
      while (cmark_isalpha(*(unsigned char *)(v17 + v16)))
      {
        --v16;
        if (!(v14 + v16))
        {
          unsigned int v18 = v14;
          goto LABEL_36;
        }
      }
      unsigned int v18 = -(int)v16;
    }
LABEL_36:
    uint64_t v34 = 0;
    unint64_t v53 = v13;
    uint64_t v54 = v15;
    __int16 v35 = (const char *)(v15 - v18);
    int v49 = v18;
    unint64_t v36 = v13 + v18;
    while (1)
    {
      size_t v37 = strlen(sd_autolink_issafe_valid_uris[v34]);
      int v38 = v36 - v37;
      if (v36 > v37)
      {
        size_t v39 = v37;
        if (!strncasecmp(v35, sd_autolink_issafe_valid_uris[v34], v37)
          && is_valid_hostchar((unsigned __int8 *)&v35[v39], v38))
        {
          break;
        }
      }
      uint64_t v9 = 0;
      if (++v34 == 3) {
        return v9;
      }
    }
    unint64_t v40 = check_domain(v54 + 3, v53 - 3, 1);
    if (!v40) {
      return 0;
    }
    unint64_t v41 = v40 + 3;
    if (v40 + 3 >= v53)
    {
      int v42 = v52;
    }
    else
    {
      int v42 = v52;
      do
      {
        if (cmark_isspace(*(unsigned char *)(v54 + v41))) {
          break;
        }
        if (*(unsigned char *)(v54 + v41) == 60) {
          break;
        }
        ++v41;
      }
      while (v41 < v53);
    }
    unint64_t v43 = autolink_delim(v54, v41);
    if (!v43) {
      return 0;
    }
    int v44 = v43;
    cmark_inline_parser_set_offset((uint64_t)a5, v42 + v43);
    cmark_node_unput(a3, v49);
    uint64_t v9 = cmark_node_new_with_mem(0xC009u, *a2);
    uint64_t v45 = v50 - v49;
    uint64_t v46 = (v49 + v44);
    uint64_t v47 = *v51 + v45;
    *(void *)(v9 + 144) = v47;
    *(void *)(v9 + 152) = v46;
    uint64_t v31 = cmark_node_new_with_mem(0xC001u, *a2);
    *(void *)(v31 + 144) = v47;
    *(void *)(v31 + 152) = v46;
    cmark_node_append_child((void *)v9, (void *)v31);
    int line = cmark_inline_parser_get_line((uint64_t)a5);
    *(_DWORD *)(v31 + 88) = line;
    *(_DWORD *)(v9 + 88) = line;
    *(_DWORD *)(v31 + 80) = line;
    *(_DWORD *)(v9 + 80) = line;
    *(_DWORD *)(v31 + 84) = v45;
    *(_DWORD *)(v9 + 84) = v45;
    goto LABEL_33;
  }
  uint64_t v19 = cmark_inline_parser_get_chunk((uint64_t)a5);
  int v20 = cmark_inline_parser_get_offset((uint64_t)a5);
  int v21 = (_DWORD *)(*(void *)v19 + v20);
  unint64_t v22 = *(int *)(v19 + 8) - (uint64_t)v20;
  int column = cmark_inline_parser_get_column(a5);
  if (v20)
  {
    unsigned __int8 v24 = *((unsigned char *)v21 - 1);
    if (!memchr("*_~(", v24, 5uLL))
    {
      if (!cmark_isspace(v24) || v22 < 4) {
        return 0;
      }
      goto LABEL_24;
    }
  }
  if (v22 >= 4)
  {
LABEL_24:
    if (*v21 != 779581303) {
      return 0;
    }
    unint64_t v26 = check_domain((uint64_t)v21, v22, 0);
    if (!v26) {
      return 0;
    }
    for (unint64_t i = v26; i < v22 && !cmark_isspace(*((unsigned char *)v21 + i)) && *((unsigned char *)v21 + i) != 60; ++i)
      ;
    unint64_t v28 = autolink_delim((uint64_t)v21, i);
    if (!v28) {
      return 0;
    }
    unsigned int v29 = v28;
    cmark_inline_parser_set_offset((uint64_t)a5, v20 + v28);
    uint64_t v9 = cmark_node_new_with_mem(0xC009u, *a2);
    v55[0] = 0;
    v55[1] = 0;
    uint64_t v56 = 0;
    cmark_strbuf_init((uint64_t)*a2, v55, 10);
    cmark_strbuf_puts(v55, "http://");
    cmark_strbuf_put(v55, v21, v29);
    uint64_t v30 = HIDWORD(v56);
    *(void *)(v9 + 144) = cmark_strbuf_detach((uint64_t)v55);
    *(void *)(v9 + 152) = v30 | 0x100000000;
    uint64_t v31 = cmark_node_new_with_mem(0xC001u, *a2);
    *(void *)(v31 + 144) = *(void *)v19 + v20;
    *(void *)(v31 + 152) = v29;
    cmark_node_append_child((void *)v9, (void *)v31);
    int v32 = cmark_inline_parser_get_line((uint64_t)a5);
    *(_DWORD *)(v31 + 88) = v32;
    *(_DWORD *)(v9 + 88) = v32;
    *(_DWORD *)(v31 + 80) = v32;
    *(_DWORD *)(v9 + 80) = v32;
    *(_DWORD *)(v31 + 84) = column - 1;
    *(_DWORD *)(v9 + 84) = column - 1;
LABEL_33:
    int v33 = cmark_inline_parser_get_column(a5);
    *(_DWORD *)(v31 + 92) = v33 - 1;
    *(_DWORD *)(v9 + 92) = v33 - 1;
    return v9;
  }
  return 0;
}

_DWORD *match_0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a4 != 126) {
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v7 = cmark_inline_parser_scan_delimiters((uint64_t)a5, 100, 126, (BOOL *)&v12 + 1, (BOOL *)&v12, (_DWORD *)&v11 + 1, &v11);
  __memset_chk();
  __s[v7] = 0;
  int v8 = (_DWORD *)cmark_node_new_with_mem(0xC001u, *(uint64_t (***)(uint64_t, uint64_t))a2);
  cmark_node_set_literal((uint64_t)v8, __s);
  int line = cmark_inline_parser_get_line((uint64_t)a5);
  v8[22] = line;
  v8[20] = line;
  v8[21] = cmark_inline_parser_get_column(a5) - v7;
  if (v12 && (v7 == 2 || v7 == 1 && (*(_DWORD *)(a2 + 120) & 0x4000) == 0)) {
    cmark_inline_parser_push_delimiter((uint64_t)a5, 126, SHIDWORD(v12), v12, (uint64_t)v8);
  }
  return v8;
}

uint64_t cmark_inline_parser_in_bracket(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a1 + 64);
  if (!v2) {
    return 0;
  }
  if (a2 == 2) {
    return v2[28];
  }
  if (a2 != 1)
  {
    if (!a2) {
      return v2[26];
    }
    return 0;
  }
  return v2[27];
}

void process_emphasis(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  bzero(v56, 0x600uLL);
  for (uint64_t i = 0; i != 1536; i += 512)
  {
    int v7 = &v56[i];
    v7[42] = a3;
    v7[95] = a3;
    v7[39] = a3;
    v7[34] = a3;
  }
  uint64_t v8 = a2[7];
  if (!v8) {
    return;
  }
  if (*(_DWORD *)(v8 + 24) >= a3)
  {
    uint64_t v10 = a2[7];
    while (1)
    {
      uint64_t v9 = v10;
      uint64_t v10 = *(void *)v10;
      if (!v10) {
        break;
      }
      if (*(_DWORD *)(v10 + 24) < a3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
LABEL_9:
    if (!v9) {
      goto LABEL_100;
    }
  }
  uint64_t v50 = a1;
  do
  {
    uint64_t v11 = *(unsigned __int8 *)(v9 + 32);
    for (int j = *(void **)(a1 + 144); j; int j = (void *)*j)
    {
      uint64_t v13 = j[1];
      uint64_t v14 = (uint64_t **)(v13 + 32);
      while (1)
      {
        uint64_t v14 = (uint64_t **)*v14;
        if (!v14) {
          break;
        }
        if (v11 == *((unsigned __int8 *)v14 + 8)) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v13 = 0;
LABEL_18:
    if (!*(_DWORD *)(v9 + 40))
    {
      uint64_t v21 = *(void *)(v9 + 8);
      goto LABEL_96;
    }
    for (uint64_t k = *(void *)v9; k; uint64_t k = *(void *)k)
    {
      int v16 = *(_DWORD *)(k + 24);
      if (v16 < a3) {
        break;
      }
      int v17 = *(_DWORD *)(v9 + 28);
      int v18 = v17 % 3;
      if (v16 < *(_DWORD *)&v56[512 * (uint64_t)(v17 % 3) + 4 * v11]) {
        break;
      }
      if (*(_DWORD *)(k + 36) && *(unsigned __int8 *)(k + 32) == v11)
      {
        if (*(_DWORD *)(v9 + 36))
        {
          if (!v18) {
            goto LABEL_37;
          }
        }
        else
        {
          if (v18) {
            BOOL v19 = *(_DWORD *)(k + 40) == 0;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19)
          {
LABEL_37:
            int v20 = 1;
            if (v13) {
              goto LABEL_34;
            }
            goto LABEL_38;
          }
        }
        if ((715827882 - 1431655765 * (*(_DWORD *)(k + 28) + v17)) > 0x55555554) {
          goto LABEL_37;
        }
      }
    }
    int v20 = 0;
    if (v13)
    {
LABEL_34:
      if (v20)
      {
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v13 + 24))(v13, a1, a2, k, v9);
        goto LABEL_96;
      }
LABEL_93:
      uint64_t v21 = *(void *)(v9 + 8);
      goto LABEL_94;
    }
LABEL_38:
    if (*(unsigned __int8 *)(v9 + 32) > 0x29u)
    {
      if (v11 != 95)
      {
        uint64_t v21 = v9;
        if (v11 != 42) {
          goto LABEL_91;
        }
      }
      if (v20)
      {
        uint64_t v30 = *(void *)(k + 16);
        uint64_t v31 = *(void *)(v9 + 16);
        int v32 = *(_DWORD *)(v30 + 152);
        int v33 = *(_DWORD *)(v31 + 152);
        BOOL v35 = v33 < 2 || v32 < 2;
        int v51 = *(_DWORD *)(v30 + 152);
        BOOL v52 = v35;
        if (v35) {
          int v36 = 1;
        }
        else {
          int v36 = 2;
        }
        int v54 = v36;
        int v55 = *(_DWORD *)(v31 + 152);
        *(_DWORD *)(v30 + 152) = v32 - v36;
        *(_DWORD *)(v31 + 152) = v33 - v36;
        size_t v37 = *(uint64_t **)v9;
        if (*(void *)v9 && v37 != (uint64_t *)k)
        {
          do
          {
            uint64_t v38 = *v37;
            remove_delimiter(a2, v37);
            if (v38) {
              BOOL v39 = v38 == k;
            }
            else {
              BOOL v39 = 1;
            }
            size_t v37 = (uint64_t *)v38;
          }
          while (!v39);
        }
        uint64_t v40 = *a2;
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))*a2)(1, 184);
        cmark_strbuf_init(v40, (uint64_t *)v41, 0);
        if (v52) {
          __int16 v42 = -16377;
        }
        else {
          __int16 v42 = -16376;
        }
        *(_WORD *)(v41 + 100) = v42;
        unint64_t v53 = (void *)v30;
        unint64_t v43 = *(void **)(v30 + 24);
        if (v43) {
          BOOL v44 = v43 == (void *)v31;
        }
        else {
          BOOL v44 = 1;
        }
        if (!v44)
        {
          do
          {
            uint64_t v45 = (void *)v43[3];
            cmark_node_unlink(v43);
            uint64_t v46 = *(void *)(v41 + 56);
            v43[3] = 0;
            v43[4] = v46;
            v43[5] = v41;
            *(void *)(v41 + 56) = v43;
            if (v46) {
              uint64_t v47 = (void *)(v46 + 24);
            }
            else {
              uint64_t v47 = (void *)(v41 + 48);
            }
            *uint64_t v47 = v43;
            if (v45) {
              BOOL v48 = v45 == (void *)v31;
            }
            else {
              BOOL v48 = 1;
            }
            unint64_t v43 = v45;
          }
          while (!v48);
        }
        cmark_node_insert_after((uint64_t)v53, (void *)v41);
        *(void *)&long long v49 = v53[10];
        *((void *)&v49 + 1) = *(void *)(v31 + 88);
        *(_OWORD *)(v41 + 80) = v49;
        if (v51 == v54)
        {
          cmark_node_free(v53);
          remove_delimiter(a2, (uint64_t *)k);
        }
        uint64_t v21 = v9;
        a1 = v50;
        if (v55 == v54)
        {
          cmark_node_free((void *)v31);
          uint64_t v21 = *(void *)(v9 + 8);
          remove_delimiter(a2, (uint64_t *)v9);
        }
LABEL_91:
        if (v20) {
          goto LABEL_96;
        }
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    if (v11 != 34)
    {
      uint64_t v21 = v9;
      if (v11 != 39) {
        goto LABEL_91;
      }
    }
    uint64_t v22 = *(void *)(v9 + 16);
    uint64_t v23 = (void *)(v22 + 144);
    if (*(_DWORD *)(v22 + 156)) {
      (*(void (**)(void))(*a2 + 16))(*v23);
    }
    *uint64_t v23 = 0;
    v23[1] = 0;
    uint64_t v24 = *(void *)(v9 + 16);
    if (*(unsigned char *)(v9 + 32) == 39) {
      int v25 = "’";
    }
    else {
      int v25 = "”";
    }
    *(void *)(v24 + 144) = v25;
    *(void *)(v24 + 152) = 3;
    uint64_t v21 = *(void *)(v9 + 8);
    if (v20)
    {
      uint64_t v26 = *(void *)(k + 16);
      int v27 = (void *)(v26 + 144);
      if (*(_DWORD *)(v26 + 156)) {
        (*(void (**)(void))(*a2 + 16))(*v27);
      }
      void *v27 = 0;
      v27[1] = 0;
      uint64_t v28 = *(void *)(k + 16);
      if (*(unsigned char *)(v9 + 32) == 39) {
        unsigned int v29 = "‘";
      }
      else {
        unsigned int v29 = "“";
      }
      *(void *)(v28 + 144) = v29;
      *(void *)(v28 + 152) = 3;
      remove_delimiter(a2, (uint64_t *)k);
      remove_delimiter(a2, (uint64_t *)v9);
      goto LABEL_96;
    }
LABEL_94:
    *(_DWORD *)&v56[512 * (uint64_t)(*(_DWORD *)(v9 + 28) % 3) + 4 * *(unsigned __int8 *)(v9 + 32)] = *(_DWORD *)(v9 + 24);
    if (!*(_DWORD *)(v9 + 36)) {
      remove_delimiter(a2, (uint64_t *)v9);
    }
LABEL_96:
    uint64_t v9 = v21;
  }
  while (v21);
  while (1)
  {
    uint64_t v8 = a2[7];
LABEL_100:
    if (!v8 || *(_DWORD *)(v8 + 24) < a3) {
      break;
    }
    remove_delimiter(a2, (uint64_t *)v8);
  }
}

BOOL cmark_isspace(unsigned __int8 a1)
{
  return cmark_ctype_class[a1] == 1;
}

uint64_t cmark_inline_parser_get_offset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t cmark_inline_parser_get_column(_DWORD *a1)
{
  return (a1[8] + a1[10] + a1[9] + 1);
}

uint64_t cmark_inline_parser_get_chunk(uint64_t a1)
{
  return a1 + 8;
}

_DWORD *cmark_utf8proc_check(_DWORD *result, uint64_t a2, int a3)
{
  if (a3 < 1) {
    return result;
  }
  uint64_t v5 = result;
  int v6 = 0;
  do
  {
    int v7 = 0;
    int v8 = v6;
    while (1)
    {
      uint64_t v9 = (unsigned __int8 *)(a2 + v8);
      int v10 = (char)*v9;
      if (v10 < 1) {
        break;
      }
      ++v8;
LABEL_18:
      if (v8 >= a3)
      {
        int v15 = 0;
        goto LABEL_43;
      }
    }
    unsigned int v11 = *v9;
    if ((v10 & 0x80) == 0)
    {
      int v15 = 1;
      int v7 = 1;
      goto LABEL_43;
    }
    uint64_t v12 = *v9;
    int v7 = utf8proc_utf8class[v12];
    if (!utf8proc_utf8class[v12])
    {
LABEL_38:
      int v7 = -1;
      goto LABEL_42;
    }
    if (a3 - v8 < v7)
    {
      int v7 = v8 - a3;
      goto LABEL_16;
    }
    if (v7 == 4)
    {
      unsigned int v13 = v9[1];
      if ((v13 & 0xC0) != 0x80) {
        goto LABEL_38;
      }
      if ((v9[2] & 0xC0) != 0x80) {
        goto LABEL_40;
      }
      if ((v9[3] & 0xC0) != 0x80) {
        goto LABEL_41;
      }
      if (v11 == 240)
      {
        if (v13 < 0x90)
        {
          int v7 = -4;
          goto LABEL_42;
        }
      }
      else if (v11 >= 0xF4)
      {
        int v7 = -4;
        if (v11 != 244 || v13 > 0x8F) {
          goto LABEL_42;
        }
      }
      int v7 = 4;
      goto LABEL_17;
    }
    if (v7 != 3)
    {
      if (v7 == 2)
      {
        if ((v9[1] & 0xC0) != 0x80) {
          goto LABEL_38;
        }
        if (v11 < 0xC2) {
          goto LABEL_40;
        }
        int v7 = 2;
        goto LABEL_17;
      }
LABEL_16:
      if (v7 < 0) {
        goto LABEL_42;
      }
LABEL_17:
      v8 += v7;
      goto LABEL_18;
    }
    unsigned int v14 = v9[1];
    if ((v14 & 0xC0) != 0x80) {
      goto LABEL_38;
    }
    if ((v9[2] & 0xC0) != 0x80)
    {
LABEL_40:
      int v7 = -2;
      goto LABEL_42;
    }
    if (v11 == 237)
    {
      if (v14 > 0x9F) {
        goto LABEL_41;
      }
LABEL_37:
      int v7 = 3;
      goto LABEL_17;
    }
    if (v11 != 224 || v14 >= 0xA0) {
      goto LABEL_37;
    }
LABEL_41:
    int v7 = -3;
LABEL_42:
    int v7 = -v7;
    int v15 = 1;
LABEL_43:
    if (v8 > v6) {
      uint64_t result = cmark_strbuf_put(v5, (const void *)(a2 + v6), v8 - v6);
    }
    if (!v15) {
      break;
    }
    uint64_t result = cmark_strbuf_put(v5, &encode_unknown_repl, 3);
    int v6 = v7 + v8;
  }
  while (v7 + v8 < a3);
  return result;
}

uint64_t cmark_utf8proc_iterate(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  *a3 = -1;
  if (!a2) {
    return v3;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = utf8proc_utf8class[v4];
  if (!utf8proc_utf8class[v4] || (a2 & 0x80000000) == 0 && (int)v5 > a2) {
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 >= 2)
  {
    uint64_t v6 = 1;
    while ((a1[v6] & 0xC0) == 0x80)
    {
      if (v5 == ++v6) {
        goto LABEL_9;
      }
    }
    uint64_t v5 = -(int)v6;
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_9:
  if ((v5 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  switch((int)v5)
  {
    case 1:
      unsigned int v7 = *a1;
      goto LABEL_22;
    case 2:
      unsigned int v7 = a1[1] & 0x3F | ((v4 & 0x1F) << 6);
      if (v7 < 0x80) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_22;
    case 3:
      __int16 v8 = ((v4 & 0xF) << 12) | ((a1[1] & 0x3F) << 6);
      unsigned int v7 = ((v4 & 0xF) << 12) | ((a1[1] & 0x3F) << 6) | a1[2] & 0x3F;
      uint64_t v3 = 0xFFFFFFFFLL;
      if (v7 < 0x800 || (v8 & 0xF800) == 0xD800) {
        return v3;
      }
      goto LABEL_22;
    case 4:
      int v9 = ((v4 & 7) << 18) | ((a1[1] & 0x3F) << 12);
      if ((v9 - 1114112) < 0xFFF00000) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v7 = a1[3] & 0x3F | ((a1[2] & 0x3F) << 6) | v9;
LABEL_22:
      *a3 = v7;
      uint64_t v3 = v5;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return v3;
}

_DWORD *cmark_utf8proc_encode_char(unsigned int a1, _DWORD *a2)
{
  if ((a1 & 0x80000000) != 0) {
    cmark_utf8proc_encode_char_cold_1();
  }
  if (a1 <= 0x7F)
  {
    char v5 = a1;
LABEL_11:
    int v2 = 1;
    return cmark_strbuf_put(a2, &v5, v2);
  }
  if (a1 <= 0x7FF)
  {
    char v5 = (a1 >> 6) - 64;
    char v6 = a1 & 0x3F | 0x80;
    int v2 = 2;
    return cmark_strbuf_put(a2, &v5, v2);
  }
  if (a1 == 65534)
  {
    char v3 = -2;
    goto LABEL_10;
  }
  if (a1 == 0xFFFF)
  {
    char v3 = -1;
LABEL_10:
    char v5 = v3;
    goto LABEL_11;
  }
  if (!HIWORD(a1))
  {
    char v5 = (a1 >> 12) - 32;
    char v6 = (a1 >> 6) & 0x3F | 0x80;
    char v7 = a1 & 0x3F | 0x80;
    int v2 = 3;
    return cmark_strbuf_put(a2, &v5, v2);
  }
  if (HIWORD(a1) <= 0x10u)
  {
    char v5 = (a1 >> 18) - 16;
    char v6 = (a1 >> 12) & 0x3F | 0x80;
    char v7 = (a1 >> 6) & 0x3F | 0x80;
    char v8 = a1 & 0x3F | 0x80;
    int v2 = 4;
    return cmark_strbuf_put(a2, &v5, v2);
  }

  return cmark_strbuf_put(a2, &encode_unknown_repl, 3);
}

_DWORD *cmark_utf8proc_case_fold(_DWORD *result, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v119 = v3;
    uint64_t v120 = v4;
    int v5 = a3;
    char v7 = result;
    signed int v117 = 0;
    do
    {
      unsigned int v8 = cmark_utf8proc_iterate(a2, v5, (unsigned int *)&v117);
      if ((v8 & 0x80000000) != 0)
      {
        uint64_t result = cmark_strbuf_put(v7, &encode_unknown_repl, 3);
        unsigned int v9 = 1;
      }
      else
      {
        unsigned int v9 = v8;
        if (v117 <= 8485)
        {
          if (v117 > 4255)
          {
            if (v117 <= 7679)
            {
              switch(v117)
              {
                case 4256:
                  __int16 v17 = -19230;
                  goto LABEL_1236;
                case 4257:
                  __int16 v20 = -19230;
                  goto LABEL_1466;
                case 4258:
                  __int16 v107 = -19230;
                  goto LABEL_1239;
                case 4259:
                  __int16 v99 = -19230;
                  goto LABEL_1468;
                case 4260:
                  __int16 v60 = -19230;
                  goto LABEL_1242;
                case 4261:
                  __int16 v100 = -19230;
                  goto LABEL_1470;
                case 4262:
                  __int16 v90 = -19230;
                  goto LABEL_1245;
                case 4263:
                  __int16 v101 = -19230;
                  goto LABEL_1472;
                case 4264:
                  __int16 v92 = -19230;
                  goto LABEL_1248;
                case 4265:
                  __int16 v102 = -19230;
                  goto LABEL_1474;
                case 4266:
                  __int16 v94 = -19230;
                  goto LABEL_1251;
                case 4267:
                  __int16 v79 = -19230;
                  goto LABEL_1476;
                case 4268:
                  __int16 v96 = -19230;
                  goto LABEL_1408;
                case 4269:
                  __int16 v103 = -19230;
                  goto LABEL_1478;
                case 4270:
                  __int16 v43 = -19230;
                  goto LABEL_1256;
                case 4271:
                  __int16 v98 = -19230;
                  goto LABEL_1480;
                case 4272:
                  __int16 v13 = -19230;
                  goto LABEL_1259;
                case 4273:
                  __int16 v21 = -19230;
                  goto LABEL_1482;
                case 4274:
                  __int16 v22 = -19230;
                  goto LABEL_1262;
                case 4275:
                  __int16 v23 = -19230;
                  goto LABEL_1484;
                case 4276:
                  __int16 v24 = -19230;
                  goto LABEL_1265;
                case 4277:
                  __int16 v25 = -19230;
                  goto LABEL_1486;
                case 4278:
                  __int16 v26 = -19230;
                  goto LABEL_1268;
                case 4279:
                  __int16 v27 = -19230;
                  goto LABEL_1488;
                case 4280:
                  __int16 v28 = -19230;
                  goto LABEL_1271;
                case 4281:
                  __int16 v29 = -19230;
                  goto LABEL_1490;
                case 4282:
                  __int16 v30 = -19230;
                  goto LABEL_1274;
                case 4283:
                  __int16 v31 = -19230;
                  goto LABEL_1492;
                case 4284:
                  __int16 v32 = -19230;
                  goto LABEL_1277;
                case 4285:
                  __int16 v33 = -19230;
                  goto LABEL_1448;
                case 4286:
                  __int16 v34 = -19230;
                  goto LABEL_1280;
                case 4287:
                  __int16 v35 = -19230;
                  goto LABEL_1450;
                case 4288:
                  __int16 v11 = -19230;
                  goto LABEL_1079;
                case 4289:
                  __int16 v12 = -19230;
                  goto LABEL_1452;
                case 4290:
                  __int16 v36 = -19230;
                  goto LABEL_1082;
                case 4291:
                  __int16 v18 = -19230;
                  goto LABEL_1454;
                case 4292:
                  __int16 v37 = -19230;
                  goto LABEL_1085;
                case 4293:
                  __int16 v38 = -19230;
                  goto LABEL_1456;
                case 4294:
                case 4296:
                case 4297:
                case 4298:
                case 4299:
                case 4300:
                  goto LABEL_161;
                case 4295:
                  __int16 v40 = -19230;
                  goto LABEL_1458;
                case 4301:
                  __int16 v104 = -19230;
                  goto LABEL_1464;
                default:
                  switch(v117)
                  {
                    case 7296:
                      __int16 v10 = -19760;
                      goto LABEL_147;
                    case 7297:
                      __int16 v10 = -19248;
                      goto LABEL_147;
                    case 7298:
                      __int16 v10 = -16688;
                      goto LABEL_147;
                    case 7299:
                      __int16 v10 = -32303;
                      goto LABEL_147;
                    case 7300:
                    case 7301:
                      __int16 v10 = -32047;
                      goto LABEL_147;
                    case 7302:
                      __int16 v10 = -29999;
                      goto LABEL_147;
                    case 7303:
                      __int16 v10 = -23599;
                      goto LABEL_147;
                    case 7304:
                      goto LABEL_160;
                    default:
                      switch(v117)
                      {
                        case 5112:
                          __int16 v16 = -28703;
                          goto LABEL_666;
                        case 5113:
                          __int16 v44 = -28703;
                          goto LABEL_1324;
                        case 5114:
                          __int16 v45 = -28703;
                          goto LABEL_1219;
                        case 5115:
                          __int16 v46 = -28703;
                          goto LABEL_1361;
                        case 5116:
                          __int16 v47 = -28703;
                          goto LABEL_1222;
                        case 5117:
                          __int16 v48 = -28703;
                          goto LABEL_1432;
                        default:
                          goto LABEL_161;
                      }
                  }
              }
            }
            switch(v117)
            {
              case 7680:
                __int16 v20 = -18207;
                goto LABEL_1466;
              case 7682:
                __int16 v99 = -18207;
                goto LABEL_1468;
              case 7684:
                __int16 v100 = -18207;
                goto LABEL_1470;
              case 7686:
                __int16 v101 = -18207;
                goto LABEL_1472;
              case 7688:
                __int16 v102 = -18207;
                goto LABEL_1474;
              case 7690:
                __int16 v79 = -18207;
                goto LABEL_1476;
              case 7692:
                __int16 v103 = -18207;
                goto LABEL_1478;
              case 7694:
                __int16 v98 = -18207;
                goto LABEL_1480;
              case 7696:
                __int16 v21 = -18207;
                goto LABEL_1482;
              case 7698:
                __int16 v23 = -18207;
                goto LABEL_1484;
              case 7700:
                __int16 v25 = -18207;
                goto LABEL_1486;
              case 7702:
                __int16 v27 = -18207;
                goto LABEL_1488;
              case 7704:
                __int16 v29 = -18207;
                goto LABEL_1490;
              case 7706:
                __int16 v31 = -18207;
                goto LABEL_1492;
              case 7708:
                __int16 v33 = -18207;
                goto LABEL_1448;
              case 7710:
                __int16 v35 = -18207;
                goto LABEL_1450;
              case 7712:
                __int16 v12 = -18207;
                goto LABEL_1452;
              case 7714:
                __int16 v18 = -18207;
                goto LABEL_1454;
              case 7716:
                __int16 v38 = -18207;
                goto LABEL_1456;
              case 7718:
                __int16 v40 = -18207;
                goto LABEL_1458;
              case 7720:
                __int16 v42 = -18207;
                goto LABEL_1460;
              case 7722:
                __int16 v81 = -18207;
                goto LABEL_1462;
              case 7724:
                __int16 v104 = -18207;
                goto LABEL_1464;
              case 7726:
                __int16 v105 = -18207;
                goto LABEL_1394;
              case 7728:
                __int16 v44 = -18207;
                goto LABEL_1324;
              case 7730:
                __int16 v46 = -18207;
                goto LABEL_1361;
              case 7732:
                __int16 v48 = -18207;
                goto LABEL_1432;
              case 7734:
                __int16 v50 = -18207;
                goto LABEL_1434;
              case 7736:
                __int16 v52 = -18207;
                goto LABEL_1400;
              case 7738:
                __int16 v54 = -18207;
                goto LABEL_1366;
              case 7740:
                __int16 v56 = -18207;
                goto LABEL_1368;
              case 7742:
                __int16 v59 = -18207;
                goto LABEL_1402;
              case 7744:
                __int16 v20 = -17951;
                goto LABEL_1466;
              case 7746:
                __int16 v99 = -17951;
                goto LABEL_1468;
              case 7748:
                __int16 v100 = -17951;
                goto LABEL_1470;
              case 7750:
                __int16 v101 = -17951;
                goto LABEL_1472;
              case 7752:
                __int16 v102 = -17951;
                goto LABEL_1474;
              case 7754:
                __int16 v79 = -17951;
                goto LABEL_1476;
              case 7756:
                __int16 v103 = -17951;
                goto LABEL_1478;
              case 7758:
                __int16 v98 = -17951;
                goto LABEL_1480;
              case 7760:
                __int16 v21 = -17951;
                goto LABEL_1482;
              case 7762:
                __int16 v23 = -17951;
                goto LABEL_1484;
              case 7764:
                __int16 v25 = -17951;
                goto LABEL_1486;
              case 7766:
                __int16 v27 = -17951;
                goto LABEL_1488;
              case 7768:
                __int16 v29 = -17951;
                goto LABEL_1490;
              case 7770:
                __int16 v31 = -17951;
                goto LABEL_1492;
              case 7772:
                __int16 v33 = -17951;
                goto LABEL_1448;
              case 7774:
                __int16 v35 = -17951;
                goto LABEL_1450;
              case 7776:
              case 7835:
                __int16 v12 = -17951;
                goto LABEL_1452;
              case 7778:
                __int16 v18 = -17951;
                goto LABEL_1454;
              case 7780:
                __int16 v38 = -17951;
                goto LABEL_1456;
              case 7782:
                __int16 v40 = -17951;
                goto LABEL_1458;
              case 7784:
                __int16 v42 = -17951;
                goto LABEL_1460;
              case 7786:
                __int16 v81 = -17951;
                goto LABEL_1462;
              case 7788:
                __int16 v104 = -17951;
                goto LABEL_1464;
              case 7790:
                __int16 v105 = -17951;
                goto LABEL_1394;
              case 7792:
                __int16 v44 = -17951;
                goto LABEL_1324;
              case 7794:
                __int16 v46 = -17951;
                goto LABEL_1361;
              case 7796:
                __int16 v48 = -17951;
                goto LABEL_1432;
              case 7798:
                __int16 v50 = -17951;
                goto LABEL_1434;
              case 7800:
                __int16 v52 = -17951;
                goto LABEL_1400;
              case 7802:
                __int16 v54 = -17951;
                goto LABEL_1366;
              case 7804:
                __int16 v56 = -17951;
                goto LABEL_1368;
              case 7806:
                __int16 v59 = -17951;
                goto LABEL_1402;
              case 7808:
                __int16 v20 = -17695;
                goto LABEL_1466;
              case 7810:
                __int16 v99 = -17695;
                goto LABEL_1468;
              case 7812:
                __int16 v100 = -17695;
                goto LABEL_1470;
              case 7814:
                __int16 v101 = -17695;
                goto LABEL_1472;
              case 7816:
                __int16 v102 = -17695;
                goto LABEL_1474;
              case 7818:
                __int16 v79 = -17695;
                goto LABEL_1476;
              case 7820:
                __int16 v103 = -17695;
                goto LABEL_1478;
              case 7822:
                __int16 v98 = -17695;
                goto LABEL_1480;
              case 7824:
                __int16 v21 = -17695;
                goto LABEL_1482;
              case 7826:
                __int16 v23 = -17695;
                goto LABEL_1484;
              case 7828:
                __int16 v25 = -17695;
                goto LABEL_1486;
              case 7830:
                LOBYTE(v118) = 104;
                cmark_strbuf_put(v7, &v118, 1);
                __int16 v10 = -20020;
                break;
              case 7831:
                LOBYTE(v118) = 116;
                cmark_strbuf_put(v7, &v118, 1);
                __int16 v10 = -30516;
                break;
              case 7832:
                char v106 = 119;
                goto LABEL_557;
              case 7833:
                char v106 = 121;
LABEL_557:
                LOBYTE(v118) = v106;
                cmark_strbuf_put(v7, &v118, 1);
                __int16 v10 = -30004;
                break;
              case 7834:
                LOBYTE(v118) = 97;
                cmark_strbuf_put(v7, &v118, 1);
                __int16 v10 = -16694;
                break;
              case 7838:
LABEL_159:
                char v78 = 115;
                goto LABEL_1196;
              case 7840:
                __int16 v12 = -17695;
                goto LABEL_1452;
              case 7842:
                __int16 v18 = -17695;
                goto LABEL_1454;
              case 7844:
                __int16 v38 = -17695;
                goto LABEL_1456;
              case 7846:
                __int16 v40 = -17695;
                goto LABEL_1458;
              case 7848:
                __int16 v42 = -17695;
                goto LABEL_1460;
              case 7850:
                __int16 v81 = -17695;
                goto LABEL_1462;
              case 7852:
                __int16 v104 = -17695;
                goto LABEL_1464;
              case 7854:
                __int16 v105 = -17695;
                goto LABEL_1394;
              case 7856:
                __int16 v44 = -17695;
                goto LABEL_1324;
              case 7858:
                __int16 v46 = -17695;
                goto LABEL_1361;
              case 7860:
                __int16 v48 = -17695;
                goto LABEL_1432;
              case 7862:
                __int16 v50 = -17695;
                goto LABEL_1434;
              case 7864:
                __int16 v52 = -17695;
                goto LABEL_1400;
              case 7866:
                __int16 v54 = -17695;
                goto LABEL_1366;
              case 7868:
                __int16 v56 = -17695;
                goto LABEL_1368;
              case 7870:
                __int16 v59 = -17695;
                goto LABEL_1402;
              case 7872:
                __int16 v20 = -17439;
                goto LABEL_1466;
              case 7874:
                __int16 v99 = -17439;
                goto LABEL_1468;
              case 7876:
                __int16 v100 = -17439;
                goto LABEL_1470;
              case 7878:
                __int16 v101 = -17439;
                goto LABEL_1472;
              case 7880:
                __int16 v102 = -17439;
                goto LABEL_1474;
              case 7882:
                __int16 v79 = -17439;
                goto LABEL_1476;
              case 7884:
                __int16 v103 = -17439;
                goto LABEL_1478;
              case 7886:
                __int16 v98 = -17439;
                goto LABEL_1480;
              case 7888:
                __int16 v21 = -17439;
                goto LABEL_1482;
              case 7890:
                __int16 v23 = -17439;
                goto LABEL_1484;
              case 7892:
                __int16 v25 = -17439;
                goto LABEL_1486;
              case 7894:
                __int16 v27 = -17439;
                goto LABEL_1488;
              case 7896:
                __int16 v29 = -17439;
                goto LABEL_1490;
              case 7898:
                __int16 v31 = -17439;
                goto LABEL_1492;
              case 7900:
                __int16 v33 = -17439;
                goto LABEL_1448;
              case 7902:
                __int16 v35 = -17439;
                goto LABEL_1450;
              case 7904:
                __int16 v12 = -17439;
                goto LABEL_1452;
              case 7906:
                __int16 v18 = -17439;
                goto LABEL_1454;
              case 7908:
                __int16 v38 = -17439;
                goto LABEL_1456;
              case 7910:
                __int16 v40 = -17439;
                goto LABEL_1458;
              case 7912:
                __int16 v42 = -17439;
                goto LABEL_1460;
              case 7914:
                __int16 v81 = -17439;
                goto LABEL_1462;
              case 7916:
                __int16 v104 = -17439;
                goto LABEL_1464;
              case 7918:
                __int16 v105 = -17439;
                goto LABEL_1394;
              case 7920:
                __int16 v44 = -17439;
                goto LABEL_1324;
              case 7922:
                __int16 v46 = -17439;
                goto LABEL_1361;
              case 7924:
                __int16 v48 = -17439;
                goto LABEL_1432;
              case 7926:
                __int16 v50 = -17439;
                goto LABEL_1434;
              case 7928:
                __int16 v52 = -17439;
                goto LABEL_1400;
              case 7930:
                __int16 v54 = -17439;
                goto LABEL_1366;
              case 7932:
                __int16 v56 = -17439;
                goto LABEL_1368;
              case 7934:
                __int16 v59 = -17439;
                goto LABEL_1402;
              case 7944:
                __int16 v17 = -17183;
                goto LABEL_1236;
              case 7945:
                __int16 v20 = -17183;
                goto LABEL_1466;
              case 7946:
                __int16 v107 = -17183;
                goto LABEL_1239;
              case 7947:
                __int16 v99 = -17183;
                goto LABEL_1468;
              case 7948:
                __int16 v60 = -17183;
                goto LABEL_1242;
              case 7949:
                __int16 v100 = -17183;
                goto LABEL_1470;
              case 7950:
                __int16 v90 = -17183;
                goto LABEL_1245;
              case 7951:
                __int16 v101 = -17183;
                goto LABEL_1472;
              case 7960:
                __int16 v13 = -17183;
                goto LABEL_1259;
              case 7961:
                __int16 v21 = -17183;
                goto LABEL_1482;
              case 7962:
                __int16 v22 = -17183;
                goto LABEL_1262;
              case 7963:
                __int16 v23 = -17183;
                goto LABEL_1484;
              case 7964:
                __int16 v24 = -17183;
                goto LABEL_1265;
              case 7965:
                __int16 v25 = -17183;
                goto LABEL_1486;
              case 7976:
                __int16 v11 = -17183;
                goto LABEL_1079;
              case 7977:
                __int16 v12 = -17183;
                goto LABEL_1452;
              case 7978:
                __int16 v36 = -17183;
                goto LABEL_1082;
              case 7979:
                __int16 v18 = -17183;
                goto LABEL_1454;
              case 7980:
                __int16 v37 = -17183;
                goto LABEL_1085;
              case 7981:
                __int16 v38 = -17183;
                goto LABEL_1456;
              case 7982:
                __int16 v39 = -17183;
                goto LABEL_915;
              case 7983:
                __int16 v40 = -17183;
                goto LABEL_1458;
              case 7992:
                __int16 v16 = -17183;
                goto LABEL_666;
              case 7993:
                __int16 v44 = -17183;
                goto LABEL_1324;
              case 7994:
                __int16 v45 = -17183;
                goto LABEL_1219;
              case 7995:
                __int16 v46 = -17183;
                goto LABEL_1361;
              case 7996:
                __int16 v47 = -17183;
                goto LABEL_1222;
              case 7997:
                __int16 v48 = -17183;
                goto LABEL_1432;
              case 7998:
                __int16 v49 = -17183;
                goto LABEL_1296;
              case 7999:
                __int16 v50 = -17183;
                goto LABEL_1434;
              case 8008:
                __int16 v17 = -16927;
                goto LABEL_1236;
              case 8009:
                __int16 v20 = -16927;
                goto LABEL_1466;
              case 8010:
                __int16 v107 = -16927;
                goto LABEL_1239;
              case 8011:
                __int16 v99 = -16927;
                goto LABEL_1468;
              case 8012:
                __int16 v60 = -16927;
                goto LABEL_1242;
              case 8013:
                __int16 v100 = -16927;
                goto LABEL_1470;
              case 8016:
                LOWORD(v118) = -31281;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v10 = -27700;
                break;
              case 8018:
                LOWORD(v118) = -31281;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v108 = -27700;
                goto LABEL_687;
              case 8020:
                LOWORD(v118) = -31281;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v77 = -27700;
                goto LABEL_158;
              case 8022:
                LOWORD(v118) = -31281;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v109 = -27700;
                goto LABEL_700;
              case 8025:
                __int16 v21 = -16927;
                goto LABEL_1482;
              case 8027:
                __int16 v23 = -16927;
                goto LABEL_1484;
              case 8029:
                __int16 v25 = -16927;
                goto LABEL_1486;
              case 8031:
                __int16 v27 = -16927;
                goto LABEL_1488;
              case 8040:
                __int16 v11 = -16927;
                goto LABEL_1079;
              case 8041:
                __int16 v12 = -16927;
                goto LABEL_1452;
              case 8042:
                __int16 v36 = -16927;
                goto LABEL_1082;
              case 8043:
                __int16 v18 = -16927;
                goto LABEL_1454;
              case 8044:
                __int16 v37 = -16927;
                goto LABEL_1085;
              case 8045:
                __int16 v38 = -16927;
                goto LABEL_1456;
              case 8046:
                __int16 v39 = -16927;
                goto LABEL_915;
              case 8047:
                __int16 v40 = -16927;
                goto LABEL_1458;
              case 8064:
              case 8072:
                LOWORD(v118) = -17183;
                char v61 = 0x80;
                goto LABEL_144;
              case 8065:
              case 8073:
                LOWORD(v118) = -17183;
                char v61 = -127;
                goto LABEL_144;
              case 8066:
              case 8074:
                LOWORD(v118) = -17183;
                char v61 = -126;
                goto LABEL_144;
              case 8067:
              case 8075:
                LOWORD(v118) = -17183;
                char v61 = -125;
                goto LABEL_144;
              case 8068:
              case 8076:
                LOWORD(v118) = -17183;
                char v61 = -124;
                goto LABEL_144;
              case 8069:
              case 8077:
                LOWORD(v118) = -17183;
                char v61 = -123;
                goto LABEL_144;
              case 8070:
              case 8078:
                LOWORD(v118) = -17183;
                char v61 = -122;
                goto LABEL_144;
              case 8071:
              case 8079:
                LOWORD(v118) = -17183;
                char v61 = -121;
                goto LABEL_144;
              case 8080:
              case 8088:
                __int16 v62 = -17183;
                goto LABEL_129;
              case 8081:
              case 8089:
                __int16 v63 = -17183;
                goto LABEL_131;
              case 8082:
              case 8090:
                __int16 v64 = -17183;
                goto LABEL_133;
              case 8083:
              case 8091:
                __int16 v65 = -17183;
                goto LABEL_135;
              case 8084:
              case 8092:
                __int16 v66 = -17183;
                goto LABEL_137;
              case 8085:
              case 8093:
                __int16 v67 = -17183;
                goto LABEL_139;
              case 8086:
              case 8094:
                __int16 v68 = -17183;
                goto LABEL_141;
              case 8087:
              case 8095:
                __int16 v69 = -17183;
                goto LABEL_143;
              case 8096:
              case 8104:
                __int16 v62 = -16927;
LABEL_129:
                LOWORD(v118) = v62;
                char v61 = -96;
                goto LABEL_144;
              case 8097:
              case 8105:
                __int16 v63 = -16927;
LABEL_131:
                LOWORD(v118) = v63;
                char v61 = -95;
                goto LABEL_144;
              case 8098:
              case 8106:
                __int16 v64 = -16927;
LABEL_133:
                LOWORD(v118) = v64;
                char v61 = -94;
                goto LABEL_144;
              case 8099:
              case 8107:
                __int16 v65 = -16927;
LABEL_135:
                LOWORD(v118) = v65;
                char v61 = -93;
                goto LABEL_144;
              case 8100:
              case 8108:
                __int16 v66 = -16927;
LABEL_137:
                LOWORD(v118) = v66;
                char v61 = -92;
                goto LABEL_144;
              case 8101:
              case 8109:
                __int16 v67 = -16927;
LABEL_139:
                LOWORD(v118) = v67;
                char v61 = -91;
                goto LABEL_144;
              case 8102:
              case 8110:
                __int16 v68 = -16927;
LABEL_141:
                LOWORD(v118) = v68;
                char v61 = -90;
                goto LABEL_144;
              case 8103:
              case 8111:
                __int16 v69 = -16927;
LABEL_143:
                LOWORD(v118) = v69;
                char v61 = -89;
                goto LABEL_144;
              case 8114:
                LOWORD(v118) = -16927;
                char v61 = -80;
                goto LABEL_144;
              case 8115:
              case 8124:
                __int16 v74 = -20018;
                goto LABEL_673;
              case 8116:
                __int16 v74 = -21298;
                goto LABEL_673;
              case 8118:
                __int16 v109 = -20018;
                goto LABEL_700;
              case 8119:
                __int16 v110 = -20018;
                goto LABEL_672;
              case 8120:
                __int16 v16 = -16671;
                goto LABEL_666;
              case 8121:
                __int16 v44 = -16671;
                goto LABEL_1324;
              case 8122:
                __int16 v16 = -16927;
                goto LABEL_666;
              case 8123:
                __int16 v44 = -16927;
                goto LABEL_1324;
              case 8126:
                goto LABEL_146;
              case 8130:
                LOWORD(v118) = -16927;
                char v61 = -76;
LABEL_144:
                BYTE2(v118) = v61;
                int v70 = v7;
                int v71 = 3;
                goto LABEL_145;
              case 8131:
              case 8140:
                __int16 v74 = -18482;
                goto LABEL_673;
              case 8132:
                __int16 v74 = -20786;
                goto LABEL_673;
              case 8134:
                __int16 v109 = -18482;
                goto LABEL_700;
              case 8135:
                __int16 v110 = -18482;
LABEL_672:
                LOWORD(v118) = v110;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v74 = -32051;
LABEL_673:
                LOWORD(v118) = v74;
                int v70 = v7;
                int v71 = 2;
LABEL_145:
                cmark_strbuf_put(v70, &v118, v71);
LABEL_146:
                __int16 v10 = -17970;
                break;
              case 8136:
                __int16 v45 = -16927;
                goto LABEL_1219;
              case 8137:
                __int16 v46 = -16927;
                goto LABEL_1361;
              case 8138:
                __int16 v47 = -16927;
                goto LABEL_1222;
              case 8139:
                __int16 v48 = -16927;
                goto LABEL_1432;
              case 8146:
                __int16 v111 = -17970;
                goto LABEL_686;
              case 8147:
LABEL_155:
                __int16 v76 = -17970;
                goto LABEL_157;
              case 8150:
                __int16 v109 = -17970;
                goto LABEL_700;
              case 8151:
                __int16 v112 = -17970;
                goto LABEL_691;
              case 8152:
                __int16 v13 = -16415;
                goto LABEL_1259;
              case 8153:
                __int16 v21 = -16415;
                goto LABEL_1482;
              case 8154:
                __int16 v49 = -16927;
                goto LABEL_1296;
              case 8155:
                __int16 v50 = -16927;
                goto LABEL_1434;
              case 8162:
                __int16 v111 = -31281;
LABEL_686:
                LOWORD(v118) = v111;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v108 = -30516;
LABEL_687:
                LOWORD(v118) = v108;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v10 = -32564;
                break;
              case 8163:
LABEL_156:
                __int16 v76 = -31281;
LABEL_157:
                LOWORD(v118) = v76;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v77 = -30516;
LABEL_158:
                LOWORD(v118) = v77;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v10 = -32308;
                break;
              case 8164:
                LOWORD(v118) = -32305;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v10 = -27700;
                break;
              case 8166:
                __int16 v109 = -31281;
                goto LABEL_700;
              case 8167:
                __int16 v112 = -31281;
LABEL_691:
                LOWORD(v118) = v112;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v109 = -30516;
                goto LABEL_700;
              case 8168:
                __int16 v11 = -16415;
                goto LABEL_1079;
              case 8169:
                __int16 v12 = -16415;
                goto LABEL_1452;
              case 8170:
                __int16 v53 = -16927;
                goto LABEL_1396;
              case 8171:
                __int16 v54 = -16927;
                goto LABEL_1366;
              case 8172:
                __int16 v38 = -16415;
                goto LABEL_1456;
              case 8178:
                LOWORD(v118) = -16927;
                BYTE2(v118) = -68;
                uint64_t v113 = v7;
                int v114 = 3;
                goto LABEL_703;
              case 8179:
              case 8188:
                __int16 v75 = -30257;
                goto LABEL_702;
              case 8180:
                __int16 v75 = -28977;
                goto LABEL_702;
              case 8182:
                __int16 v109 = -30257;
LABEL_700:
                LOWORD(v118) = v109;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v10 = -32051;
                break;
              case 8183:
                LOWORD(v118) = -30257;
                cmark_strbuf_put(v7, &v118, 2);
                __int16 v75 = -32051;
LABEL_702:
                LOWORD(v118) = v75;
                uint64_t v113 = v7;
                int v114 = 2;
LABEL_703:
                cmark_strbuf_put(v113, &v118, v114);
                __int16 v10 = -17970;
                break;
              case 8184:
                __int16 v51 = -16927;
                goto LABEL_1227;
              case 8185:
                __int16 v52 = -16927;
                goto LABEL_1400;
              case 8186:
                __int16 v55 = -16927;
                goto LABEL_1398;
              case 8187:
                __int16 v56 = -16927;
                goto LABEL_1368;
              default:
                goto LABEL_161;
            }
          }
          else
          {
            switch(v117)
            {
              case 837:
              case 921:
                __int16 v10 = -17970;
                goto LABEL_147;
              case 838:
              case 839:
              case 840:
              case 841:
              case 842:
              case 843:
              case 844:
              case 845:
              case 846:
              case 847:
              case 848:
              case 849:
              case 850:
              case 851:
              case 852:
              case 853:
              case 854:
              case 855:
              case 856:
              case 857:
              case 858:
              case 859:
              case 860:
              case 861:
              case 862:
              case 863:
              case 864:
              case 865:
              case 866:
              case 867:
              case 868:
              case 869:
              case 870:
              case 871:
              case 872:
              case 873:
              case 874:
              case 875:
              case 876:
              case 877:
              case 878:
              case 879:
              case 881:
              case 883:
              case 884:
              case 885:
              case 887:
              case 888:
              case 889:
              case 890:
              case 891:
              case 892:
              case 893:
              case 894:
              case 896:
              case 897:
              case 898:
              case 899:
              case 900:
              case 901:
              case 903:
              case 907:
              case 909:
              case 930:
              case 940:
              case 941:
              case 942:
              case 943:
              case 945:
              case 946:
              case 947:
              case 948:
              case 949:
              case 950:
              case 951:
              case 952:
              case 953:
              case 954:
              case 955:
              case 956:
              case 957:
              case 958:
              case 959:
              case 960:
              case 961:
              case 963:
              case 964:
              case 965:
              case 966:
              case 967:
              case 968:
              case 969:
              case 970:
              case 971:
              case 972:
              case 973:
              case 974:
              case 978:
              case 979:
              case 980:
              case 983:
              case 985:
              case 987:
              case 989:
              case 991:
              case 993:
              case 995:
              case 997:
              case 999:
              case 1001:
              case 1003:
              case 1005:
              case 1007:
              case 1010:
              case 1011:
              case 1014:
              case 1016:
              case 1019:
              case 1020:
              case 1072:
              case 1073:
              case 1074:
              case 1075:
              case 1076:
              case 1077:
              case 1078:
              case 1079:
              case 1080:
              case 1081:
              case 1082:
              case 1083:
              case 1084:
              case 1085:
              case 1086:
              case 1087:
              case 1088:
              case 1089:
              case 1090:
              case 1091:
              case 1092:
              case 1093:
              case 1094:
              case 1095:
              case 1096:
              case 1097:
              case 1098:
              case 1099:
              case 1100:
              case 1101:
              case 1102:
              case 1103:
              case 1104:
              case 1105:
              case 1106:
              case 1107:
              case 1108:
              case 1109:
              case 1110:
              case 1111:
              case 1112:
              case 1113:
              case 1114:
              case 1115:
              case 1116:
              case 1117:
              case 1118:
              case 1119:
              case 1121:
              case 1123:
              case 1125:
              case 1127:
              case 1129:
              case 1131:
              case 1133:
              case 1135:
              case 1137:
              case 1139:
              case 1141:
              case 1143:
              case 1145:
              case 1147:
              case 1149:
              case 1151:
              case 1153:
              case 1154:
              case 1155:
              case 1156:
              case 1157:
              case 1158:
              case 1159:
              case 1160:
              case 1161:
              case 1163:
              case 1165:
              case 1167:
              case 1169:
              case 1171:
              case 1173:
              case 1175:
              case 1177:
              case 1179:
              case 1181:
              case 1183:
              case 1185:
              case 1187:
              case 1189:
              case 1191:
              case 1193:
              case 1195:
              case 1197:
              case 1199:
              case 1201:
              case 1203:
              case 1205:
              case 1207:
              case 1209:
              case 1211:
              case 1213:
              case 1215:
              case 1218:
              case 1220:
              case 1222:
              case 1224:
              case 1226:
              case 1228:
              case 1230:
              case 1231:
              case 1233:
              case 1235:
              case 1237:
              case 1239:
              case 1241:
              case 1243:
              case 1245:
              case 1247:
              case 1249:
              case 1251:
              case 1253:
              case 1255:
              case 1257:
              case 1259:
              case 1261:
              case 1263:
              case 1265:
              case 1267:
              case 1269:
              case 1271:
              case 1273:
              case 1275:
              case 1277:
              case 1279:
              case 1281:
              case 1283:
              case 1285:
              case 1287:
              case 1289:
              case 1291:
              case 1293:
              case 1295:
              case 1297:
              case 1299:
              case 1301:
              case 1303:
              case 1305:
              case 1307:
              case 1309:
              case 1311:
              case 1313:
              case 1315:
              case 1317:
              case 1319:
              case 1321:
              case 1323:
              case 1325:
              case 1327:
              case 1328:
              case 1367:
              case 1368:
              case 1369:
              case 1370:
              case 1371:
              case 1372:
              case 1373:
              case 1374:
              case 1375:
              case 1376:
              case 1377:
              case 1378:
              case 1379:
              case 1380:
              case 1381:
              case 1382:
              case 1383:
              case 1384:
              case 1385:
              case 1386:
              case 1387:
              case 1388:
              case 1389:
              case 1390:
              case 1391:
              case 1392:
              case 1393:
              case 1394:
              case 1395:
              case 1396:
              case 1397:
              case 1398:
              case 1399:
              case 1400:
              case 1401:
              case 1402:
              case 1403:
              case 1404:
              case 1405:
              case 1406:
              case 1407:
              case 1408:
              case 1409:
              case 1410:
              case 1411:
              case 1412:
              case 1413:
              case 1414:
                goto LABEL_161;
              case 880:
                __int16 v10 = -20019;
                goto LABEL_147;
              case 882:
                __int16 v10 = -19507;
                goto LABEL_147;
              case 886:
                __int16 v10 = -18483;
                goto LABEL_147;
              case 895:
                __int16 v10 = -19505;
                goto LABEL_147;
              case 902:
                __int16 v10 = -21298;
                goto LABEL_147;
              case 904:
                __int16 v10 = -21042;
                goto LABEL_147;
              case 905:
                __int16 v10 = -20786;
                goto LABEL_147;
              case 906:
                __int16 v10 = -20530;
                goto LABEL_147;
              case 908:
                __int16 v10 = -29489;
                goto LABEL_147;
              case 910:
                __int16 v10 = -29233;
                goto LABEL_147;
              case 911:
                __int16 v10 = -28977;
                goto LABEL_147;
              case 912:
                goto LABEL_155;
              case 913:
                __int16 v10 = -20018;
                goto LABEL_147;
              case 914:
              case 976:
                __int16 v10 = -19762;
                goto LABEL_147;
              case 915:
                __int16 v10 = -19506;
                goto LABEL_147;
              case 916:
                __int16 v10 = -19250;
                goto LABEL_147;
              case 917:
              case 1013:
                __int16 v10 = -18994;
                goto LABEL_147;
              case 918:
                __int16 v10 = -18738;
                goto LABEL_147;
              case 919:
                __int16 v10 = -18482;
                goto LABEL_147;
              case 920:
              case 977:
              case 1012:
                __int16 v10 = -18226;
                goto LABEL_147;
              case 922:
              case 1008:
                __int16 v10 = -17714;
                goto LABEL_147;
              case 923:
                __int16 v10 = -17458;
                goto LABEL_147;
              case 924:
                __int16 v10 = -17202;
                goto LABEL_147;
              case 925:
                __int16 v10 = -16946;
                goto LABEL_147;
              case 926:
                __int16 v10 = -16690;
                goto LABEL_147;
              case 927:
                __int16 v10 = -16434;
                goto LABEL_147;
              case 928:
              case 982:
                __int16 v10 = -32561;
                goto LABEL_147;
              case 929:
              case 1009:
                __int16 v10 = -32305;
                goto LABEL_147;
              case 931:
              case 962:
                __int16 v10 = -31793;
                goto LABEL_147;
              case 932:
                __int16 v10 = -31537;
                goto LABEL_147;
              case 933:
                __int16 v10 = -31281;
                goto LABEL_147;
              case 934:
              case 981:
                __int16 v10 = -31025;
                goto LABEL_147;
              case 935:
                __int16 v10 = -30769;
                goto LABEL_147;
              case 936:
                __int16 v10 = -30513;
                goto LABEL_147;
              case 937:
                __int16 v10 = -30257;
                goto LABEL_147;
              case 938:
                __int16 v10 = -30001;
                goto LABEL_147;
              case 939:
                __int16 v10 = -29745;
                goto LABEL_147;
              case 944:
                goto LABEL_156;
              case 975:
                __int16 v10 = -26673;
                goto LABEL_147;
              case 984:
                __int16 v10 = -26161;
                goto LABEL_147;
              case 986:
                __int16 v10 = -25649;
                goto LABEL_147;
              case 988:
                __int16 v10 = -25137;
                goto LABEL_147;
              case 990:
                __int16 v10 = -24625;
                goto LABEL_147;
              case 992:
                __int16 v10 = -24113;
                goto LABEL_147;
              case 994:
                __int16 v10 = -23601;
                goto LABEL_147;
              case 996:
                __int16 v10 = -23089;
                goto LABEL_147;
              case 998:
                __int16 v10 = -22577;
                goto LABEL_147;
              case 1000:
                __int16 v10 = -22065;
                goto LABEL_147;
              case 1002:
                __int16 v10 = -21553;
                goto LABEL_147;
              case 1004:
                __int16 v10 = -21041;
                goto LABEL_147;
              case 1006:
                __int16 v10 = -20529;
                goto LABEL_147;
              case 1015:
                __int16 v10 = -18225;
                goto LABEL_147;
              case 1017:
                __int16 v10 = -19761;
                goto LABEL_147;
              case 1018:
                __int16 v10 = -17457;
                goto LABEL_147;
              case 1021:
                __int16 v10 = -17459;
                goto LABEL_147;
              case 1022:
                __int16 v10 = -17203;
                goto LABEL_147;
              case 1023:
                __int16 v10 = -16947;
                goto LABEL_147;
              case 1024:
                __int16 v10 = -28463;
                goto LABEL_147;
              case 1025:
                __int16 v10 = -28207;
                goto LABEL_147;
              case 1026:
                __int16 v10 = -27951;
                goto LABEL_147;
              case 1027:
                __int16 v10 = -27695;
                goto LABEL_147;
              case 1028:
                __int16 v10 = -27439;
                goto LABEL_147;
              case 1029:
                __int16 v10 = -27183;
                goto LABEL_147;
              case 1030:
                __int16 v10 = -26927;
                goto LABEL_147;
              case 1031:
                __int16 v10 = -26671;
                goto LABEL_147;
              case 1032:
                __int16 v10 = -26415;
                goto LABEL_147;
              case 1033:
                __int16 v10 = -26159;
                goto LABEL_147;
              case 1034:
                __int16 v10 = -25903;
                goto LABEL_147;
              case 1035:
                __int16 v10 = -25647;
                goto LABEL_147;
              case 1036:
                __int16 v10 = -25391;
                goto LABEL_147;
              case 1037:
                __int16 v10 = -25135;
                goto LABEL_147;
              case 1038:
                __int16 v10 = -24879;
                goto LABEL_147;
              case 1039:
                __int16 v10 = -24623;
                goto LABEL_147;
              case 1040:
                __int16 v10 = -20272;
                goto LABEL_147;
              case 1041:
                __int16 v10 = -20016;
                goto LABEL_147;
              case 1042:
                __int16 v10 = -19760;
                goto LABEL_147;
              case 1043:
                __int16 v10 = -19504;
                goto LABEL_147;
              case 1044:
                __int16 v10 = -19248;
                goto LABEL_147;
              case 1045:
                __int16 v10 = -18992;
                goto LABEL_147;
              case 1046:
                __int16 v10 = -18736;
                goto LABEL_147;
              case 1047:
                __int16 v10 = -18480;
                goto LABEL_147;
              case 1048:
                __int16 v10 = -18224;
                goto LABEL_147;
              case 1049:
                __int16 v10 = -17968;
                goto LABEL_147;
              case 1050:
                __int16 v10 = -17712;
                goto LABEL_147;
              case 1051:
                __int16 v10 = -17456;
                goto LABEL_147;
              case 1052:
                __int16 v10 = -17200;
                goto LABEL_147;
              case 1053:
                __int16 v10 = -16944;
                goto LABEL_147;
              case 1054:
                __int16 v10 = -16688;
                goto LABEL_147;
              case 1055:
                __int16 v10 = -16432;
                goto LABEL_147;
              case 1056:
                __int16 v10 = -32559;
                goto LABEL_147;
              case 1057:
                __int16 v10 = -32303;
                goto LABEL_147;
              case 1058:
                __int16 v10 = -32047;
                goto LABEL_147;
              case 1059:
                __int16 v10 = -31791;
                goto LABEL_147;
              case 1060:
                __int16 v10 = -31535;
                goto LABEL_147;
              case 1061:
                __int16 v10 = -31279;
                goto LABEL_147;
              case 1062:
                __int16 v10 = -31023;
                goto LABEL_147;
              case 1063:
                __int16 v10 = -30767;
                goto LABEL_147;
              case 1064:
                __int16 v10 = -30511;
                goto LABEL_147;
              case 1065:
                __int16 v10 = -30255;
                goto LABEL_147;
              case 1066:
                __int16 v10 = -29999;
                goto LABEL_147;
              case 1067:
                __int16 v10 = -29743;
                goto LABEL_147;
              case 1068:
                __int16 v10 = -29487;
                goto LABEL_147;
              case 1069:
                __int16 v10 = -29231;
                goto LABEL_147;
              case 1070:
                __int16 v10 = -28975;
                goto LABEL_147;
              case 1071:
                __int16 v10 = -28719;
                goto LABEL_147;
              case 1120:
                __int16 v10 = -24111;
                goto LABEL_147;
              case 1122:
                __int16 v10 = -23599;
                goto LABEL_147;
              case 1124:
                __int16 v10 = -23087;
                goto LABEL_147;
              case 1126:
                __int16 v10 = -22575;
                goto LABEL_147;
              case 1128:
                __int16 v10 = -22063;
                goto LABEL_147;
              case 1130:
                __int16 v10 = -21551;
                goto LABEL_147;
              case 1132:
                __int16 v10 = -21039;
                goto LABEL_147;
              case 1134:
                __int16 v10 = -20527;
                goto LABEL_147;
              case 1136:
                __int16 v10 = -20015;
                goto LABEL_147;
              case 1138:
                __int16 v10 = -19503;
                goto LABEL_147;
              case 1140:
                __int16 v10 = -18991;
                goto LABEL_147;
              case 1142:
                __int16 v10 = -18479;
                goto LABEL_147;
              case 1144:
                __int16 v10 = -17967;
                goto LABEL_147;
              case 1146:
                __int16 v10 = -17455;
                goto LABEL_147;
              case 1148:
                __int16 v10 = -16943;
                goto LABEL_147;
              case 1150:
                __int16 v10 = -16431;
                goto LABEL_147;
              case 1152:
                __int16 v10 = -32302;
                goto LABEL_147;
              case 1162:
                __int16 v10 = -29742;
                goto LABEL_147;
              case 1164:
                __int16 v10 = -29230;
                goto LABEL_147;
              case 1166:
                __int16 v10 = -28718;
                goto LABEL_147;
              case 1168:
                __int16 v10 = -28206;
                goto LABEL_147;
              case 1170:
                __int16 v10 = -27694;
                goto LABEL_147;
              case 1172:
                __int16 v10 = -27182;
                goto LABEL_147;
              case 1174:
                __int16 v10 = -26670;
                goto LABEL_147;
              case 1176:
                __int16 v10 = -26158;
                goto LABEL_147;
              case 1178:
                __int16 v10 = -25646;
                goto LABEL_147;
              case 1180:
                __int16 v10 = -25134;
                goto LABEL_147;
              case 1182:
                __int16 v10 = -24622;
                goto LABEL_147;
              case 1184:
                __int16 v10 = -24110;
                goto LABEL_147;
              case 1186:
                __int16 v10 = -23598;
                goto LABEL_147;
              case 1188:
                __int16 v10 = -23086;
                goto LABEL_147;
              case 1190:
                __int16 v10 = -22574;
                goto LABEL_147;
              case 1192:
                __int16 v10 = -22062;
                goto LABEL_147;
              case 1194:
                __int16 v10 = -21550;
                goto LABEL_147;
              case 1196:
                __int16 v10 = -21038;
                goto LABEL_147;
              case 1198:
                __int16 v10 = -20526;
                goto LABEL_147;
              case 1200:
                __int16 v10 = -20014;
                goto LABEL_147;
              case 1202:
                __int16 v10 = -19502;
                goto LABEL_147;
              case 1204:
                __int16 v10 = -18990;
                goto LABEL_147;
              case 1206:
                __int16 v10 = -18478;
                goto LABEL_147;
              case 1208:
                __int16 v10 = -17966;
                goto LABEL_147;
              case 1210:
                __int16 v10 = -17454;
                goto LABEL_147;
              case 1212:
                __int16 v10 = -16942;
                goto LABEL_147;
              case 1214:
                __int16 v10 = -16430;
                goto LABEL_147;
              case 1216:
                __int16 v10 = -28717;
                goto LABEL_147;
              case 1217:
                __int16 v10 = -32045;
                goto LABEL_147;
              case 1219:
                __int16 v10 = -31533;
                goto LABEL_147;
              case 1221:
                __int16 v10 = -31021;
                goto LABEL_147;
              case 1223:
                __int16 v10 = -30509;
                goto LABEL_147;
              case 1225:
                __int16 v10 = -29997;
                goto LABEL_147;
              case 1227:
                __int16 v10 = -29485;
                goto LABEL_147;
              case 1229:
                __int16 v10 = -28973;
                goto LABEL_147;
              case 1232:
                __int16 v10 = -28205;
                goto LABEL_147;
              case 1234:
                __int16 v10 = -27693;
                goto LABEL_147;
              case 1236:
                __int16 v10 = -27181;
                goto LABEL_147;
              case 1238:
                __int16 v10 = -26669;
                goto LABEL_147;
              case 1240:
                __int16 v10 = -26157;
                goto LABEL_147;
              case 1242:
                __int16 v10 = -25645;
                goto LABEL_147;
              case 1244:
                __int16 v10 = -25133;
                goto LABEL_147;
              case 1246:
                __int16 v10 = -24621;
                goto LABEL_147;
              case 1248:
                __int16 v10 = -24109;
                goto LABEL_147;
              case 1250:
                __int16 v10 = -23597;
                goto LABEL_147;
              case 1252:
                __int16 v10 = -23085;
                goto LABEL_147;
              case 1254:
                __int16 v10 = -22573;
                goto LABEL_147;
              case 1256:
                __int16 v10 = -22061;
                goto LABEL_147;
              case 1258:
                __int16 v10 = -21549;
                goto LABEL_147;
              case 1260:
                __int16 v10 = -21037;
                goto LABEL_147;
              case 1262:
                __int16 v10 = -20525;
                goto LABEL_147;
              case 1264:
                __int16 v10 = -20013;
                goto LABEL_147;
              case 1266:
                __int16 v10 = -19501;
                goto LABEL_147;
              case 1268:
                __int16 v10 = -18989;
                goto LABEL_147;
              case 1270:
                __int16 v10 = -18477;
                goto LABEL_147;
              case 1272:
                __int16 v10 = -17965;
                goto LABEL_147;
              case 1274:
                __int16 v10 = -17453;
                goto LABEL_147;
              case 1276:
                __int16 v10 = -16941;
                goto LABEL_147;
              case 1278:
                __int16 v10 = -16429;
                goto LABEL_147;
              case 1280:
                __int16 v10 = -32300;
                goto LABEL_147;
              case 1282:
                __int16 v10 = -31788;
                goto LABEL_147;
              case 1284:
                __int16 v10 = -31276;
                goto LABEL_147;
              case 1286:
                __int16 v10 = -30764;
                goto LABEL_147;
              case 1288:
                __int16 v10 = -30252;
                goto LABEL_147;
              case 1290:
                __int16 v10 = -29740;
                goto LABEL_147;
              case 1292:
                __int16 v10 = -29228;
                goto LABEL_147;
              case 1294:
                __int16 v10 = -28716;
                goto LABEL_147;
              case 1296:
                __int16 v10 = -28204;
                goto LABEL_147;
              case 1298:
                __int16 v10 = -27692;
                goto LABEL_147;
              case 1300:
                __int16 v10 = -27180;
                goto LABEL_147;
              case 1302:
                __int16 v10 = -26668;
                goto LABEL_147;
              case 1304:
                __int16 v10 = -26156;
                goto LABEL_147;
              case 1306:
                __int16 v10 = -25644;
                goto LABEL_147;
              case 1308:
                __int16 v10 = -25132;
                goto LABEL_147;
              case 1310:
                __int16 v10 = -24620;
                goto LABEL_147;
              case 1312:
                __int16 v10 = -24108;
                goto LABEL_147;
              case 1314:
                __int16 v10 = -23596;
                goto LABEL_147;
              case 1316:
                __int16 v10 = -23084;
                goto LABEL_147;
              case 1318:
                __int16 v10 = -22572;
                goto LABEL_147;
              case 1320:
                __int16 v10 = -22060;
                goto LABEL_147;
              case 1322:
                __int16 v10 = -21548;
                goto LABEL_147;
              case 1324:
                __int16 v10 = -21036;
                goto LABEL_147;
              case 1326:
                __int16 v10 = -20524;
                goto LABEL_147;
              case 1329:
                __int16 v10 = -24107;
                goto LABEL_147;
              case 1330:
                __int16 v10 = -23851;
                goto LABEL_147;
              case 1331:
                __int16 v10 = -23595;
                goto LABEL_147;
              case 1332:
                __int16 v10 = -23339;
                goto LABEL_147;
              case 1333:
                __int16 v10 = -23083;
                goto LABEL_147;
              case 1334:
                __int16 v10 = -22827;
                goto LABEL_147;
              case 1335:
                __int16 v10 = -22571;
                goto LABEL_147;
              case 1336:
                __int16 v10 = -22315;
                goto LABEL_147;
              case 1337:
                __int16 v10 = -22059;
                goto LABEL_147;
              case 1338:
                __int16 v10 = -21803;
                goto LABEL_147;
              case 1339:
                __int16 v10 = -21547;
                goto LABEL_147;
              case 1340:
                __int16 v10 = -21291;
                goto LABEL_147;
              case 1341:
                __int16 v10 = -21035;
                goto LABEL_147;
              case 1342:
                __int16 v10 = -20779;
                goto LABEL_147;
              case 1343:
                __int16 v10 = -20523;
                goto LABEL_147;
              case 1344:
                __int16 v10 = -20267;
                goto LABEL_147;
              case 1345:
                __int16 v10 = -20011;
                goto LABEL_147;
              case 1346:
                __int16 v10 = -19755;
                goto LABEL_147;
              case 1347:
                __int16 v10 = -19499;
                goto LABEL_147;
              case 1348:
                __int16 v10 = -19243;
                goto LABEL_147;
              case 1349:
                __int16 v10 = -18987;
                goto LABEL_147;
              case 1350:
                __int16 v10 = -18731;
                goto LABEL_147;
              case 1351:
                __int16 v10 = -18475;
                goto LABEL_147;
              case 1352:
                __int16 v10 = -18219;
                goto LABEL_147;
              case 1353:
                __int16 v10 = -17963;
                goto LABEL_147;
              case 1354:
                __int16 v10 = -17707;
                goto LABEL_147;
              case 1355:
                __int16 v10 = -17451;
                goto LABEL_147;
              case 1356:
                __int16 v10 = -17195;
                goto LABEL_147;
              case 1357:
                __int16 v10 = -16939;
                goto LABEL_147;
              case 1358:
                __int16 v10 = -16683;
                goto LABEL_147;
              case 1359:
                __int16 v10 = -16427;
                goto LABEL_147;
              case 1360:
                __int16 v10 = -32554;
                goto LABEL_147;
              case 1361:
                __int16 v10 = -32298;
                goto LABEL_147;
              case 1362:
                break;
              case 1363:
                __int16 v10 = -31786;
                goto LABEL_147;
              case 1364:
                __int16 v10 = -31530;
                goto LABEL_147;
              case 1365:
                __int16 v10 = -31274;
                goto LABEL_147;
              case 1366:
                __int16 v10 = -31018;
                goto LABEL_147;
              case 1415:
                LOWORD(v118) = -23083;
                cmark_strbuf_put(v7, &v118, 2);
                break;
              default:
                switch(v117)
                {
                  case 65:
                    char v14 = 97;
                    goto LABEL_1204;
                  case 66:
                    char v14 = 98;
                    goto LABEL_1204;
                  case 67:
                    char v14 = 99;
                    goto LABEL_1204;
                  case 68:
                    char v14 = 100;
                    goto LABEL_1204;
                  case 69:
                    char v14 = 101;
                    goto LABEL_1204;
                  case 70:
                    char v14 = 102;
                    goto LABEL_1204;
                  case 71:
                    char v14 = 103;
                    goto LABEL_1204;
                  case 72:
                    char v14 = 104;
                    goto LABEL_1204;
                  case 73:
                    char v14 = 105;
                    goto LABEL_1204;
                  case 74:
                    char v14 = 106;
                    goto LABEL_1204;
                  case 75:
                    goto LABEL_58;
                  case 76:
                    goto LABEL_1203;
                  case 77:
                    char v14 = 109;
                    goto LABEL_1204;
                  case 78:
                    break;
                  case 79:
                    char v14 = 111;
                    goto LABEL_1204;
                  case 80:
                    char v14 = 112;
                    goto LABEL_1204;
                  case 81:
                    char v14 = 113;
                    goto LABEL_1204;
                  case 82:
                    char v14 = 114;
                    goto LABEL_1204;
                  case 83:
                  case 383:
                    char v14 = 115;
                    goto LABEL_1204;
                  case 84:
                    goto LABEL_55;
                  case 85:
                    char v14 = 117;
                    goto LABEL_1204;
                  case 86:
                    char v14 = 118;
                    goto LABEL_1204;
                  case 87:
                    char v14 = 119;
                    goto LABEL_1204;
                  case 88:
                    char v14 = 120;
                    goto LABEL_1204;
                  case 89:
                    char v14 = 121;
                    goto LABEL_1204;
                  case 90:
                    char v14 = 122;
                    goto LABEL_1204;
                  case 181:
                    __int16 v10 = -17202;
                    goto LABEL_147;
                  case 192:
                    __int16 v10 = -24381;
                    goto LABEL_147;
                  case 193:
                    __int16 v10 = -24125;
                    goto LABEL_147;
                  case 194:
                    __int16 v10 = -23869;
                    goto LABEL_147;
                  case 195:
                    __int16 v10 = -23613;
                    goto LABEL_147;
                  case 196:
                    __int16 v10 = -23357;
                    goto LABEL_147;
                  case 197:
                    goto LABEL_52;
                  case 198:
                    __int16 v10 = -22845;
                    goto LABEL_147;
                  case 199:
                    __int16 v10 = -22589;
                    goto LABEL_147;
                  case 200:
                    __int16 v10 = -22333;
                    goto LABEL_147;
                  case 201:
                    __int16 v10 = -22077;
                    goto LABEL_147;
                  case 202:
                    __int16 v10 = -21821;
                    goto LABEL_147;
                  case 203:
                    __int16 v10 = -21565;
                    goto LABEL_147;
                  case 204:
                    __int16 v10 = -21309;
                    goto LABEL_147;
                  case 205:
                    __int16 v10 = -21053;
                    goto LABEL_147;
                  case 206:
                    __int16 v10 = -20797;
                    goto LABEL_147;
                  case 207:
                    __int16 v10 = -20541;
                    goto LABEL_147;
                  case 208:
                    __int16 v10 = -20285;
                    goto LABEL_147;
                  case 209:
                    __int16 v10 = -20029;
                    goto LABEL_147;
                  case 210:
                    __int16 v10 = -19773;
                    goto LABEL_147;
                  case 211:
                    __int16 v10 = -19517;
                    goto LABEL_147;
                  case 212:
                    __int16 v10 = -19261;
                    goto LABEL_147;
                  case 213:
                    __int16 v10 = -19005;
                    goto LABEL_147;
                  case 214:
                    __int16 v10 = -18749;
                    goto LABEL_147;
                  case 216:
                    __int16 v10 = -18237;
                    goto LABEL_147;
                  case 217:
                    __int16 v10 = -17981;
                    goto LABEL_147;
                  case 218:
                    __int16 v10 = -17725;
                    goto LABEL_147;
                  case 219:
                    __int16 v10 = -17469;
                    goto LABEL_147;
                  case 220:
                    __int16 v10 = -17213;
                    goto LABEL_147;
                  case 221:
                    __int16 v10 = -16957;
                    goto LABEL_147;
                  case 222:
                    __int16 v10 = -16701;
                    goto LABEL_147;
                  case 223:
                    goto LABEL_159;
                  case 256:
                    __int16 v10 = -32316;
                    goto LABEL_147;
                  case 258:
                    __int16 v10 = -31804;
                    goto LABEL_147;
                  case 260:
                    __int16 v10 = -31292;
                    goto LABEL_147;
                  case 262:
                    __int16 v10 = -30780;
                    goto LABEL_147;
                  case 264:
                    __int16 v10 = -30268;
                    goto LABEL_147;
                  case 266:
                    __int16 v10 = -29756;
                    goto LABEL_147;
                  case 268:
                    __int16 v10 = -29244;
                    goto LABEL_147;
                  case 270:
                    __int16 v10 = -28732;
                    goto LABEL_147;
                  case 272:
                    __int16 v10 = -28220;
                    goto LABEL_147;
                  case 274:
                    __int16 v10 = -27708;
                    goto LABEL_147;
                  case 276:
                    __int16 v10 = -27196;
                    goto LABEL_147;
                  case 278:
                    __int16 v10 = -26684;
                    goto LABEL_147;
                  case 280:
                    __int16 v10 = -26172;
                    goto LABEL_147;
                  case 282:
                    __int16 v10 = -25660;
                    goto LABEL_147;
                  case 284:
                    __int16 v10 = -25148;
                    goto LABEL_147;
                  case 286:
                    __int16 v10 = -24636;
                    goto LABEL_147;
                  case 288:
                    __int16 v10 = -24124;
                    goto LABEL_147;
                  case 290:
                    __int16 v10 = -23612;
                    goto LABEL_147;
                  case 292:
                    __int16 v10 = -23100;
                    goto LABEL_147;
                  case 294:
                    __int16 v10 = -22588;
                    goto LABEL_147;
                  case 296:
                    __int16 v10 = -22076;
                    goto LABEL_147;
                  case 298:
                    __int16 v10 = -21564;
                    goto LABEL_147;
                  case 300:
                    __int16 v10 = -21052;
                    goto LABEL_147;
                  case 302:
                    __int16 v10 = -20540;
                    goto LABEL_147;
                  case 304:
                    LOBYTE(v118) = 105;
                    cmark_strbuf_put(v7, &v118, 1);
                    __int16 v10 = -30772;
                    goto LABEL_147;
                  case 306:
                    __int16 v10 = -19516;
                    goto LABEL_147;
                  case 308:
                    __int16 v10 = -19004;
                    goto LABEL_147;
                  case 310:
                    __int16 v10 = -18492;
                    goto LABEL_147;
                  case 313:
                    __int16 v10 = -17724;
                    goto LABEL_147;
                  case 315:
                    __int16 v10 = -17212;
                    goto LABEL_147;
                  case 317:
                    __int16 v10 = -16700;
                    goto LABEL_147;
                  case 319:
                    __int16 v10 = -32571;
                    goto LABEL_147;
                  case 321:
                    __int16 v10 = -32059;
                    goto LABEL_147;
                  case 323:
                    __int16 v10 = -31547;
                    goto LABEL_147;
                  case 325:
                    __int16 v10 = -31035;
                    goto LABEL_147;
                  case 327:
                    __int16 v10 = -30523;
                    goto LABEL_147;
                  case 329:
                    LOWORD(v118) = -17206;
                    cmark_strbuf_put(v7, &v118, 2);
                    break;
                  case 330:
                    __int16 v10 = -29755;
                    goto LABEL_147;
                  case 332:
                    __int16 v10 = -29243;
                    goto LABEL_147;
                  case 334:
                    __int16 v10 = -28731;
                    goto LABEL_147;
                  case 336:
                    __int16 v10 = -28219;
                    goto LABEL_147;
                  case 338:
                    __int16 v10 = -27707;
                    goto LABEL_147;
                  case 340:
                    __int16 v10 = -27195;
                    goto LABEL_147;
                  case 342:
                    __int16 v10 = -26683;
                    goto LABEL_147;
                  case 344:
                    __int16 v10 = -26171;
                    goto LABEL_147;
                  case 346:
                    __int16 v10 = -25659;
                    goto LABEL_147;
                  case 348:
                    __int16 v10 = -25147;
                    goto LABEL_147;
                  case 350:
                    __int16 v10 = -24635;
                    goto LABEL_147;
                  case 352:
                    __int16 v10 = -24123;
                    goto LABEL_147;
                  case 354:
                    __int16 v10 = -23611;
                    goto LABEL_147;
                  case 356:
                    __int16 v10 = -23099;
                    goto LABEL_147;
                  case 358:
                    __int16 v10 = -22587;
                    goto LABEL_147;
                  case 360:
                    __int16 v10 = -22075;
                    goto LABEL_147;
                  case 362:
                    __int16 v10 = -21563;
                    goto LABEL_147;
                  case 364:
                    __int16 v10 = -21051;
                    goto LABEL_147;
                  case 366:
                    __int16 v10 = -20539;
                    goto LABEL_147;
                  case 368:
                    __int16 v10 = -20027;
                    goto LABEL_147;
                  case 370:
                    __int16 v10 = -19515;
                    goto LABEL_147;
                  case 372:
                    __int16 v10 = -19003;
                    goto LABEL_147;
                  case 374:
                    __int16 v10 = -18491;
                    goto LABEL_147;
                  case 376:
                    __int16 v10 = -16445;
                    goto LABEL_147;
                  case 377:
                    __int16 v10 = -17723;
                    goto LABEL_147;
                  case 379:
                    __int16 v10 = -17211;
                    goto LABEL_147;
                  case 381:
                    __int16 v10 = -16699;
                    goto LABEL_147;
                  case 385:
                    __int16 v10 = -27703;
                    goto LABEL_147;
                  case 386:
                    __int16 v10 = -31802;
                    goto LABEL_147;
                  case 388:
                    __int16 v10 = -31290;
                    goto LABEL_147;
                  case 390:
                    __int16 v10 = -27447;
                    goto LABEL_147;
                  case 391:
                    __int16 v10 = -30522;
                    goto LABEL_147;
                  case 393:
                    __int16 v10 = -26935;
                    goto LABEL_147;
                  case 394:
                    __int16 v10 = -26679;
                    goto LABEL_147;
                  case 395:
                    __int16 v10 = -29498;
                    goto LABEL_147;
                  case 398:
                    __int16 v10 = -25145;
                    goto LABEL_147;
                  case 399:
                    __int16 v10 = -26167;
                    goto LABEL_147;
                  case 400:
                    __int16 v10 = -25655;
                    goto LABEL_147;
                  case 401:
                    __int16 v10 = -27962;
                    goto LABEL_147;
                  case 403:
                    __int16 v10 = -24375;
                    goto LABEL_147;
                  case 404:
                    __int16 v10 = -23607;
                    goto LABEL_147;
                  case 406:
                    __int16 v10 = -22071;
                    goto LABEL_147;
                  case 407:
                    __int16 v10 = -22327;
                    goto LABEL_147;
                  case 408:
                    __int16 v10 = -26170;
                    goto LABEL_147;
                  case 412:
                    __int16 v10 = -20535;
                    goto LABEL_147;
                  case 413:
                    __int16 v10 = -19767;
                    goto LABEL_147;
                  case 415:
                    __int16 v10 = -18999;
                    goto LABEL_147;
                  case 416:
                    __int16 v10 = -24122;
                    goto LABEL_147;
                  case 418:
                    __int16 v10 = -23610;
                    goto LABEL_147;
                  case 420:
                    __int16 v10 = -23098;
                    goto LABEL_147;
                  case 422:
                    __int16 v10 = -32566;
                    goto LABEL_147;
                  case 423:
                    __int16 v10 = -22330;
                    goto LABEL_147;
                  case 425:
                    __int16 v10 = -31798;
                    goto LABEL_147;
                  case 428:
                    __int16 v10 = -21050;
                    goto LABEL_147;
                  case 430:
                    __int16 v10 = -30518;
                    goto LABEL_147;
                  case 431:
                    __int16 v10 = -20282;
                    goto LABEL_147;
                  case 433:
                    __int16 v10 = -30006;
                    goto LABEL_147;
                  case 434:
                    __int16 v10 = -29750;
                    goto LABEL_147;
                  case 435:
                    __int16 v10 = -19258;
                    goto LABEL_147;
                  case 437:
                    __int16 v10 = -18746;
                    goto LABEL_147;
                  case 439:
                    __int16 v10 = -27958;
                    goto LABEL_147;
                  case 440:
                    __int16 v10 = -17978;
                    goto LABEL_147;
                  case 444:
                    __int16 v10 = -16954;
                    goto LABEL_147;
                  case 452:
                  case 453:
                    __int16 v10 = -31033;
                    goto LABEL_147;
                  case 455:
                  case 456:
                    __int16 v10 = -30265;
                    goto LABEL_147;
                  case 458:
                  case 459:
                    __int16 v10 = -29497;
                    goto LABEL_147;
                  case 461:
                    __int16 v10 = -28985;
                    goto LABEL_147;
                  case 463:
                    __int16 v10 = -28473;
                    goto LABEL_147;
                  case 465:
                    __int16 v10 = -27961;
                    goto LABEL_147;
                  case 467:
                    __int16 v10 = -27449;
                    goto LABEL_147;
                  case 469:
                    __int16 v10 = -26937;
                    goto LABEL_147;
                  case 471:
                    __int16 v10 = -26425;
                    goto LABEL_147;
                  case 473:
                    __int16 v10 = -25913;
                    goto LABEL_147;
                  case 475:
                    __int16 v10 = -25401;
                    goto LABEL_147;
                  case 478:
                    __int16 v10 = -24633;
                    goto LABEL_147;
                  case 480:
                    __int16 v10 = -24121;
                    goto LABEL_147;
                  case 482:
                    __int16 v10 = -23609;
                    goto LABEL_147;
                  case 484:
                    __int16 v10 = -23097;
                    goto LABEL_147;
                  case 486:
                    __int16 v10 = -22585;
                    goto LABEL_147;
                  case 488:
                    __int16 v10 = -22073;
                    goto LABEL_147;
                  case 490:
                    __int16 v10 = -21561;
                    goto LABEL_147;
                  case 492:
                    __int16 v10 = -21049;
                    goto LABEL_147;
                  case 494:
                    __int16 v10 = -20537;
                    goto LABEL_147;
                  case 496:
                    LOBYTE(v118) = 106;
                    cmark_strbuf_put(v7, &v118, 1);
                    __int16 v10 = -29492;
                    goto LABEL_147;
                  case 497:
                  case 498:
                    __int16 v10 = -19513;
                    goto LABEL_147;
                  case 500:
                    __int16 v10 = -19001;
                    goto LABEL_147;
                  case 502:
                    __int16 v10 = -27194;
                    goto LABEL_147;
                  case 503:
                    __int16 v10 = -16442;
                    goto LABEL_147;
                  case 504:
                    __int16 v10 = -17977;
                    goto LABEL_147;
                  case 506:
                    __int16 v10 = -17465;
                    goto LABEL_147;
                  case 508:
                    __int16 v10 = -16953;
                    goto LABEL_147;
                  case 510:
                    __int16 v10 = -16441;
                    goto LABEL_147;
                  case 512:
                    __int16 v10 = -32312;
                    goto LABEL_147;
                  case 514:
                    __int16 v10 = -31800;
                    goto LABEL_147;
                  case 516:
                    __int16 v10 = -31288;
                    goto LABEL_147;
                  case 518:
                    __int16 v10 = -30776;
                    goto LABEL_147;
                  case 520:
                    __int16 v10 = -30264;
                    goto LABEL_147;
                  case 522:
                    __int16 v10 = -29752;
                    goto LABEL_147;
                  case 524:
                    __int16 v10 = -29240;
                    goto LABEL_147;
                  case 526:
                    __int16 v10 = -28728;
                    goto LABEL_147;
                  case 528:
                    __int16 v10 = -28216;
                    goto LABEL_147;
                  case 530:
                    __int16 v10 = -27704;
                    goto LABEL_147;
                  case 532:
                    __int16 v10 = -27192;
                    goto LABEL_147;
                  case 534:
                    __int16 v10 = -26680;
                    goto LABEL_147;
                  case 536:
                    __int16 v10 = -26168;
                    goto LABEL_147;
                  case 538:
                    __int16 v10 = -25656;
                    goto LABEL_147;
                  case 540:
                    __int16 v10 = -25144;
                    goto LABEL_147;
                  case 542:
                    __int16 v10 = -24632;
                    goto LABEL_147;
                  case 544:
                    __int16 v10 = -24890;
                    goto LABEL_147;
                  case 546:
                    __int16 v10 = -23608;
                    goto LABEL_147;
                  case 548:
                    __int16 v10 = -23096;
                    goto LABEL_147;
                  case 550:
                    __int16 v10 = -22584;
                    goto LABEL_147;
                  case 552:
                    __int16 v10 = -22072;
                    goto LABEL_147;
                  case 554:
                    __int16 v10 = -21560;
                    goto LABEL_147;
                  case 556:
                    __int16 v10 = -21048;
                    goto LABEL_147;
                  case 558:
                    __int16 v10 = -20536;
                    goto LABEL_147;
                  case 560:
                    __int16 v10 = -20024;
                    goto LABEL_147;
                  case 562:
                    __int16 v10 = -19512;
                    goto LABEL_147;
                  case 570:
                    __int16 v38 = -19998;
                    goto LABEL_1456;
                  case 571:
                    __int16 v10 = -17208;
                    goto LABEL_147;
                  case 573:
                    __int16 v10 = -25914;
                    goto LABEL_147;
                  case 574:
                    __int16 v39 = -19998;
                    goto LABEL_915;
                  case 577:
                    __int16 v10 = -32055;
                    goto LABEL_147;
                  case 579:
                    __int16 v10 = -32570;
                    goto LABEL_147;
                  case 580:
                    __int16 v10 = -30262;
                    goto LABEL_147;
                  case 581:
                    __int16 v10 = -29494;
                    goto LABEL_147;
                  case 582:
                    __int16 v10 = -30775;
                    goto LABEL_147;
                  case 584:
                    __int16 v10 = -30263;
                    goto LABEL_147;
                  case 586:
                    __int16 v10 = -29751;
                    goto LABEL_147;
                  case 588:
                    __int16 v10 = -29239;
                    goto LABEL_147;
                  case 590:
                    __int16 v10 = -28727;
                    goto LABEL_147;
                  default:
                    goto LABEL_161;
                }
                char v14 = 110;
                goto LABEL_1204;
            }
            __int16 v10 = -32042;
          }
LABEL_147:
          LOWORD(v118) = v10;
          uint64_t v72 = v7;
          int v73 = 2;
LABEL_1494:
          uint64_t result = cmark_strbuf_put(v72, &v118, v73);
          goto LABEL_1495;
        }
        if (v117 > 43887)
        {
          if (v117 > 66735)
          {
            if (v117 > 71839)
            {
              switch(v117)
              {
                case 125184:
                  int v15 = -1566269712;
                  break;
                case 125185:
                  int v15 = -1549492496;
                  break;
                case 125186:
                  int v15 = -1532715280;
                  break;
                case 125187:
                  int v15 = -1515938064;
                  break;
                case 125188:
                  int v15 = -1499160848;
                  break;
                case 125189:
                  int v15 = -1482383632;
                  break;
                case 125190:
                  int v15 = -1465606416;
                  break;
                case 125191:
                  int v15 = -1448829200;
                  break;
                case 125192:
                  int v15 = -1432051984;
                  break;
                case 125193:
                  int v15 = -1415274768;
                  break;
                case 125194:
                  int v15 = -1398497552;
                  break;
                case 125195:
                  int v15 = -1381720336;
                  break;
                case 125196:
                  int v15 = -1364943120;
                  break;
                case 125197:
                  int v15 = -1348165904;
                  break;
                case 125198:
                  int v15 = -1331388688;
                  break;
                case 125199:
                  int v15 = -1314611472;
                  break;
                case 125200:
                  int v15 = -1297834256;
                  break;
                case 125201:
                  int v15 = -1281057040;
                  break;
                case 125202:
                  int v15 = -1264279824;
                  break;
                case 125203:
                  int v15 = -1247502608;
                  break;
                case 125204:
                  int v15 = -1230725392;
                  break;
                case 125205:
                  int v15 = -1213948176;
                  break;
                case 125206:
                  int v15 = -1197170960;
                  break;
                case 125207:
                  int v15 = -1180393744;
                  break;
                case 125208:
                  int v15 = -1163616528;
                  break;
                case 125209:
                  int v15 = -1146839312;
                  break;
                case 125210:
                  int v15 = -1130062096;
                  break;
                case 125211:
                  int v15 = -1113284880;
                  break;
                case 125212:
                  int v15 = -1096507664;
                  break;
                case 125213:
                  int v15 = -1079730448;
                  break;
                case 125214:
                  int v15 = -2136629520;
                  break;
                case 125215:
                  int v15 = -2119852304;
                  break;
                case 125216:
                  int v15 = -2103075088;
                  break;
                case 125217:
                  int v15 = -2086297872;
                  break;
                default:
                  switch(v117)
                  {
                    case 71840:
                      int v15 = -2136763920;
                      goto LABEL_1188;
                    case 71841:
                      int v15 = -2119986704;
                      goto LABEL_1188;
                    case 71842:
                      int v15 = -2103209488;
                      goto LABEL_1188;
                    case 71843:
                      int v15 = -2086432272;
                      goto LABEL_1188;
                    case 71844:
                      int v15 = -2069655056;
                      goto LABEL_1188;
                    case 71845:
                      int v15 = -2052877840;
                      goto LABEL_1188;
                    case 71846:
                      int v15 = -2036100624;
                      goto LABEL_1188;
                    case 71847:
                      int v15 = -2019323408;
                      goto LABEL_1188;
                    case 71848:
                      int v15 = -2002546192;
                      goto LABEL_1188;
                    case 71849:
                      int v15 = -1985768976;
                      goto LABEL_1188;
                    case 71850:
                      int v15 = -1968991760;
                      goto LABEL_1188;
                    case 71851:
                      int v15 = -1952214544;
                      goto LABEL_1188;
                    case 71852:
                      int v15 = -1935437328;
                      goto LABEL_1188;
                    case 71853:
                      int v15 = -1918660112;
                      goto LABEL_1188;
                    case 71854:
                      int v15 = -1901882896;
                      goto LABEL_1188;
                    case 71855:
                      int v15 = -1885105680;
                      goto LABEL_1188;
                    case 71856:
                      int v15 = -1868328464;
                      goto LABEL_1188;
                    case 71857:
                      int v15 = -1851551248;
                      goto LABEL_1188;
                    case 71858:
                      int v15 = -1834774032;
                      goto LABEL_1188;
                    case 71859:
                      int v15 = -1817996816;
                      goto LABEL_1188;
                    case 71860:
                      int v15 = -1801219600;
                      goto LABEL_1188;
                    case 71861:
                      int v15 = -1784442384;
                      goto LABEL_1188;
                    case 71862:
                      int v15 = -1767665168;
                      goto LABEL_1188;
                    case 71863:
                      int v15 = -1750887952;
                      goto LABEL_1188;
                    case 71864:
                      int v15 = -1734110736;
                      goto LABEL_1188;
                    case 71865:
                      int v15 = -1717333520;
                      goto LABEL_1188;
                    case 71866:
                      int v15 = -1700556304;
                      goto LABEL_1188;
                    case 71867:
                      int v15 = -1683779088;
                      goto LABEL_1188;
                    case 71868:
                      int v15 = -1667001872;
                      goto LABEL_1188;
                    case 71869:
                      int v15 = -1650224656;
                      goto LABEL_1188;
                    case 71870:
                      int v15 = -1633447440;
                      goto LABEL_1188;
                    case 71871:
                      int v15 = -1616670224;
                      goto LABEL_1188;
                    default:
                      goto LABEL_161;
                  }
              }
            }
            else
            {
              switch(v117)
              {
                case 68736:
                  int v15 = -2135715600;
                  break;
                case 68737:
                  int v15 = -2118938384;
                  break;
                case 68738:
                  int v15 = -2102161168;
                  break;
                case 68739:
                  int v15 = -2085383952;
                  break;
                case 68740:
                  int v15 = -2068606736;
                  break;
                case 68741:
                  int v15 = -2051829520;
                  break;
                case 68742:
                  int v15 = -2035052304;
                  break;
                case 68743:
                  int v15 = -2018275088;
                  break;
                case 68744:
                  int v15 = -2001497872;
                  break;
                case 68745:
                  int v15 = -1984720656;
                  break;
                case 68746:
                  int v15 = -1967943440;
                  break;
                case 68747:
                  int v15 = -1951166224;
                  break;
                case 68748:
                  int v15 = -1934389008;
                  break;
                case 68749:
                  int v15 = -1917611792;
                  break;
                case 68750:
                  int v15 = -1900834576;
                  break;
                case 68751:
                  int v15 = -1884057360;
                  break;
                case 68752:
                  int v15 = -1867280144;
                  break;
                case 68753:
                  int v15 = -1850502928;
                  break;
                case 68754:
                  int v15 = -1833725712;
                  break;
                case 68755:
                  int v15 = -1816948496;
                  break;
                case 68756:
                  int v15 = -1800171280;
                  break;
                case 68757:
                  int v15 = -1783394064;
                  break;
                case 68758:
                  int v15 = -1766616848;
                  break;
                case 68759:
                  int v15 = -1749839632;
                  break;
                case 68760:
                  int v15 = -1733062416;
                  break;
                case 68761:
                  int v15 = -1716285200;
                  break;
                case 68762:
                  int v15 = -1699507984;
                  break;
                case 68763:
                  int v15 = -1682730768;
                  break;
                case 68764:
                  int v15 = -1665953552;
                  break;
                case 68765:
                  int v15 = -1649176336;
                  break;
                case 68766:
                  int v15 = -1632399120;
                  break;
                case 68767:
                  int v15 = -1615621904;
                  break;
                case 68768:
                  int v15 = -1598844688;
                  break;
                case 68769:
                  int v15 = -1582067472;
                  break;
                case 68770:
                  int v15 = -1565290256;
                  break;
                case 68771:
                  int v15 = -1548513040;
                  break;
                case 68772:
                  int v15 = -1531735824;
                  break;
                case 68773:
                  int v15 = -1514958608;
                  break;
                case 68774:
                  int v15 = -1498181392;
                  break;
                case 68775:
                  int v15 = -1481404176;
                  break;
                case 68776:
                  int v15 = -1464626960;
                  break;
                case 68777:
                  int v15 = -1447849744;
                  break;
                case 68778:
                  int v15 = -1431072528;
                  break;
                case 68779:
                  int v15 = -1414295312;
                  break;
                case 68780:
                  int v15 = -1397518096;
                  break;
                case 68781:
                  int v15 = -1380740880;
                  break;
                case 68782:
                  int v15 = -1363963664;
                  break;
                case 68783:
                  int v15 = -1347186448;
                  break;
                case 68784:
                  int v15 = -1330409232;
                  break;
                case 68785:
                  int v15 = -1313632016;
                  break;
                case 68786:
                  int v15 = -1296854800;
                  break;
                default:
                  switch(v117)
                  {
                    case 66736:
                      int v15 = -1735159568;
                      goto LABEL_1188;
                    case 66737:
                      int v15 = -1718382352;
                      goto LABEL_1188;
                    case 66738:
                      int v15 = -1701605136;
                      goto LABEL_1188;
                    case 66739:
                      int v15 = -1684827920;
                      goto LABEL_1188;
                    case 66740:
                      int v15 = -1668050704;
                      goto LABEL_1188;
                    case 66741:
                      int v15 = -1651273488;
                      goto LABEL_1188;
                    case 66742:
                      int v15 = -1634496272;
                      goto LABEL_1188;
                    case 66743:
                      int v15 = -1617719056;
                      goto LABEL_1188;
                    case 66744:
                      int v15 = -1600941840;
                      goto LABEL_1188;
                    case 66745:
                      int v15 = -1584164624;
                      goto LABEL_1188;
                    case 66746:
                      int v15 = -1567387408;
                      goto LABEL_1188;
                    case 66747:
                      int v15 = -1550610192;
                      goto LABEL_1188;
                    case 66748:
                      int v15 = -1533832976;
                      goto LABEL_1188;
                    case 66749:
                      int v15 = -1517055760;
                      goto LABEL_1188;
                    case 66750:
                      int v15 = -1500278544;
                      goto LABEL_1188;
                    case 66751:
                      int v15 = -1483501328;
                      goto LABEL_1188;
                    case 66752:
                      int v15 = -1466724112;
                      goto LABEL_1188;
                    case 66753:
                      int v15 = -1449946896;
                      goto LABEL_1188;
                    case 66754:
                      int v15 = -1433169680;
                      goto LABEL_1188;
                    case 66755:
                      int v15 = -1416392464;
                      goto LABEL_1188;
                    case 66756:
                      int v15 = -1399615248;
                      goto LABEL_1188;
                    case 66757:
                      int v15 = -1382838032;
                      goto LABEL_1188;
                    case 66758:
                      int v15 = -1366060816;
                      goto LABEL_1188;
                    case 66759:
                      int v15 = -1349283600;
                      goto LABEL_1188;
                    case 66760:
                      int v15 = -1332506384;
                      goto LABEL_1188;
                    case 66761:
                      int v15 = -1315729168;
                      goto LABEL_1188;
                    case 66762:
                      int v15 = -1298951952;
                      goto LABEL_1188;
                    case 66763:
                      int v15 = -1282174736;
                      goto LABEL_1188;
                    case 66764:
                      int v15 = -1265397520;
                      goto LABEL_1188;
                    case 66765:
                      int v15 = -1248620304;
                      goto LABEL_1188;
                    case 66766:
                      int v15 = -1231843088;
                      goto LABEL_1188;
                    case 66767:
                      int v15 = -1215065872;
                      goto LABEL_1188;
                    case 66768:
                      int v15 = -1198288656;
                      goto LABEL_1188;
                    case 66769:
                      int v15 = -1181511440;
                      goto LABEL_1188;
                    case 66770:
                      int v15 = -1164734224;
                      goto LABEL_1188;
                    case 66771:
                      int v15 = -1147957008;
                      goto LABEL_1188;
                    default:
                      goto LABEL_161;
                  }
              }
            }
          }
          else
          {
            if (v117 <= 64255)
            {
              switch(v117)
              {
                case 43888:
                  __int16 v11 = -28959;
                  goto LABEL_1079;
                case 43889:
                  __int16 v12 = -28959;
                  goto LABEL_1452;
                case 43890:
                  __int16 v36 = -28959;
                  goto LABEL_1082;
                case 43891:
                  __int16 v18 = -28959;
                  goto LABEL_1454;
                case 43892:
                  __int16 v37 = -28959;
                  goto LABEL_1085;
                case 43893:
                  __int16 v38 = -28959;
                  goto LABEL_1456;
                case 43894:
                  __int16 v39 = -28959;
                  goto LABEL_915;
                case 43895:
                  __int16 v40 = -28959;
                  goto LABEL_1458;
                case 43896:
                  __int16 v41 = -28959;
                  goto LABEL_1286;
                case 43897:
                  __int16 v42 = -28959;
                  goto LABEL_1460;
                case 43898:
                  __int16 v80 = -28959;
                  goto LABEL_1288;
                case 43899:
                  __int16 v81 = -28959;
                  goto LABEL_1462;
                case 43900:
                  __int16 v82 = -28959;
                  goto LABEL_1351;
                case 43901:
                  __int16 v83 = -28959;
                  goto LABEL_474;
                case 43902:
                  __int16 v84 = -28959;
                  goto LABEL_476;
                case 43903:
                  __int16 v85 = -28959;
                  goto LABEL_478;
                case 43904:
                  LOWORD(v118) = -28959;
                  char v58 = -80;
                  goto LABEL_1493;
                case 43905:
                  LOWORD(v118) = -28959;
                  char v58 = -79;
                  goto LABEL_1493;
                case 43906:
                  LOWORD(v118) = -28959;
                  char v58 = -78;
                  goto LABEL_1493;
                case 43907:
                  LOWORD(v118) = -28959;
                  char v58 = -77;
                  goto LABEL_1493;
                case 43908:
                  LOWORD(v118) = -28959;
                  char v58 = -76;
                  goto LABEL_1493;
                case 43909:
                  LOWORD(v118) = -28959;
                  char v58 = -75;
                  goto LABEL_1493;
                case 43910:
                  LOWORD(v118) = -28959;
                  char v58 = -74;
                  goto LABEL_1493;
                case 43911:
                  LOWORD(v118) = -28959;
                  char v58 = -73;
                  goto LABEL_1493;
                case 43912:
                  LOWORD(v118) = -28959;
                  char v58 = -72;
                  goto LABEL_1493;
                case 43913:
                  LOWORD(v118) = -28959;
                  char v58 = -71;
                  goto LABEL_1493;
                case 43914:
                  LOWORD(v118) = -28959;
                  char v58 = -70;
                  goto LABEL_1493;
                case 43915:
                  LOWORD(v118) = -28959;
                  char v58 = -69;
                  goto LABEL_1493;
                case 43916:
                  LOWORD(v118) = -28959;
                  char v58 = -68;
                  goto LABEL_1493;
                case 43917:
                  LOWORD(v118) = -28959;
                  char v58 = -67;
                  goto LABEL_1493;
                case 43918:
                  LOWORD(v118) = -28959;
                  char v58 = -66;
                  goto LABEL_1493;
                case 43919:
                  LOWORD(v118) = -28959;
                  char v58 = -65;
                  goto LABEL_1493;
                case 43920:
                  LOWORD(v118) = -28703;
                  char v58 = 0x80;
                  goto LABEL_1493;
                case 43921:
                  __int16 v19 = -28703;
                  goto LABEL_429;
                case 43922:
                  __int16 v86 = -28703;
                  goto LABEL_1090;
                case 43923:
                  __int16 v87 = -28703;
                  goto LABEL_1092;
                case 43924:
                  __int16 v88 = -28703;
                  goto LABEL_1094;
                case 43925:
                  __int16 v89 = -28703;
                  goto LABEL_1096;
                case 43926:
                  __int16 v90 = -28703;
                  goto LABEL_1245;
                case 43927:
                  __int16 v91 = -28703;
                  goto LABEL_1099;
                case 43928:
                  __int16 v92 = -28703;
                  goto LABEL_1248;
                case 43929:
                  __int16 v93 = -28703;
                  goto LABEL_1102;
                case 43930:
                  __int16 v94 = -28703;
                  goto LABEL_1251;
                case 43931:
                  __int16 v95 = -28703;
                  goto LABEL_1105;
                case 43932:
                  __int16 v96 = -28703;
                  goto LABEL_1408;
                case 43933:
                  __int16 v97 = -28703;
                  goto LABEL_1108;
                case 43934:
                  __int16 v43 = -28703;
                  goto LABEL_1256;
                case 43935:
                  __int16 v98 = -28703;
                  goto LABEL_1480;
                case 43936:
                  __int16 v13 = -28703;
                  goto LABEL_1259;
                case 43937:
                  __int16 v21 = -28703;
                  goto LABEL_1482;
                case 43938:
                  __int16 v22 = -28703;
                  goto LABEL_1262;
                case 43939:
                  __int16 v23 = -28703;
                  goto LABEL_1484;
                case 43940:
                  __int16 v24 = -28703;
                  goto LABEL_1265;
                case 43941:
                  __int16 v25 = -28703;
                  goto LABEL_1486;
                case 43942:
                  __int16 v26 = -28703;
                  goto LABEL_1268;
                case 43943:
                  __int16 v27 = -28703;
                  goto LABEL_1488;
                case 43944:
                  __int16 v28 = -28703;
                  goto LABEL_1271;
                case 43945:
                  __int16 v29 = -28703;
                  goto LABEL_1490;
                case 43946:
                  __int16 v30 = -28703;
                  goto LABEL_1274;
                case 43947:
                  __int16 v31 = -28703;
                  goto LABEL_1492;
                case 43948:
                  __int16 v32 = -28703;
                  goto LABEL_1277;
                case 43949:
                  __int16 v33 = -28703;
                  goto LABEL_1448;
                case 43950:
                  __int16 v34 = -28703;
                  goto LABEL_1280;
                case 43951:
                  __int16 v35 = -28703;
                  goto LABEL_1450;
                case 43952:
                  __int16 v11 = -28703;
                  goto LABEL_1079;
                case 43953:
                  __int16 v12 = -28703;
                  goto LABEL_1452;
                case 43954:
                  __int16 v36 = -28703;
                  goto LABEL_1082;
                case 43955:
                  __int16 v18 = -28703;
                  goto LABEL_1454;
                case 43956:
                  __int16 v37 = -28703;
                  goto LABEL_1085;
                case 43957:
                  __int16 v38 = -28703;
                  goto LABEL_1456;
                case 43958:
                  __int16 v39 = -28703;
                  goto LABEL_915;
                case 43959:
                  __int16 v40 = -28703;
                  goto LABEL_1458;
                case 43960:
                  __int16 v41 = -28703;
                  goto LABEL_1286;
                case 43961:
                  __int16 v42 = -28703;
                  goto LABEL_1460;
                case 43962:
                  __int16 v80 = -28703;
                  goto LABEL_1288;
                case 43963:
                  __int16 v81 = -28703;
                  goto LABEL_1462;
                case 43964:
                  __int16 v82 = -28703;
                  goto LABEL_1351;
                case 43965:
                  __int16 v83 = -28703;
LABEL_474:
                  LOWORD(v118) = v83;
                  char v58 = -83;
                  break;
                case 43966:
                  __int16 v84 = -28703;
LABEL_476:
                  LOWORD(v118) = v84;
                  char v58 = -82;
                  break;
                case 43967:
                  __int16 v85 = -28703;
LABEL_478:
                  LOWORD(v118) = v85;
                  char v58 = -81;
                  break;
                default:
                  goto LABEL_161;
              }
              goto LABEL_1493;
            }
            switch(v117)
            {
              case 66560:
                int v15 = -1466920720;
                break;
              case 66561:
                int v15 = -1450143504;
                break;
              case 66562:
                int v15 = -1433366288;
                break;
              case 66563:
                int v15 = -1416589072;
                break;
              case 66564:
                int v15 = -1399811856;
                break;
              case 66565:
                int v15 = -1383034640;
                break;
              case 66566:
                int v15 = -1366257424;
                break;
              case 66567:
                int v15 = -1349480208;
                break;
              case 66568:
                int v15 = -1332702992;
                break;
              case 66569:
                int v15 = -1315925776;
                break;
              case 66570:
                int v15 = -1299148560;
                break;
              case 66571:
                int v15 = -1282371344;
                break;
              case 66572:
                int v15 = -1265594128;
                break;
              case 66573:
                int v15 = -1248816912;
                break;
              case 66574:
                int v15 = -1232039696;
                break;
              case 66575:
                int v15 = -1215262480;
                break;
              case 66576:
                int v15 = -1198485264;
                break;
              case 66577:
                int v15 = -1181708048;
                break;
              case 66578:
                int v15 = -1164930832;
                break;
              case 66579:
                int v15 = -1148153616;
                break;
              case 66580:
                int v15 = -1131376400;
                break;
              case 66581:
                int v15 = -1114599184;
                break;
              case 66582:
                int v15 = -1097821968;
                break;
              case 66583:
                int v15 = -1081044752;
                break;
              case 66584:
                int v15 = -2137943824;
                break;
              case 66585:
                int v15 = -2121166608;
                break;
              case 66586:
                int v15 = -2104389392;
                break;
              case 66587:
                int v15 = -2087612176;
                break;
              case 66588:
                int v15 = -2070834960;
                break;
              case 66589:
                int v15 = -2054057744;
                break;
              case 66590:
                int v15 = -2037280528;
                break;
              case 66591:
                int v15 = -2020503312;
                break;
              case 66592:
                int v15 = -2003726096;
                break;
              case 66593:
                int v15 = -1986948880;
                break;
              case 66594:
                int v15 = -1970171664;
                break;
              case 66595:
                int v15 = -1953394448;
                break;
              case 66596:
                int v15 = -1936617232;
                break;
              case 66597:
                int v15 = -1919840016;
                break;
              case 66598:
                int v15 = -1903062800;
                break;
              case 66599:
                int v15 = -1886285584;
                break;
              default:
                switch(v117)
                {
                  case 65313:
                    __int16 v19 = -16913;
LABEL_429:
                    LOWORD(v118) = v19;
                    char v58 = -127;
                    goto LABEL_1493;
                  case 65314:
                    __int16 v86 = -16913;
LABEL_1090:
                    LOWORD(v118) = v86;
                    char v58 = -126;
                    goto LABEL_1493;
                  case 65315:
                    __int16 v87 = -16913;
LABEL_1092:
                    LOWORD(v118) = v87;
                    char v58 = -125;
                    goto LABEL_1493;
                  case 65316:
                    __int16 v88 = -16913;
LABEL_1094:
                    LOWORD(v118) = v88;
                    char v58 = -124;
                    goto LABEL_1493;
                  case 65317:
                    __int16 v89 = -16913;
LABEL_1096:
                    LOWORD(v118) = v89;
                    char v58 = -123;
                    goto LABEL_1493;
                  case 65318:
                    __int16 v90 = -16913;
                    goto LABEL_1245;
                  case 65319:
                    __int16 v91 = -16913;
LABEL_1099:
                    LOWORD(v118) = v91;
                    char v58 = -121;
                    goto LABEL_1493;
                  case 65320:
                    __int16 v92 = -16913;
                    goto LABEL_1248;
                  case 65321:
                    __int16 v93 = -16913;
LABEL_1102:
                    LOWORD(v118) = v93;
                    char v58 = -119;
                    goto LABEL_1493;
                  case 65322:
                    __int16 v94 = -16913;
                    goto LABEL_1251;
                  case 65323:
                    __int16 v95 = -16913;
LABEL_1105:
                    LOWORD(v118) = v95;
                    char v58 = -117;
                    goto LABEL_1493;
                  case 65324:
                    __int16 v96 = -16913;
                    goto LABEL_1408;
                  case 65325:
                    __int16 v97 = -16913;
LABEL_1108:
                    LOWORD(v118) = v97;
                    char v58 = -115;
                    goto LABEL_1493;
                  case 65326:
                    __int16 v43 = -16913;
                    goto LABEL_1256;
                  case 65327:
                    __int16 v98 = -16913;
                    goto LABEL_1480;
                  case 65328:
                    __int16 v13 = -16913;
                    goto LABEL_1259;
                  case 65329:
                    __int16 v21 = -16913;
                    goto LABEL_1482;
                  case 65330:
                    __int16 v22 = -16913;
                    goto LABEL_1262;
                  case 65331:
                    __int16 v23 = -16913;
                    goto LABEL_1484;
                  case 65332:
                    __int16 v24 = -16913;
                    goto LABEL_1265;
                  case 65333:
                    __int16 v25 = -16913;
                    goto LABEL_1486;
                  case 65334:
                    __int16 v26 = -16913;
                    goto LABEL_1268;
                  case 65335:
                    __int16 v27 = -16913;
                    goto LABEL_1488;
                  case 65336:
                    __int16 v28 = -16913;
                    goto LABEL_1271;
                  case 65337:
                    __int16 v29 = -16913;
                    goto LABEL_1490;
                  case 65338:
                    __int16 v30 = -16913;
                    goto LABEL_1274;
                  default:
                    switch(v117)
                    {
                      case 64256:
                        char v78 = 102;
LABEL_1196:
                        LOBYTE(v118) = v78;
                        cmark_strbuf_put(v7, &v118, 1);
                        LOBYTE(v118) = v78;
                        goto LABEL_1205;
                      case 64257:
                        LOBYTE(v118) = 102;
                        goto LABEL_1200;
                      case 64258:
                        LOBYTE(v118) = 102;
                        goto LABEL_1202;
                      case 64259:
                        LOBYTE(v118) = 102;
                        cmark_strbuf_put(v7, &v118, 1);
                        LOBYTE(v118) = 102;
LABEL_1200:
                        cmark_strbuf_put(v7, &v118, 1);
                        LOBYTE(v118) = 105;
                        goto LABEL_1205;
                      case 64260:
                        LOBYTE(v118) = 102;
                        cmark_strbuf_put(v7, &v118, 1);
                        LOBYTE(v118) = 102;
LABEL_1202:
                        cmark_strbuf_put(v7, &v118, 1);
LABEL_1203:
                        char v14 = 108;
                        goto LABEL_1204;
                      case 64261:
                      case 64262:
                        LOBYTE(v118) = 115;
                        cmark_strbuf_put(v7, &v118, 1);
LABEL_55:
                        char v14 = 116;
                        goto LABEL_1204;
                      case 64275:
                        __int16 v115 = -19243;
                        goto LABEL_1210;
                      case 64276:
                        LOWORD(v118) = -19243;
                        cmark_strbuf_put(v7, &v118, 2);
                        __int16 v10 = -23083;
                        goto LABEL_147;
                      case 64277:
                        LOWORD(v118) = -19243;
                        cmark_strbuf_put(v7, &v118, 2);
                        __int16 v10 = -21547;
                        goto LABEL_147;
                      case 64278:
                        __int16 v115 = -16683;
LABEL_1210:
                        LOWORD(v118) = v115;
                        cmark_strbuf_put(v7, &v118, 2);
                        __int16 v10 = -18731;
                        break;
                      case 64279:
                        LOWORD(v118) = -19243;
                        cmark_strbuf_put(v7, &v118, 2);
                        __int16 v10 = -21035;
                        goto LABEL_147;
                      default:
                        goto LABEL_161;
                    }
                    goto LABEL_147;
                }
            }
          }
LABEL_1188:
          int v118 = v15;
          uint64_t v72 = v7;
          int v73 = 4;
          goto LABEL_1494;
        }
        if (v117 > 11263)
        {
          switch(v117)
          {
            case 11264:
              __int16 v16 = -20254;
LABEL_666:
              LOWORD(v118) = v16;
              char v58 = -80;
              break;
            case 11265:
              __int16 v44 = -20254;
              goto LABEL_1324;
            case 11266:
              __int16 v45 = -20254;
LABEL_1219:
              LOWORD(v118) = v45;
              char v58 = -78;
              break;
            case 11267:
              __int16 v46 = -20254;
              goto LABEL_1361;
            case 11268:
              __int16 v47 = -20254;
LABEL_1222:
              LOWORD(v118) = v47;
              char v58 = -76;
              break;
            case 11269:
              __int16 v48 = -20254;
              goto LABEL_1432;
            case 11270:
              __int16 v49 = -20254;
              goto LABEL_1296;
            case 11271:
              __int16 v50 = -20254;
              goto LABEL_1434;
            case 11272:
              __int16 v51 = -20254;
LABEL_1227:
              LOWORD(v118) = v51;
              char v58 = -72;
              break;
            case 11273:
              __int16 v52 = -20254;
              goto LABEL_1400;
            case 11274:
              __int16 v53 = -20254;
LABEL_1396:
              LOWORD(v118) = v53;
              char v58 = -70;
              break;
            case 11275:
              __int16 v54 = -20254;
              goto LABEL_1366;
            case 11276:
              __int16 v55 = -20254;
LABEL_1398:
              LOWORD(v118) = v55;
              char v58 = -68;
              break;
            case 11277:
              __int16 v56 = -20254;
              goto LABEL_1368;
            case 11278:
              __int16 v57 = -20254;
LABEL_101:
              LOWORD(v118) = v57;
              char v58 = -66;
              break;
            case 11279:
              __int16 v59 = -20254;
              goto LABEL_1402;
            case 11280:
              __int16 v17 = -19998;
LABEL_1236:
              LOWORD(v118) = v17;
              char v58 = 0x80;
              break;
            case 11281:
              __int16 v20 = -19998;
              goto LABEL_1466;
            case 11282:
              __int16 v107 = -19998;
LABEL_1239:
              LOWORD(v118) = v107;
              char v58 = -126;
              break;
            case 11283:
              __int16 v99 = -19998;
              goto LABEL_1468;
            case 11284:
              __int16 v60 = -19998;
LABEL_1242:
              LOWORD(v118) = v60;
              char v58 = -124;
              break;
            case 11285:
              __int16 v100 = -19998;
              goto LABEL_1470;
            case 11286:
              __int16 v90 = -19998;
LABEL_1245:
              LOWORD(v118) = v90;
              char v58 = -122;
              break;
            case 11287:
              __int16 v101 = -19998;
              goto LABEL_1472;
            case 11288:
              __int16 v92 = -19998;
LABEL_1248:
              LOWORD(v118) = v92;
              char v58 = -120;
              break;
            case 11289:
              __int16 v102 = -19998;
              goto LABEL_1474;
            case 11290:
              __int16 v94 = -19998;
LABEL_1251:
              LOWORD(v118) = v94;
              char v58 = -118;
              break;
            case 11291:
              __int16 v79 = -19998;
              goto LABEL_1476;
            case 11292:
              __int16 v96 = -19998;
LABEL_1408:
              LOWORD(v118) = v96;
              char v58 = -116;
              break;
            case 11293:
              __int16 v103 = -19998;
              goto LABEL_1478;
            case 11294:
              __int16 v43 = -19998;
              goto LABEL_1256;
            case 11295:
              __int16 v98 = -19998;
              goto LABEL_1480;
            case 11296:
              __int16 v13 = -19998;
LABEL_1259:
              LOWORD(v118) = v13;
              char v58 = -112;
              break;
            case 11297:
              __int16 v21 = -19998;
              goto LABEL_1482;
            case 11298:
              __int16 v22 = -19998;
LABEL_1262:
              LOWORD(v118) = v22;
              char v58 = -110;
              break;
            case 11299:
              __int16 v23 = -19998;
              goto LABEL_1484;
            case 11300:
              __int16 v24 = -19998;
LABEL_1265:
              LOWORD(v118) = v24;
              char v58 = -108;
              break;
            case 11301:
              __int16 v25 = -19998;
              goto LABEL_1486;
            case 11302:
              __int16 v26 = -19998;
LABEL_1268:
              LOWORD(v118) = v26;
              char v58 = -106;
              break;
            case 11303:
              __int16 v27 = -19998;
              goto LABEL_1488;
            case 11304:
              __int16 v28 = -19998;
LABEL_1271:
              LOWORD(v118) = v28;
              char v58 = -104;
              break;
            case 11305:
              __int16 v29 = -19998;
              goto LABEL_1490;
            case 11306:
              __int16 v30 = -19998;
LABEL_1274:
              LOWORD(v118) = v30;
              char v58 = -102;
              break;
            case 11307:
              __int16 v31 = -19998;
              goto LABEL_1492;
            case 11308:
              __int16 v32 = -19998;
LABEL_1277:
              LOWORD(v118) = v32;
              char v58 = -100;
              break;
            case 11309:
              __int16 v33 = -19998;
              goto LABEL_1448;
            case 11310:
              __int16 v34 = -19998;
LABEL_1280:
              LOWORD(v118) = v34;
              char v58 = -98;
              break;
            case 11311:
            case 11312:
            case 11313:
            case 11314:
            case 11315:
            case 11316:
            case 11317:
            case 11318:
            case 11319:
            case 11320:
            case 11321:
            case 11322:
            case 11323:
            case 11324:
            case 11325:
            case 11326:
            case 11327:
            case 11328:
            case 11329:
            case 11330:
            case 11331:
            case 11332:
            case 11333:
            case 11334:
            case 11335:
            case 11336:
            case 11337:
            case 11338:
            case 11339:
            case 11340:
            case 11341:
            case 11342:
            case 11343:
            case 11344:
            case 11345:
            case 11346:
            case 11347:
            case 11348:
            case 11349:
            case 11350:
            case 11351:
            case 11352:
            case 11353:
            case 11354:
            case 11355:
            case 11356:
            case 11357:
            case 11358:
            case 11359:
            case 11361:
            case 11365:
            case 11366:
            case 11368:
            case 11370:
            case 11372:
            case 11377:
            case 11379:
            case 11380:
            case 11382:
            case 11383:
            case 11384:
            case 11385:
            case 11386:
            case 11387:
            case 11388:
            case 11389:
            case 11393:
            case 11395:
            case 11397:
            case 11399:
            case 11401:
            case 11403:
            case 11405:
            case 11407:
            case 11409:
            case 11411:
            case 11413:
            case 11415:
            case 11417:
            case 11419:
            case 11421:
            case 11423:
            case 11425:
            case 11427:
            case 11429:
            case 11431:
            case 11433:
            case 11435:
            case 11437:
            case 11439:
            case 11441:
            case 11443:
            case 11445:
            case 11447:
            case 11449:
            case 11451:
            case 11453:
            case 11455:
            case 11457:
            case 11459:
            case 11461:
            case 11463:
            case 11465:
            case 11467:
            case 11469:
            case 11471:
            case 11473:
            case 11475:
            case 11477:
            case 11479:
            case 11481:
            case 11483:
            case 11485:
            case 11487:
            case 11489:
            case 11491:
            case 11492:
            case 11493:
            case 11494:
            case 11495:
            case 11496:
            case 11497:
            case 11498:
            case 11500:
            case 11502:
            case 11503:
            case 11504:
            case 11505:
              goto LABEL_161;
            case 11360:
              __int16 v12 = -19998;
              goto LABEL_1452;
            case 11362:
              __int16 v10 = -21559;
              goto LABEL_147;
            case 11363:
              __int16 v56 = -18975;
              goto LABEL_1368;
            case 11364:
              __int16 v10 = -16951;
              goto LABEL_147;
            case 11367:
              __int16 v41 = -19998;
LABEL_1286:
              LOWORD(v118) = v41;
              char v58 = -88;
              break;
            case 11369:
              __int16 v80 = -19998;
LABEL_1288:
              LOWORD(v118) = v80;
              char v58 = -86;
              break;
            case 11371:
              __int16 v82 = -19998;
              goto LABEL_1351;
            case 11373:
              __int16 v10 = -28215;
              goto LABEL_147;
            case 11374:
              __int16 v10 = -20023;
              goto LABEL_147;
            case 11375:
              __int16 v10 = -28471;
              goto LABEL_147;
            case 11376:
              __int16 v10 = -27959;
              goto LABEL_147;
            case 11378:
              __int16 v46 = -19998;
              goto LABEL_1361;
            case 11381:
              __int16 v49 = -19998;
LABEL_1296:
              LOWORD(v118) = v49;
              char v58 = -74;
              break;
            case 11390:
              __int16 v10 = -16440;
              goto LABEL_147;
            case 11391:
              __int16 v10 = -32567;
              goto LABEL_147;
            case 11392:
              __int16 v20 = -19742;
              goto LABEL_1466;
            case 11394:
              __int16 v99 = -19742;
              goto LABEL_1468;
            case 11396:
              __int16 v100 = -19742;
              goto LABEL_1470;
            case 11398:
              __int16 v101 = -19742;
              goto LABEL_1472;
            case 11400:
              __int16 v102 = -19742;
              goto LABEL_1474;
            case 11402:
              __int16 v79 = -19742;
              goto LABEL_1476;
            case 11404:
              __int16 v103 = -19742;
              goto LABEL_1478;
            case 11406:
              __int16 v98 = -19742;
              goto LABEL_1480;
            case 11408:
              __int16 v21 = -19742;
              goto LABEL_1482;
            case 11410:
              __int16 v23 = -19742;
              goto LABEL_1484;
            case 11412:
              __int16 v25 = -19742;
              goto LABEL_1486;
            case 11414:
              __int16 v27 = -19742;
              goto LABEL_1488;
            case 11416:
              __int16 v29 = -19742;
              goto LABEL_1490;
            case 11418:
              __int16 v31 = -19742;
              goto LABEL_1492;
            case 11420:
              __int16 v33 = -19742;
              goto LABEL_1448;
            case 11422:
              __int16 v35 = -19742;
              goto LABEL_1450;
            case 11424:
              __int16 v12 = -19742;
              goto LABEL_1452;
            case 11426:
              __int16 v18 = -19742;
              goto LABEL_1454;
            case 11428:
              __int16 v38 = -19742;
LABEL_1456:
              LOWORD(v118) = v38;
              char v58 = -91;
              break;
            case 11430:
              __int16 v40 = -19742;
LABEL_1458:
              LOWORD(v118) = v40;
              char v58 = -89;
              break;
            case 11432:
              __int16 v42 = -19742;
LABEL_1460:
              LOWORD(v118) = v42;
              char v58 = -87;
              break;
            case 11434:
              __int16 v81 = -19742;
LABEL_1462:
              LOWORD(v118) = v81;
              char v58 = -85;
              break;
            case 11436:
              __int16 v104 = -19742;
LABEL_1464:
              LOWORD(v118) = v104;
              char v58 = -83;
              break;
            case 11438:
              __int16 v105 = -19742;
LABEL_1394:
              LOWORD(v118) = v105;
              char v58 = -81;
              break;
            case 11440:
              __int16 v44 = -19742;
LABEL_1324:
              LOWORD(v118) = v44;
              char v58 = -79;
              break;
            case 11442:
              __int16 v46 = -19742;
              goto LABEL_1361;
            case 11444:
              __int16 v48 = -19742;
LABEL_1432:
              LOWORD(v118) = v48;
              char v58 = -75;
              break;
            case 11446:
              __int16 v50 = -19742;
LABEL_1434:
              LOWORD(v118) = v50;
              char v58 = -73;
              break;
            case 11448:
              __int16 v52 = -19742;
LABEL_1400:
              LOWORD(v118) = v52;
              char v58 = -71;
              break;
            case 11450:
              __int16 v54 = -19742;
LABEL_1366:
              LOWORD(v118) = v54;
              char v58 = -69;
              break;
            case 11452:
              __int16 v56 = -19742;
LABEL_1368:
              LOWORD(v118) = v56;
              char v58 = -67;
              break;
            case 11454:
              __int16 v59 = -19742;
LABEL_1402:
              LOWORD(v118) = v59;
              char v58 = -65;
              break;
            case 11456:
              __int16 v20 = -19486;
LABEL_1466:
              LOWORD(v118) = v20;
              char v58 = -127;
              break;
            case 11458:
              __int16 v99 = -19486;
LABEL_1468:
              LOWORD(v118) = v99;
              char v58 = -125;
              break;
            case 11460:
              __int16 v100 = -19486;
LABEL_1470:
              LOWORD(v118) = v100;
              char v58 = -123;
              break;
            case 11462:
              __int16 v101 = -19486;
LABEL_1472:
              LOWORD(v118) = v101;
              char v58 = -121;
              break;
            case 11464:
              __int16 v102 = -19486;
LABEL_1474:
              LOWORD(v118) = v102;
              char v58 = -119;
              break;
            case 11466:
              __int16 v79 = -19486;
LABEL_1476:
              LOWORD(v118) = v79;
              char v58 = -117;
              break;
            case 11468:
              __int16 v103 = -19486;
LABEL_1478:
              LOWORD(v118) = v103;
              char v58 = -115;
              break;
            case 11470:
              __int16 v98 = -19486;
LABEL_1480:
              LOWORD(v118) = v98;
              char v58 = -113;
              break;
            case 11472:
              __int16 v21 = -19486;
LABEL_1482:
              LOWORD(v118) = v21;
              char v58 = -111;
              break;
            case 11474:
              __int16 v23 = -19486;
LABEL_1484:
              LOWORD(v118) = v23;
              char v58 = -109;
              break;
            case 11476:
              __int16 v25 = -19486;
LABEL_1486:
              LOWORD(v118) = v25;
              char v58 = -107;
              break;
            case 11478:
              __int16 v27 = -19486;
LABEL_1488:
              LOWORD(v118) = v27;
              char v58 = -105;
              break;
            case 11480:
              __int16 v29 = -19486;
LABEL_1490:
              LOWORD(v118) = v29;
              char v58 = -103;
              break;
            case 11482:
              __int16 v31 = -19486;
LABEL_1492:
              LOWORD(v118) = v31;
              char v58 = -101;
              break;
            case 11484:
              __int16 v33 = -19486;
LABEL_1448:
              LOWORD(v118) = v33;
              char v58 = -99;
              break;
            case 11486:
              __int16 v35 = -19486;
LABEL_1450:
              LOWORD(v118) = v35;
              char v58 = -97;
              break;
            case 11488:
              __int16 v12 = -19486;
LABEL_1452:
              LOWORD(v118) = v12;
              char v58 = -95;
              break;
            case 11490:
              __int16 v18 = -19486;
LABEL_1454:
              LOWORD(v118) = v18;
              char v58 = -93;
              break;
            case 11499:
              __int16 v82 = -19486;
LABEL_1351:
              LOWORD(v118) = v82;
              char v58 = -84;
              break;
            case 11501:
              LOWORD(v118) = -19486;
              char v58 = -82;
              break;
            case 11506:
              __int16 v46 = -19486;
LABEL_1361:
              LOWORD(v118) = v46;
              char v58 = -77;
              break;
            default:
              switch(v117)
              {
                case 42786:
                  __int16 v18 = -25366;
                  goto LABEL_1454;
                case 42787:
                case 42789:
                case 42791:
                case 42793:
                case 42795:
                case 42797:
                case 42799:
                case 42800:
                case 42801:
                case 42803:
                case 42805:
                case 42807:
                case 42809:
                case 42811:
                case 42813:
                case 42815:
                case 42817:
                case 42819:
                case 42821:
                case 42823:
                case 42825:
                case 42827:
                case 42829:
                case 42831:
                case 42833:
                case 42835:
                case 42837:
                case 42839:
                case 42841:
                case 42843:
                case 42845:
                case 42847:
                case 42849:
                case 42851:
                case 42853:
                case 42855:
                case 42857:
                case 42859:
                case 42861:
                case 42863:
                case 42864:
                case 42865:
                case 42866:
                case 42867:
                case 42868:
                case 42869:
                case 42870:
                case 42871:
                case 42872:
                case 42874:
                case 42876:
                case 42879:
                case 42881:
                case 42883:
                case 42885:
                case 42887:
                case 42888:
                case 42889:
                case 42890:
                case 42892:
                case 42894:
                case 42895:
                case 42897:
                case 42899:
                case 42900:
                case 42901:
                case 42903:
                case 42905:
                case 42907:
                case 42909:
                case 42911:
                case 42913:
                case 42915:
                case 42917:
                case 42919:
                case 42921:
                case 42927:
                case 42933:
                  goto LABEL_161;
                case 42788:
                  __int16 v38 = -25366;
                  goto LABEL_1456;
                case 42790:
                  __int16 v40 = -25366;
                  goto LABEL_1458;
                case 42792:
                  __int16 v42 = -25366;
                  goto LABEL_1460;
                case 42794:
                  __int16 v81 = -25366;
                  goto LABEL_1462;
                case 42796:
                  __int16 v104 = -25366;
                  goto LABEL_1464;
                case 42798:
                  __int16 v105 = -25366;
                  goto LABEL_1394;
                case 42802:
                  __int16 v46 = -25366;
                  goto LABEL_1361;
                case 42804:
                  __int16 v48 = -25366;
                  goto LABEL_1432;
                case 42806:
                  __int16 v50 = -25366;
                  goto LABEL_1434;
                case 42808:
                  __int16 v52 = -25366;
                  goto LABEL_1400;
                case 42810:
                  __int16 v54 = -25366;
                  goto LABEL_1366;
                case 42812:
                  __int16 v56 = -25366;
                  goto LABEL_1368;
                case 42814:
                  __int16 v59 = -25366;
                  goto LABEL_1402;
                case 42816:
                  __int16 v20 = -25110;
                  goto LABEL_1466;
                case 42818:
                  __int16 v99 = -25110;
                  goto LABEL_1468;
                case 42820:
                  __int16 v100 = -25110;
                  goto LABEL_1470;
                case 42822:
                  __int16 v101 = -25110;
                  goto LABEL_1472;
                case 42824:
                  __int16 v102 = -25110;
                  goto LABEL_1474;
                case 42826:
                  __int16 v79 = -25110;
                  goto LABEL_1476;
                case 42828:
                  __int16 v103 = -25110;
                  goto LABEL_1478;
                case 42830:
                  __int16 v98 = -25110;
                  goto LABEL_1480;
                case 42832:
                  __int16 v21 = -25110;
                  goto LABEL_1482;
                case 42834:
                  __int16 v23 = -25110;
                  goto LABEL_1484;
                case 42836:
                  __int16 v25 = -25110;
                  goto LABEL_1486;
                case 42838:
                  __int16 v27 = -25110;
                  goto LABEL_1488;
                case 42840:
                  __int16 v29 = -25110;
                  goto LABEL_1490;
                case 42842:
                  __int16 v31 = -25110;
                  goto LABEL_1492;
                case 42844:
                  __int16 v33 = -25110;
                  goto LABEL_1448;
                case 42846:
                  __int16 v35 = -25110;
                  goto LABEL_1450;
                case 42848:
                  __int16 v12 = -25110;
                  goto LABEL_1452;
                case 42850:
                  __int16 v18 = -25110;
                  goto LABEL_1454;
                case 42852:
                  __int16 v38 = -25110;
                  goto LABEL_1456;
                case 42854:
                  __int16 v40 = -25110;
                  goto LABEL_1458;
                case 42856:
                  __int16 v42 = -25110;
                  goto LABEL_1460;
                case 42858:
                  __int16 v81 = -25110;
                  goto LABEL_1462;
                case 42860:
                  __int16 v104 = -25110;
                  goto LABEL_1464;
                case 42862:
                  __int16 v105 = -25110;
                  goto LABEL_1394;
                case 42873:
                  __int16 v53 = -25110;
                  goto LABEL_1396;
                case 42875:
                  __int16 v55 = -25110;
                  goto LABEL_1398;
                case 42877:
                  __int16 v52 = -18975;
                  goto LABEL_1400;
                case 42878:
                  __int16 v59 = -25110;
                  goto LABEL_1402;
                case 42880:
                  __int16 v20 = -24854;
                  goto LABEL_1466;
                case 42882:
                  __int16 v99 = -24854;
                  goto LABEL_1468;
                case 42884:
                  __int16 v100 = -24854;
                  goto LABEL_1470;
                case 42886:
                  __int16 v101 = -24854;
                  goto LABEL_1472;
                case 42891:
                  __int16 v96 = -24854;
                  goto LABEL_1408;
                case 42893:
                  __int16 v10 = -23095;
                  goto LABEL_147;
                case 42896:
                  __int16 v21 = -24854;
                  goto LABEL_1482;
                case 42898:
                  __int16 v23 = -24854;
                  goto LABEL_1484;
                case 42902:
                  __int16 v27 = -24854;
                  goto LABEL_1488;
                case 42904:
                  __int16 v29 = -24854;
                  goto LABEL_1490;
                case 42906:
                  __int16 v31 = -24854;
                  goto LABEL_1492;
                case 42908:
                  __int16 v33 = -24854;
                  goto LABEL_1448;
                case 42910:
                  __int16 v35 = -24854;
                  goto LABEL_1450;
                case 42912:
                  __int16 v12 = -24854;
                  goto LABEL_1452;
                case 42914:
                  __int16 v18 = -24854;
                  goto LABEL_1454;
                case 42916:
                  __int16 v38 = -24854;
                  goto LABEL_1456;
                case 42918:
                  __int16 v40 = -24854;
                  goto LABEL_1458;
                case 42920:
                  __int16 v42 = -24854;
                  goto LABEL_1460;
                case 42922:
                  __int16 v10 = -22839;
                  goto LABEL_147;
                case 42923:
                  __int16 v10 = -25399;
                  goto LABEL_147;
                case 42924:
                  __int16 v10 = -24119;
                  goto LABEL_147;
                case 42925:
                  __int16 v10 = -21303;
                  goto LABEL_147;
                case 42926:
                  __int16 v10 = -21815;
                  goto LABEL_147;
                case 42928:
                  __int16 v10 = -24886;
                  goto LABEL_147;
                case 42929:
                  __int16 v10 = -30774;
                  goto LABEL_147;
                case 42930:
                  __int16 v10 = -25142;
                  goto LABEL_147;
                case 42931:
                  __int16 v23 = -21014;
                  goto LABEL_1484;
                case 42932:
                  __int16 v48 = -24854;
                  goto LABEL_1432;
                case 42934:
                  __int16 v50 = -24854;
                  goto LABEL_1434;
                default:
                  switch(v117)
                  {
                    case 42560:
                      __int16 v20 = -26134;
                      goto LABEL_1466;
                    case 42562:
                      __int16 v99 = -26134;
                      goto LABEL_1468;
                    case 42564:
                      __int16 v100 = -26134;
                      goto LABEL_1470;
                    case 42566:
                      __int16 v101 = -26134;
                      goto LABEL_1472;
                    case 42568:
                      __int16 v102 = -26134;
                      goto LABEL_1474;
                    case 42570:
LABEL_160:
                      __int16 v79 = -26134;
                      goto LABEL_1476;
                    case 42572:
                      __int16 v103 = -26134;
                      goto LABEL_1478;
                    case 42574:
                      __int16 v98 = -26134;
                      goto LABEL_1480;
                    case 42576:
                      __int16 v21 = -26134;
                      goto LABEL_1482;
                    case 42578:
                      __int16 v23 = -26134;
                      goto LABEL_1484;
                    case 42580:
                      __int16 v25 = -26134;
                      goto LABEL_1486;
                    case 42582:
                      __int16 v27 = -26134;
                      goto LABEL_1488;
                    case 42584:
                      __int16 v29 = -26134;
                      goto LABEL_1490;
                    case 42586:
                      __int16 v31 = -26134;
                      goto LABEL_1492;
                    case 42588:
                      __int16 v33 = -26134;
                      goto LABEL_1448;
                    case 42590:
                      __int16 v35 = -26134;
                      goto LABEL_1450;
                    case 42592:
                      __int16 v12 = -26134;
                      goto LABEL_1452;
                    case 42594:
                      __int16 v18 = -26134;
                      goto LABEL_1454;
                    case 42596:
                      __int16 v38 = -26134;
                      goto LABEL_1456;
                    case 42598:
                      __int16 v40 = -26134;
                      goto LABEL_1458;
                    case 42600:
                      __int16 v42 = -26134;
                      goto LABEL_1460;
                    case 42602:
                      __int16 v81 = -26134;
                      goto LABEL_1462;
                    case 42604:
                      __int16 v104 = -26134;
                      goto LABEL_1464;
                    case 42624:
                      __int16 v20 = -25878;
                      goto LABEL_1466;
                    case 42626:
                      __int16 v99 = -25878;
                      goto LABEL_1468;
                    case 42628:
                      __int16 v100 = -25878;
                      goto LABEL_1470;
                    case 42630:
                      __int16 v101 = -25878;
                      goto LABEL_1472;
                    case 42632:
                      __int16 v102 = -25878;
                      goto LABEL_1474;
                    case 42634:
                      __int16 v79 = -25878;
                      goto LABEL_1476;
                    case 42636:
                      __int16 v103 = -25878;
                      goto LABEL_1478;
                    case 42638:
                      __int16 v98 = -25878;
                      goto LABEL_1480;
                    case 42640:
                      __int16 v21 = -25878;
                      goto LABEL_1482;
                    case 42642:
                      __int16 v23 = -25878;
                      goto LABEL_1484;
                    case 42644:
                      __int16 v25 = -25878;
                      goto LABEL_1486;
                    case 42646:
                      __int16 v27 = -25878;
                      goto LABEL_1488;
                    case 42648:
                      __int16 v29 = -25878;
                      goto LABEL_1490;
                    case 42650:
                      __int16 v31 = -25878;
                      goto LABEL_1492;
                    default:
                      goto LABEL_161;
                  }
              }
          }
LABEL_1493:
          BYTE2(v118) = v58;
          uint64_t v72 = v7;
          int v73 = 3;
          goto LABEL_1494;
        }
        if (v117 > 9397)
        {
          switch(v117)
          {
            case 9398:
              __int16 v13 = -27678;
              goto LABEL_1259;
            case 9399:
              __int16 v21 = -27678;
              goto LABEL_1482;
            case 9400:
              __int16 v22 = -27678;
              goto LABEL_1262;
            case 9401:
              __int16 v23 = -27678;
              goto LABEL_1484;
            case 9402:
              __int16 v24 = -27678;
              goto LABEL_1265;
            case 9403:
              __int16 v25 = -27678;
              goto LABEL_1486;
            case 9404:
              __int16 v26 = -27678;
              goto LABEL_1268;
            case 9405:
              __int16 v27 = -27678;
              goto LABEL_1488;
            case 9406:
              __int16 v28 = -27678;
              goto LABEL_1271;
            case 9407:
              __int16 v29 = -27678;
              goto LABEL_1490;
            case 9408:
              __int16 v30 = -27678;
              goto LABEL_1274;
            case 9409:
              __int16 v31 = -27678;
              goto LABEL_1492;
            case 9410:
              __int16 v32 = -27678;
              goto LABEL_1277;
            case 9411:
              __int16 v33 = -27678;
              goto LABEL_1448;
            case 9412:
              __int16 v34 = -27678;
              goto LABEL_1280;
            case 9413:
              __int16 v35 = -27678;
              goto LABEL_1450;
            case 9414:
              __int16 v11 = -27678;
LABEL_1079:
              LOWORD(v118) = v11;
              char v58 = -96;
              goto LABEL_1493;
            case 9415:
              __int16 v12 = -27678;
              goto LABEL_1452;
            case 9416:
              __int16 v36 = -27678;
LABEL_1082:
              LOWORD(v118) = v36;
              char v58 = -94;
              goto LABEL_1493;
            case 9417:
              __int16 v18 = -27678;
              goto LABEL_1454;
            case 9418:
              __int16 v37 = -27678;
LABEL_1085:
              LOWORD(v118) = v37;
              char v58 = -92;
              goto LABEL_1493;
            case 9419:
              __int16 v38 = -27678;
              goto LABEL_1456;
            case 9420:
              __int16 v39 = -27678;
LABEL_915:
              LOWORD(v118) = v39;
              char v58 = -90;
              goto LABEL_1493;
            case 9421:
              __int16 v40 = -27678;
              goto LABEL_1458;
            case 9422:
              __int16 v41 = -27678;
              goto LABEL_1286;
            case 9423:
              __int16 v42 = -27678;
              goto LABEL_1460;
            default:
              goto LABEL_161;
          }
        }
        if (v117 > 8497)
        {
          switch(v117)
          {
            case 8544:
              __int16 v16 = -31262;
              goto LABEL_666;
            case 8545:
              __int16 v44 = -31262;
              goto LABEL_1324;
            case 8546:
              __int16 v45 = -31262;
              goto LABEL_1219;
            case 8547:
              __int16 v46 = -31262;
              goto LABEL_1361;
            case 8548:
              __int16 v47 = -31262;
              goto LABEL_1222;
            case 8549:
              __int16 v48 = -31262;
              goto LABEL_1432;
            case 8550:
              __int16 v49 = -31262;
              goto LABEL_1296;
            case 8551:
              __int16 v50 = -31262;
              goto LABEL_1434;
            case 8552:
              __int16 v51 = -31262;
              goto LABEL_1227;
            case 8553:
              __int16 v52 = -31262;
              goto LABEL_1400;
            case 8554:
              __int16 v53 = -31262;
              goto LABEL_1396;
            case 8555:
              __int16 v54 = -31262;
              goto LABEL_1366;
            case 8556:
              __int16 v55 = -31262;
              goto LABEL_1398;
            case 8557:
              __int16 v56 = -31262;
              goto LABEL_1368;
            case 8558:
              __int16 v57 = -31262;
              goto LABEL_101;
            case 8559:
              __int16 v59 = -31262;
              goto LABEL_1402;
            case 8560:
            case 8561:
            case 8562:
            case 8563:
            case 8564:
            case 8565:
            case 8566:
            case 8567:
            case 8568:
            case 8569:
            case 8570:
            case 8571:
            case 8572:
            case 8573:
            case 8574:
            case 8575:
            case 8576:
            case 8577:
            case 8578:
              goto LABEL_161;
            case 8579:
              __int16 v60 = -31006;
              goto LABEL_1242;
            default:
              if (v117 != 8498) {
                goto LABEL_161;
              }
              __int16 v43 = -31262;
              break;
          }
LABEL_1256:
          LOWORD(v118) = v43;
          char v58 = -114;
          goto LABEL_1493;
        }
        switch(v117)
        {
          case 8486:
            __int16 v10 = -30257;
            goto LABEL_147;
          case 8490:
LABEL_58:
            char v14 = 107;
LABEL_1204:
            LOBYTE(v118) = v14;
LABEL_1205:
            uint64_t v72 = v7;
            int v73 = 1;
            goto LABEL_1494;
          case 8491:
LABEL_52:
            __int16 v10 = -23101;
            goto LABEL_147;
        }
LABEL_161:
        uint64_t result = cmark_utf8proc_encode_char(v117, v7);
      }
LABEL_1495:
      a2 += v9;
      BOOL v116 = __OFSUB__(v5, v9);
      v5 -= v9;
    }
    while (!((v5 < 0) ^ v116 | (v5 == 0)));
  }
  return result;
}

uint64_t cmark_utf8proc_is_space(unsigned int a1)
{
  uint64_t result = 1;
  if (a1 > 0x20 || ((1 << a1) & 0x100003600) == 0)
  {
    BOOL v3 = a1 == 8287 || a1 == 12288;
    int v4 = a1 == 8239 || v3;
    if (a1 - 0x2000 >= 0xB) {
      int v5 = v4;
    }
    else {
      int v5 = 1;
    }
    if (a1 == 5760) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = v5;
    }
    if (a1 == 160) {
      return 1;
    }
    else {
      return v6;
    }
  }
  return result;
}

BOOL cmark_utf8proc_is_punctuation(int a1)
{
  if (a1 > 127)
  {
    BOOL result = 1;
    if (a1 <= 1416)
    {
      if (a1 > 902)
      {
        if ((a1 - 1370) < 6 || a1 == 903) {
          return result;
        }
      }
      else if ((a1 - 161) <= 0x1E && ((1 << (a1 + 95)) & 0x44600441) != 0 || a1 == 894)
      {
        return result;
      }
    }
    else if (a1 <= 1522)
    {
      if ((a1 - 1417) <= 0x3D && ((1 << (a1 + 119)) & 0x24A0000000000003) != 0) {
        return result;
      }
    }
    else if ((a1 - 1523) <= 0x2C && ((1 << (a1 + 13)) & 0x190006C00003) != 0 {
           || (a1 - 1642) < 4
    }
           || a1 == 1748)
    {
      return result;
    }
  }
  else if (cmark_ispunct(a1))
  {
    return 1;
  }
  BOOL result = 1;
  if ((a1 - 2096) < 0xF || (a1 - 1792) < 0xE || (a1 - 2039) < 3) {
    return result;
  }
  if (a1 <= 2799)
  {
    if ((a1 - 2404) <= 0xC && ((1 << (a1 - 100)) & 0x1003) != 0 || a1 == 2142) {
      return result;
    }
  }
  else if ((a1 - 3663) <= 0xC && ((1 << (a1 - 79)) & 0x1801) != 0 || a1 == 2800 || a1 == 3572)
  {
    return result;
  }
  if (a1 == 3860 || (a1 - 3844) < 0xF) {
    return result;
  }
  if (a1 > 4169)
  {
    if ((a1 - 4170) < 6 || a1 == 4347) {
      return result;
    }
  }
  else if ((a1 - 4048) <= 0xA && ((1 << (a1 + 48)) & 0x61F) != 0 {
         || (a1 - 3898) < 4
  }
         || a1 == 3973)
  {
    return result;
  }
  if ((a1 - 4960) < 9) {
    return result;
  }
  if (a1 > 5940)
  {
    if ((a1 - 6100) <= 6 && a1 != 6103 || (a1 - 5941) < 2) {
      return result;
    }
  }
  else if ((a1 - 5741) <= 0x2F && ((1 << (a1 - 109)) & 0xC00000000003) != 0 {
         || (a1 - 5867) < 3
  }
         || a1 == 5120)
  {
    return result;
  }
  if ((a1 - 6144) >= 0xB && (a1 - 6468) >= 2 && (a1 - 6686) >= 2)
  {
    unsigned int v3 = a1 & 0xFFFFFFFC;
    if ((a1 & 0xFFFFFFFC) != 0x1BFC)
    {
      if (a1 <= 7001)
      {
        if ((a1 - 6816) <= 0xD && a1 != 6823) {
          return result;
        }
      }
      else if ((a1 - 7002) < 7 || (a1 - 7227) < 5 || (a1 - 7294) < 2)
      {
        return result;
      }
      int32x4_t v4 = vdupq_n_s32(a1);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_21C3B2DD0, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_21C3B2DC0)))) & 1) == 0&& (a1 & 0xFFFFFFF8) != 0x1CC0&& a1 != 7379&& ((a1 - 8317) > 0x11 || ((1 << (a1 - 125)) & 0x30003) == 0)&& v3 != 8968&& (a1 - 9001) >= 2&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_21C3B2DF0, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_21C3B2DE0)))) & 1) == 0&& v3 != 10712)
      {
        unsigned int v5 = a1 & 0xFFFFFFFE;
        if ((a1 & 0xFFFFFFFE) != 0x29FC
          && ((a1 - 11513) > 6 || a1 == 11517)
          && a1 != 11632
          && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_21C3B2E10, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_21C3B2E00)))) & 1) == 0&& (a1 - 12308) >= 0xC)
        {
          if (a1 > 42508)
          {
            if ((a1 - 42509) < 3 || a1 == 42611) {
              return result;
            }
            int v6 = 42622;
          }
          else if (a1 > 12538)
          {
            if ((a1 - 42238) < 2) {
              return result;
            }
            int v6 = 12539;
          }
          else
          {
            if (a1 == 12336 || a1 == 12349) {
              return result;
            }
            int v6 = 12448;
          }
          if (a1 != v6
            && (a1 - 42738) >= 6
            && v3 != 43124
            && v5 != 43214
            && (a1 - 43256) >= 3
            && ((a1 - 43310) > 0x31 || ((1 << (a1 - 46)) & 0x2000000000003) == 0)
            && (a1 - 43457) >= 0xD
            && v5 != 43486
            && (a1 - 65108) >= 0xE
            && (a1 - 65072) >= 0x23
            && (a1 - 65040) >= 0xA
            && v5 != 64830
            && a1 != 44011
            && v5 != 43760
            && v3 != 43612
            && v5 != 43742
            && ((a1 - 65281) > 9 || a1 == 65284)
            && ((a1 - 65123) > 8 || ((1 << (a1 - 99)) & 0x1A1) == 0)
            && v3 != 65292
            && ((a1 - 65311) > 0x3E || ((1 << (a1 - 31)) & 0x5000000170000003) == 0)
            && (a1 - 65306) >= 2
            && (a1 - 65375) >= 7)
          {
            if (a1 <= 66511)
            {
              if ((a1 - 65792) < 3) {
                return result;
              }
              unsigned __int16 v7 = 927;
            }
            else if (a1 <= 67670)
            {
              if (a1 == 66512) {
                return result;
              }
              unsigned __int16 v7 = 1391;
            }
            else
            {
              if (a1 == 67671 || a1 == 67871) {
                return result;
              }
              unsigned __int16 v7 = 2367;
            }
            if (a1 != (v7 | 0x10000) && (a1 - 68176) >= 9)
            {
              if (a1 > 68504)
              {
                if ((a1 - 69703) < 7 || (a1 - 68505) < 4 || (a1 - 69819) < 2) {
                  return result;
                }
              }
              else if ((a1 - 68336) < 7 || (a1 - 68409) < 7 || a1 == 68223)
              {
                return result;
              }
              if ((a1 - 69822) >= 4
                && v3 != 69952
                && v5 != 70004
                && (a1 - 70200) >= 6
                && ((a1 - 70085) > 8 || ((1 << (a1 + 59)) & 0x10F) == 0)
                && a1 != 70854
                && (a1 - 71105) >= 9
                && (a1 - 71233) >= 3)
              {
                if (a1 > 92916)
                {
                  if (((a1 - 92983) > 0xD || ((1 << (a1 - 55)) & 0x201F) == 0) && a1 != 92917) {
                    return a1 == 113823;
                  }
                }
                else if ((a1 - 74864) >= 5 && (a1 - 92782) >= 2)
                {
                  return a1 == 113823;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t cmark_render_commonmark(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  if ((a2 & 4) != 0) {
    a3 = 0;
  }
  return cmark_render(v5, (uint64_t)a1, a2, a3, (uint64_t)outc, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node);
}

uint64_t cmark_render_commonmark_with_mem(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if ((a2 & 4) != 0) {
    a3 = 0;
  }
  return cmark_render(a4, a1, a2, a3, (uint64_t)outc, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node);
}

_DWORD *outc(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(v9 + 20);
  BOOL v11 = __OFSUB__(v10, 1);
  int v12 = v10 - 1;
  if (v12 < 0 != v11)
  {
    BOOL v13 = 0;
    if (!a3) {
      goto LABEL_23;
    }
  }
  else
  {
    BOOL v13 = cmark_isdigit(*(unsigned char *)(*(void *)(v9 + 8) + v12));
    if (!a3) {
      goto LABEL_23;
    }
  }
  if (a4 > 127) {
    goto LABEL_23;
  }
  switch(a3)
  {
    case 3:
      if (((a4 - 60) > 0x24 || ((1 << (a4 - 60)) & 0x1000000005) == 0)
        && !cmark_isspace(a4)
        && ((a4 - 40) > 0x34 || ((1 << (a4 - 40)) & 0x10000000000003) == 0))
      {
        break;
      }
      if (cmark_isspace(a4))
      {
        snprintf(__str, 0x14uLL, "%%%2X", a4);
        BOOL result = cmark_strbuf_puts(*(_DWORD **)(a1 + 8), __str);
        int v15 = *(_DWORD *)(a1 + 24) + 3;
        goto LABEL_27;
      }
      goto LABEL_21;
    case 2:
      if ((a4 - 34) > 0x3E || ((1 << (a4 - 34)) & 0x4400000014000001) == 0) {
        break;
      }
LABEL_21:
      if (cmark_ispunct(a4))
      {
        cmark_render_ascii(a1, "\\"");
        break;
      }
      snprintf(__str, 0x14uLL, "&#%d;", a4);
      cmark_strbuf_puts(*(_DWORD **)(a1 + 8), __str);
      BOOL result = (_DWORD *)strlen(__str);
      int v15 = *(_DWORD *)(a1 + 24) + result;
LABEL_27:
      *(_DWORD *)(a1 + 24) = v15;
      return result;
    case 1:
      if (a4 >= 32 && ((a4 - 60) > 0x24 || ((1 << (a4 - 60)) & 0x1B80000005) == 0))
      {
        switch(a4)
        {
          case '!':
          case '#':
          case '*':
            goto LABEL_21;
          case '""':
          case '$':
          case '%':
          case '\'':
          case '(':
          case ')':
            goto LABEL_33;
          case '&':
            if (cmark_isalpha(a5)) {
              goto LABEL_21;
            }
            goto LABEL_35;
          default:
            if (a4 == 126) {
              goto LABEL_21;
            }
LABEL_33:
            if (a4 == 94 && a5 == 91) {
              goto LABEL_21;
            }
LABEL_35:
            if (*(unsigned char *)(a1 + 41))
            {
              switch(a4)
              {
                case ')':
                case '.':
                  if (!v13) {
                    goto LABEL_23;
                  }
                  goto LABEL_42;
                case '*':
                case ',':
                  goto LABEL_23;
                case '+':
                case '-':
                  goto LABEL_40;
                default:
                  if (a4 != 61) {
                    goto LABEL_23;
                  }
LABEL_40:
                  if (!v13) {
                    goto LABEL_21;
                  }
                  if (a4 != 46) {
                    goto LABEL_23;
                  }
LABEL_42:
                  if (a5 && !cmark_isspace(a5)) {
                    goto LABEL_23;
                  }
                  goto LABEL_21;
              }
            }
            break;
        }
        break;
      }
      goto LABEL_21;
  }
LABEL_23:

  return cmark_render_code_point(a1, a4);
}

uint64_t S_render_node(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  __int16 v102 = 0;
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = (a4 & 4) == 0;
  if (v7 < 1) {
    BOOL v8 = 0;
  }
  BOOL v9 = (a4 & 0x10) == 0 && v8;
  if (a3 == 2)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    if (v10 && *(unsigned __int16 *)(v10 + 100) == 32772)
    {
      LOBYTE(v10) = *(unsigned char *)(*(void *)(v10 + 40) + 165);
LABEL_15:
      *(unsigned char *)(a1 + 43) = v10;
    }
  }
  else if (*(unsigned __int16 *)(a2 + 100) == 32771)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    if (v10) {
      LOBYTE(v10) = *(unsigned __int16 *)(v10 + 100) == 32772 && *(unsigned char *)(*(void *)(v10 + 40) + 165) != 0;
    }
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a2 + 112);
  if (!v11 || (int v12 = *(void (**)(void))(v11 + 96)) == 0)
  {
    switch(*(_WORD *)(a2 + 100))
    {
      case 0xC001:
        BOOL v13 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        literal = cmark_node_get_literal(a2);
        uint64_t v15 = 1;
        v13(a1, a2, literal, v9, 1);
        return v15;
      case 0xC002:
        if ((a4 & 4) != 0) {
          goto LABEL_29;
        }
        if (!(v7 | a4 & 0x10) && !*(unsigned char *)(a1 + 42)) {
          goto LABEL_140;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, BOOL, void))(a1 + 72))(a1, a2, " ", v9, 0);
        return 1;
      case 0xC003:
        if ((a4 & 4) == 0) {
LABEL_29:
        }
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "  ", 0, 0);
LABEL_140:
        (*(void (**)(uint64_t))(a1 + 56))(a1);
        return 1;
      case 0xC004:
        __int16 v16 = cmark_node_get_literal(a2);
        size_t v17 = strlen(v16);
        uint64_t v18 = 0;
        int v19 = 0;
        if (v17 + 1 > 1) {
          uint64_t v20 = v17 + 1;
        }
        else {
          uint64_t v20 = 1;
        }
        int v21 = 1;
        do
        {
          if ((v19 - 1) >= 0x1F) {
            int v22 = 0;
          }
          else {
            int v22 = 1 << v19;
          }
          int v23 = v22 | v21;
          if (v16[v18] == 96)
          {
            ++v19;
          }
          else
          {
            int v21 = v23;
            int v19 = 0;
          }
          ++v18;
        }
        while (v20 != v18);
        if (v21)
        {
          unint64_t v24 = 0;
          do
          {
            unsigned int v62 = v21;
            unint64_t v63 = v24++;
            if (v63 > 0x1E) {
              break;
            }
            int v21 = v62 >> 1;
          }
          while ((v62 & 2) != 0);
        }
        else
        {
          LODWORD(v24) = 0;
        }
        v65 = !v17 || (int v64 = *(unsigned __int8 *)v16, v64 == 96) || v64 == 32 || (v16[v17 - 1] & 0xBF) == 32;
        if (v24)
        {
          int v84 = v24;
          do
          {
            --v84;
          }
          while (v84);
        }
        if (v65) {
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " ", 0, 0);
        }
        __int16 v85 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, void))(a1 + 72);
        __int16 v86 = cmark_node_get_literal(a2);
        v85(a1, a2, v86, v9, 0);
        if (v65) {
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " ", 0, 0);
        }
        if (!v24) {
          return 1;
        }
        do
        {
          uint64_t v15 = 1;
          LODWORD(v24) = v24 - 1;
        }
        while (v24);
        return v15;
      case 0xC005:
        __int16 v25 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        __int16 v26 = cmark_node_get_literal(a2);
        goto LABEL_122;
      case 0xC006:
        __int16 v25 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        if (a3 == 2) {
          __int16 v26 = cmark_node_get_on_enter(a2);
        }
        else {
          __int16 v26 = cmark_node_get_on_exit(a2);
        }
LABEL_122:
        v25(a1, a2, v26, 0, 0);
        return 1;
      case 0xC007:
        uint64_t v27 = *(void *)(a2 + 40);
        if (v27 && *(unsigned __int16 *)(v27 + 100) == 49159 && !*(void *)(a2 + 24) && !*(void *)(a2 + 32)) {
          __int16 v28 = "_";
        }
        else {
          __int16 v28 = "*";
        }
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, v28, 0, 0);
        return 1;
      case 0xC008:
        uint64_t v29 = *(void *)(a2 + 40);
        if (!v29 || *(unsigned __int16 *)(v29 + 100) != 49160) {
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "**", 0, 0);
        }
        return 1;
      case 0xC009:
        if (!*(_DWORD *)(a2 + 152)) {
          goto LABEL_58;
        }
        if (!_scan_at((uint64_t (*)(uint64_t))_scan_scheme, (uint64_t *)(a2 + 144), 0)) {
          goto LABEL_58;
        }
        if (*(int *)(a2 + 168) > 0) {
          goto LABEL_58;
        }
        uint64_t v89 = *(void *)(a2 + 48);
        if (!v89) {
          goto LABEL_58;
        }
        cmark_consolidate_text_nodes(*(void **)(a2 + 48));
        __int16 v90 = *(const char **)(a2 + 144);
        int v91 = *(_DWORD *)(a2 + 152);
        int v92 = strncmp(v90, "mailto:", 7uLL);
        int v93 = v91 - 7;
        if (v92) {
          int v93 = v91;
        }
        if (v93 != *(_DWORD *)(v89 + 152)) {
          goto LABEL_58;
        }
        uint64_t v94 = 7;
        if (v92) {
          uint64_t v94 = 0;
        }
        if (strncmp(&v90[v94], *(const char **)(v89 + 144), v93))
        {
LABEL_58:
          __int16 v30 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
          if (a3 == 2)
          {
            __int16 v31 = "[";
            goto LABEL_145;
          }
          v30(a1, a2, "](", 0, 0);
          __int16 v77 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72);
          url = cmark_node_get_url(a2);
          v77(a1, a2, url, 0, 3);
          title = cmark_node_get_title(a2);
          if (*title)
          {
            __int16 v80 = title;
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " \"", 0, 0);
            (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, v80, 0, 2);
            goto LABEL_143;
          }
          goto LABEL_144;
        }
        if (a3 != 2) {
          return 1;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "<", 0, 0);
        __int16 v95 = cmark_node_get_url(a2);
        int v96 = strncmp(v95, "mailto:", 7uLL);
        __int16 v97 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        __int16 v98 = cmark_node_get_url(a2);
        __int16 v99 = v98;
        if (!v96) {
          __int16 v99 = v98 + 7;
        }
        v97(a1, a2, v99, 0, 0);
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ">", 0, 0);
        return 0;
      case 0xC00A:
        __int16 v30 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 == 2)
        {
          __int16 v31 = "![";
          goto LABEL_145;
        }
        v30(a1, a2, "](", 0, 0);
        __int16 v66 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72);
        __int16 v67 = cmark_node_get_url(a2);
        v66(a1, a2, v67, 0, 3);
        __int16 v68 = cmark_node_get_title(a2);
        if (*v68)
        {
          __int16 v69 = v68;
          (*(void (**)(uint64_t, uint64_t, const char *, BOOL, void))(a1 + 72))(a1, a2, " \"", v9, 0);
          (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, v69, 0, 2);
LABEL_143:
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\"", 0, 0);
        }
        goto LABEL_144;
      case 0xC00B:
        if (a3 != 2) {
          return 1;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "[^", 0, 0);
        uint64_t v15 = 1;
        __int16 v32 = (void *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(*(void *)(a2 + 136) + 152) + 1, 1);
        memmove(v32, *(const void **)(*(void *)(a2 + 136) + 144), *(int *)(*(void *)(a2 + 136) + 152));
        (*(void (**)(uint64_t, uint64_t, void *, void, void))(a1 + 72))(a1, a2, v32, 0, 0);
        (*(void (**)(void *))(*(void *)a1 + 16))(v32);
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "]", 0, 0);
        return v15;
      case 0xC00C:
        __int16 v30 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 == 2)
        {
          __int16 v31 = "^[";
        }
        else
        {
          v30(a1, a2, "](", 0, 0);
          int v70 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
          attributes = cmark_node_get_attributes(a2);
          v70(a1, a2, attributes, 0, 0);
LABEL_144:
          __int16 v30 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
          __int16 v31 = ")";
        }
LABEL_145:
        v30(a1, a2, v31, 0, 0);
        return 1;
      default:
        uint64_t v15 = 1;
        switch(*(_WORD *)(a2 + 100))
        {
          case 0x8001:
            return v15;
          case 0x8002:
            if (a3 == 2)
            {
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "> ", 0, 0);
              uint64_t v15 = 1;
              *(unsigned char *)(a1 + 41) = 1;
              cmark_strbuf_puts(*(_DWORD **)(a1 + 16), "> ");
              return v15;
            }
            uint64_t v60 = *(void *)(a1 + 16);
            int v61 = *(_DWORD *)(v60 + 20) - 2;
            goto LABEL_114;
          case 0x8003:
            if (a3 == 2) {
              return 1;
            }
            uint64_t v33 = *(void *)(a2 + 24);
            if (!v33) {
              return 1;
            }
            int v34 = *(unsigned __int16 *)(v33 + 100);
            if (v34 != 32773 && v34 != 32771) {
              return 1;
            }
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "<!-- end list -->", 0, 0);
            goto LABEL_137;
          case 0x8004:
            if (cmark_node_get_list_type(*(void *)(a2 + 40)) == 1)
            {
              int v35 = 4;
            }
            else
            {
              int item_index = cmark_node_get_item_index(a2);
              int list_delim = cmark_node_get_list_delim(*(void *)(a2 + 40));
              __int16 v74 = ".";
              if (list_delim == 2) {
                __int16 v74 = ")";
              }
              __int16 v75 = " ";
              if (item_index < 10) {
                __int16 v75 = "  ";
              }
              snprintf(__str, 0x14uLL, "%d%s%s", item_index, v74, v75);
              int v35 = strlen(__str);
            }
            if (a3 != 2)
            {
              cmark_strbuf_truncate(*(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 16) + 20) - v35);
              goto LABEL_140;
            }
            if (cmark_node_get_list_type(*(void *)(a2 + 40)) == 1) {
              __int16 v76 = "  - ";
            }
            else {
              __int16 v76 = __str;
            }
            (*(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72))(a1, a2, v76, 0, 0);
            uint64_t v15 = 1;
            for (*(unsigned char *)(a1 + 41) = 1; v35; uint64_t v15 = 1)
            {
              --v35;
              cmark_strbuf_putc(*(void *)(a1 + 16), 32);
            }
            return v15;
          case 0x8005:
            if (!*(void *)(a2 + 32) && (uint64_t v82 = *(void *)(a2 + 40)) != 0 && *(unsigned __int16 *)(v82 + 100) == 32772)
            {
              char v36 = 1;
            }
            else
            {
              (*(void (**)(uint64_t))(a1 + 64))(a1);
              char v36 = 0;
            }
            fence_info = cmark_node_get_fence_info(a2);
            int v38 = *fence_info;
            if (strchr(fence_info, 96)) {
              char v39 = 126;
            }
            else {
              char v39 = 96;
            }
            LOBYTE(v102) = v39;
            __int16 v40 = cmark_node_get_literal(a2);
            size_t v41 = strlen(v40);
            if (v38) {
              goto LABEL_81;
            }
            size_t v42 = v41;
            if (v41 < 3 || cmark_isspace(*v40)) {
              goto LABEL_81;
            }
            __int16 v87 = &v40[v42];
            if (cmark_isspace(*(v87 - 1)))
            {
              if (cmark_isspace(*(v87 - 2))) {
                char v88 = 1;
              }
              else {
                char v88 = v36;
              }
              if ((v88 & 1) == 0) {
                goto LABEL_189;
              }
            }
            else if ((v36 & 1) == 0)
            {
LABEL_189:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "    ", 0, 0);
              cmark_strbuf_puts(*(_DWORD **)(a1 + 16), "    ");
              __int16 v100 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
              __int16 v101 = cmark_node_get_literal(a2);
              v100(a1, a2, v101, 0, 0);
              uint64_t v60 = *(void *)(a1 + 16);
              int v61 = *(_DWORD *)(v60 + 20) - 4;
LABEL_114:
              cmark_strbuf_truncate(v60, v61);
LABEL_137:
              (*(void (**)(uint64_t))(a1 + 64))(a1);
              return 1;
            }
LABEL_81:
            size_t v43 = strlen(v40);
            signed int v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 1;
            if (v43 + 1 > 1) {
              uint64_t v46 = v43 + 1;
            }
            do
            {
              int v48 = *(unsigned __int8 *)v40++;
              int v47 = v48;
              if (v44 <= (int)v45) {
                unsigned int v49 = v45;
              }
              else {
                unsigned int v49 = v44;
              }
              if (v47 == 96)
              {
                ++v44;
              }
              else
              {
                unsigned int v45 = v49;
                signed int v44 = 0;
              }
              --v46;
            }
            while (v46);
            if (v45 <= 2) {
              unsigned int v50 = 2;
            }
            else {
              unsigned int v50 = v45;
            }
            if (v50 <= 0x7FFFFFFE)
            {
              unsigned int v51 = v50 + 1;
              do
              {
                (*(void (**)(uint64_t, uint64_t, __int16 *, void, void))(a1 + 72))(a1, a2, &v102, 0, 0);
                --v51;
              }
              while (v51);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " ", 0, 0);
            (*(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72))(a1, a2, fence_info, 0, 0);
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            __int16 v52 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            __int16 v53 = cmark_node_get_literal(a2);
            v52(a1, a2, v53, 0, 0);
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            if (v50 <= 0x7FFFFFFE)
            {
              unsigned int v54 = v50 + 1;
              do
              {
                (*(void (**)(uint64_t, uint64_t, __int16 *, void, void))(a1 + 72))(a1, a2, &v102, 0, 0);
                --v54;
              }
              while (v54);
            }
            goto LABEL_137;
          case 0x8006:
            (*(void (**)(uint64_t))(a1 + 64))(a1);
            __int16 v55 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            __int16 v56 = cmark_node_get_literal(a2);
            goto LABEL_135;
          case 0x8007:
            (*(void (**)(uint64_t))(a1 + 64))(a1);
            __int16 v55 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            if (a3 == 2) {
              __int16 v56 = cmark_node_get_on_enter(a2);
            }
            else {
              __int16 v56 = cmark_node_get_on_exit(a2);
            }
LABEL_135:
            v55(a1, a2, v56, 0, 0);
            goto LABEL_137;
          case 0x8008:
            if (a3 == 2) {
              return 1;
            }
            goto LABEL_137;
          case 0x8009:
            if (a3 != 2)
            {
              *(unsigned char *)(a1 + 42) = 0;
              goto LABEL_137;
            }
            int heading_level = cmark_node_get_heading_level(a2);
            if (heading_level >= 1)
            {
              unsigned int v58 = heading_level + 1;
              do
              {
                (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "#", 0, 0);
                --v58;
              }
              while (v58 > 1);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " ", 0, 0);
            *(_WORD *)(a1 + 41) = 257;
            return 1;
          case 0x800A:
            (*(void (**)(uint64_t))(a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "-----", 0, 0);
            goto LABEL_137;
          case 0x800B:
            if (a3 == 2)
            {
              ++*(_DWORD *)(a1 + 80);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "[^", 0, 0);
              uint64_t v15 = 1;
              __int16 v59 = (void *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a2 + 152) + 1, 1);
              memmove(v59, *(const void **)(a2 + 144), *(int *)(a2 + 152));
              (*(void (**)(uint64_t, uint64_t, void *, void, void))(a1 + 72))(a1, a2, v59, 0, 0);
              (*(void (**)(void *))(*(void *)a1 + 16))(v59);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "]:\n", 0, 0);
              cmark_strbuf_puts(*(_DWORD **)(a1 + 16), "    ");
              return v15;
            }
            cmark_strbuf_truncate(*(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 16) + 20) - 4);
            return 1;
          default:
            S_render_node_cold_1();
        }
    }
  }
  v12();
  return 1;
}

uint64_t houdini_escape_html0(_DWORD *a1, uint64_t a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = v8;
      while (1)
      {
        uint64_t v11 = *(unsigned __int8 *)(a2 + v10);
        int v12 = HTML_ESCAPE_TABLE[v11];
        if (HTML_ESCAPE_TABLE[v11]) {
          break;
        }
        if (++v10 >= v9)
        {
          uint64_t v13 = 0;
          goto LABEL_8;
        }
      }
      uint64_t v13 = HTML_ESCAPE_TABLE[v11];
LABEL_8:
      if (v8 < (int)v10) {
        cmark_strbuf_put(a1, (const void *)(a2 + v8), v10 - v8);
      }
      if (!v12) {
        return 1;
      }
      int v14 = *(unsigned __int8 *)(a2 + (int)v10);
      if (v14 == 47)
      {
        if (a4) {
          goto LABEL_17;
        }
      }
      else if (a4 || v14 != 39)
      {
LABEL_17:
        cmark_strbuf_puts(a1, (char *)*(&HTML_ESCAPES + v13));
        goto LABEL_18;
      }
      cmark_strbuf_putc((uint64_t)a1, v14);
LABEL_18:
      int v8 = v10 + 1;
    }
    while ((int)v10 + 1 < a3);
  }
  return 1;
}

uint64_t houdini_escape_html(_DWORD *a1, uint64_t a2, int a3)
{
  return 1;
}

uint64_t cmark_version()
{
  return 1900544;
}

const char *cmark_version_string()
{
  return "0.29.0.gfm.0";
}

uint64_t cmark_markdown_to_html(unsigned char *a1, unint64_t a2, int a3)
{
  int32x4_t v4 = (uint64_t (***)(uint64_t, uint64_t))cmark_parse_document(a1, a2, a3);
  uint64_t v5 = cmark_render_html(v4, a3, 0);
  cmark_node_free(v4);
  return v5;
}

uint64_t cmark_render_html(uint64_t (***a1)(uint64_t, uint64_t), int a2, void *a3)
{
  return cmark_render_html_with_mem((uint64_t)a1, a2, a3, *a1);
}

uint64_t cmark_render_html_with_mem(uint64_t a1, int a2, void *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  v97[0] = a4;
  v97[1] = &cmark_strbuf__initbuf;
  v97[2] = 0;
  long long v95 = 0u;
  long long v96 = 0u;
  uint64_t v94 = v97;
  uint64_t v7 = cmark_iter_new(a1);
  if (a3)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = a3[1];
      if (*(void *)(v9 + 144))
      {
        int v8 = cmark_llist_append(a4, v8, v9);
        *((void *)&v95 + 1) = v8;
      }
      a3 = (void *)*a3;
    }
    while (a3);
  }
  int v10 = cmark_iter_next(v7);
  if (v10 != 1)
  {
    int v13 = v10;
    int v93 = a2;
    do
    {
      uint64_t node = cmark_iter_get_node(v7);
      uint64_t v15 = node;
      strcpy(__s, "<h0");
      strcpy(v98, "</h0");
      __int16 v16 = v94;
      if ((void)v95 == node)
      {
        *(void *)&long long v95 = 0;
      }
      else if ((void)v95)
      {
        unsigned int v17 = *(unsigned __int16 *)(node + 100) - 49153;
        if (v17 <= 4)
        {
          if (((1 << v17) & 0x19) == 0)
          {
LABEL_23:
            uint64_t v20 = v94;
            char v21 = 32;
LABEL_24:
            cmark_strbuf_putc((uint64_t)v20, v21);
            goto LABEL_181;
          }
LABEL_15:
          houdini_escape_html0(v94, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152), 0);
        }
        goto LABEL_181;
      }
      uint64_t v18 = *(void *)(node + 112);
      if (!v18 || (int v19 = *(void (**)(void))(v18 + 136)) == 0)
      {
        switch(*(_WORD *)(v15 + 100))
        {
          case 0xC001:
            goto LABEL_15;
          case 0xC002:
            if ((a2 & 4) != 0) {
              goto LABEL_32;
            }
            if ((a2 & 0x10) != 0) {
              goto LABEL_23;
            }
            goto LABEL_192;
          case 0xC003:
LABEL_32:
            __int16 v28 = v94;
            uint64_t v29 = "<br />\n";
            goto LABEL_180;
          case 0xC004:
            cmark_strbuf_puts(v94, "<code>");
            houdini_escape_html0(v16, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152), 0);
            __int16 v28 = v16;
            uint64_t v29 = "</code>";
            goto LABEL_180;
          case 0xC005:
            if ((a2 & 0x20000) == 0)
            {
              __int16 v28 = v94;
              uint64_t v29 = "<!-- raw HTML omitted -->";
              goto LABEL_180;
            }
            unint64_t v63 = (void *)&v95 + 1;
            while (1)
            {
              unint64_t v63 = (void *)*v63;
              if (!v63) {
                break;
              }
              if (!(*(unsigned int (**)(void))(v63[1] + 144))())
              {
                cmark_strbuf_puts(v16, "&lt;");
                int v64 = (const void *)(*(void *)(v15 + 144) + 1);
                int v65 = *(_DWORD *)(v15 + 152) - 1;
                goto LABEL_164;
              }
            }
            int v64 = *(const void **)(v15 + 144);
            int v65 = *(_DWORD *)(v15 + 152);
LABEL_164:
            cmark_strbuf_put(v16, v64, v65);
            goto LABEL_181;
          case 0xC006:
            if (v13 == 2)
            {
              __int16 v30 = *(const void **)(v15 + 144);
              int v31 = *(_DWORD *)(v15 + 152);
            }
            else
            {
              __int16 v30 = *(const void **)(v15 + 160);
              int v31 = *(_DWORD *)(v15 + 168);
            }
            cmark_strbuf_put(v94, v30, v31);
            goto LABEL_181;
          case 0xC007:
            __int16 v28 = v94;
            if (v13 == 2) {
              uint64_t v29 = "<em>";
            }
            else {
              uint64_t v29 = "</em>";
            }
            goto LABEL_180;
          case 0xC008:
            uint64_t v32 = *(void *)(v15 + 40);
            if (v32 && *(unsigned __int16 *)(v32 + 100) == 49160) {
              goto LABEL_181;
            }
            __int16 v28 = v94;
            if (v13 == 2) {
              uint64_t v29 = "<strong>";
            }
            else {
              uint64_t v29 = "</strong>";
            }
            goto LABEL_180;
          case 0xC009:
            if (v13 == 2)
            {
              cmark_strbuf_puts(v94, "<a href=\"");
              if ((a2 & 0x20000) != 0
                || !_scan_at((uint64_t (*)(uint64_t))_scan_dangerous_url, (uint64_t *)(v15 + 144), 0))
              {
                houdini_escape_href(v16, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152));
              }
              if (*(_DWORD *)(v15 + 168))
              {
                cmark_strbuf_puts(v16, "\" title=\"");
                houdini_escape_html0(v16, *(void *)(v15 + 160), *(_DWORD *)(v15 + 168), 0);
              }
              __int16 v28 = v16;
              uint64_t v29 = "\">";
            }
            else
            {
              __int16 v28 = v94;
              uint64_t v29 = "</a>";
            }
            goto LABEL_180;
          case 0xC00A:
            if (v13 == 2)
            {
              cmark_strbuf_puts(v94, "<img src=\"");
              if ((a2 & 0x20000) != 0
                || !_scan_at((uint64_t (*)(uint64_t))_scan_dangerous_url, (uint64_t *)(v15 + 144), 0))
              {
                houdini_escape_href(v16, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152));
              }
              cmark_strbuf_puts(v16, "\" alt=\"");
              *(void *)&long long v95 = v15;
            }
            else
            {
              if (*(_DWORD *)(v15 + 168))
              {
                cmark_strbuf_puts(v94, "\" title=\"");
                houdini_escape_html0(v16, *(void *)(v15 + 160), *(_DWORD *)(v15 + 168), 0);
              }
              __int16 v28 = v16;
              uint64_t v29 = "\" />";
LABEL_180:
              cmark_strbuf_puts(v28, v29);
            }
            goto LABEL_181;
          case 0xC00B:
            if (v13 != 2) {
              goto LABEL_181;
            }
            cmark_strbuf_puts(v94, "<sup class=\"footnote-ref\"><a href=\"#fn-");
            houdini_escape_href(v16, *(void *)(*(void *)(v15 + 136) + 144), *(_DWORD *)(*(void *)(v15 + 136) + 152));
            cmark_strbuf_puts(v16, "\" id=\"fnref-");
            houdini_escape_href(v16, *(void *)(*(void *)(v15 + 136) + 144), *(_DWORD *)(*(void *)(v15 + 136) + 152));
            if (*(int *)(v15 + 128) >= 2)
            {
              snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(v15 + 128));
              cmark_strbuf_puts(v16, "-");
              cmark_strbuf_puts(v16, __str);
            }
            cmark_strbuf_puts(v16, "\" data-footnote-ref>");
            houdini_escape_href(v16, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152));
            __int16 v28 = v16;
            uint64_t v29 = "</a></sup>";
            goto LABEL_180;
          case 0xC00C:
            goto LABEL_181;
          default:
            switch(*(_WORD *)(v15 + 100))
            {
              case 0x8001:
                goto LABEL_181;
              case 0x8002:
                uint64_t v22 = (int)v94[5];
                if (v22 && *(unsigned char *)(v22 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                if (v13 != 2)
                {
                  __int16 v28 = v16;
                  uint64_t v29 = "</blockquote>\n";
                  goto LABEL_180;
                }
                cmark_strbuf_puts(v16, "<blockquote");
                if ((a2 & 2) == 0) {
                  goto LABEL_151;
                }
                start_int line = cmark_node_get_start_line(v15);
                start_int column = cmark_node_get_start_column(v15);
                end_int line = cmark_node_get_end_line(v15);
                end_int column = cmark_node_get_end_column(v15);
                int v87 = end_line;
                a2 = v93;
                snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", start_line, start_column, v87, end_column);
                uint64_t v27 = __str;
                goto LABEL_150;
              case 0x8003:
                int v33 = *(_DWORD *)(v15 + 144);
                if (v13 != 2)
                {
                  if (v33 == 1) {
                    uint64_t v29 = "</ul>\n";
                  }
                  else {
                    uint64_t v29 = "</ol>\n";
                  }
                  __int16 v28 = v94;
                  goto LABEL_180;
                }
                int v34 = *(_DWORD *)(v15 + 156);
                uint64_t v35 = (int)v94[5];
                if (v35 && *(unsigned char *)(v35 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                if (v33 == 1)
                {
                  char v36 = v16;
                  __int16 v37 = "<ul";
                }
                else if (v34 == 1)
                {
                  char v36 = v16;
                  __int16 v37 = "<ol";
                }
                else
                {
                  snprintf(v100, 0x64uLL, "<ol start=\"%d\"", v34);
                  __int16 v37 = v100;
                  char v36 = v16;
                }
                cmark_strbuf_puts(v36, v37);
                if ((a2 & 2) != 0)
                {
                  int v83 = cmark_node_get_start_line(v15);
                  int v84 = cmark_node_get_start_column(v15);
                  int v85 = cmark_node_get_end_line(v15);
                  int v86 = cmark_node_get_end_column(v15);
                  int v92 = v85;
                  a2 = v93;
                  snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v83, v84, v92, v86);
                  cmark_strbuf_puts(v16, __str);
                }
                cmark_strbuf_puts(v16, ">\n");
                goto LABEL_181;
              case 0x8004:
                if (v13 != 2) {
                  goto LABEL_154;
                }
                uint64_t v38 = (int)v94[5];
                if (v38 && *(unsigned char *)(v38 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                char v39 = v16;
                __int16 v40 = "<li";
                goto LABEL_107;
              case 0x8005:
                uint64_t v41 = (int)v94[5];
                if (v41 && *(unsigned char *)(v41 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                int v42 = *(_DWORD *)(v15 + 152);
                if (v42)
                {
                  if (v42 < 1)
                  {
                    LODWORD(v43) = 0;
                  }
                  else
                  {
                    uint64_t v43 = 0;
                    do
                    {
                      if (cmark_isspace(*(unsigned char *)(*(void *)(v15 + 144) + v43))) {
                        break;
                      }
                      ++v43;
                    }
                    while (v43 < *(int *)(v15 + 152));
                  }
                  cmark_strbuf_puts(v16, "<pre");
                  if ((a2 & 2) != 0)
                  {
                    int v78 = cmark_node_get_start_line(v15);
                    int v79 = cmark_node_get_start_column(v15);
                    int v80 = cmark_node_get_end_line(v15);
                    int v81 = cmark_node_get_end_column(v15);
                    int v91 = v80;
                    a2 = v93;
                    snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v78, v79, v91, v81);
                    cmark_strbuf_puts(v16, __str);
                  }
                  if ((a2 & 0x800) != 0)
                  {
                    cmark_strbuf_puts(v16, " lang=\"");
                    houdini_escape_html0(v16, *(void *)(v15 + 144), v43, 0);
                    if ((a2 & 0x10000) != 0)
                    {
                      __int16 v77 = "\"><code>";
                      if ((int)v43 >= *(_DWORD *)(v15 + 152)) {
                        goto LABEL_179;
                      }
                      cmark_strbuf_puts(v16, "\" data-meta=\"");
                      houdini_escape_html0(v16, *(void *)(v15 + 144) + v43 + 1, *(_DWORD *)(v15 + 152) + ~v43, 0);
                    }
                    __int16 v77 = "\"><code>";
                  }
                  else
                  {
                    cmark_strbuf_puts(v16, "><code class=\"language-");
                    houdini_escape_html0(v16, *(void *)(v15 + 144), v43, 0);
                    if ((a2 & 0x10000) != 0)
                    {
                      __int16 v77 = "\">";
                      if ((int)v43 >= *(_DWORD *)(v15 + 152)) {
                        goto LABEL_179;
                      }
                      cmark_strbuf_puts(v16, "\" data-meta=\"");
                      houdini_escape_html0(v16, *(void *)(v15 + 144) + v43 + 1, *(_DWORD *)(v15 + 152) + ~v43, 0);
                    }
                    __int16 v77 = "\">";
                  }
                }
                else
                {
                  cmark_strbuf_puts(v16, "<pre");
                  if ((a2 & 2) != 0)
                  {
                    int v73 = cmark_node_get_start_line(v15);
                    int v74 = cmark_node_get_start_column(v15);
                    int v75 = cmark_node_get_end_line(v15);
                    int v76 = cmark_node_get_end_column(v15);
                    int v90 = v75;
                    a2 = v93;
                    snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v73, v74, v90, v76);
                    cmark_strbuf_puts(v16, __str);
                  }
                  __int16 v77 = "><code>";
                }
LABEL_179:
                cmark_strbuf_puts(v16, v77);
                houdini_escape_html0(v16, *(void *)(v15 + 160), *(_DWORD *)(v15 + 168), 0);
                __int16 v28 = v16;
                uint64_t v29 = "</code></pre>\n";
                goto LABEL_180;
              case 0x8006:
                uint64_t v44 = (int)v94[5];
                if (v44 && *(unsigned char *)(v44 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                if ((a2 & 0x20000) == 0)
                {
                  cmark_strbuf_puts(v16, "<!-- raw HTML omitted -->");
                  goto LABEL_190;
                }
                __int16 v66 = *(char **)(v15 + 144);
                size_t v67 = *(int *)(v15 + 152);
                if (!*((void *)&v95 + 1))
                {
                  uint64_t v82 = v16;
                  goto LABEL_189;
                }
                if (!v67) {
                  goto LABEL_190;
                }
                __int16 v68 = v94;
                while (2)
                {
                  __int16 v69 = (char *)memchr(v66, 60, v67);
                  if (v69)
                  {
                    int v70 = v69;
                    int64_t v71 = v69 - v66;
                    if (v69 != v66)
                    {
                      cmark_strbuf_put(v68, v66, v71);
                      v67 -= v71;
                      __int16 v66 = v70;
                    }
                    uint64_t v72 = (void *)&v95 + 1;
                    a2 = v93;
                    while (1)
                    {
                      uint64_t v72 = (void *)*v72;
                      if (!v72) {
                        break;
                      }
                      if (!(*(unsigned int (**)(void))(v72[1] + 144))())
                      {
                        cmark_strbuf_puts(v68, "&lt;");
                        goto LABEL_147;
                      }
                    }
                    cmark_strbuf_putc((uint64_t)v68, 60);
LABEL_147:
                    ++v66;
                    if (!--v67) {
                      goto LABEL_190;
                    }
                    continue;
                  }
                  break;
                }
                uint64_t v82 = v68;
LABEL_189:
                cmark_strbuf_put(v82, v66, v67);
LABEL_190:
                uint64_t v48 = (int)v16[5];
                if (!v48) {
                  goto LABEL_181;
                }
LABEL_191:
                if (*(unsigned char *)(v48 + *((void *)v16 + 1) - 1) == 10) {
                  goto LABEL_181;
                }
LABEL_192:
                uint64_t v20 = v16;
                char v21 = 10;
                break;
              case 0x8007:
                uint64_t v45 = (int)v94[5];
                if (v45 && *(unsigned char *)(v45 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                uint64_t v46 = 168;
                if (v13 == 2) {
                  uint64_t v46 = 152;
                }
                uint64_t v47 = 160;
                if (v13 == 2) {
                  uint64_t v47 = 144;
                }
                cmark_strbuf_put(v16, *(const void **)(v15 + v47), *(_DWORD *)(v15 + v46));
                uint64_t v48 = (int)v16[5];
                if (!v48) {
                  goto LABEL_181;
                }
                goto LABEL_191;
              case 0x8008:
                uint64_t v49 = cmark_node_parent(v15);
                uint64_t v50 = cmark_node_parent(v49);
                if (v50 && *(unsigned __int16 *)(v50 + 100) == 32771 && *(unsigned char *)(v50 + 165)) {
                  goto LABEL_181;
                }
                if (v13 == 2)
                {
                  uint64_t v51 = (int)v16[5];
                  if (v51 && *(unsigned char *)(v51 + *((void *)v16 + 1) - 1) != 10) {
                    cmark_strbuf_putc((uint64_t)v16, 10);
                  }
                  char v39 = v16;
                  __int16 v40 = "<p";
                  goto LABEL_107;
                }
                if (*(unsigned __int16 *)(v49 + 100) == 32779 && !*(void *)(v15 + 24))
                {
                  cmark_strbuf_putc((uint64_t)v16, 32);
                  S_put_footnote_backref((uint64_t)&v94, v16, v49);
                }
                __int16 v28 = v16;
                uint64_t v29 = "</p>\n";
                goto LABEL_180;
              case 0x8009:
                if (v13 != 2)
                {
                  v98[3] = *(unsigned char *)(v15 + 144) + 48;
                  uint64_t v27 = v98;
LABEL_150:
                  cmark_strbuf_puts(v16, v27);
LABEL_151:
                  __int16 v28 = v16;
                  uint64_t v29 = ">\n";
                  goto LABEL_180;
                }
                uint64_t v52 = (int)v94[5];
                if (v52 && *(unsigned char *)(v52 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                __s[2] = *(unsigned char *)(v15 + 144) + 48;
                __int16 v40 = __s;
                char v39 = v16;
LABEL_107:
                cmark_strbuf_puts(v39, v40);
                if ((a2 & 2) != 0)
                {
                  int v53 = cmark_node_get_start_line(v15);
                  int v54 = cmark_node_get_start_column(v15);
                  int v55 = cmark_node_get_end_line(v15);
                  int v56 = cmark_node_get_end_column(v15);
                  int v88 = v55;
                  a2 = v93;
                  snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v53, v54, v88, v56);
                  cmark_strbuf_puts(v16, __str);
                }
                uint64_t v20 = v16;
                char v21 = 62;
                goto LABEL_24;
              case 0x800A:
                uint64_t v57 = (int)v94[5];
                if (v57 && *(unsigned char *)(v57 + *((void *)v94 + 1) - 1) != 10) {
                  cmark_strbuf_putc((uint64_t)v94, 10);
                }
                cmark_strbuf_puts(v16, "<hr");
                if ((a2 & 2) != 0)
                {
                  int v58 = cmark_node_get_start_line(v15);
                  int v59 = cmark_node_get_start_column(v15);
                  int v60 = cmark_node_get_end_line(v15);
                  int v61 = cmark_node_get_end_column(v15);
                  int v89 = v60;
                  a2 = v93;
                  snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v58, v59, v89, v61);
                  cmark_strbuf_puts(v16, __str);
                }
                __int16 v28 = v16;
                uint64_t v29 = " />\n";
                goto LABEL_180;
              case 0x800B:
                if (v13 == 2)
                {
                  int v62 = v96;
                  if (!v96)
                  {
                    cmark_strbuf_puts(v94, "<section class=\"footnotes\" data-footnotes>\n<ol>\n");
                    int v62 = v96;
                  }
                  LODWORD(v96) = v62 + 1;
                  cmark_strbuf_puts(v16, "<li id=\"fn-");
                  houdini_escape_href(v16, *(void *)(v15 + 144), *(_DWORD *)(v15 + 152));
                  __int16 v28 = v16;
                  uint64_t v29 = "\">\n";
                }
                else
                {
                  if (S_put_footnote_backref((uint64_t)&v94, v94, v15)) {
                    cmark_strbuf_putc((uint64_t)v16, 10);
                  }
LABEL_154:
                  __int16 v28 = v16;
                  uint64_t v29 = "</li>\n";
                }
                goto LABEL_180;
              default:
                cmark_render_html_with_mem_cold_1();
            }
            return result;
        }
        goto LABEL_24;
      }
      v19();
LABEL_181:
      int v13 = cmark_iter_next(v7);
    }
    while (v13 != 1);
  }
  if (v96) {
    cmark_strbuf_puts(v97, "</ol>\n</section>\n");
  }
  uint64_t v11 = cmark_strbuf_detach((uint64_t)v97);
  cmark_llist_free((uint64_t)a4, *((void **)&v95 + 1));
  cmark_iter_free(v7);
  return v11;
}

BOOL S_put_footnote_backref(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 24);
  unsigned int v3 = *(_DWORD *)(a1 + 28);
  if (v3 < v4)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v4;
    unsigned int v9 = v4;
    snprintf(__str, 0x20uLL, "%d", v4);
    cmark_strbuf_puts(a2, "<a href=\"#fnref-");
    houdini_escape_href(a2, *(void *)(a3 + 144), *(_DWORD *)(a3 + 152));
    cmark_strbuf_puts(a2, "\" class=\"footnote-backref\" data-footnote-backref data-footnote-backref-idx=\"");
    cmark_strbuf_puts(a2, __str);
    cmark_strbuf_puts(a2, "\" aria-label=\"Back to reference ");
    cmark_strbuf_puts(a2, __str);
    cmark_strbuf_puts(a2, "\">↩</a>");
    if (*(int *)(a3 + 128) >= 2)
    {
      int v7 = 1;
      do
      {
        snprintf(__s, 0x20uLL, "%d", ++v7);
        cmark_strbuf_puts(a2, " <a href=\"#fnref-");
        houdini_escape_href(a2, *(void *)(a3 + 144), *(_DWORD *)(a3 + 152));
        cmark_strbuf_puts(a2, "-");
        cmark_strbuf_puts(a2, __s);
        cmark_strbuf_puts(a2, "\" class=\"footnote-backref\" data-footnote-backref data-footnote-backref-idx=\"");
        cmark_strbuf_puts(a2, __str);
        cmark_strbuf_puts(a2, "-");
        cmark_strbuf_puts(a2, __s);
        cmark_strbuf_puts(a2, "\" aria-label=\"Back to reference ");
        cmark_strbuf_puts(a2, __str);
        cmark_strbuf_puts(a2, "-");
        cmark_strbuf_puts(a2, __s);
        cmark_strbuf_puts(a2, "\">↩<sup class=\"footnote-ref\">");
        cmark_strbuf_puts(a2, __s);
        cmark_strbuf_puts(a2, "</sup></a>");
      }
      while (v7 < *(_DWORD *)(a3 + 128));
    }
    unsigned int v3 = v10;
    unsigned int v4 = v9;
  }
  return v3 < v4;
}

BOOL cmark_ispunct(unsigned __int8 a1)
{
  return cmark_ctype_class[a1] == 2;
}

BOOL cmark_isalpha(unsigned __int8 a1)
{
  return cmark_ctype_class[a1] == 4;
}

uint64_t cmark_gfm_extensions_set_tasklist_item_checked(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 112)
      && (type_string = cmark_node_get_type_string(result), !strcmp(type_string, "tasklist")))
    {
      *(unsigned char *)(v2 + 166) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_gfm_extensions_get_tasklist_item_checked(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 112)
      && (type_string = cmark_node_get_type_string(result), !strcmp(type_string, "tasklist")))
    {
      return *(unsigned char *)(v1 + 166) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t matches(int a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 56) >= *(_DWORD *)(a5 + 152) + *(_DWORD *)(a5 + 148))
  {
    uint64_t v5 = 1;
    cmark_parser_advance_offset(a2, __s, *(_DWORD *)(a5 + 152) + *(_DWORD *)(a5 + 148), 1);
  }
  else if (*(unsigned char *)(a2 + 60) && *(void *)(a5 + 48))
  {
    cmark_parser_advance_offset(a2, __s, *(_DWORD *)(a2 + 44) - *(_DWORD *)(a2 + 36), 0);
    return 1;
  }
  else
  {
    return 0;
  }
  return v5;
}

const char *get_type_string()
{
  return "tasklist";
}

uint64_t open_tasklist_item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  if (cmark_node_get_type(a4) == 32772
    && _ext_scan_at((uint64_t (*)(uint64_t))_scan_tasklist, (uint64_t)a5, a6, 0))
  {
    cmark_node_set_syntax_extension(a4, a1);
    cmark_parser_advance_offset(a3, a5, 3, 0);
    if (strstr(a5, "[x]")) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = strstr(a5, "[X]") != 0;
    }
    *(unsigned char *)(a4 + 166) = v11;
  }
  return 0;
}

BOOL can_contain(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 100) == 32772;
}

_DWORD *commonmark_render(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 2)
  {
    (*(void (**)(uint64_t))(a2 + 56))(a2);
    if (*(unsigned char *)(a3 + 166)) {
      int v6 = "- [x] ";
    }
    else {
      int v6 = "- [ ] ";
    }
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, v6, 0, 0);
    int v7 = *(_DWORD **)(a2 + 16);
    return cmark_strbuf_puts(v7, "  ");
  }
  else
  {
    cmark_strbuf_truncate(*(void *)(a2 + 16), *(_DWORD *)(*(void *)(a2 + 16) + 20) - 2);
    unsigned int v9 = *(uint64_t (**)(uint64_t))(a2 + 56);
    return (_DWORD *)v9(a2);
  }
}

_DWORD *html_render(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, char a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  if (a4 == 2)
  {
    uint64_t v9 = *(int *)(v5 + 20);
    if (v9 && *(unsigned char *)(v9 + *(void *)(v5 + 8) - 1) != 10)
    {
      cmark_strbuf_putc(v5, 10);
      uint64_t v5 = *a2;
    }
    cmark_strbuf_puts((_DWORD *)v5, "<li");
    unsigned int v10 = (_DWORD *)*a2;
    if ((a5 & 2) != 0)
    {
      start_int line = cmark_node_get_start_line(a3);
      start_int column = cmark_node_get_start_column(a3);
      end_int line = cmark_node_get_end_line(a3);
      end_int column = cmark_node_get_end_column(a3);
      snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", start_line, start_column, end_line, end_column);
      cmark_strbuf_puts(v10, __str);
      unsigned int v10 = (_DWORD *)*a2;
    }
    cmark_strbuf_putc((uint64_t)v10, 62);
    if (*(unsigned char *)(a3 + 166)) {
      uint64_t v15 = "<input type=\"checkbox\" checked=\"\" disabled=\"\" /> ";
    }
    else {
      uint64_t v15 = "<input type=\"checkbox\" disabled=\"\" /> ";
    }
    return cmark_strbuf_puts((_DWORD *)*a2, v15);
  }
  else
  {
    return cmark_strbuf_puts((_DWORD *)v5, "</li>\n");
  }
}

const char *xml_attr(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 166)) {
    return " completed=\"true\"";
  }
  else {
    return " completed=\"false\"";
  }
}

uint64_t cmark_render_man(uint64_t *a1, uint64_t a2, int a3)
{
  return cmark_render(*a1, (uint64_t)a1, a2, a3, (uint64_t)S_outc, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_0);
}

uint64_t cmark_render_man_with_mem(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return cmark_render(a4, a1, a2, a3, (uint64_t)S_outc, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_0);
}

_DWORD *S_outc(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a3) {
    goto LABEL_16;
  }
  if (a4 > 91)
  {
    switch(a4)
    {
      case 8211:
        unsigned int v4 = "\\[en]";
        return cmark_render_ascii(a1, v4);
      case 8212:
        unsigned int v4 = "\\[em]";
        return cmark_render_ascii(a1, v4);
      case 8213:
      case 8214:
      case 8215:
      case 8218:
      case 8219:
        goto LABEL_16;
      case 8216:
        unsigned int v4 = "\\[oq]";
        return cmark_render_ascii(a1, v4);
      case 8217:
        unsigned int v4 = "\\[cq]";
        return cmark_render_ascii(a1, v4);
      case 8220:
        unsigned int v4 = "\\[lq]";
        return cmark_render_ascii(a1, v4);
      case 8221:
        unsigned int v4 = "\\[rq]";
        return cmark_render_ascii(a1, v4);
      default:
        if (a4 != 92) {
          goto LABEL_16;
        }
        unsigned int v4 = "\\e";
        break;
    }
    return cmark_render_ascii(a1, v4);
  }
  if (a4 != 39)
  {
    if (a4 == 45)
    {
      unsigned int v4 = "\\-";
      return cmark_render_ascii(a1, v4);
    }
    if (a4 == 46)
    {
      if (*(unsigned char *)(a1 + 40))
      {
        unsigned int v4 = "\\&.";
        return cmark_render_ascii(a1, v4);
      }
      unsigned int v6 = 46;
      return cmark_render_code_point(a1, v6);
    }
LABEL_16:
    unsigned int v6 = a4;
    return cmark_render_code_point(a1, v6);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    unsigned int v4 = "\\&'";
    return cmark_render_ascii(a1, v4);
  }
  unsigned int v6 = 39;
  return cmark_render_code_point(a1, v6);
}

uint64_t S_render_node_0(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = v7 > 0 && (a4 & 0x10) == 0;
  uint64_t v9 = *(void *)(a2 + 112);
  if (v9 && (unsigned int v10 = *(void (**)(void))(v9 + 128)) != 0)
  {
    v10();
  }
  else
  {
    switch(*(_WORD *)(a2 + 100))
    {
      case 0xC001:
      case 0xC00C:
        BOOL v11 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        literal = cmark_node_get_literal(a2);
        v11(a1, a2, literal, v8, 1);
        return 1;
      case 0xC002:
        if ((a4 & 4) != 0) {
          goto LABEL_15;
        }
        if (!(v7 | a4 & 0x10)) {
          goto LABEL_57;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, BOOL, void))(a1 + 72))(a1, a2, " ", v8, 0);
        return 1;
      case 0xC003:
LABEL_15:
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ".PD 0\n.P\n.PD", 0, 0);
        goto LABEL_57;
      case 0xC004:
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\f[C]", 0, 0);
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        __int16 v16 = cmark_node_get_literal(a2);
        v15(a1, a2, v16, v8, 1);
        unsigned int v17 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        goto LABEL_25;
      case 0xC005:
      case 0xC00B:
        return 1;
      case 0xC006:
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        if (a3 == 2) {
          int v19 = cmark_node_get_on_enter(a2);
        }
        else {
          int v19 = cmark_node_get_on_exit(a2);
        }
        v18(a1, a2, v19, 0, 0);
        return 1;
      case 0xC007:
        unsigned int v17 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 != 2) {
          goto LABEL_25;
        }
        uint64_t v20 = "\\f[I]";
        break;
      case 0xC008:
        uint64_t v21 = *(void *)(a2 + 40);
        if (v21 && *(unsigned __int16 *)(v21 + 100) == 49160) {
          return 1;
        }
        unsigned int v17 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 == 2) {
          uint64_t v20 = "\\f[B]";
        }
        else {
LABEL_25:
        }
          uint64_t v20 = "\\f[]";
        break;
      case 0xC009:
        if (a3 == 2) {
          return 1;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, " (", 0, 0);
        uint64_t v22 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        url = cmark_node_get_url(a2);
        v22(a1, a2, url, v8, 3);
        unsigned int v17 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        uint64_t v20 = ")";
        break;
      case 0xC00A:
        unsigned int v17 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 == 2) {
          uint64_t v20 = "[IMAGE: ";
        }
        else {
          uint64_t v20 = "]";
        }
        break;
      default:
        switch(*(_WORD *)(a2 + 100))
        {
          case 0x8001:
          case 0x8003:
          case 0x8006:
          case 0x800B:
            return 1;
          case 0x8002:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            uint64_t v13 = *(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72);
            if (a3 == 2) {
              int v14 = ".RS";
            }
            else {
              int v14 = ".RE";
            }
            goto LABEL_56;
          case 0x8004:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            if (a3 != 2) {
              return 1;
            }
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ".IP ", 0, 0);
            if (cmark_node_get_list_type(*(void *)(a2 + 40)) == 1)
            {
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\[bu] 2", 0, 0);
            }
            else
            {
              int item_index = cmark_node_get_item_index(a2);
              snprintf(__str, 0x14uLL, "\"%d.\" 4", item_index);
              uint64_t v13 = *(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72);
              int v14 = __str;
LABEL_56:
              v13(a1, a2, v14, 0, 0);
            }
            break;
          case 0x8005:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ".IP\n.nf\n\\f[C]\n", 0, 0);
            unint64_t v24 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72);
            __int16 v25 = cmark_node_get_literal(a2);
            v24(a1, a2, v25, 0, 1);
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\f[]\n.fi", 0, 0);
            break;
          case 0x8007:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            __int16 v26 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            if (a3 == 2) {
              uint64_t v27 = cmark_node_get_on_enter(a2);
            }
            else {
              uint64_t v27 = cmark_node_get_on_exit(a2);
            }
            uint64_t v29 = v27;
            goto LABEL_54;
          case 0x8008:
            if (a3 != 2) {
              break;
            }
            uint64_t v28 = *(void *)(a2 + 40);
            if (v28 && *(unsigned __int16 *)(v28 + 100) == 32772 && !*(void *)(a2 + 32)) {
              return 1;
            }
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ".PP", 0, 0);
            break;
          case 0x8009:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            if (a3 != 2) {
              return 1;
            }
            __int16 v26 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            if (cmark_node_get_heading_level(a2) == 1) {
              uint64_t v29 = ".SH";
            }
            else {
              uint64_t v29 = ".SS";
            }
LABEL_54:
            v26(a1, a2, v29, 0, 0);
            break;
          case 0x800A:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, ".PP\n  *  *  *  *  *", 0, 0);
            break;
          default:
            S_render_node_cold_1_0();
        }
LABEL_57:
        (*(void (**)(uint64_t))(a1 + 56))(a1);
        return 1;
    }
    v17(a1, a2, v20, 0, 0);
  }
  return 1;
}

uint64_t cmark_syntax_extension_free(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void (**)(uint64_t))(a2 + 64);
  if (v4 && *(void *)(a2 + 48)) {
    v4(a1);
  }
  cmark_llist_free(a1, *(void **)(a2 + 32));
  (*(void (**)(void))(a1 + 16))(*(void *)(a2 + 40));
  uint64_t v5 = *(uint64_t (**)(uint64_t))(a1 + 16);

  return v5(a2);
}

uint64_t cmark_syntax_extension_set_private(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + 64) = a3;
  return result;
}

uint64_t cmark_syntax_extension_get_private(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

unint64_t check_domain(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 2)
  {
    int v5 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = a2 - 2;
    unint64_t v11 = 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + v11) == 92 && v11 < v10) {
        ++v11;
      }
      int v13 = *(unsigned __int8 *)(a1 + v11);
      if (v13 == 46)
      {
        ++v9;
        uint64_t v8 = v7;
        uint64_t v7 = 0;
      }
      else if (v13 == 95)
      {
        ++v7;
      }
      else if (!is_valid_hostchar((unsigned __int8 *)(a1 + v11), v5 - v11) && *(unsigned char *)(a1 + v11) != 45)
      {
        goto LABEL_17;
      }
      if (++v11 >= v4) {
        goto LABEL_17;
      }
    }
  }
  unint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  unint64_t v11 = 1;
LABEL_17:
  if (v8 | v7 && v9 < 0xB) {
    return 0;
  }
  if (v9) {
    unint64_t v15 = v11;
  }
  else {
    unint64_t v15 = 0;
  }
  if (a3) {
    return v11;
  }
  else {
    return v15;
  }
}

unint64_t autolink_delim(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  for (unint64_t result = 0; result != a2; ++result)
  {
    int v6 = *(unsigned __int8 *)(a1 + result);
    switch(v6)
    {
      case '(':
        ++v3;
        break;
      case ')':
        ++v4;
        break;
      case '<':
        goto LABEL_11;
    }
  }
  unint64_t result = a2;
LABEL_11:
  if (result)
  {
    while (1)
    {
      unint64_t v7 = result - 1;
      int v8 = *(unsigned __int8 *)(a1 + result - 1);
      uint64_t v9 = (v8 - 33);
      if (v9 > 0x3E) {
        goto LABEL_23;
      }
      if (((1 << (v8 - 33)) & 0x4000000042002A43) != 0) {
        goto LABEL_14;
      }
      if (v9 != 8) {
        break;
      }
      if (v4 <= v3) {
        return result;
      }
      --v4;
LABEL_14:
      unint64_t result = v7;
      if (!v7) {
        return result;
      }
    }
    if (v9 == 26)
    {
      unint64_t v10 = result - 2;
      if (result == 2)
      {
        unint64_t v11 = 0;
      }
      else
      {
        unint64_t v11 = result - 2;
        do
        {
          if (!cmark_isalpha(*(unsigned char *)(a1 + v11))) {
            break;
          }
          --v11;
        }
        while (v11);
      }
      if (v11 < v10 && *(unsigned char *)(a1 + v11) == 38) {
        unint64_t v7 = v11;
      }
      goto LABEL_14;
    }
LABEL_23:
    if (v8 != 126) {
      return result;
    }
    goto LABEL_14;
  }
  return result;
}

BOOL is_valid_hostchar(unsigned __int8 *a1, int a2)
{
  unsigned int v3 = 0;
  return (cmark_utf8proc_iterate(a1, a2, &v3) & 0x80000000) == 0
      && !cmark_utf8proc_is_space(v3)
      && !cmark_utf8proc_is_punctuation(v3);
}

BOOL validate_protocol(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = strlen(a1);
  size_t v9 = a4 - a3;
  if (v8 > v9) {
    return 0;
  }
  size_t v10 = v8;
  if (memcmp((const void *)(a2 - a3 - v8), a1, v8)) {
    return 0;
  }
  if (v10 == v9) {
    return 1;
  }
  return !cmark_isalnum(*(unsigned char *)(a2 + ~v10 - a3));
}

uint64_t cmark_release_plugins()
{
  pthread_once(&extensions_once, (void (*)(void))initialize_extensions);
  pthread_mutex_lock(&extensions_lock);
  if (syntax_extensions)
  {
    cmark_llist_free_full((uint64_t)&CMARK_DEFAULT_MEM_ALLOCATOR, (void *)syntax_extensions, (void (*)(uint64_t, void))cmark_syntax_extension_free);
    syntax_extensions = 0;
  }

  return pthread_mutex_unlock(&extensions_lock);
}

void *cmark_list_syntax_extensions(uint64_t (**a1)(uint64_t, uint64_t))
{
  pthread_once(&extensions_once, (void (*)(void))initialize_extensions);
  pthread_mutex_lock(&extensions_lock);
  uint64_t v2 = (void *)syntax_extensions;
  if (syntax_extensions)
  {
    unsigned int v3 = 0;
    do
    {
      unsigned int v3 = cmark_llist_append(a1, v3, v2[1]);
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  pthread_mutex_unlock(&extensions_lock);
  return v3;
}

_DWORD *cmark_render_ascii(uint64_t a1, char *a2)
{
  unsigned int v3 = *(_DWORD **)(a1 + 8);
  int v4 = v3[5];
  unint64_t result = cmark_strbuf_puts(v3, a2);
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(*(void *)(a1 + 8) + 20) - v4;
  return result;
}

_DWORD *cmark_render_code_point(uint64_t a1, unsigned int a2)
{
  unint64_t result = cmark_utf8proc_encode_char(a2, *(_DWORD **)(a1 + 8));
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t cmark_render(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int (*a6)(uint64_t *, uint64_t, uint64_t, uint64_t))
{
  v37[0] = a1;
  v37[1] = &cmark_strbuf__initbuf;
  v37[2] = 0;
  v36[0] = a1;
  v36[1] = &cmark_strbuf__initbuf;
  v36[2] = 0;
  uint64_t v11 = cmark_iter_new(a2);
  uint64_t v30 = 257;
  uint64_t v35 = 0;
  int v12 = v36;
  uint64_t v24 = a1;
  __int16 v25 = v36;
  __int16 v26 = v37;
  int v27 = 0;
  int v28 = a4;
  uint64_t v29 = 0;
  uint64_t v31 = a5;
  uint64_t v32 = S_cr;
  uint64_t v33 = S_blankline;
  int v34 = S_out;
  uint64_t v13 = cmark_iter_next(v11);
  if (v13 != 1)
  {
    uint64_t v14 = v13;
    while (1)
    {
      uint64_t node = cmark_iter_get_node(v11);
      uint64_t v16 = node;
      uint64_t v17 = *(void *)(node + 112);
      if (v17) {
        goto LABEL_6;
      }
      uint64_t v18 = *(void *)(node + 40);
      if (v18) {
        break;
      }
LABEL_7:
      if (*(unsigned __int16 *)(node + 100) == 32772)
      {
        uint64_t v19 = *(void *)(node + 32);
        if (v19) {
          int list_start = cmark_node_get_item_index(v19) + 1;
        }
        else {
          int list_start = cmark_node_get_list_start(*(void *)(v16 + 40));
        }
        cmark_node_set_item_index(v16, list_start);
      }
      if (!a6(&v24, v16, v14, a3)) {
        cmark_iter_reset(v11, v16, 3);
      }
      uint64_t v14 = cmark_iter_next(v11);
      if (v14 == 1)
      {
        int v12 = v25;
        goto LABEL_16;
      }
    }
    uint64_t v17 = *(void *)(v18 + 120);
LABEL_6:
    *(void *)(node + 120) = v17;
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v21 = *((int *)v12 + 5);
  if (!v21 || *(unsigned char *)(v21 + v12[1] - 1) != 10)
  {
    cmark_strbuf_putc((uint64_t)v12, 10);
    int v12 = v25;
  }
  uint64_t v22 = cmark_strbuf_detach((uint64_t)v12);
  cmark_iter_free(v11);
  cmark_strbuf_free((uint64_t)v26);
  cmark_strbuf_free((uint64_t)v25);
  return v22;
}

uint64_t S_cr(uint64_t result)
{
  if (*(int *)(result + 32) <= 0) {
    *(_DWORD *)(result + 32) = 1;
  }
  return result;
}

uint64_t S_blankline(uint64_t result)
{
  if (*(int *)(result + 32) <= 1) {
    *(_DWORD *)(result + 32) = 2;
  }
  return result;
}

uint64_t S_out(uint64_t a1, uint64_t a2, char *__s, int a4, uint64_t a5)
{
  unint64_t v7 = __s;
  uint64_t result = strlen(__s);
  int v11 = result;
  uint64_t v12 = *(void *)(a2 + 120);
  if (v12)
  {
    if (*(void *)(v12 + 176)) {
      uint64_t v13 = *(void *)(a2 + 120);
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (a4) {
    BOOL v14 = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = *(_DWORD *)(*(void *)(a1 + 8) + 20);
  unsigned int v40 = 0;
  int v16 = *(_DWORD *)(a1 + 32);
  if (*(unsigned char *)(a1 + 43) && v16 >= 2)
  {
    int v16 = 1;
    *(_DWORD *)(a1 + 32) = 1;
  }
  else if (!v16)
  {
    goto LABEL_21;
  }
  unsigned int v17 = v15 - 1;
  do
  {
    if ((v17 & 0x80000000) != 0 || (uint64_t result = *(void *)(a1 + 8), *(unsigned char *)(*(void *)(result + 8) + v17) == 10))
    {
      --v17;
    }
    else
    {
      uint64_t result = cmark_strbuf_putc(result, 10);
      int v16 = *(_DWORD *)(a1 + 32);
      if (v16 >= 2)
      {
        uint64_t result = (uint64_t)cmark_strbuf_put(*(_DWORD **)(a1 + 8), *(const void **)(*(void *)(a1 + 16) + 8), *(_DWORD *)(*(void *)(a1 + 16) + 20));
        int v16 = *(_DWORD *)(a1 + 32);
      }
    }
    *(_DWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 40) = 257;
    *(void *)(a1 + 32) = --v16;
  }
  while (v16);
LABEL_21:
  if (v11 >= 1)
  {
    int v18 = 0;
    uint64_t v38 = v7 + 1;
    char v19 = !v14;
    char v39 = v19;
    unsigned int v37 = a5;
    char v36 = v7;
    do
    {
      if (*(unsigned char *)(a1 + 40))
      {
        cmark_strbuf_put(*(_DWORD **)(a1 + 8), *(const void **)(*(void *)(a1 + 16) + 8), *(_DWORD *)(*(void *)(a1 + 16) + 20));
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)(a1 + 16) + 20);
      }
      uint64_t result = cmark_utf8proc_iterate((unsigned __int8 *)&v7[v18], v11 - v18, &v40);
      if (result == -1) {
        return result;
      }
      int v20 = result;
      if (v13)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(v13 + 176))(v13, a2, v40);
        if (result) {
          uint64_t result = cmark_strbuf_putc(*(void *)(a1 + 8), 92);
        }
      }
      uint64_t v21 = v18;
      if (v40 == 32) {
        char v22 = v19;
      }
      else {
        char v22 = 1;
      }
      if (v22)
      {
        if (a5)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 48))(a1, a2, a5);
LABEL_44:
          *(unsigned char *)(a1 + 40) = 0;
          char v28 = *(unsigned char *)(a1 + 41);
          if (v28)
          {
            uint64_t result = cmark_isdigit(v40);
            char v28 = result == 1;
          }
          *(unsigned char *)(a1 + 41) = v28;
          goto LABEL_47;
        }
        if (v40 != 10)
        {
          uint64_t result = (uint64_t)cmark_utf8proc_encode_char(v40, *(_DWORD **)(a1 + 8));
          ++*(_DWORD *)(a1 + 24);
          goto LABEL_44;
        }
        uint64_t result = cmark_strbuf_putc(*(void *)(a1 + 8), 10);
        *(_DWORD *)(a1 + 24) = 0;
        *(_WORD *)(a1 + 40) = 257;
        *(_DWORD *)(a1 + 36) = 0;
      }
      else if (!*(unsigned char *)(a1 + 40))
      {
        uint64_t v23 = *(void *)(a1 + 8);
        int v24 = *(_DWORD *)(v23 + 20);
        cmark_strbuf_putc(v23, 32);
        ++*(_DWORD *)(a1 + 24);
        *(_WORD *)(a1 + 40) = 0;
        --v18;
        __int16 v25 = &v38[v21];
        do
        {
          int v27 = *v25++;
          unsigned __int8 v26 = v27;
          ++v18;
        }
        while (v27 == 32);
        uint64_t result = cmark_isdigit(v26);
        if (!result) {
          *(_DWORD *)(a1 + 36) = v24;
        }
        char v19 = v39;
      }
LABEL_47:
      int v29 = *(_DWORD *)(a1 + 28);
      if (v29 >= 1 && *(_DWORD *)(a1 + 24) > v29 && !*(unsigned char *)(a1 + 40))
      {
        uint64_t v30 = *(unsigned int *)(a1 + 36);
        if ((int)v30 >= 1)
        {
          uint64_t v31 = (const char *)(*(void *)(*(void *)(a1 + 8) + 8) + v30 + 1);
          int v32 = strlen(v31);
          uint64_t v33 = (void *)(**(uint64_t (***)(void, uint64_t))a1)(v32 + 1, 1);
          unint64_t v7 = v36;
          memcpy(v33, v31, v32 + 1);
          cmark_strbuf_truncate(*(void *)(a1 + 8), *(_DWORD *)(a1 + 36));
          cmark_strbuf_putc(*(void *)(a1 + 8), 10);
          cmark_strbuf_put(*(_DWORD **)(a1 + 8), *(const void **)(*(void *)(a1 + 16) + 8), *(_DWORD *)(*(void *)(a1 + 16) + 20));
          cmark_strbuf_put(*(_DWORD **)(a1 + 8), v33, v32);
          int v34 = *(_DWORD *)(*(void *)(a1 + 16) + 20) + v32;
          a5 = v37;
          *(_DWORD *)(a1 + 24) = v34;
          uint64_t v35 = v33;
          char v19 = v39;
          uint64_t result = (*(uint64_t (**)(void *))(*(void *)a1 + 16))(v35);
          *(_DWORD *)(a1 + 36) = 0;
          *(_WORD *)(a1 + 40) = 0;
        }
      }
      v18 += v20;
    }
    while (v18 < v11);
  }
  return result;
}

uint64_t _ext_scan_at(uint64_t (*a1)(uint64_t), uint64_t a2, int a3, int a4)
{
  if (!a2 || a4 >= a3) {
    return 0;
  }
  char v6 = *(unsigned char *)(a2 + a3);
  *(unsigned char *)(a2 + a3) = 0;
  uint64_t result = a1(a2 + a4);
  *(unsigned char *)(a2 + a3) = v6;
  return result;
}

uint64_t _scan_table_start(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x20)
  {
    if (v1 > 0xA)
    {
      if (v1 - 32 >= 0xFFFFFFED) {
        return 0;
      }
    }
    else if (v1 != 9)
    {
      return 0;
    }
    goto LABEL_16;
  }
  if (v1 > 0x39)
  {
    if (v1 == 58)
    {
      uint64_t v2 = a1;
      goto LABEL_34;
    }
    if (v1 == 124)
    {
LABEL_16:
      uint64_t v2 = a1 + 1;
      uint64_t v5 = a1[1];
      if ((_scan_table_start_yybm[v5] & 0x40) != 0)
      {
        do
        {
          unsigned int v7 = *++v2;
          unsigned int v6 = v7;
        }
        while ((_scan_table_start_yybm[v7] & 0x40) != 0);
        if (v6 != 58)
        {
          if (v6 == 45) {
            goto LABEL_35;
          }
          return 0;
        }
      }
      else
      {
        if (v5 == 45) {
          goto LABEL_35;
        }
        if (v5 != 58) {
          return 0;
        }
      }
LABEL_34:
      unsigned int v10 = *++v2;
      if (_scan_table_start_yybm[v10] < 0) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v1 != 45) {
    return 0;
  }
  uint64_t v2 = a1 + 1;
  unsigned int v3 = a1[1];
  if (_scan_table_start_yybm[a1[1]] < 0) {
    goto LABEL_35;
  }
  if (v3 > 0x20)
  {
    BOOL v8 = v3 == 58;
    if (v3 <= 0x3A) {
      goto LABEL_44;
    }
LABEL_33:
    BOOL v9 = v3 == 124;
LABEL_49:
    while (v9)
    {
      while (1)
      {
        unsigned int v15 = *++v2;
        unsigned int v14 = v15;
        if (_scan_table_start_yybm[v15] < 0) {
          break;
        }
        if (v14 > 0xD)
        {
          BOOL v9 = v14 == 32;
          if (v14 <= 0x20) {
            goto LABEL_49;
          }
          if (v14 == 58) {
            goto LABEL_34;
          }
          return 0;
        }
        BOOL v9 = v14 == 9;
        if (v14 <= 9) {
          goto LABEL_49;
        }
        if (v14 == 10) {
          return (v2 - a1 + 1);
        }
        if (v14 >= 0xD) {
          goto LABEL_61;
        }
      }
      do
      {
LABEL_35:
        unsigned int v12 = *++v2;
        unsigned int v11 = v12;
      }
      while (_scan_table_start_yybm[v12] < 0);
      if (v11 <= 0x1F)
      {
        if (v11 <= 0xA)
        {
          if (v11 < 9) {
            return 0;
          }
          if (v11 == 9) {
            goto LABEL_47;
          }
          return (v2 - a1 + 1);
        }
        if (v11 < 0xD) {
          goto LABEL_47;
        }
        if (v11 != 13) {
          return 0;
        }
        goto LABEL_61;
      }
      if (v11 <= 0x3A)
      {
        if (v11 < 0x21) {
          goto LABEL_47;
        }
        BOOL v8 = v11 == 58;
        goto LABEL_44;
      }
      BOOL v9 = v11 == 124;
    }
    return 0;
  }
  uint64_t v4 = 0;
  if (v3 < 9 || v3 - 14 < 0x12) {
    return v4;
  }
  while (1)
  {
    if (v3 > 0xD)
    {
      BOOL v8 = v3 == 32;
      if (v3 > 0x20) {
        goto LABEL_33;
      }
LABEL_44:
      if (!v8) {
        return 0;
      }
      goto LABEL_47;
    }
    BOOL v8 = v3 == 9;
    if (v3 <= 9) {
      goto LABEL_44;
    }
    if (v3 == 10) {
      return (v2 - a1 + 1);
    }
    if (v3 >= 0xD) {
      break;
    }
LABEL_47:
    unsigned int v13 = *++v2;
    unsigned int v3 = v13;
  }
LABEL_61:
  int v16 = v2[1];
  LODWORD(v2) = v2 + 1;
  if (v16 != 10) {
    return 0;
  }
  return (v2 - a1 + 1);
}

uint64_t _scan_table_cell(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = a1;
  if ((_scan_table_cell_yybm[*a1] & 0x40) != 0) {
    goto LABEL_28;
  }
  if (v1 > 0xEC)
  {
    if (v1 > 0xF0)
    {
      if (v1 >= 0xF4)
      {
        if (v1 != 244) {
          return 0;
        }
        uint64_t v4 = a1 + 1;
        if ((char)a1[1] >= -112) {
          return 0;
        }
      }
      else
      {
        uint64_t v4 = a1 + 1;
        if ((char)a1[1] >= -64) {
          return 0;
        }
      }
    }
    else
    {
      if (v1 < 0xEE)
      {
        unsigned int v3 = a1 + 1;
        if ((char)a1[1] < -96) {
          goto LABEL_26;
        }
        return 0;
      }
      if (v1 < 0xF0)
      {
LABEL_25:
        unsigned int v3 = a1 + 1;
        if ((char)a1[1] < -64) {
          goto LABEL_26;
        }
        return 0;
      }
      uint64_t v4 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return 0;
      }
    }
    int v5 = 1;
    LODWORD(v2) = v4;
    goto LABEL_64;
  }
  if (v1 <= 0xC1)
  {
    uint64_t v2 = a1;
    if (v1 - 14 < 0x4F) {
      goto LABEL_32;
    }
    return 0;
  }
  if (v1 >= 0xE0)
  {
    if (v1 == 224)
    {
      unsigned int v3 = a1 + 1;
      if ((a1[1] & 0xE0) != 0xA0) {
        return 0;
      }
LABEL_26:
      int v5 = 1;
      LODWORD(v2) = v3;
      goto LABEL_65;
    }
    goto LABEL_25;
  }
  uint64_t v2 = a1 + 1;
  if ((char)a1[1] >= -64) {
    return 0;
  }
  do
  {
    while (1)
    {
      do
      {
LABEL_28:
        unsigned int v8 = *++v2;
        unsigned int v7 = v8;
      }
      while ((_scan_table_cell_yybm[v8] & 0x40) != 0);
      if (v7 > 0xEC)
      {
        if (v7 <= 0xF0)
        {
          if (v7 < 0xEE) {
            goto LABEL_44;
          }
          int v5 = 0;
          uint64_t v4 = v2;
          if (v7 < 0xF0) {
            goto LABEL_64;
          }
LABEL_53:
          int v5 = 0;
          uint64_t v4 = v2 + 1;
          if ((v2[1] + 112) >= 0x30u) {
            return (v2 - a1);
          }
          goto LABEL_64;
        }
        goto LABEL_55;
      }
      if (v7 > 0xC1) {
        break;
      }
      if (v7 - 14 > 0x4E) {
        return (v2 - a1);
      }
      do
      {
LABEL_32:
        unsigned int v9 = *++v2;
        unsigned int v7 = v9;
      }
      while (_scan_table_cell_yybm[v9] < 0);
      if (v7 > 0xDF)
      {
        if (v7 <= 0xEF)
        {
          if (v7 < 0xE1) {
            goto LABEL_62;
          }
          int v5 = 0;
          uint64_t v4 = v2;
          if (v7 == 237)
          {
LABEL_44:
            int v5 = 0;
            unsigned int v3 = v2 + 1;
            if ((char)v2[1] >= -96) {
              return (v2 - a1);
            }
            goto LABEL_65;
          }
          goto LABEL_64;
        }
        if (v7 == 240) {
          goto LABEL_53;
        }
LABEL_55:
        if (v7 >= 0xF4)
        {
          if (v7 != 244) {
            return (v2 - a1);
          }
          int v5 = 0;
          uint64_t v4 = v2 + 1;
          if ((char)v2[1] >= -112) {
            return (v2 - a1);
          }
        }
        else
        {
          int v5 = 0;
          uint64_t v4 = v2 + 1;
          if ((char)v2[1] >= -64) {
            return (v2 - a1);
          }
        }
        goto LABEL_64;
      }
      if (v7 > 0xC)
      {
        if (v7 == 13) {
          return (v2 - a1);
        }
        if ((v7 & 0x80) != 0)
        {
          int v5 = 0;
          unsigned int v3 = v2;
          if (v7 < 0xC2) {
            return (v2 - a1);
          }
          goto LABEL_65;
        }
      }
      else if (v7 == 10)
      {
        return (v2 - a1);
      }
    }
    if (v7 < 0xE0)
    {
      int v5 = 0;
      unsigned int v3 = v2;
      goto LABEL_65;
    }
    int v5 = 0;
    uint64_t v4 = v2;
    if (v7 == 224)
    {
LABEL_62:
      int v5 = 0;
      unsigned int v3 = v2 + 1;
      if ((v2[1] & 0xE0) != 0xA0) {
        return (v2 - a1);
      }
      goto LABEL_65;
    }
LABEL_64:
    int v10 = (char)v4[1];
    unsigned int v3 = v4 + 1;
    int v11 = (int)v2;
    if (v10 >= -64) {
      break;
    }
LABEL_65:
    int v11 = (int)v2;
    uint64_t v2 = v3 + 1;
  }
  while ((char)v3[1] <= -65);
  LODWORD(v2) = v11;
  if (v5) {
    return 0;
  }
  return (v2 - a1);
}

uint64_t _scan_table_cell_end(unsigned char *a1)
{
  if (*a1 != 124) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v3 = a1 + 1;
  do
    int v4 = _scan_table_row_end_yybm[v3[result++]];
  while (v4 < 0);
  return result;
}

uint64_t _scan_table_row_end(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0xC)
  {
    if (v1 < 9) {
      return 0;
    }
    LODWORD(v2) = a1;
    if (v1 == 10) {
      return (v2 - a1 + 1);
    }
    goto LABEL_7;
  }
  if (v1 != 13)
  {
    if (v1 != 32) {
      return 0;
    }
LABEL_7:
    uint64_t v2 = a1 + 1;
    uint64_t v3 = a1[1];
    if (v3 < 9 || v3 >= 0xE && v3 != 32) {
      return 0;
    }
    if (_scan_table_row_end_yybm[v3] < 0)
    {
      do
      {
        int v4 = *++v2;
        LODWORD(v3) = v4;
      }
      while (_scan_table_row_end_yybm[v4] < 0);
      if (v3 < 9) {
        return 0;
      }
    }
    if (v3 < 0xB) {
      return (v2 - a1 + 1);
    }
    if (v3 > 0xD) {
      return 0;
    }
    goto LABEL_17;
  }
  uint64_t v2 = a1;
LABEL_17:
  int v5 = v2[1];
  LODWORD(v2) = v2 + 1;
  if (v5 == 10) {
    return (v2 - a1 + 1);
  }
  return 0;
}

uint64_t _scan_tasklist(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0x20)
  {
    if (v1 > 0x2C)
    {
      if (v1 != 45)
      {
        if (v1 - 48 >= 0xA) {
          return 0;
        }
        uint64_t v3 = a1 + 1;
        unsigned int v9 = a1[1];
        if (v9 > 0x1F)
        {
          if ((v9 & 0x80) != 0)
          {
            if ((v9 + 62) >= 0x33u) {
              return 0;
            }
          }
          else if (v9 < 0x21)
          {
            goto LABEL_74;
          }
        }
        else
        {
          BOOL v10 = v9 == 9;
          if (v9 <= 9) {
            goto LABEL_41;
          }
          if (v9 == 10) {
            return 0;
          }
          if (v9 < 0xD) {
            goto LABEL_74;
          }
        }
LABEL_45:
        if (_scan_tasklist_yybm[v9] < 0)
        {
          do
          {
            unsigned int v12 = *++v3;
            unsigned int v9 = v12;
          }
          while (_scan_tasklist_yybm[v12] < 0);
        }
        if (v9 <= 0xC1)
        {
          if (v9 <= 0xC)
          {
            if (v9 >= 9)
            {
              if (v9 != 10) {
                goto LABEL_77;
              }
              return 0;
            }
            goto LABEL_74;
          }
          if (v9 != 32)
          {
            if ((v9 & 0x80) != 0) {
              return 0;
            }
LABEL_74:
            unsigned int v21 = *++v3;
            unsigned int v20 = v21;
            if (v21 != 91) {
              goto LABEL_78;
            }
            return 0;
          }
          while (1)
          {
LABEL_77:
            while (1)
            {
              unsigned int v23 = *++v3;
              unsigned int v20 = v23;
LABEL_78:
              if (v20 > 0xC) {
                break;
              }
              if (v20 != 9 && v20 < 0xB) {
                return 0;
              }
            }
            BOOL v8 = v20 == 32;
            if (v20 > 0x20) {
              break;
            }
LABEL_85:
            if (!v8) {
              return 0;
            }
          }
          if (v20 != 91) {
            return 0;
          }
          unsigned int v25 = v3[1];
          if (v25 > 0x57)
          {
            if ((v25 & 0xFFFFFFDF) != 0x58) {
              return 0;
            }
          }
          else if (v25 != 32)
          {
            return 0;
          }
          if (v3[2] == 93)
          {
            unsigned int v26 = v3[3];
            if (v26 > 0xA)
            {
              if (v26 >= 0xD && v26 != 32) {
                return 0;
              }
LABEL_98:
              uint64_t v2 = (v3 - a1 + 4);
              for (uint64_t i = v3 + 4; ; ++i)
              {
                unsigned int v28 = *i;
                if (v28 > 0xA)
                {
                  if (v28 >= 0xD && v28 != 32) {
                    return v2;
                  }
                }
                else if (v28 != 9)
                {
                  return v2;
                }
                uint64_t v2 = (v2 + 1);
              }
            }
            if (v26 == 9) {
              goto LABEL_98;
            }
          }
          return 0;
        }
        if (v9 > 0xED)
        {
          if (v9 > 0xF0)
          {
            if (v9 >= 0xF4)
            {
              if (v9 != 244) {
                return 0;
              }
              int v17 = (char)*++v3;
              if (v17 >= -112) {
                return 0;
              }
            }
            else
            {
              int v15 = (char)*++v3;
              if (v15 >= -64) {
                return 0;
              }
            }
          }
          else if (v9 == 240)
          {
            char v14 = *++v3;
            if ((v14 + 112) >= 0x30u) {
              return 0;
            }
          }
        }
        else
        {
          if (v9 < 0xE0) {
            goto LABEL_73;
          }
          if (v9 == 224)
          {
            char v13 = *++v3;
            if ((v13 & 0xE0) != 0xA0) {
              return 0;
            }
LABEL_73:
            int v19 = (char)*++v3;
            if (v19 < -64) {
              goto LABEL_74;
            }
            return 0;
          }
          if (v9 >= 0xED)
          {
            int v16 = (char)*++v3;
            if (v16 >= -96) {
              return 0;
            }
            goto LABEL_73;
          }
        }
        int v18 = (char)*++v3;
        if (v18 >= -64) {
          return 0;
        }
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if (v1 < 0x2A || v1 == 44) {
        return v2;
      }
    }
    uint64_t v3 = a1 + 1;
    unsigned int v7 = a1[1];
    if (v7 <= 0xA)
    {
      BOOL v8 = v7 == 9;
      goto LABEL_85;
    }
    if (v7 >= 0xD)
    {
      BOOL v8 = v7 == 32;
      goto LABEL_85;
    }
    goto LABEL_77;
  }
  if (v1 > 0xA)
  {
    if (v1 - 32 >= 0xFFFFFFED) {
      return 0;
    }
  }
  else if (v1 != 9)
  {
    return 0;
  }
  uint64_t v3 = a1 + 1;
  unsigned int v4 = a1[1];
  if ((_scan_tasklist_yybm[a1[1]] & 0x40) != 0)
  {
    do
    {
      unsigned int v6 = *++v3;
      unsigned int v4 = v6;
    }
    while ((_scan_tasklist_yybm[v6] & 0x40) != 0);
    if (v4 > 0x2C)
    {
      if (v4 == 45) {
        goto LABEL_74;
      }
      if (v4 - 48 >= 0xA) {
        return 0;
      }
      int v5 = v3 - 1;
      goto LABEL_34;
    }
  }
  else if (v4 > 0x2C)
  {
    if (v4 == 45) {
      goto LABEL_74;
    }
    int v5 = a1;
    if (v4 - 48 >= 0xA) {
      return 0;
    }
LABEL_34:
    unsigned int v11 = v5[2];
    uint64_t v3 = v5 + 2;
    unsigned int v9 = v11;
    if (v11 > 0xA)
    {
      if (v9 < 0xD) {
        goto LABEL_74;
      }
      BOOL v10 = v9 == 32;
    }
    else
    {
      BOOL v10 = v9 == 9;
    }
LABEL_41:
    if (v10) {
      goto LABEL_74;
    }
    goto LABEL_45;
  }
  uint64_t v2 = 0;
  if (v4 >= 0x2A && v4 != 44) {
    goto LABEL_74;
  }
  return v2;
}

const char *get_type_string_0(uint64_t a1, uint64_t a2)
{
  if (CMARK_NODE_STRIKETHROUGH == *(unsigned __int16 *)(a2 + 100)) {
    return "strikethrough";
  }
  else {
    return "<unknown>";
  }
}

BOOL can_contain_0(uint64_t a1, uint64_t a2, int a3)
{
  return (~a3 & 0xC000) == 0 && CMARK_NODE_STRIKETHROUGH == *(unsigned __int16 *)(a2 + 100);
}

uint64_t commonmark_render_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "~~", 0, 0);
}

uint64_t latex_render(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 2) {
    int v5 = "\\sout{";
  }
  else {
    int v5 = "}";
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, v5, 0, 0);
}

uint64_t man_render(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 2)
  {
    (*(void (**)(uint64_t))(a2 + 56))(a2);
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72);
    return v6(a2, a3, ".ST \"", 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "\"", 0, 0);
    BOOL v8 = *(uint64_t (**)(uint64_t))(a2 + 56);
    return v8(a2);
  }
}

_DWORD *html_render_0(uint64_t a1, _DWORD **a2, uint64_t a3, int a4)
{
  unsigned int v4 = *a2;
  if (a4 == 2) {
    int v5 = "<del>";
  }
  else {
    int v5 = "</del>";
  }
  return cmark_strbuf_puts(v4, v5);
}

uint64_t plaintext_render(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "~", 0, 0);
}

uint64_t insert(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  int v5 = a5;
  uint64_t v8 = a4[2];
  uint64_t v9 = a5[1];
  if (*(_DWORD *)(v8 + 152) == *(_DWORD *)(a5[2] + 152) && cmark_node_set_type(a4[2], CMARK_NODE_STRIKETHROUGH))
  {
    cmark_node_set_syntax_extension(v8, a1);
    uint64_t v11 = cmark_node_next(a4[2]);
    if (v11)
    {
      unsigned int v12 = (void *)v11;
      do
      {
        if (v12 == (void *)v5[2]) {
          break;
        }
        uint64_t v13 = cmark_node_next((uint64_t)v12);
        cmark_node_append_child((void *)v8, v12);
        unsigned int v12 = (void *)v13;
      }
      while (v13);
    }
    uint64_t v14 = v5[2];
    *(_DWORD *)(v8 + 92) = *(_DWORD *)(v14 + 84) + *(_DWORD *)(v14 + 152) - 1;
    cmark_node_free((void *)v14);
  }
  if (v5 != a4)
  {
    do
    {
      int v15 = (void *)*v5;
      cmark_inline_parser_remove_delimiter(a3, v5);
      if (v15) {
        BOOL v16 = v15 == a4;
      }
      else {
        BOOL v16 = 1;
      }
      int v5 = v15;
    }
    while (!v16);
  }
  cmark_inline_parser_remove_delimiter(a3, a4);
  return v9;
}

uint64_t cmark_iter_reset(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a2;
  return cmark_iter_next(a1);
}

uint64_t cmark_iter_get_event_type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t cmark_iter_get_root(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *cmark_node_own(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    uint64_t v2 = (uint64_t (**)(uint64_t, uint64_t))*result;
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))*result)(1, 48);
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v1;
    *(_DWORD *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 32) = 2;
    *(void *)(v3 + 40) = v1;
    for (int i = cmark_iter_next(v3); i != 1; int i = cmark_iter_next(v3))
    {
      if (i == 2)
      {
        uint64_t v5 = *(void *)(v3 + 24);
        switch(*(_WORD *)(v5 + 100))
        {
          case 0xC001:
          case 0xC004:
          case 0xC005:
            goto LABEL_5;
          case 0xC002:
          case 0xC003:
          case 0xC007:
          case 0xC008:
            continue;
          case 0xC006:
          case 0xC009:
            if (!*(_DWORD *)(v5 + 156))
            {
              BOOL v10 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))v3)(*(int *)(v5 + 152) + 1, 1);
              uint64_t v11 = v10;
              size_t v12 = *(unsigned int *)(v5 + 152);
              if ((int)v12 >= 1)
              {
                memcpy(v10, *(const void **)(v5 + 144), v12);
                LODWORD(v12) = *(_DWORD *)(v5 + 152);
              }
              v11[(int)v12] = 0;
              *(void *)(v5 + 144) = v11;
              *(_DWORD *)(v5 + 156) = 1;
            }
            unsigned int v6 = (_DWORD *)(v5 + 172);
            if (*(_DWORD *)(v5 + 172)) {
              continue;
            }
            uint64_t v13 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))v3)(*(int *)(v5 + 168) + 1, 1);
            uint64_t v14 = v13;
            size_t v15 = *(unsigned int *)(v5 + 168);
            if ((int)v15 >= 1)
            {
              memcpy(v13, *(const void **)(v5 + 160), v15);
              LODWORD(v15) = *(_DWORD *)(v5 + 168);
            }
            v14[(int)v15] = 0;
            *(void *)(v5 + 160) = v14;
            goto LABEL_17;
          default:
            if (*(unsigned __int16 *)(v5 + 100) != 32774) {
              continue;
            }
LABEL_5:
            unsigned int v6 = (_DWORD *)(v5 + 156);
            if (*(_DWORD *)(v5 + 156)) {
              continue;
            }
            unsigned int v7 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))v3)(*(int *)(v5 + 152) + 1, 1);
            uint64_t v8 = v7;
            size_t v9 = *(unsigned int *)(v5 + 152);
            if ((int)v9 >= 1)
            {
              memcpy(v7, *(const void **)(v5 + 144), v9);
              LODWORD(v9) = *(_DWORD *)(v5 + 152);
            }
            v8[(int)v9] = 0;
            *(void *)(v5 + 144) = v8;
LABEL_17:
            *unsigned int v6 = 1;
            break;
        }
      }
    }
    BOOL v16 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 16);
    return (void *)v16(v3);
  }
  return result;
}

uint64_t cmark_render_latex(uint64_t *a1, uint64_t a2, int a3)
{
  return cmark_render(*a1, (uint64_t)a1, a2, a3, (uint64_t)outc_0, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_1);
}

uint64_t cmark_render_latex_with_mem(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return cmark_render(a4, a1, a2, a3, (uint64_t)outc_0, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_1);
}

_DWORD *outc_0(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v6 = a1;
  if (!a3)
  {
LABEL_19:
    a1 = v6;
    unsigned int v8 = a4;
LABEL_20:
    return cmark_render_code_point(a1, v8);
  }
  if (a4 > 122)
  {
    if (a4 <= 8210)
    {
      switch(a4)
      {
        case '{':
        case '}':
LABEL_18:
          cmark_render_ascii(a1, "\\"");
          goto LABEL_19;
        case '|':
          unsigned int v7 = "\\textbar{}";
          goto LABEL_55;
        case '~':
          if (a3 == 1)
          {
            unsigned int v7 = "\\textasciitilde{}";
            goto LABEL_55;
          }
          unsigned int v8 = 126;
          break;
        default:
          if (a4 != 160) {
            goto LABEL_19;
          }
          unsigned int v7 = "~";
          goto LABEL_55;
      }
    }
    else
    {
      switch(a4)
      {
        case 8211:
          if (a3 == 1)
          {
            unsigned int v7 = "--";
            goto LABEL_55;
          }
          unsigned int v8 = 8211;
          goto LABEL_20;
        case 8212:
          if (a3 == 1)
          {
            unsigned int v7 = "---";
            goto LABEL_55;
          }
          unsigned int v8 = 8212;
          goto LABEL_20;
        case 8213:
        case 8214:
        case 8215:
        case 8218:
        case 8219:
          goto LABEL_19;
        case 8216:
          if (a3 == 1)
          {
            goto LABEL_55;
          }
          unsigned int v8 = 8216;
          goto LABEL_20;
        case 8217:
          if (a3 == 1)
          {
            unsigned int v7 = "'";
            goto LABEL_55;
          }
          unsigned int v8 = 8217;
          goto LABEL_20;
        case 8220:
          if (a3 == 1)
          {
            goto LABEL_55;
          }
          unsigned int v8 = 8220;
          goto LABEL_20;
        case 8221:
          if (a3 == 1)
          {
            unsigned int v7 = "''";
            goto LABEL_55;
          }
          unsigned int v8 = 8221;
          break;
        default:
          if (a4 != 8230) {
            goto LABEL_19;
          }
          unsigned int v7 = "\\ldots{}";
          goto LABEL_55;
      }
    }
    goto LABEL_20;
  }
  if (a4 <= 59)
  {
    switch(a4)
    {
      case '""':
        unsigned int v7 = "\\textquotedbl{}";
        goto LABEL_55;
      case '#':
      case '%':
      case '&':
        goto LABEL_18;
      case '$':
        goto LABEL_17;
      case '\'':
        unsigned int v7 = "\\textquotesingle{}";
        goto LABEL_55;
      case '-':
        if (a5 == 45) {
          unsigned int v7 = "-{}";
        }
        else {
          unsigned int v7 = "-";
        }
        goto LABEL_55;
      default:
        goto LABEL_19;
    }
  }
  switch(a4)
  {
    case '[':
    case ']':
      cmark_render_ascii(a1, "{");
      cmark_render_code_point(v6, a4);
      unsigned int v7 = "}";
      break;
    case '\\':
      if (a3 == 3) {
        unsigned int v7 = "/";
      }
      else {
        unsigned int v7 = "\\textbackslash{}";
      }
      break;
    case '^':
      unsigned int v7 = "\\^{}";
      break;
    case '_':
LABEL_17:
      if (a3 == 1) {
        goto LABEL_18;
      }
      goto LABEL_19;
    default:
      if (a4 == 60)
      {
        unsigned int v7 = "\\textless{}";
      }
      else
      {
        if (a4 != 62) {
          goto LABEL_19;
        }
        unsigned int v7 = "\\textgreater{}";
      }
      break;
  }
LABEL_55:

  return cmark_render_ascii(v6, v7);
}

uint64_t S_render_node_1(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = v7 > 0 && (a4 & 0x10) == 0;
  uint64_t v9 = *(void *)(a2 + 112);
  if (v9 && (BOOL v10 = *(void (**)(void))(v9 + 112)) != 0)
  {
    v10();
    return 1;
  }
  else
  {
    uint64_t v11 = 1;
    switch(*(_WORD *)(a2 + 100))
    {
      case 0xC001:
        size_t v12 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        literal = cmark_node_get_literal(a2);
        v12(a1, a2, literal, v8, 1);
        return v11;
      case 0xC002:
        if ((a4 & 4) != 0) {
          goto LABEL_16;
        }
        if (!(v7 | a4 & 0x10)) {
          goto LABEL_46;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, BOOL, uint64_t))(a1 + 72))(a1, a2, " ", v8, 1);
        return v11;
      case 0xC003:
LABEL_16:
        uint64_t v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        size_t v15 = "\\\\"";
LABEL_17:
        v14(a1, a2, v15, 0, 0);
LABEL_46:
        (*(void (**)(uint64_t))(a1 + 56))(a1);
        return v11;
      case 0xC004:
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\texttt{", 0, 0);
        BOOL v16 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72);
        int v17 = cmark_node_get_literal(a2);
        v16(a1, a2, v17, 0, 1);
        goto LABEL_30;
      case 0xC005:
      case 0xC00B:
      case 0xC00C:
        return v11;
      case 0xC006:
        int v18 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        if (a3 == 2) {
          int v19 = cmark_node_get_on_enter(a2);
        }
        else {
          int v19 = cmark_node_get_on_exit(a2);
        }
        v18(a1, a2, v19, 0, 0);
        return 1;
      case 0xC007:
        unsigned int v20 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 != 2) {
          goto LABEL_31;
        }
        unsigned int v21 = "\\emph{";
        goto LABEL_32;
      case 0xC008:
        uint64_t v22 = *(void *)(a2 + 40);
        if (v22 && *(unsigned __int16 *)(v22 + 100) == 49160) {
          return v11;
        }
        unsigned int v20 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
        if (a3 != 2) {
          goto LABEL_31;
        }
        unsigned int v21 = "\\textbf{";
        goto LABEL_32;
      case 0xC009:
        if (a3 == 2)
        {
          url = cmark_node_get_url(a2);
          switch(get_link_type(a2))
          {
            case 0u:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "{", 0, 0);
              return 1;
            case 1u:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\url{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, url, 0, 3);
              goto LABEL_35;
            case 2u:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\href{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, url, 0, 3);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}\\nolinkurl{", 0, 0);
              return 1;
            case 3u:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\href{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, url, 0, 3);
              break;
            case 4u:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\protect\\hyperlink{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72))(a1, a2, url + 1, 0, 3);
              break;
            default:
              return 1;
          }
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}{", 0, 0);
          return 1;
        }
LABEL_30:
        unsigned int v20 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
LABEL_31:
        unsigned int v21 = "}";
LABEL_32:
        v20(a1, a2, v21, 0, 0);
        break;
      case 0xC00A:
        if (a3 == 2)
        {
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\protect\\includegraphics{", 0, 0);
          int v24 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t))(a1 + 72);
          unsigned int v25 = cmark_node_get_url(a2);
          v24(a1, a2, v25, 0, 3);
LABEL_35:
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}", 0, 0);
          return 0;
        }
        return v11;
      default:
        switch(*(_WORD *)(a2 + 100))
        {
          case 0x8001:
          case 0x8006:
          case 0x800B:
            return v11;
          case 0x8002:
            uint64_t v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            if (a3 == 2)
            {
              size_t v15 = "\\begin{quote}";
              goto LABEL_17;
            }
            char v39 = "\\end{quote}";
            goto LABEL_66;
          case 0x8003:
            list_int type = cmark_node_get_list_type(a2);
            int v27 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            if (list_type == 2) {
              unsigned int v28 = "enumerate";
            }
            else {
              unsigned int v28 = "itemize";
            }
            if (a3 == 2)
            {
              v27(a1, a2, "\\begin{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, v28, 0, 0);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}", 0, 0);
              (*(void (**)(uint64_t))(a1 + 56))(a1);
              int list_start = cmark_node_get_list_start(a2);
              if (list_start >= 2)
              {
                int v30 = list_start;
                int enumlevel = S_get_enumlevel(a2);
                if ((enumlevel - 1) <= 4)
                {
                  int v32 = enumlevel;
                  snprintf(__str, 0x14uLL, "%d", v30);
                  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\setcounter{enum", 0, 0);
                  if ((v32 - 2) > 3) {
                    uint64_t v33 = "i";
                  }
                  else {
                    uint64_t v33 = off_2643F2CB8[v32 - 2];
                  }
                  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, v33, 0, 0);
                  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}{", 0, 0);
                  (*(void (**)(uint64_t, uint64_t, char *, void, uint64_t))(a1 + 72))(a1, a2, __str, 0, 1);
                  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}", 0, 0);
                }
LABEL_64:
                (*(void (**)(uint64_t))(a1 + 56))(a1);
              }
            }
            else
            {
              v27(a1, a2, "\\end{", 0, 0);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, v28, 0, 0);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "}", 0, 0);
LABEL_61:
              (*(void (**)(uint64_t))(a1 + 64))(a1);
            }
            return 1;
          case 0x8004:
            if (a3 != 2) {
              goto LABEL_46;
            }
            unsigned int v20 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            unsigned int v21 = "\\item ";
            goto LABEL_32;
          case 0x8005:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\begin{verbatim}", 0, 0);
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            int v34 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            uint64_t v35 = cmark_node_get_literal(a2);
            v34(a1, a2, v35, 0, 0);
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\end{verbatim}", 0, 0);
            goto LABEL_61;
          case 0x8007:
            (*(void (**)(uint64_t))(a1 + 56))(a1);
            char v36 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            if (a3 == 2) {
              unsigned int v37 = cmark_node_get_on_enter(a2);
            }
            else {
              unsigned int v37 = cmark_node_get_on_exit(a2);
            }
            v36(a1, a2, v37, 0, 0);
            goto LABEL_64;
          case 0x8008:
            if (a3 == 2) {
              return v11;
            }
            goto LABEL_67;
          case 0x8009:
            if (a3 == 2)
            {
              unsigned int v38 = cmark_node_get_heading_level(a2) - 1;
              if (v38 <= 4) {
                (*(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72))(a1, a2, off_2643F2CD8[v38], 0, 0);
              }
              unsigned int v20 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
              unsigned int v21 = "{";
              goto LABEL_32;
            }
            uint64_t v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72);
            char v39 = "}";
LABEL_66:
            v14(a1, a2, v39, 0, 0);
LABEL_67:
            (*(void (**)(uint64_t))(a1 + 64))(a1);
            break;
          case 0x800A:
            (*(void (**)(uint64_t))(a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "\\begin{center}\\rule{0.5\\linewidth}{\\linethickness}\\end{center}", 0, 0);
            goto LABEL_67;
          default:
            S_render_node_cold_1_1();
        }
        return v11;
    }
  }
  return v11;
}

uint64_t S_get_enumlevel(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a1;
  do
  {
    if (*(unsigned __int16 *)(v3 + 100) == 32771)
    {
      if (cmark_node_get_list_type(a1) == 2) {
        uint64_t v2 = (v2 + 1);
      }
      else {
        uint64_t v2 = v2;
      }
    }
    uint64_t v3 = *(void *)(v3 + 40);
  }
  while (v3);
  return v2;
}

uint64_t get_link_type(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 100) != 49161) {
    return 0;
  }
  url = cmark_node_get_url(a1);
  uint64_t v3 = url;
  if (url)
  {
    size_t v15 = url;
    uint64_t v16 = strlen(url);
    if (*v3 == 35) {
      return 4;
    }
  }
  else
  {
    size_t v15 = 0;
    uint64_t v16 = 0;
  }
  size_t v5 = strlen(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (!_scan_at((uint64_t (*)(uint64_t))_scan_scheme, (uint64_t *)&v15, 0)) {
    return 0;
  }
  if (*cmark_node_get_title(a1)) {
    return 3;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  cmark_consolidate_text_nodes((void *)v7);
  if (!v7) {
    return 0;
  }
  int v8 = strncmp(v3, "mailto:", 7uLL);
  int v9 = v6 - 7;
  if (v8) {
    int v9 = v6;
  }
  uint64_t v4 = 3;
  if (v9 == *(_DWORD *)(v7 + 152))
  {
    BOOL v10 = v8 == 0;
    uint64_t v11 = 7;
    if (v8) {
      uint64_t v11 = 0;
    }
    size_t v12 = &v3[v11];
    if (v10) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = 1;
    }
    if (!strncmp(v12, *(const char **)(v7 + 144), v9)) {
      return v13;
    }
    else {
      return 3;
    }
  }
  return v4;
}

uint64_t _scan_scheme(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 < 0x41) {
    return 0;
  }
  if (v1 >= 0x5B && v1 - 97 > 0x19) {
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 > 0x2F)
  {
    if (v3 > 0x5A)
    {
      if (v3 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v3 - 58 < 7)
    {
      return 0;
    }
LABEL_17:
    int v5 = a1 + 2;
    unsigned int v6 = a1[2];
    if (v6 > 0x39)
    {
      if (v6 > 0x5A)
      {
        if (v6 - 97 > 0x19) {
          return 0;
        }
      }
      else
      {
        if (v6 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v6 <= 0x40) {
          return 0;
        }
      }
    }
    else if (v6 > 0x2C)
    {
      if (v6 == 47) {
        return 0;
      }
    }
    else if (v6 != 43)
    {
      return 0;
    }
    int v5 = a1 + 3;
    unsigned int v7 = a1[3];
    if (v7 > 0x39)
    {
      if (v7 > 0x5A)
      {
        if (v7 - 97 >= 0x1A) {
          return 0;
        }
      }
      else
      {
        if (v7 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v7 < 0x41) {
          return 0;
        }
      }
    }
    else if (v7 > 0x2C)
    {
      if (v7 == 47) {
        return 0;
      }
    }
    else if (v7 != 43)
    {
      return 0;
    }
    int v5 = a1 + 4;
    unsigned int v8 = a1[4];
    if (v8 > 0x39)
    {
      if (v8 > 0x5A)
      {
        if (v8 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v8 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v8 < 0x41) {
          return 0;
        }
      }
    }
    else if (v8 > 0x2C)
    {
      if (v8 == 47) {
        return 0;
      }
    }
    else if (v8 != 43)
    {
      return 0;
    }
    int v5 = a1 + 5;
    unsigned int v9 = a1[5];
    if (v9 > 0x39)
    {
      if (v9 > 0x5A)
      {
        if (v9 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v9 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v9 < 0x41) {
          return 0;
        }
      }
    }
    else if (v9 > 0x2C)
    {
      if (v9 == 47) {
        return 0;
      }
    }
    else if (v9 != 43)
    {
      return 0;
    }
    int v5 = a1 + 6;
    unsigned int v10 = a1[6];
    if (v10 > 0x39)
    {
      if (v10 > 0x5A)
      {
        if (v10 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v10 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v10 < 0x41) {
          return 0;
        }
      }
    }
    else if (v10 > 0x2C)
    {
      if (v10 == 47) {
        return 0;
      }
    }
    else if (v10 != 43)
    {
      return 0;
    }
    int v5 = a1 + 7;
    unsigned int v11 = a1[7];
    if (v11 > 0x39)
    {
      if (v11 > 0x5A)
      {
        if (v11 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v11 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v11 < 0x41) {
          return 0;
        }
      }
    }
    else if (v11 > 0x2C)
    {
      if (v11 == 47) {
        return 0;
      }
    }
    else if (v11 != 43)
    {
      return 0;
    }
    int v5 = a1 + 8;
    unsigned int v12 = a1[8];
    if (v12 > 0x39)
    {
      if (v12 > 0x5A)
      {
        if (v12 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v12 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v12 < 0x41) {
          return 0;
        }
      }
    }
    else if (v12 > 0x2C)
    {
      if (v12 == 47) {
        return 0;
      }
    }
    else if (v12 != 43)
    {
      return 0;
    }
    int v5 = a1 + 9;
    unsigned int v13 = a1[9];
    if (v13 > 0x39)
    {
      if (v13 > 0x5A)
      {
        if (v13 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v13 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v13 < 0x41) {
          return 0;
        }
      }
    }
    else if (v13 > 0x2C)
    {
      if (v13 == 47) {
        return 0;
      }
    }
    else if (v13 != 43)
    {
      return 0;
    }
    int v5 = a1 + 10;
    unsigned int v14 = a1[10];
    if (v14 > 0x39)
    {
      if (v14 > 0x5A)
      {
        if (v14 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v14 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v14 < 0x41) {
          return 0;
        }
      }
    }
    else if (v14 > 0x2C)
    {
      if (v14 == 47) {
        return 0;
      }
    }
    else if (v14 != 43)
    {
      return 0;
    }
    int v5 = a1 + 11;
    unsigned int v15 = a1[11];
    if (v15 > 0x39)
    {
      if (v15 > 0x5A)
      {
        if (v15 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v15 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v15 < 0x41) {
          return 0;
        }
      }
    }
    else if (v15 > 0x2C)
    {
      if (v15 == 47) {
        return 0;
      }
    }
    else if (v15 != 43)
    {
      return 0;
    }
    int v5 = a1 + 12;
    unsigned int v16 = a1[12];
    if (v16 > 0x39)
    {
      if (v16 > 0x5A)
      {
        if (v16 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v16 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v16 < 0x41) {
          return 0;
        }
      }
    }
    else if (v16 > 0x2C)
    {
      if (v16 == 47) {
        return 0;
      }
    }
    else if (v16 != 43)
    {
      return 0;
    }
    int v5 = a1 + 13;
    unsigned int v17 = a1[13];
    if (v17 > 0x39)
    {
      if (v17 > 0x5A)
      {
        if (v17 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v17 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v17 < 0x41) {
          return 0;
        }
      }
    }
    else if (v17 > 0x2C)
    {
      if (v17 == 47) {
        return 0;
      }
    }
    else if (v17 != 43)
    {
      return 0;
    }
    int v5 = a1 + 14;
    unsigned int v18 = a1[14];
    if (v18 > 0x39)
    {
      if (v18 > 0x5A)
      {
        if (v18 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v18 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v18 < 0x41) {
          return 0;
        }
      }
    }
    else if (v18 > 0x2C)
    {
      if (v18 == 47) {
        return 0;
      }
    }
    else if (v18 != 43)
    {
      return 0;
    }
    int v5 = a1 + 15;
    unsigned int v19 = a1[15];
    if (v19 > 0x39)
    {
      if (v19 > 0x5A)
      {
        if (v19 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v19 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v19 < 0x41) {
          return 0;
        }
      }
    }
    else if (v19 > 0x2C)
    {
      if (v19 == 47) {
        return 0;
      }
    }
    else if (v19 != 43)
    {
      return 0;
    }
    int v5 = a1 + 16;
    unsigned int v20 = a1[16];
    if (v20 > 0x39)
    {
      if (v20 > 0x5A)
      {
        if (v20 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v20 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v20 < 0x41) {
          return 0;
        }
      }
    }
    else if (v20 > 0x2C)
    {
      if (v20 == 47) {
        return 0;
      }
    }
    else if (v20 != 43)
    {
      return 0;
    }
    int v5 = a1 + 17;
    unsigned int v21 = a1[17];
    if (v21 > 0x39)
    {
      if (v21 > 0x5A)
      {
        if (v21 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v21 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v21 < 0x41) {
          return 0;
        }
      }
    }
    else if (v21 > 0x2C)
    {
      if (v21 == 47) {
        return 0;
      }
    }
    else if (v21 != 43)
    {
      return 0;
    }
    int v5 = a1 + 18;
    unsigned int v22 = a1[18];
    if (v22 > 0x39)
    {
      if (v22 > 0x5A)
      {
        if (v22 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v22 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v22 < 0x41) {
          return 0;
        }
      }
    }
    else if (v22 > 0x2C)
    {
      if (v22 == 47) {
        return 0;
      }
    }
    else if (v22 != 43)
    {
      return 0;
    }
    int v5 = a1 + 19;
    unsigned int v23 = a1[19];
    if (v23 > 0x39)
    {
      if (v23 > 0x5A)
      {
        if (v23 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v23 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v23 < 0x41) {
          return 0;
        }
      }
    }
    else if (v23 > 0x2C)
    {
      if (v23 == 47) {
        return 0;
      }
    }
    else if (v23 != 43)
    {
      return 0;
    }
    int v5 = a1 + 20;
    unsigned int v24 = a1[20];
    if (v24 > 0x39)
    {
      if (v24 > 0x5A)
      {
        if (v24 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v24 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v24 < 0x41) {
          return 0;
        }
      }
    }
    else if (v24 > 0x2C)
    {
      if (v24 == 47) {
        return 0;
      }
    }
    else if (v24 != 43)
    {
      return 0;
    }
    int v5 = a1 + 21;
    unsigned int v25 = a1[21];
    if (v25 > 0x39)
    {
      if (v25 > 0x5A)
      {
        if (v25 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v25 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v25 < 0x41) {
          return 0;
        }
      }
    }
    else if (v25 > 0x2C)
    {
      if (v25 == 47) {
        return 0;
      }
    }
    else if (v25 != 43)
    {
      return 0;
    }
    int v5 = a1 + 22;
    unsigned int v26 = a1[22];
    if (v26 > 0x39)
    {
      if (v26 > 0x5A)
      {
        if (v26 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v26 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v26 < 0x41) {
          return 0;
        }
      }
    }
    else if (v26 > 0x2C)
    {
      if (v26 == 47) {
        return 0;
      }
    }
    else if (v26 != 43)
    {
      return 0;
    }
    int v5 = a1 + 23;
    unsigned int v27 = a1[23];
    if (v27 > 0x39)
    {
      if (v27 > 0x5A)
      {
        if (v27 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v27 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v27 < 0x41) {
          return 0;
        }
      }
    }
    else if (v27 > 0x2C)
    {
      if (v27 == 47) {
        return 0;
      }
    }
    else if (v27 != 43)
    {
      return 0;
    }
    int v5 = a1 + 24;
    unsigned int v28 = a1[24];
    if (v28 > 0x39)
    {
      if (v28 > 0x5A)
      {
        if (v28 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v28 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v28 < 0x41) {
          return 0;
        }
      }
    }
    else if (v28 > 0x2C)
    {
      if (v28 == 47) {
        return 0;
      }
    }
    else if (v28 != 43)
    {
      return 0;
    }
    int v5 = a1 + 25;
    unsigned int v29 = a1[25];
    if (v29 > 0x39)
    {
      if (v29 > 0x5A)
      {
        if (v29 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v29 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v29 < 0x41) {
          return 0;
        }
      }
    }
    else if (v29 > 0x2C)
    {
      if (v29 == 47) {
        return 0;
      }
    }
    else if (v29 != 43)
    {
      return 0;
    }
    int v5 = a1 + 26;
    unsigned int v30 = a1[26];
    if (v30 > 0x39)
    {
      if (v30 > 0x5A)
      {
        if (v30 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v30 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v30 < 0x41) {
          return 0;
        }
      }
    }
    else if (v30 > 0x2C)
    {
      if (v30 == 47) {
        return 0;
      }
    }
    else if (v30 != 43)
    {
      return 0;
    }
    int v5 = a1 + 27;
    unsigned int v31 = a1[27];
    if (v31 > 0x39)
    {
      if (v31 > 0x5A)
      {
        if (v31 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v31 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v31 < 0x41) {
          return 0;
        }
      }
    }
    else if (v31 > 0x2C)
    {
      if (v31 == 47) {
        return 0;
      }
    }
    else if (v31 != 43)
    {
      return 0;
    }
    int v5 = a1 + 28;
    unsigned int v32 = a1[28];
    if (v32 > 0x39)
    {
      if (v32 > 0x5A)
      {
        if (v32 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v32 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v32 < 0x41) {
          return 0;
        }
      }
    }
    else if (v32 > 0x2C)
    {
      if (v32 == 47) {
        return 0;
      }
    }
    else if (v32 != 43)
    {
      return 0;
    }
    int v5 = a1 + 29;
    unsigned int v33 = a1[29];
    if (v33 > 0x39)
    {
      if (v33 > 0x5A)
      {
        if (v33 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v33 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v33 < 0x41) {
          return 0;
        }
      }
    }
    else if (v33 > 0x2C)
    {
      if (v33 == 47) {
        return 0;
      }
    }
    else if (v33 != 43)
    {
      return 0;
    }
    int v5 = a1 + 30;
    unsigned int v34 = a1[30];
    if (v34 > 0x39)
    {
      if (v34 > 0x5A)
      {
        if (v34 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v34 < 0x3B) {
          return (v5 - a1 + 1);
        }
        if (v34 < 0x41) {
          return 0;
        }
      }
    }
    else if (v34 > 0x2C)
    {
      if (v34 == 47) {
        return 0;
      }
    }
    else if (v34 != 43)
    {
      return 0;
    }
    int v5 = a1 + 31;
    unsigned int v35 = a1[31];
    if (v35 <= 0x39)
    {
      if (v35 > 0x2C)
      {
        if (v35 == 47) {
          return 0;
        }
      }
      else if (v35 != 43)
      {
        return 0;
      }
LABEL_347:
      int v5 = a1 + 32;
      if (a1[32] == 58) {
        return (v5 - a1 + 1);
      }
      return 0;
    }
    if (v35 > 0x5A)
    {
      if (v35 - 123 < 0xFFFFFFE6) {
        return 0;
      }
      goto LABEL_347;
    }
    if (v35 >= 0x3B)
    {
      if (v35 < 0x41) {
        return 0;
      }
      goto LABEL_347;
    }
    return (v5 - a1 + 1);
  }
  if (v3 <= 0x2B)
  {
    if (v3 != 43) {
      return 0;
    }
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  if (v3 != 44 && v3 <= 0x2E) {
    goto LABEL_17;
  }
  return v4;
}

unsigned __int8 *_scan_autolink_uri(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 < 0x41) {
    return 0;
  }
  if (v1 >= 0x5B && v1 - 97 > 0x19) {
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 > 0x2F)
  {
    if (v3 > 0x5A)
    {
      if (v3 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v3 - 58 < 7)
    {
      return 0;
    }
    goto LABEL_17;
  }
  if (v3 <= 0x2B)
  {
    if (v3 != 43) {
      return 0;
    }
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  if (v3 != 44 && v3 <= 0x2E)
  {
LABEL_17:
    unsigned int v6 = a1 + 2;
    unsigned int v5 = a1[2];
    if (v5 > 0x39)
    {
      if (v5 > 0x5A)
      {
        if (v5 - 97 > 0x19) {
          return 0;
        }
      }
      else
      {
        if (v5 < 0x3B) {
          goto LABEL_348;
        }
        if (v5 <= 0x40) {
          return 0;
        }
      }
    }
    else if (v5 > 0x2C)
    {
      if (v5 == 47) {
        return 0;
      }
    }
    else if (v5 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 3;
    unsigned int v7 = a1[3];
    if (v7 > 0x39)
    {
      if (v7 > 0x5A)
      {
        if (v7 - 97 >= 0x1A) {
          return 0;
        }
      }
      else
      {
        if (v7 < 0x3B) {
          goto LABEL_348;
        }
        if (v7 < 0x41) {
          return 0;
        }
      }
    }
    else if (v7 > 0x2C)
    {
      if (v7 == 47) {
        return 0;
      }
    }
    else if (v7 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 4;
    unsigned int v8 = a1[4];
    if (v8 > 0x39)
    {
      if (v8 > 0x5A)
      {
        if (v8 - 97 >= 0x1A) {
          return 0;
        }
      }
      else
      {
        if (v8 < 0x3B) {
          goto LABEL_348;
        }
        if (v8 < 0x41) {
          return 0;
        }
      }
    }
    else if (v8 > 0x2C)
    {
      if (v8 == 47) {
        return 0;
      }
    }
    else if (v8 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 5;
    unsigned int v9 = a1[5];
    if (v9 > 0x39)
    {
      if (v9 > 0x5A)
      {
        if (v9 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v9 < 0x3B) {
          goto LABEL_348;
        }
        if (v9 < 0x41) {
          return 0;
        }
      }
    }
    else if (v9 > 0x2C)
    {
      if (v9 == 47) {
        return 0;
      }
    }
    else if (v9 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 6;
    unsigned int v10 = a1[6];
    if (v10 > 0x39)
    {
      if (v10 > 0x5A)
      {
        if (v10 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v10 < 0x3B) {
          goto LABEL_348;
        }
        if (v10 < 0x41) {
          return 0;
        }
      }
    }
    else if (v10 > 0x2C)
    {
      if (v10 == 47) {
        return 0;
      }
    }
    else if (v10 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 7;
    unsigned int v11 = a1[7];
    if (v11 > 0x39)
    {
      if (v11 > 0x5A)
      {
        if (v11 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v11 < 0x3B) {
          goto LABEL_348;
        }
        if (v11 < 0x41) {
          return 0;
        }
      }
    }
    else if (v11 > 0x2C)
    {
      if (v11 == 47) {
        return 0;
      }
    }
    else if (v11 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 8;
    unsigned int v12 = a1[8];
    if (v12 > 0x39)
    {
      if (v12 > 0x5A)
      {
        if (v12 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v12 < 0x3B) {
          goto LABEL_348;
        }
        if (v12 < 0x41) {
          return 0;
        }
      }
    }
    else if (v12 > 0x2C)
    {
      if (v12 == 47) {
        return 0;
      }
    }
    else if (v12 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 9;
    unsigned int v13 = a1[9];
    if (v13 > 0x39)
    {
      if (v13 > 0x5A)
      {
        if (v13 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v13 < 0x3B) {
          goto LABEL_348;
        }
        if (v13 < 0x41) {
          return 0;
        }
      }
    }
    else if (v13 > 0x2C)
    {
      if (v13 == 47) {
        return 0;
      }
    }
    else if (v13 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 10;
    unsigned int v14 = a1[10];
    if (v14 > 0x39)
    {
      if (v14 > 0x5A)
      {
        if (v14 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v14 < 0x3B) {
          goto LABEL_348;
        }
        if (v14 < 0x41) {
          return 0;
        }
      }
    }
    else if (v14 > 0x2C)
    {
      if (v14 == 47) {
        return 0;
      }
    }
    else if (v14 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 11;
    unsigned int v15 = a1[11];
    if (v15 > 0x39)
    {
      if (v15 > 0x5A)
      {
        if (v15 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v15 < 0x3B) {
          goto LABEL_348;
        }
        if (v15 < 0x41) {
          return 0;
        }
      }
    }
    else if (v15 > 0x2C)
    {
      if (v15 == 47) {
        return 0;
      }
    }
    else if (v15 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 12;
    unsigned int v16 = a1[12];
    if (v16 > 0x39)
    {
      if (v16 > 0x5A)
      {
        if (v16 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v16 < 0x3B) {
          goto LABEL_348;
        }
        if (v16 < 0x41) {
          return 0;
        }
      }
    }
    else if (v16 > 0x2C)
    {
      if (v16 == 47) {
        return 0;
      }
    }
    else if (v16 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 13;
    unsigned int v17 = a1[13];
    if (v17 > 0x39)
    {
      if (v17 > 0x5A)
      {
        if (v17 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v17 < 0x3B) {
          goto LABEL_348;
        }
        if (v17 < 0x41) {
          return 0;
        }
      }
    }
    else if (v17 > 0x2C)
    {
      if (v17 == 47) {
        return 0;
      }
    }
    else if (v17 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 14;
    unsigned int v18 = a1[14];
    if (v18 > 0x39)
    {
      if (v18 > 0x5A)
      {
        if (v18 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v18 < 0x3B) {
          goto LABEL_348;
        }
        if (v18 < 0x41) {
          return 0;
        }
      }
    }
    else if (v18 > 0x2C)
    {
      if (v18 == 47) {
        return 0;
      }
    }
    else if (v18 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 15;
    unsigned int v19 = a1[15];
    if (v19 > 0x39)
    {
      if (v19 > 0x5A)
      {
        if (v19 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v19 < 0x3B) {
          goto LABEL_348;
        }
        if (v19 < 0x41) {
          return 0;
        }
      }
    }
    else if (v19 > 0x2C)
    {
      if (v19 == 47) {
        return 0;
      }
    }
    else if (v19 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 16;
    unsigned int v20 = a1[16];
    if (v20 > 0x39)
    {
      if (v20 > 0x5A)
      {
        if (v20 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v20 < 0x3B) {
          goto LABEL_348;
        }
        if (v20 < 0x41) {
          return 0;
        }
      }
    }
    else if (v20 > 0x2C)
    {
      if (v20 == 47) {
        return 0;
      }
    }
    else if (v20 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 17;
    unsigned int v21 = a1[17];
    if (v21 > 0x39)
    {
      if (v21 > 0x5A)
      {
        if (v21 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v21 < 0x3B) {
          goto LABEL_348;
        }
        if (v21 < 0x41) {
          return 0;
        }
      }
    }
    else if (v21 > 0x2C)
    {
      if (v21 == 47) {
        return 0;
      }
    }
    else if (v21 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 18;
    unsigned int v22 = a1[18];
    if (v22 > 0x39)
    {
      if (v22 > 0x5A)
      {
        if (v22 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v22 < 0x3B) {
          goto LABEL_348;
        }
        if (v22 < 0x41) {
          return 0;
        }
      }
    }
    else if (v22 > 0x2C)
    {
      if (v22 == 47) {
        return 0;
      }
    }
    else if (v22 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 19;
    unsigned int v23 = a1[19];
    if (v23 > 0x39)
    {
      if (v23 > 0x5A)
      {
        if (v23 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v23 < 0x3B) {
          goto LABEL_348;
        }
        if (v23 < 0x41) {
          return 0;
        }
      }
    }
    else if (v23 > 0x2C)
    {
      if (v23 == 47) {
        return 0;
      }
    }
    else if (v23 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 20;
    unsigned int v24 = a1[20];
    if (v24 > 0x39)
    {
      if (v24 > 0x5A)
      {
        if (v24 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v24 < 0x3B) {
          goto LABEL_348;
        }
        if (v24 < 0x41) {
          return 0;
        }
      }
    }
    else if (v24 > 0x2C)
    {
      if (v24 == 47) {
        return 0;
      }
    }
    else if (v24 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 21;
    unsigned int v25 = a1[21];
    if (v25 > 0x39)
    {
      if (v25 > 0x5A)
      {
        if (v25 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v25 < 0x3B) {
          goto LABEL_348;
        }
        if (v25 < 0x41) {
          return 0;
        }
      }
    }
    else if (v25 > 0x2C)
    {
      if (v25 == 47) {
        return 0;
      }
    }
    else if (v25 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 22;
    unsigned int v26 = a1[22];
    if (v26 > 0x39)
    {
      if (v26 > 0x5A)
      {
        if (v26 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v26 < 0x3B) {
          goto LABEL_348;
        }
        if (v26 < 0x41) {
          return 0;
        }
      }
    }
    else if (v26 > 0x2C)
    {
      if (v26 == 47) {
        return 0;
      }
    }
    else if (v26 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 23;
    unsigned int v27 = a1[23];
    if (v27 > 0x39)
    {
      if (v27 > 0x5A)
      {
        if (v27 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v27 < 0x3B) {
          goto LABEL_348;
        }
        if (v27 < 0x41) {
          return 0;
        }
      }
    }
    else if (v27 > 0x2C)
    {
      if (v27 == 47) {
        return 0;
      }
    }
    else if (v27 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 24;
    unsigned int v28 = a1[24];
    if (v28 > 0x39)
    {
      if (v28 > 0x5A)
      {
        if (v28 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v28 < 0x3B) {
          goto LABEL_348;
        }
        if (v28 < 0x41) {
          return 0;
        }
      }
    }
    else if (v28 > 0x2C)
    {
      if (v28 == 47) {
        return 0;
      }
    }
    else if (v28 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 25;
    unsigned int v29 = a1[25];
    if (v29 > 0x39)
    {
      if (v29 > 0x5A)
      {
        if (v29 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v29 < 0x3B) {
          goto LABEL_348;
        }
        if (v29 < 0x41) {
          return 0;
        }
      }
    }
    else if (v29 > 0x2C)
    {
      if (v29 == 47) {
        return 0;
      }
    }
    else if (v29 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 26;
    unsigned int v30 = a1[26];
    if (v30 > 0x39)
    {
      if (v30 > 0x5A)
      {
        if (v30 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v30 < 0x3B) {
          goto LABEL_348;
        }
        if (v30 < 0x41) {
          return 0;
        }
      }
    }
    else if (v30 > 0x2C)
    {
      if (v30 == 47) {
        return 0;
      }
    }
    else if (v30 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 27;
    unsigned int v31 = a1[27];
    if (v31 > 0x39)
    {
      if (v31 > 0x5A)
      {
        if (v31 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v31 < 0x3B) {
          goto LABEL_348;
        }
        if (v31 < 0x41) {
          return 0;
        }
      }
    }
    else if (v31 > 0x2C)
    {
      if (v31 == 47) {
        return 0;
      }
    }
    else if (v31 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 28;
    unsigned int v32 = a1[28];
    if (v32 > 0x39)
    {
      if (v32 > 0x5A)
      {
        if (v32 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v32 < 0x3B) {
          goto LABEL_348;
        }
        if (v32 < 0x41) {
          return 0;
        }
      }
    }
    else if (v32 > 0x2C)
    {
      if (v32 == 47) {
        return 0;
      }
    }
    else if (v32 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 29;
    unsigned int v33 = a1[29];
    if (v33 > 0x39)
    {
      if (v33 > 0x5A)
      {
        if (v33 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v33 < 0x3B) {
          goto LABEL_348;
        }
        if (v33 < 0x41) {
          return 0;
        }
      }
    }
    else if (v33 > 0x2C)
    {
      if (v33 == 47) {
        return 0;
      }
    }
    else if (v33 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 30;
    unsigned int v34 = a1[30];
    if (v34 > 0x39)
    {
      if (v34 > 0x5A)
      {
        if (v34 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v34 < 0x3B) {
          goto LABEL_348;
        }
        if (v34 < 0x41) {
          return 0;
        }
      }
    }
    else if (v34 > 0x2C)
    {
      if (v34 == 47) {
        return 0;
      }
    }
    else if (v34 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 31;
    unsigned int v35 = a1[31];
    if (v35 > 0x39)
    {
      if (v35 > 0x5A)
      {
        if (v35 - 123 < 0xFFFFFFE6) {
          return 0;
        }
      }
      else
      {
        if (v35 < 0x3B) {
          goto LABEL_348;
        }
        if (v35 < 0x41) {
          return 0;
        }
      }
    }
    else if (v35 > 0x2C)
    {
      if (v35 == 47) {
        return 0;
      }
    }
    else if (v35 != 43)
    {
      return 0;
    }
    unsigned int v6 = a1 + 32;
    if (a1[32] == 58)
    {
      while (1)
      {
        do
        {
LABEL_348:
          uint64_t v4 = v6;
          unsigned int v37 = *++v6;
          unsigned int v36 = v37;
        }
        while (_scan_autolink_uri_yybm[v37] < 0);
        if (v36 > 0xEC) {
          break;
        }
        if (v36 <= 0xC1)
        {
          LODWORD(v4) = v4 - a1 + 2;
          if (v36 - 61 >= 2) {
            return 0;
          }
          else {
            return (unsigned __int8 *)v4;
          }
        }
        if (v36 >= 0xE0)
        {
          if (v36 != 224) {
            goto LABEL_368;
          }
          unsigned __int8 v39 = v4[2];
          unsigned int v38 = v4 + 2;
          if ((v39 & 0xE0) != 0xA0) {
            return 0;
          }
LABEL_358:
          unsigned int v6 = v38;
        }
LABEL_369:
        uint64_t v4 = 0;
        int v46 = (char)*++v6;
        if (v46 >= -64) {
          return v4;
        }
      }
      if (v36 > 0xF0)
      {
        if (v36 >= 0xF4)
        {
          if (v36 != 244) {
            return 0;
          }
          int v44 = (char)v4[2];
          uint64_t v41 = v4 + 2;
          if (v44 >= -112) {
            return 0;
          }
        }
        else
        {
          int v42 = (char)v4[2];
          uint64_t v41 = v4 + 2;
          if (v42 >= -64) {
            return 0;
          }
        }
LABEL_367:
        unsigned int v6 = v41;
LABEL_368:
        int v45 = (char)*++v6;
        if (v45 >= -64) {
          return 0;
        }
        goto LABEL_369;
      }
      if (v36 >= 0xEE)
      {
        if (v36 >= 0xF0)
        {
          unsigned __int8 v43 = v4[2];
          uint64_t v41 = v4 + 2;
          if ((v43 + 112) >= 0x30u) {
            return 0;
          }
          goto LABEL_367;
        }
        goto LABEL_368;
      }
      int v40 = (char)v4[2];
      unsigned int v38 = v4 + 2;
      if (v40 >= -96) {
        return 0;
      }
      goto LABEL_358;
    }
    return 0;
  }
  return v4;
}

uint64_t _scan_autolink_email(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x39)
  {
    if (v1 > 0x27)
    {
      uint64_t v2 = 0;
      if (v1 < 0x2A || v1 == 44) {
        return v2;
      }
    }
    else if (v1 != 33 && v1 <= 0x22)
    {
      return 0;
    }
    goto LABEL_16;
  }
  if (v1 > 0x3F)
  {
    if (v1 > 0x5A)
    {
      if (v1 - 94 > 0x20) {
        return 0;
      }
    }
    else if (v1 <= 0x40)
    {
      return 0;
    }
  }
  else if ((v1 & 0xFFFFFFFD) != 0x3D)
  {
    return 0;
  }
LABEL_16:
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  if (v3 > 0x2C)
  {
    if (v3 > 0x3E)
    {
      if (v3 >= 0x5B && (v3 - 94) > 0x20) {
        return 0;
      }
    }
    else if (v3 >= 0x3A && v3 != 61)
    {
      return 0;
    }
  }
  else if (v3 > 0x22)
  {
    if (v3 >= 0x28 && (v3 & 0xFE) != 0x2A) {
      return 0;
    }
  }
  else if (v3 != 33)
  {
    return 0;
  }
  if (_scan_autolink_email_yybm[v3] < 0)
  {
    do
    {
      unsigned int v5 = *++v4;
      LODWORD(v3) = v5;
    }
    while (_scan_autolink_email_yybm[v5] < 0);
  }
  if ((v3 - 63) > 1) {
    return 0;
  }
  do
  {
    while (1)
    {
      do
      {
        while (1)
        {
          do
          {
            while (1)
            {
              do
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      do
                      {
                        while (1)
                        {
                          do
                          {
                            while (1)
                            {
                              do
                              {
                                while (1)
                                {
                                  do
                                  {
                                    while (1)
                                    {
                                      do
                                      {
                                        while (1)
                                        {
                                          do
                                          {
                                            while (1)
                                            {
                                              do
                                              {
                                                while (1)
                                                {
                                                  do
                                                  {
                                                    while (1)
                                                    {
                                                      do
                                                      {
                                                        while (1)
                                                        {
                                                          do
                                                          {
                                                            while (1)
                                                            {
                                                              do
                                                              {
                                                                while (1)
                                                                {
                                                                  while (1)
                                                                  {
                                                                    while (1)
                                                                    {
                                                                      unsigned int v6 = v4;
                                                                      unsigned int v7 = v4[1];
                                                                      if (v7 > 0x40)
                                                                      {
                                                                        if (v7 >= 0x5B && v7 - 123 < 0xFFFFFFE6) {
                                                                          return 0;
                                                                        }
                                                                      }
                                                                      else if (v7 - 58 < 0xFFFFFFF6)
                                                                      {
                                                                        return 0;
                                                                      }
                                                                      v4 += 2;
                                                                      unsigned int v9 = v6[2];
                                                                      if (v9 > 0x3D) {
                                                                        break;
                                                                      }
                                                                      if (v9 > 0x2E)
                                                                      {
                                                                        uint64_t v2 = 0;
                                                                        if (v9 == 47 || v9 >= 0x3A) {
                                                                          return v2;
                                                                        }
                                                                        goto LABEL_56;
                                                                      }
                                                                      if (v9 < 0x2D) {
                                                                        return 0;
                                                                      }
                                                                      if (v9 == 45)
                                                                      {
                                                                        unsigned int v10 = v6[3];
                                                                        if (v10 > 0x39)
                                                                        {
                                                                          if (v10 <= 0x5A)
                                                                          {
                                                                            if (v10 < 0x41) {
                                                                              return 0;
                                                                            }
                                                                            goto LABEL_73;
                                                                          }
                                                                          unsigned int v13 = v10 - 97;
LABEL_72:
                                                                          if (v13 >= 0x1A) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_73;
                                                                        }
                                                                        if (v10 != 45)
                                                                        {
                                                                          if (v10 < 0x30) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_73;
                                                                        }
LABEL_60:
                                                                        unsigned int v12 = v6[4];
                                                                        if (v12 > 0x39)
                                                                        {
                                                                          if (v12 <= 0x5A)
                                                                          {
                                                                            if (v12 < 0x41) {
                                                                              return 0;
                                                                            }
                                                                            goto LABEL_89;
                                                                          }
                                                                          unsigned int v17 = v12 - 97;
LABEL_88:
                                                                          if (v17 >= 0x1A) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_89;
                                                                        }
                                                                        if (v12 != 45)
                                                                        {
                                                                          if (v12 < 0x30) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_89;
                                                                        }
LABEL_77:
                                                                        unsigned int v16 = v6 + 5;
                                                                        unsigned int v15 = v6[5];
                                                                        if (v15 <= 0x39)
                                                                        {
                                                                          if (v15 == 45)
                                                                          {
                                                                            uint64_t v4 = v6 + 5;
                                                                            goto LABEL_93;
                                                                          }
                                                                          if (v15 < 0x30) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_106;
                                                                        }
                                                                        if (v15 <= 0x5A)
                                                                        {
                                                                          if (v15 < 0x41) {
                                                                            return 0;
                                                                          }
                                                                          goto LABEL_106;
                                                                        }
                                                                        unsigned int v20 = v15 - 97;
LABEL_105:
                                                                        if (v20 >= 0x1A) {
                                                                          return 0;
                                                                        }
LABEL_106:
                                                                        uint64_t v4 = v6 + 6;
                                                                        unsigned int v21 = v6[6];
                                                                        if (v21 > 0x3D)
                                                                        {
                                                                          if (v21 > 0x5A)
                                                                          {
                                                                            unsigned int v25 = v21 - 97;
                                                                            goto LABEL_121;
                                                                          }
                                                                          if (v21 < 0x3F) {
                                                                            return (v4
                                                                          }
                                                                                                - a1
                                                                                                + 1);
                                                                          if (v21 < 0x41) {
                                                                            return 0;
                                                                          }
LABEL_122:
                                                                          unsigned int v26 = v6[7];
                                                                          uint64_t v4 = v6 + 7;
                                                                          if (v26 > 0x3D)
                                                                          {
                                                                            if (v26 <= 0x5A)
                                                                            {
                                                                              if (v26 < 0x3F) {
                                                                                return (v4 - a1 + 1);
                                                                              }
                                                                              unsigned int v23 = v6 + 7;
                                                                              if (v26 < 0x41) {
                                                                                return 0;
                                                                              }
                                                                              goto LABEL_139;
                                                                            }
                                                                            unsigned int v29 = v26 - 97;
                                                                            unsigned int v23 = v6 + 7;
LABEL_138:
                                                                            if (v29 >= 0x1A) {
                                                                              return 0;
                                                                            }
                                                                            goto LABEL_139;
                                                                          }
                                                                          if (v26 > 0x2E)
                                                                          {
                                                                            uint64_t v2 = 0;
                                                                            if (v26 == 47) {
                                                                              return v2;
                                                                            }
                                                                            unsigned int v23 = v6 + 7;
                                                                            if (v26 >= 0x3A) {
                                                                              return v2;
                                                                            }
                                                                            goto LABEL_139;
                                                                          }
                                                                          if (v26 < 0x2D) {
                                                                            return 0;
                                                                          }
                                                                          if (v26 == 45)
                                                                          {
LABEL_126:
                                                                            unsigned int v28 = v4 + 1;
                                                                            unsigned int v27 = v4[1];
                                                                            if (v27 > 0x39)
                                                                            {
                                                                              if (v27 <= 0x5A)
                                                                              {
                                                                                if (v27 < 0x41) {
                                                                                  return 0;
                                                                                }
                                                                                goto LABEL_155;
                                                                              }
                                                                              unsigned int v34 = v27 - 97;
LABEL_154:
                                                                              if (v34 >= 0x1A) {
                                                                                return 0;
                                                                              }
                                                                              goto LABEL_155;
                                                                            }
                                                                            unsigned int v23 = v4;
                                                                            if (v27 != 45)
                                                                            {
                                                                              if (v27 < 0x30) {
                                                                                return 0;
                                                                              }
                                                                              goto LABEL_155;
                                                                            }
LABEL_143:
                                                                            unsigned int v33 = v23[2];
                                                                            unsigned int v32 = v23 + 2;
                                                                            unsigned int v31 = v33;
                                                                            if (v33 <= 0x39)
                                                                            {
                                                                              if (v31 == 45)
                                                                              {
                                                                                uint64_t v4 = v32;
                                                                                goto LABEL_159;
                                                                              }
                                                                              if (v31 < 0x30) {
                                                                                return 0;
                                                                              }
                                                                              goto LABEL_172;
                                                                            }
                                                                            if (v31 <= 0x5A)
                                                                            {
                                                                              if (v31 < 0x41) {
                                                                                return 0;
                                                                              }
                                                                              goto LABEL_172;
                                                                            }
                                                                            unsigned int v38 = v31 - 97;
LABEL_171:
                                                                            if (v38 >= 0x1A) {
                                                                              return 0;
                                                                            }
LABEL_172:
                                                                            uint64_t v4 = v32 + 1;
                                                                            unsigned int v39 = v32[1];
                                                                            if (v39 > 0x3D)
                                                                            {
                                                                              if (v39 > 0x5A)
                                                                              {
                                                                                unsigned int v43 = v39 - 97;
                                                                                unsigned int v37 = v32 + 1;
                                                                                goto LABEL_187;
                                                                              }
                                                                              if (v39 < 0x3F) {
                                                                                return (v4 - a1 + 1);
                                                                              }
                                                                              unsigned int v37 = v32 + 1;
                                                                              if (v39 < 0x41) {
                                                                                return 0;
                                                                              }
LABEL_188:
                                                                              unsigned int v44 = v37[1];
                                                                              uint64_t v4 = v37 + 1;
                                                                              if (v44 > 0x3D)
                                                                              {
                                                                                if (v44 <= 0x5A)
                                                                                {
                                                                                  if (v44 < 0x3F) {
                                                                                    return (v4 - a1 + 1);
                                                                                  }
                                                                                  uint64_t v41 = v37 + 1;
                                                                                  if (v44 < 0x41) {
                                                                                    return 0;
                                                                                  }
                                                                                  goto LABEL_211;
                                                                                }
                                                                                unsigned int v47 = v44 - 97;
                                                                                uint64_t v41 = v37 + 1;
LABEL_210:
                                                                                if (v47 >= 0x1A) {
                                                                                  return 0;
                                                                                }
                                                                                goto LABEL_211;
                                                                              }
                                                                              if (v44 > 0x2E)
                                                                              {
                                                                                uint64_t v2 = 0;
                                                                                if (v44 == 47) {
                                                                                  return v2;
                                                                                }
                                                                                uint64_t v41 = v37 + 1;
                                                                                if (v44 >= 0x3A) {
                                                                                  return v2;
                                                                                }
                                                                                goto LABEL_211;
                                                                              }
                                                                              if (v44 < 0x2D) {
                                                                                return 0;
                                                                              }
                                                                              if (v44 == 45)
                                                                              {
LABEL_192:
                                                                                int v46 = v4 + 1;
                                                                                unsigned int v45 = v4[1];
                                                                                if (v45 > 0x39)
                                                                                {
                                                                                  if (v45 <= 0x5A)
                                                                                  {
                                                                                    if (v45 < 0x41) {
                                                                                      return 0;
                                                                                    }
                                                                                    goto LABEL_230;
                                                                                  }
                                                                                  unsigned int v52 = v45 - 97;
LABEL_229:
                                                                                  if (v52 >= 0x1A) {
                                                                                    return 0;
                                                                                  }
                                                                                  goto LABEL_230;
                                                                                }
                                                                                uint64_t v41 = v4;
                                                                                if (v45 != 45)
                                                                                {
                                                                                  if (v45 < 0x30) {
                                                                                    return 0;
                                                                                  }
                                                                                  goto LABEL_230;
                                                                                }
LABEL_215:
                                                                                unsigned int v51 = v41[2];
                                                                                uint64_t v50 = v41 + 2;
                                                                                unsigned int v49 = v51;
                                                                                if (v51 <= 0x39)
                                                                                {
                                                                                  if (v49 == 45)
                                                                                  {
                                                                                    uint64_t v4 = v50;
                                                                                    goto LABEL_234;
                                                                                  }
                                                                                  if (v49 < 0x30) {
                                                                                    return 0;
                                                                                  }
                                                                                  goto LABEL_250;
                                                                                }
                                                                                if (v49 <= 0x5A)
                                                                                {
                                                                                  if (v49 < 0x41) {
                                                                                    return 0;
                                                                                  }
                                                                                  goto LABEL_250;
                                                                                }
                                                                                unsigned int v56 = v49 - 97;
LABEL_249:
                                                                                if (v56 >= 0x1A) {
                                                                                  return 0;
                                                                                }
LABEL_250:
                                                                                uint64_t v4 = v50 + 1;
                                                                                unsigned int v57 = v50[1];
                                                                                if (v57 > 0x3D)
                                                                                {
                                                                                  if (v57 > 0x5A)
                                                                                  {
                                                                                    unsigned int v61 = v57 - 97;
                                                                                    int v55 = v50 + 1;
                                                                                    goto LABEL_268;
                                                                                  }
                                                                                  if (v57 < 0x3F) {
                                                                                    return (v4 - a1 + 1);
                                                                                  }
                                                                                  int v55 = v50 + 1;
                                                                                  if (v57 < 0x41) {
                                                                                    return 0;
                                                                                  }
LABEL_269:
                                                                                  unsigned int v62 = v55[1];
                                                                                  uint64_t v4 = v55 + 1;
                                                                                  if (v62 > 0x3D)
                                                                                  {
                                                                                    if (v62 <= 0x5A)
                                                                                    {
                                                                                      if (v62 < 0x3F) {
                                                                                        return (v4 - a1 + 1);
                                                                                      }
                                                                                      int v59 = v55 + 1;
                                                                                      if (v62 < 0x41) {
                                                                                        return 0;
                                                                                      }
                                                                                      goto LABEL_290;
                                                                                    }
                                                                                    unsigned int v65 = v62 - 97;
                                                                                    int v59 = v55 + 1;
LABEL_289:
                                                                                    if (v65 >= 0x1A) {
                                                                                      return 0;
                                                                                    }
                                                                                    goto LABEL_290;
                                                                                  }
                                                                                  if (v62 > 0x2E)
                                                                                  {
                                                                                    uint64_t v2 = 0;
                                                                                    if (v62 == 47) {
                                                                                      return v2;
                                                                                    }
                                                                                    int v59 = v55 + 1;
                                                                                    if (v62 >= 0x3A) {
                                                                                      return v2;
                                                                                    }
                                                                                    goto LABEL_290;
                                                                                  }
                                                                                  if (v62 < 0x2D) {
                                                                                    return 0;
                                                                                  }
                                                                                  if (v62 == 45)
                                                                                  {
LABEL_273:
                                                                                    int v64 = v4 + 1;
                                                                                    unsigned int v63 = v4[1];
                                                                                    if (v63 > 0x39)
                                                                                    {
                                                                                      if (v63 <= 0x5A)
                                                                                      {
                                                                                        if (v63 < 0x41) {
                                                                                          return 0;
                                                                                        }
                                                                                        goto LABEL_313;
                                                                                      }
                                                                                      unsigned int v70 = v63 - 97;
LABEL_312:
                                                                                      if (v70 >= 0x1A) {
                                                                                        return 0;
                                                                                      }
                                                                                      goto LABEL_313;
                                                                                    }
                                                                                    int v59 = v4;
                                                                                    if (v63 != 45)
                                                                                    {
                                                                                      if (v63 < 0x30) {
                                                                                        return 0;
                                                                                      }
                                                                                      goto LABEL_313;
                                                                                    }
LABEL_294:
                                                                                    unsigned int v69 = v59[2];
                                                                                    __int16 v68 = v59 + 2;
                                                                                    unsigned int v67 = v69;
                                                                                    if (v69 <= 0x39)
                                                                                    {
                                                                                      if (v67 == 45)
                                                                                      {
                                                                                        uint64_t v4 = v68;
                                                                                        goto LABEL_317;
                                                                                      }
                                                                                      if (v67 < 0x30) {
                                                                                        return 0;
                                                                                      }
                                                                                      goto LABEL_334;
                                                                                    }
                                                                                    if (v67 <= 0x5A)
                                                                                    {
                                                                                      if (v67 < 0x41) {
                                                                                        return 0;
                                                                                      }
                                                                                      goto LABEL_334;
                                                                                    }
                                                                                    unsigned int v74 = v67 - 97;
LABEL_333:
                                                                                    if (v74 >= 0x1A) {
                                                                                      return 0;
                                                                                    }
LABEL_334:
                                                                                    uint64_t v4 = v68 + 1;
                                                                                    unsigned int v75 = v68[1];
                                                                                    if (v75 > 0x3D)
                                                                                    {
                                                                                      if (v75 > 0x5A)
                                                                                      {
                                                                                        unsigned int v79 = v75 - 97;
                                                                                        int v73 = v68 + 1;
                                                                                        goto LABEL_355;
                                                                                      }
                                                                                      if (v75 < 0x3F) {
                                                                                        return (v4 - a1 + 1);
                                                                                      }
                                                                                      int v73 = v68 + 1;
                                                                                      if (v75 < 0x41) {
                                                                                        return 0;
                                                                                      }
LABEL_356:
                                                                                      unsigned int v80 = v73[1];
                                                                                      uint64_t v4 = v73 + 1;
                                                                                      if (v80 > 0x3D)
                                                                                      {
                                                                                        if (v80 <= 0x5A)
                                                                                        {
                                                                                          if (v80 < 0x3F) {
                                                                                            return (v4 - a1 + 1);
                                                                                          }
                                                                                          __int16 v77 = v73 + 1;
                                                                                          if (v80 < 0x41) {
                                                                                            return 0;
                                                                                          }
                                                                                          goto LABEL_377;
                                                                                        }
                                                                                        unsigned int v83 = v80 - 97;
                                                                                        __int16 v77 = v73 + 1;
LABEL_376:
                                                                                        if (v83 >= 0x1A) {
                                                                                          return 0;
                                                                                        }
                                                                                        goto LABEL_377;
                                                                                      }
                                                                                      if (v80 > 0x2E)
                                                                                      {
                                                                                        uint64_t v2 = 0;
                                                                                        if (v80 == 47) {
                                                                                          return v2;
                                                                                        }
                                                                                        __int16 v77 = v73 + 1;
                                                                                        if (v80 >= 0x3A) {
                                                                                          return v2;
                                                                                        }
                                                                                        goto LABEL_377;
                                                                                      }
                                                                                      if (v80 < 0x2D) {
                                                                                        return 0;
                                                                                      }
                                                                                      if (v80 == 45)
                                                                                      {
LABEL_360:
                                                                                        uint64_t v82 = v4 + 1;
                                                                                        unsigned int v81 = v4[1];
                                                                                        if (v81 > 0x39)
                                                                                        {
                                                                                          if (v81 <= 0x5A)
                                                                                          {
                                                                                            if (v81 < 0x41) {
                                                                                              return 0;
                                                                                            }
                                                                                            goto LABEL_399;
                                                                                          }
                                                                                          unsigned int v88 = v81 - 97;
LABEL_398:
                                                                                          if (v88 >= 0x1A) {
                                                                                            return 0;
                                                                                          }
                                                                                          goto LABEL_399;
                                                                                        }
                                                                                        __int16 v77 = v4;
                                                                                        if (v81 != 45)
                                                                                        {
                                                                                          if (v81 < 0x30) {
                                                                                            return 0;
                                                                                          }
                                                                                          goto LABEL_399;
                                                                                        }
LABEL_381:
                                                                                        unsigned int v87 = v77[2];
                                                                                        int v86 = v77 + 2;
                                                                                        unsigned int v85 = v87;
                                                                                        if (v87 <= 0x39)
                                                                                        {
                                                                                          if (v85 == 45)
                                                                                          {
                                                                                            uint64_t v4 = v86;
                                                                                            goto LABEL_403;
                                                                                          }
                                                                                          if (v85 < 0x30) {
                                                                                            return 0;
                                                                                          }
                                                                                          goto LABEL_420;
                                                                                        }
                                                                                        if (v85 <= 0x5A)
                                                                                        {
                                                                                          if (v85 < 0x41) {
                                                                                            return 0;
                                                                                          }
                                                                                          goto LABEL_420;
                                                                                        }
                                                                                        unsigned int v92 = v85 - 97;
LABEL_419:
                                                                                        if (v92 >= 0x1A) {
                                                                                          return 0;
                                                                                        }
LABEL_420:
                                                                                        uint64_t v4 = v86 + 1;
                                                                                        unsigned int v93 = v86[1];
                                                                                        if (v93 > 0x3D)
                                                                                        {
                                                                                          if (v93 > 0x5A)
                                                                                          {
                                                                                            unsigned int v97 = v93 - 97;
                                                                                            int v91 = v86 + 1;
                                                                                            goto LABEL_441;
                                                                                          }
                                                                                          if (v93 < 0x3F) {
                                                                                            return (v4 - a1 + 1);
                                                                                          }
                                                                                          int v91 = v86 + 1;
                                                                                          if (v93 < 0x41) {
                                                                                            return 0;
                                                                                          }
LABEL_442:
                                                                                          unsigned int v98 = v91[1];
                                                                                          uint64_t v4 = v91 + 1;
                                                                                          if (v98 > 0x3D)
                                                                                          {
                                                                                            if (v98 <= 0x5A)
                                                                                            {
                                                                                              if (v98 < 0x3F) {
                                                                                                return (v4 - a1 + 1);
                                                                                              }
                                                                                              long long v95 = v91 + 1;
                                                                                              if (v98 < 0x41) {
                                                                                                return 0;
                                                                                              }
                                                                                              goto LABEL_463;
                                                                                            }
                                                                                            unsigned int v101 = v98 - 97;
                                                                                            long long v95 = v91 + 1;
LABEL_462:
                                                                                            if (v101 >= 0x1A) {
                                                                                              return 0;
                                                                                            }
                                                                                            goto LABEL_463;
                                                                                          }
                                                                                          if (v98 > 0x2E)
                                                                                          {
                                                                                            uint64_t v2 = 0;
                                                                                            if (v98 == 47) {
                                                                                              return v2;
                                                                                            }
                                                                                            long long v95 = v91 + 1;
                                                                                            if (v98 >= 0x3A) {
                                                                                              return v2;
                                                                                            }
                                                                                            goto LABEL_463;
                                                                                          }
                                                                                          if (v98 < 0x2D) {
                                                                                            return 0;
                                                                                          }
                                                                                          if (v98 == 45)
                                                                                          {
LABEL_446:
                                                                                            __int16 v100 = v4 + 1;
                                                                                            unsigned int v99 = v4[1];
                                                                                            if (v99 > 0x39)
                                                                                            {
                                                                                              if (v99 <= 0x5A)
                                                                                              {
                                                                                                if (v99 < 0x41) {
                                                                                                  return 0;
                                                                                                }
                                                                                                goto LABEL_485;
                                                                                              }
                                                                                              unsigned int v106 = v99 - 97;
LABEL_484:
                                                                                              if (v106 >= 0x1A) {
                                                                                                return 0;
                                                                                              }
                                                                                              goto LABEL_485;
                                                                                            }
                                                                                            long long v95 = v4;
                                                                                            if (v99 != 45)
                                                                                            {
                                                                                              if (v99 < 0x30) {
                                                                                                return 0;
                                                                                              }
                                                                                              goto LABEL_485;
                                                                                            }
LABEL_467:
                                                                                            unsigned int v105 = v95[2];
                                                                                            uint64_t v104 = v95 + 2;
                                                                                            unsigned int v103 = v105;
                                                                                            if (v105 <= 0x39)
                                                                                            {
                                                                                              if (v103 == 45)
                                                                                              {
                                                                                                uint64_t v4 = v104;
                                                                                                goto LABEL_489;
                                                                                              }
                                                                                              if (v103 < 0x30) {
                                                                                                return 0;
                                                                                              }
                                                                                              goto LABEL_506;
                                                                                            }
                                                                                            if (v103 <= 0x5A)
                                                                                            {
                                                                                              if (v103 < 0x41) {
                                                                                                return 0;
                                                                                              }
                                                                                              goto LABEL_506;
                                                                                            }
                                                                                            unsigned int v110 = v103 - 97;
LABEL_505:
                                                                                            if (v110 >= 0x1A) {
                                                                                              return 0;
                                                                                            }
LABEL_506:
                                                                                            uint64_t v4 = v104 + 1;
                                                                                            unsigned int v111 = v104[1];
                                                                                            if (v111 > 0x3D)
                                                                                            {
                                                                                              if (v111 > 0x5A)
                                                                                              {
                                                                                                unsigned int v115 = v111 - 97;
                                                                                                __int16 v109 = v104 + 1;
                                                                                                goto LABEL_527;
                                                                                              }
                                                                                              if (v111 < 0x3F) {
                                                                                                return (v4 - a1 + 1);
                                                                                              }
                                                                                              __int16 v109 = v104 + 1;
                                                                                              if (v111 < 0x41) {
                                                                                                return 0;
                                                                                              }
LABEL_528:
                                                                                              unsigned int v116 = v109[1];
                                                                                              uint64_t v4 = v109 + 1;
                                                                                              if (v116 > 0x3D)
                                                                                              {
                                                                                                if (v116 <= 0x5A)
                                                                                                {
                                                                                                  if (v116 < 0x3F) {
                                                                                                    return (v4 - a1 + 1);
                                                                                                  }
                                                                                                  uint64_t v113 = v109 + 1;
                                                                                                  if (v116 < 0x41) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  goto LABEL_549;
                                                                                                }
                                                                                                unsigned int v119 = v116 - 97;
                                                                                                uint64_t v113 = v109 + 1;
LABEL_548:
                                                                                                if (v119 >= 0x1A) {
                                                                                                  return 0;
                                                                                                }
                                                                                                goto LABEL_549;
                                                                                              }
                                                                                              if (v116 > 0x2E)
                                                                                              {
                                                                                                uint64_t v2 = 0;
                                                                                                if (v116 == 47) {
                                                                                                  return v2;
                                                                                                }
                                                                                                uint64_t v113 = v109 + 1;
                                                                                                if (v116 >= 0x3A) {
                                                                                                  return v2;
                                                                                                }
                                                                                                goto LABEL_549;
                                                                                              }
                                                                                              if (v116 < 0x2D) {
                                                                                                return 0;
                                                                                              }
                                                                                              if (v116 == 45)
                                                                                              {
LABEL_532:
                                                                                                int v118 = v4 + 1;
                                                                                                unsigned int v117 = v4[1];
                                                                                                if (v117 > 0x39)
                                                                                                {
                                                                                                  if (v117 <= 0x5A)
                                                                                                  {
                                                                                                    if (v117 < 0x41) {
                                                                                                      return 0;
                                                                                                    }
                                                                                                    goto LABEL_571;
                                                                                                  }
                                                                                                  unsigned int v124 = v117 - 97;
LABEL_570:
                                                                                                  if (v124 >= 0x1A) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  goto LABEL_571;
                                                                                                }
                                                                                                uint64_t v113 = v4;
                                                                                                if (v117 != 45)
                                                                                                {
                                                                                                  if (v117 < 0x30) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  goto LABEL_571;
                                                                                                }
LABEL_553:
                                                                                                unsigned int v123 = v113[2];
                                                                                                BOOL v122 = v113 + 2;
                                                                                                unsigned int v121 = v123;
                                                                                                if (v123 <= 0x39)
                                                                                                {
                                                                                                  if (v121 == 45)
                                                                                                  {
                                                                                                    uint64_t v4 = v122;
                                                                                                    goto LABEL_575;
                                                                                                  }
                                                                                                  if (v121 < 0x30) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  goto LABEL_592;
                                                                                                }
                                                                                                if (v121 <= 0x5A)
                                                                                                {
                                                                                                  if (v121 < 0x41) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  goto LABEL_592;
                                                                                                }
                                                                                                unsigned int v128 = v121 - 97;
LABEL_591:
                                                                                                if (v128 >= 0x1A) {
                                                                                                  return 0;
                                                                                                }
LABEL_592:
                                                                                                uint64_t v4 = v122 + 1;
                                                                                                unsigned int v129 = v122[1];
                                                                                                if (v129 > 0x3D)
                                                                                                {
                                                                                                  if (v129 > 0x5A)
                                                                                                  {
                                                                                                    unsigned int v133 = v129 - 97;
                                                                                                    int v127 = v122 + 1;
                                                                                                    goto LABEL_613;
                                                                                                  }
                                                                                                  if (v129 < 0x3F) {
                                                                                                    return (v4 - a1 + 1);
                                                                                                  }
                                                                                                  int v127 = v122 + 1;
                                                                                                  if (v129 < 0x41) {
                                                                                                    return 0;
                                                                                                  }
LABEL_614:
                                                                                                  unsigned int v134 = v127[1];
                                                                                                  uint64_t v4 = v127 + 1;
                                                                                                  if (v134 > 0x3D)
                                                                                                  {
                                                                                                    if (v134 <= 0x5A)
                                                                                                    {
                                                                                                      if (v134 < 0x3F) {
                                                                                                        return (v4 - a1 + 1);
                                                                                                      }
                                                                                                      int v131 = v127 + 1;
                                                                                                      if (v134 < 0x41) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      goto LABEL_635;
                                                                                                    }
                                                                                                    unsigned int v137 = v134 - 97;
                                                                                                    int v131 = v127 + 1;
LABEL_634:
                                                                                                    if (v137 >= 0x1A) {
                                                                                                      return 0;
                                                                                                    }
                                                                                                    goto LABEL_635;
                                                                                                  }
                                                                                                  if (v134 > 0x2E)
                                                                                                  {
                                                                                                    uint64_t v2 = 0;
                                                                                                    if (v134 == 47) {
                                                                                                      return v2;
                                                                                                    }
                                                                                                    int v131 = v127 + 1;
                                                                                                    if (v134 >= 0x3A) {
                                                                                                      return v2;
                                                                                                    }
                                                                                                    goto LABEL_635;
                                                                                                  }
                                                                                                  if (v134 < 0x2D) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  if (v134 == 45)
                                                                                                  {
LABEL_618:
                                                                                                    uint64_t v136 = v4 + 1;
                                                                                                    unsigned int v135 = v4[1];
                                                                                                    if (v135 > 0x39)
                                                                                                    {
                                                                                                      if (v135 <= 0x5A)
                                                                                                      {
                                                                                                        if (v135 < 0x41) {
                                                                                                          return 0;
                                                                                                        }
                                                                                                        goto LABEL_657;
                                                                                                      }
                                                                                                      unsigned int v142 = v135 - 97;
LABEL_656:
                                                                                                      if (v142 >= 0x1A) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      goto LABEL_657;
                                                                                                    }
                                                                                                    int v131 = v4;
                                                                                                    if (v135 != 45)
                                                                                                    {
                                                                                                      if (v135 < 0x30) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      goto LABEL_657;
                                                                                                    }
LABEL_639:
                                                                                                    unsigned int v141 = v131[2];
                                                                                                    int v140 = v131 + 2;
                                                                                                    unsigned int v139 = v141;
                                                                                                    if (v141 <= 0x39)
                                                                                                    {
                                                                                                      if (v139 == 45)
                                                                                                      {
                                                                                                        uint64_t v4 = v140;
                                                                                                        goto LABEL_661;
                                                                                                      }
                                                                                                      if (v139 < 0x30) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      goto LABEL_678;
                                                                                                    }
                                                                                                    if (v139 <= 0x5A)
                                                                                                    {
                                                                                                      if (v139 < 0x41) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      goto LABEL_678;
                                                                                                    }
                                                                                                    unsigned int v146 = v139 - 97;
LABEL_677:
                                                                                                    if (v146 >= 0x1A) {
                                                                                                      return 0;
                                                                                                    }
LABEL_678:
                                                                                                    uint64_t v4 = v140 + 1;
                                                                                                    unsigned int v147 = v140[1];
                                                                                                    if (v147 > 0x3D)
                                                                                                    {
                                                                                                      if (v147 > 0x5A)
                                                                                                      {
                                                                                                        unsigned int v151 = v147 - 97;
                                                                                                        uint64_t v145 = v140 + 1;
                                                                                                        goto LABEL_699;
                                                                                                      }
                                                                                                      if (v147 < 0x3F) {
                                                                                                        return (v4 - a1 + 1);
                                                                                                      }
                                                                                                      uint64_t v145 = v140 + 1;
                                                                                                      if (v147 < 0x41) {
                                                                                                        return 0;
                                                                                                      }
LABEL_700:
                                                                                                      unsigned int v152 = v145[1];
                                                                                                      uint64_t v4 = v145 + 1;
                                                                                                      if (v152 > 0x3D)
                                                                                                      {
                                                                                                        if (v152 <= 0x5A)
                                                                                                        {
                                                                                                          if (v152 < 0x3F) {
                                                                                                            return (v4 - a1 + 1);
                                                                                                          }
                                                                                                          int v149 = v145 + 1;
                                                                                                          if (v152 < 0x41) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          goto LABEL_721;
                                                                                                        }
                                                                                                        unsigned int v155 = v152 - 97;
                                                                                                        int v149 = v145 + 1;
LABEL_720:
                                                                                                        if (v155 >= 0x1A) {
                                                                                                          return 0;
                                                                                                        }
                                                                                                        goto LABEL_721;
                                                                                                      }
                                                                                                      if (v152 > 0x2E)
                                                                                                      {
                                                                                                        uint64_t v2 = 0;
                                                                                                        if (v152 == 47) {
                                                                                                          return v2;
                                                                                                        }
                                                                                                        int v149 = v145 + 1;
                                                                                                        if (v152 >= 0x3A) {
                                                                                                          return v2;
                                                                                                        }
                                                                                                        goto LABEL_721;
                                                                                                      }
                                                                                                      if (v152 < 0x2D) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      if (v152 == 45)
                                                                                                      {
LABEL_704:
                                                                                                        int v154 = v4 + 1;
                                                                                                        unsigned int v153 = v4[1];
                                                                                                        if (v153 > 0x39)
                                                                                                        {
                                                                                                          if (v153 <= 0x5A)
                                                                                                          {
                                                                                                            if (v153 < 0x41) {
                                                                                                              return 0;
                                                                                                            }
                                                                                                            goto LABEL_743;
                                                                                                          }
                                                                                                          unsigned int v160 = v153 - 97;
LABEL_742:
                                                                                                          if (v160 >= 0x1A) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          goto LABEL_743;
                                                                                                        }
                                                                                                        int v149 = v4;
                                                                                                        if (v153 != 45)
                                                                                                        {
                                                                                                          if (v153 < 0x30) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          goto LABEL_743;
                                                                                                        }
LABEL_725:
                                                                                                        unsigned int v159 = v149[2];
                                                                                                        int v158 = v149 + 2;
                                                                                                        unsigned int v157 = v159;
                                                                                                        if (v159 <= 0x39)
                                                                                                        {
                                                                                                          if (v157 == 45)
                                                                                                          {
                                                                                                            uint64_t v4 = v158;
                                                                                                            goto LABEL_747;
                                                                                                          }
                                                                                                          if (v157 < 0x30) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          goto LABEL_764;
                                                                                                        }
                                                                                                        if (v157 <= 0x5A)
                                                                                                        {
                                                                                                          if (v157 < 0x41) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          goto LABEL_764;
                                                                                                        }
                                                                                                        unsigned int v164 = v157 - 97;
LABEL_763:
                                                                                                        if (v164 >= 0x1A) {
                                                                                                          return 0;
                                                                                                        }
LABEL_764:
                                                                                                        uint64_t v4 = v158 + 1;
                                                                                                        unsigned int v165 = v158[1];
                                                                                                        if (v165 > 0x3D)
                                                                                                        {
                                                                                                          if (v165 > 0x5A)
                                                                                                          {
                                                                                                            unsigned int v169 = v165 - 97;
                                                                                                            uint64_t v163 = v158 + 1;
                                                                                                            goto LABEL_785;
                                                                                                          }
                                                                                                          if (v165 < 0x3F) {
                                                                                                            return (v4 - a1 + 1);
                                                                                                          }
                                                                                                          uint64_t v163 = v158 + 1;
                                                                                                          if (v165 < 0x41) {
                                                                                                            return 0;
                                                                                                          }
LABEL_786:
                                                                                                          unsigned int v170 = v163[1];
                                                                                                          uint64_t v4 = v163 + 1;
                                                                                                          if (v170 > 0x3D)
                                                                                                          {
                                                                                                            if (v170 <= 0x5A)
                                                                                                            {
                                                                                                              if (v170 < 0x3F) {
                                                                                                                return (v4 - a1 + 1);
                                                                                                              }
                                                                                                              v167 = v163 + 1;
                                                                                                              if (v170 < 0x41) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              goto LABEL_807;
                                                                                                            }
                                                                                                            unsigned int v173 = v170 - 97;
                                                                                                            v167 = v163 + 1;
LABEL_806:
                                                                                                            if (v173 >= 0x1A) {
                                                                                                              return 0;
                                                                                                            }
                                                                                                            goto LABEL_807;
                                                                                                          }
                                                                                                          if (v170 > 0x2E)
                                                                                                          {
                                                                                                            uint64_t v2 = 0;
                                                                                                            if (v170 == 47) {
                                                                                                              return v2;
                                                                                                            }
                                                                                                            v167 = v163 + 1;
                                                                                                            if (v170 >= 0x3A) {
                                                                                                              return v2;
                                                                                                            }
                                                                                                            goto LABEL_807;
                                                                                                          }
                                                                                                          if (v170 < 0x2D) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          if (v170 == 45)
                                                                                                          {
LABEL_790:
                                                                                                            int v172 = v4 + 1;
                                                                                                            unsigned int v171 = v4[1];
                                                                                                            if (v171 > 0x39)
                                                                                                            {
                                                                                                              if (v171 <= 0x5A)
                                                                                                              {
                                                                                                                if (v171 < 0x41) {
                                                                                                                  return 0;
                                                                                                                }
                                                                                                                goto LABEL_829;
                                                                                                              }
                                                                                                              unsigned int v178 = v171 - 97;
LABEL_828:
                                                                                                              if (v178 >= 0x1A) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              goto LABEL_829;
                                                                                                            }
                                                                                                            v167 = v4;
                                                                                                            if (v171 != 45)
                                                                                                            {
                                                                                                              if (v171 < 0x30) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              goto LABEL_829;
                                                                                                            }
LABEL_811:
                                                                                                            unsigned int v177 = v167[2];
                                                                                                            v176 = v167 + 2;
                                                                                                            unsigned int v175 = v177;
                                                                                                            if (v177 <= 0x39)
                                                                                                            {
                                                                                                              if (v175 == 45)
                                                                                                              {
                                                                                                                uint64_t v4 = v176;
                                                                                                                goto LABEL_833;
                                                                                                              }
                                                                                                              if (v175 < 0x30) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              goto LABEL_850;
                                                                                                            }
                                                                                                            if (v175 <= 0x5A)
                                                                                                            {
                                                                                                              if (v175 < 0x41) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              goto LABEL_850;
                                                                                                            }
                                                                                                            unsigned int v182 = v175 - 97;
LABEL_849:
                                                                                                            if (v182 >= 0x1A) {
                                                                                                              return 0;
                                                                                                            }
LABEL_850:
                                                                                                            uint64_t v4 = v176 + 1;
                                                                                                            unsigned int v183 = v176[1];
                                                                                                            if (v183 > 0x3D)
                                                                                                            {
                                                                                                              if (v183 > 0x5A)
                                                                                                              {
                                                                                                                unsigned int v187 = v183 - 97;
                                                                                                                uint64_t v181 = v176 + 1;
                                                                                                                goto LABEL_871;
                                                                                                              }
                                                                                                              if (v183 < 0x3F) {
                                                                                                                return (v4 - a1 + 1);
                                                                                                              }
                                                                                                              uint64_t v181 = v176 + 1;
                                                                                                              if (v183 < 0x41) {
                                                                                                                return 0;
                                                                                                              }
LABEL_872:
                                                                                                              unsigned int v188 = v181[1];
                                                                                                              uint64_t v4 = v181 + 1;
                                                                                                              if (v188 > 0x3D)
                                                                                                              {
                                                                                                                if (v188 <= 0x5A)
                                                                                                                {
                                                                                                                  if (v188 < 0x3F) {
                                                                                                                    return (v4 - a1 + 1);
                                                                                                                  }
                                                                                                                  int v185 = v181 + 1;
                                                                                                                  if (v188 < 0x41) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  goto LABEL_893;
                                                                                                                }
                                                                                                                unsigned int v191 = v188 - 97;
                                                                                                                int v185 = v181 + 1;
LABEL_892:
                                                                                                                if (v191 >= 0x1A) {
                                                                                                                  return 0;
                                                                                                                }
                                                                                                                goto LABEL_893;
                                                                                                              }
                                                                                                              if (v188 > 0x2E)
                                                                                                              {
                                                                                                                uint64_t v2 = 0;
                                                                                                                if (v188 == 47) {
                                                                                                                  return v2;
                                                                                                                }
                                                                                                                int v185 = v181 + 1;
                                                                                                                if (v188 >= 0x3A) {
                                                                                                                  return v2;
                                                                                                                }
                                                                                                                goto LABEL_893;
                                                                                                              }
                                                                                                              if (v188 < 0x2D) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              if (v188 == 45)
                                                                                                              {
LABEL_876:
                                                                                                                int v190 = v4 + 1;
                                                                                                                unsigned int v189 = v4[1];
                                                                                                                if (v189 > 0x39)
                                                                                                                {
                                                                                                                  if (v189 <= 0x5A)
                                                                                                                  {
                                                                                                                    if (v189 < 0x41) {
                                                                                                                      return 0;
                                                                                                                    }
                                                                                                                    goto LABEL_915;
                                                                                                                  }
                                                                                                                  unsigned int v196 = v189 - 97;
LABEL_914:
                                                                                                                  if (v196 >= 0x1A) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  goto LABEL_915;
                                                                                                                }
                                                                                                                int v185 = v4;
                                                                                                                if (v189 != 45)
                                                                                                                {
                                                                                                                  if (v189 < 0x30) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  goto LABEL_915;
                                                                                                                }
LABEL_897:
                                                                                                                unsigned int v195 = v185[2];
                                                                                                                int v194 = v185 + 2;
                                                                                                                unsigned int v193 = v195;
                                                                                                                if (v195 <= 0x39)
                                                                                                                {
                                                                                                                  if (v193 == 45)
                                                                                                                  {
                                                                                                                    uint64_t v4 = v194;
                                                                                                                    goto LABEL_919;
                                                                                                                  }
                                                                                                                  if (v193 < 0x30) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  goto LABEL_936;
                                                                                                                }
                                                                                                                if (v193 <= 0x5A)
                                                                                                                {
                                                                                                                  if (v193 < 0x41) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  goto LABEL_936;
                                                                                                                }
                                                                                                                unsigned int v200 = v193 - 97;
LABEL_935:
                                                                                                                if (v200 >= 0x1A) {
                                                                                                                  return 0;
                                                                                                                }
LABEL_936:
                                                                                                                uint64_t v4 = v194 + 1;
                                                                                                                unsigned int v201 = v194[1];
                                                                                                                if (v201 > 0x3D)
                                                                                                                {
                                                                                                                  if (v201 > 0x5A)
                                                                                                                  {
                                                                                                                    unsigned int v205 = v201 - 97;
                                                                                                                    uint64_t v199 = v194 + 1;
                                                                                                                    goto LABEL_957;
                                                                                                                  }
                                                                                                                  if (v201 < 0x3F) {
                                                                                                                    return (v4 - a1 + 1);
                                                                                                                  }
                                                                                                                  uint64_t v199 = v194 + 1;
                                                                                                                  if (v201 < 0x41) {
                                                                                                                    return 0;
                                                                                                                  }
LABEL_958:
                                                                                                                  unsigned int v206 = v199[1];
                                                                                                                  uint64_t v4 = v199 + 1;
                                                                                                                  if (v206 > 0x3D)
                                                                                                                  {
                                                                                                                    if (v206 <= 0x5A)
                                                                                                                    {
                                                                                                                      if (v206 < 0x3F) {
                                                                                                                        return (v4 - a1 + 1);
                                                                                                                      }
                                                                                                                      uint64_t v203 = v199 + 1;
                                                                                                                      if (v206 < 0x41) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      goto LABEL_979;
                                                                                                                    }
                                                                                                                    unsigned int v209 = v206 - 97;
                                                                                                                    uint64_t v203 = v199 + 1;
LABEL_978:
                                                                                                                    if (v209 >= 0x1A) {
                                                                                                                      return 0;
                                                                                                                    }
                                                                                                                    goto LABEL_979;
                                                                                                                  }
                                                                                                                  if (v206 > 0x2E)
                                                                                                                  {
                                                                                                                    uint64_t v2 = 0;
                                                                                                                    if (v206 == 47) {
                                                                                                                      return v2;
                                                                                                                    }
                                                                                                                    uint64_t v203 = v199 + 1;
                                                                                                                    if (v206 >= 0x3A) {
                                                                                                                      return v2;
                                                                                                                    }
                                                                                                                    goto LABEL_979;
                                                                                                                  }
                                                                                                                  if (v206 < 0x2D) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  if (v206 == 45)
                                                                                                                  {
LABEL_962:
                                                                                                                    uint64_t v208 = v4 + 1;
                                                                                                                    unsigned int v207 = v4[1];
                                                                                                                    if (v207 > 0x39)
                                                                                                                    {
                                                                                                                      if (v207 <= 0x5A)
                                                                                                                      {
                                                                                                                        if (v207 < 0x41) {
                                                                                                                          return 0;
                                                                                                                        }
                                                                                                                        goto LABEL_1001;
                                                                                                                      }
                                                                                                                      unsigned int v214 = v207 - 97;
LABEL_1000:
                                                                                                                      if (v214 >= 0x1A) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      goto LABEL_1001;
                                                                                                                    }
                                                                                                                    uint64_t v203 = v4;
                                                                                                                    if (v207 != 45)
                                                                                                                    {
                                                                                                                      if (v207 < 0x30) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      goto LABEL_1001;
                                                                                                                    }
LABEL_983:
                                                                                                                    unsigned int v213 = v203[2];
                                                                                                                    uint64_t v212 = v203 + 2;
                                                                                                                    unsigned int v211 = v213;
                                                                                                                    if (v213 <= 0x39)
                                                                                                                    {
                                                                                                                      if (v211 == 45)
                                                                                                                      {
                                                                                                                        uint64_t v4 = v212;
                                                                                                                        goto LABEL_1005;
                                                                                                                      }
                                                                                                                      if (v211 < 0x30) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      goto LABEL_1022;
                                                                                                                    }
                                                                                                                    if (v211 <= 0x5A)
                                                                                                                    {
                                                                                                                      if (v211 < 0x41) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      goto LABEL_1022;
                                                                                                                    }
                                                                                                                    unsigned int v218 = v211 - 97;
LABEL_1021:
                                                                                                                    if (v218 >= 0x1A) {
                                                                                                                      return 0;
                                                                                                                    }
LABEL_1022:
                                                                                                                    uint64_t v4 = v212 + 1;
                                                                                                                    unsigned int v219 = v212[1];
                                                                                                                    if (v219 > 0x3D)
                                                                                                                    {
                                                                                                                      if (v219 > 0x5A)
                                                                                                                      {
                                                                                                                        unsigned int v223 = v219 - 97;
                                                                                                                        int v217 = v212 + 1;
                                                                                                                        goto LABEL_1043;
                                                                                                                      }
                                                                                                                      if (v219 < 0x3F) {
                                                                                                                        return (v4 - a1 + 1);
                                                                                                                      }
                                                                                                                      int v217 = v212 + 1;
                                                                                                                      if (v219 < 0x41) {
                                                                                                                        return 0;
                                                                                                                      }
LABEL_1044:
                                                                                                                      unsigned int v224 = v217[1];
                                                                                                                      uint64_t v4 = v217 + 1;
                                                                                                                      if (v224 > 0x3D)
                                                                                                                      {
                                                                                                                        if (v224 <= 0x5A)
                                                                                                                        {
                                                                                                                          if (v224 < 0x3F) {
                                                                                                                            return (v4 - a1 + 1);
                                                                                                                          }
                                                                                                                          uint64_t v221 = v217 + 1;
                                                                                                                          if (v224 < 0x41) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          goto LABEL_1065;
                                                                                                                        }
                                                                                                                        unsigned int v227 = v224 - 97;
                                                                                                                        uint64_t v221 = v217 + 1;
LABEL_1064:
                                                                                                                        if (v227 >= 0x1A) {
                                                                                                                          return 0;
                                                                                                                        }
                                                                                                                        goto LABEL_1065;
                                                                                                                      }
                                                                                                                      if (v224 > 0x2E)
                                                                                                                      {
                                                                                                                        uint64_t v2 = 0;
                                                                                                                        if (v224 == 47) {
                                                                                                                          return v2;
                                                                                                                        }
                                                                                                                        uint64_t v221 = v217 + 1;
                                                                                                                        if (v224 >= 0x3A) {
                                                                                                                          return v2;
                                                                                                                        }
                                                                                                                        goto LABEL_1065;
                                                                                                                      }
                                                                                                                      if (v224 < 0x2D) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      if (v224 == 45)
                                                                                                                      {
LABEL_1048:
                                                                                                                        v226 = v4 + 1;
                                                                                                                        unsigned int v225 = v4[1];
                                                                                                                        if (v225 > 0x39)
                                                                                                                        {
                                                                                                                          if (v225 <= 0x5A)
                                                                                                                          {
                                                                                                                            if (v225 < 0x41) {
                                                                                                                              return 0;
                                                                                                                            }
                                                                                                                            goto LABEL_1087;
                                                                                                                          }
                                                                                                                          unsigned int v232 = v225 - 97;
LABEL_1086:
                                                                                                                          if (v232 >= 0x1A) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          goto LABEL_1087;
                                                                                                                        }
                                                                                                                        uint64_t v221 = v4;
                                                                                                                        if (v225 != 45)
                                                                                                                        {
                                                                                                                          if (v225 < 0x30) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          goto LABEL_1087;
                                                                                                                        }
LABEL_1069:
                                                                                                                        unsigned int v231 = v221[2];
                                                                                                                        int v230 = v221 + 2;
                                                                                                                        unsigned int v229 = v231;
                                                                                                                        if (v231 <= 0x39)
                                                                                                                        {
                                                                                                                          if (v229 == 45)
                                                                                                                          {
                                                                                                                            uint64_t v4 = v230;
                                                                                                                            goto LABEL_1091;
                                                                                                                          }
                                                                                                                          if (v229 < 0x30) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          goto LABEL_1108;
                                                                                                                        }
                                                                                                                        if (v229 <= 0x5A)
                                                                                                                        {
                                                                                                                          if (v229 < 0x41) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          goto LABEL_1108;
                                                                                                                        }
                                                                                                                        unsigned int v236 = v229 - 97;
LABEL_1107:
                                                                                                                        if (v236 >= 0x1A) {
                                                                                                                          return 0;
                                                                                                                        }
LABEL_1108:
                                                                                                                        uint64_t v4 = v230 + 1;
                                                                                                                        unsigned int v237 = v230[1];
                                                                                                                        if (v237 > 0x3D)
                                                                                                                        {
                                                                                                                          if (v237 > 0x5A)
                                                                                                                          {
                                                                                                                            unsigned int v241 = v237 - 97;
                                                                                                                            v235 = v230 + 1;
                                                                                                                            goto LABEL_1129;
                                                                                                                          }
                                                                                                                          if (v237 < 0x3F) {
                                                                                                                            return (v4 - a1 + 1);
                                                                                                                          }
                                                                                                                          v235 = v230 + 1;
                                                                                                                          if (v237 < 0x41) {
                                                                                                                            return 0;
                                                                                                                          }
LABEL_1130:
                                                                                                                          unsigned int v242 = v235[1];
                                                                                                                          uint64_t v4 = v235 + 1;
                                                                                                                          if (v242 > 0x3D)
                                                                                                                          {
                                                                                                                            if (v242 <= 0x5A)
                                                                                                                            {
                                                                                                                              if (v242 < 0x3F) {
                                                                                                                                return (v4 - a1 + 1);
                                                                                                                              }
                                                                                                                              __int16 v239 = v235 + 1;
                                                                                                                              if (v242 < 0x41) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              goto LABEL_1151;
                                                                                                                            }
                                                                                                                            unsigned int v245 = v242 - 97;
                                                                                                                            __int16 v239 = v235 + 1;
LABEL_1150:
                                                                                                                            if (v245 >= 0x1A) {
                                                                                                                              return 0;
                                                                                                                            }
                                                                                                                            goto LABEL_1151;
                                                                                                                          }
                                                                                                                          if (v242 > 0x2E)
                                                                                                                          {
                                                                                                                            uint64_t v2 = 0;
                                                                                                                            if (v242 == 47) {
                                                                                                                              return v2;
                                                                                                                            }
                                                                                                                            __int16 v239 = v235 + 1;
                                                                                                                            if (v242 >= 0x3A) {
                                                                                                                              return v2;
                                                                                                                            }
                                                                                                                            goto LABEL_1151;
                                                                                                                          }
                                                                                                                          if (v242 < 0x2D) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          if (v242 == 45)
                                                                                                                          {
LABEL_1134:
                                                                                                                            int v244 = v4 + 1;
                                                                                                                            unsigned int v243 = v4[1];
                                                                                                                            if (v243 > 0x39)
                                                                                                                            {
                                                                                                                              if (v243 <= 0x5A)
                                                                                                                              {
                                                                                                                                if (v243 < 0x41) {
                                                                                                                                  return 0;
                                                                                                                                }
                                                                                                                                goto LABEL_1174;
                                                                                                                              }
                                                                                                                              unsigned int v249 = v243 - 97;
LABEL_1173:
                                                                                                                              if (v249 >= 0x1A) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              goto LABEL_1174;
                                                                                                                            }
                                                                                                                            __int16 v239 = v4;
                                                                                                                            if (v243 != 45)
                                                                                                                            {
                                                                                                                              if (v243 < 0x30) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              goto LABEL_1174;
                                                                                                                            }
LABEL_1155:
                                                                                                                            unsigned int v247 = v239[2];
                                                                                                                            long long v248 = v239 + 2;
                                                                                                                            if (v247 <= 0x39)
                                                                                                                            {
                                                                                                                              if (v247 == 45) {
                                                                                                                                goto LABEL_1179;
                                                                                                                              }
                                                                                                                              if (v247 < 0x30) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              goto LABEL_1196;
                                                                                                                            }
                                                                                                                            if (v247 <= 0x5A)
                                                                                                                            {
                                                                                                                              if (v247 < 0x41) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              goto LABEL_1196;
                                                                                                                            }
                                                                                                                            unsigned int v255 = v247 - 97;
LABEL_1195:
                                                                                                                            if (v255 >= 0x1A) {
                                                                                                                              return 0;
                                                                                                                            }
LABEL_1196:
                                                                                                                            long long v254 = v248 + 1;
                                                                                                                            unsigned int v256 = v248[1];
                                                                                                                            if (v256 > 0x3D)
                                                                                                                            {
                                                                                                                              if (v256 > 0x5A)
                                                                                                                              {
                                                                                                                                unsigned int v259 = v256 - 97;
                                                                                                                                goto LABEL_1219;
                                                                                                                              }
                                                                                                                              if (v256 < 0x3F) {
                                                                                                                                goto LABEL_1367;
                                                                                                                              }
                                                                                                                              if (v256 < 0x41) {
                                                                                                                                return 0;
                                                                                                                              }
LABEL_1220:
                                                                                                                              unsigned int v261 = *++v254;
                                                                                                                              unsigned int v260 = v261;
                                                                                                                              if (v261 > 0x3D)
                                                                                                                              {
                                                                                                                                if (v260 <= 0x5A)
                                                                                                                                {
                                                                                                                                  if (v260 < 0x3F)
                                                                                                                                  {
LABEL_1367:
                                                                                                                                    LODWORD(v4) = v254;
                                                                                                                                    return (v4 - a1 + 1);
                                                                                                                                  }
                                                                                                                                  if (v260 < 0x41) {
                                                                                                                                    return 0;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1242;
                                                                                                                                }
                                                                                                                                unsigned int v264 = v260 - 97;
LABEL_1241:
                                                                                                                                if (v264 >= 0x1A) {
                                                                                                                                  return 0;
                                                                                                                                }
                                                                                                                                goto LABEL_1242;
                                                                                                                              }
                                                                                                                              if (v260 > 0x2E)
                                                                                                                              {
                                                                                                                                uint64_t v2 = 0;
                                                                                                                                if (v260 == 47 || v260 >= 0x3A) {
                                                                                                                                  return v2;
                                                                                                                                }
                                                                                                                                goto LABEL_1242;
                                                                                                                              }
                                                                                                                              BOOL v262 = v260 == 45;
                                                                                                                              if (v260 < 0x2D) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              uint64_t v4 = v254;
                                                                                                                              if (v262)
                                                                                                                              {
LABEL_1225:
                                                                                                                                long long v248 = v254 + 1;
                                                                                                                                unsigned int v263 = v254[1];
                                                                                                                                if (v263 > 0x39)
                                                                                                                                {
                                                                                                                                  if (v263 <= 0x5A)
                                                                                                                                  {
                                                                                                                                    if (v263 < 0x41) {
                                                                                                                                      return 0;
                                                                                                                                    }
                                                                                                                                    goto LABEL_1266;
                                                                                                                                  }
                                                                                                                                  unsigned int v268 = v263 - 97;
LABEL_1265:
                                                                                                                                  if (v268 >= 0x1A) {
                                                                                                                                    return 0;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1266;
                                                                                                                                }
                                                                                                                                if (v263 != 45)
                                                                                                                                {
                                                                                                                                  if (v263 < 0x30) {
                                                                                                                                    return 0;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1266;
                                                                                                                                }
LABEL_1247:
                                                                                                                                unsigned int v267 = v254[2];
                                                                                                                                long long v248 = v254 + 2;
                                                                                                                                if (v267 > 0x39)
                                                                                                                                {
                                                                                                                                  if (v267 <= 0x5A)
                                                                                                                                  {
                                                                                                                                    if (v267 < 0x41) {
                                                                                                                                      return 0;
                                                                                                                                    }
                                                                                                                                    goto LABEL_1288;
                                                                                                                                  }
                                                                                                                                  unsigned int v273 = v267 - 97;
                                                                                                                                  goto LABEL_1287;
                                                                                                                                }
                                                                                                                                if (v267 == 45) {
                                                                                                                                  goto LABEL_1271;
                                                                                                                                }
                                                                                                                                if (v267 < 0x30) {
                                                                                                                                  return 0;
                                                                                                                                }
LABEL_1288:
                                                                                                                                uint64_t v4 = v248 + 1;
                                                                                                                                unsigned int v274 = v248[1];
                                                                                                                                if (v274 > 0x3D)
                                                                                                                                {
                                                                                                                                  if (v274 <= 0x5A)
                                                                                                                                  {
                                                                                                                                    if (v274 < 0x3F) {
                                                                                                                                      return (v4 - a1 + 1);
                                                                                                                                    }
                                                                                                                                    if (v274 < 0x41) {
                                                                                                                                      return 0;
                                                                                                                                    }
                                                                                                                                    goto LABEL_1310;
                                                                                                                                  }
                                                                                                                                  unsigned int v276 = v274 - 97;
LABEL_1309:
                                                                                                                                  if (v276 >= 0x1A) {
                                                                                                                                    return 0;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1310;
                                                                                                                                }
                                                                                                                                if (v274 > 0x2E)
                                                                                                                                {
                                                                                                                                  uint64_t v2 = 0;
                                                                                                                                  if (v274 == 47 || v274 >= 0x3A) {
                                                                                                                                    return v2;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1310;
                                                                                                                                }
                                                                                                                                if (v274 < 0x2D) {
                                                                                                                                  return 0;
                                                                                                                                }
                                                                                                                                if (v274 == 45)
                                                                                                                                {
LABEL_1292:
                                                                                                                                  unsigned int v275 = v248[2];
                                                                                                                                  uint64_t v4 = v248 + 2;
                                                                                                                                  if (v275 > 0x40)
                                                                                                                                  {
                                                                                                                                    if (v275 >= 0x5B && v275 - 97 >= 0x1A) {
                                                                                                                                      return 0;
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  else if (v275 - 48 >= 0xA)
                                                                                                                                  {
                                                                                                                                    return 0;
                                                                                                                                  }
                                                                                                                                  goto LABEL_1326;
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              if (v256 > 0x2E)
                                                                                                                              {
                                                                                                                                uint64_t v2 = 0;
                                                                                                                                if (v256 == 47 || v256 >= 0x3A) {
                                                                                                                                  return v2;
                                                                                                                                }
                                                                                                                                goto LABEL_1220;
                                                                                                                              }
                                                                                                                              BOOL v257 = v256 == 45;
                                                                                                                              if (v256 < 0x2D) {
                                                                                                                                return 0;
                                                                                                                              }
                                                                                                                              uint64_t v4 = v248 + 1;
                                                                                                                              if (v257) {
                                                                                                                                goto LABEL_1201;
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          if (v237 > 0x2E)
                                                                                                                          {
                                                                                                                            uint64_t v2 = 0;
                                                                                                                            if (v237 == 47) {
                                                                                                                              return v2;
                                                                                                                            }
                                                                                                                            v235 = v230 + 1;
                                                                                                                            if (v237 >= 0x3A) {
                                                                                                                              return v2;
                                                                                                                            }
                                                                                                                            goto LABEL_1130;
                                                                                                                          }
                                                                                                                          if (v237 < 0x2D) {
                                                                                                                            return 0;
                                                                                                                          }
                                                                                                                          if (v237 == 45) {
                                                                                                                            goto LABEL_1112;
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (v219 > 0x2E)
                                                                                                                      {
                                                                                                                        uint64_t v2 = 0;
                                                                                                                        if (v219 == 47) {
                                                                                                                          return v2;
                                                                                                                        }
                                                                                                                        int v217 = v212 + 1;
                                                                                                                        if (v219 >= 0x3A) {
                                                                                                                          return v2;
                                                                                                                        }
                                                                                                                        goto LABEL_1044;
                                                                                                                      }
                                                                                                                      if (v219 < 0x2D) {
                                                                                                                        return 0;
                                                                                                                      }
                                                                                                                      if (v219 == 45) {
                                                                                                                        goto LABEL_1026;
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  if (v201 > 0x2E)
                                                                                                                  {
                                                                                                                    uint64_t v2 = 0;
                                                                                                                    if (v201 == 47) {
                                                                                                                      return v2;
                                                                                                                    }
                                                                                                                    uint64_t v199 = v194 + 1;
                                                                                                                    if (v201 >= 0x3A) {
                                                                                                                      return v2;
                                                                                                                    }
                                                                                                                    goto LABEL_958;
                                                                                                                  }
                                                                                                                  if (v201 < 0x2D) {
                                                                                                                    return 0;
                                                                                                                  }
                                                                                                                  if (v201 == 45) {
                                                                                                                    goto LABEL_940;
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (v183 > 0x2E)
                                                                                                              {
                                                                                                                uint64_t v2 = 0;
                                                                                                                if (v183 == 47) {
                                                                                                                  return v2;
                                                                                                                }
                                                                                                                uint64_t v181 = v176 + 1;
                                                                                                                if (v183 >= 0x3A) {
                                                                                                                  return v2;
                                                                                                                }
                                                                                                                goto LABEL_872;
                                                                                                              }
                                                                                                              if (v183 < 0x2D) {
                                                                                                                return 0;
                                                                                                              }
                                                                                                              if (v183 == 45) {
                                                                                                                goto LABEL_854;
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if (v165 > 0x2E)
                                                                                                          {
                                                                                                            uint64_t v2 = 0;
                                                                                                            if (v165 == 47) {
                                                                                                              return v2;
                                                                                                            }
                                                                                                            uint64_t v163 = v158 + 1;
                                                                                                            if (v165 >= 0x3A) {
                                                                                                              return v2;
                                                                                                            }
                                                                                                            goto LABEL_786;
                                                                                                          }
                                                                                                          if (v165 < 0x2D) {
                                                                                                            return 0;
                                                                                                          }
                                                                                                          if (v165 == 45) {
                                                                                                            goto LABEL_768;
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if (v147 > 0x2E)
                                                                                                      {
                                                                                                        uint64_t v2 = 0;
                                                                                                        if (v147 == 47) {
                                                                                                          return v2;
                                                                                                        }
                                                                                                        uint64_t v145 = v140 + 1;
                                                                                                        if (v147 >= 0x3A) {
                                                                                                          return v2;
                                                                                                        }
                                                                                                        goto LABEL_700;
                                                                                                      }
                                                                                                      if (v147 < 0x2D) {
                                                                                                        return 0;
                                                                                                      }
                                                                                                      if (v147 == 45) {
                                                                                                        goto LABEL_682;
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (v129 > 0x2E)
                                                                                                  {
                                                                                                    uint64_t v2 = 0;
                                                                                                    if (v129 == 47) {
                                                                                                      return v2;
                                                                                                    }
                                                                                                    int v127 = v122 + 1;
                                                                                                    if (v129 >= 0x3A) {
                                                                                                      return v2;
                                                                                                    }
                                                                                                    goto LABEL_614;
                                                                                                  }
                                                                                                  if (v129 < 0x2D) {
                                                                                                    return 0;
                                                                                                  }
                                                                                                  if (v129 == 45) {
                                                                                                    goto LABEL_596;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              if (v111 > 0x2E)
                                                                                              {
                                                                                                uint64_t v2 = 0;
                                                                                                if (v111 == 47) {
                                                                                                  return v2;
                                                                                                }
                                                                                                __int16 v109 = v104 + 1;
                                                                                                if (v111 >= 0x3A) {
                                                                                                  return v2;
                                                                                                }
                                                                                                goto LABEL_528;
                                                                                              }
                                                                                              if (v111 < 0x2D) {
                                                                                                return 0;
                                                                                              }
                                                                                              if (v111 == 45) {
                                                                                                goto LABEL_510;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (v93 > 0x2E)
                                                                                          {
                                                                                            uint64_t v2 = 0;
                                                                                            if (v93 == 47) {
                                                                                              return v2;
                                                                                            }
                                                                                            int v91 = v86 + 1;
                                                                                            if (v93 >= 0x3A) {
                                                                                              return v2;
                                                                                            }
                                                                                            goto LABEL_442;
                                                                                          }
                                                                                          if (v93 < 0x2D) {
                                                                                            return 0;
                                                                                          }
                                                                                          if (v93 == 45) {
                                                                                            goto LABEL_424;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if (v75 > 0x2E)
                                                                                      {
                                                                                        uint64_t v2 = 0;
                                                                                        if (v75 == 47) {
                                                                                          return v2;
                                                                                        }
                                                                                        int v73 = v68 + 1;
                                                                                        if (v75 >= 0x3A) {
                                                                                          return v2;
                                                                                        }
                                                                                        goto LABEL_356;
                                                                                      }
                                                                                      if (v75 < 0x2D) {
                                                                                        return 0;
                                                                                      }
                                                                                      if (v75 == 45) {
                                                                                        goto LABEL_338;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  if (v57 > 0x2E)
                                                                                  {
                                                                                    uint64_t v2 = 0;
                                                                                    if (v57 == 47) {
                                                                                      return v2;
                                                                                    }
                                                                                    int v55 = v50 + 1;
                                                                                    if (v57 >= 0x3A) {
                                                                                      return v2;
                                                                                    }
                                                                                    goto LABEL_269;
                                                                                  }
                                                                                  if (v57 < 0x2D) {
                                                                                    return 0;
                                                                                  }
                                                                                  if (v57 == 45) {
                                                                                    goto LABEL_254;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if (v39 > 0x2E)
                                                                              {
                                                                                uint64_t v2 = 0;
                                                                                if (v39 == 47) {
                                                                                  return v2;
                                                                                }
                                                                                unsigned int v37 = v32 + 1;
                                                                                if (v39 >= 0x3A) {
                                                                                  return v2;
                                                                                }
                                                                                goto LABEL_188;
                                                                              }
                                                                              if (v39 < 0x2D) {
                                                                                return 0;
                                                                              }
                                                                              if (v39 == 45) {
                                                                                goto LABEL_176;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          if (v21 > 0x2E)
                                                                          {
                                                                            uint64_t v2 = 0;
                                                                            if (v21 == 47 || v21 >= 0x3A) {
                                                                              return v2;
                                                                            }
                                                                            goto LABEL_122;
                                                                          }
                                                                          if (v21 < 0x2D) {
                                                                            return 0;
                                                                          }
                                                                          if (v21 == 45) {
                                                                            goto LABEL_110;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    if (v9 > 0x5A)
                                                                    {
                                                                      if (v9 - 97 >= 0x1A) {
                                                                        return 0;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if (v9 < 0x3F) {
                                                                        return (v4 - a1 + 1);
                                                                      }
                                                                      if (v9 < 0x41) {
                                                                        return 0;
                                                                      }
                                                                    }
LABEL_56:
                                                                    uint64_t v4 = v6 + 3;
                                                                    unsigned int v11 = v6[3];
                                                                    if (v11 > 0x3D) {
                                                                      break;
                                                                    }
                                                                    if (v11 > 0x2E)
                                                                    {
                                                                      uint64_t v2 = 0;
                                                                      if (v11 == 47 || v11 >= 0x3A) {
                                                                        return v2;
                                                                      }
                                                                      goto LABEL_73;
                                                                    }
                                                                    if (v11 < 0x2D) {
                                                                      return 0;
                                                                    }
                                                                    if (v11 == 45) {
                                                                      goto LABEL_60;
                                                                    }
                                                                  }
                                                                  if (v11 > 0x5A)
                                                                  {
                                                                    unsigned int v13 = v11 - 97;
                                                                    goto LABEL_72;
                                                                  }
                                                                  if (v11 < 0x3F) {
                                                                    return (v4 - a1 + 1);
                                                                  }
                                                                  if (v11 < 0x41) {
                                                                    return 0;
                                                                  }
LABEL_73:
                                                                  uint64_t v4 = v6 + 4;
                                                                  unsigned int v14 = v6[4];
                                                                  if (v14 > 0x3D) {
                                                                    break;
                                                                  }
                                                                  if (v14 > 0x2E)
                                                                  {
                                                                    uint64_t v2 = 0;
                                                                    if (v14 == 47 || v14 >= 0x3A) {
                                                                      return v2;
                                                                    }
                                                                    goto LABEL_89;
                                                                  }
                                                                  if (v14 < 0x2D) {
                                                                    return 0;
                                                                  }
                                                                  if (v14 == 45) {
                                                                    goto LABEL_77;
                                                                  }
                                                                }
                                                                if (v14 > 0x5A)
                                                                {
                                                                  unsigned int v17 = v14 - 97;
                                                                  goto LABEL_88;
                                                                }
                                                                if (v14 < 0x3F) {
                                                                  return (v4 - a1 + 1);
                                                                }
                                                                if (v14 < 0x41) {
                                                                  return 0;
                                                                }
LABEL_89:
                                                                uint64_t v4 = v6 + 5;
                                                                unsigned int v18 = v6[5];
                                                                if (v18 > 0x3D)
                                                                {
                                                                  if (v18 <= 0x5A)
                                                                  {
                                                                    if (v18 < 0x3F) {
                                                                      return (v4 - a1 + 1);
                                                                    }
                                                                    unsigned int v16 = v6 + 5;
                                                                    if (v18 < 0x41) {
                                                                      return 0;
                                                                    }
                                                                    goto LABEL_106;
                                                                  }
                                                                  unsigned int v20 = v18 - 97;
                                                                  unsigned int v16 = v6 + 5;
                                                                  goto LABEL_105;
                                                                }
                                                                if (v18 > 0x2E)
                                                                {
                                                                  uint64_t v2 = 0;
                                                                  if (v18 == 47) {
                                                                    return v2;
                                                                  }
                                                                  unsigned int v16 = v6 + 5;
                                                                  if (v18 >= 0x3A) {
                                                                    return v2;
                                                                  }
                                                                  goto LABEL_106;
                                                                }
                                                                if (v18 < 0x2D) {
                                                                  return 0;
                                                                }
                                                              }
                                                              while (v18 != 45);
LABEL_93:
                                                              unsigned int v19 = v6[6];
                                                              if (v19 > 0x39)
                                                              {
                                                                if (v19 <= 0x5A)
                                                                {
                                                                  if (v19 < 0x41) {
                                                                    return 0;
                                                                  }
                                                                  goto LABEL_122;
                                                                }
                                                                unsigned int v25 = v19 - 97;
LABEL_121:
                                                                if (v25 >= 0x1A) {
                                                                  return 0;
                                                                }
                                                                goto LABEL_122;
                                                              }
                                                              unsigned int v16 = v4;
                                                              if (v19 != 45)
                                                              {
                                                                if (v19 < 0x30) {
                                                                  return 0;
                                                                }
                                                                goto LABEL_122;
                                                              }
LABEL_110:
                                                              unsigned int v24 = v16[2];
                                                              unsigned int v23 = v16 + 2;
                                                              unsigned int v22 = v24;
                                                              if (v24 > 0x39)
                                                              {
                                                                if (v22 <= 0x5A)
                                                                {
                                                                  if (v22 < 0x41) {
                                                                    return 0;
                                                                  }
                                                                  goto LABEL_139;
                                                                }
                                                                unsigned int v29 = v22 - 97;
                                                                goto LABEL_138;
                                                              }
                                                              if (v22 == 45)
                                                              {
                                                                uint64_t v4 = v23;
                                                                goto LABEL_126;
                                                              }
                                                              if (v22 < 0x30) {
                                                                return 0;
                                                              }
LABEL_139:
                                                              uint64_t v4 = v23 + 1;
                                                              unsigned int v30 = v23[1];
                                                              if (v30 > 0x3D) {
                                                                break;
                                                              }
                                                              if (v30 > 0x2E)
                                                              {
                                                                uint64_t v2 = 0;
                                                                if (v30 == 47) {
                                                                  return v2;
                                                                }
                                                                unsigned int v28 = v23 + 1;
                                                                if (v30 >= 0x3A) {
                                                                  return v2;
                                                                }
                                                                goto LABEL_155;
                                                              }
                                                              if (v30 < 0x2D) {
                                                                return 0;
                                                              }
                                                              if (v30 == 45) {
                                                                goto LABEL_143;
                                                              }
                                                            }
                                                            if (v30 > 0x5A)
                                                            {
                                                              unsigned int v34 = v30 - 97;
                                                              unsigned int v28 = v23 + 1;
                                                              goto LABEL_154;
                                                            }
                                                            if (v30 < 0x3F) {
                                                              return (v4 - a1 + 1);
                                                            }
                                                            unsigned int v28 = v23 + 1;
                                                            if (v30 < 0x41) {
                                                              return 0;
                                                            }
LABEL_155:
                                                            unsigned int v35 = v28[1];
                                                            uint64_t v4 = v28 + 1;
                                                            if (v35 > 0x3D)
                                                            {
                                                              if (v35 <= 0x5A)
                                                              {
                                                                if (v35 < 0x3F) {
                                                                  return (v4 - a1 + 1);
                                                                }
                                                                unsigned int v32 = v28 + 1;
                                                                if (v35 < 0x41) {
                                                                  return 0;
                                                                }
                                                                goto LABEL_172;
                                                              }
                                                              unsigned int v38 = v35 - 97;
                                                              unsigned int v32 = v28 + 1;
                                                              goto LABEL_171;
                                                            }
                                                            if (v35 > 0x2E)
                                                            {
                                                              uint64_t v2 = 0;
                                                              if (v35 == 47) {
                                                                return v2;
                                                              }
                                                              unsigned int v32 = v28 + 1;
                                                              if (v35 >= 0x3A) {
                                                                return v2;
                                                              }
                                                              goto LABEL_172;
                                                            }
                                                            if (v35 < 0x2D) {
                                                              return 0;
                                                            }
                                                          }
                                                          while (v35 != 45);
LABEL_159:
                                                          unsigned int v37 = v4 + 1;
                                                          unsigned int v36 = v4[1];
                                                          if (v36 > 0x39)
                                                          {
                                                            if (v36 <= 0x5A)
                                                            {
                                                              if (v36 < 0x41) {
                                                                return 0;
                                                              }
                                                              goto LABEL_188;
                                                            }
                                                            unsigned int v43 = v36 - 97;
LABEL_187:
                                                            if (v43 >= 0x1A) {
                                                              return 0;
                                                            }
                                                            goto LABEL_188;
                                                          }
                                                          unsigned int v32 = v4;
                                                          if (v36 != 45)
                                                          {
                                                            if (v36 < 0x30) {
                                                              return 0;
                                                            }
                                                            goto LABEL_188;
                                                          }
LABEL_176:
                                                          unsigned int v42 = v32[2];
                                                          uint64_t v41 = v32 + 2;
                                                          unsigned int v40 = v42;
                                                          if (v42 > 0x39)
                                                          {
                                                            if (v40 <= 0x5A)
                                                            {
                                                              if (v40 < 0x41) {
                                                                return 0;
                                                              }
                                                              goto LABEL_211;
                                                            }
                                                            unsigned int v47 = v40 - 97;
                                                            goto LABEL_210;
                                                          }
                                                          if (v40 == 45)
                                                          {
                                                            uint64_t v4 = v41;
                                                            goto LABEL_192;
                                                          }
                                                          if (v40 < 0x30) {
                                                            return 0;
                                                          }
LABEL_211:
                                                          uint64_t v4 = v41 + 1;
                                                          unsigned int v48 = v41[1];
                                                          if (v48 > 0x3D) {
                                                            break;
                                                          }
                                                          if (v48 > 0x2E)
                                                          {
                                                            uint64_t v2 = 0;
                                                            if (v48 == 47) {
                                                              return v2;
                                                            }
                                                            int v46 = v41 + 1;
                                                            if (v48 >= 0x3A) {
                                                              return v2;
                                                            }
                                                            goto LABEL_230;
                                                          }
                                                          if (v48 < 0x2D) {
                                                            return 0;
                                                          }
                                                          if (v48 == 45) {
                                                            goto LABEL_215;
                                                          }
                                                        }
                                                        if (v48 > 0x5A)
                                                        {
                                                          unsigned int v52 = v48 - 97;
                                                          int v46 = v41 + 1;
                                                          goto LABEL_229;
                                                        }
                                                        if (v48 < 0x3F) {
                                                          return (v4 - a1 + 1);
                                                        }
                                                        int v46 = v41 + 1;
                                                        if (v48 < 0x41) {
                                                          return 0;
                                                        }
LABEL_230:
                                                        unsigned int v53 = v46[1];
                                                        uint64_t v4 = v46 + 1;
                                                        if (v53 > 0x3D)
                                                        {
                                                          if (v53 <= 0x5A)
                                                          {
                                                            if (v53 < 0x3F) {
                                                              return (v4 - a1 + 1);
                                                            }
                                                            uint64_t v50 = v46 + 1;
                                                            if (v53 < 0x41) {
                                                              return 0;
                                                            }
                                                            goto LABEL_250;
                                                          }
                                                          unsigned int v56 = v53 - 97;
                                                          uint64_t v50 = v46 + 1;
                                                          goto LABEL_249;
                                                        }
                                                        if (v53 > 0x2E)
                                                        {
                                                          uint64_t v2 = 0;
                                                          if (v53 == 47) {
                                                            return v2;
                                                          }
                                                          uint64_t v50 = v46 + 1;
                                                          if (v53 >= 0x3A) {
                                                            return v2;
                                                          }
                                                          goto LABEL_250;
                                                        }
                                                        if (v53 < 0x2D) {
                                                          return 0;
                                                        }
                                                      }
                                                      while (v53 != 45);
LABEL_234:
                                                      int v55 = v4 + 1;
                                                      unsigned int v54 = v4[1];
                                                      if (v54 > 0x39)
                                                      {
                                                        if (v54 <= 0x5A)
                                                        {
                                                          if (v54 < 0x41) {
                                                            return 0;
                                                          }
                                                          goto LABEL_269;
                                                        }
                                                        unsigned int v61 = v54 - 97;
LABEL_268:
                                                        if (v61 >= 0x1A) {
                                                          return 0;
                                                        }
                                                        goto LABEL_269;
                                                      }
                                                      uint64_t v50 = v4;
                                                      if (v54 != 45)
                                                      {
                                                        if (v54 < 0x30) {
                                                          return 0;
                                                        }
                                                        goto LABEL_269;
                                                      }
LABEL_254:
                                                      unsigned int v60 = v50[2];
                                                      int v59 = v50 + 2;
                                                      unsigned int v58 = v60;
                                                      if (v60 > 0x39)
                                                      {
                                                        if (v58 <= 0x5A)
                                                        {
                                                          if (v58 < 0x41) {
                                                            return 0;
                                                          }
                                                          goto LABEL_290;
                                                        }
                                                        unsigned int v65 = v58 - 97;
                                                        goto LABEL_289;
                                                      }
                                                      if (v58 == 45)
                                                      {
                                                        uint64_t v4 = v59;
                                                        goto LABEL_273;
                                                      }
                                                      if (v58 < 0x30) {
                                                        return 0;
                                                      }
LABEL_290:
                                                      uint64_t v4 = v59 + 1;
                                                      unsigned int v66 = v59[1];
                                                      if (v66 > 0x3D) {
                                                        break;
                                                      }
                                                      if (v66 > 0x2E)
                                                      {
                                                        uint64_t v2 = 0;
                                                        if (v66 == 47) {
                                                          return v2;
                                                        }
                                                        int v64 = v59 + 1;
                                                        if (v66 >= 0x3A) {
                                                          return v2;
                                                        }
                                                        goto LABEL_313;
                                                      }
                                                      if (v66 < 0x2D) {
                                                        return 0;
                                                      }
                                                      if (v66 == 45) {
                                                        goto LABEL_294;
                                                      }
                                                    }
                                                    if (v66 > 0x5A)
                                                    {
                                                      unsigned int v70 = v66 - 97;
                                                      int v64 = v59 + 1;
                                                      goto LABEL_312;
                                                    }
                                                    if (v66 < 0x3F) {
                                                      return (v4 - a1 + 1);
                                                    }
                                                    int v64 = v59 + 1;
                                                    if (v66 < 0x41) {
                                                      return 0;
                                                    }
LABEL_313:
                                                    unsigned int v71 = v64[1];
                                                    uint64_t v4 = v64 + 1;
                                                    if (v71 > 0x3D)
                                                    {
                                                      if (v71 <= 0x5A)
                                                      {
                                                        if (v71 < 0x3F) {
                                                          return (v4 - a1 + 1);
                                                        }
                                                        __int16 v68 = v64 + 1;
                                                        if (v71 < 0x41) {
                                                          return 0;
                                                        }
                                                        goto LABEL_334;
                                                      }
                                                      unsigned int v74 = v71 - 97;
                                                      __int16 v68 = v64 + 1;
                                                      goto LABEL_333;
                                                    }
                                                    if (v71 > 0x2E)
                                                    {
                                                      uint64_t v2 = 0;
                                                      if (v71 == 47) {
                                                        return v2;
                                                      }
                                                      __int16 v68 = v64 + 1;
                                                      if (v71 >= 0x3A) {
                                                        return v2;
                                                      }
                                                      goto LABEL_334;
                                                    }
                                                    if (v71 < 0x2D) {
                                                      return 0;
                                                    }
                                                  }
                                                  while (v71 != 45);
LABEL_317:
                                                  int v73 = v4 + 1;
                                                  unsigned int v72 = v4[1];
                                                  if (v72 > 0x39)
                                                  {
                                                    if (v72 <= 0x5A)
                                                    {
                                                      if (v72 < 0x41) {
                                                        return 0;
                                                      }
                                                      goto LABEL_356;
                                                    }
                                                    unsigned int v79 = v72 - 97;
LABEL_355:
                                                    if (v79 >= 0x1A) {
                                                      return 0;
                                                    }
                                                    goto LABEL_356;
                                                  }
                                                  __int16 v68 = v4;
                                                  if (v72 != 45)
                                                  {
                                                    if (v72 < 0x30) {
                                                      return 0;
                                                    }
                                                    goto LABEL_356;
                                                  }
LABEL_338:
                                                  unsigned int v78 = v68[2];
                                                  __int16 v77 = v68 + 2;
                                                  unsigned int v76 = v78;
                                                  if (v78 > 0x39)
                                                  {
                                                    if (v76 <= 0x5A)
                                                    {
                                                      if (v76 < 0x41) {
                                                        return 0;
                                                      }
                                                      goto LABEL_377;
                                                    }
                                                    unsigned int v83 = v76 - 97;
                                                    goto LABEL_376;
                                                  }
                                                  if (v76 == 45)
                                                  {
                                                    uint64_t v4 = v77;
                                                    goto LABEL_360;
                                                  }
                                                  if (v76 < 0x30) {
                                                    return 0;
                                                  }
LABEL_377:
                                                  uint64_t v4 = v77 + 1;
                                                  unsigned int v84 = v77[1];
                                                  if (v84 > 0x3D) {
                                                    break;
                                                  }
                                                  if (v84 > 0x2E)
                                                  {
                                                    uint64_t v2 = 0;
                                                    if (v84 == 47) {
                                                      return v2;
                                                    }
                                                    uint64_t v82 = v77 + 1;
                                                    if (v84 >= 0x3A) {
                                                      return v2;
                                                    }
                                                    goto LABEL_399;
                                                  }
                                                  if (v84 < 0x2D) {
                                                    return 0;
                                                  }
                                                  if (v84 == 45) {
                                                    goto LABEL_381;
                                                  }
                                                }
                                                if (v84 > 0x5A)
                                                {
                                                  unsigned int v88 = v84 - 97;
                                                  uint64_t v82 = v77 + 1;
                                                  goto LABEL_398;
                                                }
                                                if (v84 < 0x3F) {
                                                  return (v4 - a1 + 1);
                                                }
                                                uint64_t v82 = v77 + 1;
                                                if (v84 < 0x41) {
                                                  return 0;
                                                }
LABEL_399:
                                                unsigned int v89 = v82[1];
                                                uint64_t v4 = v82 + 1;
                                                if (v89 > 0x3D)
                                                {
                                                  if (v89 <= 0x5A)
                                                  {
                                                    if (v89 < 0x3F) {
                                                      return (v4 - a1 + 1);
                                                    }
                                                    int v86 = v82 + 1;
                                                    if (v89 < 0x41) {
                                                      return 0;
                                                    }
                                                    goto LABEL_420;
                                                  }
                                                  unsigned int v92 = v89 - 97;
                                                  int v86 = v82 + 1;
                                                  goto LABEL_419;
                                                }
                                                if (v89 > 0x2E)
                                                {
                                                  uint64_t v2 = 0;
                                                  if (v89 == 47) {
                                                    return v2;
                                                  }
                                                  int v86 = v82 + 1;
                                                  if (v89 >= 0x3A) {
                                                    return v2;
                                                  }
                                                  goto LABEL_420;
                                                }
                                                if (v89 < 0x2D) {
                                                  return 0;
                                                }
                                              }
                                              while (v89 != 45);
LABEL_403:
                                              int v91 = v4 + 1;
                                              unsigned int v90 = v4[1];
                                              if (v90 > 0x39)
                                              {
                                                if (v90 <= 0x5A)
                                                {
                                                  if (v90 < 0x41) {
                                                    return 0;
                                                  }
                                                  goto LABEL_442;
                                                }
                                                unsigned int v97 = v90 - 97;
LABEL_441:
                                                if (v97 >= 0x1A) {
                                                  return 0;
                                                }
                                                goto LABEL_442;
                                              }
                                              int v86 = v4;
                                              if (v90 != 45)
                                              {
                                                if (v90 < 0x30) {
                                                  return 0;
                                                }
                                                goto LABEL_442;
                                              }
LABEL_424:
                                              unsigned int v96 = v86[2];
                                              long long v95 = v86 + 2;
                                              unsigned int v94 = v96;
                                              if (v96 > 0x39)
                                              {
                                                if (v94 <= 0x5A)
                                                {
                                                  if (v94 < 0x41) {
                                                    return 0;
                                                  }
                                                  goto LABEL_463;
                                                }
                                                unsigned int v101 = v94 - 97;
                                                goto LABEL_462;
                                              }
                                              if (v94 == 45)
                                              {
                                                uint64_t v4 = v95;
                                                goto LABEL_446;
                                              }
                                              if (v94 < 0x30) {
                                                return 0;
                                              }
LABEL_463:
                                              uint64_t v4 = v95 + 1;
                                              unsigned int v102 = v95[1];
                                              if (v102 > 0x3D) {
                                                break;
                                              }
                                              if (v102 > 0x2E)
                                              {
                                                uint64_t v2 = 0;
                                                if (v102 == 47) {
                                                  return v2;
                                                }
                                                __int16 v100 = v95 + 1;
                                                if (v102 >= 0x3A) {
                                                  return v2;
                                                }
                                                goto LABEL_485;
                                              }
                                              if (v102 < 0x2D) {
                                                return 0;
                                              }
                                              if (v102 == 45) {
                                                goto LABEL_467;
                                              }
                                            }
                                            if (v102 > 0x5A)
                                            {
                                              unsigned int v106 = v102 - 97;
                                              __int16 v100 = v95 + 1;
                                              goto LABEL_484;
                                            }
                                            if (v102 < 0x3F) {
                                              return (v4 - a1 + 1);
                                            }
                                            __int16 v100 = v95 + 1;
                                            if (v102 < 0x41) {
                                              return 0;
                                            }
LABEL_485:
                                            unsigned int v107 = v100[1];
                                            uint64_t v4 = v100 + 1;
                                            if (v107 > 0x3D)
                                            {
                                              if (v107 <= 0x5A)
                                              {
                                                if (v107 < 0x3F) {
                                                  return (v4 - a1 + 1);
                                                }
                                                uint64_t v104 = v100 + 1;
                                                if (v107 < 0x41) {
                                                  return 0;
                                                }
                                                goto LABEL_506;
                                              }
                                              unsigned int v110 = v107 - 97;
                                              uint64_t v104 = v100 + 1;
                                              goto LABEL_505;
                                            }
                                            if (v107 > 0x2E)
                                            {
                                              uint64_t v2 = 0;
                                              if (v107 == 47) {
                                                return v2;
                                              }
                                              uint64_t v104 = v100 + 1;
                                              if (v107 >= 0x3A) {
                                                return v2;
                                              }
                                              goto LABEL_506;
                                            }
                                            if (v107 < 0x2D) {
                                              return 0;
                                            }
                                          }
                                          while (v107 != 45);
LABEL_489:
                                          __int16 v109 = v4 + 1;
                                          unsigned int v108 = v4[1];
                                          if (v108 > 0x39)
                                          {
                                            if (v108 <= 0x5A)
                                            {
                                              if (v108 < 0x41) {
                                                return 0;
                                              }
                                              goto LABEL_528;
                                            }
                                            unsigned int v115 = v108 - 97;
LABEL_527:
                                            if (v115 >= 0x1A) {
                                              return 0;
                                            }
                                            goto LABEL_528;
                                          }
                                          uint64_t v104 = v4;
                                          if (v108 != 45)
                                          {
                                            if (v108 < 0x30) {
                                              return 0;
                                            }
                                            goto LABEL_528;
                                          }
LABEL_510:
                                          unsigned int v114 = v104[2];
                                          uint64_t v113 = v104 + 2;
                                          unsigned int v112 = v114;
                                          if (v114 > 0x39)
                                          {
                                            if (v112 <= 0x5A)
                                            {
                                              if (v112 < 0x41) {
                                                return 0;
                                              }
                                              goto LABEL_549;
                                            }
                                            unsigned int v119 = v112 - 97;
                                            goto LABEL_548;
                                          }
                                          if (v112 == 45)
                                          {
                                            uint64_t v4 = v113;
                                            goto LABEL_532;
                                          }
                                          if (v112 < 0x30) {
                                            return 0;
                                          }
LABEL_549:
                                          uint64_t v4 = v113 + 1;
                                          unsigned int v120 = v113[1];
                                          if (v120 > 0x3D) {
                                            break;
                                          }
                                          if (v120 > 0x2E)
                                          {
                                            uint64_t v2 = 0;
                                            if (v120 == 47) {
                                              return v2;
                                            }
                                            int v118 = v113 + 1;
                                            if (v120 >= 0x3A) {
                                              return v2;
                                            }
                                            goto LABEL_571;
                                          }
                                          if (v120 < 0x2D) {
                                            return 0;
                                          }
                                          if (v120 == 45) {
                                            goto LABEL_553;
                                          }
                                        }
                                        if (v120 > 0x5A)
                                        {
                                          unsigned int v124 = v120 - 97;
                                          int v118 = v113 + 1;
                                          goto LABEL_570;
                                        }
                                        if (v120 < 0x3F) {
                                          return (v4 - a1 + 1);
                                        }
                                        int v118 = v113 + 1;
                                        if (v120 < 0x41) {
                                          return 0;
                                        }
LABEL_571:
                                        unsigned int v125 = v118[1];
                                        uint64_t v4 = v118 + 1;
                                        if (v125 > 0x3D)
                                        {
                                          if (v125 <= 0x5A)
                                          {
                                            if (v125 < 0x3F) {
                                              return (v4 - a1 + 1);
                                            }
                                            BOOL v122 = v118 + 1;
                                            if (v125 < 0x41) {
                                              return 0;
                                            }
                                            goto LABEL_592;
                                          }
                                          unsigned int v128 = v125 - 97;
                                          BOOL v122 = v118 + 1;
                                          goto LABEL_591;
                                        }
                                        if (v125 > 0x2E)
                                        {
                                          uint64_t v2 = 0;
                                          if (v125 == 47) {
                                            return v2;
                                          }
                                          BOOL v122 = v118 + 1;
                                          if (v125 >= 0x3A) {
                                            return v2;
                                          }
                                          goto LABEL_592;
                                        }
                                        if (v125 < 0x2D) {
                                          return 0;
                                        }
                                      }
                                      while (v125 != 45);
LABEL_575:
                                      int v127 = v4 + 1;
                                      unsigned int v126 = v4[1];
                                      if (v126 > 0x39)
                                      {
                                        if (v126 <= 0x5A)
                                        {
                                          if (v126 < 0x41) {
                                            return 0;
                                          }
                                          goto LABEL_614;
                                        }
                                        unsigned int v133 = v126 - 97;
LABEL_613:
                                        if (v133 >= 0x1A) {
                                          return 0;
                                        }
                                        goto LABEL_614;
                                      }
                                      BOOL v122 = v4;
                                      if (v126 != 45)
                                      {
                                        if (v126 < 0x30) {
                                          return 0;
                                        }
                                        goto LABEL_614;
                                      }
LABEL_596:
                                      unsigned int v132 = v122[2];
                                      int v131 = v122 + 2;
                                      unsigned int v130 = v132;
                                      if (v132 > 0x39)
                                      {
                                        if (v130 <= 0x5A)
                                        {
                                          if (v130 < 0x41) {
                                            return 0;
                                          }
                                          goto LABEL_635;
                                        }
                                        unsigned int v137 = v130 - 97;
                                        goto LABEL_634;
                                      }
                                      if (v130 == 45)
                                      {
                                        uint64_t v4 = v131;
                                        goto LABEL_618;
                                      }
                                      if (v130 < 0x30) {
                                        return 0;
                                      }
LABEL_635:
                                      uint64_t v4 = v131 + 1;
                                      unsigned int v138 = v131[1];
                                      if (v138 > 0x3D) {
                                        break;
                                      }
                                      if (v138 > 0x2E)
                                      {
                                        uint64_t v2 = 0;
                                        if (v138 == 47) {
                                          return v2;
                                        }
                                        uint64_t v136 = v131 + 1;
                                        if (v138 >= 0x3A) {
                                          return v2;
                                        }
                                        goto LABEL_657;
                                      }
                                      if (v138 < 0x2D) {
                                        return 0;
                                      }
                                      if (v138 == 45) {
                                        goto LABEL_639;
                                      }
                                    }
                                    if (v138 > 0x5A)
                                    {
                                      unsigned int v142 = v138 - 97;
                                      uint64_t v136 = v131 + 1;
                                      goto LABEL_656;
                                    }
                                    if (v138 < 0x3F) {
                                      return (v4 - a1 + 1);
                                    }
                                    uint64_t v136 = v131 + 1;
                                    if (v138 < 0x41) {
                                      return 0;
                                    }
LABEL_657:
                                    unsigned int v143 = v136[1];
                                    uint64_t v4 = v136 + 1;
                                    if (v143 > 0x3D)
                                    {
                                      if (v143 <= 0x5A)
                                      {
                                        if (v143 < 0x3F) {
                                          return (v4 - a1 + 1);
                                        }
                                        int v140 = v136 + 1;
                                        if (v143 < 0x41) {
                                          return 0;
                                        }
                                        goto LABEL_678;
                                      }
                                      unsigned int v146 = v143 - 97;
                                      int v140 = v136 + 1;
                                      goto LABEL_677;
                                    }
                                    if (v143 > 0x2E)
                                    {
                                      uint64_t v2 = 0;
                                      if (v143 == 47) {
                                        return v2;
                                      }
                                      int v140 = v136 + 1;
                                      if (v143 >= 0x3A) {
                                        return v2;
                                      }
                                      goto LABEL_678;
                                    }
                                    if (v143 < 0x2D) {
                                      return 0;
                                    }
                                  }
                                  while (v143 != 45);
LABEL_661:
                                  uint64_t v145 = v4 + 1;
                                  unsigned int v144 = v4[1];
                                  if (v144 > 0x39)
                                  {
                                    if (v144 <= 0x5A)
                                    {
                                      if (v144 < 0x41) {
                                        return 0;
                                      }
                                      goto LABEL_700;
                                    }
                                    unsigned int v151 = v144 - 97;
LABEL_699:
                                    if (v151 >= 0x1A) {
                                      return 0;
                                    }
                                    goto LABEL_700;
                                  }
                                  int v140 = v4;
                                  if (v144 != 45)
                                  {
                                    if (v144 < 0x30) {
                                      return 0;
                                    }
                                    goto LABEL_700;
                                  }
LABEL_682:
                                  unsigned int v150 = v140[2];
                                  int v149 = v140 + 2;
                                  unsigned int v148 = v150;
                                  if (v150 > 0x39)
                                  {
                                    if (v148 <= 0x5A)
                                    {
                                      if (v148 < 0x41) {
                                        return 0;
                                      }
                                      goto LABEL_721;
                                    }
                                    unsigned int v155 = v148 - 97;
                                    goto LABEL_720;
                                  }
                                  if (v148 == 45)
                                  {
                                    uint64_t v4 = v149;
                                    goto LABEL_704;
                                  }
                                  if (v148 < 0x30) {
                                    return 0;
                                  }
LABEL_721:
                                  uint64_t v4 = v149 + 1;
                                  unsigned int v156 = v149[1];
                                  if (v156 > 0x3D) {
                                    break;
                                  }
                                  if (v156 > 0x2E)
                                  {
                                    uint64_t v2 = 0;
                                    if (v156 == 47) {
                                      return v2;
                                    }
                                    int v154 = v149 + 1;
                                    if (v156 >= 0x3A) {
                                      return v2;
                                    }
                                    goto LABEL_743;
                                  }
                                  if (v156 < 0x2D) {
                                    return 0;
                                  }
                                  if (v156 == 45) {
                                    goto LABEL_725;
                                  }
                                }
                                if (v156 > 0x5A)
                                {
                                  unsigned int v160 = v156 - 97;
                                  int v154 = v149 + 1;
                                  goto LABEL_742;
                                }
                                if (v156 < 0x3F) {
                                  return (v4 - a1 + 1);
                                }
                                int v154 = v149 + 1;
                                if (v156 < 0x41) {
                                  return 0;
                                }
LABEL_743:
                                unsigned int v161 = v154[1];
                                uint64_t v4 = v154 + 1;
                                if (v161 > 0x3D)
                                {
                                  if (v161 <= 0x5A)
                                  {
                                    if (v161 < 0x3F) {
                                      return (v4 - a1 + 1);
                                    }
                                    int v158 = v154 + 1;
                                    if (v161 < 0x41) {
                                      return 0;
                                    }
                                    goto LABEL_764;
                                  }
                                  unsigned int v164 = v161 - 97;
                                  int v158 = v154 + 1;
                                  goto LABEL_763;
                                }
                                if (v161 > 0x2E)
                                {
                                  uint64_t v2 = 0;
                                  if (v161 == 47) {
                                    return v2;
                                  }
                                  int v158 = v154 + 1;
                                  if (v161 >= 0x3A) {
                                    return v2;
                                  }
                                  goto LABEL_764;
                                }
                                if (v161 < 0x2D) {
                                  return 0;
                                }
                              }
                              while (v161 != 45);
LABEL_747:
                              uint64_t v163 = v4 + 1;
                              unsigned int v162 = v4[1];
                              if (v162 > 0x39)
                              {
                                if (v162 <= 0x5A)
                                {
                                  if (v162 < 0x41) {
                                    return 0;
                                  }
                                  goto LABEL_786;
                                }
                                unsigned int v169 = v162 - 97;
LABEL_785:
                                if (v169 >= 0x1A) {
                                  return 0;
                                }
                                goto LABEL_786;
                              }
                              int v158 = v4;
                              if (v162 != 45)
                              {
                                if (v162 < 0x30) {
                                  return 0;
                                }
                                goto LABEL_786;
                              }
LABEL_768:
                              unsigned int v168 = v158[2];
                              v167 = v158 + 2;
                              unsigned int v166 = v168;
                              if (v168 > 0x39)
                              {
                                if (v166 <= 0x5A)
                                {
                                  if (v166 < 0x41) {
                                    return 0;
                                  }
                                  goto LABEL_807;
                                }
                                unsigned int v173 = v166 - 97;
                                goto LABEL_806;
                              }
                              if (v166 == 45)
                              {
                                uint64_t v4 = v167;
                                goto LABEL_790;
                              }
                              if (v166 < 0x30) {
                                return 0;
                              }
LABEL_807:
                              uint64_t v4 = v167 + 1;
                              unsigned int v174 = v167[1];
                              if (v174 > 0x3D) {
                                break;
                              }
                              if (v174 > 0x2E)
                              {
                                uint64_t v2 = 0;
                                if (v174 == 47) {
                                  return v2;
                                }
                                int v172 = v167 + 1;
                                if (v174 >= 0x3A) {
                                  return v2;
                                }
                                goto LABEL_829;
                              }
                              if (v174 < 0x2D) {
                                return 0;
                              }
                              if (v174 == 45) {
                                goto LABEL_811;
                              }
                            }
                            if (v174 > 0x5A)
                            {
                              unsigned int v178 = v174 - 97;
                              int v172 = v167 + 1;
                              goto LABEL_828;
                            }
                            if (v174 < 0x3F) {
                              return (v4 - a1 + 1);
                            }
                            int v172 = v167 + 1;
                            if (v174 < 0x41) {
                              return 0;
                            }
LABEL_829:
                            unsigned int v179 = v172[1];
                            uint64_t v4 = v172 + 1;
                            if (v179 > 0x3D)
                            {
                              if (v179 <= 0x5A)
                              {
                                if (v179 < 0x3F) {
                                  return (v4 - a1 + 1);
                                }
                                v176 = v172 + 1;
                                if (v179 < 0x41) {
                                  return 0;
                                }
                                goto LABEL_850;
                              }
                              unsigned int v182 = v179 - 97;
                              v176 = v172 + 1;
                              goto LABEL_849;
                            }
                            if (v179 > 0x2E)
                            {
                              uint64_t v2 = 0;
                              if (v179 == 47) {
                                return v2;
                              }
                              v176 = v172 + 1;
                              if (v179 >= 0x3A) {
                                return v2;
                              }
                              goto LABEL_850;
                            }
                            if (v179 < 0x2D) {
                              return 0;
                            }
                          }
                          while (v179 != 45);
LABEL_833:
                          uint64_t v181 = v4 + 1;
                          unsigned int v180 = v4[1];
                          if (v180 > 0x39)
                          {
                            if (v180 <= 0x5A)
                            {
                              if (v180 < 0x41) {
                                return 0;
                              }
                              goto LABEL_872;
                            }
                            unsigned int v187 = v180 - 97;
LABEL_871:
                            if (v187 >= 0x1A) {
                              return 0;
                            }
                            goto LABEL_872;
                          }
                          v176 = v4;
                          if (v180 != 45)
                          {
                            if (v180 < 0x30) {
                              return 0;
                            }
                            goto LABEL_872;
                          }
LABEL_854:
                          unsigned int v186 = v176[2];
                          int v185 = v176 + 2;
                          unsigned int v184 = v186;
                          if (v186 > 0x39)
                          {
                            if (v184 <= 0x5A)
                            {
                              if (v184 < 0x41) {
                                return 0;
                              }
                              goto LABEL_893;
                            }
                            unsigned int v191 = v184 - 97;
                            goto LABEL_892;
                          }
                          if (v184 == 45)
                          {
                            uint64_t v4 = v185;
                            goto LABEL_876;
                          }
                          if (v184 < 0x30) {
                            return 0;
                          }
LABEL_893:
                          uint64_t v4 = v185 + 1;
                          unsigned int v192 = v185[1];
                          if (v192 > 0x3D) {
                            break;
                          }
                          if (v192 > 0x2E)
                          {
                            uint64_t v2 = 0;
                            if (v192 == 47) {
                              return v2;
                            }
                            int v190 = v185 + 1;
                            if (v192 >= 0x3A) {
                              return v2;
                            }
                            goto LABEL_915;
                          }
                          if (v192 < 0x2D) {
                            return 0;
                          }
                          if (v192 == 45) {
                            goto LABEL_897;
                          }
                        }
                        if (v192 > 0x5A)
                        {
                          unsigned int v196 = v192 - 97;
                          int v190 = v185 + 1;
                          goto LABEL_914;
                        }
                        if (v192 < 0x3F) {
                          return (v4 - a1 + 1);
                        }
                        int v190 = v185 + 1;
                        if (v192 < 0x41) {
                          return 0;
                        }
LABEL_915:
                        unsigned int v197 = v190[1];
                        uint64_t v4 = v190 + 1;
                        if (v197 > 0x3D)
                        {
                          if (v197 <= 0x5A)
                          {
                            if (v197 < 0x3F) {
                              return (v4 - a1 + 1);
                            }
                            int v194 = v190 + 1;
                            if (v197 < 0x41) {
                              return 0;
                            }
                            goto LABEL_936;
                          }
                          unsigned int v200 = v197 - 97;
                          int v194 = v190 + 1;
                          goto LABEL_935;
                        }
                        if (v197 > 0x2E)
                        {
                          uint64_t v2 = 0;
                          if (v197 == 47) {
                            return v2;
                          }
                          int v194 = v190 + 1;
                          if (v197 >= 0x3A) {
                            return v2;
                          }
                          goto LABEL_936;
                        }
                        if (v197 < 0x2D) {
                          return 0;
                        }
                      }
                      while (v197 != 45);
LABEL_919:
                      uint64_t v199 = v4 + 1;
                      unsigned int v198 = v4[1];
                      if (v198 > 0x39)
                      {
                        if (v198 <= 0x5A)
                        {
                          if (v198 < 0x41) {
                            return 0;
                          }
                          goto LABEL_958;
                        }
                        unsigned int v205 = v198 - 97;
LABEL_957:
                        if (v205 >= 0x1A) {
                          return 0;
                        }
                        goto LABEL_958;
                      }
                      int v194 = v4;
                      if (v198 != 45)
                      {
                        if (v198 < 0x30) {
                          return 0;
                        }
                        goto LABEL_958;
                      }
LABEL_940:
                      unsigned int v204 = v194[2];
                      uint64_t v203 = v194 + 2;
                      unsigned int v202 = v204;
                      if (v204 > 0x39)
                      {
                        if (v202 <= 0x5A)
                        {
                          if (v202 < 0x41) {
                            return 0;
                          }
                          goto LABEL_979;
                        }
                        unsigned int v209 = v202 - 97;
                        goto LABEL_978;
                      }
                      if (v202 == 45)
                      {
                        uint64_t v4 = v203;
                        goto LABEL_962;
                      }
                      if (v202 < 0x30) {
                        return 0;
                      }
LABEL_979:
                      uint64_t v4 = v203 + 1;
                      unsigned int v210 = v203[1];
                      if (v210 > 0x3D) {
                        break;
                      }
                      if (v210 > 0x2E)
                      {
                        uint64_t v2 = 0;
                        if (v210 == 47) {
                          return v2;
                        }
                        uint64_t v208 = v203 + 1;
                        if (v210 >= 0x3A) {
                          return v2;
                        }
                        goto LABEL_1001;
                      }
                      if (v210 < 0x2D) {
                        return 0;
                      }
                      if (v210 == 45) {
                        goto LABEL_983;
                      }
                    }
                    if (v210 > 0x5A)
                    {
                      unsigned int v214 = v210 - 97;
                      uint64_t v208 = v203 + 1;
                      goto LABEL_1000;
                    }
                    if (v210 < 0x3F) {
                      return (v4 - a1 + 1);
                    }
                    uint64_t v208 = v203 + 1;
                    if (v210 < 0x41) {
                      return 0;
                    }
LABEL_1001:
                    unsigned int v215 = v208[1];
                    uint64_t v4 = v208 + 1;
                    if (v215 > 0x3D)
                    {
                      if (v215 <= 0x5A)
                      {
                        if (v215 < 0x3F) {
                          return (v4 - a1 + 1);
                        }
                        uint64_t v212 = v208 + 1;
                        if (v215 < 0x41) {
                          return 0;
                        }
                        goto LABEL_1022;
                      }
                      unsigned int v218 = v215 - 97;
                      uint64_t v212 = v208 + 1;
                      goto LABEL_1021;
                    }
                    if (v215 > 0x2E)
                    {
                      uint64_t v2 = 0;
                      if (v215 == 47) {
                        return v2;
                      }
                      uint64_t v212 = v208 + 1;
                      if (v215 >= 0x3A) {
                        return v2;
                      }
                      goto LABEL_1022;
                    }
                    if (v215 < 0x2D) {
                      return 0;
                    }
                  }
                  while (v215 != 45);
LABEL_1005:
                  int v217 = v4 + 1;
                  unsigned int v216 = v4[1];
                  if (v216 > 0x39)
                  {
                    if (v216 <= 0x5A)
                    {
                      if (v216 < 0x41) {
                        return 0;
                      }
                      goto LABEL_1044;
                    }
                    unsigned int v223 = v216 - 97;
LABEL_1043:
                    if (v223 >= 0x1A) {
                      return 0;
                    }
                    goto LABEL_1044;
                  }
                  uint64_t v212 = v4;
                  if (v216 != 45)
                  {
                    if (v216 < 0x30) {
                      return 0;
                    }
                    goto LABEL_1044;
                  }
LABEL_1026:
                  unsigned int v222 = v212[2];
                  uint64_t v221 = v212 + 2;
                  unsigned int v220 = v222;
                  if (v222 > 0x39)
                  {
                    if (v220 <= 0x5A)
                    {
                      if (v220 < 0x41) {
                        return 0;
                      }
                      goto LABEL_1065;
                    }
                    unsigned int v227 = v220 - 97;
                    goto LABEL_1064;
                  }
                  if (v220 == 45)
                  {
                    uint64_t v4 = v221;
                    goto LABEL_1048;
                  }
                  if (v220 < 0x30) {
                    return 0;
                  }
LABEL_1065:
                  uint64_t v4 = v221 + 1;
                  unsigned int v228 = v221[1];
                  if (v228 > 0x3D) {
                    break;
                  }
                  if (v228 > 0x2E)
                  {
                    uint64_t v2 = 0;
                    if (v228 == 47) {
                      return v2;
                    }
                    v226 = v221 + 1;
                    if (v228 >= 0x3A) {
                      return v2;
                    }
                    goto LABEL_1087;
                  }
                  if (v228 < 0x2D) {
                    return 0;
                  }
                  if (v228 == 45) {
                    goto LABEL_1069;
                  }
                }
                if (v228 > 0x5A)
                {
                  unsigned int v232 = v228 - 97;
                  v226 = v221 + 1;
                  goto LABEL_1086;
                }
                if (v228 < 0x3F) {
                  return (v4 - a1 + 1);
                }
                v226 = v221 + 1;
                if (v228 < 0x41) {
                  return 0;
                }
LABEL_1087:
                unsigned int v233 = v226[1];
                uint64_t v4 = v226 + 1;
                if (v233 > 0x3D)
                {
                  if (v233 <= 0x5A)
                  {
                    if (v233 < 0x3F) {
                      return (v4 - a1 + 1);
                    }
                    int v230 = v226 + 1;
                    if (v233 < 0x41) {
                      return 0;
                    }
                    goto LABEL_1108;
                  }
                  unsigned int v236 = v233 - 97;
                  int v230 = v226 + 1;
                  goto LABEL_1107;
                }
                if (v233 > 0x2E)
                {
                  uint64_t v2 = 0;
                  if (v233 == 47) {
                    return v2;
                  }
                  int v230 = v226 + 1;
                  if (v233 >= 0x3A) {
                    return v2;
                  }
                  goto LABEL_1108;
                }
                if (v233 < 0x2D) {
                  return 0;
                }
              }
              while (v233 != 45);
LABEL_1091:
              v235 = v4 + 1;
              unsigned int v234 = v4[1];
              if (v234 > 0x39)
              {
                if (v234 <= 0x5A)
                {
                  if (v234 < 0x41) {
                    return 0;
                  }
                  goto LABEL_1130;
                }
                unsigned int v241 = v234 - 97;
LABEL_1129:
                if (v241 >= 0x1A) {
                  return 0;
                }
                goto LABEL_1130;
              }
              int v230 = v4;
              if (v234 != 45)
              {
                if (v234 < 0x30) {
                  return 0;
                }
                goto LABEL_1130;
              }
LABEL_1112:
              unsigned int v240 = v230[2];
              __int16 v239 = v230 + 2;
              unsigned int v238 = v240;
              if (v240 > 0x39)
              {
                if (v238 <= 0x5A)
                {
                  if (v238 < 0x41) {
                    return 0;
                  }
                  goto LABEL_1151;
                }
                unsigned int v245 = v238 - 97;
                goto LABEL_1150;
              }
              if (v238 == 45)
              {
                uint64_t v4 = v239;
                goto LABEL_1134;
              }
              if (v238 < 0x30) {
                return 0;
              }
LABEL_1151:
              uint64_t v4 = v239 + 1;
              unsigned int v246 = v239[1];
              if (v246 > 0x3D) {
                break;
              }
              if (v246 > 0x2E)
              {
                uint64_t v2 = 0;
                if (v246 == 47) {
                  return v2;
                }
                int v244 = v239 + 1;
                if (v246 >= 0x3A) {
                  return v2;
                }
                goto LABEL_1174;
              }
              if (v246 < 0x2D) {
                return 0;
              }
              if (v246 == 45) {
                goto LABEL_1155;
              }
            }
            if (v246 > 0x5A)
            {
              unsigned int v249 = v246 - 97;
              int v244 = v239 + 1;
              goto LABEL_1173;
            }
            if (v246 < 0x3F) {
              return (v4 - a1 + 1);
            }
            int v244 = v239 + 1;
            if (v246 < 0x41) {
              return 0;
            }
LABEL_1174:
            unsigned int v251 = v244[1];
            long long v248 = v244 + 1;
            unsigned int v250 = v251;
            if (v251 > 0x3D)
            {
              if (v250 <= 0x5A)
              {
                if (v250 < 0x3F) {
                  goto LABEL_1366;
                }
                if (v250 < 0x41) {
                  return 0;
                }
                goto LABEL_1196;
              }
              unsigned int v255 = v250 - 97;
              goto LABEL_1195;
            }
            if (v250 > 0x2E)
            {
              uint64_t v2 = 0;
              if (v250 == 47 || v250 >= 0x3A) {
                return v2;
              }
              goto LABEL_1196;
            }
            BOOL v252 = v250 == 45;
            if (v250 < 0x2D) {
              return 0;
            }
            uint64_t v4 = v248;
          }
          while (!v252);
LABEL_1179:
          long long v254 = v248 + 1;
          unsigned int v253 = v248[1];
          if (v253 > 0x39)
          {
            if (v253 <= 0x5A)
            {
              if (v253 < 0x41) {
                return 0;
              }
              goto LABEL_1220;
            }
            unsigned int v259 = v253 - 97;
LABEL_1219:
            if (v259 >= 0x1A) {
              return 0;
            }
            goto LABEL_1220;
          }
          if (v253 != 45)
          {
            if (v253 < 0x30) {
              return 0;
            }
            goto LABEL_1220;
          }
LABEL_1201:
          unsigned int v258 = v248[2];
          long long v254 = v248 + 2;
          if (v258 > 0x39)
          {
            if (v258 <= 0x5A)
            {
              if (v258 < 0x41) {
                return 0;
              }
              goto LABEL_1242;
            }
            unsigned int v264 = v258 - 97;
            goto LABEL_1241;
          }
          if (v258 == 45) {
            goto LABEL_1225;
          }
          if (v258 < 0x30) {
            return 0;
          }
LABEL_1242:
          long long v248 = v254 + 1;
          unsigned int v265 = v254[1];
          if (v265 > 0x3D) {
            break;
          }
          if (v265 > 0x2E)
          {
            uint64_t v2 = 0;
            if (v265 == 47 || v265 >= 0x3A) {
              return v2;
            }
            goto LABEL_1266;
          }
          BOOL v266 = v265 == 45;
          if (v265 < 0x2D) {
            return 0;
          }
          uint64_t v4 = v254 + 1;
          if (v266) {
            goto LABEL_1247;
          }
        }
        if (v265 > 0x5A)
        {
          unsigned int v268 = v265 - 97;
          goto LABEL_1265;
        }
        if (v265 < 0x3F) {
          goto LABEL_1366;
        }
        if (v265 < 0x41) {
          return 0;
        }
LABEL_1266:
        unsigned int v270 = *++v248;
        unsigned int v269 = v270;
        if (v270 > 0x3D)
        {
          if (v269 <= 0x5A)
          {
            if (v269 < 0x3F)
            {
LABEL_1366:
              LODWORD(v4) = v248;
              return (v4 - a1 + 1);
            }
            if (v269 < 0x41) {
              return 0;
            }
            goto LABEL_1288;
          }
          unsigned int v273 = v269 - 97;
LABEL_1287:
          if (v273 >= 0x1A) {
            return 0;
          }
          goto LABEL_1288;
        }
        if (v269 > 0x2E)
        {
          uint64_t v2 = 0;
          if (v269 == 47 || v269 >= 0x3A) {
            return v2;
          }
          goto LABEL_1288;
        }
        BOOL v271 = v269 == 45;
        if (v269 < 0x2D) {
          return 0;
        }
        uint64_t v4 = v248;
      }
      while (!v271);
LABEL_1271:
      uint64_t v4 = v248 + 1;
      unsigned int v272 = v248[1];
      if (v272 > 0x39)
      {
        if (v272 <= 0x5A)
        {
          if (v272 < 0x41) {
            return 0;
          }
          goto LABEL_1310;
        }
        unsigned int v276 = v272 - 97;
        goto LABEL_1309;
      }
      if (v272 == 45) {
        goto LABEL_1292;
      }
      if (v272 < 0x30) {
        return 0;
      }
LABEL_1310:
      unsigned int v278 = *++v4;
      unsigned int v277 = v278;
      if (v278 > 0x3D) {
        break;
      }
      if (v277 > 0x2E)
      {
        uint64_t v2 = 0;
        if (v277 == 47 || v277 > 0x39) {
          return v2;
        }
        goto LABEL_1326;
      }
      uint64_t v2 = 0;
      if (v277 != 46) {
        return v2;
      }
    }
    if (v277 > 0x5A)
    {
      if (v277 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else
    {
      if (v277 < 0x3F) {
        return (v4 - a1 + 1);
      }
      if (v277 < 0x41) {
        return 0;
      }
    }
LABEL_1326:
    int v280 = *++v4;
    int v279 = v280;
  }
  while (v280 == 46);
  if (v279 != 62) {
    return 0;
  }
  return (v4 - a1 + 1);
}

uint64_t _scan_html_tag(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x40)
  {
    if (v1 == 47)
    {
      unsigned int v2 = a1[1];
      if (v2 >= 0x41 && (v2 < 0x5B || v2 - 97 <= 0x19))
      {
        int i = a1 + 2;
        do
        {
          unsigned int v6 = *i++;
          unsigned int v5 = v6;
        }
        while ((_scan_html_tag_yybm[v6] & 4) != 0);
        if (v5 > 0x1F)
        {
          if (v5 == 32)
          {
            while (1)
            {
LABEL_176:
              unsigned int v49 = *i;
              if (v49 > 0x1F)
              {
                if (v49 != 32) {
                  goto LABEL_185;
                }
              }
              else if (v49 - 9 > 4)
              {
                return 0;
              }
              ++i;
            }
          }
          if (v5 == 62)
          {
            LODWORD(i) = i - 1;
            return (i - a1 + 1);
          }
        }
        else if (v5 - 9 < 5)
        {
          goto LABEL_176;
        }
      }
    }
    return 0;
  }
  if (v1 >= 0x5B && v1 - 97 >= 0x1A) {
    return 0;
  }
  int i = a1 + 1;
  uint64_t v8 = a1[1];
  if (v8 > 0x2E)
  {
    if (v8 > 0x40)
    {
      if (v8 >= 0x5B && (v8 - 97) >= 0x1A) {
        return 0;
      }
    }
    else if (v8 >= 0x3A && v8 != 62)
    {
      return 0;
    }
  }
  else if (v8 > 0x1F)
  {
    if (v8 != 45 && v8 != 32) {
      return 0;
    }
  }
  else if ((v8 - 9) >= 5)
  {
    return 0;
  }
  if ((_scan_html_tag_yybm[v8] & 8) != 0) {
    goto LABEL_44;
  }
  do
  {
    if (v8 > 0x3D)
    {
      if (v8 > 0x5A)
      {
        if ((v8 - 97) >= 0x1A) {
          return 0;
        }
      }
      else
      {
        if (v8 < 0x3F) {
          return (i - a1 + 1);
        }
        if (v8 < 0x41) {
          return 0;
        }
      }
    }
    else if (v8 > 0x2E)
    {
      if (v8 == 47) {
        goto LABEL_184;
      }
      if (v8 >= 0x3A) {
        return 0;
      }
    }
    else if (v8 != 45)
    {
      return 0;
    }
    unsigned int v9 = *++i;
    LODWORD(v8) = v9;
  }
  while ((_scan_html_tag_yybm[v9] & 8) == 0);
  do
  {
    do
    {
LABEL_44:
      unsigned int v11 = *++i;
      unsigned int v10 = v11;
    }
    while ((_scan_html_tag_yybm[v11] & 8) != 0);
    if (v10 <= 0x3E)
    {
      if (v10 > 0x39)
      {
        if (v10 != 58)
        {
          if (v10 < 0x3E) {
            return 0;
          }
          return (i - a1 + 1);
        }
        goto LABEL_54;
      }
      BOOL v18 = v10 == 47;
      goto LABEL_182;
    }
    if (v10 > 0x5E)
    {
      uint64_t v12 = 0;
      if (v10 == 96 || v10 > 0x7A) {
        return v12;
      }
    }
    else if (v10 - 65 >= 0x1A)
    {
      return 0;
    }
    while (1)
    {
      do
      {
LABEL_54:
        unsigned int v13 = i;
        unsigned int v15 = *++i;
        unsigned int v14 = v15;
      }
      while ((_scan_html_tag_yybm[v15] & 0x10) != 0);
      if (v14 > 0x2C) {
        break;
      }
      if (v14 > 0xD)
      {
        if (v14 != 32) {
          return 0;
        }
      }
      else if (v14 < 9)
      {
        return 0;
      }
      for (int i = v13 + 2; ; ++i)
      {
        unsigned int v16 = *i;
        if (v16 > 0x3C) {
          break;
        }
        if (v16 > 0x20)
        {
          BOOL v18 = v16 == 47;
          if (v16 > 0x2F)
          {
            uint64_t v12 = 0;
            if (v16 != 58) {
              return v12;
            }
            goto LABEL_54;
          }
LABEL_182:
          if (!v18) {
            return 0;
          }
LABEL_184:
          unsigned int v50 = i[1];
          LODWORD(i) = i + 1;
          unsigned int v49 = v50;
LABEL_185:
          if (v49 == 62) {
            return (i - a1 + 1);
          }
          return 0;
        }
        if (v16 < 9 || v16 - 14 < 0x12) {
          return 0;
        }
      }
      if (v16 > 0x5A)
      {
        if (v16 > 0x5F)
        {
          uint64_t v12 = 0;
          if (v16 == 96 || v16 >= 0x7B) {
            return v12;
          }
        }
        else
        {
          uint64_t v12 = 0;
          if (v16 != 95) {
            return v12;
          }
        }
      }
      else
      {
        if (v16 < 0x3E) {
          goto LABEL_84;
        }
        if (v16 == 62) {
          return (i - a1 + 1);
        }
        uint64_t v12 = 0;
        if (v16 < 0x41) {
          return v12;
        }
      }
    }
    if (v14 <= 0x3C)
    {
      if (v14 >= 0x30) {
        return 0;
      }
      goto LABEL_184;
    }
    if (v14 != 61)
    {
      if (v14 >= 0x3F) {
        return 0;
      }
      return (i - a1 + 1);
    }
LABEL_84:
    ++i;
    do
    {
      unsigned int v19 = *i;
      if ((_scan_html_tag_yybm[*i] & 0x20) != 0)
      {
        while (1)
        {
          do
          {
            unsigned int v48 = *++i;
            unsigned int v19 = v48;
          }
          while ((_scan_html_tag_yybm[v48] & 0x20) != 0);
          unsigned int v33 = i - 1;
          if (v19 > 0xE0) {
            goto LABEL_149;
          }
          if (v19 <= 0x3D) {
            break;
          }
          if (v19 == 62) {
            return (i - a1 + 1);
          }
          if (v19 < 0xC2) {
            return 0;
          }
          if (v19 >= 0xE0) {
            goto LABEL_147;
          }
LABEL_162:
          int v47 = (char)*++i;
          if (v47 > -65) {
            return 0;
          }
        }
        uint64_t v12 = 0;
        if (v19 - 1 >= 0x20) {
          return v12;
        }
        goto LABEL_44;
      }
      if (v19 > 0xE0)
      {
        unsigned int v33 = i - 1;
LABEL_149:
        if (v19 > 0xEF)
        {
          if (v19 == 240)
          {
            int i = v33 + 2;
            if ((v33[2] + 112) >= 0x30u) {
              return 0;
            }
          }
          else if (v19 >= 0xF4)
          {
            if (v19 != 244) {
              return 0;
            }
            int i = v33 + 2;
            if ((char)v33[2] >= -112) {
              return 0;
            }
          }
          else
          {
            int i = v33 + 2;
            if ((char)v33[2] >= -64) {
              return 0;
            }
          }
        }
        else if (v19 == 237)
        {
          int i = v33 + 2;
          if ((char)v33[2] >= -96) {
            return 0;
          }
          goto LABEL_162;
        }
        int v46 = (char)*++i;
        if (v46 >= -64) {
          return 0;
        }
        goto LABEL_162;
      }
      if (v19 > 0x22)
      {
        if (v19 > 0x27)
        {
          if (v19 < 0xC2) {
            return 0;
          }
          if (v19 < 0xE0) {
            goto LABEL_162;
          }
          unsigned int v33 = i - 1;
LABEL_147:
          int i = v33 + 2;
          if ((v33[2] & 0xE0) != 0xA0) {
            return 0;
          }
          goto LABEL_162;
        }
        do
        {
LABEL_116:
          unsigned int v21 = i;
          unsigned int v35 = *++i;
          unsigned int v34 = v35;
        }
        while (_scan_html_tag_yybm[v35] < 0);
        if (v34 > 0xEC)
        {
          if (v34 > 0xF0)
          {
            if (v34 >= 0xF4)
            {
              if (v34 != 244) {
                return 0;
              }
              int v42 = (char)v21[2];
              unsigned int v39 = v21 + 2;
              if (v42 >= -112) {
                return 0;
              }
            }
            else
            {
              int v40 = (char)v21[2];
              unsigned int v39 = v21 + 2;
              if (v40 >= -64) {
                return 0;
              }
            }
          }
          else
          {
            if (v34 < 0xEE)
            {
              int v38 = (char)v21[2];
              unsigned int v36 = v21 + 2;
              if (v38 >= -96) {
                return 0;
              }
              goto LABEL_126;
            }
            if (v34 < 0xF0) {
              goto LABEL_136;
            }
            unsigned __int8 v41 = v21[2];
            unsigned int v39 = v21 + 2;
            if ((v41 + 112) >= 0x30u) {
              return 0;
            }
          }
          int i = v39;
        }
        else
        {
          if (v34 <= 0xC1)
          {
            if (v34 - 1 >= 0x27) {
              return 0;
            }
            goto LABEL_145;
          }
          if (v34 < 0xE0) {
            goto LABEL_137;
          }
          if (v34 == 224)
          {
            unsigned __int8 v37 = v21[2];
            unsigned int v36 = v21 + 2;
            if ((v37 & 0xE0) != 0xA0) {
              return 0;
            }
LABEL_126:
            int i = v36;
LABEL_137:
            uint64_t v12 = 0;
            int v44 = (char)*++i;
            if (v44 >= -64) {
              return v12;
            }
            goto LABEL_116;
          }
        }
LABEL_136:
        int v43 = (char)*++i;
        if (v43 >= -64) {
          return 0;
        }
        goto LABEL_137;
      }
      if (!*i) {
        return 0;
      }
      ++i;
    }
    while (v19 < 0x21);
    unsigned int v20 = i - 1;
    while (1)
    {
      do
      {
        unsigned int v21 = v20;
        unsigned int v23 = *++v20;
        unsigned int v22 = v23;
      }
      while ((_scan_html_tag_yybm[v23] & 0x40) != 0);
      if (v22 > 0xEC)
      {
        if (v22 > 0xF0)
        {
          if (v22 >= 0xF4)
          {
            if (v22 != 244) {
              return 0;
            }
            int v30 = (char)v21[2];
            unsigned int v27 = v21 + 2;
            if (v30 >= -112) {
              return 0;
            }
          }
          else
          {
            int v28 = (char)v21[2];
            unsigned int v27 = v21 + 2;
            if (v28 >= -64) {
              return 0;
            }
          }
LABEL_110:
          unsigned int v20 = v27;
LABEL_111:
          int v31 = (char)*++v20;
          if (v31 >= -64) {
            return 0;
          }
          goto LABEL_112;
        }
        if (v22 >= 0xEE)
        {
          if (v22 >= 0xF0)
          {
            unsigned __int8 v29 = v21[2];
            unsigned int v27 = v21 + 2;
            if ((v29 + 112) >= 0x30u) {
              return 0;
            }
            goto LABEL_110;
          }
          goto LABEL_111;
        }
        int v26 = (char)v21[2];
        unsigned int v24 = v21 + 2;
        if (v26 >= -96) {
          return 0;
        }
        goto LABEL_101;
      }
      if (v22 <= 0xC1) {
        break;
      }
      if (v22 >= 0xE0)
      {
        if (v22 != 224) {
          goto LABEL_111;
        }
        unsigned __int8 v25 = v21[2];
        unsigned int v24 = v21 + 2;
        if ((v25 & 0xE0) != 0xA0) {
          return 0;
        }
LABEL_101:
        unsigned int v20 = v24;
      }
LABEL_112:
      uint64_t v12 = 0;
      int v32 = (char)*++v20;
      if (v32 >= -64) {
        return v12;
      }
    }
    if (v22 - 1 >= 0x22) {
      return 0;
    }
LABEL_145:
    int v45 = v21[2];
    int i = v21 + 2;
  }
  while ((_scan_html_tag_yybm[v21[2]] & 8) != 0);
  if (v45 == 47) {
    goto LABEL_184;
  }
  if (v45 != 62) {
    return 0;
  }
  return (i - a1 + 1);
}

uint64_t _scan_liberal_html_tag(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0xE0)
  {
    if (v1 <= 0xEF)
    {
      uint64_t v3 = a1 + 1;
      int v4 = (char)a1[1];
      if (v1 == 237)
      {
        uint64_t v5 = 0;
        int v6 = a1 + 1;
        if (v4 < -96) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v5 = 0;
        int v6 = a1 + 1;
        if (v4 < -64) {
          goto LABEL_68;
        }
      }
      return v5;
    }
    if (v1 == 240)
    {
      uint64_t v5 = 0;
      uint64_t v3 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v5;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v5 = 0;
      uint64_t v3 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v5;
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v3 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v5;
      }
    }
    int v6 = (int)v3;
    goto LABEL_67;
  }
  if (v1 <= 0xA)
  {
    if (*a1) {
      BOOL v2 = v1 == 10;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      goto LABEL_13;
    }
    return 0;
  }
  if ((v1 & 0x80) != 0)
  {
    if (v1 >= 0xC2)
    {
      uint64_t v3 = a1 + 1;
      signed __int8 v8 = a1[1];
      if (v1 >= 0xE0)
      {
        uint64_t v5 = 0;
        int v6 = a1 + 1;
        if ((v8 & 0xE0) == 0xA0) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v5 = 0;
        int v6 = a1 + 1;
        if (v8 < -64) {
          goto LABEL_39;
        }
      }
      return v5;
    }
    return 0;
  }
LABEL_13:
  uint64_t v3 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7 <= 0xA)
  {
    uint64_t v5 = 0;
    if (a1[1])
    {
      int v6 = a1 + 1;
      if (v7 != 10) {
        goto LABEL_40;
      }
    }
    return v5;
  }
  uint64_t v5 = 0;
  if ((v7 & 0x80) == 0)
  {
    int v6 = a1 + 1;
    goto LABEL_40;
  }
  int v6 = a1 + 1;
  if ((v7 + 62) >= 0x33u) {
    return v5;
  }
  while (1)
  {
LABEL_40:
    if ((_scan_liberal_html_tag_yybm[v7] & 0x40) != 0) {
      goto LABEL_39;
    }
    if (v7 > 0xECu) {
      break;
    }
    if (v7 <= 0xC1u)
    {
      if ((v7 - 11) > 0x33u) {
        goto LABEL_69;
      }
      for (int i = v3 + 1; ; ++i)
      {
        uint64_t v3 = i;
        unsigned int v7 = *i;
        if ((_scan_liberal_html_tag_yybm[*i] & 0x40) != 0)
        {
          uint64_t v5 = 1;
          int v6 = (int)v3;
          goto LABEL_39;
        }
        if (v7 > 0xEC) {
          break;
        }
        if (v7 > 0xC1)
        {
          uint64_t v5 = 1;
          int v6 = (int)v3;
          goto LABEL_55;
        }
        if (v7 - 11 >= 0x34) {
          return (v3 - a1);
        }
      }
      uint64_t v5 = 1;
      int v6 = (int)v3;
      if (v7 <= 0xF0) {
        goto LABEL_51;
      }
      if (v7 >= 0xF4)
      {
        if (v7 == 244) {
          goto LABEL_66;
        }
        return (v3 - a1);
      }
LABEL_60:
      int v13 = (char)*++v3;
      if (v13 >= -64) {
        goto LABEL_69;
      }
      goto LABEL_67;
    }
    unsigned int v7 = v7;
LABEL_55:
    if (v7 < 0xE0) {
      goto LABEL_68;
    }
    if (v7 == 224)
    {
      char v12 = *++v3;
      if ((v12 & 0xE0) != 0xA0) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
LABEL_67:
    int v16 = (char)*++v3;
    if (v16 >= -64) {
      goto LABEL_69;
    }
LABEL_68:
    int v17 = (char)*++v3;
    if (v17 >= -64) {
      goto LABEL_69;
    }
LABEL_39:
    char v9 = *++v3;
    LOBYTE(v7) = v9;
  }
  unsigned int v7 = v7;
  if (v7 <= 0xF0u)
  {
LABEL_51:
    if (v7 < 0xEE)
    {
      int v11 = (char)*++v3;
      if (v11 >= -96) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
    if (v7 >= 0xF0)
    {
      char v14 = *++v3;
      if ((v14 + 112) >= 0x30u) {
        goto LABEL_69;
      }
    }
    goto LABEL_67;
  }
  if (v7 < 0xF4u) {
    goto LABEL_60;
  }
  if (v7 != 244) {
    goto LABEL_69;
  }
LABEL_66:
  int v15 = (char)*++v3;
  if (v15 < -112) {
    goto LABEL_67;
  }
LABEL_69:
  LODWORD(v3) = v6;
  if (!v5) {
    return v5;
  }
  return (v3 - a1);
}

uint64_t _scan_html_comment(unsigned char *a1)
{
  if (*a1 == 45)
  {
    unsigned int v1 = a1 + 1;
    if (a1[1] == 45)
    {
      while (1)
      {
        do
        {
          while (1)
          {
            do
            {
              BOOL v2 = v1;
              unsigned int v4 = *++v1;
              unsigned int v3 = v4;
            }
            while (_scan_html_comment_yybm[v4] < 0);
            if (v3 > 0xEC)
            {
LABEL_16:
              if (v3 > 0xF0) {
                goto LABEL_35;
              }
              if (v3 >= 0xEE)
              {
                if (v3 >= 0xF0)
                {
LABEL_25:
                  char v7 = *++v1;
                  if ((v7 + 112) >= 0x30u) {
                    return 0;
                  }
                }
LABEL_40:
                int v10 = (char)*++v1;
                if (v10 >= -64) {
                  return 0;
                }
                goto LABEL_41;
              }
              goto LABEL_18;
            }
            if (v3 <= 0xC1) {
              break;
            }
LABEL_20:
            if (v3 >= 0xE0)
            {
              if (v3 != 224) {
                goto LABEL_40;
              }
LABEL_22:
              char v6 = *++v1;
              if ((v6 & 0xE0) != 0xA0) {
                return 0;
              }
            }
LABEL_41:
            int v11 = (char)*++v1;
            if (v11 >= -64) {
              return 0;
            }
          }
          if (v3 - 1 >= 0x2D) {
            return 0;
          }
          unsigned int v1 = v2 + 2;
          unsigned int v3 = v2[2];
        }
        while (_scan_html_comment_yybm[v2[2]] < 0);
        if (v3 > 0xEC) {
          goto LABEL_16;
        }
        if (v3 > 0xC1) {
          goto LABEL_20;
        }
        if (v3 - 1 >= 0x2D) {
          return 0;
        }
        unsigned int v1 = v2 + 3;
        unsigned int v3 = v2[3];
        if (v3 > 0xE0)
        {
          if (v3 > 0xEF)
          {
            if (v3 == 240) {
              goto LABEL_25;
            }
LABEL_35:
            if (v3 >= 0xF4)
            {
              if (v3 != 244) {
                return 0;
              }
              int v9 = (char)*++v1;
              if (v9 >= -112) {
                return 0;
              }
            }
            else
            {
              int v8 = (char)*++v1;
              if (v8 >= -64) {
                return 0;
              }
            }
            goto LABEL_40;
          }
          if (v3 != 237) {
            goto LABEL_40;
          }
LABEL_18:
          int v5 = (char)*++v1;
          if (v5 >= -96) {
            return 0;
          }
          goto LABEL_41;
        }
        if (v3 > 0x3E)
        {
          if ((v3 & 0x80) != 0)
          {
            if (v3 < 0xC2) {
              return 0;
            }
            if (v3 < 0xE0) {
              goto LABEL_41;
            }
            goto LABEL_22;
          }
        }
        else
        {
          if (!v2[3]) {
            return 0;
          }
          if (v3 >= 0x3E) {
            return (v2 - a1 + 4);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t _scan_html_pi(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = a1;
  if (_scan_html_pi_yybm[*a1] < 0) {
    goto LABEL_35;
  }
  if (v1 > 0xEC)
  {
    if (v1 > 0xF0)
    {
      if (v1 >= 0xF4)
      {
        if (v1 != 244) {
          return 0;
        }
        BOOL v2 = a1 + 1;
        if ((char)a1[1] >= -112) {
          return 0;
        }
      }
      else
      {
        BOOL v2 = a1 + 1;
        if ((char)a1[1] >= -64) {
          return 0;
        }
      }
    }
    else
    {
      if (v1 < 0xEE)
      {
        BOOL v2 = a1 + 1;
        if ((char)a1[1] >= -96) {
          return 0;
        }
        goto LABEL_29;
      }
      if (v1 < 0xF0)
      {
LABEL_28:
        BOOL v2 = a1 + 1;
        if ((char)a1[1] >= -64) {
          return 0;
        }
LABEL_29:
        int i = 1;
        LODWORD(v5) = v2;
        goto LABEL_75;
      }
      BOOL v2 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return 0;
      }
    }
    int i = 1;
    LODWORD(v5) = v2;
    goto LABEL_74;
  }
  if (v1 > 0xC1)
  {
    if (v1 < 0xE0)
    {
      BOOL v2 = a1 + 1;
      if ((char)a1[1] < -64) {
        goto LABEL_35;
      }
      return 0;
    }
    if (v1 == 224)
    {
      BOOL v2 = a1 + 1;
      if ((a1[1] & 0xE0) != 0xA0) {
        return 0;
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v1 - 1 >= 0x3F) {
    return 0;
  }
  BOOL v2 = a1 + 1;
  unsigned int v3 = a1[1];
  if (v3 > 0x3F)
  {
    int i = 1;
    if ((v3 & 0x80) == 0) {
      goto LABEL_36;
    }
    int v5 = a1 + 1;
    if ((v3 + 62) < 0x33u) {
      goto LABEL_37;
    }
    return 0;
  }
  if (!a1[1]) {
    return 0;
  }
  if (v3 >= 0x3E)
  {
    if (v3 != 62) {
      goto LABEL_35;
    }
    return 0;
  }
  for (int i = 1; ; int i = 0)
  {
LABEL_36:
    int v5 = v2;
LABEL_37:
    if (_scan_html_pi_yybm[v3] < 0)
    {
      BOOL v2 = v5;
      goto LABEL_35;
    }
    if (v3 > 0xECu)
    {
      if (v3 <= 0xF0u)
      {
        BOOL v2 = v5;
        if (v3 < 0xEEu) {
          goto LABEL_49;
        }
        BOOL v2 = v5;
        if (v3 < 0xF0u) {
          goto LABEL_64;
        }
        goto LABEL_73;
      }
      BOOL v2 = v5;
      if (v3 < 0xF4u) {
        goto LABEL_54;
      }
      BOOL v2 = v5;
      if (v3 != 244) {
        return (v5 - a1);
      }
LABEL_62:
      int v12 = (char)*++v2;
      if (v12 >= -112) {
        goto LABEL_76;
      }
      goto LABEL_74;
    }
    if (v3 > 0xC1u)
    {
      if (v3 < 0xE0u)
      {
        BOOL v2 = v5;
        goto LABEL_75;
      }
      BOOL v2 = v5;
      if (v3 == 224) {
        goto LABEL_59;
      }
LABEL_64:
      BOOL v2 = v5;
      goto LABEL_74;
    }
    if ((v3 - 1) >= 0x3Fu) {
      return (v5 - a1);
    }
    BOOL v2 = v5 + 1;
    unsigned int v8 = v5[1];
    if (v8 <= 0xE0) {
      break;
    }
    if (v8 <= 0xEF)
    {
      if (v8 == 237)
      {
LABEL_49:
        int v9 = (char)*++v2;
        if (v9 >= -96) {
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    if (v8 != 240)
    {
      if (v8 < 0xF4)
      {
LABEL_54:
        int v10 = (char)*++v2;
        if (v10 >= -64) {
          goto LABEL_76;
        }
        goto LABEL_74;
      }
      if (v8 != 244) {
        goto LABEL_76;
      }
      goto LABEL_62;
    }
LABEL_73:
    char v13 = *++v2;
    if ((v13 + 112) >= 0x30u) {
      goto LABEL_76;
    }
LABEL_74:
    int v14 = (char)*++v2;
    if (v14 >= -64) {
      goto LABEL_76;
    }
LABEL_75:
    int v15 = (char)*++v2;
    if (v15 >= -64) {
      goto LABEL_76;
    }
LABEL_35:
    char v7 = *++v2;
    LOBYTE(v3) = v7;
  }
  if (v8 > 0x3E)
  {
    if ((v8 & 0x80) == 0) {
      goto LABEL_35;
    }
    if (v8 < 0xC2) {
      goto LABEL_76;
    }
    if (v8 < 0xE0) {
      goto LABEL_75;
    }
LABEL_59:
    char v11 = *++v2;
    if ((v11 & 0xE0) != 0xA0) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v5[1] && v8 != 62) {
    goto LABEL_35;
  }
LABEL_76:
  if (i) {
    return 0;
  }
  return (v5 - a1);
}

uint64_t _scan_html_declaration(unsigned __int8 *a1)
{
  if (*a1 - 65 > 0x19) {
    return 0;
  }
  BOOL v2 = a1 + 1;
  for (unsigned int i = a1[1]; _scan_html_declaration_yybm[i] < 0; unsigned int i = v3)
    unsigned int v3 = *++v2;
  if (i < 9 || i >= 0xE && i != 32) {
    return 0;
  }
  while (1)
  {
    do
    {
      int v5 = v2;
      char v6 = v2 + 1;
      unsigned int v7 = v2[1];
      char v8 = _scan_html_declaration_yybm[*++v2];
    }
    while ((v8 & 0x40) != 0);
    if (v7 > 0xED) {
      break;
    }
    if (v7 > 0xDF)
    {
      if (v7 == 224)
      {
        unsigned __int8 v14 = v5[2];
        char v13 = v5 + 2;
        if ((v14 & 0xE0) != 0xA0) {
          return (v6 - a1);
        }
      }
      else
      {
        int v10 = v6;
        if (v7 < 0xED) {
          goto LABEL_30;
        }
        int v16 = (char)v5[2];
        char v13 = v5 + 2;
        if (v16 >= -96) {
          return (v6 - a1);
        }
      }
      int v9 = v13;
    }
    else
    {
      int v9 = v6;
      if (v7 <= 0xC1) {
        return (v6 - a1);
      }
    }
LABEL_31:
    int v19 = (char)v9[1];
    BOOL v2 = v9 + 1;
    if (v19 >= -64) {
      return (v6 - a1);
    }
  }
  if (v7 <= 0xF0)
  {
    int v10 = v6;
    if (v7 != 240) {
      goto LABEL_30;
    }
    unsigned __int8 v12 = v5[2];
    char v11 = v5 + 2;
    if ((v12 + 112) >= 0x30u) {
      return (v6 - a1);
    }
    goto LABEL_29;
  }
  if (v7 < 0xF4)
  {
    int v15 = (char)v5[2];
    char v11 = v5 + 2;
    if (v15 >= -64) {
      return (v6 - a1);
    }
    goto LABEL_29;
  }
  if (v7 == 244)
  {
    int v17 = (char)v5[2];
    char v11 = v5 + 2;
    if (v17 < -112)
    {
LABEL_29:
      int v10 = v11;
LABEL_30:
      int v18 = (char)v10[1];
      int v9 = v10 + 1;
      if (v18 >= -64) {
        return (v6 - a1);
      }
      goto LABEL_31;
    }
  }
  return (v6 - a1);
}

uint64_t _scan_html_cdata(unsigned char *a1)
{
  if ((*a1 & 0xDF) != 0x43) {
    return 0;
  }
  if ((a1[1] & 0xDF) != 0x44) {
    return 0;
  }
  if ((a1[2] & 0xDF) != 0x41) {
    return 0;
  }
  if ((a1[3] & 0xDF) != 0x54) {
    return 0;
  }
  if ((a1[4] & 0xDF) != 0x41) {
    return 0;
  }
  unsigned int v1 = a1 + 5;
  if (a1[5] != 91) {
    return 0;
  }
  while (1)
  {
    do
    {
      BOOL v2 = v1;
      unsigned int v3 = v1 + 1;
      unsigned int v4 = v1[1];
      int v5 = _scan_html_cdata_yybm[*++v1];
    }
    while (v5 < 0);
    if (v4 > 0xEC) {
      break;
    }
    if (v4 > 0xC1)
    {
      unsigned int v1 = v3;
      BOOL v7 = v4 == 224;
      if (v4 >= 0xE0)
      {
        unsigned int v1 = v3;
LABEL_26:
        if (!v7) {
          goto LABEL_41;
        }
LABEL_28:
        char v8 = *++v1;
        if ((v8 & 0xE0) != 0xA0) {
          return (v3 - a1);
        }
      }
LABEL_42:
      int v14 = (char)*++v1;
      if (v14 >= -64) {
        return (v3 - a1);
      }
    }
    else
    {
      if (v4 - 1 >= 0x5D) {
        return (v3 - a1);
      }
      unsigned int v1 = v2 + 2;
      unsigned int v4 = v2[2];
      if ((_scan_html_cdata_yybm[v2[2]] & 0x80000000) == 0)
      {
        if (v4 > 0xEC)
        {
          if (v4 > 0xF0) {
            goto LABEL_57;
          }
          if (v4 >= 0xEE) {
            goto LABEL_34;
          }
LABEL_22:
          int v6 = (char)*++v1;
          if (v6 >= -96) {
            return (v3 - a1);
          }
          goto LABEL_42;
        }
        if (v4 > 0xC1)
        {
          BOOL v7 = v4 == 224;
          if (v4 >= 0xE0) {
            goto LABEL_26;
          }
          goto LABEL_42;
        }
        if (v4 - 1 >= 0x5D) {
          return (v3 - a1);
        }
        unsigned int v4 = v2[3];
        unsigned int v1 = v2 + 3;
        if (v4 > 0xE0)
        {
          if (v4 > 0xEF)
          {
            if (v4 != 240)
            {
LABEL_57:
              BOOL v9 = v4 == 244;
              if (v4 >= 0xF4) {
                goto LABEL_38;
              }
LABEL_31:
              int v10 = (char)*++v1;
              if (v10 >= -64) {
                return (v3 - a1);
              }
              goto LABEL_41;
            }
LABEL_35:
            char v11 = *++v1;
            if ((v11 + 112) >= 0x30u) {
              return (v3 - a1);
            }
            goto LABEL_41;
          }
          if (v4 != 237) {
            goto LABEL_41;
          }
          goto LABEL_22;
        }
        if (v4 > 0x3E)
        {
          if ((v4 & 0x80) != 0)
          {
            if (v4 < 0xC2) {
              return (v3 - a1);
            }
            if (v4 >= 0xE0) {
              goto LABEL_28;
            }
            goto LABEL_42;
          }
        }
        else if (!v2[3] || v4 == 62)
        {
          return (v3 - a1);
        }
      }
    }
  }
  unsigned int v1 = v3;
  if (v4 <= 0xF0)
  {
    if (v4 >= 0xEE)
    {
      unsigned int v1 = v3;
LABEL_34:
      if (v4 < 0xF0) {
        goto LABEL_41;
      }
      goto LABEL_35;
    }
    goto LABEL_22;
  }
  BOOL v9 = v4 == 244;
  if (v4 < 0xF4) {
    goto LABEL_31;
  }
  unsigned int v1 = v3;
LABEL_38:
  if (v9)
  {
    int v12 = (char)*++v1;
    if (v12 < -112)
    {
LABEL_41:
      int v13 = (char)*++v1;
      if (v13 >= -64) {
        return (v3 - a1);
      }
      goto LABEL_42;
    }
  }
  return (v3 - a1);
}

uint64_t _scan_html_block_end_1(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0xDF)
  {
    if (v1 <= 0xEF)
    {
      if (v1 >= 0xE1)
      {
        unsigned int v4 = a1 + 1;
        int v7 = (char)a1[1];
        if (v1 == 237)
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 >= -96) {
            return v3;
          }
        }
        else
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 >= -64) {
            return v3;
          }
        }
        goto LABEL_55;
      }
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((a1[1] & 0xE0) != 0xA0) {
        return v3;
      }
      goto LABEL_12;
    }
    if (v1 == 240)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v3;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v3;
      }
    }
    int v5 = (int)v4;
    goto LABEL_269;
  }
  if (v1 <= 0x3B)
  {
    if (*a1) {
      BOOL v2 = v1 == 10;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      goto LABEL_25;
    }
    return 0;
  }
  if (v1 != 60)
  {
    if ((v1 & 0x80) == 0)
    {
LABEL_25:
      unsigned int v4 = a1 + 1;
      unsigned int v6 = a1[1];
      if (v6 <= 0xA) {
        goto LABEL_26;
      }
      uint64_t v3 = 0;
      if ((v6 & 0x80) == 0)
      {
        int v5 = a1 + 1;
        goto LABEL_45;
      }
      goto LABEL_33;
    }
    if (v1 > 0xC1)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] < -64) {
        goto LABEL_42;
      }
      return v3;
    }
    return 0;
  }
  unsigned int v4 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6 <= 0x2E)
  {
LABEL_26:
    uint64_t v3 = 0;
    if (v6)
    {
      int v5 = (int)v4;
      if (v6 != 10) {
        goto LABEL_45;
      }
    }
    return v3;
  }
  uint64_t v3 = 0;
  if ((v6 & 0x80) != 0)
  {
LABEL_33:
    int v5 = (int)v4;
    if ((v6 + 62) < 0x33u) {
      goto LABEL_45;
    }
    return v3;
  }
  int v5 = a1 + 1;
  if (v6 < 0x30) {
    goto LABEL_64;
  }
LABEL_45:
  if ((_scan_html_block_end_1_yybm[v6] & 0x40) != 0) {
    goto LABEL_44;
  }
  if (v6 > 0xECu)
  {
    unsigned int v6 = v6;
    if (v6 <= 0xF0u) {
      goto LABEL_51;
    }
    goto LABEL_267;
  }
  if (v6 > 0xC1u)
  {
    BOOL v9 = v6 == 224;
    if (v6 < 0xE0u) {
      goto LABEL_55;
    }
    goto LABEL_111;
  }
  if ((v6 - 11) >= 0x32u) {
    goto LABEL_270;
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          unsigned int v11 = *++v4;
          unsigned int v6 = v11;
        }
        while (_scan_html_block_end_1_yybm[v11] < 0);
        if (v6 > 0xDF)
        {
LABEL_157:
          if (v6 <= 0xEF)
          {
            if (v6 >= 0xE1)
            {
              if (v6 != 237) {
                goto LABEL_269;
              }
              goto LABEL_168;
            }
            goto LABEL_159;
          }
          if (v6 != 240) {
            goto LABEL_267;
          }
          goto LABEL_162;
        }
        if (v6 <= 0x2E) {
          goto LABEL_60;
        }
        if (v6 != 47)
        {
LABEL_164:
          if ((v6 & 0x80) == 0) {
            goto LABEL_44;
          }
          if (v6 < 0xC2) {
            goto LABEL_270;
          }
          goto LABEL_55;
        }
LABEL_64:
        int v12 = v4 + 1;
        unsigned int v13 = v4[1];
        if ((_scan_html_block_end_1_yybm[v4[1]] & 0x80000000) == 0) {
          break;
        }
LABEL_237:
        unsigned int v4 = v12;
      }
      if (v13 > 0x73) {
        break;
      }
      if (v13 <= 0x52)
      {
        if (v13 <= 0xA) {
          goto LABEL_68;
        }
        if (v13 != 80)
        {
LABEL_95:
          unsigned int v4 = v12;
          goto LABEL_44;
        }
        goto LABEL_88;
      }
      if (v13 <= 0x6F)
      {
        if (v13 >= 0x54)
        {
          if (v13 != 84) {
            goto LABEL_95;
          }
          goto LABEL_79;
        }
        goto LABEL_96;
      }
      if (v13 == 112)
      {
LABEL_88:
        unsigned int v14 = v4[2];
        v4 += 2;
        unsigned int v6 = v14;
        if ((_scan_html_block_end_1_yybm[v14] & 0x80000000) == 0)
        {
          if (v6 > 0xC1) {
            goto LABEL_259;
          }
          if (v6 <= 0x51) {
            goto LABEL_60;
          }
          if (v6 > 0x71)
          {
            if (v6 != 114) {
              goto LABEL_206;
            }
          }
          else if (v6 >= 0x53)
          {
            goto LABEL_44;
          }
LABEL_117:
          unsigned int v15 = *++v4;
          unsigned int v6 = v15;
          if ((_scan_html_block_end_1_yybm[v15] & 0x80000000) == 0)
          {
            if (v6 > 0xC1) {
              goto LABEL_259;
            }
            if (v6 <= 0x44) {
              goto LABEL_60;
            }
            if (v6 > 0x64)
            {
              if (v6 != 101) {
                goto LABEL_206;
              }
            }
            else if (v6 >= 0x46)
            {
              goto LABEL_44;
            }
LABEL_148:
            int v16 = v4;
            unsigned int v17 = *++v4;
            unsigned int v6 = v17;
            if ((_scan_html_block_end_1_yybm[v17] & 0x80000000) == 0)
            {
              if (v6 > 0xDF) {
                goto LABEL_157;
              }
              if (v6 <= 0x3D) {
                goto LABEL_60;
              }
              if (v6 != 62) {
                goto LABEL_164;
              }
              unsigned int v19 = v16[2];
              int v18 = v16 + 2;
              unsigned int v6 = v19;
              unsigned int v4 = v18;
              if ((_scan_html_block_end_1_yybm[v19] & 0x40) != 0)
              {
                uint64_t v3 = 1;
LABEL_42:
                int v5 = (int)v4;
LABEL_44:
                char v8 = *++v4;
                LOBYTE(v6) = v8;
                goto LABEL_45;
              }
              if (v6 > 0xEC)
              {
                uint64_t v3 = 1;
                int v5 = (int)v18;
                if (v6 > 0xF0)
                {
                  if (v6 >= 0xF4)
                  {
                    if (v6 != 244) {
                      return (v4 - a1);
                    }
LABEL_248:
                    int v27 = (char)*++v4;
                    if (v27 >= -112) {
                      goto LABEL_270;
                    }
LABEL_269:
                    int v30 = (char)*++v4;
                    if (v30 >= -64) {
                      goto LABEL_270;
                    }
LABEL_55:
                    int v10 = (char)*++v4;
                    if (v10 < -64) {
                      goto LABEL_44;
                    }
                    goto LABEL_270;
                  }
LABEL_268:
                  int v29 = (char)*++v4;
                  if (v29 >= -64) {
                    goto LABEL_270;
                  }
                  goto LABEL_269;
                }
LABEL_51:
                if (v6 >= 0xEE)
                {
                  if (v6 < 0xF0) {
                    goto LABEL_269;
                  }
                  goto LABEL_162;
                }
LABEL_168:
                int v22 = (char)*++v4;
                if (v22 >= -96) {
                  goto LABEL_270;
                }
                goto LABEL_55;
              }
              if (v6 > 0xC1)
              {
                uint64_t v3 = 1;
                if (v6 >= 0xE0)
                {
                  int v5 = (int)v18;
                  if (v6 != 224) {
                    goto LABEL_269;
                  }
                  goto LABEL_159;
                }
LABEL_12:
                int v5 = (int)v4;
                goto LABEL_55;
              }
              uint64_t v3 = 1;
              int v5 = (int)v18;
              if (v6 - 11 > 0x31) {
                return (v4 - a1);
              }
            }
          }
        }
      }
      else
      {
        if (v13 < 0x73) {
          goto LABEL_95;
        }
LABEL_96:
        int v12 = v4 + 2;
        unsigned int v13 = v4[2];
        if (_scan_html_block_end_1_yybm[v4[2]] < 0) {
          goto LABEL_237;
        }
        if (v13 > 0x74)
        {
          if (v13 <= 0xEC)
          {
            if (v13 <= 0xC1)
            {
LABEL_74:
              unsigned int v4 = v12;
              if ((v13 & 0x80) == 0) {
                goto LABEL_44;
              }
              goto LABEL_270;
            }
LABEL_104:
            BOOL v9 = v13 == 224;
            if (v13 < 0xE0) {
              goto LABEL_105;
            }
            unsigned int v4 = v12;
LABEL_111:
            if (!v9) {
              goto LABEL_269;
            }
            goto LABEL_159;
          }
LABEL_106:
          if (v13 > 0xF0) {
            goto LABEL_245;
          }
          unsigned int v4 = v12;
          if (v13 < 0xEE) {
            goto LABEL_168;
          }
          if (v13 < 0xF0) {
            goto LABEL_269;
          }
LABEL_162:
          char v21 = *++v4;
          if ((v21 + 112) >= 0x30u) {
            goto LABEL_270;
          }
          goto LABEL_269;
        }
        if (v13 > 0x43)
        {
          if (v13 > 0x62)
          {
            if (v13 == 99) {
              goto LABEL_134;
            }
            if (v13 < 0x74) {
              goto LABEL_95;
            }
          }
          else if (v13 != 84)
          {
            goto LABEL_95;
          }
          int v12 = v4 + 3;
          unsigned int v13 = v4[3];
          if (_scan_html_block_end_1_yybm[v4[3]] < 0) {
            goto LABEL_237;
          }
          if (v13 > 0xC1) {
            goto LABEL_238;
          }
          if (v13 <= 0x58) {
            goto LABEL_68;
          }
          if (v13 > 0x78)
          {
            if (v13 != 121) {
              goto LABEL_74;
            }
          }
          else if (v13 >= 0x5A)
          {
            goto LABEL_95;
          }
          unsigned int v23 = v4[4];
          v4 += 4;
          unsigned int v6 = v23;
          if ((_scan_html_block_end_1_yybm[v23] & 0x80000000) == 0)
          {
            if (v6 > 0xC1) {
              goto LABEL_259;
            }
            if (v6 <= 0x4B) {
              goto LABEL_60;
            }
            if (v6 > 0x6B)
            {
              if (v6 != 108) {
                goto LABEL_206;
              }
            }
            else if (v6 >= 0x4D)
            {
              goto LABEL_44;
            }
            goto LABEL_117;
          }
        }
        else
        {
          if (v13 <= 9)
          {
            v4 += 2;
            if (v13) {
              goto LABEL_44;
            }
            goto LABEL_270;
          }
          if (v13 == 10) {
            goto LABEL_270;
          }
          if (v13 < 0x43) {
            goto LABEL_95;
          }
LABEL_134:
          int v12 = v4 + 3;
          unsigned int v13 = v4[3];
          if (_scan_html_block_end_1_yybm[v4[3]] < 0) {
            goto LABEL_237;
          }
          if (v13 > 0xC1) {
            goto LABEL_238;
          }
          if (v13 <= 0x51) {
            goto LABEL_68;
          }
          if (v13 > 0x71)
          {
            if (v13 != 114) {
              goto LABEL_74;
            }
          }
          else if (v13 >= 0x53)
          {
            goto LABEL_95;
          }
          int v12 = v4 + 4;
          unsigned int v13 = v4[4];
          if (_scan_html_block_end_1_yybm[v4[4]] < 0) {
            goto LABEL_237;
          }
          if (v13 > 0xC1) {
            goto LABEL_238;
          }
          if (v13 <= 0x48) {
            goto LABEL_68;
          }
          if (v13 > 0x68)
          {
            if (v13 != 105) {
              goto LABEL_74;
            }
          }
          else if (v13 >= 0x4A)
          {
            goto LABEL_95;
          }
          int v12 = v4 + 5;
          unsigned int v13 = v4[5];
          if (_scan_html_block_end_1_yybm[v4[5]] < 0) {
            goto LABEL_237;
          }
          if (v13 > 0xC1) {
            goto LABEL_238;
          }
          if (v13 <= 0x4F) {
            goto LABEL_68;
          }
          if (v13 > 0x6F)
          {
            if (v13 != 112) {
              goto LABEL_74;
            }
          }
          else if (v13 >= 0x51)
          {
            goto LABEL_95;
          }
          unsigned int v24 = v4[6];
          v4 += 6;
          unsigned int v6 = v24;
          if ((_scan_html_block_end_1_yybm[v24] & 0x80000000) == 0)
          {
            if (v6 > 0xC1) {
              goto LABEL_259;
            }
            if (v6 <= 0x53)
            {
LABEL_60:
              if (v6 && v6 != 10) {
                goto LABEL_44;
              }
              goto LABEL_270;
            }
            if (v6 > 0x73)
            {
              if (v6 != 116) {
                goto LABEL_206;
              }
            }
            else if (v6 >= 0x55)
            {
              goto LABEL_44;
            }
            goto LABEL_148;
          }
        }
      }
    }
    if (v13 > 0xEC) {
      goto LABEL_106;
    }
    if (v13 > 0xC1) {
      goto LABEL_104;
    }
    if (v13 >= 0x75) {
      goto LABEL_74;
    }
LABEL_79:
    int v12 = v4 + 2;
    unsigned int v13 = v4[2];
    if (_scan_html_block_end_1_yybm[v4[2]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1) {
      goto LABEL_238;
    }
    if (v13 <= 0x44) {
      break;
    }
    if (v13 > 0x64)
    {
      if (v13 != 101) {
        goto LABEL_74;
      }
    }
    else if (v13 >= 0x46)
    {
      goto LABEL_95;
    }
    int v12 = v4 + 3;
    unsigned int v13 = v4[3];
    if (_scan_html_block_end_1_yybm[v4[3]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1) {
      goto LABEL_238;
    }
    if (v13 <= 0x57) {
      break;
    }
    if (v13 > 0x77)
    {
      if (v13 != 120) {
        goto LABEL_74;
      }
    }
    else if (v13 >= 0x59)
    {
      goto LABEL_95;
    }
    int v12 = v4 + 4;
    unsigned int v13 = v4[4];
    if (_scan_html_block_end_1_yybm[v4[4]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1) {
      goto LABEL_238;
    }
    if (v13 <= 0x53) {
      break;
    }
    if (v13 > 0x73)
    {
      if (v13 != 116) {
        goto LABEL_74;
      }
    }
    else if (v13 >= 0x55)
    {
      goto LABEL_95;
    }
    int v12 = v4 + 5;
    unsigned int v13 = v4[5];
    if (_scan_html_block_end_1_yybm[v4[5]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1) {
      goto LABEL_238;
    }
    if (v13 <= 0x40) {
      break;
    }
    if (v13 > 0x60)
    {
      if (v13 != 97) {
        goto LABEL_74;
      }
    }
    else if (v13 >= 0x42)
    {
      goto LABEL_95;
    }
    int v12 = v4 + 6;
    unsigned int v13 = v4[6];
    if (_scan_html_block_end_1_yybm[v4[6]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1) {
      goto LABEL_238;
    }
    if (v13 <= 0x51) {
      break;
    }
    if (v13 > 0x71)
    {
      if (v13 != 114) {
        goto LABEL_74;
      }
    }
    else if (v13 > 0x52)
    {
      goto LABEL_95;
    }
    int v12 = v4 + 7;
    unsigned int v13 = v4[7];
    if (_scan_html_block_end_1_yybm[v4[7]] < 0) {
      goto LABEL_237;
    }
    if (v13 > 0xC1)
    {
LABEL_238:
      if (v13 <= 0xED)
      {
        if (v13 >= 0xE0)
        {
          unsigned int v4 = v12;
          if (v13 != 224)
          {
            if (v13 < 0xED) {
              goto LABEL_269;
            }
            goto LABEL_168;
          }
          goto LABEL_159;
        }
LABEL_105:
        unsigned int v4 = v12;
        goto LABEL_55;
      }
      BOOL v25 = v13 == 240;
      if (v13 <= 0xF0)
      {
        unsigned int v4 = v12;
        goto LABEL_265;
      }
LABEL_245:
      unsigned int v4 = v12;
      BOOL v26 = v13 == 244;
      if (v13 < 0xF4) {
        goto LABEL_268;
      }
      goto LABEL_246;
    }
    if (v13 <= 0x44) {
      break;
    }
    if (v13 > 0x64)
    {
      if (v13 != 101) {
        goto LABEL_74;
      }
    }
    else if (v13 > 0x45)
    {
      goto LABEL_95;
    }
    unsigned int v28 = v4[8];
    v4 += 8;
    unsigned int v6 = v28;
    if ((_scan_html_block_end_1_yybm[v28] & 0x80000000) == 0)
    {
      if (v6 <= 0xC1)
      {
        if (v6 <= 0x40) {
          goto LABEL_60;
        }
        if (v6 > 0x60)
        {
          if (v6 != 97)
          {
LABEL_206:
            if ((v6 & 0x80) == 0) {
              goto LABEL_44;
            }
            goto LABEL_270;
          }
        }
        else if (v6 >= 0x42)
        {
          goto LABEL_44;
        }
        goto LABEL_148;
      }
LABEL_259:
      if (v6 <= 0xED)
      {
        if (v6 < 0xE0) {
          goto LABEL_55;
        }
        if (v6 != 224)
        {
          if (v6 < 0xED) {
            goto LABEL_269;
          }
          goto LABEL_168;
        }
LABEL_159:
        char v20 = *++v4;
        if ((v20 & 0xE0) != 0xA0) {
          goto LABEL_270;
        }
        goto LABEL_55;
      }
      BOOL v25 = v6 == 240;
      if (v6 <= 0xF0)
      {
LABEL_265:
        if (!v25) {
          goto LABEL_269;
        }
        goto LABEL_162;
      }
LABEL_267:
      BOOL v26 = v6 == 244;
      if (v6 < 0xF4) {
        goto LABEL_268;
      }
LABEL_246:
      if (!v26) {
        goto LABEL_270;
      }
      goto LABEL_248;
    }
  }
LABEL_68:
  if (v13)
  {
    unsigned int v4 = v12;
    if (v13 != 10) {
      goto LABEL_44;
    }
  }
LABEL_270:
  LODWORD(v4) = v5;
  if (v3) {
    return (v4 - a1);
  }
  return v3;
}

uint64_t _scan_html_block_end_2(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0xDF)
  {
    if (v1 <= 0xEF)
    {
      if (v1 >= 0xE1)
      {
        unsigned int v4 = a1 + 1;
        int v7 = (char)a1[1];
        if (v1 == 237)
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 < -96) {
            goto LABEL_93;
          }
        }
        else
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 < -64) {
            goto LABEL_93;
          }
        }
      }
      else
      {
        uint64_t v3 = 0;
        unsigned int v4 = a1 + 1;
        if ((a1[1] & 0xE0) == 0xA0)
        {
          int v5 = a1 + 1;
          goto LABEL_93;
        }
      }
      return v3;
    }
    if (v1 == 240)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v3;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v3;
      }
    }
    int v5 = (int)v4;
    goto LABEL_92;
  }
  if (v1 <= 0x2C)
  {
    if (*a1) {
      BOOL v2 = v1 == 10;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      goto LABEL_23;
    }
    return 0;
  }
  if (v1 != 45)
  {
    if ((v1 & 0x80) == 0)
    {
LABEL_23:
      unsigned int v4 = a1 + 1;
      LODWORD(v6) = a1[1];
      goto LABEL_24;
    }
    if (v1 > 0xC1)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] < -64)
      {
        int v5 = a1 + 1;
        goto LABEL_43;
      }
      return v3;
    }
    return 0;
  }
  unsigned int v4 = a1 + 1;
  uint64_t v6 = a1[1];
  if (_scan_html_block_end_2_yybm[v6] < 0)
  {
    uint64_t v3 = 0;
    int v5 = a1 + 1;
    goto LABEL_52;
  }
LABEL_24:
  if (v6 > 0xA)
  {
    uint64_t v3 = 0;
    if ((v6 & 0x80) == 0)
    {
      int v5 = (int)v4;
      goto LABEL_44;
    }
    int v5 = (int)v4;
    if ((v6 + 62) >= 0x33u) {
      return v3;
    }
    while (1)
    {
LABEL_44:
      if ((_scan_html_block_end_2_yybm[v6] & 0x40) != 0) {
        goto LABEL_43;
      }
      if (v6 > 0xECu) {
        break;
      }
      if (v6 <= 0xC1u)
      {
        if ((v6 - 11) >= 0x23u) {
          goto LABEL_94;
        }
        while (1)
        {
          unsigned int v9 = *++v4;
          LODWORD(v6) = v9;
          if ((_scan_html_block_end_2_yybm[v9] & 0x40) != 0) {
            goto LABEL_43;
          }
          if (v6 > 0xEC)
          {
            if (v6 <= 0xF0) {
              goto LABEL_64;
            }
            goto LABEL_68;
          }
          if (v6 > 0xC1) {
            goto LABEL_85;
          }
          if ((v6 - 11) > 0x22) {
            goto LABEL_94;
          }
LABEL_52:
          int v10 = v4 + 1;
          do
          {
            unsigned int v12 = *v10++;
            unsigned int v11 = v12;
          }
          while (_scan_html_block_end_2_yybm[v12] < 0);
          unsigned int v4 = v10 - 1;
          if (v11 > 0xDF)
          {
            if (v11 <= 0xEF)
            {
              if (v11 < 0xE1) {
                goto LABEL_88;
              }
              if (v11 == 237) {
                goto LABEL_65;
              }
              goto LABEL_92;
            }
            if (v11 == 240) {
              goto LABEL_91;
            }
            BOOL v14 = v11 == 244;
            if (v11 >= 0xF4) {
              goto LABEL_80;
            }
            goto LABEL_78;
          }
          if (v11 <= 0x3D)
          {
            if (v11 && v11 != 10) {
              goto LABEL_43;
            }
            goto LABEL_94;
          }
          if (v11 != 62)
          {
            if ((v11 & 0x80) == 0) {
              goto LABEL_43;
            }
            if (v11 >= 0xC2) {
              goto LABEL_93;
            }
            goto LABEL_94;
          }
          unsigned int v15 = *v10;
          if ((_scan_html_block_end_2_yybm[*v10] & 0x40) != 0)
          {
            uint64_t v3 = 1;
            unsigned int v4 = v10;
            int v5 = (int)v10;
            goto LABEL_43;
          }
          if (v15 > 0xEC)
          {
            uint64_t v3 = 1;
            unsigned int v4 = v10;
            if (v15 <= 0xF0)
            {
              int v5 = (int)v10;
              if (v15 < 0xEE) {
                goto LABEL_65;
              }
              if (v15 >= 0xF0) {
                goto LABEL_91;
              }
              goto LABEL_92;
            }
            if (v15 < 0xF4)
            {
              int v5 = (int)v10;
              goto LABEL_78;
            }
            int v5 = (int)v10;
            if (v15 == 244) {
              goto LABEL_82;
            }
            return (v10 - a1);
          }
          if (v15 > 0xC1)
          {
            uint64_t v3 = 1;
            unsigned int v4 = v10;
            int v5 = (int)v10;
            BOOL v18 = v15 == 224;
            if (v15 >= 0xE0) {
              goto LABEL_86;
            }
            goto LABEL_93;
          }
          uint64_t v3 = 1;
          unsigned int v4 = v10;
          int v5 = (int)v10;
          if (v15 - 11 >= 0x23) {
            return (v10 - a1);
          }
        }
      }
      LODWORD(v6) = v6;
LABEL_85:
      BOOL v18 = v6 == 224;
      if (v6 >= 0xE0)
      {
LABEL_86:
        if (v18)
        {
LABEL_88:
          char v19 = *++v4;
          if ((v19 & 0xE0) != 0xA0) {
            goto LABEL_94;
          }
          goto LABEL_93;
        }
        goto LABEL_92;
      }
LABEL_93:
      int v22 = (char)*++v4;
      if (v22 >= -64) {
        goto LABEL_94;
      }
LABEL_43:
      char v8 = *++v4;
      LOBYTE(v6) = v8;
    }
    LODWORD(v6) = v6;
    if (v6 > 0xF0u)
    {
LABEL_68:
      BOOL v14 = v6 == 244;
      if (v6 < 0xF4)
      {
LABEL_78:
        int v16 = (char)*++v4;
        if (v16 >= -64) {
          goto LABEL_94;
        }
      }
      else
      {
LABEL_80:
        if (!v14) {
          goto LABEL_94;
        }
LABEL_82:
        int v17 = (char)*++v4;
        if (v17 >= -112)
        {
LABEL_94:
          LODWORD(v10) = v5;
          if (v3) {
            return (v10 - a1);
          }
          return v3;
        }
      }
    }
    else
    {
LABEL_64:
      if (v6 < 0xEE)
      {
LABEL_65:
        int v13 = (char)*++v4;
        if (v13 >= -96) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      if (v6 >= 0xF0)
      {
LABEL_91:
        char v20 = *++v4;
        if ((v20 + 112) >= 0x30u) {
          goto LABEL_94;
        }
      }
    }
LABEL_92:
    int v21 = (char)*++v4;
    if (v21 >= -64) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v3 = 0;
  if (v6)
  {
    int v5 = (int)v4;
    if (v6 != 10) {
      goto LABEL_44;
    }
  }
  return v3;
}

uint64_t _scan_html_block_end_3(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0xDF)
  {
    if (v1 <= 0xEF)
    {
      if (v1 >= 0xE1)
      {
        unsigned int v4 = a1 + 1;
        int v7 = (char)a1[1];
        if (v1 == 237)
        {
          uint64_t v3 = 0;
          int v8 = a1 + 1;
          if (v7 < -96) {
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v3 = 0;
          int v8 = a1 + 1;
          if (v7 < -64) {
            goto LABEL_99;
          }
        }
      }
      else
      {
        uint64_t v3 = 0;
        unsigned int v4 = a1 + 1;
        if ((a1[1] & 0xE0) == 0xA0)
        {
LABEL_90:
          int v8 = (int)v4;
          goto LABEL_99;
        }
      }
      return v3;
    }
    if (v1 == 240)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v3;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v3;
      }
    }
    int v8 = (int)v4;
    goto LABEL_98;
  }
  if (v1 <= 0x3E)
  {
    if (*a1) {
      BOOL v2 = v1 == 10;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      goto LABEL_25;
    }
    return 0;
  }
  if (v1 == 63)
  {
    unsigned int v4 = a1 + 1;
    unsigned int v5 = a1[1];
    if (v5 <= 0x3D)
    {
LABEL_26:
      uint64_t v3 = 0;
      if (!v5) {
        return v3;
      }
      int v8 = (int)v4;
      if (v5 == 10) {
        return v3;
      }
      while (1)
      {
LABEL_47:
        if ((_scan_html_block_end_3_yybm[v5] & 0x40) != 0) {
          goto LABEL_46;
        }
        if (v5 > 0xECu)
        {
          unsigned int v5 = v5;
          if (v5 > 0xF0u)
          {
LABEL_75:
            if (v5 < 0xF4)
            {
LABEL_92:
              int v16 = (char)*++v4;
              if (v16 >= -64) {
                goto LABEL_100;
              }
            }
            else
            {
              if (v5 != 244) {
                goto LABEL_100;
              }
LABEL_97:
              int v17 = (char)*++v4;
              if (v17 >= -112)
              {
LABEL_100:
                LODWORD(v4) = v8;
                if (v3) {
                  return (v4 - a1);
                }
                return v3;
              }
            }
          }
          else
          {
LABEL_79:
            if (v5 < 0xEE)
            {
LABEL_84:
              int v15 = (char)*++v4;
              if (v15 >= -96) {
                goto LABEL_100;
              }
              goto LABEL_99;
            }
            if (v5 >= 0xF0)
            {
LABEL_81:
              char v14 = *++v4;
              if ((v14 + 112) >= 0x30u) {
                goto LABEL_100;
              }
            }
          }
        }
        else if (v5 > 0xC1u)
        {
          if (v5 < 0xE0u) {
            goto LABEL_99;
          }
          if (v5 == 224)
          {
LABEL_65:
            char v11 = *++v4;
            if ((v11 & 0xE0) != 0xA0) {
              goto LABEL_100;
            }
            goto LABEL_99;
          }
        }
        else
        {
          if ((v5 - 11) >= 0x35u) {
            goto LABEL_100;
          }
          while (1)
          {
            do
            {
              unsigned int v10 = *++v4;
              unsigned int v5 = v10;
            }
            while (_scan_html_block_end_3_yybm[v10] < 0);
            if (v5 > 0xDF)
            {
              if (v5 > 0xEF)
              {
                if (v5 == 240) {
                  goto LABEL_81;
                }
                goto LABEL_75;
              }
              if (v5 < 0xE1) {
                goto LABEL_65;
              }
              if (v5 != 237) {
                goto LABEL_98;
              }
              goto LABEL_84;
            }
            if (v5 <= 0x3D)
            {
              if (v5 && v5 != 10) {
                goto LABEL_46;
              }
              goto LABEL_100;
            }
            uint64_t v6 = v4 - 1;
            if (v5 != 62)
            {
              if ((v5 & 0x80) == 0) {
                goto LABEL_46;
              }
              if (v5 >= 0xC2) {
                goto LABEL_99;
              }
              goto LABEL_100;
            }
LABEL_68:
            unsigned int v13 = v6[2];
            unsigned int v12 = v6 + 2;
            unsigned int v5 = v13;
            unsigned int v4 = v12;
            if ((_scan_html_block_end_3_yybm[v13] & 0x40) != 0)
            {
              uint64_t v3 = 1;
              goto LABEL_45;
            }
            if (v5 > 0xEC)
            {
              uint64_t v3 = 1;
              int v8 = (int)v12;
              if (v5 <= 0xF0) {
                goto LABEL_79;
              }
              if (v5 < 0xF4) {
                goto LABEL_92;
              }
              if (v5 != 244) {
                return (v4 - a1);
              }
              goto LABEL_97;
            }
            if (v5 > 0xC1) {
              break;
            }
            uint64_t v3 = 1;
            int v8 = (int)v12;
            if (v5 - 11 > 0x34) {
              return (v4 - a1);
            }
          }
          uint64_t v3 = 1;
          if (v5 < 0xE0) {
            goto LABEL_90;
          }
          int v8 = (int)v12;
          if (v5 == 224) {
            goto LABEL_65;
          }
        }
LABEL_98:
        int v18 = (char)*++v4;
        if (v18 >= -64) {
          goto LABEL_100;
        }
LABEL_99:
        int v19 = (char)*++v4;
        if (v19 >= -64) {
          goto LABEL_100;
        }
LABEL_46:
        char v9 = *++v4;
        LOBYTE(v5) = v9;
      }
    }
    if ((v5 & 0x80) == 0)
    {
      uint64_t v6 = a1;
      if (v5 < 0x3F) {
        goto LABEL_68;
      }
      uint64_t v3 = 0;
      goto LABEL_33;
    }
    uint64_t v3 = 0;
    goto LABEL_43;
  }
  if ((v1 & 0x80) != 0)
  {
    if (v1 > 0xC1)
    {
      uint64_t v3 = 0;
      unsigned int v4 = a1 + 1;
      if ((char)a1[1] < -64)
      {
LABEL_45:
        int v8 = (int)v4;
        goto LABEL_46;
      }
      return v3;
    }
    return 0;
  }
LABEL_25:
  unsigned int v4 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5 <= 0xA) {
    goto LABEL_26;
  }
  uint64_t v3 = 0;
  if ((v5 & 0x80) == 0)
  {
LABEL_33:
    int v8 = (int)v4;
    goto LABEL_47;
  }
LABEL_43:
  int v8 = (int)v4;
  if ((v5 + 62) < 0x33u) {
    goto LABEL_47;
  }
  return v3;
}

uint64_t _scan_html_block_end_4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = a1;
  if ((_scan_html_block_end_4_yybm[*a1] & 0x40) != 0) {
    goto LABEL_67;
  }
  if (v1 > 0xE0)
  {
    if (v1 <= 0xEF)
    {
      BOOL v2 = a1 + 1;
      int v4 = (char)a1[1];
      if (v1 == 237)
      {
        uint64_t v3 = 0;
        int v5 = a1 + 1;
        if (v4 < -96) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v3 = 0;
        int v5 = a1 + 1;
        if (v4 < -64) {
          goto LABEL_78;
        }
      }
      return v3;
    }
    if (v1 == 240)
    {
      uint64_t v3 = 0;
      BOOL v2 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v3;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v3 = 0;
      BOOL v2 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      BOOL v2 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v3;
      }
    }
    int v5 = (int)v2;
    goto LABEL_77;
  }
  if (v1 <= 0xA)
  {
    uint64_t v3 = 0;
    if (!*a1 || v1 == 10) {
      return v3;
    }
    goto LABEL_12;
  }
  if ((v1 & 0x80) != 0)
  {
    if (v1 >= 0xC2)
    {
      BOOL v2 = a1 + 1;
      signed __int8 v7 = a1[1];
      if (v1 >= 0xE0)
      {
        uint64_t v3 = 0;
        int v5 = a1 + 1;
        if ((v7 & 0xE0) == 0xA0) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v3 = 0;
        int v5 = a1 + 1;
        if (v7 < -64) {
          goto LABEL_62;
        }
      }
      return v3;
    }
    return 0;
  }
LABEL_12:
  BOOL v2 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6 <= 0xA)
  {
    uint64_t v3 = 0;
    if (a1[1])
    {
      int v5 = a1 + 1;
      if (v6 != 10) {
        goto LABEL_63;
      }
    }
    return v3;
  }
  uint64_t v3 = 0;
  if ((v6 & 0x80) == 0)
  {
    int v5 = a1 + 1;
    goto LABEL_63;
  }
  int v5 = a1 + 1;
  if ((v6 + 62) >= 0x33u) {
    return v3;
  }
  while (1)
  {
LABEL_63:
    if (_scan_html_block_end_4_yybm[v6] < 0) {
      goto LABEL_62;
    }
    if (v6 > 0xECu) {
      break;
    }
    if (v6 <= 0xC1u)
    {
      if ((v6 - 11) > 0x33u) {
        goto LABEL_79;
      }
LABEL_67:
      for (unsigned int i = v2 + 1; ; ++i)
      {
        BOOL v2 = i;
        unsigned int v6 = *i;
        if (_scan_html_block_end_4_yybm[*i] < 0)
        {
          uint64_t v3 = 1;
          int v5 = (int)v2;
          goto LABEL_62;
        }
        if (v6 > 0xEC) {
          break;
        }
        if (v6 > 0xC1)
        {
          uint64_t v3 = 1;
          int v5 = (int)v2;
          goto LABEL_73;
        }
        if (v6 - 11 >= 0x34) {
          return (v2 - a1);
        }
      }
      if (v6 <= 0xF0)
      {
        uint64_t v3 = 1;
        int v5 = (int)v2;
        goto LABEL_52;
      }
      if (v6 < 0xF4)
      {
        uint64_t v3 = 1;
        int v5 = (int)v2;
LABEL_58:
        int v12 = (char)*++v2;
        if (v12 >= -64) {
          goto LABEL_79;
        }
        goto LABEL_77;
      }
      if (v6 != 244) {
        return (v2 - a1);
      }
      uint64_t v3 = 1;
      int v5 = (int)v2;
      goto LABEL_60;
    }
    unsigned int v6 = v6;
LABEL_73:
    if (v6 < 0xE0) {
      goto LABEL_78;
    }
    if (v6 == 224)
    {
      char v15 = *++v2;
      if ((v15 & 0xE0) != 0xA0) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
LABEL_77:
    int v16 = (char)*++v2;
    if (v16 >= -64) {
      goto LABEL_79;
    }
LABEL_78:
    int v17 = (char)*++v2;
    if (v17 >= -64) {
      goto LABEL_79;
    }
LABEL_62:
    char v14 = *++v2;
    LOBYTE(v6) = v14;
  }
  unsigned int v6 = v6;
  if (v6 > 0xF0u)
  {
    if (v6 < 0xF4u) {
      goto LABEL_58;
    }
    if (v6 != 244) {
      goto LABEL_79;
    }
LABEL_60:
    int v13 = (char)*++v2;
    if (v13 >= -112) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
LABEL_52:
  if (v6 < 0xEE)
  {
    int v10 = (char)*++v2;
    if (v10 >= -96) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v6 < 0xF0) {
    goto LABEL_77;
  }
  char v11 = *++v2;
  if ((v11 + 112) < 0x30u) {
    goto LABEL_77;
  }
LABEL_79:
  LODWORD(v2) = v5;
  if (v3) {
    return (v2 - a1);
  }
  return v3;
}

uint64_t _scan_html_block_end_5(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0xDF)
  {
    if (v1 <= 0xEF)
    {
      if (v1 >= 0xE1)
      {
        int v4 = a1 + 1;
        int v7 = (char)a1[1];
        if (v1 == 237)
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 < -96) {
            goto LABEL_93;
          }
        }
        else
        {
          uint64_t v3 = 0;
          int v5 = a1 + 1;
          if (v7 < -64) {
            goto LABEL_93;
          }
        }
      }
      else
      {
        uint64_t v3 = 0;
        int v4 = a1 + 1;
        if ((a1[1] & 0xE0) == 0xA0)
        {
          int v5 = a1 + 1;
          goto LABEL_93;
        }
      }
      return v3;
    }
    if (v1 == 240)
    {
      uint64_t v3 = 0;
      int v4 = a1 + 1;
      if ((a1[1] + 112) >= 0x30u) {
        return v3;
      }
    }
    else if (v1 >= 0xF4)
    {
      if (v1 != 244) {
        return 0;
      }
      uint64_t v3 = 0;
      int v4 = a1 + 1;
      if ((char)a1[1] >= -112) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      int v4 = a1 + 1;
      if ((char)a1[1] >= -64) {
        return v3;
      }
    }
    int v5 = (int)v4;
    goto LABEL_92;
  }
  if (v1 <= 0x5C)
  {
    if (*a1) {
      BOOL v2 = v1 == 10;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2) {
      goto LABEL_23;
    }
    return 0;
  }
  if (v1 != 93)
  {
    if ((v1 & 0x80) == 0)
    {
LABEL_23:
      int v4 = a1 + 1;
      LODWORD(v6) = a1[1];
      goto LABEL_24;
    }
    if (v1 > 0xC1)
    {
      uint64_t v3 = 0;
      int v4 = a1 + 1;
      if ((char)a1[1] < -64)
      {
        int v5 = a1 + 1;
        goto LABEL_43;
      }
      return v3;
    }
    return 0;
  }
  int v4 = a1 + 1;
  uint64_t v6 = a1[1];
  if (_scan_html_block_end_5_yybm[v6] < 0)
  {
    uint64_t v3 = 0;
    int v5 = a1 + 1;
    goto LABEL_52;
  }
LABEL_24:
  if (v6 > 0xA)
  {
    uint64_t v3 = 0;
    if ((v6 & 0x80) == 0)
    {
      int v5 = (int)v4;
      goto LABEL_44;
    }
    int v5 = (int)v4;
    if ((v6 + 62) >= 0x33u) {
      return v3;
    }
    while (1)
    {
LABEL_44:
      if ((_scan_html_block_end_5_yybm[v6] & 0x40) != 0) {
        goto LABEL_43;
      }
      if (v6 > 0xECu) {
        break;
      }
      if (v6 <= 0xC1u)
      {
        if ((v6 - 11) >= 0x53u) {
          goto LABEL_94;
        }
        while (1)
        {
          unsigned int v9 = *++v4;
          LODWORD(v6) = v9;
          if ((_scan_html_block_end_5_yybm[v9] & 0x40) != 0) {
            goto LABEL_43;
          }
          if (v6 > 0xEC)
          {
            if (v6 <= 0xF0) {
              goto LABEL_64;
            }
            goto LABEL_68;
          }
          if (v6 > 0xC1) {
            goto LABEL_85;
          }
          if ((v6 - 11) > 0x52) {
            goto LABEL_94;
          }
LABEL_52:
          int v10 = v4 + 1;
          do
          {
            unsigned int v12 = *v10++;
            unsigned int v11 = v12;
          }
          while (_scan_html_block_end_5_yybm[v12] < 0);
          int v4 = v10 - 1;
          if (v11 > 0xDF)
          {
            if (v11 <= 0xEF)
            {
              if (v11 < 0xE1) {
                goto LABEL_88;
              }
              if (v11 == 237) {
                goto LABEL_65;
              }
              goto LABEL_92;
            }
            if (v11 == 240) {
              goto LABEL_91;
            }
            BOOL v14 = v11 == 244;
            if (v11 >= 0xF4) {
              goto LABEL_80;
            }
            goto LABEL_78;
          }
          if (v11 <= 0x3D)
          {
            if (v11 && v11 != 10) {
              goto LABEL_43;
            }
            goto LABEL_94;
          }
          if (v11 != 62)
          {
            if ((v11 & 0x80) == 0) {
              goto LABEL_43;
            }
            if (v11 >= 0xC2) {
              goto LABEL_93;
            }
            goto LABEL_94;
          }
          unsigned int v15 = *v10;
          if ((_scan_html_block_end_5_yybm[*v10] & 0x40) != 0)
          {
            uint64_t v3 = 1;
            int v4 = v10;
            int v5 = (int)v10;
            goto LABEL_43;
          }
          if (v15 > 0xEC)
          {
            uint64_t v3 = 1;
            int v4 = v10;
            if (v15 <= 0xF0)
            {
              int v5 = (int)v10;
              if (v15 < 0xEE) {
                goto LABEL_65;
              }
              if (v15 >= 0xF0) {
                goto LABEL_91;
              }
              goto LABEL_92;
            }
            if (v15 < 0xF4)
            {
              int v5 = (int)v10;
              goto LABEL_78;
            }
            int v5 = (int)v10;
            if (v15 == 244) {
              goto LABEL_82;
            }
            return (v10 - a1);
          }
          if (v15 > 0xC1)
          {
            uint64_t v3 = 1;
            int v4 = v10;
            int v5 = (int)v10;
            BOOL v18 = v15 == 224;
            if (v15 >= 0xE0) {
              goto LABEL_86;
            }
            goto LABEL_93;
          }
          uint64_t v3 = 1;
          int v4 = v10;
          int v5 = (int)v10;
          if (v15 - 11 >= 0x53) {
            return (v10 - a1);
          }
        }
      }
      LODWORD(v6) = v6;
LABEL_85:
      BOOL v18 = v6 == 224;
      if (v6 >= 0xE0)
      {
LABEL_86:
        if (v18)
        {
LABEL_88:
          char v19 = *++v4;
          if ((v19 & 0xE0) != 0xA0) {
            goto LABEL_94;
          }
          goto LABEL_93;
        }
        goto LABEL_92;
      }
LABEL_93:
      int v22 = (char)*++v4;
      if (v22 >= -64) {
        goto LABEL_94;
      }
LABEL_43:
      char v8 = *++v4;
      LOBYTE(v6) = v8;
    }
    LODWORD(v6) = v6;
    if (v6 > 0xF0u)
    {
LABEL_68:
      BOOL v14 = v6 == 244;
      if (v6 < 0xF4)
      {
LABEL_78:
        int v16 = (char)*++v4;
        if (v16 >= -64) {
          goto LABEL_94;
        }
      }
      else
      {
LABEL_80:
        if (!v14) {
          goto LABEL_94;
        }
LABEL_82:
        int v17 = (char)*++v4;
        if (v17 >= -112)
        {
LABEL_94:
          LODWORD(v10) = v5;
          if (v3) {
            return (v10 - a1);
          }
          return v3;
        }
      }
    }
    else
    {
LABEL_64:
      if (v6 < 0xEE)
      {
LABEL_65:
        int v13 = (char)*++v4;
        if (v13 >= -96) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      if (v6 >= 0xF0)
      {
LABEL_91:
        char v20 = *++v4;
        if ((v20 + 112) >= 0x30u) {
          goto LABEL_94;
        }
      }
    }
LABEL_92:
    int v21 = (char)*++v4;
    if (v21 >= -64) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v3 = 0;
  if (v6)
  {
    int v5 = (int)v4;
    if (v6 != 10) {
      goto LABEL_44;
    }
  }
  return v3;
}

uint64_t _scan_link_title(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x26)
  {
    if (v1 == 34)
    {
      BOOL v2 = a1 + 1;
      unsigned int v3 = (char)a1[1];
      if (a1[1])
      {
        if ((v3 & 0x80000000) == 0 || (v3 + 62) <= 0x32u)
        {
          uint64_t v4 = 0;
          int v5 = a1 + 1;
          while (1)
          {
            if ((_scan_link_title_yybm[v3] & 0x10) != 0) {
              goto LABEL_45;
            }
            if (v3 > 0xE0u) {
              break;
            }
            if (v3 > 0x5Cu)
            {
              unsigned int v3 = v3;
              if (v3 < 0xC2u) {
                goto LABEL_197;
              }
LABEL_30:
              if (v3 >= 0xE0)
              {
LABEL_31:
                char v7 = *++v2;
                if ((v7 & 0xE0) != 0xA0) {
                  goto LABEL_197;
                }
              }
              goto LABEL_44;
            }
            if (!(_BYTE)v3) {
              goto LABEL_197;
            }
            unsigned int v3 = v3;
LABEL_12:
            if (v3 < 0x23) {
              goto LABEL_199;
            }
            ++v2;
            while (1)
            {
              unsigned int v3 = *v2;
              if ((_scan_link_title_yybm[*v2] & 0x10) != 0) {
                break;
              }
              if (v3 > 0xE0)
              {
                if (v3 <= 0xEF) {
                  goto LABEL_26;
                }
                if (v3 == 240) {
                  goto LABEL_34;
                }
                BOOL v10 = v3 == 244;
                if (v3 < 0xF4) {
                  goto LABEL_37;
                }
                goto LABEL_40;
              }
              if (v3 > 0x5C)
              {
                if (v3 < 0xC2) {
                  goto LABEL_197;
                }
                if (v3 > 0xDF) {
                  goto LABEL_31;
                }
                goto LABEL_44;
              }
              if (!*v2) {
                goto LABEL_197;
              }
              ++v2;
              if (v3 < 0x23)
              {
                unsigned int v3 = *v2;
                if ((_scan_link_title_yybm[*v2] & 0x10) != 0)
                {
                  uint64_t v4 = 1;
                  int v5 = (int)v2;
                  break;
                }
                if (v3 > 0xE0)
                {
                  if (v3 <= 0xEF)
                  {
                    uint64_t v4 = 1;
                    int v5 = (int)v2;
                    goto LABEL_26;
                  }
                  if (v3 == 240)
                  {
                    uint64_t v4 = 1;
                    int v5 = (int)v2;
                    goto LABEL_34;
                  }
                  if (v3 < 0xF4)
                  {
                    uint64_t v4 = 1;
                    int v5 = (int)v2;
                    goto LABEL_37;
                  }
                  if (v3 == 244)
                  {
                    uint64_t v4 = 1;
                    int v5 = (int)v2;
                    goto LABEL_42;
                  }
                  goto LABEL_200;
                }
                if (v3 <= 0x5C)
                {
                  if (!*v2) {
                    goto LABEL_200;
                  }
                  uint64_t v4 = 1;
                  int v5 = (int)v2;
                  goto LABEL_12;
                }
                if (v3 < 0xC2) {
                  goto LABEL_200;
                }
                uint64_t v4 = 1;
                int v5 = (int)v2;
                goto LABEL_30;
              }
            }
LABEL_45:
            char v14 = *++v2;
            LOBYTE(v3) = v14;
          }
          if (v3 > 0xEFu)
          {
            if (v3 == 240)
            {
LABEL_34:
              char v8 = *++v2;
              if ((v8 + 112) >= 0x30u) {
                goto LABEL_197;
              }
            }
            else if (v3 >= 0xF4u)
            {
              BOOL v10 = v3 == 244;
LABEL_40:
              if (!v10) {
                goto LABEL_197;
              }
LABEL_42:
              int v11 = (char)*++v2;
              if (v11 >= -112) {
                goto LABEL_197;
              }
            }
            else
            {
LABEL_37:
              int v9 = (char)*++v2;
              if (v9 >= -64) {
                goto LABEL_197;
              }
            }
          }
          else
          {
            unsigned int v3 = v3;
LABEL_26:
            if (v3 == 237)
            {
              int v6 = (char)*++v2;
              if (v6 >= -96) {
                goto LABEL_197;
              }
              goto LABEL_44;
            }
          }
          int v12 = (char)*++v2;
          if (v12 >= -64) {
            goto LABEL_197;
          }
LABEL_44:
          int v13 = (char)*++v2;
          if (v13 >= -64) {
            goto LABEL_197;
          }
          goto LABEL_45;
        }
      }
    }
    return 0;
  }
  if (v1 == 39)
  {
    BOOL v2 = a1 + 1;
    unsigned int v15 = (char)a1[1];
    if (!a1[1] || (v15 & 0x80000000) != 0 && (v15 + 62) > 0x32u) {
      return 0;
    }
    uint64_t v4 = 0;
    int v5 = a1 + 1;
    while (1)
    {
      if ((_scan_link_title_yybm[v15] & 0x40) != 0) {
        goto LABEL_107;
      }
      if (v15 > 0xE0u) {
        break;
      }
      if (v15 > 0x5Cu)
      {
        unsigned int v15 = v15;
        if (v15 < 0xC2u) {
          goto LABEL_197;
        }
LABEL_92:
        if (v15 >= 0xE0)
        {
LABEL_93:
          char v17 = *++v2;
          if ((v17 & 0xE0) != 0xA0) {
            goto LABEL_197;
          }
        }
        goto LABEL_106;
      }
      if (!(_BYTE)v15) {
        goto LABEL_197;
      }
      unsigned int v15 = v15;
LABEL_74:
      if (v15 < 0x28) {
        goto LABEL_199;
      }
      ++v2;
      while (1)
      {
        unsigned int v15 = *v2;
        if ((_scan_link_title_yybm[*v2] & 0x40) != 0) {
          break;
        }
        if (v15 > 0xE0)
        {
          if (v15 <= 0xEF) {
            goto LABEL_88;
          }
          if (v15 == 240) {
            goto LABEL_96;
          }
          BOOL v20 = v15 == 244;
          if (v15 < 0xF4) {
            goto LABEL_99;
          }
          goto LABEL_102;
        }
        if (v15 > 0x5C)
        {
          if (v15 < 0xC2) {
            goto LABEL_197;
          }
          if (v15 > 0xDF) {
            goto LABEL_93;
          }
          goto LABEL_106;
        }
        if (!*v2) {
          goto LABEL_197;
        }
        ++v2;
        if (v15 < 0x28)
        {
          unsigned int v15 = *v2;
          if ((_scan_link_title_yybm[*v2] & 0x40) != 0)
          {
            uint64_t v4 = 2;
            int v5 = (int)v2;
            break;
          }
          if (v15 > 0xE0)
          {
            if (v15 <= 0xEF)
            {
              uint64_t v4 = 2;
              int v5 = (int)v2;
              goto LABEL_88;
            }
            if (v15 == 240)
            {
              uint64_t v4 = 2;
              int v5 = (int)v2;
              goto LABEL_96;
            }
            if (v15 < 0xF4)
            {
              uint64_t v4 = 2;
              int v5 = (int)v2;
              goto LABEL_99;
            }
            if (v15 == 244)
            {
              uint64_t v4 = 2;
              int v5 = (int)v2;
              goto LABEL_104;
            }
            goto LABEL_200;
          }
          if (v15 <= 0x5C)
          {
            if (!*v2) {
              goto LABEL_200;
            }
            uint64_t v4 = 2;
            int v5 = (int)v2;
            goto LABEL_74;
          }
          if (v15 < 0xC2) {
            goto LABEL_200;
          }
          uint64_t v4 = 2;
          int v5 = (int)v2;
          goto LABEL_92;
        }
      }
LABEL_107:
      char v24 = *++v2;
      LOBYTE(v15) = v24;
    }
    if (v15 > 0xEFu)
    {
      if (v15 == 240)
      {
LABEL_96:
        char v18 = *++v2;
        if ((v18 + 112) >= 0x30u) {
          goto LABEL_197;
        }
      }
      else if (v15 >= 0xF4u)
      {
        BOOL v20 = v15 == 244;
LABEL_102:
        if (!v20) {
          goto LABEL_197;
        }
LABEL_104:
        int v21 = (char)*++v2;
        if (v21 >= -112) {
          goto LABEL_197;
        }
      }
      else
      {
LABEL_99:
        int v19 = (char)*++v2;
        if (v19 >= -64) {
          goto LABEL_197;
        }
      }
    }
    else
    {
      unsigned int v15 = v15;
LABEL_88:
      if (v15 == 237)
      {
        int v16 = (char)*++v2;
        if (v16 >= -96) {
          goto LABEL_197;
        }
        goto LABEL_106;
      }
    }
    int v22 = (char)*++v2;
    if (v22 >= -64) {
      goto LABEL_197;
    }
LABEL_106:
    int v23 = (char)*++v2;
    if (v23 >= -64) {
      goto LABEL_197;
    }
    goto LABEL_107;
  }
  if (v1 >= 0x29) {
    return 0;
  }
  BOOL v2 = a1 + 1;
  unsigned int v25 = a1[1];
  if (v25 > 0x28)
  {
    if ((v25 & 0x80) != 0 && (v25 + 62) >= 0x33u) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!a1[1] || v25 == 40) {
      return v4;
    }
  }
  uint64_t v4 = 0;
  int v5 = a1 + 1;
LABEL_136:
  if (_scan_link_title_yybm[v25] < 0) {
    goto LABEL_180;
  }
  if (v25 > 0xE0u)
  {
    if (v25 > 0xEFu)
    {
      if (v25 != 240)
      {
        if (v25 >= 0xF4u)
        {
          BOOL v31 = v25 == 244;
LABEL_175:
          if (!v31) {
            goto LABEL_197;
          }
LABEL_177:
          int v32 = (char)*++v2;
          if (v32 >= -112) {
            goto LABEL_197;
          }
          goto LABEL_178;
        }
        goto LABEL_166;
      }
LABEL_163:
      char v29 = *++v2;
      if ((v29 + 112) >= 0x30u) {
        goto LABEL_197;
      }
    }
    else
    {
      unsigned int v25 = v25;
LABEL_155:
      if (v25 == 237)
      {
        int v27 = (char)*++v2;
        if (v27 >= -96) {
          goto LABEL_197;
        }
        goto LABEL_179;
      }
    }
LABEL_178:
    int v33 = (char)*++v2;
    if (v33 >= -64) {
      goto LABEL_197;
    }
    goto LABEL_179;
  }
  unsigned int v25 = v25;
  if (v25 > 0x5Cu)
  {
    if (v25 < 0xC2u) {
      goto LABEL_197;
    }
LABEL_159:
    if (v25 < 0xE0) {
      goto LABEL_179;
    }
    goto LABEL_160;
  }
  if (v25 < 0x29u) {
    goto LABEL_197;
  }
  if (v25 == 41) {
    goto LABEL_199;
  }
  while (2)
  {
    v2 += 2;
    while (1)
    {
      unsigned int v25 = *(v2 - 1);
      if (v25 > 0xDF)
      {
        --v2;
        if (v25 <= 0xEF)
        {
          if (v25 >= 0xE1) {
            goto LABEL_155;
          }
LABEL_160:
          char v28 = *++v2;
          if ((v28 & 0xE0) != 0xA0) {
            goto LABEL_197;
          }
          goto LABEL_179;
        }
        if (v25 == 240) {
          goto LABEL_163;
        }
        BOOL v31 = v25 == 244;
        if (v25 >= 0xF4) {
          goto LABEL_175;
        }
LABEL_166:
        int v30 = (char)*++v2;
        if (v30 >= -64) {
          goto LABEL_197;
        }
        goto LABEL_178;
      }
      if (v25 <= 0x5B) {
        break;
      }
      ++v2;
      if (v25 != 92)
      {
        v2 -= 2;
        if ((v25 & 0x80) == 0) {
          goto LABEL_180;
        }
        if (v25 < 0xC2)
        {
LABEL_197:
          if (v4) {
            return (v5 - a1);
          }
          return v4;
        }
LABEL_179:
        int v34 = (char)*++v2;
        if (v34 >= -64) {
          goto LABEL_197;
        }
LABEL_180:
        char v35 = *++v2;
        LOBYTE(v25) = v35;
        goto LABEL_136;
      }
    }
    if (v25 != 41)
    {
      if (!*(v2 - 1)) {
        goto LABEL_197;
      }
      --v2;
      goto LABEL_180;
    }
    unsigned int v25 = *v2;
    if (_scan_link_title_yybm[*v2] < 0)
    {
      uint64_t v4 = 3;
      int v5 = (int)v2;
      goto LABEL_180;
    }
    if (v25 > 0xE0)
    {
      if (v25 <= 0xEF)
      {
        uint64_t v4 = 3;
        int v5 = (int)v2;
        goto LABEL_155;
      }
      if (v25 == 240)
      {
        uint64_t v4 = 3;
        int v5 = (int)v2;
        goto LABEL_163;
      }
      if (v25 < 0xF4)
      {
        uint64_t v4 = 3;
        int v5 = (int)v2;
        goto LABEL_166;
      }
      if (v25 == 244)
      {
        uint64_t v4 = 3;
        int v5 = (int)v2;
        goto LABEL_177;
      }
      goto LABEL_200;
    }
    if (v25 > 0x5C)
    {
      if (v25 >= 0xC2)
      {
        uint64_t v4 = 3;
        int v5 = (int)v2;
        goto LABEL_159;
      }
      goto LABEL_200;
    }
    if (v25 < 0x29)
    {
LABEL_200:
      int v5 = (int)v2;
      return (v5 - a1);
    }
    uint64_t v4 = 3;
    int v5 = (int)v2;
    if (v25 != 41) {
      continue;
    }
    break;
  }
LABEL_199:
  int v5 = v2 + 1;
  return (v5 - a1);
}

uint64_t _scan_spacechars(unsigned __int8 *a1)
{
  if ((_scan_spacechars_yybm[*a1] & 0x80000000) == 0) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v3 = a1 + 1;
  do
    int v4 = _scan_spacechars_yybm[v3[result++]];
  while (v4 < 0);
  return result;
}

uint64_t _scan_setext_heading_line(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 61)
  {
    unsigned int v7 = a1[1];
    int v5 = a1 + 1;
    unsigned int v6 = v7;
    if ((_scan_setext_heading_line_yybm[v7] & 0x80000000) == 0)
    {
      if (v6 <= 0xC)
      {
        if (v6 - 9 < 2) {
          goto LABEL_44;
        }
        return 0;
      }
      if (v6 != 13 && v6 != 32) {
        return 0;
      }
      while (1)
      {
LABEL_44:
        if (v6 > 0xC)
        {
          if (v6 != 32) {
            return v6 == 13;
          }
        }
        else
        {
          if (v6 < 9) {
            return 0;
          }
          if (v6 != 9) {
            return v6 <= 0xA;
          }
        }
LABEL_43:
        unsigned int v14 = *++v5;
        unsigned int v6 = v14;
      }
    }
    do
    {
      unsigned int v9 = *++v5;
      unsigned int v8 = v9;
    }
    while (_scan_setext_heading_line_yybm[v9] < 0);
    if (v8 > 0xC)
    {
      if (v8 != 13)
      {
        if (v8 == 32) {
          goto LABEL_43;
        }
        return 0;
      }
    }
    else
    {
      if (v8 < 9) {
        return 0;
      }
      if (v8 == 9) {
        goto LABEL_43;
      }
      if (v8 >= 0xB) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
    if (v1 != 45) {
      return 0;
    }
    unsigned int i = a1 + 1;
    unsigned int v3 = a1[1];
    char v4 = _scan_setext_heading_line_yybm[a1[1]];
    if ((v4 & 0x40) != 0)
    {
      for (unsigned int i = a1 + 2; ; ++i)
      {
        unsigned int v10 = *i;
        if ((_scan_setext_heading_line_yybm[*i] & 0x20) != 0) {
          goto LABEL_34;
        }
        if (v10 <= 0xC) {
          break;
        }
        if (v10 != 45)
        {
          if (v10 == 13) {
            return 2;
          }
          return 0;
        }
      }
      if (v10 - 9 < 2) {
        return 2;
      }
      return 0;
    }
    if (v3 > 0xC)
    {
      if (v3 != 13 && v3 != 32) {
        return 0;
      }
    }
    else if (v3 - 9 >= 2)
    {
      return 0;
    }
    while ((v4 & 0x20) != 0)
    {
LABEL_34:
      unsigned int v11 = *++i;
      unsigned int v3 = v11;
      char v4 = _scan_setext_heading_line_yybm[v11];
    }
    if (v3 >= 9 && (v3 >= 0xB ? (BOOL v12 = v3 == 13) : (BOOL v12 = 1), v12)) {
      return 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t _scan_close_code_fence(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 126)
  {
    if (a1[1] != 126 || (_scan_close_code_fence_yybm[a1[2]] & 0x40) == 0) {
      return 0;
    }
    uint64_t v2 = 3;
    do
    {
      unsigned int v7 = a1[v2];
      char v8 = _scan_close_code_fence_yybm[a1[v2++]];
    }
    while ((v8 & 0x40) != 0);
    unsigned int v9 = &a1[v2];
    if (v7 <= 0xC)
    {
      if (v7 >= 9)
      {
        if (v7 == 9) {
          goto LABEL_34;
        }
        if (v7 < 0xB) {
          return (v2 - 1);
        }
      }
      return 0;
    }
    if (v7 != 13)
    {
      if (v7 == 32)
      {
        do
        {
LABEL_34:
          while (1)
          {
            unsigned int v14 = *v9++;
            unsigned int v13 = v14;
            if (v14 <= 0xC) {
              break;
            }
            if (v13 != 32)
            {
              if (v13 != 13) {
                return 0;
              }
              return (v2 - 1);
            }
          }
          if (v13 < 9) {
            return 0;
          }
        }
        while (v13 == 9);
        if (v13 > 0xA) {
          return 0;
        }
        return (v2 - 1);
      }
      return 0;
    }
  }
  else
  {
    if (v1 != 96 || a1[1] != 96 || (_scan_close_code_fence_yybm[a1[2]] & 0x20) == 0) {
      return 0;
    }
    uint64_t v2 = 3;
    do
    {
      unsigned int v3 = a1[v2];
      char v4 = _scan_close_code_fence_yybm[a1[v2++]];
    }
    while ((v4 & 0x20) != 0);
    int v5 = &a1[v2];
    if (v3 <= 0xC)
    {
      if (v3 < 9) {
        return 0;
      }
      if (v3 != 9)
      {
        if (v3 < 0xB) {
          return (v2 - 1);
        }
        return 0;
      }
      do
      {
LABEL_24:
        unsigned int v11 = *v5++;
        unsigned int v10 = v11;
      }
      while (_scan_close_code_fence_yybm[v11] < 0);
      if (v10 >= 9 && (v10 < 0xB || v10 == 13)) {
        return (v2 - 1);
      }
      return 0;
    }
    if (v3 != 13)
    {
      if (v3 != 32) {
        return 0;
      }
      goto LABEL_24;
    }
  }
  return (v2 - 1);
}

uint64_t _scan_entity(unsigned char *a1)
{
  if (*a1 != 38) {
    return 0;
  }
  unsigned int v1 = a1[1];
  if (v1 <= 0x40)
  {
    if (v1 != 35) {
      return 0;
    }
    unsigned int v2 = a1[2];
    if (v2 <= 0x57)
    {
      if (v2 - 48 >= 0xA) {
        return 0;
      }
      LODWORD(v3) = a1 + 3;
      unsigned int v4 = a1[3];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      LODWORD(v3) = a1 + 4;
      unsigned int v4 = a1[4];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      LODWORD(v3) = a1 + 5;
      unsigned int v4 = a1[5];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      LODWORD(v3) = a1 + 6;
      unsigned int v4 = a1[6];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      LODWORD(v3) = a1 + 7;
      unsigned int v4 = a1[7];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      unsigned int v3 = a1 + 8;
      unsigned int v4 = a1[8];
      if (v4 < 0x30) {
        return 0;
      }
      if (v4 >= 0x3A) {
        goto LABEL_130;
      }
      goto LABEL_129;
    }
    if ((v2 & 0xFFFFFFDF) != 0x58) {
      return 0;
    }
    unsigned int v7 = a1[3];
    if (v7 > 0x40)
    {
      if (v7 >= 0x47 && v7 - 97 >= 6) {
        return 0;
      }
    }
    else if (v7 - 48 >= 0xA)
    {
      return 0;
    }
    LODWORD(v3) = a1 + 4;
    unsigned int v11 = a1[4];
    if (v11 > 0x3B)
    {
      if (v11 > 0x46)
      {
        if (v11 - 97 >= 6) {
          return 0;
        }
      }
      else if (v11 < 0x41)
      {
        return 0;
      }
    }
    else
    {
      if (v11 < 0x30) {
        return 0;
      }
      BOOL v9 = v11 == 58;
      if (v11 >= 0x3A) {
        goto LABEL_288;
      }
    }
    LODWORD(v3) = a1 + 5;
    unsigned int v13 = a1[5];
    if (v13 > 0x3B)
    {
      if (v13 > 0x46)
      {
        if (v13 - 97 >= 6) {
          return 0;
        }
      }
      else if (v13 < 0x41)
      {
        return 0;
      }
    }
    else
    {
      if (v13 < 0x30) {
        return 0;
      }
      BOOL v9 = v13 == 58;
      if (v13 >= 0x3A) {
        goto LABEL_288;
      }
    }
    LODWORD(v3) = a1 + 6;
    unsigned int v15 = a1[6];
    if (v15 > 0x3B)
    {
      if (v15 > 0x46)
      {
        if (v15 - 97 >= 6) {
          return 0;
        }
      }
      else if (v15 < 0x41)
      {
        return 0;
      }
    }
    else
    {
      if (v15 < 0x30) {
        return 0;
      }
      BOOL v9 = v15 == 58;
      if (v15 >= 0x3A) {
        goto LABEL_288;
      }
    }
    LODWORD(v3) = a1 + 7;
    unsigned int v17 = a1[7];
    if (v17 > 0x3B)
    {
      if (v17 > 0x46)
      {
        if (v17 - 97 >= 6) {
          return 0;
        }
      }
      else if (v17 < 0x41)
      {
        return 0;
      }
    }
    else
    {
      if (v17 < 0x30) {
        return 0;
      }
      BOOL v9 = v17 == 58;
      if (v17 >= 0x3A) {
        goto LABEL_288;
      }
    }
    unsigned int v3 = a1 + 8;
    unsigned int v19 = a1[8];
    if (v19 <= 0x3B)
    {
      if (v19 < 0x30) {
        return 0;
      }
      BOOL v9 = v19 == 58;
      if (v19 >= 0x3A) {
        goto LABEL_288;
      }
LABEL_129:
      unsigned int v21 = v3[1];
      LODWORD(v3) = v3 + 1;
      unsigned int v4 = v21;
LABEL_130:
      if (v4 == 59) {
        return (v3 - a1 + 1);
      }
      return 0;
    }
    if (v19 > 0x46)
    {
      if (v19 - 97 >= 6) {
        return 0;
      }
      goto LABEL_129;
    }
    goto LABEL_118;
  }
  if (v1 >= 0x5B && v1 - 97 >= 0x1A) {
    return 0;
  }
  unsigned int v6 = a1[2];
  if (v6 > 0x40)
  {
    if (v6 >= 0x5B && v6 - 97 >= 0x1A) {
      return 0;
    }
  }
  else if (v6 - 48 >= 0xA)
  {
    return 0;
  }
  LODWORD(v3) = a1 + 3;
  unsigned int v8 = a1[3];
  if (v8 > 0x3B)
  {
    if (v8 > 0x5A)
    {
      if (v8 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v8 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v8 < 0x30) {
      return 0;
    }
    BOOL v9 = v8 == 58;
    if (v8 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 4;
  unsigned int v10 = a1[4];
  if (v10 > 0x3B)
  {
    if (v10 > 0x5A)
    {
      if (v10 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v10 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v10 < 0x30) {
      return 0;
    }
    BOOL v9 = v10 == 58;
    if (v10 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 5;
  unsigned int v12 = a1[5];
  if (v12 > 0x3B)
  {
    if (v12 > 0x5A)
    {
      if (v12 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v12 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v12 < 0x30) {
      return 0;
    }
    BOOL v9 = v12 == 58;
    if (v12 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 6;
  unsigned int v14 = a1[6];
  if (v14 > 0x3B)
  {
    if (v14 > 0x5A)
    {
      if (v14 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v14 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v14 < 0x30) {
      return 0;
    }
    BOOL v9 = v14 == 58;
    if (v14 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 7;
  unsigned int v16 = a1[7];
  if (v16 > 0x3B)
  {
    if (v16 > 0x5A)
    {
      if (v16 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v16 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v16 < 0x30) {
      return 0;
    }
    BOOL v9 = v16 == 58;
    if (v16 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 8;
  unsigned int v18 = a1[8];
  if (v18 > 0x3B)
  {
    if (v18 > 0x5A)
    {
      if (v18 - 97 >= 0x1A) {
        return 0;
      }
    }
    else if (v18 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v18 < 0x30) {
      return 0;
    }
    BOOL v9 = v18 == 58;
    if (v18 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 9;
  unsigned int v20 = a1[9];
  if (v20 > 0x3B)
  {
    if (v20 > 0x5A)
    {
      if (v20 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v20 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v20 < 0x30) {
      return 0;
    }
    BOOL v9 = v20 == 58;
    if (v20 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 10;
  unsigned int v22 = a1[10];
  if (v22 > 0x3B)
  {
    if (v22 > 0x5A)
    {
      if (v22 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v22 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v22 < 0x30) {
      return 0;
    }
    BOOL v9 = v22 == 58;
    if (v22 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 11;
  unsigned int v23 = a1[11];
  if (v23 > 0x3B)
  {
    if (v23 > 0x5A)
    {
      if (v23 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v23 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v23 < 0x30) {
      return 0;
    }
    BOOL v9 = v23 == 58;
    if (v23 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 12;
  unsigned int v24 = a1[12];
  if (v24 > 0x3B)
  {
    if (v24 > 0x5A)
    {
      if (v24 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v24 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v24 < 0x30) {
      return 0;
    }
    BOOL v9 = v24 == 58;
    if (v24 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 13;
  unsigned int v25 = a1[13];
  if (v25 > 0x3B)
  {
    if (v25 > 0x5A)
    {
      if (v25 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v25 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v25 < 0x30) {
      return 0;
    }
    BOOL v9 = v25 == 58;
    if (v25 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 14;
  unsigned int v26 = a1[14];
  if (v26 > 0x3B)
  {
    if (v26 > 0x5A)
    {
      if (v26 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v26 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v26 < 0x30) {
      return 0;
    }
    BOOL v9 = v26 == 58;
    if (v26 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 15;
  unsigned int v27 = a1[15];
  if (v27 > 0x3B)
  {
    if (v27 > 0x5A)
    {
      if (v27 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v27 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v27 < 0x30) {
      return 0;
    }
    BOOL v9 = v27 == 58;
    if (v27 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 16;
  unsigned int v28 = a1[16];
  if (v28 > 0x3B)
  {
    if (v28 > 0x5A)
    {
      if (v28 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v28 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v28 < 0x30) {
      return 0;
    }
    BOOL v9 = v28 == 58;
    if (v28 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 17;
  unsigned int v29 = a1[17];
  if (v29 > 0x3B)
  {
    if (v29 > 0x5A)
    {
      if (v29 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v29 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v29 < 0x30) {
      return 0;
    }
    BOOL v9 = v29 == 58;
    if (v29 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 18;
  unsigned int v30 = a1[18];
  if (v30 > 0x3B)
  {
    if (v30 > 0x5A)
    {
      if (v30 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v30 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v30 < 0x30) {
      return 0;
    }
    BOOL v9 = v30 == 58;
    if (v30 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 19;
  unsigned int v31 = a1[19];
  if (v31 > 0x3B)
  {
    if (v31 > 0x5A)
    {
      if (v31 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v31 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v31 < 0x30) {
      return 0;
    }
    BOOL v9 = v31 == 58;
    if (v31 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 20;
  unsigned int v32 = a1[20];
  if (v32 > 0x3B)
  {
    if (v32 > 0x5A)
    {
      if (v32 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v32 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v32 < 0x30) {
      return 0;
    }
    BOOL v9 = v32 == 58;
    if (v32 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 21;
  unsigned int v33 = a1[21];
  if (v33 > 0x3B)
  {
    if (v33 > 0x5A)
    {
      if (v33 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v33 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v33 < 0x30) {
      return 0;
    }
    BOOL v9 = v33 == 58;
    if (v33 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 22;
  unsigned int v34 = a1[22];
  if (v34 > 0x3B)
  {
    if (v34 > 0x5A)
    {
      if (v34 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v34 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v34 < 0x30) {
      return 0;
    }
    BOOL v9 = v34 == 58;
    if (v34 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 23;
  unsigned int v35 = a1[23];
  if (v35 > 0x3B)
  {
    if (v35 > 0x5A)
    {
      if (v35 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v35 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v35 < 0x30) {
      return 0;
    }
    BOOL v9 = v35 == 58;
    if (v35 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 24;
  unsigned int v36 = a1[24];
  if (v36 > 0x3B)
  {
    if (v36 > 0x5A)
    {
      if (v36 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v36 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v36 < 0x30) {
      return 0;
    }
    BOOL v9 = v36 == 58;
    if (v36 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 25;
  unsigned int v37 = a1[25];
  if (v37 > 0x3B)
  {
    if (v37 > 0x5A)
    {
      if (v37 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v37 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v37 < 0x30) {
      return 0;
    }
    BOOL v9 = v37 == 58;
    if (v37 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 26;
  unsigned int v38 = a1[26];
  if (v38 > 0x3B)
  {
    if (v38 > 0x5A)
    {
      if (v38 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v38 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v38 < 0x30) {
      return 0;
    }
    BOOL v9 = v38 == 58;
    if (v38 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 27;
  unsigned int v39 = a1[27];
  if (v39 > 0x3B)
  {
    if (v39 > 0x5A)
    {
      if (v39 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v39 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v39 < 0x30) {
      return 0;
    }
    BOOL v9 = v39 == 58;
    if (v39 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 28;
  unsigned int v40 = a1[28];
  if (v40 > 0x3B)
  {
    if (v40 > 0x5A)
    {
      if (v40 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v40 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v40 < 0x30) {
      return 0;
    }
    BOOL v9 = v40 == 58;
    if (v40 >= 0x3A) {
      goto LABEL_288;
    }
  }
  LODWORD(v3) = a1 + 29;
  unsigned int v41 = a1[29];
  if (v41 > 0x3B)
  {
    if (v41 > 0x5A)
    {
      if (v41 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v41 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v41 < 0x30) {
      return 0;
    }
    BOOL v9 = v41 == 58;
    if (v41 >= 0x3A)
    {
LABEL_288:
      if (!v9) {
        return (v3 - a1 + 1);
      }
      return 0;
    }
  }
  LODWORD(v3) = a1 + 30;
  unsigned int v43 = a1[30];
  if (v43 > 0x3B)
  {
    if (v43 > 0x5A)
    {
      if (v43 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v43 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v43 < 0x30) {
      return 0;
    }
    BOOL v44 = v43 == 58;
    if (v43 >= 0x3A) {
      goto LABEL_314;
    }
  }
  LODWORD(v3) = a1 + 31;
  unsigned int v45 = a1[31];
  if (v45 > 0x3B)
  {
    if (v45 > 0x5A)
    {
      if (v45 - 123 < 0xFFFFFFE6) {
        return 0;
      }
    }
    else if (v45 < 0x41)
    {
      return 0;
    }
  }
  else
  {
    if (v45 < 0x30) {
      return 0;
    }
    BOOL v44 = v45 == 58;
    if (v45 >= 0x3A) {
      goto LABEL_314;
    }
  }
  unsigned int v3 = a1 + 32;
  unsigned int v19 = a1[32];
  if (v19 > 0x3B)
  {
    if (v19 > 0x5A)
    {
      if (v19 - 97 >= 0x1A) {
        return 0;
      }
      goto LABEL_129;
    }
LABEL_118:
    if (v19 < 0x41) {
      return 0;
    }
    goto LABEL_129;
  }
  if (v19 < 0x30) {
    return 0;
  }
  BOOL v44 = v19 == 58;
  if (v19 < 0x3A) {
    goto LABEL_129;
  }
LABEL_314:
  if (v44) {
    return 0;
  }
  return (v3 - a1 + 1);
}

uint64_t _scan_dangerous_url(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0x56)
  {
    if (v1 <= 0x66)
    {
      if (v1 != 100)
      {
        if (v1 <= 0x65) {
          return 0;
        }
        goto LABEL_33;
      }
LABEL_8:
      if ((a1[1] & 0xDF) != 0x41 || (a1[2] & 0xDF) != 0x54 || (a1[3] & 0xDF) != 0x41 || a1[4] != 58) {
        return 0;
      }
      int v2 = a1 + 5;
      if ((a1[5] & 0xDF) != 0x49
        || (a1[6] & 0xDF) != 0x4D
        || (a1[7] & 0xDF) != 0x41
        || (a1[8] & 0xDF) != 0x47
        || (a1[9] & 0xDF) != 0x45
        || a1[10] != 47)
      {
        return (v2 - a1);
      }
      unsigned int v3 = a1[11];
      if (v3 > 0x57)
      {
        if (v3 <= 0x6A)
        {
          if (v3 != 103)
          {
            if (v3 < 0x6A) {
              return (v2 - a1);
            }
LABEL_61:
            if ((a1[12] & 0xDF) != 0x50 || (a1[13] & 0xDF) != 0x45) {
              return (v2 - a1);
            }
            uint64_t v8 = 13;
LABEL_64:
            if ((a1[v8 + 1] & 0xDF) == 0x47) {
              return 0;
            }
            return (v2 - a1);
          }
LABEL_50:
          if ((a1[12] & 0xDF) == 0x49 && (a1[13] & 0xDF) == 0x46) {
            return 0;
          }
          return (v2 - a1);
        }
        if (v3 > 0x70)
        {
          if (v3 != 119) {
            return (v2 - a1);
          }
LABEL_67:
          if ((a1[12] & 0xDF) == 0x45 && (a1[13] & 0xDF) == 0x42 && (a1[14] & 0xDF) == 0x50) {
            return 0;
          }
          return (v2 - a1);
        }
        if (v3 != 112) {
          return (v2 - a1);
        }
      }
      else
      {
        if (v3 <= 0x4A)
        {
          if (v3 != 71)
          {
            if (v3 < 0x4A) {
              return (v2 - a1);
            }
            goto LABEL_61;
          }
          goto LABEL_50;
        }
        if (v3 != 80)
        {
          if (v3 < 0x57) {
            return (v2 - a1);
          }
          goto LABEL_67;
        }
      }
      if ((a1[12] & 0xDF) != 0x4E) {
        return (v2 - a1);
      }
      uint64_t v8 = 12;
      goto LABEL_64;
    }
    if (v1 > 0x6A)
    {
      if (v1 != 118) {
        return 0;
      }
      goto LABEL_40;
    }
    if (v1 != 106) {
      return 0;
    }
LABEL_28:
    if ((a1[1] & 0xDF) != 0x41) {
      return 0;
    }
    if ((a1[2] & 0xDF) != 0x56) {
      return 0;
    }
    unsigned int v4 = a1 + 3;
    if ((a1[3] & 0xDF) != 0x41) {
      return 0;
    }
LABEL_41:
    if ((v4[1] & 0xDF) != 0x53) {
      return 0;
    }
    if ((v4[2] & 0xDF) != 0x43) {
      return 0;
    }
    if ((v4[3] & 0xDF) != 0x52) {
      return 0;
    }
    if ((v4[4] & 0xDF) != 0x49) {
      return 0;
    }
    if ((v4[5] & 0xDF) != 0x50) {
      return 0;
    }
    int v7 = v4[6];
    int v5 = v4 + 6;
    if ((v7 & 0xFFFFFFDF) != 0x54) {
      return 0;
    }
    goto LABEL_36;
  }
  if (v1 > 0x46)
  {
    if (v1 != 74)
    {
      if (v1 <= 0x55) {
        return 0;
      }
LABEL_40:
      unsigned int v4 = a1 + 1;
      if ((a1[1] & 0xDF) != 0x42) {
        return 0;
      }
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  if (v1 == 68) {
    goto LABEL_8;
  }
  if (v1 <= 0x45) {
    return 0;
  }
LABEL_33:
  if ((a1[1] & 0xDF) != 0x49) {
    return 0;
  }
  if ((a1[2] & 0xDF) != 0x4C) {
    return 0;
  }
  int v5 = a1 + 3;
  if ((a1[3] & 0xDF) != 0x45) {
    return 0;
  }
LABEL_36:
  if (v5[1] == 58)
  {
    int v2 = v5 + 2;
    return (v2 - a1);
  }
  return 0;
}

unint64_t _scan_footnote_definition(unint64_t result)
{
  if (*(unsigned char *)result != 91) {
    return 0;
  }
  if (*(unsigned char *)(result + 1) != 94) {
    return 0;
  }
  unsigned int v1 = (unsigned char *)(result + 2);
  unsigned int v2 = *(unsigned __int8 *)(result + 2);
  if (v2 == 93) {
    return 0;
  }
  while (1)
  {
    if ((_scan_footnote_definition_yybm[v2] & 0x40) != 0) {
      goto LABEL_26;
    }
    if (v2 <= 0xEC) {
      break;
    }
    if (v2 > 0xF0)
    {
      if (v2 >= 0xF4)
      {
        if (v2 != 244) {
          return 0;
        }
        int v7 = (char)*++v1;
        if (v7 >= -112) {
          return 0;
        }
      }
      else
      {
        int v5 = (char)*++v1;
        if (v5 >= -64) {
          return 0;
        }
      }
    }
    else
    {
      if (v2 < 0xEE)
      {
        int v4 = (char)*++v1;
        if (v4 >= -96) {
          return 0;
        }
        goto LABEL_25;
      }
      if (v2 >= 0xF0)
      {
        char v6 = *++v1;
        if ((v6 + 112) >= 0x30u) {
          return 0;
        }
      }
    }
LABEL_24:
    int v8 = (char)*++v1;
    if (v8 >= -64) {
      return 0;
    }
LABEL_25:
    int v9 = (char)*++v1;
    if (v9 >= -64) {
      return 0;
    }
LABEL_26:
    unsigned int v10 = *++v1;
    unsigned int v2 = v10;
  }
  if (v2 > 0xC1)
  {
    if (v2 < 0xE0) {
      goto LABEL_25;
    }
    if (v2 == 224)
    {
      char v3 = *++v1;
      if ((v3 & 0xE0) != 0xA0) {
        return 0;
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v2 - 33 >= 0x3D || v1[1] != 58) {
    return 0;
  }
  LODWORD(result) = v1 - result + 1;
  unsigned int v11 = v1 + 2;
  do
  {
    int v12 = *v11++;
    uint64_t result = (result + 1);
  }
  while (_scan_footnote_definition_yybm[v12] < 0);
  return result;
}

void *cmark_footnote_create(uint64_t *a1, uint64_t a2)
{
  uint64_t result = normalize_map_label(*a1, a2 + 144);
  if (result)
  {
    if (a1[2]) {
      cmark_footnote_create_cold_1();
    }
    int v5 = result;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))*a1)(1, 48);
    result[4] = a2;
    uint64_t v6 = a1[3];
    result[2] = v6;
    void *result = a1[1];
    result[1] = v5;
    a1[1] = (uint64_t)result;
    a1[3] = v6 + 1;
  }
  return result;
}

uint64_t (***cmark_footnote_map_new(uint64_t (**a1)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  return cmark_map_new(a1, (uint64_t (**)(uint64_t, uint64_t))footnote_free);
}

uint64_t footnote_free(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)result;
    (*(void (**)(void))(*(void *)result + 16))(*(void *)(a2 + 8));
    int v4 = *(void **)(a2 + 32);
    if (v4) {
      cmark_node_free(v4);
    }
    int v5 = *(uint64_t (**)(uint64_t))(v3 + 16);
    return v5(a2);
  }
  return result;
}

void *cmark_unlink_footnotes_map(void *result)
{
  unsigned int v1 = (void *)result[1];
  while (v1)
  {
    uint64_t result = (void *)v1[4];
    unsigned int v1 = (void *)*v1;
    if (result) {
      uint64_t result = cmark_node_unlink(result);
    }
  }
  return result;
}

unsigned char *normalize_map_label(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = &cmark_strbuf__initbuf;
  v5[2] = 0;
  if (!a2) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  cmark_utf8proc_case_fold(v5, *(unsigned __int8 **)a2, v2);
  cmark_strbuf_trim((uint64_t)v5);
  cmark_strbuf_normalize_whitespace((uint64_t)v5);
  uint64_t result = (unsigned char *)cmark_strbuf_detach((uint64_t)v5);
  if (!result) {
    normalize_map_label_cold_1();
  }
  if (!*result)
  {
    (*(void (**)(void))(a1 + 16))();
    return 0;
  }
  return result;
}

unsigned char *cmark_map_lookup(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && (*(_DWORD *)(a2 + 8) - 1001) >= 0xFFFFFC18)
  {
    if (a1[3])
    {
      uint64_t result = normalize_map_label(*a1, a2);
      if (!result) {
        return result;
      }
      int v4 = result;
      int v5 = (char *)a1[2];
      size_t v6 = a1[3];
      if (!v5)
      {
        int v7 = (void *)a1[1];
        int v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))*a1)(a1[3], 8);
        int v5 = v8;
        if (v7)
        {
          int v9 = v8;
          do
          {
            *(void *)int v9 = v7;
            v9 += 8;
            int v7 = (void *)*v7;
          }
          while (v7);
        }
        qsort(v8, v6, 8uLL, (int (__cdecl *)(const void *, const void *))refcmp);
        if (v6 < 2)
        {
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v10 = 0;
          size_t v11 = v6 - 1;
          int v12 = v5 + 8;
          do
          {
            uint64_t v13 = *(void *)v12;
            if (strcmp(*(const char **)(*(void *)v12 + 8), *(const char **)(*(void *)&v5[8 * v10] + 8)))
            {
              ++v10;
              *(void *)&v5[8 * v10] = v13;
            }
            v12 += 8;
            --v11;
          }
          while (v11);
        }
        size_t v6 = v10 + 1;
        a1[2] = (uint64_t)v5;
        a1[3] = v10 + 1;
      }
      unsigned int v14 = bsearch(v4, v5, v6, 8uLL, (int (__cdecl *)(const void *, const void *))refsearch);
      (*(void (**)(const void *))(*a1 + 16))(v4);
      if (v14)
      {
        uint64_t result = *(unsigned char **)v14;
        unint64_t v15 = *(void *)(*(void *)v14 + 24);
        uint64_t v16 = a1[4];
        if (v15 <= a1[5] - v16)
        {
          a1[4] = v16 + v15;
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t refsearch(const char *a1, uint64_t a2)
{
  return strcmp(a1, *(const char **)(*(void *)a2 + 8));
}

uint64_t refcmp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = strcmp(*(const char **)(*a1 + 8), *(const char **)(*a2 + 8));
  if (!result) {
    return (*(_DWORD *)(v2 + 16) - *(_DWORD *)(v3 + 16));
  }
  return result;
}

uint64_t cmark_strbuf_len(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

char *cmark_strbuf_set(char *result, char *__src, size_t __len)
{
  uint64_t v3 = (uint64_t)result;
  if (__src && (unsigned int v4 = __len, (int)__len > 0))
  {
    int v5 = __src;
    uint64_t result = (char *)*((void *)result + 1);
    if (result == __src)
    {
      uint64_t v6 = __len;
    }
    else
    {
      if (*(_DWORD *)(v3 + 16) <= (int)__len)
      {
        cmark_strbuf_grow(v3, __len);
        uint64_t result = *(char **)(v3 + 8);
      }
      uint64_t v6 = v4;
      uint64_t result = (char *)memmove(result, v5, v4);
      int v5 = *(char **)(v3 + 8);
    }
    *(_DWORD *)(v3 + 20) = v4;
    int v7 = &v5[v6];
  }
  else
  {
    *((_DWORD *)result + 5) = 0;
    if (*((int *)result + 4) < 1) {
      return result;
    }
    int v7 = (char *)*((void *)result + 1);
  }
  char *v7 = 0;
  return result;
}

char *cmark_strbuf_sets(char *a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return cmark_strbuf_set(a1, __s, v4);
}

_DWORD *cmark_strbuf_puts(_DWORD *a1, char *__s)
{
  int v4 = strlen(__s);

  return cmark_strbuf_put(a1, __s, v4);
}

unsigned char *cmark_strbuf_copy_cstr(unsigned char *__dst, int a2, uint64_t a3)
{
  if (!a3) {
    cmark_strbuf_copy_cstr_cold_1();
  }
  uint64_t v3 = __dst;
  if (__dst)
  {
    if (a2 >= 1)
    {
      *__dst = 0;
      int v4 = *(_DWORD *)(a3 + 20);
      if (v4)
      {
        if (*(int *)(a3 + 16) >= 1)
        {
          if (v4 >= a2) {
            int v5 = a2 - 1;
          }
          else {
            int v5 = *(_DWORD *)(a3 + 20);
          }
          __dst = memmove(__dst, *(const void **)(a3 + 8), v5);
          v3[v5] = 0;
        }
      }
    }
  }
  return __dst;
}

__n128 cmark_strbuf_swap(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  unint64_t v4 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v4;
  *a2 = result;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t cmark_strbuf_cmp(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a2 + 20);
  BOOL v4 = v2 <= v3;
  if (v2 >= v3) {
    int v2 = *(_DWORD *)(a2 + 20);
  }
  size_t v5 = v2;
  int v6 = !v4;
  if (v4) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = v6;
  }
  LODWORD(result) = memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v5);
  if (result) {
    return result;
  }
  else {
    return v7;
  }
}

uint64_t cmark_strbuf_strchr(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 <= a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v5 = memchr((void *)(v4 + (a3 & ~(a3 >> 31))), a2, v3 - (a3 & ~(a3 >> 31)));
  if (v5) {
    return (v5 - v4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t cmark_strbuf_strrchr(uint64_t a1, unsigned __int8 a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  int v4 = *(_DWORD *)(a1 + 20);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = v4 <= (int)a3 ? (v4 - 1) : a3;
  if ((result & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  while (*(unsigned __int8 *)(v6 + result) != a2)
  {
    BOOL v7 = (int)result <= 0;
    uint64_t result = (result - 1);
    if (v7) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t cmark_strbuf_truncate(uint64_t result, int a2)
{
  int v2 = a2 & ~(a2 >> 31);
  if (v2 < *(_DWORD *)(result + 20))
  {
    *(_DWORD *)(result + 20) = v2;
    *(unsigned char *)(*(void *)(result + 8) + v2) = 0;
  }
  return result;
}

uint64_t cmark_strbuf_rtrim(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 >= 1)
    {
      do
      {
        uint64_t result = cmark_isspace(*(unsigned char *)(*(void *)(v2 + 8) + (v1 - 1)));
        int v1 = *(_DWORD *)(v2 + 20);
        if (!result) {
          break;
        }
        BOOL v3 = __OFSUB__(v1--, 1);
        *(_DWORD *)(v2 + 20) = v1;
      }
      while (!((v1 < 0) ^ v3 | (v1 == 0)));
    }
    *(unsigned char *)(*(void *)(v2 + 8) + v1) = 0;
  }
  return result;
}

uint64_t cmark_strbuf_trim(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      do
      {
        if (!cmark_isspace(*(unsigned char *)(*(void *)(v2 + 8) + v3))) {
          break;
        }
        ++v3;
      }
      while (v3 < *(int *)(v2 + 20));
    }
    cmark_strbuf_drop((void *)v2, v3);
    return cmark_strbuf_rtrim(v2);
  }
  return result;
}

uint64_t cmark_strbuf_normalize_whitespace(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(v2) = *(_DWORD *)(result + 20);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    BOOL v5 = 0;
    while (1)
    {
      uint64_t result = cmark_isspace(*(unsigned char *)(*(void *)(v1 + 8) + v3));
      if (!result) {
        break;
      }
      if (!v5)
      {
        uint64_t v6 = *(void *)(v1 + 8);
        char v7 = 32;
LABEL_7:
        *(unsigned char *)(v6 + v4++) = v7;
      }
      ++v3;
      uint64_t v2 = *(int *)(v1 + 20);
      BOOL v5 = result != 0;
      if (v3 >= v2) {
        goto LABEL_11;
      }
    }
    uint64_t v6 = *(void *)(v1 + 8);
    char v7 = *(unsigned char *)(v6 + v3);
    goto LABEL_7;
  }
  int v4 = 0;
LABEL_11:
  int v8 = v4 & ~(v4 >> 31);
  if (v8 < (int)v2)
  {
    *(_DWORD *)(v1 + 20) = v8;
    *(unsigned char *)(*(void *)(v1 + 8) + v8) = 0;
  }
  return result;
}

uint64_t cmark_strbuf_unescape(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 20);
  if (v2 < 1)
  {
    int v7 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    for (int i = 0; i < v2; ++i)
    {
      uint64_t v5 = *(void *)(v1 + 8);
      int v6 = *(unsigned __int8 *)(v5 + i);
      if (v6 == 92)
      {
        uint64_t result = cmark_ispunct(*(unsigned char *)(v5 + i + 1));
        if (result) {
          ++i;
        }
        uint64_t v5 = *(void *)(v1 + 8);
        LOBYTE(v6) = *(unsigned char *)(v5 + i);
      }
      int v7 = v3 + 1;
      *(unsigned char *)(v5 + v3) = v6;
      int v2 = *(_DWORD *)(v1 + 20);
      ++v3;
    }
  }
  if (v7 < v2)
  {
    *(_DWORD *)(v1 + 20) = v7;
    *(unsigned char *)(*(void *)(v1 + 8) + v7) = 0;
  }
  return result;
}

uint64_t cmark_reference_create(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t result = (uint64_t)normalize_map_label(*a1, a2);
  if (result)
  {
    if (a1[2]) {
      cmark_reference_create_cold_1();
    }
    uint64_t v8 = result;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))*a1)(1, 88);
    *(void *)(v9 + 8) = v8;
    *(unsigned char *)(v9 + 32) = 0;
    *(void *)(v9 + 40) = cmark_clean_url(*a1, a3);
    *(void *)(v9 + 48) = v10;
    uint64_t result = cmark_clean_title(*a1, a4);
    *(void *)(v9 + 56) = result;
    *(void *)(v9 + 64) = v11;
    *(void *)(v9 + 72) = &unk_21C3B4D0E;
    *(void *)(v9 + 80) = 0;
    uint64_t v12 = a1[3];
    *(void *)uint64_t v9 = a1[1];
    uint64_t v13 = *(int *)(v9 + 48) + (uint64_t)(int)v11;
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 24) = v13;
    a1[1] = v9;
    a1[3] = v12 + 1;
  }
  return result;
}

unsigned char *cmark_reference_create_attributes(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = normalize_map_label(*a1, a2);
  if (result)
  {
    if (a1[2]) {
      cmark_reference_create_attributes_cold_1();
    }
    int v6 = result;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))*a1)(1, 88);
    *(void *)(v7 + 8) = v6;
    *(unsigned char *)(v7 + 32) = 1;
    *(void *)(v7 + 40) = &unk_21C3B4D0E;
    *(void *)(v7 + 48) = 0;
    *(void *)(v7 + 56) = &unk_21C3B4D0E;
    *(void *)(v7 + 64) = 0;
    uint64_t result = (unsigned char *)cmark_clean_attributes(*a1, a3);
    *(void *)(v7 + 72) = result;
    *(void *)(v7 + 80) = v8;
    uint64_t v9 = a1[3];
    *(void *)(v7 + 16) = v9;
    *(void *)uint64_t v7 = a1[1];
    a1[1] = v7;
    a1[3] = v9 + 1;
  }
  return result;
}

uint64_t reference_free(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)result;
    (*(void (**)(void))(*(void *)result + 16))(*(void *)(a2 + 8));
    int v4 = (void *)(a2 + 40);
    if (*(_DWORD *)(a2 + 52)) {
      (*(void (**)(void))(v3 + 16))(*v4);
    }
    void *v4 = 0;
    *(void *)(a2 + 48) = 0;
    uint64_t v5 = (void *)(a2 + 56);
    if (*(_DWORD *)(a2 + 68)) {
      (*(void (**)(void))(v3 + 16))(*v5);
    }
    void *v5 = 0;
    *(void *)(a2 + 64) = 0;
    int v6 = (void *)(a2 + 72);
    if (*(_DWORD *)(a2 + 84)) {
      (*(void (**)(void))(v3 + 16))(*v6);
    }
    *int v6 = 0;
    *(void *)(a2 + 80) = 0;
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v3 + 16);
    return v7(a2);
  }
  return result;
}

uint64_t cmark_parse_file()
{
  v0 = (FILE *)MEMORY[0x270FA5388]();
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = cmark_parser_new_with_mem(v1, (uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR);
  do
  {
    size_t v3 = fread(__ptr, 1uLL, 0x1000uLL, v0);
    if (!v3) {
      break;
    }
    unint64_t v4 = v3;
    S_parser_feed(v2, __ptr, v3, v3 < 0x1000);
  }
  while (v4 > 0xFFF);
  uint64_t v5 = cmark_parser_finish(v2);
  cmark_parser_free(v2);
  return v5;
}

uint64_t cmark_parse_document(unsigned char *a1, unint64_t a2, int a3)
{
  uint64_t v5 = cmark_parser_new_with_mem(a3, (uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR);
  S_parser_feed(v5, a1, a2, 1);
  uint64_t v6 = cmark_parser_finish(v5);
  cmark_parser_free(v5);
  return v6;
}

uint64_t cmark_parser_feed_reentrant(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  uint64_t v7 = 0;
  __s = 0;
  uint64_t v9 = 0;
  cmark_strbuf_init(*(void *)a1, &v7, 0);
  cmark_strbuf_puts(&v7, *(char **)(a1 + 104));
  cmark_strbuf_clear(a1 + 96);
  S_parser_feed(a1, a2, a3, 1);
  cmark_strbuf_sets((char *)(a1 + 96), __s);
  return cmark_strbuf_free((uint64_t)&v7);
}

uint64_t cmark_parser_get_line_number(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t cmark_parser_get_offset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t cmark_parser_get_column(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t cmark_parser_get_first_nonspace(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t cmark_parser_get_first_nonspace_column(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t cmark_parser_get_indent(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t cmark_parser_is_blank(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t cmark_parser_has_partially_consumed_tab(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 61);
}

uint64_t cmark_parser_get_last_line_length(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t cmark_parser_advance_offset(uint64_t a1, char *__s, int a3, int a4)
{
  if (__s) {
    uint64_t v8 = strlen(__s);
  }
  else {
    uint64_t v8 = 0;
  }
  v10[0] = (uint64_t)__s;
  v10[1] = v8;
  return S_advance_offset(a1, v10, a3, a4 != 0);
}

uint64_t cmark_parser_set_backslash_ispunct_func(uint64_t result, uint64_t a2)
{
  *(void *)(result + 152) = a2;
  return result;
}

uint64_t cmark_parser_get_syntax_extensions(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sort_footnote_by_ix(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)a1 + 40) - *(_DWORD *)(*(void *)a2 + 40));
}

uint64_t cmark_enable_safety_checks(char a1)
{
  pthread_once(&safety_once, (void (*)(void))initialize_safety);
  pthread_mutex_lock(&safety_lock);
  enable_safety_checks = a1;

  return pthread_mutex_unlock(&safety_lock);
}

uint64_t cmark_node_new_with_mem_and_ext(unsigned __int16 a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = (*a2)(1, 184);
  cmark_strbuf_init((uint64_t)a2, (uint64_t *)v6, 0);
  *(_WORD *)(v6 + 100) = a1;
  *(void *)(v6 + 112) = a3;
  if (a1 == 32771)
  {
    *(_DWORD *)(v6 + 144) = 1;
    *(_DWORD *)(v6 + 156) = 0;
    *(unsigned char *)(v6 + 165) = 0;
    if (!a3) {
      return v6;
    }
    goto LABEL_7;
  }
  if (a1 == 32777) {
    *(_DWORD *)(v6 + 144) = 1;
  }
  if (a3)
  {
LABEL_7:
    uint64_t v7 = *(void (**)(uint64_t, uint64_t (**)(uint64_t, uint64_t), uint64_t))(a3 + 160);
    if (v7) {
      v7(a3, a2, v6);
    }
  }
  return v6;
}

uint64_t cmark_node_new_with_ext(unsigned __int16 a1, uint64_t a2)
{
  return cmark_node_new_with_mem_and_ext(a1, (uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR, a2);
}

uint64_t cmark_node_new_with_mem(unsigned __int16 a1, uint64_t (**a2)(uint64_t, uint64_t))
{
  return cmark_node_new_with_mem_and_ext(a1, a2, 0);
}

uint64_t cmark_node_new(unsigned __int16 a1)
{
  return cmark_node_new_with_mem_and_ext(a1, (uint64_t (**)(uint64_t, uint64_t))&CMARK_DEFAULT_MEM_ALLOCATOR, 0);
}

BOOL cmark_node_set_type(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 100);
  if (v2 != a2)
  {
    __int16 v3 = a2;
    *(_WORD *)(a1 + 100) = a2;
    BOOL result = S_can_contain(*(void **)(a1 + 40), a1);
    *(_WORD *)(a1 + 100) = v2;
    if (!result) {
      return result;
    }
    free_node_as(a1);
    *(_WORD *)(a1 + 100) = v3;
  }
  return 1;
}

BOOL S_can_contain(void *a1, uint64_t a2)
{
  if (!a1 || !a2 || *a1 != *(void *)a2) {
    return 0;
  }
  pthread_once(&safety_once, (void (*)(void))initialize_safety);
  pthread_mutex_lock(&safety_lock);
  int v5 = enable_safety_checks;
  pthread_mutex_unlock(&safety_lock);
  if (v5)
  {
    uint64_t v6 = a1;
    while (v6 != (void *)a2)
    {
      uint64_t v6 = (void *)v6[5];
      if (!v6) {
        goto LABEL_9;
      }
    }
    return 0;
  }
LABEL_9:
  int v7 = *(unsigned __int16 *)(a2 + 100);

  return cmark_node_can_contain_type((uint64_t)a1, v7);
}

const char *cmark_node_get_type_string(uint64_t a1)
{
  if (!a1) {
    return "NONE";
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    int v5 = *(uint64_t (**)(void))(v4 + 72);
    if (v5) {
      return (const char *)v5();
    }
  }
  if (!(!v2 & v1))
  {
    switch(*(_WORD *)(a1 + 100))
    {
      case 0xC001:
        return "text";
      case 0xC002:
        return "softbreak";
      case 0xC003:
        return "linebreak";
      case 0xC004:
        return "code";
      case 0xC005:
        return "html_inline";
      case 0xC006:
        return "custom_inline";
      case 0xC007:
        return "emph";
      case 0xC008:
        return "strong";
      case 0xC009:
        return "link";
      case 0xC00A:
        return "image";
      case 0xC00B:
        goto LABEL_14;
      case 0xC00C:
        return "attribute";
      default:
        JUMPOUT(0);
    }
  }
  switch(*(_WORD *)(a1 + 100))
  {
    case 0x8001:
      BOOL result = "document";
      break;
    case 0x8002:
      BOOL result = "block_quote";
      break;
    case 0x8003:
      BOOL result = "list";
      break;
    case 0x8004:
      BOOL result = "item";
      break;
    case 0x8005:
      BOOL result = "code_block";
      break;
    case 0x8006:
      BOOL result = "html_block";
      break;
    case 0x8007:
      BOOL result = "custom_block";
      break;
    case 0x8008:
      BOOL result = "paragraph";
      break;
    case 0x8009:
      BOOL result = "heading";
      break;
    case 0x800A:
      BOOL result = "thematic_break";
      break;
    default:
      if (*(_WORD *)(a1 + 100)) {
LABEL_14:
      }
        BOOL result = "<unknown>";
      else {
        BOOL result = "none";
      }
      break;
  }
  return result;
}

uint64_t cmark_node_next(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t cmark_node_previous(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t cmark_node_parent(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t cmark_node_first_child(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t cmark_node_last_child(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t cmark_node_nth_child(uint64_t result, int a2)
{
  if (result)
  {
    BOOL result = *(void *)(result + 48);
    if (result && a2 >= 1)
    {
      int v3 = 1;
      do
      {
        BOOL result = *(void *)(result + 24);
        if (result) {
          BOOL v4 = v3 < a2;
        }
        else {
          BOOL v4 = 0;
        }
        ++v3;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t cmark_node_parent_footnote_def(uint64_t result)
{
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

uint64_t cmark_node_get_user_data(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t cmark_node_set_user_data(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 64) = a2;
    return 1;
  }
  return result;
}

uint64_t cmark_node_set_user_data_free_func(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 72) = a2;
    return 1;
  }
  return result;
}

uint64_t cmark_node_get_backtick_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t cmark_node_set_literal(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = *(unsigned __int16 *)(result + 100);
    if ((v4 - 49153) > 0xA || ((1 << (v4 - 1)) & 0x419) == 0)
    {
      if (v4 == 32773)
      {
        uint64_t v6 = *(void *)result;
        int v7 = (uint64_t *)(result + 160);
        if (*(_DWORD *)(result + 172))
        {
          uint64_t v8 = *v7;
          if (!__s) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v8 = 0;
          if (!__s) {
            goto LABEL_22;
          }
        }
        int v12 = strlen(__s);
        *(_DWORD *)(v3 + 168) = v12;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, uint64_t))v6)(v12 + 1, 1);
        *(void *)(v3 + 160) = v10;
        *(_DWORD *)(v3 + 172) = 1;
        uint64_t v11 = *(int *)(v3 + 168);
        goto LABEL_14;
      }
      if (v4 != 32774) {
        return 0;
      }
    }
    uint64_t v6 = *(void *)result;
    int v7 = (uint64_t *)(result + 144);
    if (*(_DWORD *)(result + 156))
    {
      uint64_t v8 = *v7;
      if (!__s)
      {
LABEL_22:
        uint64_t *v7 = 0;
        v7[1] = 0;
        if (!v8) {
          return 1;
        }
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (!__s) {
        goto LABEL_22;
      }
    }
    int v9 = strlen(__s);
    *(_DWORD *)(v3 + 152) = v9;
    uint64_t v10 = (void *)(*(uint64_t (**)(void, uint64_t))v6)(v9 + 1, 1);
    *(void *)(v3 + 144) = v10;
    *(_DWORD *)(v3 + 156) = 1;
    uint64_t v11 = *(int *)(v3 + 152);
LABEL_14:
    memcpy(v10, __s, v11 + 1);
    if (!v8) {
      return 1;
    }
LABEL_15:
    (*(void (**)(uint64_t))(v6 + 16))(v8);
    return 1;
  }
  return result;
}

uint64_t cmark_node_get_string_content(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t cmark_node_set_string_content(char *a1, char *a2)
{
  return 1;
}

uint64_t cmark_node_get_heading_level(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32777) {
      return *(unsigned int *)(result + 144);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_heading_level(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 - 7) >= 0xFFFFFFFA)
  {
    if (*(unsigned __int16 *)(a1 + 100) == 32777)
    {
      *(_DWORD *)(a1 + 144) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_get_list_type(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32771) {
      return *(unsigned int *)(result + 144);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_list_type(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 - 3) >= 0xFFFFFFFE)
  {
    if (*(unsigned __int16 *)(a1 + 100) == 32771)
    {
      *(_DWORD *)(a1 + 144) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_get_list_delim(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32771) {
      return *(unsigned int *)(result + 160);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_list_delim(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 - 3) >= 0xFFFFFFFE)
  {
    if (*(unsigned __int16 *)(a1 + 100) == 32771)
    {
      *(_DWORD *)(a1 + 160) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_get_list_start(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32771) {
      return *(unsigned int *)(result + 156);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_list_start(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)(a1 + 100) == 32771)
    {
      *(_DWORD *)(a1 + 156) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_get_list_tight(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32771) {
      return *(unsigned __int8 *)(result + 165);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_list_tight(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32771)
    {
      *(unsigned char *)(result + 165) = a2 == 1;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_get_item_index(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32772) {
      return *(unsigned int *)(result + 156);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_item_index(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)(a1 + 100) == 32772)
    {
      *(_DWORD *)(a1 + 156) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned char *cmark_node_get_fence_info(uint64_t a1)
{
  if (!a1 || *(unsigned __int16 *)(a1 + 100) != 32773) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 156)) {
    return *(unsigned char **)(a1 + 144);
  }
  int v4 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 152) + 1, 1);
  char v2 = v4;
  size_t v5 = *(unsigned int *)(a1 + 152);
  if ((int)v5 >= 1)
  {
    memcpy(v4, *(const void **)(a1 + 144), v5);
    LODWORD(v5) = *(_DWORD *)(a1 + 152);
  }
  v2[(int)v5] = 0;
  *(void *)(a1 + 144) = v2;
  *(_DWORD *)(a1 + 156) = 1;
  return v2;
}

uint64_t cmark_node_set_fence_info(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned __int16 *)(result + 100) == 32773)
    {
      uint64_t v4 = *(void *)result;
      size_t v5 = (uint64_t *)(result + 144);
      if (*(_DWORD *)(result + 156))
      {
        uint64_t v6 = *v5;
        if (__s) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (__s)
        {
LABEL_5:
          int v7 = strlen(__s);
          *(_DWORD *)(v2 + 152) = v7;
          uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t))v4)(v7 + 1, 1);
          *(void *)(v2 + 144) = v8;
          *(_DWORD *)(v2 + 156) = 1;
          memcpy(v8, __s, *(int *)(v2 + 152) + 1);
          if (!v6) {
            return 1;
          }
LABEL_6:
          (*(void (**)(uint64_t))(v4 + 16))(v6);
          return 1;
        }
      }
      uint64_t *v5 = 0;
      *(void *)(result + 152) = 0;
      if (!v6) {
        return 1;
      }
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

uint64_t cmark_node_get_fenced(uint64_t result, _DWORD *a2, _DWORD *a3, unsigned char *a4)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 100) == 32773)
    {
      *a2 = *(unsigned __int8 *)(result + 176);
      *a3 = *(unsigned __int8 *)(result + 177);
      *a4 = *(unsigned char *)(result + 178);
      return *(char *)(result + 179);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_node_set_fenced(uint64_t a1, char a2, char a3, char a4, char a5)
{
  if (!a1 || *(unsigned __int16 *)(a1 + 100) != 32773) {
    return 0;
  }
  *(unsigned char *)(a1 + 179) = a2;
  *(unsigned char *)(a1 + 176) = a3;
  *(unsigned char *)(a1 + 177) = a4;
  uint64_t v5 = 1;
  *(unsigned char *)(a1 + 178) = a5;
  return v5;
}

unsigned char *cmark_node_get_url(uint64_t a1)
{
  if (!a1 || (unsigned __int16)(*(_WORD *)(a1 + 100) + 16375) > 1u) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 156)) {
    return *(unsigned char **)(a1 + 144);
  }
  uint64_t v4 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 152) + 1, 1);
  uint64_t v2 = v4;
  size_t v5 = *(unsigned int *)(a1 + 152);
  if ((int)v5 >= 1)
  {
    memcpy(v4, *(const void **)(a1 + 144), v5);
    LODWORD(v5) = *(_DWORD *)(a1 + 152);
  }
  v2[(int)v5] = 0;
  *(void *)(a1 + 144) = v2;
  *(_DWORD *)(a1 + 156) = 1;
  return v2;
}

uint64_t cmark_node_set_url(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((unsigned __int16)(*(_WORD *)(result + 100) + 16375) <= 1u)
    {
      uint64_t v4 = *(void *)result;
      size_t v5 = (uint64_t *)(result + 144);
      if (*(_DWORD *)(result + 156))
      {
        uint64_t v6 = *v5;
        if (__s) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (__s)
        {
LABEL_5:
          int v7 = strlen(__s);
          *(_DWORD *)(v2 + 152) = v7;
          uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t))v4)(v7 + 1, 1);
          *(void *)(v2 + 144) = v8;
          *(_DWORD *)(v2 + 156) = 1;
          memcpy(v8, __s, *(int *)(v2 + 152) + 1);
          if (!v6) {
            return 1;
          }
LABEL_6:
          (*(void (**)(uint64_t))(v4 + 16))(v6);
          return 1;
        }
      }
      uint64_t *v5 = 0;
      *(void *)(result + 152) = 0;
      if (!v6) {
        return 1;
      }
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

unsigned char *cmark_node_get_title(uint64_t a1)
{
  if (!a1 || (unsigned __int16)(*(_WORD *)(a1 + 100) + 16375) > 1u) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 172)) {
    return *(unsigned char **)(a1 + 160);
  }
  uint64_t v4 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 168) + 1, 1);
  uint64_t v2 = v4;
  size_t v5 = *(unsigned int *)(a1 + 168);
  if ((int)v5 >= 1)
  {
    memcpy(v4, *(const void **)(a1 + 160), v5);
    LODWORD(v5) = *(_DWORD *)(a1 + 168);
  }
  v2[(int)v5] = 0;
  *(void *)(a1 + 160) = v2;
  *(_DWORD *)(a1 + 172) = 1;
  return v2;
}

uint64_t cmark_node_set_title(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((unsigned __int16)(*(_WORD *)(result + 100) + 16375) <= 1u)
    {
      uint64_t v4 = *(void *)result;
      size_t v5 = (uint64_t *)(result + 160);
      if (*(_DWORD *)(result + 172))
      {
        uint64_t v6 = *v5;
        if (__s) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (__s)
        {
LABEL_5:
          int v7 = strlen(__s);
          *(_DWORD *)(v2 + 168) = v7;
          uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t))v4)(v7 + 1, 1);
          *(void *)(v2 + 160) = v8;
          *(_DWORD *)(v2 + 172) = 1;
          memcpy(v8, __s, *(int *)(v2 + 168) + 1);
          if (!v6) {
            return 1;
          }
LABEL_6:
          (*(void (**)(uint64_t))(v4 + 16))(v6);
          return 1;
        }
      }
      uint64_t *v5 = 0;
      *(void *)(result + 168) = 0;
      if (!v6) {
        return 1;
      }
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

unsigned char *cmark_node_get_attributes(uint64_t a1)
{
  if (!a1 || *(unsigned __int16 *)(a1 + 100) != 49164) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 156)) {
    return *(unsigned char **)(a1 + 144);
  }
  uint64_t v4 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 152) + 1, 1);
  uint64_t v2 = v4;
  size_t v5 = *(unsigned int *)(a1 + 152);
  if ((int)v5 >= 1)
  {
    memcpy(v4, *(const void **)(a1 + 144), v5);
    LODWORD(v5) = *(_DWORD *)(a1 + 152);
  }
  v2[(int)v5] = 0;
  *(void *)(a1 + 144) = v2;
  *(_DWORD *)(a1 + 156) = 1;
  return v2;
}

uint64_t cmark_node_set_attributes(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned __int16 *)(result + 100) == 49164)
    {
      uint64_t v4 = *(void *)result;
      size_t v5 = (uint64_t *)(result + 144);
      if (*(_DWORD *)(result + 156))
      {
        uint64_t v6 = *v5;
        if (__s) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (__s)
        {
LABEL_5:
          int v7 = strlen(__s);
          *(_DWORD *)(v2 + 152) = v7;
          uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t))v4)(v7 + 1, 1);
          *(void *)(v2 + 144) = v8;
          *(_DWORD *)(v2 + 156) = 1;
          memcpy(v8, __s, *(int *)(v2 + 152) + 1);
          if (!v6) {
            return 1;
          }
LABEL_6:
          (*(void (**)(uint64_t))(v4 + 16))(v6);
          return 1;
        }
      }
      uint64_t *v5 = 0;
      *(void *)(result + 152) = 0;
      if (!v6) {
        return 1;
      }
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

unsigned char *cmark_node_get_on_enter(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(unsigned __int16 *)(a1 + 100);
  if (v2 != 49158 && v2 != 32775) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 156)) {
    return *(unsigned char **)(a1 + 144);
  }
  size_t v5 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 152) + 1, 1);
  uint64_t v4 = v5;
  size_t v6 = *(unsigned int *)(a1 + 152);
  if ((int)v6 >= 1)
  {
    memcpy(v5, *(const void **)(a1 + 144), v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 152);
  }
  v4[(int)v6] = 0;
  *(void *)(a1 + 144) = v4;
  *(_DWORD *)(a1 + 156) = 1;
  return v4;
}

uint64_t cmark_node_set_on_enter(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int16 *)(result + 100);
    if (v3 != 49158 && v3 != 32775) {
      return 0;
    }
    uint64_t v6 = *(void *)result;
    int v7 = (uint64_t *)(result + 144);
    if (*(_DWORD *)(result + 156))
    {
      uint64_t v8 = *v7;
      if (__s) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (__s)
      {
LABEL_9:
        int v9 = strlen(__s);
        *(_DWORD *)(v2 + 152) = v9;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, uint64_t))v6)(v9 + 1, 1);
        *(void *)(v2 + 144) = v10;
        *(_DWORD *)(v2 + 156) = 1;
        memcpy(v10, __s, *(int *)(v2 + 152) + 1);
        if (!v8) {
          return 1;
        }
LABEL_10:
        (*(void (**)(uint64_t))(v6 + 16))(v8);
        return 1;
      }
    }
    uint64_t *v7 = 0;
    *(void *)(result + 152) = 0;
    if (!v8) {
      return 1;
    }
    goto LABEL_10;
  }
  return result;
}

unsigned char *cmark_node_get_on_exit(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(unsigned __int16 *)(a1 + 100);
  if (v2 != 49158 && v2 != 32775) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 172)) {
    return *(unsigned char **)(a1 + 160);
  }
  size_t v5 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a1 + 168) + 1, 1);
  uint64_t v4 = v5;
  size_t v6 = *(unsigned int *)(a1 + 168);
  if ((int)v6 >= 1)
  {
    memcpy(v5, *(const void **)(a1 + 160), v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 168);
  }
  v4[(int)v6] = 0;
  *(void *)(a1 + 160) = v4;
  *(_DWORD *)(a1 + 172) = 1;
  return v4;
}

uint64_t cmark_node_set_on_exit(uint64_t result, char *__s)
{
  if (result)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int16 *)(result + 100);
    if (v3 != 49158 && v3 != 32775) {
      return 0;
    }
    uint64_t v6 = *(void *)result;
    int v7 = (uint64_t *)(result + 160);
    if (*(_DWORD *)(result + 172))
    {
      uint64_t v8 = *v7;
      if (__s) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (__s)
      {
LABEL_9:
        int v9 = strlen(__s);
        *(_DWORD *)(v2 + 168) = v9;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, uint64_t))v6)(v9 + 1, 1);
        *(void *)(v2 + 160) = v10;
        *(_DWORD *)(v2 + 172) = 1;
        memcpy(v10, __s, *(int *)(v2 + 168) + 1);
        if (!v8) {
          return 1;
        }
LABEL_10:
        (*(void (**)(uint64_t))(v6 + 16))(v8);
        return 1;
      }
    }
    uint64_t *v7 = 0;
    *(void *)(result + 168) = 0;
    if (!v8) {
      return 1;
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t cmark_node_get_syntax_extension(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t cmark_node_set_syntax_extension(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 112) = a2;
    return 1;
  }
  return result;
}

uint64_t cmark_node_get_start_line(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 80);
  }
  return result;
}

uint64_t cmark_node_get_start_column(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 84);
  }
  return result;
}

uint64_t cmark_node_get_end_line(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 88);
  }
  return result;
}

uint64_t cmark_node_get_end_column(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 92);
  }
  return result;
}

void *cmark_node_unlink(void *a1)
{
  uint64_t result = S_node_unlink(a1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

uint64_t cmark_node_insert_before(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = *(void *)(a1 + 40);
      if (result)
      {
        uint64_t result = S_can_contain((void *)result, (uint64_t)a2);
        if (result)
        {
          S_node_unlink(a2);
          uint64_t v5 = *(void *)(a1 + 32);
          if (v5) {
            *(void *)(v5 + 24) = a2;
          }
          a2[3] = a1;
          a2[4] = v5;
          *(void *)(a1 + 32) = a2;
          uint64_t v6 = *(void *)(a1 + 40);
          a2[5] = v6;
          uint64_t result = 1;
          if (!v5)
          {
            if (v6) {
              *(void *)(v6 + 48) = a2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t cmark_node_insert_after(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = *(void *)(a1 + 40);
      if (result)
      {
        uint64_t result = S_can_contain((void *)result, (uint64_t)a2);
        if (result)
        {
          S_node_unlink(a2);
          uint64_t v5 = *(void *)(a1 + 24);
          if (v5) {
            *(void *)(v5 + 32) = a2;
          }
          a2[3] = v5;
          a2[4] = a1;
          *(void *)(a1 + 24) = a2;
          uint64_t v6 = *(void *)(a1 + 40);
          a2[5] = v6;
          uint64_t result = 1;
          if (!v5)
          {
            if (v6) {
              *(void *)(v6 + 56) = a2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t cmark_node_replace(void *a1, void *a2)
{
  uint64_t result = cmark_node_insert_before((uint64_t)a1, a2);
  if (result)
  {
    S_node_unlink(a1);
    a1[3] = 0;
    a1[4] = 0;
    uint64_t result = 1;
    a1[5] = 0;
  }
  return result;
}

BOOL cmark_node_prepend_child(void *a1, void *a2)
{
  BOOL result = S_can_contain(a1, (uint64_t)a2);
  if (result)
  {
    S_node_unlink(a2);
    uint64_t v5 = a1[6];
    a2[3] = v5;
    a2[4] = 0;
    a2[5] = a1;
    a1[6] = a2;
    if (v5) {
      uint64_t v6 = (void *)(v5 + 32);
    }
    else {
      uint64_t v6 = a1 + 7;
    }
    *uint64_t v6 = a2;
    return 1;
  }
  return result;
}

BOOL cmark_node_append_child(void *a1, void *a2)
{
  BOOL result = S_can_contain(a1, (uint64_t)a2);
  if (result)
  {
    S_node_unlink(a2);
    uint64_t v5 = a1[7];
    a2[3] = 0;
    a2[4] = v5;
    a2[5] = a1;
    a1[7] = a2;
    if (v5) {
      uint64_t v6 = (void *)(v5 + 24);
    }
    else {
      uint64_t v6 = a1 + 6;
    }
    *uint64_t v6 = a2;
    return 1;
  }
  return result;
}

uint64_t cmark_node_check(void *a1, FILE *a2)
{
  if (a1)
  {
    uint64_t v4 = 0;
    for (int i = a1; ; int i = (void *)*v7)
    {
      int v7 = i + 6;
      uint64_t v6 = i[6];
      if (v6)
      {
        if (*(void *)(v6 + 32))
        {
          S_print_error(a2, v6, "prev");
          uint64_t v6 = *v7;
          *(void *)(*v7 + 32) = 0;
          uint64_t v4 = (v4 + 1);
        }
        if (*(void **)(v6 + 40) != i)
        {
          S_print_error(a2, v6, "parent");
LABEL_18:
          *(void *)(*v7 + 40) = i;
          uint64_t v4 = (v4 + 1);
          continue;
        }
      }
      else
      {
        if (i == a1) {
          return v4;
        }
        while (1)
        {
          uint64_t v8 = i[3];
          if (v8) {
            break;
          }
          uint64_t v9 = i[5];
          if (*(void **)(v9 + 56) != i)
          {
            S_print_error(a2, v9, "last_child");
            uint64_t v9 = i[5];
            *(void *)(v9 + 56) = i;
            uint64_t v4 = (v4 + 1);
          }
          int i = (void *)v9;
          if ((void *)v9 == a1) {
            return v4;
          }
        }
        if (*(void **)(v8 + 32) != i)
        {
          S_print_error(a2, v8, "prev");
          uint64_t v8 = i[3];
          *(void *)(v8 + 32) = i;
          uint64_t v4 = (v4 + 1);
        }
        int v7 = i + 3;
        if (*(void *)(v8 + 40) != i[5])
        {
          S_print_error(a2, v8, "parent");
          int i = (void *)i[5];
          goto LABEL_18;
        }
      }
    }
  }
  return 0;
}

FILE *S_print_error(FILE *result, uint64_t a2, const char *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    type_string = cmark_node_get_type_string(a2);
    return (FILE *)fprintf(v5, "Invalid '%s' in node type %s at %d:%d\n", a3, type_string, *(_DWORD *)(a2 + 80), *(_DWORD *)(a2 + 84));
  }
  return result;
}

uint64_t initialize_safety()
{
  return pthread_mutex_init(&safety_lock, 0);
}

uint64_t cmark_clean_url(uint64_t a1, uint64_t a2)
{
  v9[0] = a1;
  v9[1] = &cmark_strbuf__initbuf;
  v9[2] = 0;
  if (*(_DWORD *)(a2 + 12)) {
    cmark_clean_url_cold_2();
  }
  if (!*(_DWORD *)(a2 + 8)) {
    return 0;
  }
  int v3 = *(unsigned __int8 **)a2;
  do
  {
    if (!cmark_isspace(*v3)) {
      break;
    }
    int v3 = (unsigned __int8 *)(*(void *)a2 + 1);
    *(void *)a2 = v3;
    int v4 = *(_DWORD *)(a2 + 8) - 1;
    *(_DWORD *)(a2 + 8) = v4;
  }
  while (v4);
  if (*(_DWORD *)(a2 + 12)) {
    S_process_line_cold_1();
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 1)
  {
    do
    {
      BOOL v6 = cmark_isspace(*(unsigned char *)(*(void *)a2 + (v5 - 1)));
      int v5 = *(_DWORD *)(a2 + 8);
      if (!v6) {
        break;
      }
      BOOL v7 = __OFSUB__(v5--, 1);
      *(_DWORD *)(a2 + 8) = v5;
    }
    while (!((v5 < 0) ^ v7 | (v5 == 0)));
  }
  if (!v5) {
    return 0;
  }
  houdini_unescape_html_f(v9, *(const void **)a2, v5);
  cmark_strbuf_unescape((uint64_t)v9);
  return cmark_strbuf_detach((uint64_t)v9);
}

uint64_t cmark_clean_title(uint64_t a1, unsigned __int8 **a2)
{
  v7[0] = a1;
  v7[1] = &cmark_strbuf__initbuf;
  v7[2] = 0;
  uint64_t v2 = *((int *)a2 + 2);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  int v4 = *v3;
  int v5 = v3[v2 - 1];
  if (v4 == 39 && v5 == 39 || v4 == 40 && v5 == 41 || v4 == 34 && v5 == 34)
  {
    ++v3;
    LODWORD(v2) = v2 - 2;
  }
  houdini_unescape_html_f(v7, v3, v2);
  cmark_strbuf_unescape((uint64_t)v7);
  return cmark_strbuf_detach((uint64_t)v7);
}

void *remove_delimiter(void *result, uint64_t *a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v2 = (uint64_t *)a2[1];
  if (!v2)
  {
    if ((uint64_t *)result[7] != a2) {
      remove_delimiter_cold_1();
    }
    uint64_t v3 = *a2;
    result[7] = *a2;
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t *v2 = *a2;
  uint64_t v3 = *a2;
  if (*a2) {
LABEL_4:
  }
    *(void *)(v3 + 8) = v2;
LABEL_5:
  int v4 = *(uint64_t (**)(uint64_t *))(*result + 16);

  return (void *)v4(a2);
}

uint64_t cmark_parse_reference_inline(uint64_t a1, long long *a2, uint64_t *a3)
{
  memset(&v31[224], 0, 136);
  memset(v31, 0, 357);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  unsigned int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v28 = a1;
  long long v29 = *a2;
  long long v30 = xmmword_21C3B4A40;
  *(_DWORD *)unsigned int v31 = 0;
  v31[357] = 1;
  int v4 = link_label((uint64_t)&v28, (int *)&v26, 0);
  uint64_t result = 0;
  if (v4 && v27)
  {
    if (SDWORD2(v30) >= SDWORD2(v29)) {
      return 0;
    }
    if (*(unsigned char *)(v29 + SDWORD2(v30)) != 58)
    {
      if (!*(unsigned char *)(v29 + SDWORD2(v30))) {
        cmark_parse_inlines_cold_1();
      }
      return 0;
    }
    ++DWORD2(v30);
    spnl((uint64_t)&v28);
    int v6 = manual_scan_link_url((uint64_t)&v29, SDWORD2(v30), (uint64_t)v25);
    if (v6 < 0) {
      return 0;
    }
    DWORD2(v30) += v6;
    int v7 = DWORD2(v30);
    spnl((uint64_t)&v28);
    if (DWORD2(v30) == v7
      || (unsigned int v8 = _scan_at((uint64_t (*)(uint64_t))_scan_link_title, (uint64_t *)&v29, SDWORD2(v30))) == 0)
    {
      DWORD2(v30) = v7;
      unsigned int v23 = (unsigned __int8 *)&unk_21C3B4D0E;
      uint64_t v24 = 0;
      char v9 = 1;
      int v10 = v7;
    }
    else
    {
      char v9 = 0;
      unsigned int v23 = (unsigned __int8 *)(v29 + SDWORD2(v30));
      uint64_t v24 = v8;
      int v10 = DWORD2(v30) + v8;
      DWORD2(v30) += v8;
    }
    if (v10 < SDWORD2(v29))
    {
      uint64_t v11 = (unsigned __int8 *)(v29 + v10);
      while (1)
      {
        int v13 = *v11++;
        int v12 = v13;
        if (v13 != 32 && v12 != 9) {
          break;
        }
        DWORD2(v30) = ++v10;
        if (DWORD2(v29) == v10) {
          goto LABEL_61;
        }
      }
      if (!v12) {
        cmark_parse_inlines_cold_1();
      }
    }
    if (v10 < SDWORD2(v29))
    {
      if (*(unsigned char *)(v29 + v10) == 13)
      {
        DWORD2(v30) = ++v10;
        char v15 = 1;
LABEL_27:
        if (v10 < SDWORD2(v29))
        {
          if (*(unsigned char *)(v29 + v10) == 10) {
            goto LABEL_60;
          }
          if (!*(unsigned char *)(v29 + v10)) {
            cmark_parse_inlines_cold_1();
          }
        }
        if (v10 >= SDWORD2(v29)) {
          char v16 = 1;
        }
        else {
          char v16 = v15;
        }
        if (v16) {
          goto LABEL_61;
        }
        if ((v9 & 1) == 0)
        {
          DWORD2(v30) = v7;
          if (v7 < SDWORD2(v29))
          {
            unsigned int v17 = (unsigned __int8 *)(v29 + v7);
            while (1)
            {
              int v19 = *v17++;
              int v18 = v19;
              if (v19 != 32 && v18 != 9) {
                break;
              }
              DWORD2(v30) = ++v7;
              if (DWORD2(v29) == v7) {
                goto LABEL_61;
              }
            }
            if (!v18) {
              cmark_parse_inlines_cold_1();
            }
          }
          if (v7 < SDWORD2(v29))
          {
            if (*(unsigned char *)(v29 + v7) == 13)
            {
              DWORD2(v30) = ++v7;
              char v21 = 1;
              goto LABEL_50;
            }
            if (!*(unsigned char *)(v29 + v7)) {
              cmark_parse_inlines_cold_1();
            }
          }
          char v21 = 0;
LABEL_50:
          if (v7 >= SDWORD2(v29)) {
            goto LABEL_53;
          }
          if (*(unsigned char *)(v29 + v7) != 10)
          {
            if (!*(unsigned char *)(v29 + v7)) {
              cmark_parse_inlines_cold_1();
            }
LABEL_53:
            if (v7 >= SDWORD2(v29)) {
              char v22 = 1;
            }
            else {
              char v22 = v21;
            }
            if ((v22 & 1) == 0) {
              return 0;
            }
LABEL_61:
            cmark_reference_create(a3, (uint64_t)&v26, (uint64_t)v25, &v23);
            return DWORD2(v30);
          }
          int v10 = v7;
LABEL_60:
          DWORD2(v30) = v10 + 1;
          goto LABEL_61;
        }
        return 0;
      }
      if (!*(unsigned char *)(v29 + v10)) {
        cmark_parse_inlines_cold_1();
      }
    }
    char v15 = 0;
    goto LABEL_27;
  }
  return result;
}

uint64_t link_label(uint64_t a1, int *a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = v6;
  if (a3)
  {
    if (v6 >= v7) {
      return 0;
    }
    if (*(unsigned char *)(*(void *)(a1 + 8) + v6) != 94)
    {
      if (!*(unsigned char *)(*(void *)(a1 + 8) + v6)) {
        cmark_parse_inlines_cold_1();
      }
      return 0;
    }
    int v8 = v6 + 1;
    *(_DWORD *)(a1 + 32) = v6 + 1;
  }
  if (v8 >= v7) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + v8) != 91)
  {
    if (!*(unsigned char *)(*(void *)(a1 + 8) + v8)) {
      cmark_parse_inlines_cold_1();
    }
    return 0;
  }
  int v10 = 0;
  *(_DWORD *)(a1 + 32) = v8 + 1;
  while (1)
  {
    int v11 = *(_DWORD *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 16);
    if (v11 >= v12)
    {
LABEL_30:
      uint64_t result = 0;
      goto LABEL_43;
    }
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)(a1 + 8);
    unsigned int v15 = *(unsigned __int8 *)(v14 + v11);
    int v16 = 1;
    if (v15 <= 0x5B)
    {
      if (v15 == 91) {
        goto LABEL_30;
      }
      if (!*(unsigned char *)(v14 + v11)) {
        cmark_parse_inlines_cold_1();
      }
      goto LABEL_26;
    }
    if (v15 != 92) {
      break;
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    if (v11 + 1 >= v12)
    {
      unsigned __int8 v17 = 0;
    }
    else
    {
      unsigned __int8 v17 = *(unsigned char *)(v14 + v11 + 1);
      if (!*(unsigned char *)(v14 + v13 + 1)) {
        cmark_parse_inlines_cold_1();
      }
    }
    if (!cmark_ispunct(v17))
    {
      ++v10;
      goto LABEL_27;
    }
    int v11 = *(_DWORD *)(a1 + 32);
    int v16 = 2;
LABEL_26:
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v10 += v16;
LABEL_27:
    if (v10 > 1000) {
      goto LABEL_30;
    }
  }
  if (v15 != 93) {
    goto LABEL_26;
  }
  if (a3) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  int v19 = v6 + v18;
  uint64_t v21 = (v11 - v19);
  BOOL v20 = v11 == v19;
  char v22 = (unsigned __int8 *)(v14 + v19);
  *(void *)a2 = v22;
  *((void *)a2 + 1) = v21;
  if (!v20)
  {
    do
    {
      if (!cmark_isspace(*v22)) {
        break;
      }
      char v22 = (unsigned __int8 *)(*(void *)a2 + 1);
      *(void *)a2 = v22;
      int v23 = a2[2] - 1;
      a2[2] = v23;
    }
    while (v23);
    if (a2[3]) {
      S_process_line_cold_1();
    }
    int v24 = a2[2];
    if (v24 >= 1)
    {
      do
      {
        if (!cmark_isspace(*(unsigned char *)(*(void *)a2 + (v24 - 1)))) {
          break;
        }
        int v25 = a2[2];
        BOOL v26 = __OFSUB__(v25, 1);
        int v24 = v25 - 1;
        a2[2] = v24;
      }
      while (!((v24 < 0) ^ v26 | (v24 == 0)));
    }
  }
  int v6 = *(_DWORD *)(a1 + 32) + 1;
  uint64_t result = 1;
LABEL_43:
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t spnl(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  int v2 = *(_DWORD *)(result + 32);
  if (v2 < v1)
  {
    uint64_t v3 = (unsigned __int8 *)(*(void *)(result + 8) + v2);
    while (1)
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 != 32 && v4 != 9) {
        break;
      }
      *(_DWORD *)(result + 32) = ++v2;
      if (v1 == v2) {
        return result;
      }
    }
    if (!v4) {
      cmark_parse_inlines_cold_1();
    }
  }
  if (v2 >= v1) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(*(void *)(result + 8) + v2) != 13)
  {
    if (!*(unsigned char *)(*(void *)(result + 8) + v2)) {
      cmark_parse_inlines_cold_1();
    }
LABEL_14:
    int v7 = 0;
    goto LABEL_16;
  }
  *(_DWORD *)(result + 32) = ++v2;
  int v7 = 1;
LABEL_16:
  if (v2 >= v1) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(*(void *)(result + 8) + v2) != 10)
  {
    if (!*(unsigned char *)(*(void *)(result + 8) + v2)) {
      cmark_parse_inlines_cold_1();
    }
LABEL_19:
    if (((v2 < v1) & ~v7) != 0) {
      return result;
    }
    goto LABEL_22;
  }
  *(_DWORD *)(result + 32) = ++v2;
LABEL_22:
  if (v2 < v1)
  {
    int v8 = (unsigned __int8 *)(*(void *)(result + 8) + v2);
    while (1)
    {
      int v10 = *v8++;
      int v9 = v10;
      if (v10 != 32 && v9 != 9) {
        break;
      }
      *(_DWORD *)(result + 32) = ++v2;
      if (v1 == v2) {
        return result;
      }
    }
    if (!v9) {
      cmark_parse_inlines_cold_1();
    }
  }
  return result;
}

uint64_t manual_scan_link_url(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = a2;
  if (v6 <= a2) {
    goto LABEL_30;
  }
  int v8 = (unsigned char *)(*(void *)a1 + a2);
  if (*v8 != 60)
  {
    uint64_t v12 = 0;
    int v7 = a2;
    while (1)
    {
      int v13 = *(unsigned __int8 *)(*(void *)a1 + v7);
      if (v13 != 92) {
        goto LABEL_20;
      }
      uint64_t v14 = v7 + 1;
      if ((int)v14 >= v6) {
        break;
      }
      if (!cmark_ispunct(*(unsigned char *)(*(void *)a1 + v14)))
      {
        int v13 = *(unsigned __int8 *)(*(void *)a1 + v7);
LABEL_20:
        if (v13 == 41)
        {
          if (!v12) {
            goto LABEL_30;
          }
          --v12;
          goto LABEL_28;
        }
        if (v13 == 40)
        {
          if ((unint64_t)++v12 > 0x20) {
            return 0xFFFFFFFFLL;
          }
LABEL_28:
          ++v7;
          goto LABEL_29;
        }
LABEL_24:
        if (cmark_isspace(v13))
        {
          if (v7 == a2) {
            return 0xFFFFFFFFLL;
          }
LABEL_30:
          if (v7 < *(_DWORD *)(a1 + 8))
          {
            unsigned int v15 = (unsigned char *)(*(void *)a1 + a2);
            int v16 = v7 - a2;
            uint64_t result = (v7 - a2);
            goto LABEL_37;
          }
          return 0xFFFFFFFFLL;
        }
        goto LABEL_28;
      }
      v7 += 2;
LABEL_29:
      int v6 = *(_DWORD *)(a1 + 8);
      if (v7 >= v6) {
        goto LABEL_30;
      }
    }
    LOBYTE(v13) = 92;
    goto LABEL_24;
  }
  for (int i = a2 + 1; i < v6; i += v11)
  {
    unsigned int v10 = *(unsigned __int8 *)(*(void *)a1 + i);
    if (v10 <= 0x5B)
    {
      if (v10 == 10 || v10 == 60) {
        return 0xFFFFFFFFLL;
      }
      if (v10 == 62)
      {
        ++i;
        break;
      }
    }
    else if (v10 == 92)
    {
      int v11 = 2;
      continue;
    }
    int v11 = 1;
  }
  if (i >= v6) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v15 = v8 + 1;
  uint64_t result = (i - a2);
  int v16 = result - 2;
LABEL_37:
  *(void *)a3 = v15;
  *(_DWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 12) = 0;
  return result;
}

uint64_t cmark_parse_reference_attributes_inline(uint64_t a1, long long *a2, uint64_t *a3)
{
  memset(&v22[224], 0, 136);
  memset(v22, 0, 357);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v19 = a1;
  long long v20 = *a2;
  long long v21 = xmmword_21C3B4A40;
  *(_DWORD *)char v22 = 0;
  v22[357] = 1;
  uint64_t v4 = 0;
  if (link_label((uint64_t)&v19, (int *)&v17, 1) && v18)
  {
    if (SDWORD2(v21) >= SDWORD2(v20)) {
      return 0;
    }
    if (*(unsigned char *)(v20 + SDWORD2(v21)) != 58)
    {
      if (!*(unsigned char *)(v20 + SDWORD2(v21))) {
        cmark_parse_inlines_cold_1();
      }
      return 0;
    }
    ++DWORD2(v21);
    spnl((uint64_t)&v19);
    if (SDWORD2(v20) <= SDWORD2(v21)) {
      return 0;
    }
    uint64_t v5 = 0;
    uint64_t v6 = v20;
    uint64_t v7 = (uint64_t)SDWORD2(v21) << 32;
    while (1)
    {
      int v8 = *(unsigned __int8 *)(v20 + SDWORD2(v21) + v5);
      if (v8 == 10 || v8 == 13) {
        break;
      }
      if (!*(unsigned char *)(v20 + SDWORD2(v21) + v5)) {
        cmark_parse_inlines_cold_1();
      }
      ++v5;
      v7 += 0x100000000;
      if (!(DWORD2(v21) - DWORD2(v20) + v5))
      {
        if (DWORD2(v20) == DWORD2(v21)) {
          return 0;
        }
        uint64_t v4 = (DWORD2(v21) + v5);
        uint64_t v6 = v20;
        uint64_t v15 = v20 + SDWORD2(v21);
        uint64_t v16 = (DWORD2(v20) - DWORD2(v21));
        goto LABEL_27;
      }
    }
    if (!v5) {
      return 0;
    }
    uint64_t v15 = v20 + SDWORD2(v21);
    uint64_t v16 = v5;
    uint64_t v4 = v7 >> 32;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v20 + v4);
      if (v10 != 32 && v10 != 9) {
        break;
      }
      if (DWORD2(v20) == ++v4)
      {
        uint64_t v4 = DWORD2(v20);
        goto LABEL_27;
      }
    }
    if (!*(unsigned char *)(v20 + v4)) {
      cmark_parse_inlines_cold_1();
    }
LABEL_27:
    if ((int)v4 < SDWORD2(v20))
    {
      if (*(unsigned char *)(v6 + (int)v4) == 13)
      {
        uint64_t v4 = (v4 + 1);
        int v12 = 1;
LABEL_32:
        if ((int)v4 < SDWORD2(v20))
        {
          int v13 = *(unsigned __int8 *)(v6 + (int)v4);
          if (v13 == 10)
          {
            uint64_t v4 = (v4 + 1);
            goto LABEL_39;
          }
          if (!v13) {
            cmark_parse_inlines_cold_1();
          }
        }
        if ((((int)v4 < SDWORD2(v20)) & ~v12) != 0) {
          return 0;
        }
LABEL_39:
        cmark_reference_create_attributes(a3, (uint64_t)&v17, (uint64_t)&v15);
        return v4;
      }
      if (!*(unsigned char *)(v6 + (int)v4)) {
        cmark_parse_inlines_cold_1();
      }
    }
    int v12 = 0;
    goto LABEL_32;
  }
  return v4;
}

uint64_t cmark_inline_parser_peek_char(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 32);
  if ((int)v1 >= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(v2 + v1);
  if (!*(unsigned char *)(v2 + v1)) {
    cmark_parse_inlines_cold_1();
  }
  return result;
}

uint64_t cmark_inline_parser_peek_at(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + a2);
}

BOOL cmark_inline_parser_is_eof(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 16);
}

unsigned char *cmark_inline_parser_take_while (uint64_t a1, unsigned int (*a2)(void))
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 >= *(_DWORD *)(a1 + 16))
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = *(_DWORD *)(a1 + 32);
    do
    {
      if (!*(unsigned char *)(*(void *)(a1 + 8) + v6)) {
        cmark_parse_inlines_cold_1();
      }
      if (!a2()) {
        break;
      }
      int v6 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v6;
      ++v5;
    }
    while (v6 < *(_DWORD *)(a1 + 16));
  }
  uint64_t v7 = (const char *)(*(void *)(a1 + 8) + v3);
  size_t v8 = v5;
  size_t v9 = strlen(v7);
  if (v9 < v5) {
    size_t v8 = v9;
  }
  int v10 = malloc_type_malloc(v8 + 1, 0x45CADEA2uLL);
  int v11 = v10;
  if (v10)
  {
    v10[v8] = 0;
    memcpy(v10, v7, v8);
  }
  return v11;
}

uint64_t cmark_inline_parser_push_delimiter(uint64_t a1, char a2, int a3, int a4, uint64_t a5)
{
  BOOL v8 = a3 != 0;
  BOOL v9 = a4 != 0;
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 48);
  *(unsigned char *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = v8;
  *(_DWORD *)(result + 40) = v9;
  *(void *)(result + 16) = a5;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a5 + 152);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)uint64_t result = v11;
  *(void *)(result + 8) = 0;
  if (v11) {
    *(void *)(v11 + 8) = result;
  }
  *(void *)(a1 + 56) = result;
  return result;
}

uint64_t cmark_inline_parser_scan_delimiters(uint64_t a1, int a2, int a3, BOOL *a4, BOOL *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v30 = 0;
  uint64_t v14 = *(int *)(a1 + 32);
  if (!v14) {
    goto LABEL_6;
  }
  int v15 = 0;
  uint64_t v16 = *(void *)(a1 + 8);
  do
  {
    uint64_t v17 = v14 - 1;
    ++v15;
    if (v14 < 2) {
      break;
    }
    int v18 = *(unsigned char *)(v16 + v14-- - 1) & 0xC0;
  }
  while (v18 == 128);
  if (cmark_utf8proc_iterate((unsigned __int8 *)(v16 + v17), v15, (unsigned int *)&v30) == -1) {
LABEL_6:
  }
    LODWORD(v30) = 10;
  uint64_t v19 = 0;
  uint64_t v20 = *(int *)(a1 + 16);
  uint64_t v21 = *(int *)(a1 + 32);
  for (uint64_t i = v21 << 32; ; i += 0x100000000)
  {
    if (v21 + v19 >= v20)
    {
      int v23 = 0;
    }
    else
    {
      int v23 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v21 + v19);
      if (!*(unsigned char *)(*(void *)(a1 + 8) + v21 + v19)) {
        cmark_parse_inlines_cold_1();
      }
    }
    if (v23 != a3 || (int)v19 >= a2) {
      break;
    }
    *(_DWORD *)(a1 + 32) = v21 + 1 + v19++;
  }
  if (cmark_utf8proc_iterate((unsigned __int8 *)(*(void *)(a1 + 8) + (i >> 32)), (int)v20 - (int)v21 - (int)v19, (unsigned int *)&v30 + 1) == -1)HIDWORD(v30) = 10; {
  *a6 = cmark_utf8proc_is_punctuation(v30);
  }
  *a7 = cmark_utf8proc_is_punctuation(SHIDWORD(v30));
  int is_space = cmark_utf8proc_is_space(v30);
  int v25 = cmark_utf8proc_is_space(HIDWORD(v30));
  if (v19)
  {
    int v26 = v25;
    if (cmark_utf8proc_is_space(HIDWORD(v30)))
    {
      BOOL v27 = 0;
    }
    else
    {
      BOOL v27 = 1;
      if (*a7 && !is_space) {
        BOOL v27 = *a6 != 0;
      }
    }
    *a4 = v27;
    if (cmark_utf8proc_is_space(v30))
    {
      BOOL v28 = 0;
    }
    else
    {
      BOOL v28 = 1;
      if (*a6 && !v26) {
        BOOL v28 = *a7 != 0;
      }
    }
  }
  else
  {
    BOOL v28 = 0;
    *a4 = 0;
  }
  *a5 = v28;
  return v19;
}

uint64_t cmark_inline_parser_advance_offset(uint64_t result)
{
  return result;
}

uint64_t cmark_inline_parser_set_offset(uint64_t result, int a2)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t cmark_node_unput(uint64_t result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *(void *)(result + 56);
    if (v2)
    {
      do
      {
        if (*(unsigned __int16 *)(v2 + 100) != 49153) {
          break;
        }
        int v3 = *(_DWORD *)(v2 + 152);
        int v5 = v3 - a2;
        BOOL v4 = v3 < a2;
        a2 -= v3;
        int v6 = v4 ? 0 : v5;
        *(_DWORD *)(v2 + 152) = v6;
        uint64_t v2 = *(void *)(v2 + 32);
        BOOL v7 = !v4 || a2 < 1;
      }
      while (!v7 && v2 != 0);
    }
  }
  return result;
}

uint64_t cmark_inline_parser_get_last_delimiter(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t cmark_inline_parser_get_line(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t push_bracket(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 32);
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    *(unsigned char *)(v7 + 25) = 1;
    *(_DWORD *)(result + 26) = *(_DWORD *)(v7 + 26);
    uint64_t v7 = *(void *)(a1 + 64);
  }
  *(_WORD *)(result + 24) = 1;
  *(void *)uint64_t result = v7;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(result + 20) = a2;
  *(unsigned char *)(result + a2 + 26) = 1;
  *(void *)(a1 + 64) = result;
  if (a2 != 1) {
    *(unsigned char *)(a1 + 397) = 0;
  }
  return result;
}

uint64_t adjust_subj_node_newlines(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if ((a5 & 2) != 0 && a3)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = *(_DWORD *)(result + 32);
    BOOL v8 = (unsigned __int8 *)(*(void *)(result + 8) + v7 - (a4 + a3));
    do
    {
      int v9 = *v8++;
      if (v9 == 10)
      {
        ++v6;
        int v5 = 0;
      }
      else
      {
        ++v5;
      }
      --a3;
    }
    while (a3);
    if (v6)
    {
      *(_DWORD *)(result + 28) += v6;
      *(_DWORD *)(a2 + 88) += v6;
      *(_DWORD *)(a2 + 92) = v5;
      *(_DWORD *)(result + 40) = a4 - v7 + v5;
    }
  }
  return result;
}

uint64_t make_autolink(uint64_t a1, int a2, int a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  int v12 = *(uint64_t (***)(uint64_t, uint64_t))a1;
  uint64_t v13 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 184);
  cmark_strbuf_init((uint64_t)v12, (uint64_t *)v13, 0);
  *(_WORD *)(v13 + 100) = -16375;
  unsigned int v33 = *(uint64_t (***)(uint64_t, uint64_t))a1;
  unsigned int v34 = &cmark_strbuf__initbuf;
  uint64_t v35 = 0;
  if (HIDWORD(a5)) {
    cmark_clean_url_cold_2();
  }
  int v14 = a5;
  if (!a5) {
    goto LABEL_6;
  }
  unint64_t v15 = a5 + 0xFFFFFFFF;
  while (cmark_isspace(*a4))
  {
    ++a4;
    --v15;
    if (!--v14) {
      goto LABEL_6;
    }
  }
  if (v14 >= 1)
  {
    int v30 = v15;
    while (cmark_isspace(a4[v30]))
    {
      --v15;
      --v30;
      BOOL v31 = __OFSUB__(v14--, 1);
      if ((v14 < 0) ^ v31 | (v14 == 0))
      {
        int v14 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        goto LABEL_7;
      }
    }
    if (!a6) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (!v14)
  {
LABEL_6:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_7;
  }
  if (a6) {
LABEL_22:
  }
    cmark_strbuf_puts(&v33, "mailto:");
LABEL_23:
  houdini_unescape_html_f(&v33, a4, v14);
  uint64_t v32 = HIDWORD(v35);
  uint64_t v17 = cmark_strbuf_detach((uint64_t)&v33);
  uint64_t v16 = v32 | 0x100000000;
LABEL_7:
  *(void *)(v13 + 144) = v17;
  *(void *)(v13 + 152) = v16;
  *(void *)(v13 + 160) = &unk_21C3B4D0E;
  *(void *)(v13 + 168) = 0;
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v13 + 88) = v18;
  *(_DWORD *)(v13 + 80) = v18;
  int v19 = a2 + 1;
  int v21 = *(_DWORD *)(a1 + 36);
  int v20 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 84) = v21 + v20 + v19;
  *(_DWORD *)(v13 + 92) = a3 + v20 + v21 + 1;
  unsigned int v33 = *(uint64_t (***)(uint64_t, uint64_t))a1;
  unsigned int v34 = &cmark_strbuf__initbuf;
  uint64_t v35 = 0;
  if (houdini_unescape_html(&v33, (uint64_t)a4, v14))
  {
    uint64_t v22 = HIDWORD(v35);
    a4 = (unsigned __int8 *)cmark_strbuf_detach((uint64_t)&v33);
    unint64_t v23 = v22 | 0x100000000;
  }
  else
  {
    unint64_t v23 = a5 & 0xFFFFFFFF00000000 | v14;
  }
  uint64_t v24 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(1, 184);
  cmark_strbuf_init(*(void *)a1, (uint64_t *)v24, 0);
  *(void *)(v24 + 152) = v23;
  int v25 = *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 36) + 1;
  *(_WORD *)(v24 + 100) = -16383;
  *(void *)(v24 + 144) = a4;
  int v26 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v24 + 80) = v26;
  *(_DWORD *)(v24 + 84) = v25 + v19;
  *(_DWORD *)(v24 + 88) = v26;
  *(_DWORD *)(v24 + 92) = a3 + v25 - 1;
  uint64_t v27 = *(void *)(v13 + 56);
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + ++*(_DWORD *)(result + 32) = v27;
  *(void *)(v24 + 40) = v13;
  *(void *)(v13 + 56) = v24;
  if (v27) {
    BOOL v28 = (uint64_t *)(v27 + 24);
  }
  else {
    BOOL v28 = (uint64_t *)(v13 + 48);
  }
  *BOOL v28 = v24;
  return v13;
}

unsigned char *chunk_clone(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2)
{
  size_t v3 = *(int *)(a2 + 8);
  BOOL v4 = (unsigned char *)(*a1)(v3 + 1, 1);
  int v5 = v4;
  if (v3)
  {
    memcpy(v4, *(const void **)a2, v3);
    size_t v6 = v3;
  }
  else
  {
    size_t v6 = 0;
  }
  v5[v6] = 0;
  return v5;
}

uint64_t cmark_render_xml(uint64_t *a1, char a2)
{
  return cmark_render_xml_with_mem((uint64_t)a1, a2, *a1);
}

uint64_t cmark_render_xml_with_mem(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v33[0] = a3;
  v33[1] = &cmark_strbuf__initbuf;
  v33[2] = 0;
  uint64_t v4 = cmark_iter_new(a1);
  cmark_strbuf_puts(v33, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  cmark_strbuf_puts(v33, "<!DOCTYPE document SYSTEM \"CommonMark.dtd\">\n");
  int v5 = cmark_iter_next(v4);
  if (v5 != 1)
  {
    int v6 = v5;
    int v7 = 0;
    while (1)
    {
      uint64_t node = cmark_iter_get_node(v4);
      uint64_t v9 = node;
      if (v6 == 2) {
        break;
      }
      if (*(void *)(node + 48))
      {
        unsigned int v19 = v7 - 3;
        if (v7 >= 3)
        {
          if (v19 >= 0x27) {
            unsigned int v19 = 39;
          }
          unsigned int v20 = v19 + 1;
          do
          {
            cmark_strbuf_putc((uint64_t)v33, 32);
            --v20;
          }
          while (v20);
        }
        v7 -= 2;
        cmark_strbuf_puts(v33, "</");
        type_string = (char *)cmark_node_get_type_string(v9);
        goto LABEL_54;
      }
LABEL_56:
      int v6 = cmark_iter_next(v4);
      if (v6 == 1) {
        goto LABEL_57;
      }
    }
    unsigned int v10 = v7 - 1;
    if (v7 >= 1)
    {
      if (v10 >= 0x27) {
        unsigned int v10 = 39;
      }
      unsigned int v11 = v10 + 1;
      do
      {
        cmark_strbuf_putc((uint64_t)v33, 32);
        --v11;
      }
      while (v11);
    }
    cmark_strbuf_putc((uint64_t)v33, 60);
    int v12 = (char *)cmark_node_get_type_string(v9);
    cmark_strbuf_puts(v33, v12);
    if ((a2 & 2) != 0)
    {
      int v13 = *(_DWORD *)(v9 + 80);
      if (v13)
      {
        snprintf(__str, 0x64uLL, " sourcepos=\"%d:%d-%d:%d\"", v13, *(_DWORD *)(v9 + 84), *(_DWORD *)(v9 + 88), *(_DWORD *)(v9 + 92));
        cmark_strbuf_puts(v33, __str);
      }
    }
    uint64_t v14 = *(void *)(v9 + 112);
    if (v14)
    {
      unint64_t v15 = *(uint64_t (**)(void))(v14 + 120);
      if (v15)
      {
        uint64_t v16 = (char *)v15();
        if (v16) {
          cmark_strbuf_puts(v33, v16);
        }
      }
    }
    char v17 = 0;
    switch(*(_WORD *)(v9 + 100))
    {
      case 0x8001:
        int v18 = " xmlns=\"http://commonmark.org/xml/1.0\"";
        goto LABEL_48;
      case 0x8002:
      case 0x8004:
      case 0x8008:
        goto LABEL_50;
      case 0x8003:
        list_int type = cmark_node_get_list_type(v9);
        if (list_type == 1)
        {
          long long v29 = " type=\"bullet\"";
        }
        else
        {
          if (list_type != 2) {
            goto LABEL_46;
          }
          cmark_strbuf_puts(v33, " type=\"ordered\"");
          int list_start = cmark_node_get_list_start(v9);
          snprintf(__str, 0x64uLL, " start=\"%d\"", list_start);
          cmark_strbuf_puts(v33, __str);
          int list_delim = cmark_node_get_list_delim(v9);
          if (list_delim == 2)
          {
            long long v29 = " delim=\"paren\"";
          }
          else
          {
            if (list_delim != 1) {
              goto LABEL_46;
            }
            long long v29 = " delim=\"period\"";
          }
        }
        cmark_strbuf_puts(v33, v29);
LABEL_46:
        cmark_node_get_list_tight(v9);
        snprintf(__str, 0x64uLL, " tight=\"%s\"");
LABEL_47:
        int v18 = __str;
LABEL_48:
        cmark_strbuf_puts(v33, v18);
        goto LABEL_49;
      case 0x8005:
        if (*(int *)(v9 + 152) >= 1)
        {
          cmark_strbuf_puts(v33, " info=\"");
          houdini_escape_html0(v33, *(void *)(v9 + 144), *(_DWORD *)(v9 + 152), 0);
          cmark_strbuf_putc((uint64_t)v33, 34);
        }
        cmark_strbuf_puts(v33, " xml:space=\"preserve\">");
        uint64_t v24 = *(void *)(v9 + 160);
        int v25 = *(_DWORD *)(v9 + 168);
        goto LABEL_41;
      case 0x8006:
        goto LABEL_29;
      case 0x8007:
        goto LABEL_31;
      case 0x8009:
        snprintf(__str, 0x64uLL, " level=\"%d\"");
        goto LABEL_47;
      default:
        unsigned int v22 = *(unsigned __int16 *)(v9 + 100) - 49153;
        if (v22 > 9) {
          goto LABEL_50;
        }
        if (((1 << v22) & 0x19) != 0)
        {
LABEL_29:
          cmark_strbuf_puts(v33, " xml:space=\"preserve\">");
          uint64_t v24 = *(void *)(v9 + 144);
          int v25 = *(_DWORD *)(v9 + 152);
LABEL_41:
          houdini_escape_html0(v33, v24, v25, 0);
          cmark_strbuf_puts(v33, "</");
          int v30 = (char *)cmark_node_get_type_string(v9);
          cmark_strbuf_puts(v33, v30);
          char v17 = 1;
        }
        else
        {
          if (((1 << v22) & 0x300) != 0)
          {
            cmark_strbuf_puts(v33, " destination=\"");
            houdini_escape_html0(v33, *(void *)(v9 + 144), *(_DWORD *)(v9 + 152), 0);
            cmark_strbuf_putc((uint64_t)v33, 34);
            unint64_t v23 = " title=\"";
          }
          else
          {
            if (*(unsigned __int16 *)(v9 + 100) != 49158) {
              goto LABEL_50;
            }
LABEL_31:
            cmark_strbuf_puts(v33, " on_enter=\"");
            houdini_escape_html0(v33, *(void *)(v9 + 144), *(_DWORD *)(v9 + 152), 0);
            cmark_strbuf_putc((uint64_t)v33, 34);
            unint64_t v23 = " on_exit=\"";
          }
          cmark_strbuf_puts(v33, v23);
          houdini_escape_html0(v33, *(void *)(v9 + 160), *(_DWORD *)(v9 + 168), 0);
          cmark_strbuf_putc((uint64_t)v33, 34);
LABEL_49:
          char v17 = 0;
        }
LABEL_50:
        if (*(void *)(v9 + 48))
        {
          v7 += 2;
          goto LABEL_55;
        }
        if (v17) {
          goto LABEL_55;
        }
        type_string = " /";
        break;
    }
LABEL_54:
    cmark_strbuf_puts(v33, type_string);
LABEL_55:
    cmark_strbuf_puts(v33, ">\n");
    goto LABEL_56;
  }
LABEL_57:
  uint64_t v31 = cmark_strbuf_detach((uint64_t)v33);
  cmark_iter_free(v4);
  return v31;
}

uint64_t houdini_escape_href(_DWORD *a1, uint64_t a2, int a3)
{
  v19[0] = 37;
  if (a3 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = 0;
      int v9 = v6;
      uint64_t v10 = v6;
      if (a3 <= v6 + 1) {
        int v11 = v6 + 1;
      }
      else {
        int v11 = a3;
      }
      uint64_t v12 = a2 + v6;
      while (1)
      {
        uint64_t v13 = *(unsigned __int8 *)(v12 + v8);
        int v14 = HREF_SAFE[v13];
        if (!HREF_SAFE[v13]) {
          break;
        }
        ++v8;
        if (v10 + v8 >= v7) {
          goto LABEL_11;
        }
      }
      int v11 = v9 + v8;
LABEL_11:
      if (v11 > v9) {
        cmark_strbuf_put(a1, (const void *)(a2 + v10), v11 - v10);
      }
      if (v14) {
        return 1;
      }
      unint64_t v15 = *(unsigned __int8 *)(a2 + v11);
      if (v15 == 39)
      {
        uint64_t v16 = a1;
        char v17 = "&#x27;";
      }
      else
      {
        if (v15 != 38)
        {
          v19[1] = houdini_escape_href_hex_chars[v15 >> 4];
          v19[2] = houdini_escape_href_hex_chars[v15 & 0xF];
          cmark_strbuf_put(a1, v19, 3);
          goto LABEL_20;
        }
        uint64_t v16 = a1;
        char v17 = "&amp;";
      }
      cmark_strbuf_puts(v16, v17);
LABEL_20:
      int v6 = v11 + 1;
    }
    while (v11 + 1 < a3);
  }
  return 1;
}

uint64_t houdini_unescape_ent(_DWORD *a1, char *__s1, int a3)
{
  int v5 = a1;
  if (a3 < 3 || *__s1 != 35)
  {
    if (a3 >= 32) {
      uint64_t v12 = 32;
    }
    else {
      uint64_t v12 = a3;
    }
    if ((int)v12 >= 3)
    {
      size_t v13 = 2;
      while (1)
      {
        int v14 = __s1[v13];
        if (v14 == 32) {
          break;
        }
        if (v14 == 59)
        {
          int v15 = 0;
          int v16 = 2124;
          int v17 = 1062;
          while (1)
          {
            uint64_t v18 = v17;
            unsigned int v19 = (&cmark_entities)[2 * v17];
            int v20 = strncmp(__s1, v19, v13);
            int v21 = v20;
            if (!v20 && !v19[v13]) {
              break;
            }
            if ((int)v18 <= v15 || v20 > 0)
            {
              uint64_t result = 0;
              if (v16 <= (int)v18 || v21 < 1) {
                return result;
              }
              int v25 = v16 - v18;
              if (v16 >= (int)v18) {
                int v26 = v16 - v18;
              }
              else {
                int v26 = v25 + 1;
              }
              int v27 = v18 + (v26 >> 1);
              if ((v25 + 1) >= 3) {
                int v17 = v27;
              }
              else {
                int v17 = v27 + 1;
              }
              int v15 = v18 + 1;
            }
            else
            {
              int v22 = v18 - v15;
              if ((int)v18 >= v15) {
                int v23 = v18 - v15;
              }
              else {
                int v23 = v22 + 1;
              }
              int v17 = (__PAIR64__((int)v18 - (v23 >> 1), v22 + 1) - 3) >> 32;
              int v16 = v18 - 1;
            }
          }
          cmark_strbuf_puts(v5, (char *)&(&cmark_entities)[2 * v18 + 1]);
          return (v13 + 1);
        }
        if (v12 == ++v13) {
          return 0;
        }
      }
    }
    return 0;
  }
  int v6 = __s1[1];
  if ((v6 - 48) > 9)
  {
    if ((v6 | 0x20) != 0x78) {
      return 0;
    }
    signed int v7 = 0;
    uint64_t v28 = 2;
    while (1)
    {
      unsigned __int8 v29 = __s1[v28];
      if (!memchr("0123456789ABCDEFabcdef", v29, 0x17uLL)) {
        break;
      }
      if ((int)(16 * v7 + (v29 | 0x20u) % 0x27 - 9) >= 1114112) {
        signed int v7 = 1114112;
      }
      else {
        signed int v7 = 16 * v7 + (v29 | 0x20u) % 0x27 - 9;
      }
      if (a3 == ++v28)
      {
        LODWORD(v8) = a3;
        goto LABEL_49;
      }
    }
    LODWORD(v8) = v28;
LABEL_49:
    int v11 = v8 - 2;
    int v5 = a1;
  }
  else
  {
    signed int v7 = 0;
    uint64_t v8 = 1;
    while (1)
    {
      int v9 = __s1[v8];
      if ((v9 - 48) > 9) {
        break;
      }
      int v10 = v9 + 10 * v7 - 48;
      if (v10 >= 1114112) {
        signed int v7 = 1114112;
      }
      else {
        signed int v7 = v10;
      }
      if (a3 == ++v8)
      {
        LODWORD(v8) = a3;
        break;
      }
    }
    int v11 = v8 - 1;
  }
  uint64_t result = 0;
  if ((int)v8 >= a3 || (v11 - 1) > 7) {
    return result;
  }
  if (__s1[v8] != 59) {
    return 0;
  }
  if (!v7 || v7 >= 1114112 || (v7 & 0xFFFFF800) == 0xD800) {
    signed int v7 = 65533;
  }
  cmark_utf8proc_encode_char(v7, v5);
  return (v8 + 1);
}

uint64_t houdini_unescape_html(_DWORD *a1, uint64_t a2, int a3)
{
  if (a3 < 1) {
    return 1;
  }
  int v6 = 0;
  uint64_t v7 = a3;
  while (1)
  {
    uint64_t v8 = 0;
    int v9 = v6;
    uint64_t v10 = v6;
    if (a3 <= v6 + 1) {
      int v11 = v6 + 1;
    }
    else {
      int v11 = a3;
    }
    uint64_t v12 = a2 + v6;
    while (1)
    {
      int v13 = *(unsigned __int8 *)(v12 + v8);
      if (v13 == 38) {
        break;
      }
      ++v8;
      if (v10 + v8 >= v7) {
        goto LABEL_11;
      }
    }
    int v11 = v9 + v8;
LABEL_11:
    if (v11 <= v9) {
      goto LABEL_14;
    }
    if (!v9) {
      break;
    }
LABEL_13:
    cmark_strbuf_put(a1, (const void *)(a2 + v10), v11 - v10);
LABEL_14:
    if (v13 == 38)
    {
      int v14 = v11 + 1;
      int v15 = houdini_unescape_ent(a1, (char *)(a2 + v14), a3 - v14);
      if (!v15) {
        cmark_strbuf_putc((uint64_t)a1, 38);
      }
      int v6 = v15 + v14;
      if (v15 + v14 < a3) {
        continue;
      }
    }
    return 1;
  }
  if (v13 == 38)
  {
    cmark_strbuf_grow((uint64_t)a1, a3);
    goto LABEL_13;
  }
  return 0;
}

_DWORD *houdini_unescape_html_f(_DWORD *a1, const void *a2, int a3)
{
  uint64_t result = (_DWORD *)houdini_unescape_html(a1, (uint64_t)a2, a3);
  if (!result)
  {
    return cmark_strbuf_put(a1, a2, a3);
  }
  return result;
}

uint64_t cmark_render_plaintext(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  if ((a2 & 4) != 0) {
    a3 = 0;
  }
  return cmark_render(v5, (uint64_t)a1, a2, a3, (uint64_t)outc_1, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_2);
}

uint64_t cmark_render_plaintext_with_mem(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if ((a2 & 4) != 0) {
    a3 = 0;
  }
  return cmark_render(a4, a1, a2, a3, (uint64_t)outc_1, (unsigned int (*)(uint64_t *, uint64_t, uint64_t, uint64_t))S_render_node_2);
}

_DWORD *outc_1(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return cmark_render_code_point(a1, a4);
}

uint64_t S_render_node_2(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = (a4 & 4) == 0;
  if (v7 < 1) {
    BOOL v8 = 0;
  }
  BOOL v9 = (a4 & 0x10) == 0 && v8;
  if (a3 == 2)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    if (v10 && *(unsigned __int16 *)(v10 + 100) == 32772)
    {
      LOBYTE(v10) = *(unsigned char *)(*(void *)(v10 + 40) + 165);
LABEL_15:
      *(unsigned char *)(a1 + 43) = v10;
    }
  }
  else if (*(unsigned __int16 *)(a2 + 100) == 32771)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    if (v10) {
      LOBYTE(v10) = *(unsigned __int16 *)(v10 + 100) == 32772 && *(unsigned char *)(*(void *)(v10 + 40) + 165) != 0;
    }
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a2 + 112);
  if (v11 && (uint64_t v12 = *(void (**)(void))(v11 + 104)) != 0)
  {
    v12();
  }
  else
  {
    switch(*(_WORD *)(a2 + 100))
    {
      case 0xC001:
        int v13 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        literal = cmark_node_get_literal(a2);
        uint64_t v15 = a1;
        uint64_t v16 = a2;
        BOOL v17 = v9;
        uint64_t v18 = 1;
        goto LABEL_32;
      case 0xC002:
        if ((a4 & 4) != 0 || !(v7 | a4 & 0x10) && !*(unsigned char *)(a1 + 42)) {
          goto LABEL_60;
        }
        (*(void (**)(uint64_t, uint64_t, const char *, BOOL, void))(a1 + 72))(a1, a2, " ", v9, 0);
        break;
      case 0xC003:
LABEL_60:
        (*(void (**)(uint64_t))(a1 + 56))(a1);
        break;
      case 0xC004:
        int v13 = *(void (**)(uint64_t, uint64_t, unsigned char *, BOOL, uint64_t))(a1 + 72);
        literal = cmark_node_get_literal(a2);
        uint64_t v15 = a1;
        uint64_t v16 = a2;
        BOOL v17 = v9;
        uint64_t v18 = 0;
LABEL_32:
        v13(v15, v16, literal, v17, v18);
        break;
      case 0xC005:
      case 0xC006:
      case 0xC007:
      case 0xC008:
      case 0xC009:
      case 0xC00A:
        return 1;
      case 0xC00B:
        if (a3 == 2)
        {
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "[^", 0, 0);
          int v21 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
          int v22 = cmark_chunk_to_cstr(*(uint64_t (***)(uint64_t, uint64_t))a1, (int *)(a2 + 144));
          v21(a1, a2, v22, 0, 0);
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "]", 0, 0);
        }
        break;
      case 0xC00C:
        int v23 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
        if (*(_DWORD *)(a2 + 156))
        {
          uint64_t v24 = *(unsigned char **)(a2 + 144);
        }
        else
        {
          unsigned int v34 = (unsigned char *)(**(uint64_t (***)(uint64_t, uint64_t))a1)(*(int *)(a2 + 152) + 1, 1);
          uint64_t v24 = v34;
          size_t v35 = *(unsigned int *)(a2 + 152);
          if ((int)v35 >= 1)
          {
            memcpy(v34, *(const void **)(a2 + 144), v35);
            LODWORD(v35) = *(_DWORD *)(a2 + 152);
          }
          v24[(int)v35] = 0;
          *(void *)(a2 + 144) = v24;
          *(_DWORD *)(a2 + 156) = 1;
        }
        v23(a1, a2, v24, 0, 0);
        break;
      default:
        switch(*(_WORD *)(a2 + 100))
        {
          case 0x8001:
          case 0x8002:
          case 0x8006:
          case 0x8007:
            return 1;
          case 0x8003:
            if (a3 == 2) {
              return 1;
            }
            uint64_t v19 = *(void *)(a2 + 24);
            if (!v19) {
              return 1;
            }
            int v20 = *(unsigned __int16 *)(v19 + 100);
            if (v20 != 32773 && v20 != 32771) {
              return 1;
            }
            goto LABEL_60;
          case 0x8004:
            if (cmark_node_get_list_type(*(void *)(a2 + 40)) == 1)
            {
              int v25 = 4;
            }
            else
            {
              int item_index = cmark_node_get_item_index(a2);
              int list_delim = cmark_node_get_list_delim(*(void *)(a2 + 40));
              int v30 = ".";
              if (list_delim == 2) {
                int v30 = ")";
              }
              uint64_t v31 = " ";
              if (item_index < 10) {
                uint64_t v31 = "  ";
              }
              snprintf(__str, 0x14uLL, "%d%s%s", item_index, v30, v31);
              int v25 = strlen(__str);
            }
            if (a3 != 2)
            {
              cmark_strbuf_truncate(*(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 16) + 20) - v25);
              goto LABEL_60;
            }
            if (cmark_node_get_list_type(*(void *)(a2 + 40)) == 1) {
              uint64_t v32 = "  - ";
            }
            else {
              uint64_t v32 = __str;
            }
            (*(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72))(a1, a2, v32, 0, 0);
            *(unsigned char *)(a1 + 41) = 1;
            while (v25)
            {
              --v25;
              cmark_strbuf_putc(*(void *)(a1 + 16), 32);
            }
            break;
          case 0x8005:
            if (*(void *)(a2 + 32) || (uint64_t v36 = *(void *)(a2 + 40)) == 0 || *(unsigned __int16 *)(v36 + 100) != 32772) {
              (*(void (**)(uint64_t))(a1 + 64))(a1);
            }
            int v26 = *(void (**)(uint64_t, uint64_t, unsigned char *, void, void))(a1 + 72);
            int v27 = cmark_node_get_literal(a2);
            v26(a1, a2, v27, 0, 0);
            goto LABEL_57;
          case 0x8008:
            if (a3 == 2) {
              return 1;
            }
            goto LABEL_57;
          case 0x8009:
            if (a3 == 2)
            {
              *(_WORD *)(a1 + 41) = 257;
            }
            else
            {
              *(unsigned char *)(a1 + 42) = 0;
LABEL_57:
              (*(void (**)(uint64_t))(a1 + 64))(a1);
            }
            return 1;
          case 0x800A:
            goto LABEL_57;
          case 0x800B:
            if (a3 == 2)
            {
              ++*(_DWORD *)(a1 + 80);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "[^", 0, 0);
              snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(a1 + 80));
              (*(void (**)(uint64_t, uint64_t, char *, void, void))(a1 + 72))(a1, a2, __str, 0, 0);
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a1 + 72))(a1, a2, "]: ", 0, 0);
              cmark_strbuf_puts(*(_DWORD **)(a1 + 16), "    ");
            }
            else
            {
              cmark_strbuf_truncate(*(void *)(a1 + 16), *(_DWORD *)(*(void *)(a1 + 16) + 20) - 4);
            }
            return 1;
          default:
            S_render_node_cold_1_2();
        }
        return result;
    }
  }
  return 1;
}

unsigned char *cmark_chunk_to_cstr(uint64_t (**a1)(uint64_t, uint64_t), int *a2)
{
  if (a2[3]) {
    return *(unsigned char **)a2;
  }
  uint64_t v4 = (unsigned char *)(*a1)(a2[2] + 1, 1);
  size_t v3 = v4;
  size_t v5 = a2[2];
  if ((int)v5 >= 1)
  {
    memcpy(v4, *(const void **)a2, v5);
    LODWORD(v5) = a2[2];
  }
  v3[(int)v5] = 0;
  *(void *)a2 = v3;
  a2[3] = 1;
  return v3;
}

BOOL matches_0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (cmark_node_get_type(a5) != CMARK_NODE_TABLE) {
    return 0;
  }
  cmark_arena_push();
  uint64_t v8 = a3 + (int)cmark_parser_get_first_nonspace((uint64_t)a2);
  int first_nonspace = cmark_parser_get_first_nonspace((uint64_t)a2);
  uint64_t v10 = row_from_string(a2, v8, a4 - first_nonspace);
  if (v10)
  {
    uint64_t v11 = v10;
    BOOL v12 = *v10 != 0;
    uint64_t v13 = *a2;
    free_row_cells(v13, v10);
    (*(void (**)(unsigned __int16 *))(v13 + 16))(v11);
  }
  else
  {
    BOOL v12 = 0;
  }
  cmark_arena_pop();
  return v12;
}

const char *get_type_string_1(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 100);
  if (CMARK_NODE_TABLE == v2) {
    return "table";
  }
  if (CMARK_NODE_TABLE_ROW == v2)
  {
    if (**(unsigned char **)(a2 + 144)) {
      return "table_header";
    }
    else {
      return "table_row";
    }
  }
  else if (CMARK_NODE_TABLE_CELL == v2)
  {
    return "table_cell";
  }
  else
  {
    return "<unknown>";
  }
}

BOOL can_contain_1(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 100);
  if (CMARK_NODE_TABLE == v3)
  {
    return CMARK_NODE_TABLE_ROW == a3;
  }
  else if (CMARK_NODE_TABLE_ROW == v3)
  {
    return CMARK_NODE_TABLE_CELL == a3;
  }
  else
  {
    if (CMARK_NODE_TABLE_CELL != v3) {
      return 0;
    }
    if (a3 - 49153) < 0xC && ((0xBC9u >> (a3 - 1))) {
      return 1;
    }
    return a3 == 49157 || CMARK_NODE_STRIKETHROUGH == a3 || a3 == 49163;
  }
}

BOOL contains_inlines(uint64_t a1, uint64_t a2)
{
  return CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(a2 + 100);
}

void commonmark_render_1(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v6 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE == v6)
  {
    int v7 = *(void (**)(uint64_t))(a2 + 64);
LABEL_3:
    v7(a2);
    return;
  }
  if (CMARK_NODE_TABLE_ROW == v6)
  {
    if (a4 != 2) {
      return;
    }
    (*(void (**)(uint64_t))(a2 + 56))(a2);
    BOOL v9 = "|";
    goto LABEL_18;
  }
  if (CMARK_NODE_TABLE_CELL != v6) {
    commonmark_render_cold_1();
  }
  uint64_t v10 = *(int **)(a3 + 144);
  if (v10)
  {
    int v11 = *v10;
    if (a4 == 2)
    {
      if (!v11) {
        return;
      }
      int v13 = v10[1];
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, " ", 0, 0);
      if (v13) {
        return;
      }
      int v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72);
      if ((a5 & 0x200000) != 0) {
        BOOL v9 = "\"";
      }
      else {
        BOOL v9 = "^";
      }
      goto LABEL_19;
    }
    if (!v11) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a4 != 2)
  {
LABEL_23:
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, " ", 0, 0);
LABEL_24:
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "|", 0, 0);
    uint64_t v15 = *(void *)(a3 + 40);
    if (!**(unsigned char **)(v15 + 144) || *(void *)(a3 + 24)) {
      return;
    }
    uint64_t v16 = *(void *)(v15 + 40);
    if (v16 && CMARK_NODE_TABLE == *(unsigned __int16 *)(v16 + 100)) {
      BOOL v17 = *(unsigned __int8 **)(*(void *)(v16 + 144) + 8);
    }
    else {
      BOOL v17 = 0;
    }
    uint64_t v18 = **(unsigned __int16 **)(v16 + 144);
    (*(void (**)(uint64_t))(a2 + 56))(a2);
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "|", 0, 0);
    if (!v18)
    {
LABEL_43:
      int v7 = *(void (**)(uint64_t))(a2 + 56);
      goto LABEL_3;
    }
    while (1)
    {
      int v20 = *v17++;
      int v19 = v20;
      if (v20 > 107)
      {
        if (v19 == 114)
        {
          int v21 = " --: |";
          goto LABEL_41;
        }
        if (v19 == 108)
        {
          int v21 = " :-- |";
          goto LABEL_41;
        }
      }
      else
      {
        if (!v19)
        {
          int v21 = " --- |";
          goto LABEL_41;
        }
        if (v19 == 99)
        {
          int v21 = " :-: |";
LABEL_41:
          (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, v21, 0, 0);
        }
      }
      if (!--v18) {
        goto LABEL_43;
      }
    }
  }
  BOOL v9 = " ";
LABEL_18:
  int v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72);
LABEL_19:

  v14(a2, a3, v9, 0, 0);
}

void latex_render_0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE == v6)
  {
    if (a4 == 2)
    {
      int v7 = *(unsigned __int8 **)(*(void *)(a3 + 144) + 8);
      (*(void (**)(uint64_t))(a2 + 56))(a2);
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "\\begin{table}", 0, 0);
      (*(void (**)(uint64_t))(a2 + 56))(a2);
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "\\begin{tabular}{", 0, 0);
      uint64_t v8 = *(unsigned __int16 **)(a3 + 144);
      uint64_t v9 = *v8;
      if (*v8)
      {
        do
        {
          int v11 = *v7++;
          int v10 = v11;
          BOOL v12 = "l";
          if (v11 > 107)
          {
            if (v10 == 108) {
              goto LABEL_11;
            }
            if (v10 == 114)
            {
              BOOL v12 = "r";
              goto LABEL_11;
            }
          }
          else
          {
            if (!v10) {
              goto LABEL_11;
            }
            if (v10 == 99)
            {
              BOOL v12 = "c";
LABEL_11:
              (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, v12, 0, 0);
            }
          }
          --v9;
        }
        while (v9);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "}", 0, 0);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "\\end{tabular}", 0, 0);
      (*(void (**)(uint64_t))(a2 + 56))(a2);
      (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "\\end{table}", 0, 0);
    }
LABEL_18:
    int v13 = *(void (**)(uint64_t))(a2 + 56);
    v13(a2);
    return;
  }
  if (CMARK_NODE_TABLE_ROW == v6)
  {
    if (a4 == 2) {
      return;
    }
    goto LABEL_18;
  }
  if (CMARK_NODE_TABLE_CELL != v6) {
    latex_render_cold_1();
  }
  if (a4 != 2)
  {
    int v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72);
    if (*(void *)(a3 + 24)) {
      uint64_t v15 = " & ";
    }
    else {
      uint64_t v15 = " \\\\"";
    }
    v14(a2, a3, v15, 0, 0);
  }
}

char *xml_attr_0(uint64_t a1, uint64_t a2)
{
  if (CMARK_NODE_TABLE_CELL != *(unsigned __int16 *)(a2 + 100)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2 && CMARK_NODE_TABLE_ROW == *(unsigned __int16 *)(v2 + 100) && **(unsigned char **)(v2 + 144))
  {
    uint64_t v3 = *(void *)(a2 + 144);
    if (v3)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v2 + 40) + 144) + 8) + *(int *)(v3 + 8));
      if (v4 == 114) {
        return " align=\"right\"";
      }
      if (v4 != 108)
      {
        if (v4 == 99) {
          return " align=\"center\"";
        }
        return 0;
      }
      return " align=\"left\"";
    }
    return 0;
  }
  int v6 = *(unsigned int **)(a2 + 144);
  if (!v6) {
    return 0;
  }
  unsigned int v7 = *v6;
  if (!*v6) {
    return " colspan_filler";
  }
  unsigned int v8 = v6[1];
  if (!v8) {
    return " rowspan_filler";
  }
  BOOL v9 = v8 != 1 && v7 > 1;
  int v10 = " colspan";
  if (v9) {
    int v10 = " colspan rowspan";
  }
  uint64_t result = v7 <= 1 ? " rowspan" : (char *)v10;
  if (v7 <= 1 && v8 == 1) {
    return 0;
  }
  return result;
}

void man_render_0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE != v6)
  {
    if (CMARK_NODE_TABLE_ROW != v6)
    {
      if (CMARK_NODE_TABLE_CELL != v6) {
        man_render_cold_1();
      }
      if (a4 != 2 && *(void *)(a3 + 24))
      {
        int v14 = *(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72);
        v14(a2, a3, "@", 0, 0);
      }
      return;
    }
    if (a4 == 2) {
      return;
    }
LABEL_19:
    int v13 = *(void (**)(uint64_t))(a2 + 56);
    v13(a2);
    return;
  }
  if (a4 != 2)
  {
    (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, ".TE", 0, 0);
    goto LABEL_19;
  }
  unsigned int v7 = *(unsigned __int8 **)(*(void *)(a3 + 144) + 8);
  (*(void (**)(uint64_t))(a2 + 56))(a2);
  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, ".TS", 0, 0);
  (*(void (**)(uint64_t))(a2 + 56))(a2);
  (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, "tab(@);", 0, 0);
  (*(void (**)(uint64_t))(a2 + 56))(a2);
  unsigned int v8 = *(_WORD **)(a3 + 144);
  uint64_t v9 = (unsigned __int16)*v8;
  if (*v8)
  {
    while (1)
    {
      int v11 = *v7++;
      int v10 = v11;
      if (v11 <= 107)
      {
        if (v10 && v10 != 99) {
          goto LABEL_13;
        }
        BOOL v12 = "c";
        goto LABEL_12;
      }
      if (v10 == 108) {
        break;
      }
      if (v10 == 114)
      {
        BOOL v12 = "r";
LABEL_12:
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, v12, 0, 0);
      }
LABEL_13:
      if (!--v9)
      {
        (*(void (**)(uint64_t, uint64_t, const char *, void, void))(a2 + 72))(a2, a3, ".", 0, 0);
        goto LABEL_19;
      }
    }
    BOOL v12 = "l";
    goto LABEL_12;
  }
}

void html_render_1(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int16 a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)a2;
  int v9 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE == v9)
  {
    if (a4 == 2)
    {
      uint64_t v10 = *(int *)(v8 + 20);
      if (v10 && *(unsigned char *)(v10 + *(void *)(v8 + 8) - 1) != 10) {
        cmark_strbuf_putc(*(void *)a2, 10);
      }
      cmark_strbuf_puts((_DWORD *)v8, "<table");
      if ((a5 & 2) != 0)
      {
        start_int line = cmark_node_get_start_line(a3);
        start_int column = cmark_node_get_start_column(a3);
        end_int line = cmark_node_get_end_line(a3);
        end_int column = cmark_node_get_end_column(a3);
        snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", start_line, start_column, end_line, end_column);
        cmark_strbuf_puts((_DWORD *)v8, __str);
      }
      cmark_strbuf_putc(v8, 62);
      char v15 = *(unsigned char *)(a2 + 32) & 0xFE;
LABEL_45:
      *(unsigned char *)(a2 + ++*(_DWORD *)(result + 32) = v15;
      return;
    }
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v18 = *(int *)(v8 + 20);
      if (v18 && *(unsigned char *)(v18 + *(void *)(v8 + 8) - 1) != 10) {
        cmark_strbuf_putc(*(void *)a2, 10);
      }
      cmark_strbuf_puts((_DWORD *)v8, "</tbody>");
      uint64_t v19 = *(int *)(v8 + 20);
      if (v19 && *(unsigned char *)(v19 + *(void *)(v8 + 8) - 1) != 10) {
        cmark_strbuf_putc(v8, 10);
      }
    }
    *(unsigned char *)(a2 + 32) &= ~1u;
    uint64_t v20 = *(int *)(v8 + 20);
    if (v20 && *(unsigned char *)(v20 + *(void *)(v8 + 8) - 1) != 10) {
      cmark_strbuf_putc(v8, 10);
    }
    cmark_strbuf_puts((_DWORD *)v8, "</table>");
    uint64_t v21 = *(int *)(v8 + 20);
    if (v21 && *(unsigned char *)(v21 + *(void *)(v8 + 8) - 1) != 10)
    {
      cmark_strbuf_putc(v8, 10);
    }
    return;
  }
  if (CMARK_NODE_TABLE_ROW != v9)
  {
    if (CMARK_NODE_TABLE_CELL != v9) {
      html_render_cold_1();
    }
    int v22 = *(unsigned int **)(a3 + 144);
    if (v22)
    {
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (!*v22) {
        return;
      }
    }
    else
    {
      unsigned int v24 = 1;
      unsigned int v23 = 1;
    }
    if (!v23) {
      return;
    }
    if (a4 != 2)
    {
      if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
        uint64_t v31 = "</th>";
      }
      else {
        uint64_t v31 = "</td>";
      }
      cmark_strbuf_puts((_DWORD *)v8, v31);
      return;
    }
    uint64_t v26 = *(int *)(v8 + 20);
    if (v26 && *(unsigned char *)(v26 + *(void *)(v8 + 8) - 1) != 10) {
      cmark_strbuf_putc(*(void *)a2, 10);
    }
    if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
      int v27 = "<th";
    }
    else {
      int v27 = "<td";
    }
    cmark_strbuf_puts((_DWORD *)v8, v27);
    if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(a3 + 100))
    {
      uint64_t v28 = *(void *)(a3 + 144);
      if (v28)
      {
        int v29 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(*(void *)(a3 + 40) + 40) + 144) + 8)
                                 + *(int *)(v28 + 8));
        switch(v29)
        {
          case 'r':
            int v30 = "right";
            goto LABEL_80;
          case 'l':
            int v30 = "left";
            goto LABEL_80;
          case 'c':
            int v30 = "center";
LABEL_80:
            html_table_add_align((_DWORD *)v8, v30, a5);
            break;
        }
      }
    }
    if (v24 >= 2)
    {
      snprintf(__str, 0x20uLL, "%d", v24);
      cmark_strbuf_puts((_DWORD *)v8, " colspan=\"");
      cmark_strbuf_puts((_DWORD *)v8, __str);
      cmark_strbuf_puts((_DWORD *)v8, "\"");
    }
    if (v23 < 2) {
      goto LABEL_70;
    }
    snprintf(__str, 0x20uLL, "%d", v23);
    cmark_strbuf_puts((_DWORD *)v8, " rowspan=\"");
    cmark_strbuf_puts((_DWORD *)v8, __str);
    unsigned int v33 = "\"";
LABEL_69:
    cmark_strbuf_puts((_DWORD *)v8, v33);
LABEL_70:
    if ((a5 & 2) != 0)
    {
      int v34 = cmark_node_get_start_line(a3);
      int v35 = cmark_node_get_start_column(a3);
      int v36 = cmark_node_get_end_line(a3);
      int v37 = cmark_node_get_end_column(a3);
      snprintf(__str, 0x64uLL, " data-sourcepos=\"%d:%d-%d:%d\"", v34, v35, v36, v37);
      cmark_strbuf_puts((_DWORD *)v8, __str);
    }
    cmark_strbuf_putc(v8, 62);
    return;
  }
  uint64_t v16 = *(int *)(v8 + 20);
  if (a4 == 2)
  {
    if (v16 && *(unsigned char *)(v16 + *(void *)(v8 + 8) - 1) != 10) {
      cmark_strbuf_putc(*(void *)a2, 10);
    }
    if (**(unsigned char **)(a3 + 144))
    {
      *(unsigned char *)(a2 + 32) |= 2u;
      cmark_strbuf_puts((_DWORD *)v8, "<thead>");
      uint64_t v17 = *(int *)(v8 + 20);
      if (v17 && *(unsigned char *)(v17 + *(void *)(v8 + 8) - 1) != 10) {
        cmark_strbuf_putc(v8, 10);
      }
    }
    else if ((*(unsigned char *)(a2 + 32) & 1) == 0)
    {
      cmark_strbuf_puts((_DWORD *)v8, "<tbody>");
      uint64_t v32 = *(int *)(v8 + 20);
      if (v32 && *(unsigned char *)(v32 + *(void *)(v8 + 8) - 1) != 10) {
        cmark_strbuf_putc(v8, 10);
      }
      *(unsigned char *)(a2 + 32) |= 1u;
    }
    unsigned int v33 = "<tr";
    goto LABEL_69;
  }
  if (v16 && *(unsigned char *)(v16 + *(void *)(v8 + 8) - 1) != 10) {
    cmark_strbuf_putc(*(void *)a2, 10);
  }
  cmark_strbuf_puts((_DWORD *)v8, "</tr>");
  if (**(unsigned char **)(a3 + 144))
  {
    uint64_t v25 = *(int *)(v8 + 20);
    if (v25 && *(unsigned char *)(v25 + *(void *)(v8 + 8) - 1) != 10) {
      cmark_strbuf_putc(v8, 10);
    }
    cmark_strbuf_puts((_DWORD *)v8, "</thead>");
    char v15 = *(unsigned char *)(a2 + 32) & 0xFD;
    goto LABEL_45;
  }
}

void opaque_alloc(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE == v3)
  {
    uint64_t v4 = 24;
  }
  else if (CMARK_NODE_TABLE_ROW == v3)
  {
    uint64_t v4 = 1;
  }
  else
  {
    if (CMARK_NODE_TABLE_CELL != v3) {
      return;
    }
    uint64_t v4 = 12;
  }
  *(void *)(a3 + 144) = (*a2)(1, v4);
}

void opaque_free(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a3 + 100);
  if (CMARK_NODE_TABLE == v3)
  {
    uint64_t v4 = *(void *)(a3 + 144);
    size_t v5 = (void (**)(uint64_t))(a2 + 16);
    (*(void (**)(void))(a2 + 16))(*(void *)(v4 + 8));
  }
  else
  {
    if (CMARK_NODE_TABLE_ROW != v3 && CMARK_NODE_TABLE_CELL != v3) {
      return;
    }
    uint64_t v4 = *(void *)(a3 + 144);
    size_t v5 = (void (**)(uint64_t))(a2 + 16);
  }
  int v6 = *v5;

  v6(v4);
}

BOOL escape(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 100);
  return CMARK_NODE_TABLE != v3 && CMARK_NODE_TABLE_ROW != v3 && CMARK_NODE_TABLE_CELL != v3 && a3 == 124;
}

uint64_t cmark_gfm_extensions_get_table_columns(uint64_t a1)
{
  if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a1 + 100)) {
    return **(unsigned __int16 **)(a1 + 144);
  }
  else {
    return 0;
  }
}

uint64_t cmark_gfm_extensions_get_table_alignments(uint64_t a1)
{
  if (CMARK_NODE_TABLE == *(unsigned __int16 *)(a1 + 100)) {
    return *(void *)(*(void *)(a1 + 144) + 8);
  }
  else {
    return 0;
  }
}

uint64_t cmark_gfm_extensions_set_table_columns(uint64_t result, __int16 a2)
{
  if (result)
  {
    if (CMARK_NODE_TABLE == *(unsigned __int16 *)(result + 100))
    {
      **(_WORD **)(result + 144) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_gfm_extensions_set_table_alignments(uint64_t a1, unsigned int a2, const void *a3)
{
  size_t v5 = a2;
  int v6 = (void *)(**(uint64_t (***)(uint64_t, void))a1)(1, a2);
  memcpy(v6, a3, v5);
  if (CMARK_NODE_TABLE != *(unsigned __int16 *)(a1 + 100)) {
    return 0;
  }
  *(void *)(*(void *)(a1 + 144) + 8) = v6;
  return 1;
}

uint64_t cmark_gfm_extensions_get_table_row_is_header(uint64_t result)
{
  if (result)
  {
    if (CMARK_NODE_TABLE_ROW == *(unsigned __int16 *)(result + 100)) {
      return **(unsigned __int8 **)(result + 144);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_gfm_extensions_set_table_row_is_header(uint64_t result, int a2)
{
  if (result)
  {
    if (CMARK_NODE_TABLE_ROW == *(unsigned __int16 *)(result + 100))
    {
      **(unsigned char **)(result + 144) = a2 != 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_gfm_extensions_get_table_cell_colspan(uint64_t a1)
{
  if (!a1 || CMARK_NODE_TABLE_CELL != *(unsigned __int16 *)(a1 + 100)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *(unsigned int **)(a1 + 144);
  if (v1) {
    return *v1;
  }
  else {
    return 1;
  }
}

uint64_t cmark_gfm_extensions_get_table_cell_rowspan(uint64_t a1)
{
  if (!a1 || CMARK_NODE_TABLE_CELL != *(unsigned __int16 *)(a1 + 100)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *(void *)(a1 + 144);
  if (v1) {
    return *(unsigned int *)(v1 + 4);
  }
  else {
    return 1;
  }
}

uint64_t cmark_gfm_extensions_set_table_cell_colspan(uint64_t result, int a2)
{
  if (result)
  {
    if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(result + 100) && (uint64_t v2 = *(_DWORD **)(result + 144)) != 0)
    {
      _DWORD *v2 = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cmark_gfm_extensions_set_table_cell_rowspan(uint64_t result, int a2)
{
  if (result)
  {
    if (CMARK_NODE_TABLE_CELL == *(unsigned __int16 *)(result + 100) && (uint64_t v2 = *(void *)(result + 144)) != 0)
    {
      *(_DWORD *)(v2 + 4) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *row_from_string(uint64_t *a1, uint64_t a2, int a3)
{
  size_t v5 = a1;
  int v6 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t))*a1)(1, 16);
  *int v6 = 0;
  *((void *)v6 + 1) = 0;
  int v7 = _ext_scan_at((uint64_t (*)(uint64_t))_scan_table_cell_end, a2, a3, 0);
  uint64_t v38 = v5;
  if (v7 >= a3)
  {
LABEL_43:
    int v33 = 0;
    goto LABEL_46;
  }
  while (1)
  {
    int v8 = _ext_scan_at((uint64_t (*)(uint64_t))_scan_table_cell, a2, a3, v7);
    int v9 = v8 + v7;
    int v10 = _ext_scan_at((uint64_t (*)(uint64_t))_scan_table_cell_end, a2, a3, v8 + v7);
    if (!(v8 | v10))
    {
LABEL_37:
      int v32 = _ext_scan_at((uint64_t (*)(uint64_t))_scan_table_row_end, a2, a3, v7);
      v7 += v32;
      if (!v32 || v7 == a3) {
        goto LABEL_43;
      }
      *((_DWORD *)v6 + 1) = v7;
      free_row_cells(*v5, v6);
      v7 += _ext_scan_at((uint64_t (*)(uint64_t))_scan_table_cell_end, a2, a3, v7);
      goto LABEL_40;
    }
    int v37 = v10;
    int v11 = unescape_pipes((uint64_t (**)(uint64_t, uint64_t))*v5, (const void *)(a2 + v7), v8);
    cmark_strbuf_trim((uint64_t)v11);
    uint64_t v12 = *v6;
    int v13 = v12 + 1;
    if (((v12 + 1) & v12) != 0)
    {
      uint64_t v14 = *((void *)v6 + 1);
    }
    else
    {
      if (v12 == 0xFFFF) {
        break;
      }
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(*v38 + 8))(*((void *)v6 + 1), 32 * (2 * v13 - 1));
      *((void *)v6 + 1) = v14;
    }
    *int v6 = v13;
    if (!v14) {
      break;
    }
    uint64_t v15 = v14 + 32 * v12;
    *(_DWORD *)(v15 + 8) = v7;
    uint64_t v16 = (_DWORD *)(v15 + 8);
    int v17 = v9 - 1;
    if (v8 <= 0) {
      int v17 = v7;
    }
    v16[1] = v17;
    int v36 = (uint64_t *)(v14 + 32 * v12);
    *int v36 = (uint64_t)v11;
    v16[2] = 0;
    int v18 = *((_DWORD *)v6 + 1);
    if (v7 > v18)
    {
      uint64_t v19 = (unsigned __int8 *)(a2 - 1 + v7);
      int v20 = 1;
      int v21 = v7;
      do
      {
        int v22 = *v19--;
        if (v22 == 124) {
          break;
        }
        *uint64_t v16 = --v21;
        v16[2] = v20++;
      }
      while (v18 != v21);
    }
    size_t v5 = v38;
    unsigned int v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))*v38)(1, 12);
    unsigned int v24 = v23;
    uint64_t v25 = v14 + 32 * v12;
    *(void *)(v25 + 24) = v23;
    uint64_t v26 = (_DWORD **)(v25 + 24);
    if ((*((unsigned char *)v38 + 122) & 0x10) == 0)
    {
      *unsigned int v23 = 0x100000001;
      int v27 = v9;
      goto LABEL_35;
    }
    if (!*v6) {
      goto LABEL_28;
    }
    if (cmark_strbuf_len(*v36))
    {
      unsigned int v24 = *v26;
LABEL_28:
      *unsigned int v24 = 1;
      goto LABEL_29;
    }
    unsigned int v24 = *v26;
    if (*v16 != v16[1]) {
      goto LABEL_28;
    }
    *unsigned int v24 = 0;
    uint64_t v28 = *v6;
    if (*v6)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v6 + 1);
      do
      {
        if (**(_DWORD **)(v30 + 24)) {
          uint64_t v29 = v30;
        }
        v30 += 32;
        --v28;
      }
      while (v28);
      int v27 = v9;
      if (v29) {
        ++**(_DWORD **)(v29 + 24);
      }
      goto LABEL_30;
    }
LABEL_29:
    int v27 = v9;
LABEL_30:
    v24[1] = 1;
    if ((*((unsigned char *)v38 + 122) & 0x20) != 0) {
      uint64_t v31 = "\"";
    }
    else {
      uint64_t v31 = "^";
    }
    if (!strcmp(*(const char **)(*v36 + 8), v31)) {
      v24[1] = 0;
    }
LABEL_35:
    if ((__int16)*v6 == -1) {
      goto LABEL_45;
    }
    int v7 = v27 + v37;
    if (!v37) {
      goto LABEL_37;
    }
LABEL_40:
    if (v7 >= a3) {
      goto LABEL_43;
    }
  }
  cmark_strbuf_free((uint64_t)v11);
  (*(void (**)(uint64_t *))(*v38 + 16))(v11);
LABEL_45:
  int v33 = 1;
LABEL_46:
  if (v7 != a3 || ((*v6 != 0) & ~v33) == 0)
  {
    uint64_t v34 = *v38;
    free_row_cells(*v38, v6);
    (*(void (**)(unsigned __int16 *))(v34 + 16))(v6);
    return 0;
  }
  return v6;
}

uint64_t *unescape_pipes(uint64_t (**a1)(uint64_t, uint64_t), const void *a2, int a3)
{
  int v6 = (uint64_t *)(*a1)(1, 24);
  cmark_strbuf_init((uint64_t)a1, v6, a3 + 1);
  cmark_strbuf_put(v6, a2, a3);
  cmark_strbuf_putc((uint64_t)v6, 0);
  if (a3 < 1)
  {
    int v11 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    do
    {
      uint64_t v9 = v6[1];
      int v10 = *(unsigned __int8 *)(v9 + v8);
      if (v10 == 92)
      {
        if (*(unsigned char *)(v9 + v8 + 1) == 124) {
          ++v8;
        }
        LOBYTE(v10) = *(unsigned char *)(v9 + v8);
      }
      int v11 = v7 + 1;
      *(unsigned char *)(v9 + v7) = v10;
      ++v8;
      ++v7;
    }
    while (v8 < a3);
  }
  cmark_strbuf_truncate((uint64_t)v6, v11);
  return v6;
}

uint64_t free_row_cells(uint64_t a1, unsigned __int16 *a2)
{
  for (unsigned __int16 i = *a2; *a2; unsigned __int16 i = *a2)
  {
    uint64_t v5 = *((void *)a2 + 1);
    unsigned __int16 v6 = i - 1;
    *a2 = v6;
    uint64_t v7 = (uint64_t *)(v5 + 32 * v6);
    cmark_strbuf_free(*v7);
    (*(void (**)(uint64_t))(a1 + 16))(*v7);
    if (v7[3]) {
      (*(void (**)(void))(a1 + 16))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(a1 + 16))(*((void *)a2 + 1));
  *((void *)a2 + 1) = 0;
  return result;
}

_DWORD *html_table_add_align(_DWORD *a1, char *a2, __int16 a3)
{
  if (a3 < 0) {
    uint64_t v5 = " style=\"text-align: ";
  }
  else {
    uint64_t v5 = " align=\"";
  }
  cmark_strbuf_puts(a1, v5);
  cmark_strbuf_puts(a1, a2);

  return cmark_strbuf_puts(a1, "\"");
}

uint64_t cmark_arena_push()
{
  pthread_once(&arena_once, (void (*)(void))initialize_arena);
  pthread_mutex_lock(&arena_lock);
  uint64_t v0 = A;
  if (A)
  {
    *(unsigned char *)(A + 16) = 1;
    A = (uint64_t)alloc_arena_chunk(0x2800uLL, v0);
  }

  return pthread_mutex_unlock(&arena_lock);
}

void *alloc_arena_chunk(size_t a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00400E795F94uLL);
  if (!v4 || (v5 = v4, *v4 = a1, unsigned __int16 v6 = malloc_type_calloc(1uLL, a1, 0xE98F317CuLL), (v5[3] = v6) == 0)) {
    abort();
  }
  v5[4] = a2;
  return v5;
}

uint64_t cmark_arena_pop()
{
  pthread_once(&arena_once, (void (*)(void))initialize_arena);
  pthread_mutex_lock(&arena_lock);
  uint64_t v0 = A;
  if (A)
  {
    while (!*(unsigned char *)(v0 + 16))
    {
      free(*(void **)(v0 + 24));
      uint64_t v1 = *(void *)(v0 + 32);
      free((void *)v0);
      A = v1;
      uint64_t v0 = v1;
      if (!v1) {
        goto LABEL_6;
      }
    }
    *(unsigned char *)(v0 + 16) = 0;
LABEL_6:
    uint64_t v0 = 1;
  }
  pthread_mutex_unlock(&arena_lock);
  return v0;
}

uint64_t cmark_arena_reset()
{
  pthread_once(&arena_once, (void (*)(void))initialize_arena);
  pthread_mutex_lock(&arena_lock);
  uint64_t v0 = A;
  if (A)
  {
    do
    {
      free(*(void **)(v0 + 24));
      uint64_t v1 = *(void *)(v0 + 32);
      free((void *)v0);
      A = v1;
      uint64_t v0 = v1;
    }
    while (v1);
  }

  return pthread_mutex_unlock(&arena_lock);
}

void *arena_calloc(uint64_t a1, uint64_t a2)
{
  if (!A) {
    init_arena();
  }
  size_t v4 = (a2 * a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  pthread_once(&arena_once, (void (*)(void))initialize_arena);
  pthread_mutex_lock(&arena_lock);
  uint64_t v5 = (void *)A;
  unint64_t v6 = *(void *)A;
  if (v4 <= *(void *)A)
  {
    if (v4 > v6 - *(void *)(A + 8))
    {
      uint64_t v5 = alloc_arena_chunk(v6 + (v6 >> 1), A);
      A = (uint64_t)v5;
    }
  }
  else
  {
    uint64_t v5 = alloc_arena_chunk(v4, *(void *)(A + 32));
    *(void *)(A + ++*(_DWORD *)(result + 32) = v5;
  }
  uint64_t v7 = v5[1];
  int v8 = (void *)(v5[3] + v7);
  v5[1] = v7 + v4;
  *int v8 = v4 - 8;
  pthread_mutex_unlock(&arena_lock);
  return v8 + 1;
}

void *arena_realloc(const void *a1, uint64_t a2)
{
  if (!A) {
    init_arena();
  }
  size_t v4 = arena_calloc(1, a2);
  uint64_t v5 = v4;
  if (a1) {
    memcpy(v4, a1, *((void *)a1 - 1));
  }
  return v5;
}

uint64_t (**cmark_get_arena_mem_allocator())()
{
  return &CMARK_ARENA_MEM_ALLOCATOR;
}

uint64_t initialize_arena()
{
  return pthread_mutex_init(&arena_lock, 0);
}

uint64_t init_arena()
{
  pthread_once(&arena_once, (void (*)(void))initialize_arena);
  pthread_mutex_lock(&arena_lock);
  A = (uint64_t)alloc_arena_chunk(0x400000uLL, 0);

  return pthread_mutex_unlock(&arena_lock);
}

void filter(void)
{
  unint64_t v2 = v1;
  int v3 = v0;
  size_t v4 = blacklist;
  uint64_t v5 = "title";
  do
  {
    if (v2 >= 3 && *v3 == 60)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v3[1] == 47 ? 2 : 1;
      while (v5[v6])
      {
        int v8 = v5[v6];
        BOOL v9 = __tolower(v3[v7 + v6]) != v8 || ~v7 + v2 == v6;
        ++v6;
        if (v9) {
          goto LABEL_20;
        }
      }
      if (v2 - v7 != v6)
      {
        if (cmark_isspace(v3[v7 + v6])) {
          return;
        }
        int v10 = v3[v7 + v6];
        if (v10 == 47)
        {
          if (v7 + v6 + 2 > v2) {
            goto LABEL_20;
          }
          int v10 = v3[v7 + 1 + v6];
        }
        if (v10 == 62) {
          return;
        }
      }
    }
LABEL_20:
    int v11 = v4[1];
    ++v4;
    uint64_t v5 = v11;
  }
  while (v11);
}

void cmark_utf8proc_encode_char_cold_1()
{
  __assert_rtn("cmark_utf8proc_encode_char", "utf8.c", 193, "uc >= 0");
}

void S_render_node_cold_1()
{
}

void xcalloc_cold_1()
{
  fwrite("[cmark] calloc returned null pointer, aborting\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
  abort();
}

void xrealloc_cold_1()
{
  fwrite("[cmark] realloc returned null pointer, aborting\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
  abort();
}

void cmark_render_html_with_mem_cold_1()
{
}

void S_render_node_cold_1_0()
{
}

void cmark_syntax_extension_add_node_cold_1()
{
}

void postprocess_cold_1()
{
}

void postprocess_cold_2()
{
  __assert_rtn("postprocess_text", "autolink.c", 384, "data[start + offset + max_rewind] == '@'");
}

void cmark_iter_next_cold_1()
{
}

void S_render_node_cold_1_1()
{
}

void cmark_footnote_create_cold_1()
{
  __assert_rtn("cmark_footnote_create", "footnotes.c", 26, "map->sorted == NULL");
}

void normalize_map_label_cold_1()
{
}

void cmark_strbuf_grow_cold_1()
{
}

void cmark_strbuf_grow_cold_2()
{
}

void cmark_strbuf_copy_cstr_cold_1()
{
}

void cmark_reference_create_cold_1()
{
  __assert_rtn("cmark_reference_create", "references.c", 28, "map->sorted == NULL");
}

void cmark_reference_create_attributes_cold_1()
{
  __assert_rtn("cmark_reference_create_attributes", "references.c", 53, "map->sorted == NULL");
}

void S_process_line_cold_1()
{
}

void S_process_line_cold_3()
{
  __assert_rtn("add_text_to_container", "blocks.c", 1454, "parser->current != NULL");
}

void S_process_line_cold_4()
{
  __assert_rtn("add_text_to_container", "blocks.c", 1412, "parser->current != NULL");
}

void S_process_line_cold_5()
{
  __assert_rtn("parse_html_block_prefix", "blocks.c", 1037, "html_block_type >= 1 && html_block_type <= 7");
}

void add_child_cold_1()
{
}

void finalize_cold_1()
{
}

void finalize_cold_2()
{
}

void add_line_cold_1()
{
}

void cmark_register_node_flag_cold_1()
{
}

void cmark_register_node_flag_cold_2()
{
}

void cmark_clean_url_cold_2()
{
}

void cmark_parse_inlines_cold_1()
{
  __assert_rtn("peek_char_n", "inlines.c", 221, "!(subj->pos + n < subj->input.len && subj->input.data[subj->pos + n] == 0)");
}

void remove_delimiter_cold_1()
{
  __assert_rtn("remove_delimiter", "inlines.c", 522, "delim == subj->last_delim");
}

void S_render_node_cold_1_2()
{
}

void commonmark_render_cold_1()
{
}

void latex_render_cold_1()
{
}

void man_render_cold_1()
{
}

void html_render_cold_1()
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void abort(void)
{
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}