void sub_22BA00004(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100]((void *)(v1 - 168));
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100]((void *)(v1 - 136));
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100]((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

size_t gnss::GnssAdaptDevice::Ga10_07FTAssistanceRequest(gnss::GnssAdaptDevice *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga10_07FTAssistanceRequest");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  v4 = *((void *)this + 36);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice26Ga10_07FTAssistanceRequestEv_block_invoke;
  block[3] = &__block_descriptor_tmp_249;
  block[4] = this;
  dispatch_async(v4, block);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga10_07FTAssistanceRequest");
    return LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  return result;
}

uint64_t gnss::Emergency::Cplane::MeasurementReport::MeasurementReport(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(unsigned char *)(this + 4) = 0;
  *(void *)(this + 8) = -1;
  *(void *)(this + 16) = -1;
  *(_DWORD *)(this + 24) = -1;
  uint64_t v1 = 28;
  do
  {
    uint64_t v2 = this + v1;
    *(_WORD *)uint64_t v2 = 0x7FFF;
    *(_DWORD *)(v2 + 2) = -1;
    *(_DWORD *)(v2 + 5) = -1;
    *(void *)(v2 + 12) = 0xFFFFFFFF00000004;
    *(unsigned char *)(v2 + 20) = -1;
    v1 += 24;
  }
  while (v2 + 24 != this + 412);
  *(_DWORD *)(this + 412) = 0;
  *(void *)(this + 416) = -1;
  *(_DWORD *)(this + 424) = 33619967;
  *(_WORD *)(this + 428) = -1;
  *(_DWORD *)(this + 452) = -1;
  *(unsigned char *)(this + 456) = -1;
  *(void *)(this + 432) = -1;
  *(void *)(this + 440) = -1;
  *(unsigned char *)(this + 448) = -1;
  *(unsigned char *)(this + 460) = -1;
  *(void *)(this + 464) = -1;
  *(_DWORD *)(this + 471) = -1;
  *(_DWORD *)(this + 480) = 4;
  *(void *)(this + 484) = -1;
  *(_DWORD *)(this + 496) = 0;
  *(_DWORD *)(this + 524) = -1;
  *(void *)(this + 528) = -1;
  *(_WORD *)(this + 520) = -1;
  *(void *)(this + 504) = -1;
  *(void *)(this + 512) = -1;
  *(unsigned char *)(this + 536) = -1;
  *(_DWORD *)(this + 548) = -1;
  *(void *)(this + 552) = -1;
  *(void *)(this + 538) = -1;
  *(_WORD *)(this + 560) = -1;
  *(_DWORD *)(this + 564) = -1;
  *(_WORD *)(this + 568) = -1;
  *(_DWORD *)(this + 592) = -1;
  *(void *)(this + 572) = -1;
  *(void *)(this + 580) = -1;
  *(_WORD *)(this + 588) = -1;
  *(_WORD *)(this + 596) = -129;
  *(_DWORD *)(this + 600) = -1;
  *(unsigned char *)(this + 608) = -1;
  *(_DWORD *)(this + 612) = 5;
  *(_WORD *)(this + 616) = -1;
  *(unsigned char *)(this + 618) = -1;
  uint64_t v3 = 620;
  do
  {
    uint64_t v4 = this + v3;
    *(_DWORD *)uint64_t v4 = -32769;
    *(unsigned char *)(v4 + 4) = -1;
    *(void *)(v4 + 8) = 0xFF00000004;
    *(_WORD *)(v4 + 16) = -1;
    *(_DWORD *)(v4 + 20) = -1;
    v3 += 24;
  }
  while (v4 + 24 != this + 1388);
  *(_DWORD *)(this + 1392) = -1;
  *(unsigned char *)(this + 1396) = 0;
  return this;
}

uint64_t ___ZN4gnss15GnssAdaptDevice29startEmergencyPositionRequestERKNS_9Emergency6Cplane15PositionRequestERKNS2_7ContextENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

uint64_t __copy_helper_block_e8_32c82_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane17MeasurementReportEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c82_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane17MeasurementReportEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v1);
}

void *gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  unint64_t v108 = 0xFFFFFFFF00000000;
  __int16 v109 = -1;
  memset(&v110[2], 0, 27);
  unint64_t v112 = 0xFFFFFFFF00000000;
  unsigned __int8 v113 = 0;
  uint64_t v116 = -1;
  char v117 = 0;
  int v120 = -1;
  LOWORD(v121) = 0;
  long long v122 = xmmword_22BB0C140;
  memset(v123, 0, sizeof(v123));
  __int16 v124 = -1;
  char v125 = 0;
  uint64_t v129 = -1;
  int v128 = 0;
  uint64_t v130 = 0;
  int v131 = -1;
  char v132 = -1;
  uint64_t v136 = -1;
  *(_DWORD *)&v133[8] = -1;
  *(void *)&v133[1] = -1;
  uint64_t v137 = 0x7FFFFFFFLL;
  LOBYTE(v138) = 0;
  HIWORD(v138) = -1;
  unint64_t v139 = 0xFFFFFFFF7FFFFFFFLL;
  uint64_t v140 = 0;
  __int16 v141 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga10_05SendSessionSummaryReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 136);
  if (a3)
  {
    if (v11 != v10)
    {
      unint64_t v12 = (v11 - v10) / 196;
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = (v11 - v10) / 196;
      }
      if (*(_DWORD *)(v10 + 56) == a2)
      {
        unint64_t v14 = 0;
LABEL_10:
        if (v14 < v12)
        {
          uint64_t v15 = v10 + 196 * v14;
          unsigned int v16 = *(_DWORD *)v15;
          unsigned int v152 = *(_DWORD *)(v15 + 4);
          __int16 v153 = *(_WORD *)(v15 + 8);
          *(_OWORD *)__str = *(_OWORD *)(v15 + 10);
          *(_OWORD *)&__str[13] = *(_OWORD *)(v15 + 23);
          char v17 = *(unsigned char *)(v15 + 39);
          unsigned __int8 v18 = *(unsigned char *)(v15 + 48);
          __int16 v150 = *(_WORD *)(v15 + 49);
          char v151 = *(unsigned char *)(v15 + 51);
          char v19 = *(unsigned char *)(v15 + 60);
          __int16 v20 = *(_WORD *)(v15 + 61);
          char v149 = *(unsigned char *)(v15 + 63);
          __int16 v148 = v20;
          int v21 = *(_DWORD *)(v15 + 64);
          int v22 = *(_DWORD *)(v15 + 68);
          *(_OWORD *)v172 = *(_OWORD *)(v15 + 88);
          *(void *)&v172[14] = *(void *)(v15 + 102);
          __int16 v23 = *(_WORD *)(v15 + 110);
          char v24 = *(unsigned char *)(v15 + 112);
          __int16 v146 = *(_WORD *)(v15 + 113);
          char v147 = *(unsigned char *)(v15 + 115);
          int v25 = *(_DWORD *)(v15 + 116);
          uint64_t v26 = *(void *)(v15 + 120);
          int v27 = *(_DWORD *)(v15 + 136);
          char v28 = *(unsigned char *)(v15 + 140);
          int v176 = *(_DWORD *)(v15 + 149);
          uint64_t v175 = *(void *)(v15 + 141);
          char v145 = *(unsigned char *)(v15 + 155);
          __int16 v144 = *(_WORD *)(v15 + 153);
          uint64_t v29 = *(void *)(v15 + 156);
          int v30 = *(_DWORD *)(v15 + 172);
          __int16 v107 = *(_WORD *)(v15 + 192);
          uint64_t v106 = *(void *)(v15 + 184);
          unint64_t v108 = __PAIR64__(v152, v16);
          unint64_t v31 = *(void *)(v15 + 40);
          uint64_t v32 = *(void *)(v15 + 52);
          long long v33 = *(_OWORD *)(v15 + 72);
          uint64_t v34 = *(void *)(v15 + 128);
          uint64_t v35 = *(void *)(v15 + 164);
          unint64_t v36 = *(void *)(v15 + 176);
          __int16 v109 = v153;
          *(_OWORD *)v110 = *(_OWORD *)__str;
          *(_OWORD *)&v110[13] = *(_OWORD *)&__str[13];
          char v111 = v17;
          unint64_t v112 = v31;
          unsigned __int8 v113 = v18;
          __int16 v114 = v150;
          char v115 = v151;
          uint64_t v116 = v32;
          char v117 = v19;
          char v119 = v149;
          __int16 v118 = v148;
          int v120 = v21;
          int v121 = v22;
          long long v122 = v33;
          *(void *)&v123[14] = *(void *)&v172[14];
          *(_OWORD *)v123 = *(_OWORD *)v172;
          __int16 v124 = v23;
          char v125 = v24;
          char v127 = v147;
          __int16 v126 = v146;
          uint64_t v129 = v26;
          uint64_t v130 = v34;
          int v128 = v25;
          int v131 = v27;
          char v132 = v28;
          *(_DWORD *)&v133[8] = v176;
          *(void *)v133 = v175;
          char v135 = v145;
          __int16 v134 = v144;
          uint64_t v136 = v29;
          uint64_t v137 = v35;
          int v138 = v30;
          unint64_t v139 = v36;
          __int16 v141 = v107;
          int v104 = 2;
          uint64_t v140 = v106;
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v14 = 0;
        v37 = (int *)(v10 + 252);
        uint64_t v38 = v13 - 1;
        while (v38 != v14)
        {
          int v39 = *v37;
          v37 += 49;
          ++v14;
          if (v39 == a2)
          {
            if (v14 < v12) {
              goto LABEL_10;
            }
            break;
          }
        }
      }
    }
    int v104 = 2;
    goto LABEL_19;
  }
  int v104 = 1;
  if ((gnss::GnssAdaptDevice::Ga11_23GetCPSession(v10, v11, a2, (uint64_t)&v108) & 1) == 0) {
LABEL_19:
  }
    LODWORD(v116) = a2;
LABEL_20:
  double v40 = -1.0;
  int v105 = a2;
  if (HIDWORD(v122) == 1)
  {
    if (*(_DWORD *)&v123[12] >> 23)
    {
      double v41 = 1.79769313e308;
    }
    else if (*(_DWORD *)&v123[8] == 2)
    {
      double v41 = -((double)*(unsigned int *)&v123[12] * 90.0 * 0.00000011920929);
    }
    else
    {
      double v41 = (double)*(unsigned int *)&v123[12] * 90.0 * 0.00000011920929;
    }
    signed int v45 = *(_DWORD *)&v123[16];
    if ((*(_DWORD *)&v123[16] + 0x800000) >> 24)
    {
      double v103 = 1.79769313e308;
    }
    else
    {
      if ((*(_DWORD *)&v123[16] & 0x800000) != 0) {
        signed int v45 = *(_DWORD *)&v123[16] | 0xFF000000;
      }
      double v103 = (double)v45 * 360.0 * 0.0000000596046448;
    }
    double v46 = (double)*(unsigned __int16 *)&v123[20];
    if (v128 == 2) {
      double v46 = -v46;
    }
    if (*(__int16 *)&v123[20] < 0) {
      double v42 = 1.79769313e308;
    }
    else {
      double v42 = v46;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v47 = mach_continuous_time();
      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%.7lf,Long,%.7lf,Alt,%.2lf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 68, "Ga10_05SendSessionSummaryReport", v41, v103, v42);
      LbsOsaTrace_WriteLog(0x18u, __str, v48, 5, 1);
    }
    double v49 = -1.0;
    double v44 = -1.0;
    if (v124 != 255) {
      double v44 = (pow(1.1, (double)v124) + -1.0) * 10.0;
    }
    if (v129 != 255) {
      double v49 = (pow(1.025, (double)v129) + -1.0) * 45.0;
    }
    double v102 = v49;
    LODWORD(v49) = v140;
    if (v113) {
      BOOL v50 = SBYTE1(v121) <= -1;
    }
    else {
      BOOL v50 = 0;
    }
    if (v50) {
      int v51 = BYTE1(v121) & 1 | 2;
    }
    else {
      int v51 = BYTE1(v121) & 1;
    }
    if ((a3 & (v108 == 1)) != 0) {
      v51 |= 4u;
    }
    int v101 = v51;
    unsigned int v52 = DWORD1(v122);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v53 = mach_continuous_time();
      unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AchievedHUnc,%f,AchievedVUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "ADP", 68, "Ga10_05SendSessionSummaryReport", v44, v102);
      LbsOsaTrace_WriteLog(0x18u, __str, v54, 5, 1);
    }
    uint64_t v100 = (v52 >> 3) & 0x18 | v52 & 0x20004 | (v52 >> 19) & 0xE0 | (v52 >> 5) & 0x300 | (((v52 >> 8) & 7) << 10) & 0xFFFFDFFF | (((v52 >> 12) & 1) << 13) | (v52 >> 1) & 0xC000 | (v52 >> 2) & 0x10000 | (v52 >> 10) & 0x1C0000 | (v52 << 10) & 0x200000 | (__rbit32(v52) >> 30);
    double v43 = (double)*(unint64_t *)&v49 / 1000.0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v55 = mach_continuous_time();
      unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Ttff,%f,TechSrc,%d,AssistUsed,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "ADP", 73, "Ga10_05SendSessionSummaryReport", (double)*(unint64_t *)&v49 / 1000.0, v101, v100);
      LbsOsaTrace_WriteLog(0x18u, __str, v56, 4, 1);
    }
  }
  else
  {
    uint64_t v100 = 0;
    int v101 = 0;
    double v42 = 1.79769313e308;
    double v43 = -1.0;
    double v102 = -1.0;
    double v103 = 1.79769313e308;
    double v44 = -1.0;
    double v41 = 1.79769313e308;
  }
  int v57 = v108;
  int v58 = v108;
  double v59 = -1.0;
  double v60 = -1.0;
  switch((int)v108)
  {
    case 0:
      goto LABEL_75;
    case 1:
      goto LABEL_61;
    case 2:
      int v57 = 2;
      goto LABEL_61;
    case 3:
      int v57 = 9;
      goto LABEL_61;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v61 = mach_continuous_time();
        unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "ADP", 87, "Ga10_05SendSessionSummaryReport", 770, v108);
        LbsOsaTrace_WriteLog(0x18u, __str, v62, 2, 1);
      }
      int v57 = 0;
LABEL_61:
      LODWORD(v60) = *(_DWORD *)&v110[2];
      double v59 = -1.0;
      if (BYTE6(v108) != 255) {
        double v59 = (pow(1.1, (double)BYTE6(v108)) + -1.0) * 10.0;
      }
      double v63 = (double)*(unint64_t *)&v60;
      if (v109 != 255) {
        double v40 = (pow(1.025, (double)v109) + -1.0) * 45.0;
      }
      int v58 = *(_DWORD *)&v110[6];
      double v60 = v63 / 1000.0;
      switch(*(_DWORD *)&v110[6])
      {
        case 0:
          break;
        case 1:
        case 3:
          if (a3) {
            int v58 = 3;
          }
          else {
            int v58 = 1;
          }
          break;
        case 2:
          if (a3) {
            int v58 = 4;
          }
          else {
            int v58 = 2;
          }
          break;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v64 = mach_continuous_time();
            unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RepType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "ADP", 69, "Ga10_05SendSessionSummaryReport", 770, *(_DWORD *)&v110[6]);
            LbsOsaTrace_WriteLog(0x18u, __str, v65, 0, 1);
          }
          int v58 = 0;
          break;
      }
LABEL_75:
      int v66 = HIDWORD(v112) + 1;
      if ((HIDWORD(v112) + 1) >= 5)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v67 = mach_continuous_time();
          unsigned __int16 v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "ADP", 69, "Ga10_05SendSessionSummaryReport", 515, HIDWORD(v112));
          LbsOsaTrace_WriteLog(0x18u, __str, v68, 0, 1);
        }
        int v66 = 0;
      }
      int v69 = 0;
      switch(a4)
      {
        case 0:
        case 1:
        case 6:
        case 15:
        case 16:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
          break;
        case 2:
          int v69 = 1;
          break;
        case 3:
          int v69 = 2;
          break;
        case 4:
          int v69 = 3;
          break;
        case 5:
        case 8:
          int v69 = 5;
          break;
        case 7:
          int v69 = 7;
          break;
        case 9:
        case 14:
          int v69 = 6;
          break;
        case 10:
        case 11:
          int v69 = 8;
          break;
        case 12:
        case 13:
          int v69 = 9;
          break;
        case 17:
          int v69 = 10;
          break;
        case 18:
        case 19:
          if (v117) {
            int v69 = 12;
          }
          else {
            int v69 = 11;
          }
          break;
        case 20:
        case 21:
          int v69 = 12;
          break;
        case 22:
        case 23:
          int v69 = 13;
          break;
        case 24:
          int v69 = 14;
          break;
        case 25:
        case 26:
          int v69 = 15;
          break;
        case 27:
        case 28:
          int v69 = 16;
          break;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v98 = mach_continuous_time();
            unsigned __int16 v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU Sess Code,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "ADP", 69, "Ga10_05SendSessionSummaryReport", 515, a4);
            LbsOsaTrace_WriteLog(0x18u, __str, v99, 0, 1);
          }
          int v69 = 0;
          break;
      }
      int v70 = v113;
      int v71 = *(unsigned __int8 *)(a1 + 176);
      *(unsigned char *)(a1 + 176) = 0;
      uint64_t GnssSpoofingFlag = gnss::GnssAdaptDevice::Ga06_18GetGnssSpoofingFlag((gnss::GnssAdaptDevice *)a1, v122);
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100]((uint64_t)v172, a1 + 728);
      if (v173)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v73 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v74 = 84;
          if (v71) {
            uint64_t v75 = 84;
          }
          else {
            uint64_t v75 = 70;
          }
          if (!v70) {
            uint64_t v74 = 70;
          }
          unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionId, %u, MethodType,%u,SessionType,%u,ProtoType,%u,ReqRspTime,%f,ReqHAcc,%f,ReqVAcc,%f,PosReqType,%u,ErrCode,%u,HeloEnabled,%c,HeloInjected,%c, SpoofingFlag,%llu\n", (unint64_t)v73, "ADP", 73, "Ga10_05SendSessionSummaryReport", v105, v57, v104, v66, v60, v59, v40, v58, v69, v74, v75,
                  GnssSpoofingFlag);
          LbsOsaTrace_WriteLog(0x18u, __str, v76, 4, 1);
        }
        v77 = *(NSObject **)(a1 + 296);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 1174405120;
        block[2] = ___ZN4gnss15GnssAdaptDevice31Ga10_05SendSessionSummaryReportEjb18e_gnsPPDU_SessCode_block_invoke;
        block[3] = &__block_descriptor_tmp_245;
        std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100]((uint64_t)v155, (uint64_t)v172);
        *(double *)&v155[4] = v41;
        *(double *)&v155[5] = v103;
        *(double *)&v155[6] = v42;
        *(double *)&v155[7] = v44;
        *(double *)&v155[8] = v102;
        *(double *)&v155[9] = v43;
        int v156 = v101;
        int v157 = v57;
        int v158 = v104;
        int v159 = v66;
        double v160 = v60;
        double v161 = v59;
        double v162 = v40;
        int v163 = v58;
        int v164 = v69;
        char v165 = v70;
        char v166 = v71;
        __int16 v168 = v143;
        int v167 = v142;
        uint64_t v169 = v100;
        uint64_t v170 = GnssSpoofingFlag;
        int v78 = v105;
        int v171 = v105;
        dispatch_async(v77, block);
        std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v155);
      }
      else
      {
        int v78 = v105;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v79 = mach_continuous_time();
          unsigned __int16 v80 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SummaryRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), "ADP", 69, "Ga10_05SendSessionSummaryReport", 258);
          LbsOsaTrace_WriteLog(0x18u, __str, v80, 0, 1);
        }
      }
      v82 = *(char **)(a1 + 128);
      v81 = *(char **)(a1 + 136);
      unint64_t v83 = (v81 - v82) / 196;
      if (a3)
      {
        if (v81 == v82) {
          goto LABEL_115;
        }
        if (v83 <= 1) {
          uint64_t v84 = 1;
        }
        else {
          uint64_t v84 = (v81 - v82) / 196;
        }
        if (*((_DWORD *)v82 + 14) != v78)
        {
          unint64_t v85 = 0;
          v86 = (int *)(v82 + 252);
          uint64_t v87 = v84 - 1;
          do
          {
            if (v87 == v85) {
              goto LABEL_115;
            }
            int v88 = *v86;
            v86 += 49;
            ++v85;
          }
          while (v88 != v78);
          goto LABEL_114;
        }
LABEL_106:
        unint64_t v85 = 0;
        goto LABEL_107;
      }
      if (v81 == v82) {
        goto LABEL_115;
      }
      if (v83 <= 1) {
        uint64_t v89 = 1;
      }
      else {
        uint64_t v89 = (v81 - v82) / 196;
      }
      if (*((_DWORD *)v82 + 13) == v78) {
        goto LABEL_106;
      }
      unint64_t v85 = 0;
      v92 = (int *)(v82 + 248);
      uint64_t v93 = v89 - 1;
      do
      {
        if (v93 == v85) {
          goto LABEL_115;
        }
        int v94 = *v92;
        v92 += 49;
        ++v85;
      }
      while (v94 != v78);
LABEL_114:
      if (v85 >= v83) {
        goto LABEL_115;
      }
LABEL_107:
      if (v85 < v83)
      {
        v90 = &v82[196 * v85];
        int64_t v91 = v81 - (v90 + 196);
        if (v81 != v90 + 196) {
          memmove(&v82[196 * v85], v90 + 196, v91 - 2);
        }
        *(void *)(a1 + 136) = &v90[v91];
      }
LABEL_115:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v95 = mach_continuous_time();
        unsigned __int16 v96 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v95), "ADP", 68, "Ga10_05SendSessionSummaryReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v96, 5, 1);
      }
      return std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v172);
  }
}

void sub_22BA0172C(_Unwind_Exception *a1)
{
}

BOOL gnss::GnssAdaptDevice::Ga10_11SetGuardTimeOut(gnss::GnssAdaptDevice *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  bzero(v8, 0x230uLL);
  v8[0] = 512;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GaurdTimeOut,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga10_11SetGuardTimeOut", 2.0);
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  __int16 v9 = 2000;
  int v3 = Gnm_SetPlatformConfig(v8);
  if (v3 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx setPfmCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga10_11SetGuardTimeOut", 257, v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  return v3 == 0;
}

BOOL gnss::GnssAdaptDevice::Ga10_12SetEarlyReturn(gnss::GnssAdaptDevice *this, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga10_12SetEarlyReturn");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  bzero(v17, 0x268uLL);
  v17[6] = 2;
  uint64_t v18 = 0;
  v20[0] = 0;
  uint64_t v19 = 0;
  *(void *)((char *)v20 + 7) = 0;
  v21[0] = 0;
  uint64_t v5 = 62;
  *(void *)((char *)v21 + 5) = 0;
  do
  {
    uint64_t v6 = (char *)v16 + v5;
    *uint64_t v6 = 0;
    *(_WORD *)((char *)&v21[26] + v5 + 1) = 0;
    *((_WORD *)v6 + 130) = -1;
    v5 += 262;
  }
  while (v6 + 262 != (char *)&v22);
  int v22 = 0;
  v23[2] = 0;
  *(void *)((char *)v23 + 7) = 0;
  v23[0] = 0;
  if (a2) {
    int v7 = 4096;
  }
  else {
    int v7 = 0;
  }
  v16[0] = 4096;
  v16[1] = v7;
  int v8 = Gnm_SetUserConfig((uint64_t)v16);
  if (v8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_14;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUsrCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga10_12SetEarlyReturn", 257, v8);
    int v11 = 0;
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_14;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetUserConfig success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga10_12SetEarlyReturn");
    int v11 = 5;
  }
  LbsOsaTrace_WriteLog(0x18u, __str, v10, v11, 1);
LABEL_14:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "Ga10_12SetEarlyReturn");
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
  }
  return v8 == 0;
}

BOOL gnss::GnssAdaptDevice::Ga10_30SetTargetE911VertAccM(gnss::GnssAdaptDevice *this, double a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga10_30SetTargetE911VertAccM");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  bzero(v17, 0x270uLL);
  char v19 = 2;
  uint64_t v20 = 0;
  v22[0] = 0;
  uint64_t v21 = 0;
  *(void *)((char *)v22 + 7) = 0;
  v23[0] = 0;
  uint64_t v5 = 62;
  *(void *)((char *)v23 + 5) = 0;
  do
  {
    uint64_t v6 = &v17[v5];
    *uint64_t v6 = 0;
    *(_WORD *)((char *)&v23[26] + v5 + 1) = 0;
    *((_WORD *)v6 + 130) = -1;
    v5 += 262;
  }
  while (v6 + 262 != (unsigned char *)&v24);
  int v24 = 0;
  double v26 = 0.0;
  *(void *)((char *)v25 + 7) = 0;
  v25[0] = 0;
  int v18 = 4096;
  if (a2 != -1.0) {
    double v26 = a2;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: targetE911VerticalAccM,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga10_30SetTargetE911VertAccM", v26);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
  }
  int v9 = Gnm_SetUserConfig((uint64_t)v17);
  if (v9)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUsrCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga10_30SetTargetE911VertAccM", 257, v9);
    int v12 = 0;
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetUserConfig success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "Ga10_30SetTargetE911VertAccM");
    int v12 = 5;
  }
  LbsOsaTrace_WriteLog(0x18u, __str, v11, v12, 1);
LABEL_15:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga10_30SetTargetE911VertAccM");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
  }
  return v9 == 0;
}

void std::map<unsigned int,std::function<void ()(gnss::Result)>>::erase[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer(a1, a2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);

  operator delete(a2);
}

void *gnss::GnssAdaptDevice::stopEmergencyPositionRequest(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice28stopEmergencyPositionRequestEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    int v10 = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "stopEmergencyPositionRequest", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice28stopEmergencyPositionRequestEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v47[129] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "stopEmergencyPositionRequest_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    uint64_t v6 = *(void *)(v2 + 128);
    uint64_t v5 = *(void *)(v2 + 136);
    uint64_t v7 = v5 - v6;
    if (v5 != v6)
    {
      int v8 = *(_DWORD *)(a1 + 72);
      unint64_t v9 = v7 / 196;
      if (v9 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v9;
      }
      if (*(_DWORD *)(v6 + 52) == v8)
      {
LABEL_9:
        *(_DWORD *)__str = *(_DWORD *)(a1 + 72);
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
        size_t v11 = (uint64_t **)(v2 + 208);
        std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>((uint64_t **)(v2 + 208), (unsigned int *)__str, __str);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
        unsigned int v12 = GNS_CpLocAbort(*(_DWORD *)(a1 + 72));
        if (v12 == 1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v13 = mach_continuous_time();
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CpLocAbort success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "stopEmergencyPositionRequest_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v16 = mach_continuous_time();
            unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "stopEmergencyPositionRequest_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
          }
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpLocAbort,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "stopEmergencyPositionRequest_block_invoke", 257, v12);
            LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
          }
          int v32 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v12);
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v32, (uint64_t)v43, (uint64_t)"stopEmergencyPositionRequest_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v43);
          uint64_t v35 = *(void *)(v2 + 216);
          uint64_t v34 = v2 + 216;
          uint64_t v33 = v35;
          if (v35)
          {
            unsigned int v36 = *(_DWORD *)(a1 + 72);
            uint64_t v37 = v34;
            do
            {
              unsigned int v38 = *(_DWORD *)(v33 + 32);
              BOOL v39 = v38 >= v36;
              if (v38 >= v36) {
                double v40 = (uint64_t *)v33;
              }
              else {
                double v40 = (uint64_t *)(v33 + 8);
              }
              if (v39) {
                uint64_t v37 = v33;
              }
              uint64_t v33 = *v40;
            }
            while (*v40);
            if (v37 != v34 && v36 >= *(_DWORD *)(v37 + 32))
            {
              std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer(v11, (uint64_t *)v37);
              std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v37 + 40));
              operator delete((void *)v37);
            }
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v41 = mach_continuous_time();
            unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 68, "stopEmergencyPositionRequest_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v42, 5, 1);
          }
        }
        return result;
      }
      unint64_t v22 = 0;
      __int16 v23 = (int *)(v6 + 248);
      uint64_t v24 = v10 - 1;
      while (v24 != v22)
      {
        int v25 = *v23;
        v23 += 49;
        ++v22;
        if (v25 == v8)
        {
          if (v22 < v9) {
            goto LABEL_9;
          }
          break;
        }
      }
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v44, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v44, (uint64_t)"stopEmergencyPositionRequest_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v44);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 87, "stopEmergencyPositionRequest_block_invoke", 2052, *(_DWORD *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 2, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "stopEmergencyPositionRequest_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v45, (uint64_t)"stopEmergencyPositionRequest_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v45);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "stopEmergencyPositionRequest_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "stopEmergencyPositionRequest_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
    }
  }
  return result;
}

void sub_22BA028A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setNwAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice27setNwAssistanceNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane22AssistanceNeededReportEEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_57;
    void block[4] = a1;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNwAssistanceNeededReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22BA02A68(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice27setNwAssistanceNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency6Cplane22AssistanceNeededReportEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
    uint64_t v5 = v2 + 792;
    if (__str != (char *)(v2 + 792))
    {
      uint64_t v6 = v18;
      uint64_t v7 = *(void *)(v2 + 816);
      if (v18 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 816) + 24))(*(void *)(v2 + 816), __str);
          (*(void (**)(void))(**(void **)(v2 + 816) + 32))(*(void *)(v2 + 816));
          *(void *)(v2 + 816) = 0;
          uint64_t v18 = __str;
          (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 792);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 792);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = *(char **)(v2 + 816);
        }
        *(void *)(v2 + 816) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 792, __str);
        (*(void (**)(void))(**(void **)(v2 + 816) + 32))(*(void *)(v2 + 816));
        *(void *)(v2 + 816) = v18;
        uint64_t v18 = __str;
      }
      else
      {
        uint64_t v18 = *(char **)(v2 + 816);
        *(void *)(v2 + 816) = v6;
      }
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setNwAssistanceNeededReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setNwAssistanceNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v16, (uint64_t)"setNwAssistanceNeededReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AssistReport\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setNwAssistanceNeededReport_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setNwAssistanceNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22BA02F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22BA03044(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setNwAssistanceGpsRefTime(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    memcpy(__dst, a2, 0x118uLL);
    uint64_t v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice25setNwAssistanceGpsRefTimeERKNS_9Emergency6Cplane16GpsReferenceTimeENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_70_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    memcpy(v11, __dst, sizeof(v11));
    dispatch_async(v5, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__dst, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__dst, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setNwAssistanceGpsRefTime", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __dst, v8, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice25setNwAssistanceGpsRefTimeERKNS_9Emergency6Cplane16GpsReferenceTimeENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(_DWORD *)(a1 + 72) < 0x240C8400u)
    {
      if (*(unsigned __int16 *)(a1 + 76) < 0x400u)
      {
        if (*(unsigned __int8 *)(a1 + 79) < 0x11u)
        {
          uint64_t v62 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          uint64_t v22 = 22;
          long long v55 = 0u;
          do
          {
            __int16 v23 = (char *)&v55 + v22;
            *__int16 v23 = -1;
            *(_DWORD *)(v23 + 1) = 0;
            v23[5] = 0;
            v22 += 6;
          }
          while (v23 + 6 != (char *)&v62 + 6);
          int v63 = 0;
          WORD2(v55) = -1;
          DWORD2(v55) = -1;
          LODWORD(v56) = -1;
          int v63 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          LODWORD(v55) = *(_DWORD *)(a1 + 72);
          unsigned int v24 = *(unsigned __int8 *)(a1 + 78);
          if (v24 != 255) {
            WORD2(v55) = (int)((pow(1.18, (double)v24) + -1.0) * 0.0022 * 0.000333333333);
          }
          __int16 v25 = *(_WORD *)(a1 + 76);
          WORD6(v55) = v25;
          unsigned int v26 = *(unsigned __int8 *)(a1 + 336);
          if (*(unsigned char *)(a1 + 336) && v26 < 8) {
            WORD6(v55) = v25 + ((_WORD)v26 << 10);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v27 = mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Week,%u,Tow,%u,TowUnc,%u,OsTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 73, "setNwAssistanceGpsRefTime_block_invoke", WORD6(v55), v55, WORD2(v55), v63);
            LbsOsaTrace_WriteLog(0x18u, __str, v28, 4, 1);
          }
          if (*(unsigned char *)(a1 + 79))
          {
            unint64_t v29 = 0;
            unsigned __int8 v30 = 0;
            unsigned __int16 v31 = (unsigned __int16 *)(a1 + 80);
            do
            {
              unsigned int v32 = *((unsigned __int8 *)v31 + 2);
              if (v32 > 0x1F)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v42 = mach_continuous_time();
                  unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx satId,%u rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514, *((unsigned __int8 *)v31 + 2));
                  LbsOsaTrace_WriteLog(0x18u, __str, v43, 0, 1);
                }
              }
              else
              {
                unsigned int v33 = *((unsigned __int8 *)v31 + 12);
                if (v33 > 3)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v44 = mach_continuous_time();
                    unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Tlm of satId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514, *((unsigned __int8 *)v31 + 2));
                    LbsOsaTrace_WriteLog(0x18u, __str, v45, 0, 1);
                  }
                }
                else
                {
                  uint64_t v34 = (char *)&v55 + 6 * v30;
                  v34[25] = v33;
                  uint64_t v35 = (unsigned __int8 *)(v34 + 25);
                  unsigned int v36 = *v31;
                  if (v36 >= 0x4000)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v46 = mach_continuous_time();
                      unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Tlm Word of satId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514, *((unsigned __int8 *)v31 + 2));
                      LbsOsaTrace_WriteLog(0x18u, __str, v47, 0, 1);
                    }
                  }
                  else
                  {
                    uint64_t v37 = (char *)&v55 + 6 * v30;
                    int v38 = *((_DWORD *)v31 + 2);
                    v37[23] = *((_DWORD *)v31 + 1) != 0;
                    BOOL v39 = (unsigned __int8 *)(v37 + 23);
                    *(_WORD *)(v39 + 3) = v36;
                    *(v35 - 3) = v32;
                    v39[1] = v38 != 0;
                    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v40 = mach_continuous_time();
                      unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SatId,%u,antiSpoof,%u,alert,%u,tlmReserved,%u,tlmMsg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 73, "setNwAssistanceGpsRefTime_block_invoke", *(v35 - 3), *v39, v39[1], *v35, *(unsigned __int16 *)(v39 + 3));
                      LbsOsaTrace_WriteLog(0x18u, __str, v41, 4, 1);
                    }
                    ++v30;
                  }
                }
              }
              ++v29;
              v31 += 8;
            }
            while (v29 < *(unsigned __int8 *)(a1 + 79));
          }
          else
          {
            unsigned __int8 v30 = 0;
          }
          BYTE4(v56) = v30;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v48 = mach_continuous_time();
            unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No of Tow Assist,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "ADP", 73, "setNwAssistanceGpsRefTime_block_invoke", BYTE4(v56));
            LbsOsaTrace_WriteLog(0x18u, __str, v49, 4, 1);
          }
          GNS_AsstGpsRefTime(*(_DWORD *)(a1 + 348), 1u, &v55, 0);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v50 = mach_continuous_time();
            unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstGpsRefTime success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "ADP", 73, "setNwAssistanceGpsRefTime_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v51, 4, 1);
          }
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v54, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v54, (uint64_t)"setNwAssistanceGpsRefTime_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v54);
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v52 = mach_continuous_time();
            unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v53, 5, 1);
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v64, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v64, (uint64_t)"setNwAssistanceGpsRefTime_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v64);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v18 = mach_continuous_time();
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sat Count\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v20 = mach_continuous_time();
            unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v65, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v65, (uint64_t)"setNwAssistanceGpsRefTime_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v65);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WkNum\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v66, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v66, (uint64_t)"setNwAssistanceGpsRefTime_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v66);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Tow\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 514);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v67, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v67, (uint64_t)"setNwAssistanceGpsRefTime_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v67);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setNwAssistanceGpsRefTime_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setNwAssistanceGpsRefTime_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22BA03ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setNwAssistanceRefPosition(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    long long v3 = a2[1];
    *(_OWORD *)__str = *a2;
    long long v13 = v3;
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26setNwAssistanceRefPositionERKNS_9Emergency6Cplane17ReferenceLocationENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_84_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    long long v10 = *(_OWORD *)__str;
    long long v11 = v13;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNwAssistanceRefPosition", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice26setNwAssistanceRefPositionERKNS_9Emergency6Cplane17ReferenceLocationENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(a1 + 72) == 9)
    {
      if (*(__int16 *)(a1 + 74) < 0)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v85, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v85, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v85);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Alt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
        }
      }
      else if (*(_DWORD *)(a1 + 76) < 0x800000u)
      {
        if ((*(_DWORD *)(a1 + 80) + 0x800000) >> 24)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v83, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v83, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v83);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Long\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v28 = mach_continuous_time();
            unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
          }
        }
        else if (*(char *)(a1 + 85) < 0)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v82, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v82, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v82);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SemiMajUnc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v32 = mach_continuous_time();
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
          }
        }
        else if (*(char *)(a1 + 86) < 0)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v81, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v81, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v81);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v34 = mach_continuous_time();
            unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SemiMinUnc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v36 = mach_continuous_time();
            unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
          }
        }
        else if (*(unsigned __int8 *)(a1 + 87) < 0x5Au)
        {
          if (*(char *)(a1 + 88) < 0)
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v79, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v79, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v79);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v54 = mach_continuous_time();
              unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AltUnc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
              LbsOsaTrace_WriteLog(0x18u, __str, v55, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v56 = mach_continuous_time();
              unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
              return LbsOsaTrace_WriteLog(0x18u, __str, v57, 5, 1);
            }
          }
          else if (*(unsigned __int8 *)(a1 + 89) - 1 >= 0x64)
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v78, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v78, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v78);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v58 = mach_continuous_time();
              unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Conf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
              LbsOsaTrace_WriteLog(0x18u, __str, v59, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v60 = mach_continuous_time();
              unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
              return LbsOsaTrace_WriteLog(0x18u, __str, v61, 5, 1);
            }
          }
          else
          {
            LODWORD(v63) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            char v74 = -1;
            char v75 = -1;
            uint64_t v76 = 0x4FFFFFFFFLL;
            HIDWORD(v63) = 16;
            if (*(unsigned char *)(a1 + 73)) {
              int v38 = 2;
            }
            else {
              int v38 = 1;
            }
            int v62 = v38;
            int v64 = v38;
            int v39 = *(unsigned __int16 *)(a1 + 74);
            __int16 v67 = *(_WORD *)(a1 + 74);
            int v40 = *(_DWORD *)(a1 + 76);
            int v41 = *(_DWORD *)(a1 + 80);
            int v65 = v40;
            int v66 = v41;
            if (*(unsigned char *)(a1 + 84)) {
              int v42 = 2;
            }
            else {
              int v42 = 1;
            }
            int v71 = v42;
            int v43 = *(unsigned __int8 *)(a1 + 85);
            char v68 = *(unsigned char *)(a1 + 85);
            int v44 = *(unsigned __int8 *)(a1 + 86);
            char v69 = *(unsigned char *)(a1 + 86);
            unsigned __int8 v45 = 2 * *(unsigned char *)(a1 + 87);
            unsigned __int8 v70 = v45;
            int v46 = *(unsigned __int8 *)(a1 + 88);
            char v72 = *(unsigned char *)(a1 + 88);
            int v47 = *(unsigned __int8 *)(a1 + 89);
            char v73 = *(unsigned char *)(a1 + 89);
            *(void *)((char *)&v63 + 4) = 0x200000001;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v48 = mach_continuous_time();
              unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%u,Long,%d,Hemisphere,%u,Alt,%u,SemiMajUnc,%u,SemiMinUnc,%u,MajAxis,%u,AltUnc,%u,Conf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "ADP", 68, "setNwAssistanceRefPosition_block_invoke", v40, v41, v62, v39, v43, v44, v45, v46, v47);
              LbsOsaTrace_WriteLog(0x18u, __str, v49, 5, 1);
            }
            GNS_AsstRefPos(*(_DWORD *)(a1 + 100), 2u, &v63, 0);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v50 = mach_continuous_time();
              unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstGpsRefPos success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "ADP", 73, "setNwAssistanceRefPosition_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v51, 4, 1);
            }
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v77, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v77);
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v52 = mach_continuous_time();
              unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
              return LbsOsaTrace_WriteLog(0x18u, __str, v53, 5, 1);
            }
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v80, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v80, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v80);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MajAxis\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
            LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v24 = mach_continuous_time();
            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v84, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v84, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v84);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lat\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 514);
          LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v86, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v86, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v86);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ShapeType not Ellipsoid pt with alt & Unc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v87, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v87, (uint64_t)"setNwAssistanceRefPosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v87);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setNwAssistanceRefPosition_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setNwAssistanceRefPosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22BA050D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void *gnss::GnssAdaptDevice::setNwAssistanceGpsEphemeris(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    memcpy(__dst, a2, sizeof(__dst));
    uint64_t v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice27setNwAssistanceGpsEphemerisERKNS_9Emergency6Cplane18GpsNavigationModelENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_109;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    memcpy(v11, __dst, sizeof(v11));
    dispatch_async(v5, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__dst, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__dst, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setNwAssistanceGpsEphemeris", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __dst, v8, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice27setNwAssistanceGpsEphemerisERKNS_9Emergency6Cplane18GpsNavigationModelENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned __int8 *)(a1 + 72) < 0x11u)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Eph Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", *(unsigned __int8 *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 4, 1);
      }
      if (!*(unsigned char *)(a1 + 72)) {
        goto LABEL_78;
      }
      unsigned __int8 v66 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = a1 + 84;
      do
      {
        unsigned int v18 = *(unsigned __int8 *)(v17 + 48);
        if (v18 > 0x3F)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, *(unsigned __int8 *)(v17 + 48));
            LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
          }
        }
        else
        {
          int v69 = 0;
          int v68 = 0;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          unint64_t v74 = 0;
          unsigned __int8 v67 = v18;
          if (*(unsigned __int8 *)(v17 + 53) > 3u)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v28 = mach_continuous_time();
              unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId CACode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
              LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
            }
          }
          else
          {
            LOBYTE(v68) = *(unsigned char *)(v17 + 53);
            if (*(unsigned __int8 *)(v17 + 49) >= 0x10u)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v30 = mach_continuous_time();
                unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId URA Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
              }
            }
            else
            {
              BYTE1(v68) = *(unsigned char *)(v17 + 49);
              if (*(unsigned __int8 *)(v17 + 50) >= 0x40u)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v32 = mach_continuous_time();
                  unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVHealth,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                  LbsOsaTrace_WriteLog(0x18u, __str, v33, 0, 1);
                }
              }
              else
              {
                BYTE2(v68) = *(unsigned char *)(v17 + 50);
                if (*(_DWORD *)(v17 + 56) >= 2u)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v34 = mach_continuous_time();
                    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId L2 PCode,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                    LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
                  }
                }
                else
                {
                  HIBYTE(v68) = *(_DWORD *)(v17 + 56);
                  if (*(unsigned __int16 *)(v17 + 24) >= 0x400u)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v36 = mach_continuous_time();
                      unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SaId IODC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                      LbsOsaTrace_WriteLog(0x18u, __str, v37, 0, 1);
                    }
                  }
                  else
                  {
                    LOWORD(v69) = *(_WORD *)(v17 + 24);
                    if (*(unsigned __int16 *)(v17 + 26) >= 0x93A8u)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v38 = mach_continuous_time();
                        unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId TOC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                        LbsOsaTrace_WriteLog(0x18u, __str, v39, 0, 1);
                      }
                    }
                    else
                    {
                      HIWORD(v69) = *(_WORD *)(v17 + 26);
                      if (*(_DWORD *)(v17 + 72) >= 0x800000u)
                      {
                        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v40 = mach_continuous_time();
                          unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatdId 1st Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                          LbsOsaTrace_WriteLog(0x18u, __str, v41, 0, 1);
                        }
                      }
                      else
                      {
                        LODWORD(v70) = *(_DWORD *)(v17 + 72);
                        if (HIBYTE(*(_DWORD *)(v17 + 76)))
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v42 = mach_continuous_time();
                            unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId 2nd Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                            LbsOsaTrace_WriteLog(0x18u, __str, v43, 0, 1);
                          }
                        }
                        else
                        {
                          DWORD1(v70) = *(_DWORD *)(v17 + 76);
                          if (HIBYTE(*(_DWORD *)(v17 + 80)))
                          {
                            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                            {
                              bzero(__str, 0x410uLL);
                              uint64_t v44 = mach_continuous_time();
                              unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId 3rd Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                              LbsOsaTrace_WriteLog(0x18u, __str, v45, 0, 1);
                            }
                          }
                          else
                          {
                            DWORD2(v70) = *(_DWORD *)(v17 + 80);
                            if (*(_DWORD *)(v17 + 84) >= 0x10000u)
                            {
                              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                              {
                                bzero(__str, 0x410uLL);
                                uint64_t v46 = mach_continuous_time();
                                unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId 4th Res Word,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                LbsOsaTrace_WriteLog(0x18u, __str, v47, 0, 1);
                              }
                            }
                            else
                            {
                              HIDWORD(v70) = *(_DWORD *)(v17 + 84);
                              if ((*(_DWORD *)(v17 - 8) + 0x200000) >= 0x400000)
                              {
                                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                {
                                  bzero(__str, 0x410uLL);
                                  uint64_t v48 = mach_continuous_time();
                                  unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId SatCk Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                  LbsOsaTrace_WriteLog(0x18u, __str, v49, 0, 1);
                                }
                              }
                              else
                              {
                                DWORD1(v71) = *(_DWORD *)(v17 - 8);
                                if (*(unsigned __int16 *)(v17 + 38) >= 0x93A8u)
                                {
                                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                  {
                                    bzero(__str, 0x410uLL);
                                    uint64_t v50 = mach_continuous_time();
                                    unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId RefTime Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                    LbsOsaTrace_WriteLog(0x18u, __str, v51, 0, 1);
                                  }
                                }
                                else
                                {
                                  WORD6(v72) = *(_WORD *)(v17 + 38);
                                  if (*(_DWORD *)(v17 + 64) >= 2u)
                                  {
                                    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                    {
                                      bzero(__str, 0x410uLL);
                                      uint64_t v52 = mach_continuous_time();
                                      unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId EphFitInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                      LbsOsaTrace_WriteLog(0x18u, __str, v53, 0, 1);
                                    }
                                  }
                                  else
                                  {
                                    BYTE14(v72) = *(_DWORD *)(v17 + 64);
                                    if (*(unsigned __int8 *)(v17 + 68) >= 0x20u)
                                    {
                                      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                      {
                                        bzero(__str, 0x410uLL);
                                        uint64_t v54 = mach_continuous_time();
                                        unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId Age Offset Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                        LbsOsaTrace_WriteLog(0x18u, __str, v55, 0, 1);
                                      }
                                    }
                                    else
                                    {
                                      HIBYTE(v72) = *(unsigned char *)(v17 + 68);
                                      if ((unsigned __int16)(*(_WORD *)(v17 + 46) + 0x2000) >= 0x4000u)
                                      {
                                        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                        {
                                          bzero(__str, 0x410uLL);
                                          uint64_t v56 = mach_continuous_time();
                                          unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId Rate of Incli Angle Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation* (double)v56), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                          LbsOsaTrace_WriteLog(0x18u, __str, v57, 0, 1);
                                        }
                                      }
                                      else
                                      {
                                        WORD6(v73) = *(_WORD *)(v17 + 46);
                                        unsigned int v19 = *(_DWORD *)(v17 + 20);
                                        if ((v19 + 0x800000) >> 24)
                                        {
                                          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                                          {
                                            bzero(__str, 0x410uLL);
                                            uint64_t v58 = mach_continuous_time();
                                            unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId Long of AscNode Orbit Plane at Weekly Epoch Eph,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation* (double)v58), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514, v67);
                                            LbsOsaTrace_WriteLog(0x18u, __str, v59, 0, 1);
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v20 = *(void *)(v17 + 8);
                                          *(void *)((char *)&v72 + 4) = *(void *)v17;
                                          LOBYTE(v71) = *(unsigned char *)(v17 + 60);
                                          BYTE1(v71) = *(unsigned char *)(v17 + 51);
                                          WORD1(v71) = *(_WORD *)(v17 + 28);
                                          int v21 = *(_DWORD *)(v17 - 4);
                                          DWORD2(v71) = *(_DWORD *)(v17 + 30);
                                          HIDWORD(v71) = v21;
                                          LODWORD(v72) = *(_DWORD *)(v17 + 34);
                                          LODWORD(v73) = *(_DWORD *)(v17 + 40);
                                          *(void *)((char *)&v73 + 4) = v20;
                                          HIWORD(v73) = *(_WORD *)(v17 + 44);
                                          unint64_t v74 = __PAIR64__(v19, *(_DWORD *)(v17 + 16));
                                          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
                                          {
                                            bzero(__str, 0x410uLL);
                                            uint64_t v22 = mach_continuous_time();
                                            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: satId,%u,ephemCodeOnL2,%u,ephemUra,%u,ephemSvHealth,%u,ephemL2PFlag,%u,ephemIodc,%u,ephemToc,%u,reserved1,%u,reserved2,%u,reserved3,%u,reserved4,%u,ephemTgd,%u,ephemAf2,%u,ephemAf1,%u,ephemAf0,%d,ephemCrs,%u,ephemDeltaN,%u,ephemM0,%d,ephemCuc,%u,ephemCus,%u,ephemE,%u,ephemAPowerHalf,%u,toe,%u,ephemFitFlag,%u,ephemAODO,%u,ephemCic,%u,ephemCis,%u,ephemOmegaA0,%d,ephemI0,%d,ephemIdot,%u,ephemCrc,%u,ephemW,%d,ephemOmegaDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation* (double)v22), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", v67, v68, BYTE1(v68), BYTE2(v68), HIBYTE(v68),
                                                    (unsigned __int16)v69,
                                                    HIWORD(v69),
                                                    v70,
                                                    DWORD1(v70),
                                                    DWORD2(v70),
                                                    HIDWORD(v70),
                                                    (char)v71,
                                                    SBYTE1(v71),
                                                    SWORD1(v71),
                                                    DWORD1(v71),
                                                    SWORD4(v71),
                                                    SWORD5(v71),
                                                    HIDWORD(v71),
                                                    (__int16)v72,
                                                    SWORD1(v72),
                                                    DWORD1(v72),
                                                    DWORD2(v72),
                                                    WORD6(v72),
                                                    BYTE14(v72),
                                                    HIBYTE(v72),
                                                    (__int16)v73,
                                                    SWORD1(v73),
                                                    DWORD1(v73),
                                                    DWORD2(v73),
                                                    SWORD6(v73),
                                                    SHIWORD(v73),
                                                    v74,
                                                    HIDWORD(v74));
                                            LbsOsaTrace_WriteLog(0x18u, __str, v23, 4, 1);
                                          }
                                          GNS_AsstGpsNavModel(*(_DWORD *)(a1 + 1620), 1, 1, &v67, 0);
                                          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
                                          {
                                            bzero(__str, 0x410uLL);
                                            uint64_t v24 = mach_continuous_time();
                                            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstGpsNavModel invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation* (double)v24), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke");
                                            LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
                                          }
                                          ++v66;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v16;
        v17 += 96;
      }
      while (v16 < *(unsigned __int8 *)(a1 + 72));
      if (v66)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v60 = mach_continuous_time();
          unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Eph Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 73, "setNwAssistanceGpsEphemeris_block_invoke", v66);
          LbsOsaTrace_WriteLog(0x18u, __str, v61, 4, 1);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v76, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v76, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v76);
      }
      else
      {
LABEL_78:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v75, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v75, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v75);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v62 = mach_continuous_time();
          unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Eph Count 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 515);
          LbsOsaTrace_WriteLog(0x18u, __str, v63, 0, 1);
        }
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v64 = mach_continuous_time();
        unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v65, 5, 1);
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v77, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v77);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Eph Count\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 514);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v78, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v78, (uint64_t)"setNwAssistanceGpsEphemeris_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v78);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setNwAssistanceGpsEphemeris_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setNwAssistanceGpsEphemeris_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22BA064EC(_Unwind_Exception *a1)
{
}

size_t gnss::GnssAdaptDevice::Ga10_00ProcessGPSMeasurements(size_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 16))
  {
    size_t v4 = result;
    unint64_t v5 = HIDWORD(a3);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS Meas Avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "Ga10_00ProcessGPSMeasurements");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
    }
    int v8 = *(unsigned __int8 *)(v4 + 37);
    *(unsigned char *)(a2 + 7) = v8;
    *(_DWORD *)a2 = *(_DWORD *)(v4 + 20);
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = -1;
    unsigned int v9 = *(unsigned __int8 *)(v4 + 28);
    if (v9 != 255)
    {
      *(unsigned char *)(a2 + 6) = v9;
      if (v5 == 2)
      {
        unsigned int v10 = (int)((pow(1.18, (double)v9) + -1.0) * 0.0022 / 3000.0 * 3000.0);
        *(unsigned char *)(a2 + 6) = (int)(log((double)v10 + (double)v10 + 1.0) / 0.131028262);
      }
    }
    *(_DWORD *)(a2 + 392) = 0;
    if (v8)
    {
      unint64_t v11 = 0;
      uint64_t v12 = (unsigned __int8 *)(a2 + 28);
      unsigned __int16 v13 = (unsigned __int8 *)(v4 + 47);
      do
      {
        *(v12 - 14) = *(v13 - 9) + (v5 == 3);
        *(v12 - 13) = *(v13 - 8);
        *(v12 - 12) = *v13;
        __int16 v14 = *(_WORD *)(v13 - 7);
        if (v5 == 2)
        {
          *(double *)&unint64_t v15 = (double)v14 * 0.951;
          *((_WORD *)v12 - 10) = (int)*(double *)&v15;
          *uint64_t v12 = 0;
          *(_DWORD *)(a2 + 444) = 0;
          unsigned int v16 = *(unsigned __int16 *)(v13 - 3);
          LOWORD(v15) = *(_WORD *)(v13 - 5);
          double v17 = (double)v15;
          if (v16 != 1024) {
            double v17 = (double)v16 * 0.0009765625 + v17;
          }
          *((_DWORD *)v12 - 1) = vcvtd_n_u64_f64(v17 / 1023.0, 0x15uLL);
        }
        else
        {
          *((_WORD *)v12 - 10) = v14;
          *(_DWORD *)(v12 - 18) = *(_DWORD *)(v13 - 5);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v20 = mach_continuous_time();
            unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WholeChips,%u,FracChips,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "Ga10_18AdjustGpsChipsforMeasurements", *((unsigned __int16 *)v12 - 9), *((unsigned __int16 *)v12 - 8));
            LbsOsaTrace_WriteLog(0x18u, __str, v21, 4, 1);
          }
          LOWORD(v18) = *((_WORD *)v12 - 9);
          LOWORD(v19) = *((_WORD *)v12 - 8);
          double v22 = (float)((float)((float)v19 * 0.00097656) + (float)v18) + -8.47922697;
          if (v22 >= 1023.0) {
            double v22 = v22 + -1023.0;
          }
          if (v22 < 0.0) {
            double v22 = v22 + 1023.0;
          }
          *((_WORD *)v12 - 9) = (int)v22;
          *((_WORD *)v12 - 8) = vcvtd_n_s64_f64(v22 - (double)(int)v22, 0xAuLL);
        }
        unsigned int v23 = *(v13 - 1);
        if (v23 <= 4) {
          *((_DWORD *)v12 - 2) = v23;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasSent Dop,%d,wholeChips,%u,fracChips,%u,satId,%u,cnR,%u,RmsErr,%u,MultiPath,%u,codePh,%u,intCodePh,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "Ga10_00ProcessGPSMeasurements", *((__int16 *)v12 - 10), *((unsigned __int16 *)v12 - 9), *((unsigned __int16 *)v12 - 8), *(v12 - 14), *(v12 - 13), *(v12 - 12), *((_DWORD *)v12 - 2), *((_DWORD *)v12 - 1), *v12);
          LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
        }
        if (v11 > 0xE) {
          break;
        }
        ++v11;
        v12 += 24;
        v13 += 10;
      }
      while (v11 < *(unsigned __int8 *)(v4 + 37));
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      double v26 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v27 = 84;
      if (!*(unsigned char *)(v4 + 36)) {
        uint64_t v27 = 70;
      }
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: gpsTow,%u,gpsWeek,%u,gpsTimeUnc,%u,MeasGpsTowFromFta,%c\n", (unint64_t)v26, "ADP", 73, "Ga10_00ProcessGPSMeasurements", *(_DWORD *)a2, *(unsigned __int16 *)(a2 + 4), *(unsigned __int8 *)(a2 + 6), v27);
      return LbsOsaTrace_WriteLog(0x18u, __str, v28, 4, 1);
    }
  }
  return result;
}

void *gnss::GnssAdaptDevice::Ga10_01SendMeasurementsReport()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  size_t v2 = v1;
  uint64_t v3 = v0;
  v187[4] = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(v184, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga10_01SendMeasurementsReport");
    LbsOsaTrace_WriteLog(0x18u, (char *)v184, v5, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v185, v3 + 824);
  *(unsigned char *)(v3 + 1024) = 0;
  if (*(unsigned char *)(v3 + 120))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(v184, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate");
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v7, 5, 1);
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)v187, v3 + 856);
    if (!v187[3])
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx MeasRepwithEstimate\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 258);
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v26, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate");
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v28, 5, 1);
      }
      goto LABEL_160;
    }
    LODWORD(v186[0]) = 0;
    BYTE4(v186[0]) = 0;
    *(unint64_t *)((char *)&v186[1] + 4) = -1;
    *(unint64_t *)((char *)&v186[2] + 4) = -1;
    uint64_t v8 = 28;
    do
    {
      unsigned int v9 = (char *)v186 + v8;
      *(_WORD *)unsigned int v9 = 0x7FFF;
      *(_DWORD *)(v9 + 2) = -1;
      *(_DWORD *)(v9 + 5) = -1;
      *(void *)(v9 + 12) = 0xFFFFFFFF00000004;
      v9[20] = -1;
      v8 += 24;
    }
    while (v9 + 24 != (char *)&v186[51] + 4);
    v186[52] = -1;
    LODWORD(v186[53]) = 33619967;
    WORD2(v186[53]) = -1;
    HIDWORD(v186[56]) = -1;
    LOBYTE(v186[57]) = -1;
    memset(&v186[54], 255, 17);
    BYTE4(v186[57]) = -1;
    *(_DWORD *)((char *)&v186[58] + 7) = -1;
    v186[58] = -1;
    LODWORD(v186[61]) = -1;
    *(unint64_t *)((char *)&v186[59] + 4) = -1;
    *(_DWORD *)((char *)&v186[60] + 3) = -1;
    BYTE4(v186[61]) = 0;
    *(_DWORD *)((char *)&v186[61] + 6) = -1;
    BYTE2(v186[62]) = -1;
    BYTE4(v186[62]) = 0;
    LODWORD(v186[63]) = -1;
    WORD2(v186[63]) = -1;
    LOBYTE(v186[64]) = 0;
    WORD1(v186[64]) = -1;
    BYTE4(v186[64]) = -1;
    LODWORD(v186[65]) = 0;
    BYTE4(v186[65]) = 0;
    HIDWORD(v186[51]) = 0;
    LODWORD(v186[1]) = 0;
    if (!v2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx Meas with Estimate Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 513);
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v30, 0, 1);
      }
      LODWORD(v186[0]) = -2;
      unsigned __int16 v31 = *(NSObject **)(v3 + 296);
      uint64_t block = MEMORY[0x263EF8330];
      uint64_t v179 = 1174405120;
      v180 = ___ZN4gnss15GnssAdaptDevice41Ga10_28SendMeasurementsReportWithEstimateEPK15s_gnsCP_MeasRes_block_invoke;
      v181 = &__block_descriptor_tmp_125;
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)v182, (uint64_t)v187);
      memcpy(v183, v186, sizeof(v183));
      dispatch_async(v31, &block);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v32 = mach_continuous_time();
        unsigned __int16 v33 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate");
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v33, 5, 1);
      }
LABEL_159:
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v182);
LABEL_160:
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v187);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v132 = mach_continuous_time();
        unsigned __int16 v133 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "ADP", 68, "Ga10_01SendMeasurementsReport");
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v133, 5, 1);
      }
      return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v185);
    }
    int v10 = *(_DWORD *)v2;
    LODWORD(v186[0]) = 0;
    LODWORD(v186[2]) = v10;
    BYTE4(v186[65]) = *(unsigned char *)(v2 + 36);
    unint64_t v135 = 0xFFFFFFFF00000000;
    __int16 v136 = -1;
    uint64_t v137 = 0;
    memset(v139, 0, sizeof(v139));
    uint64_t v138 = 0;
    unint64_t v140 = 0xFFFFFFFF00000000;
    char v141 = 0;
    uint64_t v142 = -1;
    char v143 = 0;
    int v144 = -1;
    __int16 v145 = 0;
    long long v146 = xmmword_22BB0C140;
    uint64_t v147 = 0;
    memset(v148, 0, sizeof(v148));
    __int16 v149 = -1;
    char v150 = 0;
    int v151 = 0;
    uint64_t v152 = -1;
    uint64_t v153 = 0;
    int v154 = -1;
    char v155 = -1;
    *(void *)&v156[7] = -1;
    *(_DWORD *)((char *)&v156[3] + 1) = -1;
    *(void *)int v156 = -1;
    *(void *)&v156[11] = 0x7FFFFFFFLL;
    char v157 = 0;
    __int16 v158 = -1;
    unint64_t v159 = 0xFFFFFFFF7FFFFFFFLL;
    uint64_t v160 = 0;
    __int16 v161 = 0;
    if (gnss::GnssAdaptDevice::Ga11_23GetCPSession(*(void *)(v3 + 128), *(void *)(v3 + 136), v10, (uint64_t)&v135))
    {
      HIDWORD(v186[1]) = HIDWORD(v140);
      if (HIBYTE(v161)) {
        int v11 = 1;
      }
      else {
        int v11 = 2;
      }
      LODWORD(v186[65]) = v11;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(v184, 0x410uLL);
      uint64_t v38 = mach_continuous_time();
      unsigned __int16 v39 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 2052, LODWORD(v186[2]));
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v39, 0, 1);
    }
    if (!(_BYTE)v161)
    {
      if (*(_DWORD *)(v2 + 32) == 1)
      {
        if (*(unsigned char *)(v2 + 16))
        {
          BYTE4(v186[0]) |= 1u;
          gnss::GnssAdaptDevice::Ga10_00ProcessGPSMeasurements(v2, (uint64_t)&v186[2] + 4, v186[1]);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v70 = mach_continuous_time();
        unsigned __int16 v71 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx Not enough Satellites,Err status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 769, *(unsigned __int8 *)(v2 + 32));
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v71, 0, 1);
      }
    }
    if (*(_DWORD *)(v2 + 165212) != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v63 = mach_continuous_time();
        unsigned __int16 v64 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx Not enough Satellites,Err status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 769, *(unsigned __int8 *)(v2 + 165212));
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v64, 0, 1);
      }
      goto LABEL_134;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(v184, 0x410uLL);
      uint64_t v57 = mach_continuous_time();
      unsigned __int16 v58 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: DBH Pos Avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "ADP", 73, "Ga10_28SendMeasurementsReportWithEstimate");
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v58, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(v184, 0x410uLL);
      uint64_t v59 = mach_continuous_time();
      unsigned __int16 v60 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: GAD Lat,%u,Long,%d,Sign of Lat,%u,Altitude,%u,Alt Unc,%u, Semi Major,%u, SemiMinor,%u,AxisBearing,%u,Dir of Alt,%u,ShapeType,%u,VelocityType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate", *(_DWORD *)(v2 + 165228), *(_DWORD *)(v2 + 165232), *(_DWORD *)(v2 + 165224), *(unsigned __int16 *)(v2 + 165236), *(unsigned __int8 *)(v2 + 165248), *(unsigned __int8 *)(v2 + 165238), *(unsigned __int8 *)(v2 + 165239), *(unsigned __int8 *)(v2 + 165240), *(_DWORD *)(v2 + 165244), *(_DWORD *)(v2 + 165220), *(_DWORD *)(v2 + 165260));
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v60, 5, 1);
    }
    BYTE4(v186[0]) |= 2u;
    unsigned int v61 = *(_DWORD *)(v2 + 165228);
    if (v61 >> 23)
    {
      v62.f64[0] = 1.79769313e308;
    }
    else
    {
      v62.f64[0] = -((double)v61 * 90.0 * 0.00000011920929);
      if (*(_DWORD *)(v2 + 165224) != 2) {
        v62.f64[0] = (double)v61 * 90.0 * 0.00000011920929;
      }
    }
    int v65 = *(_DWORD *)(v2 + 165232);
    if ((v65 + 0x800000) >> 24)
    {
      double v66 = 1.79769313e308;
    }
    else
    {
      if ((v65 & 0x800000) != 0) {
        v65 |= 0xFF000000;
      }
      double v66 = (double)v65 * 360.0 * 0.0000000596046448;
    }
    v62.f64[1] = v66;
    unint64_t v67 = (unint64_t)vand_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vdivq_f64(vmulq_f64(v62, (float64x2_t)xmmword_22BB446F0), (float64x2_t)xmmword_22BB44700))), (int8x8_t)0x3FFFFFF01FFFFFFLL);
    *(unint64_t *)((char *)&v186[59] + 4) = v67;
    LOBYTE(v67) = *(unsigned char *)(v2 + 165240);
    BYTE4(v186[60]) = ((double)v67 / 11.25);
    int v68 = *(_DWORD *)(v2 + 165220);
    if (v68 == 16 || v68 == 8)
    {
      if (*(_DWORD *)(v2 + 165244) == 2)
      {
        unsigned int v69 = *(unsigned __int16 *)(v2 + 165236);
        if (v69 >= 0x1F5)
        {
          LOBYTE(v186[64]) = 0;
          goto LABEL_102;
        }
        LOBYTE(v186[64]) = 1;
        __int16 v72 = 500 - v69;
      }
      else
      {
        LOBYTE(v186[64]) = 1;
        __int16 v72 = *(_WORD *)(v2 + 165236) + 500;
      }
      WORD1(v186[64]) = v72;
      unsigned int v73 = *(unsigned __int8 *)(v2 + 165248);
      if (v73 == 255) {
        double v74 = -1.0;
      }
      else {
        double v74 = (pow(1.025, (double)v73) + -1.0) * 45.0;
      }
      BYTE4(v186[64]) = gnss::GnssAdaptDevice::Ga10_27GetCDMAKValueForUncertanity((gnss::GnssAdaptDevice *)v74);
    }
LABEL_102:
    unsigned int v75 = *(unsigned __int8 *)(v2 + 165238);
    double v76 = -1.0;
    double v77 = -1.0;
    if (v75 != 255) {
      double v77 = (pow(1.1, (double)v75) + -1.0) * 10.0;
    }
    int v78 = (gnss::GnssAdaptDevice *)v77;
    unsigned int v79 = *(unsigned __int8 *)(v2 + 165239);
    if (v79 != 255) {
      double v76 = (pow(1.1, (double)v79) + -1.0) * 10.0;
    }
    BYTE5(v186[60]) = gnss::GnssAdaptDevice::Ga10_27GetCDMAKValueForUncertanity(v78);
    BYTE6(v186[60]) = gnss::GnssAdaptDevice::Ga10_27GetCDMAKValueForUncertanity((gnss::GnssAdaptDevice *)v76);
    int v80 = *(_DWORD *)(v2 + 165216);
    if (v80 == 1)
    {
      LODWORD(v186[61]) = 0;
    }
    else if (v80 == 2)
    {
      LODWORD(v186[61]) = 1;
    }
    else
    {
      LODWORD(v186[61]) = -1;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v81 = mach_continuous_time();
        unsigned __int16 v82 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx Fix Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "ADP", 87, "Ga10_28SendMeasurementsReportWithEstimate", 515, *(_DWORD *)(v2 + 165216));
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v82, 2, 1);
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(v184, 0x410uLL);
      uint64_t v84 = mach_continuous_time();
      unsigned __int16 v85 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: 3GPP2 Lat,%u,Long,%d,Altitude,%u,Alt Unc,%u, locUncA,%u, locUncP,%u,AxisBearing,%u,Alt included,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate", HIDWORD(v186[59]), LODWORD(v186[60]), WORD1(v186[64]), BYTE4(v186[64]), BYTE5(v186[60]), BYTE6(v186[60]), BYTE4(v186[60]), LOBYTE(v186[64]));
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v85, 5, 1);
    }
    switch(*(_DWORD *)(v2 + 165260))
    {
      case 0:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(v184, 0x410uLL);
          uint64_t v100 = mach_continuous_time();
          unsigned __int16 v101 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: VelInfo not avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v100), "ADP", 73, "Ga10_28SendMeasurementsReportWithEstimate");
          LbsOsaTrace_WriteLog(0x18u, (char *)v184, v101, 4, 1);
        }
        break;
      case 1:
      case 4:
        BYTE4(v186[61]) = 1;
        LOWORD(v83) = *(_WORD *)(v2 + 165264);
        LOWORD(v186[62]) = (int)((double)v83 * 360.0 / 1023.0);
        unsigned int v86 = *(unsigned __int16 *)(v2 + 165266);
        __int16 v87 = vcvtd_n_s64_f64((double)v86 * 0.277778, 2uLL);
        if (v86 == 0xFFFF) {
          __int16 v88 = -1;
        }
        else {
          __int16 v88 = v87;
        }
        HIWORD(v186[61]) = v88;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v184, 0x410uLL);
          uint64_t v89 = mach_continuous_time();
          unsigned __int16 v90 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Bearing,%u,HSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate", LOWORD(v186[62]), HIWORD(v186[61]));
          LbsOsaTrace_WriteLog(0x18u, (char *)v184, v90, 5, 1);
        }
        break;
      case 2:
      case 8:
        LOWORD(v83) = *(_WORD *)(v2 + 165264);
        BYTE4(v186[61]) = 1;
        LOWORD(v186[62]) = (int)((double)v83 * 360.0 / 1023.0);
        unsigned int v91 = *(unsigned __int16 *)(v2 + 165266);
        __int16 v92 = vcvtd_n_s64_f64((double)v91 * 0.277778, 2uLL);
        if (v91 == 0xFFFF) {
          __int16 v93 = -1;
        }
        else {
          __int16 v93 = v92;
        }
        HIWORD(v186[61]) = v93;
        unsigned int v94 = *(unsigned __int16 *)(v2 + 165270);
        if (v94 == 0xFFFF) {
          char v95 = -1;
        }
        else {
          char v95 = (int)((double)v94 * 0.277778 + (double)v94 * 0.277778);
        }
        BYTE2(v186[62]) = v95;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v184, 0x410uLL);
          uint64_t v96 = mach_continuous_time();
          unsigned __int16 v97 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: GAD : Bearing,%u,HSpeed,%u,VSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate", *(unsigned __int16 *)(v2 + 165264), *(unsigned __int16 *)(v2 + 165266), *(unsigned __int16 *)(v2 + 165270));
          LbsOsaTrace_WriteLog(0x18u, (char *)v184, v97, 5, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v184, 0x410uLL);
          uint64_t v98 = mach_continuous_time();
          unsigned __int16 v99 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: 3GPP2 : Bearing,%u,HSpeed,%u,VSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate", LOWORD(v186[62]), HIWORD(v186[61]), BYTE2(v186[62]));
          LbsOsaTrace_WriteLog(0x18u, (char *)v184, v99, 5, 1);
        }
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v184, 0x410uLL);
          uint64_t v102 = mach_continuous_time();
          unsigned __int16 v103 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx Velocity type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v102), "ADP", 69, "Ga10_28SendMeasurementsReportWithEstimate", 515, *(_DWORD *)(v2 + 165260));
          LbsOsaTrace_WriteLog(0x18u, (char *)v184, v103, 0, 1);
        }
        break;
    }
LABEL_134:
    int v104 = *(NSObject **)(v3 + 296);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v179 = 1174405120;
    v180 = ___ZN4gnss15GnssAdaptDevice41Ga10_28SendMeasurementsReportWithEstimateEPK15s_gnsCP_MeasRes_block_invoke_136;
    v181 = &__block_descriptor_tmp_140;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100]((uint64_t)v182, (uint64_t)v187);
    memcpy(v183, v186, sizeof(v183));
    dispatch_async(v104, &block);
    int v105 = *(_DWORD *)(v2 + 165212);
    *(void *)double v162 = 0xFFFFFFFF00000000;
    if (v105 == 9) {
      int v106 = 3;
    }
    else {
      int v106 = 19;
    }
    *(_WORD *)&v162[8] = -1;
    *(void *)&v162[20] = 0;
    *(void *)&v162[28] = 0;
    if (v105 == 1) {
      int v107 = 2;
    }
    else {
      int v107 = v106;
    }
    *(void *)&v162[12] = 0;
    *(_DWORD *)&v162[35] = 0;
    *(void *)&v162[40] = 0xFFFFFFFF00000000;
    LOBYTE(v163) = 0;
    *(void *)((char *)&v163 + 4) = -1;
    BYTE12(v163) = 0;
    *(void *)&v169[12] = -1;
    *(_DWORD *)&v169[4] = -1;
    v169[8] = -1;
    *(void *)&v169[20] = 0x7FFFFFFFLL;
    v169[28] = 0;
    *(_WORD *)&v169[30] = -1;
    *(void *)&long long v170 = 0xFFFFFFFF7FFFFFFFLL;
    __int16 v171 = 0;
    HIDWORD(v170) = 0;
    if (gnss::GnssAdaptDevice::Ga11_23GetCPSession(*(void *)(v3 + 128), *(void *)(v3 + 136), *(_DWORD *)v2, (uint64_t)v162))
    {
      LODWORD(v164) = *(_DWORD *)v2;
      BYTE4(v164) = *(unsigned char *)(v2 + 4);
      BYTE5(v164) = *(unsigned char *)(v2 + 165204);
      *((void *)&v164 + 1) = *(void *)(v2 + 8);
      long long v108 = *(_OWORD *)(v2 + 165224);
      long long v165 = *(_OWORD *)(v2 + 165208);
      long long v166 = v108;
      long long v167 = *(_OWORD *)(v2 + 165240);
      int v109 = *(_DWORD *)(v2 + 165260);
      LODWORD(v168) = *(_DWORD *)(v2 + 165256);
      DWORD1(v168) = v109;
      *(_DWORD *)uint64_t v169 = *(_DWORD *)(v2 + 165272);
      *((void *)&v168 + 1) = *(void *)(v2 + 165264);
      int v110 = *(_DWORD *)&v162[40];
      DWORD2(v170) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v110;
      int v111 = *(_DWORD *)v2;
      uint64_t v112 = *(void *)(v3 + 128);
      uint64_t v113 = *(void *)(v3 + 136) - v112;
      if (v113)
      {
        uint64_t v114 = (unsigned __int128)(v113 * (__int128)0x5397829CBC14E5E1) >> 64;
        unint64_t v115 = (v114 >> 6) + ((unint64_t)v114 >> 63);
        if (v115 <= 1) {
          uint64_t v116 = 1;
        }
        else {
          uint64_t v116 = (v114 >> 6) + ((unint64_t)v114 >> 63);
        }
        if (*(_DWORD *)(v112 + 52) == v111)
        {
          unint64_t v117 = 0;
LABEL_147:
          if (v117 < v115)
          {
            long long v118 = v163;
            uint64_t v119 = v112 + 196 * v117;
            *(_OWORD *)(v119 + 32) = *(_OWORD *)&v162[32];
            *(_OWORD *)(v119 + 48) = v118;
            long long v120 = v167;
            *(_OWORD *)(v119 + 96) = v166;
            *(_OWORD *)(v119 + 112) = v120;
            long long v121 = v165;
            *(_OWORD *)(v119 + 64) = v164;
            *(_OWORD *)(v119 + 80) = v121;
            *(_WORD *)(v119 + 192) = v171;
            long long v122 = v170;
            *(_OWORD *)(v119 + 160) = *(_OWORD *)&v169[16];
            *(_OWORD *)(v119 + 176) = v122;
            long long v123 = *(_OWORD *)v169;
            *(_OWORD *)(v119 + 128) = v168;
            *(_OWORD *)(v119 + 144) = v123;
            long long v124 = *(_OWORD *)&v162[16];
            *(_OWORD *)uint64_t v119 = *(_OWORD *)v162;
            *(_OWORD *)(v119 + 16) = v124;
            int v111 = *(_DWORD *)v2;
          }
        }
        else
        {
          unint64_t v117 = 0;
          char v127 = (int *)(v112 + 248);
          uint64_t v128 = v116 - 1;
          while (v128 != v117)
          {
            int v129 = *v127;
            v127 += 49;
            ++v117;
            if (v129 == v111)
            {
              if (v117 < v115) {
                goto LABEL_147;
              }
              break;
            }
          }
        }
      }
      gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v3, v111, 0, v107);
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v184, 0x410uLL);
        uint64_t v125 = mach_continuous_time();
        unsigned __int16 v126 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125), "ADP", 69, "Ga10_29InvokeDBHSummaryReport", 2052, *(_DWORD *)v2);
        LbsOsaTrace_WriteLog(0x18u, (char *)v184, v126, 0, 1);
      }
      gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v3, *(_DWORD *)v2, 0, v107);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(v184, 0x410uLL);
      uint64_t v130 = mach_continuous_time();
      unsigned __int16 v131 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v130), "ADP", 68, "Ga10_28SendMeasurementsReportWithEstimate");
      LbsOsaTrace_WriteLog(0x18u, (char *)v184, v131, 5, 1);
    }
    goto LABEL_159;
  }
  if (v185[3])
  {
    LODWORD(v184[0]) = 0;
    memset(&v184[1], 255, 20);
    uint64_t v12 = 28;
    BYTE4(v184[0]) = 0;
    do
    {
      unsigned __int16 v13 = (char *)v184 + v12;
      *(_WORD *)unsigned __int16 v13 = 0x7FFF;
      *(_DWORD *)(v13 + 2) = -1;
      *(_DWORD *)(v13 + 5) = -1;
      *(void *)(v13 + 12) = 0xFFFFFFFF00000004;
      v13[20] = -1;
      v12 += 24;
    }
    while (v13 + 24 != (char *)&v184[51] + 4);
    HIDWORD(v184[51]) = 0;
    v184[52] = -1;
    LODWORD(v184[53]) = 33619967;
    WORD2(v184[53]) = -1;
    HIDWORD(v184[56]) = -1;
    LOBYTE(v184[57]) = -1;
    memset(&v184[54], 255, 17);
    BYTE4(v184[57]) = -1;
    *(_DWORD *)((char *)&v184[58] + 7) = -1;
    v184[58] = -1;
    LODWORD(v184[60]) = 4;
    *(unint64_t *)((char *)&v184[60] + 4) = -1;
    LODWORD(v184[62]) = 0;
    HIDWORD(v184[65]) = -1;
    v184[66] = -1;
    memset(&v184[63], 255, 18);
    LOBYTE(v184[67]) = -1;
    HIDWORD(v184[68]) = -1;
    v184[69] = -1;
    *(unint64_t *)((char *)&v184[67] + 2) = -1;
    LOWORD(v184[70]) = -1;
    HIDWORD(v184[70]) = -1;
    LOWORD(v184[71]) = -1;
    LODWORD(v184[74]) = -1;
    *(unint64_t *)((char *)&v184[71] + 4) = -1;
    *(unint64_t *)((char *)&v184[72] + 4) = -1;
    WORD2(v184[73]) = -1;
    WORD2(v184[74]) = -129;
    LODWORD(v184[75]) = -1;
    LOBYTE(v184[76]) = -1;
    HIDWORD(v184[76]) = 5;
    LOWORD(v184[77]) = -1;
    BYTE2(v184[77]) = -1;
    uint64_t v14 = 620;
    do
    {
      unint64_t v15 = (char *)v184 + v14;
      *(_DWORD *)unint64_t v15 = -32769;
      void v15[4] = -1;
      *((void *)v15 + 1) = 0xFF00000004;
      *((_WORD *)v15 + 8) = -1;
      *((_DWORD *)v15 + 5) = -1;
      v14 += 24;
    }
    while (v15 + 24 != (char *)&v184[173] + 4);
    BYTE4(v184[174]) = 0;
    LODWORD(v184[174]) = -1;
    LODWORD(v184[1]) = 0;
    if (!v2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(&block, 0x410uLL);
        uint64_t v40 = mach_continuous_time();
        unsigned __int16 v41 = snprintf((char *)&block, 0x40FuLL, "%10u %s%c %s: #%04hx MSA Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "Ga10_01SendMeasurementsReport", 513);
        LbsOsaTrace_WriteLog(0x18u, (char *)&block, v41, 0, 1);
      }
      LODWORD(v184[0]) = -2;
      uint64_t v42 = *(NSObject **)(v3 + 296);
      v175[0] = MEMORY[0x263EF8330];
      v175[1] = 1174405120;
      v175[2] = ___ZN4gnss15GnssAdaptDevice29Ga10_01SendMeasurementsReportEPK15s_gnsCP_MeasRes_block_invoke;
      v175[3] = &__block_descriptor_tmp_117_0;
      unsigned __int16 v43 = v176;
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v176, (uint64_t)v185);
      memcpy(v177, v184, sizeof(v177));
      dispatch_async(v42, v175);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(&block, 0x410uLL);
        uint64_t v44 = mach_continuous_time();
        unsigned __int16 v45 = snprintf((char *)&block, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 68, "Ga10_01SendMeasurementsReport");
        LbsOsaTrace_WriteLog(0x18u, (char *)&block, v45, 5, 1);
      }
      goto LABEL_65;
    }
    int v16 = *(_DWORD *)v2;
    LODWORD(v184[2]) = *(_DWORD *)v2;
    uint64_t v17 = *(void *)(v3 + 128);
    uint64_t v18 = *(void *)(v3 + 136) - v17;
    if (v18)
    {
      unint64_t v19 = v18 / 196;
      if (v19 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v19;
      }
      if (*(_DWORD *)(v17 + 52) == v16)
      {
        unint64_t v21 = 0;
LABEL_25:
        if (v21 < v19)
        {
          uint64_t v22 = v17 + 196 * v21;
          int v24 = *(_DWORD *)(v22 + 40);
          int v23 = *(_DWORD *)(v22 + 44);
          *(_DWORD *)(*(void *)(v3 + 128) + 196 * v21 + 184) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                                  * (double)mach_continuous_time())
                                                               - v24;
LABEL_51:
          HIDWORD(v184[1]) = v23;
          LODWORD(v184[174]) = 0;
          if (*(_DWORD *)(v2 + 32) == 1)
          {
            if (*(unsigned char *)(v2 + 16))
            {
              BYTE4(v184[0]) = 1;
              BYTE4(v184[174]) = *(unsigned char *)(v2 + 36);
              gnss::GnssAdaptDevice::Ga10_00ProcessGPSMeasurements(v2, (uint64_t)&v184[2] + 4, v184[1]);
            }
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(&block, 0x410uLL);
              uint64_t v49 = mach_continuous_time();
              unsigned __int16 v50 = snprintf((char *)&block, 0x40FuLL, "%10u %s%c %s: #%04hx Not enough Satellites,Err status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 69, "Ga10_01SendMeasurementsReport", 769, *(unsigned __int8 *)(v2 + 32));
              LbsOsaTrace_WriteLog(0x18u, (char *)&block, v50, 0, 1);
            }
            LODWORD(v184[0]) = -4;
            BYTE4(v184[0]) |= 4u;
          }
          unsigned __int16 v51 = *(NSObject **)(v3 + 296);
          v172[0] = MEMORY[0x263EF8330];
          v172[1] = 1174405120;
          v172[2] = ___ZN4gnss15GnssAdaptDevice29Ga10_01SendMeasurementsReportEPK15s_gnsCP_MeasRes_block_invoke_119;
          v172[3] = &__block_descriptor_tmp_123;
          unsigned __int16 v43 = v173;
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100]((uint64_t)v173, (uint64_t)v185);
          memcpy(v174, v184, sizeof(v174));
          dispatch_async(v51, v172);
          int v52 = *(_DWORD *)(v2 + 32);
          if (v52 == 9) {
            int v53 = 3;
          }
          else {
            int v53 = 18;
          }
          if (v52 == 1) {
            int v54 = 2;
          }
          else {
            int v54 = v53;
          }
          gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v3, v184[2], 0, v54);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(&block, 0x410uLL);
            uint64_t v55 = mach_continuous_time();
            unsigned __int16 v56 = snprintf((char *)&block, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "ADP", 68, "Ga10_01SendMeasurementsReport");
            LbsOsaTrace_WriteLog(0x18u, (char *)&block, v56, 5, 1);
          }
LABEL_65:
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v43);
          return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v185);
        }
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v46 = (int *)(v17 + 248);
        uint64_t v47 = v20 - 1;
        while (v47 != v21)
        {
          int v48 = *v46;
          v46 += 49;
          ++v21;
          if (v48 == v16)
          {
            if (v21 < v19) {
              goto LABEL_25;
            }
            break;
          }
        }
      }
    }
    int v23 = -1;
    goto LABEL_51;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(v184, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: #%04hx MeasRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "Ga10_01SendMeasurementsReport", 258);
    LbsOsaTrace_WriteLog(0x18u, (char *)v184, v35, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(v184, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    unsigned __int16 v37 = snprintf((char *)v184, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "Ga10_01SendMeasurementsReport");
    LbsOsaTrace_WriteLog(0x18u, (char *)v184, v37, 5, 1);
  }
  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v185);
}

void sub_22BA087A8(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100]((void *)(v1 - 152));
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](&STACK[0x16F8]);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice29Ga10_01SendMeasurementsReportEPK15s_gnsCP_MeasRes_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  size_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

size_t ___ZN4gnss15GnssAdaptDevice29Ga10_01SendMeasurementsReportEPK15s_gnsCP_MeasRes_block_invoke_119(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasRep Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "Ga10_01SendMeasurementsReport_block_invoke", v3);
    return LbsOsaTrace_WriteLog(0x18u, __str, v6, 4, 1);
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice41Ga10_28SendMeasurementsReportWithEstimateEPK15s_gnsCP_MeasRes_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

uint64_t __copy_helper_block_e8_32c94_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane29MeasurementReportWithEstimateEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c94_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane29MeasurementReportWithEstimateEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v1);
}

uint64_t gnss::GnssAdaptDevice::Ga11_23GetCPSession(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2 != a1)
  {
    unint64_t v4 = (a2 - a1) / 196;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = (a2 - a1) / 196;
    }
    if (*(_DWORD *)(a1 + 52) == a3)
    {
      unint64_t v6 = 0;
LABEL_7:
      if (v6 < v4)
      {
        uint64_t v7 = a1 + 196 * v6;
        int v41 = *(_DWORD *)(v7 + 4);
        __int16 v42 = *(_WORD *)(v7 + 8);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)(v7 + 10);
        *(_OWORD *)&v46[13] = *(_OWORD *)(v7 + 23);
        char v8 = *(unsigned char *)(v7 + 39);
        char v9 = *(unsigned char *)(v7 + 48);
        __int16 v39 = *(_WORD *)(v7 + 49);
        char v40 = *(unsigned char *)(v7 + 51);
        char v10 = *(unsigned char *)(v7 + 60);
        char v38 = *(unsigned char *)(v7 + 63);
        __int16 v37 = *(_WORD *)(v7 + 61);
        int v11 = *(_DWORD *)(v7 + 64);
        int v12 = *(_DWORD *)(v7 + 68);
        *(_OWORD *)unsigned __int16 v45 = *(_OWORD *)(v7 + 88);
        *(void *)&v45[14] = *(void *)(v7 + 102);
        __int16 v13 = *(_WORD *)(v7 + 110);
        char v14 = *(unsigned char *)(v7 + 112);
        __int16 v35 = *(_WORD *)(v7 + 113);
        char v36 = *(unsigned char *)(v7 + 115);
        int v15 = *(_DWORD *)(v7 + 116);
        uint64_t v16 = *(void *)(v7 + 120);
        int v17 = *(_DWORD *)(v7 + 136);
        char v18 = *(unsigned char *)(v7 + 140);
        int v44 = *(_DWORD *)(v7 + 149);
        uint64_t v43 = *(void *)(v7 + 141);
        char v34 = *(unsigned char *)(v7 + 155);
        __int16 v33 = *(_WORD *)(v7 + 153);
        uint64_t v19 = *(void *)(v7 + 156);
        int v20 = *(_DWORD *)(v7 + 172);
        __int16 v32 = *(_WORD *)(v7 + 192);
        uint64_t v31 = *(void *)(v7 + 184);
        *(_DWORD *)a4 = *(_DWORD *)v7;
        uint64_t v21 = *(void *)(v7 + 40);
        uint64_t v22 = *(void *)(v7 + 52);
        long long v23 = *(_OWORD *)(v7 + 72);
        uint64_t v24 = *(void *)(v7 + 128);
        uint64_t v25 = *(void *)(v7 + 164);
        uint64_t v26 = *(void *)(v7 + 176);
        *(_DWORD *)(a4 + 4) = v41;
        *(_WORD *)(a4 + 8) = v42;
        *(_OWORD *)(a4 + 10) = *(_OWORD *)v46;
        *(_OWORD *)(a4 + 23) = *(_OWORD *)&v46[13];
        *(unsigned char *)(a4 + 39) = v8;
        *(void *)(a4 + 40) = v21;
        *(unsigned char *)(a4 + 48) = v9;
        *(_WORD *)(a4 + 49) = v39;
        *(unsigned char *)(a4 + 51) = v40;
        *(void *)(a4 + 52) = v22;
        *(unsigned char *)(a4 + 60) = v10;
        *(unsigned char *)(a4 + 63) = v38;
        *(_WORD *)(a4 + 61) = v37;
        *(_DWORD *)(a4 + 64) = v11;
        *(_DWORD *)(a4 + 68) = v12;
        *(_OWORD *)(a4 + 72) = v23;
        *(void *)(a4 + 102) = *(void *)&v45[14];
        *(_OWORD *)(a4 + 88) = *(_OWORD *)v45;
        *(_WORD *)(a4 + 110) = v13;
        *(unsigned char *)(a4 + 112) = v14;
        *(unsigned char *)(a4 + 115) = v36;
        *(_WORD *)(a4 + 113) = v35;
        *(_DWORD *)(a4 + 116) = v15;
        *(void *)(a4 + 120) = v16;
        *(void *)(a4 + 128) = v24;
        *(_DWORD *)(a4 + 136) = v17;
        *(unsigned char *)(a4 + 140) = v18;
        *(_DWORD *)(a4 + 149) = v44;
        *(void *)(a4 + 141) = v43;
        *(unsigned char *)(a4 + 155) = v34;
        *(_WORD *)(a4 + 153) = v33;
        *(void *)(a4 + 156) = v19;
        *(void *)(a4 + 164) = v25;
        *(_DWORD *)(a4 + 172) = v20;
        *(void *)(a4 + 176) = v26;
        *(_WORD *)(a4 + 192) = v32;
        uint64_t result = 1;
        *(void *)(a4 + 184) = v31;
        return result;
      }
    }
    else
    {
      unint64_t v6 = 0;
      unsigned __int16 v28 = (int *)(a1 + 248);
      uint64_t v29 = v5 - 1;
      while (v29 != v6)
      {
        int v30 = *v28;
        v28 += 49;
        ++v6;
        if (v30 == a3)
        {
          if (v6 < v4) {
            goto LABEL_7;
          }
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t gnss::GnssAdaptDevice::Ga10_27GetCDMAKValueForUncertanity(gnss::GnssAdaptDevice *this)
{
  int v1 = (int)this;
  uint64_t v2 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  while (1)
  {
    double v3 = dbl_22BB44750[v2];
    if (v3 > (double)this) {
      break;
    }
    if (++v2 == 30)
    {
      LOBYTE(v2) = 31;
      return v2;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GADUncInMts,%u,CDMAK,%d,PosUncMts,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga10_27GetCDMAKValueForUncertanity", v1, v2, v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 4, 1);
  }
  return v2;
}

size_t ___ZN4gnss15GnssAdaptDevice41Ga10_28SendMeasurementsReportWithEstimateEPK15s_gnsCP_MeasRes_block_invoke_136(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasRepWithEstimate Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "Ga10_28SendMeasurementsReportWithEstimate_block_invoke", v3);
    return LbsOsaTrace_WriteLog(0x18u, __str, v6, 4, 1);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane14PositionReportEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c79_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane14PositionReportEEEE(uint64_t a1)
{
  int v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v1);
}

void *gnss::GnssAdaptDevice::Ga10_17InvokePVTMCbForE911(uint64_t a1, int *a2)
{
  v47[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 312);
  if (a2)
  {
    if (v47[3])
    {
      char v4 = *((unsigned char *)a2 + 76);
      int v5 = a2[18];
      uint64_t v6 = *((void *)a2 + 7);
      int v7 = a2[13];
      char v8 = *((unsigned char *)a2 + 48);
      __int16 v9 = *((_WORD *)a2 + 23);
      int v10 = *a2;
      int v11 = a2[1];
      int v12 = a2[27];
      uint64_t v13 = *(void *)(a2 + 23);
      char v14 = *(NSObject **)(a1 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice26Ga10_17InvokePVTMCbForE911EPK15s_gnsCP_PosnRes_block_invoke;
      block[3] = &__block_descriptor_tmp_306;
      void block[4] = a1;
      int v25 = v10;
      int v26 = v11;
      long long v15 = *(_OWORD *)(a2 + 2);
      *(void *)&v28[14] = *(void *)((char *)a2 + 38);
      long long v16 = *(_OWORD *)(a2 + 6);
      long long v27 = v15;
      *(_OWORD *)unsigned __int16 v28 = v16;
      __int16 v29 = v9;
      char v30 = v8;
      __int16 v17 = *(_WORD *)((char *)a2 + 49);
      char v32 = *((unsigned char *)a2 + 51);
      __int16 v31 = v17;
      int v33 = v7;
      uint64_t v34 = v6;
      uint64_t v35 = *((void *)a2 + 8);
      int v36 = v5;
      char v37 = v4;
      uint64_t v38 = *(void *)((char *)a2 + 77);
      int v39 = *(int *)((char *)a2 + 85);
      __int16 v40 = *(_WORD *)((char *)a2 + 89);
      char v41 = *((unsigned char *)a2 + 91);
      uint64_t v42 = v13;
      uint64_t v43 = *(void *)(a2 + 25);
      int v44 = v12;
      uint64_t v45 = *((void *)a2 + 14);
      std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v47);
      dispatch_async(v14, block);
      std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v24);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM Cb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 87, "Ga10_17InvokePVTMCbForE911", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 2, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx p_GnsPosnFix\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga10_17InvokePVTMCbForE911", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
  }
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v47);
}

void sub_22BA093BC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

size_t ___ZN4gnss15GnssAdaptDevice25Ga10_02SendPositionReportEPK15s_gnsCP_PosnRes_block_invoke_172(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64) == 1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fw Accepted MSB Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga10_02SendPositionReport_block_invoke");
    int v6 = 4;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Fw MSB Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga10_02SendPositionReport_block_invoke", 770);
    int v6 = 0;
  }
  return LbsOsaTrace_WriteLog(0x18u, __str, v5, v6, 1);
}

size_t ___ZN4gnss15GnssAdaptDevice23Ga10_03SendAidingReportEP14s_gnsCP_AidReq_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64) == 1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: FWAccepted AidReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga10_03SendAidingReport_block_invoke");
    int v6 = 4;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FW rejected AidReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga10_03SendAidingReport_block_invoke", 515);
    int v6 = 0;
  }
  return LbsOsaTrace_WriteLog(0x18u, __str, v5, v6, 1);
}

uint64_t __copy_helper_block_e8_32c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v1);
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke()
{
  return gnss::GnssAdaptDevice::Ga10_01SendMeasurementsReport();
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2(uint64_t a1)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v12, v1 + 760);
  v11[3] = 0;
  if (v12[3])
  {
    *(void *)&__src[1] = -1;
    WORD4(__src[1]) = 0;
    BYTE10(__src[1]) = -1;
    *(void *)((char *)&__src[1] + 12) = -1;
    *(void *)((char *)&__src[2] + 3) = -1;
    *(void *)((char *)&__src[2] + 12) = 0xFFFFFFFF00000004;
    WORD2(__src[3]) = -1;
    BYTE6(__src[3]) = -1;
    DWORD2(__src[3]) = -1;
    WORD6(__src[3]) = 0;
    *(void *)&__src[4] = 0x7FFFFFFF000000FFLL;
    DWORD2(__src[4]) = 0x7FFFFFFF;
    BYTE12(__src[4]) = -1;
    __src[5] = xmmword_22BB44710;
    *(void *)&__src[6] = 0xFFFFFFFF7FFFFFFFLL;
    *(_DWORD *)((char *)&__src[6] + 7) = -1;
    *(void *)((char *)&__src[6] + 12) = 0x8000000080000000;
    WORD4(__src[7]) = -1;
    DWORD1(__src[7]) = -1;
    *(void *)&long long v2 = 0x8000000080000000;
    *((void *)&v2 + 1) = 0x8000000080000000;
    *(_OWORD *)((char *)&__src[7] + 12) = v2;
    WORD6(__src[8]) = -1;
    LOBYTE(__src[9]) = -1;
    memset_pattern16((char *)&__src[9] + 4, &unk_22BB44740, 0x78uLL);
    BYTE12(__src[16]) = -1;
    LODWORD(__src[17]) = 255;
    *(void *)((char *)&__src[18] + 4) = -1;
    *(void *)((char *)&__src[17] + 4) = -1;
    *(void *)((char *)&__src[17] + 11) = -1;
    HIDWORD(__src[18]) = 0;
    *(void *)&__src[19] = 0;
    *(void *)&__src[0] = 4294967294;
    *((void *)&__src[0] + 1) = 0xFFFFFFFF00000000;
    uint64_t v3 = *(NSObject **)(v1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_3;
    block[3] = &__block_descriptor_tmp_188;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v12);
    memcpy(v9, __src, sizeof(v9));
    dispatch_async(v3, block);
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v8);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__src, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)__src, 0x40FuLL, "%10u %s%c %s: #%04hx PosRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse_block_invoke_2", 258);
    LbsOsaTrace_WriteLog(0x18u, (char *)__src, v5, 0, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v12);
}

void sub_22BA09AAC(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100]((void *)(v1 - 120));
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_190(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    LODWORD(__src[0]) = 0;
    BYTE4(__src[0]) = 0;
    __src[1] = -1;
    LODWORD(__src[2]) = -1;
    WORD2(__src[2]) = 0;
    *(_DWORD *)((char *)&__src[2] + 6) = -1;
    BYTE2(__src[3]) = -1;
    *(void *)((char *)&__src[3] + 3) = 0;
    *(void *)((char *)&__src[4] + 1) = 0;
    BYTE1(__src[5]) = -1;
    *(void *)((char *)&__src[5] + 2) = 0;
    long long v2 = &__src[13];
    __src[6] = 0;
    uint64_t v3 = 112;
    LOBYTE(__src[7]) = -1;
    uint64_t v4 = 262;
    BYTE4(__src[7]) = 0;
    do
    {
      *(_DWORD *)long long v2 = 5;
      *((_WORD *)v2 + 2) = 0;
      uint64_t v5 = v3;
      *((unsigned char *)v2 + 6) = -1;
      do
      {
        int v6 = (char *)__src + v5;
        *int v6 = -1;
        *((_DWORD *)v6 + 1) = -1;
        v5 += 8;
      }
      while (v6 + 8 != (char *)(v2 + 16));
      *((_DWORD *)v2 + 32) = -1;
      *((_WORD *)v2 + 66) = -1;
      *(_DWORD *)((char *)v2 + 134) = -256;
      *(uint64_t *)((char *)v2 + 138) = 0;
      v2[18] = 0;
      *((_DWORD *)v2 + 38) = -1;
      uint64_t v7 = v4;
      *((unsigned char *)v2 + 156) = -1;
      do
      {
        char v8 = (char *)__src + v7;
        *char v8 = -1;
        *((_WORD *)v8 + 1) = -1;
        v7 += 4;
      }
      while (v8 + 4 != (char *)v2 + 218);
      *(_DWORD *)((char *)v2 + 218) = -1;
      v2 += 28;
      v3 += 224;
      v4 += 224;
    }
    while (v2 != &v17);
    __src[1] = 0xFFFFFFFF00000000;
    LODWORD(__src[0]) = -2;
    uint64_t v9 = *(NSObject **)(v1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2_192;
    block[3] = &__block_descriptor_tmp_195;
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v14, a1 + 40);
    memcpy(v15, __src, sizeof(v15));
    dispatch_async(v9, block);
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v14);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__src, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf((char *)__src, 0x40FuLL, "%10u %s%c %s: #%04hx AidRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse_block_invoke", 258);
      return (void *)LbsOsaTrace_WriteLog(0x18u, (char *)__src, v12, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2_192(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

uint64_t __copy_helper_block_e8_40c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c87_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency6Cplane22AssistanceNeededReportEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v1);
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_199()
{
  return gnss::GnssAdaptDevice::Ga10_01SendMeasurementsReport();
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2_201(uint64_t a1)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga10_02SendPositionReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v146, v2 + 760);
  if (!v146[3])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga10_02SendPositionReport", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga10_02SendPositionReport");
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    }
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v146);
  }
  uint64_t v5 = (int *)(a1 + 40);
  *(void *)__src = 0;
  *(void *)&__src[16] = -1;
  *(_WORD *)&__src[24] = 0;
  __src[26] = -1;
  *(void *)&__src[28] = -1;
  *(void *)&__src[35] = -1;
  *(void *)&__src[44] = 0xFFFFFFFF00000004;
  *(_WORD *)&__src[52] = -1;
  __src[54] = -1;
  int v6 = -1;
  *(_DWORD *)&__src[56] = -1;
  *(_WORD *)&__src[60] = 0;
  *(void *)&__src[64] = 0x7FFFFFFF000000FFLL;
  *(_DWORD *)&__src[72] = 0x7FFFFFFF;
  __src[76] = -1;
  *(_OWORD *)&__src[80] = xmmword_22BB44710;
  *(void *)&__src[96] = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)&__src[103] = -1;
  *(void *)&__src[108] = 0x8000000080000000;
  *(_DWORD *)&__src[116] = -1;
  *(_WORD *)&__src[120] = -1;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)&__src[124] = v7;
  *(_WORD *)&__src[140] = -1;
  __src[144] = -1;
  memset_pattern16(&__src[148], &unk_22BB44740, 0x78uLL);
  __src[268] = -1;
  *(_DWORD *)&__src[272] = 255;
  *(void *)&__src[292] = -1;
  *(void *)&__src[276] = -1;
  *(void *)&__src[283] = -1;
  *(_DWORD *)&__src[300] = 0;
  *(void *)&__src[304] = 0;
  *(void *)&__src[8] = 0xFFFFFFFF00000000;
  uint64_t v8 = *(void *)(v2 + 128);
  uint64_t v9 = *(void *)(v2 + 136) - v8;
  if (v9)
  {
    int v10 = *v5;
    unint64_t v11 = v9 / 196;
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
    if (*(_DWORD *)(v8 + 52) == v10)
    {
      unint64_t v13 = 0;
LABEL_10:
      if (v13 < v11)
      {
        int v6 = *(_DWORD *)(v8 + 196 * v13 + 44);
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v18 = (int *)(v8 + 248);
      uint64_t v19 = v12 - 1;
      while (v19 != v13)
      {
        int v20 = *v18;
        v18 += 49;
        ++v13;
        if (v20 == v10)
        {
          if (v13 < v11) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
    int v6 = -1;
  }
LABEL_21:
  *(_DWORD *)&__src[12] = v6;
  if (*(_DWORD *)(a1 + 60) == 1) {
    gnss::GnssAdaptDevice::Ga10_17InvokePVTMCbForE911(v2, (int *)(a1 + 40));
  }
  if (!*(unsigned char *)(a1 + 44))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga10_02SendPositionReport");
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
    }
    return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v146);
  }
  *(unsigned char *)(v2 + 1024) = 0;
  *(_DWORD *)&__src[16] = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 60) != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v31 = mach_continuous_time();
      unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Not enough Satellites,Err status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "Ga10_02SendPositionReport", 769, *(unsigned __int8 *)(a1 + 60));
      LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
    }
    *(_DWORD *)__src = -4;
    *(_DWORD *)&__src[4] |= 8u;
    goto LABEL_161;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Pos Avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "Ga10_02SendPositionReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v22, 4, 1);
  }
  *(_DWORD *)&__src[20] = *(_DWORD *)(a1 + 124);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS ToW,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 73, "Ga10_02SendPositionReport", *(_DWORD *)&__src[20]);
    LbsOsaTrace_WriteLog(0x18u, __str, v24, 4, 1);
  }
  if (*(unsigned __int8 *)(a1 + 128) != 255) {
    __src[26] = *(unsigned char *)(a1 + 128);
  }
  if (*(_DWORD *)&__src[12] == 2 && *(_DWORD *)(a1 + 144) == 1)
  {
    int v25 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)&__src[32] = 1;
    *(_DWORD *)&__src[36] = v25;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS ToD,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "Ga10_02SendPositionReport", *(_DWORD *)&__src[36]);
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
    }
    if (*(unsigned __int16 *)(a1 + 136) != 0xFFFF) {
      *(_WORD *)&__src[40] = *(_WORD *)(a1 + 136);
    }
    if (*(unsigned __int8 *)(a1 + 138) != 255) {
      __src[42] = *(unsigned char *)(a1 + 138);
    }
  }
  int v28 = *(_DWORD *)(a1 + 64);
  if (v28 == 2)
  {
    *(_DWORD *)&__src[28] = 1;
  }
  else if (v28 == 1)
  {
    *(_DWORD *)&__src[28] = 0;
  }
  else
  {
    *(_DWORD *)&__src[28] = -1;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Fix Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 87, "Ga10_02SendPositionReport", 515, *(_DWORD *)(a1 + 64));
      LbsOsaTrace_WriteLog(0x18u, __str, v34, 2, 1);
    }
  }
  int v35 = *(_DWORD *)(a1 + 68);
  switch(v35)
  {
    case 0:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Not avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v37, 4, 1);
      }
      break;
    case 1:
      int v47 = *(_DWORD *)(a1 + 72);
      int v46 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)&__src[64] = 0;
      *(_DWORD *)&__src[124] = v46;
      if (v47 == 2) {
        *(_DWORD *)&__src[124] = v46 | 0x800000;
      }
      *(_DWORD *)&__src[128] = *(_DWORD *)(a1 + 80);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v48 = mach_continuous_time();
        unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid Pt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v49, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v50 = mach_continuous_time();
        unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[124], *(_DWORD *)&__src[128]);
        LbsOsaTrace_WriteLog(0x18u, __str, v51, 5, 1);
      }
      break;
    case 2:
      int v53 = *(_DWORD *)(a1 + 72);
      int v52 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)&__src[64] = 1;
      *(_DWORD *)&__src[68] = v52;
      if (v53 == 2) {
        *(_DWORD *)&__src[68] = v52 | 0x800000;
      }
      *(_DWORD *)&__src[72] = *(_DWORD *)(a1 + 80);
      __src[76] = *(unsigned char *)(a1 + 86);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v54 = mach_continuous_time();
        unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid Pt Uncert Circle\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v55, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v56 = mach_continuous_time();
        unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d,UncRad,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[68], *(_DWORD *)&__src[72], __src[76]);
        LbsOsaTrace_WriteLog(0x18u, __str, v57, 5, 1);
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_61;
    case 4:
      int v59 = *(_DWORD *)(a1 + 72);
      int v58 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)&__src[64] = 3;
      *(_DWORD *)&__src[80] = v58;
      if (v59 == 2) {
        *(_DWORD *)&__src[80] = v58 | 0x800000;
      }
      *(_DWORD *)&__src[84] = *(_DWORD *)(a1 + 80);
      *(_WORD *)&__src[88] = *(_WORD *)(a1 + 86);
      __src[90] = *(unsigned __int8 *)(a1 + 88) >> (*(_DWORD *)&__src[12] == 1);
      __src[91] = *(unsigned char *)(a1 + 97);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v60 = mach_continuous_time();
        unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid Pt Unc Elipse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v61, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v62 = mach_continuous_time();
        unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d,SemiMajAxis,%u,SemiMinAxis,%u,OrientAngle,%u,Conf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[80], *(_DWORD *)&__src[84], __src[88], __src[89], __src[90], __src[91]);
        LbsOsaTrace_WriteLog(0x18u, __str, v63, 5, 1);
      }
      break;
    case 8:
      int v65 = *(_DWORD *)(a1 + 72);
      int v64 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)&__src[64] = 8;
      *(_DWORD *)&__src[132] = v64;
      if (v65 == 2) {
        *(_DWORD *)&__src[132] = v64 | 0x800000;
      }
      *(_DWORD *)&__src[136] = *(_DWORD *)(a1 + 80);
      __int16 v66 = *(_WORD *)(a1 + 84);
      *(_WORD *)&__src[140] = v66;
      if (*(_DWORD *)(a1 + 92) == 2) {
        *(_WORD *)&__src[140] = v66 | 0x8000;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v67 = mach_continuous_time();
        unsigned __int16 v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid Pt Alt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v68, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v69 = mach_continuous_time();
        unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d,Alt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v69), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[132], *(_DWORD *)&__src[136], *(unsigned __int16 *)&__src[140]);
        LbsOsaTrace_WriteLog(0x18u, __str, v70, 5, 1);
      }
      break;
    default:
      if (v35 == 16)
      {
        int v72 = *(_DWORD *)(a1 + 72);
        int v71 = *(_DWORD *)(a1 + 76);
        *(_DWORD *)&__src[64] = 9;
        *(_DWORD *)&__src[92] = v71;
        if (v72 == 2) {
          *(_DWORD *)&__src[92] = v71 | 0x800000;
        }
        *(_DWORD *)&__src[96] = *(_DWORD *)(a1 + 80);
        *(_WORD *)&__src[102] = *(_WORD *)(a1 + 86);
        __src[104] = *(unsigned __int8 *)(a1 + 88) >> (*(_DWORD *)&__src[12] == 1);
        __src[106] = *(unsigned char *)(a1 + 97);
        __int16 v73 = *(_WORD *)(a1 + 84);
        *(_WORD *)&__src[100] = v73;
        if (*(_DWORD *)(a1 + 92) == 2) {
          *(_WORD *)&__src[100] = v73 | 0x8000;
        }
        __src[105] = *(unsigned char *)(a1 + 96);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v74 = mach_continuous_time();
          unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid pt Alt & Unc Eclipse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 73, "Ga10_02SendPositionReport");
          LbsOsaTrace_WriteLog(0x18u, __str, v75, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v76 = mach_continuous_time();
          unsigned __int16 v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d,SemiMajAxis,%u,SemiMinAxis,%u,OrientAngle,%u,Conf,%u,Alt,%u,UncAlt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v76), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[92], *(_DWORD *)&__src[96], __src[102], __src[103], __src[104], __src[106], *(unsigned __int16 *)&__src[100], __src[105]);
          LbsOsaTrace_WriteLog(0x18u, __str, v77, 5, 1);
        }
      }
      else if (v35 == 32)
      {
        int v39 = *(_DWORD *)(a1 + 72);
        int v38 = *(_DWORD *)(a1 + 76);
        *(_DWORD *)&__src[64] = 10;
        *(_DWORD *)&__src[108] = v38;
        if (v39 == 2) {
          *(_DWORD *)&__src[108] = v38 | 0x800000;
        }
        *(_DWORD *)&__src[112] = *(_DWORD *)(a1 + 80);
        *(_WORD *)&__src[116] = *(_DWORD *)(a1 + 100);
        __src[120] = *(unsigned char *)(a1 + 98);
        __src[119] = *(unsigned char *)(a1 + 99);
        __src[118] = *(unsigned char *)(a1 + 86);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v40 = mach_continuous_time();
          unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ShapeType Ellipsoid Arc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 73, "Ga10_02SendPositionReport");
          LbsOsaTrace_WriteLog(0x18u, __str, v41, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v42 = mach_continuous_time();
          unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%d,Long,%d,InnerRad,%u,IncludedAngle,%u,offsetAngle,%u,UncRad,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "Ga10_02SendPositionReport", *(_DWORD *)&__src[108], *(_DWORD *)&__src[112], *(unsigned __int16 *)&__src[116], __src[120], __src[119], __src[118]);
          LbsOsaTrace_WriteLog(0x18u, __str, v43, 5, 1);
        }
      }
      else
      {
LABEL_61:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v44 = mach_continuous_time();
          unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 69, "Ga10_02SendPositionReport", 515, *(_DWORD *)(a1 + 68));
          LbsOsaTrace_WriteLog(0x18u, __str, v45, 0, 1);
        }
      }
      break;
  }
  switch(*(_DWORD *)(a1 + 108))
  {
    case 0:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v78 = mach_continuous_time();
        unsigned __int16 v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: VelInfo not avlbl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v79, 4, 1);
      }
      break;
    case 1:
      *(_DWORD *)&__src[276] = *(_DWORD *)(a1 + 112);
      *(_DWORD *)&__src[272] = 0;
      *(_DWORD *)&__src[4] |= 4u;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v80 = mach_continuous_time();
        unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Vel Estimate is Hor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v81, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v82 = mach_continuous_time();
        unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bearing,%u,HSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 68, "Ga10_02SendPositionReport", *(unsigned __int16 *)&__src[276], *(unsigned __int16 *)&__src[278]);
        LbsOsaTrace_WriteLog(0x18u, __str, v83, 5, 1);
      }
      break;
    case 2:
      *(_DWORD *)&__src[272] = 1;
      *(_DWORD *)&__src[280] = *(_DWORD *)(a1 + 112);
      if (*(unsigned __int16 *)(a1 + 118) <= 0xFFu) {
        __src[284] = *(_WORD *)(a1 + 118);
      }
      if (*(unsigned __int8 *)(a1 + 116) != 255) {
        __src[285] = *(unsigned char *)(a1 + 116);
      }
      *(_DWORD *)&__src[4] |= 4u;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v84 = mach_continuous_time();
        unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Vel Estimate is Hor with Ver\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v85, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v86 = mach_continuous_time();
        unsigned __int16 v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bearing,%u,HSpeed,%u,VSpeed,%u,VSpeedDir,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "ADP", 68, "Ga10_02SendPositionReport", *(unsigned __int16 *)&__src[280], *(unsigned __int16 *)&__src[282], __src[284], __src[285]);
        LbsOsaTrace_WriteLog(0x18u, __str, v87, 5, 1);
      }
      break;
    case 4:
      *(_DWORD *)&__src[272] = 2;
      *(_DWORD *)&__src[286] = *(_DWORD *)(a1 + 112);
      if (*(unsigned __int16 *)(a1 + 120) <= 0xFFu) {
        __src[290] = *(_WORD *)(a1 + 120);
      }
      *(_DWORD *)&__src[4] |= 4u;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v90 = mach_continuous_time();
        unsigned __int16 v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Vel Estimate is Hor with Unc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v91, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v92 = mach_continuous_time();
        unsigned __int16 v93 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bearing,%u,HSpeed,%u,UncSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "ADP", 68, "Ga10_02SendPositionReport", *(unsigned __int16 *)&__src[286], *(unsigned __int16 *)&__src[288], __src[290]);
        LbsOsaTrace_WriteLog(0x18u, __str, v93, 5, 1);
      }
      break;
    case 8:
      *(_DWORD *)&__src[272] = 3;
      *(_DWORD *)&__src[292] = *(_DWORD *)(a1 + 112);
      if (*(unsigned __int16 *)(a1 + 118) <= 0xFFu) {
        __src[296] = *(_WORD *)(a1 + 118);
      }
      if (*(unsigned __int8 *)(a1 + 116) != 255) {
        __src[297] = *(unsigned char *)(a1 + 116);
      }
      if (*(unsigned __int16 *)(a1 + 120) <= 0xFFu) {
        __src[298] = *(_WORD *)(a1 + 120);
      }
      if (*(unsigned __int16 *)(a1 + 122) <= 0xFFu) {
        __src[299] = *(_WORD *)(a1 + 122);
      }
      *(_DWORD *)&__src[4] |= 4u;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v94 = mach_continuous_time();
        unsigned __int16 v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Vel Estimate is Hor with Ver and Uncert\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "ADP", 73, "Ga10_02SendPositionReport");
        LbsOsaTrace_WriteLog(0x18u, __str, v95, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v96 = mach_continuous_time();
        unsigned __int16 v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bearing,%u,HSpeed,%u,VSpeed,%u,VSpeedDir,%u,HUncSpeed,%u,VUncSpeed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "ADP", 68, "Ga10_02SendPositionReport", *(unsigned __int16 *)&__src[292], *(unsigned __int16 *)&__src[294], __src[296], __src[297], __src[298], __src[299]);
        LbsOsaTrace_WriteLog(0x18u, __str, v97, 5, 1);
      }
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v88 = mach_continuous_time();
        unsigned __int16 v89 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Velocity type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v88), "ADP", 69, "Ga10_02SendPositionReport", 515, *(_DWORD *)(a1 + 108));
        LbsOsaTrace_WriteLog(0x18u, __str, v89, 0, 1);
      }
      break;
  }
  char v98 = *(unsigned char *)(a1 + 45);
  if (v98)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v99 = mach_continuous_time();
      unsigned __int16 v100 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS Fix\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v99), "ADP", 73, "Ga10_02SendPositionReport");
      LbsOsaTrace_WriteLog(0x18u, __str, v100, 4, 1);
    }
    *(_DWORD *)&__src[300] |= 1u;
    *(_DWORD *)&__src[4] |= 1u;
    char v98 = *(unsigned char *)(a1 + 45);
  }
  if (v98 < 0)
  {
    uint64_t v101 = *(void *)(v2 + 128);
    uint64_t v102 = *(void *)(v2 + 136) - v101;
    if (v102)
    {
      int v103 = *v5;
      unint64_t v104 = v102 / 196;
      if (v104 <= 1) {
        uint64_t v105 = 1;
      }
      else {
        uint64_t v105 = v104;
      }
      if (*(_DWORD *)(v101 + 52) == v103)
      {
        unint64_t v106 = 0;
LABEL_143:
        if (v106 < v104)
        {
          BOOL v107 = *(unsigned __int8 *)(v101 + 196 * v106 + 48) != 0;
LABEL_150:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v111 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if (v107) {
              uint64_t v112 = 84;
            }
            else {
              uint64_t v112 = 70;
            }
            unsigned __int16 v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HELO enabled,%c\n", (unint64_t)v111, "ADP", 73, "Ga10_02SendPositionReport", v112);
            LbsOsaTrace_WriteLog(0x18u, __str, v113, 4, 1);
          }
          if (v107)
          {
            *(_DWORD *)&__src[300] |= 2u;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v114 = mach_continuous_time();
              unsigned __int16 v115 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HELO Fix\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v114), "ADP", 73, "Ga10_02SendPositionReport");
              LbsOsaTrace_WriteLog(0x18u, __str, v115, 4, 1);
            }
          }
          *(_DWORD *)&__src[4] |= 0x10u;
          goto LABEL_159;
        }
      }
      else
      {
        unint64_t v106 = 0;
        long long v108 = (int *)(v101 + 248);
        uint64_t v109 = v105 - 1;
        while (v109 != v106)
        {
          int v110 = *v108;
          v108 += 49;
          ++v106;
          if (v110 == v103)
          {
            if (v106 < v104) {
              goto LABEL_143;
            }
            break;
          }
        }
      }
    }
    BOOL v107 = 0;
    goto LABEL_150;
  }
LABEL_159:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v116 = mach_continuous_time();
    unsigned __int16 v117 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssMask,%u,RspType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v116), "ADP", 73, "Ga10_02SendPositionReport", *(unsigned __int8 *)(a1 + 45), *(_DWORD *)&__src[4]);
    LbsOsaTrace_WriteLog(0x18u, __str, v117, 4, 1);
  }
LABEL_161:
  *(void *)&__src[304] = gnss::GnssAdaptDevice::Ga06_18GetGnssSpoofingFlag((gnss::GnssAdaptDevice *)v2, *(_DWORD *)(a1 + 48));
  long long v118 = *(NSObject **)(v2 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice25Ga10_02SendPositionReportEPK15s_gnsCP_PosnRes_block_invoke_172;
  block[3] = &__block_descriptor_tmp_177;
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100]((uint64_t)v143, (uint64_t)v146);
  memcpy(v144, __src, sizeof(v144));
  dispatch_async(v118, block);
  uint64_t v119 = *(void *)(v2 + 128);
  uint64_t v120 = *(void *)(v2 + 136) - v119;
  if (v120)
  {
    unint64_t v121 = v120 / 196;
    if (v121 <= 1) {
      uint64_t v122 = 1;
    }
    else {
      uint64_t v122 = v121;
    }
    if (*(_DWORD *)(v119 + 52) == *(_DWORD *)&__src[16])
    {
      unint64_t v123 = 0;
LABEL_167:
      if (v123 < v121)
      {
        int v124 = *(_DWORD *)(v119 + 196 * v123 + 40);
        uint64_t v125 = mach_continuous_time();
        uint64_t v126 = *(void *)(v2 + 128) + 196 * v123;
        *(_DWORD *)(v126 + 184) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125) - v124;
        long long v127 = *(_OWORD *)v5;
        long long v128 = *(_OWORD *)(a1 + 56);
        long long v129 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)(v126 + 96) = *(_OWORD *)(a1 + 72);
        *(_OWORD *)(v126 + 112) = v129;
        *(_OWORD *)(v126 + 64) = v127;
        *(_OWORD *)(v126 + 80) = v128;
        long long v130 = *(_OWORD *)(a1 + 104);
        long long v131 = *(_OWORD *)(a1 + 120);
        long long v132 = *(_OWORD *)(a1 + 136);
        *(void *)(v126 + 176) = *(void *)(a1 + 152);
        *(_OWORD *)(v126 + 144) = v131;
        *(_OWORD *)(v126 + 160) = v132;
        *(_OWORD *)(v126 + 128) = v130;
      }
      int v133 = *(_DWORD *)(a1 + 60);
      if (v133 == 9) {
        int v134 = 3;
      }
      else {
        int v134 = 19;
      }
      if (v133 == 1) {
        int v135 = 2;
      }
      else {
        int v135 = v134;
      }
      gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v2, *(_DWORD *)(a1 + 40), 0, v135);
    }
    else
    {
      unint64_t v123 = 0;
      unint64_t v139 = (int *)(v119 + 248);
      uint64_t v140 = v122 - 1;
      while (v140 != v123)
      {
        int v141 = *v139;
        v139 += 49;
        ++v123;
        if (v141 == *(_DWORD *)&__src[16])
        {
          if (v123 < v121) {
            goto LABEL_167;
          }
          break;
        }
      }
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v136 = mach_continuous_time();
    unsigned __int16 v137 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v136), "ADP", 68, "Ga10_02SendPositionReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v137, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v143);
  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v146);
}

void sub_22BA0BCF0(_Unwind_Exception *a1)
{
}

void ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_3_203()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  v50[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(int **)(*(void *)(*(void *)(v0 + 32) + 8) + 24);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga10_03SendAidingReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)(v1 + 99));
  if (v50[3])
  {
    LODWORD(__src[0]) = 0;
    BYTE4(__src[0]) = 0;
    __src[1] = -1;
    LODWORD(__src[2]) = -1;
    WORD2(__src[2]) = 0;
    *(_DWORD *)((char *)&__src[2] + 6) = -1;
    BYTE2(__src[3]) = -1;
    *(void *)((char *)&__src[3] + 3) = 0;
    *(void *)((char *)&__src[4] + 1) = 0;
    BYTE1(__src[5]) = -1;
    *(void *)((char *)&__src[5] + 2) = 0;
    uint64_t v5 = &__src[13];
    __src[6] = 0;
    uint64_t v6 = 112;
    LOBYTE(__src[7]) = -1;
    uint64_t v7 = 262;
    BYTE4(__src[7]) = 0;
    do
    {
      *(_DWORD *)uint64_t v5 = 5;
      *((_WORD *)v5 + 2) = 0;
      uint64_t v8 = v6;
      *((unsigned char *)v5 + 6) = -1;
      do
      {
        uint64_t v9 = (char *)__src + v8;
        *uint64_t v9 = -1;
        *((_DWORD *)v9 + 1) = -1;
        v8 += 8;
      }
      while (v9 + 8 != (char *)(v5 + 16));
      *((_DWORD *)v5 + 32) = -1;
      *((_WORD *)v5 + 66) = -1;
      *(_DWORD *)((char *)v5 + 134) = -256;
      *(void *)((char *)v5 + 138) = 0;
      v5[18] = 0;
      *((_DWORD *)v5 + 38) = -1;
      uint64_t v10 = v7;
      *((unsigned char *)v5 + 156) = -1;
      do
      {
        unint64_t v11 = (char *)__src + v10;
        *unint64_t v11 = -1;
        *((_WORD *)v11 + 1) = -1;
        v10 += 4;
      }
      while (v11 + 4 != (char *)v5 + 218);
      *(_DWORD *)((char *)v5 + 218) = -1;
      v5 += 28;
      v6 += 224;
      v7 += 224;
    }
    while (v5 != v50);
    LODWORD(__src[1]) = 0;
    if (!v2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Aid Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga10_03SendAidingReport", 513);
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
      }
      goto LABEL_58;
    }
    int v12 = *v2;
    LODWORD(__src[2]) = *v2;
    uint64_t v13 = v1[16];
    uint64_t v14 = v1[17] - v13;
    if (v14)
    {
      unint64_t v15 = v14 / 196;
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v15;
      }
      if (*(_DWORD *)(v13 + 52) == v12)
      {
        unint64_t v17 = 0;
LABEL_17:
        if (v17 < v15)
        {
          uint64_t v18 = v13 + 196 * v17;
          int v19 = *(_DWORD *)(v18 + 44);
          *(unsigned char *)(v18 + 60) = 1;
LABEL_30:
          HIDWORD(__src[1]) = v19;
          uint64_t v29 = (unsigned char *)*((void *)v2 + 1);
          if (v29)
          {
            LODWORD(__src[0]) = -8;
            if (*v29)
            {
              WORD2(__src[2]) |= 0x40u;
              BYTE4(__src[0]) |= 1u;
            }
            if (v29[1])
            {
              WORD2(__src[2]) |= 0x20u;
              BYTE4(__src[0]) |= 1u;
            }
            if (v29[2])
            {
              WORD2(__src[2]) |= 4u;
              BYTE4(__src[0]) |= 1u;
            }
            if (v29[3])
            {
              uint64_t v30 = *((void *)v2 + 2);
              if (v30)
              {
                if (*(unsigned char *)(v30 + 7))
                {
                  WORD2(__src[2]) |= 8u;
                  if (v19 == 2) {
                    LOWORD(v31) = *(_WORD *)(v30 + 16);
                  }
                  else {
                    LOWORD(v31) = *(_WORD *)(v30 + 16) & 0x3FF;
                  }
                  HIWORD(__src[2]) = v31;
                  LOBYTE(__src[3]) = *(unsigned char *)(v30 + 18);
                  LOBYTE(v31) = *(unsigned char *)(v30 + 20);
                  if ((_BYTE)v31)
                  {
                    unint64_t v31 = 0;
                    do
                    {
                      unint64_t v32 = v31;
                      uint64_t v33 = (char *)&__src[3] + v31 + 2;
                      *uint64_t v33 = *(unsigned char *)(v30 + v31 + 21);
                      v33[15] = *(unsigned char *)(v30 + 2 * v31++ + 86);
                    }
                    while (v32 <= 0xD && v31 < *(unsigned __int8 *)(v30 + 20));
                  }
                  BYTE1(__src[3]) = v31;
                  LOBYTE(__src[7]) = *(unsigned char *)(v30 + 19);
                  BYTE4(__src[0]) |= 1u;
                }
                if (*(unsigned char *)(v30 + 6))
                {
                  WORD2(__src[2]) |= 1u;
                  BYTE4(__src[0]) |= 1u;
                }
                if (*(unsigned char *)(v30 + 4))
                {
                  WORD2(__src[2]) |= 2u;
                  BYTE4(__src[0]) |= 1u;
                }
                if (*(unsigned char *)(v30 + 8))
                {
                  WORD2(__src[2]) |= 0x80u;
                  BYTE4(__src[0]) |= 1u;
                }
              }
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v34 = mach_continuous_time();
              unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AidReqMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 73, "Ga10_03SendAidingReport", WORD2(__src[2]));
              LbsOsaTrace_WriteLog(0x18u, __str, v35, 4, 1);
            }
            goto LABEL_59;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v36 = mach_continuous_time();
            unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Common Aid Rep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 69, "Ga10_03SendAidingReport", 515);
            LbsOsaTrace_WriteLog(0x18u, __str, v37, 0, 1);
          }
LABEL_58:
          LODWORD(__src[0]) = -2;
LABEL_59:
          int v38 = v1[37];
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v44 = 1174405120;
          unsigned __int16 v45 = ___ZN4gnss15GnssAdaptDevice23Ga10_03SendAidingReportEP14s_gnsCP_AidReq_block_invoke;
          int v46 = &__block_descriptor_tmp_184;
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)v50);
          memcpy(v48, __src, sizeof(v48));
          dispatch_async(v38, __str);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v42, 0x410uLL);
            uint64_t v39 = mach_continuous_time();
            unsigned __int16 v40 = snprintf(v42, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 68, "Ga10_03SendAidingReport");
            LbsOsaTrace_WriteLog(0x18u, v42, v40, 5, 1);
          }
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v47);
          goto LABEL_62;
        }
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v26 = (int *)(v13 + 248);
        uint64_t v27 = v16 - 1;
        while (v27 != v17)
        {
          int v28 = *v26;
          v26 += 49;
          ++v17;
          if (v28 == v12)
          {
            if (v17 < v15) {
              goto LABEL_17;
            }
            break;
          }
        }
      }
    }
    int v19 = -1;
    goto LABEL_30;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Aid Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga10_03SendAidingReport", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga10_03SendAidingReport");
    LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
  }
LABEL_62:
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v50);
  unsigned __int16 v41 = *(void ***)(*(void *)(*(void *)(v0 + 32) + 8) + 24);
  if (v41[2])
  {
    free(v41[2]);
    *(void *)(*(void *)(*(void *)(*(void *)(v0 + 32) + 8) + 24) + 16) = 0;
    unsigned __int16 v41 = *(void ***)(*(void *)(*(void *)(v0 + 32) + 8) + 24);
  }
  if (!v41[1]
    || (free(v41[1]),
        *(void *)(*(void *)(*(void *)(*(void *)(v0 + 32) + 8) + 24) + 8) = 0,
        (unsigned __int16 v41 = *(void ***)(*(void *)(*(void *)(v0 + 32) + 8) + 24)) != 0))
  {
    free(v41);
    *(void *)(*(void *)(*(void *)(v0 + 32) + 8) + 24) = 0;
  }
}

void sub_22BA0C67C(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_4(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Api,%u,status,%u,id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "Ga10_00HandleGnsCpStatusResponse_block_invoke_4", *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 40));
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 4, 1);
  }
  if (*(_DWORD *)(a1 + 44) > 1u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS CP API\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse_block_invoke_4", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    int v5 = 7;
  }
  else
  {
    int v5 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, *(_DWORD *)(a1 + 48));
  }
  uint64_t v31 = 0;
  uint64_t v8 = v2 + 216;
  uint64_t v9 = *(void *)(v2 + 216);
  if (!v9) {
    goto LABEL_47;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 40);
  uint64_t v11 = v2 + 216;
  uint64_t v12 = *(void *)(v2 + 216);
  do
  {
    unsigned int v13 = *(_DWORD *)(v12 + 32);
    BOOL v14 = v13 >= v10;
    if (v13 >= v10) {
      unint64_t v15 = (uint64_t *)v12;
    }
    else {
      unint64_t v15 = (uint64_t *)(v12 + 8);
    }
    if (v14) {
      uint64_t v11 = v12;
    }
    uint64_t v12 = *v15;
  }
  while (*v15);
  if (v11 != v8 && v10 >= *(_DWORD *)(v11 + 32))
  {
    uint64_t v18 = v2 + 216;
    do
    {
      unsigned int v19 = *(_DWORD *)(v9 + 32);
      BOOL v20 = v19 >= v10;
      if (v19 >= v10) {
        unsigned __int16 v21 = (uint64_t *)v9;
      }
      else {
        unsigned __int16 v21 = (uint64_t *)(v9 + 8);
      }
      if (v20) {
        uint64_t v18 = v9;
      }
      uint64_t v9 = *v21;
    }
    while (*v21);
    if (v18 == v8 || v10 < *(_DWORD *)(v18 + 32)) {
      uint64_t v18 = v2 + 216;
    }
    std::function<void ()(gnss::Result)>::operator=(v30, v18 + 40);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer((uint64_t **)(v2 + 208), (uint64_t *)v11);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v11 + 40));
    operator delete((void *)v11);
  }
  else
  {
LABEL_47:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx sessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse_block_invoke_4", 770, *(_DWORD *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
  }
  if (v31)
  {
    uint64_t v22 = *(NSObject **)(v2 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_5;
    block[3] = &__block_descriptor_tmp_208;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)v30);
    int v29 = v5;
    dispatch_async(v22, block);
    int v23 = *(_DWORD *)(a1 + 44);
    if (v23)
    {
      if (v23 != 1 || v5 != 1) {
        goto LABEL_43;
      }
    }
    else if (v5 != 2 && v5 != 8)
    {
      goto LABEL_43;
    }
    gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v2, *(_DWORD *)(a1 + 40), 0, 3);
LABEL_43:
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LutHdl Resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse_block_invoke", 770);
    LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
}

void sub_22BA0CB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_5(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

size_t gnss::GnssAdaptDevice::Ga10_05CPECallAsyncEventCB(int a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga10_05CPECallAsyncEventCB");
    IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v8 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Api,%u,status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "Ga10_06HandleCPEcallAsyncEventCB", a1, a2);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
    int v11 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v8, a2);
    if (a1 == 1)
    {
      if (a2 == 4) {
        int v14 = 1;
      }
      else {
        int v14 = v11;
      }
      unsigned int v13 = *(NSObject **)(v8 + 288);
      *(void *)__str = MEMORY[0x263EF8330];
      uint64_t v21 = 0x40000000;
      uint64_t v22 = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_221;
      int v23 = &__block_descriptor_tmp_231;
      uint64_t v24 = v8;
      int v25 = v14;
      goto LABEL_13;
    }
    if (!a1)
    {
      uint64_t v12 = *(NSObject **)(v8 + 288);
      *(void *)__str = MEMORY[0x263EF8330];
      uint64_t v21 = 0x40000000;
      uint64_t v22 = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke;
      int v23 = &__block_descriptor_tmp_220;
      uint64_t v24 = v8;
      int v25 = v11;
      unsigned int v13 = v12;
LABEL_13:
      dispatch_async(v13, __str);
      goto LABEL_16;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS Ecall API,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga10_06HandleCPEcallAsyncEventCB", 515, a1);
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
    }
  }
LABEL_16:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga10_05CPECallAsyncEventCB");
    return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke(uint64_t a1)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(v2 + 75));
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(v2 + 79));
  if (v18[3])
  {
    uint64_t v3 = v2[37];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2;
    block[3] = &__block_descriptor_tmp_213;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v18);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v19);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](v2 + 75);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartRespOnAccepted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga10_06HandleCPEcallAsyncEventCB_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  if (v19[3])
  {
    unsigned __int16 v6 = v2[37];
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    v10[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_215;
    v10[3] = &__block_descriptor_tmp_218;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v18);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v19);
    int v13 = *(_DWORD *)(a1 + 40);
    dispatch_async(v6, v10);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](v2 + 79);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartRespOnCompleted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga10_06HandleCPEcallAsyncEventCB_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
}

void sub_22BA0D204(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 1);
}

uint64_t __copy_helper_block_e8_32c23_ZTSN4gnss10s_StatusCBE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_22BA0D330(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_32c23_ZTSN4gnss10s_StatusCBE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 64));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_215(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  uint64_t v2 = a1 + 64;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

void *___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_221(uint64_t a1)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(v2 + 83));
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(v2 + 87));
  if (v18[3])
  {
    uint64_t v3 = v2[37];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_3;
    block[3] = &__block_descriptor_tmp_224;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v18);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v19);
    dispatch_async(v3, block);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](v2 + 83);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopRespOnAccepted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga10_06HandleCPEcallAsyncEventCB_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  if (v19[3])
  {
    unsigned __int16 v6 = v2[37];
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    v10[2] = ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_226;
    v10[3] = &__block_descriptor_tmp_229;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v18);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v19);
    int v13 = *(_DWORD *)(a1 + 40);
    dispatch_async(v6, v10);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](v2 + 87);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopRespOnCompleted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga10_06HandleCPEcallAsyncEventCB_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
}

void sub_22BA0D718(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga10_06HandleCPEcallAsyncEventCBE14e_gnsEcall_Api11e_gnsStatus_block_invoke_2_226(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  uint64_t v2 = a1 + 64;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

size_t ___ZN4gnss15GnssAdaptDevice31Ga10_05SendSessionSummaryReportEjb18e_gnsPPDU_SessCode_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64);
  if (v3 == 1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SummaryRep sent to FW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "Ga10_05SendSessionSummaryReport_block_invoke");
    int v7 = 4;
  }
  else
  {
    int v8 = v3;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SummaryRep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga10_05SendSessionSummaryReport_block_invoke", 257, v8);
    int v7 = 0;
  }
  return LbsOsaTrace_WriteLog(0x18u, __str, v6, v7, 1);
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency13SummaryReportEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c71_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency13SummaryReportEEEE(uint64_t a1)
{
  int v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v1);
}

void *___ZN4gnss15GnssAdaptDevice26Ga10_07FTAssistanceRequestEv_block_invoke(uint64_t a1)
{
  void v12[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100]((uint64_t)v12, v1 + 888);
  if (v12[3])
  {
    uint64_t v2 = *(NSObject **)(v1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26Ga10_07FTAssistanceRequestEv_block_invoke_2;
    block[3] = &__block_descriptor_tmp_248;
    std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v12);
    int v10 = 4;
    dispatch_async(v2, block);
    std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FtaReportCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga10_07FTAssistanceRequest_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga10_07FTAssistanceRequest_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
    }
  }
  return std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v12);
}

void sub_22BA0DC84(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga10_07FTAssistanceRequestEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = *(void *)(a1 + 56);

  return v2(v4, v3);
}

uint64_t __copy_helper_block_e8_32c77_ZTSNSt3__18functionIFvRKN4gnss9Emergency6Cplane23CellFTAssistanceRequestEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c77_ZTSNSt3__18functionIFvRKN4gnss9Emergency6Cplane23CellFTAssistanceRequestEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v1);
}

uint64_t gnss::GnssAdaptDevice::Ga10_08MapCdmaCodePhaseSearchWindow(gnss::GnssAdaptDevice *this)
{
  int v1 = (int)this;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (this < 0x20) {
    return byte_22BB44840[(char)this];
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SrcCodePhaseSearchWindow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "Ga10_08MapCdmaCodePhaseSearchWindow", 770, v1);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 2, 1);
    return 0;
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga10_13RegisterGnsCpStatusResponse()
{
  uint64_t v0 = (gnss::GnssAdaptDevice *)MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  int v3 = (int)v0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  size_t result = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(v0);
  if (result)
  {
    size_t v5 = result;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga10_00HandleGnsCpStatusResponse");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
    }
    if (v2)
    {
      switch(v3)
      {
        case 0:
          memcpy(v50, v2, 0x2859CuLL);
          int v8 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          uint64_t v9 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_199;
          int v10 = &__block_descriptor_tmp_200;
          goto LABEL_25;
        case 1:
          long long v13 = v2[5];
          v50[4] = v2[4];
          void v50[5] = v13;
          v50[6] = v2[6];
          long long v14 = v2[1];
          v50[0] = *v2;
          v50[1] = v14;
          long long v15 = v2[3];
          v50[2] = v2[2];
          *(void *)&v50[7] = *((void *)v2 + 14);
          v50[3] = v15;
          int v8 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          uint64_t v9 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2_201;
          int v10 = &__block_descriptor_tmp_202;
          goto LABEL_25;
        case 2:
          *(void *)unsigned __int16 v41 = 0;
          uint64_t v42 = v41;
          uint64_t v43 = 0x2000000000;
          uint64_t v44 = 0;
          uint64_t v44 = gnssOsa_Calloc("Ga10_00HandleGnsCpStatusResponse", 2428, 1, 0x38uLL);
          unsigned __int16 v16 = (_DWORD *)*((void *)v42 + 3);
          if (v16)
          {
            *unsigned __int16 v16 = *(_DWORD *)v2;
            if (*((void *)v2 + 1))
            {
              unsigned __int16 v17 = gnssOsa_Calloc("Ga10_00HandleGnsCpStatusResponse", 2437, 1, 8uLL);
              *(void *)(*((void *)v42 + 3) + 8) = v17;
              uint64_t v18 = *(void **)(*((void *)v42 + 3) + 8);
              if (v18) {
                *uint64_t v18 = **((void **)v2 + 1);
              }
            }
            if (*((void *)v2 + 2))
            {
              unsigned __int16 v19 = gnssOsa_Calloc("Ga10_00HandleGnsCpStatusResponse", 2445, 1, 0xD8uLL);
              BOOL v20 = v42;
              *(void *)(*((void *)v42 + 3) + 16) = v19;
              uint64_t v21 = *(void *)(*((void *)v20 + 3) + 16);
              if (v21)
              {
                uint64_t v22 = *((void *)v2 + 2);
                long long v23 = *(_OWORD *)(v22 + 16);
                *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
                *(_OWORD *)(v21 + 16) = v23;
                long long v24 = *(_OWORD *)(v22 + 32);
                long long v25 = *(_OWORD *)(v22 + 48);
                long long v26 = *(_OWORD *)(v22 + 80);
                *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
                *(_OWORD *)(v21 + 80) = v26;
                *(_OWORD *)(v21 + 32) = v24;
                *(_OWORD *)(v21 + 48) = v25;
                long long v27 = *(_OWORD *)(v22 + 96);
                long long v28 = *(_OWORD *)(v22 + 112);
                long long v29 = *(_OWORD *)(v22 + 144);
                *(_OWORD *)(v21 + 128) = *(_OWORD *)(v22 + 128);
                *(_OWORD *)(v21 + 144) = v29;
                *(_OWORD *)(v21 + 96) = v27;
                *(_OWORD *)(v21 + 112) = v28;
                long long v30 = *(_OWORD *)(v22 + 160);
                long long v31 = *(_OWORD *)(v22 + 176);
                long long v32 = *(_OWORD *)(v22 + 192);
                *(void *)(v21 + 206) = *(void *)(v22 + 206);
                *(_OWORD *)(v21 + 176) = v31;
                *(_OWORD *)(v21 + 192) = v32;
                *(_OWORD *)(v21 + 160) = v30;
              }
            }
          }
          uint64_t v33 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          int v47 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_3_203;
          uint64_t v48 = &unk_2648F5C28;
          *(void *)&v50[0] = v5;
          unsigned __int16 v49 = v41;
          dispatch_async(v33, __str);
          _Block_object_dispose(v41, 8);
          break;
        case 3:
          *(void *)&v50[0] = *(void *)v2;
          DWORD2(v50[0]) = *((_DWORD *)v2 + 2);
          int v8 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          uint64_t v9 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_4;
          int v10 = &__block_descriptor_tmp_210;
          goto LABEL_25;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v11 = mach_continuous_time();
            unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse", 515, v3);
            LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
          }
          break;
      }
    }
    else
    {
      switch(v3)
      {
        case 0:
          int v8 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          uint64_t v9 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke;
          int v10 = &__block_descriptor_tmp_185;
          goto LABEL_25;
        case 1:
          int v8 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 0x40000000;
          uint64_t v9 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_2;
          int v10 = &__block_descriptor_tmp_189;
LABEL_25:
          int v47 = v9;
          uint64_t v48 = v10;
          unsigned __int16 v49 = (char *)v5;
          dispatch_async(v8, __str);
          break;
        case 2:
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v41, v5 + 792);
          uint64_t v34 = *(NSObject **)(v5 + 288);
          *(void *)__str = MEMORY[0x263EF8330];
          uint64_t v46 = 1174405120;
          int v47 = ___ZN4gnss15GnssAdaptDevice32Ga10_00HandleGnsCpStatusResponseE15e_gnsCP_MsgTypeP15u_gnsCP_MsgData_block_invoke_190;
          uint64_t v48 = &__block_descriptor_tmp_196;
          unsigned __int16 v49 = (char *)v5;
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)v41);
          dispatch_async(v34, __str);
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v50);
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v41);
          break;
        case 3:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v39 = mach_continuous_time();
            unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS API Status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse", 770);
            LbsOsaTrace_WriteLog(0x18u, __str, v40, 0, 1);
          }
          break;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v35 = mach_continuous_time();
            unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP Msg Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 69, "Ga10_00HandleGnsCpStatusResponse", 515, v3);
            LbsOsaTrace_WriteLog(0x18u, __str, v36, 0, 1);
          }
          break;
      }
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(v41, 0x410uLL);
      uint64_t v37 = mach_continuous_time();
      unsigned __int16 v38 = snprintf(v41, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga10_00HandleGnsCpStatusResponse");
      return LbsOsaTrace_WriteLog(0x18u, v41, v38, 5, 1);
    }
  }
  return result;
}

void sub_22BA0E67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t gnss::GnssAdaptDevice::Ga10_14RegisterGnsFtaStatusResponse()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FTA Req to Modem handled in posReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 73, "Ga10_14RegisterGnsFtaStatusResponse");
    return LbsOsaTrace_WriteLog(0x18u, __str, v2, 4, 1);
  }
  return result;
}

void *gnss::GnssAdaptDevice::setNwAssistanceGpsAcquisition(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    memcpy(__dst, a2, 0x178uLL);
    size_t v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice29setNwAssistanceGpsAcquisitionERKNS_9Emergency6Cplane16GpsAcqAssistanceENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_280;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    memcpy(v11, __dst, sizeof(v11));
    dispatch_async(v5, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__dst, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__dst, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setNwAssistanceGpsAcquisition", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __dst, v8, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice29setNwAssistanceGpsAcquisitionERKNS_9Emergency6Cplane16GpsAcqAssistanceENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(unsigned char *)(v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v105, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v105, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v105);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
    return result;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 72);
  if (v5 >= 0x240C8400)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v104, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v104, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v104);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *(_DWORD *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
    return result;
  }
  unsigned int v15 = *(unsigned __int8 *)(a1 + 76);
  if (v15 >= 0x11)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v103, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v103, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v103);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sat Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *(unsigned __int8 *)(a1 + 76));
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
    }
    return result;
  }
  if (*(_DWORD *)(a1 + 440) != 3)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v102, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v102, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v102);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v84 = mach_continuous_time();
      unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosProtocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 515, *(_DWORD *)(a1 + 440));
      LbsOsaTrace_WriteLog(0x18u, __str, v85, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v86 = mach_continuous_time();
      unsigned __int16 v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v87, 5, 1);
    }
    return result;
  }
  int v101 = 0;
  uint64_t v20 = 18;
  memset(&v100[1], 0, 192);
  do
  {
    uint64_t v21 = (char *)v100 + v20;
    *uint64_t v21 = -1;
    *(void *)(v21 + 1) = 0;
    v21[9] = 0;
    *((_WORD *)v21 + 5) = -1;
    v20 += 12;
  }
  while (v21 + 12 != (char *)&v101 + 2);
  LODWORD(v100[0]) = v5;
  LOBYTE(v100[1]) = v15;
  *(void *)((char *)v100 + 4) = 0x7FFFFFFFFFFFFFFFLL;
  HIDWORD(v100[0]) = -1;
  if (!v15) {
    goto LABEL_118;
  }
  unsigned __int8 v22 = 0;
  unint64_t v23 = 0;
  long long v24 = (unsigned __int8 *)(a1 + 125);
  long long v25 = (unsigned __int8 *)&v100[1] + 13;
  do
  {
    unsigned int v26 = *v24;
    if (v26 > 0x3F)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v34 = mach_continuous_time();
        unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sat-ID Acq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
        LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
      }
      goto LABEL_94;
    }
    *(v25 - 11) = v26;
    unsigned int v27 = *(_DWORD *)(a1 + 440);
    if (v27 < 2 || v27 == 3)
    {
      unsigned int v29 = *(unsigned __int16 *)(v24 - 13);
      if (v29 > 0x3FE)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId codePhase,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
        }
        goto LABEL_94;
      }
      *(_WORD *)(v25 - 5) = v29;
      unsigned int v30 = *(v24 - 7);
      if (v30 >= 0x14)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId intCodePhase Acq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v40, 0, 1);
        }
        goto LABEL_94;
      }
      *(v25 - 6) = v30;
      unsigned int v31 = *(v24 - 6);
      if (v31 >= 4)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v44 = mach_continuous_time();
          unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId gpsBitNumber Acq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v45, 0, 1);
        }
        goto LABEL_94;
      }
      *(v25 - 3) = v31;
      __int16 v32 = *(_WORD *)(v24 - 11);
      if ((unsigned __int16)(v32 + 2048) >= 0x1000u)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v55 = mach_continuous_time();
          unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId Dop0 Acq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v56, 0, 1);
        }
        goto LABEL_94;
      }
      *(_WORD *)(v25 - 9) = v32;
      unsigned int v33 = *(v24 - 9);
      if (v33 >= 0x40)
      {
        *(v25 - 10) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v61 = mach_continuous_time();
          unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Dop1 set to Zero\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v62, 4, 1);
        }
      }
      else
      {
        *(v25 - 10) = v33;
      }
      unsigned int v63 = *(v24 - 8);
      if (v63 > 4)
      {
        *(v25 - 7) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v64 = mach_continuous_time();
          unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DopUnc set to Zero\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v65, 4, 1);
        }
      }
      else
      {
        *(v25 - 7) = v63;
      }
      if (*(_DWORD *)(a1 + 440) == 3)
      {
        --*(v25 - 11);
        __int16 v66 = (gnss::GnssAdaptDevice *)*(v24 - 5);
        if (v66 <= 0x1F)
        {
          LOBYTE(v67) = gnss::GnssAdaptDevice::Ga10_08MapCdmaCodePhaseSearchWindow(v66);
LABEL_78:
          *(v25 - 2) = v67;
          unsigned int v68 = *(unsigned __int16 *)(v24 - 3);
          if (v68 > 0x1F)
          {
            *(v25 - 1) = -1;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v77 = mach_continuous_time();
              unsigned __int16 v78 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Azimuth Out of range\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v78, 4, 1);
            }
          }
          else
          {
            *(v25 - 1) = v68;
          }
          unsigned int v79 = *(v24 - 1);
          if (v79 > 7)
          {
            *long long v25 = -1;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v80 = mach_continuous_time();
              unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Elevation Out of Range\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v81, 4, 1);
            }
          }
          else
          {
            *long long v25 = v79;
          }
          goto LABEL_105;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
          goto LABEL_94;
        }
      }
      else
      {
        unsigned int v67 = *(v24 - 5);
        if (v67 < 0x10) {
          goto LABEL_78;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
          goto LABEL_94;
        }
      }
      bzero(__str, 0x410uLL);
      uint64_t v74 = mach_continuous_time();
      unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId codePhaseSearchWindow Acq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
      LbsOsaTrace_WriteLog(0x18u, __str, v75, 0, 1);
      goto LABEL_94;
    }
    if (v27 == 2)
    {
      unsigned int v36 = *(unsigned __int16 *)(v24 - 3);
      if (v36 > 0xFF)
      {
        *(v25 - 1) = -1;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v41 = mach_continuous_time();
          unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Azimuth set to UINT8_MAX\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v42, 4, 1);
        }
      }
      else
      {
        *(v25 - 1) = v36 >> 4;
      }
      int v43 = (char)*(v24 - 1);
      if (v43 < 0)
      {
        *long long v25 = -1;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v46 = mach_continuous_time();
          unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Elevation set to UINT8_MAX\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v47, 4, 1);
        }
      }
      else
      {
        *long long v25 = v43 >> 4;
      }
      unsigned int v48 = *(unsigned __int16 *)(v24 - 13);
      if (v48 >= 0x400)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v53 = mach_continuous_time();
          unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId CodePhase,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v54, 0, 1);
        }
      }
      else
      {
        *(_WORD *)(v25 - 5) = 1022 - ((1023 * v48) >> 10);
        unsigned int v49 = *(v24 - 7);
        if ((v49 & 0x80) != 0)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v57 = mach_continuous_time();
            unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId intCodePhase,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
            LbsOsaTrace_WriteLog(0x18u, __str, v58, 0, 1);
          }
        }
        else
        {
          if (v49 <= 0x50) {
            char v50 = 80;
          }
          else {
            char v50 = -96;
          }
          char v51 = v50 - v49;
          *(v25 - 6) = v51 - 20 * ((((103 * v51) & 0x8000) != 0) + ((103 * v51) >> 11));
          *(v25 - 3) = (((103 * v51) & 0x8000) != 0)
                     + ((103 * v51) >> 11)
                     - (((((103 * v51) & 0x8000) != 0)
                       + ((103 * v51) >> 11)
                       + ((((((103 * v51) >> 15) & 1) + ((103 * v51) >> 11)) & 0xC0) >> 6)) & 0xFC);
          unsigned int v52 = *(v24 - 5);
          if (v52 >= 0x20)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v59 = mach_continuous_time();
              unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId codePhaseSearchWindow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
              LbsOsaTrace_WriteLog(0x18u, __str, v60, 0, 1);
            }
          }
          else
          {
            if (v52 >= 3)
            {
              if (v52 >= 0xD) {
                LOBYTE(v52) = 0;
              }
              else {
                LOBYTE(v52) = v52 + 3;
              }
            }
            else
            {
              unsigned int v52 = (0x4027Fu >> (8 * v52)) & 0x7F;
            }
            *(v25 - 2) = v52;
            __int16 v69 = *(_WORD *)(v24 - 11);
            if ((unsigned __int16)(v69 + 2048) <= 0xFFFu)
            {
              *(_WORD *)(v25 - 9) = v69;
              unsigned int v70 = *(v24 - 9);
              if (v70 >= 0x40) {
                LOBYTE(v70) = 0;
              }
              *(v25 - 10) = v70;
              unsigned int v71 = *(v24 - 8);
              if (v71 >= 5) {
                *(v25 - 7) = 0;
              }
              else {
                *(v25 - 7) = v71;
              }
              goto LABEL_105;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v72 = mach_continuous_time();
              unsigned __int16 v73 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatId Dop0,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 772, *v24);
              LbsOsaTrace_WriteLog(0x18u, __str, v73, 0, 1);
            }
          }
        }
      }
LABEL_94:
      ++v22;
      goto LABEL_95;
    }
LABEL_105:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v82 = mach_continuous_time();
      unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SatId,%u,CodePh,%u,Dop0,%u,Dop1,%u,DopUnc,%u,IntCodePh,%u,GpsBitNum,%u,CodePhSrchWin,%u,Azm,%u,Elevation,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke", *(v25 - 11), *(unsigned __int16 *)(v25 - 5), *(__int16 *)(v25 - 9), *(v25 - 10), *(v25 - 7), *(v25 - 6), *(v25 - 3), *(v25 - 2), *(v25 - 1), *v25);
      LbsOsaTrace_WriteLog(0x18u, __str, v83, 4, 1);
    }
LABEL_95:
    unint64_t v76 = *(unsigned __int8 *)(a1 + 76);
    if (v23 > 0xE) {
      break;
    }
    ++v23;
    v24 += 20;
    v25 += 12;
  }
  while (v23 < v76);
  if (v22 < v76)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v88 = mach_continuous_time();
      unsigned __int16 v89 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No of Acq Inj,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v88), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke", *(unsigned __int8 *)(a1 + 76) - v22);
      LbsOsaTrace_WriteLog(0x18u, __str, v89, 4, 1);
    }
    GNS_AsstGpsAcqAsst(*(_DWORD *)(a1 + 444), 1, v100, 0);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v90 = mach_continuous_time();
      unsigned __int16 v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstGpsAcqAsst invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "ADP", 73, "setNwAssistanceGpsAcquisition_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v91, 4, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v98, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v98, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v98);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v92 = mach_continuous_time();
      unsigned __int16 v93 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v93, 5, 1);
    }
    return result;
  }
LABEL_118:
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v99, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v99, (uint64_t)"setNwAssistanceGpsAcquisition_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v99);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v94 = mach_continuous_time();
    unsigned __int16 v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Acquisition\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "ADP", 69, "setNwAssistanceGpsAcquisition_block_invoke", 770);
    LbsOsaTrace_WriteLog(0x18u, __str, v95, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v96 = mach_continuous_time();
    unsigned __int16 v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "ADP", 68, "setNwAssistanceGpsAcquisition_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v97, 5, 1);
  }
  return result;
}

void sub_22BA0FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setFtAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice27setFtAssistanceNeededReportENSt3__18functionIFvRKNS_9Emergency6Cplane23CellFTAssistanceRequestEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_282;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setFtAssistanceNeededReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22BA0FFDC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice27setFtAssistanceNeededReportENSt3__18functionIFvRKNS_9Emergency6Cplane23CellFTAssistanceRequestEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setFtAssistanceNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
    uint64_t v5 = v2 + 888;
    if (__str != (char *)(v2 + 888))
    {
      uint64_t v6 = v18;
      uint64_t v7 = *(void *)(v2 + 912);
      if (v18 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v19);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 912) + 24))(*(void *)(v2 + 912), __str);
          (*(void (**)(void))(**(void **)(v2 + 912) + 32))(*(void *)(v2 + 912));
          *(void *)(v2 + 912) = 0;
          uint64_t v18 = __str;
          (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, v2 + 888);
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 888);
          (*(void (**)(char *))(*(void *)v18 + 32))(v18);
          uint64_t v18 = *(char **)(v2 + 912);
        }
        *(void *)(v2 + 912) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 888, __str);
        (*(void (**)(void))(**(void **)(v2 + 912) + 32))(*(void *)(v2 + 912));
        *(void *)(v2 + 912) = v18;
        uint64_t v18 = __str;
      }
      else
      {
        uint64_t v18 = *(char **)(v2 + 912);
        *(void *)(v2 + 912) = v6;
      }
    }
    std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setFtAssistanceNeededReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setFtAssistanceNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FTARep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setFtAssistanceNeededReport_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v16, (uint64_t)"setFtAssistanceNeededReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setFtAssistanceNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22BA10504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c77_ZTSNSt3__18functionIFvRKN4gnss9Emergency6Cplane23CellFTAssistanceRequestEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22BA105B8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c77_ZTSNSt3__18functionIFvRKN4gnss9Emergency6Cplane23CellFTAssistanceRequestEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::injectFTAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)__str = *(_OWORD *)a2;
    long long v14 = v3;
    int v15 = *(_DWORD *)(a2 + 32);
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice18injectFTAssistanceERKNS_9Emergency6Cplane16CellFTAssistanceENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_292;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    long long v10 = *(_OWORD *)__str;
    long long v11 = v14;
    int v12 = v15;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "injectFTAssistance", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice18injectFTAssistanceERKNS_9Emergency6Cplane16CellFTAssistanceENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v50[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 1024))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectFTAssistance_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
    }
    if (*(unsigned char *)(v2 + 88))
    {
      LOWORD(v39) = 0;
      long long v40 = xmmword_22BB44720;
      int v41 = 0;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        unsigned int v5 = *(_DWORD *)(a1 + 76);
        if (v5 < 4)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, a1 + 40);
          uint64_t v6 = v43;
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v43, (uint64_t)"injectFTAssistance_block_invoke");
LABEL_8:
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "injectFTAssistance_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
          }
          return result;
        }
        if (v5 != 4)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v29 = mach_continuous_time();
            unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NetworkType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "injectFTAssistance_block_invoke", 770, *(_DWORD *)(a1 + 76));
            LbsOsaTrace_WriteLog(0x18u, __str, v30, 0, 1);
          }
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v42, a1 + 40);
          uint64_t v6 = v42;
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v42, (uint64_t)"injectFTAssistance_block_invoke");
          goto LABEL_8;
        }
        if (*(_DWORD *)(a1 + 92) > 0x93A7Fu)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v46, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v46, (uint64_t)"injectFTAssistance_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v46);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v31 = mach_continuous_time();
            unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Int CDMA Fine Time,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "injectFTAssistance_block_invoke", 772, *(_DWORD *)(a1 + 92));
            LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v33 = mach_continuous_time();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "injectFTAssistance_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
          }
        }
        else
        {
          LODWORD(v40) = *(_DWORD *)(a1 + 92);
          unsigned int v22 = *(_DWORD *)(a1 + 96);
          if (v22 < 0x3B9ACA00)
          {
            LOWORD(v39) = *(_WORD *)(a1 + 100);
            *(void *)((char *)&v40 + 4) = v22 | 0xA00000000;
            int v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            gnss::GnssAdaptDevice::Ga10_15AlterFTABasedOnGrouDelay((gnss::GnssAdaptDevice *)&v40, (unsigned int *)&v40 + 1, &v39, v23, *(double *)(v2 + 112));
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v24 = mach_continuous_time();
              unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IntPart,%u,fracPart,%u,wkNum,%u,pulseUnc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "injectFTAssistance_block_invoke", v40, DWORD1(v40), (unsigned __int16)v39, DWORD2(v40));
              LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
            }
            GNS_FtaPulseInd(0, (long long *)&v39);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v26 = mach_continuous_time();
              unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FtaPulseInd invoked\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "injectFTAssistance_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
            }
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v44, a1 + 40);
            uint64_t v6 = v44;
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v44, (uint64_t)"injectFTAssistance_block_invoke");
            goto LABEL_8;
          }
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v45, (uint64_t)"injectFTAssistance_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v45);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v35 = mach_continuous_time();
            unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Frac CDMA Fine Time,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 69, "injectFTAssistance_block_invoke", 772, *(_DWORD *)(a1 + 96));
            LbsOsaTrace_WriteLog(0x18u, __str, v36, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v37 = mach_continuous_time();
            unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "injectFTAssistance_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v38, 5, 1);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v47, (uint64_t)"injectFTAssistance_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FineTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "injectFTAssistance_block_invoke", 257, *(_DWORD *)(a1 + 72));
          LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "injectFTAssistance_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v48, (uint64_t)"injectFTAssistance_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "injectFTAssistance_block_invoke", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "injectFTAssistance_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v50, (uint64_t)"injectFTAssistance_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fta Response ignored as there is no ongoing Session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "injectFTAssistance_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 4, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "injectFTAssistance_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22BA11220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
}

uint64_t gnss::GnssAdaptDevice::Ga10_15AlterFTABasedOnGrouDelay(gnss::GnssAdaptDevice *this, unsigned int *a2, unsigned int *a3, unsigned __int16 *a4, double a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  double v8 = a5 * 1000000.0 / 1023.0;
  unint64_t v9 = *a2 + 1000000000 * *(unsigned int *)this;
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Total time NS,%llu,GroupDelay NS,%.7f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "Ga10_15AlterFTABasedOnGrouDelay", v9, v8);
    uint64_t result = LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
  }
  if (v8 >= 0.0)
  {
    unint64_t v13 = v9 - (unint64_t)v8;
    if (v9 < (unint64_t)v8)
    {
      --*(_WORD *)a3;
      v13 += 604800000000000;
    }
  }
  else
  {
    unint64_t v13 = v9 + (unint64_t)fabs(v8);
    if (v13 > 0x2260FF928FFFFLL)
    {
      ++*(_WORD *)a3;
      v13 -= 604800000000000;
    }
  }
  *(_DWORD *)this = v13 / 0x3B9ACA00;
  *a2 = v13 % 0x3B9ACA00;
  return result;
}

void ___ZN4gnss15GnssAdaptDevice26Ga10_17InvokePVTMCbForE911EPK15s_gnsCP_PosnRes_block_invoke()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_22BA11DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  if (__p) {
    operator delete(__p);
  }
  a32 = &a29;
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (v32) {
    MEMORY[0x230F4E5D0](v32, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v1);
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

double *Inc_Glon_TOD(double a1, double *result, __int16 *a3, unsigned __int16 *a4)
{
  double v4 = *result + a1;
  *uint64_t result = v4;
  LOWORD(v5) = *a3;
  if (v4 >= 86400.0)
  {
    do
    {
      double v4 = v4 + -86400.0;
      LOWORD(v5) = v5 + 1;
    }
    while (v4 >= 86400.0);
    *uint64_t result = v4;
    *a3 = v5;
  }
  if (v4 < 0.0)
  {
    do
    {
      double v4 = v4 + 86400.0;
      LOWORD(v5) = v5 - 1;
    }
    while (v4 < 0.0);
    *uint64_t result = v4;
    *a3 = v5;
  }
  if ((__int16)v5 >= 1462)
  {
    do
    {
      *a3 = v5 - 1461;
      ++*a4;
      int v5 = *a3;
    }
    while (v5 > 1461);
  }
  if ((__int16)v5 <= 0)
  {
    do
    {
      *a3 = v5 + 1461;
      unsigned __int16 v6 = *a4 - 1;
      *a4 = v6;
      int v5 = *a3;
    }
    while (v5 < 1);
  }
  else
  {
    unsigned __int16 v6 = *a4;
  }
  if (v6 >= 0x10u) {
    *a4 = 0;
  }
  return result;
}

void MMSRelease(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 720);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        if (*(void *)v1) {
          free(*(void **)v1);
        }
        free((void *)v1);
        uint64_t v3 = *(void *)(v4 + 16);
        uint64_t v1 = v4;
      }
      while (v3);
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 720);
    }
    if (*(void *)v4) {
      free(*(void **)v4);
    }
    free((void *)v4);
    *(void *)(a1 + 720) = 0;
  }
}

void *MMSAlloc(uint64_t a1, size_t a2)
{
  uint64_t v4 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x18uLL);
  if (v4)
  {
    int v5 = v4;
    v4[2] = *(void *)(a1 + 720);
    uint64_t result = gnssOsa_Calloc("posp_alloc", 18, 1, a2);
    *int v5 = result;
    v5[1] = a2;
    if (result)
    {
      *(void *)(a1 + 720) = v5;
      return result;
    }
    free(v5);
  }
  CUCFErrorHandler(a1, 1);
  return 0;
}

void MMSFree(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void ***)(a1 + 720);
  if (!v4) {
    goto LABEL_14;
  }
  if (*v4 == a2)
  {
    if (v4[1] != a3) {
      CUCFErrorHandler(a1, 15);
    }
    *(void *)(a1 + 720) = v4[2];
    if (a2) {
      free(a2);
    }
    double v8 = v4;
    goto LABEL_21;
  }
  unsigned __int16 v6 = (void **)v4[2];
  if (!v6)
  {
LABEL_14:
    CUCFErrorHandler(a1, 15);
    return;
  }
  if (*v6 != a2)
  {
    while (1)
    {
      unsigned __int16 v7 = (void **)v6[2];
      if (!v7) {
        goto LABEL_14;
      }
      uint64_t v4 = v6;
      unsigned __int16 v6 = (void **)v6[2];
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
  }
  unsigned __int16 v7 = (void **)v4[2];
LABEL_16:
  if (v7[1] != a3) {
    CUCFErrorHandler(a1, 15);
  }
  v4[2] = v7[2];
  if (a2) {
    free(a2);
  }
  double v8 = v7;
LABEL_21:

  free(v8);
}

void GLON_RealAlm2ECEF(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  v29[1] = *(double *)MEMORY[0x263EF8340];
  double v28 = 0.0;
  v29[0] = 0.0;
  float64x2_t v26 = 0u;
  float64x2_t v27 = 0u;
  float64x2_t v24 = 0u;
  float64x2_t v25 = 0u;
  float64x2_t v22 = 0u;
  float64x2_t v23 = 0u;
  memset(v21, 0, sizeof(v21));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  GLON_Alm_Calc_SemiMaj((uint64_t)a3);
  double v11 = v10;
  GLON_Alm_Last_Asc_Pass(v29, &v28, a5, (uint64_t)a3, (double)a4, v10);
  double v12 = a3[7];
  double v13 = a3[8];
  long double v14 = tan(v13 * -0.5);
  long double v15 = atan(v14 * sqrt((1.0 - v12) / (v12 + 1.0)));
  long double v16 = v15 + v15 - v12 * sin(v15 + v15);
  GLON_Alm_Calc_Corrns(v25.f64, a3, v11, v13 + v16, 0.0);
  long double v17 = a3[8] + v16;
  double v18 = v29[0];
  double v19 = (double)a4 - v29[0];
  double v20 = v17 + v19 * 6.28318531 / (a3[5] + 43200.0);
  GLON_Alm_Calc_Corrns(v22.f64, a3, v11, v20, v19);
  float64x2_t v22 = vsubq_f64(v22, v25);
  float64x2_t v23 = vsubq_f64(v23, v26);
  float64x2_t v24 = vsubq_f64(v24, v27);
  GLON_Alm_Apply_Corrns(v22.f64, a3, (uint64_t)v21, v11, v28 + (v18 + -10800.0) * 0.00007292115, v20);
  GLON_Alm_Calc_ECEF_PosVel((double *)v21, (double *)a1, (double *)a2, a4);
}

uint64_t GncP09_21HandleSensDefnInd(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENS_DEFN_IND Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP09_21HandleSensDefnInd", *(_DWORD *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(_DWORD *)(a1 + 24);
    int v5 = *(unsigned char **)(a1 + 16);
    if (v5)
    {
      if (*v5)
      {
        unsigned __int16 v6 = __dst;
        memcpy_s("GncP09_08SetSensDefn", 168, __dst, 0x50u, v5 + 8, 0x50uLL);
      }
      else
      {
        unsigned __int16 v6 = 0;
      }
      if (v5[1])
      {
        double v12 = v22;
        memcpy_s("GncP09_08SetSensDefn", 177, v22, 0x50u, v5 + 88, 0x50uLL);
      }
      else
      {
        double v12 = 0;
      }
      if (v5[2])
      {
        double v13 = v5 + 168;
        long double v14 = v21;
        memcpy_s("GncP09_08SetSensDefn", 186, v21, 0x50u, v13, 0x50uLL);
      }
      else
      {
        long double v14 = 0;
      }
      if (GN_Sen_Set_Defin((uint64_t)v6, (uint64_t)v12, (uint64_t)v14))
      {
        int v11 = 1;
      }
      else
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        int v11 = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SensDefn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP09_08SetSensDefn", 257);
          LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
          int v11 = 0;
        }
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SensDefn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "GncP09_08SetSensDefn", 518);
        LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
      }
      int v11 = 2;
    }
    GncP09_01SendApiStatus(v4, 1, v11);
    double v18 = *(void **)(a1 + 16);
    if (v18) {
      free(v18);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP09_21HandleSensDefnInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
  }
  return 0;
}

uint64_t GncP09_22HandleSensAcclInd(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENS_ACCL_IND Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP09_22HandleSensAcclInd", *(_DWORD *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(_DWORD *)(a1 + 24);
    int v5 = *(unsigned __int16 **)(a1 + 16);
    if (v5)
    {
      unsigned __int16 v6 = gnssOsa_Calloc("GncP09_05SetAcclData", 58, *v5, 0x20uLL);
      if (v6)
      {
        uint64_t v7 = v6;
        memcpy_s("GncP09_05SetAcclData", 67, v6, 32 * *v5, *((const void **)v5 + 1), 32 * *v5);
        if (GN_Sen_Set_Accl(*v5, (uint64_t)v7))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Set NumSample,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP09_05SetAcclData", *v5);
            int v10 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v9, 5, 1);
          }
          else
          {
            int v10 = 1;
          }
        }
        else
        {
          int v10 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Accl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 87, "GncP09_05SetAcclData", 257);
            LbsOsaTrace_WriteLog(8u, __str, v18, 2, 1);
            int v10 = 0;
          }
        }
        GncP09_01SendApiStatus(v4, 2, v10);
        free(v7);
        goto LABEL_20;
      }
      int v15 = v4;
      int v16 = 6;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Accl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "GncP09_05SetAcclData", 518);
        LbsOsaTrace_WriteLog(8u, __str, v14, 0, 1);
      }
      int v15 = v4;
      int v16 = 2;
    }
    GncP09_01SendApiStatus(v15, 2, v16);
LABEL_20:
    double v19 = *(void ***)(a1 + 16);
    if (v19[1])
    {
      free(v19[1]);
      double v19 = *(void ***)(a1 + 16);
    }
    free(v19);
    *(void *)(a1 + 16) = 0;
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "GncP09_22HandleSensAcclInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t GncP09_23HandleSensGyroInd(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENS_GYRO_IND Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP09_23HandleSensGyroInd", *(_DWORD *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(_DWORD *)(a1 + 24);
    int v5 = *(unsigned __int16 **)(a1 + 16);
    if (v5)
    {
      unsigned __int16 v6 = gnssOsa_Calloc("GncP09_06SetGyroData", 91, *v5, 0x20uLL);
      if (v6)
      {
        uint64_t v7 = v6;
        memcpy_s("GncP09_06SetGyroData", 100, v6, 32 * *v5, *((const void **)v5 + 1), 32 * *v5);
        if (GN_Sen_Set_Gyro(*v5, (uint64_t)v7))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Set NumSample,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP09_06SetGyroData", *v5);
            int v10 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v9, 5, 1);
          }
          else
          {
            int v10 = 1;
          }
        }
        else
        {
          int v10 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gyro\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 87, "GncP09_06SetGyroData", 257);
            LbsOsaTrace_WriteLog(8u, __str, v18, 2, 1);
            int v10 = 0;
          }
        }
        GncP09_01SendApiStatus(v4, 3, v10);
        free(v7);
        goto LABEL_20;
      }
      int v15 = v4;
      int v16 = 6;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gyro\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "GncP09_06SetGyroData", 518);
        LbsOsaTrace_WriteLog(8u, __str, v14, 0, 1);
      }
      int v15 = v4;
      int v16 = 2;
    }
    GncP09_01SendApiStatus(v15, 3, v16);
LABEL_20:
    double v19 = *(void ***)(a1 + 16);
    if (v19[1])
    {
      free(v19[1]);
      double v19 = *(void ***)(a1 + 16);
    }
    free(v19);
    *(void *)(a1 + 16) = 0;
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "GncP09_23HandleSensGyroInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t GncP09_24HandleSensBaroInd(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENS_BARO_IND Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP09_24HandleSensBaroInd", *(_DWORD *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(_DWORD *)(a1 + 24);
    int v5 = *(unsigned __int16 **)(a1 + 16);
    if (v5)
    {
      unsigned __int16 v6 = (double *)gnssOsa_Calloc("GncP09_07SetBaroData", 125, *v5, 0x18uLL);
      if (v6)
      {
        uint64_t v7 = v6;
        unsigned int v8 = *v5;
        if (*v5)
        {
          unsigned __int16 v9 = v7 + 2;
          int v10 = (_DWORD *)(*((void *)v5 + 1) + 8);
          uint64_t v11 = *v5;
          do
          {
            *((void *)v9 - 1) = 0xC058F9999999999ALL;
            *((void *)v9 - 2) = *((void *)v10 - 1);
            int v12 = *v10;
            v10 += 4;
            *unsigned __int16 v9 = v12;
            v9 += 6;
            --v11;
          }
          while (v11);
        }
        if (GN_Sen_Set_Baro(v8, v7))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v13 = mach_continuous_time();
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Set NumSample,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "GncP09_07SetBaroData", *v5);
            int v15 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v14, 5, 1);
          }
          else
          {
            int v15 = 1;
          }
        }
        else
        {
          int v15 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Baro\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP09_07SetBaroData", 257);
            LbsOsaTrace_WriteLog(8u, __str, v23, 2, 1);
            int v15 = 0;
          }
        }
        GncP09_01SendApiStatus(v4, 4, v15);
        free(v7);
        goto LABEL_23;
      }
      int v20 = v4;
      int v21 = 6;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Baro\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 69, "GncP09_07SetBaroData", 518);
        LbsOsaTrace_WriteLog(8u, __str, v19, 0, 1);
      }
      int v20 = v4;
      int v21 = 2;
    }
    GncP09_01SendApiStatus(v20, 4, v21);
LABEL_23:
    uint64_t v24 = *(void ***)(a1 + 16);
    if (v24[1])
    {
      free(v24[1]);
      uint64_t v24 = *(void ***)(a1 + 16);
    }
    free(v24);
    *(void *)(a1 + 16) = 0;
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 69, "GncP09_24HandleSensBaroInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v17, 0, 1);
  }
  return 0;
}

void GncP09_01SendApiStatus(int a1, int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned __int16 v6 = gnssOsa_Calloc("GncP09_01SendApiStatus", 30, 1, 0x18uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    v6[3] = a2;
    v6[4] = a3;
    v6[5] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENSAPI_IND =>LSIM Type,%u,ID,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP09_01SendApiStatus", a2, a1, a3);
      LbsOsaTrace_WriteLog(8u, __str, v9, 5, 1);
    }
    AgpsSendFsmMsg(134, 131, 8783363, v7);
  }
}

char **FPE_InterfaceLogger(char **result, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v14 = (int)result;
  if ((g_FPE_LogSeverity & 0x40) != 0)
  {
    LODWORD(v3) = __const__Z19FPE_InterfaceLogger13e_FpeMeasTypePv_measSizeTable[result];
    int v13 = v3;
    int v4 = (char **)g_p_CB_LCD_SA_Dbg;
    if (g_p_CB_LCD_SA_Dbg)
    {
      int v5 = *(char **)g_p_CB_LCD_SA_Dbg;
      char v6 = 36;
      uint64_t v7 = 1u;
      do
      {
        void *v4 = v5 + 1;
        *int v5 = v6;
        int v5 = *v4;
        if (*v4 >= v4[3])
        {
          int v5 = v4[2];
          void *v4 = v5;
        }
        char v6 = str_83[v7++];
      }
      while (v7 != 11);
      LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
      int v4 = (char **)g_p_CB_LCD_SA_Dbg;
    }
    uint64_t v8 = 0;
    unsigned __int16 v9 = v4;
    do
    {
      if (v9)
      {
        sprintf_02x(v9, *((unsigned __int8 *)&v13 + v8));
        LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
        int v4 = (char **)g_p_CB_LCD_SA_Dbg;
        unsigned __int16 v9 = (char **)g_p_CB_LCD_SA_Dbg;
      }
      ++v8;
    }
    while (v8 != 4);
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      if (v11)
      {
        sprintf_02x(v11, *((unsigned __int8 *)&v14 + v10));
        LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
        int v4 = (char **)g_p_CB_LCD_SA_Dbg;
        uint64_t v11 = (char **)g_p_CB_LCD_SA_Dbg;
      }
      ++v10;
    }
    while (v10 != 4);
    if (v3 <= 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = v3;
    }
    uint64_t result = v4;
    do
    {
      if (result)
      {
        sprintf_02x(result, *a2);
        LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
        int v4 = (char **)g_p_CB_LCD_SA_Dbg;
        uint64_t result = (char **)g_p_CB_LCD_SA_Dbg;
      }
      ++a2;
      --v3;
    }
    while (v3);
    if (v4)
    {
      int v12 = (*v4)++;
      *int v12 = 10;
      if (*v4 >= v4[3]) {
        void *v4 = v4[2];
      }
    }
  }
  return result;
}

uint64_t NK_Validate_Fix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 24584;
  *(_WORD *)(a2 + 24584) = 0;
  uint64_t result = API_Qual_Pos("default", 1, 0, 0, 0);
  if (result)
  {
    *(_WORD *)uint64_t v6 = 257;
    int v8 = 1;
LABEL_11:
    unsigned int v9 = *(_DWORD *)(a1 + 11040) + 1;
    *(void *)(a1 + 11040) = v9;
LABEL_17:
    if (*(_DWORD *)(a2 + 968) || !v8) {
      return result;
    }
    goto LABEL_19;
  }
  int v8 = *(unsigned __int8 *)(v6 + 1);
  if (!*(unsigned char *)(v6 + 1))
  {
    if (*(_DWORD *)(a2 + 968) == 1)
    {
      uint64_t result = API_Qual_Pos("default", 0, 0, 0, 0);
      if (result)
      {
        int v8 = 1;
        *(unsigned char *)(v6 + 1) = 1;
      }
      else
      {
        int v8 = *(unsigned __int8 *)(v6 + 1);
      }
    }
    else
    {
      int v8 = 0;
    }
  }
  if (*(unsigned char *)v6)
  {
    if (v8) {
      goto LABEL_11;
    }
LABEL_16:
    unsigned int v9 = 0;
    ++*(_DWORD *)(a1 + 11044);
    *(_DWORD *)(a1 + 11040) = 0;
    goto LABEL_17;
  }
  if (!v8 || *(int *)(v6 + 4) <= 3) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 968)) {
    return result;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 11040);
LABEL_19:
  if (v9 >= 0x1E
    && *(int *)(a2 + 964) >= 3
    && *(int *)(v6 + 8) >= 4
    && !*(unsigned char *)(a1 + 233)
    && *(int *)(a2 + 12) >= 8
    && *(double *)(a2 + 24752) <= *(double *)(a3 + 968)
    && *(double *)(a2 + 24680) <= *(double *)(a3 + 984))
  {
    uint64_t result = API_Get_Fix_Reliability();
    if ((result - 2) >= 3)
    {
      if (result != 1)
      {
        return (uint64_t)EvCrt_Illegal_Default("NK_Validate_Fix", 0xB4u);
      }
    }
    else
    {
      *(_DWORD *)a3 = 1;
    }
  }
  return result;
}

void NK_Dopp_Outlier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v82[96] = *MEMORY[0x263EF8340];
  int v5 = (unsigned __int8 *)(a2 + 11088);
  memset_pattern16(__b, &unk_22BB448C0, 0x180uLL);
  memset_pattern16(v82, &unk_22BB3FBD0, 0x180uLL);
  if (!v5[74]) {
    return;
  }
  int v6 = *(_DWORD *)a3 - *(_DWORD *)(a2 + 11248);
  int v7 = v6 / 1000;
  if (*(double *)(a2 + 11152) <= 17.0) {
    int v8 = 3;
  }
  else {
    int v8 = 5;
  }
  if (*v5)
  {
    int v9 = (int)*(double *)(a2 + 11256);
    if (v9 <= 1) {
      int v9 = 1;
    }
    unsigned int v10 = 0x7D0u / v9 + v8;
    if (v10 >= 0x96) {
      unsigned int v10 = 150;
    }
    if (v7 > (int)v10) {
      return;
    }
    int v75 = *v5;
    int v76 = *(_DWORD *)a3;
    double v74 = *(double *)(a2 + 11096);
    uint64_t v11 = (double *)(a2 + 11104);
  }
  else
  {
    if (v7 > v8) {
      return;
    }
    int v75 = *v5;
    int v76 = *(_DWORD *)a3;
    double v74 = *(double *)(a3 + 760) * 299792458.0;
    uint64_t v11 = (double *)(a3 + 944);
  }
  uint64_t v12 = 0;
  int v13 = v6 / -2000 + 85;
  double v73 = *v11;
  uint64_t v14 = a3 + 14112;
  uint64_t v15 = a2 + 2112;
  uint64_t v16 = a3 + 8536;
  double v78 = 0.0;
  uint64_t v17 = 76;
  double v18 = -0.5;
  double v19 = 0.5;
  double v77 = 0.0;
  double v20 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  do
  {
    v82[v12 + 48] = 0;
    int v23 = *(unsigned __int8 *)(v16 + v12);
    if (*(unsigned char *)(v16 + v12) || *(unsigned char *)(v14 + v12))
    {
      double v24 = *(double *)(a2 + 11240);
      double v25 = *(double *)(v15 + 1928) - v24;
      if (v25 <= 0.0) {
        double v26 = v18;
      }
      else {
        double v26 = v19;
      }
      double v27 = v25 + v26;
      if (v27 <= 2147483650.0)
      {
        if (v27 >= -2147483650.0) {
          int v28 = (int)v27;
        }
        else {
          int v28 = 0x80000000;
        }
      }
      else
      {
        int v28 = 0x7FFFFFFF;
      }
      if (v28 < 0) {
        int v28 = -v28;
      }
      if (v28 > 0x168) {
        v28 -= 360;
      }
      if (v28 > 180) {
        v28 -= 180;
      }
      if (v28 > 90) {
        int v28 = 180 - v28;
      }
      if (v28 <= v13)
      {
        double v29 = *(double *)(v15 + 1920) + v24 * -0.0174532925;
        double v30 = -6.28318531;
        if (v29 >= 3.14159265 || (double v30 = 6.28318531, v29 < -3.14159265)) {
          double v29 = v29 + v30;
        }
        long double v31 = *(double *)v15;
        double v32 = cos(v29);
        double v33 = cos(v31);
        double v34 = *(double *)(a3 + 26304 + 8 * v12);
        double v35 = -(v34 - *(double *)(a1 + 8 * v12 + 1616) * -0.190293673);
        *(double *)&v82[v12] = v35;
        if (v23)
        {
          uint64_t v36 = *(void *)(v14 + 8 * v12 - 1688);
          double v19 = 0.5;
        }
        else
        {
          double v19 = 0.5;
          if (!*(unsigned char *)(v14 + v12))
          {
LABEL_42:
            double v37 = -(v32 * v33);
            *(double *)&v82[v12 + 48] = v37;
            if (*(unsigned char *)(a1 + v17) != 6)
            {
              double v38 = 1.0 / __b[v12];
              double v22 = v22 + v38;
              double v20 = v20 + v37 * v38;
              double v21 = v21 + v37 * v38 * v37;
              double v39 = v35 * v38;
              double v77 = v77 + v39;
              double v78 = v78 + v37 * v39;
            }
            double v18 = -0.5;
            goto LABEL_45;
          }
          double v35 = *(double *)(a3 + 8 * v12 + 120) / *(double *)(a3 + 656) - v34;
          *(double *)&v82[v12] = v35;
          uint64_t v36 = 0x3FA47AE147AE147CLL;
        }
        *(void *)&__b[v12] = v36;
        goto LABEL_42;
      }
    }
LABEL_45:
    ++v12;
    v17 += 4;
    v15 += 40;
  }
  while (v12 != 48);
  double v40 = -v20;
  if (*(_DWORD *)(a2 + 11116) == 3)
  {
    double v41 = v22 * (v21 + 10000.0) - v20 * v20;
    if (v41 > 0.0001)
    {
      *(double *)&qword_26AE77908 = (v78 + 0.0) * (1.0 / v41 * v40) + (v21 + 10000.0) * (1.0 / v41) * v77;
      _MergedGlobals_7 = v76;
    }
    return;
  }
  double v42 = v22 * v21 - v20 * v20;
  double v44 = v73;
  double v43 = v74;
  if (v42 > 0.0001)
  {
    double v45 = 1.0 / v42;
    double v46 = v21 * v45;
    double v47 = v22 * v45;
    double v48 = v45 * v40;
    double v43 = v78 * v48 + v46 * v77;
    double v44 = v78 * v47 + v48 * v77;
  }
  if (v75)
  {
    int v49 = v76 - *(_DWORD *)(a2 + 11092);
    if (v49 <= 90999)
    {
      char v50 = (double *)(a2 + 11096);
LABEL_55:
      double v51 = 1.0 / ((double)(v49 / 1000 * (v49 / 1000)) * 0.0000308641975 + 0.0001);
      double v52 = (v22 + v51) * v21 - v20 * v20;
      if (v52 > 0.0001)
      {
        double v53 = v77 + v51 * *v50;
        double v54 = 1.0 / v52;
        double v55 = v54 * v40;
        double v43 = v78 * v55 + v21 * v54 * v53;
        double v44 = v78 * ((v22 + v51) * v54) + v55 * v53;
      }
    }
  }
  else
  {
    char v50 = (double *)&qword_26AE77908;
    int v49 = v76 - _MergedGlobals_7;
    if (v76 - _MergedGlobals_7 <= 179999) {
      goto LABEL_55;
    }
  }
  uint64_t v56 = 0;
  unsigned int v57 = 0;
  unsigned int v58 = 0;
  memset(v80, 0, sizeof(v80));
  double v59 = fmax(fabs(v44) * 0.25, 2.5);
  do
  {
    if (*(unsigned char *)(a3 + 8536 + v56) || *(unsigned char *)(a3 + 14112 + v56))
    {
      double v60 = *(double *)&v82[v56 + 48];
      if (fabs(v60) > 0.05)
      {
        double v61 = (*(double *)&v82[v56] - v43) / v60;
        BOOL v62 = v61 < 0.0;
        if (v44 <= v59) {
          BOOL v62 = 0;
        }
        if (v61 >= -v59 && !v62)
        {
          if (v61 > 0.0) {
            ++v57;
          }
        }
        else
        {
          ++v58;
          *((unsigned char *)v80 + v56) = 1;
        }
      }
    }
    ++v56;
  }
  while (v56 != 48);
  if (v75) {
    int v64 = 70;
  }
  else {
    int v64 = 50;
  }
  if (v75) {
    unsigned int v65 = 40;
  }
  else {
    unsigned int v65 = 36;
  }
  if (v58 && (v57 >= v58 || v75 && v58 <= 3))
  {
    uint64_t v66 = 0;
    uint64_t v67 = 14208;
    uint64_t v68 = a3 + 14208;
    uint64_t v69 = a3 + 8536;
    for (i = (int *)(a2 + 2088);
          !*((unsigned char *)v80 + v66)
       || *i >= v64
       || v65 <= *(unsigned __int8 *)(a1 + 604 + v66)
       || *(double *)(v69 + 8 * v66 - 3704) >= 50.0;
          i += 10)
    {
LABEL_93:
      ++v66;
      v67 += 4;
      if (v66 == 48) {
        return;
      }
    }
    if (*(unsigned char *)(v69 + v66))
    {
      *(unsigned char *)(v69 + v66) = 0;
      unsigned int v71 = (_DWORD *)(a3 + 4 * v66 + 8632);
      uint64_t v72 = (unsigned char *)(a3 + 8387);
      goto LABEL_90;
    }
    if (*(unsigned char *)(v68 + v66 - 96))
    {
      *(unsigned char *)(v68 + v66 - 96) = 0;
      unsigned int v71 = (_DWORD *)(a3 + v67);
      uint64_t v72 = (unsigned char *)(a3 + 13963);
LABEL_90:
      *unsigned int v71 = 10;
      ++v72[1];
      --*v72;
    }
    if (*(unsigned char *)(a3 + v66 + 2960))
    {
      *(unsigned char *)(a3 + v66 + 2960) = 0;
      *(_DWORD *)(a3 + 4 * v66 + 3056) = 10;
      ++*(unsigned char *)(a3 + 2812);
      --*(unsigned char *)(a3 + 2811);
    }
    goto LABEL_93;
  }
}

uint64_t Decode_GPS_Health_Subframe(uint64_t result, BOOL *a2)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v3 = *(_DWORD *)(result + 12 + v2);
    int v4 = &v6[v2];
    unsigned char *v4 = (v3 >> 18) & 0x1F;
    v4[1] = (v3 >> 12) & 0x1F;
    v4[2] = (v3 >> 6) & 0x1F;
    v2 += 4;
    v4[3] = v3 & 0x1F;
  }
  while (v2 != 24);
  for (uint64_t i = 0; i != 24; ++i)
    a2[i] = (0xE4FE7F3uLL >> v6[i]) & 1;
  return result;
}

_DWORD *Decode_QZSS_Health_Subframe(_DWORD *result, BOOL *a2)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v3 = result[3];
  unsigned int v4 = result[4];
  v6[0] = (v3 >> 18) & 0x1F;
  v6[1] = (v3 >> 12) & 0x1F;
  v6[2] = (v3 >> 6) & 0x1F;
  v6[3] = v3 & 0x1F;
  v6[4] = (v4 >> 18) & 0x1F;
  v6[5] = (v4 >> 12) & 0x1F;
  v6[6] = (v4 >> 6) & 0x1F;
  v6[7] = v4 & 0x1F;
  unsigned int v5 = result[5];
  v6[8] = (v5 >> 18) & 0x1F;
  v6[9] = (v5 >> 12) & 0x1F;
  do
  {
    a2[v2] = (0xE4FE7F3uLL >> v6[v2]) & 1;
    ++v2;
  }
  while (v2 != 10);
  return result;
}

const char *Hal14_GetGnssHwStr(unsigned int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1 < 5) {
    return off_2648F5CC8[a1];
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 87, "Hal14_GetGnssHwStr", 770, a1);
    LbsOsaTrace_WriteLog(0xDu, __str, v4, 2, 1);
  }
  return "Unknown";
}

double Get_GPS_Kep_Ephemeris(int a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = *(void *)a3;
  *(_DWORD *)(a4 + 8) = a1;
  *(unsigned char *)(a4 + 12) = a2;
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(a4 + 18) = (v4 >> 14) & 0x3FF;
  *(unsigned char *)(a4 + 15) = BYTE1(v4) & 0xF;
  *(unsigned char *)(a4 + 13) = (v4 >> 2) & 0x1F;
  *(double *)(a4 + 56) = (double)*(char *)(a3 + 24) * 4.65661287e-10;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  int v5 = *(_DWORD *)(a3 + 28);
  *(_WORD *)(a4 + 16) = BYTE2(v5);
  *(_DWORD *)(a4 + 20) = 16 * (unsigned __int16)v5;
  uint64_t v6 = (const float *)(a3 + 32);
  uint32x2_t v7 = (uint32x2_t)vld1_dup_f32(v6);
  int32x2_t v8 = vshl_s32((int32x2_t)vshl_u32(v7, (uint32x2_t)0x800000010), (int32x2_t)0xFFFFFFE8FFFFFFF0);
  v9.i64[0] = v8.i32[0];
  v9.i64[1] = v8.i32[1];
  *(float64x2_t *)(a4 + 40) = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)xmmword_22BB448F0);
  LODWORD(v6) = *(_DWORD *)(a3 + 44);
  *(double *)&int32x2_t v10 = (double)(*(_DWORD *)(a3 + 48) & 0xFFFFFF | (v6 << 24));
  *(double *)(a4 + 32) = (double)(int)(((int)(*(_DWORD *)(a3 + 36) << 8) >> 8) & 0xFFFFFFFC) * 1.16415322e-10;
  v11.i32[0] = *(_DWORD *)(a3 + 40);
  v11.i32[1] = *(_DWORD *)(a3 + 52);
  int32x2_t v12 = vshr_n_s32((int32x2_t)vshl_u32(v11, (uint32x2_t)0x800000010), 0x10uLL);
  v9.i64[0] = v12.i32[0];
  v9.i64[1] = v12.i32[1];
  float64x2_t v13 = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)xmmword_22BB44900);
  __int32 v14 = *(_DWORD *)(a3 + 60);
  double v15 = (double)(*(_DWORD *)(a3 + 56) & 0xFFFFFF | (v11.u8[4] << 24)) * 1.16415322e-10;
  double v16 = (double)(*(_DWORD *)(a3 + 64) & 0xFFFFFF | (v14 << 24)) * 0.00000190734863;
  *(double *)(a4 + 160) = *(double *)&v10 * 0.00000000146291808;
  *(double *)(a4 + 168) = v16;
  *(_DWORD *)(a4 + 24) = (*(_DWORD *)(a3 + 68) >> 4) & 0xFFFF0;
  *(unsigned char *)(a4 + 14) = *(unsigned char *)(a3 + 68) >> 7;
  v10.i32[0] = v14;
  v10.i32[1] = *(_DWORD *)(a3 + 72);
  int32x2_t v17 = vshr_n_s32(vshl_n_s32(v10, 8uLL), 0x10uLL);
  v9.i64[0] = v17.i32[0];
  v9.i64[1] = v17.i32[1];
  double v18 = (double)(*(_DWORD *)(a3 + 76) & 0xFFFFFF | (*(_DWORD *)(a3 + 72) << 24));
  int v19 = *(_DWORD *)(a3 + 80);
  int v20 = *(_DWORD *)(a3 + 84);
  *(float64x2_t *)(a4 + 128) = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)vdupq_n_s64(0x3E20000000000000uLL));
  double v21 = v18 * 0.00000000146291808;
  double v22 = (double)(__int16)(v19 >> 8) * 0.00000000186264515;
  double v23 = (double)(v20 & 0xFFFFFF | (v19 << 24)) * 0.00000000146291808;
  v24.i32[0] = (int)v6;
  int v25 = *(_DWORD *)(a3 + 92);
  v24.i32[1] = *(_DWORD *)(a3 + 88);
  *(double *)(a4 + 176) = v21;
  *(double *)(a4 + 184) = v23;
  int32x2_t v26 = vshr_n_s32(vshl_n_s32(v24, 8uLL), 0x10uLL);
  v9.i64[0] = v26.i32[0];
  v9.i64[1] = v26.i32[1];
  *(float64x2_t *)(a4 + 96) = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)xmmword_22BB44910);
  *(float64x2_t *)(a4 + 112) = v13;
  *(double *)(a4 + 192) = (double)(v25 & 0xFFFFFF | (v24.u8[4] << 24)) * 0.00000000146291808;
  *(double *)(a4 + 200) = v15;
  *(double *)(a4 + 208) = (double)(int)(*(_DWORD *)(a3 + 96) << 8) * 1.3951474e-15;
  double result = (double)(int)(*(__int16 *)(a3 + 100) & 0xFFFFFFFC) * 8.92894335e-14;
  *(double *)(a4 + 144) = v22;
  *(double *)(a4 + 152) = result;
  return result;
}

uint64_t lsim05_21HandleAidStatusCnf(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_21HandleAidStatusCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_CNF,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_21HandleAidStatusCnf", *(_DWORD *)(a1 + 76));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    if (g_SuplInstance[74 * v6 + 1] == *(_DWORD *)(a1 + 76))
    {
      if (BYTE1(g_SuplInstance[74 * v6 + 70])) {
        break;
      }
    }
    char v7 = 0;
    uint64_t v6 = 1;
    if ((v8 & 1) == 0)
    {
      int64x2_t v9 = *(void **)(a1 + 24);
      if (v9) {
        free(v9);
      }
      *(void *)(a1 + 24) = 0;
      int32x2_t v10 = *(void **)(a1 + 32);
      if (v10) {
        free(v10);
      }
      *(void *)(a1 + 32) = 0;
      uint32x2_t v11 = *(void **)(a1 + 40);
      if (v11) {
        free(v11);
      }
      *(void *)(a1 + 40) = 0;
      int32x2_t v12 = *(void **)(a1 + 48);
      if (v12) {
        free(v12);
      }
      *(void *)(a1 + 48) = 0;
      float64x2_t v13 = *(void **)(a1 + 56);
      if (v13) {
        free(v13);
      }
      *(void *)(a1 + 56) = 0;
      __int32 v14 = *(void **)(a1 + 64);
      if (v14) {
        free(v14);
      }
      *(void *)(a1 + 64) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim05_21HandleAidStatusCnf", 2052, *(_DWORD *)(a1 + 76));
        LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
      }
      goto LABEL_59;
    }
  }
  int32x2_t v17 = &g_SuplInstance[74 * v6];
  if (*((unsigned char *)v17 + 282))
  {
    long long v37 = 0x700000000uLL;
    *(void *)&long long v38 = 0;
    *(void *)((char *)&v38 + 6) = 0;
    HIWORD(v38) = -1;
    LOBYTE(v39) = 0;
    DWORD1(v39) = 0;
    int v41 = 0;
    memset(v40, 0, 18);
    *((void *)&v39 + 1) = -1;
    *((unsigned char *)v17 + 282) = 0;
    if ((lsim12_02StopTimer(v6, 5) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "lsim05_21HandleAidStatusCnf", 1545, *(_DWORD *)(a1 + 76));
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
    }
    if (!*(unsigned char *)(a1 + 72)) {
      goto LABEL_35;
    }
    *(_WORD *)&__str[12] = 0;
    lsim03_11PrintAidRequestParams((void *)(a1 + 16), "AID STATUS");
    int v20 = g_SuplInstance[74 * v6 + 72];
    if (v20 == 2)
    {
      double v21 = &g_LsimPltConfig;
    }
    else
    {
      if (v20 != 1)
      {
        __str[0] = qword_26AE6D3FE | g_LsimPltConfig;
        *(_WORD *)&__str[10] = word_26AE6D408 | word_26AE6D3FA;
        *(int8x8_t *)&__str[2] = vorr_s8(*(int8x8_t *)((char *)&qword_26AE6D3FE + 2), *(int8x8_t *)((char *)&g_LsimPltConfig + 2));
        goto LABEL_34;
      }
      double v21 = &qword_26AE6D3FE;
    }
    *(void *)__str = *v21;
    *(void *)&__str[6] = *(uint64_t *)((char *)v21 + 6);
LABEL_34:
    lsim03_12UpdateAidReqParams(__str, (void *)(a1 + 16), LOBYTE(g_SuplInstance[74 * v6 + 73]), 0);
LABEL_35:
    if (*(unsigned char *)(a1 + 152))
    {
      long long v22 = *(_OWORD *)(a1 + 96);
      long long v37 = *(_OWORD *)(a1 + 80);
      long long v38 = v22;
      long long v39 = *(_OWORD *)(a1 + 112);
      *(_DWORD *)double v40 = *(_DWORD *)(a1 + 128);
      *(_OWORD *)&v40[4] = *(_OWORD *)(a1 + 132);
      int v41 = *(_DWORD *)(a1 + 148);
      if (DWORD1(v37) == 1) {
        double v23 = 0;
      }
      else {
        double v23 = &v37;
      }
    }
    else
    {
      double v23 = 0;
    }
    if (GN_SUPL_AidRequest_In(*(_DWORD *)(a1 + 76), a1 + 16, (uint64_t)v23))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_AidRequest_In call successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 68, "lsim05_21HandleAidStatusCnf", *(_DWORD *)(a1 + 76));
        LbsOsaTrace_WriteLog(0xCu, __str, v25, 5, 1);
      }
      GN_SUPL_Handler();
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_AidRequest_In call failed,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 87, "lsim05_21HandleAidStatusCnf", *(_DWORD *)(a1 + 76));
      LbsOsaTrace_WriteLog(0xCu, __str, v27, 2, 1);
    }
  }
  int v28 = *(void **)(a1 + 24);
  if (v28) {
    free(v28);
  }
  *(void *)(a1 + 24) = 0;
  double v29 = *(void **)(a1 + 32);
  if (v29) {
    free(v29);
  }
  *(void *)(a1 + 32) = 0;
  double v30 = *(void **)(a1 + 40);
  if (v30) {
    free(v30);
  }
  *(void *)(a1 + 40) = 0;
  long double v31 = *(void **)(a1 + 48);
  if (v31) {
    free(v31);
  }
  *(void *)(a1 + 48) = 0;
  double v32 = *(void **)(a1 + 56);
  if (v32) {
    free(v32);
  }
  *(void *)(a1 + 56) = 0;
  double v33 = *(void **)(a1 + 64);
  if (v33) {
    free(v33);
  }
  *(void *)(a1 + 64) = 0;
LABEL_59:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "lsim05_21HandleAidStatusCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
  }
  return 0;
}

uint64_t lsim05_22HandleSuplInit(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_22HandleSuplInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SUPL_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_22HandleSuplInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Length,%u,pointer,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim05_22HandleSuplInit", *(_DWORD *)(a1 + 12), *(const void **)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsDcCallback)
  {
    if (byte_26AE5322D)
    {
      int v8 = *(_DWORD *)(a1 + 12);
      int64x2_t v9 = *(unsigned __int8 **)(a1 + 16);
      int v10 = *(unsigned __int8 *)(a1 + 24);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim05_09SuplInitReq");
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
      }
      uint64_t v13 = 0;
      char v14 = 1;
      while (1)
      {
        char v15 = v14;
        unsigned __int16 v16 = &g_SuplInstance[74 * v13];
        if (!*((unsigned char *)v16 + 281)) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
        if ((v15 & 1) == 0)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
            goto LABEL_33;
          }
          goto LABEL_37;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 68, "lsim05_09SuplInitReq", v13);
        LbsOsaTrace_WriteLog(0xCu, __str, v23, 5, 1);
      }
      if ((~dword_26AE537A4 & 0x88) != 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL or SUPLNI\n");
LABEL_33:
          LbsOsaTrace_WriteLog(0xCu, __str, v17, 2, 1);
        }
LABEL_37:
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "LSM", 73, "lsim05_09SuplInitReq");
          LbsOsaTrace_WriteLog(0xCu, __str, v36, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPLINIT Rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "LSM", 87, "lsim05_22HandleSuplInit");
          LbsOsaTrace_WriteLog(0xCu, __str, v38, 2, 1);
        }
        int v32 = 0;
        int v29 = -1;
        goto LABEL_42;
      }
      uint64_t v24 = &g_SuplInstance[74 * v13];
      *((unsigned char *)v16 + 281) = 1;
      *((unsigned char *)v24 + 282) = 0;
      v24[71] = 2;
      ++g_SuplInstanceCount;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplInstanceCount,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 68, "lsim05_09SuplInitReq", g_SuplInstanceCount);
        LbsOsaTrace_WriteLog(0xCu, __str, v26, 5, 1);
      }
      if ((GN_SUPL_Push_Delivery_In(v24, (unsigned __int16)v8, v9, v10) & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Push_Delivery_In Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "LSM", 87, "lsim05_09SuplInitReq");
          LbsOsaTrace_WriteLog(0xCu, __str, v34, 2, 1);
        }
        lsim05_34DeleteSuplContext(v13);
        goto LABEL_37;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Push_Delivery_In successful\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 68, "lsim05_09SuplInitReq");
        LbsOsaTrace_WriteLog(0xCu, __str, v28, 5, 1);
      }
      GN_SUPL_Handler();
      int v29 = *v24;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim05_09SuplInitReq");
        int v32 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
      }
      else
      {
        int v32 = 1;
      }
LABEL_42:
      lsim09_04SendConnApiStatus(v29, v32, 0);
      long long v39 = *(void **)(a1 + 16);
      if (v39) {
        free(v39);
      }
      *(void *)(a1 + 16) = 0;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 87, "lsim05_22HandleSuplInit", 769);
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 2, 1);
      }
      lsim09_04SendConnApiStatus(-1, 0, 0);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "lsim05_22HandleSuplInit", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v40 = mach_continuous_time();
    unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "LSM", 73, "lsim05_22HandleSuplInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v41, 4, 1);
  }
  return 0;
}

uint64_t lsim05_23ReceiveDataInd(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_23ReceiveDataInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_RECEIVE_DATA_IND,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_23ReceiveDataInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_GnsDcCallback)
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(a1 + 12);
    char v8 = 1;
    while (1)
    {
      char v9 = v8;
      int v10 = &g_SuplInstance[74 * v6];
      if (*v10 == v7 && g_SuplInstance[74 * v6 + 2] == 3 && BYTE1(g_SuplInstance[74 * v6 + 70])) {
        break;
      }
      char v8 = 0;
      uint64_t v6 = 1;
      if ((v9 & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim05_23ReceiveDataInd", 2052, *(_DWORD *)(a1 + 12));
          LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
        }
        int v13 = 4;
        goto LABEL_14;
      }
    }
    if (GN_SUPL_PDU_Delivery_In(v7, *(unsigned __int16 *)(a1 + 16), *(unsigned __int8 **)(a1 + 24)))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PDU_Delivery_In Successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 68, "lsim05_23ReceiveDataInd", *v10);
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 5, 1);
      }
      GN_SUPL_Handler();
      int v13 = 1;
    }
    else
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
      int v13 = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PDU_Delivery_In Failed,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 87, "lsim05_23ReceiveDataInd", *v10);
        LbsOsaTrace_WriteLog(0xCu, __str, v24, 2, 1);
        int v13 = 0;
      }
    }
LABEL_14:
    lsim09_04SendConnApiStatus(*(_DWORD *)(a1 + 12), v13, 1);
    char v14 = *(void **)(a1 + 24);
    if (v14) {
      free(v14);
    }
    *(void *)(a1 + 24) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim05_23ReceiveDataInd", 258, *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim05_23ReceiveDataInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  return 0;
}

uint64_t lsim05_24HandleSuplAbort(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_24HandleSuplAbort");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SUPL_ABORT_REQ,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_24HandleSuplAbort", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!g_GnsSuplCallback)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_24;
    }
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Supl,SuplHandle,%u\n", v22);
LABEL_23:
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    goto LABEL_24;
  }
  uint64_t v6 = 0;
  int v7 = *(_DWORD *)(a1 + 12);
  char v8 = 1;
  do
  {
    char v9 = v8;
    if (g_SuplInstance[74 * v6] == v7 && BYTE1(g_SuplInstance[74 * v6 + 70]))
    {
      GN_SUPL_Abort(v7, 255);
      GN_SUPL_Handler();
      int v12 = 1;
      goto LABEL_16;
    }
    char v8 = 0;
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 87, "lsim05_24HandleSuplAbort", 2052, *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
  }
  int v12 = 4;
LABEL_16:
  if (!g_GnsSuplCallback)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_24;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL\n");
    goto LABEL_23;
  }
  int v14 = *(_DWORD *)(a1 + 12);
  uint64_t v15 = gnssOsa_Calloc("lsim05_12SendSuplApiStatus", 397, 1, 0x348uLL);
  if (v15)
  {
    unsigned __int16 v16 = v15;
    v15[1] = 1;
    v15[2] = v12;
    *uint64_t v15 = v14;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>SuplCB,Api,%u,Status,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim05_12SendSuplApiStatus", 1, v12, v14);
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    }
    g_GnsSuplCallback(3, 840, v16);
    free(v16);
  }
LABEL_24:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim05_24HandleSuplAbort");
    LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
  }
  return 0;
}

uint64_t lsim05_25HandleSuplSumRep(void *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_25HandleSuplSumRep");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SUPL_SUMM_REP,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_25HandleSuplSumRep", *((_DWORD *)a1 + 4));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!g_GnsSuplCallback)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "lsim05_25HandleSuplSumRep", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    }
LABEL_17:
    int v14 = (void *)a1[3];
    if (v14) {
      free(v14);
    }
    a1[3] = 0;
    uint64_t v15 = (void *)a1[4];
    if (v15) {
      free(v15);
    }
    a1[4] = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_22;
    }
    return 0;
  }
  uint64_t v6 = gnssOsa_Calloc("lsim05_25HandleSuplSumRep", 766, 1, 0x348uLL);
  if (!v6) {
    goto LABEL_17;
  }
  int v7 = v6;
  memcpy_s("lsim05_25HandleSuplSumRep", 777, v6, 0x28u, a1 + 2, 0x28uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SUMM_REP =>SuplCB,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim05_25HandleSuplSumRep", *v7);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  g_GnsSuplCallback(4, 840, v7);
  uint64_t v10 = (void *)a1[3];
  if (v10) {
    free(v10);
  }
  a1[3] = 0;
  unsigned __int16 v11 = (void *)a1[4];
  if (v11) {
    free(v11);
  }
  a1[4] = 0;
  free(v7);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_22:
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v16, "LSM", 73, "lsim05_25HandleSuplSumRep");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  return 0;
}

uint64_t lsim05_26HandleSuplStatRep(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_26HandleSuplStatRep");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SUPL_STAT_REP,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_26HandleSuplStatRep", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!g_GnsSuplCallback)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim05_26HandleSuplStatRep", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
    }
LABEL_15:
    unsigned __int16 v13 = *(void **)(a1 + 24);
    if (v13) {
      free(v13);
    }
    *(void *)(a1 + 24) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_18;
    }
    return 0;
  }
  uint64_t v6 = gnssOsa_Calloc("lsim05_26HandleSuplStatRep", 812, 1, 0x348uLL);
  if (!v6) {
    goto LABEL_15;
  }
  int v7 = v6;
  memcpy_s("lsim05_26HandleSuplStatRep", 822, v6, 0x38u, (const void *)(a1 + 16), 0x38uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:EVNT_INF =>SuplCB,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim05_26HandleSuplStatRep", *v7);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  g_GnsSuplCallback(1, 840, v7);
  uint64_t v10 = *(void **)(a1 + 24);
  if (v10) {
    free(v10);
  }
  *(void *)(a1 + 24) = 0;
  free(v7);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_18:
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v14, "LSM", 73, "lsim05_26HandleSuplStatRep");
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return 0;
}

size_t lsim05_31InitSupl(void)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim05_31InitSupl");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  GN_SUPL_Handler_Init();
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_01InitSuplConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    uint64_t v6 = &g_SuplInstance[74 * v4];
    *(_WORD *)((char *)v6 + 281) = 0;
    *uint64_t v6 = -1;
    char v7 = v5;
    v6[2] = 0;
    *((_WORD *)v6 + 139) = 0;
    v6[68] = 0;
    memset_s((char *)v6 + 13, 0x100uLL, 0, 0x100uLL);
    char v5 = 0;
    *((unsigned char *)v6 + 280) = 0;
    *(void *)(v6 + 71) = 0;
    *((unsigned char *)v6 + 292) = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  g_SuplInstanceCount = 0;
  memset_s(&g_LsimUserConfig, 0x244uLL, 0, 0x244uLL);
  dword_26AE5379C = 2;
  lsim13_02SuplConfig();
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim05_01InitSuplConfig");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim05_31InitSupl");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

size_t lsim05_32DeInitSupl(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim05_32DeInitSupl");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  lsim05_43CloseOtherPospSessions(255, 0);
  lsim05_42CloseSuplSessions(255, 1);
  lsim09_50ConnMgmtDeInit();
  g_GnsPospCallback = 0;
  g_GnsPpduCallback = 0;
  g_GnsSuplCallback = 0;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 73, "lsim05_32DeInitSupl");
    return LbsOsaTrace_WriteLog(0xCu, __str, v4, 4, 1);
  }
  return result;
}

uint64_t lsim05_43CloseOtherPospSessions(int a1, _DWORD *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_43CloseOtherPospSessions");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1 == 4 || a1 == 255)
  {
    unsigned int v6 = 0;
    char v7 = 1;
    do
    {
      char v8 = v7;
      if (!a2 || *a2 != v6)
      {
        __int16 v16 = 0;
        *(_DWORD *)__str = -1;
        int v15 = 0;
        if (lsim11_05GnmGetSessionInfo(v6, (int *)__str, &v15, (unsigned char *)&v16 + 1, 0, (char *)&v16))
        {
          if (!(_BYTE)v16 && (a1 == 255 || !HIBYTE(v16)))
          {
            if ((v15 & 0xFFFFFFFE) == 2)
            {
              lsim03_18GnssPosnResultInd(*(int *)__str, 0, 3);
            }
            else if (v15 == 1)
            {
              lsim03_17GnssMeasResultInd(*(int *)__str, 0, 3);
            }
            lsim03_16AbortInd(*(int *)__str, 3, 0);
            lsim11_04GnmResetSession(v6);
          }
        }
      }
      char v7 = 0;
      unsigned int v6 = 1;
    }
    while ((v8 & 1) != 0);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v10, "LSM", 73, "lsim05_43CloseOtherPospSessions");
      return LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Category,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim05_43CloseOtherPospSessions", 515, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v14, "LSM", 73, "lsim05_43CloseOtherPospSessions");
      return LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
  }
  return result;
}

size_t lsim05_42CloseSuplSessions(int a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_42CloseSuplSessions");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_SuplInstanceCount)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CategMask,%X,DeInitSupl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim05_42CloseSuplSessions", a1, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    uint64_t v8 = 0;
    if (a1 == 255) {
      char v9 = -1;
    }
    else {
      char v9 = 0;
    }
    if (a1 == 255) {
      char v10 = -1;
    }
    else {
      char v10 = 1;
    }
    if ((a1 & 5) != 0) {
      char v9 = v10;
    }
    char v11 = a1 & 2;
    if ((a1 & 8) != 0) {
      char v11 = 2;
    }
    int v12 = (v11 | v9);
    char v13 = 1;
    do
    {
      char v14 = v13;
      int v15 = &g_SuplInstance[74 * v8];
      if (*((unsigned char *)v15 + 281) && (a1 == 255 || (a1 & 0xC) != 0 || g_SuplInstance[74 * v8 + 71] != 1))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aborting SuplHandle,%u,Mask,%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim05_42CloseSuplSessions", *v15, v12);
          LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
        }
        GN_SUPL_Abort(*v15, v12);
      }
      char v13 = 0;
      uint64_t v8 = 1;
    }
    while ((v14 & 1) != 0);
    GN_SUPL_Handler();
  }
  if (a1 == 255 && a2) {
    GN_SUPL_Handler_DeInit();
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim05_42CloseSuplSessions");
    return LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
  }
  return result;
}

size_t lsim05_34DeleteSuplContext(int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_34DeleteSuplContext");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    int v5 = a1;
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_34DeleteSuplContext", g_SuplInstance[74 * a1]);
    LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
  }
  else
  {
    int v5 = a1;
  }
  unsigned __int16 v7 = &g_SuplInstance[74 * v5];
  if (*((unsigned char *)v7 + 281))
  {
    *((unsigned char *)v7 + 281) = 0;
    uint64_t v8 = &g_SuplInstance[74 * v5];
    *((unsigned char *)v8 + 282) = 0;
    v8[2] = 0;
    *uint64_t v8 = -1;
    *((_WORD *)v8 + 139) = 7275;
    v8[68] = 0;
    v8[72] = 0;
    v8[71] = 0;
    *((unsigned char *)v8 + 280) = 0;
    memset_s((char *)v8 + 13, 0x100uLL, 0, 0x100uLL);
    if (g_SuplInstanceCount)
    {
      --g_SuplInstanceCount;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplInstanceCount Mismatch\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "lsim05_34DeleteSuplContext");
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim05_34DeleteSuplContext");
    return LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  return result;
}

uint64_t lsim05_37FillSuplLocIdFromLsimLocId(void *a1, int a2, int a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim05_37FillSuplLocIdFromLsimLocId");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a1)
  {
    memset_s(a1, 0x184CuLL, 0, 0x184CuLL);
    if (!a3)
    {
      *a1 = 0;
      LOBYTE(a2) = -1;
LABEL_17:
      *((unsigned char *)a1 + 8) = a2;
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim05_37FillSuplLocIdFromLsimLocId");
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
      return v13;
    }
    if (a3 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MobInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 87, "lsim05_37FillSuplLocIdFromLsimLocId", 515, a3);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 2, 1);
      }
      uint64_t v13 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_22;
      }
      return v13;
    }
    uint64_t v8 = 0;
    uint64_t v9 = qword_26AE6D3E8;
    char v10 = 1;
    do
    {
      char v11 = v10;
      if (*(unsigned __int8 *)(qword_26AE6D3E8 + 6220 * v8) == a2)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v21 = mach_continuous_time();
          unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim05_07FillSuplLocIdCellularNwInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
        }
        uint64_t v23 = v9 + 6220 * v8;
        int v24 = *(_DWORD *)(v23 + 4);
        int v25 = *(_DWORD *)(v23 + 8);
        uint64_t v26 = (_DWORD *)(v23 + 4);
        if (v25 == 1) {
          int v27 = 1;
        }
        else {
          int v27 = 2 * (v25 == 2);
        }
        *(_DWORD *)a1 = v27;
        switch(v24)
        {
          case 1:
            *((_DWORD *)a1 + 1) = 1;
            uint64_t v28 = v9 + 6220 * v8;
            *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(v28 + 12);
            long long v29 = *(_OWORD *)(v28 + 28);
            long long v30 = *(_OWORD *)(v28 + 44);
            long long v31 = *(_OWORD *)(v28 + 60);
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(v28 + 72);
            *(_OWORD *)((char *)a1 + 60) = v31;
            *(_OWORD *)((char *)a1 + 44) = v30;
            *(_OWORD *)((char *)a1 + 28) = v29;
            break;
          case 2:
            *((_DWORD *)a1 + 1) = 2;
            unsigned __int16 v36 = (const void *)(v9 + 6220 * v8 + 12);
            uint64_t v37 = (char *)a1 + 12;
            size_t v38 = 3156;
            goto LABEL_40;
          case 3:
            *((_DWORD *)a1 + 1) = 3;
            unsigned __int16 v36 = (const void *)(v9 + 6220 * v8 + 12);
            uint64_t v37 = (char *)a1 + 12;
            size_t v38 = 6208;
LABEL_40:
            memcpy(v37, v36, v38);
            break;
          case 4:
            *((_DWORD *)a1 + 1) = 5;
            uint64_t v39 = v9 + 6220 * v8;
            long long v40 = *(_OWORD *)(v39 + 12);
            long long v41 = *(_OWORD *)(v39 + 28);
            long long v42 = *(_OWORD *)(v39 + 44);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)(v39 + 60);
            *(_OWORD *)((char *)a1 + 44) = v42;
            *(_OWORD *)((char *)a1 + 28) = v41;
            *(_OWORD *)((char *)a1 + 12) = v40;
            long long v43 = *(_OWORD *)(v39 + 76);
            long long v44 = *(_OWORD *)(v39 + 92);
            long long v45 = *(_OWORD *)(v39 + 108);
            *(_OWORD *)((char *)a1 + 124) = *(_OWORD *)(v39 + 124);
            *(_OWORD *)((char *)a1 + 108) = v45;
            *(_OWORD *)((char *)a1 + 92) = v44;
            *(_OWORD *)((char *)a1 + 76) = v43;
            long long v46 = *(_OWORD *)(v39 + 140);
            long long v47 = *(_OWORD *)(v39 + 156);
            long long v48 = *(_OWORD *)(v39 + 172);
            *(_OWORD *)(a1 + 23) = *(_OWORD *)(v39 + 184);
            *(_OWORD *)((char *)a1 + 172) = v48;
            *(_OWORD *)((char *)a1 + 156) = v47;
            *(_OWORD *)((char *)a1 + 140) = v46;
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v32 = mach_continuous_time();
              unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "LSM", 73, "lsim05_07FillSuplLocIdCellularNwInfo", 515, *v26);
              LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v34 = mach_continuous_time();
              unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "lsim05_07FillSuplLocIdCellularNwInfo");
              LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
            }
            if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
              goto LABEL_14;
            }
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo\n");
            goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v49 = mach_continuous_time();
          unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "LSM", 73, "lsim05_07FillSuplLocIdCellularNwInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v50, 4, 1);
        }
        goto LABEL_17;
      }
      char v10 = 0;
      uint64_t v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v51 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimId,%d\n", v51);
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_14;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
  }
LABEL_13:
  LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
LABEL_14:
  uint64_t v13 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_22:
    bzero(__str, 0x410uLL);
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v18, "LSM", 73, "lsim05_37FillSuplLocIdFromLsimLocId");
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    return 0;
  }
  return v13;
}

size_t lsim05_40SuplTimerExpiry(int a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim05_40SuplTimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerID,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim05_40SuplTimerExpiry", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a2 == 4)
  {
    int v8 = a1;
    int v9 = 1;
LABEL_9:
    Trace_GN_SUPL_TimerExpiry_In(v8, v9);
    SUPL_indicate_trigger_UT_expiry(a1);
    GN_SUPL_Handler();
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  if (a2 == 3)
  {
    int v8 = a1;
    int v9 = 0;
    goto LABEL_9;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimerType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim05_40SuplTimerExpiry", 515, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
LABEL_14:
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v13, "LSM", 73, "lsim05_40SuplTimerExpiry");
    return LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
  }
  return result;
}

size_t lsim10_05AidStatusTimerExpiry(unsigned int a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim10_05AidStatusTimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1 <= 1 && (uint64_t v6 = &g_SuplInstance[74 * a1], *((unsigned char *)v6 + 281)))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim10_05AidStatusTimerExpiry", *v6);
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    if (a2 == 5)
    {
      int v9 = &g_SuplInstance[74 * a1];
      if (*((unsigned char *)v9 + 282))
      {
        *((unsigned char *)v9 + 282) = 0;
        if (GN_SUPL_AidRequest_In(*v6, 0, 0))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v10 = mach_continuous_time();
            unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_AidRequest_In successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim10_05AidStatusTimerExpiry", *v6);
            LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
          }
          GN_SUPL_Handler();
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_AidRequest_In failed,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim10_05AidStatusTimerExpiry", *v6);
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
        }
      }
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
LABEL_20:
      bzero(__str, 0x410uLL);
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "lsim10_05AidStatusTimerExpiry");
      return LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim10_05AidStatusTimerExpiry", 2052, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_20;
    }
  }
  return result;
}

size_t lsim05_45SuplCbInit(size_t result)
{
  unsigned __int16 v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsSuplCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_45SuplCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsSuplCallback = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim05_45SuplCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

size_t lsim05_46PospCbInit(size_t result)
{
  unsigned __int16 v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsPospCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim05_46PospCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsPospCallback = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim05_46PospCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GN_SUPL_Connect_Req_Out(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GN_SUPL_Connect_Req_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = 89;
      if (!a2[268]) {
        uint64_t v7 = 78;
      }
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,AddrType,%u,Addr,%s,Port,%dEmerPdn,%c,SimId,%u\n", (unint64_t)v6, "LSM", 73, "GN_SUPL_Connect_Req_Out", a1, *((_DWORD *)a2 + 65), (const char *)a2 + 1, *((unsigned __int16 *)a2 + 133), v7, *a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    uint64_t v9 = 0;
    char v10 = 1;
    while (1)
    {
      char v11 = v10;
      uint64_t v12 = &g_SuplInstance[74 * v9];
      if (*v12 == a1)
      {
        if (BYTE1(g_SuplInstance[74 * v9 + 70])) {
          break;
        }
      }
      char v10 = 0;
      uint64_t v9 = 1;
      if ((v11 & 1) == 0)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
          goto LABEL_18;
        }
        bzero(__str, 0x410uLL);
        uint64_t v27 = 2052;
        uint64_t v28 = a1;
        unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v13 = "%10u %s%c %s: #%04hx SuplHandle,%u\n";
        goto LABEL_16;
      }
    }
    int v19 = *((_DWORD *)a2 + 65);
    if ((v19 - 1) <= 2)
    {
      uint64_t v20 = (char *)&g_SuplInstance[74 * v9];
      *((_DWORD *)v20 + 68) = v19;
      memset_s(v20 + 13, 0x100uLL, 0, 0x100uLL);
      strncpy(v20 + 13, (const char *)a2 + 1, 0x100uLL);
      *((_WORD *)v20 + 139) = *((_WORD *)a2 + 133);
      v20[12] = *a2;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,SuplInstanceIndex,%u,Addr,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "GN_SUPL_Connect_Req_Out", *v12, v9, v20 + 13);
        LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
      }
      lsim09_32ConnectSUPLSession(v9);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "GN_SUPL_Connect_Req_Out");
      uint64_t v15 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
      return v15;
    }
    g_SuplInstance[74 * v9 + 68] = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_18;
    }
    bzero(__str, 0x410uLL);
    unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SlpIpType,%u,SuplHandle,%u\n", v25);
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_18;
    }
    bzero(__str, 0x410uLL);
    uint64_t v27 = 513;
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v13 = "%10u %s%c %s: #%04hx ConnReqParams\n";
LABEL_16:
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, v13, v26, "LSM", 87, "GN_SUPL_Connect_Req_Out", v27, v28, v29);
  }
  LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
LABEL_18:
  uint64_t v15 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GN_SUPL_Connect_Req_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    return 0;
  }
  return v15;
}

uint64_t GN_SUPL_Disconnect_Req_Out(int a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GN_SUPL_Disconnect_Req_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GN_SUPL_Disconnect_Req_Out", a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  uint64_t v6 = 0;
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    if (g_SuplInstance[74 * v6] == a1)
    {
      if (BYTE1(g_SuplInstance[74 * v6 + 70])) {
        break;
      }
    }
    char v7 = 0;
    uint64_t v6 = 1;
    if ((v8 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "GN_SUPL_Disconnect_Req_Out", 2052, a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
      }
      GN_SUPL_Disconnect_Ind_In(a1, 1);
LABEL_12:
      uint64_t v11 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GN_SUPL_Disconnect_Req_Out");
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
        return 0;
      }
      return v11;
    }
  }
  if (!g_SuplInstance[74 * v6 + 2])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u,SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 87, "GN_SUPL_Disconnect_Req_Out", 770, a1, v6);
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 2, 1);
    }
    GN_SUPL_Disconnect_Ind_In(a1, 16);
    lsim05_34DeleteSuplContext(v6);
    goto LABEL_12;
  }
  uint64_t v11 = 1;
  LOBYTE(g_SuplInstance[74 * v6 + 70]) = 1;
  lsim09_31DisconnectSuplSession((char)v6);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GN_SUPL_Disconnect_Req_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return v11;
}

uint64_t GN_SUPL_PDU_Delivery_Out(int a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_PDU_Delivery_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_PDU_Delivery_Out", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  uint64_t v10 = 0;
  char v11 = 1;
  do
  {
    char v12 = v11;
    if (g_SuplInstance[74 * v10] == a1 && BYTE1(g_SuplInstance[74 * v10 + 70]))
    {
      lsim09_33SendDataReq(a1, a3, a2);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GN_SUPL_PDU_Delivery_Out");
      uint64_t v15 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
      return v15;
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while ((v12 & 1) != 0);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "GN_SUPL_PDU_Delivery_Out", 2052, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
  }
  uint64_t v15 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GN_SUPL_PDU_Delivery_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    return 0;
  }
  return v15;
}

uint64_t GN_SUPL_AidRequest_Out(int a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_AidRequest_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,Timeout,%ums,PosM,%u,GnssMask,%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GN_SUPL_AidRequest_Out", a1, a2, a3, a4);
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  uint64_t v12 = 0;
  char v13 = 1;
  while (1)
  {
    char v14 = v13;
    if (g_SuplInstance[74 * v12] == a1)
    {
      if (BYTE1(g_SuplInstance[74 * v12 + 70])) {
        break;
      }
    }
    char v13 = 0;
    uint64_t v12 = 1;
    if ((v14 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GN_SUPL_AidRequest_Out", 2052, a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
      }
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed) {
        goto LABEL_12;
      }
      return result;
    }
  }
  uint64_t v21 = gnssOsa_Calloc("GN_SUPL_AidRequest_Out", 1524, 1, 0x14uLL);
  if (v21)
  {
    uint64_t v22 = v21;
    int v23 = a3 - 2;
    if (a3 - 2) < 0xF && ((0x7C1Fu >> v23))
    {
      int v25 = dword_22BB44920[v23];
    }
    else
    {
      int v24 = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
      int v25 = 0;
      if (v24)
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosMethod,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 87, "GN_SUPL_AidRequest_Out", 770, a3, a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v27, 2, 1);
        int v25 = 0;
      }
    }
    g_SuplInstance[74 * v12 + 72] = v25;
    if (a4 >= 0x100)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AllowedGnssMask>UINT8_MAX,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 87, "GN_SUPL_AidRequest_Out", 770, a4);
        LOBYTE(a4) = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v30, 2, 1);
      }
      else
      {
        LOBYTE(a4) = 1;
      }
    }
    uint64_t v31 = &g_SuplInstance[74 * v12];
    *((unsigned char *)v31 + 292) = a4;
    v31[1] = a1;
    v22[3] = a2 / 0x3E8;
    v22[4] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_REQ =>GNM,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "LSM", 73, "GN_SUPL_AidRequest_Out", a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
    }
    AgpsSendFsmMsg(131, 128, 8591104, v22);
    BYTE2(g_SuplInstance[74 * v12 + 70]) = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v34 = mach_continuous_time();
      unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "GN_SUPL_AidRequest_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
    }
    return lsim12_01StartTimer((uint64_t)lsim10_05AidStatusTimerExpiry, v12, a2 + 1000, 5);
  }
  else
  {
    int v28 = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    uint64_t result = 0;
    if (v28)
    {
LABEL_12:
      bzero(__str, 0x410uLL);
      unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v19, "LSM", 73, "GN_SUPL_AidRequest_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GN_SUPL_Position_Resp_Out(int a1, int a2, long long *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_Position_Resp_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_Position_Resp_Out", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  uint64_t v10 = 0;
  char v11 = 1;
  while (1)
  {
    char v12 = v11;
    if (g_SuplInstance[74 * v10] == a1)
    {
      if (BYTE1(g_SuplInstance[74 * v10 + 70])) {
        break;
      }
    }
    char v11 = 0;
    uint64_t v10 = 1;
    if ((v12 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "GN_SUPL_Position_Resp_Out", 2052, a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
      }
      uint64_t v15 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_12;
      }
      return v15;
    }
  }
  if (!a3 || *((_DWORD *)a3 + 1) != 1)
  {
    if (g_SuplInstance[74 * v10 + 72] == 2)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
        goto LABEL_26;
      }
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      size_t v26 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NIMSA PosData,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 87, "GN_SUPL_Position_Resp_Out", 513, a1);
      int v27 = 2;
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0)) {
        goto LABEL_26;
      }
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      size_t v26 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NIMSB PosData,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "LSM", 68, "GN_SUPL_Position_Resp_Out", 513, a1);
      int v27 = 5;
    }
    LbsOsaTrace_WriteLog(0xCu, __str, v26, v27, 1);
LABEL_26:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_27:
      bzero(__str, 0x410uLL);
      unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v29, "LSM", 73, "GN_SUPL_Position_Resp_Out");
      uint64_t v15 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
      return v15;
    }
    return 1;
  }
  uint64_t v18 = (char *)gnssOsa_Calloc("GN_SUPL_Position_Resp_Out", 1678, 1, 0x40uLL);
  if (v18)
  {
    unint64_t v19 = v18;
    long long v20 = *a3;
    long long v21 = a3[1];
    long long v22 = a3[2];
    *((_DWORD *)v18 + 15) = *((_DWORD *)a3 + 12);
    *(_OWORD *)(v18 + 44) = v22;
    *(_OWORD *)(v18 + 28) = v21;
    *(_OWORD *)(v18 + 12) = v20;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NETWORK_POS_IND =>GNCP,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "GN_SUPL_Position_Resp_Out", a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8597507, v19);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_27;
    }
    return 1;
  }
  uint64_t v15 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_12:
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v16, "LSM", 73, "GN_SUPL_Position_Resp_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    return 0;
  }
  return v15;
}

uint64_t GN_SUPL_TimerStart_Out(int a1, int a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_TimerStart_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerID,%u,Type,%u,Duration,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_TimerStart_Out", a1, a2, a3);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a2 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GN_SUPL_TimerStart_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
    }
    int v12 = a1;
    unsigned int v13 = a3;
    int v14 = 4;
    return lsim12_01StartTimer((uint64_t)lsim05_40SuplTimerExpiry, v12, v13, v14);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GN_SUPL_TimerStart_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
    int v12 = a1;
    unsigned int v13 = a3;
    int v14 = 3;
    return lsim12_01StartTimer((uint64_t)lsim05_40SuplTimerExpiry, v12, v13, v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "GN_SUPL_TimerStart_Out", 515);
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "GN_SUPL_TimerStart_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
    return 0;
  }
  return result;
}

uint64_t GN_SUPL_TimerStop_Out(int a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GN_SUPL_TimerStop_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerID,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_TimerStop_Out", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a2 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GN_SUPL_TimerStop_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    int v10 = a1;
    int v11 = 4;
    return lsim12_02StopTimer(v10, v11);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_TimerStop_Out");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    int v10 = a1;
    int v11 = 3;
    return lsim12_02StopTimer(v10, v11);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GN_SUPL_TimerStop_Out", 515);
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GN_SUPL_TimerStop_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    return 0;
  }
  return result;
}

uint64_t GN_SUPL_LocIdReq_Out(int a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GN_SUPL_LocIdReq_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReqMask,%X,SimId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GN_SUPL_LocIdReq_Out", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  lsim15_02SendMobileInfoReq(a1, a2);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GN_SUPL_LocIdReq_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 1;
}

uint64_t GN_SUPL_EventNotif_Out(int a1, int a2, int a3, int a4, int a5, int a6, long long *a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GN_SUPL_EventNotif_Out");
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,Event,%u,ConnStatus,%u,SuplMsg,%u,PosM,%u,Cause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GN_SUPL_EventNotif_Out", a1, a2, a3, a4, a5, a6);
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  if (g_GnsSuplCallback)
  {
    memset_s(&__s, 0x348uLL, 0, 0x348uLL);
    int __s = a1;
    char v41 = -1;
    if (a2 == 2)
    {
      int v37 = a3;
      goto LABEL_17;
    }
    if (a2 == 1)
    {
      int v38 = a4;
      int v39 = a5;
      int v40 = a6;
      if (!a7)
      {
LABEL_17:
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:EVNT_INF =>SuplCB,Event,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 73, "GN_SUPL_EventNotif_Out", a2, __s);
          LbsOsaTrace_WriteLog(0xCu, __str, v28, 4, 1);
        }
        g_GnsSuplCallback(1, 840, &__s);
        if (v36) {
          free(v36);
        }
        unsigned __int16 v36 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 73, "GN_SUPL_EventNotif_Out");
        uint64_t v24 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
        return v24;
      }
      uint64_t v18 = gnssOsa_Calloc("GN_SUPL_EventNotif_Out", 1859, 1, 0x78uLL);
      unsigned __int16 v36 = v18;
      if (v18)
      {
        long long v19 = *a7;
        long long v20 = a7[1];
        long long v21 = a7[2];
        *((_DWORD *)v18 + 16) = *((_DWORD *)a7 + 12);
        *((_OWORD *)v18 + 2) = v20;
        *((_OWORD *)v18 + 3) = v21;
        *((_OWORD *)v18 + 1) = v19;
        goto LABEL_17;
      }
      uint64_t v24 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return v24;
      }
      bzero(__str, 0x410uLL);
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      goto LABEL_15;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v31 = mach_continuous_time();
      unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Event,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "LSM", 87, "GN_SUPL_EventNotif_Out", 515, a2, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v32, 2, 1);
    }
    uint64_t v24 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v33, "LSM", 73, "GN_SUPL_EventNotif_Out");
      goto LABEL_27;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Supl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 87, "GN_SUPL_EventNotif_Out", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v23, 2, 1);
    }
    uint64_t v24 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
LABEL_15:
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v25, "LSM", 73, "GN_SUPL_EventNotif_Out");
LABEL_27:
      LbsOsaTrace_WriteLog(0xCu, __str, v26, 4, 1);
      return 0;
    }
  }
  return v24;
}

BOOL GNS_PospInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_PospInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_PospInitialize", 1900, 1, 0x18uLL);
  unsigned __int16 v5 = v4;
  if (v4)
  {
    v4[3] = 4;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_PospInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

size_t GNS_ExecutePospCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_ExecutePospCallback");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsPospCallback)
  {
    g_GnsPospCallback(a1, a2, a3);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx POSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "GNS_ExecutePospCallback", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_ExecutePospCallback");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

uint64_t GNS_PospLocReq(int a1, uint64_t a2, char a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_PospLocReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (lsim03_13SendLocInfoReq(a1, a2, 3, a3))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_PospLocReq");
      uint64_t v10 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PospLocReq,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "GNS_PospLocReq", 515, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "GNS_PospLocReq");
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
    }
    return 2;
  }
  return v10;
}

uint64_t GNS_PospSummaryReport(int a1, char a2, long long *a3, long long *a4, int a5, int a6, int a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GNS_PospSummaryReport");
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  uint64_t v16 = gnssOsa_Calloc("GNS_PospSummaryReport", 2021, 1, 0x38uLL);
  if (!v16)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_20:
      bzero(__str, 0x410uLL);
      unint64_t v32 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v32, "LSM", 73, "GNS_PospSummaryReport");
      LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
    }
    return 6;
  }
  uint64_t v17 = v16;
  if (!a3) {
    goto LABEL_7;
  }
  uint64_t v18 = (char *)gnssOsa_Calloc("GNS_PospSummaryReport", 2031, 1, 0x28uLL);
  v17[3] = v18;
  if (!v18)
  {
    free(v17);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_20;
    }
    return 6;
  }
  long long v19 = *a3;
  long long v20 = a3[1];
  *(void *)(v18 + 31) = *(void *)((char *)a3 + 31);
  *(_OWORD *)uint64_t v18 = v19;
  *((_OWORD *)v18 + 1) = v20;
LABEL_7:
  if (!a4) {
    goto LABEL_10;
  }
  long long v21 = gnssOsa_Calloc("GNS_PospSummaryReport", 2045, 1, 0x78uLL);
  void v17[4] = v21;
  if (!v21)
  {
    uint64_t v31 = (void *)v17[3];
    if (v31) {
      free(v31);
    }
    free(v17);
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 6;
    }
    goto LABEL_20;
  }
  long long v22 = *a4;
  long long v23 = a4[1];
  long long v24 = a4[3];
  v21[2] = a4[2];
  _OWORD v21[3] = v24;
  *long long v21 = v22;
  v21[1] = v23;
  long long v25 = a4[4];
  long long v26 = a4[5];
  long long v27 = a4[6];
  *((void *)v21 + 14) = *((void *)a4 + 14);
  v21[5] = v26;
  v21[6] = v27;
  v21[4] = v25;
LABEL_10:
  *((_DWORD *)v17 + 4) = a1;
  *((unsigned char *)v17 + 20) = a2;
  *((_DWORD *)v17 + 11) = a6;
  *((_DWORD *)v17 + 12) = a7;
  *((_DWORD *)v17 + 10) = a5;
  AgpsSendFsmMsg(131, 131, 8636163, v17);
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v28 = mach_continuous_time();
  unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "LSM", 73, "GNS_PospSummaryReport");
  uint64_t v30 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v29, 4, 1);
  return v30;
}

uint64_t GNS_PospStatusReport(int a1, int a2, long long *a3, long long *a4, long long *a5, char a6)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GNS_PospStatusReport");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  uint64_t v14 = gnssOsa_Calloc("GNS_PospStatusReport", 2102, 1, 0x48uLL);
  if (!v14)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_29:
      bzero(__str, 0x410uLL);
      unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v40, "LSM", 73, "GNS_PospStatusReport");
      LbsOsaTrace_WriteLog(0xCu, __str, v41, 4, 1);
    }
    return 6;
  }
  unsigned __int16 v15 = v14;
  if (!a3) {
    goto LABEL_7;
  }
  uint64_t v16 = gnssOsa_Calloc("GNS_PospStatusReport", 2113, 1, 0x78uLL);
  v15[3] = v16;
  if (!v16)
  {
    free(v15);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_29;
    }
    return 6;
  }
  long long v17 = *a3;
  long long v18 = a3[1];
  long long v19 = a3[3];
  _DWORD v16[2] = a3[2];
  v16[3] = v19;
  *uint64_t v16 = v17;
  v16[1] = v18;
  long long v20 = a3[4];
  long long v21 = a3[5];
  long long v22 = a3[6];
  *((void *)v16 + 14) = *((void *)a3 + 14);
  v16[5] = v21;
  v16[6] = v22;
  void v16[4] = v20;
LABEL_7:
  if (!a4) {
    goto LABEL_10;
  }
  long long v23 = gnssOsa_Calloc("GNS_PospStatusReport", 2127, 1, 0x7CuLL);
  void v15[4] = v23;
  if (!v23)
  {
    int v37 = (void *)v15[3];
    if (v37) {
      free(v37);
    }
    free(v15);
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 6;
    }
    goto LABEL_29;
  }
  long long v24 = *a4;
  long long v25 = a4[1];
  long long v26 = a4[3];
  v23[2] = a4[2];
  v23[3] = v26;
  *long long v23 = v24;
  v23[1] = v25;
  long long v27 = a4[4];
  long long v28 = a4[5];
  long long v29 = a4[6];
  *(_OWORD *)((char *)v23 + 108) = *(long long *)((char *)a4 + 108);
  v23[5] = v28;
  v23[6] = v29;
  void v23[4] = v27;
LABEL_10:
  if (!a5) {
    goto LABEL_13;
  }
  uint64_t v30 = gnssOsa_Calloc("GNS_PospStatusReport", 2142, 1, 0x34uLL);
  v15[5] = v30;
  if (!v30)
  {
    int v38 = (void *)v15[3];
    if (v38) {
      free(v38);
    }
    v15[3] = 0;
    int v39 = (void *)v15[4];
    if (v39) {
      free(v39);
    }
    free(v15);
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 6;
    }
    goto LABEL_29;
  }
  long long v31 = *a5;
  long long v32 = a5[1];
  long long v33 = a5[2];
  v30[12] = *((_DWORD *)a5 + 12);
  *((_OWORD *)v30 + 1) = v32;
  *((_OWORD *)v30 + 2) = v33;
  *(_OWORD *)uint64_t v30 = v31;
LABEL_13:
  *((_DWORD *)v15 + 4) = a1;
  *((_DWORD *)v15 + 12) = a2;
  *((unsigned char *)v15 + 64) = a6;
  AgpsSendFsmMsg(131, 131, 8636419, v15);
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v34 = mach_continuous_time();
  unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "GNS_PospStatusReport");
  uint64_t v36 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
  return v36;
}

BOOL GNS_SuplInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SuplInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_SuplInitialize", 2183, 1, 0x18uLL);
  unsigned __int16 v5 = v4;
  if (v4)
  {
    v4[3] = 3;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_SuplInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

uint64_t GNS_SuplDecodeInit(uint64_t a1, unsigned __int8 *a2, unsigned int a3, const void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_SuplDecodeInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Length,%u,pointer,%p,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_SuplDecodeInit", a3, a2, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  if (a2 && a3 && a4)
  {
    if (GN_SUPL_DecodeSuplInit_In(a1, a2, a3, (uint64_t)a4))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GNS_SuplDecodeInit");
        uint64_t v14 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_DecodeSuplInit_In Failed,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 87, "GNS_SuplDecodeInit", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 2, 1);
      }
      uint64_t v14 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "GNS_SuplDecodeInit");
        LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
        return 0;
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Length,%u,DataPtr,%p,DecodedDataPtr,%p,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_SuplDecodeInit", 513, a3, a2, a4, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GNS_SuplDecodeInit");
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    }
    return 2;
  }
  return v14;
}

uint64_t GNS_SuplAbortSession(int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SuplAbortSession");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_SuplAbortSession", a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  uint64_t v6 = gnssOsa_Calloc("GNS_SuplAbortSession", 2266, 1, 0x10uLL);
  if (v6)
  {
    v6[3] = a1;
    AgpsSendFsmMsg(131, 131, 8635648, v6);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "GNS_SuplAbortSession");
      uint64_t v9 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_SuplAbortSession");
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
    return 6;
  }
  return v9;
}

void *sprintf01da(void *result, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0xA)
  {
    if (a4)
    {
      *a3 = 45;
      unsigned int v4 = 1;
    }
    else
    {
      unsigned int v4 = 0;
    }
    unsigned __int16 v5 = &a3[v4];
    *unsigned __int16 v5 = a2 + 48;
    v5[1] = 0;
    char v6 = *a3;
    if (*a3)
    {
      uint64_t v7 = (unsigned char *)*result;
      unsigned __int16 v8 = a3 + 1;
      do
      {
        *size_t result = v7 + 1;
        *uint64_t v7 = v6;
        uint64_t v7 = (unsigned char *)*result;
        if (*result >= result[3])
        {
          uint64_t v7 = (unsigned char *)result[2];
          *size_t result = v7;
        }
        int v9 = *v8++;
        char v6 = v9;
      }
      while (v9);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)result, a2, a3, 0, a4, 0);
  }
  return result;
}

void *sprintf_02d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf01da(a1, -a2, v3, 1);
  }
  else {
    return (void *)sprintf02da((uint64_t)a1, a2, v3, 0);
  }
}

uint64_t sprintf02da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x64)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit2(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf_03d(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf02da(a1, -a2, v3, 1);
  }
  else {
    return sprintf03da(a1, a2, v3, 0);
  }
}

uint64_t sprintf03da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x3E8)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit3(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf08da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x5F5E100)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit8(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t sprintf_09d(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf08da(a1, -a2, v3, 1);
  }
  else {
    return sprintf09da(a1, a2, v3, 0);
  }
}

uint64_t sprintf09da(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a4)
    {
      *a3 = 45;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    return digit9(a1, a2, a3, v5, 0);
  }
  else
  {
    return nzet(a1, a2, a3, 0, a4, 0);
  }
}

uint64_t digit10(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 + 294967296;
  if (a2 > 0xEE6B27FF)
  {
    char v6 = 52;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x773593FF)
  {
    v5 -= 2000000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x3B9AC9FF);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 10)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x3B9AC9FF) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000000000;
  }

  return digit9(a1, v9, a3, v8, a5);
}

void *sprintf1da(void *result, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0xA)
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    a3[a4] = a2 + 48;
    a3[(a4 + 1)] = 0;
    char v5 = *a3;
    if (*a3)
    {
      char v6 = (unsigned char *)*result;
      char v7 = a3 + 1;
      do
      {
        *size_t result = v6 + 1;
        *char v6 = v5;
        char v6 = (unsigned char *)*result;
        if (*result >= result[3])
        {
          char v6 = (unsigned char *)result[2];
          *size_t result = v6;
        }
        int v8 = *v7++;
        char v5 = v8;
      }
      while (v8);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)result, a2, a3, a4, a5, 0);
  }
  return result;
}

void *sprintf_2d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf1da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf2da(a1, a2, v3, 0, 0);
  }
}

void *sprintf2da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x64)
  {
    if (a2 < 0xA)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf1da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit2((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_3d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf2da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf3da(a1, a2, v3, 0, 0);
  }
}

void *sprintf3da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x3E8)
  {
    if (a2 < 0x64)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf2da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit3((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_4d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf3da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf4da(a1, a2, v3, 0, 0);
  }
}

void *sprintf4da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 >> 4 < 0x271)
  {
    if (a2 < 0x3E8)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf3da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit4((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_5d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf4da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf5da(a1, a2, v3, 0, 0);
  }
}

void *sprintf5da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 >> 5 < 0xC35)
  {
    if (a2 >> 4 < 0x271)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf4da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit5((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_6d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf5da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf6da(a1, a2, v3, 0, 0);
  }
}

void *sprintf6da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0xF4240)
  {
    if (a2 >> 5 < 0xC35)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf5da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit6((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_7d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf6da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf7da(a1, a2, v3, 0, 0);
  }
}

void *sprintf7da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x989680)
  {
    if (a2 < 0xF4240)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf6da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit7((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_8d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf7da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf8da(a1, a2, v3, 0, 0);
  }
}

void *sprintf8da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x5F5E100)
  {
    if (a2 < 0x989680)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf7da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit8((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_9d(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0) {
    return sprintf8da(a1, -a2, v3, 0, 1);
  }
  else {
    return sprintf9da(a1, a2, v3, 0, 0);
  }
}

void *sprintf9da(void *a1, unsigned int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a2 < 0x5F5E100)
    {
      a3[a4] = 32;
      unsigned int v6 = (a4 + 1);
      return sprintf8da(a1, a2, a3, v6, a5);
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return (void *)digit9((uint64_t)a1, a2, a3, a4, 0);
    }
  }
  else
  {
    return (void *)nzet((uint64_t)a1, a2, a3, a4, a5, 0);
  }
}

void *sprintf_10d(void *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    unsigned int v3 = 0;
    int v4 = 1;
  }
  else
  {
    if (a2 >= 0x3B9ACA00) {
      return (void *)digit10((uint64_t)a1, a2, v5, 0, 0);
    }
    v5[0] = 32;
    unsigned int v3 = 1;
    int v4 = 0;
  }
  return sprintf9da(a1, a2, v5, v3, v4);
}

void *sprintf_10u(void *a1, unsigned int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a2 >= 0x3B9ACA00) {
    return (void *)digit10((uint64_t)a1, a2, v3, 0, 0);
  }
  v3[0] = 32;
  return sprintf9da(a1, a2, v3, 1u, 0);
}

uint64_t sprintf_2f(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_2fa(a1, a2, v5, 0, 0);
  }
  unsigned int v4 = -a2;
  if (a2 <= 0xFFFFFFF6) {
    return nzet(a1, v4, v5, 0, 1, 2);
  }
  v5[0] = 45;
  return digit2(a1, v4, v5, 1, 2);
}

uint64_t sprintf_3f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_3fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFFF9C) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 3) {
    return sprintf_2fa(a1, v5, v6, 0, 1);
  }
  v6[0] = 45;
  return digit3(a1, v5, v6, 1, 3);
}

uint64_t sprintf_4f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_4fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFFC18) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 4) {
    return sprintf_3fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit4(a1, v5, v6, 1, 4);
}

uint64_t sprintf_5f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_5fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFFD8F0) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 5) {
    return sprintf_4fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit5(a1, v5, v6, 1, 5);
}

uint64_t sprintf_6f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_6fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFFE7960) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 6) {
    return sprintf_5fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit6(a1, v5, v6, 1, 6);
}

uint64_t sprintf_7f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_7fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFFF0BDC0) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 7) {
    return sprintf_6fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit7(a1, v5, v6, 1, 7);
}

uint64_t sprintf_8f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) == 0) {
    return sprintf_8fa(a1, a2, v6, 0, 0, a3);
  }
  int v5 = -a2;
  if (a2 <= 0xFF676980) {
    return nzet(a1, v5, v6, 0, 1, a3);
  }
  if (a3 != 8) {
    return sprintf_7fa(a1, v5, v6, 0, 1, a3);
  }
  v6[0] = 45;
  return digit8(a1, v5, v6, 1, 8);
}

uint64_t sprintf_9f(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 <= 0xFA0A1F00)
    {
      a2 = -a2;
      int v3 = 1;
      return nzet(a1, a2, v8, 0, v3, a3);
    }
    if (a3 == 9)
    {
      v8[0] = 45;
      a2 = -a2;
      int v5 = 1;
      return digit9(a1, a2, v8, v5, 9);
    }
    a2 = -a2;
    unsigned int v6 = 0;
    int v7 = 1;
  }
  else
  {
    if (a2 >= 0x5F5E100)
    {
      int v3 = 0;
      return nzet(a1, a2, v8, 0, v3, a3);
    }
    if (a3 == 9)
    {
      int v5 = 0;
      return digit9(a1, a2, v8, v5, 9);
    }
    v8[0] = 32;
    unsigned int v6 = 1;
    int v7 = 0;
  }
  return sprintf_8fa(a1, a2, v8, v6, v7, a3);
}

uint64_t sprintf_10f9(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 <= 0xC4653600)
    {
      a2 = -a2;
      int v2 = 1;
      return nzet(a1, a2, v5, 0, v2, 10);
    }
    v5[0] = 45;
    a2 = -a2;
    int v4 = 1;
  }
  else
  {
    if (a2 >= 0x3B9ACA00)
    {
      int v2 = 0;
      return nzet(a1, a2, v5, 0, v2, 10);
    }
    int v4 = 0;
  }
  return digit10(a1, a2, v5, v4, 10);
}

char **sprintf_1x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x10) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[a2];
  int v3 = &v7;
  char v7 = 0;
  int v4 = *result;
  do
  {
    *size_t result = v4 + 1;
    char *v4 = v2;
    int v4 = *result;
    if (*result >= result[3])
    {
      int v4 = result[2];
      *size_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **nzxt(char **result, unint64_t a2, char *a3)
{
  if (a2 >> 28)
  {
    *a3 = hexTABLE[(unint64_t)a2 >> 28];
    a3[1] = hexTABLE[(a2 >> 24) & 0xF];
    int v3 = 2;
    goto LABEL_5;
  }
  if ((a2 & 0xF000000) != 0)
  {
    *a3 = hexTABLE[(unint64_t)a2 >> 24];
    int v3 = 1;
LABEL_5:
    return (char **)hex6((uint64_t)result, a2, a3, v3);
  }
  if ((a2 & 0xF00000) != 0)
  {
    int v3 = 0;
    goto LABEL_5;
  }
  if ((a2 & 0xF0000) != 0)
  {
    char v4 = hexTABLE[(a2 >> 16) & 0xF];
    *a3 = v4;
    a3[1] = hexTABLE[(unsigned __int16)a2 >> 12];
    int v5 = (unsigned __int8 *)(a3 + 1);
    a3[2] = hexTABLE[(a2 >> 8) & 0xF];
    a3[3] = hexTABLE[a2 >> 4];
    a3[4] = hexTABLE[a2 & 0xF];
    a3[5] = 0;
    char v6 = *result;
    do
    {
      *size_t result = v6 + 1;
      *char v6 = v4;
      char v6 = *result;
      if (*result >= result[3])
      {
        char v6 = result[2];
        *size_t result = v6;
      }
      int v7 = *v5++;
      char v4 = v7;
    }
    while (v7);
    return result;
  }
  if ((a2 & 0xF000) != 0)
  {
    *a3 = hexTABLE[(unsigned __int16)a2 >> 12];
    int v8 = 1;
LABEL_20:
    return (char **)hex3((uint64_t)result, a2, a3, v8);
  }
  if ((a2 & 0xF00) != 0)
  {
    int v8 = 0;
    goto LABEL_20;
  }
  if ((a2 & 0xF0) != 0)
  {
    char v9 = hexTABLE[a2 >> 4];
    *a3 = v9;
    a3[1] = hexTABLE[a2 & 0xF];
    uint64_t v10 = (unsigned __int8 *)(a3 + 1);
    a3[2] = 0;
    unsigned __int16 v11 = *result;
    do
    {
      *size_t result = v11 + 1;
      *unsigned __int16 v11 = v9;
      unsigned __int16 v11 = *result;
      if (*result >= result[3])
      {
        unsigned __int16 v11 = result[2];
        *size_t result = v11;
      }
      int v12 = *v10++;
      char v9 = v12;
    }
    while (v12);
  }
  else
  {
    unsigned __int8 v13 = hexTABLE[a2 & 0xF];
    *(_WORD *)a3 = v13;
    uint64_t v14 = (unsigned __int8 *)(a3 + 1);
    uint64_t v15 = (unsigned __int8 *)*result;
    do
    {
      *size_t result = (char *)(v15 + 1);
      *uint64_t v15 = v13;
      uint64_t v15 = (unsigned __int8 *)*result;
      if (*result >= result[3])
      {
        uint64_t v15 = (unsigned __int8 *)result[2];
        *size_t result = (char *)v15;
      }
      int v16 = *v14++;
      unsigned __int8 v13 = v16;
    }
    while (v16);
  }
  return result;
}

char **sprintf_02x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x100) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 4];
  int v3 = v7;
  v7[0] = hexTABLE[a2 & 0xF];
  v7[1] = 0;
  char v4 = *result;
  do
  {
    *size_t result = v4 + 1;
    char *v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *size_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **sprintf_03x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x1000) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 8];
  int v3 = v7;
  v7[0] = hexTABLE[a2 >> 4];
  v7[1] = hexTABLE[a2 & 0xF];
  v7[2] = 0;
  char v4 = *result;
  do
  {
    *size_t result = v4 + 1;
    char *v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *size_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

uint64_t hex3(uint64_t result, unint64_t a2, unsigned char *a3, int a4)
{
  char v4 = &a3[a4];
  unsigned char *v4 = hexTABLE[(a2 >> 8) & 0xF];
  v4[1] = hexTABLE[a2 >> 4];
  *((_WORD *)v4 + 1) = hexTABLE[a2 & 0xF];
  char v5 = *a3;
  if (*a3)
  {
    char v6 = *(unsigned char **)result;
    int v7 = a3 + 1;
    do
    {
      *(void *)size_t result = v6 + 1;
      *char v6 = v5;
      char v6 = *(unsigned char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        char v6 = *(unsigned char **)(result + 16);
        *(void *)size_t result = v6;
      }
      int v8 = *v7++;
      char v5 = v8;
    }
    while (v8);
  }
  return result;
}

char **sprintf_04x(char **result, unint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 >= 0x10000) {
    return nzxt(result, a2, &v6);
  }
  char v2 = hexTABLE[(unint64_t)a2 >> 12];
  int v3 = v7;
  v7[0] = hexTABLE[(a2 >> 8) & 0xF];
  v7[1] = hexTABLE[a2 >> 4];
  v7[2] = hexTABLE[a2 & 0xF];
  v7[3] = 0;
  char v4 = *result;
  do
  {
    *size_t result = v4 + 1;
    char *v4 = v2;
    char v4 = *result;
    if (*result >= result[3])
    {
      char v4 = result[2];
      *size_t result = v4;
    }
    int v5 = *v3++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

char **sprintf_06x(char **a1, unint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (BYTE3(a2)) {
    return nzxt(a1, a2, v3);
  }
  else {
    return (char **)hex6((uint64_t)a1, a2, v3, 0);
  }
}

uint64_t hex6(uint64_t a1, unint64_t a2, unsigned char *a3, int a4)
{
  uint64_t v4 = &a3[a4];
  unsigned char *v4 = hexTABLE[(a2 >> 20) & 0xF];
  v4[1] = hexTABLE[(a2 >> 16) & 0xF];
  v4[2] = hexTABLE[(unsigned __int16)a2 >> 12];
  int v5 = (a4 + 3);

  return hex3(a1, a2, a3, v5);
}

uint64_t digit9(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800000000;
  if (a2 > 0x2FAF07FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x17D783FF)
  {
    v5 -= 400000000;
    v6 |= 4u;
  }
  if (v5 > 0xBEBC1FF)
  {
    v5 -= 200000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x5F5E0FF);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 9)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x5F5E0FF) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 100000000;
  }

  return digit8(a1, v9, a3, v8, a5);
}

uint64_t digit8(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80000000;
  if (a2 > 0x4C4B3FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x26259FF)
  {
    v5 -= 40000000;
    v6 |= 4u;
  }
  if (v5 > 0x1312CFF)
  {
    v5 -= 20000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x98967F);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 8)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x98967F) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 10000000;
  }

  return digit7(a1, v9, a3, v8, a5);
}

uint64_t digit7(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 8000000;
  if (a2 > 0x7A11FF)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x3D08FF)
  {
    v5 -= 4000000;
    v6 |= 4u;
  }
  if (v5 > 0x1E847F)
  {
    v5 -= 2000000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0xF423F);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 7)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0xF423F) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000000;
  }

  return digit6(a1, v9, a3, v8, a5);
}

uint64_t digit6(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800000;
  if (a2 >> 8 > 0xC34)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  unsigned int v7 = v5 >> 7;
  if (v5 >> 7 > 0xC34) {
    v5 -= 400000;
  }
  if (v7 > 0xC34) {
    v6 |= 4u;
  }
  unsigned int v8 = v5 >> 6;
  if (v5 >> 6 > 0xC34) {
    v5 -= 200000;
  }
  if (v8 > 0xC34) {
    v6 |= 2u;
  }
  char v9 = v6 | (v5 >> 5 > 0xC34);
  unsigned __int8 v10 = a4 + 1;
  a3[a4] = v9;
  if (a5 == 6)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v10 = a4 + 2;
  }
  if (v5 >> 5 <= 0xC34) {
    unsigned int v11 = v5;
  }
  else {
    unsigned int v11 = v5 - 100000;
  }

  return digit5(a1, v11, a3, v10, a5);
}

uint64_t digit5(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80000;
  if (a2 >> 7 > 0x270)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  unsigned int v7 = v5 >> 6;
  if (v5 >> 6 > 0x270) {
    v5 -= 40000;
  }
  if (v7 > 0x270) {
    v6 |= 4u;
  }
  unsigned int v8 = v5 >> 5;
  if (v5 >> 5 > 0x270) {
    v5 -= 20000;
  }
  if (v8 > 0x270) {
    v6 |= 2u;
  }
  char v9 = v6 | (v5 >> 4 > 0x270);
  unsigned __int8 v10 = a4 + 1;
  a3[a4] = v9;
  if (a5 == 5)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v10 = a4 + 2;
  }
  if (v5 >> 4 <= 0x270) {
    unsigned int v11 = v5;
  }
  else {
    unsigned int v11 = v5 - 10000;
  }

  return digit4(a1, v11, a3, v10, a5);
}

uint64_t digit4(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 8000;
  if (a2 >> 6 > 0x7C)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0xF9F)
  {
    v5 -= 4000;
    v6 |= 4u;
  }
  if (v5 > 0x7CF)
  {
    v5 -= 2000;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x3E7);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 4)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x3E7) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 1000;
  }

  return digit3(a1, v9, a3, v8, a5);
}

uint64_t digit3(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 800;
  if (a2 > 0x31F)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x18F)
  {
    v5 -= 400;
    v6 |= 4u;
  }
  if (v5 > 0xC7)
  {
    v5 -= 200;
    v6 |= 2u;
  }
  char v7 = v6 | (v5 > 0x63);
  unsigned __int8 v8 = a4 + 1;
  a3[a4] = v7;
  if (a5 == 3)
  {
    a3[(a4 + 1)] = 46;
    unsigned __int8 v8 = a4 + 2;
  }
  if (v5 <= 0x63) {
    unsigned int v9 = v5;
  }
  else {
    unsigned int v9 = v5 - 100;
  }

  return digit2(a1, v9, a3, v8, a5);
}

uint64_t digit2(uint64_t result, unsigned int a2, unsigned char *a3, int a4, int a5)
{
  unsigned int v5 = a2 - 80;
  if (a2 > 0x4F)
  {
    char v6 = 56;
  }
  else
  {
    unsigned int v5 = a2;
    char v6 = 48;
  }
  if (v5 > 0x27)
  {
    v5 -= 40;
    v6 |= 4u;
  }
  char v7 = v6 | 2;
  if (v5 <= 0x13) {
    char v7 = v6;
  }
  else {
    v5 -= 20;
  }
  char v8 = v5 - 10;
  if (v5 <= 9) {
    char v8 = v5;
  }
  a3[a4] = v7 | (v5 > 9);
  if (a5 == 2)
  {
    unsigned __int8 v9 = a4 + 2;
    a3[(a4 + 1)] = 46;
    char v10 = v8 + 48;
  }
  else
  {
    unsigned __int8 v9 = a4 + 2;
    a3[(a4 + 1)] = v8 + 48;
    if (a5 != 1) {
      goto LABEL_16;
    }
    char v10 = 46;
  }
  a3[v9] = v10;
  unsigned __int8 v9 = a4 + 3;
LABEL_16:
  a3[v9] = 0;
  char v11 = *a3;
  if (*a3)
  {
    int v12 = *(unsigned char **)result;
    unsigned __int8 v13 = a3 + 1;
    do
    {
      *(void *)size_t result = v12 + 1;
      *int v12 = v11;
      int v12 = *(unsigned char **)result;
      if (*(void *)result >= *(void *)(result + 24))
      {
        int v12 = *(unsigned char **)(result + 16);
        *(void *)size_t result = v12;
      }
      int v14 = *v13++;
      char v11 = v14;
    }
    while (v14);
  }
  return result;
}

uint64_t nzet(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (a2 < 0x3B9ACA00)
  {
    if (a2 < 0x5F5E100)
    {
      if (a2 < 0x989680)
      {
        if (a2 < 0xF4240)
        {
          if (a2 >> 5 < 0xC35)
          {
            if (a2 >> 4 < 0x271)
            {
              if (a2 < 0x3E8)
              {
                if (a2 < 0x64)
                {
                  if (a5)
                  {
                    a3[a4] = 45;
                    LOBYTE(a4) = a4 + 1;
                  }
                  return digit2(a1, a2, a3, a4, a6);
                }
                else
                {
                  if (a5)
                  {
                    a3[a4] = 45;
                    LOBYTE(a4) = a4 + 1;
                  }
                  return digit3(a1, a2, a3, a4, a6);
                }
              }
              else
              {
                if (a5)
                {
                  a3[a4] = 45;
                  LOBYTE(a4) = a4 + 1;
                }
                return digit4(a1, a2, a3, a4, a6);
              }
            }
            else
            {
              if (a5)
              {
                a3[a4] = 45;
                LOBYTE(a4) = a4 + 1;
              }
              return digit5(a1, a2, a3, a4, a6);
            }
          }
          else
          {
            if (a5)
            {
              a3[a4] = 45;
              LOBYTE(a4) = a4 + 1;
            }
            return digit6(a1, a2, a3, a4, a6);
          }
        }
        else
        {
          if (a5)
          {
            a3[a4] = 45;
            LOBYTE(a4) = a4 + 1;
          }
          return digit7(a1, a2, a3, a4, a6);
        }
      }
      else
      {
        if (a5)
        {
          a3[a4] = 45;
          LOBYTE(a4) = a4 + 1;
        }
        return digit8(a1, a2, a3, a4, a6);
      }
    }
    else
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit9(a1, a2, a3, a4, a6);
    }
  }
  else
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    return digit10(a1, a2, a3, a4, a6);
  }
}

uint64_t sprintf_2fa(uint64_t a1, signed int a2, unsigned char *a3, unsigned int a4, int a5)
{
  if (a2 < 10)
  {
    if (a5)
    {
      a3[a4] = 45;
      LOBYTE(a4) = a4 + 1;
    }
    return digit2(a1, a2, a3, a4, 2);
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, 2);
  }
}

uint64_t sprintf_3fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 100)
  {
    if (a6 == 3)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit3(a1, a2, a3, a4, 3);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_2fa(a1, a2, a3, v7, a5);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_4fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 1000)
  {
    if (a6 == 4)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit4(a1, a2, a3, a4, 4);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_3fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_5fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 10000)
  {
    if (a6 == 5)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit5(a1, a2, a3, a4, 5);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_4fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_6fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 100000)
  {
    if (a6 == 6)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit6(a1, a2, a3, a4, 6);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_5fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_7fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 1000000)
  {
    if (a6 == 7)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit7(a1, a2, a3, a4, 7);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_6fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sprintf_8fa(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  if (a2 < 10000000)
  {
    if (a6 == 8)
    {
      if (a5)
      {
        a3[a4] = 45;
        LOBYTE(a4) = a4 + 1;
      }
      return digit8(a1, a2, a3, a4, 8);
    }
    else
    {
      a3[a4] = 32;
      unsigned int v7 = (a4 + 1);
      return sprintf_7fa(a1, a2, a3, v7, a5, a6);
    }
  }
  else
  {
    return nzet(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t asn1PE_SatelliteInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 1, 31, (unint64_t)(a2[1] - *a2) >> 3);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_14:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_13;
      }
      uint64_t v11 = Asn1Coder::EncodeInteger(a1, 0, 63, *(_DWORD *)(v8 + v9));
      if (v11)
      {
        uint64_t v5 = v11;
        int v12 = *(_DWORD *)(a1 + 8);
        int v13 = *(_DWORD *)(a1 + 12);
        goto LABEL_13;
      }
      uint64_t v11 = Asn1Coder::EncodeInteger(a1, 0, 255, *(_DWORD *)(v8 + v9 + 4));
      if (v11) {
        break;
      }
      ++v10;
      uint64_t v8 = *a2;
      v9 += 8;
      if (v10 >= (a2[1] - *a2) >> 3) {
        return 0;
      }
    }
    uint64_t v5 = v11;
    int v12 = *(_DWORD *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 12);
LABEL_13:
    SuplAsn1Logger::TraceError(v11, v12, v13);
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
    goto LABEL_14;
  }
  return 0;
}

uint64_t asn1PE_NavigationModel(uint64_t a1, uint64_t *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_13:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_13;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 1023, *((unsigned __int16 *)a2 + 1));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 167, *((unsigned __int8 *)a2 + 4));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 31, *((unsigned __int8 *)a2 + 5));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 10, *((unsigned __int8 *)a2 + 6));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  if (!*(unsigned char *)a2) {
    return 0;
  }
  uint64_t v7 = asn1PE_SatelliteInfo(a1, a2 + 1);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  return v4;
}

uint64_t asn1PE_RequestedAssistData(uint64_t a1, uint64_t *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_23:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 1));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 2));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 3));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 4));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 5));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 6));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 7));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 8));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 9));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_23;
  }
  if (!*(unsigned char *)a2) {
    return 0;
  }

  return asn1PE_NavigationModel(a1, a2 + 2);
}

uint64_t asn1PE_SUPLPOSINIT(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_13:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_13;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_13;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_13;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[3]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_13;
  }
  uint64_t v7 = asn1PE_SETCapabilities(a1, a2 + 4);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_RequestedAssistData(a1, (uint64_t *)a2 + 4);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
  }
  uint64_t v7 = asn1PE_LocationId(a1, a2 + 80);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  if (a2[1])
  {
    uint64_t v7 = asn1PE_Position(a1, a2 + 224);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
  }
  if (a2[2])
  {
    uint64_t v7 = asn1PE_SUPLPOS(a1, a2 + 648);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
  }
  if (!a2[3]) {
    return 0;
  }

  return asn1PE_Ver(a1, (void *)a2 + 145);
}

uint64_t GncS00_04HandleInitInd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_INIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS00_04HandleInitInd");
    LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  }
  bzero(__str, 0x50D0CuLL);
  s_GncS_FGClientData::s_GncS_FGClientData((s_GncS_FGClientData *)__str);
  memcpy(g_GncSFGClientData, __str, 0x50D0CuLL);
  g_GncSConfig = 65536000;
  return 0;
}

uint64_t GncS00_06HandleDeInitInd()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_DEINIT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncS00_06HandleDeInitInd");
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  GncS04_99DeInitFGClientInstance();
  return 0;
}

uint64_t GncS00_03DefaultMessage(unsigned __int8 *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:MID,%x,Srce,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncS00_03DefaultMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
      int v4 = 2;
LABEL_6:
      LbsOsaTrace_WriteLog(8u, __str, v3, v4, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncS00_03DefaultMessage", 517);
    int v4 = 0;
    goto LABEL_6;
  }
  return 0;
}

void GncS00_01Init(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncS00_01Init", 77, 1, 0x10uLL);
  if (v0)
  {
    unsigned __int16 v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_INIT_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_01Init");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(130, 130, 8521731, v1);
  }
}

void GncS00_02DeInit(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncS00_02DeInit", 98, 1, 0x10uLL);
  if (v0)
  {
    unsigned __int16 v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_DEINIT_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_02DeInit");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(130, 130, 8521987, v1);
  }
}

void GncS00_07DestMissingHandler(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 <= 8521219)
  {
    if (v4 != 8520195 && v4 != 8520963) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (v4 == 8521220)
  {
LABEL_12:
    uint64_t v6 = *(void **)(a1 + 24);
    if (v6) {
      free(v6);
    }
    *(void *)(a1 + 24) = 0;
    return;
  }
  if (v4 != 8521475)
  {
LABEL_16:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncS00_07DestMissingHandler", *(_DWORD *)(a1 + 4));
      LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
    }
    return;
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5) {
    free(v5);
  }
  *(void *)(a1 + 16) = 0;
}

uint64_t FN_SA_FPE_To_Nav_Soln(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 20);
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 22);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 24);
  *(void *)(a2 + 28) = *(void *)(a1 + 28);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  long long v5 = *(_OWORD *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 72) = v6;
  *(_OWORD *)(a2 + 88) = v5;
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 120);
  long long v10 = *(_OWORD *)(a1 + 136);
  *(void *)(a2 + 152) = *(void *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v10;
  *(_OWORD *)(a2 + 120) = v9;
  *(_OWORD *)(a2 + 104) = v8;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
  long long v11 = *(_OWORD *)(a1 + 192);
  *(void *)(a2 + 208) = *(void *)(a1 + 208);
  *(_OWORD *)(a2 + 192) = v11;
  long long v12 = *(_OWORD *)(a1 + 216);
  *(void *)(a2 + 232) = *(void *)(a1 + 232);
  *(_OWORD *)(a2 + 216) = v12;
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 240);
  *(void *)(a2 + 256) = *(void *)(a1 + 256);
  long long v13 = *(_OWORD *)(a1 + 264);
  long long v14 = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a2 + 296) = v14;
  *(_OWORD *)(a2 + 264) = v13;
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 392) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a2 + 408) = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a2 + 424) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a2 + 456) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(a2 + 488) = *(_OWORD *)(a1 + 488);
  *(_OWORD *)(a2 + 504) = *(_OWORD *)(a1 + 504);
  *(_OWORD *)(a2 + 520) = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(a1 + 536);
  *(_WORD *)(a2 + 552) = *(_WORD *)(a1 + 552);
  memcpy((void *)(a2 + 560), (const void *)(a1 + 560), 0x180uLL);
  long long v15 = *(_OWORD *)(a1 + 944);
  *(void *)(a2 + 960) = *(void *)(a1 + 960);
  *(_OWORD *)(a2 + 944) = v15;
  uint64_t v16 = *(void *)(a1 + 984);
  *(_OWORD *)(a2 + 968) = *(_OWORD *)(a1 + 968);
  *(void *)(a2 + 984) = v16;
  uint64_t v17 = *(void *)(a1 + 1008);
  *(_OWORD *)(a2 + 992) = *(_OWORD *)(a1 + 992);
  *(void *)(a2 + 1008) = v17;
  return 1;
}

double Fused_Nav_SA_FPE_Init(uint64_t a1)
{
  memset(__src, 0, 288);
  memset(v6, 0, sizeof(v6));
  memset(&v5[79], 0, 48);
  memset(v5, 0, 315);
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset((char *)&__src[150] + 1, 0, 9);
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 14) = *(void *)&__src[151];
  *(_WORD *)(a1 + 22) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  memcpy((void *)(a1 + 25), __src, 0x120uLL);
  *(_OWORD *)(a1 + 313) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 377) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 409) = 0u;
  *(_OWORD *)(a1 + 425) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 457) = 0u;
  *(_OWORD *)(a1 + 473) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 521) = 0u;
  *(_OWORD *)(a1 + 537) = 0u;
  *(unsigned char *)(a1 + 553) = 0;
  memcpy((void *)(a1 + 554), v6, 0x198uLL);
  *(_OWORD *)(a1 + 962) = *(_OWORD *)&v5[85];
  *(void *)(a1 + 978) = *(void *)&v5[89];
  *(_OWORD *)(a1 + 986) = *(_OWORD *)&v5[79];
  *(void *)(a1 + 1002) = *(void *)&v5[83];
  *(_OWORD *)(a1 + 1010) = *(_OWORD *)&v5[72];
  *(_OWORD *)(a1 + 1021) = *(_OWORD *)((char *)&v5[74] + 3);
  *(unsigned char *)(a1 + 1037) = 0;
  *(_WORD *)(a1 + 1038) = 0;
  *(unsigned char *)(a1 + 1040) = 0;
  memcpy((void *)(a1 + 1041), v5, 0x120uLL);
  *(_OWORD *)(a1 + 1329) = 0u;
  *(_OWORD *)(a1 + 1345) = 0u;
  *(_OWORD *)(a1 + 1361) = 0u;
  *(_OWORD *)(a1 + 1377) = 0u;
  *(_OWORD *)(a1 + 1393) = 0u;
  *(_OWORD *)(a1 + 1409) = 0u;
  *(_OWORD *)(a1 + 1425) = 0u;
  *(_OWORD *)(a1 + 1441) = 0u;
  *(_OWORD *)(a1 + 1457) = 0u;
  *(_OWORD *)(a1 + 1473) = 0u;
  *(_OWORD *)(a1 + 1489) = 0u;
  *(_OWORD *)(a1 + 1505) = 0u;
  *(_OWORD *)(a1 + 1521) = 0u;
  *(_OWORD *)(a1 + 1537) = 0u;
  *(_OWORD *)(a1 + 1553) = 0u;
  *(unsigned char *)(a1 + 1569) = 0;
  memcpy((void *)(a1 + 1570), v4, 0x198uLL);
  *(_OWORD *)(a1 + 1978) = *(_OWORD *)((char *)&v3[1] + 8);
  *(void *)(a1 + 1994) = *((void *)&v3[2] + 1);
  *(_OWORD *)(a1 + 2002) = v3[0];
  *(void *)(a1 + 2018) = *(void *)&v3[1];
  double result = 0.0;
  *(_OWORD *)(a1 + 2026) = 0u;
  *(_OWORD *)(a1 + 2042) = 0u;
  *(_OWORD *)(a1 + 2058) = 0u;
  *(_OWORD *)(a1 + 2074) = 0u;
  *(_OWORD *)(a1 + 2090) = 0u;
  *(_OWORD *)(a1 + 2106) = 0u;
  *(_OWORD *)(a1 + 2122) = 0u;
  *(_OWORD *)(a1 + 2138) = 0u;
  return result;
}

uint64_t FN_Fuse_With_SA_FPE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unsigned __int8 v7 = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 2136);
  uint64_t v9 = v8 % 5;
  *(unsigned char *)(a2 + v9 + 2088) = *(unsigned char *)(a1 + 1040);
  uint64_t v10 = a1 + 1044;
  *(_DWORD *)(a2 + 2136) = v8 + 1;
  uint64_t v11 = a2 + 8 * v9;
  long long v12 = (double *)(v11 + 2048);
  *(double *)(v11 + 2048) = sqrt(*(double *)(a1 + 1152) * *(double *)(a1 + 1152)+ *(double *)(a1 + 1160) * *(double *)(a1 + 1160));
  *(double *)(v11 + 2096) = sqrt(*(double *)(a1 + 136) * *(double *)(a1 + 136)+ *(double *)(a1 + 144) * *(double *)(a1 + 144));
  long long v13 = (double *)(v11 + 2096);
  double v14 = 0.0;
  double v15 = 0.0;
  do
  {
    if (*(unsigned char *)(a2 + v6 + 2088))
    {
      double v15 = v15 + *(double *)(a2 + 8 * v6 + 2048);
      ++v7;
    }
    double v14 = v14 + *(double *)(a2 + 8 * v6++ + 2096);
  }
  while (v6 != 5);
  double v16 = v15 / (double)v7;
  if (v7) {
    double v17 = v16;
  }
  else {
    double v17 = -999.0;
  }
  double v18 = v14 / 5.0;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v20 = *(double *)(g_TCU + 8);
    }
    else {
      double v20 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Horizontal Errors: GNSS: calc=%f curr=%f (%f,%f,%f,%f,%f), FPE: calc=%f curr=%f ((%f,%f,%f,%f,%f) valid=(%d,%d,%d,%d,%d)", "FN_Fuse_With_SA_FPE", 297, v19, v20, v18, *v13, *(double *)(a2 + 2096), *(double *)(a2 + 2104), *(double *)(a2 + 2112), *(double *)(a2 + 2120), *(double *)(a2 + 2128), v17, *v12, *(double *)(a2 + 2048), *(double *)(a2 + 2056), *(double *)(a2 + 2064), *(double *)(a2 + 2072),
      *(double *)(a2 + 2080),
      *(unsigned __int8 *)(a2 + 2088),
      *(unsigned __int8 *)(a2 + 2089),
      *(unsigned __int8 *)(a2 + 2090),
      *(unsigned __int8 *)(a2 + 2091),
      *(unsigned __int8 *)(a2 + 2092));
  }
  *(double *)(a1 + 2040) = v18;
  *(double *)(a1 + 2048) = v17;
  BOOL v21 = v17 > v18 * 4.0 && v17 > 35.0;
  BOOL v63 = v21;
  int v22 = *(_DWORD *)(a1 + 1052);
  BOOL v23 = v22 == 0;
  unsigned int v24 = **(unsigned __int16 **)(a3 + 40);
  if (*(unsigned __int16 *)(a2 + 2144) >= v24)
  {
    int v26 = *(_DWORD *)(a1 + 4);
    int v25 = *(_DWORD *)(a2 + 2140);
  }
  else
  {
    *(_WORD *)(a2 + 2144) = v24;
    int v25 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a2 + 2140) = v25;
    int v26 = v25;
  }
  int v27 = v26 - v25;
  int v28 = 40000;
  if (v27 > 599999)
  {
    BOOL v30 = 0;
  }
  else
  {
    unsigned int v29 = **(_DWORD **)(a3 + 232) - 1;
    BOOL v30 = v29 < 5;
    if (v29 >= 5) {
      int v28 = 40000;
    }
    else {
      int v28 = 60000;
    }
  }
  int v31 = *(unsigned __int8 *)(a1 + 1040);
  if (!*(unsigned char *)(a1 + 1040))
  {
    *(_DWORD *)(a2 + 2148) = 0;
    *(unsigned char *)(a2 + 2152) = 0;
    long long v33 = (unsigned __int8 *)(a2 + 2032);
    unsigned int v34 = *(unsigned __int8 *)(a2 + 2032);
    if (*(unsigned char *)(a2 + 2032))
    {
      BOOL v35 = v26 - *(_DWORD *)(a2 + 2036) >= v28;
LABEL_30:
      *(unsigned char *)(a2 + 2032) = 0;
      *(_DWORD *)(a2 + 2040) = 0;
      *(_DWORD *)(a2 + 2036) = v26;
      *(unsigned char *)(a2 + 2153) = v23;
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v37 = *(double *)(g_TCU + 8);
        }
        else {
          double v37 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: eventsLog = {time:%f, type:'%s', mssg:'%s'}", "FN_Fuse_With_SA_FPE", 399, v36, v37, *(double *)(a1 + 8), "SelectionEvt", "Changed to GNSS");
      }
      goto LABEL_80;
    }
    goto LABEL_60;
  }
  if (v22)
  {
    if (!*(unsigned char *)(a2 + 2032)) {
      goto LABEL_35;
    }
    int v32 = 40;
  }
  else
  {
    int v32 = 0;
  }
  *(_DWORD *)(a2 + 2148) = v32;
LABEL_35:
  if (!*(unsigned char *)(a2 + 2152))
  {
    unsigned int v34 = 40;
    goto LABEL_40;
  }
  unsigned int v34 = *(_DWORD *)(a2 + 2148);
  if (v34 <= 0x27 && *(_DWORD *)(a1 + 28) == 5)
  {
    ++v34;
LABEL_40:
    *(_DWORD *)(a2 + 2148) = v34;
  }
  *(unsigned char *)(a2 + 2152) = 1;
  long long v33 = (unsigned __int8 *)(a2 + 2032);
  if (*(unsigned char *)(a2 + 2032))
  {
    int v38 = v26 - *(_DWORD *)(a2 + 2036);
    BOOL v35 = v38 >= v28;
    if (*v13 > 2000.0
      || (!v22 ? (char v39 = 1) : (char v39 = v63),
          !v22 ? (BOOL v40 = v30) : (BOOL v40 = 0),
          v38 >= v28 ? (char v41 = v39) : (char v41 = 0),
          (v41 & 1) == 0 && !v40))
    {
      ++*(_DWORD *)(a2 + 2040);
      goto LABEL_80;
    }
    goto LABEL_30;
  }
  if (v22) {
    BOOL v42 = 0;
  }
  else {
    BOOL v42 = v30;
  }
  if (v42)
  {
    *(_DWORD *)(a2 + 2036) = v26;
    int v43 = v26;
    goto LABEL_61;
  }
LABEL_60:
  int v43 = *(_DWORD *)(a2 + 2036);
LABEL_61:
  if ((v26 - v43 < v28 || v34 <= 0x1E) && *(unsigned char *)(a2 + 2153))
  {
    BOOL v35 = 0;
    if (!v31) {
      goto LABEL_74;
    }
  }
  else
  {
    BOOL v35 = 1;
    if (!v31)
    {
LABEL_74:
      ++*(_DWORD *)(a2 + 2040);
      goto LABEL_80;
    }
  }
  if ((!v35 || v63 || !v22) && *v13 <= 2000.0) {
    goto LABEL_74;
  }
  *(unsigned char *)(a2 + 2032) = 1;
  *(_DWORD *)(a2 + 2040) = 0;
  *(_DWORD *)(a2 + 2036) = *(_DWORD *)(a1 + 1020);
  *(unsigned char *)(a2 + 2153) = 0;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v44 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v45 = *(double *)(g_TCU + 8);
    }
    else {
      double v45 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: eventsLog = {time:%f, type:'%s', mssg:'%s'}", "FN_Fuse_With_SA_FPE", 443, v44, v45, *(double *)(a1 + 1024), "SelectionEvt", "Changed to FPE");
  }
LABEL_80:
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v46 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v47 = *(double *)(g_TCU + 8);
    }
    else {
      double v47 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Selection parameters: FpeValid=%d GnssValid=%d isSwitchAllowed=%d isGnssBetter=%d isSolConfNone:=%d isBenign:=%d GnssPosFixType=%d FpeQboostSvContCnt=%d", "FN_Fuse_With_SA_FPE", 452, v46, v47, *(unsigned __int8 *)(a1 + 1040), *(unsigned __int8 *)(a1 + 24), v35, v63, v22 == 0, v30, *(_DWORD *)(a1 + 28), *(_DWORD *)(a2 + 2148));
  }
  *(unsigned char *)(a1 + 2035) = v30;
  *(unsigned char *)(a1 + 2033) = v63;
  *(unsigned char *)(a1 + 2034) = v23;
  *(unsigned char *)(a1 + 2032) = v35;
  if (*v33)
  {
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 1040);
    *(void *)(a2 + 28) = *(void *)v10;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 1052);
    long long v48 = *(_OWORD *)(a1 + 1056);
    long long v49 = *(_OWORD *)(a1 + 1072);
    long long v50 = *(_OWORD *)(a1 + 1088);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 1104);
    *(_OWORD *)(a2 + 72) = v50;
    *(_OWORD *)(a2 + 56) = v49;
    *(_OWORD *)(a2 + 40) = v48;
    long long v51 = *(_OWORD *)(a1 + 1120);
    long long v52 = *(_OWORD *)(a1 + 1136);
    long long v53 = *(_OWORD *)(a1 + 1152);
    *(void *)(a2 + 152) = *(void *)(a1 + 1168);
    *(_OWORD *)(a2 + 136) = v53;
    *(_OWORD *)(a2 + 120) = v52;
    *(_OWORD *)(a2 + 104) = v51;
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v10 + 132);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(v10 + 148);
    long long v54 = *(_OWORD *)(a1 + 1208);
    *(void *)(a2 + 208) = *(void *)(a1 + 1224);
    *(_OWORD *)(a2 + 192) = v54;
    long long v55 = *(_OWORD *)(a1 + 1232);
    *(void *)(a2 + 232) = *(void *)(a1 + 1248);
    *(_OWORD *)(a2 + 216) = v55;
    *(_OWORD *)(a2 + 240) = *(_OWORD *)(v10 + 212);
    *(void *)(a2 + 256) = *(void *)(a1 + 1272);
    *(unsigned char *)(a2 + 320) = *(unsigned char *)(a1 + 1336);
    *(unsigned char *)(a2 + 336) = *(unsigned char *)(a1 + 1352);
    *(unsigned char *)(a2 + 352) = *(unsigned char *)(a1 + 1368);
    *(unsigned char *)(a2 + 368) = *(unsigned char *)(a1 + 1384);
    *(unsigned char *)(a2 + 384) = *(unsigned char *)(a1 + 1400);
    *(unsigned char *)(a2 + 400) = *(unsigned char *)(a1 + 1416);
    *(unsigned char *)(a2 + 416) = *(unsigned char *)(a1 + 1432);
    *(unsigned char *)(a2 + 432) = *(unsigned char *)(a1 + 1448);
    *(unsigned char *)(a2 + 448) = *(unsigned char *)(a1 + 1464);
    *(unsigned char *)(a2 + 464) = *(unsigned char *)(a1 + 1480);
    *(unsigned char *)(a2 + 480) = *(unsigned char *)(a1 + 1496);
    *(unsigned char *)(a2 + 496) = *(unsigned char *)(a1 + 1512);
    *(unsigned char *)(a2 + 512) = *(unsigned char *)(a1 + 1528);
    *(unsigned char *)(a2 + 528) = *(unsigned char *)(a1 + 1544);
    *(unsigned char *)(a2 + 544) = *(unsigned char *)(a1 + 1560);
    *(_DWORD *)(a2 + 316) = *(_DWORD *)(a1 + 1332);
    *(_DWORD *)(a2 + 332) = *(_DWORD *)(a1 + 1348);
    *(_DWORD *)(a2 + 348) = *(_DWORD *)(a1 + 1364);
    *(_DWORD *)(a2 + 364) = *(_DWORD *)(a1 + 1380);
    *(_DWORD *)(a2 + 380) = *(_DWORD *)(a1 + 1396);
    *(_DWORD *)(a2 + 396) = *(_DWORD *)(a1 + 1412);
    *(_DWORD *)(a2 + 412) = *(_DWORD *)(a1 + 1428);
    *(_DWORD *)(a2 + 428) = *(_DWORD *)(a1 + 1444);
    *(_DWORD *)(a2 + 444) = *(_DWORD *)(a1 + 1460);
    *(_DWORD *)(a2 + 460) = *(_DWORD *)(a1 + 1476);
    *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 1492);
    *(_DWORD *)(a2 + 492) = *(_DWORD *)(a1 + 1508);
    *(_DWORD *)(a2 + 508) = *(_DWORD *)(a1 + 1524);
    *(_DWORD *)(a2 + 524) = *(_DWORD *)(a1 + 1540);
    *(_DWORD *)(a2 + 540) = *(_DWORD *)(a1 + 1556);
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      mach_continuous_time();
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f publish FPE solution");
    }
  }
  else if ((g_FPE_LogSeverity & 8) != 0)
  {
    mach_continuous_time();
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f publish GNSS solution");
  }
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v56 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    double v57 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: SEL = {estPos:[%f %.12f %.12f %f], estVel:[%.12f %.12f %f], estHeading:%f, valid:%u}", "FN_Fuse_With_SA_FPE", 543, v56, v57, *(double *)(a2 + 8), *(double *)(a2 + 192), *(double *)(a2 + 200), *(double *)(a2 + 208), *(double *)(a2 + 216), *(double *)(a2 + 224), *(double *)(a2 + 232), *(double *)(a2 + 256), *(unsigned __int8 *)(a2 + 24));
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v58 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      double v59 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: sel_syncedFields = {sel:%u, isSwitchAllowed:%u, isGnssBetter:%u, isSolConfNone:%u, isBenign:%u, fusedError:%f, gnssError:%f}", "FN_Fuse_With_SA_FPE", 548, v58, v59, *v33, v35, v63, v22 == 0, v30, v17, v18);
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v60 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v61 = *(double *)(g_TCU + 8);
        }
        else {
          double v61 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: KFSOL = {estPos:[%f %.12f %.12f %f], valid:%u, speed:%f, heading:%f, posConf:%u}", "FN_Fuse_With_SA_FPE", 554, v60, v61, *(double *)(a1 + 8), *(double *)(a1 + 192), *(double *)(a1 + 200), *(double *)(a1 + 208), *(unsigned __int8 *)(a1 + 24), *(double *)(a1 + 240), *(double *)(a1 + 256), *(_DWORD *)(a1 + 36));
      }
    }
  }
  return 1;
}

uint64_t send_position_response(unsigned int *a1, int a2, char a3, char a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 68, "send_position_response");
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 5, 1);
  }
  T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)&__s);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "ConvertPositionResult");
    LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  memset_s(&__s, 0x70uLL, 0, 0x70uLL);
  char v12 = 0;
  if (a3)
  {
    __int16 __s = 5;
    char v12 = 1;
  }
  if (a1)
  {
    if (a1[5] != 1)
    {
      char v16 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Not Enough Satellites\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 73, "ConvertPositionResult");
        LbsOsaTrace_WriteLog(0x13u, __str, v20, 4, 1);
        char v16 = 0;
      }
      goto LABEL_105;
    }
    __int16 __s = 0;
    unsigned int v13 = a1[21];
    if (v13 == -1)
    {
      unsigned int v13 = 0;
    }
    else if (!a2)
    {
      v13 %= 0xDBBA00u;
    }
    uint64_t v87 = v13;
    unsigned int v21 = a1[6];
    if (v21 == 1) {
      char v22 = 0;
    }
    else {
      char v22 = -1;
    }
    if (v21 == 2) {
      char v23 = 1;
    }
    else {
      char v23 = v22;
    }
    char v89 = v23;
    char v88 = *((unsigned char *)a1 + 88);
    unsigned int v24 = a1[23];
    int v101 = 4;
    unsigned int v102 = v24;
    __int16 v103 = *((_WORD *)a1 + 48);
    char v104 = *((unsigned char *)a1 + 98);
    char v105 = 1;
    unsigned int v25 = a1[26];
    if (v25 - 1 <= 0x3F)
    {
      if (((1 << (v25 - 1)) & 0x800000008000808ALL) != 0) {
        goto LABEL_27;
      }
      if (v25 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v42 = mach_continuous_time();
          unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time Id received is GPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "PSP", 73, "ConvertTimeRequested");
          int v29 = 1;
          LbsOsaTrace_WriteLog(0x13u, __str, v43, 4, 1);
        }
        else
        {
          int v29 = 1;
        }
        goto LABEL_31;
      }
    }
    if (v25)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        goto LABEL_30;
      }
      bzero(__str, 0x410uLL);
      unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v27 = 515;
      goto LABEL_29;
    }
LABEL_27:
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
LABEL_30:
      int v29 = 5;
LABEL_31:
      int v106 = v29;
      v107 |= 1u;
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "PSP", 73, "ConvertPositionResult", *((unsigned __int8 *)a1 + 5));
        LbsOsaTrace_WriteLog(0x13u, __str, v31, 4, 1);
      }
      int v32 = *((char *)a1 + 5);
      if (v32 >= 0) {
        char v16 = v32 & 1;
      }
      else {
        char v16 = v32 & 1 | 2;
      }
      unsigned int v33 = a1[7];
      switch(v33)
      {
        case 0u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v34 = mach_continuous_time();
            unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "PSP", 69, "ConvertPositionResult", 515, a1[7]);
            LbsOsaTrace_WriteLog(0x13u, __str, v35, 0, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v36 = mach_continuous_time();
            size_t v37 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "PSP", 68, "ConvertPositionResult");
            int v38 = 5;
            goto LABEL_104;
          }
          break;
        case 1u:
          if (a1[8] == 2) {
            unsigned int v45 = a1[9] | 0x800000;
          }
          else {
            unsigned int v45 = a1[9];
          }
          unsigned int v46 = a1[10];
          if ((v46 + 0x800000) >> 24 || HIBYTE(v45)) {
            goto LABEL_101;
          }
          __int16 v90 = 0;
          char v91 = v45 >> 23;
          uint64_t v92 = v45 & 0x7FFFFF;
          unsigned int v93 = v46;
          break;
        case 2u:
          if (a1[8] == 2) {
            unsigned int v47 = a1[9] | 0x800000;
          }
          else {
            unsigned int v47 = a1[9];
          }
          unsigned int v48 = a1[10];
          if ((v48 + 0x800000) >> 24) {
            goto LABEL_101;
          }
          if (HIBYTE(v47)) {
            goto LABEL_101;
          }
          int v49 = *((char *)a1 + 46);
          if (v49 < 0) {
            goto LABEL_101;
          }
          __int16 v90 = 1;
          char v91 = v47 >> 23;
          uint64_t v92 = v47 & 0x7FFFFF;
          unsigned int v93 = v48;
          char v94 = v49;
          char v100 = *((unsigned char *)a1 + 57);
          break;
        case 3u:
        case 5u:
        case 6u:
        case 7u:
          goto LABEL_56;
        case 4u:
          if (a1[8] == 2) {
            unsigned int v50 = a1[9] | 0x800000;
          }
          else {
            unsigned int v50 = a1[9];
          }
          unsigned int v51 = a1[10];
          if ((v51 + 0x800000) >> 24) {
            goto LABEL_101;
          }
          if (HIBYTE(v50)) {
            goto LABEL_101;
          }
          int v52 = *((char *)a1 + 46);
          if (v52 < 0) {
            goto LABEL_101;
          }
          int v53 = *((char *)a1 + 47);
          if (v53 < 0) {
            goto LABEL_101;
          }
          unsigned int v54 = *((unsigned __int8 *)a1 + 48);
          if (v54 > 0xB3) {
            goto LABEL_101;
          }
          unsigned int v55 = *((unsigned __int8 *)a1 + 57);
          if (v55 >= 0x65) {
            goto LABEL_101;
          }
          __int16 v90 = 3;
          char v91 = v50 >> 23;
          uint64_t v92 = v50 & 0x7FFFFF;
          unsigned int v93 = v51;
          char v94 = v52;
          char v95 = v53;
          char v96 = v54;
          char v100 = v55;
          break;
        case 8u:
          if (a1[8] == 2) {
            unsigned int v56 = a1[9] | 0x800000;
          }
          else {
            unsigned int v56 = a1[9];
          }
          unsigned int v57 = a1[10];
          if ((v57 + 0x800000) >> 24 || HIBYTE(v56)) {
            goto LABEL_101;
          }
          __int16 v90 = 8;
          __int16 v58 = *((_WORD *)a1 + 22);
          if (a1[13] == 2) {
            v58 |= 0x8000u;
          }
          char v91 = v56 >> 23;
          BOOL v97 = v58 < 0;
          uint64_t v92 = v56 & 0x7FFFFF;
          unsigned int v93 = v57;
          uint64_t v98 = v58 & 0x7FFF;
          break;
        default:
          if (v33 == 16)
          {
            if (a1[8] == 2) {
              unsigned int v59 = a1[9] | 0x800000;
            }
            else {
              unsigned int v59 = a1[9];
            }
            __int16 v60 = *((_WORD *)a1 + 22);
            if (a1[13] == 2) {
              v60 |= 0x8000u;
            }
            unsigned int v61 = a1[10];
            if (!((v61 + 0x800000) >> 24) && !HIBYTE(v59))
            {
              int v62 = *((char *)a1 + 46);
              if ((v62 & 0x80000000) == 0)
              {
                int v63 = *((char *)a1 + 47);
                if ((v63 & 0x80000000) == 0)
                {
                  unsigned int v64 = *((unsigned __int8 *)a1 + 48);
                  if (v64 <= 0xB3)
                  {
                    int v65 = *((char *)a1 + 56);
                    if ((v65 & 0x80000000) == 0)
                    {
                      unsigned int v66 = *((unsigned __int8 *)a1 + 57);
                      if (v66 < 0x65)
                      {
                        __int16 v90 = 9;
                        char v91 = v59 >> 23;
                        BOOL v97 = v60 < 0;
                        uint64_t v92 = v59 & 0x7FFFFF;
                        unsigned int v93 = v61;
                        uint64_t v98 = v60 & 0x7FFF;
                        char v94 = v62;
                        char v95 = v63;
                        char v96 = v64;
                        char v99 = v65;
                        char v100 = v66;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v33 != 32)
            {
LABEL_56:
              if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
                break;
              }
              bzero(__str, 0x410uLL);
              unint64_t v77 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape type,%u\n", v77);
              goto LABEL_103;
            }
            if (a1[8] == 2) {
              unsigned int v39 = a1[9] | 0x800000;
            }
            else {
              unsigned int v39 = a1[9];
            }
            unsigned int v40 = a1[10];
            if (!((v40 + 0x800000) >> 24) && !HIBYTE(v39))
            {
              unsigned int v41 = *((unsigned __int8 *)a1 + 57);
              if (v41 < 0x65)
              {
                __int16 v90 = 10;
                char v91 = v39 >> 23;
                uint64_t v92 = v39 & 0x7FFFFF;
                unsigned int v93 = v40;
                char v100 = v41;
                break;
              }
            }
          }
LABEL_101:
          if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
            break;
          }
          bzero(__str, 0x410uLL);
          unint64_t v67 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx latitude,%u,longitude,%d\n", v67);
LABEL_103:
          size_t v37 = v44;
          int v38 = 0;
LABEL_104:
          LbsOsaTrace_WriteLog(0x13u, __str, v37, v38, 1);
          break;
      }
LABEL_105:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v68 = mach_continuous_time();
        unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "PSP", 68, "ConvertPositionResult");
        LbsOsaTrace_WriteLog(0x13u, __str, v69, 5, 1);
      }
      goto LABEL_107;
    }
    bzero(__str, 0x410uLL);
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v27 = 770;
LABEL_29:
    unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time Id,%u\n", v26, "PSP", 69, "ConvertTimeRequested", v27, v25);
    LbsOsaTrace_WriteLog(0x13u, __str, v28, 0, 1);
    goto LABEL_30;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 69, "ConvertPositionResult", 513);
    LbsOsaTrace_WriteLog(0x13u, __str, v15, 0, 1);
  }
  char v16 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "ConvertPositionResult");
    LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
    char v16 = 0;
  }
LABEL_107:
  __int16 v83 = 255;
  uint64_t v81 = 0;
  char v82 = 0;
  uint64_t v84 = &p_s;
  p_s = &__s;
  char v79 = v12;
  char v80 = v16;
  uint64_t result = *a1;
  int v85 = *a1;
  unsigned int v71 = a1[5];
  if (*((unsigned char *)a1 + 4))
  {
    if (v71 == 1)
    {
      int v72 = 30;
    }
    else if (v71 == 9)
    {
      int v72 = 3;
    }
    else if (__s == 5)
    {
      int v72 = 19;
    }
    else
    {
      int v72 = 31;
    }
    SendStatusReport(result, v72, (long long *)a1, 0, 0, 255);
    if (a2 == 2)
    {
      SuplLppExecutePosRsp((uint64_t)&v83);
    }
    else if (a2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v73 = mach_continuous_time();
        unsigned __int16 v74 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "PSP", 69, "send_position_response", 770);
        LbsOsaTrace_WriteLog(0x13u, __str, v74, 0, 1);
      }
    }
    else
    {
      if (a4) {
        HIBYTE(v83) = 2;
      }
      SuplRrlpExecutePosRsp((uint64_t)&v83);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v75 = mach_continuous_time();
      unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 68, "send_position_response");
      return LbsOsaTrace_WriteLog(0x13u, __str, v76, 5, 1);
    }
  }
  else if (v71 == 1)
  {
    return SendStatusReport(result, 30, (long long *)a1, 0, 0, 255);
  }
  return result;
}

size_t SendStatusReport(int a1, int a2, long long *a3, long long *a4, long long *a5, int a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,statusCode,%u,reqHorizAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 73, "SendStatusReport", a1, a2, a6);
    LbsOsaTrace_WriteLog(0x13u, __str, v13, 4, 1);
  }
  size_t result = GNS_PospStatusReport(a1, a2, a3, a4, a5, a6);
  if (result != 1)
  {
    int v15 = result;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS_PospStatusReport call failed result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "SendStatusReport", 770, v15);
      return LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
    }
  }
  return result;
}

size_t send_assistance_req(int *a1, int a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "send_assistance_req");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_76;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_75;
  }
  unint64_t v44 = 0x8000000080000000;
  unint64_t v45 = 0xFFFF00007FFFFFFFLL;
  __int16 v46 = 255;
  __int16 v49 = -1;
  char v50 = -1;
  int v47 = -1;
  char v48 = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t session_info = gps_find_session_info(*a1);
  unsigned __int8 v7 = (unsigned char *)*((void *)a1 + 1);
  if (v7)
  {
    __int16 v8 = v7[1];
    if (v7[1])
    {
      __int16 v8 = 32;
      WORD2(v45) = 32;
      int v9 = 1;
    }
    else
    {
      int v9 = 0;
    }
    if (*v7)
    {
      v8 |= 0x40u;
      WORD2(v45) = v8;
      int v9 = 1;
    }
    if (v7[2])
    {
      v8 |= 4u;
      WORD2(v45) = v8;
      int v9 = 1;
    }
    if (v7[3])
    {
      uint64_t v11 = *((void *)a1 + 2);
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          if (*(unsigned char *)(v11 + 8))
          {
            v8 |= 0x80u;
            WORD2(v45) = v8;
          }
          if (*(unsigned char *)(v11 + 4))
          {
            v8 |= 2u;
            WORD2(v45) = v8;
          }
          if (*(unsigned char *)(v11 + 5))
          {
            v8 |= 0x100u;
            WORD2(v45) = v8;
          }
          if (*(unsigned char *)(v11 + 6))
          {
            v8 |= 1u;
            WORD2(v45) = v8;
          }
          if (*(unsigned char *)(v11 + 7))
          {
            v8 |= 8u;
            WORD2(v45) = v8;
          }
          if (*(unsigned char *)(v11 + 9)) {
            WORD2(v45) = v8 | 1;
          }
        }
        __int16 v12 = *(_WORD *)(v11 + 16);
        if (v12) {
          HIWORD(v45) = v12 & 0x3FF;
        }
        if (session_info)
        {
          if (*(_DWORD *)(session_info + 8) == 2) {
            HIWORD(v45) = v12;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "ConvertGnssAidReqToSdlAidReq", 2052, *a1);
          LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
        }
        int v15 = (unsigned char *)*((void *)a1 + 2);
        LOBYTE(v46) = v15[18];
        unsigned int v16 = v15[20];
        if (v16 >= 0x40) {
          unint64_t v17 = 64;
        }
        else {
          unint64_t v17 = v15[20];
        }
        HIBYTE(v46) = v17;
        LOBYTE(v47) = v15[19];
        int v9 = 1;
        if (v16 <= 0x3F && v17)
        {
          for (unint64_t i = 0; i < v17; ++i)
          {
            uint64_t v19 = *((void *)a1 + 2);
            *((unsigned char *)&v51 + i) = *(unsigned char *)(v19 + i + 21);
            unsigned int v20 = *(unsigned __int16 *)(v19 + 2 * i + 86);
            if (v20 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v21 = mach_continuous_time();
                unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_Iode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "PSP", 69, "ConvertGnssAidReqToSdlAidReq", 772, *(unsigned __int16 *)(*((void *)a1 + 2) + 2 * i + 86));
                LbsOsaTrace_WriteLog(0x13u, __str, v22, 0, 1);
              }
            }
            else
            {
              __str[i - 11] = v20;
            }
          }
          int v9 = 1;
        }
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  char v23 = (void *)*((void *)a1 + 2);
  if (v23) {
    free(v23);
  }
  *((void *)a1 + 2) = 0;
  unsigned int v24 = (void *)*((void *)a1 + 1);
  if (v24) {
    free(v24);
  }
  *((void *)a1 + 1) = 0;
  __int16 v41 = 511;
  size_t v37 = 0;
  __int16 v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  uint64_t v42 = &v37;
  uint64_t v25 = gps_find_session_info(*a1);
  if (!v25)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_76;
    }
    bzero(__str, 0x410uLL);
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v35);
    goto LABEL_75;
  }
  if (v9)
  {
    uint64_t v26 = v25;
    int v27 = *(_DWORD *)(v25 + 20);
    if (v27 == 1)
    {
      SendStatusReport(*a1, 20, 0, 0, 0, 255);
      int v27 = *(_DWORD *)(v26 + 20);
    }
    if (v27 == 2)
    {
      SendStatusReport(*a1, 21, 0, 0, 0, 255);
      int v27 = *(_DWORD *)(v26 + 20);
    }
    if (v27 == 3 && LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Assistance cannot be requested in StandAlone\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "PSP", 87, "send_assistance_req", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v29, 2, 1);
    }
    uint64_t v30 = &v44;
  }
  else
  {
    uint64_t v30 = 0;
  }
  size_t v37 = v30;
  LOBYTE(v38) = v9;
  int v43 = *a1;
  if (a2 == 2)
  {
    SuplLppExecutePosRsp((uint64_t)&v41);
    goto LABEL_76;
  }
  if (a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_76;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol\n");
    goto LABEL_75;
  }
  SuplRrlpExecutePosRsp((uint64_t)&v41);
  uint64_t v31 = gps_find_session_info(*a1);
  if (v31)
  {
    *(unsigned char *)(v31 + 16) = 0;
    goto LABEL_76;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionId,%u\n", v36);
LABEL_75:
    LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
  }
LABEL_76:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "PSP", 68, "send_assistance_req");
    return LbsOsaTrace_WriteLog(0x13u, __str, v34, 5, 1);
  }
  return result;
}

size_t send_api_status(int *a1, int a2, int a3, char a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_17;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%u,API,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 73, "send_api_status", a1[2], a1[1]);
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 4, 1);
  }
  unsigned int v10 = a1[2];
  if (v10 > 0xB) {
    goto LABEL_35;
  }
  char v11 = 1;
  if (((1 << v10) & 0xCC5) != 0)
  {
    char v11 = 0;
    int v12 = 1;
    int v13 = 1;
    goto LABEL_7;
  }
  if (v10 == 1)
  {
    int v12 = 0;
    int v13 = 0;
  }
  else
  {
LABEL_35:
    char v11 = 0;
    int v12 = 0;
    int v13 = 4;
  }
LABEL_7:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SDL status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 77, "ConvertGnsStatusToSdlStatus", v13);
    size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v16, 3, 1);
  }
  if (a1[1] != 1) {
    goto LABEL_22;
  }
  int v17 = a1[2];
  if (v17 == 9)
  {
    int v21 = *a1;
    int v22 = 3;
    goto LABEL_21;
  }
  if (v17 != 3) {
    goto LABEL_22;
  }
  uint64_t session_info = gps_find_session_info(*a1);
  if (session_info)
  {
    uint64_t v19 = session_info;
    int v20 = *(_DWORD *)(session_info + 20);
    if ((v20 - 2) < 2)
    {
      int v21 = *a1;
      int v22 = 23;
LABEL_21:
      size_t result = SendStatusReport(v21, v22, 0, 0, 0, 255);
      goto LABEL_22;
    }
    if (v20 == 1)
    {
      int v21 = *a1;
      int v22 = 22;
      goto LABEL_21;
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx locationinfo,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "PSP", 69, "send_api_status", 770, *(_DWORD *)(v19 + 20));
      size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v31, 0, 1);
    }
LABEL_22:
    if (v11) {
      return result;
    }
    if (a1[1] != 1)
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handling for API,%d is not needed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "PSP", 87, "send_api_status", 770, a1[1]);
      int v25 = 2;
      return LbsOsaTrace_WriteLog(0x13u, __str, v24, v25, 1);
    }
    char v26 = a3 & v12;
    if ((a3 & v12) != 0) {
      __int16 v27 = 5;
    }
    else {
      __int16 v27 = v13;
    }
    v39[0] = -1;
    char v36 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    char v35 = v26;
    int v41 = *a1;
    T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v33);
    if (a4)
    {
      char v29 = 2;
    }
    else
    {
      if ((a4 & 4) == 0)
      {
        size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Positioning method\n");
        goto LABEL_17;
      }
      char v29 = 0;
    }
    v33[0] = v27;
    v39[1] = v29;
    unsigned __int16 v34 = v33;
    char v40 = &v34;
    if (a2 == 2) {
      return SuplLppExecutePosRsp((uint64_t)v39);
    }
    if (!a2) {
      return SuplRrlpExecutePosRsp((uint64_t)v39);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol\n");
      goto LABEL_17;
    }
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    unint64_t v32 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v32);
LABEL_17:
    size_t v24 = v23;
    int v25 = 0;
    return LbsOsaTrace_WriteLog(0x13u, __str, v24, v25, 1);
  }
  return result;
}

uint64_t send_wlan_meas(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "send_wlan_meas");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (!a1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "send_wlan_meas", 513);
    int v9 = 0;
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, v9, 1);
  }
  int v4 = 0;
  __int16 v41 = 2;
  unsigned __int8 v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = -1;
  unint64_t v45 = 0xFFFF7FFFFFFFFFFFLL;
  uint64_t v46 = -1;
  char v47 = 0;
  __int16 v48 = 0;
  int v49 = 0;
  uint64_t v37 = 0;
  __int16 v38 = 0;
  __int16 v34 = 1791;
  char v35 = &v37;
  uint64_t v39 = &v41;
  char v40 = 1;
  char v50 = 1;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 > 6)
  {
    if (v5 == 7 || v5 == 11)
    {
      int v4 = 1;
    }
    else if (v5 != 14)
    {
LABEL_13:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unexpected status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "send_wlan_meas", 770, *(_DWORD *)(a1 + 24));
        LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
      }
      int v49 = 0;
      if (*(_DWORD *)(a1 + 24) == 1) {
        goto LABEL_38;
      }
LABEL_19:
      __int16 v48 = 257;
      goto LABEL_20;
    }
LABEL_18:
    int v49 = v4;
    goto LABEL_19;
  }
  if (v5 != 1)
  {
    if (v5 != 2) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  char v50 = 0;
LABEL_38:
  uint64_t v19 = *(unsigned __int8 *)(a1 + 28);
  int v20 = (char *)operator new[](40 * v19, MEMORY[0x263F8C180]);
  if (!v20)
  {
    uint64_t v43 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN meas list allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "PSP", 69, "send_wlan_meas", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v33, 0, 1);
    }
    goto LABEL_33;
  }
  if (v19)
  {
    int v21 = v20;
    do
    {
      *(_DWORD *)(v21 + 3) = 0;
      *(_DWORD *)int v21 = 0;
      *((_WORD *)v21 + 4) = 0x7FFF;
      v21[10] = 0;
      *((void *)v21 + 2) = -1;
      *((_DWORD *)v21 + 6) = 0;
      *((_WORD *)v21 + 14) = 255;
      v21[32] = 0;
      *(_DWORD *)(v21 + 34) = 0xFFFF;
      v21 += 40;
    }
    while (v21 != &v20[40 * v19]);
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    uint64_t v43 = v20;
    uint64_t v24 = a1 + 32;
    do
    {
      for (uint64_t i = 0; i != 6; ++i)
        v43[v22 + i] = *(unsigned char *)(v24 + i);
      int v26 = *(unsigned __int16 *)(a1 + 48 * v23 + 72);
      __int16 v27 = v43;
      int v28 = v42;
      if (v26 != 0x7FFF)
      {
        char v29 = &v43[40 * v42];
        v29[6] = 1;
        *((_WORD *)v29 + 4) = v26;
      }
      uint64_t v30 = &v27[40 * v28];
      v30[32] = 1;
      uint64_t v31 = a1 + 48 * v23;
      *((_WORD *)v30 + 17) = *(_WORD *)(v31 + 74);
      if (*(_DWORD *)(v31 + 76) == 1) {
        *(_WORD *)&v27[40 * v28 + 36] = 257;
      }
      unsigned __int8 v42 = v28 + 1;
      if ((v28 + 1) > 0x3Fu) {
        break;
      }
      ++v23;
      v22 += 40;
      v24 += 48;
    }
    while (v23 < *(unsigned __int8 *)(a1 + 28));
  }
  else
  {
    uint64_t v43 = v20;
  }
LABEL_20:
  __int16 v41 = 0;
  wlan_uint64_t session_info = find_wlan_session_info();
  int v36 = wlan_session_info;
  uint64_t session_info = gps_find_session_info(wlan_session_info);
  if (session_info)
  {
    *(unsigned char *)(session_info + 188) = 0;
    if (posp_IsTimerActive(wlan_session_info, 1) == 1)
    {
      posp_StopTimer(wlan_session_info, 1);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NoTmrActive\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 87, "send_wlan_meas", 2052);
      LbsOsaTrace_WriteLog(0x13u, __str, v17, 2, 1);
    }
    SuplLppExecutePosRsp((uint64_t)&v34);
    if (v43)
    {
      MEMORY[0x230F4E5A0](v43, 0x1000C80556990FFLL);
      uint64_t v43 = 0;
    }
    MEMORY[0x230F4E5D0](a1, 0x1000C400624F575);
LABEL_33:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 68, "send_wlan_meas");
    int v9 = 5;
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, v9, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 69, "send_wlan_meas", 2052, wlan_session_info);
    LbsOsaTrace_WriteLog(0x13u, __str, v15, 0, 1);
  }
  if (v43)
  {
    MEMORY[0x230F4E5A0](v43, 0x1000C80556990FFLL);
    uint64_t v43 = 0;
  }
  return MEMORY[0x230F4E5D0](a1, 0x1000C400624F575);
}

uint64_t NV_Ram_Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  p_NV = result;
  uint64_t v4 = *(unsigned int *)(result + 4);
  if (v4 != 22944 || *(_DWORD *)(result + 22936) != 14)
  {
    uint64_t v5 = 0;
    *(void *)(result + 8) = 0xFFFFFFFFLL;
    *(void *)(result + 40) = 0xFFFFFFFFLL;
    *(void *)(result + 64) = 0xFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFFFFFFFLL;
    *(void *)(result + 152) = 0xFFFFFFFFLL;
    *(void *)(result + 19200) = 0xFFFFFFFFLL;
    *(void *)(result + 80) = 0xFFFFFFFFLL;
    *(void *)(result + 19160) = 0xFFFFFFFFLL;
    *(void *)(result + 7600) = 0xFFFFFFFFLL;
    *(void *)(result + 12856) = 0xFFFFFFFFLL;
    *(void *)(result + 5816) = 0xFFFFFFFFLL;
    do
    {
      *(void *)(result + 1976 + v5) = 0xFFFFFFFFLL;
      v5 += 120;
    }
    while (v5 != 3840);
    for (uint64_t i = 0; i != 1200; i += 120)
      *(void *)(result + 6400 + i) = 0xFFFFFFFFLL;
    for (uint64_t j = 0; j != 1728; j += 72)
      *(void *)(result + 20392 + j) = 0xFFFFFFFFLL;
    for (uint64_t k = 0; k != 3456; k += 96)
      *(void *)(result + 9400 + k) = 0xFFFFFFFFLL;
    uint64_t v9 = -4144;
    do
    {
      *(void *)(result + 15016 + v9 + 4144) = 0xFFFFFFFFLL;
      v9 += 112;
    }
    while (v9);
    for (uint64_t m = 184; m != 1976; m += 56)
      *(void *)(result + m) = 0xFFFFFFFFLL;
    for (uint64_t n = 0; n != 560; n += 56)
      *(void *)(result + 5840 + n) = 0xFFFFFFFFLL;
    for (iuint64_t i = 0; ii != 1152; ii += 48)
      *(void *)(result + 19240 + ii) = 0xFFFFFFFFLL;
    for (juint64_t j = 0; jj != 1728; jj += 48)
      *(void *)(result + 7672 + jj) = 0xFFFFFFFFLL;
    for (kuint64_t k = 0; kk != 2072; kk += 56)
      *(void *)(result + 12944 + kk) = 0xFFFFFFFFLL;
    for (muint64_t m = 0; mm != 320; mm += 32)
      *(void *)(result + 22120 + mm) = 0xFFFFFFFFLL;
    *(void *)(result + 7648) = 0xFFFFFFFFLL;
    *(void *)(result + 12912) = 0xFFFFFFFFLL;
    EvCrt_nd("NV_Ram_Init: Invalid NV", 4, a3, v4, 22944, *(unsigned int *)(result + 22936), 14);
    uint64_t result = p_NV;
  }
  unint64_t v16 = 0;
  *(_DWORD *)(result + 22936) = 14;
  *(_DWORD *)(result + 4) = 22944;
  p_NV_Sect = a2;
  *(_OWORD *)a2 = xmmword_22BB44980;
  *(_OWORD *)(a2 + 16) = xmmword_22BB44990;
  *(_OWORD *)(a2 + 32) = xmmword_22BB449A0;
  *(_OWORD *)(a2 + 48) = xmmword_22BB449B0;
  *(_OWORD *)(a2 + 64) = xmmword_22BB449C0;
  *(_DWORD *)(a2 + 80) = 1470649960;
  LODWORD(v17) = 42;
  *(unsigned char *)(a2 + 192) = 42;
  do
  {
    if (v17 - 1 == v16)
    {
      unsigned int v18 = *(unsigned __int16 *)(a2 + 2 * v16);
      LOWORD(v19) = *(_WORD *)(result + 4) - v18;
    }
    else
    {
      int v20 = (unsigned __int16 *)(a2 + 2 * v16);
      unsigned int v18 = *v20;
      LOWORD(v19) = v20[1] - v18;
    }
    if ((_WORD)v19)
    {
      char v21 = 0;
      uint64_t v22 = (char *)(result + v18);
      uint64_t v19 = (unsigned __int16)v19;
      do
      {
        char v23 = *v22++;
        v21 += v23;
        --v19;
      }
      while (v19);
    }
    else
    {
      char v21 = 0;
    }
    *(unsigned char *)(a2 + v16++ + 128) = v21;
    unint64_t v17 = *(unsigned __int8 *)(a2 + 192);
  }
  while (v16 < v17);
  return result;
}

BOOL Core_Load_GPS_Klob(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 136;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 128);
  if (v6 == v2) {
    *a1 = *(_OWORD *)(p_NV + 136);
  }
  return v6 == v2;
}

BOOL Core_Load_GPS_UTC(uint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 160;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 24);
  uint64_t v6 = *(void *)(p_NV + 152);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 160);
    *(void *)(a1 + 16) = *(void *)(p_NV + 176);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GAL_GGTO(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 7656;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 7648);
  if (v6 == v2) {
    *a1 = *(_OWORD *)(p_NV + 7656);
  }
  return v6 == v2;
}

BOOL Core_Load_BDS_BGTO(uint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 12920;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 24);
  uint64_t v6 = *(void *)(p_NV + 12912);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 12920);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(p_NV + 12936);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GPS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 88;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 40);
  uint64_t v6 = *(void *)(p_NV + 80);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 108);
    *(_OWORD *)a1 = *(_OWORD *)(p_NV + 92);
    *((_OWORD *)a1 + 1) = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_QZSS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 5824;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 16);
  uint64_t v6 = *(void *)(p_NV + 5816);
  if (v6 == v2)
  {
    uint64_t v7 = *(void *)(p_NV + 5828);
    *((_WORD *)a1 + 4) = *(_WORD *)(p_NV + 5836);
    *(void *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GLON_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 19168;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 32);
  uint64_t v6 = *(void *)(p_NV + 19160);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 19172);
    *((void *)a1 + 2) = *(void *)(p_NV + 19188);
    *(_OWORD *)a1 = v7;
  }
  return v6 == v2;
}

BOOL Core_Load_GAL_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 7608;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 40);
  uint64_t v6 = *(void *)(p_NV + 7600);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 7612);
    long long v8 = *(_OWORD *)(p_NV + 7628);
    *((_DWORD *)a1 + 8) = *(_DWORD *)(p_NV + 7644);
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  return v6 == v2;
}

BOOL Core_Load_BDS_Health(BOOL *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 12864;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 48);
  uint64_t v6 = *(void *)(p_NV + 12856);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 12868);
    long long v8 = *(_OWORD *)(p_NV + 12884);
    *(void *)(a1 + 29) = *(void *)(p_NV + 12897);
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  return v6 == v2;
}

BOOL Core_Load_GLON_Clk1(_OWORD *a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  uint64_t v3 = p_NV + 19208;
  __int16 v4 = -9871;
  do
  {
    int v5 = *(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4);
    __int16 v4 = -12691 * (v4 + (*(unsigned __int8 *)(v3 + v1) ^ HIBYTE(v4))) + 22719;
    uint64_t v2 = (v2 + v5);
    ++v1;
  }
  while (v1 != 32);
  uint64_t v6 = *(void *)(p_NV + 19200);
  if (v6 == v2)
  {
    long long v7 = *(_OWORD *)(p_NV + 19208);
    *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(p_NV + 19220);
    *a1 = v7;
  }
  return v6 == v2;
}

uint64_t Core_Load_GPS_Eph(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x1F) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 120 * v2;
  uint64_t v6 = (void *)(v5 + 1976);
  uint64_t v7 = v5 + 1984;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 112);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = (_OWORD *)(p_NV + 120 * v2);
  long long v11 = v10[124];
  long long v12 = v10[126];
  a2[1] = v10[125];
  a2[2] = v12;
  *a2 = v11;
  long long v13 = v10[127];
  long long v14 = v10[128];
  long long v15 = v10[129];
  *(_OWORD *)((char *)a2 + 92) = *(_OWORD *)((char *)v10 + 2076);
  a2[4] = v14;
  a2[5] = v15;
  a2[3] = v13;
  return 1;
}

uint64_t Core_Load_QZSS_Eph(int a1, _OWORD *a2)
{
  if ((a1 + 63) > 9u) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = 0;
  unsigned int v4 = a1 - 193;
  uint64_t v5 = p_NV + 120 * (a1 - 193);
  uint64_t v6 = (void *)(v5 + 6400);
  uint64_t v7 = v5 + 6408;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8))) + 22719;
    v3 += v9;
    ++v2;
  }
  while (v2 != 112);
  if (*v6 != v3) {
    return 0;
  }
  uint64_t v10 = p_NV + 120 * v4 + 6400;
  long long v11 = *(_OWORD *)(p_NV + 120 * v4 + 6408);
  long long v12 = *(_OWORD *)(p_NV + 120 * v4 + 6440);
  a2[1] = *(_OWORD *)(p_NV + 120 * v4 + 6424);
  a2[2] = v12;
  *a2 = v11;
  long long v13 = *(_OWORD *)(v10 + 56);
  long long v14 = *(_OWORD *)(v10 + 72);
  long long v15 = *(_OWORD *)(v10 + 88);
  *(_OWORD *)((char *)a2 + 92) = *(_OWORD *)(v10 + 100);
  a2[4] = v14;
  a2[5] = v15;
  a2[3] = v13;
  return 1;
}

uint64_t Core_Load_GLON_Eph(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x17) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 72 * v2;
  uint64_t v6 = (void *)(v5 + 20392);
  uint64_t v7 = v5 + 20400;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 64);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = (_OWORD *)(p_NV + 72 * v2);
  long long v11 = v10[1275];
  long long v12 = v10[1276];
  long long v13 = v10[1278];
  a2[2] = v10[1277];
  a2[3] = v13;
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_GAL_Eph(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 96 * v2;
  uint64_t v6 = (void *)(v5 + 9400);
  uint64_t v7 = v5 + 9408;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 88);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 96 * v2;
  long long v11 = *(_OWORD *)(v10 + 9424);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 9408);
  *(_OWORD *)(a2 + 16) = v11;
  long long v12 = *(_OWORD *)(v10 + 9440);
  long long v13 = *(_OWORD *)(v10 + 9456);
  long long v14 = *(_OWORD *)(v10 + 9472);
  *(void *)(a2 + 80) = *(void *)(v10 + 9488);
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 32) = v12;
  return 1;
}

uint64_t Core_Load_BDS_Eph(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x24) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 112 * v2;
  uint64_t v6 = (void *)(v5 + 15016);
  uint64_t v7 = v5 + 15024;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 104);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 112 * v2;
  long long v11 = *(_OWORD *)(v10 + 15024);
  long long v12 = *(_OWORD *)(v10 + 15056);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v10 + 15040);
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)a2 = v11;
  long long v13 = *(_OWORD *)(v10 + 15072);
  long long v14 = *(_OWORD *)(v10 + 15088);
  long long v15 = *(_OWORD *)(v10 + 15104);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(v10 + 15120);
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 48) = v13;
  return 1;
}

uint64_t Core_Load_GPS_Alm(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x1F) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 56 * v2;
  uint64_t v6 = (void *)(v5 + 184);
  uint64_t v7 = v5 + 192;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 48);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = (_OWORD *)(p_NV + 56 * v2);
  long long v11 = v10[12];
  long long v12 = v10[13];
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v10 + 220);
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_QZSS_Alm(int a1, _OWORD *a2)
{
  if ((a1 + 63) > 9u) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = 0;
  unsigned int v4 = a1 - 193;
  uint64_t v5 = p_NV + 56 * (a1 - 193);
  uint64_t v6 = (void *)(v5 + 5840);
  uint64_t v7 = v5 + 5848;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v2) ^ HIBYTE(v8))) + 22719;
    v3 += v9;
    ++v2;
  }
  while (v2 != 48);
  if (*v6 != v3) {
    return 0;
  }
  long long v10 = *(_OWORD *)(p_NV + 56 * v4 + 5848);
  long long v11 = *(_OWORD *)(p_NV + 56 * v4 + 5864);
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)(p_NV + 56 * v4 + 5876);
  *a2 = v10;
  a2[1] = v11;
  return 1;
}

uint64_t Core_Load_GLON_Alm(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x17) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 48 * v2;
  uint64_t v6 = (void *)(v5 + 19240);
  uint64_t v7 = v5 + 19248;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 40);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 48 * v2;
  long long v11 = *(_OWORD *)(v10 + 19248);
  long long v12 = *(_OWORD *)(v10 + 19264);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v10 + 19280);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Load_GAL_Alm(int a1, uint64_t a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 48 * v2;
  uint64_t v6 = (void *)(v5 + 7672);
  uint64_t v7 = v5 + 7680;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 40);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 48 * v2;
  long long v11 = *(_OWORD *)(v10 + 7680);
  long long v12 = *(_OWORD *)(v10 + 7696);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v10 + 7712);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Load_BDS_Alm(int a1, _OWORD *a2)
{
  unsigned int v2 = a1 - 1;
  if ((a1 - 1) > 0x24) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = p_NV + 56 * v2;
  uint64_t v6 = (void *)(v5 + 12944);
  uint64_t v7 = v5 + 12952;
  __int16 v8 = -9871;
  do
  {
    int v9 = *(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8);
    __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v3) ^ HIBYTE(v8))) + 22719;
    v4 += v9;
    ++v3;
  }
  while (v3 != 48);
  if (*v6 != v4) {
    return 0;
  }
  uint64_t v10 = p_NV + 56 * v2 + 12944;
  long long v11 = *(_OWORD *)(v10 + 8);
  long long v12 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)(v10 + 36);
  *a2 = v11;
  a2[1] = v12;
  return 1;
}

uint64_t Core_Load_Clk_Drift(int *a1, double *a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = p_NV;
  uint64_t v5 = p_NV + 48;
  __int16 v6 = -9871;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6);
    __int16 v6 = -12691 * (v6 + (*(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6))) + 22719;
    v3 += v7;
    ++v2;
  }
  while (v2 != 16);
  if (*(void *)(p_NV + 40) != v3) {
    return 0;
  }
  int v8 = *(_DWORD *)(p_NV + 48);
  *a1 = v8;
  if (v8)
  {
    if ((v8 - 619315200) > 0x49D3FFFF) {
      return 0;
    }
  }
  *a2 = *(double *)(v4 + 56);
  return 1;
}

uint64_t Core_Load_ApxTime(uint64_t a1, _WORD *a2, void *a3, _DWORD *a4)
{
  uint64_t v7 = 0;
  int v8 = 0;
  _OWORD v21[3] = *MEMORY[0x263EF8340];
  double v20 = 0.0;
  uint64_t v9 = p_NV;
  uint64_t v10 = p_NV + 16;
  __int16 v11 = -9871;
  do
  {
    int v12 = *(unsigned __int8 *)(v10 + v7) ^ HIBYTE(v11);
    __int16 v11 = -12691 * (v11 + (*(unsigned __int8 *)(v10 + v7) ^ HIBYTE(v11))) + 22719;
    v8 += v12;
    ++v7;
  }
  while (v7 != 24);
  if (*(void *)(p_NV + 8) != v8)
  {
    API_Get_UTC_Cor(1, &v20);
    *(void *)(v9 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v9 + 24) = 0;
    *(_WORD *)(v9 + 28) = 0;
    double v13 = -0.5;
    if (v20 > 0.0) {
      double v13 = 0.5;
    }
    double v14 = v20 + v13;
    if (v20 + v13 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0) {
        int v15 = (int)v14;
      }
      else {
        LOWORD(v15) = 0;
      }
    }
    else
    {
      LOWORD(v15) = -1;
    }
    *(_WORD *)(v9 + 30) = v15;
    *(void *)(v9 + 16) = 134217472;
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  EvLog("GN_GPS_Read_UTC:  Failed");
  API_Get_UTC_Cor(1, &v20);
  *(void *)(v9 + 8) = 0xFFFFFFFFLL;
  *(_DWORD *)(v9 + 24) = 0;
  *(_WORD *)(v9 + 28) = 0;
  *(void *)(v9 + 16) = 134217472;
  double v16 = -0.5;
  if (v20 > 0.0) {
    double v16 = 0.5;
  }
  double v17 = v20 + v16;
  if (v20 + v16 <= 2147483650.0)
  {
    if (v17 >= -2147483650.0) {
      int v18 = (int)v17;
    }
    else {
      LOWORD(v18) = 0;
    }
  }
  else
  {
    LOWORD(v18) = -1;
  }
  *(_WORD *)(v9 + 30) = v18;
  memset(v21, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v21);
  return 0;
}

uint64_t Core_Save_Clk_Drift(int a1, int a2, double a3)
{
  uint64_t v3 = p_NV;
  if (a1 && (!a2 || (a2 - 619315200) <= 0x49D3FFFF))
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    *(_DWORD *)(p_NV + 48) = a2;
    uint64_t v7 = v3 + 48;
    *(double *)(v3 + 56) = a3;
    __int16 v8 = -9871;
    do
    {
      int v9 = *(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8);
      __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v7 + v5) ^ HIBYTE(v8))) + 22719;
      uint64_t v6 = (v6 + v9);
      ++v5;
    }
    while (v5 != 16);
    *(void *)(v3 + 40) = v6;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(p_NV + 40) = 0xFFFFFFFFLL;
    *(void *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 48) = 0;
  }
  return result;
}

uint64_t Core_Save_ApxTime(unsigned int a1, int a2, __int16 a3, int a4, double a5)
{
  v41[1] = *(double *)MEMORY[0x263EF8340];
  v41[0] = 0.0;
  uint64_t v5 = p_NV;
  if (a2) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != 1)
  {
    uint64_t v19 = 0xFFFFFFFFLL;
LABEL_39:
    *(void *)(v5 + 8) = v19;
    return v6;
  }
  API_Get_UTC_Cor(1, v41);
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = v5 + 16;
  __int16 v14 = -9871;
  do
  {
    int v15 = *(unsigned __int8 *)(v13 + v11) ^ HIBYTE(v14);
    __int16 v14 = -12691 * (v14 + (*(unsigned __int8 *)(v13 + v11) ^ HIBYTE(v14))) + 22719;
    v12 += v15;
    ++v11;
  }
  while (v11 != 24);
  if (*(void *)(v5 + 8) != v12)
  {
    *(void *)(v5 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v5 + 24) = 0;
    *(_WORD *)(v5 + 28) = 0;
    double v16 = -0.5;
    if (v41[0] > 0.0) {
      double v16 = 0.5;
    }
    double v17 = v41[0] + v16;
    if (v41[0] + v16 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        int v18 = (int)v17;
      }
      else {
        LOWORD(v18) = 0;
      }
    }
    else
    {
      LOWORD(v18) = -1;
    }
    *(_WORD *)(v5 + 30) = v18;
    *(void *)(v5 + 16) = 134217472;
  }
  if (a4)
  {
    int v20 = *(_DWORD *)(v5 + 20);
    if (v20) {
      *(_DWORD *)(v5 + 16) += (a4 - v20) / 50000;
    }
  }
  unsigned int v21 = TOW_stat_ms[a2];
  if (v21 <= *(_DWORD *)(v5 + 16))
  {
    GPS_To_UTC_Time(&v34, &v35, &v36, &v37, &v38, &v39, v40, a3, a5, v41[0]);
    uint64_t v22 = 0;
    LODWORD(v19) = 0;
    double v23 = -0.5;
    if (a5 * 1000.0 <= 0.0) {
      double v24 = -0.5;
    }
    else {
      double v24 = 0.5;
    }
    double v25 = a5 * 1000.0 + v24;
    if (v25 >= -2147483650.0) {
      int v26 = (int)v25;
    }
    else {
      int v26 = 0x80000000;
    }
    if (v25 > 2147483650.0) {
      int v26 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v5 + 24) = v26;
    *(_WORD *)(v5 + 28) = a3;
    if (v41[0] > 0.0) {
      double v23 = 0.5;
    }
    double v27 = v41[0] + v23;
    *(_DWORD *)(v5 + 16) = v21;
    uint64_t v28 = v5 + 16;
    int v29 = (int)v27;
    if (v27 < -2147483650.0) {
      LOWORD(v29) = 0;
    }
    if (v27 <= 2147483650.0) {
      __int16 v30 = v29;
    }
    else {
      __int16 v30 = -1;
    }
    *(_WORD *)(v5 + 30) = v30;
    *(_DWORD *)(v5 + 20) = a4;
    __int16 v31 = -9871;
    do
    {
      int v32 = *(unsigned __int8 *)(v28 + v22) ^ HIBYTE(v31);
      __int16 v31 = -12691 * (v31 + (*(unsigned __int8 *)(v28 + v22) ^ HIBYTE(v31))) + 22719;
      uint64_t v19 = (v19 + v32);
      ++v22;
    }
    while (v22 != 24);
    goto LABEL_39;
  }
  return 0;
}

uint64_t Core_Save_GPS_Eph(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  signed int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 120 * (int)(a1 - 1) + 1976);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = (_OWORD *)(v3 + 120 * v4);
    v6[124] = 0u;
    v6[125] = 0u;
    v6[126] = 0u;
    v6[127] = 0u;
    v6[128] = 0u;
    v6[129] = 0u;
    *(_OWORD *)((char *)v6 + 2076) = 0u;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    uint64_t v11 = (_OWORD *)(p_NV + 120 * v4);
    long long v12 = *a3;
    long long v13 = a3[1];
    v11[126] = a3[2];
    v11[125] = v13;
    v11[124] = v12;
    long long v14 = *(long long *)((char *)a3 + 92);
    long long v15 = a3[3];
    long long v16 = a3[4];
    v11[129] = a3[5];
    v11[128] = v16;
    v11[127] = v15;
    *(_OWORD *)((char *)v11 + 2076) = v14;
    uint64_t v17 = v3 + 120 * a1 + 1864;
    __int16 v18 = -9871;
    do
    {
      int v19 = *(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18);
      __int16 v18 = -12691 * (v18 + (*(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18))) + 22719;
      uint64_t v10 = (v10 + v19);
      ++v9;
    }
    while (v9 != 112);
    *uint64_t v5 = v10;
    if (Is_GPS_BinEph_Real((uint64_t)a3)) {
      EE_Set_GPS_BinEph(a1, (uint64_t)a3);
    }
  }
  return 1;
}

uint64_t Core_Save_QZSS_Eph(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  signed int v4 = a1 - 193;
  uint64_t v5 = (void *)(p_NV + 120 * (int)(a1 - 193) + 6400);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 120 * v4 + 6400;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 100) = 0u;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    uint64_t v11 = p_NV + 120 * v4 + 6400;
    long long v12 = *a3;
    long long v13 = a3[1];
    *(_OWORD *)(v11 + 40) = a3[2];
    *(_OWORD *)(v11 + 24) = v13;
    *(_OWORD *)(v11 + 8) = v12;
    long long v14 = a3[3];
    long long v15 = a3[4];
    long long v16 = a3[5];
    *(_OWORD *)(v11 + 100) = *(long long *)((char *)a3 + 92);
    *(_OWORD *)(v11 + 88) = v16;
    *(_OWORD *)(v11 + 72) = v15;
    *(_OWORD *)(v11 + 56) = v14;
    uint64_t v17 = v3 + 120 * a1 - 16752;
    __int16 v18 = -9871;
    do
    {
      int v19 = *(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18);
      __int16 v18 = -12691 * (v18 + (*(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18))) + 22719;
      uint64_t v10 = (v10 + v19);
      ++v9;
    }
    while (v9 != 112);
    *uint64_t v5 = v10;
    if (Is_GPS_BinEph_Real((uint64_t)a3)) {
      EE_Set_GPS_BinEph(a1, (uint64_t)a3);
    }
  }
  return 1;
}

uint64_t Core_Save_GAL_Eph(unsigned int a1, char a2, uint64_t a3)
{
  uint64_t v3 = p_NV;
  signed int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 96 * (int)(a1 - 1) + 9400);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 96 * v4;
    *(void *)(v6 + 9487) = 0;
    *(_OWORD *)(v6 + 9408) = 0u;
    *(_OWORD *)(v6 + 9424) = 0u;
    *(_OWORD *)(v6 + 9440) = 0u;
    *(_OWORD *)(v6 + 9456) = 0u;
    *(_OWORD *)(v6 + 9472) = 0u;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    uint64_t v11 = p_NV + 96 * v4;
    long long v12 = *(_OWORD *)a3;
    *(_OWORD *)(v11 + 9424) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 9408) = v12;
    long long v13 = *(_OWORD *)(a3 + 32);
    long long v14 = *(_OWORD *)(a3 + 48);
    long long v15 = *(_OWORD *)(a3 + 64);
    *(void *)(v11 + 9488) = *(void *)(a3 + 80);
    *(_OWORD *)(v11 + 9472) = v15;
    *(_OWORD *)(v11 + 9456) = v14;
    *(_OWORD *)(v11 + 9440) = v13;
    uint64_t v16 = v3 + 96 * a1 + 9312;
    __int16 v17 = -9871;
    do
    {
      int v18 = *(unsigned __int8 *)(v16 + v9) ^ HIBYTE(v17);
      __int16 v17 = -12691 * (v17 + (*(unsigned __int8 *)(v16 + v9) ^ HIBYTE(v17))) + 22719;
      uint64_t v10 = (v10 + v18);
      ++v9;
    }
    while (v9 != 88);
    *uint64_t v5 = v10;
    if (Is_GAL_IntEph_Real(a3)) {
      EE_Set_GAL_IntEph(a1, a3);
    }
  }
  return 1;
}

uint64_t Core_Save_BDS_Eph(unsigned int a1, char a2, uint64_t a3)
{
  uint64_t v3 = p_NV;
  signed int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 112 * (int)(a1 - 1) + 15016);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 112 * v4;
    *(_OWORD *)(v6 + 15024) = 0u;
    *(_OWORD *)(v6 + 15040) = 0u;
    *(_OWORD *)(v6 + 15056) = 0u;
    *(_OWORD *)(v6 + 15072) = 0u;
    *(_OWORD *)(v6 + 15088) = 0u;
    *(_OWORD *)(v6 + 15104) = 0u;
    *(_DWORD *)(v6 + 15120) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    uint64_t v11 = p_NV + 112 * v4;
    long long v12 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 15056) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v11 + 15040) = v13;
    *(_OWORD *)(v11 + 15024) = v12;
    long long v14 = *(_OWORD *)(a3 + 48);
    long long v15 = *(_OWORD *)(a3 + 64);
    long long v16 = *(_OWORD *)(a3 + 80);
    *(_DWORD *)(v11 + 15120) = *(_DWORD *)(a3 + 96);
    *(_OWORD *)(v11 + 15104) = v16;
    *(_OWORD *)(v11 + 15088) = v15;
    *(_OWORD *)(v11 + 15072) = v14;
    uint64_t v17 = v3 + 112 * a1 + 14912;
    __int16 v18 = -9871;
    do
    {
      int v19 = *(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18);
      __int16 v18 = -12691 * (v18 + (*(unsigned __int8 *)(v17 + v9) ^ HIBYTE(v18))) + 22719;
      uint64_t v10 = (v10 + v19);
      ++v9;
    }
    while (v9 != 104);
    *uint64_t v5 = v10;
    if (Is_BDS_IntEph_Real(a3)) {
      EE_Set_BDS_IntEph(a1, a3);
    }
  }
  return 1;
}

uint64_t Core_Save_GLON_Eph(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  unsigned int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 72 * (int)(a1 - 1) + 20392);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = (_OWORD *)(v3 + 72 * (int)v4);
    *(_OWORD *)((char *)v6 + 20446) = 0u;
    v6[1275] = 0u;
    v6[1276] = 0u;
    v6[1277] = 0u;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    long long v9 = *a3;
    long long v10 = a3[1];
    long long v11 = a3[2];
    long long v12 = (_OWORD *)(p_NV + 72 * (int)v4);
    v12[1278] = a3[3];
    v12[1277] = v11;
    v12[1276] = v10;
    v12[1275] = v9;
    uint64_t v13 = v3 + 72 * a1 + 20328;
    __int16 v14 = -9871;
    do
    {
      int v15 = *(unsigned __int8 *)(v13 + v7) ^ HIBYTE(v14);
      __int16 v14 = -12691 * (v14 + (*(unsigned __int8 *)(v13 + v7) ^ HIBYTE(v14))) + 22719;
      uint64_t v8 = (v8 + v15);
      ++v7;
    }
    while (v7 != 64);
    *uint64_t v5 = v8;
  }
  return 1;
}

uint64_t Core_Save_GPS_Alm(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  unsigned int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 56 * (int)(a1 - 1) + 184);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = (_OWORD *)(v3 + 56 * (int)v4);
    v6[12] = 0u;
    v6[13] = 0u;
    *(_OWORD *)((char *)v6 + 220) = 0u;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    long long v9 = *a3;
    long long v10 = a3[1];
    long long v11 = (_OWORD *)(p_NV + 56 * (int)v4);
    *(_OWORD *)((char *)v11 + 220) = *(long long *)((char *)a3 + 28);
    v11[12] = v9;
    v11[13] = v10;
    uint64_t v12 = v3 + 56 * a1 + 136;
    __int16 v13 = -9871;
    do
    {
      int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
      __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
      uint64_t v8 = (v8 + v14);
      ++v7;
    }
    while (v7 != 48);
    *uint64_t v5 = v8;
  }
  return 1;
}

uint64_t Core_Save_QZSS_Alm(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  unsigned int v4 = a1 - 193;
  uint64_t v5 = (void *)(p_NV + 56 * (int)(a1 - 193) + 5840);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 56 * (int)v4 + 5840;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 36) = 0u;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = p_NV + 56 * (int)v4 + 5840;
    long long v10 = *a3;
    long long v11 = a3[1];
    *(_OWORD *)(v9 + 36) = *(long long *)((char *)a3 + 28);
    *(_OWORD *)(v9 + 24) = v11;
    *(_OWORD *)(v9 + 8) = v10;
    uint64_t v12 = v3 + 56 * a1 - 4960;
    __int16 v13 = -9871;
    do
    {
      int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
      __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
      uint64_t v8 = (v8 + v14);
      ++v7;
    }
    while (v7 != 48);
    *uint64_t v5 = v8;
  }
  return 1;
}

uint64_t Core_Save_GLON_Alm(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  unsigned int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 48 * (int)(a1 - 1) + 19240);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 48 * (int)v4;
    *(_DWORD *)(v6 + 19280) = 0;
    *(_OWORD *)(v6 + 19248) = 0u;
    *(_OWORD *)(v6 + 19264) = 0u;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = p_NV + 48 * (int)v4;
    long long v10 = *a3;
    long long v11 = a3[1];
    *(_DWORD *)(v9 + 19280) = *((_DWORD *)a3 + 8);
    *(_OWORD *)(v9 + 19264) = v11;
    *(_OWORD *)(v9 + 19248) = v10;
    uint64_t v12 = v3 + 48 * a1 + 19200;
    __int16 v13 = -9871;
    do
    {
      int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
      __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
      uint64_t v8 = (v8 + v14);
      ++v7;
    }
    while (v7 != 40);
    *uint64_t v5 = v8;
  }
  return 1;
}

uint64_t Core_Save_GAL_Alm(unsigned int a1, char a2, long long *a3)
{
  uint64_t v3 = p_NV;
  unsigned int v4 = a1 - 1;
  uint64_t v5 = (void *)(p_NV + 48 * (int)(a1 - 1) + 7672);
  if (a2)
  {
    *uint64_t v5 = 0xFFFFFFFFLL;
    uint64_t v6 = v3 + 48 * (int)v4;
    *(_DWORD *)(v6 + 7711) = 0;
    *(_OWORD *)(v6 + 7680) = 0u;
    *(_OWORD *)(v6 + 7696) = 0u;
  }
  else
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = p_NV + 48 * (int)v4;
    long long v10 = *a3;
    long long v11 = a3[1];
    *(_DWORD *)(v9 + 7712) = *((_DWORD *)a3 + 8);
    *(_OWORD *)(v9 + 7696) = v11;
    *(_OWORD *)(v9 + 7680) = v10;
    uint64_t v12 = v3 + 48 * a1 + 7632;
    __int16 v13 = -9871;
    do
    {
      int v14 = *(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13);
      __int16 v13 = -12691 * (v13 + (*(unsigned __int8 *)(v12 + v7) ^ HIBYTE(v13))) + 22719;
      uint64_t v8 = (v8 + v14);
      ++v7;
    }
    while (v7 != 40);
    *uint64_t v5 = v8;
  }
  return 1;
}

BOOL Core_Load_SBAS_Apx(int a1, int *a2, int *a3)
{
  unint64_t v3 = 0;
  uint64_t v4 = p_NV + 22128;
  BOOL v5 = 1;
  while (1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    __int16 v8 = -9871;
    do
    {
      int v9 = *(unsigned __int8 *)(v4 + v6) ^ HIBYTE(v8);
      __int16 v8 = -12691 * (v8 + (*(unsigned __int8 *)(v4 + v6) ^ HIBYTE(v8))) + 22719;
      v7 += v9;
      ++v6;
    }
    while (v6 != 24);
    if (*(void *)(p_NV + 32 * v3 + 22120) == v7)
    {
      uint64_t v10 = p_NV + 32 * v3;
      if (*(_DWORD *)(v10 + 22132) == a1) {
        break;
      }
    }
    BOOL v5 = v3 < 9;
    v4 += 32;
    if (++v3 == 10) {
      return 0;
    }
  }
  *a2 = *(_DWORD *)(v10 + 22128);
  uint64_t v11 = *(void *)(v10 + 22136);
  a3[2] = *(_DWORD *)(v10 + 22144);
  *(void *)a3 = v11;
  return v5;
}

BOOL Core_Save_SBAS_Apx(int a1, char a2, int a3, int *a4)
{
  if ((a2 & 1) == 0)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (unsigned __int8 *)(p_NV + 22128);
    int v13 = -1;
    BOOL v14 = 1;
    while (1)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = (void *)(p_NV + 32 * v11 + 22120);
      __int16 v18 = -9871;
      do
      {
        int v19 = v12[v15] ^ HIBYTE(v18);
        __int16 v18 = -12691 * (v18 + (v12[v15] ^ HIBYTE(v18))) + 22719;
        v16 += v19;
        ++v15;
      }
      while (v15 != 24);
      if (*v17 == v16)
      {
        int v20 = *(_DWORD *)(p_NV + 32 * v11 + 22132);
        if ((v20 - 159) < 0xFFFFFFD9 || v20 == a1) {
          int v13 = v11;
        }
        if ((v13 & 0x80000000) == 0)
        {
LABEL_23:
          LODWORD(v22) = 0;
          uint64_t v23 = p_NV + 32 * v11;
          *(_DWORD *)(v23 + 22128) = a3;
          *(_DWORD *)(v23 + 22132) = a1;
          uint64_t v24 = *(void *)a4;
          *(_DWORD *)(v23 + 22144) = a4[2];
          *(void *)(v23 + 22136) = v24;
          __int16 v25 = -9871;
          uint64_t v26 = 24;
          do
          {
            int v27 = *v12++;
            int v28 = v27 ^ HIBYTE(v25);
            __int16 v25 = -12691 * (v25 + (v27 ^ HIBYTE(v25))) + 22719;
            uint64_t v22 = (v22 + v28);
            --v26;
          }
          while (v26);
          *uint64_t v17 = v22;
          return v14;
        }
      }
      else
      {
        int v13 = v11;
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      BOOL v14 = v11 < 9;
      v12 += 32;
      if (++v11 == 10) {
        return 0;
      }
    }
  }
  uint64_t v4 = 0;
  for (uint64_t i = p_NV + 22128; ; i += 32)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = p_NV + 32 * v4 + 22120;
    __int16 v9 = -9871;
    do
    {
      int v10 = *(unsigned __int8 *)(i + v6) ^ HIBYTE(v9);
      __int16 v9 = -12691 * (v9 + (*(unsigned __int8 *)(i + v6) ^ HIBYTE(v9))) + 22719;
      v7 += v10;
      ++v6;
    }
    while (v6 != 24);
    if (*(void *)v8 == v7 && *(_DWORD *)(p_NV + 32 * v4 + 22132) == a1) {
      break;
    }
    if (++v4 == 10) {
      return 0;
    }
  }
  *(void *)(p_NV + 32 * v4 + 22128) = 0;
  *(void *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)uint64_t v8 = 0xFFFFFFFFLL;
  return 1;
}

uint64_t Core_Load_TTick_Cal(int a1, int a2, int a3, unsigned int *a4, unsigned __int8 *a5)
{
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = p_NV;
  uint64_t v8 = p_NV + 22856;
  *a4 = *(_DWORD *)(p_NV + 22856) - a3;
  *a5 = -1;
  __int16 v9 = -9871;
  do
  {
    int v10 = *(unsigned __int8 *)(v8 + v5) ^ HIBYTE(v9);
    __int16 v9 = -12691 * (v9 + (*(unsigned __int8 *)(v8 + v5) ^ HIBYTE(v9))) + 22719;
    v6 += v10;
    ++v5;
  }
  while (v5 != 16);
  if (*(void *)(v7 + 22848) != v6) {
    return 0;
  }
  unsigned int v11 = *a4;
  if ((*a4 & 0x80000000) != 0) {
    unsigned int v11 = -v11;
  }
  if (v11 > 0x1388) {
    return 0;
  }
  uint64_t v12 = 0;
  int v13 = a1 - *(_DWORD *)(v8 + 4);
  if (v13 < 14400000)
  {
    int v14 = a2 - *(_DWORD *)(v8 + 8);
    if (v14 < 14400000)
    {
      unsigned int v15 = v13 - v14;
      if (v13 - v14 < 0) {
        unsigned int v15 = v14 - v13;
      }
      if (v15 <= 0x1388)
      {
        *a5 = ((unint64_t)(1172812403 * v13) >> 46) + (1172812403 * v13 < 0);
        return 1;
      }
      return 0;
    }
  }
  return v12;
}

uint64_t Core_Save_Inhib_EE(BOOL *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = (void *)p_NV;
  uint64_t v5 = 1;
  do
  {
    if (a1[v2]) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    v3 |= v6;
    v5 *= 2;
    ++v2;
  }
  while (v2 != 32);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *(void *)(p_NV + 22880) = v3;
  uint64_t v9 = 1;
  do
  {
    if (a1[v7 + 32]) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    v8 |= v10;
    v9 *= 2;
    ++v7;
  }
  while (v7 != 24);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v4[2861] = v8;
  uint64_t v13 = 1;
  do
  {
    if (a1[v11 + 129]) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    v12 |= v14;
    v13 *= 2;
    ++v11;
  }
  while (v11 != 10);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v4[2862] = v12;
  uint64_t v17 = 1;
  do
  {
    if (a1[v15 + 139]) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    v16 |= v18;
    v17 *= 2;
    ++v15;
  }
  while (v15 != 39);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v4[2863] = v16;
  uint64_t v21 = 1;
  do
  {
    if (a1[v19 + 92]) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    v20 |= v22;
    v21 *= 2;
    ++v19;
  }
  while (v19 != 37);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  v4[2864] = v20;
  uint64_t v25 = 1;
  do
  {
    if (a1[v23 + 56]) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    v24 |= v26;
    v25 *= 2;
    ++v23;
  }
  while (v23 != 36);
  v4[2865] = v24;
  v4[2866] = a2;
  EvLog_v("Core_Save_Inhib_EE: Time 0x%X G %x R %x Q %x S %X B %X E %X", a2, v3, v8, v12, v16, v20, v24);
  uint64_t v27 = 0;
  LODWORD(v28) = 0;
  int v29 = v4 + 2860;
  __int16 v30 = -9871;
  do
  {
    int v31 = *((unsigned __int8 *)v29 + v27) ^ HIBYTE(v30);
    __int16 v30 = -12691 * (v30 + (*((unsigned __int8 *)v29 + v27) ^ HIBYTE(v30))) + 22719;
    uint64_t v28 = (v28 + v31);
    ++v27;
  }
  while (v27 != 56);
  v4[2859] = v28;
  return 1;
}

BOOL Core_Load_Inhib_EE(BOOL *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  uint64_t v4 = (void *)p_NV;
  uint64_t v5 = p_NV + 22880;
  __int16 v6 = -9871;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6);
    __int16 v6 = -12691 * (v6 + (*(unsigned __int8 *)(v5 + v2) ^ HIBYTE(v6))) + 22719;
    uint64_t v3 = (v3 + v7);
    ++v2;
  }
  while (v2 != 56);
  uint64_t v8 = *(void *)(p_NV + 22872);
  if (v8 == v3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(p_NV + 22880);
    uint64_t v11 = 1;
    do
    {
      if ((v11 & v10) != 0) {
        a1[v9] = 1;
      }
      v11 *= 2;
      ++v9;
    }
    while (v9 != 32);
    uint64_t v12 = 0;
    uint64_t v13 = v4[2861];
    uint64_t v14 = 1;
    do
    {
      if ((v14 & v13) != 0) {
        a1[v12 + 32] = 1;
      }
      v14 *= 2;
      ++v12;
    }
    while (v12 != 24);
    uint64_t v15 = 0;
    uint64_t v16 = v4[2862];
    uint64_t v17 = 1;
    do
    {
      if ((v17 & v16) != 0) {
        a1[v15 + 129] = 1;
      }
      v17 *= 2;
      ++v15;
    }
    while (v15 != 10);
    uint64_t v18 = 0;
    uint64_t v19 = v4[2863];
    uint64_t v20 = 1;
    do
    {
      if ((v20 & v19) != 0) {
        a1[v18 + 139] = 1;
      }
      v20 *= 2;
      ++v18;
    }
    while (v18 != 39);
    uint64_t v21 = 0;
    uint64_t v22 = v4[2864];
    uint64_t v23 = 1;
    do
    {
      if ((v23 & v22) != 0) {
        a1[v21 + 92] = 1;
      }
      v23 *= 2;
      ++v21;
    }
    while (v21 != 37);
    uint64_t v24 = 0;
    uint64_t v25 = v4[2865];
    uint64_t v26 = 1;
    do
    {
      if ((v26 & v25) != 0) {
        a1[v24 + 56] = 1;
      }
      v26 *= 2;
      ++v24;
    }
    while (v24 != 36);
    *a2 = v4[2866];
    EvLog_v("Core_Load_Inhib_EE: Time 0x%X G %x R %x Q %x S %X B %X E %X", v4[2866], v4[2860], v4[2861], v4[2862], v4[2863], v4[2864], v4[2865]);
  }
  return v8 == v3;
}

uint64_t GN_GPS_Clear_NV_Data(unsigned __int8 *a1, char *a2)
{
  uint64_t result = 0;
  uint64_t v156 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)&xmmword_26AE66D28 + 1);
  uint64_t v7 = qword_26AE66C38;
  uint64_t v8 = unk_26AE66C40;
  uint64_t v10 = qword_26AE66C18;
  uint64_t v9 = qword_26AE66C20;
  uint64_t v11 = v155;
  p_src = &__src;
  uint64_t v153 = &v156;
  v151[1] = &__src;
  char __src = 10;
  char v12 = 42;
  memset(v155, 0, sizeof(v155));
  do
  {
    v151[0] = v11 + 1;
    *uint64_t v11 = v12;
    uint64_t v11 = (char *)v151[0];
    if (v151[0] >= (unint64_t)v153)
    {
      uint64_t v11 = p_src;
      v151[0] = p_src;
    }
    char v12 = asc_22BAFBB06[++v5];
  }
  while (v5 != 8);
  v151[0] = v11 + 1;
  *uint64_t v11 = 10;
  if (v151[0] >= (unint64_t)v153) {
    v151[0] = p_src;
  }
  uint64_t v13 = mach_continuous_time();
  sprintf_10u(v151, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13));
  uint64_t v14 = (unsigned char *)v151[0]++;
  char v15 = 32;
  *uint64_t v14 = 32;
  if (v151[0] >= (unint64_t)v153) {
    uint64_t v16 = p_src;
  }
  else {
    uint64_t v16 = (char *)v151[0];
  }
  uint64_t v17 = 1u;
  do
  {
    v151[0] = v16 + 1;
    *uint64_t v16 = v15;
    uint64_t v16 = (char *)v151[0];
    if (v151[0] >= (unint64_t)v153)
    {
      uint64_t v16 = p_src;
      v151[0] = p_src;
    }
    char v15 = a0GnGpsClearNvD[v17++];
  }
  while (v17 != 31);
  uint64_t v147 = v10;
  if (!strcmp("VHOT", a2) || !strcmp("HOT", a2))
  {
    int v30 = 0;
    int v19 = 0;
    int v20 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
LABEL_38:
    int v23 = 0;
    int v22 = 0;
    int v21 = 0;
    int v31 = 1;
    goto LABEL_39;
  }
  if (!strcmp("HOST", a2))
  {
    int v19 = 0;
    int v20 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v30 = 1;
    goto LABEL_38;
  }
  if (!strcmp("WARM", a2))
  {
    int v30 = 0;
    int v19 = 0;
    int v20 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v25 = 1;
    goto LABEL_38;
  }
  if (!strcmp("COLD", a2))
  {
    int v23 = 0;
    int v26 = 0;
    int v19 = 0;
    int v30 = 0;
    int v31 = 0;
    *(_WORD *)(v6 + 8) = 0;
    int v21 = 1;
    int v22 = 1;
    int v27 = 1;
    int v25 = 1;
    int v20 = 1;
    goto LABEL_40;
  }
  if (!strcmp("FACT", a2))
  {
    int v30 = 0;
    int v31 = 0;
    int v21 = 1;
    int v22 = 1;
    int v23 = 1;
    int v27 = 1;
    int v26 = 1;
    int v25 = 1;
    int v20 = 1;
    int v19 = 1;
    goto LABEL_40;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  int v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  while (2)
  {
    if (a2[v18])
    {
      uint64_t v29 = 1;
      switch(a2[v18])
      {
        case 'A':
          goto LABEL_35;
        case 'C':
          int v19 = 1;
          goto LABEL_34;
        case 'E':
          int v25 = 1;
          goto LABEL_34;
        case 'F':
          int v26 = 1;
          goto LABEL_34;
        case 'H':
          int v21 = 1;
          goto LABEL_34;
        case 'I':
        case 'K':
          int v23 = 1;
          goto LABEL_34;
        case 'P':
          int v28 = 1;
          goto LABEL_34;
        case 'T':
          int v27 = 1;
          goto LABEL_34;
        case 'U':
          int v22 = 1;
          goto LABEL_34;
        case 'V':
          int v20 = 1;
LABEL_34:
          uint64_t v29 = v24;
LABEL_35:
          ++v18;
          uint64_t v24 = v29;
          if (v18 == 16) {
            goto LABEL_143;
          }
          continue;
        default:
          char v119 = 70;
          uint64_t v120 = 1u;
          do
          {
            v151[0] = v16 + 1;
            *uint64_t v16 = v119;
            uint64_t v16 = (char *)v151[0];
            if (v151[0] >= (unint64_t)v153)
            {
              uint64_t v16 = p_src;
              v151[0] = p_src;
            }
            char v119 = aFailedInvalidI[v120++];
          }
          while (v120 != 27);
          char v121 = *a2;
          if (*a2)
          {
            uint64_t v122 = a2 + 1;
            do
            {
              v151[0] = v16 + 1;
              *uint64_t v16 = v121;
              uint64_t v16 = (char *)v151[0];
              if (v151[0] >= (unint64_t)v153)
              {
                uint64_t v16 = p_src;
                v151[0] = p_src;
              }
              int v123 = *v122++;
              char v121 = v123;
            }
            while (v123);
          }
          char v124 = 34;
          uint64_t v125 = 1u;
          do
          {
            v151[0] = v16 + 1;
            *uint64_t v16 = v124;
            uint64_t v16 = (char *)v151[0];
            if (v151[0] >= (unint64_t)v153)
            {
              uint64_t v16 = p_src;
              v151[0] = p_src;
            }
            char v124 = asc_22BAFBB4D[v125++];
          }
          while (v125 != 4);
          uint64_t v126 = (void *)*((void *)&xmmword_26AE66D58 + 1);
          int v127 = v16 - p_src;
          unint64_t v128 = *(void *)(*((void *)&xmmword_26AE66D58 + 1) + 24);
          long long v129 = (void *)**((void **)&xmmword_26AE66D58 + 1);
          long long v130 = &__src;
          do
          {
            int v131 = v128 - v129;
            if (v127 >= v131) {
              int v132 = v131;
            }
            else {
              int v132 = v127;
            }
            memcpy(v129, v130, v132);
            long long v129 = (void *)(*v126 + v132);
            *uint64_t v126 = v129;
            unint64_t v128 = v126[3];
            if ((unint64_t)v129 >= v128)
            {
              long long v129 = (void *)v126[2];
              *uint64_t v126 = v129;
            }
            v130 += v132;
            BOOL v104 = __OFSUB__(v127, v132);
            v127 -= v132;
          }
          while (!((v127 < 0) ^ v104 | (v127 == 0)));
          int v133 = (void *)xmmword_26AE66D58;
          int v134 = LODWORD(v151[0]) - p_src;
          unint64_t v135 = *(void *)(xmmword_26AE66D58 + 24);
          uint64_t v136 = *(void **)xmmword_26AE66D58;
          unsigned __int16 v137 = &__src;
          do
          {
            int v138 = v135 - v136;
            if (v134 >= v138) {
              int v139 = v138;
            }
            else {
              int v139 = v134;
            }
            memcpy(v136, v137, v139);
            uint64_t v136 = (void *)(*v133 + v139);
            *int v133 = v136;
            unint64_t v135 = v133[3];
            if ((unint64_t)v136 >= v135)
            {
              uint64_t v136 = (void *)v133[2];
              *int v133 = v136;
            }
            v137 += v139;
            BOOL v104 = __OFSUB__(v134, v139);
            v134 -= v139;
          }
          while (!((v134 < 0) ^ v104 | (v134 == 0)));
          uint64_t v140 = (void *)xmmword_26AE66D68;
          int v141 = LODWORD(v151[0]) - p_src;
          unint64_t v142 = *(void *)(xmmword_26AE66D68 + 24);
          char v143 = *(void **)xmmword_26AE66D68;
          int v144 = &__src;
          do
          {
            int v145 = v142 - v143;
            if (v141 >= v145) {
              int v146 = v145;
            }
            else {
              int v146 = v141;
            }
            memcpy(v143, v144, v146);
            char v143 = (void *)(*v140 + v146);
            *uint64_t v140 = v143;
            unint64_t v142 = v140[3];
            if ((unint64_t)v143 >= v142)
            {
              char v143 = (void *)v140[2];
              *uint64_t v140 = v143;
            }
            v144 += v146;
            BOOL v104 = __OFSUB__(v141, v146);
            v141 -= v146;
          }
          while (!((v141 < 0) ^ v104 | (v141 == 0)));
          GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
          GNSS_Event_Log_Ctl(xmmword_26AE66D58);
          GNSS_Event_Log_Ctl(xmmword_26AE66D68);
          return 0;
      }
    }
    break;
  }
  LODWORD(v29) = v24;
LABEL_143:
  int v30 = 0;
  int v31 = 0;
  if (!v29) {
    goto LABEL_38;
  }
LABEL_39:
  if (!v28)
  {
    int v148 = 1;
    goto LABEL_42;
  }
LABEL_40:
  int v148 = 0;
  *(_WORD *)(v6 + 10) = 0;
  *(unsigned char *)(v6 + 297) = 0;
  *(void *)(v7 + 4) = 0;
  int64x2_t v32 = vdupq_n_s64(0x4163125300000000uLL);
  *(int64x2_t *)(v7 + 800) = v32;
  *(int64x2_t *)(v7 + 816) = v32;
  *(void *)(v7 + 832) = 0x4163125300000000;
  *(int64x2_t *)(v7 + 896) = v32;
  *(void *)(v7 + 912) = 0;
  *(void *)(v8 + 4) = 0;
  *(int64x2_t *)(v8 + 800) = v32;
  *(int64x2_t *)(v8 + 816) = v32;
  *(void *)(v8 + 832) = 0x4163125300000000;
  *(int64x2_t *)(v8 + 896) = v32;
  *(void *)(v8 + 912) = 0;
  g_GN_GNSS_Nav_Data = 0;
LABEL_42:
  int v33 = v20;
  int v34 = v25;
  if (v25)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v9;
    do
    {
      unsigned __int16 v37 = &a1[v35 + 1976];
      *((_DWORD *)v37 + 28) = 0;
      *((_OWORD *)v37 + 5) = 0uLL;
      *((_OWORD *)v37 + 6) = 0uLL;
      *((_OWORD *)v37 + 3) = 0uLL;
      *((_OWORD *)v37 + 4) = 0uLL;
      *((_OWORD *)v37 + 1) = 0uLL;
      *((_OWORD *)v37 + 2) = 0uLL;
      *(_OWORD *)unsigned __int16 v37 = 0uLL;
      *(_OWORD *)(v36 + 196) = 0uLL;
      *(_OWORD *)(v36 + 184) = 0uLL;
      *(_OWORD *)(v36 + 168) = 0uLL;
      *(_OWORD *)(v36 + 152) = 0uLL;
      *(_OWORD *)(v36 + 136) = 0uLL;
      *(_OWORD *)(v36 + 120) = 0uLL;
      *(_OWORD *)(v36 + 104) = 0uLL;
      uint64_t v38 = v36 + 3560;
      *(_OWORD *)(v36 + 3560) = 0uLL;
      *(_OWORD *)(v36 + 3576) = 0uLL;
      *(_OWORD *)(v36 + 3592) = 0uLL;
      *(_OWORD *)(v36 + 3608) = 0uLL;
      *(_OWORD *)(v36 + 3624) = 0uLL;
      *(_OWORD *)(v36 + 3640) = 0uLL;
      v35 += 120;
      v36 += 108;
      *(_OWORD *)(v38 + 92) = 0uLL;
    }
    while (v35 != 3840);
    uint64_t v39 = 0;
    *(_OWORD *)(v6 + 31) = 0u;
    *(_OWORD *)(v6 + 15) = 0u;
    char v40 = (_OWORD *)(v9 + 8608);
    do
    {
      __int16 v41 = &a1[v39 + 6400];
      *((_DWORD *)v41 + 28) = 0;
      *((_OWORD *)v41 + 5) = 0uLL;
      *((_OWORD *)v41 + 6) = 0uLL;
      *((_OWORD *)v41 + 3) = 0uLL;
      *((_OWORD *)v41 + 4) = 0uLL;
      *((_OWORD *)v41 + 1) = 0uLL;
      *((_OWORD *)v41 + 2) = 0uLL;
      *(_OWORD *)__int16 v41 = 0uLL;
      *(_OWORD *)((char *)v40 + 92) = 0uLL;
      v40[4] = 0uLL;
      v40[5] = 0uLL;
      v40[2] = 0uLL;
      v40[3] = 0uLL;
      *char v40 = 0uLL;
      v40[1] = 0uLL;
      unsigned __int8 v42 = (char *)v40 + 1080;
      *(_OWORD *)((char *)v40 + 1080) = 0uLL;
      *(_OWORD *)((char *)v40 + 1096) = 0uLL;
      *(_OWORD *)((char *)v40 + 1112) = 0uLL;
      *(_OWORD *)((char *)v40 + 1128) = 0uLL;
      *(_OWORD *)((char *)v40 + 1144) = 0uLL;
      *(_OWORD *)((char *)v40 + 1160) = 0uLL;
      v39 += 120;
      char v40 = (_OWORD *)((char *)v40 + 108);
      *(_OWORD *)(v42 + 92) = 0uLL;
    }
    while (v39 != 1200);
    uint64_t v43 = 0;
    *(_WORD *)(v6 + 87) = 0;
    *(void *)(v6 + 79) = 0;
    uint64_t v44 = (_OWORD *)(v9 + 12760);
    unint64_t v45 = (_OWORD *)(v9 + 11224);
    do
    {
      uint64_t v46 = &a1[v43 + 20392];
      *((void *)v46 + 8) = 0;
      *((_OWORD *)v46 + 2) = 0uLL;
      *((_OWORD *)v46 + 3) = 0uLL;
      *(_OWORD *)uint64_t v46 = 0uLL;
      *((_OWORD *)v46 + 1) = 0uLL;
      *(_OWORD *)((char *)v45 + 46) = 0uLL;
      v45[1] = 0uLL;
      v45[2] = 0uLL;
      *unint64_t v45 = 0uLL;
      v45 += 4;
      *(_OWORD *)((char *)v44 + 92) = 0uLL;
      void v44[4] = 0uLL;
      v44[5] = 0uLL;
      v44[2] = 0uLL;
      v44[3] = 0uLL;
      v43 += 72;
      *uint64_t v44 = 0uLL;
      v44[1] = 0uLL;
      uint64_t v44 = (_OWORD *)((char *)v44 + 108);
    }
    while (v43 != 1728);
    uint64_t v47 = 0;
    *(void *)(v6 + 107) = 0;
    *(void *)(v6 + 99) = 0;
    *(void *)(v6 + 115) = 0;
    uint64_t v48 = v9 + 16736;
    do
    {
      int v49 = &a1[v47 + 9400];
      *((_OWORD *)v49 + 4) = 0uLL;
      *((_OWORD *)v49 + 5) = 0uLL;
      *((_OWORD *)v49 + 2) = 0uLL;
      *((_OWORD *)v49 + 3) = 0uLL;
      *(_OWORD *)int v49 = 0uLL;
      *((_OWORD *)v49 + 1) = 0uLL;
      *(void *)(v48 + 79) = 0;
      *(_OWORD *)(v48 + 48) = 0uLL;
      *(_OWORD *)(v48 + 64) = 0uLL;
      *(_OWORD *)(v48 + 16) = 0uLL;
      *(_OWORD *)(v48 + 32) = 0uLL;
      *(_OWORD *)uint64_t v48 = 0uLL;
      uint64_t v50 = v48 + 3168;
      *(_OWORD *)(v48 + 3168) = 0uLL;
      *(_OWORD *)(v48 + 3184) = 0uLL;
      *(_OWORD *)(v48 + 3200) = 0uLL;
      *(_OWORD *)(v48 + 3216) = 0uLL;
      *(_OWORD *)(v48 + 3232) = 0uLL;
      v47 += 96;
      v48 += 88;
      *(void *)(v50 + 79) = 0;
    }
    while (v47 != 3456);
    *(_DWORD *)(v6 + 182) = 0;
    *(_OWORD *)(v6 + 166) = 0u;
    *(_OWORD *)(v6 + 150) = 0u;
    uint64_t v51 = v9 + 28220;
    uint64_t v52 = a1 + 15016;
    uint64_t v53 = -4144;
    do
    {
      uint64_t v54 = &v52[v53];
      *((_OWORD *)v54 + 264) = 0uLL;
      *((_OWORD *)v54 + 263) = 0uLL;
      *((_OWORD *)v54 + 262) = 0uLL;
      *((_OWORD *)v54 + 261) = 0uLL;
      *((_OWORD *)v54 + 260) = 0uLL;
      *((_OWORD *)v54 + 259) = 0uLL;
      *(_OWORD *)&v52[v53 + 4236] = 0uLL;
      uint64_t v55 = v51 - 3700;
      *(_DWORD *)(v55 + 96) = 0;
      *(_OWORD *)(v55 + 64) = 0uLL;
      *(_OWORD *)(v55 + 80) = 0uLL;
      *(_OWORD *)(v55 + 32) = 0uLL;
      *(_OWORD *)(v55 + 48) = 0uLL;
      *(_OWORD *)uint64_t v51 = 0uLL;
      *(_OWORD *)(v51 + 16) = 0uLL;
      *(_OWORD *)(v51 + 32) = 0uLL;
      *(_OWORD *)(v51 + 48) = 0uLL;
      *(_OWORD *)(v51 + 64) = 0uLL;
      *(_OWORD *)(v51 + 80) = 0uLL;
      *(_DWORD *)(v51 + 96) = 0;
      v51 += 100;
      *(_OWORD *)uint64_t v55 = 0uLL;
      *(_OWORD *)(v55 + 16) = 0uLL;
      v53 += 112;
    }
    while (v53);
    *(void *)(v6 + 252) = 0;
    *(_OWORD *)(v6 + 239) = 0u;
    *(_OWORD *)(v6 + 223) = 0u;
    *(unsigned char *)(v6 + 148) = 0;
    *(_OWORD *)(v9 + 38928) = 0u;
    *(_OWORD *)(v9 + 38912) = 0u;
    *(_OWORD *)(v9 + 38896) = 0u;
    *(_OWORD *)(v9 + 38880) = 0u;
    *(_OWORD *)(v9 + 38864) = 0u;
    *(_OWORD *)(v9 + 38848) = 0u;
    *(_OWORD *)(v9 + 38832) = 0u;
    *(_OWORD *)(v9 + 38816) = 0u;
    *(_OWORD *)(v9 + 38800) = 0u;
    *(_OWORD *)(v9 + 38784) = 0u;
    *(_OWORD *)(v9 + 38768) = 0u;
    *(_WORD *)(v9 + 38944) = 0;
    *(_OWORD *)(v9 + 39124) = 0u;
    *(_OWORD *)(v9 + 39140) = 0u;
    *(_OWORD *)(v9 + 39156) = 0u;
    *(_OWORD *)(v9 + 39172) = 0u;
    *(_OWORD *)(v9 + 39188) = 0u;
    *(_OWORD *)(v9 + 39204) = 0u;
    *(_OWORD *)(v9 + 39220) = 0u;
    *(_OWORD *)(v9 + 39236) = 0u;
    *(_OWORD *)(v9 + 39252) = 0u;
    *(_OWORD *)(v9 + 39268) = 0u;
    *(_OWORD *)(v9 + 39284) = 0u;
    *(_WORD *)(v9 + 39300) = 0;
    *(_DWORD *)(v9 + 37696) = 0;
    *(_OWORD *)(v9 + 37680) = 0u;
    *(_OWORD *)(v9 + 37664) = 0u;
    *(_OWORD *)(v9 + 37648) = 0u;
    *(_OWORD *)(v9 + 37632) = 0u;
    *(_OWORD *)(v9 + 37616) = 0u;
    *(_OWORD *)(v9 + 37600) = 0u;
    *(_OWORD *)(v9 + 37584) = 0u;
    *(_OWORD *)(v9 + 37568) = 0u;
    *(_OWORD *)(v9 + 37552) = 0u;
    *(_OWORD *)(v9 + 37536) = 0u;
    *(_OWORD *)(v9 + 37520) = 0u;
    *(_OWORD *)(v9 + 37504) = 0u;
    *(_OWORD *)(v9 + 37488) = 0u;
    *(_OWORD *)(v9 + 37472) = 0u;
    *(_OWORD *)(v9 + 37456) = 0u;
    *(_OWORD *)(v9 + 37440) = 0u;
    *(_OWORD *)(v9 + 37424) = 0u;
    *(_OWORD *)(v9 + 37408) = 0u;
    *(_OWORD *)(v9 + 37392) = 0u;
    *(_OWORD *)(v9 + 37376) = 0u;
    *(_OWORD *)(v9 + 37360) = 0u;
    *(_OWORD *)(v9 + 37344) = 0u;
  }
  if ((v31 & 1) == 0)
  {
    unsigned int v56 = (_OWORD *)(v9 + 7016);
    uint64_t v57 = 184;
    do
    {
      __int16 v58 = &a1[v57];
      *((_DWORD *)v58 + 12) = 0;
      *((_OWORD *)v58 + 1) = 0uLL;
      *((_OWORD *)v58 + 2) = 0uLL;
      *(_OWORD *)__int16 v58 = 0uLL;
      *(_OWORD *)((char *)v56 + 28) = 0uLL;
      v57 += 56;
      *unsigned int v56 = 0uLL;
      v56[1] = 0uLL;
      unsigned int v56 = (_OWORD *)((char *)v56 + 44);
    }
    while (v57 != 1976);
    uint64_t v59 = 0;
    *(_OWORD *)(v6 + 63) = 0u;
    *(_OWORD *)(v6 + 47) = 0u;
    __int16 v60 = a1 + 5840;
    do
    {
      *((_DWORD *)v60 + 12) = 0;
      *((_OWORD *)v60 + 1) = 0uLL;
      *((_OWORD *)v60 + 2) = 0uLL;
      *(_OWORD *)__int16 v60 = 0uLL;
      v60 += 56;
      unsigned int v61 = (_OWORD *)(v9 + 10768 + v59);
      *(_OWORD *)((char *)v61 + 28) = 0uLL;
      v59 += 44;
      *unsigned int v61 = 0uLL;
      v61[1] = 0uLL;
    }
    while (v59 != 440);
    uint64_t v62 = 0;
    *(_WORD *)(v6 + 97) = 0;
    *(void *)(v6 + 89) = 0;
    int v63 = a1 + 19240;
    do
    {
      *(_OWORD *)(v63 + 28) = 0uLL;
      *(_OWORD *)int v63 = 0uLL;
      *((_OWORD *)v63 + 1) = 0uLL;
      v63 += 48;
      uint64_t v64 = v9 + 15352 + v62;
      *(_DWORD *)(v64 + 32) = 0;
      v62 += 36;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *(_OWORD *)(v64 + 16) = 0uLL;
    }
    while (v62 != 864);
    uint64_t v65 = 0;
    *(void *)(v6 + 131) = 0;
    *(void *)(v6 + 123) = 0;
    *(void *)(v6 + 139) = 0;
    uint64_t v66 = v9 + 23072;
    do
    {
      unint64_t v67 = &a1[v65 + 7672];
      *(_OWORD *)(v67 + 28) = 0uLL;
      *(_OWORD *)unint64_t v67 = 0uLL;
      *((_OWORD *)v67 + 1) = 0uLL;
      *(_DWORD *)(v66 + 31) = 0;
      v65 += 48;
      *(_OWORD *)uint64_t v66 = 0uLL;
      *(_OWORD *)(v66 + 16) = 0uLL;
      v66 += 36;
    }
    while (v65 != 1728);
    uint64_t v68 = 0;
    *(_DWORD *)(v6 + 218) = 0;
    *(_OWORD *)(v6 + 202) = 0u;
    *(_OWORD *)(v6 + 186) = 0u;
    unsigned __int16 v69 = a1 + 12944;
    do
    {
      *((_DWORD *)v69 + 12) = 0;
      *((_OWORD *)v69 + 1) = 0uLL;
      *((_OWORD *)v69 + 2) = 0uLL;
      *(_OWORD *)unsigned __int16 v69 = 0uLL;
      v69 += 56;
      unsigned int v70 = (_OWORD *)(v9 + 31920 + v68);
      *(_OWORD *)((char *)v70 + 28) = 0uLL;
      v68 += 44;
      *unsigned int v70 = 0uLL;
      v70[1] = 0uLL;
    }
    while (v68 != 1628);
    uint64_t v71 = 0;
    *(void *)(v6 + 289) = 0;
    *(_OWORD *)(v6 + 260) = 0u;
    *(_OWORD *)(v6 + 276) = 0u;
    do
    {
      int v72 = &a1[v71 + 22120];
      *(void *)int v72 = 0;
      *((void *)v72 + 1) = 0;
      *((_DWORD *)v72 + 6) = 0;
      *((void *)v72 + 2) = 0;
      v71 += 32;
    }
    while (v71 != 320);
    *(unsigned char *)(v6 + 148) = 0;
    *(_WORD *)(v9 + 37876) = 0;
    *(_OWORD *)(v9 + 37844) = 0u;
    *(_OWORD *)(v9 + 37860) = 0u;
    *(_OWORD *)(v9 + 37812) = 0u;
    *(_OWORD *)(v9 + 37828) = 0u;
    *(_OWORD *)(v9 + 37780) = 0u;
    *(_OWORD *)(v9 + 37796) = 0u;
    *(_OWORD *)(v9 + 37748) = 0u;
    *(_OWORD *)(v9 + 37764) = 0u;
    *(_OWORD *)(v9 + 37716) = 0u;
    *(_OWORD *)(v9 + 37732) = 0u;
    *(_OWORD *)(v9 + 37700) = 0u;
  }
  if (v23)
  {
    *((void *)a1 + 18) = 0;
    *((_OWORD *)a1 + 8) = 0u;
    *(unsigned char *)(v6 + 13) = 0;
    *(_OWORD *)(v9 + 8424) = 0u;
  }
  if (v22)
  {
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(unsigned char *)(v6 + 14) = 0;
    *((_DWORD *)a1 + 4808) = 0;
    *((_OWORD *)a1 + 1201) = 0u;
    *((_OWORD *)a1 + 1200) = 0u;
    *(unsigned char *)(v6 + 147) = 0;
    *((_DWORD *)a1 + 3234) = 0;
    *((void *)a1 + 1616) = 0;
    *((_OWORD *)a1 + 807) = 0u;
    *(unsigned char *)(v6 + 222) = 0;
    *((void *)a1 + 958) = 0;
    *((_OWORD *)a1 + 478) = 0u;
    *(unsigned char *)(v6 + 149) = 0;
    *(_OWORD *)(v9 + 8440) = 0u;
    *(void *)(v9 + 8456) = 0;
    *(void *)(v9 + 16216) = 0;
    *(_OWORD *)(v9 + 16224) = 0u;
    *(unsigned char *)(v9 + 16240) = 0;
    *(void *)(v9 + 24368) = 0;
    *(void *)(v9 + 24374) = 0;
    *(_OWORD *)(v9 + 33548) = 0u;
    *(_DWORD *)(v9 + 33564) = 0;
  }
  if (v21)
  {
    *(_OWORD *)(a1 + 108) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *(_OWORD *)(a1 + 19160) = 0u;
    *(_OWORD *)(a1 + 19176) = 0u;
    *((_DWORD *)a1 + 4798) = 0;
    *(_OWORD *)(a1 + 5816) = 0u;
    *(void *)(a1 + 5830) = 0;
    *((_OWORD *)a1 + 475) = 0u;
    *((_OWORD *)a1 + 476) = 0u;
    *((_OWORD *)a1 + 477) = 0u;
    *(_OWORD *)(a1 + 12856) = 0u;
    *(_OWORD *)(a1 + 12872) = 0u;
    *(_OWORD *)(a1 + 12888) = 0u;
    a1[12904] = 0;
    *(unsigned char *)(v6 + 297) = 0;
  }
  int v73 = v26;
  if (v33)
  {
    *(void *)(a1 + 22838) = 0;
    *(_OWORD *)(a1 + 22808) = 0u;
    *(_OWORD *)(a1 + 22824) = 0u;
    *(_OWORD *)(a1 + 22776) = 0u;
    *(_OWORD *)(a1 + 22792) = 0u;
    *(_OWORD *)(a1 + 22744) = 0u;
    *(_OWORD *)(a1 + 22760) = 0u;
    *(_OWORD *)(a1 + 22712) = 0u;
    *(_OWORD *)(a1 + 22728) = 0u;
    *(_OWORD *)(a1 + 22680) = 0u;
    *(_OWORD *)(a1 + 22696) = 0u;
    *(_OWORD *)(a1 + 22648) = 0u;
    *(_OWORD *)(a1 + 22664) = 0u;
    *(_OWORD *)(a1 + 22616) = 0u;
    *(_OWORD *)(a1 + 22632) = 0u;
    *(_OWORD *)(a1 + 22584) = 0u;
    *(_OWORD *)(a1 + 22600) = 0u;
    *(_OWORD *)(a1 + 22552) = 0u;
    *(_OWORD *)(a1 + 22568) = 0u;
    *(_OWORD *)(a1 + 22520) = 0u;
    *(_OWORD *)(a1 + 22536) = 0u;
    *(_OWORD *)(a1 + 22488) = 0u;
    *(_OWORD *)(a1 + 22504) = 0u;
    *(_OWORD *)(a1 + 22456) = 0u;
    *(_OWORD *)(a1 + 22472) = 0u;
    *(_OWORD *)(a1 + 22440) = 0u;
  }
  char v150 = a2;
  int v149 = v22;
  if (v26)
  {
    *((void *)a1 + 9) = 0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_WORD *)(v6 + 8) = 0;
  }
  if (v27)
  {
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *((_DWORD *)a1 + 8) = 0;
    *((void *)a1 + 3) = 0;
    *(unsigned char *)(v6 + 148) = 0;
    *(_WORD *)(v6 + 297) = 0;
    *(_DWORD *)(v6 + 1) = 0;
    *(_WORD *)(v6 + 5) = 0;
    int v74 = v27;
    int v75 = v33;
    int v76 = v30;
    int v77 = v23;
    int v78 = v21;
    int v79 = v19;
    int v80 = v31;
    mach_continuous_time();
    int v31 = v80;
    int v19 = v79;
    int v21 = v78;
    int v23 = v77;
    int v30 = v76;
    int v33 = v75;
    int v27 = v74;
    *(_DWORD *)uint64_t v147 = 0;
    *(_WORD *)(v147 + 4) = 0;
    *(unsigned char *)(v147 + 64) = 0;
    *(_DWORD *)(v147 + 60) = 0;
  }
  if (v19)
  {
    *((_OWORD *)a1 + 1428) = 0u;
    *((_DWORD *)a1 + 5716) = 0;
  }
  if (g_GncPStateInfo != 8)
  {
    uint64_t v81 = a1;
    int v82 = v27;
    int v83 = v31;
    GncP07_08WriteNVStore(0x59A0uLL, v81);
    int v31 = v83;
    int v27 = v82;
  }
  int v84 = v148;
  if (v21 | v30 | v149 | v23 | v27 | v73 | v34 | v33) {
    int v84 = 0;
  }
  if ((v31 & v84 & 1) == 0)
  {
    switch((int)g_GN_GPS_Data_p_list)
    {
      case 1:
      case 2:
      case 3:
        break;
      case 4:
      case 7:
        int v85 = 1;
        goto LABEL_93;
      case 5:
      case 8:
      case 10:
      case 11:
        int v85 = 2;
        goto LABEL_93;
      case 6:
      case 9:
        int v85 = 3;
LABEL_93:
        LODWORD(g_GN_GPS_Data_p_list) = v85;
        break;
      default:
        EvCrt_Illegal_Default("GN_GPS_Clear_NV_Data", 0xCE4u);
        break;
    }
  }
  char v86 = 73;
  uint64_t v87 = (char *)v151[0];
  uint64_t v88 = 1u;
  do
  {
    v151[0] = v87 + 1;
    *uint64_t v87 = v86;
    uint64_t v87 = (char *)v151[0];
    if (v151[0] >= (unint64_t)v153)
    {
      uint64_t v87 = p_src;
      v151[0] = p_src;
    }
    char v86 = aItems[v88++];
  }
  while (v88 != 10);
  char v89 = *v150;
  if (*v150)
  {
    __int16 v90 = (unsigned __int8 *)(v150 + 1);
    do
    {
      v151[0] = v87 + 1;
      *uint64_t v87 = v89;
      uint64_t v87 = (char *)v151[0];
      if (v151[0] >= (unint64_t)v153)
      {
        uint64_t v87 = p_src;
        v151[0] = p_src;
      }
      int v91 = *v90++;
      char v89 = v91;
    }
    while (v91);
  }
  uint64_t v92 = 0;
  char v93 = 34;
  do
  {
    v151[0] = v87 + 1;
    *uint64_t v87 = v93;
    uint64_t v87 = (char *)v151[0];
    if (v151[0] >= (unint64_t)v153)
    {
      uint64_t v87 = p_src;
      v151[0] = p_src;
    }
    char v93 = asc_22BAFBB70[++v92];
  }
  while (v92 != 2);
  uint64_t v94 = 0;
  char v95 = 42;
  do
  {
    v151[0] = v87 + 1;
    *uint64_t v87 = v95;
    uint64_t v87 = (char *)v151[0];
    if (v151[0] >= (unint64_t)v153)
    {
      uint64_t v87 = p_src;
      v151[0] = p_src;
    }
    char v95 = asc_22BAFBB06[++v94];
  }
  while (v94 != 8);
  v151[0] = v87 + 1;
  *uint64_t v87 = 10;
  int v96 = v151[0];
  if (v151[0] >= (unint64_t)v153)
  {
    v151[0] = p_src;
    int v96 = (int)p_src;
  }
  BOOL v97 = (void *)*((void *)&xmmword_26AE66D58 + 1);
  int v98 = v96 - p_src;
  unint64_t v99 = *(void *)(*((void *)&xmmword_26AE66D58 + 1) + 24);
  char v100 = (void *)**((void **)&xmmword_26AE66D58 + 1);
  int v101 = &__src;
  do
  {
    int v102 = v99 - v100;
    if (v98 >= v102) {
      int v103 = v102;
    }
    else {
      int v103 = v98;
    }
    memcpy(v100, v101, v103);
    char v100 = (void *)(*v97 + v103);
    *BOOL v97 = v100;
    unint64_t v99 = v97[3];
    if ((unint64_t)v100 >= v99)
    {
      char v100 = (void *)v97[2];
      *BOOL v97 = v100;
    }
    v101 += v103;
    BOOL v104 = __OFSUB__(v98, v103);
    v98 -= v103;
  }
  while (!((v98 < 0) ^ v104 | (v98 == 0)));
  char v105 = (void *)xmmword_26AE66D58;
  int v106 = LODWORD(v151[0]) - p_src;
  unint64_t v107 = *(void *)(xmmword_26AE66D58 + 24);
  long long v108 = *(void **)xmmword_26AE66D58;
  uint64_t v109 = &__src;
  do
  {
    int v110 = v107 - v108;
    if (v106 >= v110) {
      int v111 = v110;
    }
    else {
      int v111 = v106;
    }
    memcpy(v108, v109, v111);
    long long v108 = (void *)(*v105 + v111);
    *char v105 = v108;
    unint64_t v107 = v105[3];
    if ((unint64_t)v108 >= v107)
    {
      long long v108 = (void *)v105[2];
      *char v105 = v108;
    }
    v109 += v111;
    BOOL v104 = __OFSUB__(v106, v111);
    v106 -= v111;
  }
  while (!((v106 < 0) ^ v104 | (v106 == 0)));
  uint64_t v112 = (void *)xmmword_26AE66D68;
  int v113 = LODWORD(v151[0]) - p_src;
  unint64_t v114 = *(void *)(xmmword_26AE66D68 + 24);
  unsigned __int16 v115 = *(void **)xmmword_26AE66D68;
  uint64_t v116 = &__src;
  do
  {
    int v117 = v114 - v115;
    if (v113 >= v117) {
      int v118 = v117;
    }
    else {
      int v118 = v113;
    }
    memcpy(v115, v116, v118);
    unsigned __int16 v115 = (void *)(*v112 + v118);
    *uint64_t v112 = v115;
    unint64_t v114 = v112[3];
    if ((unint64_t)v115 >= v114)
    {
      unsigned __int16 v115 = (void *)v112[2];
      *uint64_t v112 = v115;
    }
    v116 += v118;
    BOOL v104 = __OFSUB__(v113, v118);
    v113 -= v118;
  }
  while (!((v113 < 0) ^ v104 | (v113 == 0)));
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
  GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
  return 1;
}

BOOL Horz_Meas_Update(unsigned int a1, double *a2, double *a3, unsigned int a4, double *a5, BOOL a6, _WORD *a7)
{
  v43[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a5 + 1) < 1) {
    return 0;
  }
  *((unsigned char *)a5 + 16) = 0;
  if (!*(unsigned char *)a5) {
    return 0;
  }
  double v39 = 0.0;
  double v11 = a5[8];
  v43[0] = 0.0;
  double sinval = 0.0;
  double cosval = 1.0;
  if (!R8_EQ(a5 + 8, v43))
  {
    __double2 v14 = __sincos_stret(v11);
    double cosval = v14.__cosval;
    v43[0] = 1.57079633;
    if (R8_EQ(a5 + 8, v43))
    {
      double cosval = 0.0;
      double sinval = 1.0;
    }
    else
    {
      double sinval = v14.__sinval;
    }
  }
  double v15 = *a2;
  __double2 v16 = __sincos_stret(*a2);
  uint64_t v17 = 0;
  double v18 = 1.0 / sqrt(v16.__sinval * v16.__sinval * -0.00669437999 + 1.0);
  double v19 = a2[2];
  double v20 = v16.__cosval * (v19 + v18 * 6378137.0);
  if (v20 < 1.0) {
    double v20 = 1.0;
  }
  double v21 = a5[4];
  a5[11] = (v15 - a5[3]) * (v19 + v18 * (v18 * v18) * 6335439.33);
  a5[12] = (a2[1] - v21) * v20;
  uint64_t v36 = a1;
  uint64_t v22 = a1 + 1;
  uint64_t v23 = a1 + 2;
  char v24 = 1;
  do
  {
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
    double v25 = a3[2];
    double v26 = a3[1];
    *((double *)v40 + v36) = sinval * a3[3] + cosval * *a3;
    double v27 = a3[5];
    *((double *)v40 + v22) = sinval * a3[4] + cosval * v26;
    char v28 = v24;
    *((double *)v40 + v23) = sinval * v27 + cosval * v25;
    *((double *)v40 + a4) = sinval * a5[12] + cosval * a5[11];
    uint64_t v29 = &a5[v17];
    double v31 = v29[6];
    int v30 = v29 + 6;
    umeas(a6, a4, v31, (double *)v40, v43, v42, &v39, a5[13]);
    double v32 = v39;
    if (v39 <= 0.0)
    {
      *(unsigned char *)a5 = 0;
      *((unsigned char *)a5 + 16) = 1;
      ++*a7;
    }
    else
    {
      double v32 = *v30 * (v39 * (v43[a4] * v43[a4]));
    }
    char v24 = 0;
    a5[v17 + 14] = v32;
    double v33 = -sinval;
    uint64_t v17 = 1;
    double sinval = cosval;
    double cosval = v33;
  }
  while ((v28 & 1) != 0);
  return *(unsigned char *)a5 != 0;
}

void NK_Final_Check(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, double a7, double a8)
{
  uint64_t v418 = *MEMORY[0x263EF8340];
  uint64_t v12 = a2 + 22920;
  *(_OWORD *)(a2 + 31296) = *(_OWORD *)(a2 + 800);
  *(void *)(a2 + 31312) = *(void *)(a2 + 816);
  *(_OWORD *)(a2 + 31320) = *(_OWORD *)(a2 + 912);
  *(void *)(a2 + 31336) = *(void *)(a2 + 928);
  unsigned int v13 = *(unsigned __int8 *)(a2 + 24777);
  unsigned int v14 = v13 - *(unsigned __int8 *)(a2 + 24778);
  BOOL v16 = v13 > 1 && v14 == 2;
  uint64_t v17 = v13 - v16;
  if (*(unsigned char *)(a2 + 22992)) {
    BOOL v393 = (*(_DWORD *)(a2 + 23000) - 3) < 2;
  }
  else {
    BOOL v393 = 0;
  }
  uint64_t v18 = a2 + 25592;
  if (*(int *)(a2 + 964) > 1)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 11032);
    unsigned int v19 = v17;
    if (v25 >= 0x3D)
    {
      if (v25 < 0x12D) {
        int v26 = 2;
      }
      else {
        int v26 = 1;
      }
      *(_DWORD *)(a2 + 964) = v26;
      unsigned int v19 = v17;
    }
  }
  else
  {
    unsigned int v19 = v17;
    if (v17 <= 3)
    {
      uint64_t v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = a2 + 3056;
      do
      {
        if (*(unsigned char *)(v22 + v20 - 96))
        {
          int v23 = *(_DWORD *)(v22 + 4 * v20);
          if ((v23 - 1) >= 0x1D)
          {
            if (v23)
            {
              uint64_t v24 = v17;
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              uint64_t v17 = v24;
            }
            else
            {
              ++v21;
            }
          }
        }
        ++v20;
      }
      while (v20 != 48);
      BOOL v28 = v21 > 1 && v14 == 2;
      unsigned int v19 = v21 - v28;
    }
    if (v19 >= 4 && *(unsigned char *)(a1 + 232)) {
      goto LABEL_37;
    }
    if (*(unsigned char *)(v12 + 72) && *(_DWORD *)(v12 + 76) == 1)
    {
      char v29 = !v393;
      if (*(double *)(a2 + 23040) > 900000000.0) {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
LABEL_37:
        *(_DWORD *)(a2 + 964) = 2;
        *(unsigned char *)(a1 + 235) = 0;
      }
    }
  }
  unsigned int v376 = v17;
  if (!*(unsigned char *)(a1 + 128))
  {
    uint64_t v30 = 0;
    while (*(double *)(a2 + 24136 + v30) <= 1.0e18)
    {
      v30 += 8;
      if (v30 == 88) {
        goto LABEL_46;
      }
    }
    *(unsigned char *)(a1 + 128) = 1;
    *(_DWORD *)(a1 + 132) = 80;
  }
LABEL_46:
  double v31 = *(double *)&ClkBiasOrigVar[*(unsigned int *)(a2 + 640)];
  *(double *)(a2 + 25600) = v31;
  *(_DWORD *)uint64_t v18 = 0;
  *(void *)(a2 + 25608) = 0;
  *(_WORD *)(v18 + 4) = 255;
  *(void *)&long long v412 = 0;
  v390 = (double *)(a2 + 736);
  if (R8_EQ((const double *)(a2 + 736), (const double *)&v412) || (double v32 = *(double *)(a2 + 24136), v32 >= v31))
  {
    int v33 = 0;
    double v34 = 0.0;
  }
  else
  {
    int v33 = 1;
    *(_DWORD *)uint64_t v18 = 1;
    double v34 = *(double *)(a2 + 736);
    *(double *)(a2 + 25608) = v34;
    *(unsigned char *)(v18 + 4) = 0;
    *(double *)(a2 + 25600) = v32;
    double v31 = v32;
  }
  *(void *)&long long v412 = 0;
  unsigned int v383 = v19;
  if (!R8_EQ((const double *)(a2 + 744), (const double *)&v412))
  {
    double v35 = *(double *)(a2 + 24144);
    if (v35 < v31)
    {
      int v33 = 2;
      *(_DWORD *)uint64_t v18 = 2;
      double v34 = *(double *)(a2 + 744);
      *(double *)(a2 + 25608) = v34;
      *(unsigned char *)(v18 + 4) = 1;
      *(double *)(a2 + 25600) = v35;
      double v31 = v35;
    }
  }
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 752), (const double *)&v412))
  {
    double v37 = *(double *)(a2 + 24152);
    if (v37 < v31)
    {
      *(_DWORD *)uint64_t v18 = 4;
      double v34 = *(double *)(a2 + 752);
      *(double *)(a2 + 25608) = v34;
      *(unsigned char *)(v18 + 4) = 2;
      *(double *)(a2 + 25600) = v37;
      *(void *)&long long v412 = 0;
      if (R8_EQ((const double *)(a2 + 25608), (const double *)&v412)) {
        goto LABEL_103;
      }
      char v38 = 0;
      int v33 = 4;
LABEL_62:
      *(void *)&long long v412 = 0;
      double v39 = 0.0;
      if (!R8_EQ(v390, (const double *)&v412)) {
        double v39 = vabdd_f64(v34, *v390);
      }
      if (v38)
      {
        double v40 = 0.0;
        int v33 = 2;
LABEL_74:
        *(void *)&long long v412 = 0;
        double v41 = 0.0;
        if (!R8_EQ((const double *)(a2 + 752), (const double *)&v412)) {
          double v41 = vabdd_f64(v34, *(double *)(a2 + 752));
        }
        if (v33 != 2)
        {
          *(void *)&long long v412 = 0;
          if (R8_EQ((const double *)(a2 + 744), (const double *)&v412)
            || (*(void *)&v410[0] = 0, R8_EQ((const double *)(a2 + 752), (const double *)v410)))
          {
            *(void *)&long long v412 = 0;
            if (!R8_EQ((const double *)(a2 + 744), (const double *)&v412)) {
              goto LABEL_80;
            }
LABEL_84:
            *(void *)&long long v412 = 0;
            if (R8_EQ((const double *)(a2 + 752), (const double *)&v412)) {
              goto LABEL_103;
            }
            uint64_t v42 = 4;
            goto LABEL_102;
          }
          if (v40 <= v41) {
            uint64_t v45 = 2;
          }
          else {
            uint64_t v45 = 4;
          }
          if (v40 <= v41) {
            uint64_t v46 = 4;
          }
          else {
            uint64_t v46 = 2;
          }
LABEL_101:
          NK_Final_Check_ClkBias(v45, a1, a2);
          uint64_t v42 = v46;
          goto LABEL_102;
        }
        *(void *)&long long v412 = 0;
        if (R8_EQ(v390, (const double *)&v412)
          || (*(void *)&v410[0] = 0, R8_EQ((const double *)(a2 + 752), (const double *)v410)))
        {
          *(void *)&long long v412 = 0;
          if (R8_EQ(v390, (const double *)&v412)) {
            goto LABEL_84;
          }
LABEL_86:
          uint64_t v42 = 1;
          goto LABEL_102;
        }
        BOOL v43 = v39 > v41;
        unsigned int v44 = 4;
LABEL_95:
        if (v43) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 1;
        }
        if (v43) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = v44;
        }
        goto LABEL_101;
      }
      goto LABEL_66;
    }
  }
  if (!v33) {
    goto LABEL_103;
  }
  *(void *)&long long v412 = 0;
  if (R8_EQ((const double *)(a2 + 25608), (const double *)&v412)) {
    goto LABEL_103;
  }
  if (v33 != 1)
  {
    int v33 = 2;
    char v38 = 1;
    goto LABEL_62;
  }
  double v39 = 0.0;
LABEL_66:
  *(void *)&long long v412 = 0;
  double v40 = 0.0;
  if (!R8_EQ((const double *)(a2 + 744), (const double *)&v412)) {
    double v40 = vabdd_f64(v34, *(double *)(a2 + 744));
  }
  if (v33 != 4) {
    goto LABEL_74;
  }
  *(void *)&long long v412 = 0;
  if (!R8_EQ(v390, (const double *)&v412))
  {
    *(void *)&v410[0] = 0;
    if (!R8_EQ((const double *)(a2 + 744), (const double *)v410))
    {
      BOOL v43 = v39 > v40;
      unsigned int v44 = 2;
      goto LABEL_95;
    }
  }
  *(void *)&long long v412 = 0;
  if (!R8_EQ(v390, (const double *)&v412)) {
    goto LABEL_86;
  }
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 744), (const double *)&v412))
  {
LABEL_80:
    uint64_t v42 = 2;
LABEL_102:
    NK_Final_Check_ClkBias(v42, a1, a2);
  }
LABEL_103:
  double v47 = *(double *)(a2 + 760);
  v377 = (double *)(a2 + 744);
  if (fabs(v47) <= 0.000006)
  {
    if (*(unsigned char *)v12)
    {
      double v50 = (*(double *)(a2 + 22944) + v47 * -299792458.0) * (*(double *)(a2 + 22944) + v47 * -299792458.0);
      double v51 = *(double *)(a2 + 22960);
      if (v50 / v51 > 25.0)
      {
        if (*(unsigned __int8 *)(v12 + 2229) < 4u
          || *(unsigned __int8 *)(a2 + 977) < 0x1Au
          || !*(unsigned char *)(v12 + 2249)
          || *(double *)(a2 + 24160) >= v51
          || *(int *)(a2 + 964) < 2)
        {
          *(double *)(a2 + 760) = a7;
          int v48 = 1;
          *(unsigned char *)(a1 + 128) = 1;
          int v49 = 71;
          goto LABEL_115;
        }
        *(unsigned char *)uint64_t v12 = 0;
        *(unsigned char *)(p_NA + 8) = 0;
        EvCrt_v("NK_Final_Check: Ext ClkD is ignored in favor of PE estimated ClkD.");
      }
    }
    int v48 = 0;
    goto LABEL_116;
  }
  *(double *)(a2 + 760) = a7;
  int v48 = 1;
  *(unsigned char *)(a1 + 128) = 1;
  int v49 = 81;
LABEL_115:
  *(_DWORD *)(a1 + 132) = v49;
LABEL_116:
  int64x2_t v397 = vdupq_n_s64(0x426D1A94A2000000uLL);
  char v52 = !v393;
  double v53 = 0.0;
  if (!*(unsigned char *)(v12 + 72)) {
    char v52 = 1;
  }
  uint64_t v54 = "tState";
  double v55 = 0.0;
  double v56 = 0.0;
  if ((v52 & 1) == 0)
  {
    double v57 = *(double *)(a2 + 23064);
    double v55 = 0.0;
    if (v57 < 100000000.0)
    {
      long double v58 = cos(*(long double *)(a2 + 23056));
      double v59 = *(double *)(a2 + 23072);
      long double v60 = v58 * v58 * (v57 - v59);
      long double v61 = v59 + v60;
      double v62 = v61 + 1000000.0;
      double v63 = v57 - v60;
      double v64 = v57 - v60 + 1000000.0;
      BOOL v65 = v61 < 1.0;
      double v66 = 1000001.0;
      if (v65) {
        double v67 = 1000001.0;
      }
      else {
        double v67 = v62;
      }
      if (v63 >= 1.0) {
        double v66 = v64;
      }
      *(double *)v397.i64 = v67;
      *(double *)&v397.i64[1] = v66;
      double v68 = *(double *)(a2 + 800) - *(double *)(a2 + 23016);
      if (v68 >= 1.57079633)
      {
        double v69 = 3.14159265;
      }
      else
      {
        if (v68 >= -1.57079633) {
          goto LABEL_130;
        }
        double v69 = -3.14159265;
      }
      double v68 = v69 - v68;
LABEL_130:
      double v70 = v68 * 6378137.0 * (v68 * 6378137.0);
      double v71 = *(double *)(a2 + 808) - *(double *)(a2 + 23024);
      if (v71 >= 3.14159265)
      {
        double v72 = -6.28318531;
      }
      else
      {
        if (v71 >= -3.14159265)
        {
LABEL_135:
          double v55 = v70 / v67;
          double v56 = v71 * 6378137.0 * *(double *)(a2 + 904) * (v71 * 6378137.0 * *(double *)(a2 + 904)) / v66;
          goto LABEL_136;
        }
        double v72 = 6.28318531;
      }
      double v71 = v71 + v72;
      goto LABEL_135;
    }
  }
LABEL_136:
  if (*(unsigned char *)(v12 + 200))
  {
    double v73 = *(double *)(a2 + 23160);
    char v74 = !v393;
    if (v73 >= 250000.0) {
      char v74 = 1;
    }
    if ((v74 & 1) == 0)
    {
      double v75 = *(double *)(a2 + 816) - *(double *)(a2 + 23144);
      double v53 = v75 * v75 / (v73 + 100.0);
    }
  }
  int v76 = (int)*(double *)(a2 + 816) - (int)*(double *)(a2 + 824);
  unsigned int v375 = v76 - 60001;
  BOOL v77 = v55 <= 49.0 && (v76 - 60001) >= 0xFFFF0DCF;
  int v78 = !v77;
  if (v56 > 49.0) {
    int v78 = 1;
  }
  if (v53 > 64.0) {
    int v78 = 1;
  }
  int v392 = v78;
  if (v78)
  {
    EvLog_v("NKFC: KF Reset 83:  Position problem !  SVNum %d  LLH %f %f %d m   PosTest %f %f %f", *(unsigned __int8 *)(v12 + 1857), *(double *)(a2 + 800) * 57.2957795, *(double *)(a2 + 808) * 57.2957795, v76, v55, v56, v53);
    if (*(unsigned char *)(a2 + 960))
    {
      char v79 = !v393;
      if (!*(unsigned char *)(v12 + 72)) {
        char v79 = 1;
      }
      if ((v79 & 1) == 0)
      {
        double v80 = *(double *)(a2 + 23064);
        if (v80 < 100000000.0)
        {
          *(_OWORD *)(a2 + 800) = *(_OWORD *)(v12 + 96);
          *(double *)(a2 + 24176) = v80;
          *(double *)(a2 + 24184) = v80;
          *(double *)(a2 + 24264) = v80;
          *(double *)(a2 + 24272) = v80;
          double v81 = sqrt(v80);
          *(double *)(a2 + 24352) = v81;
          *(double *)(a2 + 24360) = v81;
        }
      }
    }
    if (*(unsigned char *)(v12 + 200))
    {
      double v82 = *(double *)(a2 + 23144);
      int v76 = (int)v82 - (int)*(double *)(a2 + 824);
      double v83 = *(double *)(a2 + 23160);
      double v84 = sqrt(v83);
    }
    else
    {
      int v76 = 0;
      double v82 = *(double *)(a2 + 824);
      double v84 = 1000.0;
      double v83 = 1000000.0;
    }
    *(double *)(a2 + 816) = v82;
    *(double *)(a2 + 24192) = v83;
    *(double *)(a2 + 24280) = v83;
    *(double *)(a2 + 24368) = v84;
    int v85 = 1;
    *(unsigned char *)(a1 + 128) = 1;
    *(_DWORD *)(a1 + 132) = 83;
  }
  else
  {
    int v85 = *(unsigned __int8 *)(a1 + 128);
  }
  double v86 = *(double *)(a2 + 944);
  long long v398 = 0u;
  long long v399 = 0u;
  memset(v400, 0, sizeof(v400));
  long long v401 = 0u;
  double v402 = 0.0;
  double v87 = a8 * 99930819.3 * (a8 * 99930819.3);
  uint64_t v88 = "tState";
  v381 = (double *)(a2 + 752);
  int v391 = v48;
  if (!*(unsigned char *)v12)
  {
    char v89 = (double *)(a2 + 24160);
LABEL_169:
    if (v85)
    {
      int v384 = 0;
      int v378 = 0;
      *char v89 = v87;
      goto LABEL_178;
    }
    goto LABEL_177;
  }
  char v89 = (double *)(a2 + 24160);
  if (*(_DWORD *)(v12 + 4) != 1) {
    goto LABEL_169;
  }
  double v90 = *(double *)(a2 + 22960);
  double v91 = v90 + 225.0;
  double v92 = *(double *)(a2 + 22944);
  double v93 = (v92 - *(double *)(a2 + 760) * 299792458.0) * (v92 - *(double *)(a2 + 760) * 299792458.0);
  double v94 = v93 / (v90 + 225.0);
  double v95 = v90 + v93 * 0.1;
  if (v85)
  {
    if (v94 > 11.0)
    {
      *(double *)(a2 + 24160) = v91;
      EvCrt_v("NK_Final_Check: Clock drift check failed", v95);
      uint64_t v88 = "setAssistanceMountState" + 17;
      int v384 = 0;
      *(double *)(a2 + 760) = v92 / 299792458.0;
LABEL_173:
      int v378 = 1;
      goto LABEL_178;
    }
    if (v94 > 1.0)
    {
LABEL_175:
      int v384 = 0;
      int v378 = 0;
      *char v89 = v95;
      goto LABEL_178;
    }
  }
  else
  {
    if (v94 > 16.0)
    {
      *(double *)(a2 + 24160) = v91;
      *((double *)&v399 + 1) = v90 + 225.0;
      EvCrt_v("NK_Final_Check: Clock drift check failed", v95);
      uint64_t v88 = "setAssistanceMountState" + 17;
      *(double *)(a2 + 760) = v92 / 299792458.0;
      *(unsigned char *)(a1 + 168) = 4;
      int v384 = 1;
      goto LABEL_173;
    }
    if (*v89 > v95) {
      goto LABEL_175;
    }
  }
LABEL_177:
  int v384 = 0;
  int v378 = 0;
LABEL_178:
  int v96 = *(unsigned __int8 *)(a1 + 128);
  if (!*(unsigned char *)v12)
  {
    if (*(unsigned char *)(a1 + 128)) {
      goto LABEL_201;
    }
    if (*v89 > v87 + v87)
    {
      if (*(int *)(a2 + 964) <= 1)
      {
        int v96 = 1;
        *(unsigned char *)(a1 + 128) = 1;
        int v98 = 72;
LABEL_194:
        *(_DWORD *)(a1 + 132) = v98;
        int v97 = 1;
        goto LABEL_202;
      }
      *(double *)(a2 + 760) = a7;
      *(double *)(a2 + 24160) = v87;
      *((double *)&v399 + 1) = v87;
      *(unsigned char *)(a1 + 168) = 5;
      int v384 = 1;
    }
LABEL_186:
    uint64_t v99 = *(int *)(a1 + 20);
    if (v99 > 8) {
      double v100 = 1000000000.0;
    }
    else {
      double v100 = dbl_22BB44A80[v99];
    }
    if (*(double *)(a2 + 24200) <= v100 && *(double *)(a2 + 24208) <= v100 && *(double *)(a2 + 24216) <= v100)
    {
      int v96 = 0;
    }
    else
    {
      if (*(int *)(a2 + 964) < 2)
      {
        int v96 = 1;
        *(unsigned char *)(a1 + 128) = 1;
        int v98 = 73;
        goto LABEL_194;
      }
      for (uint64_t i = 0; i != 24; i += 8)
      {
        int v102 = (void *)(a2 + i);
        v102[86] = 0;
        v102[114] = 0;
        v102[89] = 0;
        uint64_t v103 = 0x4197D78400000000;
        if (v99 <= 8) {
          uint64_t v103 = *(void *)&dbl_22BB44AC8[v99];
        }
        *(void *)((char *)&v401 + i) = v103;
        v102[3025] = v103;
      }
      int v96 = 0;
      *(void *)(a2 + 944) = 0;
      *(void *)(a2 + 936) = 0;
      *(void *)(a2 + 952) = 0;
      *(unsigned char *)(a1 + 168) = 6;
      int v384 = 1;
    }
LABEL_201:
    int v97 = v392;
    goto LABEL_202;
  }
  int v97 = v392;
  if (!*(unsigned char *)(a1 + 128)) {
    goto LABEL_186;
  }
LABEL_202:
  if (v76 <= -501)
  {
    double v104 = (double)(v76 * v76) / *(double *)(a2 + 24192) / 9.0;
    if (v104 > 1.2)
    {
      uint64_t v105 = 0;
      double v106 = v104 + -1.0;
      uint64_t v107 = a2 + 24176;
      do
      {
        double v108 = *(double *)(v107 + v105);
        *(double *)((char *)v410 + v105) = v106 * v108;
        *(double *)(v107 + v105) = v108 + v106 * v108;
        v105 += 8;
      }
      while (v105 != 24);
      if (v76 > -1001)
      {
        uint64_t v109 = 0;
        *(double *)(a2 + 24400) = *(double *)(a1 + 7280) + (*(double *)(a2 + 24400) - *(double *)(a1 + 7280)) * v104;
        do
        {
          uint64_t v110 = a2 + v109;
          double v111 = *(double *)(a2 + v109 + 24176) + *(double *)(a1 + 7256 + v109);
          *(double *)(v110 + 24264) = v111;
          *(double *)(v110 + 24352) = sqrt(v111);
          v109 += 8;
        }
        while (v109 != 24);
        if (!v96)
        {
          uint64_t v417 = 0;
          long long v416 = 0u;
          long long v415 = 0u;
          long long v414 = 0u;
          long long v413 = 0u;
          long long v412 = 0u;
          double v112 = *(double *)v410;
          if (*(double *)v410 <= *((double *)v410 + 1)) {
            double v112 = *((double *)v410 + 1);
          }
          if (v112 <= *(double *)&v410[1]) {
            double v113 = *(double *)&v410[1];
          }
          else {
            double v113 = v112;
          }
          for (uint64_t j = 5; j != 8; ++j)
          {
            *((void *)&v412 + j) = 0x3FF0000000000000;
            if (v113 > 0.0)
            {
              rnk1_core((double *)(a1 + 872), j, v113, (double *)&v412, (int *)v411);
              uint64_t v88 = "setAssistanceMountState" + 17;
            }
            *((void *)&v412 + j) = 0;
          }
          int v96 = *(unsigned __int8 *)(a1 + 128);
          uint64_t v54 = "setAssistanceMountState" + 17;
        }
      }
      else
      {
        *(void *)(a2 + 816) = *(void *)(a2 + 824);
        if (*(int *)(a2 + 964) > 1)
        {
          if (v96)
          {
            LOBYTE(v392) = 1;
          }
          else
          {
            *(_OWORD *)((char *)v400 + 8) = *(_OWORD *)(a2 + 24176);
            *((void *)&v400[1] + 1) = *(void *)(a2 + 24192);
            *(unsigned char *)(a1 + 168) = 7;
            LOBYTE(v392) = 1;
            int v384 = 1;
          }
        }
        else
        {
          int v96 = 1;
          *(unsigned char *)(a1 + 128) = 1;
          *(_DWORD *)(a1 + 132) = 74;
          LOBYTE(v392) = 1;
          int v97 = 1;
        }
      }
    }
  }
  v374 = (double *)(a2 + 624);
  uint64_t v388 = a2 + 800;
  uint64_t v115 = qword_22BB44A60[*(unsigned char *)(a2 + 960) == 0];
  int v382 = v97;
  if (*(unsigned char *)(v12 + 200))
  {
    BOOL v116 = v393;
    if (*(_DWORD *)(v12 + 204) != 1) {
      BOOL v116 = 0;
    }
    int v117 = (double *)(a2 + 24192);
    if (v116)
    {
      double v118 = *(double *)(a2 + 23160);
      double v119 = v118 * 2.25 + 5625.0;
      double v120 = *(double *)(a2 + 23144);
      double v121 = (v120 - *(double *)(a2 + 816)) * (v120 - *(double *)(a2 + 816));
      double v122 = v121 / v119;
      double v123 = v118 + v121 * *((double *)v88 + 354);
      if (v96)
      {
        if (v122 > 11.0)
        {
          *(double *)(a2 + 816) = v120;
          char v124 = (double *)(a2 + 24192);
LABEL_237:
          *char v124 = v119;
          EvCrt_v("NK_Final_Check: Vertical position check failed");
          *int v117 = *v117 / 2.25;
          if (v96)
          {
            int v125 = 0;
          }
          else
          {
            *((double *)&v400[1] + 1) = *((double *)&v400[1] + 1) / 2.25;
            int v125 = 1;
          }
          LOBYTE(v392) = 1;
          uint64_t v126 = "setAssistanceMountState" + 17;
          uint64_t v88 = "setAssistanceMountState" + 17;
          goto LABEL_244;
        }
        if (v122 > 1.0)
        {
LABEL_240:
          int v125 = 0;
          *int v117 = v123;
          goto LABEL_243;
        }
      }
      else
      {
        if (v122 > 16.0)
        {
          char v124 = (double *)&v400[1] + 1;
          *(double *)(a2 + 816) = v120;
          *(double *)(a2 + 24192) = v119;
          goto LABEL_237;
        }
        if (*v117 > v123) {
          goto LABEL_240;
        }
      }
LABEL_242:
      int v125 = 0;
      goto LABEL_243;
    }
  }
  else
  {
    int v117 = (double *)(a2 + 24192);
  }
  if (!v96) {
    goto LABEL_242;
  }
  int v125 = 0;
  *(void *)int v117 = v115;
LABEL_243:
  uint64_t v126 = "tState";
LABEL_244:
  uint64_t v127 = 0;
  double v128 = *((double *)v126 + 471);
  char v129 = 1;
  double v130 = *((double *)v54 + 348);
  double v131 = *((double *)v88 + 354);
  do
  {
    char v132 = v129;
    if (v129)
    {
      BOOL v133 = *(unsigned char *)(a1 + 128) == 0;
      if (!*(unsigned char *)(v12 + 72))
      {
        if (*(unsigned char *)(a1 + 128)) {
          goto LABEL_267;
        }
        goto LABEL_276;
      }
      double v134 = v128;
    }
    else
    {
      if (!*(unsigned char *)(v12 + 72))
      {
        if (!*(unsigned char *)(a1 + 128)) {
          break;
        }
LABEL_267:
        int v138 = (double *)(a2 + 8 * v127 + 24176);
LABEL_268:
        *(void *)int v138 = v115;
        goto LABEL_276;
      }
      double v134 = cos(*(long double *)(a2 + 23016)) * v128;
      BOOL v133 = *(unsigned char *)(a1 + 128) == 0;
    }
    uint64_t v135 = 8 * v127;
    BOOL v136 = *(_DWORD *)(v12 + 76) == 1 && v393;
    uint64_t v137 = v135 + 40;
    int v138 = (double *)(a2 + 24136 + v135 + 40);
    if (v136)
    {
      uint64_t v139 = a2 + 8 * v127;
      double v140 = *(double *)(v139 + 23016);
      int v141 = (double *)(v139 + 800);
      double v142 = v140 - *v141;
      if (v134 > 0.0)
      {
        double v143 = -6.28318531;
        if (v142 >= v130 || (double v143 = 6.28318531, v142 < -3.14159265)) {
          double v142 = v142 + v143;
        }
        double v142 = v134 * v142;
      }
      double v144 = *(double *)&v397.i64[v127];
      double v145 = v142 * v142;
      double v146 = v144 + v142 * v142 * v131;
      double v147 = v145 / v144;
      if (v133)
      {
        if (v147 > 16.0)
        {
          *int v138 = v144;
          int v138 = (double *)((char *)&v398 + v137);
          *int v141 = v140;
          int v125 = 1;
LABEL_271:
          *int v138 = v144;
          EvCrt_d("NK_Final_Check: Horizontal position check failed", v127);
          LOBYTE(v392) = 1;
          goto LABEL_276;
        }
        if (*v138 > v146) {
          goto LABEL_275;
        }
      }
      else
      {
        if (v147 > 11.0)
        {
          *int v141 = v140;
          goto LABEL_271;
        }
        if (v147 > 1.0) {
LABEL_275:
        }
          *int v138 = v146;
      }
    }
    else if (!v133)
    {
      goto LABEL_268;
    }
LABEL_276:
    char v129 = 0;
    uint64_t v127 = 1;
  }
  while ((v132 & 1) != 0);
  if (!v125)
  {
    int v149 = v391;
    double v150 = v86;
    char v151 = v392;
    if (v384)
    {
      int v148 = v382;
      goto LABEL_281;
    }
    int v152 = 0;
    int v148 = v382;
    if (v392) {
      goto LABEL_295;
    }
LABEL_285:
    if (*(unsigned char *)(a1 + 128)) {
      goto LABEL_297;
    }
    if (v378) {
      goto LABEL_302;
    }
    goto LABEL_303;
  }
  *(unsigned char *)(a1 + 168) = 8;
  int v148 = 1;
  int v149 = v391;
  double v150 = v86;
  char v151 = v392;
LABEL_281:
  if (*((double *)v400 + 1) > 0.0 || *(double *)&v400[1] > 0.0 || *((double *)&v400[1] + 1) > 0.0)
  {
    uint64_t v153 = 0;
    double v154 = 0.0;
    do
    {
      if (*(double *)((char *)v400 + v153 + 8) > v154) {
        double v154 = *(double *)((char *)v400 + v153 + 8);
      }
      if (*(double *)(a2 + 24176 + v153) > v154) {
        double v154 = *(double *)(a2 + 24176 + v153);
      }
      v153 += 8;
    }
    while (v153 != 24);
    *((double *)v400 + 1) = v154;
    *(double *)&v400[1] = v154;
    int v152 = 1;
    *((double *)&v400[1] + 1) = v154;
    if (v151) {
      goto LABEL_295;
    }
    goto LABEL_285;
  }
  int v152 = 1;
  if ((v151 & 1) == 0) {
    goto LABEL_285;
  }
LABEL_295:
  Geo2ECEF(v388, (uint64_t)&WGS84_Datum, (double *)(a2 + 664));
  if (*(unsigned char *)(a1 + 128))
  {
    *(_OWORD *)(a2 + 688) = 0u;
    *(_OWORD *)(a2 + 704) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
LABEL_297:
    uint64_t v155 = *(int *)(a1 + 20);
    if (v155 > 8) {
      uint64_t v156 = 0x4197D78400000000;
    }
    else {
      uint64_t v156 = *(void *)&dbl_22BB44AC8[v155];
    }
    *(void *)(a2 + 24216) = v156;
    *(void *)(a2 + 24208) = v156;
    uint64_t v157 = -88;
    *(void *)(a2 + 24200) = v156;
    do
    {
      uint64_t v158 = a2 + v157;
      double v159 = *(double *)(a2 + v157 + 24224);
      *(double *)(v158 + 24312) = v159;
      *(double *)(v158 + 24400) = sqrt(v159);
      v157 += 8;
    }
    while (v157);
  }
LABEL_302:
  if (*(_WORD *)(a1 + 236))
  {
LABEL_303:
    if (v152)
    {
LABEL_306:
      uint64_t v160 = *(int *)(a1 + 20);
      if (v160 > 8) {
        double v161 = 100000000.0;
      }
      else {
        double v161 = dbl_22BB44AC8[v160];
      }
      *(void *)&long long v412 = 0;
      if (R8_EQ((const double *)v400 + 1, (const double *)&v412))
      {
        Comp_NEDvar_UDU(a1 + 872, 0xBu, 5, (double (*)[3])(a2 + 832), (double *)&v412);
        Comp_ErrorEllipse(*(double *)&v412, *((double *)&v412 + 1), v162, (double *)v410, (double *)v410 + 1, (double *)&v410[1]);
        double v163 = *(double *)v410 * *(double *)v410;
        if (*(double *)&v413 > *(double *)v410 * *(double *)v410) {
          double v163 = *(double *)&v413;
        }
        double v164 = v163 + v163;
      }
      else
      {
        double v164 = 4.0e10;
      }
      *(void *)&long long v412 = 0;
      if (R8_EQ((const double *)&v401, (const double *)&v412))
      {
        double v165 = *(double *)(a2 + 24200);
        if (*(double *)(a2 + 24208) > v165) {
          double v165 = *(double *)(a2 + 24208);
        }
        if (*(double *)(a2 + 24216) > v165) {
          double v165 = *(double *)(a2 + 24216);
        }
        double v161 = v165 * 1.2;
      }
      bzero((void *)(a1 + 872), 0x210uLL);
      for (unint64_t k = 0; k != 11; ++k)
      {
        double v167 = *((double *)&v398 + k);
        if (v167 <= 0.0)
        {
          if (k == 4)
          {
            double v168 = *(double *)(a2 + 24168);
            if (v168 >= 400.0) {
              double v169 = v168 * 1.2;
            }
            else {
              double v169 = v168 * 1.1;
            }
            *(double *)(a1 + 984) = v169;
            continue;
          }
          if ((k - 5) <= 2)
          {
            *(double *)(a1 + 8 * (((k + 2 + (k + 2) * k) >> 1) - 1) + 872) = v164;
            continue;
          }
          if (k >= 8)
          {
            *(double *)(a1 + 8 * (((k + 2 + (k + 2) * k) >> 1) - 1) + 872) = v161;
            continue;
          }
          double v167 = *(double *)(a2 + 24136 + 8 * k) * 1.2;
        }
        *(double *)(a1 + 8 * (((k + 2 + (k + 2) * k) >> 1) - 1) + 872) = v167;
      }
    }
  }
  else
  {
    *(_WORD *)(a1 + 236) = 1;
    if (v152) {
      goto LABEL_306;
    }
  }
  char v394 = v149 | v148;
  if ((v149 | v148) != 1) {
    goto LABEL_407;
  }
  unsigned __int8 v170 = *(unsigned char *)(a1 + 235);
  unsigned __int8 v171 = v170 + 1;
  *(unsigned char *)(a1 + 235) = v170 + 1;
  if (*(_DWORD *)(a1 + 11028) == 1) {
    *(_DWORD *)(a1 + 11028) = 0;
  }
  int v172 = *(_DWORD *)(a2 + 964);
  if ((v172 > 1 || !*(_DWORD *)(a1 + 11048))
    && ((v170 + 1) == 120 || (v170 + 1) >= 0xB4u))
  {
    if (*(int *)(a2 + 12) >= 10) {
      *(_DWORD *)(a2 + 12) = 9;
    }
    uint64_t v178 = 0;
    *(_OWORD *)(a1 + 6712) = 0u;
    *(_OWORD *)(a1 + 6728) = 0u;
    *(_OWORD *)(a1 + 6696) = 0u;
    *(_DWORD *)(a2 + 972) = 2;
    *(unsigned char *)(a4 + 412) = 1;
    *(void *)&long long v179 = 0x101010101010101;
    *((void *)&v179 + 1) = 0x101010101010101;
    *(_OWORD *)(a4 + 380) = v179;
    *(_OWORD *)(a4 + 396) = v179;
    *(_OWORD *)(a4 + 364) = v179;
    do
    {
      *(_DWORD *)(a4 + 416 + v178) = *(_DWORD *)a2;
      v178 += 4;
    }
    while (v178 != 192);
    EvCrt_v("ChanReset ALL : NKFC1 %d %d %d ", *(unsigned __int8 *)(a1 + 235), v148, v149);
    unsigned int v180 = ++*(unsigned char *)(a1 + 235);
    if (v180 >= 0xB4)
    {
      *(unsigned char *)(a2 + 960) = 0;
      *(_DWORD *)(a1 + 11048) = 0;
      *(unsigned char *)(a1 + 235) = 0;
      *(_WORD *)(a1 + 232) = 256;
      *(_DWORD *)(a2 + 964) = 0;
      *(unsigned char *)(a2 + 16) = 0;
      double *v390 = 0.0;
      *(void *)(a2 + 744) = 0;
      if (*(int *)(a2 + 12) >= 6) {
        *(_DWORD *)(a2 + 12) = 5;
      }
    }
    goto LABEL_407;
  }
  if (*(_DWORD *)(a4 + 4) || v375 >= 0xFFFF0DCF && !*(unsigned char *)(a1 + 233)) {
    goto LABEL_407;
  }
  if (*(int *)(a2 + 12) >= 10) {
    *(_DWORD *)(a2 + 12) = 9;
  }
  if (v172 < 2)
  {
    if ((v148 & 1) == 0)
    {
      if ((v170 + 1) <= 9u) {
        *(unsigned char *)(a1 + 235) = 10;
      }
      *(unsigned char *)(a2 + 960) = 0;
      *(unsigned char *)(a1 + 232) = 0;
    }
    goto LABEL_407;
  }
  if ((v170 + 1) > 5u)
  {
    BOOL v177 = 0;
LABEL_377:
    if (!*(unsigned char *)(a1 + 28) && !*(unsigned char *)(a2 + 960))
    {
      BOOL v379 = v177;
      unsigned int v385 = 100;
      goto LABEL_388;
    }
    uint64_t v181 = 0;
    *(_OWORD *)(a1 + 6712) = 0u;
    *(_OWORD *)(a1 + 6728) = 0u;
    *(_OWORD *)(a1 + 6696) = 0u;
    do
    {
      uint64_t v182 = a5 + 4 * v181;
      int v183 = *(_DWORD *)(v182 + 76);
      if (Is_Legal(v183) && *(int *)(v182 + 412) >= 4)
      {
        *(unsigned char *)(a4 + (int)GNSS_Id_To_Num_Prn_Idx(v183) + 8) = 1;
        *(unsigned char *)(a4 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)(v182 + 76)) + 186) = v181;
      }
      ++v181;
    }
    while (v181 != 48);
    uint64_t v184 = 0;
    *(unsigned char *)(a4 + 412) = 1;
    *(void *)&long long v185 = 0x101010101010101;
    *((void *)&v185 + 1) = 0x101010101010101;
    *(_OWORD *)(a4 + 380) = v185;
    *(_OWORD *)(a4 + 396) = v185;
    *(_OWORD *)(a4 + 364) = v185;
    do
    {
      *(_DWORD *)(a4 + 416 + v184) = *(_DWORD *)a2;
      v184 += 4;
    }
    while (v184 != 192);
    EvCrt_v("ChanReset ALL : NKFC2 %d %d %d ", *(unsigned __int8 *)(a1 + 235), v375 < 0xFFFF0DCF, *(unsigned __int8 *)(a1 + 28));
    *(_DWORD *)(a2 + 972) = 2;
    *(unsigned char *)(a1 + 235) = 0;
    *(_DWORD *)(a2 + 964) = 0;
    goto LABEL_407;
  }
  if ((v170 + 1) == 5) {
    unsigned __int8 v171 = 4;
  }
  if (!*(unsigned char *)(a2 + 960)) {
    unsigned __int8 v171 = v170;
  }
  unsigned int v173 = v171;
  unsigned int v174 = *(_DWORD *)(v12 + 2444) >> 4;
  BOOL v77 = v174 >= 0xC35;
  BOOL v175 = v174 < 0xC35;
  int v176 = (unsigned __int8 *)&BN_Tolerance + v171;
  if (v77) {
    v176 += 5;
  }
  BOOL v177 = v173 > 2 && v175;
  unsigned int v385 = *v176;
  if (v385 == 100) {
    goto LABEL_377;
  }
  BOOL v379 = v177;
LABEL_388:
  uint64_t v186 = 0;
  char v187 = 0;
  unsigned __int8 v188 = 0;
  unsigned __int8 v189 = 0;
  v190 = (unsigned __int8 *)(a5 + 76);
  do
  {
    if (*(unsigned char *)(a2 + 2960 + v186))
    {
      unsigned int v191 = *(unsigned __int8 *)(a5 + v186 + 604);
      if (v191 <= v188 || v188 == 0)
      {
        unsigned __int8 v189 = v186;
        unsigned __int8 v188 = *(unsigned char *)(a5 + v186 + 604);
      }
      if (v191 < v385)
      {
        int v193 = *(_DWORD *)v190;
        int v194 = Is_Legal(*(_DWORD *)v190);
        char v187 = 1;
        if (v194)
        {
          int v195 = GNSS_Id_To_Num_Prn_Idx(v193);
          *(unsigned char *)(a1 + 6696 + v186) = 0;
          uint64_t v196 = a4 + v195;
          *(unsigned char *)(v196 + 8) = 1;
          *(unsigned char *)(v196 + 186) = v186;
          *(unsigned char *)(a4 + v186 + 365) |= 1u;
          *(_DWORD *)(a4 + 416 + 4 * v186) = *(_DWORD *)a2;
          EvCrt_v("ChanReset %d : NKFC3 %d %d %d   %d < %d", v186, v190[2], *v190, v195, v191, v385);
          char v187 = 1;
        }
        int v149 = v391;
      }
    }
    ++v186;
    v190 += 4;
  }
  while (v186 != 48);
  if (v379 && (int v197 = v188, v188 >= v385))
  {
    uint64_t v198 = a5 + 4 * v189;
    int v201 = *(_DWORD *)(v198 + 76);
    v199 = (unsigned __int8 *)(v198 + 76);
    int v200 = v201;
    char v151 = v392;
    if (Is_Legal(v201))
    {
      int v202 = GNSS_Id_To_Num_Prn_Idx(v200);
      *(unsigned char *)(a1 + v189 + 6696) = 0;
      uint64_t v203 = a4 + v202;
      *(unsigned char *)(v203 + 8) = 1;
      *(unsigned char *)(v203 + 186) = v189;
      *(unsigned char *)(a4 + v189 + 365) |= 1u;
      *(_DWORD *)(a4 + 4 * v189 + 416) = *(_DWORD *)a2;
      EvCrt_v("ChanReset %d : NKFC4 %d %d %d   %d   %d >= %d", v189, v199[2], *v199, v202, 1, v197, v385);
    }
  }
  else
  {
    char v151 = v392;
    if ((v187 & 1) == 0) {
      goto LABEL_407;
    }
  }
  *(_DWORD *)(a2 + 972) = 1;
LABEL_407:
  if (*(int *)(v12 + 1668) < 4 || *(int *)(v12 + 1672) < 4 || *a6 != 2) {
    goto LABEL_425;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    int v204 = 1;
    if (v151) {
      goto LABEL_427;
    }
LABEL_435:
    if (v204) {
      goto LABEL_436;
    }
LABEL_453:
    double v214 = *((double *)&v401 + 1);
    double v213 = v402;
    double v215 = *(double *)&v401;
    v216 = (double *)(a2 + 24224);
    uint64_t v217 = -11;
    v218 = (double *)&v398;
    do
    {
      double v219 = *v218;
      if (*v218 > 0.0)
      {
        switch((int)v217)
        {
          case -11:
          case -10:
          case -9:
            double v219 = v219 + *(double *)(a1 + 7248);
            goto LABEL_458;
          case -8:
            double v219 = v219 + *(double *)(a2 + 656) * 0.01;
            goto LABEL_458;
          case -7:
LABEL_458:
            double *v216 = v219;
            break;
          case -6:
            *(void *)(a2 + 24400) = *(void *)(a1 + 7280);
            *(double *)(a2 + 24264) = *(double *)(a2 + 24176) + *(double *)(a1 + 7256);
            break;
          case -5:
            *(double *)(a2 + 24272) = *(double *)(a2 + 24184) + *(double *)(a1 + 7264);
            break;
          case -4:
            *(double *)(a2 + 24280) = *(double *)(a2 + 24192) + *(double *)(a1 + 7272);
            break;
          case -3:
            *(double *)(a2 + 24288) = v215 + *(double *)(a2 + 656) * 0.0001;
            break;
          case -2:
            *(double *)(a2 + 24296) = v214 + *(double *)(a2 + 656) * 0.0001;
            break;
          case -1:
            *(double *)(a2 + 24304) = v213 + *(double *)(a2 + 656) * 0.0001;
            break;
          default:
            EvCrt_Illegal_Default("NK_Final_Check", 0x6A4u);
            break;
        }
        v216[11] = sqrt(*v216);
      }
      ++v216;
      ++v218;
      BOOL v77 = __CFADD__(v217++, 1);
    }
    while (!v77);
    goto LABEL_436;
  }
  double v205 = *(double *)(a2 + 24200) + *(double *)(a2 + 24208);
  int v207 = *(_DWORD *)(a1 + 20);
  unsigned int v206 = *(_DWORD *)(a1 + 24);
  if (v205 >= 2.56)
  {
    if (v207 == 4 && v205 * 9.0 + v150 * v150 < 169.0) {
      goto LABEL_420;
    }
    if (v150 <= 26.0) {
      goto LABEL_425;
    }
LABEL_422:
    unsigned int v208 = 4;
    goto LABEL_423;
  }
  if (v150 > 13.0) {
    goto LABEL_422;
  }
  if (v150 > 3.0)
  {
LABEL_420:
    unsigned int v208 = 3;
    goto LABEL_423;
  }
  if (v150 < 1.5)
  {
    unsigned int v208 = 2;
LABEL_423:
    if (v208 != v207)
    {
      *(_DWORD *)(a1 + 20) = v208;
      v395[0] = v208;
      v395[1] = v206;
      NK_Set_Dynamics(v395, a1 + 32);
      NK_Set_XO_PN((uint64_t)a3, a1 + 32);
    }
  }
LABEL_425:
  int v204 = *(unsigned __int8 *)(a1 + 128);
  if (*(unsigned char *)(a1 + 128))
  {
    if (v151) {
      goto LABEL_427;
    }
    goto LABEL_435;
  }
  if (*(double *)(a2 + 24352) >= 3000.0 || *(double *)(a2 + 24360) >= 3000.0 || *(double *)(a2 + 24368) >= 3000.0)
  {
    int v204 = 0;
    *(unsigned char *)(a1 + 233) = 1;
    if (v151) {
      goto LABEL_427;
    }
    goto LABEL_435;
  }
  int v204 = 0;
  if ((v151 & 1) == 0) {
    goto LABEL_435;
  }
LABEL_427:
  Geo2ECEF(v388, (uint64_t)&WGS84_Datum, (double *)(a2 + 664));
  if (!*(unsigned char *)(a1 + 128)) {
    goto LABEL_453;
  }
LABEL_436:
  if (!*(unsigned char *)(a2 + 960)
    && *(unsigned char *)(v12 + 72)
    && *(unsigned char *)(v12 + 200)
    && ((*(_DWORD *)(v12 + 76) - 1) < 2 || *(unsigned char *)(a1 + 232)))
  {
    *(unsigned char *)(a2 + 960) = 1;
  }
  unsigned int v209 = *(double *)(a2 + 24352);
  if (v209 <= *(double *)(a2 + 24360)) {
    unsigned int v209 = *(double *)(a2 + 24360);
  }
  unsigned int v210 = *(double *)(a2 + 24368);
  if (v209 > v210) {
    unsigned int v210 = v209;
  }
  if (*(unsigned char *)(a1 + 235))
  {
    if (*(unsigned char *)(a1 + 128)) {
      goto LABEL_535;
    }
    if (*(_DWORD *)(a1 + 11028) >= 4u)
    {
      BOOL v211 = v210 > 0xC7 || *(unsigned char *)(a2 + 25171) == 0;
      if (!v211 && v376 >= 5) {
        *(unsigned char *)(a1 + 235) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    goto LABEL_535;
  }
  int v220 = *(_DWORD *)(a2 + 964);
  if ((v220 > 2) | v151 & 1) {
    goto LABEL_536;
  }
  if (*(unsigned char *)(a1 + 233) || *(int *)(a2 + 12) < 7 || !*(unsigned char *)(a2 + 25171) || !v376) {
    goto LABEL_535;
  }
  unsigned int v221 = *(_DWORD *)(a1 + 11028);
  if ((v210 > 0x63 || v221 <= 3) && (v210 > 0x45 || v221 <= 2) && (v210 > 0x27 || v221 < 2)) {
    goto LABEL_535;
  }
  uint64_t v225 = 0;
  int v226 = 0;
  int v227 = 0;
  int v228 = 0;
  int v229 = 0;
  uint64_t v230 = a2 + 3056;
  while (2)
  {
    int v231 = *(_DWORD *)(v230 + 4 * v225);
    if ((v231 - 1) >= 0x1D)
    {
      if (v231)
      {
        EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        goto LABEL_496;
      }
      if (*(unsigned char *)(v230 + v225 - 96) && *(unsigned char *)(v230 + v225 - 3007))
      {
        unsigned int v232 = *(unsigned __int8 *)(a5 + 604 + v225);
        if (v232 > 0x21) {
          ++v229;
        }
        if (v232 > 0x17) {
          ++v228;
        }
        if (v232 > 0xA) {
          ++v227;
        }
      }
    }
    else
    {
LABEL_496:
      ++v226;
    }
    if (++v225 != 48) {
      continue;
    }
    break;
  }
  int v149 = v391;
  if (v226 > 2) {
    goto LABEL_535;
  }
  int v233 = *(unsigned __int8 *)(v12 + 72);
  if (!*(unsigned char *)(v12 + 72)) {
    goto LABEL_523;
  }
  int v234 = *(_DWORD *)(v12 + 76);
  if (v234 == 2)
  {
    if (*(double *)(a2 + 23064) <= 900000000.0)
    {
      int v233 = 1;
      goto LABEL_523;
    }
    goto LABEL_521;
  }
  if (v234 != 1 || (double v235 = *(double *)(a2 + 23064), v235 > 8100000000.0))
  {
LABEL_521:
    int v233 = 0;
    goto LABEL_523;
  }
  if (v235 > 900000000.0) {
    int v233 = 1;
  }
  else {
    int v233 = 2;
  }
  if (v235 <= 9000000.0) {
    ++v233;
  }
LABEL_523:
  BOOL v236 = *(unsigned char *)(a2 + 22848) && *(_DWORD *)(a2 + 22852) == 1 && *(double *)(a2 + 22880) <= 900000000.0
      || *(_DWORD *)(a2 + 12) > 9;
  int v237 = v233 - v226 + v236;
  int v238 = v237 + v229;
  int v239 = v237 + v228;
  int v240 = v237 + v227;
  if (v238 > 3 || v239 > 4 || v240 > 5)
  {
    int v220 = 3;
    goto LABEL_549;
  }
LABEL_535:
  int v220 = *(_DWORD *)(a2 + 964);
LABEL_536:
  if (v220 <= 2)
  {
    if (*(unsigned char *)(a1 + 128) && *(_DWORD *)(a1 + 11048)) {
      *(_DWORD *)(a1 + 11048) = 0;
    }
    if (v220 == 1 && *(unsigned __int8 *)(a1 + 235) > 2u) {
      goto LABEL_548;
    }
    BOOL v243 = v220 < 2 && v383 > 3;
    char v244 = v394;
    if (!v243) {
      char v244 = 0;
    }
    if (v244)
    {
LABEL_548:
      int v220 = 0;
      goto LABEL_549;
    }
    if (!v220 && v383 >= 3)
    {
      if (*(unsigned __int8 *)(a1 + 235) > 2u)
      {
        int v220 = 0;
      }
      else
      {
        int v220 = 1;
LABEL_549:
        *(_DWORD *)(a2 + 964) = v220;
      }
    }
  }
  if (a3[265] != -1)
  {
    if (v220 || *(_DWORD *)(a1 + 11032) < 0x258u)
    {
      if (v220 == 1 && v150 > 50.0)
      {
        v246 = "NK_Final_Check: Reverting to 'Sky Search' Windows due to low position confidence, and apparent high user speed";
LABEL_561:
        *(unsigned char *)(a2 + 960) = 0;
        EvCrt_v(v246);
      }
    }
    else if (!*(unsigned char *)(v12 + 72) {
           || (int v245 = *(_DWORD *)(v12 + 76), v245 != 1) && (v245 != 2 || *(double *)(a2 + 23040) >= 2500000000.0))
    }
    {
      v246 = "NK_Final_Check: Reverting to 'Sky Search' Windows due to No Fix within 10 min";
      goto LABEL_561;
    }
  }
  if (*(int *)(v12 + 1668) >= 4 && *(int *)(a2 + 964) >= 1 && *(double *)(a2 + 24752) <= 100.0) {
    a3[267] = 0;
  }
  unsigned int v247 = a3[265];
  if (v247)
  {
    uint64_t v248 = a3[267];
    if (v248)
    {
      unsigned int v249 = *(_DWORD *)(a2 + 4);
      if (v249 < v248)
      {
        EvCrt_nd("NK_Final_Check: OS ms Time seems to have gone backwards", 2, v36, *(unsigned int *)(a2 + 4), v248);
        goto LABEL_573;
      }
      if (v249 - v248 >= v247)
      {
        EvCrt_v("NK_Final_Check: Reverting to 'Sky Search' Windows due to No Fix within %d s", v247 / 0x3E8);
        *(unsigned char *)(a2 + 960) = 0;
        if (!*(unsigned char *)(a2 + 16))
        {
          *(_DWORD *)(a2 + 12) = 0;
          *(void *)(a2 + 24136) = 0x42D7309374811100;
          *(void *)(a2 + 24312) = 0x4163125300000000;
          int64x2_t v250 = vdupq_n_s64(0x42D7309374811100uLL);
          *(int64x2_t *)(a2 + 24224) = v250;
          *(int64x2_t *)(a2 + 24144) = v250;
          *(void *)(a2 + 24240) = 0x42D7309374811100;
          *(int64x2_t *)(a2 + 24320) = vdupq_n_s64(0x4163125300000000uLL);
          *(void *)(a2 + 24168) = 0x42D7309374811100;
          *(void *)(a2 + 24256) = 0x42D7309374811100;
          *(void *)(a2 + 24344) = 0x4163125300000000;
        }
LABEL_573:
        a3[267] = 0;
      }
    }
  }
  if (*(unsigned char *)(a2 + 16)
    && *(_DWORD *)(a1 + 11048)
    && *(_DWORD *)(a1 + 11032) >= 0x3Du
    && *(double *)(a2 + 24320) > 40000.0
    && *(double *)(a2 + 24328) > 40000.0
    && *(double *)(a2 + 24312) > 40000.0)
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v149 && !*(_DWORD *)(a2 + 964)) {
    *(unsigned char *)(a1 + 232) = 0;
  }
  if ((*(int *)(v12 + 1668) < 4 || *(int *)(a2 + 964) < 1 || *(double *)(a2 + 24752) > 400.0)
    && *(_DWORD *)(a1 + 11032))
  {
    if (!a3[279]) {
      a3[279] = *(_DWORD *)(a5 + 4);
    }
  }
  else
  {
    a3[279] = 0;
  }
  memcpy((void *)(a1 + 344), (const void *)(a1 + 872), 0x210uLL);
  if (*(double *)(a2 + 25824) > 150.0) {
    return;
  }
  if (!*(unsigned char *)(a2 + 26008)) {
    return;
  }
  int v251 = *(char *)(a2 + 26024);
  if (v251 < 2) {
    return;
  }
  v252 = (unsigned char *)(a1 + 11161);
  if (!*(unsigned char *)(a1 + 11161))
  {
    int v253 = *(double *)(a1 + 11152) <= 17.0 ? 3000 : 5000;
    if (*(_DWORD *)a2 - *(_DWORD *)(a1 + 11248) < v253)
    {
      uint64_t v254 = 11240;
      goto LABEL_606;
    }
  }
  if (*(int *)(a1 + 11188) < 2)
  {
    v255 = (double *)(a2 + 952);
  }
  else
  {
    uint64_t v254 = 11192;
LABEL_606:
    v255 = (double *)(a1 + v254);
  }
  double v256 = *v255;
  double v257 = *v255 * 0.0174532925;
  ECEF2FSD_RotM((const double (*)[3])(a2 + 832), v257, (double (*)[3])v403);
  uint64_t v258 = 0;
  do
  {
    *((double *)&v408 + v258 + 2) = *(double *)(a2 + 680 + 8 * v258) - *(double *)(a2 + 25736 + 8 * v258);
    unint64_t v259 = v258 + 3;
    --v258;
  }
  while (v259 > 1);
  uint64_t v260 = 0;
  long long v261 = v408;
  double v262 = v409;
  v263 = &v403[2];
  do
  {
    double v264 = *(v263 - 1) * *((double *)&v261 + 1) + *(v263 - 2) * *(double *)&v261;
    double v265 = *v263;
    v263 += 3;
    *(double *)((char *)&v405 + v260) = v264 + v265 * v262;
    v260 += 8;
  }
  while (v260 != 24);
  int v266 = (int)v256;
  unsigned int v267 = *(_DWORD *)(a1 + 140);
  if (v267 >= *(_DWORD *)(a1 + 144)) {
    unsigned int v267 = *(_DWORD *)(a1 + 144);
  }
  if (v267 >= *(_DWORD *)(a1 + 148)) {
    unsigned int v267 = *(_DWORD *)(a1 + 148);
  }
  BOOL v268 = v267 > 0xA;
  BOOL v269 = *(_DWORD *)(a1 + 11032) <= *(unsigned __int16 *)(a1 + 16) && *(_DWORD *)(a2 + 968) == 1;
  double v270 = v405;
  double v271 = v406;
  EvLog_v("Lsq pos diff:  %3d (%d %3d %3d %3d)  %d%d  %d %f   F %4d %6d %8d    S %4d %6d %8d    D %4d %6d %8d    T %2d %3d   L %2d %f ", (int)v256, *(_DWORD *)(a1 + 11188), (int)*(double *)(a1 + 11240), (int)*(double *)(a1 + 11192), (int)*(double *)(a2 + 952), v268, v269, *(_DWORD *)(a1 + 11116), *(double *)(a1 + 11128), (int)v405, (int)*(double *)(a2 + 25976), (int)*(double *)(a1 + 11480), (int)v406, (int)*(double *)(a2 + 25976), (int)*(double *)(a1 + 11480), (int)v407, (int)*(double *)(a2 + 25984), (int)*(double *)(a1 + 11488),
    *(_DWORD *)(a1 + 11636),
    *(_DWORD *)(a1 + 11640),
    v251,
    *(double *)(a2 + 26016));
  unsigned int v272 = *(_DWORD *)(a1 + 140);
  if (v272 >= *(_DWORD *)(a1 + 144)) {
    unsigned int v272 = *(_DWORD *)(a1 + 144);
  }
  if (v272 >= *(_DWORD *)(a1 + 148)) {
    unsigned int v272 = *(_DWORD *)(a1 + 148);
  }
  if (v272 < 0xB
    || *(_DWORD *)(a1 + 11032) > *(unsigned __int16 *)(a1 + 16)
    || *(_DWORD *)(a2 + 968) != 1)
  {
    goto LABEL_651;
  }
  if (!*v252)
  {
    if (v270 < -5.0 && *(_DWORD *)(a1 + 11116) != 3)
    {
      int v273 = 3;
      int v274 = 8;
      goto LABEL_633;
    }
    goto LABEL_651;
  }
  if (v270 >= -5.0)
  {
LABEL_651:
    int v275 = 0;
    *(_DWORD *)(a1 + 11636) = 0;
    goto LABEL_652;
  }
  int v273 = 18;
  int v274 = 48;
LABEL_633:
  int v275 = 0;
  int v276 = *(_DWORD *)(a1 + 11636);
  if (v276 + 1 < v274) {
    int v277 = v276 + 1;
  }
  else {
    int v277 = v274;
  }
  *(_DWORD *)(a1 + 11636) = v277;
  if (v270 < -25.0 && v277 >= v273)
  {
    double v278 = *(double *)(a2 + 25976) / *(double *)(a1 + 11480);
    double v279 = 0.0;
    double v280 = 1.0;
    if (v278 < 1.0)
    {
      double v279 = 1.0;
      if (v278 > 0.00000011920929)
      {
        NK_Get_Smooth_Excl_Weight(v278 * 0.5, 0.0, 1.0);
        double v279 = v281;
        int v277 = *(_DWORD *)(a1 + 11636);
      }
    }
    int v282 = v274 - v277;
    if (v282)
    {
      NK_Get_Smooth_Excl_Weight((double)v282, 0.0, (double)v274);
      double v280 = v283;
    }
    if (v279 * v280 <= 0.00000011920929)
    {
      int v275 = 0;
    }
    else
    {
      *(double *)v404 = *(double *)(a2 + 25976) / (v279 * v280);
      *(int64x2_t *)&v404[8] = vdupq_n_s64(0x412E848000000000uLL);
      *(_OWORD *)(a1 + 1400) = 0u;
      *(_OWORD *)(a1 + 1416) = 0u;
      *(_OWORD *)(a1 + 1432) = 0u;
      *(_OWORD *)(a1 + 1448) = 0u;
      *(_OWORD *)(a1 + 1464) = 0u;
      *(void *)(a1 + 1480) = 0;
      NK_Body_Frame_Meas(5u, (double *)&v408, (const double *)v404, (const double (*)[3])(a2 + 832), v257, 0xBu, (double *)(a1 + 872));
      uint64_t v284 = 0;
      double v285 = *(double *)(a1 + 1400);
      double v286 = *(double *)(a1 + 1408);
      double v287 = *(double *)(a1 + 1416);
      long long v408 = *(_OWORD *)(a1 + 1440);
      double v409 = *(double *)(a1 + 1456);
      long long v288 = v408;
      double v289 = v409;
      v290 = &v403[2];
      do
      {
        double v291 = *(v290 - 1) * *((double *)&v288 + 1) + *(v290 - 2) * *(double *)&v288;
        double v292 = *v290;
        v290 += 3;
        *(double *)((char *)&v405 + v284) = v291 + v292 * v289;
        v284 += 8;
      }
      while (v284 != 24);
      uint64_t v293 = 0;
      double v406 = 0.0;
      double v407 = 0.0;
      double v294 = v405;
      do
      {
        *(double *)((char *)&v408 + v293 * 8) = v403[v293 + 3] * 0.0 + v403[v293] * v294 + v403[v293 + 6] * 0.0;
        ++v293;
      }
      while (v293 != 3);
      long long v295 = v408;
      *(_OWORD *)(a1 + 1440) = v408;
      *(double *)(a1 + 1456) = v409;
      EvLog_v("Lsq pos meas: F  %2d %f %3d   %f %f   %6d %6d   Wt %f %f   ECEF %f %f %f", *(_DWORD *)(a1 + 11636), *(double *)(a1 + 11128), v266, v270, v294, (int)*(double *)(a2 + 25976), (int)*(double *)(a1 + 11480), v279, v280, *(double *)&v295, *((double *)&v295 + 1), v409);
      NK_Correct_State((double *)(a1 + 1400), (unsigned char *)(a2 + 25166), v374);
      uint64_t v296 = 0;
      *(double *)(a1 + 10472) = v285 + *(double *)(a1 + 10472);
      *(double *)(a1 + 8280) = v286 + *(double *)(a1 + 8280);
      *(double *)(a1 + 8296) = v287 + *(double *)(a1 + 8296);
      int v275 = 1;
      double v271 = 0.0;
      do
      {
        *(double *)(a1 + 10480 + v296) = *(double *)(a1 + 10480 + v296) + *(double *)((char *)&v408 + v296);
        v296 += 8;
      }
      while (v296 != 24);
      double v270 = v294;
    }
  }
LABEL_652:
  unsigned int v297 = *(_DWORD *)(a1 + 140);
  if (v297 >= *(_DWORD *)(a1 + 144)) {
    unsigned int v297 = *(_DWORD *)(a1 + 144);
  }
  if (v297 >= *(_DWORD *)(a1 + 148)) {
    unsigned int v297 = *(_DWORD *)(a1 + 148);
  }
  if (v297 < 0xB
    || *(_DWORD *)(a1 + 11032) > *(unsigned __int16 *)(a1 + 16)
    || *(_DWORD *)(a2 + 968) != 1)
  {
    goto LABEL_662;
  }
  if (*v252)
  {
    int v298 = 120;
    goto LABEL_743;
  }
  if (*(_DWORD *)(a1 + 11116) != 3)
  {
    int v298 = 20;
LABEL_743:
    int v350 = *(_DWORD *)(a1 + 11640);
    BOOL v351 = v350 > 0;
    if (v271 < 0.0)
    {
      int v352 = -1;
    }
    else
    {
      BOOL v351 = v350 < 0;
      int v352 = 1;
    }
    if (v351) {
      int v350 = 0;
    }
    int v353 = v350 + v352;
    *(_DWORD *)(a1 + 11640) = v353;
    int v354 = v298;
    if (v353 > v298 || (int v354 = -v298, v353 < -v298))
    {
      *(_DWORD *)(a1 + 11640) = v354;
      int v353 = v354;
    }
    if (v353 >= 0) {
      unsigned int v355 = v353;
    }
    else {
      unsigned int v355 = -v353;
    }
    if (fabs(v271) <= 10.0 || v355 < v298 >> 2) {
      goto LABEL_769;
    }
    double v356 = *(double *)(a2 + 25976) / *(double *)(a1 + 11480);
    double v357 = 0.0;
    double v358 = 1.0;
    if (v356 < 1.0)
    {
      double v357 = 1.0;
      if (v356 > 0.00000011920929)
      {
        NK_Get_Smooth_Excl_Weight(v356 * 0.5, 0.0, 1.0);
        double v357 = v359;
      }
    }
    if (v298 != v355)
    {
      NK_Get_Smooth_Excl_Weight((double)(int)(v298 - v355), 0.0, (double)v298);
      double v358 = v360;
    }
    if (v357 * v358 <= 0.00000011920929)
    {
LABEL_769:
      if (v275) {
        goto LABEL_663;
      }
      int v299 = 0;
    }
    else
    {
      *(void *)v404 = 0x412E848000000000;
      *(double *)&v404[8] = *(double *)(a2 + 25976) / (v357 * v358);
      *(void *)&v404[16] = 0x412E848000000000;
      *(void *)(a1 + 1480) = 0;
      *(_OWORD *)(a1 + 1448) = 0u;
      *(_OWORD *)(a1 + 1464) = 0u;
      *(_OWORD *)(a1 + 1416) = 0u;
      *(_OWORD *)(a1 + 1432) = 0u;
      *(_OWORD *)(a1 + 1400) = 0u;
      NK_Body_Frame_Meas(5u, (double *)&v408, (const double *)v404, (const double (*)[3])(a2 + 832), v257, 0xBu, (double *)(a1 + 872));
      uint64_t v361 = 0;
      double v362 = *(double *)(a1 + 1400);
      double v363 = *(double *)(a1 + 1408);
      double v364 = *(double *)(a1 + 1416);
      long long v408 = *(_OWORD *)(a1 + 1440);
      double v409 = *(double *)(a1 + 1456);
      long long v365 = v408;
      double v366 = v409;
      v367 = &v403[2];
      do
      {
        double v368 = *(v367 - 1) * *((double *)&v365 + 1) + *(v367 - 2) * *(double *)&v365;
        double v369 = *v367;
        v367 += 3;
        *(double *)((char *)&v405 + v361) = v368 + v369 * v366;
        v361 += 8;
      }
      while (v361 != 24);
      uint64_t v370 = 0;
      double v405 = 0.0;
      double v407 = 0.0;
      double v371 = v406;
      do
      {
        *(double *)((char *)&v408 + v370 * 8) = v403[v370 + 3] * v371 + v403[v370] * 0.0 + v403[v370 + 6] * 0.0;
        ++v370;
      }
      while (v370 != 3);
      long long v372 = v408;
      *(_OWORD *)(a1 + 1440) = v408;
      *(double *)(a1 + 1456) = v409;
      EvLog_v("Lsq pos meas: S  %2d %f %3d   %f %f   %6d %6d   Wt %f %f   ECEF %f %f %f", *(_DWORD *)(a1 + 11640), *(double *)(a1 + 11128), v266, v271, v371, (int)*(double *)(a2 + 25976), (int)*(double *)(a1 + 11480), v357, v358, *(double *)&v372, *((double *)&v372 + 1), v409);
      NK_Correct_State((double *)(a1 + 1400), (unsigned char *)(a2 + 25166), v374);
      uint64_t v373 = 0;
      *(double *)(a1 + 10472) = v362 + *(double *)(a1 + 10472);
      *(double *)(a1 + 8280) = v363 + *(double *)(a1 + 8280);
      *(double *)(a1 + 8296) = v364 + *(double *)(a1 + 8296);
      do
      {
        *(double *)(a1 + 10480 + v373) = *(double *)(a1 + 10480 + v373) + *(double *)((char *)&v408 + v373);
        v373 += 8;
      }
      while (v373 != 24);
LABEL_663:
      uint64_t v300 = 0;
      do
      {
        *((double *)&v408 + v300 + 2) = *(double *)(a2 + 680 + 8 * v300) - *(double *)(a2 + 25736 + 8 * v300);
        unint64_t v301 = v300 + 3;
        --v300;
      }
      while (v301 > 1);
      uint64_t v302 = 0;
      long long v303 = v408;
      double v304 = v409;
      v305 = &v403[2];
      do
      {
        double v306 = *(v305 - 1) * *((double *)&v303 + 1) + *(v305 - 2) * *(double *)&v303;
        double v307 = *v305;
        v305 += 3;
        *(double *)((char *)&v405 + v302) = v306 + v307 * v304;
        v302 += 8;
      }
      while (v302 != 24);
      int v299 = 1;
      double v270 = v405;
      double v271 = v406;
    }
  }
  else
  {
LABEL_662:
    int v299 = 0;
    *(_DWORD *)(a1 + 11640) = 0;
    if (v275) {
      goto LABEL_663;
    }
  }
  if ((*(_DWORD *)(a1 + 11116) & 0xFFFFFFFE) == 2) {
    double v308 = 3.5;
  }
  else {
    double v308 = 2.0;
  }
  double v309 = v308 * *(double *)(a2 + 25976);
  double v310 = 9.9980001e13;
  if (v271 * v271 + v270 * v270 <= v309 * v309 || v309 >= *(double *)(a1 + 11480))
  {
    int v316 = 0;
  }
  else
  {
    *(int64x2_t *)v404 = vdupq_n_s64(0x4049000000000000uLL);
    *(void *)&v404[16] = 0x408F400000000000;
    *(void *)(a1 + 1480) = 0;
    *(_OWORD *)(a1 + 1400) = 0u;
    *(_OWORD *)(a1 + 1416) = 0u;
    *(_OWORD *)(a1 + 1432) = 0u;
    *(_OWORD *)(a1 + 1448) = 0u;
    *(_OWORD *)(a1 + 1464) = 0u;
    NK_Body_Frame_Meas(5u, (double *)&v408, (const double *)v404, (const double (*)[3])(a2 + 832), v257, 0xBu, (double *)(a1 + 872));
    double v311 = *(double *)(a1 + 1400);
    double v312 = *(double *)(a1 + 1408);
    double v313 = *(double *)(a1 + 1416);
    long long v408 = *(_OWORD *)(a1 + 1440);
    double v409 = *(double *)(a1 + 1456);
    EvLog_v("Lsq pos adj:  H  %4d %4d %4d   ARP  %6d %6d", (int)v270, (int)v271, (int)v407, (int)*(double *)(a2 + 25976), (int)*(double *)(a1 + 11480));
    for (uint64_t m = 0; m != 24; m += 8)
      *(double *)(a2 + 664 + m) = *(double *)(a2 + 664 + m) - *(double *)((char *)&v408 + m);
    uint64_t v315 = 0;
    double *v390 = *v390 - v311 * 0.00000000333564095;
    double *v377 = *v377 - v312 * 0.00000000333564095;
    double *v381 = *v381 - v313 * 0.00000000333564095;
    *(double *)(a1 + 10472) = v311 + *(double *)(a1 + 10472);
    *(double *)(a1 + 8280) = v312 + *(double *)(a1 + 8280);
    *(double *)(a1 + 8296) = v313 + *(double *)(a1 + 8296);
    do
    {
      *(double *)(a1 + 10480 + v315) = *(double *)(a1 + 10480 + v315) + *(double *)((char *)&v408 + v315);
      v315 += 8;
    }
    while (v315 != 24);
    ++*(_WORD *)(a1 + 236);
    int v299 = 1;
    double v310 = 50.0;
    int v316 = 1;
  }
  double v317 = v407;
  double v318 = v308 * *(double *)(a2 + 25984);
  if (v317 * v317 > v318 * v318 && v318 < *(double *)(a1 + 11488))
  {
    *(int64x2_t *)v404 = vdupq_n_s64(0x408F400000000000uLL);
    *(void *)&v404[16] = 0x4049000000000000;
    *(void *)(a1 + 1480) = 0;
    *(_OWORD *)(a1 + 1400) = 0u;
    *(_OWORD *)(a1 + 1416) = 0u;
    *(_OWORD *)(a1 + 1432) = 0u;
    *(_OWORD *)(a1 + 1448) = 0u;
    *(_OWORD *)(a1 + 1464) = 0u;
    NK_Body_Frame_Meas(5u, (double *)&v408, (const double *)v404, (const double (*)[3])(a2 + 832), v257, 0xBu, (double *)(a1 + 872));
    double v319 = *(double *)(a1 + 1400);
    double v320 = *(double *)(a1 + 1408);
    double v321 = *(double *)(a1 + 1416);
    long long v408 = *(_OWORD *)(a1 + 1440);
    double v409 = *(double *)(a1 + 1456);
    EvLog_v("Lsq pos adj:  V  %4d %4d %4d   ARP  %6d %6d", (int)v270, (int)v271, (int)v317, (int)*(double *)(a2 + 25984), (int)*(double *)(a1 + 11488));
    for (uint64_t n = 0; n != 24; n += 8)
      *(double *)(a2 + 664 + n) = *(double *)(a2 + 664 + n) - *(double *)((char *)&v408 + n);
    uint64_t v323 = 0;
    double *v390 = *v390 - v319 * 0.00000000333564095;
    double *v377 = *v377 - v320 * 0.00000000333564095;
    double *v381 = *v381 - v321 * 0.00000000333564095;
    *(double *)(a1 + 10472) = v319 + *(double *)(a1 + 10472);
    *(double *)(a1 + 8280) = v320 + *(double *)(a1 + 8280);
    *(double *)(a1 + 8296) = v321 + *(double *)(a1 + 8296);
    do
    {
      *(double *)(a1 + 10480 + v323) = *(double *)(a1 + 10480 + v323) + *(double *)((char *)&v408 + v323);
      v323 += 8;
    }
    while (v323 != 24);
    ++*(_WORD *)(a1 + 236);
  }
  if (!v316) {
    goto LABEL_739;
  }
  *(void *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(void *)&long long v412 = 0;
  if (R8_EQ(v390, (const double *)&v412)) {
    goto LABEL_700;
  }
  double v324 = *(double *)(a2 + 736);
  v325 = (double *)(a2 + 25664);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25664), (const double *)&v412))
  {
    double v327 = *(double *)(a2 + 25872) * *(double *)(a2 + 25872);
    if (v327 >= v310) {
      double v327 = v310;
    }
LABEL_699:
    double v329 = *v325;
    double v396 = 0.0;
    memset((char *)&v410[5] + 8, 0, 176);
    memset((char *)v410 + 8, 0, 80);
    *(void *)&v410[0] = 0x3FF0000000000000;
    *((double *)&v410[5] + 1) = v324 * 299792458.0 - v329;
    umeas(a1 + 872, 0xBu, v327, (double *)v410, (double *)&v412, v411, &v396, 1.0e20);
    goto LABEL_700;
  }
  v325 = (double *)(a2 + 25680);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25680), (const double *)&v412))
  {
    double v326 = *(double *)(a2 + 25880);
LABEL_696:
    double v328 = v326 * v326;
    if (v328 >= v310) {
      double v328 = v310;
    }
    double v327 = v328 + 25.0;
    goto LABEL_699;
  }
  v325 = (double *)(a2 + 25696);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25696), (const double *)&v412))
  {
    double v326 = *(double *)(a2 + 25888);
    goto LABEL_696;
  }
LABEL_700:
  *(void *)&long long v412 = 0;
  if (R8_EQ(v377, (const double *)&v412)) {
    goto LABEL_713;
  }
  double v330 = *(double *)(a2 + 744);
  v331 = (double *)(a2 + 25680);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25680), (const double *)&v412))
  {
    double v333 = *(double *)(a2 + 25880) * *(double *)(a2 + 25880);
    if (v333 >= v310) {
      double v333 = v310;
    }
LABEL_712:
    double v335 = *v331;
    double v396 = 0.0;
    memset(&v410[6], 0, 168);
    *(void *)&v410[0] = 0;
    memset(&v410[1], 0, 72);
    *((void *)&v410[0] + 1) = 0x3FF0000000000000;
    *((double *)&v410[5] + 1) = v330 * 299792458.0 - v335;
    umeas(a1 + 872, 0xBu, v333, (double *)v410, (double *)&v412, v411, &v396, 1.0e20);
    goto LABEL_713;
  }
  v331 = (double *)(a2 + 25664);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25664), (const double *)&v412))
  {
    double v332 = *(double *)(a2 + 25872);
LABEL_709:
    double v334 = v332 * v332;
    if (v334 >= v310) {
      double v334 = v310;
    }
    double v333 = v334 + 25.0;
    goto LABEL_712;
  }
  v331 = (double *)(a2 + 25696);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25696), (const double *)&v412))
  {
    double v332 = *(double *)(a2 + 25888);
    goto LABEL_709;
  }
LABEL_713:
  *(void *)&long long v412 = 0;
  if (R8_EQ(v381, (const double *)&v412)) {
    goto LABEL_726;
  }
  double v336 = *(double *)(a2 + 752);
  v337 = (double *)(a2 + 25696);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25696), (const double *)&v412))
  {
    double v339 = *(double *)(a2 + 25888) * *(double *)(a2 + 25888);
    if (v339 >= v310) {
      double v339 = v310;
    }
LABEL_725:
    double v341 = *v337;
    double v396 = 0.0;
    memset(&v410[6], 0, 168);
    memset(&v410[2], 0, 56);
    v410[0] = 0u;
    v410[1] = 0x3FF0000000000000uLL;
    *((double *)&v410[5] + 1) = v336 * 299792458.0 - v341;
    umeas(a1 + 872, 0xBu, v339, (double *)v410, (double *)&v412, v411, &v396, 1.0e20);
    goto LABEL_726;
  }
  v337 = (double *)(a2 + 25664);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25664), (const double *)&v412))
  {
    double v338 = *(double *)(a2 + 25872);
LABEL_722:
    double v340 = v338 * v338;
    if (v340 >= v310) {
      double v340 = v310;
    }
    double v339 = v340 + 25.0;
    goto LABEL_725;
  }
  v337 = (double *)(a2 + 25680);
  *(void *)&long long v412 = 0;
  if (!R8_EQ((const double *)(a2 + 25680), (const double *)&v412))
  {
    double v338 = *(double *)(a2 + 25880);
    goto LABEL_722;
  }
LABEL_726:
  double v342 = *(double *)(a1 + 1400);
  double v343 = *(double *)(a1 + 1408);
  double v344 = *(double *)(a1 + 1416);
  long long v408 = *(_OWORD *)(a1 + 1440);
  double v409 = *(double *)(a1 + 1456);
  *(void *)&long long v412 = 0;
  if (R8_EQ(v390, (const double *)&v412)) {
    int v345 = 0;
  }
  else {
    int v345 = (int)(*(double *)(a2 + 25664) - *(double *)(a2 + 736));
  }
  *(void *)&long long v412 = 0;
  if (R8_EQ(v377, (const double *)&v412)) {
    int v346 = 0;
  }
  else {
    int v346 = (int)(*(double *)(a2 + 25680) - *(double *)(a2 + 744));
  }
  *(void *)&long long v412 = 0;
  if (R8_EQ(v381, (const double *)&v412)) {
    int v347 = 0;
  }
  else {
    int v347 = (int)(*(double *)(a2 + 25696) - *(double *)(a2 + 752));
  }
  EvLog_v("Lsq Clk adj:  C  %4d %4d %4d   ARP  %6d %6d", v345, v346, v347, (int)*(double *)(a2 + 25992), (int)*(double *)(a1 + 11496));
  for (iuint64_t i = 0; ii != 24; ii += 8)
    *(double *)(a2 + 664 + ii) = *(double *)(a2 + 664 + ii) - *(double *)((char *)&v408 + ii);
  uint64_t v349 = 0;
  double *v390 = *v390 - v342 * 0.00000000333564095;
  double *v377 = *v377 - v343 * 0.00000000333564095;
  double *v381 = *v381 - v344 * 0.00000000333564095;
  *(double *)(a1 + 10472) = v342 + *(double *)(a1 + 10472);
  *(double *)(a1 + 8280) = v343 + *(double *)(a1 + 8280);
  *(double *)(a1 + 8296) = v344 + *(double *)(a1 + 8296);
  do
  {
    *(double *)(a1 + 10480 + v349) = *(double *)(a1 + 10480 + v349) + *(double *)((char *)&v408 + v349);
    v349 += 8;
  }
  while (v349 != 24);
LABEL_739:
  if (v299) {
    ECEF2Geo((double *)(a2 + 664), (uint64_t)&WGS84_Datum, v388);
  }
}

uint64_t NK_Final_Check_ClkBias(uint64_t result, uint64_t a2, uint64_t a3)
{
  v34[1] = *(double *)MEMORY[0x263EF8340];
  v34[0] = 0.0;
  int v31 = 0;
  __int16 v32 = 0;
  uint64_t v5 = result;
  switch((int)result)
  {
    case 0:
    case 3:
    case 5:
    case 6:
      return result;
    case 1:
      uint64_t v6 = 0;
      int v31 = 1;
      double v7 = *(double *)(a3 + 736);
      v34[0] = v7;
      uint64_t v8 = 24136;
      goto LABEL_6;
    case 2:
      int v31 = 2;
      uint64_t v6 = 1;
      LOBYTE(v32) = 1;
      double v7 = *(double *)(a3 + 744);
      v34[0] = v7;
      uint64_t v8 = 24144;
      goto LABEL_6;
    case 4:
      int v31 = 4;
      uint64_t v6 = 2;
      LOBYTE(v32) = 2;
      double v7 = *(double *)(a3 + 752);
      v34[0] = v7;
      uint64_t v8 = 24152;
LABEL_6:
      uint64_t v9 = (unsigned int *)(a3 + 25592);
      double v10 = *(double *)(a3 + v8);
      double v33 = v10;
      uint64_t v11 = *(char *)(a3 + 25596);
      if (v11 != -1)
      {
        uint64_t v12 = (void *)(a3 + 25608);
        double v30 = 0.0;
        uint64_t result = R8_EQ((const double *)(a3 + 25608), &v30);
        if ((result & 1) == 0)
        {
          double v29 = 0.0;
          uint64_t result = R8_EQ(v34, &v29);
          if ((result & 1) == 0)
          {
            int v14 = *(unsigned __int8 *)(a3 + 25597);
            if (v14 == 1)
            {
              uint64_t result = NK_Final_Check_ClkBias_Reset(v5, a2, a3);
            }
            else
            {
              double v15 = (*(double *)(a3 + 25608) - v7) * 299792458.0;
              if (v14 == 2)
              {
                NK_Final_Check_ClkBias_Reset(v5, a2, a3);
                uint64_t result = NK_Final_Check_ClkVar_Change(v5, (double *)a3, v15 * 0.333333333 * (v15 * 0.333333333));
              }
              else
              {
                double v16 = *(double *)(a3 + 24536);
                if (v16 >= 25000000.0) {
                  goto LABEL_52;
                }
                double v17 = *(double *)(a3 + 24544);
                if (v17 >= 25000000.0) {
                  goto LABEL_52;
                }
                double v18 = *(double *)(a3 + 24552);
                if (v18 >= 25000000.0) {
                  goto LABEL_52;
                }
                double v19 = *(double *)(a3 + 8 * v11 + 24496);
                if (v19 >= 25000000.0 && *(double *)(a3 + 8 * v6 + 24496) >= 25000000.0) {
                  goto LABEL_52;
                }
                unsigned int v20 = 0;
                double v21 = v16 + 22500.0 + v17 + v18 + *(double *)(a3 + 24528);
                char v22 = 1;
                do
                {
                  unsigned int v23 = v20;
                  char v24 = v22;
                  if (v22) {
                    unsigned int v25 = (int *)(a3 + 25592);
                  }
                  else {
                    unsigned int v25 = &v31;
                  }
                  unsigned int v20 = *v25;
                  switch(v20)
                  {
                    case 0u:
                      break;
                    case 1u:
                    case 3u:
                    case 5u:
                    case 6u:
                      unsigned int v20 = *(unsigned __int8 *)(a3 + 24783);
                      break;
                    case 2u:
                      unsigned int v20 = *(unsigned __int8 *)(a3 + 24788);
                      int v26 = *(_DWORD *)(a3 + 24808);
                      goto LABEL_31;
                    case 4u:
                      unsigned int v20 = *(unsigned __int8 *)(a3 + 24793);
                      int v26 = *(_DWORD *)(a3 + 24812);
LABEL_31:
                      if (v26) {
                        ++v20;
                      }
                      break;
                    default:
                      uint64_t result = (uint64_t)EvCrt_Illegal_Default("NK_Final_Check_ClkBias", 0xC03u);
                      unsigned int v20 = 0;
                      break;
                  }
                  char v22 = 0;
                }
                while ((v24 & 1) != 0);
                double v27 = (v19 + v21) * 9.0;
                if (v15 * v15 > v27 || v10 >= 2496542160.0 || v23 >= 2 && !v20 && fabs(v15) >= 150.0)
                {
                  EvLog_nd("NKFC:  Constellation Clock Bias deviation event ! ", 4, v13, *v9, v5, (int)v15, (int)sqrt(v27));
                  if (*(double *)(a3 + 25600) > 2496542160.0)
                  {
                    *uint64_t v12 = 0;
                    if (!*(unsigned char *)(a3 + 25597))
                    {
                      NK_Final_Check_ClkBias_Reset(*v9, a2, a3);
                      *(unsigned char *)(a3 + 25597) = 1;
                    }
                  }
                  if (v10 > 2496542160.0)
                  {
                    v34[0] = 0.0;
                    NK_Final_Check_ClkBias_Reset(v5, a2, a3);
                  }
                  double v30 = 0.0;
                  uint64_t result = R8_EQ((const double *)(a3 + 25608), &v30);
                  if ((result & 1) == 0)
                  {
                    double v29 = 0.0;
                    uint64_t result = R8_EQ(v34, &v29);
                    if ((result & 1) == 0)
                    {
                      double v28 = v15 * 0.333333333 * (v15 * 0.333333333);
                      if (!*(unsigned char *)(a3 + 25597))
                      {
                        *(unsigned char *)(a2 + 128) = 1;
                        *(_DWORD *)(a2 + 132) = 70;
                        if (*(int *)(a3 + 12) >= 10) {
                          *(_DWORD *)(a3 + 12) = 9;
                        }
                        NK_Final_Check_ClkBias_Reset(*v9, a2, a3);
                        NK_Final_Check_ClkVar_Change(*v9, (double *)a3, v28);
                        *(unsigned char *)(a3 + 25597) = 2;
                      }
                      NK_Final_Check_ClkBias_Reset(v5, a2, a3);
                      uint64_t result = NK_Final_Check_ClkVar_Change(v5, (double *)a3, v28);
                    }
                  }
                }
                if (!*(unsigned char *)(a3 + 25597)) {
LABEL_52:
                }
                  *(unsigned char *)(a3 + 25597) = 3;
              }
            }
          }
        }
      }
      break;
    default:
      uint64_t result = (uint64_t)EvCrt_Illegal_Default("NK_Final_Check_ClkBias", 0xB8Au);
      break;
  }
  return result;
}

uint64_t NK_Final_Check_ClkBias_Reset(uint64_t result, uint64_t a2, uint64_t a3)
{
  switch(result)
  {
    case 4:
      *(void *)(a3 + 752) = 0;
      *(unsigned char *)(a3 + 770) = 0;
      *(void *)(a2 + 8296) = 0;
      *(unsigned char *)(a2 + 8288) = 0;
      break;
    case 2:
      *(void *)(a3 + 744) = 0;
      *(unsigned char *)(a3 + 769) = 0;
      *(void *)(a2 + 8280) = 0;
      *(unsigned char *)(a2 + 8274) = 0;
      break;
    case 1:
      *(void *)(a3 + 736) = 0;
      *(unsigned char *)(a3 + 768) = 0;
      *(void *)(a2 + 10472) = 0;
      *(unsigned char *)(a2 + 8272) = 0;
      break;
  }
  return result;
}

uint64_t NK_Final_Check_ClkVar_Change(uint64_t result, double *a2, double a3)
{
  switch(result)
  {
    case 4:
      a2[3019] = a2[3019] + a3;
      double v4 = a2[3030] + a3;
      a2[3030] = v4;
      a2[3041] = sqrt(v4);
      break;
    case 2:
      a2[3018] = a2[3018] + a3;
      double v5 = a2[3029] + a3;
      a2[3029] = v5;
      a2[3040] = sqrt(v5);
      break;
    case 1:
      a2[3017] = a2[3017] + a3;
      double v3 = a2[3028] + a3;
      a2[3028] = v3;
      a2[3039] = sqrt(v3);
      break;
  }
  return result;
}

uint64_t asn1PD_PosPayLoadVer2(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned __int8 v12 = 0;
  Ver2Extensiouint64_t n = Asn1Coder::DecodeChoiceExtension(a1, &v12);
  int32x2_t v10 = 0;
  int v11 = 0;
  if (Ver2Extension)
  {
    uint64_t v5 = Ver2Extension;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_7:
    SuplAsn1Logger::TraceError(Ver2Extension, v6, v7);
    return v5;
  }
  *(_WORD *)a2 = v12 + 4;
  Asn1Coder::DecodeOpenTypeFieldStart(a1, &v10);
  if (Ver2Extension)
  {
    uint64_t v5 = Ver2Extension;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  Ver2Extensiouint64_t n = asn1PD_PosPayLoadVer2Extension(a1, a2 + 80);
  if (Ver2Extension)
  {
    uint64_t v5 = Ver2Extension;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  if (*(unsigned char *)(a2 + 80)) {
    *(_WORD *)a2 = 4;
  }
  if (*(unsigned char *)(a2 + 81)) {
    *(_WORD *)a2 = 5;
  }
  uint64_t v5 = 0;
  __int32 v9 = v10.i32[0];
  *(_DWORD *)(a1 + 8) = v11 + v10.i32[1];
  *(_DWORD *)(a1 + 12) = v9;
  return v5;
}

uint64_t asn1PD_PosPayLoadVer2Extension(uint64_t a1, uint64_t a2)
{
  Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  *(unsigned char *)(a2 + 1) = BitFromBuffer;
  uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_6:
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = lppPayload;
    goto LABEL_7;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t lppPayload = asn1PD_PosPayLoad_lppPayload(a1, (uint64_t *)(a2 + 8));
    if (lppPayload) {
      goto LABEL_6;
    }
    int BitFromBuffer = *(unsigned __int8 *)(a2 + 1);
  }
  if (!BitFromBuffer) {
    return 0;
  }
  uint64_t lppPayload = 1;
  *(unsigned char *)(a1 + 16) = 1;
  SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = 1;
LABEL_7:
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return lppPayload;
}

uint64_t asn1PD_PosPayLoad_lppPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v16 = 3;
  unsigned int v5 = Asn1Coder::DecodeInteger(a1, 1, 3, &v16);
  std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__clear[abi:ne180100](a2);
  if (v5)
  {
    SuplAsn1Logger::TraceError(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    int v6 = v16;
    if (v16 < 1)
    {
LABEL_15:
      LOBYTE(v5) = 0;
    }
    else
    {
      while (1)
      {
        int v15 = 0;
        unsigned int v7 = Asn1Coder::DecodeInteger(a1, 1, 0xEA60u, &v15);
        LOBYTE(v5) = v7;
        if (v7)
        {
          SuplAsn1Logger::TraceError(v7, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          return v5;
        }
        __p = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        Asn1Coder::GetBitStringFromBuffer(a1, 8 * v15, (unint64_t *)&__p, 0);
        int v8 = *(unsigned __int8 *)(a1 + 16);
        if (*(unsigned char *)(a1 + 16))
        {
          SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          char v2 = v8;
        }
        else
        {
          __int32 v9 = (void *)a2[1];
          if ((unint64_t)v9 >= a2[2])
          {
            uint64_t v10 = std::vector<ASN1T_PosPayLoad_lpppayload>::__push_back_slow_path<ASN1T_PosPayLoad_lpppayload const&>(a2, (uint64_t)&__p);
          }
          else
          {
            *__int32 v9 = 0;
            v9[1] = 0;
            v9[2] = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v9, __p, (uint64_t)v13, v13 - (unsigned char *)__p);
            uint64_t v10 = (uint64_t)(v9 + 3);
            a2[1] = (uint64_t)(v9 + 3);
          }
          a2[1] = v10;
        }
        if (__p)
        {
          uint64_t v13 = __p;
          operator delete(__p);
        }
        if (v8) {
          break;
        }
        if (!--v6) {
          goto LABEL_15;
        }
      }
      LOBYTE(v5) = v2;
    }
  }
  return v5;
}

void sub_22BA2C0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  *(void *)(v11 + 8) = v12;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t asn1PE_PosPayLoadVer2(uint64_t a1, unsigned char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned __int8 v10 = *a2 - 4;
  Ver2Extensiouint64_t n = Asn1Coder::EncodeChoiceExtension(a1, &v10);
  int32x2_t v9 = 0;
  if (Ver2Extension)
  {
    uint64_t v5 = Ver2Extension;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    Ver2Extensiouint64_t n = Asn1Coder::EncodeOpenTypeFieldStart(a1, &v9);
    if (Ver2Extension)
    {
      uint64_t v5 = Ver2Extension;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      Ver2Extensiouint64_t n = asn1PE_PosPayLoadVer2Extension(a1, a2 + 80);
      if (!Ver2Extension) {
        return Asn1Coder::EncodeOpenTypeFieldEnd(a1, &v9);
      }
      uint64_t v5 = Ver2Extension;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
  }
  SuplAsn1Logger::TraceError(Ver2Extension, v6, v7);
  return v5;
}

uint64_t asn1PE_PosPayLoadVer2Extension(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
    uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    }
    else
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
      uint64_t lppPayload = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16)
        || *a2 && (uint64_t lppPayload = asn1PE_PosPayLoad_lppPayload(a1, (void *)a2 + 1), lppPayload))
      {
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        unsigned int v7 = lppPayload;
      }
      else
      {
        if (!a2[1]) {
          return 0;
        }
        uint64_t lppPayload = 1;
        *(unsigned char *)(a1 + 16) = 1;
        SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        unsigned int v7 = 1;
      }
    }
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return lppPayload;
}

uint64_t asn1PE_PosPayLoad_lppPayload(uint64_t a1, void *a2)
{
  int v4 = 0;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    unint64_t v6 = v5 / 24;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    unsigned int v7 = (void *)(*a2 + 8);
    do
    {
      if (*(v7 - 1) != *v7) {
        ++v4;
      }
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  uint64_t v8 = Asn1Coder::EncodeInteger(a1, 1, 3, v4);
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = *(_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    goto LABEL_10;
  }
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (v12 == *a2) {
    return 0;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = *(void *)(v13 + v14);
    uint64_t v17 = *(void *)(v13 + v14 + 8);
    if (v16 != v17) {
      break;
    }
LABEL_16:
    ++v15;
    v14 += 24;
    if (v15 >= 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3)) {
      return 0;
    }
  }
  uint64_t v8 = Asn1Coder::EncodeOctetString(a1, 1, 60000, (int)v17 - (int)v16, (void *)(v13 + v14), 0, 0);
  if (!v8)
  {
    uint64_t v13 = *a2;
    uint64_t v12 = a2[1];
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
LABEL_10:
  SuplAsn1Logger::TraceError(v8, v10, v11);
  return v9;
}

void SuplInitRecd::SuplInitRecd(SuplInitRecd *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  char v2 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  uint64_t Instance = SuplVersionNegotiation::GetInstance(this);
  int v4 = atomic_load((unsigned __int8 *)(Instance + 1));
  BOOL v5 = v4 == 255;
  uint64_t v6 = 1;
  if (v5) {
    uint64_t v6 = 2;
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(Instance + v6));
  *((_WORD *)this + 16) = -1;
  *((unsigned char *)this + 26) = v7;
  *(_WORD *)((char *)this + 27) = 0;
  *((void *)this + 5) = 0;
  ASN1T_SessionID::ASN1T_SessionID((SuplInitRecd *)((char *)this + 48));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  uint64_t v8 = std::vector<unsigned char>::vector((void *)this + 48, 4uLL);
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((unsigned char *)this + 408) = -1;
  *((void *)this + 63) = 0;
  *(_WORD *)((char *)this + 17) = 0;
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  *(_OWORD *)(v8 + 9) = 0u;
  *(_OWORD *)(v8 + 11) = 0u;
  *(_OWORD *)((char *)v8 + 101) = 0u;
  *((_WORD *)this + 16) = 1;
  uint64_t v9 = (char *)operator new(0x238uLL, MEMORY[0x263F8C180]);
  if (v9)
  {
    *((_DWORD *)v9 + 2) = 0;
    v9[12] = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 8) = 0;
    *((void *)v9 + 6) = 0;
    *(_WORD *)(v9 + 13) = -1;
    v9[40] = -1;
    *((_WORD *)v9 + 36) = 255;
    *((void *)v9 + 10) = 0;
    *((void *)v9 + 11) = 0;
    v9[80] = -1;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *((_OWORD *)v9 + 9) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((void *)v9 + 22) = 0;
    *((void *)v9 + 70) = 0;
    *((_OWORD *)v9 + 33) = 0u;
    *((_OWORD *)v9 + 34) = 0u;
    *((_OWORD *)v9 + 31) = 0u;
    *((_OWORD *)v9 + 32) = 0u;
    *((_OWORD *)v9 + 29) = 0u;
    *((_OWORD *)v9 + 30) = 0u;
    *((_OWORD *)v9 + 27) = 0u;
    *((_OWORD *)v9 + 28) = 0u;
    *((_OWORD *)v9 + 25) = 0u;
    *((_OWORD *)v9 + 26) = 0u;
    *((_OWORD *)v9 + 23) = 0u;
    *((_OWORD *)v9 + 24) = 0u;
    *((_OWORD *)v9 + 21) = 0u;
    *((_OWORD *)v9 + 22) = 0u;
    *((_OWORD *)v9 + 19) = 0u;
    *((_OWORD *)v9 + 20) = 0u;
    *((_OWORD *)v9 + 17) = 0u;
    *((_OWORD *)v9 + 18) = 0u;
    *((_OWORD *)v9 + 16) = 0u;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 14) = 0u;
    *((_OWORD *)v9 + 15) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    v9[360] = -1;
    *(void *)(v9 + 460) = 0;
    *(void *)(v9 + 452) = 0;
    *(_DWORD *)(v9 + 467) = 0;
    *((void *)v9 + 62) = 0;
    *((void *)v9 + 63) = 0;
    *((void *)v9 + 61) = 0;
    *((_DWORD *)v9 + 128) = 0;
    *((void *)v9 + 65) = 0;
    *((void *)v9 + 67) = 0;
    *((void *)v9 + 66) = 0;
    v9[544] = 0;
    *((_DWORD *)v9 + 138) = 0;
    *((_WORD *)v9 + 278) = 0;
    *(_OWORD *)(v9 + 376) = 0u;
    *(_OWORD *)(v9 + 392) = 0u;
    *(_OWORD *)(v9 + 408) = 0u;
    *(_OWORD *)(v9 + 424) = 0u;
    *(_OWORD *)(v9 + 433) = 0u;
    *((_WORD *)v9 + 2) = 2304;
    *(_DWORD *)uint64_t v9 = 0;
    v9[184] = 0;
  }
  *((void *)this + 5) = v9;
  int v10 = operator new(8uLL, MEMORY[0x263F8C180]);
  if (v10) {
    *int v10 = v2;
  }
  *((void *)this + 1) = v10;
}

void sub_22BA2C728(_Unwind_Exception *a1)
{
  int v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 368) = v6;
    operator delete(v6);
  }
  ASN1T_SuplMessage::~ASN1T_SuplMessage(v2);
  _Unwind_Resume(a1);
}

void SuplInitRecd::~SuplInitRecd(SuplInitRecd *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x230F4E5D0](v2, 0x20C4093837F09);
  }
  *((void *)this + 1) = 0;
  LcsTimer::Release((SuplInitRecd *)((char *)this + 496));
  double v3 = (void *)*((void *)this + 59);
  if (v3)
  {
    *((void *)this + 60) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 56);
  if (v4)
  {
    *((void *)this + 57) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 53);
  if (v5)
  {
    *((void *)this + 54) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 48);
  if (v6)
  {
    *((void *)this + 49) = v6;
    operator delete(v6);
  }
  unsigned __int8 v7 = (void *)*((void *)this + 45);
  if (v7)
  {
    *((void *)this + 46) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 42);
  if (v8)
  {
    *((void *)this + 43) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 39);
  if (v9)
  {
    *((void *)this + 40) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 36);
  if (v10)
  {
    *((void *)this + 37) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 31);
  if (v11)
  {
    *((void *)this + 32) = v11;
    operator delete(v11);
  }
  ASN1T_SETId::U::~U((SuplInitRecd *)((char *)this + 72));
  ASN1T_UlpMessage::~ASN1T_UlpMessage((SuplInitRecd *)((char *)this + 32));
}

void sub_22BA2C884(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

SuplVersionNegotiation *SuplInitRecd::FillHash(SimUtils *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v22[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  __p[0] = 0;
  __int16 v25 = 7275;
  uint64_t Instance = SimUtils::GetInstance(a1);
  SlpFqduint64_t n = (SuplVersionNegotiation *)SimUtils::GetSlpFqdn(Instance, (uint64_t)v22, a3, a4);
  int v10 = SlpFqdn;
  if (SlpFqdn)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "FillHash", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
    }
    goto LABEL_14;
  }
  uint64_t v13 = (unsigned __int8 *)SuplVersionNegotiation::GetInstance(SlpFqdn);
  int v14 = atomic_load(v13 + 1);
  BOOL v15 = v14 == 255;
  uint64_t v16 = 1;
  if (v15) {
    uint64_t v16 = 2;
  }
  int v17 = atomic_load(&v13[v16]);
  if (v17 == 1)
  {
    double v18 = (char **)((char *)a1 + 360);
LABEL_9:
    calculateHmac<SUPL_SHA_1>(__p, v18, (void **)a2);
    goto LABEL_10;
  }
  uint64_t v19 = SuplUtils::GetInstance((SuplUtils *)v13);
  double v18 = (char **)((char *)a1 + 360);
  if (*(unsigned char *)(v19 + 37)) {
    goto LABEL_9;
  }
  calculateHmac<SUPL_SHA_256>(__p, v18, (void **)a2);
LABEL_10:
  unint64_t v20 = *(void *)(a2 + 8) - *(void *)a2;
  if (v20 > 7)
  {
    if (v20 != 8) {
      *(void *)(a2 + 8) = *(void *)a2 + 8;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)a2, 8 - v20);
  }
LABEL_14:
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_22BA2CA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplInitRecd::ProcessSuplInit(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  BOOL v5 = a3 + 1;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *a3, (uint64_t)a3[1], (unsigned char *)a3[1] - (unsigned char *)*a3);
  v47[0] = &__p;
  v47[1] = 0;
  char v48 = 0;
  v43[0] = v47;
  v43[1] = a1 + 24;
  uint64_t v6 = (char *)*a3;
  unsigned __int8 v7 = *v5;
  if (v6 != *v5)
  {
    size_t v8 = v7 - v6;
    unint64_t v9 = *(void *)(a1 + 376);
    int v10 = *(char **)(a1 + 360);
    if (v9 - (unint64_t)v10 >= v7 - v6)
    {
      BOOL v15 = *(unsigned char **)(a1 + 368);
      size_t v16 = v15 - v10;
      if (v15 - v10 < v8)
      {
        int v17 = &v6[v16];
        if (v15 != v10)
        {
          memmove(*(void **)(a1 + 360), v6, v16);
          int v10 = *(char **)(a1 + 368);
        }
        if (v7 != v17) {
          memmove(v10, v17, v7 - v17);
        }
        double v18 = &v10[v7 - v17];
        goto LABEL_21;
      }
    }
    else
    {
      if (v10)
      {
        *(void *)(a1 + 368) = v10;
        operator delete(v10);
        unint64_t v9 = 0;
        *(void *)(a1 + 360) = 0;
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
      }
      if ((v8 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 2 * v9;
      if (2 * v9 <= v8) {
        uint64_t v11 = v7 - v6;
      }
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v11;
      }
      std::vector<unsigned char>::__vallocate[abi:ne180100]((void *)(a1 + 360), v12);
      int v10 = *(char **)(a1 + 368);
    }
    memmove(v10, v6, v8);
    double v18 = &v10[v8];
LABEL_21:
    *(void *)(a1 + 368) = v18;
    goto LABEL_22;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "ProcessSuplInit", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
  }
LABEL_22:
  int v19 = SuplMessage::Decode((SuplMessage *)v43);
  if (*(_WORD *)(a1 + 32) == 1)
  {
    if (v19)
    {
      size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "ProcessSuplInit", 770);
        size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
      }
      char v23 = 3;
      goto LABEL_44;
    }
    uint64_t v27 = *(void *)(a1 + 40);
    LOBYTE(v28) = *(unsigned char *)(a1 + 26);
    if (*(unsigned char *)(v27 + 247)) {
      int v28 = *(_DWORD *)(v27 + 560);
    }
    size_t IsLoggingAllowed = SuplVersionNegotiation::Instance::NegotiateNetInitiated((SuplVersionNegotiation::Instance *)*(unsigned __int8 *)(a1 + 26), v28);
    if (!IsLoggingAllowed)
    {
      size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v31 = mach_continuous_time();
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "SPL", 69, "ProcessSuplInit", 515);
        size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v32, 0, 1);
      }
      char v23 = 10;
      goto LABEL_44;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (!IsLoggingAllowed)
      {
LABEL_36:
        char v23 = 12;
LABEL_44:
        *(unsigned char *)(a1 + 18) = v23;
        goto LABEL_45;
      }
    }
    else
    {
      if (*(unsigned char *)(v27 + 184))
      {
        size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "SPL", 69, "ProcessSuplInit", 515);
          size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v34, 0, 1);
        }
        char v23 = 13;
        goto LABEL_44;
      }
      if (*(unsigned char *)(v27 + 5) == 9 && !*(unsigned char *)v27)
      {
        size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "SPL", 69, "ProcessSuplInit", 515);
          size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v40, 0, 1);
        }
        char v23 = 4;
        goto LABEL_44;
      }
      if (*(unsigned char *)(a1 + 49))
      {
        if (!*(void *)(a1 + 8)) {
          goto LABEL_46;
        }
        double v37 = *(unsigned __int8 **)(a1 + 40);
        if (v37[5] - 11 > 1 || v37[246])
        {
          if (v37[245] != 1 || !v37[480]) {
            goto LABEL_46;
          }
          char v38 = 20;
        }
        else
        {
          char v38 = 7;
        }
        *(unsigned char *)(a1 + 18) = v38;
        size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v41 = mach_continuous_time();
          unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "SPL", 69, "ProcessSuplInit", 515);
          size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v42, 0, 1);
        }
LABEL_45:
        *(unsigned char *)(a1 + 17) = 1;
LABEL_46:
        int Instance = SuplUtils::GetInstance((SuplUtils *)IsLoggingAllowed);
        SuplUtils::CopySlpSessionId(Instance, a1 + 384, a1 + 24);
        __int16 v26 = 0;
        goto LABEL_47;
      }
      size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (!IsLoggingAllowed) {
        goto LABEL_36;
      }
    }
    bzero(__str, 0x410uLL);
    uint64_t v29 = mach_continuous_time();
    unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "SPL", 69, "ProcessSuplInit", 515);
    size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v30, 0, 1);
    goto LABEL_36;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "SPL", 69, "ProcessSuplInit", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v25, 0, 1);
  }
  __int16 v26 = -5;
LABEL_47:
  if (__p)
  {
    uint64_t v45 = __p;
    operator delete(__p);
  }
  return v26;
}

void sub_22BA2D224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GLON_AlmBin2Int(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  unsigned int v2 = *(_DWORD *)(result + 16);
  *(unsigned char *)(a2 + 10) = (*(_DWORD *)(result + 12) >> 19) & 0x1F;
  *(unsigned char *)(a2 + 11) = (*(_DWORD *)(result + 32) >> 20) & 0x1F;
  int v3 = (v2 >> 2) & 0x3FFFF;
  if ((v2 & 0x80000) != 0) {
    int v3 = (v3 ^ 0xFFFDFFFF) + 1;
  }
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = *(_DWORD *)(result + 28);
  if ((v4 & 0x200000) != 0) {
    int v5 = (v4 & 0x3FFFFF ^ 0xFFDFFFFF) + 1;
  }
  else {
    int v5 = v4 & 0x3FFFFF;
  }
  *(_DWORD *)(a2 + 24) = v5;
  int v6 = *(_DWORD *)(result + 32);
  unsigned int v7 = v6 >> 25;
  if (v6 < 0) {
    LOBYTE(v7) = ((v6 >> 25) ^ 0xBF) + 1;
  }
  *(unsigned char *)(a2 + 28) = v7;
  int v8 = *(_DWORD *)(result + 24);
  int v9 = 32 * v8;
  __int16 v10 = v8 >> 11;
  if (((v9 >> 16) & 0x8000) != 0) {
    __int16 v10 = (v10 ^ 0x7FFF) + 1;
  }
  *(_WORD *)(a2 + 32) = v10;
  unsigned int v11 = *(_DWORD *)(result + 12);
  unsigned int v12 = *(_DWORD *)(result + 16);
  int v13 = (v11 >> 9) & 0x3FF;
  if ((v11 & 0x40000) != 0) {
    LOWORD(v13) = (v13 ^ 0xFDFF) + 1;
  }
  *(_WORD *)(a2 + 34) = v13;
  *(unsigned char *)(a2 + 36) = (v11 & 0x4000000) != 0;
  *(unsigned char *)(a2 + 37) = HIBYTE(v11) & 3;
  *(unsigned char *)(a2 + 38) = (v6 & 0x80000) != 0;
  unsigned int v14 = (v12 >> 20) & 0xFFE00FFF | ((v11 & 0x1FF) << 12);
  if ((v11 & 0x100) != 0) {
    unsigned int v14 = (v14 ^ 0xFFEFFFFF) + 1;
  }
  *(_DWORD *)(a2 + 12) = v14;
  int v15 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 30) = (*(_DWORD *)(result + 20) >> 19) & 0x9FFF | ((*(_WORD *)(result + 16) & 3) << 13);
  *(_DWORD *)(a2 + 16) = (v15 & 0x7FF) << 10;
  *(_DWORD *)(a2 + 16) = (*(_DWORD *)(result + 28) >> 22) & 0xFFE003FF | ((v15 & 0x7FF) << 10);
  return result;
}

uint64_t GLON_AlmInt2Bin(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 10);
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  unsigned int v3 = (((v2 - 1 - 5 * (((26215 * (v2 - 1)) >> 17) + ((26215 * (v2 - 1)) >> 31))) << 28)
      + 805306368) & 0x70000000;
  unsigned int v4 = ((v2 & 0x1F) << 19) & 0xFCFFFFFF | ((*(unsigned char *)(result + 37) & 3) << 24) | v3 | (*(unsigned __int8 *)(result + 36) << 26);
  __int16 v5 = *(_WORD *)(result + 34);
  if ((v5 & 0x200) != 0) {
    __int16 v5 = -v5 | 0x200;
  }
  unsigned int v6 = v4 & 0xFFF801FF | ((v5 & 0x3FF) << 9);
  *(_DWORD *)(a2 + 12) = v6;
  unsigned int v7 = *(_DWORD *)(result + 12);
  if ((v7 & 0x100000) != 0) {
    unsigned int v7 = -v7 | 0x100000;
  }
  *(_DWORD *)(a2 + 12) = v6 & 0xFFFFFE00 | (v7 >> 12) & 0x1FF;
  *(_DWORD *)(a2 + 16) = v7 << 20;
  int v8 = *(_DWORD *)(result + 20);
  if ((v8 & 0x20000) != 0) {
    int v8 = -v8 | 0x20000;
  }
  unsigned int v9 = *(unsigned __int16 *)(result + 30);
  *(_DWORD *)(a2 + 16) = (v9 >> 13) & 3 | (4 * (v8 & 0x3FFFF)) & 0xFFFFF | ((unsigned __int16)v7 << 20);
  *(_DWORD *)(a2 + 20) = v9 << 19;
  unsigned __int16 v10 = *(_WORD *)(result + 32);
  if ((v10 & 0x8000) != 0) {
    unsigned __int16 v10 = -v10 | 0x8000;
  }
  unsigned int v11 = v3 & 0xF80007FF | (v10 << 11) | 0x8000000;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 24) = v11 & 0xFFFFF800 | (*(_DWORD *)(result + 16) >> 10) & 0x7FF;
  int v12 = *(_DWORD *)(result + 16) << 22;
  *(_DWORD *)(a2 + 28) = v12;
  int v13 = *(_DWORD *)(result + 24);
  if ((v13 & 0x200000) != 0) {
    int v13 = -v13 | 0x200000;
  }
  unsigned int v14 = v12 & 0xFFC00000 | v13 & 0x3FFFFF;
  int v15 = *(unsigned __int8 *)(result + 28);
  if ((v15 & 0x40) != 0) {
    int v15 = -v15 | 0x40;
  }
  int v16 = ((*(unsigned char *)(result + 11) & 0x1F) << 20) | (v15 << 25) | (*(unsigned __int8 *)(result + 38) << 19);
  *(_DWORD *)(a2 + 28) = v14;
  *(_DWORD *)(a2 + 32) = v16;
  return result;
}

size_t lsim12_00TimersInit(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim12_00TimersInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  for (uint64_t i = 0; i != 30; i += 6)
  {
    unsigned int v3 = &g_LsimTmrArray[i];
    *((unsigned char *)v3 + 4) = 0;
    *((void *)v3 + 1) = 0;
    v3[4] = -1;
  }
  g_LsimTmrArray[0] = 8615942;
  *(uint64_t *)((char *)&qword_26AE534C8 + 4) = 0x83790600000001;
  unk_26AE534E4 = 0x837A0600000002;
  unk_26AE534FC = 0x837B0600000003;
  unk_26AE53514 = 0x837C0600000004;
  dword_26AE5352C = 5;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 73, "lsim12_00TimersInit");
    return LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
  }
  return result;
}

uint64_t lsim12_01StartTimer(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim12_01StartTimer");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  uint64_t v10 = 0;
  unsigned int v11 = &g_LsimTmrArray;
  while (v11[5] != a4 || *((unsigned char *)v11 + 4))
  {
    --v10;
    v11 += 6;
    if (v10 == -5)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MaxTmrIndex,SrcID,%u,SrcType,%u\n", v12);
        goto LABEL_12;
      }
      goto LABEL_13;
    }
  }
  if (AgpsFsmStartTimer(*v11, a3))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OsaTmr,Status,%hhu,TimerId,%u,SrcID,%u,SrcType,%u\n", v14, "LSM");
LABEL_12:
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 0, 1);
    }
LABEL_13:
    uint64_t v15 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim12_01StartTimer");
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
      return 0;
    }
    return v15;
  }
  *((unsigned char *)v11 + 4) = 1;
  *((void *)v11 + 1) = a1;
  void v11[4] = a2;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsaTmr,Start,Timer,%u,Index,%u,duration,%ums,SrcID,%u,SrcType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim12_01StartTimer", *v11, -(int)v10, a3, v11[4], v11[5]);
    LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v21 = mach_continuous_time();
  unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim12_01StartTimer");
  uint64_t v15 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
  return v15;
}

uint64_t lsim12_02StopTimer(int a1, int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim12_02StopTimer");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  uint64_t v6 = 0;
  unsigned int v7 = &qword_26AE534C8;
  while (1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*((unsigned char *)v7 - 12)) {
        unsigned __int16 v9 = "ACTIVE";
      }
      else {
        unsigned __int16 v9 = "NOT USED";
      }
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerIndex,%u,Timer,%u,SrcID,%u,SourceType,%u,Status,%s\n", (unint64_t)v8, "LSM", 68, "lsim12_02StopTimer", v6, *((_DWORD *)v7 - 4), *(_DWORD *)v7, *((_DWORD *)v7 + 1), v9);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 5, 1);
    }
    if (*((unsigned char *)v7 - 12) && *(_DWORD *)v7 == a1 && *((_DWORD *)v7 + 1) == a2) {
      break;
    }
    ++v6;
    v7 += 3;
    if (v6 == 5)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SrcID,%u,SrcType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim12_02StopTimer", 770, a1, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
      }
LABEL_19:
      uint64_t v17 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "lsim12_02StopTimer");
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
        return 0;
      }
      return v17;
    }
  }
  int v13 = AgpsFsmStopTimer(*((_DWORD *)v7 - 4));
  if (v13)
  {
    int v14 = v13;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OsaTmr,Status,%hhu,TimerId,%u,SrcID,%u,SrcType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 69, "lsim12_02StopTimer", 1545, v14, *((_DWORD *)v7 - 4), *(_DWORD *)v7, *((_DWORD *)v7 + 1));
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 0, 1);
    }
    *(v7 - 1) = 0;
    *(_DWORD *)unsigned int v7 = -1;
    goto LABEL_19;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsaTmr,Stop,Timer,%u,SourceID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim12_02StopTimer", *((_DWORD *)v7 - 4), *(_DWORD *)v7);
    LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
  }
  *((unsigned char *)v7 - 12) = 0;
  *(v7 - 1) = 0;
  *(_DWORD *)unsigned int v7 = -1;
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v23 = mach_continuous_time();
  unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "lsim12_02StopTimer");
  uint64_t v17 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
  return v17;
}

size_t lsim12_04TimersDeinit(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim12_04TimersDeinit");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  uint64_t v2 = 0;
  unsigned int v3 = &qword_26AE534C8;
  do
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*((unsigned char *)v3 - 12)) {
        unsigned __int16 v5 = "ACTIVE";
      }
      else {
        unsigned __int16 v5 = "NOT USED";
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerIndex,%u,TimerId,%u,SrcID,%u,SrcType,%u,Status,%s\n", (unint64_t)v4, "LSM", 68, "lsim12_04TimersDeinit", v2, *((_DWORD *)v3 - 4), *(_DWORD *)v3, *((_DWORD *)v3 + 1), v5);
      LbsOsaTrace_WriteLog(0xCu, __str, v6, 5, 1);
    }
    if (*((unsigned char *)v3 - 12))
    {
      int v7 = AgpsFsmStopTimer(*((_DWORD *)v3 - 4));
      if (v7)
      {
        int v8 = v7;
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OsaTmr,Status,%hhu,TimerId,%u,SrcID,%u,SrcType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 69, "lsim12_04TimersDeinit", 1545, v8, *((_DWORD *)v3 - 4), *(_DWORD *)v3, *((_DWORD *)v3 + 1));
          int v11 = 0;
LABEL_15:
          LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsaTmr,DeInit,Timer,%u,SrcID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim12_04TimersDeinit", *((_DWORD *)v3 - 4), *(_DWORD *)v3);
        int v11 = 4;
        goto LABEL_15;
      }
      *((unsigned char *)v3 - 12) = 0;
      *(v3 - 1) = 0;
      *unsigned int v3 = 0xFFFFFFFFLL;
      *((_DWORD *)v3 - 4) = 0;
    }
    ++v2;
    v3 += 3;
  }
  while (v2 != 5);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim12_04TimersDeinit");
    return LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return result;
}

uint64_t lsim12_05TimerExpiry(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim12_05TimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIMUP_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim12_05TimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  int v6 = *(_DWORD *)(a1 + 4);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim12_03TimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  uint64_t v9 = 0;
  size_t v10 = &qword_26AE534C8;
  while (1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*((unsigned char *)v10 - 12)) {
        uint64_t v12 = "ACTIVE";
      }
      else {
        uint64_t v12 = "NOT USED";
      }
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerIndex,%u,TimerId,%u,SrcID,%u,SourceType,%u,Status,%s\n", (unint64_t)v11, "LSM", 68, "lsim12_03TimerExpiry", v9, *((_DWORD *)v10 - 4), *(_DWORD *)v10, *((_DWORD *)v10 + 1), v12);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 5, 1);
    }
    if (*((_DWORD *)v10 - 4) == v6) {
      break;
    }
    ++v9;
    v10 += 3;
    if (v9 == 5)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimerId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim12_03TimerExpiry", 2052, v6);
        LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
      }
      goto LABEL_24;
    }
  }
  if (*(v10 - 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerId,%u,TimerIndex,%u,SrcID,%u,SrcType,%u,Expired\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim12_03TimerExpiry", *((_DWORD *)v10 - 4), v9, *(_DWORD *)v10, *((_DWORD *)v10 + 1));
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    ((void (*)(void, void))*(v10 - 1))(*(unsigned int *)v10, *((unsigned int *)v10 + 1));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SrcID,%u,TimerId,%u,TimerIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "lsim12_03TimerExpiry", 258, *(_DWORD *)v10, *((_DWORD *)v10 - 4), v9);
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
  }
  *((unsigned char *)v10 - 12) = 0;
  *(v10 - 1) = 0;
  *(_DWORD *)size_t v10 = -1;
LABEL_24:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "lsim12_03TimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim12_05TimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
  }
  return 0;
}

void ms_report_exception(int a1, int a2, int a3, char *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "NULLFileName");
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, a4);
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    size_t v10 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!size) {
        goto LABEL_14;
      }
      int v11 = v10[size--];
    }
    while (v11 != 92 && v11 != 47);
    if (size == -1)
    {
LABEL_14:
      std::string::operator=(&__p, &__str);
      goto LABEL_15;
    }
    std::string::basic_string(&v24, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v24;
LABEL_15:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  switch(a1)
  {
    case 2:
      if (a2 == 3)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unsigned __int16 v17 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx file,%s,line,%d\n", (unint64_t)v15, "PSP", 69, "ms_report_exception", 513, (const char *)p_p, a3);
          LbsOsaTrace_WriteLog(0x13u, (char *)&__str, v17, 0, 1);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        double v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v22 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unsigned __int16 v23 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx file,%s,line,%d,Code,%u\n", (unint64_t)v21, "PSP", 69, "ms_report_exception", 515, (const char *)v22, a3, a2);
        LbsOsaTrace_WriteLog(0x13u, (char *)&__str, v23, 0, 1);
      }
      break;
    case 1:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        unsigned __int16 v13 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned __int16 v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_23:
        unsigned __int16 v14 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx file,%s,line,%d,ErrCode,%u\n", (unint64_t)v12, "PSP", 69, "ms_report_exception", 770, (const char *)v13, a3, a2);
        LbsOsaTrace_WriteLog(0x13u, (char *)&__str, v14, 0, 1);
      }
      break;
    case 0:
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        break;
      }
      bzero(&__str, 0x410uLL);
      double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unsigned __int16 v13 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned __int16 v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      goto LABEL_23;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        double v18 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        unsigned __int16 v19 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned __int16 v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unsigned __int16 v20 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx file,%s,line,%d,Code,%u\n", (unint64_t)v18, "PSP", 69, "ms_report_exception", 770, (const char *)v19, a3, a2);
        LbsOsaTrace_WriteLog(0x13u, (char *)&__str, v20, 0, 1);
      }
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22BA2ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Comp_ErrorEllipse(double a1, double a2, double a3, double *a4, double *a5, double *a6)
{
  double v12 = a1 - a2;
  if (a1 - a2 >= 0.0 && a1 - a2 <= 0.0 && fabs(a3) <= a1 * 0.0001)
  {
    *a6 = 0.0;
    double v24 = sqrt(a1);
    *a4 = v24;
    *a5 = v24;
    return;
  }
  double v13 = atan2(a3 + a3, v12) * 0.5;
  __double2 v15 = __sincos_stret(v13);
  double cosval = v15.__cosval;
  double v16 = v13 * 57.2957795;
  double v17 = cosval * cosval;
  double v18 = v15.__sinval * (cosval + cosval) * a3;
  double v19 = a2 + cosval * cosval * v12 + v18;
  double v20 = a1 - v17 * v12 - v18;
  if (v19 < 0.000001) {
    double v19 = 0.000001;
  }
  if (v20 < 0.000001) {
    double v20 = 0.000001;
  }
  if (v19 > v20)
  {
    double v21 = v19;
  }
  else
  {
    double v16 = v16 + 90.0;
    double v21 = v20;
  }
  if (v19 <= v20) {
    double v20 = v19;
  }
  *a6 = v16;
  *a4 = sqrt(v21);
  *a5 = sqrt(v20);
  double v22 = *a6;
  double v23 = 180.0;
  if (*a6 >= 180.0)
  {
    double v23 = -180.0;
    goto LABEL_17;
  }
  if (v22 < 0.0) {
LABEL_17:
  }
    *a6 = v22 + v23;
}

uint64_t NK_Comp_DR_Res(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v22[1] = *(double *)MEMORY[0x263EF8340];
  *(_OWORD *)(a3 + 16736) = 0u;
  *(_OWORD *)(a3 + 16720) = 0u;
  *(_OWORD *)(a3 + 16704) = 0u;
  *(_OWORD *)(a3 + 16688) = 0u;
  uint64_t v21 = a3 + 13960;
  *(_OWORD *)(a3 + 16672) = 0u;
  *(_OWORD *)(a3 + 16656) = 0u;
  *(_OWORD *)(a3 + 16640) = 0u;
  *(_OWORD *)(a3 + 16624) = 0u;
  *(_OWORD *)(a3 + 16608) = 0u;
  *(_OWORD *)(a3 + 16592) = 0u;
  *(_OWORD *)(a3 + 16576) = 0u;
  *(_OWORD *)(a3 + 16560) = 0u;
  *(_OWORD *)(a3 + 16544) = 0u;
  *(_OWORD *)(a3 + 16528) = 0u;
  *(_OWORD *)(a3 + 16512) = 0u;
  *(_OWORD *)(a3 + 16496) = 0u;
  *(_OWORD *)(a3 + 16480) = 0u;
  *(_OWORD *)(a3 + 16464) = 0u;
  *(_OWORD *)(a3 + 16448) = 0u;
  uint64_t v20 = a3 + 1080;
  *(_OWORD *)(a3 + 16432) = 0u;
  uint64_t v9 = a2 + 8696;
  *(_OWORD *)(a3 + 16416) = 0u;
  uint64_t v10 = a3 + 14016;
  *(_OWORD *)(a3 + 16400) = 0u;
  uint64_t v11 = a3 + 19968;
  *(_OWORD *)(a3 + 0x4000) = 0u;
  uint64_t v17 = a3 + 26256;
  *(_OWORD *)(a3 + 16368) = 0u;
  uint64_t v18 = a3 + 4448;
  uint64_t v19 = a3 + 19968;
  do
  {
    int v12 = *(_DWORD *)(a1 + 4 * v8 + 76);
    uint64_t result = Is_Legal(v12);
    if (result
      && *(unsigned char *)(v10 + v8)
      && *(_DWORD *)(a3 + 12) == 11
      && !*(unsigned char *)(v11 + v8)
      && *(unsigned char *)(v9 + v8 + 1152))
    {
      if (v12 == 3 && *(_DWORD *)(a3 + 616) != *(_DWORD *)(a2 + 7344)) {
        *(double *)(v9 + v6 + 1344) = *(double *)(v9 + v6 + 1344)
      }
                                    + (*(double *)(a3 + 608) - *(double *)(a2 + 7336)) * 299792458.0;
      v22[0] = 0.0;
      uint64_t result = NK_Comp_ith_DR_Res(v8, v20, v21, v22, *(double *)(a3 + 8 * v8 + 120), *(double *)(a3 + v6 + 19584), *(double *)(v18 + 8 * v8), *(double *)(a3 + 656), *(double *)(v9 + v6 + 1344));
      *(double *)(a3 + v6 + 30912) = *(double *)(a3 + v6 + 30144) - *(double *)(v9 + v6 + 1808);
      if (*(unsigned char *)(v10 + v8 + 96)) {
        *(unsigned char *)(v17 + v8) = 1;
      }
      uint64_t v11 = v19;
    }
    if (*(unsigned char *)(a3 + v8 + 2912))
    {
      *(void *)(v9 + v6 + 1344) = *(void *)(a3 + v6 + 19584);
      *(unsigned char *)(v9 + v8 + 1152) = 1;
      BOOL v14 = *(int *)(a1 + 4 * v8 + 412) >= 14
         && *(unsigned __int8 *)(a1 + v8 + 604) >= *(unsigned __int8 *)(a2 + 4)
         && *(unsigned __int16 *)(a1 + 2 * v8 + 1036) >= *(unsigned __int16 *)(a2 + 14);
      *(unsigned char *)(v9 + v8 + 1728) = v14;
      *(void *)(v9 + v6 + 1808) = *(void *)(a3 + v6 + 30144);
    }
    else
    {
      *(void *)(v9 + v6 + 1344) = 0;
      uint64_t v15 = v9 + v8;
      *(unsigned char *)(v15 + 1152) = 0;
      double v16 = (void *)(v9 + v7);
      *double v16 = 0;
      v16[1] = 0;
      _DWORD v16[2] = 0;
      *(unsigned char *)(v15 + 1728) = 0;
    }
    ++v8;
    v7 += 24;
    v6 += 8;
  }
  while (v8 != 48);
  *(void *)(a2 + 8304) = *(void *)(a3 + 656);
  *(void *)(a2 + 7336) = *(void *)(a3 + 608);
  *(_DWORD *)(a2 + 7344) = *(_DWORD *)(a3 + 616);
  return result;
}

uint64_t Gnm08_02HandleRxData(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_RX_DATA_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm08_02HandleRxData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 16);
    if (*v4 != 122 || v4[1] != 120)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
LABEL_16:
        uint64_t v15 = 0;
LABEL_17:
        free(v4);
        return v15;
      }
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm08_02HandleRxData", 770);
      BOOL v14 = __str;
LABEL_15:
      LbsOsaTrace_WriteLog(0xBu, v14, v13, 2, 1);
      goto LABEL_16;
    }
    uint64_t v5 = *(unsigned __int16 *)(a1 + 24);
    unsigned __int16 v31 = 0;
    memset_s(__str, 0x7FCuLL, 0, 0x7FCuLL);
    int v34 = 0;
    char v35 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    __int16 v29 = 0;
    unsigned __int8 v30 = 0;
    unsigned int v6 = v4[2] - 79;
    BOOL v7 = v6 > 7;
    int v8 = (1 << v6) & 0xA1;
    if (!v7 && v8 != 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(v33, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: Recvd MC,%u,MID,%u,MIDE,%u,Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm08_01HandleZxMesg", v4[2], v4[3], v4[4], v5);
        LbsOsaTrace_WriteLog(0xBu, v33, v11, 4, 1);
      }
      Gnm06_01HandleTmZXData(v4, v5);
      goto LABEL_16;
    }
    char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    int PlcGnssHw = Gnm03_64GetPlcGnssHw();
    plc00_03DecodeMsg(2, (uint64_t)v4, v5, (uint64_t)__str, &v31, &v34, (unsigned __int8 *)&v29, PlcGnssHw);
    if (v34)
    {
      if (IsLoggingAllowed
        && plc00_15GetExtErrAsString(&v34, __s, 0x104uLL)
        && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(v33, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Err,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 87, "Gnm08_01HandleZxMesg", 776, v29, HIBYTE(v29), __s);
        LbsOsaTrace_WriteLog(0xBu, v33, v21, 2, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_16;
      }
      bzero(v33, 0x410uLL);
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v23 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: #%04hx ZXHeader %X%X%X%X%X%X%X%X\n", v22, "GNM", 87, "Gnm08_01HandleZxMesg");
LABEL_29:
      size_t v13 = v23;
      BOOL v14 = v33;
      goto LABEL_15;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v33, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: Recvd zx%c%c,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNM", 73, "Gnm08_01HandleZxMesg", v29, HIBYTE(v29), v30);
      LbsOsaTrace_WriteLog(0xBu, v33, v26, 4, 1);
    }
    switch(v29)
    {
      case 'X':
        uint64_t v27 = (uint64_t)Gnm26_21HandleXMessages((unsigned __int8 *)__str, (uint64_t)&v29);
        break;
      case 'D':
        uint64_t v27 = Gnm35_31HandleDMessages((unsigned __int8 *)__str, (uint64_t)&v29);
        break;
      case 'B':
        uint64_t v27 = Gnm38_02HandleBMessages((unsigned __int8 *)__str, (unsigned __int8 *)&v29, v24);
        break;
      default:
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
          goto LABEL_16;
        }
        bzero(v33, 0x410uLL);
        unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v23 = snprintf(v33, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u\n", v28);
        goto LABEL_29;
    }
    uint64_t v15 = v27;
    goto LABEL_17;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm08_02HandleRxData", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 0, 1);
  }
  return 0;
}

BOOL KFSt_DMeas_Update(unsigned int a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  v19[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a4 + 1) < 1) {
    return 0;
  }
  a4[16] = 0;
  if (*a4)
  {
    double v10 = *((double *)a4 + 4);
    double v11 = a7 - *((double *)a4 + 3);
    memset(v16, 0, sizeof(v16));
    double v15 = 0.0;
    *((double *)a4 + 6) = v11;
    uint64_t v17 = 0;
    *((void *)v16 + a1) = 0x3FF0000000000000;
    *((void *)v16 + a2) = 0xBFF0000000000000;
    *((double *)v16 + a3) = v11;
    umeas((BOOL)a5, a3, v10, (double *)v16, v19, v18, &v15, *((double *)a4 + 7));
    double v12 = v15;
    if (v15 <= 0.0)
    {
      int v13 = 0;
      *a4 = 0;
      a4[16] = 1;
      ++*a6;
    }
    else
    {
      double v12 = *((double *)a4 + 4) * (v15 * (v19[a3] * v19[a3]));
      int v13 = *a4;
    }
    *((double *)a4 + 8) = v12;
  }
  else
  {
    int v13 = 0;
  }
  return v13 != 0;
}

int8x8_t GLON_EphBin2Int(uint64_t a1, uint64_t a2, int32x4_t a3)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 24) = *(_DWORD *)(a1 + 52) >> 27;
  int v4 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a2 + 25) = (*(_DWORD *)(a1 + 12) >> 23) & 3;
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(a2 + 26) = (*(_DWORD *)(a1 + 24) & 0x800000) != 0;
  *(unsigned char *)(a2 + 27) = (v3 >> 19) & 3;
  unsigned int v6 = (v5 >> 19) & 0xF8001FFF | ((v4 & 0x3FFF) << 13);
  if ((v4 & 0x2000) != 0) {
    unsigned int v6 = (v6 ^ 0xFBFFFFFF) + 1;
  }
  *(_DWORD *)(a2 + 28) = v6;
  int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  int v9 = (v7 >> 14) & 0x1F;
  if ((v7 & 0x40000) != 0) {
    LOBYTE(v9) = (v9 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 52) = v9;
  unsigned int v10 = (v7 >> 19) & 0xFF001FFF | ((v8 & 0x7FF) << 13);
  if ((v8 & 0x400) != 0) {
    unsigned int v10 = (v10 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 40) = v10;
  if ((*(_DWORD *)(a1 + 28) & 0x2000) != 0) {
    unsigned int v11 = (((*(_DWORD *)(a1 + 32) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 28) & 0x3FFF) << 13)) ^ 0xFBFFFFFF) + 1;
  }
  else {
    unsigned int v11 = (*(_DWORD *)(a1 + 32) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 28) & 0x3FFF) << 13);
  }
  *(_DWORD *)(a2 + 32) = v11;
  int v13 = *(_DWORD *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  int v14 = (v12 >> 14) & 0x1F;
  if ((v12 & 0x40000) != 0) {
    LOBYTE(v14) = (v14 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 53) = v14;
  unsigned int v15 = (v12 >> 19) & 0xFF001FFF | ((v13 & 0x7FF) << 13);
  if ((v13 & 0x400) != 0) {
    unsigned int v15 = (v15 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 44) = v15;
  if ((*(_DWORD *)(a1 + 40) & 0x2000) != 0) {
    unsigned int v16 = (((*(_DWORD *)(a1 + 44) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 40) & 0x3FFF) << 13)) ^ 0xFBFFFFFF) + 1;
  }
  else {
    unsigned int v16 = (*(_DWORD *)(a1 + 44) >> 19) & 0xF8001FFF | ((*(_DWORD *)(a1 + 40) & 0x3FFF) << 13);
  }
  *(_DWORD *)(a2 + 36) = v16;
  int v18 = *(_DWORD *)(a1 + 36);
  unsigned int v17 = *(_DWORD *)(a1 + 40);
  int v19 = (v17 >> 14) & 0x1F;
  if ((v17 & 0x40000) != 0) {
    LOBYTE(v19) = (v19 ^ 0xEF) + 1;
  }
  *(unsigned char *)(a2 + 54) = v19;
  unsigned int v20 = (v17 >> 19) & 0xFF001FFF | ((v18 & 0x7FF) << 13);
  if ((v18 & 0x400) != 0) {
    unsigned int v20 = (v20 ^ 0xFF7FFFFF) + 1;
  }
  *(_DWORD *)(a2 + 48) = v20;
  unsigned int v21 = *(_DWORD *)(a1 + 48);
  if ((v21 & 0x4000000) != 0) {
    int v22 = ((v21 >> 5) & 0x3FFFFF ^ 0xFFDFFFFF) + 1;
  }
  else {
    int v22 = (v21 >> 5) & 0x3FFFFF;
  }
  *(_DWORD *)(a2 + 56) = v22;
  unsigned int v23 = *(_DWORD *)(a1 + 36);
  int v24 = (v23 >> 15) & 0x7FF;
  if ((v23 & 0x2000000) != 0) {
    LOWORD(v24) = (v24 ^ 0xFBFF) + 1;
  }
  *(_WORD *)(a2 + 60) = v24;
  int v25 = *(_DWORD *)(a1 + 48);
  if ((v25 & 0x10) != 0) {
    char v26 = (v25 & 0x1F ^ 0xEF) + 1;
  }
  else {
    char v26 = v25 & 0x1F;
  }
  *(unsigned char *)(a2 + 55) = v26;
  *(_WORD *)(a2 + 14) = (*(_DWORD *)(a1 + 12) >> 11) & 0xFFF;
  unsigned int v27 = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(a2 + 13) = BYTE2(v27) & 0x7F;
  a3.i64[0] = __PAIR64__(v23, v27);
  int16x8_t v28 = (int16x8_t)vshlq_u32((uint32x4_t)vzip1q_s32(a3, vdupq_lane_s32((int32x2_t)__PAIR64__(v23, v27), 1)), (uint32x4_t)xmmword_22BB44B30);
  *(int8x8_t *)v28.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v28), (int8x8_t)0x1000300010007);
  int8x8_t result = vmovn_s16(v28);
  *(_DWORD *)(a2 + 18) = result.i32[0];
  int v30 = *(_DWORD *)(a1 + 52);
  unsigned int v31 = *(_DWORD *)(a1 + 56);
  *(unsigned char *)(a2 + 22) = (v30 & 0x1000) != 0;
  *(unsigned char *)(a2 + 23) = BYTE1(v30) & 0xF;
  *(_WORD *)(a2 + 16) = (v31 >> 26) & 0x3F | ((v30 & 0x1F) << 6);
  *(unsigned char *)(a2 + 12) = (v31 >> 21) & 0x1F;
  return result;
}

uint64_t GLON_EphInt2Bin(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)result;
  unsigned int v2 = ((*(_WORD *)(result + 14) & 0xFFF) << 11) & 0xFE7FFFFF | ((*(unsigned char *)(result + 25) & 3) << 23) | 0x8000000;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  *(_DWORD *)(a2 + 12) = v2;
  unsigned int v3 = *(_DWORD *)(result + 40);
  if ((v3 & 0x800000) != 0) {
    unsigned int v3 = -v3 | 0x800000;
  }
  unsigned int v4 = v2 & 0xFFFFF800 | (v3 >> 13) & 0x7FF;
  unsigned int v5 = v3 << 19;
  char v6 = *(unsigned char *)(result + 52);
  if ((v6 & 0x10) != 0) {
    char v6 = -v6 | 0x10;
  }
  unsigned int v7 = v5 & 0xFFF83FFF | ((v6 & 0x1F) << 14);
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v7;
  unsigned int v8 = *(_DWORD *)(result + 28);
  if ((v8 & 0x4000000) != 0) {
    unsigned int v8 = -v8 | 0x4000000;
  }
  *(_DWORD *)(a2 + 16) = v7 & 0xFFFFC000 | (v8 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 20) = v8 << 19;
  int v9 = ((*(unsigned char *)(result + 18) & 7) << 24) | (*(unsigned __int8 *)(result + 26) << 23) | ((*(unsigned char *)(result + 13) & 0x7F) << 16) | 0x10000000;
  *(_DWORD *)(a2 + 24) = v9;
  unsigned int v10 = *(_DWORD *)(result + 44);
  if ((v10 & 0x800000) != 0) {
    unsigned int v10 = -v10 | 0x800000;
  }
  unsigned int v11 = v9 & 0xFFFFF800 | (v10 >> 13) & 0x7FF;
  unsigned int v12 = v10 << 19;
  char v13 = *(unsigned char *)(result + 53);
  if ((v13 & 0x10) != 0) {
    char v13 = -v13 | 0x10;
  }
  unsigned int v14 = v12 & 0xFFF83FFF | ((v13 & 0x1F) << 14);
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v14;
  unsigned int v15 = *(_DWORD *)(result + 32);
  if ((v15 & 0x4000000) != 0) {
    unsigned int v15 = -v15 | 0x4000000;
  }
  *(_DWORD *)(a2 + 28) = v14 & 0xFFFFC000 | (v15 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 32) = v15 << 19;
  __int16 v16 = *(_WORD *)(result + 60);
  if ((v16 & 0x400) != 0) {
    __int16 v16 = -v16 | 0x400;
  }
  int v17 = ((v16 & 0x7FF) << 15) | (*(unsigned __int8 *)(result + 19) << 26) | ((*(unsigned char *)(result + 20) & 3) << 12) | (*(unsigned __int8 *)(result + 21) << 11) | 0x18000000;
  *(_DWORD *)(a2 + 36) = v17;
  unsigned int v18 = *(_DWORD *)(result + 48);
  if ((v18 & 0x800000) != 0) {
    unsigned int v18 = -v18 | 0x800000;
  }
  char v19 = *(unsigned char *)(result + 54);
  if ((v19 & 0x10) != 0) {
    char v19 = -v19 | 0x10;
  }
  unsigned int v20 = v17 & 0xFFFFF800 | (v18 >> 13) & 0x7FF;
  int v21 = (v18 << 19) | ((v19 & 0x1F) << 14);
  *(_DWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 40) = v21;
  unsigned int v22 = *(_DWORD *)(result + 36);
  if ((v22 & 0x4000000) != 0) {
    unsigned int v22 = -v22 | 0x4000000;
  }
  *(_DWORD *)(a2 + 40) = v21 & 0xFFFFC000 | (v22 >> 13) & 0x3FFF;
  *(_DWORD *)(a2 + 44) = v22 << 19;
  *(_DWORD *)(a2 + 48) = 0x20000000;
  int v23 = *(_DWORD *)(result + 56);
  if ((v23 & 0x200000) != 0) {
    int v23 = -v23 | 0x200000;
  }
  char v24 = *(unsigned char *)(result + 55);
  if ((v24 & 0x10) != 0) {
    char v24 = -v24 | 0x10;
  }
  int v25 = v24 & 0x1F | (32 * (v23 & 0x3FFFFF)) | 0x20000000;
  unsigned int v26 = *(unsigned __int16 *)(result + 16);
  int v27 = (*(unsigned __int8 *)(result + 24) << 27) | (*(unsigned __int8 *)(result + 22) << 12) | ((*(unsigned char *)(result + 23) & 0xF) << 8) | (v26 >> 6) & 0x1F;
  *(_DWORD *)(a2 + 48) = v25;
  *(_DWORD *)(a2 + 52) = v27;
  *(_DWORD *)(a2 + 56) = (v26 << 26) | ((*(unsigned char *)(result + 12) & 0x1F) << 21) | ((*(unsigned char *)(result + 27) & 3) << 19);
  return result;
}

uint64_t Gnm12_11RejectGnssMsaReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSA_GNSS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm12_11RejectGnssMsaReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm13_00SendGnssReqCnf(0, *(_DWORD *)(a1 + 12), 2);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm12_11RejectGnssMsaReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_12ServiceGnssMsaReq(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned char v17[8] = 0;
  *(_DWORD *)&void v17[4] = 0;
  *(void *)&v17[12] = 0;
  v17[20] = 0;
  memset(&v17[24], 0, 32);
  *(_DWORD *)&v17[56] = 0xFFFF;
  *(_WORD *)&v17[60] = 0;
  *(_DWORD *)&v17[64] = 0;
  v17[69] = 0;
  char v16 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSA_GNSS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm12_12ServiceGnssMsaReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (a1)
  {
    uint64_t v4 = Gnm02_12ReqAssistInstn(*(_DWORD *)(a1 + 12), "LSIM_GNM_POSN_START_MSA_GNSS_REQ", 1, &v16);
    if (v4)
    {
      unsigned __int16 v5 = v4;
      if (*((void *)v4 + 1))
      {
        if (*((unsigned char *)v4 + 2) == 2)
        {
          *(_DWORD *)int v17 = *(_DWORD *)(a1 + 12);
          v17[5] = 1;
          v17[68] = v16;
          char v6 = Gnm12_02FillGnssReqParams((uint64_t)v17, (int *)(a1 + 20));
          int v7 = v17[68];
          if ((v6 & 1) == 0)
          {
            if (v17[68]) {
              Gnm10_28StopPositioning(v5);
            }
            Gnm02_21DeleteInstn(v5);
            int v13 = *(_DWORD *)(a1 + 12);
            int v14 = 2;
            goto LABEL_22;
          }
          if (v17[68] && v17[7] != *(unsigned __int8 *)(*((void *)v5 + 1) + 7)) {
            goto LABEL_20;
          }
          unsigned char v17[8] = *(unsigned char *)(a1 + 16);
          if (v17[8]) {
            Gnm02_24AbortAllNafSessions(8);
          }
          if (Gnm12_03SendAssistPosStart((uint64_t)v17, *v5))
          {
            uint64_t v8 = *((void *)v5 + 1);
            long long v9 = *(_OWORD *)&v17[48];
            *(_OWORD *)(v8 + 32) = *(_OWORD *)&v17[32];
            *(_OWORD *)(v8 + 48) = v9;
            *(void *)(v8 + 62) = *(void *)&v17[62];
            long long v10 = *(_OWORD *)&v17[16];
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v17;
            *(_OWORD *)(v8 + 16) = v10;
            return 0;
          }
          if (v7)
          {
LABEL_20:
            Gnm10_28StopPositioning(v5);
            Gnm02_21DeleteInstn(v5);
          }
        }
      }
    }
    int v13 = *(_DWORD *)(a1 + 12);
    int v14 = 0;
LABEL_22:
    Gnm13_00SendGnssReqCnf(v14, v13, 2);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm12_12ServiceGnssMsaReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_02FillGnssReqParams(uint64_t a1, int *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssID,%u,AsstAvail,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm12_02FillGnssReqParams", *((unsigned __int8 *)a2 + 36), *((unsigned __int8 *)a2 + 37));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (!*((unsigned char *)a2 + 36))
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssID\n");
    goto LABEL_11;
  }
  int v6 = *a2;
  if ((*a2 - 1) >= 3)
  {
    int v10 = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocType,%u\n", v24);
LABEL_11:
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    return 0;
  }
  *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 36);
  *(unsigned char *)(a1 + 58) = *((unsigned char *)a2 + 37) == 0;
  if (v6 == 3)
  {
    *(unsigned char *)(a1 + 58) = 0;
    *(void *)(a1 + 12) = *(void *)(a2 + 7);
  }
  else
  {
    *(void *)(a1 + 12) = *(void *)(a2 + 7);
    if (v6 == 1)
    {
      char v11 = 18;
      goto LABEL_15;
    }
  }
  char v11 = 20;
LABEL_15:
  *(unsigned char *)(a1 + 6) = v11;
  *(unsigned char *)(a1 + 69) = *((unsigned char *)a2 + 38);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Qos PosRepType,%u RespTime,%u,EarlyRespTime,%u,AgeLimit,%u,HorAcc,%u,VertAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm12_01PopulateQosParams", a2[4], a2[3], a2[6], a2[5], *((unsigned __int8 *)a2 + 6), *((unsigned __int8 *)a2 + 8));
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
  }
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 6);
  *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 8);
  switch(a2[4])
  {
    case 0:
      int v15 = 0;
      *(_WORD *)(a1 + 60) = 0;
      *(unsigned char *)(a1 + 7) = 0;
      *(void *)(a1 + 44) = 0;
      *(void *)(a1 + 36) = 0;
      goto LABEL_46;
    case 1:
    case 3:
      unsigned int v14 = HIWORD(dword_26AE54060);
      if ((*(unsigned char *)(a1 + 6) & 4) != 0)
      {
        if ((*(unsigned char *)(a1 + 6) & 2) == 0 && a2[5]) {
          goto LABEL_30;
        }
      }
      else if ((*(unsigned char *)(a1 + 6) & 2) == 0)
      {
        goto LABEL_30;
      }
      if ((a2[3] - 7200001) >= 0xFF922300)
      {
LABEL_30:
        int v15 = 0;
        goto LABEL_31;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 87, "Gnm12_01PopulateQosParams", 514);
        int v15 = 1;
        LbsOsaTrace_WriteLog(0xBu, __str, v19, 2, 1);
      }
      else
      {
        int v15 = 1;
      }
LABEL_31:
      unsigned int v20 = a2[3];
      if (v20 <= v14) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = v14;
      }
      *(_DWORD *)(a1 + 40) = v20 - v21;
      *(_WORD *)(a1 + 60) = 1;
      if (a2[4] == 3)
      {
        *(_DWORD *)(a1 + 44) = 0;
LABEL_39:
        *(unsigned char *)(a1 + 7) = 4;
        *(_DWORD *)(a1 + 36) = 1000;
        goto LABEL_45;
      }
      unsigned int v22 = a2[6];
      if (v22 && v22 < v20)
      {
        *(_DWORD *)(a1 + 44) = v22;
        goto LABEL_39;
      }
      *(unsigned char *)(a1 + 7) = 1;
      *(_DWORD *)(a1 + 44) = 0;
      *(_DWORD *)(a1 + 36) = 0;
LABEL_45:
      *(_DWORD *)(a1 + 48) = a2[5];
LABEL_46:
      double v23 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      *(void *)(a1 + 24) = (unint64_t)v23;
      *(_DWORD *)(a1 + 52) = (unint64_t)v23;
      return v15 ^ 1u;
    case 2:
      int v15 = 0;
      int v16 = a2[3];
      *(_DWORD *)(a1 + 36) = v16;
      *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 2);
      *(unsigned char *)(a1 + 7) = 2;
      *(_DWORD *)(a1 + 48) = 0;
      *(void *)(a1 + 40) = 0;
      if ((v16 - 7200001) < 0xFF922300)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
          goto LABEL_43;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespTime\n");
        goto LABEL_42;
      }
      goto LABEL_46;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosRep,%u\n", v25);
LABEL_42:
        int v15 = 1;
        LbsOsaTrace_WriteLog(0xBu, __str, v17, 2, 1);
      }
      else
      {
LABEL_43:
        int v15 = 1;
      }
      goto LABEL_46;
  }
}

BOOL Gnm12_03SendAssistPosStart(uint64_t a1, __int16 a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)gnssOsa_Calloc("Gnm12_03SendAssistPosStart", 259, 1, 0x38uLL);
  unsigned __int16 v5 = v4;
  if (!v4) {
    return v5 != 0;
  }
  *((_WORD *)v4 + 6) = a2;
  v4[49] = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 28);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int32x2_t *)(v4 + 20) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_f64(vcvtq_f64_u64(v7), (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL))));
  unsigned int v8 = *(_DWORD *)(a1 + 48);
  if (v8 > 0x5265C00) {
    unsigned int v8 = 0;
  }
  *((_DWORD *)v4 + 10) = v8;
  int v9 = *(unsigned __int8 *)(a1 + 7);
  if (v9 == 2)
  {
    char v10 = 0;
    *((_WORD *)v4 + 14) = *(_WORD *)(a1 + 60);
    *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 36);
  }
  else
  {
    *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 36);
    if (v9 == 4)
    {
      v4[16] = (dword_26AE53244 & 0x1000) == 0;
      char v10 = 2;
    }
    else if (v9 == 1)
    {
      v4[16] = (dword_26AE53244 & 0x1000) == 0;
      char v10 = 1;
    }
    else
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      char v10 = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm12_03SendAssistPosStart", 770, *(unsigned __int8 *)(a1 + 7));
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 2, 1);
        char v10 = 0;
      }
    }
  }
  unsigned char v5[15] = v10;
  unsigned int v14 = *(_DWORD *)(a1 + 40);
  BOOL v15 = v14 >= 0x32;
  unsigned int v16 = v14 - 50;
  if (v15) {
    *((_DWORD *)v5 + 9) = v16;
  }
  unsigned int v17 = *(unsigned __int8 *)(a1 + 56);
  if (v17 == 255) {
    double v18 = 0.0;
  }
  else {
    double v18 = (pow(1.1, (double)v17) + -1.0) * 10.0;
  }
  unsigned int v19 = *(unsigned __int8 *)(a1 + 57);
  if (v19 == 255)
  {
    uint64_t v21 = qword_26AE53258;
    double v20 = 0.0;
    if (*(double *)&qword_26AE53258 <= 0.0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  double v20 = (pow(1.025, (double)v19) + -1.0) * 45.0;
  uint64_t v21 = qword_26AE53258;
  if (*(double *)&qword_26AE53258 > 0.0)
  {
    if (v20 == 0.0 || (v20 > 0.0 ? (BOOL v22 = *(double *)&qword_26AE53258 < v20) : (BOOL v22 = 0), v22)) {
LABEL_27:
    }
      double v20 = *(double *)&v21;
  }
LABEL_28:
  int v23 = (int)(v18 + 1.0);
  if (v18 > 65535.0) {
    LOWORD(v23) = -1;
  }
  if (v18 <= 0.0) {
    LOWORD(v23) = 0;
  }
  *((_WORD *)v5 + 22) = v23;
  int v24 = (int)(v20 + 1.0);
  if (v20 > 65535.0) {
    LOWORD(v24) = -1;
  }
  if (v20 <= 0.0) {
    LOWORD(v24) = 0;
  }
  *((_WORD *)v5 + 23) = v24;
  v5[54] = *(unsigned char *)(a1 + 69);
  v5[48] = 0;
  if ((*(unsigned char *)(a1 + 6) & 2) != 0)
  {
    char v25 = 4;
    goto LABEL_40;
  }
  if ((*(unsigned char *)(a1 + 6) & 4) != 0)
  {
    char v25 = 2;
LABEL_40:
    v5[48] = v25;
  }
  v5[50] = *(unsigned char *)(a1 + 20);
  v5[14] = -*(unsigned char *)(a1 + 68);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_REQ =>GNCS Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm12_03SendAssistPosStart", *((unsigned __int16 *)v5 + 6));
    LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
  }
  AgpsSendFsmMsg(128, 130, 8519680, v5);
  return v5 != 0;
}

uint64_t Gnm12_13RejectGnssMsbReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSB_GNSS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm12_13RejectGnssMsbReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm13_00SendGnssReqCnf(0, *(_DWORD *)(a1 + 12), 4);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm12_13RejectGnssMsbReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_14ServiceGnssMsbReq(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned char v17[8] = 0;
  *(_DWORD *)&void v17[4] = 0;
  *(void *)&v17[12] = 0;
  v17[20] = 0;
  memset(&v17[24], 0, 32);
  *(_DWORD *)&v17[56] = 0xFFFF;
  *(_WORD *)&v17[60] = 0;
  *(_DWORD *)&v17[64] = 0;
  v17[69] = 0;
  char v16 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSB_GNSS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm12_14ServiceGnssMsbReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (a1)
  {
    uint64_t v4 = Gnm02_12ReqAssistInstn(*(_DWORD *)(a1 + 12), "LSIM_GNM_POSN_START_MSB_GNSS_REQ", 1, &v16);
    if (v4)
    {
      unsigned __int16 v5 = v4;
      if (*((void *)v4 + 1))
      {
        if (*((unsigned char *)v4 + 2) == 2)
        {
          *(_DWORD *)unsigned int v17 = *(_DWORD *)(a1 + 12);
          v17[5] = 1;
          v17[68] = v16;
          char v6 = Gnm12_02FillGnssReqParams((uint64_t)v17, (int *)(a1 + 20));
          int v7 = v17[68];
          if ((v6 & 1) == 0)
          {
            if (v17[68]) {
              Gnm10_28StopPositioning(v5);
            }
            Gnm02_21DeleteInstn(v5);
            int v13 = *(_DWORD *)(a1 + 12);
            int v14 = 2;
            goto LABEL_22;
          }
          if (v17[68] && v17[7] != *(unsigned __int8 *)(*((void *)v5 + 1) + 7)) {
            goto LABEL_20;
          }
          unsigned char v17[8] = *(unsigned char *)(a1 + 16);
          if (v17[8]) {
            Gnm02_24AbortAllNafSessions(8);
          }
          if (Gnm12_03SendAssistPosStart((uint64_t)v17, *v5))
          {
            uint64_t v8 = *((void *)v5 + 1);
            long long v9 = *(_OWORD *)&v17[48];
            *(_OWORD *)(v8 + 32) = *(_OWORD *)&v17[32];
            *(_OWORD *)(v8 + 48) = v9;
            *(void *)(v8 + 62) = *(void *)&v17[62];
            long long v10 = *(_OWORD *)&v17[16];
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v17;
            *(_OWORD *)(v8 + 16) = v10;
            return 0;
          }
          if (v7)
          {
LABEL_20:
            Gnm10_28StopPositioning(v5);
            Gnm02_21DeleteInstn(v5);
          }
        }
      }
    }
    int v13 = *(_DWORD *)(a1 + 12);
    int v14 = 0;
LABEL_22:
    Gnm13_00SendGnssReqCnf(v14, v13, 4);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm12_14ServiceGnssMsbReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_15AbortReq(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_ABORT_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm12_15AbortReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (a1)
  {
    InstnFromAssistId = (unsigned __int16 *)Gnm02_33GetInstnFromAssistId(*(_DWORD *)(a1 + 12), 1);
    if (!InstnFromAssistId)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm12_15AbortReq", 2052, *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 2, 1);
      }
      int v8 = *(_DWORD *)(a1 + 12);
      int v9 = 4;
      goto LABEL_14;
    }
    unsigned __int16 v5 = InstnFromAssistId;
    if (!Gnm10_28StopPositioning(InstnFromAssistId))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Stop Posn Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm12_15AbortReq");
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      }
      Gnm02_21DeleteInstn(v5);
      int v8 = *(_DWORD *)(a1 + 12);
      int v9 = 0;
LABEL_14:
      Gnm13_03SendAbortCnf(v8, v9);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm12_15AbortReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_16RejectAidStatusReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm12_16RejectAidStatusReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm13_08SendErrAssistStatus();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm12_16RejectAidStatusReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_17HandleAidStatusReq(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm12_17HandleAidStatusReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      if (v4 >= 5) {
        unsigned int v4 = 5;
      }
      if (AgpsFsmStartTimer(0x802A06u, 1000 * v4)
        && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm12_17HandleAidStatusReq", 1544);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
    }
    LOBYTE(g_AssistReq) = 1;
    HIDWORD(g_AssistReq) = *(_DWORD *)(a1 + 16);
    Gnm14_03SendPosEstimateReq();
    Gnm17_13SendPollAssistStatus();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm12_17HandleAidStatusReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
  }
  return 0;
}

uint64_t Gnm12_18HandleAssistTimeout(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_ASSIST_STATUS_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm12_18HandleAssistTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (a1)
  {
    if ((_BYTE)g_AssistReq)
    {
      Gnm13_07SendAidStatusCnf(0, v2, v3, v4, v5, v6);
      LOBYTE(g_AssistReq) = 0;
    }
    if (BYTE1(g_AssistReq))
    {
      Gnm13_13HandleAssistStatus(0);
      BYTE1(g_AssistReq) = 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v10 = 89;
      if ((_BYTE)g_AssistReq) {
        uint64_t v11 = 89;
      }
      else {
        uint64_t v11 = 78;
      }
      if (!BYTE1(g_AssistReq)) {
        uint64_t v10 = 78;
      }
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: InternalReq,%c,ExternalReq,%c\n", (unint64_t)v9, "GNM", 73, "Gnm12_18HandleAssistTimeout", v10, v11);
      int v13 = 4;
      goto LABEL_17;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 69, "Gnm12_18HandleAssistTimeout", 517);
    int v13 = 0;
LABEL_17:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
  }
  return 0;
}

uint64_t DD_Delete_Bad_GAL_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 2884;
  uint64_t v7 = (_WORD *)(result + 13046);
  uint64_t v8 = result + 13009;
  double v9 = a2 + 2092;
  do
  {
    if (*(unsigned char *)(a2[2074] + v5))
    {
      *(void *)(v8 + 8 * v5 + 109) = 0x400040004000400;
      v7[180] = 1024;
      v7[216] = 1024;
      *(unsigned char *)(result + 17908 + v5) = 0;
      uint64_t v10 = (_OWORD *)(v8 + v2 + 723);
      *(_OWORD *)((char *)v10 + 76) = 0uLL;
      v10[3] = 0uLL;
      void v10[4] = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      *uint64_t v10 = 0uLL;
      *(unsigned char *)(a2[2074] + v5) = 0;
      *(unsigned char *)(a2[2072] + v5) = 0;
      *(unsigned char *)(a2[2076] + v5) = 0;
      *(void *)((char *)v9 + 79) = 0;
      *((_OWORD *)v9 + 3) = 0uLL;
      *((_OWORD *)v9 + 4) = 0uLL;
      *((_OWORD *)v9 + 1) = 0uLL;
      *((_OWORD *)v9 + 2) = 0uLL;
      *(_OWORD *)double v9 = 0uLL;
      *(unsigned char *)(a2[2082] + v5) = 0;
      *(unsigned char *)(a2[2079] + v5) = 1;
      uint64_t v11 = p_NV + 8 * v3;
      *(void *)(v11 + 9400) = 0xFFFFFFFFLL;
      *(_OWORD *)(v11 + 9408) = 0uLL;
      *(_OWORD *)(v11 + 9424) = 0uLL;
      *(_OWORD *)(v11 + 9440) = 0uLL;
      *(_OWORD *)(v11 + 9456) = 0uLL;
      *(_OWORD *)(v11 + 9472) = 0uLL;
      *(void *)(v11 + 9487) = 0;
    }
    if (*(unsigned char *)(a2[2075] + v5))
    {
      *(unsigned char *)(v8 + v5) = -1;
      *uint64_t v7 = 2048;
      *(_WORD *)(result + 36 * gal_E1B_AlmSvId2SubframeId[v5] + 17040) = 0;
      *(unsigned char *)(a2[2075] + v5) = 0;
      *(unsigned char *)(a2[2073] + v5) = 0;
      *(unsigned char *)(a2[2078] + v5) = 0;
      *(_DWORD *)((char *)v6 + 31) = 0;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *(unsigned char *)(a2[2082] + v5) = 0;
      uint64_t v12 = p_NV + 8 * v4;
      *(void *)(v12 + 7672) = 0xFFFFFFFFLL;
      *(_OWORD *)(v12 + 7680) = 0uLL;
      *(_OWORD *)(v12 + 7696) = 0uLL;
      *(_DWORD *)(v12 + 7711) = 0;
    }
    ++v5;
    v4 += 6;
    v3 += 12;
    uint64_t v6 = (void *)((char *)v6 + 36);
    ++v7;
    v9 += 11;
    v2 += 92;
  }
  while (v5 != 36);
  return result;
}

uint64_t DD_Delete_Inhib_GAL_Data(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 2884;
  uint64_t v8 = (_WORD *)(a2 + 13046);
  uint64_t v9 = a2 + 13009;
  uint64_t v10 = a3 + 2092;
  do
  {
    if (*(unsigned char *)(result + v6))
    {
      *(void *)(v9 + 8 * v6 + 109) = 0x400040004000400;
      v8[180] = 1024;
      v8[216] = 1024;
      *(unsigned char *)(a2 + 17908 + v6) = 0;
      uint64_t v11 = (_OWORD *)(v9 + v3 + 723);
      *(_OWORD *)((char *)v11 + 76) = 0uLL;
      v11[3] = 0uLL;
      void v11[4] = 0uLL;
      v11[1] = 0uLL;
      v11[2] = 0uLL;
      *uint64_t v11 = 0uLL;
      *(unsigned char *)(a3[2074] + v6) = 0;
      *(unsigned char *)(a3[2072] + v6) = 0;
      *(unsigned char *)(a3[2076] + v6) = 0;
      *(void *)((char *)v10 + 79) = 0;
      *((_OWORD *)v10 + 3) = 0uLL;
      *((_OWORD *)v10 + 4) = 0uLL;
      *((_OWORD *)v10 + 1) = 0uLL;
      *((_OWORD *)v10 + 2) = 0uLL;
      *(_OWORD *)uint64_t v10 = 0uLL;
      *(unsigned char *)(a3[2077] + v6) = 0;
      *(void *)((char *)v10 + 3247) = 0;
      *((_OWORD *)v10 + 202) = 0uLL;
      *((_OWORD *)v10 + 201) = 0uLL;
      *((_OWORD *)v10 + 200) = 0uLL;
      *((_OWORD *)v10 + 199) = 0uLL;
      *((_OWORD *)v10 + 198) = 0uLL;
      *(unsigned char *)(a3[2082] + v6) = 0;
      *(unsigned char *)(a3[2079] + v6) = 1;
      uint64_t v12 = p_NV + 8 * v5;
      *(void *)(v12 + 9400) = 0xFFFFFFFFLL;
      *(_OWORD *)(v12 + 9408) = 0uLL;
      *(_OWORD *)(v12 + 9424) = 0uLL;
      *(_OWORD *)(v12 + 9440) = 0uLL;
      *(_OWORD *)(v12 + 9456) = 0uLL;
      *(_OWORD *)(v12 + 9472) = 0uLL;
      *(void *)(v12 + 9487) = 0;
      *(unsigned char *)(v9 + v6) = -1;
      *uint64_t v8 = 2048;
      *(_WORD *)(a2 + 36 * gal_E1B_AlmSvId2SubframeId[v6] + 17040) = 0;
      *(unsigned char *)(a3[2075] + v6) = 0;
      *(unsigned char *)(a3[2073] + v6) = 0;
      *(unsigned char *)(a3[2078] + v6) = 0;
      *(_DWORD *)((char *)v7 + 31) = 0;
      *(_OWORD *)uint64_t v7 = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      uint64_t v13 = p_NV + 8 * v4;
      *(void *)(v13 + 7672) = 0xFFFFFFFFLL;
      *(_OWORD *)(v13 + 7680) = 0uLL;
      *(_OWORD *)(v13 + 7696) = 0uLL;
      *(_DWORD *)(v13 + 7711) = 0;
    }
    ++v6;
    v5 += 12;
    v4 += 6;
    uint64_t v7 = (void *)((char *)v7 + 36);
    ++v8;
    v10 += 11;
    v3 += 92;
  }
  while (v6 != 36);
  return result;
}

uint64_t DD_Check_Age_GAL_Data(int a1, unsigned int a2, void *a3)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  char v7 = 0;
  uint64_t v8 = (char *)a3 + 39302;
  uint64_t v9 = (int *)(a3 + 2884);
  uint64_t v10 = (int *)(a3 + 2092);
  int v28 = a1 + 900;
  if (a1 <= 86400) {
    int v11 = 86400;
  }
  else {
    int v11 = a1;
  }
  int v12 = v11 - 86400;
  uint64_t v13 = a3[2076];
  unsigned int v27 = (a1 - a2 / 0x3E8) & ~((int)(a1 - a2 / 0x3E8) >> 31);
  do
  {
    if (!*(unsigned char *)(v13 + v5)) {
      goto LABEL_17;
    }
    int v14 = *v10;
    if (*v10 < v12 && v14 >= 1)
    {
LABEL_15:
      char v7 = 1;
      *(unsigned char *)(a3[2074] + v5) = 1;
      goto LABEL_17;
    }
    if (v14)
    {
      if (v14 > v28)
      {
        ++v6;
        if (!*v8) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *uint64_t v10 = v27;
    }
LABEL_17:
    ++v5;
    v10 += 22;
  }
  while (v5 != 36);
  if (v6 >= 1)
  {
    EvLog_v("DD_Check_Age_GAL_Data: Deleting future EPH [%d]", v6);
    if (*v8) {
      EvLog_v("DD_Check_Age_GAL_Data: Deleting future EPH Skipped [%d]", v6);
    }
  }
  uint64_t v26 = v9;
  uint64_t v16 = 0;
  int v17 = 0;
  if (a1 <= 15724800) {
    int v18 = 15724800;
  }
  else {
    int v18 = a1;
  }
  int v19 = v18 - 15724800;
  do
  {
    if (*(unsigned char *)(a3[2078] + v16))
    {
      int v20 = *v9;
      if (*v9 >= v19 || v20 < 1)
      {
        if (v20)
        {
          if (v20 > v28)
          {
            ++v17;
            EvLog_v("DD_Check_Age_GAL_Data:  Future ALM deleted SV %d age %d thresh %d", v16 + 1, (a1 - v20) / 604800, 0);
            if (!*v8)
            {
              char v7 = 1;
              *(unsigned char *)(a3[2075] + v16) = 1;
            }
          }
        }
        else
        {
          *uint64_t v9 = v27;
        }
      }
      else
      {
        char v7 = 1;
        *(unsigned char *)(a3[2075] + v16) = 1;
        EvLog_v("DD_Check_Age_GAL_Data:  Old ALM deleted SV %d age %d thresh %d", v16 + 1, (a1 - v20) / 604800, (a1 - v19) / 604800);
      }
    }
    ++v16;
    v9 += 9;
  }
  while (v16 != 36);
  if (v17 >= 1)
  {
    EvLog_v("DD_Check_Age_GAL_Data: Deleting future ALM [%d]", v17);
    if (*v8) {
      EvLog_v("DD_Check_Age_GAL_Data: Deleting future ALM Skipped [%d]", v17);
    }
  }
  if (v26[325])
  {
    BOOL v22 = (unsigned int *)(v26 + 324);
    int v23 = v26[324];
    if (v23 >= a1 - 604800 || v23 < 1)
    {
      if (v23)
      {
        if (v23 > v28)
        {
          EvLog_v("DD_Check_Age_GAL_Data: Deleting future GGTO %d  %d", *v22, v28);
          if (!*v8) {
            goto LABEL_51;
          }
          EvLog("DD_Check_Age_GAL_Data: Deleting future GGTO Skipped [1]");
        }
      }
      else
      {
        *BOOL v22 = v27;
      }
    }
    else
    {
LABEL_51:
      *(void *)((char *)v26 + 1302) = 0;
      *(void *)BOOL v22 = 0;
      a3[3048] = 0;
      a3[3050] = 0;
      a3[3049] = 0;
      *(void *)((char *)a3 + 24406) = 0;
    }
  }
  return v7 & 1;
}

uint64_t DD_Save_New_GAL_INAV_Eph(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 13732;
  uint64_t v33 = a2 + 13046;
  uint64_t v32 = a2 + 13009;
  uint64_t v7 = a2 + 17944;
  uint64_t v8 = 2092;
  uint64_t v9 = 23106;
  uint64_t v10 = 23072;
  unsigned int v35 = result;
  do
  {
    if (!*(unsigned char *)(v7 + v5)) {
      goto LABEL_40;
    }
    __int16 v11 = *(_WORD *)(v6 + 80);
    int v12 = *(unsigned __int8 *)(v7 + v5 - 36);
    if (v12 == 1 && (v11 & 0x200) != 0)
    {
      uint64_t v20 = a3[2070];
LABEL_35:
      *(unsigned char *)(v20 + v5) = 0;
      goto LABEL_36;
    }
    uint64_t v20 = a3[2070];
    if (v12 == 2 && (v11 & 0x800) != 0) {
      goto LABEL_35;
    }
    BOOL v16 = (*(_WORD *)(v6 + 80) & 0xA00) == 0 || v12 != 3;
    if (v16 && *(unsigned char *)(v20 + v5) == 0)
    {
      uint64_t v18 = a3[2078];
      if (*(unsigned char *)(v18 + v5))
      {
        int v19 = *(_DWORD *)((char *)a3 + v10);
        if (v19 + 3600 <= (int)result
          || (v12 != 1 || (*((unsigned char *)a3 + v9) & 1) == 0)
          && (v12 != 2 || (*((unsigned char *)a3 + v9 - 1) & 1) == 0)
          && (v12 != 3 || ((*((unsigned char *)a3 + v9 - 1) | *((unsigned char *)a3 + v9)) & 1) == 0))
        {
          if (v19 + 100 < (int)result)
          {
            *(unsigned char *)(a3[2073] + v5) = 0;
            *(unsigned char *)(v18 + v5) = 0;
            *(unsigned char *)(v32 + v5) = -1;
            *(_WORD *)(v33 + 2 * v5) = 2048;
            *(_WORD *)(a2 + 36 * gal_E1B_AlmSvId2SubframeId[v5] + 17040) = 0;
            uint64_t v20 = a3[2070];
          }
          *(unsigned char *)(v20 + v5) = 1;
LABEL_43:
          int v21 = 1;
          *(_DWORD *)(a3[2071] + v4) = 1;
          *(_DWORD *)(a2 + 13736) = 4;
          GAL_I_EphBin2Int(v6, (uint64_t)&a3[v8]);
          uint64_t result = v35;
          *(unsigned char *)(a3[2072] + v5) = 1;
          *(unsigned char *)(a3[2076] + v5) = 1;
          LODWORD(a3[v8]) = v35;
          *(unsigned char *)(a3[2081] + v5) = 0;
          goto LABEL_37;
        }
        goto LABEL_35;
      }
    }
    *(unsigned char *)(v20 + v5) = v16;
    if (v16) {
      goto LABEL_43;
    }
LABEL_36:
    int v21 = 0;
    *(_DWORD *)(a3[2071] + v4) = 2;
LABEL_37:
    *(_DWORD *)(v6 + 88) = 0;
    *(unsigned char *)(v7 + v5) = 0;
    *(unsigned char *)(v7 + v5 - 36) &= 0xFCu;
    if ((int)result >= 1 && v21)
    {
      *(unsigned char *)(a3[2079] + v5) = 1;
      Core_Save_GAL_Eph((v5 + 1), 0, (uint64_t)&a3[v8]);
      uint64_t result = v35;
    }
LABEL_40:
    ++v5;
    v8 += 11;
    v6 += 92;
    v4 += 20;
    v9 += 36;
    v10 += 36;
  }
  while (v5 != 36);
  uint64_t v22 = 0;
  LODWORD(v23) = 0;
  uint64_t v24 = a3[2070];
  uint64_t v25 = p_NV;
  uint64_t v26 = p_NV + 7600;
  int v27 = *(_DWORD *)(v24 + 32);
  long long v28 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)(p_NV + 7612) = *(_OWORD *)v24;
  *(_OWORD *)(v26 + 28) = v28;
  *(_DWORD *)(v25 + 7644) = v27;
  uint64_t v29 = v25 + 7608;
  __int16 v30 = -9871;
  do
  {
    int v31 = *(unsigned __int8 *)(v29 + v22) ^ HIBYTE(v30);
    __int16 v30 = -12691 * (v30 + (*(unsigned __int8 *)(v29 + v22) ^ HIBYTE(v30))) + 22719;
    uint64_t v23 = (v23 + v31);
    ++v22;
  }
  while (v22 != 40);
  *(void *)(v25 + 7600) = v23;
  return result;
}

uint64_t DD_Proc_GAL_INAV_Data(uint64_t result, char *a2, int a3, int *a4, unsigned int *a5, uint64_t a6, void *a7)
{
  unsigned int v11 = a2;
  int v12 = (unsigned __int16 *)result;
  v213[2] = *MEMORY[0x263EF8340];
  if (a3 == 8)
  {
    char v13 = 1;
    goto LABEL_5;
  }
  if (a3 == 10)
  {
    char v13 = 2;
LABEL_5:
    *((unsigned char *)a5 + a2 + 17908) |= v13;
  }
  unsigned int v14 = *(unsigned __int16 *)result;
  uint64_t v15 = v14 >> 10;
  if (v15 >= 0xB && v15 != 63)
  {
    *(unsigned char *)(a7[2082] + a2) = 1;
    return result;
  }
  if (v15 > 0xA) {
    return (uint64_t)EvLog_v("DD_Proc_GAL_INAV_Data:  SV %d WordType %d Dummy Message: 0x%x 0x%x 0x%x 0x%x ...");
  }
  BOOL v16 = (char *)a5 + a2 + 17908;
  int v17 = *v16;
  if (v17 != 2)
  {
    if (v17 == 1 && *(int *)a6 >= 5)
    {
      int v18 = (int)(*(double *)(a6 + 24) + 0.5);
      int v19 = 2;
      switch((((v18 % 30) & 0xFFFFFFFE) - 2) >> 1)
      {
        case 0u:
          goto LABEL_41;
        case 1u:
          goto LABEL_14;
        case 2u:
          goto LABEL_40;
        case 3u:
          int v22 = v18 % 720;
          goto LABEL_26;
        case 4u:
          int v25 = v18 % 720;
          goto LABEL_32;
        case 0xAu:
          goto LABEL_18;
        case 0xBu:
          goto LABEL_20;
        case 0xCu:
          goto LABEL_22;
        default:
          if ((v18 % 30 - 28) < 0xFFFFFFE6) {
            goto LABEL_29;
          }
          goto LABEL_42;
      }
    }
    goto LABEL_42;
  }
  if (*(int *)a6 < 5) {
    goto LABEL_42;
  }
  int v20 = (int)(*(double *)(a6 + 24) + 0.5);
  unsigned int v21 = v20 % 30;
  if ((v20 % 30) >= 3)
  {
    if ((v20 % 30 - 3) >= 2)
    {
      if (v21 - 5 >= 2)
      {
        if (v21 - 7 >= 2)
        {
          if (v21 - 9 >= 2)
          {
            if (v21 - 21 >= 2)
            {
              if (v21 - 23 < 2)
              {
LABEL_14:
                int v19 = 4;
              }
              else if (v21 - 25 >= 2)
              {
                if (v21 <= 0x1A) {
                  goto LABEL_42;
                }
LABEL_29:
                int v19 = 0;
              }
              else
              {
LABEL_40:
                int v19 = 6;
              }
            }
            else
            {
              int v19 = 2;
            }
            goto LABEL_41;
          }
          int v25 = v20 % 720;
LABEL_32:
          BOOL v23 = ((((v25 + ((-30583 * (__int16)v25) >> 16)) >> 4)
                + ((v25 + ((-30583 * (__int16)v25) >> 16)) >> 15)) & 1) == 0;
          int v19 = 10;
          int v24 = 8;
        }
        else
        {
          int v22 = v20 % 720;
LABEL_26:
          BOOL v23 = ((((v22 + ((-30583 * (__int16)v22) >> 16)) >> 4)
                + ((v22 + ((-30583 * (__int16)v22) >> 16)) >> 15)) & 1) == 0;
          int v19 = 9;
          int v24 = 7;
        }
        if (v23) {
          int v19 = v24;
        }
      }
      else
      {
LABEL_22:
        int v19 = 5;
      }
    }
    else
    {
LABEL_20:
      int v19 = 3;
    }
  }
  else
  {
LABEL_18:
    int v19 = 1;
  }
LABEL_41:
  if (v19 != v15) {
    return (uint64_t)EvCrt_v("DD_Proc_GAL_INAV_Data: Decoded GAL SV [%d] sigID [%d] INAV WordType num error act:%d Predi:%d", (int)a2 + 1, a3, v14 >> 10, v19);
  }
LABEL_42:
  uint64_t v26 = a2;
  switch((int)v15)
  {
    case 0:
      BOOL v28 = a5[23 * a2 + 3455] == 15;
      uint64_t v29 = a7[2082];
      __int16 v30 = a5 + 4495;
      unsigned int v31 = a2;
      uint64_t v32 = v12;
      goto LABEL_77;
    case 1:
      uint64_t v33 = &a5[23 * a2];
      uint64_t v34 = 3435;
      goto LABEL_53;
    case 2:
      uint64_t v33 = &a5[23 * a2];
      uint64_t v34 = 3439;
      goto LABEL_53;
    case 3:
      uint64_t v33 = &a5[23 * a2];
      uint64_t v34 = 3443;
      goto LABEL_53;
    case 4:
      uint64_t v33 = &a5[23 * a2];
      uint64_t v34 = 3447;
LABEL_53:
      unsigned int v35 = &v33[v34];
      unsigned int v36 = (unsigned __int16)(v14 - 5120);
      int v37 = v14 & 0x3FF;
      if (v36 >= 0xF000) {
        __int16 v38 = v37;
      }
      else {
        __int16 v38 = 1024;
      }
      if (v36 < 0xF000) {
        return result;
      }
      long long v39 = &a5[23 * v26 + 3455];
      unsigned int v40 = v15 - 1;
      if (((*v39 >> (v15 - 1)) & 1) == 0
        && *(unsigned char *)(a7[2070] + v11)
        && *(unsigned char *)(a7[2076] + v11)
        && *((unsigned __int16 *)&a5[2 * v11 + 3279] + v40 + 1) == v37)
      {
        int v183 = a7;
        __int16 v178 = v38;
        DD_Proc_GAL_INAV_Eph_Bit_Validation(v15, result, (const unsigned __int16 *)v35, (const unsigned __int16 *)&a5[23 * v26 + 3455], a5);
        __int16 v38 = v178;
        a7 = v183;
        uint64_t v26 = v11;
        BOOL v16 = (char *)a5 + v11 + 17908;
        BOOL v41 = *v39 == 15;
      }
      else
      {
        BOOL v41 = 0;
      }
      uint64_t result = *a4;
      long long v42 = a7 + 2082;
      uint64_t v43 = a7[2082];
      uint64_t v44 = (v15 - 1);
      uint64_t v45 = (__int16 *)&a5[2 * v26 + 3279] + v40 + 1;
      unsigned int v46 = (unsigned __int16)*v45;
      BOOL v47 = v46 == v37;
      if (v46 > 0x3FF || v46 != v37)
      {
        if (v46 != v37)
        {
          double v55 = (_WORD *)a5 + v26 + 6703;
          if ((unsigned __int16)*v55 != v37)
          {
            uint64_t v56 = (uint64_t)a5 + 5 * v26 + 13550;
            *(unsigned char *)(v56 + 4) = 0;
            *(_DWORD *)uint64_t v56 = 0;
            *double v55 = v37;
          }
        }
        *((unsigned char *)a5 + 5 * v26 + v44 + 13550) = 1;
        goto LABEL_129;
      }
      int v48 = 0;
      uint64_t v49 = 1;
      while (v15 == 3 || v49 != 7)
      {
        if (v12[v49] != *(unsigned __int16 *)((char *)v35 + v49 * 2)) {
          ++v48;
        }
        if (++v49 == 8) {
          goto LABEL_128;
        }
      }
      if ((*((unsigned __int16 *)v35 + 7) ^ v12[7]) > 3) {
        ++v48;
      }
LABEL_128:
      *((unsigned char *)a5 + 5 * v26 + v44 + 13550) = 1;
      if (v48)
      {
LABEL_129:
        int v75 = 0;
        *uint64_t v45 = v38;
        *(_OWORD *)unsigned int v35 = *(_OWORD *)v12;
        goto LABEL_130;
      }
      int v75 = 0;
LABEL_151:
      BOOL v47 = 1;
LABEL_130:
      int v76 = (char *)a5 + 5 * v26 + 13550;
      if (!*v76) {
        goto LABEL_289;
      }
      BOOL v77 = (char *)a5 + 5 * v26 + 13551;
      if (!*v77) {
        goto LABEL_289;
      }
      int v78 = (char *)a5 + 5 * v26 + 13552;
      if (!*v78) {
        goto LABEL_289;
      }
      char v79 = (char *)a5 + 5 * v26 + 13553;
      if (!*v79) {
        goto LABEL_289;
      }
      double v80 = (char *)a5 + 5 * v26 + 13554;
      if (!*v80) {
        goto LABEL_275;
      }
      double v81 = (unsigned __int16 *)&a5[2 * v26];
      int v82 = v81[6559];
      if (v82 != v81[6560]
        || v82 != v81[6561]
        || v82 != LOWORD(a5[2 * v26 + 3281])
        || v82 != *((unsigned __int16 *)a5 + v26 + 6739))
      {
        goto LABEL_275;
      }
      uint64_t v171 = (uint64_t)a5 + 5 * v26 + 13554;
      int v176 = v42;
      long long v179 = (char *)a5 + 5 * v26 + 13553;
      BOOL v173 = v47;
      BOOL v174 = v41;
      uint64_t v167 = v43;
      uint64_t v181 = v16;
      uint64_t v184 = a7;
      memset(v189, 0, 71);
      long long v188 = 0u;
      uint64_t v187 = v26;
      int v169 = result;
      GAL_I_EphBin2Int((uint64_t)&a5[23 * v26 + 3433], (uint64_t)&v188);
      uint64_t v190 = 0;
      uint64_t v191 = 0;
      int v192 = 0;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v199 = 0u;
      memset(v200, 0, sizeof(v200));
      long long v201 = 0u;
      memset(v202, 0, sizeof(v202));
      uint64_t v203 = 0;
      GAL_EphInt2Real((uint64_t)&v188, (uint64_t)&v190);
      long long v204 = 0uLL;
      DWORD2(v205) = 0;
      *(void *)&long long v205 = 0;
      long long v206 = 0u;
      long long v207 = 0u;
      memset(v208, 0, sizeof(v208));
      uint64_t v209 = 0;
      GAL_EphReal2Kep((uint64_t)&v190, (uint64_t)&v204);
      int v83 = Kep_Check_Ephemeris(v169 / 604800, v169 % 604800, (uint64_t)&v204);
      __int16 v84 = v83;
      uint64_t result = ST_Check_Eph_Kep_Err((uint64_t)"DD_Proc_GAL_INAV_Eph:", v83, (uint64_t)&v204);
      if (result) {
        goto LABEL_272;
      }
      if ((v84 & 0x3F0) != 0) {
        *int v76 = 0;
      }
      if ((v84 & 0xC00) != 0) {
        *int v78 = 0;
      }
      if ((v84 & 0xC) != 0)
      {
        *long long v179 = 0;
      }
      else if ((v84 & 0xFFC) == 0)
      {
        goto LABEL_272;
      }
      *(unsigned char *)(v167 + v187) = 1;
LABEL_272:
      BOOL v16 = v181;
      a7 = v184;
      uint64_t v26 = v187;
      long long v42 = v176;
      char v79 = v179;
      BOOL v47 = v173;
      BOOL v41 = v174;
      double v80 = (unsigned char *)v171;
      if (!*v76 || !*v77 || !*v78) {
        goto LABEL_289;
      }
LABEL_275:
      if (!*v79) {
        goto LABEL_289;
      }
      if (!*v80) {
        goto LABEL_289;
      }
      uint64_t v155 = (unsigned __int16 *)&a5[2 * v26];
      int v156 = v155[6559];
      if (v156 != v155[6560]
        || v156 != v155[6561]
        || v156 != LOWORD(a5[2 * v26 + 3281])
        || v156 != *((unsigned __int16 *)a5 + v26 + 6739))
      {
        goto LABEL_289;
      }
      if (!v47)
      {
        uint64_t v157 = (char *)a5 + v26 + 17944;
        goto LABEL_288;
      }
      uint64_t v157 = (char *)a5 + v26 + 17944;
      if (a5[23 * v26 + 3455] != 15)
      {
LABEL_288:
        *uint64_t v157 = 1;
        *(_DWORD *)int v76 = 0;
        void v76[4] = 0;
        goto LABEL_289;
      }
      int v158 = *v157;
      *(_DWORD *)int v76 = 0;
      void v76[4] = 0;
      if (!v158)
      {
        double v159 = v16;
        uint64_t v160 = v42;
        double v161 = (int *)&a7[11 * v26 + 2092];
        *double v161 = *a4;
        if (*a4 >= 1)
        {
          *(unsigned char *)(a7[2079] + v26) = 1;
          uint64_t result = Core_Save_GAL_Eph((v11 + 1), 0, (uint64_t)v161);
        }
        *v159 &= 0xFCu;
        BOOL v41 = 1;
        long long v42 = v160;
        goto LABEL_291;
      }
LABEL_289:
      if (*((unsigned char *)a5 + v26 + 17944))
      {
        BOOL v162 = v41;
        double v163 = v42;
        uint64_t result = DD_Save_New_GAL_INAV_Eph(*a4, (uint64_t)a5, a7);
        BOOL v41 = v162;
        long long v42 = v163;
      }
LABEL_291:
      if (v75) {
        return (uint64_t)DD_Proc_GAL_INAV_GST(v11, v12, v41, a4, a5 + 4495, *v42, a6);
      }
      return result;
    case 5:
      unsigned int v51 = *(unsigned __int16 *)(result + 8);
      int v52 = (v51 >> 9) & 1;
      int v53 = (v51 >> 11) & 1;
      if (v17 == 1 && v52 || v17 == 2 && v53 || v17 == 3 && v53 | v52)
      {
        *(unsigned char *)(a7[2070] + a2) = 0;
        *(_DWORD *)(a7[2071] + 20 * a2) = 2;
        *v16 &= 0xFCu;
        uint64_t v54 = a7;
        EvLog_v("DD_Proc_GAL_INAV_Data:  GAL Health H->U: SV %d E1B_HS %d E5b_HS %d ", a2 + 1, v52, v53);
        uint64_t v29 = v54[2082];
        __int16 v30 = a5 + 4495;
        unsigned int v31 = v11;
        uint64_t v32 = v12;
        BOOL v28 = 0;
LABEL_77:
        return (uint64_t)DD_Proc_GAL_INAV_GST(v31, v32, v28, a4, v30, v29, a6);
      }
      uint64_t v146 = a7[2070];
      if (*(unsigned char *)(v146 + a2) || !*(unsigned char *)(a7[2078] + a2)) {
        goto LABEL_264;
      }
      uint64_t v147 = *((unsigned __int8 *)a7 + 36 * a2 + 23105);
      uint64_t v148 = *((unsigned __int8 *)a7 + 36 * a2 + 23106);
      if (v17 != 1 || (v148 & 1) != 0)
      {
        if (v17 != 2 || (v147 & 1) != 0)
        {
          if (v17 != 3 || (v148 & 1) != 0 || (v147 & 1) != 0)
          {
            if ((unsigned __int16)g_Enable_Event_Log < 4u) {
              goto LABEL_264;
            }
            uint64_t v164 = (a2 + 1);
            uint64_t v149 = a2;
            double v150 = "DD_Proc_GAL_INAV_Data:  GAL Health U->U: SV %d Alm still unhealthy";
          }
          else
          {
            *(unsigned char *)(v146 + a2) = 1;
            *(_DWORD *)(a7[2071] + 20 * a2) = 1;
            uint64_t v165 = v148;
            uint64_t v166 = v147;
            uint64_t v164 = (a2 + 1);
            uint64_t v149 = a2;
            double v150 = "DD_Proc_GAL_INAV_Data:  GAL E1B-E5b Health U->H: SV %d Alm.E1B_HS %d Alm.E5b_HS %d";
          }
        }
        else
        {
          *(unsigned char *)(v146 + a2) = 1;
          *(_DWORD *)(a7[2071] + 20 * a2) = 1;
          uint64_t v164 = (a2 + 1);
          uint64_t v165 = v147;
          uint64_t v149 = a2;
          double v150 = "DD_Proc_GAL_INAV_Data:  GAL E5b Health U->H : SV %d Alm.E5b_HS %d";
        }
      }
      else
      {
        *(unsigned char *)(v146 + a2) = 1;
        *(_DWORD *)(a7[2071] + 20 * a2) = 1;
        uint64_t v164 = (a2 + 1);
        uint64_t v165 = v148;
        uint64_t v149 = a2;
        double v150 = "DD_Proc_GAL_INAV_Data:  GAL E1-B Health U->H : SV %d Alm.E1B_HS %d";
      }
      char v151 = a7;
      EvLog_v(v150, v164, v165, v166);
      uint64_t v26 = v149;
      BOOL v16 = (char *)a5 + v11 + 17908;
      a7 = v151;
LABEL_264:
      uint64_t result = *a4;
      uint64_t v43 = a7[2082];
      int v152 = (char *)a5 + 5 * v26;
      v152[13554] = 1;
      *(_OWORD *)&a5[23 * v26 + 3451] = *(_OWORD *)v12;
      long long v42 = a7 + 2082;
      uint64_t v153 = (char *)a5 + 2 * v26;
      int v154 = *((unsigned __int16 *)v153 + 6703);
      if (v154 == 1024)
      {
        BOOL v41 = 0;
        BOOL v47 = 0;
        *(_DWORD *)(v152 + 13550) = 0;
        *((_WORD *)v153 + 6739) = 1024;
      }
      else
      {
        if (*((unsigned __int16 *)v153 + 6739) == v154)
        {
          BOOL v41 = 0;
          int v75 = 1;
          goto LABEL_151;
        }
        BOOL v41 = 0;
        BOOL v47 = 0;
        *((_WORD *)v153 + 6739) = v154;
      }
      int v75 = 1;
      goto LABEL_130;
    case 6:
      a5[4495] = (*(unsigned __int16 *)(result + 14) >> 3) & 0xFFF01FFF | ((*(_WORD *)(result + 12) & 0x7F) << 13);
      return result;
    case 7:
    case 8:
    case 9:
    case 10:
      int v186 = *a4;
      v213[0] = 0;
      v213[1] = 0;
      v212[0] = 0;
      v212[1] = 0;
      long long v210 = 0u;
      long long v211 = 0u;
      switch((int)v15)
      {
        case 7:
          unsigned int v27 = (*(unsigned __int16 *)(result + 2) >> 4) & 0x3F;
          goto LABEL_87;
        case 8:
          unsigned int v27 = (*(unsigned __int16 *)(result + 6) >> 15) & 0xFFFFFFC1 | (2 * (*(_WORD *)(result + 4) & 0x1F));
          goto LABEL_87;
        case 9:
          unsigned int v27 = (*(unsigned __int16 *)(result + 8) >> 3) & 0x3F;
LABEL_87:
          if (v27 - 1 > 0x23) {
            goto LABEL_90;
          }
          unsigned __int8 v57 = gal_E1B_AlmSvId2SubframeId[v27 - 1];
          break;
        case 10:
          long double v58 = a7;
          uint64_t result = (uint64_t)DD_Proc_GAL_INAV_GGTO_Word(a2, (unsigned __int16 *)result, v186, (uint64_t)a7);
          BOOL v16 = (char *)a5 + v11 + 17908;
          a7 = v58;
          goto LABEL_90;
        default:
LABEL_90:
          if ((v186 < 1 || !*(unsigned char *)(a6 + 5) || (unsigned int v59 = v186, *(int *)a6 <= 4))
            && (unsigned int v59 = a5[4495], (v59 & 0x80000000) != 0))
          {
            LOBYTE(v60) = 0;
            char v61 = -11;
          }
          else
          {
            unsigned int v60 = ((2185 * (v59 % 0x2D0)) >> 16) + 1;
            if (v60) {
              char v61 = -9;
            }
            else {
              char v61 = -11;
            }
          }
          if ((v61 + (v14 >> 10)) < 0xFEu) {
            LOBYTE(v60) = 0;
          }
          if (v60 > 0xCu) {
            char v62 = -12;
          }
          else {
            char v62 = 12;
          }
          unsigned __int8 v57 = v62 + v60;
          if (!(_BYTE)v60) {
            unsigned __int8 v57 = v60;
          }
          if (a3 != 10) {
            unsigned __int8 v57 = v60;
          }
          break;
      }
      if ((v57 - 25) <= 0xE7u) {
        return (uint64_t)EvLog_v("DD_Proc_GAL_INAV_Alm: For SV %d WordType %d Alm SVID %d sfID %d not found. Word Type is discarded.");
      }
      if (v57 == 24)
      {
        uint64_t v63 = a7[2082];
        *(_DWORD *)(v63 + 32) = 0;
        *(_OWORD *)uint64_t v63 = 0u;
        *(_OWORD *)(v63 + 16) = 0u;
      }
      uint64_t v64 = (v57 - 1);
      BOOL v65 = &a5[9 * v64];
      double v66 = v65 + 4261;
      unsigned int v67 = *v12;
      if (v15 >= 9) {
        char v68 = -9;
      }
      else {
        char v68 = -7;
      }
      uint64_t v69 = (v68 + (v14 >> 10));
      *(_OWORD *)&v66[4 * v69] = *(_OWORD *)v12;
      double v70 = v65 + 4269;
      *((unsigned char *)v65 + v69 + 17076) = 1;
      int v71 = (v67 >> 6) & 0xF;
      double v72 = (unsigned __int8 *)v65 + 17078;
      *((unsigned char *)v65 + v69 + 17078) = v71;
      if (!*(unsigned char *)(a6 + 5)) {
        return result;
      }
      int v73 = *(__int16 *)(a6 + 16);
      if (v73 < 1025) {
        return result;
      }
      if ((v15 - 9) < 2)
      {
        if (!*v70) {
          return result;
        }
        int v85 = (char *)&a5[9 * v64 + 4269] + 1;
        if (*v85 && *v72 == HIBYTE(a5[9 * v64 + 4269]))
        {
          v213[0] = v66;
          v212[0] = v66 + 4;
          *int v85 = 0;
          int v74 = 1;
        }
        else
        {
          int v74 = 0;
        }
        unsigned __int8 v89 = v57 - 2;
        if (!v64) {
          unsigned __int8 v89 = 23;
        }
        if (v15 == 9)
        {
          int v90 = v89;
          double v91 = (char *)&a5[9 * v89 + 4269] + 1;
          if (*v91)
          {
            int v92 = *v72;
            if (v92 == HIBYTE(a5[9 * v90 + 4269]))
            {
              uint64_t v93 = (uint64_t)&a5[9 * v90 + 4261];
              v213[v74] = v93 + 16;
              v212[v74] = v66;
              int v88 = v74 + 1;
              if (*(unsigned __int8 *)(v93 + 34) == v92) {
                *double v91 = 0;
              }
              goto LABEL_170;
            }
          }
        }
      }
      else
      {
        if ((v15 - 7) > 1) {
          return result;
        }
        if (*v70 && BYTE1(a5[9 * v64 + 4269]) && *v72 == HIBYTE(a5[9 * v64 + 4269]))
        {
          v213[0] = v66;
          v212[0] = v66 + 4;
          *double v70 = 0;
          int v74 = 1;
        }
        else
        {
          int v74 = 0;
        }
        if (v15 == 8 && BYTE1(a5[9 * v64 + 4269]))
        {
          if (v57 > 0x17u) {
            v57 -= 24;
          }
          int v86 = v57;
          uint64_t v87 = (uint64_t)&a5[9 * v57 + 4261];
          if (*(unsigned char *)(v87 + 32))
          {
            if (*v72 == BYTE2(a5[9 * v86 + 4269]))
            {
              v213[v74] = v66 + 4;
              v212[v74] = v87;
              int v88 = v74 + 1;
              goto LABEL_170;
            }
          }
        }
      }
      if (!v74) {
        return result;
      }
      int v88 = 1;
LABEL_170:
      long long v185 = (char *)a5 + 13046;
      uint64_t v182 = (char *)a5 + 13009;
      int v94 = v88;
      __int16 v172 = v73 - 1024;
      unsigned __int16 v180 = 16 * (v73 - 1024);
      int v177 = v73 & 3;
      BOOL v175 = a5 + 4477;
      break;
    default:
      return (uint64_t)EvLog_v("DD_Proc_GAL_INAV_Data:  WRONG I/NAV WordType - SV %d WordType %d  ");
  }
  while (1)
  {
    uint64_t v95 = (v94 - 1);
    uint64_t result = v213[v95];
    int v96 = *(unsigned __int16 *)result >> 10;
    if (v96 == 9)
    {
      if (((*(unsigned __int16 *)(result + 8) >> 3) & 0x3F) == 0) {
        goto LABEL_188;
      }
    }
    else if (v96 == 8)
    {
      if (!((*(unsigned __int16 *)(result + 6) >> 15) & 0xFFFFFFC1 | (2 * (*(unsigned char *)(result + 4) & 0x1F)))) {
        goto LABEL_188;
      }
    }
    else if (v96 != 7 || ((*(unsigned __int16 *)(result + 2) >> 4) & 0x3F) == 0)
    {
LABEL_188:
      if ((v64 & (v96 == 8)) != 0) {
        int v110 = -2;
      }
      else {
        int v110 = -1;
      }
      unsigned int v111 = v110 + gal_E1B_SubframeId2AlmSvId[v64];
      if (v111 <= 0x23) {
        *((unsigned char *)a7 + v111 + 16664) = 1;
      }
      goto LABEL_193;
    }
    int v97 = (unsigned __int16 *)v212[v95];
    if (v97)
    {
      uint64_t v98 = a7[2070];
      int v99 = *v16;
      double v100 = a7;
      int v101 = v16;
      uint64_t result = Extract_GAL_INAV_ALM((unsigned __int16 *)result, v97, (uint64_t)&v210);
      BOOL v16 = v101;
      a7 = v100;
      if (result)
      {
        DWORD1(v210) = 4;
        unsigned int v102 = (WORD5(v210) >> 4) & 0x3F;
        if (v102)
        {
          if (v102 <= 0x24)
          {
            unsigned int v103 = WORD4(v210);
            int v104 = (WORD4(v210) >> 6) & 0xF;
            unsigned int v105 = (WORD5(v210) >> 10) & 0xFFFFFC3F | ((BYTE8(v210) & 0xF) << 6);
            uint64_t result = v102 - 1;
            uint64_t v106 = (v102 - 1);
            unsigned int v107 = *(unsigned __int16 *)&v185[2 * v106];
            if (v104 != v182[v106])
            {
              if (v105 <= v107 && (int)(v107 - v105) < 501) {
                goto LABEL_193;
              }
              v182[v106] = v104;
              *(_WORD *)&v185[2 * v106] = v105;
              char v112 = BYTE10(v211);
              int v113 = BYTE10(v211) & 0x20;
LABEL_198:
              int v114 = (v103 >> 4) & 3;
              HIDWORD(v211) = v180;
              if (v177 == v114) {
                __int16 v115 = 0;
              }
              else {
                __int16 v115 = v114;
              }
              int v116 = *((unsigned __int8 *)v175 + result);
              if (v116 == 1 && v113 || v116 == 2 && v112 < 0)
              {
                int v117 = (char *)(v100[2070] + result);
                goto LABEL_206;
              }
              BOOL v128 = (v112 & 0xA0) != 0 && v116 == 3;
              char v129 = !v128;
              int v117 = (char *)(v100[2070] + result);
              if (v128 || *v117)
              {
                *int v117 = v129;
                if (v129) {
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v130 = v100[2076];
                if (!*(unsigned char *)(v130 + result)) {
                  goto LABEL_237;
                }
                int v131 = v100[11 * result + 2092];
                if (v131 + 3600 <= v186
                  || (v116 != 1 || (v100[11 * result + 2102] & 0x1000000000000) == 0)
                  && (v116 != 2 || (v100[11 * result + 2102] & 0x10000000000) == 0)
                  && (v116 != 3
                   || ((BYTE5(v100[11 * result + 2102]) | BYTE6(v100[11 * result + 2102])) & 1) == 0))
                {
                  if (v131 + 100 < v186)
                  {
                    *(unsigned char *)(v100[2072] + result) = 0;
                    *(unsigned char *)(v130 + result) = 0;
                    *(void *)((char *)&a5[2 * result + 3279] + 2) = 0x400040004000400;
                    char v132 = (char *)a5 + 2 * result;
                    *((_WORD *)v132 + 6703) = 1024;
                    *((_WORD *)v132 + 6739) = 1024;
                    *((unsigned char *)v175 + result) &= 0xFCu;
                    BOOL v133 = &a5[23 * result];
                    *((_OWORD *)v133 + 863) = 0u;
                    *(_OWORD *)(v133 + 3445) = 0u;
                    *(_OWORD *)(v133 + 3449) = 0u;
                    *(_OWORD *)(v133 + 3437) = 0u;
                    *(_OWORD *)(v133 + 3441) = 0u;
                    *(_OWORD *)(v133 + 3433) = 0u;
                    int v117 = (char *)(v100[2070] + result);
                  }
LABEL_237:
                  *int v117 = 1;
LABEL_239:
                  __int16 v168 = v115;
                  *(_DWORD *)(v100[2071] + 20 * result + 4) = 1;
                  long long v188 = 0u;
                  memset(v189, 0, 19);
                  uint64_t v134 = v102 - 1;
                  GAL_AlmBin2Int((uint64_t)&v210, (uint64_t)&v188);
                  long long v207 = 0u;
                  memset(v208, 0, 27);
                  long long v205 = 0u;
                  long long v206 = 0u;
                  long long v204 = 0u;
                  unsigned __int8 v170 = (int *)v100 + 9 * v134 + 5768;
                  GAL_AlmInt2Real((uint64_t)v170, (uint64_t)&v204);
                  long long v194 = *(_OWORD *)((char *)v208 + 8);
                  *(void *)&long long v195 = *((void *)&v205 + 1);
                  *((double *)&v195 + 1) = *(double *)&v206 + 0.977384381;
                  *(void *)&long long v196 = v207;
                  *((void *)&v196 + 1) = *(void *)&v208[0];
                  *(double *)&long long v197 = *(double *)&v205 + 5440.5882;
                  *((void *)&v197 + 1) = *((void *)&v206 + 1);
                  LODWORD(v190) = 0;
                  HIDWORD(v190) = DWORD1(v204);
                  LODWORD(v191) = 3;
                  BYTE4(v191) = BYTE8(v204);
                  BYTE5(v191) = BYTE10(v208[1]) | (8 * BYTE9(v208[1]));
                  BYTE6(v191) = BYTE9(v204);
                  LOWORD(v192) = WORD5(v204) + 1024;
                  int v193 = HIDWORD(v204);
                  *(void *)&long long v198 = *((void *)&v207 + 1);
                  int v135 = Kep_Check_Almanac(v186 / 604800, (uint64_t)&v190);
                  if (v135) {
                    *(unsigned char *)(v100[2082] + v134) = 1;
                  }
                  uint64_t result = ST_Check_Alm_Kep_Err((uint64_t)"DD_Proc_GAL_INAV_Alm_Data:", v135, (uint64_t)&v190);
                  if (result)
                  {
                    uint64_t result = GAL_AlmBin2Int((uint64_t)&v210, (uint64_t)v170);
                    *unsigned __int8 v170 = v186;
                    uint64_t v136 = (uint64_t)v100 + 36 * v134 + 23072;
                    *(_WORD *)(v136 + 10) = v168 + v172;
                    *(_DWORD *)(v136 + 4) = 4;
                    *(unsigned char *)(v100[2073] + v134) = 1;
                    *(unsigned char *)(v100[2078] + v134) = 1;
                  }
                  a7 = v100;
                  BOOL v16 = v101;
                  if (v186 >= 1)
                  {
                    uint64_t v137 = 0;
                    LODWORD(v138) = 0;
                    uint64_t v139 = p_NV + 48 * v102;
                    double v140 = (void *)(v139 + 7624);
                    long long v141 = *(_OWORD *)v170;
                    long long v142 = *(_OWORD *)((char *)v100 + 36 * v134 + 23088);
                    *(_DWORD *)(v139 + 7664) = *((_DWORD *)v100 + 9 * v134 + 5776);
                    *(_OWORD *)(v139 + 7648) = v142;
                    *(_OWORD *)(v139 + 7632) = v141;
                    uint64_t v143 = v139 + 7632;
                    __int16 v144 = -9871;
                    do
                    {
                      int v145 = *(unsigned __int8 *)(v143 + v137) ^ HIBYTE(v144);
                      __int16 v144 = -12691 * (v144 + (*(unsigned __int8 *)(v143 + v137) ^ HIBYTE(v144))) + 22719;
                      uint64_t v138 = (v138 + v145);
                      ++v137;
                    }
                    while (v137 != 40);
                    *double v140 = v138;
                  }
LABEL_208:
                  uint64_t v118 = 0;
                  LODWORD(v119) = 0;
                  uint64_t v120 = a7[2070];
                  uint64_t v121 = p_NV;
                  uint64_t v122 = p_NV + 7600;
                  int v123 = *(_DWORD *)(v120 + 32);
                  long long v124 = *(_OWORD *)(v120 + 16);
                  *(_OWORD *)(p_NV + 7612) = *(_OWORD *)v120;
                  *(_OWORD *)(v122 + 28) = v124;
                  *(_DWORD *)(v121 + 7644) = v123;
                  uint64_t v125 = v121 + 7608;
                  __int16 v126 = -9871;
                  do
                  {
                    int v127 = *(unsigned __int8 *)(v125 + v118) ^ HIBYTE(v126);
                    __int16 v126 = -12691 * (v126 + (*(unsigned __int8 *)(v125 + v118) ^ HIBYTE(v126))) + 22719;
                    uint64_t v119 = (v119 + v127);
                    ++v118;
                  }
                  while (v118 != 40);
                  *(void *)(v121 + 7600) = v119;
                  goto LABEL_193;
                }
LABEL_206:
                *int v117 = 0;
              }
              *(_DWORD *)(v100[2071] + 20 * result + 4) = 2;
              goto LABEL_208;
            }
            if (v105 == v107)
            {
              if (*(unsigned char *)(v98 + v106)
                || ((char v112 = BYTE10(v211), v113 = BYTE10(v211) & 0x20, v99 != 1) || (BYTE10(v211) & 0x20) != 0)
                && (v99 != 2 || (BYTE10(v211) & 0x80) != 0)
                && (v99 != 3 || (BYTE10(v211) & 0x80) != 0 || (BYTE10(v211) & 0x20) != 0))
              {
                double v108 = (long long *)((char *)v100 + 36 * v102 + 23036);
                int v109 = *(_DWORD *)v108;
                *(_DWORD *)double v108 = v186;
                if (v186 >= 1 && !v109)
                {
                  uint64_t result = Core_Save_GAL_Alm(v102, 0, v108);
                  BOOL v16 = v101;
                  a7 = v100;
                }
                goto LABEL_193;
              }
              goto LABEL_198;
            }
          }
        }
      }
    }
LABEL_193:
    if (!(_BYTE)--v94) {
      return result;
    }
  }
}

char *DD_Proc_GAL_INAV_GST(unsigned int a1, unsigned __int16 *a2, int a3, _DWORD *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __int16 v26 = 0;
  unsigned int v25 = 0;
  uint64_t result = (char *)Decode_GAL_INAV_GST(a2, &v25, &v26);
  if (result)
  {
    unsigned int v14 = v25;
    if (v25 > 0x93A7F)
    {
      uint64_t result = EvCrt_v("DD_Proc_GAL_INAV_GST:  Rejected:  TOW = %d  >=604800, Out of range!");
LABEL_6:
      *(unsigned char *)(a6 + a1) = 1;
      return result;
    }
    __int16 v15 = v26;
    if (v26 >= 4096)
    {
      uint64_t result = EvCrt_v("DD_Proc_GAL_INAV_GST:  Rejected:  Week = %d  >=4096, Out of range!");
      goto LABEL_6;
    }
    *a5 = v25;
    unsigned __int16 v16 = v15 + 1024;
    if (!*(unsigned char *)(a7 + 5))
    {
      int v17 = (__int16)v16;
      int v19 = a1 + 1;
      EvLog_v("WeekNum initialized to %d from GAL SV%d", (__int16)v16, v19);
      int v20 = v19;
LABEL_18:
      uint64_t result = EvLog_v("WeekNum Submit %d %d GAL SV %d", 1, v17, v20);
      *(_WORD *)(a7 + 16) = v16;
      *(unsigned char *)(a7 + 5) = 1;
      *(_DWORD *)(a7 + 48) = -1;
      *(_WORD *)(a7 + 52) = -1;
      *(_DWORD *)(a7 + 54) = 0;
      *(_WORD *)(a7 + 58) = 0;
      if (*(int *)a7 < 3) {
        *a4 = 0;
      }
      else {
        *a4 = v14 + 604800 * (__int16)v16;
      }
      return result;
    }
    if (*(unsigned __int16 *)(a7 + 16) != v16 && v14 - 32 < 0x93A41 && *(int *)a7 > 2)
    {
      int v17 = (__int16)v16;
      if (!a3) {
        return EvLog_v("WeekNum Submit %d %d GAL SV %d", 0, (__int16)v16, a1 + 1);
      }
      uint64_t v18 = 0;
      while (*(unsigned __int16 *)(a7 + 2 * v18 + 48) != v16)
      {
        if (++v18 == 3) {
          goto LABEL_22;
        }
      }
      if (v18 >= 3)
      {
LABEL_22:
        uint64_t v21 = 0;
        while (*(__int16 *)(a7 + 2 * v21 + 48) != -1)
        {
          if (++v21 == 3) {
            goto LABEL_30;
          }
        }
        if (v21 < 3)
        {
          uint64_t v22 = a7 + 2 * v21;
          *(_WORD *)(v22 + 48) = v16;
          *(_WORD *)(v22 + 54) = 1;
          return EvLog_v("WeekNum Submit %d %d GAL SV %d", 0, (__int16)v16, a1 + 1);
        }
LABEL_30:
        *(_WORD *)(a7 + 52) = -1;
        *(_DWORD *)(a7 + 48) = -1;
        *(_DWORD *)(a7 + 54) = 0;
        *(_WORD *)(a7 + 58) = 0;
        EvLog_v("DD_GAL_Submit_WeekNum: WeekNum Candidate overflow, %d >= %d", v21, 3);
        return EvLog_v("WeekNum Submit %d %d GAL SV %d", 0, (__int16)v16, a1 + 1);
      }
      uint64_t v23 = a7 + 2 * v18;
      int v24 = (__int16)++*(_WORD *)(v23 + 54);
      if (v24 < 3) {
        return EvLog_v("WeekNum Submit %d %d GAL SV %d", 0, (__int16)v16, a1 + 1);
      }
      EvLog_v("DD_GAL_Submit_WeekNum: WeekNum Candidate %d accepted based on %d obs", (__int16)v16, (unsigned __int16)v24);
      int v20 = a1 + 1;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t DD_Proc_GAL_INAV_Eph_Bit_Validation(uint64_t result, uint64_t a2, const unsigned __int16 *a3, const unsigned __int16 *a4, unsigned int *a5)
{
  uint64_t v5 = 0;
  LOBYTE(v6) = 1;
  while (result == 3 || v5 != 7)
  {
    int v6 = (*(unsigned __int16 *)(a2 + v5 * 2) == a3[v5]) & v6;
    if (++v5 == 8)
    {
      if (!v6) {
        return result;
      }
      goto LABEL_8;
    }
  }
  if ((((a3[7] ^ *(unsigned __int16 *)(a2 + 14)) < 4) & v6) == 0) {
    return result;
  }
LABEL_8:
  *(_DWORD *)a4 |= 1 << (result - 1);
  return result;
}

char *DD_Proc_GAL_INAV_GGTO_Word(char *result, unsigned __int16 *a2, int a3, uint64_t a4)
{
  unsigned int v5 = result;
  int v6 = a2[6];
  HIDWORD(v8) = a2[5];
  LODWORD(v8) = v6 << 16;
  unsigned __int16 v7 = v8 >> 26;
  unsigned int v9 = a2[7];
  int v10 = (v9 << 6) & 0x300000 | (v6 << 22);
  unsigned int v11 = (v9 >> 6);
  int v12 = v9 & 0x3F;
  if (v7 == 0xFFFF && v10 >> 20 == 4095 && v11 == 255)
  {
    if (v12 == 63) {
      return EvCrt_v("DD_Proc_GAL_INAV_GGTO_Word: SVID %d gives Invalid GGTO (all ones), Skipped!", (int)result + 1);
    }
LABEL_3:
    uint64_t result = EvCrt_v("DD_Proc_GAL_INAV_GGTO_Word: FAILED: ToG = %d  > 167 , GGTO Skipped!", (v9 >> 6));
    *(unsigned char *)(*(void *)(a4 + 16656) + v5) = 1;
    return result;
  }
  if (v11 >= 0xA8) {
    goto LABEL_3;
  }
  char v13 = (int *)(a4 + 24368);
  if (*(_DWORD *)(a4 + 24372) != 4) {
    goto LABEL_19;
  }
  int v14 = v12 - *(unsigned __int8 *)(a4 + 24381);
  if (!v14)
  {
    if (*(unsigned __int8 *)(a4 + 24380) >= v11
      && *(unsigned __int16 *)(a4 + 24376) == v7
      && *(unsigned __int16 *)(a4 + 24378) == (unsigned __int16)(v10 >> 20))
    {
      return result;
    }
    goto LABEL_19;
  }
  if (v14 < -32) {
    v14 += 64;
  }
  if (v14 > 32) {
    v14 -= 64;
  }
  if ((v14 & 0x80000000) == 0)
  {
LABEL_19:
    int v15 = v10 >> 20;
    *(_WORD *)(a4 + 24376) = v7;
    *(_WORD *)(a4 + 24378) = v15;
    *(unsigned char *)(a4 + 24380) = v11;
    *(unsigned char *)(a4 + 24381) = v12;
    *char v13 = a3;
    *(_DWORD *)(a4 + 24372) = 4;
    *(_DWORD *)(a4 + 24384) = a3;
    *(_DWORD *)(a4 + 24388) = 4;
    *(double *)(a4 + 24392) = (double)(__int16)v7 * 2.91038305e-11;
    *(double *)(a4 + 24400) = (double)v15 * 4.4408921e-16;
    *(_DWORD *)(a4 + 24408) = 3600 * v11;
    *(_WORD *)(a4 + 24412) = v9 & 0x3F;
    if (a3 >= 1)
    {
      uint64_t v16 = 0;
      LODWORD(v17) = 0;
      uint64_t v18 = p_NV;
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = p_NV + 7656;
      *(_OWORD *)(p_NV + 7656) = v19;
      __int16 v21 = -9871;
      do
      {
        int v22 = *(unsigned __int8 *)(v20 + v16) ^ HIBYTE(v21);
        __int16 v21 = -12691 * (v21 + (*(unsigned __int8 *)(v20 + v16) ^ HIBYTE(v21))) + 22719;
        uint64_t v17 = (v17 + v22);
        ++v16;
      }
      while (v16 != 16);
      *(void *)(v18 + 7648) = v17;
    }
  }
  return result;
}

void *NK_Update_Intermediate_Residual(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(result)
  {
    case 3:
      uint64_t v8 = 13960;
      goto LABEL_7;
    case 2:
      uint64_t v8 = 8384;
LABEL_7:
      uint64_t v7 = a4 + v8;
LABEL_8:
      uint64_t v9 = 0;
      uint64_t v10 = a3 + 1400;
      do
      {
        if (*(unsigned char *)(v7 + v9 + 152))
        {
          int v11 = *(_DWORD *)(v7 + 4 * v9 + 248);
          if ((v11 - 1) >= 0x1D)
          {
            if (v11)
            {
              uint64_t result = EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            }
            else
            {
              uint64_t result = NK_Obs_Equ_SV(v6, *(unsigned __int8 *)(v7 + v9 + 200), *(unsigned __int8 *)(a2 + 4 * v9), a4 + 56 * v9 + 20032, (uint64_t)v14, *(double *)(a4 + 656));
              uint64_t v12 = 0;
              double v13 = 0.0;
              do
              {
                double v13 = v13 + *(double *)&v14[v12] * *(double *)(v10 + v12);
                v12 += 8;
              }
              while (v12 != 88);
              *(double *)(v7 + 8 * v9 + 2408) = *(double *)(v7 + 8 * v9 + 2024) - v13;
            }
          }
        }
        ++v9;
      }
      while (v9 != 48);
      return result;
    case 1:
      uint64_t v7 = a4 + 2808;
      goto LABEL_8;
  }

  return (void *)gn_report_assertion_failure("NK_Update_Intermediate_Residual");
}

void Kep_Calc_SV_Ref_State_BDS_GEO(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a4 + 8) == 4 && *(unsigned __int8 *)(a4 + 12) <= 5u)
  {
    __int16 v8 = a2;
    if (*(_WORD *)(a4 + 18))
    {
      int v10 = *(_DWORD *)(a4 + 24);
      int v11 = a3 + 604800 * (a2 - *(__int16 *)(a4 + 18)) - v10;
    }
    else
    {
      int v10 = *(_DWORD *)(a4 + 24);
      int v12 = a3 - v10;
      int v13 = a3 - v10 - 604800;
      if (a3 - v10 <= 302399) {
        int v13 = a3 - v10;
      }
      if (v12 < -302400) {
        int v11 = v12 + 604800;
      }
      else {
        int v11 = v13;
      }
    }
    double v14 = (double)v11;
    double v15 = *(double *)(a4 + 168);
    double v129 = v15 * v15;
    double v140 = *(double *)(a4 + 96) + 19964980.4 / (v15 * (v15 * v15));
    double v16 = *(double *)(a4 + 160) + v140 * (double)v11;
    long double v17 = sin(v16);
    unsigned int v18 = 0;
    double v19 = *(double *)(a4 + 200);
    double v20 = v16 + v19 * v17;
    do
    {
      double v21 = v20;
      double v20 = v16 + v19 * sin(v20);
    }
    while (vabdd_f64(v20, v21) > 1.0e-11 && v18++ < 0x13);
    double v136 = 1.0 - v19 * v19;
    double v23 = cos(v16);
    long double v24 = tan(v20 * 0.5);
    long double v25 = atan(sqrt((v19 + 1.0) / (1.0 - v19)) * v24);
    double v26 = v25 + v25;
    if (v26 < 0.0) {
      double v26 = v26 + 6.28318531;
    }
    __double2 v27 = __sincos_stret(v26);
    __double2 v28 = __sincos_stret(*(double *)(a4 + 192));
    double v29 = v28.__sinval * v27.__cosval + v27.__sinval * v28.__cosval;
    double v30 = v27.__cosval * v28.__cosval - v27.__sinval * v28.__sinval;
    double v31 = v30 * (v29 + v29);
    if (a1 == 1)
    {
      double v23 = v30 * v30 - v29 * v29;
      double v32 = v23 * *(double *)(a4 + 120) + *(double *)(a4 + 128) * v31;
      double v33 = v32 * v32 * -0.5 + 1.0;
      double v34 = v30 * v32;
      double v126 = v32;
      double v35 = -(v29 * v32);
      double v29 = v34 + v29 * v33;
      double v30 = v35 + v30 * v33;
      double v36 = v23 * *(double *)(a4 + 104) + *(double *)(a4 + 112) * v31;
    }
    else
    {
      double v126 = 0.0;
      double v36 = 0.0;
    }
    double v132 = v30;
    double v131 = v19 * v27.__cosval + 1.0;
    double v123 = v31;
    double v125 = v36;
    double v37 = v129 * v136 / v131 + v36;
    double v138 = v30 * v37;
    double v38 = v37 * v29;
    double v39 = *(double *)(a4 + 184);
    if (a1 == 1)
    {
      double v127 = v23 * *(double *)(a4 + 136) + *(double *)(a4 + 144) * v31;
      double v39 = v39 + v127 + *(double *)(a4 + 152) * v14;
    }
    else
    {
      double v127 = 0.0;
    }
    double v134 = sqrt(v136);
    __double2 v40 = __sincos_stret(v39);
    double v41 = *(double *)(a4 + 208);
    __double2 v42 = __sincos_stret(*(double *)(a4 + 176) + v41 * v14 + (double)v10 * -0.00007292115);
    double v139 = v138 * v42.__cosval - v38 * v40.__cosval * v42.__sinval;
    double v133 = v38 * v40.__cosval * v42.__cosval + v138 * v42.__sinval;
    double v135 = v38 * v40.__sinval;
    double v128 = (double)v11;
    __double2 v43 = __sincos_stret(v14 * 0.00007292115);
    uint64_t v44 = 0;
    double cosval = v43.__cosval;
    float64x2_t v153 = vmulq_n_f64((float64x2_t)xmmword_22BB44BA0, v43.__sinval);
    double v154 = -v43.__sinval;
    float64x2_t v155 = vmulq_n_f64((float64x2_t)xmmword_22BB44BA0, v43.__cosval);
    long long v156 = xmmword_22BB44BB0;
    uint64_t v157 = 0x3FEFE0D3B41815ABLL;
    uint64_t v45 = &v153.f64[1];
    do
    {
      double v46 = v133 * *(v45 - 1) + *(v45 - 2) * v139;
      double v47 = *v45;
      v45 += 3;
      *(double *)(a5 + v44) = v46 + v47 * v135;
      v44 += 8;
    }
    while (v44 != 24);
    double v48 = v136 * v134;
    double v49 = v131 * (v140 * v131) / (v136 * v134);
    double v50 = v49 + v49;
    double v51 = v140 * (v129 * *(double *)(a4 + 200) / v134);
    double v52 = v27.__sinval * v51;
    if (a1 == 1)
    {
      double v121 = *(double *)(a4 + 112) * v23 - *(double *)(a4 + 104) * v123;
      double v122 = *(double *)(a4 + 128) * v23 - *(double *)(a4 + 120) * v123;
      double v53 = v49 + v50 * v122;
      double v52 = v52 + v50 * v121;
      double v124 = *(double *)(a4 + 144) * v23 - *(double *)(a4 + 136) * v123;
      double v54 = *(double *)(a4 + 152) + v50 * v124;
    }
    else
    {
      double v121 = 0.0;
      double v122 = 0.0;
      double v53 = v131 * (v140 * v131) / (v136 * v134);
      double v124 = 0.0;
      double v54 = 0.0;
    }
    uint64_t v55 = 0;
    double v56 = v52 * v132 - v38 * v53;
    double v57 = v138 * v53 + v52 * v29;
    double v58 = v56 + -(v38 * v41) * v40.__cosval;
    double v59 = v57 * v40.__cosval - v135 * v54 + v138 * v41;
    double v60 = v58 * v42.__cosval - v59 * v42.__sinval;
    double v61 = v42.__cosval * v59 + v58 * v42.__sinval;
    double v62 = v40.__cosval * (v38 * v54) + v57 * v40.__sinval;
    double v63 = v43.__cosval * 0.00007292115;
    double v64 = v43.__sinval * 0.00007292115;
    int64x2_t v65 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_22BB44BA0, v43.__cosval * 0.00007292115);
    *(void *)&v67.f64[0] = vdupq_laneq_s64(v65, 1).u64[0];
    float64x2_t v66 = (float64x2_t)vdupq_lane_s64(v65.i64[0], 0);
    v66.f64[0] = -(v43.__sinval * 0.00007292115);
    v67.f64[1] = -(v43.__cosval * 0.00007292115);
    unint64_t v68 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    *(void *)&v69.f64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
    int8x16_t v70 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_22BB44BC0, v43.__sinval * 0.00007292115);
    unint64_t v137 = vextq_s8(v70, v70, 8uLL).u64[0];
    int v71 = &v153.f64[1];
    do
    {
      double v72 = v61 * *(v71 - 1) + *(v71 - 2) * v60;
      double v73 = *v71;
      v71 += 3;
      *(double *)((char *)&v150 + v55) = v72 + v73 * v62;
      v55 += 8;
    }
    while (v55 != 24);
    *(_OWORD *)(a5 + 24) = v150;
    *(void *)(a5 + 40) = v151;
    v74.f64[0] = -(v43.__sinval * 0.00007292115);
    unint64_t v130 = v68;
    *(void *)&v74.f64[1] = v68;
    v75.f64[0] = v69.f64[0];
    *(void *)&v75.f64[1] = v70.i64[0];
    v76.f64[0] = v67.f64[0];
    *(void *)&v76.f64[1] = v137;
    *(float64x2_t *)(a5 + 24) = vaddq_f64(*(float64x2_t *)(a5 + 24), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v75, v133), v74, v139), v76, v135));
    double v77 = v131 * (v27.__sinval * (-(v50 * v140) * *(double *)(a4 + 200)) / v48);
    v76.f64[0] = v49 * v51;
    double v78 = v27.__cosval;
    double v79 = v27.__cosval * v76.f64[0];
    double v80 = 0.0;
    if (a1 == 1)
    {
      double v81 = v77 + v77;
      double v82 = v50 * -v50;
      double v79 = v79 + (v77 + v77) * v121 + v82 * v125;
      double v77 = v77 + (v77 + v77) * v122 + v82 * v126;
      double v80 = v82 * v127 + v81 * v124;
    }
    uint64_t v83 = 0;
    double v84 = v132 * (v52 * v53) + v79 * v29 + v56 * v53 + v77 * v138;
    double v85 = v79 * v132
        - v52 * v53 * v29
        - v57 * v53
        - v77 * v38
        + -(v57 * v41) * v40.__cosval
        + v41 * (v38 * v54) * v40.__sinval;
    double v86 = v40.__sinval * -(v57 * v54) + v84 * v40.__cosval - v62 * v54 + -v135 * v80 + v56 * v41;
    double v87 = v42.__cosval * v85 - v41 * v61 - v86 * v42.__sinval;
    double v88 = v42.__sinval * v85 + v41 * v60 + v86 * v42.__cosval;
    double v89 = v40.__cosval * ((v57 + v57) * v54) + v84 * v40.__sinval + v38 * v80 * v40.__cosval + -(v54 * v54) * v135;
    double v90 = v63 * 0.00007292115;
    int64x2_t v91 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_22BB44BC0, v64 * 0.00007292115);
    *(void *)&v93.f64[0] = vdupq_laneq_s64(v91, 1).u64[0];
    float64x2_t v92 = (float64x2_t)vdupq_lane_s64(v91.i64[0], 0);
    v92.f64[0] = -(v63 * 0.00007292115);
    v93.f64[1] = v64 * 0.00007292115;
    unint64_t v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
    *(void *)&v95.f64[0] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
    int8x16_t v96 = (int8x16_t)vmulq_n_f64((float64x2_t)xmmword_22BB44BC0, v90);
    unint64_t v97 = vextq_s8(v96, v96, 8uLL).u64[0];
    uint64_t v98 = &v153.f64[1];
    do
    {
      double v99 = v88 * *(v98 - 1) + *(v98 - 2) * v87;
      double v100 = *v98;
      v98 += 3;
      *(double *)((char *)&v150 + v83) = v99 + v100 * v89;
      v83 += 8;
    }
    while (v83 != 24);
    *(_OWORD *)(a5 + 48) = v150;
    uint64_t v101 = v151;
    *(void *)&v66.f64[1] = v130;
    *(void *)&v69.f64[1] = v70.i64[0];
    *(void *)&v67.f64[1] = v137;
    *(void *)&v92.f64[1] = v94;
    float64x2_t v102 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v69, v61), v66, v60), v67, v62);
    *(void *)&v95.f64[1] = v96.i64[0];
    *(void *)&v93.f64[1] = v97;
    __asm { FMOV            V3.2D, #2.0 }
    *(float64x2_t *)(a5 + 48) = vaddq_f64(vmlaq_f64(*(float64x2_t *)(a5 + 48), _Q3, v102), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, v133), v92, v139), v93, v135));
    *(void *)(a5 + 64) = v101;
    *(void *)(a5 + 72) = 0;
    *(void *)(a5 + 80) = 0;
    *(void *)(a5 + 88) = 0;
    double v107 = (double)v11;
    if (a1 != 1)
    {
      int v110 = (v11 + 302400) / 1000 + 1200;
      if (v11 >= 31233600) {
        int v110 = 65500;
      }
      if (v11 <= -301401) {
        int v110 = 1200;
      }
      *(double *)(a5 + 112) = (double)(v110 * v110);
      goto LABEL_62;
    }
    unint64_t v108 = *(unsigned __int8 *)(a4 + 15);
    if (v108 > 0xF) {
      double v109 = 99980001.0;
    }
    else {
      double v109 = BDS_Legacy_URA_Table[v108];
    }
    *(double *)(a5 + 112) = v109;
    int v111 = v11 / 60;
    if (*(unsigned char *)(a4 + 14)) {
      int v112 = -180;
    }
    else {
      int v112 = -120;
    }
    int v113 = v112 + v111;
    if (v112 + v111 >= 1)
    {
      *(void *)&long long v150 = 0;
      if (!R8_EQ((const double *)(a4 + 208), (const double *)&v150)) {
        goto LABEL_59;
      }
      double v149 = 0.0;
      if (!R8_EQ((const double *)(a4 + 48), &v149)) {
        goto LABEL_59;
      }
      double v148 = 0.0;
      if (R8_EQ((const double *)(a4 + 112), &v148)
        && (double v147 = 0.0, R8_EQ((const double *)(a4 + 96), &v147))
        && (double v146 = 0.0, R8_EQ((const double *)(a4 + 120), &v146))
        && (double v145 = 0.0, R8_EQ((const double *)(a4 + 128), &v145))
        && (double v144 = 0.0, R8_EQ((const double *)(a4 + 136), &v144))
        && (double v143 = 0.0, R8_EQ((const double *)(a4 + 144), &v143))
        && (double v142 = 0.0, R8_EQ((const double *)(a4 + 104), &v142)))
      {
        double v141 = 0.0;
        BOOL v114 = R8_EQ((const double *)(a4 + 152), &v141);
        double v78 = v27.__cosval;
        if (v114) {
          goto LABEL_61;
        }
      }
      else
      {
LABEL_59:
        double v78 = v27.__cosval;
      }
      *(double *)(a5 + 112) = v109 + (double)(2 * v113 * v113);
    }
LABEL_61:
    double v107 = v128 + (double)(*(_DWORD *)(a4 + 24) - *(_DWORD *)(a4 + 20));
LABEL_62:
    double v115 = *(double *)(a4 + 200);
    double v116 = v115 * -4.44280763e-10 * *(double *)(a4 + 168) / (v115 * v78 + 1.0);
    double v117 = *(double *)(a4 + 40);
    double v118 = v107 * *(double *)(a4 + 48);
    *(double *)(a5 + 96) = *(double *)(a4 + 32) + v134 * v116 * v27.__sinval + v107 * (v118 + v117);
    *(double *)(a5 + 104) = v117 + v140 * v116 * (v78 + v115) + v118 * 2.0;
    long long v119 = *(_OWORD *)(a4 + 56);
    long long v120 = *(_OWORD *)(a4 + 72);
    *(void *)(a5 + 152) = *(void *)(a4 + 88);
    *(_OWORD *)(a5 + 136) = v120;
    *(_OWORD *)(a5 + 120) = v119;
    *(_DWORD *)(a5 + 160) = a3;
    *(_WORD *)(a5 + 164) = v8;
    *(_WORD *)(a5 + 166) = *(_WORD *)(a4 + 16);
    *(_DWORD *)(a5 + 184) = a1;
    *(unsigned char *)(a5 + 180) = *(unsigned char *)(a4 + 12);
    *(_DWORD *)(a5 + 176) = *(_DWORD *)(a4 + 8);
  }
}

void gnss::GnssAdaptDevice::setAssistanceAccel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned int v5 = *(void **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    int v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice18setAssistanceAccelEONSt3__16vectorINS_17SensorSample3AxisENS1_9allocatorIS3_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_17;
    void block[4] = a1;
    std::string __p = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    std::vector<gnss::SensorSample3Axis>::__init_with_size[abi:ne180100]<gnss::SensorSample3Axis*,gnss::SensorSample3Axis*>(&__p, v5, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3));
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    if (__p)
    {
      int v11 = __p;
      operator delete(__p);
    }
    if (v5) {
      operator delete(v5);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setAssistanceAccel", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22BA34D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
}

size_t ___ZN4gnss15GnssAdaptDevice18setAssistanceAccelEONSt3__16vectorINS_17SensorSample3AxisENS1_9allocatorIS3_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(void *a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceAccel_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v6 = (gnss::GnssAdaptDevice *)a1[5];
  unsigned int v5 = (gnss::GnssAdaptDevice *)a1[6];
  if (v5 == v6 || (uint64_t v7 = (v5 - v6) >> 3, v8 = -21845 * v7, 0xAAAAAAAAAAAAAAABLL * v7 >= 0x10000))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v51, (uint64_t)(a1 + 8));
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v51, (uint64_t)"setAssistanceAccel_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v51);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sample Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "setAssistanceAccel_block_invoke", 515, -1431655765 * ((uint64_t)(a1[6] - a1[5]) >> 3));
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 0, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setAssistanceAccel_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
    }
  }
  else
  {
    uint64_t v9 = 0x5555555555555560 * v7;
    int v10 = (char *)operator new[](0x5555555555555560 * v7, MEMORY[0x263F8C180]);
    if (!v10)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)(a1 + 8));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 2, (uint64_t)v50, (uint64_t)"setAssistanceAccel_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
      snprintf(v49, 0x400uLL, "ASSERT,%s,%d,%s", "setAssistanceAccel_block_invoke", 63, "Memory allocation failed for Accel");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v42 = mach_continuous_time();
        unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "OSA", 69, "setAssistanceAccel_block_invoke", v49);
        LbsOsaTrace_WriteLog(0xEu, __str, v43, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("setAssistanceAccel_block_invoke", "ga02GnssDeviceSens.cpp", 63, "false && \"Memory allocation failed for Accel\"");
    }
    uint64_t v44 = (gnss::GnssAdaptDevice *)v2;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v10[v11];
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((_DWORD *)v12 + 6) = 0;
      *((void *)v12 + 2) = 0;
      v11 += 32;
    }
    while (v9 != v11);
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v45 = v10;
    uint64_t v15 = (double *)(v10 + 24);
    do
    {
      uint64_t v16 = *(void *)((char *)v6 + v13);
      if (v16)
      {
        float v17 = *(float *)((char *)v6 + v13 + 16);
        *(float64x2_t *)(v15 - 3) = vcvtq_f64_f32(*(float32x2_t *)((char *)v6 + v13 + 8));
        *(v15 - 1) = v17;
        *(_DWORD *)uint64_t v15 = (v16 + 500000) / 0xF4240uLL;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AccelSampleVector Idx,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 87, "setAssistanceAccel_block_invoke", 515, v14);
          LbsOsaTrace_WriteLog(0x18u, __str, v19, 2, 1);
        }
        --v8;
        int v6 = (gnss::GnssAdaptDevice *)a1[5];
        unsigned int v5 = (gnss::GnssAdaptDevice *)a1[6];
      }
      ++v14;
      uint64_t v20 = v5 - v6;
      v15 += 4;
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3));
    if (v8)
    {
      double v21 = v45;
      gnss::GnssAdaptDevice::Ga02_02PrintSensorData(v6, v20, 0x41u);
      int v22 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v23 = (uint64_t)(a1 + 8);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, v23);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v44, v22, (uint64_t)v47);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
      unsigned int v24 = GNS_SenSetAccl(v22, v8, v45);
      if (v24 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumSamples,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "setAssistanceAccel_block_invoke", v8);
          LbsOsaTrace_WriteLog(0x18u, __str, v26, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "setAssistanceAccel_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v46, v23);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v44, v24, (uint64_t)v46, "setAssistanceAccel_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v46);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v44, v22);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v38 = mach_continuous_time();
          unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SenSetAccl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 69, "setAssistanceAccel_block_invoke", 257, v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v39, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v40 = mach_continuous_time();
          unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 68, "setAssistanceAccel_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v41, 5, 1);
        }
      }
    }
    else
    {
      double v21 = v45;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, (uint64_t)(a1 + 8));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v44, 4, (uint64_t)v48, (uint64_t)"setAssistanceAccel_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v34 = mach_continuous_time();
        unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No Valid Samples\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setAssistanceAccel_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "setAssistanceAccel_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
      }
    }
    return MEMORY[0x230F4E5A0](v21, 0x1000C80F6D918ACLL);
  }
  return result;
}

void sub_22BA356C4(_Unwind_Exception *a1)
{
}

void gnss::GnssAdaptDevice::Ga02_02PrintSensorData(gnss::GnssAdaptDevice *this, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (this)
  {
    *(void *)std::string __str = 0;
    double v63 = 0;
    double v64 = 0;
    uint64_t v6 = a2 + 5;
    if (a2 == -5)
    {
      uint64_t v9 = 0;
    }
    else
    {
      if (v6 < 0) {
        goto LABEL_114;
      }
      uint64_t v7 = (unsigned __int8 *)operator new(a2 + 5);
      unsigned __int16 v8 = v7;
      uint64_t v9 = &v7[v6];
      *(void *)std::string __str = v7;
      double v63 = v7;
      double v64 = &v7[v6];
      if (v6 >= 1)
      {
        *uint64_t v7 = a3;
        int v10 = v7 + 1;
        goto LABEL_17;
      }
      uint64_t v6 = (uint64_t)v7;
    }
    unint64_t v13 = 2 * (void)&v9[-v6];
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    if ((unint64_t)&v9[-v6] >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v13;
    }
    unsigned __int16 v8 = (unsigned __int8 *)operator new(v14);
    *unsigned __int16 v8 = a3;
    int v10 = v8 + 1;
    uint64_t v9 = &v8[v14];
    *(void *)std::string __str = v8;
    double v63 = v8 + 1;
    double v64 = v9;
    if (v6) {
      operator delete((void *)v6);
    }
LABEL_17:
    double v63 = v10;
    if (v10 < v9)
    {
      *int v10 = BYTE1(a2);
      uint64_t v15 = v10 + 1;
      goto LABEL_36;
    }
    uint64_t v16 = v10 - v8;
    uint64_t v17 = v10 - v8 + 1;
    if (v17 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    if (2 * (v9 - v8) > (unint64_t)v17) {
      uint64_t v17 = 2 * (v9 - v8);
    }
    if ((unint64_t)(v9 - v8) >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v18 = v17;
    }
    if (v18) {
      unsigned __int16 v19 = (unsigned __int8 *)operator new(v18);
    }
    else {
      unsigned __int16 v19 = 0;
    }
    uint64_t v9 = &v19[v18];
    v19[v16] = BYTE1(a2);
    uint64_t v15 = &v19[v16 + 1];
    if (v10 == v8)
    {
      *(void *)std::string __str = &v19[v16];
      double v63 = &v19[v16 + 1];
      v19 += v16;
      double v64 = v9;
    }
    else
    {
      uint64_t v20 = &v10[~(unint64_t)v8];
      do
      {
        unsigned __int8 v21 = *--v10;
        (v20--)[(void)v19] = v21;
      }
      while (v10 != v8);
      unsigned __int16 v8 = *(unsigned __int8 **)__str;
      *(void *)std::string __str = v19;
      double v63 = &v19[v16 + 1];
      double v64 = v9;
      if (!v8) {
        goto LABEL_35;
      }
    }
    operator delete(v8);
LABEL_35:
    unsigned __int16 v8 = v19;
LABEL_36:
    double v63 = v15;
    if (v15 >= v9)
    {
      uint64_t v24 = v15 - v8;
      uint64_t v25 = v15 - v8 + 1;
      if (v25 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      if (2 * (v9 - v8) > (unint64_t)v25) {
        uint64_t v25 = 2 * (v9 - v8);
      }
      if ((unint64_t)(v9 - v8) >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v26 = v25;
      }
      if (v26) {
        uint64_t v27 = operator new(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      int v22 = (unsigned __int8 *)v27 + v26;
      *((unsigned char *)v27 + v24) = a2;
      uint64_t v23 = (unsigned __int8 *)v27 + v24 + 1;
      if (v15 == v8)
      {
        *(void *)std::string __str = (char *)v27 + v24;
        double v63 = (unsigned __int8 *)v27 + v24 + 1;
        double v64 = v22;
      }
      else
      {
        unsigned __int16 v28 = &v15[~(unint64_t)v8];
        do
        {
          unsigned __int8 v29 = *--v15;
          (v28--)[(void)v27] = v29;
        }
        while (v15 != v8);
        unsigned __int16 v8 = *(unsigned __int8 **)__str;
        *(void *)std::string __str = v27;
        double v63 = (unsigned __int8 *)v27 + v24 + 1;
        double v64 = v22;
        if (!v8) {
          goto LABEL_54;
        }
      }
      operator delete(v8);
    }
    else
    {
      *uint64_t v15 = a2;
      int v22 = v64;
      uint64_t v23 = v15 + 1;
    }
LABEL_54:
    double v63 = v23;
    if (v23 < v22)
    {
      *uint64_t v23 = 24;
      unsigned __int16 v30 = *(unsigned __int8 **)__str;
      uint64_t v31 = (uint64_t)(v23 + 1);
      goto LABEL_72;
    }
    uint64_t v32 = *(unsigned __int8 **)__str;
    unsigned __int16 v33 = &v23[-*(void *)__str];
    uint64_t v34 = (uint64_t)&v23[-*(void *)__str + 1];
    if (v34 >= 0)
    {
      if (2 * (uint64_t)&v22[-*(void *)__str] > (unint64_t)v34) {
        uint64_t v34 = 2 * (void)&v22[-*(void *)__str];
      }
      if ((unint64_t)&v22[-*(void *)__str] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v35 = v34;
      }
      if (v35) {
        unsigned __int16 v30 = (unsigned __int8 *)operator new(v35);
      }
      else {
        unsigned __int16 v30 = 0;
      }
      uint64_t v36 = &v30[v35];
      v33[(void)v30] = 24;
      uint64_t v31 = (uint64_t)&v33[(void)v30 + 1];
      if (v23 == v32)
      {
        *(void *)std::string __str = &v33[(void)v30];
        double v63 = &v33[(void)v30 + 1];
        unsigned __int16 v30 = &v33[(void)v30];
        double v64 = v36;
      }
      else
      {
        unsigned __int16 v37 = &v23[~(unint64_t)v32];
        do
        {
          unsigned __int8 v38 = *--v23;
          (v37--)[(void)v30] = v38;
        }
        while (v23 != v32);
        uint64_t v23 = *(unsigned __int8 **)__str;
        *(void *)std::string __str = v30;
        double v63 = &v33[(void)v30 + 1];
        double v64 = v36;
        if (!v23) {
          goto LABEL_72;
        }
      }
      operator delete(v23);
LABEL_72:
      double v63 = (unsigned __int8 *)v31;
      if (a2 < 1)
      {
        uint64_t v44 = (unsigned __int8 *)v31;
      }
      else if ((uint64_t)&v64[-v31] >= a2)
      {
        memmove((void *)v31, this, a2);
        double v63 = (unsigned __int8 *)(v31 + a2);
        uint64_t v44 = (unsigned __int8 *)(v31 + a2);
      }
      else
      {
        uint64_t v39 = v31 - (void)v30;
        uint64_t v40 = (unsigned __int8 *)(v31 - (void)v30 + a2);
        if ((uint64_t)v40 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v41 = v64 - v30;
        if (2 * (v64 - v30) > (unint64_t)v40) {
          uint64_t v40 = (unsigned __int8 *)(2 * v41);
        }
        if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v42 = (size_t)v40;
        }
        if (v42) {
          unsigned __int16 v43 = (char *)operator new(v42);
        }
        else {
          unsigned __int16 v43 = 0;
        }
        uint64_t v45 = &v43[v39];
        memcpy(&v43[v39], this, a2);
        if (v30 == (unsigned __int8 *)v31)
        {
          uint64_t v46 = v31;
          double v47 = &v43[v39];
        }
        else
        {
          do
          {
            v43[v39 - 1] = v30[v39 - 1];
            --v39;
          }
          while (v39);
          uint64_t v46 = (uint64_t)v63;
          unsigned __int16 v30 = v63;
          double v47 = v43;
        }
        double v48 = (unsigned __int8 *)&v45[a2];
        double v49 = (unsigned __int8 *)&v43[v42];
        uint64_t v50 = v46 - v31;
        if (v30 != (unsigned __int8 *)v31) {
          memmove(v48, (const void *)v31, v46 - v31);
        }
        uint64_t v44 = &v48[v50];
        double v51 = *(unsigned __int8 **)__str;
        *(void *)std::string __str = v47;
        double v63 = v44;
        double v64 = v49;
        if (v51) {
          operator delete(v51);
        }
      }
      if (v44 >= v64)
      {
        double v54 = *(unsigned __int8 **)__str;
        uint64_t v55 = &v44[-*(void *)__str];
        uint64_t v56 = (uint64_t)&v44[-*(void *)__str + 1];
        if (v56 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v57 = (unint64_t)&v64[-*(void *)__str];
        if (2 * (uint64_t)&v64[-*(void *)__str] > (unint64_t)v56) {
          uint64_t v56 = 2 * v57;
        }
        if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v58 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v58 = v56;
        }
        if (v58) {
          double v52 = (unsigned __int8 *)operator new(v58);
        }
        else {
          double v52 = 0;
        }
        double v59 = &v52[v58];
        v55[(void)v52] = 10;
        uint64_t v53 = (uint64_t)&v55[(void)v52 + 1];
        if (v44 == v54)
        {
          double v52 = &v55[(void)v52];
        }
        else
        {
          double v60 = &v44[~(unint64_t)v54];
          do
          {
            unsigned __int8 v61 = *--v44;
            (v60--)[(void)v52] = v61;
          }
          while (v44 != v54);
          uint64_t v44 = *(unsigned __int8 **)__str;
        }
        *(void *)std::string __str = v52;
        double v63 = (unsigned __int8 *)v53;
        double v64 = v59;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *uint64_t v44 = 10;
        double v52 = *(unsigned __int8 **)__str;
        uint64_t v53 = (uint64_t)(v44 + 1);
      }
      double v63 = (unsigned __int8 *)v53;
      LbsOsaTrace_PrintBinaryBuf(0x19u, 5u, 0, v52, (unsigned __int16)(v53 - (_WORD)v52));
      if (*(void *)__str)
      {
        double v63 = *(unsigned __int8 **)__str;
        operator delete(*(void **)__str);
      }
      return;
    }
LABEL_114:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga02_02PrintSensorData", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
  }
}

void sub_22BA35E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t __copy_helper_block_e8_40c66_ZTSNSt3__16vectorIN4gnss17SensorSample3AxisENS_9allocatorIS2_EEEE64c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v3 = a1 + 5;
  a1[7] = 0;
  std::vector<gnss::SensorSample3Axis>::__init_with_size[abi:ne180100]<gnss::SensorSample3Axis*,gnss::SensorSample3Axis*>(a1 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v3 + 3), a2 + 64);
}

void sub_22BA35EE4(_Unwind_Exception *exception_object)
{
  unsigned __int16 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__16vectorIN4gnss17SensorSample3AxisENS_9allocatorIS2_EEEE64c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(void *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 8);
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
}

void gnss::GnssAdaptDevice::setAssistanceGyro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned int v5 = *(void **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    uint64_t v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17setAssistanceGyroEONSt3__16vectorINS_17SensorSample3AxisENS1_9allocatorIS3_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_20_1;
    void block[4] = a1;
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    std::vector<gnss::SensorSample3Axis>::__init_with_size[abi:ne180100]<gnss::SensorSample3Axis*,gnss::SensorSample3Axis*>(&__p, v5, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3));
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
    if (v5) {
      operator delete(v5);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setAssistanceGyro", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22BA3615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
}

size_t ___ZN4gnss15GnssAdaptDevice17setAssistanceGyroEONSt3__16vectorINS_17SensorSample3AxisENS1_9allocatorIS3_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(void *a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceGyro_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  uint64_t v6 = (gnss::GnssAdaptDevice *)a1[5];
  unsigned int v5 = (gnss::GnssAdaptDevice *)a1[6];
  if (v5 == v6 || (uint64_t v7 = (v5 - v6) >> 3, v8 = -21845 * v7, 0xAAAAAAAAAAAAAAABLL * v7 >= 0x10000))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v51, (uint64_t)(a1 + 8));
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v51, (uint64_t)"setAssistanceGyro_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v51);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sample Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "setAssistanceGyro_block_invoke", 515, -1431655765 * ((uint64_t)(a1[6] - a1[5]) >> 3));
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 0, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setAssistanceGyro_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
    }
  }
  else
  {
    uint64_t v9 = 0x5555555555555560 * v7;
    int v10 = (char *)operator new[](0x5555555555555560 * v7, MEMORY[0x263F8C180]);
    if (!v10)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)(a1 + 8));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 2, (uint64_t)v50, (uint64_t)"setAssistanceGyro_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
      snprintf(v49, 0x400uLL, "ASSERT,%s,%d,%s", "setAssistanceGyro_block_invoke", 141, "Memory allocation failed for Gyro");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v42 = mach_continuous_time();
        unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "OSA", 69, "setAssistanceGyro_block_invoke", v49);
        LbsOsaTrace_WriteLog(0xEu, __str, v43, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("setAssistanceGyro_block_invoke", "ga02GnssDeviceSens.cpp", 141, "false && \"Memory allocation failed for Gyro\"");
    }
    uint64_t v44 = (gnss::GnssAdaptDevice *)v2;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v10[v11];
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((_DWORD *)v12 + 6) = 0;
      *((void *)v12 + 2) = 0;
      v11 += 32;
    }
    while (v9 != v11);
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v45 = v10;
    uint64_t v15 = (double *)(v10 + 24);
    do
    {
      uint64_t v16 = *(void *)((char *)v6 + v13);
      if (v16)
      {
        float v17 = *(float *)((char *)v6 + v13 + 16);
        *(float64x2_t *)(v15 - 3) = vcvtq_f64_f32(*(float32x2_t *)((char *)v6 + v13 + 8));
        *(v15 - 1) = v17;
        *(_DWORD *)uint64_t v15 = (v16 + 500000) / 0xF4240uLL;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GyroSampleVector Idx,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 87, "setAssistanceGyro_block_invoke", 515, v14);
          LbsOsaTrace_WriteLog(0x18u, __str, v19, 2, 1);
        }
        --v8;
        uint64_t v6 = (gnss::GnssAdaptDevice *)a1[5];
        unsigned int v5 = (gnss::GnssAdaptDevice *)a1[6];
      }
      ++v14;
      uint64_t v20 = v5 - v6;
      v15 += 4;
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3));
    if (v8)
    {
      unsigned __int8 v21 = v45;
      gnss::GnssAdaptDevice::Ga02_02PrintSensorData(v6, v20, 0x47u);
      int v22 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v23 = (uint64_t)(a1 + 8);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, v23);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v44, v22, (uint64_t)v47);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
      int v24 = GNS_SenSetGyro(v22, v8, v45);
      if (v24 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumSamples,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "setAssistanceGyro_block_invoke", v8);
          LbsOsaTrace_WriteLog(0x18u, __str, v26, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "setAssistanceGyro_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v46, v23);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v44, 0xEu, (uint64_t)v46, "setAssistanceGyro_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v46);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v44, v22);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v38 = mach_continuous_time();
          unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SenSetGyro,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 69, "setAssistanceGyro_block_invoke", 257, v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v39, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v40 = mach_continuous_time();
          unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 68, "setAssistanceGyro_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v41, 5, 1);
        }
      }
    }
    else
    {
      unsigned __int8 v21 = v45;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, (uint64_t)(a1 + 8));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v44, 4, (uint64_t)v48, (uint64_t)"setAssistanceGyro_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v34 = mach_continuous_time();
        unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No Valid Samples\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setAssistanceGyro_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "setAssistanceGyro_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
      }
    }
    return MEMORY[0x230F4E5A0](v21, 0x1000C80F6D918ACLL);
  }
  return result;
}

void sub_22BA36A94(_Unwind_Exception *a1)
{
}

void gnss::GnssAdaptDevice::Ga02_00RegisterGnsSensStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (int)a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    uint64_t v6 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga02_01HandleGnsSensStatusResponse", v4);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
    }
    if (a3)
    {
      int v9 = *((_DWORD *)a3 + 2);
      int v10 = *(NSObject **)(v6 + 288);
      *(void *)std::string __str = MEMORY[0x263EF8330];
      uint64_t v14 = 0x40000000;
      uint64_t v15 = ___ZN4gnss15GnssAdaptDevice34Ga02_01HandleGnsSensStatusResponseE12e_gnsSen_MsgjP18s_gnsSen_ApiStatus_block_invoke;
      uint64_t v16 = &__block_descriptor_tmp_26_1;
      uint64_t v17 = v6;
      uint64_t v18 = *a3;
      int v19 = v9;
      dispatch_async(v10, __str);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SensResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga02_01HandleGnsSensStatusResponse", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
  }
}

void *___ZN4gnss15GnssAdaptDevice34Ga02_01HandleGnsSensStatusResponseE12e_gnsSen_MsgjP18s_gnsSen_ApiStatus_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v29 = 0;
  uint64_t v2 = *(void *)(v1 + 264);
  if (!v2) {
    goto LABEL_34;
  }
  uint64_t v4 = v1 + 264;
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = v1 + 264;
  uint64_t v7 = *(void *)(v1 + 264);
  do
  {
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      int v10 = (uint64_t *)v7;
    }
    else {
      int v10 = (uint64_t *)(v7 + 8);
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 != v4 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v13 = v1 + 264;
    do
    {
      unsigned int v14 = *(_DWORD *)(v2 + 32);
      BOOL v15 = v14 >= v5;
      if (v14 >= v5) {
        uint64_t v16 = (uint64_t *)v2;
      }
      else {
        uint64_t v16 = (uint64_t *)(v2 + 8);
      }
      if (v15) {
        uint64_t v13 = v2;
      }
      uint64_t v2 = *v16;
    }
    while (*v16);
    if (v13 == v4 || v5 < *(_DWORD *)(v13 + 32)) {
      uint64_t v13 = v1 + 264;
    }
    std::function<void ()(gnss::Result)>::operator=(v28, v13 + 40);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer((uint64_t **)(v1 + 256), (uint64_t *)v6);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v6 + 40));
    operator delete((void *)v6);
    if (v29)
    {
      int v17 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v1, *(_DWORD *)(a1 + 48));
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "Ga02_01HandleGnsSensStatusResponse_block_invoke", *(_DWORD *)(a1 + 40));
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
      }
      uint64_t v20 = *(NSObject **)(v1 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice34Ga02_01HandleGnsSensStatusResponseE12e_gnsSen_MsgjP18s_gnsSen_ApiStatus_block_invoke_2;
      block[3] = &__block_descriptor_tmp_25_3;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v28);
      int v26 = v17;
      dispatch_async(v20, block);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCb,API type,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 87, "Ga02_01HandleGnsSensStatusResponse_block_invoke", 770, *(_DWORD *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 2, 1);
    }
  }
  else
  {
LABEL_34:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnsStatusRespLut Handle\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 87, "Ga02_01HandleGnsSensStatusResponse_block_invoke", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 2, 1);
    }
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
}

void sub_22BA37078(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice34Ga02_01HandleGnsSensStatusResponseE12e_gnsSen_MsgjP18s_gnsSen_ApiStatus_block_invoke_2(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

void *std::vector<gnss::SensorSample3Axis>::__init_with_size[abi:ne180100]<gnss::SensorSample3Axis*,gnss::SensorSample3Axis*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(24 * a4);
    unsigned int v8 = result;
    *unsigned int v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9 - 4);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22BA371D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SuplPosInitSent::~SuplPosInitSent(SuplPosInitSent *this)
{
  v6[1] = *(void ***)MEMORY[0x263EF8340];
  *(void *)this = &unk_26DF1AF60;
  if (*((_WORD *)this + 16) == 5)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2)
    {
      ASN1T_Velocity::U::~U((ASN1T_Velocity::U *)(v2 + 152));
      v6[0] = (void **)(v2 + 120);
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v6);
      v6[0] = (void **)(v2 + 96);
      std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v6);
      uint64_t v3 = *(void **)(v2 + 64);
      if (v3)
      {
        *(void *)(v2 + 72) = v3;
        operator delete(v3);
      }
      uint64_t v4 = *(void **)(v2 + 40);
      if (v4)
      {
        *(void *)(v2 + 48) = v4;
        operator delete(v4);
      }
      unsigned int v5 = *(void **)(v2 + 16);
      if (v5)
      {
        *(void *)(v2 + 24) = v5;
        operator delete(v5);
      }
      MEMORY[0x230F4E5D0](v2, 0x1030C40C2B5F699);
    }
    *((void *)this + 5) = 0;
  }
  SuplState::~SuplState(this);
}

{
  uint64_t vars8;

  SuplPosInitSent::~SuplPosInitSent(this);
}

{
  uint64_t vars8;

  SuplPosInitSent::~SuplPosInitSent(this);

  JUMPOUT(0x230F4E5D0);
}

uint64_t SuplPosInitSent::Init(SuplPosInitSent *this)
{
  return *((unsigned __int8 *)this + 360);
}

uint64_t SuplPosInitSent::UpdateState(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 360))
  {
    int v2 = 5;
LABEL_5:
    this = SuplState::UpdateState(this, v2, *(void *)(this + 8));
    goto LABEL_6;
  }
  if (*(unsigned char *)(this + 17))
  {
    int v2 = 7;
    goto LABEL_5;
  }
LABEL_6:
  *(unsigned char *)(v1 + 360) = 0;
  *(unsigned char *)(v1 + 17) = 0;
  return this;
}

uint64_t SuplPosInitSent::ProcessSuplPos(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = (SuplUtils *)SuplState::ProcessSuplMessage(a1, a2);
  if (v4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ProcessSuplPos", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    LOBYTE(v7) = 3;
    goto LABEL_5;
  }
  int Instance = (SuplUtils *)SuplUtils::GetInstance(v4);
  uint64_t v11 = *(void *)(a1 + 8);
  if (SuplUtils::ValidateSetSessionId(Instance, *(unsigned __int16 *)(v11 + 72), *(unsigned __int16 *)(a1 + 56))&& (int IsLoggingAllowed = (SuplUtils *)SuplUtils::ValidateSetId((uint64_t)Instance, (unsigned __int8 *)(v11 + 80), (unsigned __int8 *)(a1 + 64)), IsLoggingAllowed))
  {
    int v7 = 0;
    int v13 = 0;
  }
  else
  {
    int IsLoggingAllowed = (SuplUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "ProcessSuplPos", 515);
      int IsLoggingAllowed = (SuplUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
    }
    int v13 = 1;
    int v7 = 12;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = SuplUtils::GetInstance(IsLoggingAllowed);
  uint64_t v18 = (SuplUtils *)SuplUtils::ValidateSlpSessionId(v17, a1 + 248, v16 + 264);
  int v19 = (int)v18;
  uint64_t v20 = SuplUtils::GetInstance(v18);
  uint64_t v21 = (SuplVersionNegotiation *)SuplUtils::ValidateSlpId(v20, (unsigned __int8 *)(a1 + 272), (void *)(v16 + 288));
  if (!v19 || !v21)
  {
    uint64_t v21 = (SuplVersionNegotiation *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (v21)
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "SPL", 69, "ProcessSuplPos", 515);
      uint64_t v21 = (SuplVersionNegotiation *)LbsOsaTrace_WriteLog(0x12u, __str, v23, 0, 1);
    }
    int v13 = 1;
    int v7 = 12;
  }
  int v24 = *(unsigned __int8 *)(a1 + 26);
  uint64_t v25 = (unsigned __int8 *)SuplVersionNegotiation::GetInstance(v21);
  int v26 = atomic_load(v25 + 1);
  BOOL v27 = v26 == 255;
  uint64_t v28 = 1;
  if (v27) {
    uint64_t v28 = 2;
  }
  int v29 = atomic_load(&v25[v28]);
  if (v24 != v29 && *(_WORD *)(a1 + 32) == 5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "SPL", 69, "ProcessSuplPos", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v31, 0, 1);
    }
    LOBYTE(v7) = 10;
    goto LABEL_5;
  }
  if (v13)
  {
    if (v7 == 12)
    {
      uint64_t v32 = *(void *)(a1 + 8);
      *(_WORD *)(v32 + 64) = *(_WORD *)(a1 + 48);
      *(_WORD *)(v32 + 72) = *(_WORD *)(a1 + 56);
      *(unsigned char *)(v32 + 80) = *(unsigned char *)(a1 + 64);
      ASN1T_SETId::U::operator=(v32 + 88, a1 + 72);
      if (v32 + 64 != a1 + 48)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v32 + 264), *(char **)(a1 + 248), *(char **)(a1 + 256), *(void *)(a1 + 256) - *(void *)(a1 + 248));
        *(unsigned char *)(v32 + 288) = *(unsigned char *)(a1 + 272);
        *(unsigned char *)(v32 + 296) = *(unsigned char *)(a1 + 280);
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v32 + 304), *(char **)(a1 + 288), *(char **)(a1 + 296), *(void *)(a1 + 296) - *(void *)(a1 + 288));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v32 + 328), *(char **)(a1 + 312), *(char **)(a1 + 320), *(void *)(a1 + 320) - *(void *)(a1 + 312));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v32 + 352), *(char **)(a1 + 336), *(char **)(a1 + 344), *(void *)(a1 + 344) - *(void *)(a1 + 336));
      }
      LOBYTE(v7) = 12;
    }
    goto LABEL_5;
  }
  int v33 = *(unsigned __int16 *)(a1 + 32);
  if (v33 == 6)
  {
    *(unsigned char *)(a1 + 17) = 1;
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t SuplStateObject = SuplSession::GetSuplStateObject(*(SuplSession **)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(void *)SuplStateObject + 40))(SuplStateObject, a2);
    return 1;
  }
  if (v33 != 5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "SPL", 69, "ProcessSuplPos", 514);
      LbsOsaTrace_WriteLog(0x12u, __str, v40, 0, 1);
    }
    LOBYTE(v7) = 2;
    goto LABEL_5;
  }
  uint64_t v34 = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v25);
  unsigned __int16 v35 = (SuplPosPayloadHandler *)LcsSuplGlueLayer::SendSuplMsgStatus(v34, *(_DWORD *)(*(void *)(a1 + 8) + 376), 4, 0, 0, 0);
  uint64_t v36 = SuplPosPayloadHandler::GetInstance(v35);
  int v37 = SuplPosPayloadHandler::ProcessPosPayload(v36, *(void *)(a1 + 40), *(void *)(a1 + 8));
  if (v37 == -7)
  {
    LOBYTE(v7) = 8;
  }
  else
  {
    if (!(_WORD)v37)
    {
      *(unsigned char *)(a1 + 360) = 1;
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      return 1;
    }
    LOBYTE(v7) = 0;
  }
LABEL_5:
  *(unsigned char *)(a1 + 17) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unsigned int v8 = (void *)SuplSession::GetSuplStateObject(*(SuplSession **)(a1 + 8));
  *(unsigned char *)(v8[5] + 432) = v7;
  *(unsigned char *)(v8[5] + 1) = 1;
  std::vector<unsigned char>::vector(__str, 0xBB8uLL);
  v41[0] = __str;
  v41[1] = 0;
  char v42 = 0;
  (*(void (**)(void *, void *))(*v8 + 32))(v8, v41);
  SuplEndRecd::TerminateSession((size_t)v8, -1, 3);
  if (*(void *)__str)
  {
    uint64_t v44 = *(void **)__str;
    operator delete(*(void **)__str);
  }
  return 0;
}

void sub_22BA37AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplPosInitSent::ProcessSuplMessage(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

float64x2_t Get_GPS_Kep_Almanac(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 10);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = (*(_DWORD *)(a1 + 16) >> 4) & 0xFF000;
  double v3 = (double)*(__int16 *)(a1 + 16);
  *(unsigned char *)(a2 + 12) = BYTE2(v2) & 0x3F;
  int v4 = *(_DWORD *)(a1 + 20);
  int v5 = *(_DWORD *)(a1 + 24);
  *(double *)(a2 + 48) = v3 * 0.00000599211245 + 0.942477796;
  *(double *)(a2 + 56) = (double)(__int16)(v4 >> 8) * 1.14290475e-11;
  *(unsigned char *)(a2 + 13) = v4 & 0x1F;
  double v6 = (double)(v5 & 0xFFFFFF) * 0.00048828125;
  int32x2_t v7 = vshl_n_s32(*(int32x2_t *)(a1 + 28), 8uLL);
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v8), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  *(double *)(a2 + 64) = (double)(int)(*(_DWORD *)(a1 + 36) << 8) * 0.00000000146291808;
  *(double *)(a2 + 72) = v6;
  *(double *)(a2 + 24) = (double)(__int16)((v9 >> 8) & 0xFF00 | (32 * ((v9 >> 2) & 7))) * 0.0000000298023224;
  LODWORD(v6) = (__int16)v9;
  HIDWORD(v6) = v2;
  int8x8_t v10 = vand_s8(*(int8x8_t *)&v6, (int8x8_t)0xFFFFFFFFFFE0);
  v8.i64[0] = v10.i32[0];
  v8.i64[1] = v10.i32[1];
  float64x2_t result = vmulq_f64(vcvtq_f64_s64(v8), (float64x2_t)xmmword_22BB44C70);
  *(float64x2_t *)(a2 + 32) = result;
  *(_DWORD *)(a2 + 8) = 1;
  return result;
}

uint64_t lsim24_01HandleSensApiStatus(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim24_01HandleSensApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  int v4 = (char *)gnssOsa_Calloc("lsim24_01HandleSensApiStatus", 38, 1, 0xCuLL);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (v4)
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_SENSAPI_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim24_01HandleSensApiStatus");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    if (g_GnsSenCallback)
    {
      *(_DWORD *)int v4 = *(_DWORD *)(a1 + 20);
      *(void *)(v4 + 4) = *(void *)(a1 + 12);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>SensCB,Api,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim24_01HandleSensApiStatus", *((_DWORD *)v4 + 1), *(_DWORD *)v4, *((_DWORD *)v4 + 2));
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
      }
      g_GnsSenCallback(0, 12, v4);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SENS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim24_01HandleSensApiStatus", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
    }
    free(v4);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  }
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim24_01HandleSensApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  return 0;
}

size_t lsim24_02SensCbInit(size_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsSenCallback)
  {
    float64x2_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim24_02SensCbInit", 513);
      float64x2_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsSenCallbacunint64_t k = v1;
    return result;
  }
  float64x2_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim24_02SensCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_SenInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_SenInitialize", 98, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[3] = 12;
  *((void *)v2 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v2);
  return 1;
}

uint64_t GNS_SenSetAccl(int a1, unsigned int a2, char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_SenSetAccl");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Accel\n");
LABEL_18:
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 2, 1);
    }
LABEL_19:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "GNS_SenSetAccl");
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
    }
    return 2;
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NumSamples,%u\n", v28);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v8 = a2;
  if (a2 >= 0xC9)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NumSamples,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "GNS_SenSetAccl", 514, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
    }
    int v8 = 200;
  }
  unsigned __int16 v11 = gnssOsa_Calloc("GNS_SenSetAccl", 214, 1, 0x10uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    unsigned __int16 v13 = gnssOsa_Calloc("GNS_SenSetAccl", 221, v8, 0x20uLL);
    *((void *)v12 + 1) = v13;
    if (v13)
    {
      uint64_t v14 = gnssOsa_Calloc("GNS_SenSetAccl", 229, 1, 0x20uLL);
      if (v14)
      {
        unsigned __int16 v15 = v14;
        *(_WORD *)uint64_t v12 = v8;
        if (a2 < 0xC9)
        {
          int v17 = 250;
          uint64_t v16 = a3;
        }
        else
        {
          uint64_t v16 = &a3[32 * a2 - 6400];
          int v17 = 246;
        }
        memcpy_s("GNS_SenSetAccl", v17, *((void **)v12 + 1), 32 * (v8 & 0x7FF), v16, 32 * (v8 & 0x7FFu));
        v15[2] = v12;
        *((_DWORD *)v15 + 6) = a1;
        AgpsSendFsmMsg(131, 134, 8782595, v15);
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "GNS_SenSetAccl");
        uint64_t v21 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
        return v21;
      }
      uint64_t v22 = (void *)*((void *)v12 + 1);
      if (v22) {
        free(v22);
      }
    }
    free(v12);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "GNS_SenSetAccl");
    LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
  }
  return 6;
}

uint64_t GNS_SenSetGyro(int a1, unsigned int a2, char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_SenSetGyro");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gyro\n");
LABEL_18:
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 2, 1);
    }
LABEL_19:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "GNS_SenSetGyro");
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
    }
    return 2;
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NumSamples,%u\n", v28);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v8 = gnssOsa_Calloc("GNS_SenSetGyro", 287, 1, 0x10uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = a2;
    if (a2 >= 0xC9)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NumSamples,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "GNS_SenSetGyro", 514, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
      }
      int v10 = 200;
    }
    unsigned __int16 v13 = gnssOsa_Calloc("GNS_SenSetGyro", 303, v10, 0x20uLL);
    *((void *)v9 + 1) = v13;
    if (v13)
    {
      uint64_t v14 = gnssOsa_Calloc("GNS_SenSetGyro", 311, 1, 0x20uLL);
      if (v14)
      {
        unsigned __int16 v15 = v14;
        *(_WORD *)uint64_t v9 = v10;
        if (a2 < 0xC9)
        {
          int v17 = 333;
          uint64_t v16 = a3;
        }
        else
        {
          uint64_t v16 = &a3[32 * a2 - 6400];
          int v17 = 328;
        }
        memcpy_s("GNS_SenSetGyro", v17, *((void **)v9 + 1), 32 * (v10 & 0x7FF), v16, 32 * (v10 & 0x7FFu));
        v15[2] = v9;
        *((_DWORD *)v15 + 6) = a1;
        AgpsSendFsmMsg(131, 134, 8782851, v15);
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "GNS_SenSetGyro");
        uint64_t v21 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
        return v21;
      }
      uint64_t v22 = (void *)*((void *)v9 + 1);
      if (v22) {
        free(v22);
      }
    }
    free(v9);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "GNS_SenSetGyro");
    LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
  }
  return 6;
}

size_t lsim11_01InitSessionMgmt(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim11_01InitSessionMgmt");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  byte_268464606 = 0;
  qword_2684645FC = 0;
  byte_268464604 = 0;
  byte_268464616 = 0;
  qword_26846460C = 0;
  byte_268464614 = 0;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 73, "lsim11_01InitSessionMgmt");
    return LbsOsaTrace_WriteLog(0xCu, __str, v4, 4, 1);
  }
  return result;
}

uint64_t lsim11_02GnmCreateSession(int a1, int a2, int a3, char a4, char a5, char a6, _DWORD *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim11_02GnmCreateSession");
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  if (a7)
  {
    if ((a2 - 1) <= 1)
    {
      uint64_t v16 = 0;
      char v17 = 1;
      while (1)
      {
        char v18 = v17;
        uint64_t v19 = &g_lsimsm_GnmSession[4 * v16];
        unsigned __int16 v20 = v19 + 1;
        if (!v19[1]) {
          break;
        }
        char v17 = 0;
        uint64_t v16 = 1;
        if ((v18 & 1) == 0) {
          goto LABEL_11;
        }
      }
      *unsigned __int16 v20 = a2;
      *uint64_t v19 = a1;
      v19[2] = a3;
      *((unsigned char *)v19 + 12) = a4;
      *((unsigned char *)v19 + 13) = a6;
      *((unsigned char *)v19 + 14) = a5;
      *a7 = v16;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v29 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v30 = 78;
        if (*v20 == 2) {
          uint64_t v30 = 89;
        }
        if (*((unsigned char *)v19 + 14)) {
          uint64_t v31 = 84;
        }
        else {
          uint64_t v31 = 70;
        }
        if (*((unsigned char *)v19 + 12)) {
          uint64_t v32 = 84;
        }
        else {
          uint64_t v32 = 70;
        }
        unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SId,%u,GnmSId,%u PosM,%u,Emer,%c,Asyc,%c,GnssIds,%X,CP,%c\n", (unint64_t)v29, "LSM", 77, "lsim11_02GnmCreateSession", *v19, *a7, v19[2], v32, v31, *((unsigned __int8 *)v19 + 13), v30);
        LbsOsaTrace_WriteLog(0xCu, __str, v33, 3, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v34 = mach_continuous_time();
      unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "lsim11_02GnmCreateSession");
      uint64_t v23 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
      return v23;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 87, "lsim11_02GnmCreateSession", 515, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v25, 2, 1);
    }
    uint64_t v23 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return v23;
    }
LABEL_16:
    bzero(__str, 0x410uLL);
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v26, "LSM", 73, "lsim11_02GnmCreateSession");
    LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSessId\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 87, "lsim11_02GnmCreateSession", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v22, 2, 1);
  }
LABEL_11:
  uint64_t v23 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    goto LABEL_16;
  }
  return v23;
}

uint64_t lsim11_03GnmUpdateSession(unsigned int a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim11_03GnmUpdateSession");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      return a2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v14 = 515;
LABEL_15:
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", v13, "LSM", 87, "lsim11_03GnmUpdateSession", v14, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
    return 0;
  }
  if (a1 > 1)
  {
    a2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      return a2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v14 = 2052;
    goto LABEL_15;
  }
  uint64_t v6 = &g_lsimsm_GnmSession[4 * a1];
  *((unsigned char *)v6 + 14) = *(unsigned char *)a2;
  unsigned __int16 v7 = (char *)v6 + 14;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v9 = 84;
    if (!*v7) {
      uint64_t v9 = 70;
    }
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated SId,%u,GnmSId,%u,AsyncNeeded,%c\n", (unint64_t)v8, "LSM", 77, "lsim11_03GnmUpdateSession", g_lsimsm_GnmSession[4 * a1], a1, v9);
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 3, 1);
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v11 = mach_continuous_time();
  unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim11_03GnmUpdateSession");
  a2 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  return a2;
}

BOOL lsim11_04GnmResetSession(unsigned int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim11_04GnmResetSession");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1 > 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim11_04GnmResetSession", 2052, a1);
      int v10 = 2;
LABEL_13:
      LbsOsaTrace_WriteLog(0xCu, __str, v9, v10, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v5 = a1;
      uint64_t v6 = 78;
      if (g_lsimsm_GnmSession[4 * a1 + 1] == 2) {
        uint64_t v6 = 89;
      }
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Reset SId,%u,GnmSId,%u,CP,%c\n", (unint64_t)v4, "LSM", 77, "lsim11_04GnmResetSession", g_lsimsm_GnmSession[4 * a1], a1, v6);
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 3, 1);
    }
    else
    {
      uint64_t v5 = a1;
    }
    uint64_t v11 = &g_lsimsm_GnmSession[4 * v5];
    *(int *)((char *)v11 + 11) = 0;
    *(void *)(v11 + 1) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim11_04GnmResetSession");
      int v10 = 4;
      goto LABEL_13;
    }
  }
  return a1 < 2;
}

uint64_t lsim11_05GnmGetSessionInfo(unsigned int a1, int *a2, _DWORD *a3, unsigned char *a4, unsigned char *a5, char *a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim11_05GnmGetSessionInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  if (a1 >= 2)
  {
    uint64_t v14 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim11_05GnmGetSessionInfo", 2052, a1);
      int v17 = 2;
LABEL_35:
      LbsOsaTrace_WriteLog(0xCu, __str, v16, v17, 1);
      return 0;
    }
    return v14;
  }
  uint64_t v18 = &g_lsimsm_GnmSession[4 * a1];
  int v19 = v18[1];
  if (v19 == 1)
  {
    if (a6)
    {
      char v20 = 0;
      goto LABEL_12;
    }
LABEL_13:
    if (a3) {
      *a3 = g_lsimsm_GnmSession[4 * a1 + 2];
    }
    if (a4) {
      *a4 = g_lsimsm_GnmSession[4 * a1 + 3];
    }
    if (a5) {
      *a5 = BYTE1(g_lsimsm_GnmSession[4 * a1 + 3]);
    }
    if (a2) {
      *a2 = *v18;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      unsigned __int16 v22 = &g_lsimsm_GnmSession[4 * a1];
      int v23 = *((unsigned __int8 *)v22 + 12);
      int v24 = *((unsigned __int8 *)v22 + 14);
      int v25 = *((unsigned __int8 *)v22 + 13);
      uint64_t v26 = 78;
      if (v18[1] == 2) {
        uint64_t v26 = 89;
      }
      int v27 = v22[2];
      if (v24) {
        uint64_t v28 = 84;
      }
      else {
        uint64_t v28 = 70;
      }
      if (v23) {
        uint64_t v29 = 84;
      }
      else {
        uint64_t v29 = 70;
      }
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SId,%u,GnmSId,%u,PosM,%u,Emer,%c,Asyc,%c,GnssIdMask,%X,CP,%c\n", (unint64_t)v21, "LSM", 73, "lsim11_05GnmGetSessionInfo", *v18, a1, v27, v29, v28, v25, v26);
      LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "LSM", 73, "lsim11_05GnmGetSessionInfo");
    uint64_t v14 = 1;
    LbsOsaTrace_WriteLog(0xCu, __str, v32, 4, 1);
    return v14;
  }
  if (v19 == 2)
  {
    if (a6)
    {
      char v20 = 1;
LABEL_12:
      *a6 = v20;
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  uint64_t v14 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "LSM", 73, "lsim11_05GnmGetSessionInfo", 2052, a1);
    int v17 = 4;
    goto LABEL_35;
  }
  return v14;
}

uint64_t lsim11_07GnmGetSessionFromNativeId(int a1, int a2, _DWORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim11_07GnmGetSessionFromNativeId");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a3)
  {
    uint64_t v8 = 0;
    char v9 = 1;
    while (1)
    {
      char v10 = v9;
      if (a2)
      {
        if (g_lsimsm_GnmSession[4 * v8 + 1] == a2 && g_lsimsm_GnmSession[4 * v8] == a1) {
          break;
        }
      }
      char v9 = 0;
      uint64_t v11 = 0;
      uint64_t v8 = 1;
      if ((v10 & 1) == 0) {
        return v11;
      }
    }
    *a3 = v8;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ExistingSession,SId,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim11_07GnmGetSessionFromNativeId", a1, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim11_07GnmGetSessionFromNativeId");
      uint64_t v11 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSessIdPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "lsim11_07GnmGetSessionFromNativeId", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
      return 0;
    }
  }
  return v11;
}

BOOL lsim11_13GnmAsyncRspNeeded(unsigned int a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim11_13GnmAsyncRspNeeded");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1 >= 2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", v14);
    goto LABEL_16;
  }
  if (!g_lsimsm_GnmSession[4 * a1 + 1])
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u unused\n", v15);
LABEL_16:
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 2, 1);
LABEL_17:
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    BOOL result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim11_13GnmAsyncRspNeeded");
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      return 0;
    }
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v6 = 84;
    if (!BYTE2(g_lsimsm_GnmSession[4 * a1 + 3])) {
      uint64_t v6 = 70;
    }
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnmSId,%u,Asyc,%c\n", (unint64_t)v5, "LSM", 73, "lsim11_13GnmAsyncRspNeeded", a1, v6);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim11_13GnmAsyncRspNeeded");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return BYTE2(g_lsimsm_GnmSession[4 * a1 + 3]) != 0;
}

__n128 Init_DB_SV_Nav_Mess(uint64_t a1)
{
  v11[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 39124;
  *(_WORD *)(a1 + 39300) = 0;
  *(_OWORD *)(a1 + 39268) = 0u;
  *(_OWORD *)(a1 + 39284) = 0u;
  *(_OWORD *)(a1 + 39236) = 0u;
  *(_OWORD *)(a1 + 39252) = 0u;
  *(_OWORD *)(a1 + 39204) = 0u;
  *(_OWORD *)(a1 + 39220) = 0u;
  *(_OWORD *)(a1 + 39172) = 0u;
  *(_OWORD *)(a1 + 39188) = 0u;
  *(_OWORD *)(a1 + 39124) = 0u;
  *(_OWORD *)(a1 + 39140) = 0u;
  uint64_t v3 = a1 + 33605;
  unsigned __int16 v4 = (char *)(a1 + 33784);
  *(void *)(a1 + 96) = v2;
  *(void *)&long long v5 = 0x101010101010101;
  *((void *)&v5 + 1) = 0x101010101010101;
  *(_OWORD *)(a1 + 8466) = v5;
  *(_OWORD *)(a1 + 8482) = v5;
  *(void *)(a1 + 8504) = v3 + 129;
  *(void *)(a1 + 8512) = a1 + 36364;
  *(void *)(a1 + 8552) = a1 + 37473;
  *(void *)(a1 + 8560) = a1 + 37651;
  *(void *)(a1 + 8568) = a1 + 37829;
  *(void *)(a1 + 8520) = a1 + 38007;
  *(void *)(a1 + 8528) = a1 + 38185;
  *(void *)(a1 + 8536) = a1 + 38363;
  *(void *)(a1 + 8544) = a1 + 38541;
  *(void *)(a1 + 8576) = a1 + 38719;
  *(void *)(a1 + 8584) = a1 + 38897;
  *(void *)(a1 + 8592) = a1 + 39075;
  *(void *)(a1 + 8600) = v2 + 129;
  *(void *)(a1 + 11208) = v3 + 32;
  *(void *)(a1 + 11216) = v4 + 640;
  *(void *)(a1 + 16272) = a1 + 37376;
  *(void *)(a1 + 16280) = a1 + 37554;
  *(void *)(a1 + 16288) = a1 + 37732;
  *(void *)(a1 + 16248) = a1 + 37910;
  *(void *)(a1 + 16264) = a1 + 38266;
  *(void *)(a1 + 16256) = a1 + 38088;
  *(void *)(a1 + 16304) = a1 + 38622;
  *(void *)(a1 + 16312) = a1 + 38800;
  *(void *)(a1 + 16320) = a1 + 38978;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 48) = a1 + 37344;
  *(void *)(a1 + 56) = a1 + 37522;
  *(void *)(a1 + 16) = a1 + 37878;
  *(void *)(a1 + 24) = a1 + 38056;
  *(void *)(a1 + 32) = a1 + 38234;
  *(void *)(a1 + 40) = a1 + 38412;
  *(void *)(a1 + 64) = a1 + 37700;
  *(void *)(a1 + 72) = a1 + 38590;
  *(void *)(a1 + 80) = a1 + 38768;
  *(void *)(a1 + 88) = a1 + 38946;
  *(_WORD *)(a1 + 8464) = 0;
  *(void *)(a1 + 16328) = v2 + 32;
  *(void *)(a1 + 16480) = 0x7F7F7F7F7F7F7F7FLL;
  *(void *)&long long v6 = 0x7F7F7F7F7F7F7F7FLL;
  *((void *)&v6 + 1) = 0x7F7F7F7F7F7F7F7FLL;
  *(_OWORD *)(a1 + 16336) = v6;
  *(_OWORD *)(a1 + 16352) = v6;
  *(_OWORD *)(a1 + 16368) = v6;
  *(_OWORD *)(a1 + 0x4000) = v6;
  *(_OWORD *)(a1 + 16400) = v6;
  *(_OWORD *)(a1 + 16416) = v6;
  *(_OWORD *)(a1 + 16432) = v6;
  *(_OWORD *)(a1 + 16448) = v6;
  *(_OWORD *)(a1 + 16464) = v6;
  *(void *)(a1 + 16536) = 0;
  *(_OWORD *)(a1 + 16504) = 0u;
  *(_OWORD *)(a1 + 16520) = 0u;
  *(_OWORD *)(a1 + 16488) = 0u;
  *(void *)(a1 + 16560) = v3 + 56;
  *(void *)(a1 + 16568) = v4 + 1120;
  *(void *)(a1 + 16608) = a1 + 37400;
  *(void *)(a1 + 16616) = a1 + 37578;
  *(void *)(a1 + 16624) = a1 + 37756;
  *(void *)(a1 + 16576) = a1 + 37934;
  *(void *)(a1 + 16584) = a1 + 38112;
  *(void *)(a1 + 16592) = a1 + 38290;
  *(void *)(a1 + 16600) = a1 + 38468;
  *(void *)(a1 + 16632) = a1 + 38646;
  *(void *)(a1 + 16640) = a1 + 38824;
  *(void *)(a1 + 16648) = a1 + 39002;
  *(void *)(a1 + 16656) = v2 + 56;
  *(void *)(a1 + 16728) = 0;
  *(_OWORD *)(a1 + 16696) = 0u;
  *(_OWORD *)(a1 + 16712) = 0u;
  *(_OWORD *)(a1 + 16664) = 0u;
  *(_OWORD *)(a1 + 16680) = 0u;
  *(void *)(a1 + 24416) = v3 + 92;
  *(void *)(a1 + 24424) = v4 + 1840;
  *(void *)(a1 + 24464) = a1 + 37436;
  *(void *)(a1 + 24472) = a1 + 37614;
  *(void *)(a1 + 24480) = a1 + 37792;
  *(void *)(a1 + 24432) = a1 + 37970;
  *(void *)(a1 + 24440) = a1 + 38148;
  *(void *)(a1 + 24448) = a1 + 38326;
  *(void *)(a1 + 24456) = a1 + 38504;
  *(void *)(a1 + 24488) = a1 + 38682;
  *(void *)(a1 + 24496) = a1 + 38860;
  *(void *)(a1 + 24504) = a1 + 39038;
  *(void *)(a1 + 24512) = v2 + 92;
  *(void *)(a1 + 16544) = v3 + 139;
  *(void *)(a1 + 16552) = a1 + 36564;
  *(_WORD *)(v3 + 176) = 257;
  *(_OWORD *)(v3 + 144) = v5;
  *(_OWORD *)(v3 + 160) = v5;
  *(_OWORD *)(v3 + 112) = v5;
  *(_OWORD *)(v3 + 128) = v5;
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = v5;
  *(_OWORD *)(v3 + 48) = v5;
  *(_OWORD *)(v3 + 64) = v5;
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)uint64_t v3 = v5;
  bzero(v4, 0xDE8uLL);
  v11[0] = 0.0;
  *(void *)(a1 + 8440) = 0;
  *(void *)(a1 + 8456) = 0;
  *(void *)(a1 + 8448) = 0;
  API_Get_UTC_Cor(1, v11);
  double v7 = -0.5;
  if (v11[0] > 0.0) {
    double v7 = 0.5;
  }
  double v8 = v11[0] + v7;
  if (v11[0] + v7 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      int v9 = (int)v8;
    }
    else {
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    LOBYTE(v9) = -1;
  }
  *(unsigned char *)(a1 + 8458) = v9;
  *(unsigned char *)(a1 + 8461) = v9;
  *(_DWORD *)(a1 + 8444) = 1;
  EvLog_v("Init_DBnm: Default GPS-UTC %d s applied", (char)v9);
  result.n128_u64[0] = 0x101010101010101;
  result.n128_u64[1] = 0x101010101010101;
  *(__n128 *)(a1 + 39426) = result;
  *(__n128 *)(a1 + 39399) = result;
  *(__n128 *)(a1 + 39415) = result;
  *(__n128 *)(a1 + 39367) = result;
  *(__n128 *)(a1 + 39383) = result;
  *(__n128 *)(a1 + 39335) = result;
  *(__n128 *)(a1 + 39351) = result;
  *(__n128 *)(a1 + 39303) = result;
  *(__n128 *)(a1 + 39319) = result;
  *(void *)(a1 + 39442) = 0;
  *(_WORD *)(a1 + 39450) = 0;
  return result;
}

double Init_DB_SV_Nav_Mess_NV(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 24368;
  unsigned __int16 v4 = (unsigned char *)(a1 + 16296);
  memset(v83, 0, 108);
  uint64_t v5 = 104;
  do
  {
    uint64_t v6 = v2 + 1;
    if (Core_Load_GPS_Eph((v2 + 1), v83)) {
      BOOL v7 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      double v8 = (_OWORD *)(a1 + v5);
      long long v9 = v83[5];
      void v8[4] = v83[4];
      v8[5] = v9;
      *(_OWORD *)((char *)v8 + 92) = *(_OWORD *)((char *)&v83[5] + 12);
      long long v10 = v83[1];
      *double v8 = v83[0];
      v8[1] = v10;
      long long v11 = v83[3];
      v8[2] = v83[2];
      v8[3] = v11;
      *(unsigned char *)(*(void *)(a1 + 16) + v2) = 1;
      *(unsigned char *)(*(void *)(a1 + 48) + v2) = 1;
    }
    v5 += 108;
    ++v2;
  }
  while (v6 != 32);
  uint64_t v12 = 0;
  uint64_t v13 = 8608;
  memset(v83, 0, 108);
  do
  {
    if (Core_Load_QZSS_Eph((v12 - 63), v83)) {
      BOOL v14 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      unint64_t v15 = (_OWORD *)(a1 + v13);
      long long v16 = v83[5];
      void v15[4] = v83[4];
      v15[5] = v16;
      *(_OWORD *)((char *)v15 + 92) = *(_OWORD *)((char *)&v83[5] + 12);
      long long v17 = v83[1];
      *unint64_t v15 = v83[0];
      v15[1] = v17;
      long long v18 = v83[3];
      v15[2] = v83[2];
      v15[3] = v18;
      *(unsigned char *)(*(void *)(a1 + 8520) + v12) = 1;
      *(unsigned char *)(*(void *)(a1 + 8552) + v12) = 1;
    }
    ++v12;
    v13 += 108;
  }
  while (v12 != 10);
  memset(v83, 0, 62);
  uint64_t v19 = 4084;
  uint64_t v20 = 11224;
  do
  {
    if (Core_Load_GLON_Eph((v19 + 13), v83)) {
      BOOL v21 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      unsigned __int16 v22 = (_OWORD *)(a1 + v20);
      long long v23 = v83[1];
      *unsigned __int16 v22 = v83[0];
      v22[1] = v23;
      long long v24 = v83[3];
      double v22[2] = v83[2];
      v22[3] = v24;
      *(unsigned char *)(*(void *)(a1 + 16248) + v19 - 4084) = 1;
      *(unsigned char *)(*(void *)(a1 + 16272) + v19 - 4084) = 1;
      *(_DWORD *)(a1 + 4 * v19) = DWORD2(v83[0]);
    }
    ++v19;
    v20 += 64;
  }
  while (v19 != 4108);
  uint64_t v25 = 0;
  memset(v83, 0, 87);
  uint64_t v26 = 16736;
  do
  {
    uint64_t v27 = v25 + 1;
    if (Core_Load_GAL_Eph((v25 + 1), (uint64_t)v83)) {
      BOOL v28 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28)
    {
      uint64_t v29 = a1 + v26;
      long long v30 = v83[3];
      *(_OWORD *)(v29 + 32) = v83[2];
      *(_OWORD *)(v29 + 48) = v30;
      *(_OWORD *)(v29 + 64) = v83[4];
      *(void *)(v29 + 80) = *(void *)&v83[5];
      long long v31 = v83[1];
      *(_OWORD *)uint64_t v29 = v83[0];
      *(_OWORD *)(v29 + 16) = v31;
      *(unsigned char *)(*(void *)(a1 + 16576) + v25) = 1;
      *(unsigned char *)(*(void *)(a1 + 16608) + v25) = 1;
    }
    v26 += 88;
    ++v25;
  }
  while (v27 != 36);
  uint64_t v32 = 0;
  LODWORD(v83[6]) = 0;
  memset(v83, 0, 23);
  memset((char *)&v83[1] + 8, 0, 64);
  uint64_t v33 = 24520;
  *(void *)((char *)&v83[5] + 6) = 0;
  do
  {
    uint64_t v34 = v32 + 1;
    if (Core_Load_BDS_Eph((v32 + 1), (uint64_t)v83)) {
      BOOL v35 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v35 = 1;
    }
    if (!v35)
    {
      uint64_t v36 = a1 + v33;
      long long v37 = v83[5];
      *(_OWORD *)(v36 + 64) = v83[4];
      *(_OWORD *)(v36 + 80) = v37;
      *(_DWORD *)(v36 + 96) = v83[6];
      long long v38 = v83[1];
      *(_OWORD *)uint64_t v36 = v83[0];
      *(_OWORD *)(v36 + 16) = v38;
      long long v39 = v83[3];
      *(_OWORD *)(v36 + 32) = v83[2];
      *(_OWORD *)(v36 + 48) = v39;
      *(unsigned char *)(*(void *)(a1 + 24432) + v32) = 1;
      *(unsigned char *)(*(void *)(a1 + 24464) + v32) = 1;
    }
    v33 += 100;
    ++v32;
  }
  while (v34 != 37);
  uint64_t v40 = 0;
  memset(v83, 0, 44);
  uint64_t v41 = 7016;
  do
  {
    uint64_t v42 = v40 + 1;
    if (Core_Load_GPS_Alm((v40 + 1), v83)) {
      BOOL v43 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v43 = 1;
    }
    if (!v43)
    {
      uint64_t v44 = (_OWORD *)(a1 + v41);
      long long v45 = v83[1];
      *uint64_t v44 = v83[0];
      v44[1] = v45;
      *(_OWORD *)((char *)v44 + 28) = *(_OWORD *)((char *)&v83[1] + 12);
      *(unsigned char *)(*(void *)(a1 + 24) + v40) = 1;
      *(unsigned char *)(*(void *)(a1 + 64) + v40) = 1;
    }
    v41 += 44;
    ++v40;
  }
  while (v42 != 32);
  uint64_t v46 = 0;
  memset(v83, 0, 44);
  uint64_t v47 = 10768;
  do
  {
    if (Core_Load_QZSS_Alm((v46 - 63), v83)) {
      BOOL v48 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v48 = 1;
    }
    if (!v48)
    {
      double v49 = (_OWORD *)(a1 + v47);
      long long v50 = v83[1];
      *double v49 = v83[0];
      v49[1] = v50;
      *(_OWORD *)((char *)v49 + 28) = *(_OWORD *)((char *)&v83[1] + 12);
      *(unsigned char *)(*(void *)(a1 + 8528) + v46) = 1;
      *(unsigned char *)(*(void *)(a1 + 8568) + v46) = 1;
    }
    ++v46;
    v47 += 44;
  }
  while (v46 != 10);
  *(void *)double v82 = 0;
  *(_WORD *)&v82[8] = 0;
  memset(&v82[12], 0, 24);
  uint64_t v51 = 4084;
  uint64_t v52 = 15352;
  do
  {
    if (Core_Load_GLON_Alm((v51 + 13), (uint64_t)v82)) {
      BOOL v53 = *(_DWORD *)v82 < 1;
    }
    else {
      BOOL v53 = 1;
    }
    if (!v53)
    {
      v83[0] = 0uLL;
      *(void *)((char *)&v83[1] + 5) = 0;
      *(void *)&v83[1] = 0;
      *(void *)((char *)&v83[1] + 14) = 0;
      BYTE6(v83[2]) = 0;
      GLON_AlmBin2Int((uint64_t)v82, (uint64_t)v83);
      if (BYTE4(v83[2]))
      {
        uint64_t v54 = a1 + v52;
        long long v55 = *(_OWORD *)&v82[16];
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v82;
        *(_OWORD *)(v54 + 16) = v55;
        *(_DWORD *)(v54 + 32) = *(_DWORD *)&v82[32];
        *(unsigned char *)(*(void *)(a1 + 16256) + v51 - 4084) = 1;
      }
      *(unsigned char *)(*(void *)(a1 + 16288) + v51 - 4084) = 1;
      int v56 = BYTE11(v83[0]);
      int v57 = BYTE11(v83[0]) - 32;
      if (BYTE11(v83[0]) <= 0x18u) {
        int v57 = 2139062143;
      }
      if (BYTE11(v83[0]) >= 7u) {
        int v56 = v57;
      }
      if (v56 != 2139062143) {
        *(_DWORD *)(a1 + 4 * v51) = v56;
      }
    }
    ++v51;
    v52 += 36;
  }
  while (v51 != 4108);
  uint64_t v58 = 0;
  memset(v83, 0, 35);
  uint64_t v59 = 23072;
  do
  {
    uint64_t v60 = v58 + 1;
    if (Core_Load_GAL_Alm((v58 + 1), (uint64_t)v83)) {
      BOOL v61 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v61 = 1;
    }
    if (!v61)
    {
      uint64_t v62 = a1 + v59;
      long long v63 = v83[1];
      *(_OWORD *)uint64_t v62 = v83[0];
      *(_OWORD *)(v62 + 16) = v63;
      *(_DWORD *)(v62 + 32) = v83[2];
      *(unsigned char *)(*(void *)(a1 + 16584) + v58) = 1;
      *(unsigned char *)(*(void *)(a1 + 16624) + v58) = 1;
    }
    v59 += 36;
    ++v58;
  }
  while (v60 != 36);
  uint64_t v64 = 0;
  memset(v83, 0, 44);
  uint64_t v65 = 31920;
  do
  {
    uint64_t v66 = v64 + 1;
    if (Core_Load_BDS_Alm((v64 + 1), v83)) {
      BOOL v67 = SLODWORD(v83[0]) < 1;
    }
    else {
      BOOL v67 = 1;
    }
    if (!v67)
    {
      unint64_t v68 = (_OWORD *)(a1 + v65);
      long long v69 = v83[1];
      *unint64_t v68 = v83[0];
      v68[1] = v69;
      *(_OWORD *)((char *)v68 + 28) = *(_OWORD *)((char *)&v83[1] + 12);
      *(unsigned char *)(*(void *)(a1 + 24440) + v64) = 1;
      *(unsigned char *)(*(void *)(a1 + 24480) + v64) = 1;
    }
    v65 += 44;
    ++v64;
  }
  while (v66 != 37);
  if (!Core_Load_GPS_Health(*(BOOL **)a1))
  {
    int8x16_t v70 = *(BOOL **)a1;
    *(void *)&long long v71 = 0x101010101010101;
    *((void *)&v71 + 1) = 0x101010101010101;
    *(_OWORD *)int8x16_t v70 = v71;
    *((_OWORD *)v70 + 1) = v71;
  }
  if (!Core_Load_QZSS_Health(*(BOOL **)(a1 + 8504)))
  {
    uint64_t v72 = *(void *)(a1 + 8504);
    *(_WORD *)(v72 + 8) = 257;
    *(void *)uint64_t v72 = 0x101010101010101;
  }
  if (!Core_Load_GLON_Health(*(BOOL **)(a1 + 11208)))
  {
    double v73 = *(void **)(a1 + 11208);
    v73[1] = 0x101010101010101;
    v73[2] = 0x101010101010101;
    *double v73 = 0x101010101010101;
  }
  if (!Core_Load_GAL_Health(*(BOOL **)(a1 + 16560)))
  {
    uint64_t v74 = *(void *)(a1 + 16560);
    *(_DWORD *)(v74 + 32) = 16843009;
    *(void *)&long long v75 = 0x101010101010101;
    *((void *)&v75 + 1) = 0x101010101010101;
    *(_OWORD *)uint64_t v74 = v75;
    *(_OWORD *)(v74 + 16) = v75;
  }
  if (!Core_Load_BDS_Health(*(BOOL **)(a1 + 24416)))
  {
    uint64_t v76 = *(void *)(a1 + 24416);
    *(void *)(v76 + 29) = 0x101010101010101;
    *(void *)&long long v77 = 0x101010101010101;
    *((void *)&v77 + 1) = 0x101010101010101;
    *(_OWORD *)uint64_t v76 = v77;
    *(_OWORD *)(v76 + 16) = v77;
  }
  uint64_t v78 = *(void *)(a1 + 16544);
  *(void *)(v78 + 31) = 0x101010101010101;
  *(void *)&long long v79 = 0x101010101010101;
  *((void *)&v79 + 1) = 0x101010101010101;
  *(_OWORD *)uint64_t v78 = v79;
  *(_OWORD *)(v78 + 16) = v79;
  memset(v83, 0, 24);
  if (Core_Load_GPS_UTC((uint64_t)v83) && SLODWORD(v83[0]) >= 1)
  {
    *(_OWORD *)(a1 + 8440) = v83[0];
    *(void *)(a1 + 8456) = *(void *)&v83[1];
  }
  else
  {
    *(_DWORD *)(a1 + 8444) = 0;
  }
  v83[0] = 0uLL;
  if (Core_Load_GPS_Klob(v83) && SLODWORD(v83[0]) >= 1)
  {
    *(_OWORD *)(a1 + 8424) = v83[0];
    *(_DWORD *)(a1 + 8428) = 4;
  }
  *(void *)((char *)v83 + 6) = 0;
  *(void *)&v83[0] = 0;
  if (Core_Load_GAL_GGTO(v83) && SLODWORD(v83[0]) >= 1)
  {
    *(_OWORD *)uint64_t v3 = v83[0];
    *(_DWORD *)(v3 + 4) = 4;
    double v80 = (double)*(__int16 *)(v3 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)v3;
    *(_DWORD *)(v3 + 20) = 4;
    *(double *)(a1 + 24392) = v80 * 2.91038305e-11;
    *(double *)(a1 + 24400) = (double)*(__int16 *)(v3 + 10) * 4.4408921e-16;
    *(_DWORD *)(v3 + 40) = 3600 * *(unsigned __int8 *)(v3 + 12);
    *(_WORD *)(v3 + 44) = *(unsigned __int8 *)(v3 + 13);
  }
  memset(v83, 0, 20);
  if (Core_Load_BDS_BGTO((uint64_t)v83) && SLODWORD(v83[0]) >= 1)
  {
    *(_OWORD *)(a1 + 33548) = v83[0];
    *(_DWORD *)(a1 + 33564) = v83[1];
    *(_DWORD *)(v3 + 9184) = 4;
  }
  *(void *)&v83[0] = 0;
  WORD4(v83[0]) = 0;
  HIDWORD(v83[0]) = 0;
  LOBYTE(v83[1]) = 0;
  DWORD1(v83[1]) = 0;
  BYTE8(v83[1]) = 0;
  if (Core_Load_GLON_Clk1(v83) && SLODWORD(v83[0]) >= 1)
  {
    *(_OWORD *)(a1 + 16216) = v83[0];
    double result = *(double *)((char *)v83 + 12);
    *(_OWORD *)(a1 + 16228) = *(_OWORD *)((char *)v83 + 12);
    unsigned char *v4 = 1;
  }
  return result;
}

uint64_t NK_Map_Vector(int *a1, uint64_t a2, uint64_t a3)
{
  v145[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 5944;
  uint64_t result = Core_Get_ExtA_MapV(6000, (uint64_t)(a1 + 5944));
  if (!result) {
    return result;
  }
  BOOL v8 = 0;
  *((unsigned char *)a1 + 24988) = 1;
  a1[6248] = 0;
  int v9 = a1[1];
  int v10 = *v6;
  int v11 = v9 - *v6;
  a1[6250] = v11;
  int v12 = a1[5684];
  if (v12 == 1) {
    BOOL v8 = a1[5683] == 8 && a1[5685] == 3;
  }
  if (a1[5681] == 1)
  {
    BOOL v13 = *((unsigned char *)a1 + 22756) != 0;
    if (v8) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v14 = (unsigned char *)(a2 + 11162);
    if (v12 || a1[5683] == 8)
    {
      if (*v14) {
        goto LABEL_13;
      }
    }
    else
    {
      int v73 = v11 < 3101 || v13;
      if (*v14 && v73)
      {
        a1[6248] = 11;
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    int v72 = 12;
    goto LABEL_67;
  }
  BOOL v13 = 0;
  if (!v8) {
    goto LABEL_10;
  }
LABEL_13:
  BOOL v135 = v8;
  if (*(unsigned char *)(p_NA + 319) && *(_DWORD *)(p_NA + 19388))
  {
    int v132 = *(_DWORD *)(p_NA + 19388);
    char v131 = 0;
    if (!*((unsigned char *)a1 + 25076))
    {
      *((unsigned char *)a1 + 25068) = 1;
      *((unsigned char *)a1 + 25076) = 1;
    }
  }
  else
  {
    char v131 = 1;
    int v132 = 0;
  }
  unint64_t v15 = (_DWORD *)(a2 + 26848);
  BOOL v137 = v13;
  if (*(double *)(a3 + 952) >= 3.0)
  {
    double v16 = *(double *)(a3 + 880);
    if (v16 < 15.0)
    {
      int v136 = 0;
      int v134 = 0;
      uint64_t v133 = 1;
      goto LABEL_24;
    }
    LODWORD(v133) = 0;
    HIDWORD(v133) = v16 < 45.0;
    int v136 = v16 >= 45.0;
  }
  else
  {
    uint64_t v133 = 0;
    int v136 = 1;
  }
  int v134 = 1;
LABEL_24:
  double v17 = *((double *)a1 + 2973) * 0.0174532925;
  double v18 = *((double *)a1 + 2974);
  long double __x = cos(v17);
  double v19 = *((double *)a1 + 2977);
  __double2 v20 = __sincos_stret(v19 * 0.0174532925);
  if (!*((unsigned char *)v6 + 32)) {
    *((void *)a1 + 2975) = *((void *)a1 + 102);
  }
  double v21 = v18 * 0.0174532925;
  int v22 = v10 - *v15;
  if (v10 == *v15)
  {
    double v23 = 1.0;
    if (v11 >= 1000) {
      double v23 = (double)v11 * 0.001 + 1.0;
    }
  }
  else
  {
    if ((v22 - 1) >> 4 > 0x176) {
      goto LABEL_37;
    }
    if (!*(unsigned char *)(a2 + 26920)) {
      goto LABEL_37;
    }
    double v24 = *(double *)(a2 + 26856);
    double v25 = *(double *)(a2 + 26864);
    double v26 = cos(__x);
    double v27 = vabdd_f64(v19, *(double *)(a2 + 26888));
    if (v27 >= 5.0) {
      goto LABEL_37;
    }
    double v28 = vabdd_f64(*((double *)a1 + 2979), *(double *)(a2 + 26904));
    if (v28 < 2.0
      && (double v29 = v24 * 0.0174532925,
          double v30 = v25 * 0.0174532925,
          double v31 = sqrt(v26 * ((v21 - v30) * 6378137.0) * (v26 * ((v21 - v30) * 6378137.0))+ (v17 - v24 * 0.0174532925) * 6378137.0 * ((v17 - v24 * 0.0174532925) * 6378137.0)), v31 < *(double *)(a2 + 26896) * 0.3))
    {
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v15;
      long long v32 = *(_OWORD *)(a2 + 26864);
      long long v33 = *(_OWORD *)(a2 + 26880);
      long long v34 = *(_OWORD *)(a2 + 26896);
      *((void *)v6 + 8) = *(void *)(a2 + 26912);
      *((_OWORD *)v6 + 2) = v33;
      *((_OWORD *)v6 + 3) = v34;
      *((_OWORD *)v6 + 1) = v32;
      long double __x = cos(v29);
      int v35 = *v6;
      a1[6250] = v9 - *v6;
      double v36 = (double)(v9 - v35) * 0.001 + 1.0;
      if (v9 - v35 <= 999) {
        double v36 = 1.0;
      }
      double v130 = v28;
      double v23 = v36;
      EvLog_v("NK_Map_Vector: DUPLICATE OS_TT P %d C %d [dt] T %d D %g W %g H %g ", *v15, v35, v22, v31, v130, v27);
      double v21 = v30;
      double v17 = v29;
    }
    else
    {
LABEL_37:
      double v143 = v17;
      double v144 = v21;
      v145[0] = *((void *)a1 + 2975);
      Geo2ECEF((uint64_t)&v143, (uint64_t)&WGS84_Datum, (double *)(a2 + 26952));
      double v37 = *((double *)a1 + 2978);
      double v38 = v20.__cosval * v37;
      double v39 = v20.__sinval * v37;
      double v40 = v21 + v20.__sinval * v37 / *(double *)(a2 + 27080);
      double v143 = v17 + v20.__cosval * v37 / *(double *)(a2 + 27072);
      double v144 = v40;
      Geo2ECEF((uint64_t)&v143, (uint64_t)&WGS84_Datum, (double *)(a2 + 26928));
      *(double *)(a2 + 26976) = v38;
      *(double *)(a2 + 26984) = v39;
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v6;
      long long v41 = *((_OWORD *)v6 + 1);
      long long v42 = *((_OWORD *)v6 + 2);
      long long v43 = *((_OWORD *)v6 + 3);
      *(void *)(a2 + 26912) = *((void *)v6 + 8);
      *(_OWORD *)(a2 + 26880) = v42;
      *(_OWORD *)(a2 + 26896) = v43;
      *(_OWORD *)(a2 + 26864) = v41;
      *(unsigned char *)(a2 + 26920) = 0;
      double v23 = 1.0;
    }
  }
  uint64_t v44 = 0;
  double v143 = 0.0;
  double v144 = 0.0;
  v145[0] = 0;
  double v140 = 0.0;
  double v141 = 0.0;
  uint64_t v142 = 0;
  do
  {
    *(double *)&v145[v44] = *(double *)&a1[2 * v44 + 170] - *(double *)(a2 + 26944 + 8 * v44);
    unint64_t v45 = v44 + 3;
    --v44;
  }
  while (v45 > 1);
  uint64_t v46 = 0;
  double v47 = v143;
  double v48 = v144;
  double v49 = (double *)(a1 + 212);
  double v50 = *(double *)v145;
  do
  {
    double v51 = *(v49 - 1) * v48 + *(v49 - 2) * v47;
    double v52 = *v49;
    v49 += 3;
    *(double *)((char *)&v140 + v46) = v51 + v52 * v50;
    v46 += 8;
  }
  while (v46 != 24);
  double v53 = *(double *)(a2 + 26976);
  double v54 = *(double *)(a2 + 26984);
  double v55 = sqrt(v54 * v54 + 0.0 + v53 * v53);
  if (v55 <= 1.0e-14 || (double v56 = sqrt(v141 * v141 + 0.0 + v140 * v140), v56 <= 1.0e-14))
  {
LABEL_58:
    uint64_t result = 0;
    int v72 = 15;
LABEL_67:
    a1[6248] = v72;
    *((unsigned char *)a1 + 24996) = 0;
    return result;
  }
  uint64_t v57 = 0;
  double v58 = (0.0 - v53 * v140 - v54 * v141) / (v55 * v56);
  double v59 = fabs(v58);
  if (v59 > 1.0) {
    double v58 = v59 / v58;
  }
  do
  {
    *(double *)&v145[v57] = *(double *)&a1[2 * v57 + 170] - *(double *)(a2 + 26968 + 8 * v57);
    unint64_t v60 = v57 + 3;
    --v57;
  }
  while (v60 > 1);
  uint64_t v61 = 0;
  double v62 = v143;
  double v63 = v144;
  uint64_t v64 = (double *)(a1 + 212);
  double v65 = *(double *)v145;
  do
  {
    double v66 = *(v64 - 1) * v63 + *(v64 - 2) * v62;
    double v67 = *v64;
    v64 += 3;
    *(double *)((char *)&v140 + v61) = v66 + v67 * v65;
    v61 += 8;
  }
  while (v61 != 24);
  double v68 = sqrt(v141 * v141 + 0.0 + v140 * v140);
  if (v68 <= 1.0e-14)
  {
    if (v58 < 0.0)
    {
LABEL_56:
      uint64_t result = 0;
      *((unsigned char *)a1 + 24996) = 0;
      int v71 = 16;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  double v69 = (v53 * v140 + 0.0 + v54 * v141) / (v55 * v68);
  double v70 = fabs(v69);
  if (v70 > 1.0) {
    double v69 = v70 / v69;
  }
  if (v58 < 0.0) {
    goto LABEL_56;
  }
  if (v69 < 0.0)
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + 24996) = 0;
    int v71 = 17;
LABEL_57:
    a1[6248] = v71;
    return result;
  }
  uint64_t v74 = 0;
  double v75 = 0.0;
  do
  {
    double v76 = *(double *)(a2 + 26968 + 8 * v74) - *(double *)&a1[2 * v74 + 170];
    double v75 = v75 + v76 * v76;
    unint64_t v77 = v74 + 3;
    --v74;
  }
  while (v77 > 1);
  double v78 = acos(v69);
  double v79 = sqrt(v75);
  __double2 v80 = __sincos_stret(v78);
  double v81 = v80.__sinval * v79;
  *((double *)a1 + 3008) = v80.__sinval * v79;
  *((double *)a1 + 3007) = v80.__cosval * v79;
  if (v80.__cosval * v79 < 0.0)
  {
    if (v80.__cosval * v79 < *((double *)a1 + 2978) * -0.05)
    {
      uint64_t result = 0;
      int v72 = 13;
      goto LABEL_67;
    }
    *((void *)a1 + 3007) = 0;
  }
  int v82 = v136;
  if (v81 > 35.0) {
    int v82 = 1;
  }
  if (v82 == 1
    && *((unsigned char *)a1 + 22992)
    && a1[5749] == 1
    && !*((unsigned char *)a1 + 23008)
    && !a1[6256]
    && *((double *)a1 + 2880) < 90000.0
    && (a1[5750] - 3) <= 1)
  {
    double v83 = (*((double *)a1 + 2877) - v17) * 6378137.0;
    double v84 = __x * ((*((double *)a1 + 2878) - v21) * 6378137.0);
    double v85 = *(double *)(a2 + 26976);
    double v86 = *(double *)(a2 + 26984);
    double v87 = v86 * v86 + v85 * v85;
    double v88 = v85 * v86;
    if (v87 <= 1.0) {
      double v87 = 1.0;
    }
    double v89 = v85 * v85;
    double v90 = (v88 * v84 + v89 * v83) / v87;
    double v91 = (v83 * v88 + v89 * v84) / v87;
    *((double *)a1 + 3010) = sqrt(v91 * v91 + v90 * v90);
    v139[2] = 0.0;
    v139[0] = v17 + v90 * 0.000000156785594;
    v139[1] = v21 + v91 * (1.0 / (__x * 6378137.0));
    double v92 = Horiz_Diff_Sqd(v139, (const double *)a1 + 2877);
    *((double *)a1 + 3011) = sqrt(v92);
    BOOL v93 = v92 < *((double *)a1 + 2880) * 9.0;
    double v81 = *((double *)a1 + 3008);
  }
  else
  {
    BOOL v93 = 0;
  }
  if (v81 > 35.0 && (!v93 || *((double *)a1 + 3011) > 17.5 || *((double *)a1 + 3010) > *((double *)a1 + 2978) * 1.5))
  {
    uint64_t result = 0;
    int v72 = 14;
    goto LABEL_67;
  }
  double v94 = *(double *)(a2 + 11152);
  if (v94 <= 0.5) {
    int v95 = 7000;
  }
  else {
    int v95 = 3000;
  }
  if (v94 <= 5.0) {
    int v96 = v95;
  }
  else {
    int v96 = 5000;
  }
  if (v94 > 17.0) {
    int v96 = 7000;
  }
  int v97 = *a1;
  if (*a1 - *(_DWORD *)(a2 + 11248) >= v96)
  {
    uint64_t v98 = (double *)(a1 + 238);
    if (*(int *)(a2 + 11188) >= 2) {
      uint64_t v98 = (double *)(a2 + 11192);
    }
  }
  else
  {
    uint64_t v98 = (double *)(a2 + 11240);
  }
  double v99 = *((double *)a1 + 2977);
  double v100 = *v98 - v99;
  *((double *)a1 + 3009) = v100;
  if (v100 >= 180.0)
  {
    double v101 = -360.0;
  }
  else
  {
    if (v100 >= -180.0) {
      goto LABEL_110;
    }
    double v101 = 360.0;
  }
  double v100 = v100 + v101;
  *((double *)a1 + 3009) = v100;
LABEL_110:
  double v102 = fabs(v100);
  if ((v133 | HIDWORD(v133)) == 1)
  {
    BOOL v103 = v137;
    if (v102 > 45.0)
    {
      uint64_t result = 0;
      int v72 = 18;
      goto LABEL_67;
    }
  }
  else
  {
    if (v102 <= 45.0) {
      BOOL v93 = 0;
    }
    BOOL v103 = v137;
    if (v93 && *((double *)a1 + 3011) > 17.5 && *((double *)a1 + 3010) > *((double *)a1 + 2978) * 1.5)
    {
      uint64_t result = 0;
      int v72 = 19;
      goto LABEL_67;
    }
  }
  double v104 = *((double *)a1 + 3007);
  v105.f64[0] = v20.__cosval;
  v105.f64[1] = v20.__sinval;
  float64x2_t v106 = vdivq_f64(vmulq_n_f64(v105, v104), *(float64x2_t *)(a2 + 27072));
  float64x2_t v107 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL);
  double v108 = *((double *)a1 + 2978);
  if (v108 - v104 <= 0.0) {
    double v109 = 1.0;
  }
  else {
    double v109 = v108 - v104;
  }
  double v110 = *((double *)a1 + 2979);
  if (v103)
  {
    double v111 = v108 * 0.05;
    double v112 = 0.25;
LABEL_131:
    double v114 = v110 * v112;
    goto LABEL_132;
  }
  double v111 = v108 * 3.0;
  if (*((unsigned char *)v6 + 68) || *((unsigned char *)v6 + 65)) {
    goto LABEL_130;
  }
  char v113 = v131;
  if ((v132 - 5) < 3) {
    char v113 = 1;
  }
  if ((v113 & 1) == 0)
  {
LABEL_130:
    double v112 = 0.166666667;
    goto LABEL_131;
  }
  double v114 = v110 * 0.333333333;
LABEL_132:
  float64x2_t v115 = vmlaq_f64(v106, v107, *(float64x2_t *)(v6 + 2));
  int v116 = v134;
  if (v109 >= v108 * 0.333333333) {
    int v116 = 0;
  }
  if (v116 == 1) {
    double v114 = v114 + v104 * 0.5 * (1.0 / sqrt(v109));
  }
  *((unsigned char *)v6 + 72) = 1;
  v6[19] = 1;
  v6[21] = 0;
  *((unsigned char *)v6 + 88) = 0;
  v6[23] = v97;
  *((float64x2_t *)a1 + 1492) = v115;
  *((double *)a1 + 2990) = v111 * v111;
  *((double *)a1 + 2991) = v114 * v114;
  *((double *)a1 + 2987) = v111 * v111;
  *((double *)a1 + 2988) = v114 * v114;
  if (*(unsigned char *)(a2 + 26920)) {
    v6[21] = 2;
  }
  if (!v103)
  {
    *((double *)a1 + 2987) = v23 * (v111 * v111);
    *((double *)a1 + 2988) = v23 * (v114 * v114);
  }
  int v117 = !v103;
  if (v99 >= 180.0) {
    double v118 = v99 + -180.0;
  }
  else {
    double v118 = v99;
  }
  *((double *)a1 + 2989) = v118 * 0.0174532925;
  *((void *)a1 + 2994) = 0x4039000000000000;
  BOOL v119 = v135;
  if (*((double *)a1 + 3084) >= 10.0) {
    BOOL v119 = 0;
  }
  if (v119)
  {
    BOOL v120 = 0;
  }
  else
  {
    BOOL v120 = Horz_Meas_Update(5u, (double *)a1 + 100, (double *)a1 + 104, 0xBu, (double *)v6 + 9, a2 + 872, (_WORD *)(a2 + 11000));
    int v97 = *a1;
    double v99 = *((double *)a1 + 2977);
  }
  *((unsigned char *)v6 + 200) = 1;
  *((unsigned char *)v6 + 1092) = v120;
  *(unsigned char *)(a2 + 26920) = v120;
  v6[51] = 1;
  v6[54] = v97;
  *((unsigned char *)v6 + 212) = 0;
  Comp_Track8((long double *)a1 + 114);
  *((void *)a1 + 3002) = v121;
  *((double *)a1 + 3000) = v99;
  *((void *)a1 + 3001) = 0x3FD0000000000000;
  double v122 = 0.25;
  BOOL v123 = v135;
  if ((v134 & v117) == 1)
  {
    double v124 = 1.0;
    if (v109 < *((double *)a1 + 2978) * 0.333333333) {
      double v124 = fabs(*((double *)a1 + 3009)) * 0.5 + 1.0;
    }
    double v122 = v124 * v124;
    *((double *)a1 + 3001) = v122;
  }
  if (!v137)
  {
    double v122 = v23 * v23 * v122;
    *((double *)a1 + 3001) = v122;
  }
  double v125 = *((double *)a1 + 3092);
  if (v125 >= 10.0) {
    BOOL v123 = 0;
  }
  if (v123) {
    *((double *)a1 + 3001) = v122 * (10.0 / v125 * (10.0 / v125));
  }
  *((void *)a1 + 3004) = 0x4039000000000000;
  double v126 = *((double *)a1 + 118);
  *((double *)a1 + 3006) = v126;
  int v127 = v126 < 1.0 || v137;
  if (v127 == 1) {
    *((unsigned char *)v6 + 200) = 0;
  }
  BOOL v128 = Track_Meas_Update(8, (double *)a1 + 104, 0xBu, (unsigned __int8 *)v6 + 200, a2 + 872, (_WORD *)(a2 + 11018), v99, v126, 1.0);
  *((unsigned char *)v6 + 1093) = v128;
  if (!v137 && ((*((double *)a1 + 118) >= 1.0) & ~v136) != 0)
  {
    if (v128) {
      *((void *)a1 + 119) = *((void *)a1 + 2977);
    }
  }
  else
  {
    uint64_t v129 = *((void *)a1 + 2977);
    *((void *)a1 + 119) = v129;
    *(void *)(a2 + 11240) = v129;
    *(_DWORD *)(a2 + 11248) = *a1;
  }
  uint64_t result = 1;
  *((unsigned char *)a1 + 24996) = 1;
  return result;
}

uint64_t NK_Set_Sens_Aug_GNSS_Input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v73[1] = *(double *)MEMORY[0x263EF8340];
  double v67 = (_DWORD *)(a8 + 8288);
  uint64_t v12 = a1 + 23272;
  BOOL v13 = (_OWORD *)(a7 + 856);
  *(int32x2_t *)a8 = vrev64_s32(*(int32x2_t *)a1);
  *(void *)(a8 + 8) = *(void *)(a1 + 24);
  *(_DWORD *)(a8 + 16) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a8 + 20) = *(unsigned char *)(a1 + 17);
  *(_WORD *)(a8 + 22) = *(_WORD *)(a1 + 18);
  *(void *)(a8 + 24) = *(unsigned int *)(a1 + 44);
  v73[0] = 0.0;
  if (!R8_EQ((const double *)(a1 + 736), v73))
  {
    double v14 = *(double *)(a1 + 792);
    double v15 = -0.5;
    if (v14 > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v14 + v15;
    if (v16 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        int v17 = (int)v16;
      }
      else {
        int v17 = 0x80000000;
      }
    }
    else
    {
      int v17 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a8 + 28) = v17;
  }
  API_Get_UTC_Cor(1, (double *)(a8 + 792));
  float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
  *(float64x2_t *)(a8 + 96) = vmulq_f64(*(float64x2_t *)(a7 + 144), v18);
  *(float64x2_t *)(a8 + 112) = vmulq_f64(*(float64x2_t *)(a7 + 160), v18);
  *(unsigned char *)(a8 + 784) = *(unsigned char *)(a7 + 1);
  uint64_t v19 = *(void *)(a7 + 88);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a7 + 72);
  *(void *)(a8 + 144) = v19;
  uint64_t v20 = *(void *)(a7 + 112);
  *(_OWORD *)(a8 + 152) = *(_OWORD *)(a7 + 96);
  *(void *)(a8 + 168) = v20;
  uint64_t v66 = a2;
  memcpy((void *)(a8 + 256), (const void *)(a2 + 344), 0x210uLL);
  *(void *)(a8 + 176) = *(void *)(a7 + 848);
  *(void *)(a8 + 184) = *(void *)(a7 + 840);
  *(_OWORD *)(a8 + 192) = v13[2];
  *(_OWORD *)(a8 + 208) = v13[3];
  *(void *)(a8 + 224) = *(void *)(a7 + 824);
  *(_OWORD *)(a8 + 232) = *v13;
  *(void *)(a8 + 248) = *(void *)(a7 + 880);
  *(unsigned char *)(a8 + 32) = *(unsigned char *)v12;
  uint64_t v70 = a1;
  *(_OWORD *)(a8 + 40) = *(_OWORD *)(a1 + 23280);
  *(unsigned char *)(a8 + 56) = *(unsigned char *)(v12 + 24);
  uint64_t v65 = v12;
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(v12 + 32);
  uint64_t v21 = a8 + 1208;
  uint64_t v22 = -6912;
  do
  {
    double v23 = (_OWORD *)(v21 + v22);
    v23[439] = 0uLL;
    v23[438] = 0uLL;
    v23[437] = 0uLL;
    v23[436] = 0uLL;
    v23[435] = 0uLL;
    v23[434] = 0uLL;
    v23[433] = 0uLL;
    v23[432] = 0uLL;
    *(_OWORD *)(v21 + v22 + 7035) = 0uLL;
    v22 += 144;
  }
  while (v22);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = -1152;
  uint64_t v27 = 14112;
  uint64_t v28 = 8632;
  uint64_t v29 = 8440;
  uint64_t v30 = a8;
  do
  {
    uint64_t v31 = a4 + 4 * v25;
    int v32 = *(_DWORD *)(v31 + 76);
    uint64_t result = Is_Legal(v32);
    if (result) {
      BOOL v34 = v32 == 6;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34)
    {
      unsigned int v35 = GNSS_Id_To_Num_Prn_Idx(v32);
      uint64_t result = GNSS_Id_To_Num_Pos_Idx(*(_DWORD *)(v31 + 76));
      if (v35 <= 0xB1
        && (result & 0x80000000) == 0
        && (int)result <= 148
        && *(_DWORD *)(a5 + 192 * result + 184) == 1
        && *(int *)(a4 + 4 * v25 + 412) >= 10)
      {
        *(_DWORD *)(v30 + 1208) = *(_DWORD *)(v31 + 76);
        *(double *)(v30 + 1264) = *(double *)(a4 + v24 + 1232) + *(double *)(v70 + v24 + 30144);
        *(double *)(v30 + 1272) = (*(double *)(a4 + v24 + 1616) + *(double *)(v70 + v24 + 30528)) * 0.190293673;
        *(double *)(v30 + 1280) = *(double *)(v70 + 8 * v25 + 120) + *(double *)(v70 + v24 + 30912);
        long long v36 = *(_OWORD *)(v70 + v26 + 27840);
        *(void *)(v30 + 1232) = *(void *)(v70 + v26 + 27856);
        *(_OWORD *)(v30 + 1216) = v36;
        long long v37 = *(_OWORD *)(v70 + v26 + 28992);
        *(void *)(v30 + 1256) = *(void *)(v70 + v26 + 29008);
        *(_OWORD *)(v30 + 1240) = v37;
        *(double *)(v30 + 1288) = *(double *)(v70 + v26 + 4464) + *(double *)(v70 + v24 + 4448);
        *(double *)(v30 + 1296) = *(double *)(v70 + v26 + 10040) + *(double *)(v70 + v24 + 10024);
        *(double *)(v30 + 1304) = *(double *)(v70 + v26 + 15616) + *(double *)(v70 + v24 + 15600);
        *(unsigned char *)(v30 + 1312) = *(unsigned char *)(v70 + v25 + 2864);
        *(unsigned char *)(v30 + 1313) = *(unsigned char *)(v70 + v29);
        *(unsigned char *)(v30 + 1314) = *(unsigned char *)(v70 + v27 - 96);
        uint64_t v38 = v70 + 4 * v25;
        unsigned int v39 = *(_DWORD *)(v38 + 3056);
        if (v39 - 1 >= 0x1D)
        {
          if (!v39) {
            goto LABEL_27;
          }
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          unsigned int v39 = *(_DWORD *)(v38 + 3056);
        }
        if (v39 >= 0x1D)
        {
          uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
          char v40 = 120;
        }
        else
        {
          char v40 = aGhkmnpqrstvyac_1[v39];
        }
        *(unsigned char *)(v30 + 1315) = v40;
LABEL_27:
        unsigned int v41 = *(_DWORD *)(v70 + v28);
        if (v41 - 1 >= 0x1D)
        {
          if (!v41) {
            goto LABEL_32;
          }
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          unsigned int v41 = *(_DWORD *)(v70 + v28);
        }
        if (v41 >= 0x1D)
        {
          uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
          char v42 = 120;
        }
        else
        {
          char v42 = aGhkmnpqrstvyac_1[v41];
        }
        *(unsigned char *)(v30 + 1316) = v42;
LABEL_32:
        unsigned int v43 = *(_DWORD *)(v70 + v28 + 5576);
        if (v43 - 1 >= 0x1D)
        {
          if (!v43)
          {
LABEL_37:
            *(unsigned char *)(v30 + 1318) = *(unsigned char *)(v70 + v25 + 2960);
            *(unsigned char *)(v30 + 1319) = *(unsigned char *)(v70 + v29 + 96);
            *(unsigned char *)(v30 + 1320) = *(unsigned char *)(v70 + v27);
            *(double *)(v30 + 1328) = (double)*(__int16 *)(a6 + 2 * v35 + 178);
            *(double *)(v30 + 1336) = (double)*(char *)(a6 + v35);
            *(unsigned char *)(v30 + 1344) = *(unsigned char *)(a4 + v25 + 604);
            *(unsigned char *)(v30 + 1345) = *(unsigned char *)(a4 + v25 + 700);
            *(unsigned char *)(v30 + 1346) = *(_DWORD *)(a4 + 4 * v25 + 412);
            goto LABEL_38;
          }
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          unsigned int v43 = *(_DWORD *)(v70 + v28 + 5576);
        }
        if (v43 >= 0x1D)
        {
          uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
          char v44 = 120;
        }
        else
        {
          char v44 = aGhkmnpqrstvyac_1[v43];
        }
        *(unsigned char *)(v30 + 1317) = v44;
        goto LABEL_37;
      }
    }
LABEL_38:
    ++v25;
    v30 += 144;
    v24 += 8;
    ++v27;
    v26 += 24;
    v28 += 4;
    ++v29;
  }
  while (v25 != 48);
  *(void *)(a8 + 800) = *(void *)(v70 + 824);
  *(void *)(a8 + 808) = *(void *)(v70 + 2856);
  *(void *)(a8 + 816) = *(void *)(v70 + 8432);
  *(void *)(a8 + 824) = *(void *)(v70 + 14008);
  long long v45 = *(_OWORD *)(v70 + 25744);
  *(void *)(a8 + 848) = *(void *)(v70 + 25760);
  *(_OWORD *)(a8 + 832) = v45;
  long long v46 = *(_OWORD *)(v70 + 25784);
  *(void *)(a8 + 872) = *(void *)(v70 + 25800);
  *(_OWORD *)(a8 + 856) = v46;
  *(void *)(a8 + 880) = *(void *)(v70 + 25664);
  *(void *)(a8 + 888) = *(void *)(v70 + 25680);
  *(void *)(a8 + 896) = *(void *)(v70 + 25696);
  *(void *)(a8 + 904) = *(void *)(v70 + 25712);
  *(unsigned char *)(a8 + 912) = *(unsigned char *)(v65 + 1505);
  *(unsigned char *)(a8 + 913) = *(unsigned char *)(v65 + 1507);
  long long v47 = *(_OWORD *)(v70 + 25848);
  long long v48 = *(_OWORD *)(v70 + 25864);
  long long v49 = *(_OWORD *)(v70 + 25880);
  *(void *)(a8 + 968) = *(void *)(v70 + 25896);
  *(_OWORD *)(a8 + 936) = v48;
  *(_OWORD *)(a8 + 952) = v49;
  *(_OWORD *)(a8 + 920) = v47;
  long long v50 = *(_OWORD *)(v70 + 25920);
  *(_OWORD *)(a8 + 976) = *(_OWORD *)(v70 + 25904);
  *(_OWORD *)(a8 + 992) = v50;
  long long v51 = *(_OWORD *)(v70 + 26009);
  long long v52 = *(_OWORD *)(v70 + 25984);
  long long v53 = *(_OWORD *)(v70 + 26000);
  *(_OWORD *)(a8 + 1040) = *(_OWORD *)(v70 + 25968);
  *(_OWORD *)(a8 + 1081) = v51;
  *(_OWORD *)(a8 + 1072) = v53;
  *(_OWORD *)(a8 + 1056) = v52;
  long long v54 = *(_OWORD *)(v70 + 25952);
  *(_OWORD *)(a8 + 1008) = *(_OWORD *)(v70 + 25936);
  *(_OWORD *)(a8 + 1024) = v54;
  long long v55 = *(_OWORD *)(v70 + 26032);
  *(_OWORD *)(a8 + 1120) = *(_OWORD *)(v70 + 26048);
  *(_OWORD *)(a8 + 1104) = v55;
  long long v56 = *(_OWORD *)(v70 + 26064);
  long long v57 = *(_OWORD *)(v70 + 26080);
  long long v58 = *(_OWORD *)(v70 + 26096);
  *(_OWORD *)(a8 + 1177) = *(_OWORD *)(v70 + 26105);
  *(_OWORD *)(a8 + 1168) = v58;
  *(_OWORD *)(a8 + 1152) = v57;
  *(_OWORD *)(a8 + 1136) = v56;
  *(unsigned char *)(a8 + 1200) = *(_DWORD *)(v66 + 20);
  *(_OWORD *)(a8 + 80) = *(_OWORD *)(v66 + 56);
  *(unsigned char *)(a8 + 1201) = *(unsigned char *)(v66 + 128);
  *(_DWORD *)(a8 + 1204) = *(_DWORD *)(v66 + 132);
  long long v59 = *(_OWORD *)(a3 + 80);
  long long v60 = *(_OWORD *)(a3 + 96);
  *(void *)(a8 + 8152) = *(void *)(a3 + 112);
  *(_OWORD *)(a8 + 8120) = v59;
  *(_OWORD *)(a8 + 8136) = v60;
  long long v61 = *(_OWORD *)(a3 + 120);
  long long v62 = *(_OWORD *)(a3 + 136);
  *(void *)(a8 + 0x2000) = *(void *)(a3 + 152);
  *(_OWORD *)(a8 + 8176) = v62;
  *(_OWORD *)(a8 + 8160) = v61;
  long long v63 = *(_OWORD *)(a3 + 160);
  long long v64 = *(_OWORD *)(a3 + 176);
  *(void *)(a8 + 8232) = *(void *)(a3 + 192);
  *(_OWORD *)(a8 + 8200) = v63;
  *(_OWORD *)(a8 + 8216) = v64;
  *(_OWORD *)(a8 + 8240) = *(_OWORD *)(a3 + 200);
  *(_OWORD *)(a8 + 8256) = *(_OWORD *)(a3 + 216);
  *(_OWORD *)(a8 + 8272) = *(_OWORD *)(a3 + 232);
  *double v67 = *(_DWORD *)(a3 + 248);
  return result;
}

BOOL Is_GAL_IntEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44)
      || *(_WORD *)(a1 + 48)
      || *(_WORD *)(a1 + 50)
      || *(_WORD *)(a1 + 52)
      || *(_WORD *)(a1 + 54)
      || *(_WORD *)(a1 + 56)
      || *(_WORD *)(a1 + 58)
      || *(_WORD *)(a1 + 60)
      || *(_WORD *)(a1 + 62)
      || *(_WORD *)(a1 + 72) != 0;
}

size_t lpm_map_transaction_id@<X0>(const _LPP_TRANSACTION *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[4] = 3;
  size_t result = memset_s(a2 + 8, 0xCuLL, 0, 0xCuLL);
  if (a1)
  {
    *a2 = 1;
    a2[4] = 2;
    unsigned int v5 = *((_DWORD *)a1 + 5);
    *((_DWORD *)a2 + 2) = *((_DWORD *)a1 + 4);
    if (v5 > 0xFF)
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx transactionNumber,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpm_map_transaction_id", 772, *((_DWORD *)a1 + 5));
        return LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      }
    }
    else
    {
      a2[12] = v5;
    }
  }
  return result;
}

void send_to_lpi_gps_real_time_integrity_req(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _LPP_TRANSACTION *a5)
{
  v8[2] = *MEMORY[0x263EF8340];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  int v7 = a4;
  lpm_map_transaction_id(a5, v5);
  gps_set_gps_real_time_integrity((uint64_t)v8, (uint64_t)&v6);
}

void send_to_lpi_gps_utc_model_req(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _LPP_TRANSACTION *a5)
{
  v8[2] = *MEMORY[0x263EF8340];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  int v7 = a4;
  lpm_map_transaction_id(a5, v5);
  gps_set_gps_utc_model((uint64_t)v8, (uint64_t)&v6);
}

void send_to_lpi_gnss_iono_model_req(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, _LPP_TRANSACTION *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v10 = a1;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  uint64_t v8 = a4;
  int v9 = a5;
  lpm_map_transaction_id(a6, v7);
  gps_set_gnss_iono_model((uint64_t)&v10, a3, 0, (uint64_t)&v8);
}

uint64_t send_to_lpi_pos_loc_info_req(unsigned int *a1, uint64_t a2, int a3, _LPP_TRANSACTION *a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  int v14 = a3;
  uint64_t result = lpm_map_transaction_id(a4, v12);
  unsigned int v7 = a1[10];
  if (v7)
  {
    LOBYTE(v22) = -1;
    unsigned int v21 = a1[2];
    unsigned int v24 = a1[4];
    char v26 = *((unsigned char *)a1 + 49);
    char v31 = *((unsigned char *)a1 + 46);
    BYTE2(v22) = *((unsigned char *)a1 + 48);
    HIBYTE(v22) = *((unsigned char *)a1 + 13);
    char v25 = *((unsigned char *)a1 + 20);
    uint64_t v27 = *((void *)a1 + 3);
    __int16 v30 = *((_WORD *)a1 + 22);
    char v28 = *((unsigned char *)a1 + 32);
    char v32 = *((unsigned char *)a1 + 47);
    char v33 = *((unsigned char *)a1 + 35);
    *(_WORD *)std::string __str = *((unsigned __int8 *)a1 + 4);
    BYTE1(v22) = *((unsigned char *)a1 + 12);
    __int16 v29 = *(_WORD *)((char *)a1 + 33);
    char v23 = *((unsigned char *)a1 + 14);
    int v10 = *((unsigned __int8 *)a1 + 56);
    if (v10 == 1)
    {
      return gps_gnss_start_based_mode(*a1, (uint64_t)__str, 0, (uint64_t)&v13);
    }
    else if (v10 == 2)
    {
      return gps_gnss_start_auto_mode(*a1, (uint64_t)__str, 0, (uint64_t)&v13);
    }
  }
  else if ((v7 & 2) != 0)
  {
    unsigned int v11 = a1[13];
    *(_DWORD *)std::string __str = a3;
    unsigned int v21 = v11;
    int v22 = *((unsigned __int8 *)a1 + 4);
    return HandleLppWlanMeasReq((uint64_t)__str);
  }
  else
  {
    int __s = 0;
    uint64_t v16 = 0;
    __int16 v17 = -255;
    int v18 = -1;
    char v19 = 0;
    memset_s(&__s, 0x20uLL, 0, 0x20uLL);
    HIBYTE(v17) = 1;
    int v18 = a3;
    LOBYTE(v17) = send_is_supl_last_transaction(a3);
    HandleLppPosResponse(&__s);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Positioning mode not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "send_to_lpi_pos_loc_info_req", 770);
      return LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
    }
  }
  return result;
}

char *LbsOsaTrace_ModuleString(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1 < 0x1A) {
    return off_2648F5D10[a1];
  }
  if (LbsOsaTrace_IsLoggingAllowed(14, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = (const char *)LbsOsaTrace_ModuleString(14);
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx src,%u\n", v3, v4, 87, "LbsOsaTrace_ModuleString", 515, v1);
    LbsOsaTrace_WriteLog(0xEu, __str, v5, 2, 1);
  }
  return 0;
}

uint64_t LbsOsaTrace_IsLoggingAllowed(unsigned int a1, int a2, char a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t SrcCfg = LbsOsaTrace_GetSrcCfg(a1);
  if (!SrcCfg)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(14, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    char v12 = LbsOsaTrace_ModuleString(0xEu);
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx src,%u\n", v11, v12, 87, "LbsOsaTrace_IsLoggingAllowed", 515, a1);
    LbsOsaTrace_WriteLog(0xEu, __str, v13, 2, 1);
    return 0;
  }
  if (a4 == 1 && !dword_26AE6D0F8 || !*(_DWORD *)SrcCfg) {
    return 0;
  }
  if (a3) {
    return 1;
  }
  switch(a2)
  {
    case 0:
    case 1:
      return (*(unsigned char *)(SrcCfg + 4) & 1) != 0;
    case 2:
    case 3:
      return (*(unsigned char *)(SrcCfg + 4) & 2) != 0;
    case 4:
      return (*(unsigned char *)(SrcCfg + 4) & 4) != 0;
    case 5:
      return (*(unsigned char *)(SrcCfg + 4) & 8) != 0;
    case 6:
      uint64_t result = g_LbsOsaTrace_Config != 3 && g_LbsOsaTrace_Config != 0;
      break;
    case 7:
      return (g_LbsOsaTrace_Config & 0xFFFFFFFD) != 0;
    default:
      return 0;
  }
  return result;
}

size_t LbsOsaTrace_WriteLog(unsigned int a1, char *a2, size_t a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t SrcCfg = (_DWORD *)LbsOsaTrace_GetSrcCfg(a1);
  if (!SrcCfg)
  {
    a3 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(14, 2, 0, 0)) {
      return a3;
    }
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v14 = (const char *)LbsOsaTrace_ModuleString(14);
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx src,%u\n", v13, v14, 87, "LbsOsaTrace_WriteLog", 515, a1);
    LbsOsaTrace_WriteLog(14, __str, v15, 2, 1);
    return 0;
  }
  if (*SrcCfg != 1) {
    return 0;
  }
  if (a5)
  {
    int v11 = 1;
    size_t v12 = 0;
  }
  else
  {
    int v11 = 0;
    size_t v12 = a3;
  }
  gnssOsa_PrintLog(a2, a4, v11, v12);
  return a3;
}

uint64_t LbsOsaTrace_GetSrcCfg(unsigned int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1 < 0x1A) {
    return (uint64_t)*(&off_2648F5DE0 + (int)a1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(14, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 87, "LbsOsaTrace_GetSrcCfg", 515, a1);
    LbsOsaTrace_WriteLog(14, __str, v4, 2, 1);
  }
  return 0;
}

size_t LbsOsaTrace_PrintBinaryBuf(unsigned int a1, unsigned int a2, int a3, const void *a4, size_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(a1, a2, 1, a3);
  if (result)
  {
    bzero(__str, 0x410uLL);
    if (a2 > 7) {
      uint64_t v10 = 32;
    }
    else {
      uint64_t v10 = *(unsigned int *)&aE_6[4 * a2];
    }
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    size_t v12 = LbsOsaTrace_ModuleString(a1);
    int v13 = snprintf(__str, 0x40FuLL, "%10u %s%c ", v11, v12, v10);
    if (v13 < 1)
    {
      unsigned __int16 v15 = 0;
    }
    else
    {
      int v14 = v13;
      memcpy_s("LbsOsaTrace_FormatBuffer", 360, &__str[v13], 1040 - v13, a4, a5);
      unsigned __int16 v15 = v14 + a5;
      if ((v14 + a5) >= 0x410) {
        unsigned __int16 v15 = 1040;
      }
    }
    return LbsOsaTrace_WriteLog(a1, __str, v15, a2, 0);
  }
  return result;
}

uint64_t LbsOsaTrace_PrintAsciiBuf(unsigned int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(a1, a2, 1, a3);
  uint64_t result = 0;
  if (a5 && IsLoggingAllowed)
  {
    int v12 = 0;
    unsigned __int16 v13 = 0;
    while (1)
    {
      int v14 = (unsigned __int8 *)(a4 + (unsigned __int16)v12);
      int v15 = *v14;
      if (v15 == 10 || v15 == 13) {
        break;
      }
      ++v12;
LABEL_25:
      if (a5 <= (unsigned __int16)v12) {
        return a5;
      }
    }
    *int v14 = 0;
    int v17 = LbsOsaTrace_IsLoggingAllowed(a1, a2, 1, a3);
    if ((unsigned __int16)v12 == v13)
    {
      if (v17)
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        double v19 = *(double *)&g_MacClockTicksToMsRelation;
        uint64_t v20 = LbsOsaTrace_ModuleString(a1);
        if (a2 > 7) {
          uint64_t v21 = 32;
        }
        else {
          uint64_t v21 = *(unsigned int *)&aE_6[4 * a2];
        }
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v19 * (double)v18), v20, v21, (const char *)&str_29_13);
LABEL_20:
        LbsOsaTrace_WriteLog(a1, __str, v26, a2, 1);
      }
    }
    else if (v17)
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      double v23 = *(double *)&g_MacClockTicksToMsRelation;
      unsigned int v24 = LbsOsaTrace_ModuleString(a1);
      if (a2 > 7) {
        uint64_t v25 = 32;
      }
      else {
        uint64_t v25 = *(unsigned int *)&aE_6[4 * a2];
      }
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v23 * (double)v22), v24, v25, (const char *)(a4 + v13));
      goto LABEL_20;
    }
    *int v14 = v15;
    if (v15 == 13 && v14[1] == 10) {
      ++v12;
    }
    unsigned __int16 v13 = ++v12;
    goto LABEL_25;
  }
  return result;
}

size_t LbsOsaTrace_UpdateModuleConfig(unsigned int a1, int a2, char a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_GetSrcCfg(a1);
  if (result)
  {
    *(_DWORD *)size_t result = a2;
    *(unsigned char *)(result + 4) = a3;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 87, "LbsOsaTrace_UpdateModuleConfig", 515, a1);
      return LbsOsaTrace_WriteLog(0xEu, __str, v8, 2, 1);
    }
  }
  return result;
}

BOOL LbsOsaTrace_GetModuleConfig(uint64_t a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t SrcCfg = LbsOsaTrace_GetSrcCfg(a2);
  uint64_t v5 = SrcCfg;
  if (SrcCfg)
  {
    *(_DWORD *)a1 = *(_DWORD *)SrcCfg;
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(SrcCfg + 4);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 87, "LbsOsaTrace_GetModuleConfig", 515, a2);
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 2, 1);
  }
  return v5 != 0;
}

size_t LcsTimer::Init(int *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *a1 = a2;
  a1[2] = a5;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u,Timertype,%u,User Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 73, "Init", a2, a5, a3);
    size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v12, 4, 1);
  }
  a1[3] = a4;
  return result;
}

size_t LcsTimer::Start(LcsTimer *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_TimerStart_Out(*(_DWORD *)this, *((_DWORD *)this + 2), *((_DWORD *)this + 3));
  size_t result = GN_SUPL_TimerStart_Out(*(_DWORD *)this, *((_DWORD *)this + 2), *((_DWORD *)this + 3));
  if (result)
  {
    *((unsigned char *)this + 4) = 1;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx failed to start timer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "Start", 770);
      return LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    }
  }
  return result;
}

uint64_t LcsTimer::Stop(LcsTimer *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  Trace_GN_SUPL_TimerStop_Out(*(_DWORD *)this, *((_DWORD *)this + 2));
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (*((unsigned char *)this + 4)) {
      uint64_t v4 = 84;
    }
    else {
      uint64_t v4 = 70;
    }
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: m_timer_running,%c\n", (unint64_t)v3, "SPL", 65, "Stop", v4);
    uint64_t result = LbsOsaTrace_WriteLog(0x12u, __str, v5, 1, 1);
  }
  if (*((unsigned char *)this + 4))
  {
    uint64_t result = GN_SUPL_TimerStop_Out(*(_DWORD *)this, *((_DWORD *)this + 2));
    if (result)
    {
      *((unsigned char *)this + 4) = 0;
    }
    else
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx timer stop failed for requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "Stop", 770, *(_DWORD *)this);
        return LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
      }
    }
  }
  return result;
}

uint64_t LcsTimer::SetTimeout(LcsTimer *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v6 = 84;
    if (!*((unsigned char *)this + 4)) {
      uint64_t v6 = 70;
    }
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u,m_timer_running,%c,timeout,%u\n", (unint64_t)v5, "SPL", 65, "SetTimeout", *(_DWORD *)this, v6, a2);
    uint64_t result = LbsOsaTrace_WriteLog(0x12u, __str, v7, 1, 1);
  }
  *((_DWORD *)this + 3) = a2;
  if (*((unsigned char *)this + 4))
  {
    if (GN_SUPL_TimerStop_Out(*(_DWORD *)this, *((_DWORD *)this + 2)))
    {
      *((unsigned char *)this + 4) = 0;
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: timer is stopped successfully for requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 73, "SetTimeout", *(_DWORD *)this);
      int v10 = 4;
    }
    else
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx timer stop failed for requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "SetTimeout", 770, *(_DWORD *)this);
      int v10 = 0;
    }
    return LbsOsaTrace_WriteLog(0x12u, __str, v9, v10, 1);
  }
  return result;
}

uint64_t LcsTimer::Release(LcsTimer *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v3 = 84;
    if (!*((unsigned char *)this + 4)) {
      uint64_t v3 = 70;
    }
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u,m_timer_running,%c\n", (unint64_t)v2, "SPL", 65, "Release", *(_DWORD *)this, v3);
    LbsOsaTrace_WriteLog(0x12u, __str, v4, 1, 1);
  }
  if (!*((unsigned char *)this + 4))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 87, "Release", 1028);
    int v8 = 2;
    return LbsOsaTrace_WriteLog(0x12u, __str, v7, v8, 1);
  }
  uint64_t result = GN_SUPL_TimerStop_Out(*(_DWORD *)this, *((_DWORD *)this + 2));
  if ((result & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx timer stop failed for requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "Release", 770, *(_DWORD *)this);
      int v8 = 0;
      return LbsOsaTrace_WriteLog(0x12u, __str, v7, v8, 1);
    }
  }
  return result;
}

uint64_t LcsTimer::OnTimer(LcsTimer *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: requestID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 73, "OnTimer", this);
    int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 4, 1);
  }
  uint64_t Instance = SuplProvider::GetInstance(IsLoggingAllowed);
  if (Instance) {
    uint64_t v6 = (uint64_t (***)(void, LcsTimer *))(Instance + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  return (**v6)(v6, this);
}

double InitIMUGen(uint64_t a1)
{
  double v2 = (_OWORD *)(a1 + 840);
  bzero((void *)a1, 0x370uLL);
  *double v2 = xmmword_22BB44CE0;
  *(void *)(a1 + 400) = 0x403F666666666666;
  *(void *)(a1 + 816) = 0x4051A2C105EF014FLL;
  *(_WORD *)(a1 + 873) = 257;
  *(void *)(a1 + 856) = 0x4059000000000000;
  *(void *)(a1 + 944) = 0x7FEFFFFFFFFFFFFFLL;
  if ((g_FPE_LogSeverity & 8) == 0)
  {
    *(void *)(a1 + 880) = 0x408F400000000000;
    double v3 = 1000.0;
LABEL_8:
    double v6 = floor(v3 + 0.5);
    goto LABEL_9;
  }
  unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  if (g_TCU) {
    double v5 = *(double *)(g_TCU + 8);
  }
  else {
    double v5 = 0.0;
  }
  LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f IMUGEN_INIT_CFG:  K_IMU_DOWN_SAMPLE_RATIO=%d, K_SENSOR_DELIVERY_TIME_U4MS=%d", "InitIMUGen", 97, v4, v5, 1, 2000);
  double v3 = *(double *)(a1 + 848) * 10.0;
  *(void *)(a1 + 880) = 0x408F400000000000;
  if (v3 >= 0.0) {
    goto LABEL_8;
  }
  double v6 = -floor(0.5 - v3);
LABEL_9:
  *(_DWORD *)(a1 + 888) = v6;
  double result = 1.67;
  *(_OWORD *)(a1 + 896) = xmmword_22BB44CF0;
  *(_OWORD *)(a1 + 912) = xmmword_22BB44D00;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(a1 + 936) = 0x409A180000000000;
  return result;
}

const char *resampleOneInterval(const char *result, double *a2, uint64_t a3)
{
  unsigned int v4 = result;
  double v5 = &a2[52 * result];
  if (result) {
    uint64_t v6 = a3 + 16;
  }
  else {
    uint64_t v6 = a3 + 48;
  }
  int v7 = *(unsigned __int8 *)v5;
  int v8 = v7;
  if (*(unsigned char *)v5) {
    goto LABEL_5;
  }
  if ((g_FPE_LogSeverity & 1) == 0)
  {
    g_FPE_AssertFlag = 1;
    return result;
  }
  unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  double v16 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
  double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Should not enter resampleOneInterval with empty inner buffer!", "resampleOneInterval", 133, v15, v16);
  int v8 = *(unsigned __int8 *)v5;
  g_FPE_AssertFlag = 1;
  if (v8)
  {
LABEL_5:
    uint64_t v9 = 0;
    int v10 = &a2[52 * v4];
    do
    {
      uint64_t v11 = &a2[52 * v4 + 4 + 4 * (v9 - 1)];
      if (!v9) {
        uint64_t v11 = a2 + 104;
      }
      if (v9 == v7 - 1) {
        double v12 = a2[104] + a2[105];
      }
      else {
        double v12 = a2[52 * v4 + 4 + 4 * v9];
      }
      double v13 = (v12 - *v11) * a2[106];
      for (uint64_t i = 1; i != 4; ++i)
        *(double *)(v6 + i * 8) = *(double *)(v6 + i * 8) + v13 * v10[i];
      ++v9;
      v10 += 4;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t readIMUSample(double *a1, uint64_t a2, unsigned int a3, const char *a4, int a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(unsigned __int8 *)a1;
  if (v6 < 0xC)
  {
    uint64_t v11 = (unsigned __int8 *)&a1[4 * v6];
    double v12 = v11 + 8;
    long long __dst = 0u;
    long long v39 = 0u;
    Cyc_Record_Read(a2, a3, &__dst);
    ++*(unsigned char *)a1;
    int v13 = DWORD2(v39);
    uint64_t v14 = (double *)(v11 + 32);
    TCU_ConvertOStimeToTTICKtime(a4, DWORD2(v39), (double *)v11 + 4);
    double v15 = *((double *)v11 + 4) * 10000.0;
    BOOL v16 = v15 < 0.0;
    double v17 = floor(v15 + 0.5);
    double v18 = -floor(0.5 - v15);
    if (!v16) {
      double v18 = v17;
    }
    *uint64_t v14 = v18 * 0.0001;
    double v20 = *((double *)&__dst + 1);
    double v19 = *(double *)&__dst;
    *double v12 = __dst;
    *((double *)v11 + 2) = v20;
    double v21 = *(double *)&v39;
    *((void *)v11 + 3) = v39;
    if (v19 < 0.0) {
      double v19 = -v19;
    }
    double v22 = -v20;
    if (v20 >= 0.0) {
      double v22 = v20;
    }
    double v23 = -v21;
    if (v21 >= 0.0) {
      double v23 = v21;
    }
    if (v22 < v23) {
      double v20 = v21;
    }
    uint64_t v24 = 1;
    if (v22 < v23) {
      uint64_t v24 = 2;
    }
    if (v20 < 0.0) {
      double v20 = -v20;
    }
    if (v19 >= v20) {
      uint64_t v24 = 0;
    }
    double v25 = *(double *)&v12[v24];
    if (v25 >= 0.0) {
      double v26 = *(double *)&v12[v24];
    }
    else {
      double v26 = -v25;
    }
    if (v26 > a1[50])
    {
      *((unsigned char *)a1 + 392) = 1;
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v28 = *(double *)(g_TCU + 8);
        }
        else {
          double v28 = 0.0;
        }
        __int16 v30 = "Gyro";
        if (a5 == 1) {
          __int16 v30 = "Accl";
        }
        char v31 = " rad/s";
        double v32 = v26 / 9.79764322;
        if (a5 == 1) {
          char v31 = "*g m/s^2";
        }
        else {
          double v32 = v26;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f %s value too big : %0.2f%s at OStime = %0.3f", "readIMUSample", 372, v27, v28, v30, v32, v31, *v14);
      }
      if (a5)
      {
        if (a5 == 1 && (g_FPE_LogSeverity & 0x200) != 0) {
          LC_LOG_NMEA_GENERIC("%s,AGW2,%d,%.2f,%d", "$PFPEX", 0, v26 / 9.79764322, v13);
        }
      }
      else if ((g_FPE_LogSeverity & 0x200) != 0)
      {
        LC_LOG_NMEA_GENERIC("%s,AGW2,%d,%.2f,%d", "$PFPEX", 1, v26, v13);
      }
    }
    unsigned int v33 = *(unsigned __int8 *)a1;
    if (v33 >= 2)
    {
      double v34 = a1[4 * v33] - a1[4 * v33 - 4];
      if (v34 > 0.125)
      {
        __int16 v35 = g_FPE_LogSeverity;
        if ((g_FPE_LogSeverity & 2) != 0)
        {
          unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v37 = *(double *)(g_TCU + 8);
          }
          else {
            double v37 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f readIMUSample IMU discontinuous, timeGap = %.17g", "readIMUSample", 391, v36, v37, v34);
          __int16 v35 = g_FPE_LogSeverity;
        }
        if ((v35 & 0x200) != 0) {
          LC_LOG_NMEA_GENERIC("%s,AGW1,%d,%.3f,%d", "$PFPEX", a5 != 1, *v14 - a1[4 * *(unsigned __int8 *)a1 - 4], v13);
        }
        if (v34 > 1.025) {
          *((unsigned char *)a1 + 408) = 1;
        }
      }
    }
    return 0;
  }
  else
  {
    if ((g_FPE_LogSeverity & 2) != 0)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f Entered readIMUSample with %u empty entries in the buffer", "readIMUSample", 342, v7, v8, 12 - *(unsigned __int8 *)a1);
    }
    return 1;
  }
}

uint64_t samplerInputFifoAlignment(unsigned int a1, int a2, uint64_t a3, const char *a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long __dst = 0u;
  long long v22 = 0u;
  Cyc_Record_Read(a5, a1, &__dst);
  double v20 = 0.0;
  TCU_ConvertOStimeToTTICKtime(a4, DWORD2(v22), &v20);
  double v10 = floor(v20 * 10000.0 + 0.5);
  double v11 = -floor(0.5 - v20 * 10000.0);
  if (v20 * 10000.0 >= 0.0) {
    double v11 = v10;
  }
  double v12 = v11 * 0.0001;
  if (v12 >= *(double *)(a3 + 832))
  {
    uint64_t v14 = *a6;
    if (v14 < 0xC)
    {
      double v17 = &a6[32 * v14];
      *(_OWORD *)(v17 + 8) = __dst;
      *((void *)v17 + 3) = v22;
      *((double *)v17 + 4) = v12;
      *a6 = v14 + 1;
      *(unsigned char *)(a3 + 875) = 1;
      if (a2 == 1)
      {
        uint64_t result = 0;
        *(unsigned char *)(a3 + 873) = 0;
      }
      else if (a2)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v19 = *(double *)(g_TCU + 8);
          }
          else {
            double v19 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unexpected sensor index %d", "samplerInputFifoAlignment", 468, v18, v19, a2);
        }
        uint64_t result = 0;
        g_FPE_AssertFlag = 1;
      }
      else
      {
        uint64_t result = 0;
        *(unsigned char *)(a3 + 874) = 0;
      }
    }
    else
    {
      if ((g_FPE_LogSeverity & 2) != 0)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f Entered samplerInputFifoAlignment with %u empty entries in the buffer", "samplerInputFifoAlignment", 448, v15, v16, 12 - *a6);
      }
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *a6 = 1;
    *(_OWORD *)(a6 + 8) = __dst;
    *((void *)a6 + 3) = v22;
    *((double *)a6 + 4) = v12;
  }
  return result;
}

uint64_t IMUGen_run(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (!a1[875])
  {
    int v37 = a1[873];
    if (a1[874])
    {
      if (!a1[873])
      {
LABEL_79:
        uint64_t v33 = 1;
        while (a1[873] && Cyc_Record_Count_Occupied(a3 + 24, a2))
        {
          if (samplerInputFifoAlignment(a2, 1, (uint64_t)a1, a5, (uint64_t)(a3 + 24), a1)) {
            return v33;
          }
        }
        while (a1[874] && Cyc_Record_Count_Occupied(a3, a2))
        {
          if (samplerInputFifoAlignment(a2, 0, (uint64_t)a1, a5, (uint64_t)a3, a1 + 416)) {
            return 1;
          }
        }
LABEL_87:
        uint64_t v6 = a6;
        if (!a1[875]) {
          return 2;
        }
        goto LABEL_2;
      }
      if (Cyc_Record_Count_Occupied(a3, a2) && Cyc_Record_Count_Occupied(a3 + 24, a2))
      {
        a1[416] = 0;
        *a1 = 0;
        uint64_t v33 = 1;
        if (readIMUSample((double *)a1 + 52, (uint64_t)a3, a2, a5, 1)
          || readIMUSample((double *)a1, (uint64_t)(a3 + 24), a2, a5, 0))
        {
          return v33;
        }
        double v38 = *((double *)a1 + 56);
        double v39 = *((double *)a1 + 4);
        if (v38 <= v39)
        {
          a1[873] = 0;
          double v38 = v39;
        }
        else
        {
          a1[874] = 0;
        }
        double v45 = v38 + -1.0 / *((double *)a1 + 107);
        *((double *)a1 + 104) = v45;
        *((double *)a1 + 108) = v45;
        a1[872] = 1;
      }
      int v37 = a1[873];
      if (a1[874])
      {
        if (a1[873]) {
          goto LABEL_87;
        }
        goto LABEL_79;
      }
    }
    if (!v37) {
      goto LABEL_87;
    }
    goto LABEL_79;
  }
LABEL_2:
  long long v46 = a5;
  long long v49 = a3 + 24;
  long long v50 = a3;
  long long v51 = (double *)(a1 + 416);
  double v12 = a1 + 424;
  int v13 = a1 + 8;
  uint64_t v14 = (_DWORD **)(a4 + 128016);
  uint64_t v47 = a4;
  while (isOKtoOutput(*v14, (uint64_t)a1)
       || Cyc_Record_Count_Occupied(v50, a2) && !isBuffReady(1u, (uint64_t)a1)
       || Cyc_Record_Count_Occupied(v49, a2) && !isBuffReady(0, (uint64_t)a1))
  {
    if (isOKtoOutput(*v14, (uint64_t)a1))
    {
      while (1)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        double v52 = *((double *)a1 + 104) + *((double *)a1 + 105);
        Set_Mat_Size((const char *)3, (int *)&v53 + 2, 3, 1);
        Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v53 + 2, 0.0);
        Set_Mat_Size((const char *)3, (int *)&v55 + 2, 3, 1);
        Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v55 + 2, 0.0);
        resampleOneInterval(0, (double *)a1, (uint64_t)&v52);
        resampleOneInterval((const char *)1, (double *)a1, (uint64_t)&v52);
        *((double *)a1 + 104) = *((double *)a1 + 104) + *((double *)a1 + 105);
        if (!MeasSyncher_applyNewRecord(0, &v52, a4)) {
          break;
        }
        double v15 = *((double *)a1 + 115);
        if (v15 == -999.0)
        {
          double v21 = v52;
        }
        else
        {
          double v16 = *((double *)a1 + 110);
          int v17 = *((_DWORD *)a1 + 232);
          if (v17)
          {
            if ((g_FPE_LogSeverity & 0x200) != 0)
            {
              LC_LOG_NMEA_GENERIC("%s,AG,%.3f,%.5f,%.5f,%.5f,%.5f,%.5f,%.5f", "$PFPEX", *((double *)a1 + 104), *(double *)&v54, *((double *)&v54 + 1), *(double *)&v55, *(double *)&v56, *((double *)&v56 + 1), *(double *)&v57);
              int v17 = *((_DWORD *)a1 + 232);
              double v15 = *((double *)a1 + 115);
            }
            int v18 = v17 - 1;
            *((_DWORD *)a1 + 232) = v18;
            BOOL v19 = v18 == 0;
            double v20 = 1.0;
          }
          else
          {
            double v20 = 0.0;
            BOOL v19 = 1;
          }
          double v21 = v52;
          double v22 = v52 - v15;
          if (v22 > v16 * 0.5) {
            double v22 = v16 * 0.5;
          }
          double v23 = v20 + *((double *)a1 + 117) * (v16 - v22) / v16;
          *((double *)a1 + 117) = v23;
          if (v19)
          {
            BOOL v24 = *(_DWORD *)(v6 + 248) != 6 || *(double *)(v6 + 224) - *(double *)(v6 + 480) >= v21;
            unsigned int v25 = *((_DWORD *)a1 + 222);
            double v26 = (v23 + (double)v25) / v16;
            if (v26 > *((double *)a1 + 113)) {
              BOOL v24 = 1;
            }
            if (v26 <= *((double *)a1 + 114) || !v24) {
              *((_DWORD *)a1 + 232) = v25;
            }
          }
        }
        *((double *)a1 + 115) = v21;
        *((double *)a1 + 108) = v21;
        a1[872] = 1;
        unint64_t v27 = a1[416];
        if (v27 >= 2)
        {
          double v28 = &v12[2 * (v27 - 1)];
          long long v29 = v28[1];
          *double v12 = *v28;
          *(_OWORD *)(a1 + 440) = v29;
          *(unsigned char *)long long v51 = 1;
        }
        unint64_t v30 = *a1;
        if (v30 >= 2)
        {
          char v31 = &v13[2 * (v30 - 1)];
          long long v32 = v31[1];
          *int v13 = *v31;
          *(_OWORD *)(a1 + 24) = v32;
          *a1 = 1;
        }
        if (!isOKtoOutput(*v14, (uint64_t)a1)) {
          goto LABEL_33;
        }
      }
      if ((g_FPE_LogSeverity & 2) != 0)
      {
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v36 = *(double *)(g_TCU + 8);
        }
        else {
          double v36 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f IMUGen SYNCHER_REJECT", "IMUGen_run", 665, v35, v36);
      }
      return 5;
    }
LABEL_33:
    if (Cyc_Record_Count_Occupied(v50, a2))
    {
      if (!isBuffReady(1u, (uint64_t)a1))
      {
        uint64_t v33 = 1;
        if (readIMUSample(v51, (uint64_t)v50, a2, v46, 1)) {
          return v33;
        }
      }
    }
    if (Cyc_Record_Count_Occupied(v49, a2)
      && !isBuffReady(0, (uint64_t)a1)
      && readIMUSample((double *)a1, (uint64_t)v49, a2, v46, 0))
    {
      return 1;
    }
    double v34 = *(double *)&a1[32 * a1[416] + 416];
    if (v34 >= *(double *)&a1[32 * *a1]) {
      double v34 = *(double *)&a1[32 * *a1];
    }
    *((double *)a1 + 118) = v34;
    a4 = v47;
    uint64_t v6 = a6;
    if (!a1[875]) {
      return 0;
    }
  }
  if (!a1[875]) {
    return 0;
  }
  if (a1[808] || a1[392])
  {
    if ((g_FPE_LogSeverity & 2) != 0)
    {
      unint64_t v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v42 = *(double *)(g_TCU + 8);
      }
      else {
        double v42 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f IMUGen IMU_VALUE_ERROR (ACCL=%u,GYRO=%u)", "IMUGen_run", 696, v41, v42, a1[808], a1[392]);
    }
    return 6;
  }
  if (!a1[824] && !a1[408]) {
    return 0;
  }
  if ((g_FPE_LogSeverity & 2) != 0)
  {
    unint64_t v43 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v44 = *(double *)(g_TCU + 8);
    }
    else {
      double v44 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f IMUGen E_MGEN_RETURN_IMU_DISCONTINUOUS (ACCL=%u,Gyro=%u)", "IMUGen_run", 703, v43, v44, a1[824], a1[408]);
  }
  return 4;
}

BOOL isOKtoOutput(_DWORD *a1, uint64_t a2)
{
  if (!Cyc_Record_Count_Free(a1, 1u) || !isBuffReady(0, a2)) {
    return 0;
  }

  return isBuffReady(1u, a2);
}

BOOL isBuffReady(unsigned int a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 416 * a1)) {
    return 0;
  }
  double v3 = *(double *)(a2 + 416 * a1 + 32 * (*(unsigned __int8 *)(a2 + 416 * a1) - 1) + 32);
  if (*(unsigned char *)(a2 + 872))
  {
    double v4 = *(double *)(a2 + 864);
  }
  else
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v7 = *(double *)(g_TCU + 8);
      }
      else {
        double v7 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f last_applied_TT was invalid while in isBuffReady function", "isBuffReady", 255, v6, v7);
    }
    g_FPE_AssertFlag = 1;
    double v4 = 0.0;
  }
  return v3 - v4 >= *(double *)(a2 + 840);
}

double GPS_Klob_Iono_Delay(double *a1, uint64_t a2, uint64_t a3, char *a4, double a5)
{
  double v7 = *(double *)(a3 + 24) * 0.318309886;
  double v8 = 0.0137 / (v7 + 0.11) + -0.022;
  double v9 = *(double *)(a2 + 16) * v8 + *a1 * 0.318309886;
  double v10 = -0.416;
  if (v9 >= -0.416)
  {
    double v10 = *(double *)(a2 + 16) * v8 + *a1 * 0.318309886;
    if (v9 > 0.416) {
      double v10 = 0.416;
    }
  }
  double v11 = a1[1];
  double v12 = v8 * *(double *)(a2 + 8);
  double v13 = v12 / cos(v10 * 3.14159265) + v11 * 0.318309886;
  double v14 = v10 + cos((v13 + -1.617) * 3.14159265) * 0.064;
  double v15 = a5 + v13 * 43200.0 - (double)(86400 * (int)((a5 + v13 * 43200.0) * 0.0000115740741));
  double v16 = v15 + 86400.0;
  if (v15 >= 0.0) {
    double v16 = a5 + v13 * 43200.0 - (double)(86400 * (int)((a5 + v13 * 43200.0) * 0.0000115740741));
  }
  double v17 = (double)a4[13] * 16384.0 * v14
      + (double)a4[12] * 2048.0
      + (double)a4[14] * 65536.0 * (v14 * v14)
      + (double)a4[15] * 65536.0 * (v14 * v14) * v14;
  if (v17 < 72000.0) {
    double v17 = 72000.0;
  }
  double v18 = (v16 + -50400.0) * 6.28318531 / v17;
  if (fabs(v18) >= 1.57)
  {
    double v20 = 0.000000005;
  }
  else
  {
    double v19 = v14 * ((double)a4[9] * 0.0000000074505806)
        + (double)a4[8] * 9.31322575e-10
        + (double)a4[10] * 0.0000000596046448 * (v14 * v14)
        + v14 * ((double)a4[11] * 0.0000000596046448) * (v14 * v14);
    if (v19 < 0.0) {
      double v19 = 0.0;
    }
    double v20 = v19 * (v18 * v18 * -0.5 + 1.0 + v18 * v18 * (v18 * v18) * 0.0416666667) + 0.000000005;
  }
  return ((0.53 - v7) * ((0.53 - v7) * 16.0) * (0.53 - v7) + 1.0) * v20 * 299792458.0;
}

uint64_t GM_Aid_NSSS_Meas(uint64_t a1, unsigned int a2, int *a3)
{
  if (!*(unsigned char *)(a1 + 4) || !*(unsigned char *)(a1 + 15) || *(unsigned __int8 *)(a1 + 14) < a2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  *a3 = *(_DWORD *)(a1 + 28);
  int v5 = a3[1] % 1023;
  unsigned int v6 = 1023 * (v4 / 1023);
  int v7 = v4 % 1023;
  if (v5 < 769 || v7 > 255)
  {
    if (v7 > 768 && v5 < 256) {
      uint64_t v8 = v6 + 1023;
    }
    else {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = v6 - 1023;
  }
  a3[1] = v5;
  Inc_CA_Chips(v8, a3 + 1, a3);
  return 1;
}

size_t SuplSessionVer2::ProcessSuplRequest(SuplUtils *a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t Instance = SuplUtils::GetInstance(a1);
  if (!Instance)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)a1;
  if (!*(void *)a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_24;
  }
  if (*a2 == 2)
  {
    uint64_t v9 = *(void *)(Instance + 16);
    if (v9)
    {
      while (*(_DWORD *)v9 != *(_DWORD *)(v8 + 376))
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          goto LABEL_17;
        }
      }
      uint64_t v13 = *(void *)(v9 + 16);
      if (v13 && !*(unsigned char *)(v13 + 17)) {
        SuplUtils::FillSetCapabilities((unsigned char *)Instance, a4, *(unsigned __int8 *)(*(void *)(v13 + 40) + 5), *(_DWORD *)(v8 + 532));
      }
    }
LABEL_17:
    double v14 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
    if (v14)
    {
      double v15 = v14;
      SuplState::SuplState(v14);
      *(void *)double v15 = &unk_26DF18D70;
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *(void *)(*(void *)a1 + 424);
      uint64_t v18 = *(void *)a1;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        uint64_t v18 = *(void *)a1;
      }
      uint64_t v19 = *(void *)(v16 + 416);
      *(void *)(v16 + 416) = v15;
      *(void *)(v16 + 424) = v19;
      return SuplState::UpdateState((uint64_t)v15, 0, v18);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
LABEL_24:
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "SPL", 69, "ProcessSuplRequest", 513);
    return LbsOsaTrace_WriteLog(0x12u, __str, v21, 0, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "ProcessSuplRequest", 514);
    return LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
  }
  return result;
}

void sub_22BA3F66C(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

unsigned __int8 *SuplSessionVer2::FillSetCapabilities(SuplVersionNegotiation *a1, uint64_t a2, int a3)
{
  size_t result = (unsigned __int8 *)SuplVersionNegotiation::GetInstance(a1);
  int v6 = atomic_load(result + 1);
  if (v6 == 255) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 1;
  }
  int v8 = atomic_load(&result[v7]);
  if (v8 == 2)
  {
    *(unsigned char *)(a2 + 11) = 1;
    *(_WORD *)(a2 + 16) = 1292;
    *(unsigned char *)(a2 + 18) = 0;
    size_t result = (unsigned __int8 *)SuplUtils::GetInstance((SuplUtils *)result);
    if (result[36])
    {
      uint64_t Instance = (SimUtils *)SimUtils::GetInstance((SimUtils *)result);
      size_t result = (unsigned __int8 *)SimUtils::IsItCampedOnLte(Instance, a3);
      *(unsigned char *)(a2 + 15) = result != 0;
      if (result)
      {
        char v10 = 1;
LABEL_10:
        *(unsigned char *)(a2 + 14) = v10;
        *(_WORD *)(a2 + 19) = 781;
        *(unsigned char *)(a2 + 21) = 0;
        return result;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 15) = 0;
    }
    char v10 = 0;
    goto LABEL_10;
  }
  return result;
}

void *SuplSessionVer2::SetLPPAdPayLoad(void *result, uint64_t a2)
{
  double v2 = result;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 32)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = result == (void *)a2;
    }
    if (!v3) {
      size_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result + 1, *(char **)(a2 + 8), *(char **)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
    }
  }
  *((unsigned char *)v2 + 32) = 0;
  return result;
}

uint64_t SuplSessionVer2::RequestLppAdPayLoad(SuplSessionVer2 *this)
{
  uint64_t result = SuplUtils::GetInstance(this);
  if (*(unsigned char *)(result + 36))
  {
    uint64_t result = SuplVersionNegotiation::GetInstance((SuplVersionNegotiation *)result);
    int v3 = atomic_load((unsigned __int8 *)(result + 1));
    BOOL v4 = v3 == 255;
    uint64_t v5 = 1;
    if (v4) {
      uint64_t v5 = 2;
    }
    unsigned int v6 = atomic_load((unsigned __int8 *)(result + v5));
    if (v6 >= 2)
    {
      uint64_t Instance = (SimUtils *)SimUtils::GetInstance((SimUtils *)result);
      uint64_t result = SimUtils::IsItCampedOnLte(Instance, *(_DWORD *)(*(void *)this + 532));
      if (result)
      {
        int v8 = *(unsigned __int8 *)(*(void *)this + 380);
        uint64_t v9 = (SuplPosPayloadHandler *)SuplUtils::GetInstance((SuplUtils *)result);
        uint64_t v10 = *((void *)v9 + 2);
        if (!v10) {
          goto LABEL_12;
        }
        while (*(_DWORD *)v10 != *(_DWORD *)(*(void *)this + 376))
        {
          uint64_t v10 = *(void *)(v10 + 8);
          if (!v10) {
            goto LABEL_12;
          }
        }
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11) {
          uint64_t v12 = *(unsigned __int8 *)(*(void *)(v11 + 40) + 5);
        }
        else {
LABEL_12:
        }
          uint64_t v12 = 0;
        uint64_t v13 = (SuplProvider *)SuplPosPayloadHandler::GetInstance(v9);
        uint64_t result = SuplPosPayloadHandler::ProcessLppAdReq(v13, *(unsigned int *)(*(void *)this + 376), v8 == 2, v12);
        *((unsigned char *)this + 32) = result == 0;
      }
    }
  }
  return result;
}

uint64_t SuplSessionVer2::RequestLppCapPayLoad(SuplSessionVer2 *this, int a2)
{
  uint64_t result = SuplUtils::GetInstance(this);
  if (*(unsigned char *)(result + 36))
  {
    uint64_t result = SuplVersionNegotiation::GetInstance((SuplVersionNegotiation *)result);
    int v4 = atomic_load((unsigned __int8 *)(result + 1));
    BOOL v5 = v4 == 255;
    uint64_t v6 = 1;
    if (v5) {
      uint64_t v6 = 2;
    }
    unsigned int v7 = atomic_load((unsigned __int8 *)(result + v6));
    if (v7 >= 2)
    {
      uint64_t Instance = (SimUtils *)SimUtils::GetInstance((SimUtils *)result);
      uint64_t result = SimUtils::IsItCampedOnLte(Instance, a2);
      if (result)
      {
        uint64_t v9 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance((SuplPosPayloadHandler *)result);
        uint64_t v10 = *(uint64_t (**)(void))(*(void *)LcsSuplGlueLayer::GetInstance(v9) + 32);
        return v10();
      }
    }
  }
  return result;
}

double ECEF2FSD_RotM(const double (*a1)[3], double a2, double (*a3)[3])
{
  __double2 v5 = __sincos_stret(a2);
  (*a3)[0] = v5.__sinval * (*a1)[3] + v5.__cosval * (*a1)[0];
  (*a3)[1] = v5.__sinval * (*a1)[4] + v5.__cosval * (*a1)[1];
  (*a3)[2] = v5.__sinval * (*a1)[5] + v5.__cosval * (*a1)[2];
  (*a3)[3] = v5.__cosval * (*a1)[3] - v5.__sinval * (*a1)[0];
  (*a3)[4] = v5.__cosval * (*a1)[4] - v5.__sinval * (*a1)[1];
  (*a3)[5] = v5.__cosval * (*a1)[5] - v5.__sinval * (*a1)[2];
  (*a3)[6] = (*a1)[6];
  (*a3)[7] = (*a1)[7];
  double result = (*a1)[8];
  (*a3)[8] = result;
  return result;
}

BOOL Speed_Meas_Update(unsigned int a1, double *a2, unsigned int a3, unsigned __int8 *a4, double *a5, _WORD *a6, double a7)
{
  v27[33] = *(double *)MEMORY[0x263EF8340];
  if ((*((_DWORD *)a4 + 1) - 1) > 1) {
    return 0;
  }
  a4[12] = 0;
  if (*a4)
  {
    double v22 = 0.0;
    double v10 = *a2;
    double v11 = a2[1];
    *(double *)unsigned int v25 = *a2;
    *(double *)&v25[1] = v11;
    double v12 = a2[2];
    *(double *)&void v25[2] = v12;
    double v13 = 0.0;
    uint64_t v14 = 2;
    do
    {
      double v13 = v13 + *(double *)&v25[v14] * *(double *)&v25[v14];
      unint64_t v15 = v14-- + 1;
    }
    while (v15 > 1);
    double v16 = sqrt(v13);
    double v17 = v16 - *((double *)a4 + 3) * a7;
    *((double *)a4 + 5) = v16;
    *((double *)a4 + 6) = v17;
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    if (v16 >= 0.0001)
    {
      *((double *)&v23[1] + a1) = v12 / v16;
      *((double *)v23 + a1 + 1) = v11 / v16;
      double v18 = v10 / v16;
    }
    else
    {
      *((void *)&v23[1] + a1) = 0x3FF0000000000000;
      *((void *)v23 + a1 + 1) = 0x3FF0000000000000;
      double v18 = 1.0;
    }
    *((double *)v23 + a1) = v18;
    *((double *)v23 + a3) = v17;
    umeas((BOOL)a5, a3, *((double *)a4 + 4), (double *)v23, v27, v26, &v22, *((double *)a4 + 7));
    double v21 = v22;
    if (v22 <= 0.0)
    {
      int v20 = 0;
      *a4 = 0;
      a4[12] = 1;
      ++*a6;
      *((double *)a4 + 8) = v21 + *((double *)a4 + 8);
    }
    else
    {
      *((double *)a4 + 8) = *((double *)a4 + 4) * (v22 * (v27[a3] * v27[a3]));
      int v20 = *a4;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v20 != 0;
}

uint64_t NK_AltP_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[3] = *(double *)MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 23120;
  if (*(unsigned char *)(a2 + 23120)
    && *(_DWORD *)(a2 + 23124) == 1
    && (!*(_DWORD *)(a1 + 11048)
     || *(int *)(a2 + 12) < 8
     || *(unsigned char *)(a1 + 233)
     || !*(_DWORD *)(a1 + 288)
     || *(double *)(a2 + 23152) < *(double *)(a1 + 280) * *(double *)(a1 + 280)))
  {
    uint64_t result = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }
  Comp_NEDvar_UDU(a1 + 872, 0xBu, 5, (double (*)[3])(a2 + 832), v11);
  int v8 = *(_DWORD *)(a2 + 12);
  if (v8 > 8) {
    unsigned __int8 v9 = 3;
  }
  else {
    unsigned __int8 v9 = 4;
  }
  if (*(_DWORD *)(v6 + 1708) == 1 && *(double *)(a2 + 23152) < 900.0)
  {
    unsigned __int8 v9 = 0;
  }
  else if (*(_DWORD *)(v6 + 1684) == 1 && *(double *)(a2 + 22880) < 1.0e-14)
  {
    --v9;
  }
  if (*(unsigned char *)(a1 + 233) || !*(_DWORD *)(a1 + 11048))
  {
    if (v8 >= 9 && *(unsigned __int8 *)(v6 + 1658) < 3u)
    {
      double v10 = 40000.0;
      goto LABEL_25;
    }
  }
  else if (v8 >= 8)
  {
    if ((*(_DWORD *)(a1 + 20) - 2) >= 3) {
      double v10 = dbl_22BB44E00[*(unsigned char *)(v6 + 1477) == 0];
    }
    else {
      double v10 = 10000.0;
    }
    goto LABEL_25;
  }
  double v10 = 250000.0;
LABEL_25:
  if (*(_DWORD *)(a1 + 288)
    && (*(unsigned __int8 *)(v6 + 1658) < v9 || v11[2] + *(double *)(a1 + 7272) > v10)
    && (*(unsigned char *)(v6 + 1657) || *(_DWORD *)(v6 + 1704) && *(double *)(a2 + 23152) < 10000.0))
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 24) = *(void *)(a1 + 272);
    *(double *)(a3 + 32) = *(double *)(a1 + 280) * *(double *)(a1 + 280);
  }
  if (!*(unsigned char *)a3) {
    return 0;
  }
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(void *)(a3 + 56) = 0x4059000000000000;
  return 1;
}

double GPS_EphBin2Int(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a2 + 16) = (v2 >> 14) & 0x3FF;
  *(unsigned char *)(a2 + 8) = (v2 >> 12) & 3;
  *(unsigned char *)(a2 + 9) = BYTE1(v2) & 0xF;
  *(unsigned char *)(a2 + 10) = v2 >> 2;
  int v3 = *(_DWORD *)(a1 + 28);
  *(unsigned char *)(a2 + 14) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a2 + 22) = ((v2 & 3) << 8) | BYTE2(v3);
  *(_WORD *)(a2 + 18) = v3;
  int v4 = *(_DWORD *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  *(unsigned char *)(a2 + 15) = BYTE2(v4);
  *(_WORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 44) = ((int)(v5 << 8) >> 31) & 0xFFC00000 | (v5 >> 2) & 0x3FFFFF;
  unsigned int v6 = *(_DWORD *)(a1 + 44);
  *(_WORD *)(a2 + 30) = *(_DWORD *)(a1 + 40);
  *(_WORD *)(a2 + 26) = v6 >> 8;
  *(_DWORD *)(a2 + 48) = v6 << 24;
  *(_DWORD *)(a2 + 48) = (v6 << 24) | *(_DWORD *)(a1 + 48) & 0xFFFFFF;
  unsigned int v7 = *(_DWORD *)(a1 + 52);
  *(_WORD *)(a2 + 36) = v7 >> 8;
  v7 <<= 24;
  *(_DWORD *)(a2 + 52) = v7;
  *(_DWORD *)(a2 + 52) = v7 & 0xFF000000 | *(_DWORD *)(a1 + 56) & 0xFFFFFF;
  unsigned int v8 = *(_DWORD *)(a1 + 60);
  *(_WORD *)(a2 + 34) = v8 >> 8;
  v8 <<= 24;
  *(_DWORD *)(a2 + 56) = v8;
  *(_DWORD *)(a2 + 56) = v8 & 0xFF000000 | *(_DWORD *)(a1 + 64) & 0xFFFFFF;
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72);
  *(_WORD *)(a2 + 20) = v9 >> 8;
  *(unsigned char *)(a2 + 11) = (v9 & 0x80) != 0;
  *(unsigned char *)(a2 + 13) = 0;
  *(unsigned char *)(a2 + 12) = (v9 >> 2) & 0x1F;
  *(_WORD *)(a2 + 40) = v10 >> 8;
  *(_DWORD *)(a2 + 60) = v10 << 24;
  *(_DWORD *)(a2 + 60) = (v10 << 24) | *(_DWORD *)(a1 + 76) & 0xFFFFFF;
  unsigned int v11 = *(_DWORD *)(a1 + 80);
  *(_WORD *)(a2 + 38) = v11 >> 8;
  v11 <<= 24;
  *(_DWORD *)(a2 + 64) = v11;
  *(_DWORD *)(a2 + 64) = v11 & 0xFF000000 | *(_DWORD *)(a1 + 84) & 0xFFFFFF;
  unsigned int v12 = *(_DWORD *)(a1 + 88);
  *(_WORD *)(a2 + 32) = v12 >> 8;
  v12 <<= 24;
  *(_DWORD *)(a2 + 68) = v12;
  *(_DWORD *)(a2 + 68) = v12 & 0xFF000000 | *(_DWORD *)(a1 + 92) & 0xFFFFFF;
  *(_DWORD *)(a2 + 72) = ((int)(*(_DWORD *)(a1 + 96) << 8) >> 31) & 0xFF000000 | *(_DWORD *)(a1 + 96) & 0xFFFFFF;
  *(_WORD *)(a2 + 28) = ((__int16)*(_DWORD *)(a1 + 100) >> 15) & 0xC000 | ((unsigned __int16)*(_DWORD *)(a1 + 100) >> 2);
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  return result;
}

double GPS_EphInt2Bin(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 22);
  *(_DWORD *)(a2 + 8) = ((*(_WORD *)(a1 + 16) & 0x3FF) << 14) | ((*(unsigned char *)(a1 + 8) & 3) << 12) | ((*(unsigned char *)(a1 + 9) & 0xF) << 8) | (4 * (*(unsigned char *)(a1 + 10) & 0x3F)) | (v3 >> 8) & 3;
  *(_DWORD *)(a2 + 12) = 0;
  *(void *)(a2 + 16) = 0;
  int v4 = *(unsigned __int16 *)(a1 + 18) | (v3 << 16);
  *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 14);
  *(_DWORD *)(a2 + 28) = v4;
  *(_DWORD *)(a2 + 32) = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 15) << 16);
  int v5 = *(unsigned __int16 *)(a1 + 30) | (v3 << 16);
  *(_DWORD *)(a2 + 36) = 4 * (*(_DWORD *)(a1 + 44) & 0x3FFFFF);
  *(_DWORD *)(a2 + 40) = v5;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 26);
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 44) = v6 >> 24;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFF;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 36);
  LODWORD(v6) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a2 + 52) = v6 >> 24;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 52) & 0xFFFFFF;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 34);
  LODWORD(v6) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a2 + 60) = v6 >> 24;
  int v7 = ((*(unsigned char *)(a1 + 11) & 1) << 7) | (*(unsigned __int16 *)(a1 + 20) << 8) | (4 * (*(unsigned char *)(a1 + 12) & 0x1F));
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 56) & 0xFFFFFF;
  *(_DWORD *)(a2 + 68) = v7;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 40);
  LODWORD(v6) = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a2 + 72) = v6 >> 24;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 60) & 0xFFFFFF;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 38);
  LODWORD(v6) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 80) = v6 >> 24;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 64) & 0xFFFFFF;
  HIDWORD(v6) = *(unsigned __int16 *)(a1 + 32);
  LODWORD(v6) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 88) = v6 >> 24;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 68) & 0xFFFFFF;
  LOWORD(v7) = *(_WORD *)(a1 + 28);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 72) & 0xFFFFFF;
  *(_DWORD *)(a2 + 100) = (v3 << 16) | (4 * (v7 & 0x3FFF));
  *(_DWORD *)(a2 + 104) = 0xFFFFFF;
  return result;
}

uint64_t GncP15_00HandleTruthPos(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_VAL_TRUTH_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP15_00HandleTruthPos");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = gnssOsa_Calloc("GncP15_00HandleTruthPos", 57, 1, 0x10uLL);
    if (v4)
    {
      int v5 = v4;
      long long v7 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 16);
      long long v6 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 32);
      v22[0] = **((_OWORD **)&xmmword_26AE66D08 + 1);
      v22[1] = v7;
      double v22[2] = v6;
      long long v9 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 64);
      long long v8 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 80);
      long long v10 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 48);
      uint64_t v25 = *(void *)(*((void *)&xmmword_26AE66D08 + 1) + 96);
      long long v23 = v9;
      long long v24 = v8;
      v22[3] = v10;
      EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (double *)v22);
      long long v23 = *(_OWORD *)(a1 + 16);
      *(void *)&long long v24 = *(void *)(a1 + 32);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetTruthPos Lat,%f,Long,%f,Alt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP15_00HandleTruthPos", *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
        LbsOsaTrace_WriteLog(8u, __str, v12, 4, 1);
      }
      if (GN_GPS_Set_Config((uint64_t)v22))
      {
        char v13 = 1;
      }
      else
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        char v13 = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 87, "GncP15_00HandleTruthPos", 257);
          LbsOsaTrace_WriteLog(8u, __str, v18, 2, 1);
          char v13 = 0;
        }
      }
      v5[12] = v13;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_VAL_TRUTH_POS_RSP =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "GncP15_00HandleTruthPos");
        LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8787972, v5);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP15_00HandleTruthPos", 517);
    LbsOsaTrace_WriteLog(8u, __str, v15, 0, 1);
  }
  return 0;
}

size_t HandlePPDUSessionData(int *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "HandlePPDUSessionData");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  int v4 = a1[22];
  if (v4 == 3)
  {
    unsigned int v11 = *((unsigned __int16 *)a1 + 36);
    unsigned int v22 = v11;
    uint64_t v23 = *((void *)a1 + 10);
    char v24 = 3;
    int v12 = *a1;
    int v25 = *a1;
    int v13 = *((unsigned __int8 *)a1 + 9);
    char v26 = v13;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      int v15 = 84;
      if (!v13) {
        int v15 = 70;
      }
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP sessionId,%u,emergencyCall,%u,Protocol,%u,length,%u\n", (unint64_t)v14, "PSP", 73, "HandlePPDUSessionData", v12, v15, 3, v11);
      LbsOsaTrace_WriteLog(0x13u, __str, v16, 4, 1);
    }
    IuiMsSuplPosTrigger(0, &v22);
  }
  else if (v4 == 1)
  {
    unsigned int v5 = *((unsigned __int16 *)a1 + 36);
    unsigned int v22 = v5;
    uint64_t v23 = *((void *)a1 + 10);
    char v24 = 1;
    int v6 = *a1;
    int v25 = *a1;
    int v7 = *((unsigned __int8 *)a1 + 9);
    char v26 = v7;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v8 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v9 = 84;
      if (!v7) {
        uint64_t v9 = 70;
      }
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RRLP sessionId,%u,emergencyCall,%c,Protocol,%u,length,%u\n", (unint64_t)v8, "PSP", 73, "HandlePPDUSessionData", v6, v9, 1, v5);
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 4, 1);
    }
    IuiMsSuplPosReq(0, (uint64_t)&v22);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pay load\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 69, "HandlePPDUSessionData", 770);
    LbsOsaTrace_WriteLog(0x13u, __str, v18, 0, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 68, "HandlePPDUSessionData");
    return LbsOsaTrace_WriteLog(0x13u, __str, v21, 5, 1);
  }
  return result;
}

size_t HandlePPDUSessionEND(_DWORD *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Indicate Session End sessionID,%u,Code,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 73, "HandlePPDUSessionEND", *a1, a1[3]);
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 4, 1);
  }
  IuiMsSuplIndicateSessionEnd(0, *a1);
  uint64_t session_info = gps_find_session_info(*a1);
  if (session_info)
  {
    uint64_t v5 = session_info;
    int v6 = *(_DWORD *)(session_info + 8);
    if (v6)
    {
      if (v6 == 2)
      {
        int v7 = 3;
      }
      else
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
        int v7 = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 69, "HandlePPDUSessionEND", 770, *(_DWORD *)(v5 + 8));
          LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
          int v7 = 0;
        }
      }
    }
    else
    {
      int v7 = 1;
    }
    double v8 = (long long *)(v5 + 20);
    uint64_t v9 = (long long *)(v5 + 64);
    int v10 = *(_DWORD *)(v5 + 184);
  }
  else
  {
    double v8 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    int v7 = 0;
  }
  int v14 = GNS_PospSummaryReport(*a1, *((unsigned char *)a1 + 9), v8, v9, v10, a1[3], v7);
  if (v14 != 1)
  {
    int v15 = v14;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS_PospSummaryReport call failed result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "HandlePPDUSessionEND", 770, v15);
      LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
    }
  }
  return gps_delete_session_info(*a1);
}

size_t HandlePPDUStopSession(int *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  IuiMsSuplIndicateSessionEnd(0, *a1);
  int v2 = a1[2];
  if (v2 == 2)
  {
    int v3 = 3;
    goto LABEL_6;
  }
  if (v2 == 1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol mismatch\n");
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
  }
  if (v2)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v9);
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
  }
  int v3 = 1;
LABEL_6:
  int v4 = CheckSessionProtocol(*((unsigned __int8 *)a1 + 4));
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,SessionType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 73, "HandlePPDUStopSession", *a1, v4);
    LbsOsaTrace_WriteLog(0x13u, __str, v6, 4, 1);
  }
  return GNS_PpduEncodedPdu(*a1, 3, v4, v3, 14, 0, 0, 1);
}

uint64_t CheckSessionProtocol(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (result != 1)
  {
    int v1 = result;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    size_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionProtocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "PSP", 69, "CheckSessionProtocol", 770, v1);
      LbsOsaTrace_WriteLog(0x13u, __str, v4, 0, 1);
      return 0;
    }
  }
  return result;
}

size_t HandleRRLPResponse(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "HandleRRLPResponse");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  uint64_t session_info = gps_find_session_info(*(_DWORD *)(a1 + 20));
  if (session_info)
  {
    uint64_t v5 = session_info;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 73, "HandleRRLPResponse", *(_DWORD *)(a1 + 20));
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 4, 1);
    }
    LOWORD(__s) = 0;
    unsigned int v22 = 0;
    memset_s(&__s, 0x10uLL, 0, 0x10uLL);
    if (HIWORD(*(_DWORD *)a1))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "HandleRRLPResponse", 772, *(_DWORD *)a1);
        LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
      }
    }
    else
    {
      LOWORD(__s) = *(_DWORD *)a1;
    }
    unsigned int v22 = *(unsigned __int8 **)(a1 + 8);
    int v12 = CheckSessionProtocol(*(unsigned __int8 *)(v5 + 4));
    int v13 = *(_DWORD *)(v5 + 8);
    if ((v13 - 1) < 2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol mismatch\n");
LABEL_23:
        LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (v13)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v20);
        goto LABEL_23;
      }
LABEL_24:
      if (v22) {
        free(v22);
      }
      unsigned int v22 = 0;
      goto LABEL_27;
    }
    int v15 = v12;
    PPDU_TraceBuffer((uint64_t)v22, (unsigned __int16)__s);
    if (*(unsigned char *)(a1 + 16)) {
      int v16 = 14;
    }
    else {
      int v16 = 1;
    }
    GNS_PpduEncodedPdu(*(_DWORD *)v5, 3, v15, 1, v16, __s, v22, 1);
    if (v22) {
      free(v22);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "HandleRRLPResponse", 770, *(_DWORD *)(a1 + 20));
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
  }
LABEL_27:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 68, "HandleRRLPResponse");
    return LbsOsaTrace_WriteLog(0x13u, __str, v19, 5, 1);
  }
  return result;
}

uint64_t PPDU_TraceBuffer(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (result && a2) {
    goto LABEL_6;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Either payload is NULL or length is zero\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 69, "PPDU_TraceBuffer", 513);
    size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v5, 0, 1);
  }
  if (a2)
  {
LABEL_6:
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2 - v6;
      if (v7 > 0x13)
      {
        size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 77, "PPDU_TraceBuffer", *(unsigned __int8 *)(v3 + v6), *(unsigned __int8 *)(v3 + v6 + 1), *(unsigned __int8 *)(v3 + v6 + 2), *(unsigned __int8 *)(v3 + v6 + 3), *(unsigned __int8 *)(v3 + v6 + 4), *(unsigned __int8 *)(v3 + v6 + 5), *(unsigned __int8 *)(v3 + v6 + 6), *(unsigned __int8 *)(v3 + v6 + 7), *(unsigned __int8 *)(v3 + v6 + 8), *(unsigned __int8 *)(v3 + v6 + 9), *(unsigned __int8 *)(v3 + v6 + 10),
                  *(unsigned __int8 *)(v3 + v6 + 11),
                  *(unsigned __int8 *)(v3 + v6 + 12),
                  *(unsigned __int8 *)(v3 + v6 + 13),
                  *(unsigned __int8 *)(v3 + v6 + 14),
                  *(unsigned __int8 *)(v3 + v6 + 15),
                  *(unsigned __int8 *)(v3 + v6 + 16),
                  *(unsigned __int8 *)(v3 + v6 + 17),
                  *(unsigned __int8 *)(v3 + v6 + 18),
                  *(unsigned __int8 *)(v3 + v6 + 19));
          size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v13, 3, 1);
        }
        unint64_t v8 = v6;
      }
      else
      {
        unint64_t v8 = a2;
        if (a2 > v6)
        {
          unsigned __int16 v9 = (unsigned __int8 *)(v3 + v6);
          do
          {
            size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v10 = mach_continuous_time();
              unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 77, "PPDU_TraceBuffer", *v9);
              size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v11, 3, 1);
            }
            ++v9;
            --v7;
          }
          while (v7);
          unint64_t v8 = a2;
        }
      }
      unint64_t v6 = v8 + 20;
    }
    while (v8 + 20 < a2);
  }
  return result;
}

size_t HandleWlanCbInit(uint64_t (*a1)(void, void, void))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "HandleWlanCbInit");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (!a1 && LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeRegistering WLAN Cb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 73, "HandleWlanCbInit");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 4, 1);
  }
  g_WlanMeasReqCb = a1;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "HandleWlanCbInit");
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  return result;
}

size_t HandleWlanCapUpdate(int *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v3 = 0;
  __int16 v4 = 256;
  int v1 = *a1;
  if (*a1)
  {
    HIBYTE(v3) = 1;
    if (v1) {
      BYTE2(v3) = 1;
    }
    if ((v1 & 2) != 0) {
      LOBYTE(v3) = 1;
    }
    if (a1[1]) {
      LOBYTE(v4) = 1;
    }
  }
  if (!*((unsigned char *)a1 + 8)) {
    HIBYTE(v4) = 0;
  }
  return SuplLppUpdatePosCap(&v3);
}

size_t HandlePPDUCapUpdate(_DWORD *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *(_DWORD *)uint64_t v2 = 1;
  *(_DWORD *)&v2[1] = *a1;
  SuplLppUpdateCap(v2);
  return SuplRrlpUpdateCap(v2);
}

uint64_t HandlePPDUCapReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    *(_DWORD *)std::string __str = *(_DWORD *)a1;
    char v7 = 3;
    char v6 = *(unsigned char *)(a1 + 9);
    return SuplLppExecuteCapReq((uint64_t)__str);
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pay load type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "PSP", 87, "HandlePPDUCapReq", 770, *(_DWORD *)(a1 + 68));
      return LbsOsaTrace_WriteLog(0x13u, __str, v4, 2, 1);
    }
  }
  return result;
}

size_t HandlePPDUAssistDataReq(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "HandlePPDUAssistDataReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    int __s = -1;
    char v38 = 0;
    memset(v39, 0, sizeof(v39));
    __int16 v40 = -1;
    char v41 = 0;
    memset_s(&__s, 0x30uLL, 0, 0x30uLL);
    int __s = *(_DWORD *)a1;
    char v38 = *(unsigned char *)(a1 + 9);
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      uint64_t v5 = *(unsigned __int8 **)(v4 + 8);
      if (v5)
      {
        int v6 = *v5;
        if (*v5) {
          *(_WORD *)v39 |= 0x40u;
        }
        int v7 = v5[1];
        if (v5[1]) {
          *(_WORD *)v39 |= 0x20u;
        }
        int v8 = v5[2];
        if (v5[2]) {
          *(_WORD *)v39 |= 4u;
        }
        uint64_t v9 = *(void *)(v4 + 16);
        if (v9)
        {
          char v10 = v41 | 1;
          v41 |= 1u;
          if (v5[3])
          {
            if (v6) {
              *(_WORD *)v39 |= 0x40u;
            }
            if (v7) {
              *(_WORD *)v39 |= 0x20u;
            }
            if (v8) {
              *(_WORD *)v39 |= 4u;
            }
            if (*(_DWORD *)v9 == 1)
            {
              if (*(unsigned char *)(v9 + 4)) {
                *(_WORD *)v39 |= 2u;
              }
              if (*(unsigned char *)(v9 + 5)) {
                *(_WORD *)v39 |= 0x100u;
              }
              if (*(unsigned char *)(v9 + 6)) {
                *(_WORD *)v39 |= 1u;
              }
              if (*(unsigned char *)(v9 + 7)) {
                *(_WORD *)v39 |= 8u;
              }
              if (*(unsigned char *)(v9 + 8)) {
                *(_WORD *)v39 |= 0x80u;
              }
            }
            if (*(unsigned char *)(v9 + 18)) {
              v39[4] = *(unsigned char *)(v9 + 18);
            }
            if (*(_WORD *)(v9 + 16)) {
              *(_WORD *)&v39[2] = *(_WORD *)(v9 + 16);
            }
            if (*(unsigned char *)(v9 + 19)) {
              v39[36] = *(unsigned char *)(v9 + 19);
            }
            int v11 = *(unsigned __int8 *)(v9 + 20);
            if ((v11 - 1) <= 0xE)
            {
              unint64_t v12 = 0;
              v39[5] = v11;
              do
              {
                uint64_t v13 = *(void *)(a1 + 72);
                v39[v12 + 6] = *(unsigned char *)(*(void *)(v13 + 16) + v12 + 21);
                unsigned int v14 = *(unsigned __int16 *)(*(void *)(v13 + 16) + 2 * v12 + 86);
                if (v14 > 0xFF)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v15 = mach_continuous_time();
                    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_Iode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 69, "HandlePPDUAssistDataReq", 772, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 72) + 16) + 2 * v12 + 86));
                    LbsOsaTrace_WriteLog(0x13u, __str, v16, 0, 1);
                  }
                }
                else
                {
                  v39[v12 + 21] = v14;
                }
                ++v12;
              }
              while (v12 < v39[5]);
              char v10 = v41 | 1;
            }
            char v41 = v10;
          }
        }
      }
    }
    unsigned __int16 v17 = *(unsigned __int16 **)(a1 + 88);
    if (v17) {
      lpp_t_mm_lpm_status_ind(1, *((_DWORD *)v17 + 1), ((unint64_t)v17[1] << 16) | ((unint64_t)(v17[1] > 0x63uLL) << 32) | *v17);
    }
    SuplLppExecuteAdReq((uint64_t)&__s);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx pay load type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 87, "HandlePPDUAssistDataReq", 770, *(_DWORD *)(a1 + 68));
    LbsOsaTrace_WriteLog(0x13u, __str, v19, 2, 1);
  }
  uint64_t v20 = *(void *)(a1 + 72);
  if (v20)
  {
    unsigned __int16 v21 = *(void **)(v20 + 16);
    if (v21)
    {
      free(v21);
      uint64_t v20 = *(void *)(a1 + 72);
    }
    *(void *)(v20 + 16) = 0;
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v23 = *(void **)(v22 + 24);
    if (v23)
    {
      free(v23);
      uint64_t v22 = *(void *)(a1 + 72);
    }
    *(void *)(v22 + 24) = 0;
    uint64_t v24 = *(void *)(a1 + 72);
    int v25 = *(void **)(v24 + 32);
    if (v25)
    {
      free(v25);
      uint64_t v24 = *(void *)(a1 + 72);
    }
    *(void *)(v24 + 32) = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    uint64_t v27 = *(void **)(v26 + 40);
    if (v27)
    {
      free(v27);
      uint64_t v26 = *(void *)(a1 + 72);
    }
    *(void *)(v26 + 40) = 0;
    uint64_t v28 = *(void *)(a1 + 72);
    long long v29 = *(void **)(v28 + 48);
    if (v29)
    {
      free(v29);
      uint64_t v28 = *(void *)(a1 + 72);
    }
    *(void *)(v28 + 48) = 0;
    uint64_t v30 = *(void *)(a1 + 72);
    char v31 = *(void **)(v30 + 8);
    if (v31)
    {
      free(v31);
      uint64_t v30 = *(void *)(a1 + 72);
    }
    *(void *)(v30 + 8) = 0;
    long long v32 = *(void **)(a1 + 72);
    if (v32) {
      free(v32);
    }
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v33 = *(void **)(a1 + 88);
  if (v33) {
    free(v33);
  }
  *(void *)(a1 + 88) = 0;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v35 = mach_continuous_time();
    unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "PSP", 68, "HandlePPDUAssistDataReq");
    return LbsOsaTrace_WriteLog(0x13u, __str, v36, 5, 1);
  }
  return result;
}

size_t HandleLppWlanMeasReq(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "HandleLppWlanMeasReq");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v7 = 513;
LABEL_14:
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v6, "PSP", 69, "HandleLppWlanMeasReq", v7);
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    goto LABEL_15;
  }
  LOBYTE(__s) = 0;
  memset_s(&__s, 0xCuLL, 0, 0xCuLL);
  int v4 = *(_DWORD *)a1;
  int v13 = *(_DWORD *)a1;
  if (*(unsigned char *)(a1 + 4)) {
    int __s = 1;
  }
  unsigned int v14 = 1000 * *(_DWORD *)(a1 + 8);
  if (!g_WlanMeasReqCb)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v7 = 258;
    goto LABEL_14;
  }
  uint64_t session_info = gps_find_session_info(v4);
  if (session_info)
  {
    *(unsigned char *)(session_info + 5) = 2;
    *(unsigned char *)(session_info + 188) = 1;
  }
  posp_StartTimer(posp_TimerExpiry_Ind, v13, v14, 1);
  g_WlanMeasReqCb(1, 12, &__s);
LABEL_15:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "HandleLppWlanMeasReq");
    return LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  return result;
}

void HandleLppCapsResponse(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
LABEL_11:
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_19:
    LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    return;
  }
  uint64_t session_info = gps_find_session_info(*(_DWORD *)a1);
  if (!session_info)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v16);
    goto LABEL_19;
  }
  uint64_t v3 = session_info;
  LOWORD(__s) = 0;
  unsigned __int16 v19 = 0;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (!HIWORD(v4))
  {
    unsigned int v5 = (unsigned __int16)*(_DWORD *)(a1 + 8);
    LOWORD(__s) = *(_DWORD *)(a1 + 8);
    if ((_WORD)v4) {
      goto LABEL_5;
    }
LABEL_17:
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU Size\n");
    goto LABEL_19;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 69, "HandleLppCapsResponse", 772, *(_DWORD *)(a1 + 8));
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
  }
  unsigned int v5 = (unsigned __int16)__s;
  if (!(_WORD)__s) {
    goto LABEL_17;
  }
LABEL_5:
  unint64_t v6 = (unsigned __int8 *)gnssOsa_Calloc("HandleLppCapsResponse", 582, 1, v5);
  unsigned __int16 v19 = v6;
  if (!v6)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    goto LABEL_11;
  }
  memcpy_s("HandleLppCapsResponse", 586, v6, (unsigned __int16)__s, *(const void **)(a1 + 16), (unsigned __int16)__s);
  int v7 = CheckSessionProtocol(*(unsigned __int8 *)(v3 + 4));
  unsigned int v8 = *(_DWORD *)(v3 + 8);
  if (v8 < 2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_32;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol mismatch\n");
    goto LABEL_31;
  }
  if (v8 == 2)
  {
    int v13 = v7;
    PPDU_TraceBuffer((uint64_t)v19, (unsigned __int16)__s);
    if (*(unsigned char *)(a1 + 4)) {
      int v14 = 14;
    }
    else {
      int v14 = 1;
    }
    GNS_PpduEncodedPdu(*(_DWORD *)v3, 1, v13, 3, v14, __s, v19, *(unsigned char *)(a1 + 24) != 0);
    goto LABEL_32;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v17);
LABEL_31:
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
  }
LABEL_32:
  if (v19) {
    free(v19);
  }
}

void HandleLppAdResponse(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
LABEL_8:
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_11:
    LbsOsaTrace_WriteLog(0x13u, __str, v6, 0, 1);
    return;
  }
  uint64_t session_info = gps_find_session_info(*(_DWORD *)a1);
  if (!session_info)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v16);
    goto LABEL_11;
  }
  uint64_t v3 = session_info;
  LOWORD(__s) = 0;
  unsigned __int16 v19 = 0;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (!HIWORD(v4))
  {
    unsigned int v5 = (unsigned __int16)*(_DWORD *)(a1 + 8);
    LOWORD(__s) = *(_DWORD *)(a1 + 8);
    if (!(_WORD)v4) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "HandleLppAdResponse", 772, *(_DWORD *)(a1 + 8));
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
  }
  unsigned int v5 = (unsigned __int16)__s;
  if ((_WORD)__s)
  {
LABEL_15:
    unsigned __int16 v9 = (unsigned __int8 *)gnssOsa_Calloc("HandleLppAdResponse", 676, 1, v5);
    unsigned __int16 v19 = v9;
    if (v9)
    {
      memcpy_s("HandleLppAdResponse", 680, v9, (unsigned __int16)__s, *(const void **)(a1 + 16), (unsigned __int16)__s);
      goto LABEL_17;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    goto LABEL_8;
  }
LABEL_17:
  int v10 = CheckSessionProtocol(*(unsigned __int8 *)(v3 + 4));
  unsigned int v11 = *(_DWORD *)(v3 + 8);
  if (v11 < 2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol mismatch\n");
    goto LABEL_30;
  }
  if (v11 == 2)
  {
    int v13 = v10;
    PPDU_TraceBuffer((uint64_t)v19, (unsigned __int16)__s);
    if (*(unsigned char *)(a1 + 24)) {
      int v14 = 14;
    }
    else {
      int v14 = 1;
    }
    GNS_PpduEncodedPdu(*(_DWORD *)v3, 2, v13, 3, v14, __s, v19, *(unsigned char *)(a1 + 25) != 0);
    goto LABEL_31;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v17);
LABEL_30:
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
  }
LABEL_31:
  if (v19) {
    free(v19);
  }
}

void HandleLppPosResponse(int *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
LABEL_8:
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_11:
    LbsOsaTrace_WriteLog(0x13u, __str, v6, 0, 1);
    return;
  }
  uint64_t session_info = gps_find_session_info(a1[5]);
  if (!session_info)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v16);
    goto LABEL_11;
  }
  uint64_t v3 = session_info;
  LOWORD(__s) = 0;
  unsigned __int16 v19 = 0;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  unsigned int v4 = *a1;
  if (!HIWORD(*a1))
  {
    unsigned int v5 = (unsigned __int16)*a1;
    LOWORD(__s) = *a1;
    if (!(_WORD)v4) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "HandleLppPosResponse", 772, *a1);
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
  }
  unsigned int v5 = (unsigned __int16)__s;
  if ((_WORD)__s)
  {
LABEL_15:
    unsigned __int16 v9 = (unsigned __int8 *)gnssOsa_Calloc("HandleLppPosResponse", 762, 1, v5);
    unsigned __int16 v19 = v9;
    if (v9)
    {
      memcpy_s("HandleLppPosResponse", 766, v9, (unsigned __int16)__s, *((const void **)a1 + 1), (unsigned __int16)__s);
      goto LABEL_17;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    goto LABEL_8;
  }
LABEL_17:
  int v10 = CheckSessionProtocol(*(unsigned __int8 *)(v3 + 4));
  unsigned int v11 = *(_DWORD *)(v3 + 8);
  if (v11 < 2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol mismatch\n");
    goto LABEL_30;
  }
  if (v11 == 2)
  {
    int v13 = v10;
    PPDU_TraceBuffer((uint64_t)v19, (unsigned __int16)__s);
    if (*((unsigned char *)a1 + 17)) {
      int v14 = 14;
    }
    else {
      int v14 = 1;
    }
    GNS_PpduEncodedPdu(*(_DWORD *)v3, 3, v13, 3, v14, __s, v19, *((unsigned char *)a1 + 16) != 0);
    goto LABEL_31;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v17);
LABEL_30:
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
  }
LABEL_31:
  if (v19) {
    free(v19);
  }
}

uint64_t Encode_Nmea_Id(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
    case 3:
    case 5:
    case 6:
      return result;
    case 2:
      size_t result = (result + 64);
      break;
    case 4:
      if ((int)result >= 152) {
        size_t result = 0;
      }
      else {
        size_t result = (result - 87);
      }
      break;
    default:
      EvCrt_Illegal_Default("Encode_Nmea_Id", 0x5Du);
LABEL_4:
      size_t result = 0;
      break;
  }
  return result;
}

BOOL Is_GAL_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48)
      && *(unsigned __int16 *)(a1 + 50) == *(unsigned __int16 *)(a2 + 50)
      && *(unsigned __int16 *)(a1 + 52) == *(unsigned __int16 *)(a2 + 52)
      && *(unsigned __int16 *)(a1 + 54) == *(unsigned __int16 *)(a2 + 54)
      && *(unsigned __int16 *)(a1 + 56) == *(unsigned __int16 *)(a2 + 56)
      && *(unsigned __int16 *)(a1 + 58) == *(unsigned __int16 *)(a2 + 58)
      && *(unsigned __int16 *)(a1 + 60) == *(unsigned __int16 *)(a2 + 60)
      && *(unsigned __int16 *)(a1 + 62) == *(unsigned __int16 *)(a2 + 62)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15)
      && *(unsigned __int16 *)(a1 + 74) == *(unsigned __int16 *)(a2 + 74)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(unsigned __int16 *)(a1 + 72) == *(unsigned __int16 *)(a2 + 72)
      && *(unsigned __int16 *)(a1 + 76) == *(unsigned __int16 *)(a2 + 76)
      && *(unsigned __int16 *)(a1 + 78) == *(unsigned __int16 *)(a2 + 78)
      && *(unsigned __int8 *)(a1 + 82) == *(unsigned __int8 *)(a2 + 82)
      && *(unsigned __int8 *)(a1 + 83) == *(unsigned __int8 *)(a2 + 83)
      && *(unsigned __int8 *)(a1 + 85) == *(unsigned __int8 *)(a2 + 85)
      && *(unsigned __int8 *)(a1 + 86) == *(unsigned __int8 *)(a2 + 86)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

size_t AgpsFsmHandler(const void **a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "AgpsFsmHandler");
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PId,%x,Cntxt,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 73, "AgpsFsmHandler", *((unsigned __int8 *)a1 + 4), a1[12]);
    LbsOsaTrace_WriteLog(0xEu, __str, v5, 4, 1);
  }
  do
  {
    while (1)
    {
      while (1)
      {
        unsigned __int16 v6 = AgpsDeQueueFsmMsg((uint64_t)a1);
        if (v6) {
          break;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 69, "AgpsFsmHandler", 517);
          LbsOsaTrace_WriteLog(0xEu, __str, v13, 0, 1);
        }
      }
      uint64_t v7 = v6;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 73, "AgpsFsmHandler", *((_DWORD *)v7 + 1));
        LbsOsaTrace_WriteLog(0xEu, __str, v9, 4, 1);
      }
      if (!v7[8])
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0)) {
          goto LABEL_24;
        }
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 73, "AgpsFsmHandler", *((_DWORD *)v7 + 1));
        int v16 = 4;
        goto LABEL_23;
      }
      int v10 = a1[12];
      if (v10) {
        break;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
        goto LABEL_24;
      }
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 69, "AgpsFsmHandler", 520);
      int v16 = 0;
LABEL_23:
      LbsOsaTrace_WriteLog(0xEu, __str, v15, v16, 1);
LABEL_24:
      free(v7);
    }
    while (1)
    {
      int v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 == -2)
      {
        int v10 = (void *)v10[2];
        if (!v10) {
          goto LABEL_36;
        }
        int v11 = *(_DWORD *)v10;
      }
      else if (v11 == -1)
      {
        goto LABEL_28;
      }
      if (*((_DWORD *)v7 + 1) == v11) {
        break;
      }
      v10 += 3;
    }
    if (v11 == -3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Shutdown ThreadId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 73, "AgpsFsmHandler", *((unsigned __int8 *)a1 + 4));
        LOBYTE(v10) = 1;
        LbsOsaTrace_WriteLog(0xEu, __str, v19, 4, 1);
        goto LABEL_36;
      }
LABEL_34:
      LOBYTE(v10) = 1;
      goto LABEL_36;
    }
LABEL_28:
    uint64_t v20 = (void *)v10[2];
    uint64_t v21 = (void *)((uint64_t (*)(unsigned __int8 *))v10[1])(v7);
    if (v20 == &g_UnknStatePtr)
    {
      if (v21 == &g_UnknStatePtr) {
        goto LABEL_34;
      }
      if (v21)
      {
        LOBYTE(v10) = 0;
        a1[12] = v21;
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v22 = (const void *)v10[2];
      if (v22)
      {
        LOBYTE(v10) = 0;
        a1[12] = v22;
        goto LABEL_36;
      }
    }
    LOBYTE(v10) = 0;
LABEL_36:
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Completed Event,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 68, "AgpsFsmHandler", *((_DWORD *)v7 + 1));
      LbsOsaTrace_WriteLog(0xEu, __str, v24, 5, 1);
    }
    free(v7);
  }
  while ((v10 & 1) == 0);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "OSA", 73, "AgpsFsmHandler");
    return LbsOsaTrace_WriteLog(0xEu, __str, v27, 4, 1);
  }
  return result;
}

uint64_t AgpsFsmTimerRoutine(void *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("AgpsFsmSendTimeout", 722, &g_TimerCriticSection))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v3, "OSA", 69, "AgpsFsmSendTimeout", 1550);
    return LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
  }
  if (a1)
  {
    uint64_t v5 = *a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Id,%llx,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 73, "AgpsFsmSendTimeout", *a1, *((_DWORD *)a1 + 2));
      LbsOsaTrace_WriteLog(0xEu, __str, v7, 4, 1);
    }
    if (*((_DWORD *)a1 + 2) != -1)
    {
      uint64_t v8 = gnssOsa_Calloc("AgpsFsmSendTimeout", 737, 1, 0xCuLL);
      if (!v8)
      {
        int v11 = 741;
        goto LABEL_14;
      }
      AgpsSendFsmMsg(BYTE2(v5), BYTE2(v5), v5, v8);
      if ((gnssOsa_StopTimer("AgpsFsmSendTimeout", 0x2EFu, *((_DWORD *)a1 + 2)) & 1) == 0
        && LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Id,%llx,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 87, "AgpsFsmSendTimeout", 1545, *a1, *((_DWORD *)a1 + 2));
        LbsOsaTrace_WriteLog(0xEu, __str, v10, 2, 1);
      }
      *((unsigned char *)a1 + 12) = 0;
      *a1 = 0;
      *((_DWORD *)a1 + 2) = -1;
    }
  }
  int v11 = 758;
LABEL_14:
  uint64_t result = gnssOsa_MacExitCriticalSection("AgpsFsmSendTimeout", v11, &g_TimerCriticSection);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v12, "OSA", 69, "AgpsFsmSendTimeout", 1551);
      return LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
    }
  }
  return result;
}

BOOL AgpsFsmExecDeInitCallbacks(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = *(void (**)(void))(a1 + 144);
  if (v1)
  {
    v1();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CB missing PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 87, "AgpsFsmExecDeInitCallbacks", 515, *(unsigned __int8 *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xEu, __str, v4, 2, 1);
  }
  return v1 != 0;
}

uint64_t AgpsDeinitFsm(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)gnssOsa_Calloc("AgpsDeinitFsm", 287, 1, 0xCuLL);
  if (result)
  {
    *(_DWORD *)(result + 4) = -3;
    *(unsigned char *)(result + 8) = 1;
    AgpsEnQueueFsmMsg(result, a1);
    if (pthread_join(*(pthread_t *)(a1 + 104), 0))
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "AgpsDeinitFsm", 1555, *(unsigned __int8 *)(a1 + 4));
        LbsOsaTrace_WriteLog(0xEu, __str, v5, 0, 1);
        return 0;
      }
    }
    else
    {
      *(void *)(a1 + 104) = 0;
      AgpsDeinitMsgQueue(a1);
      return 1;
    }
  }
  return result;
}

uint64_t AgpsSpawnFsm(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  pg_AgpsFsmTable = a1;
  g_NumProcess = a2;
  if (!gnssOsa_Init()) {
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Starts\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "AgpsSpawnFsm");
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 4, 1);
  }
  if (gnssOsa_InitCriticalSection("AgpsSpawnFsm", 333, &g_TimerCriticSection))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (gnssOsa_MacEnterCriticalSection("AgpsFsmInitTimer", 67, &g_TimerCriticSection))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != 20; i += 2)
  {
    unsigned __int16 v5 = &vg_OsaTimers[i];
    *unsigned __int16 v5 = 0;
    *((_DWORD *)v5 + 2) = -1;
    *((unsigned char *)v5 + 12) = 0;
  }
  if (gnssOsa_MacExitCriticalSection("AgpsFsmInitTimer", 78, &g_TimerCriticSection))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
      goto LABEL_16;
    }
LABEL_14:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  uint64_t v11 = pg_AgpsFsmTable;
  if (!*(unsigned char *)(pg_AgpsFsmTable + 4))
  {
LABEL_36:
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 73, "AgpsSpawnFsm");
    uint64_t v7 = 1;
    LbsOsaTrace_WriteLog(0xEu, __str, v24, 4, 1);
    return v7;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  while (1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PID,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 73, "AgpsInitFsm", *(unsigned __int8 *)(v11 + 168 * v12 + 4));
      LbsOsaTrace_WriteLog(0xEu, __str, v15, 4, 1);
    }
    AgpsInitMsgQueue(v11 + 168 * v12);
    if (!*(void *)(v11 + 168 * v12 + 120)) {
      break;
    }
    if (!gnssOsa_CreateThread("AgpsInitFsm", 239, (_opaque_pthread_t **)(v11 + 168 * v12 + 104), *(_DWORD *)(v11 + 168 * v12 + 128), (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v11 + 168 * v12), 0, 0, *(_DWORD *)(v11 + 168 * v12 + 112)))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        *(void *)uint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx With Stack PID,%x\n", *(void *)v28);
LABEL_47:
        LbsOsaTrace_WriteLog(0xEu, __str, v26, 0, 1);
        goto LABEL_48;
      }
      goto LABEL_48;
    }
LABEL_31:
    ++v13;
    uint64_t v11 = pg_AgpsFsmTable;
    uint64_t v12 = v13;
    if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v13 + 4))
    {
      if (!*(unsigned char *)(pg_AgpsFsmTable + 4)) {
        goto LABEL_36;
      }
      uint64_t v20 = 0;
      int v21 = 0;
      while (1)
      {
        uint64_t v22 = *(void (**)(void))(v11 + 168 * v20 + 136);
        if (!v22) {
          break;
        }
        v22();
        ++v21;
        uint64_t v11 = pg_AgpsFsmTable;
        uint64_t v20 = v21;
        if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v21 + 4)) {
          goto LABEL_36;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        *(void *)uint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Init CB not regd PId,%x\n", *(void *)v29);
        goto LABEL_15;
      }
      goto LABEL_16;
    }
  }
  uint64_t v16 = v11 + 168 * v12;
  unsigned int v17 = *(_DWORD *)(v16 + 128);
  uint64_t v18 = (_opaque_pthread_t **)(v16 + 104);
  int v19 = *(_DWORD *)(v16 + 112);
  if (!v17)
  {
    if (!gnssOsa_CreateThread("AgpsInitFsm", 228, v18, 0, (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v11 + 168 * v12), 0, 0, v19))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
        goto LABEL_48;
      }
      bzero(__str, 0x410uLL);
      *(void *)char v31 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Without Stack PID,%x\n", *(void *)v31);
      goto LABEL_47;
    }
    goto LABEL_31;
  }
  if (gnssOsa_CreateThread("AgpsInitFsm", 250, v18, v17, (void *(__cdecl *)(void *))AgpsFsmHandler, (void *)(v11 + 168 * v12), 0, 0, v19))
  {
    goto LABEL_31;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    *(void *)uint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx With Prio PID,%x\n", *(void *)v30);
    goto LABEL_47;
  }
LABEL_48:
  AgpsDeinitMsgQueue(v11 + 168 * v12);
  if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
    goto LABEL_16;
  }
  bzero(__str, 0x410uLL);
  mach_continuous_time();
  unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Failed PId,%x\n");
LABEL_15:
  LbsOsaTrace_WriteLog(0xEu, __str, v6, 0, 1);
LABEL_16:
  uint64_t v7 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 73, "AgpsSpawnFsm");
    LbsOsaTrace_WriteLog(0xEu, __str, v9, 4, 1);
    return 0;
  }
  return v7;
}

uint64_t AgpsStopAllActiveTimers(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (gnssOsa_MacEnterCriticalSection("AgpsStopAllActiveTimers", 373, &g_TimerCriticSection))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v1, "OSA", 69, "AgpsStopAllActiveTimers", 1550);
    return LbsOsaTrace_WriteLog(0xEu, __str, v2, 0, 1);
  }
  for (uint64_t i = 0; i != 20; i += 2)
  {
    uint64_t v4 = &vg_OsaTimers[i];
    if (BYTE4(vg_OsaTimers[i + 1]) && *((_DWORD *)v4 + 2) != -1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Id,%llx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 73, "AgpsStopAllActiveTimers", vg_OsaTimers[i]);
        LbsOsaTrace_WriteLog(0xEu, __str, v6, 4, 1);
      }
      if ((gnssOsa_StopTimer("AgpsStopAllActiveTimers", 0x180u, *((_DWORD *)v4 + 2)) & 1) == 0
        && LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 87, "AgpsStopAllActiveTimers", 1545, *((_DWORD *)v4 + 2));
        LbsOsaTrace_WriteLog(0xEu, __str, v8, 2, 1);
      }
      *((unsigned char *)v4 + 12) = 0;
      vg_OsaTimers[i] = 0;
      *((_DWORD *)v4 + 2) = -1;
    }
  }
  uint64_t result = gnssOsa_MacExitCriticalSection("AgpsStopAllActiveTimers", 392, &g_TimerCriticSection);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v9, "OSA", 69, "AgpsStopAllActiveTimers", 1551);
      return LbsOsaTrace_WriteLog(0xEu, __str, v2, 0, 1);
    }
  }
  return result;
}

uint64_t AgpsShutdownAllFsm(void)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v0 = g_NumProcess;
  g_NumProcess = 0;
  if (!v0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 73, "AgpsShutdownAllFsm");
      uint64_t v5 = 1;
      LbsOsaTrace_WriteLog(0xEu, __str, v9, 4, 1);
      return v5;
    }
    return 1;
  }
  if ((int)v0 >= 1)
  {
    unint64_t v1 = v0 + 1;
    do
    {
      unsigned int v2 = v1 - 2;
      if (*(unsigned char *)(pg_AgpsFsmTable + 168 * (v1 - 2) + 4))
      {
        if (AgpsFsmExecDeInitCallbacks(pg_AgpsFsmTable + 168 * v2))
        {
          AgpsDeinitFsm(pg_AgpsFsmTable + 168 * v2);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v3 = mach_continuous_time();
          unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Failed PId,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsShutdownAllFsm", *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v2 + 4));
          LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
        }
      }
      --v1;
    }
    while (v1 > 1);
  }
  AgpsStopAllActiveTimers();
  if (!gnssOsa_MacDeinitCriticalSection("AgpsShutdownAllFsm", 429, &g_TimerCriticSection))
  {
    gnssOsa_flushNv();
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 73, "AgpsShutdownAllFsm");
      LbsOsaTrace_WriteLog(0xEu, __str, v11, 4, 1);
    }
    gnssOsa_Deinit();
    return 1;
  }
  uint64_t v5 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "AgpsShutdownAllFsm", 1553);
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 0, 1);
    return 0;
  }
  return v5;
}

void AgpsSendFsmMsg(int a1, int a2, int a3, unsigned char *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  a4[1] = a2;
  *a4 = a1;
  *((_DWORD *)a4 + 1) = a3;
  a4[8] = 1;
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Src,%x,Dest,%x,Op,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 68, "AgpsSendFsmMsg", a1, a2, a3);
    LbsOsaTrace_WriteLog(0xEu, __str, v9, 5, 1);
  }
  int v10 = 0;
  do
  {
    unsigned int v11 = v10;
    int v12 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v10++ + 4);
    if (v12) {
      BOOL v13 = v12 == a2;
    }
    else {
      BOOL v13 = 1;
    }
  }
  while (!v13);
  if (!v12)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src,%x,Dest,%x,Op,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "OSA", 69, "AgpsSendFsmMsg", 515, a1, a2, a3);
      LbsOsaTrace_WriteLog(0xEu, __str, v28, 0, 1);
    }
    snprintf(v31, 0x400uLL, "ASSERT: %s %d FSM : Invalid ProcessId,Src,%x,Dest,%x,Op,%x", "AgpsSendFsmMsg", 511, a1, a2, a3);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "OSA", 69, "AgpsSendFsmMsg", v31);
      LbsOsaTrace_WriteLog(0xEu, __str, v30, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("AgpsSendFsmMsg", "agpsfsm.cpp", 512, "false && \"AgpsSendFsmMsg Invalid Process Id 0\"");
  }
  if (*(void *)(pg_AgpsFsmTable + 168 * v11 + 104))
  {
    uint64_t v14 = (_DWORD *)(pg_AgpsFsmTable + 168 * v11);
    if (*v14 != 174 || *(_DWORD *)(pg_AgpsFsmTable + 168 * v11 + 160) != 22)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Guard bytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 69, "AgpsSendFsmMsg", 770);
        LbsOsaTrace_WriteLog(0xEu, __str, v24, 0, 1);
      }
      snprintf(v31, 0x400uLL, "ASSERT: %s %d FSM : Guard Bytes Overwritten,Src,%x,Dest,%x,Op,%x", "AgpsSendFsmMsg", 476, a1, a2, a3);
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "OSA", 69, "AgpsSendFsmMsg", v31);
        LbsOsaTrace_WriteLog(0xEu, __str, v26, 0, 1);
      }
      gnssOsa_FlushLog();
      __assert_rtn("AgpsSendFsmMsg", "agpsfsm.cpp", 477, "false && \"AgpsSendFsmMsg Guard Bytes Overwritten\"");
    }
    AgpsEnQueueFsmMsg((uint64_t)a4, (uint64_t)v14);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src,%x,Dest,%x,Op,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 73, "AgpsSendFsmMsg", 521, a1, a2, a3);
      LbsOsaTrace_WriteLog(0xEu, __str, v16, 4, 1);
    }
    int v17 = 0;
    do
    {
      unsigned int v18 = v17;
      int v19 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v17++ + 4);
      if (v19) {
        BOOL v20 = v19 == a1;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (!v20);
    int v21 = *(void (**)(unsigned char *))(pg_AgpsFsmTable + 168 * v18 + 152);
    if (v19) {
      BOOL v22 = v21 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22) {
      v21(a4);
    }
    free(a4);
  }
}

pthread_t AgpsFsmMarkTimerExpMsgInvalid(int a1)
{
  pthread_t result = pthread_self();
  uint64_t v3 = pg_AgpsFsmTable;
  int v4 = *(unsigned __int8 *)(pg_AgpsFsmTable + 4);
  if (*(unsigned char *)(pg_AgpsFsmTable + 4))
  {
    int v5 = *(unsigned __int8 *)(pg_AgpsFsmTable + 4);
    if (*(pthread_t *)(pg_AgpsFsmTable + 104) != result)
    {
      unsigned __int8 v6 = 0;
      do
        int v5 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * ++v6 + 4);
      while (*(unsigned char *)(pg_AgpsFsmTable + 168 * v6 + 4)
           && *(pthread_t *)(pg_AgpsFsmTable + 168 * v6 + 104) != result);
    }
    if (g_NumProcess >= 1)
    {
      unint64_t v7 = 1;
      while (v4 != v5 || !*(void *)(v3 + 104))
      {
        if (v7 < g_NumProcess)
        {
          int v4 = *(unsigned __int8 *)(v3 + 172);
          v3 += 168;
          ++v7;
          if (v4) {
            continue;
          }
        }
        return result;
      }
      return (pthread_t)gnssOsa_MarkFsmMsgInvalid(a1, v3);
    }
  }
  return result;
}

uint64_t AgpsFsmStartTimer(unsigned int a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!gnssOsa_MacEnterCriticalSection("AgpsFsmStartTimer", 576, &g_TimerCriticSection))
  {
    for (uint64_t i = 0; i != 20; i += 2)
    {
      if (vg_OsaTimers[i] == a1 && BYTE4(vg_OsaTimers[i + 1]))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Already started Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 87, "AgpsFsmStartTimer", 1544, a1);
          LbsOsaTrace_WriteLog(0xEu, __str, v10, 2, 1);
        }
        if (!gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 589, &g_TimerCriticSection)) {
          return 5;
        }
        goto LABEL_24;
      }
    }
    AgpsFsmMarkTimerExpMsgInvalid(a1);
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = &vg_OsaTimers[v7];
      if (!BYTE4(vg_OsaTimers[v7 + 1])) {
        break;
      }
      v7 += 2;
      if (v7 == 20)
      {
        if (!gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 625, &g_TimerCriticSection))
        {
          snprintf(v21, 0x400uLL, "ASSERT: %s %d TMC : Max timer count reached", "AgpsFsmStartTimer", 634);
          if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v19 = mach_continuous_time();
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "OSA", 69, "AgpsFsmStartTimer", v21);
            LbsOsaTrace_WriteLog(0xEu, __str, v20, 0, 1);
          }
          gnssOsa_FlushLog();
          __assert_rtn("AgpsFsmStartTimer", "agpsfsm.cpp", 635, "false && \"Max timer count reached\"");
        }
        goto LABEL_24;
      }
    }
    *uint64_t v8 = a1;
    int v12 = v8 + 1;
    if (gnssOsa_StartTimer("AgpsFsmStartTimer", 610, (unsigned int *)v8 + 2, (void (*)(void *))AgpsFsmTimerRoutine, v8, a2))
    {
      *((unsigned char *)v8 + 12) = 1;
      uint64_t v11 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Id,%x,Handle,%x,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 73, "AgpsFsmStartTimer", a1, *v12, a2);
        LbsOsaTrace_WriteLog(0xEu, __str, v14, 4, 1);
        uint64_t v11 = 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Id,%x,DueTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 87, "AgpsFsmStartTimer", 1544, a1, a2);
        LbsOsaTrace_WriteLog(0xEu, __str, v16, 2, 1);
      }
      uint64_t v11 = 3;
    }
    if (!gnssOsa_MacExitCriticalSection("AgpsFsmStartTimer", 625, &g_TimerCriticSection)) {
      return v11;
    }
LABEL_24:
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
      return 2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 1551;
    goto LABEL_26;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 1550;
LABEL_26:
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v4, "OSA", 69, "AgpsFsmStartTimer", v5);
    LbsOsaTrace_WriteLog(0xEu, __str, v17, 0, 1);
  }
  return 2;
}

uint64_t AgpsFsmStopTimer(int a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 68, "AgpsFsmStopTimer", a1);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 5, 1);
  }
  if (!gnssOsa_MacEnterCriticalSection("AgpsFsmStopTimer", 650, &g_TimerCriticSection))
  {
    uint64_t v6 = 0;
    while (1)
    {
      if (vg_OsaTimers[v6] == a1)
      {
        if (BYTE4(vg_OsaTimers[v6 + 1]))
        {
          int v7 = vg_OsaTimers[v6 + 1];
          if (v7 != -1) {
            break;
          }
        }
      }
      v6 += 2;
      if (v6 == 20)
      {
        if (!gnssOsa_MacExitCriticalSection("AgpsFsmStopTimer", 677, &g_TimerCriticSection))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v8 = mach_continuous_time();
            unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Not Started or already Expired Id,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 68, "AgpsFsmStopTimer", 1545, a1);
            LbsOsaTrace_WriteLog(0xEu, __str, v9, 5, 1);
          }
          AgpsFsmMarkTimerExpMsgInvalid(a1);
          return 4;
        }
        goto LABEL_22;
      }
    }
    uint64_t v11 = &vg_OsaTimers[v6];
    if (gnssOsa_StopTimer("AgpsFsmStopTimer", 0x296u, v7))
    {
      uint64_t v10 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Id,%x,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 73, "AgpsFsmStopTimer", a1, *((_DWORD *)v11 + 2));
        LbsOsaTrace_WriteLog(0xEu, __str, v13, 4, 1);
        uint64_t v10 = 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Id,%x,Handle,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 87, "AgpsFsmStopTimer", 1545, a1, *((_DWORD *)v11 + 2));
        LbsOsaTrace_WriteLog(0xEu, __str, v15, 2, 1);
      }
      uint64_t v10 = 7;
    }
    *((unsigned char *)v11 + 12) = 0;
    *uint64_t v11 = 0;
    *((_DWORD *)v11 + 2) = -1;
    if (!gnssOsa_MacExitCriticalSection("AgpsFsmStopTimer", 677, &g_TimerCriticSection)) {
      return v10;
    }
LABEL_22:
    if (!LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0)) {
      return 2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 1551;
    goto LABEL_24;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 1550;
LABEL_24:
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v4, "OSA", 69, "AgpsFsmStopTimer", v5);
    LbsOsaTrace_WriteLog(0xEu, __str, v16, 0, 1);
  }
  return 2;
}

uint64_t ud2var(uint64_t result, unsigned int a2, int a3, unsigned int a4, double *a5)
{
  uint64_t v5 = result - 8;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = ((a3 + 1) * a3) >> 1;
  *a5 = *(double *)(result - 8 + 8 * v7);
  if (a3 + 1 <= a2)
  {
    unsigned int v8 = a3 + v7;
    int v9 = 1;
    do
    {
      v7 += v6;
      double v10 = *(double *)(v5 + 8 * v7);
      unsigned int v11 = v9 + 1;
      unsigned int v12 = a4;
      if (v9 + 1 <= a4)
      {
        a5[v11 - 1] = v10;
        unsigned int v12 = v9;
      }
      if (v12)
      {
        if (v12 + 1 > 2) {
          uint64_t v13 = v12 + 1;
        }
        else {
          uint64_t v13 = 2;
        }
        uint64_t v14 = v13 - 1;
        unsigned int v15 = v8;
        unsigned __int16 v16 = a5;
        do
        {
          *unsigned __int16 v16 = *v16 + v10 * *(double *)(v5 + 8 * v15) * *(double *)(v5 + 8 * v15);
          ++v16;
          ++v15;
          --v14;
        }
        while (v14);
      }
      v8 += v6++;
      int v9 = v11;
    }
    while (v6 <= a2);
  }
  return result;
}

double *GLON_State_Update_Init(double *result, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 60) && *(unsigned char *)(a2 + 64))
  {
    *((_WORD *)result + 152) = 0;
    GLON_Immediate_Updates((uint64_t)result, a2, a3, a4);
    return GLON_Leap_Second_Updates((double *)a2, a3, a4);
  }
  return result;
}

void GLON_Immediate_Updates(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  __int16 v5 = *(_WORD *)(a2 + 16);
  double v6 = *(double *)(a2 + 24) + 7.0;
  if (v6 <= 0.0) {
    double v7 = -0.5;
  }
  else {
    double v7 = 0.5;
  }
  double v8 = v6 + v7;
  if (v8 >= -2147483650.0) {
    int v9 = (int)v8;
  }
  else {
    int v9 = 0x80000000;
  }
  if (v8 <= 2147483650.0) {
    int v10 = v9;
  }
  else {
    int v10 = 0x7FFFFFFF;
  }
  double v11 = *(double *)(a2 + 72) + 7.0;
  if (v11 <= 0.0) {
    double v12 = -0.5;
  }
  else {
    double v12 = 0.5;
  }
  double v13 = v11 + v12;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0) {
      int v14 = (int)v13;
    }
    else {
      int v14 = 0x80000000;
    }
  }
  else
  {
    int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = 0;
  if (v14 <= 86399) {
    int v16 = v14;
  }
  else {
    int v16 = v14 - 86400;
  }
  if (v14 <= 86399) {
    __int16 v17 = *(_WORD *)(a2 + 68);
  }
  else {
    __int16 v17 = *(_WORD *)(a2 + 68) + 1;
  }
  __int16 v40 = v17;
  __int16 v41 = *(_WORD *)(a2 + 66);
  if (v10 <= 604799) {
    int v18 = v10;
  }
  else {
    int v18 = v10 - 604800;
  }
  if (v10 > 604799) {
    ++v5;
  }
  __int16 v39 = v5;
  int v19 = v5;
  unsigned __int16 v20 = (unsigned __int16 *)(a1 + 304);
  uint64_t v21 = a4 + 6144;
  uint64_t v38 = a4 + 28608;
  uint64_t v22 = 15360;
  uint64_t v23 = 15352;
  uint64_t v24 = 12760;
  uint64_t v25 = 1403;
  int v42 = v5;
  uint64_t v43 = (unsigned __int16 *)(a1 + 304);
  int v37 = v18;
  do
  {
    if (*(unsigned char *)(a3[1401] + v15) && *(unsigned char *)(a3[2035] + v15) && *(unsigned char *)(a3[2039] + v15)) {
      goto LABEL_69;
    }
    int v26 = v18 - *(_DWORD *)(v21 + 160) + 604800 * (v19 - *(__int16 *)(v21 + 164));
    if (v26 >= 0) {
      unsigned int v27 = v18 - *(_DWORD *)(v21 + 160) + 604800 * (v19 - *(__int16 *)(v21 + 164));
    }
    else {
      unsigned int v27 = -v26;
    }
    int v28 = *(_DWORD *)(v21 + 184);
    uint64_t v29 = a3[2034];
    int v30 = *(unsigned __int8 *)(v29 + v15);
    BOOL v31 = *(unsigned char *)(v29 + v15) != 0;
    if (v28 == 2)
    {
      if (*(unsigned char *)(a3[2036] + v15)) {
        BOOL v34 = v27 > 0xC8;
      }
      else {
        BOOL v34 = 0;
      }
      BOOL v32 = v34;
      if (!*(unsigned char *)(a3[1401] + v15)) {
        goto LABEL_69;
      }
    }
    else if (v28 == 1)
    {
      BOOL v32 = 0;
      if (v30) {
        BOOL v33 = v27 > 7;
      }
      else {
        BOOL v33 = 0;
      }
      BOOL v31 = v33;
      if (!*(unsigned char *)(a3[1401] + v15)) {
        goto LABEL_69;
      }
    }
    else if (v28)
    {
      BOOL v32 = 0;
      if (!*(unsigned char *)(a3[1401] + v15)) {
        goto LABEL_69;
      }
    }
    else
    {
      BOOL v32 = *(unsigned char *)(a3[2036] + v15) != 0;
      if (!*(unsigned char *)(a3[1401] + v15)) {
        goto LABEL_69;
      }
    }
    if (v31)
    {
      if ((__int16)*v20 > 299)
      {
        EvLog_nd("GLON_StUd:  Delay ImmUd ", 2, (uint64_t)a3, v15 + 33, *v20);
      }
      else
      {
        uint64_t v45 = 0;
        *(void *)long long v46 = 0;
        *(void *)&v46[5] = 0;
        memset(&v46[16], 0, 64);
        long long v47 = 0u;
        long long v48 = 0u;
        uint64_t v49 = 0;
        memset(v44, 0, 62);
        GLON_EphBin2Int((uint64_t)&a3[v25], (uint64_t)v44, (int32x4_t)0);
        GLON_EphInt2Real((uint64_t)v44, (uint64_t)&v45);
        GLON_Calc_State_Table_Eph(v41, v40, v16, (uint64_t)&v45, v21, v43);
        if (*(unsigned char *)(a3[2035] + v15)
          && (GLON_Cross_Check_SVRS_vs_EE(v41, v40, v16, v21, (uint64_t)a3 + v24) & 1) == 0)
        {
          *(unsigned char *)(a3[2041] + v15) = 1;
          *(_DWORD *)(v21 + 184) = 0;
          *(unsigned char *)(a3[2034] + v15) = 0;
          *(unsigned char *)(a3[2033] + v15) = 1;
          int v18 = v37;
        }
        else
        {
          *(_DWORD *)(v21 + 160) = v37;
          *(_WORD *)(v21 + 164) = v39;
          *(unsigned char *)(v38 + v15) = 0;
          int v18 = v37;
        }
      }
    }
    else
    {
      if (!v32) {
        goto LABEL_69;
      }
      *(_DWORD *)long long v46 = 0;
      uint64_t v45 = 0;
      memset(&v46[8], 0, 67);
      v44[0] = 0uLL;
      *(void *)((char *)&v44[1] + 5) = 0;
      *(void *)&v44[1] = 0;
      *(void *)((char *)&v44[1] + 14) = 0;
      BYTE6(v44[2]) = 0;
      GLON_AlmBin2Int((uint64_t)a3 + v23, (uint64_t)v44);
      uint64_t v45 = *(void *)&v44[0];
      v35.i64[0] = SHIDWORD(v44[0]);
      v35.i64[1] = SLODWORD(v44[1]);
      *(void *)&v36.f64[0] = *(_OWORD *)&vcvtq_f64_s64(v35);
      v35.i64[0] = HIDWORD(v44[0]);
      v35.i64[1] = LODWORD(v44[1]);
      v36.f64[1] = vcvtq_f64_u64(*(uint64x2_t *)&v35).f64[1];
      v35.i64[0] = SDWORD1(v44[1]);
      v35.i64[1] = SDWORD2(v44[1]);
      *(float64x2_t *)&v46[8] = vmulq_f64(v36, (float64x2_t)xmmword_22BB44E30);
      *(float64x2_t *)&v46[24] = vmulq_f64(vcvtq_f64_s64(v35), (float64x2_t)xmmword_22BB44E40);
      v36.f64[0] = 0.0000610351562;
      LOWORD(v36.f64[0]) = HIWORD(v44[1]);
      *(_WORD *)&v46[2] = WORD5(v44[0]);
      *(double *)&v46[40] = (double)SBYTE12(v44[1]) * 0.0000610351562;
      *(double *)&v46[48] = (double)*(unint64_t *)&v36.f64[0] * 0.000000953674316;
      *(double *)&v46[56] = (double)SLOWORD(v44[2]) * 0.0000958737992;
      *(double *)&v46[64] = (double)SWORD1(v44[2]) * 0.00000381469727;
      v46[72] = BYTE4(v44[2]);
      *(_WORD *)&v46[73] = *(_WORD *)((char *)&v44[2] + 5);
      *(_WORD *)long long v46 = *(_WORD *)((char *)a3 + v22);
      if (*(_WORD *)v46)
      {
        GLON_RealAlm2RefState(v41, v40, v16, (uint64_t)&v45, v21);
        *(_DWORD *)(v21 + 160) = v18;
        *(_WORD *)(v21 + 164) = v39;
        *(unsigned char *)(v38 + v15) = 0;
      }
    }
    int v19 = v42;
    unsigned __int16 v20 = v43;
LABEL_69:
    ++v15;
    v21 += 192;
    v22 += 36;
    v23 += 36;
    v24 += 108;
    v25 += 8;
  }
  while (v15 != 24);
}

double *GLON_Leap_Second_Updates(double *result, int *a2, uint64_t a3)
{
  unsigned __int16 v3 = a2 + 9863;
  int v4 = a2[9863];
  if (v4 >= 1 && *((unsigned char *)result + 5) && *(int *)result >= 1)
  {
    double v5 = result[3];
    double v6 = -0.5;
    if (v5 > 0.0) {
      double v6 = 0.5;
    }
    double v7 = v5 + v6;
    if (v7 <= 2147483650.0) {
      unsigned int v8 = v7 >= -2147483650.0 ? (int)v7 : 0x80000000;
    }
    else {
      unsigned int v8 = 0x7FFFFFFF;
    }
    if (604800 * *((__int16 *)result + 8) + ~v4 + v8 <= 0xEFF0FE)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3 + 28608;
      double v11 = a2 + 3838;
      double v12 = a2 + 2806;
      for (uint64_t i = a3 + 6304; ; i += 192)
      {
        int v15 = *v12;
        v12 += 16;
        int v14 = v15;
        if (v15 >= 1 && v14 <= *v3 && *(_DWORD *)(i + 24) == 1)
        {
          uint64_t v16 = 1;
        }
        else
        {
          if (*v11 < 1 || *v11 > *v3 || *(_DWORD *)(i + 24) != 2) {
            goto LABEL_28;
          }
          uint64_t v16 = 2;
        }
        if (!*(unsigned char *)(v10 + v9)) {
          break;
        }
LABEL_28:
        ++v9;
        v11 += 9;
        if (v9 == 24) {
          return result;
        }
      }
      uint64_t v17 = *((char *)v3 + 4);
      int v18 = *(_DWORD *)i - v17;
      *(_DWORD *)uint64_t i = v18;
      if (v18 < 0)
      {
        __int16 v19 = -1;
        int v20 = 604800;
      }
      else
      {
        if (v18 <= 0x93A80)
        {
LABEL_27:
          *(unsigned char *)(v10 + v9) = 1;
          pthread_t result = (double *)EvLog_nd("GLON_Leap_Second_Updates:  Adj Ref Time, Slot %d  E/A %d  SP %d ", 3, a3, v9 + 1, v16, v17);
          goto LABEL_28;
        }
        __int16 v19 = 1;
        int v20 = -604800;
      }
      *(_DWORD *)uint64_t i = v20 + v18;
      *(_WORD *)(i + 4) += v19;
      goto LABEL_27;
    }
  }
  return result;
}

double *GLON_State_Update(double *result, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a3 + 60) || !*(unsigned char *)(a3 + 64)) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = 0;
  double v11 = (_DWORD *)(a6 + 6328);
  double v12 = (_DWORD *)(a6 + 6328);
  do
  {
    int v14 = *v12;
    v12 += 48;
    int v13 = v14;
    if (v14 == 2)
    {
      uint64_t v15 = *((void *)a4 + 2036);
    }
    else
    {
      if (v13 != 1 || *(unsigned char *)(*((void *)a4 + 2034) + v10)) {
        goto LABEL_11;
      }
      uint64_t v15 = *((void *)a4 + 2035);
    }
    if (!*(unsigned char *)(v15 + v10))
    {
      uint64_t v16 = v11 - 46;
      *(_OWORD *)((char *)v16 + 172) = 0uLL;
      v16[9] = 0uLL;
      v16[10] = 0uLL;
      v16[7] = 0uLL;
      v16[8] = 0uLL;
      v16[5] = 0uLL;
      v16[6] = 0uLL;
      v16[3] = 0uLL;
      void v16[4] = 0uLL;
      v16[1] = 0uLL;
      _DWORD v16[2] = 0uLL;
      *uint64_t v16 = 0uLL;
    }
LABEL_11:
    ++v10;
    double v11 = v12;
  }
  while (v10 != 24);
  *((_WORD *)result + 152) = 0;
  GLON_Immediate_Updates((uint64_t)result, a3, a4, a6);
  double v17 = *(double *)(a3 + 24) + 7.0;
  if (v17 <= 0.0) {
    double v18 = -0.5;
  }
  else {
    double v18 = 0.5;
  }
  double v19 = v17 + v18;
  if (v19 >= -2147483650.0) {
    int v20 = (int)v19;
  }
  else {
    int v20 = 0x80000000;
  }
  if (v19 <= 2147483650.0) {
    int v21 = v20;
  }
  else {
    int v21 = 0x7FFFFFFF;
  }
  double v22 = *(double *)(a3 + 72) + 7.0;
  if (v22 <= 0.0) {
    double v23 = -0.5;
  }
  else {
    double v23 = 0.5;
  }
  double v24 = v22 + v23;
  if (v24 <= 2147483650.0)
  {
    if (v24 >= -2147483650.0) {
      int v25 = (int)v24;
    }
    else {
      int v25 = 0x80000000;
    }
  }
  else
  {
    int v25 = 0x7FFFFFFF;
  }
  uint64_t v26 = 0;
  unsigned int v27 = (unsigned __int16 *)(v9 + 38);
  __int16 v28 = *(_WORD *)(a3 + 16);
  __int16 v29 = *(_WORD *)(a3 + 66);
  __int16 v30 = v21 > 604799;
  BOOL v31 = (unsigned int *)(a6 + 6312);
  int v32 = 0x7FFFFFFF;
  uint64_t v33 = 0xFFFFFFFFLL;
  uint64_t v34 = 0xFFFFFFFFLL;
  uint64_t v35 = 0x7FFFFFFFLL;
  while (2)
  {
    if (v31[4])
    {
      int v36 = *((__int16 *)v31 + 2);
      if (v32 > v36)
      {
        uint64_t v37 = *v31;
        goto LABEL_35;
      }
      if (v32 == v36)
      {
        uint64_t v37 = *v31;
        if ((int)v37 < (int)v35)
        {
LABEL_35:
          uint64_t v34 = (v26 + 32);
          uint64_t v33 = v26;
          uint64_t v35 = v37;
          int v32 = *((__int16 *)v31 + 2);
        }
      }
    }
    uint64_t v26 = (v26 + 1);
    v31 += 48;
    if (v26 != 24) {
      continue;
    }
    break;
  }
  if (v25 <= 86399) {
    int v38 = v25;
  }
  else {
    int v38 = v25 - 86400;
  }
  if (v21 <= 604799) {
    int v39 = v21;
  }
  else {
    int v39 = v21 - 604800;
  }
  if (v33 == -1) {
    return GLON_Leap_Second_Updates((double *)a3, a4, a6);
  }
  if (v34 > 0x94 || (v33 & 0x80000000) != 0 || (int)v33 >= 24)
  {
    EvLog_nd("GLON_StUd:  Bad Glo Idx ", 2, v35, v34, v33);
    return GLON_Leap_Second_Updates((double *)a3, a4, a6);
  }
  uint64_t v40 = v33;
  if (!*(unsigned char *)(*((void *)a4 + 1401) + v33)) {
    goto LABEL_59;
  }
  if (*(unsigned char *)(*((void *)a4 + 2035) + v33) && *(unsigned char *)(*((void *)a4 + 2039) + v33)) {
    return GLON_Leap_Second_Updates((double *)a3, a4, a6);
  }
  __int16 v41 = *(_WORD *)(a3 + 68) + (v25 > 86399);
  if (!*(unsigned char *)(*((void *)a4 + 2034) + v33))
  {
    if (*(unsigned char *)(*((void *)a4 + 2036) + v33))
    {
      __int16 v53 = *(_WORD *)(a3 + 68) + (v25 > 86399);
      __int16 v55 = v28 + v30;
      v56[0] = 0uLL;
      *(void *)((char *)&v56[1] + 5) = 0;
      *(void *)&v56[1] = 0;
      *(void *)((char *)&v56[1] + 14) = 0;
      BYTE6(v56[2]) = 0;
      GLON_AlmBin2Int((uint64_t)&a4[9 * v33 + 3838], (uint64_t)v56);
      uint64_t v57 = *(void *)&v56[0];
      v48.i64[0] = SHIDWORD(v56[0]);
      v48.i64[1] = SLODWORD(v56[1]);
      *(void *)&v49.f64[0] = *(_OWORD *)&vcvtq_f64_s64(v48);
      v48.i64[0] = HIDWORD(v56[0]);
      v48.i64[1] = LODWORD(v56[1]);
      v49.f64[1] = vcvtq_f64_u64(*(uint64x2_t *)&v48).f64[1];
      v48.i64[0] = SDWORD1(v56[1]);
      v48.i64[1] = SDWORD2(v56[1]);
      *(float64x2_t *)&v58[8] = vmulq_f64(v49, (float64x2_t)xmmword_22BB44E30);
      *(float64x2_t *)&v58[24] = vmulq_f64(vcvtq_f64_s64(v48), (float64x2_t)xmmword_22BB44E40);
      v49.f64[0] = 0.0000610351562;
      LOWORD(v49.f64[0]) = HIWORD(v56[1]);
      *(double *)&v58[40] = (double)SBYTE12(v56[1]) * 0.0000610351562;
      *(double *)&long long v59 = (double)*(unint64_t *)&v49.f64[0] * 0.000000953674316;
      *(_WORD *)&v58[2] = WORD5(v56[0]);
      *((double *)&v59 + 1) = (double)SLOWORD(v56[2]) * 0.0000958737992;
      *(double *)&long long v60 = (double)SWORD1(v56[2]) * 0.00000381469727;
      BYTE8(v60) = BYTE4(v56[2]);
      *(_WORD *)((char *)&v60 + 9) = *(_WORD *)((char *)&v56[2] + 5);
      *(_WORD *)long long v58 = a4[9 * v40 + 3840];
      if (!*(_WORD *)v58) {
        return GLON_Leap_Second_Updates((double *)a3, a4, a6);
      }
      uint64_t v50 = a6 + 192 * v34;
      GLON_RealAlm2RefState(v29, v53, v38, (uint64_t)&v57, v50);
      *(_DWORD *)(v50 + 160) = v39;
      *(_WORD *)(v50 + 164) = v55;
      goto LABEL_60;
    }
LABEL_59:
    long long v51 = (_OWORD *)(a6 + 192 * v34);
    *(_OWORD *)((char *)v51 + 172) = 0u;
    v51[9] = 0u;
    v51[10] = 0u;
    v51[7] = 0u;
    v51[8] = 0u;
    v51[5] = 0u;
    v51[6] = 0u;
    v51[3] = 0u;
    void v51[4] = 0u;
    v51[1] = 0u;
    v51[2] = 0u;
    *long long v51 = 0u;
LABEL_60:
    *(unsigned char *)(a6 + v40 + 28608) = 0;
    return GLON_Leap_Second_Updates((double *)a3, a4, a6);
  }
  if ((__int16)*v27 > 299)
  {
    EvLog_nd("GLON_StUd:  Delay SchUd ", 2, v35, (v34 + 1), *v27);
  }
  else
  {
    __int16 v54 = v28 + v30;
    uint64_t v57 = 0;
    *(void *)long long v58 = 0;
    *(void *)&v58[5] = 0;
    memset(&v58[16], 0, 32);
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v63 = 0;
    memset(v56, 0, 62);
    __int16 v42 = v41;
    GLON_EphBin2Int((uint64_t)&a4[16 * (unint64_t)v33 + 2806], (uint64_t)v56, (int32x4_t)0);
    GLON_EphInt2Real((uint64_t)v56, (uint64_t)&v57);
    unsigned int v52 = v34;
    uint64_t v43 = a6 + 192 * v34;
    uint64_t v44 = v29;
    int v45 = v42;
    uint64_t v46 = v43;
    GLON_Calc_State_Table_Eph(v44, v45, v38, (uint64_t)&v57, v43, v27);
    if (!*(unsigned char *)(*((void *)a4 + 2035) + v40)
      || (GLON_Cross_Check_SVRS_vs_EE(v44, v45, v38, v46, (uint64_t)&a4[27 * v40 + 3190]) & 1) != 0)
    {
      uint64_t v47 = a6 + 192 * v52;
      *(_DWORD *)(v47 + 160) = v39;
      *(_WORD *)(v47 + 164) = v54;
      goto LABEL_60;
    }
    *(unsigned char *)(*((void *)a4 + 2041) + v40) = 1;
    *(_DWORD *)(a6 + 192 * v52 + 184) = 0;
    *(unsigned char *)(*((void *)a4 + 2034) + v40) = 0;
    *(unsigned char *)(*((void *)a4 + 2033) + v40) = 1;
  }
  return GLON_Leap_Second_Updates((double *)a3, a4, a6);
}

uint64_t GLON_Cross_Check_SVRS_vs_EE(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  double v19 = 0.0;
  API_Get_UTC_Cor(1, &v19);
  int v18 = 0;
  double v17 = 0.0;
  int v16 = 0;
  Glon_To_GPS_Time(a1, a2, (double)a3, v19, &v16, &v18, &v17);
  __int16 v10 = v18 + ((_WORD)v16 << 10);
  double v11 = -0.5;
  if (v17 > 0.0) {
    double v11 = 0.5;
  }
  double v12 = v17 + v11;
  if (v17 + v11 <= 2147483650.0)
  {
    if (v12 >= -2147483650.0) {
      int v13 = (int)v12;
    }
    else {
      int v13 = 0x80000000;
    }
  }
  else
  {
    int v13 = 0x7FFFFFFF;
  }
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  Get_GPS_Kep_Ephemeris(*(_DWORD *)(a4 + 176), *(unsigned char *)(a4 + 180), a5, (uint64_t)v22);
  int v14 = Kep_Check_Ephemeris(v10, v13, (uint64_t)v22);
  if (!ST_Check_Eph_Kep_Err((uint64_t)"GLON_Cross_Check_SVRS_vs_EE", v14, (uint64_t)v22)) {
    return 1;
  }
  int v21 = 0;
  memset(v20, 0, sizeof(v20));
  Kep_Calc_SV_Ref_State(1, v10, v13, (uint64_t)v22, (uint64_t)v20);
  return ST_Cross_Check_SVRS_vs_SVRS(a4, (uint64_t)v20);
}

const char *Hal11_GetStackDumpString(int a1, int a2)
{
  int v2 = a2 | (a1 << 8);
  if (v2 > 7167)
  {
    if (v2 <= 13311)
    {
      if (v2 <= 7169)
      {
        if (v2 == 7168) {
          return "Privilege_Violation";
        }
        else {
          return "Disabled_Extension";
        }
      }
      switch(v2)
      {
        case 7170:
          return "Action_Point_Hit_Inst";
        case 11264:
          return "Divide_Zero";
        case 12288:
          return "Data_Cache_Consistency";
      }
      return "UnknownExcp";
    }
    switch(v2)
    {
      case 32769:
        pthread_t result = "Read_AUX_Bus_BadAddress";
        break;
      case 32770:
        pthread_t result = "Read_Security_Breach";
        break;
      case 32771:
      case 32773:
      case 32774:
      case 32775:
      case 32776:
      case 32779:
        return "UnknownExcp";
      case 32772:
        pthread_t result = "Read_AUX_BusTimeout";
        break;
      case 32777:
        pthread_t result = "Write_AUX_Bus_BadAddress";
        break;
      case 32778:
        pthread_t result = "Write_Security_Breach";
        break;
      case 32780:
        pthread_t result = "Write_AUX_BusTimeout";
        break;
      default:
        switch(v2)
        {
          case 61446:
            pthread_t result = "FP_Invalid";
            break;
          case 61447:
            pthread_t result = "FP_Divide_Zero";
            break;
          case 61448:
            pthread_t result = "FP_Overflow";
            break;
          case 61449:
            pthread_t result = "FP_QNaN";
            break;
          default:
            if (v2 != 13312) {
              return "UnknownExcp";
            }
            pthread_t result = "Misaligned_Data_Access";
            break;
        }
        break;
    }
  }
  else
  {
    if (v2 <= 4095)
    {
      if (v2 > 3071)
      {
        switch(v2)
        {
          case 3072:
            pthread_t result = "Double_Fault";
            break;
          case 3073:
            pthread_t result = "Overlapping_TLB_Entries";
            break;
          case 3074:
            pthread_t result = "Fatal_TLB";
            break;
          case 3075:
            pthread_t result = "Fatal_Cache";
            break;
          case 3076:
            pthread_t result = "Kernel_data_Mem";
            break;
          case 3077:
            pthread_t result = "Data_Flush_Mem";
            break;
          case 3078:
            pthread_t result = "Inst_Fetch_Mem";
            break;
          default:
            return "UnknownExcp";
        }
        return result;
      }
      switch(v2)
      {
        case 1024:
          return "Extern_Mem";
        case 2048:
          return "Illegal_Inst";
        case 2049:
          return "Illegal_Inst_Seq";
      }
      return "UnknownExcp";
    }
    if (v2 <= 5122)
    {
      switch(v2)
      {
        case 4096:
          return "Inst_Fetch_TLB_Miss";
        case 5121:
          return "Data_TLCB_LD_LLOCK";
        case 5122:
          return "Data_TLCB_ST_SCOND";
      }
      return "UnknownExcp";
    }
    switch(v2)
    {
      case 6144:
        pthread_t result = "Inst_Fetch_Protection_Violation";
        break;
      case 6145:
        pthread_t result = "Mem_Read";
        break;
      case 6146:
        pthread_t result = "Data_TLB_Violation_OR_Mem_Write";
        break;
      case 6147:
        pthread_t result = "Data_TLB_Protection_Violation_OR_Mem_RMW";
        break;
      default:
        if (v2 != 5123) {
          return "UnknownExcp";
        }
        pthread_t result = "Data_TLCB_EX";
        break;
    }
  }
  return result;
}

uint64_t Hal11_HandleEvent(int a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = 1;
  switch(a1)
  {
    case 'K':
      return v6;
    case 'L':
      Hal26_HandleLowPowerMsg(a2, a3);
      return v6;
    case 'M':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
      goto LABEL_8;
    case 'N':
      if (dword_26AE023BC == 2472)
      {
        HAL34_SunshineStackDumpHandler(a2, a3);
        return v6;
      }
      if (dword_26AE023C0 == 4)
      {
        BOOL v14 = dword_26AE023BC == 3431 && xmmword_26AE023AC == 2;
        if (v14 && DWORD1(xmmword_26AE023AC) == 1)
        {
          HAL24_BrightStackDumpHandler(a2, a3);
          return v6;
        }
      }
      uint64_t v6 = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0)) {
        return v6;
      }
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 87, "Hal11_StackDumpHandler", 264);
      int v12 = 2;
      goto LABEL_27;
    case 'T':
      if (!a2)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
          return v6;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
        goto LABEL_35;
      }
      if (!a3)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
          return v6;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
        goto LABEL_35;
      }
      if (a3 <= 0xB)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
          return v6;
        }
        bzero(__str, 0x410uLL);
        unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v40);
        goto LABEL_35;
      }
      unsigned int v19 = a2[8];
      if (v19 > 0x4C)
      {
        if (a2[8] > 0x56u)
        {
          if (v19 == 87)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v35 = mach_continuous_time();
              unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MECpu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "HAL", 69, "Hal11_HandleStatusMsg", 1300);
              LbsOsaTrace_WriteLog(0xDu, __str, v36, 0, 1);
            }
            Hal_CommsItfUpdateStatus(0);
            uint64_t v25 = 2;
            goto LABEL_77;
          }
          if (v19 == 119)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v28 = mach_continuous_time();
              unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpCpu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "HAL", 69, "Hal11_HandleStatusMsg", 1300);
              LbsOsaTrace_WriteLog(0xDu, __str, v29, 0, 1);
            }
            Hal_CommsItfUpdateStatus(0);
            uint64_t v25 = 3;
            goto LABEL_77;
          }
        }
        else
        {
          if (v19 == 77)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v31 = mach_continuous_time();
              unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MESlp Event\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "HAL", 73, "Hal11_HandleStatusMsg");
              LbsOsaTrace_WriteLog(0xDu, __str, v32, 4, 1);
            }
            uint64_t v25 = 8;
            goto LABEL_77;
          }
          if (v19 == 84)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v23 = mach_continuous_time();
              unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "HAL", 69, "Hal11_HandleStatusMsg", 1320);
              LbsOsaTrace_WriteLog(0xDu, __str, v24, 0, 1);
            }
            uint64_t v25 = 9;
            goto LABEL_77;
          }
        }
        goto LABEL_75;
      }
      if (a2[8] > 0x46u)
      {
        if (v19 == 71)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v33 = mach_continuous_time();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "HAL", 69, "Hal11_HandleStatusMsg", 1302);
            LbsOsaTrace_WriteLog(0xDu, __str, v34, 0, 1);
          }
          Hal_CommsItfUpdateStatus(0);
          uint64_t v25 = 4;
          goto LABEL_77;
        }
        if (v19 == 72)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWErr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "HAL", 69, "Hal11_HandleStatusMsg", 1302);
            LbsOsaTrace_WriteLog(0xDu, __str, v27, 0, 1);
          }
          Hal_CommsItfUpdateStatus(0);
          uint64_t v25 = 5;
          goto LABEL_77;
        }
LABEL_75:
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        uint64_t v25 = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v38 = mach_continuous_time();
          unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgId,%c,len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "HAL", 69, "Hal11_HandleStatusMsg", 515, a2[8], a3);
          LbsOsaTrace_WriteLog(0xDu, __str, v39, 0, 1);
          uint64_t v25 = 0;
        }
LABEL_77:
        if (g_HalCallbacks) {
          g_HalCallbacks(v25);
        }
        return v6;
      }
      if (v19 == 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: HWStatusOK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "HAL", 73, "Hal11_HandleStatusMsg");
LABEL_7:
          int v9 = 4;
LABEL_36:
          LbsOsaTrace_WriteLog(0xDu, __str, v8, v9, 1);
        }
        return v6;
      }
      if (v19 != 65) {
        goto LABEL_75;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CalibComplete\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "HAL", 73, "Hal11_HandleCalibCompleteStatus");
        LbsOsaTrace_WriteLog(0xDu, __str, v21, 4, 1);
      }
      if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem)
        && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        __error();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v22);
LABEL_35:
        size_t v8 = v13;
        int v9 = 0;
        goto LABEL_36;
      }
      return v6;
    default:
      if (a1 == 87)
      {
        if (a3 == 16)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v7 = mach_continuous_time();
            size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 73, "Hal11_HandleEvent", a2[8]);
            uint64_t v6 = 1;
            goto LABEL_7;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StackDump Rsp Len,%hu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 87, "Hal11_HandleEvent", 783, a3);
          uint64_t v6 = 1;
          int v9 = 2;
          goto LABEL_36;
        }
        return 1;
      }
      else
      {
LABEL_8:
        uint64_t v6 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 68, "Hal11_HandleEvent", 770, a1);
          int v12 = 5;
LABEL_27:
          LbsOsaTrace_WriteLog(0xDu, __str, v11, v12, 1);
          return 0;
        }
      }
      return v6;
  }
}

uint64_t Hal11_WaitCalibComplete(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  char v0 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
  uint64_t result = v0;
  if (v0)
  {
    if (result == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "Hal11_WaitCalibComplete", 1543);
        int v4 = 0;
LABEL_7:
        LbsOsaTrace_WriteLog(0xDu, __str, v3, v4, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 87, "Hal11_WaitCalibComplete", 1543);
      int v4 = 2;
      goto LABEL_7;
    }
    return 4294967287;
  }
  return result;
}

uint64_t Trace_GN_SUPL_Connect_Ind_In(int a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 == 7)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SSL Error Handle,%u\n", v9);
  }
  else
  {
    if (a2 == 6)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connect success for ReqId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 65, "Trace_GN_SUPL_Connect_Ind_In", a1);
      int v6 = 1;
      return LbsOsaTrace_WriteLog(0x12u, __str, v5, v6, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handle,%u,Status,%u\n", v8);
  }
  size_t v5 = v7;
  int v6 = 0;
  return LbsOsaTrace_WriteLog(0x12u, __str, v5, v6, 1);
}

void Trace_GN_SUPL_Push_Delivery_In(unsigned int *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1 && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handle\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "Trace_GN_SUPL_Push_Delivery_In", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
  }
  if (a3)
  {
    size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      unint64_t v8 = (LcsUtils *)mach_continuous_time();
      double v9 = *(double *)&g_MacClockTicksToMsRelation;
      LcsUtils::GetInstance(v8);
      uint64_t v10 = mach_continuous_time();
      std::to_string(&v16, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10));
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &v16;
      }
      else {
        uint64_t v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Push_Delivery_In time stamp,%s,PDU_Size,%u\n", (unint64_t)(v9 * (double)(unint64_t)v8), "SPL", 77, "Trace_GN_SUPL_Push_Delivery_In", (const char *)v11, a2);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v12, 3, 1);
    }
    uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance((LcsUtils *)IsLoggingAllowed);
    LcsUtils::TraceBuffer(Instance, a3, a2);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "Trace_GN_SUPL_Push_Delivery_In", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
  }
}

size_t Trace_GN_SUPL_AidRequest_In(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 73, "Trace_GN_SUPL_AidRequest_In", a1);
    LbsOsaTrace_WriteLog(0x12u, __str, v7, 4, 1);
  }
  size_t result = Trace_GN_SUPL_AidReqData(a2);
  if (a3) {
    return Trace_GN_SUPL_Pos_data(a3);
  }
  return result;
}

size_t Trace_GN_SUPL_AidReqData(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Aid Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "SPL", 69, "Trace_GN_SUPL_AidReqData", 513);
    int v25 = 0;
    return LbsOsaTrace_WriteLog(0x12u, __str, v24, v25, 1);
  }
  if (*(void *)(a1 + 8))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0)) {
      goto LABEL_33;
    }
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    size_t v3 = *(unsigned __int8 **)(a1 + 8);
    int v4 = *v3;
    int v5 = v3[1];
    int v6 = v3[2];
    int v7 = v3[3];
    int v8 = v3[4];
    int v9 = v3[5];
    int v10 = v3[6];
    BOOL v11 = v3[7] == 0;
    uint64_t v12 = 84;
    if (v11) {
      uint64_t v13 = 70;
    }
    else {
      uint64_t v13 = 84;
    }
    if (v10) {
      uint64_t v14 = 84;
    }
    else {
      uint64_t v14 = 70;
    }
    if (v9) {
      uint64_t v15 = 84;
    }
    else {
      uint64_t v15 = 70;
    }
    if (v8) {
      uint64_t v16 = 84;
    }
    else {
      uint64_t v16 = 70;
    }
    if (v7) {
      uint64_t v17 = 84;
    }
    else {
      uint64_t v17 = 70;
    }
    if (v6) {
      uint64_t v18 = 84;
    }
    else {
      uint64_t v18 = 70;
    }
    if (v5) {
      uint64_t v19 = 84;
    }
    else {
      uint64_t v19 = 70;
    }
    if (!v4) {
      uint64_t v12 = 70;
    }
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: RefTime,%c,RefPos,%c,Iono,%c,Agps,%c,Aglon,%c,Aqzss,%c,Asbas,%c,Abds,%c\n", (unint64_t)v2, "SPL", 73, "Trace_GN_SUPL_AidReqData", v12, v19, v18, v17, v16, v15, v14, v13);
    int v21 = 4;
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0)) {
      goto LABEL_33;
    }
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Generic Assistance data is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "SPL", 87, "Trace_GN_SUPL_AidReqData", 515);
    int v21 = 2;
  }
  LbsOsaTrace_WriteLog(0x12u, __str, v20, v21, 1);
LABEL_33:
  unsigned __int16 v27 = *(unsigned char **)(a1 + 16);
  if (!v27)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v40 = mach_continuous_time();
    size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS Assistance Requirements List is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "SPL", 73, "Trace_GN_SUPL_AidReqData");
    int v25 = 4;
    return LbsOsaTrace_WriteLog(0x12u, __str, v24, v25, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v28 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (v27[10]) {
      uint64_t v29 = 84;
    }
    else {
      uint64_t v29 = 70;
    }
    if (v27[9]) {
      uint64_t v30 = 84;
    }
    else {
      uint64_t v30 = 70;
    }
    if (v27[8]) {
      uint64_t v31 = 84;
    }
    else {
      uint64_t v31 = 70;
    }
    if (v27[7]) {
      uint64_t v32 = 84;
    }
    else {
      uint64_t v32 = 70;
    }
    if (v27[6]) {
      uint64_t v33 = 84;
    }
    else {
      uint64_t v33 = 70;
    }
    if (v27[5]) {
      uint64_t v34 = 84;
    }
    else {
      uint64_t v34 = 70;
    }
    if (v27[4]) {
      uint64_t v35 = 84;
    }
    else {
      uint64_t v35 = 70;
    }
    unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Constellation,%s,Utc,%c,Rti,%c,Alm,%c,Eph,%c,RefMeas,%c,DataBits,%c,Aux,%c\n", (unint64_t)v28, "SPL", 65, "Trace_GN_SUPL_AidReqData_AssistReq", "GPS", v35, v34, v33, v32, v31, v30, v29);
    size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v36, 1, 1);
  }
  if (v27[20])
  {
    unint64_t v37 = 0;
    do
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v38 = mach_continuous_time();
        unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: satid,%u,IODE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "SPL", 73, "Trace_GN_SUPL_AidReqData_AssistReq", v27[v37 + 21], *(unsigned __int16 *)&v27[2 * v37 + 86]);
        size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v39, 4, 1);
      }
      ++v37;
    }
    while (v37 < v27[20]);
  }
  return result;
}

uint64_t Trace_GN_SUPL_Pos_data(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Last Known Position\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "SPL", 69, "Trace_GN_SUPL_Pos_data", 513);
    int v11 = 0;
    return LbsOsaTrace_WriteLog(0x12u, __str, v10, v11, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FixStat,%u,FixType,%u,ShapeType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 73, "Trace_GN_SUPL_Pos_data", *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0x12u, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Sign of Lat,%u,lat,%u,long,%d,Alt,%u,UnMjraxis,%u,UnMnraxis,%u,Bearing Uncer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "Trace_GN_SUPL_Pos_data", *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 28), *(unsigned __int8 *)(a1 + 30), *(unsigned __int8 *)(a1 + 31), *(unsigned __int8 *)(a1 + 32));
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Dr of Al,%u,Alt Uncer,%u,Pos Conf,%u,Incl Angle,%u,offset Angle,%u,Inr Rad,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 73, "Trace_GN_SUPL_Pos_data", *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42), *(unsigned __int8 *)(a1 + 43), *(_DWORD *)(a1 + 44));
    LbsOsaTrace_WriteLog(0x12u, __str, v7, 4, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Year,%u,Month,%u,Days,%u,Hr,%u,Min,%u,Sec,%u,MillSec,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 73, "Trace_GN_SUPL_Pos_data", *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 58), *(unsigned __int16 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), *(unsigned __int16 *)(a1 + 64));
    int v11 = 4;
    return LbsOsaTrace_WriteLog(0x12u, __str, v10, v11, 1);
  }
  return result;
}

void Trace_GN_SUPL_PDU_Delivery_In(int a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a3)
  {
    size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      unsigned __int16 v7 = (LcsUtils *)mach_continuous_time();
      double v8 = *(double *)&g_MacClockTicksToMsRelation;
      LcsUtils::GetInstance(v7);
      uint64_t v9 = mach_continuous_time();
      std::to_string(&v15, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9));
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v10 = &v15;
      }
      else {
        size_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PDU_Delivery_In time stamp,%s,PDU_Size,%u,Handle,%u\n", (unint64_t)(v8 * (double)(unint64_t)v7), "SPL", 77, "Trace_GN_SUPL_PDU_Delivery_In", (const char *)v10, a2, a1);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v11, 3, 1);
    }
    uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance((LcsUtils *)IsLoggingAllowed);
    LcsUtils::TraceBuffer(Instance, a3, a2);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "Trace_GN_SUPL_PDU_Delivery_In", 513, a1);
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
  }
}

size_t Trace_GN_SUPL_LocationId(uint64_t a1)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v1 = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CellInfoStatus,%u,CellInfoType,%u,SimId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 73, "Trace_GN_SUPL_LocationId", *(_DWORD *)v1, *(_DWORD *)(v1 + 4), *(unsigned __int8 *)(v1 + 8));
      LbsOsaTrace_WriteLog(0x12u, __str, v3, 4, 1);
    }
    uint64_t v78 = v1;
    switch(*(_DWORD *)(v1 + 4))
    {
      case 1:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v4 = mach_continuous_time();
          unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GSM Cell refMCC,%u,refMNC,%u,refLAC,%u,refCI,%u,tA,%u,numberOfNeighbors,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "Trace_GN_SUPL_LocationId", *(unsigned __int16 *)(v1 + 12), *(unsigned __int16 *)(v1 + 14), *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 20), *(unsigned __int16 *)(v1 + 24), *(unsigned __int8 *)(v1 + 26));
          LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
        }
        if (*(unsigned char *)(v1 + 26))
        {
          unint64_t v6 = 0;
          unsigned __int16 v7 = (unsigned __int8 *)(v1 + 31);
          do
          {
            size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v9 = mach_continuous_time();
              unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: gsmCell NMR Element,%zu,aRFCN,%u,bSIC,%u,rxLev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 73, "Trace_GN_SUPL_LocationId", v6, *(unsigned __int16 *)(v7 - 3), *(v7 - 1), *v7);
              size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v10, 4, 1);
            }
            ++v6;
            v7 += 4;
          }
          while (v6 < *(unsigned __int8 *)(v1 + 26));
        }
        else
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            unint64_t v72 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            long long v60 = "%10u %s%c %s: No GSM neigbour list\n";
            goto LABEL_91;
          }
        }
        break;
      case 2:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WCDMA Cell refMCC,%u,refMNC,%u,refUC,%u,refLAC,%u,PSC,%u,MeasResCount,%u,UarfcnDl,%u,UarfcnUl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 73, "Trace_GN_SUPL_LocationId", *(unsigned __int16 *)(v1 + 12), *(unsigned __int16 *)(v1 + 14), *(_DWORD *)(v1 + 20), *(_DWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 28), *(unsigned __int8 *)(v1 + 30), *(unsigned __int16 *)(v1 + 24), *(unsigned __int16 *)(v1 + 26));
          LbsOsaTrace_WriteLog(0x12u, __str, v15, 4, 1);
        }
        if (*(unsigned char *)(v1 + 30))
        {
          unint64_t v16 = 0;
          uint64_t v17 = v1 + 32;
          uint64_t v18 = (unsigned __int8 *)(v1 + 48);
          do
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v19 = mach_continuous_time();
              unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WCDMA neighbor,%zu,RSSI,%u,numberOfCells,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "SPL", 73, "Trace_GN_SUPL_LocationId", v16, *(unsigned __int8 *)(v17 + 392 * v16 + 4), *(unsigned __int8 *)(v17 + 392 * v16 + 5));
              LbsOsaTrace_WriteLog(0x12u, __str, v20, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v21 = mach_continuous_time();
              unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,uarfcn_UL,%u,uarfcn_DL,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 73, "Trace_GN_SUPL_LocationId", v16, *(unsigned __int16 *)(v17 + 392 * v16 + 2), *(unsigned __int16 *)(v17 + 392 * v16));
              LbsOsaTrace_WriteLog(0x12u, __str, v22, 4, 1);
            }
            uint64_t v23 = v17 + 392 * v16;
            int v25 = *(unsigned __int8 *)(v23 + 5);
            size_t v24 = (unsigned __int8 *)(v23 + 5);
            if (v25)
            {
              unint64_t v26 = 0;
              unsigned __int16 v27 = v18;
              do
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v28 = mach_continuous_time();
                  unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,cellno,%zu,cellIdentity,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "SPL", 73, "Trace_GN_SUPL_LocationId", v16, v26, *((_DWORD *)v27 - 2));
                  LbsOsaTrace_WriteLog(0x12u, __str, v29, 4, 1);
                }
                size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
                if (result)
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v30 = mach_continuous_time();
                  unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,cellno,%zu,PrimaryScramblingCode,%u,cpich_Ec_N0,%u,RSCP,%u,pathloss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "SPL", 73, "Trace_GN_SUPL_LocationId", v16, v26, *((unsigned __int16 *)v27 - 2), *(v27 - 2), *(v27 - 1), *v27);
                  size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v31, 4, 1);
                }
                ++v26;
                v27 += 12;
              }
              while (v26 < *v24);
            }
            else
            {
              size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
              if (result)
              {
                bzero(__str, 0x410uLL);
                uint64_t v32 = mach_continuous_time();
                unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell neighbor,%zu No list of cells\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "SPL", 73, "Trace_GN_SUPL_LocationId", v16);
                size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v33, 4, 1);
              }
            }
            ++v16;
            uint64_t v17 = v1 + 32;
            v18 += 392;
          }
          while (v16 < *(unsigned __int8 *)(v1 + 30));
        }
        else
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
          if (result)
          {
            bzero(__str, 0x410uLL);
            unint64_t v72 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            long long v60 = "%10u %s%c %s: wcdmaCell: no Neighbor cell information available\n";
            goto LABEL_91;
          }
        }
        break;
      case 3:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v34 = mach_continuous_time();
          unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: refMCC,%u,refMNC,%u,refUC,%u,refLAC,%u,MeasResCount,%u,cellParamsID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "SPL", 73, "Trace_GN_SUPL_LocationId", *(unsigned __int16 *)(v1 + 12), *(unsigned __int16 *)(v1 + 14), *(_DWORD *)(v1 + 20), *(_DWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 28), *(unsigned __int16 *)(v1 + 26));
          LbsOsaTrace_WriteLog(0x12u, __str, v35, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v36 = mach_continuous_time();
          unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TDD uarfcn_Nt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "SPL", 73, "Trace_GN_SUPL_LocationId", *(unsigned __int16 *)(v1 + 24));
          LbsOsaTrace_WriteLog(0x12u, __str, v37, 4, 1);
        }
        if (*(unsigned char *)(v1 + 28))
        {
          unint64_t v38 = 0;
          uint64_t v39 = v1 + 45;
          do
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v40 = mach_continuous_time();
              unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell neighbor,%zu,RSSI,%u,numberOfCells,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, *(unsigned __int8 *)(v1 + 772 * v38 + 34), *(unsigned __int8 *)(v1 + 772 * v38 + 35));
              LbsOsaTrace_WriteLog(0x12u, __str, v41, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v42 = mach_continuous_time();
              unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell neighbor,%zu,TDD uarfcn_Nt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, *(unsigned __int16 *)(v1 + 772 * v38 + 32));
              LbsOsaTrace_WriteLog(0x12u, __str, v43, 4, 1);
            }
            uint64_t v76 = v39;
            unint64_t v77 = (unsigned char *)(v1 + 772 * v38 + 35);
            if (*v77)
            {
              unint64_t v44 = 0;
              do
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v45 = mach_continuous_time();
                  unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell neighbor,%zu,cellno,%zu,cellIdentity,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, v44, *(_DWORD *)(v1 + 772 * v38 + 24 * v44 + 36));
                  LbsOsaTrace_WriteLog(0x12u, __str, v46, 4, 1);
                }
                if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v47 = mach_continuous_time();
                  int64x2_t v48 = (unsigned __int8 *)(v1 + 772 * v38 + 24 * v44);
                  unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,cellno,%zu TDD cellParametersID,%u,TGSN,%u,pathloss,%u,RSCP,%u,timeSlotCount,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, v44, v48[40], v48[41], v48[43], v48[42], v48[44]);
                  LbsOsaTrace_WriteLog(0x12u, __str, v49, 4, 1);
                }
                uint64_t v50 = v1 + 772 * v38 + 24 * v44;
                int v52 = *(unsigned __int8 *)(v50 + 44);
                long long v51 = (unsigned __int8 *)(v50 + 44);
                if (v52)
                {
                  unint64_t v53 = 0;
                  do
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v54 = mach_continuous_time();
                      unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,cellno,%zu,timeslotindex,%zu,timeSlotISCP,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, v44, v53, *(unsigned __int8 *)(v39 + v53));
                      LbsOsaTrace_WriteLog(0x12u, __str, v55, 4, 1);
                    }
                    ++v53;
                  }
                  while (v53 < *v51);
                }
                else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v56 = mach_continuous_time();
                  unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: neighbor,%zu,cellno,%zu TDD No Timeslot information\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "SPL", 73, "Trace_GN_SUPL_LocationId", v38, v44);
                  LbsOsaTrace_WriteLog(0x12u, __str, v57, 4, 1);
                }
                ++v44;
                uint64_t v1 = v78;
                v39 += 24;
              }
              while (v44 < *v77);
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v58 = mach_continuous_time();
              unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell neighbor,%zu No list of cells\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "SPL", 73, "Trace_GN_SUPL_LocationId", v38);
              LbsOsaTrace_WriteLog(0x12u, __str, v59, 4, 1);
            }
            ++v38;
            uint64_t v39 = v76 + 772;
          }
          while (v38 < *(unsigned __int8 *)(v1 + 28));
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v67 = mach_continuous_time();
          unsigned __int16 v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaCell  no Neighbor cell information available\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "SPL", 73, "Trace_GN_SUPL_LocationId");
          LbsOsaTrace_WriteLog(0x12u, __str, v68, 4, 1);
        }
        if (*(unsigned char *)(v1 + 6208))
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
          if (result)
          {
            bzero(__str, 0x410uLL);
            unint64_t v69 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: wcdmaTimingAdvance tA,%u,tARes,%u,chipRate,%u\n", v69);
            goto LABEL_92;
          }
        }
        else
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 2, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v71 = mach_continuous_time();
            size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Timing Advance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "SPL", 87, "Trace_GN_SUPL_LocationId", 770);
            int v13 = 2;
            return LbsOsaTrace_WriteLog(0x12u, __str, v12, v13, 1);
          }
        }
        break;
      case 4:
        size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v72 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          long long v60 = "%10u %s%c %s: cdmaCell not supported\n";
          goto LABEL_91;
        }
        break;
      case 5:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v61 = mach_continuous_time();
          unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: lteCell mcc,%u,mnc,%u,cellIdentity,%u,TrackingAreaCode,%u,PhysicalCellID,%u,tA,%u,RSRP,%u,RSRQ,%u,EARFCN,%u,NMRCount,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "SPL", 73, "Trace_GN_SUPL_LocationId", *(unsigned __int16 *)(v1 + 12), *(unsigned __int16 *)(v1 + 14), *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 24), *(unsigned __int16 *)(v1 + 20), *(unsigned __int16 *)(v1 + 36), *(unsigned __int8 *)(v1 + 28), *(unsigned __int8 *)(v1 + 29), *(_DWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 38));
          LbsOsaTrace_WriteLog(0x12u, __str, v62, 4, 1);
        }
        if (*(unsigned char *)(v1 + 38))
        {
          unint64_t v63 = 0;
          uint64_t v64 = (_DWORD *)(v1 + 56);
          do
          {
            size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v65 = mach_continuous_time();
              unsigned __int16 v66 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: lteCell neighbor,%zu,cgiInfo mcc,%u,mnc,%u,cellIdentity,%u,physicalCellId,%u,EARFCN,%u,RSRP,%u,RSRQ,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "SPL", 73, "Trace_GN_SUPL_LocationId", v63, *((unsigned __int16 *)v64 - 8), *((unsigned __int16 *)v64 - 7), *(v64 - 3), *((unsigned __int16 *)v64 - 4), *v64, *((unsigned __int8 *)v64 - 6), *((unsigned __int8 *)v64 - 5));
              size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v66, 4, 1);
            }
            ++v63;
            v64 += 5;
          }
          while (v63 < *(unsigned __int8 *)(v1 + 38));
        }
        else
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            unint64_t v72 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            long long v60 = "%10u %s%c %s: No neighbor cells for LTE\n";
LABEL_91:
            unsigned __int16 v70 = snprintf(__str, 0x40FuLL, v60, v72, "SPL", 73, "Trace_GN_SUPL_LocationId", v73, v74, v75);
LABEL_92:
            size_t v12 = v70;
            int v13 = 4;
            return LbsOsaTrace_WriteLog(0x12u, __str, v12, v13, 1);
          }
        }
        break;
      default:
        size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo Type\n");
          goto LABEL_17;
        }
        break;
    }
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location ID\n");
LABEL_17:
      size_t v12 = v11;
      int v13 = 0;
      return LbsOsaTrace_WriteLog(0x12u, __str, v12, v13, 1);
    }
  }
  return result;
}

size_t Trace_GN_SUPL_TimerExpiry_In(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerId,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 65, "Trace_GN_SUPL_TimerExpiry_In", a1, a2);
    return LbsOsaTrace_WriteLog(0x12u, __str, v6, 1, 1);
  }
  return result;
}

void Trace_GN_SUPL_PPDU_Delivery_In(int a1, unsigned int a2, const unsigned __int8 *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  size_t IsLoggingAllowed = (LcsUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u,PDU Size,%u,PDU Content Type,%u,Pos Protocol Type,%u,EncStatus,%u, isLastPos, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 65, "Trace_GN_SUPL_PPDU_Delivery_In", a1, a2, a4, a5, a6, a7);
    size_t IsLoggingAllowed = (LcsUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v16, 1, 1);
  }
  if (a3)
  {
    uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance(IsLoggingAllowed);
    LcsUtils::TraceBuffer(Instance, a3, a2);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 69, "Trace_GN_SUPL_PPDU_Delivery_In", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v19, 0, 1);
  }
}

uint64_t Trace_GN_SUPL_Set_Config(unsigned __int16 *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "Trace_GN_SUPL_Set_Config", 513);
    int v8 = 0;
    return LbsOsaTrace_WriteLog(0x12u, __str, v7, v8, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UT1,%u,UT2,%u,UT3,%u,PrefPosMthd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 65, "Trace_GN_SUPL_Set_Config", *a1, a1[1], a1[2], *((_DWORD *)a1 + 2));
    LbsOsaTrace_WriteLog(0x12u, __str, v3, 1, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v6 = 84;
    if (!*((unsigned char *)a1 + 14)) {
      uint64_t v6 = 70;
    }
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: sessionTimeout,%u,DisableMSA,%c\n", (unint64_t)v5, "SPL", 65, "Trace_GN_SUPL_Set_Config", a1[6], v6);
    int v8 = 1;
    return LbsOsaTrace_WriteLog(0x12u, __str, v7, v8, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_Extd_Set_Config(unsigned char *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a1[2]) {
      uint64_t v4 = 84;
    }
    else {
      uint64_t v4 = 70;
    }
    if (a1[1]) {
      uint64_t v5 = 84;
    }
    else {
      uint64_t v5 = 70;
    }
    if (*a1) {
      uint64_t v6 = 84;
    }
    else {
      uint64_t v6 = 70;
    }
    if (a1[7]) {
      uint64_t v7 = 84;
    }
    else {
      uint64_t v7 = 70;
    }
    if (a1[6]) {
      uint64_t v8 = 84;
    }
    else {
      uint64_t v8 = 70;
    }
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: LPP Support,%c,SHA1 Overeride,%c,MSA,%c,MSB,%c,AUTO,%c\n", (unint64_t)v3, "SPL", 65, "Trace_GN_SUPL_Extd_Set_Config", v8, v7, v6, v5, v4);
    int v10 = 1;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "Trace_GN_SUPL_Extd_Set_Config", 513);
    int v10 = 0;
  }
  return LbsOsaTrace_WriteLog(0x12u, __str, v9, v10, 1);
}

uint64_t Trace_gnsDC_SlpInfo(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 260))
    {
      case 0:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Address Type,%u\n", v6);
          goto LABEL_16;
        }
        break;
      case 1:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FQDN,%s,Port,%u\n", v7);
          goto LABEL_13;
        }
        break;
      case 2:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV4,%s,Port,%u\n", v8);
          goto LABEL_13;
        }
        break;
      case 3:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV6,%s,Port,%u\n", v9);
LABEL_13:
          size_t v4 = v3;
          int v5 = 1;
          return LbsOsaTrace_WriteLog(0x12u, __str, v4, v5, 1);
        }
        break;
      default:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Address Type,%u\n", v10);
          goto LABEL_16;
        }
        break;
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_16:
      size_t v4 = v2;
      int v5 = 0;
      return LbsOsaTrace_WriteLog(0x12u, __str, v4, v5, 1);
    }
  }
  return result;
}

uint64_t Trace_GN_SUPL_SetIdParams(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "Trace_GN_SUPL_SetIdParams", 513);
    int v4 = 0;
    return LbsOsaTrace_WriteLog(0x12u, __str, v3, v4, 1);
  }
  uint64_t v1 = result;
  if (*(char *)(result + 23) < 0)
  {
    if (!*(void *)(result + 8)) {
      return result;
    }
    goto LABEL_8;
  }
  if (*(unsigned char *)(result + 23))
  {
LABEL_8:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 1);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (*(char *)(v1 + 23) < 0) {
      uint64_t v1 = *(void *)v1;
    }
    size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: IMSI,%s\n", (unint64_t)v5, "SPL", 73, "Trace_GN_SUPL_SetIdParams", (const char *)v1);
    int v4 = 4;
    return LbsOsaTrace_WriteLog(0x12u, __str, v3, v4, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_Abort(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u, AbortType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 65, "Trace_GN_SUPL_Abort", a1, a2);
    return LbsOsaTrace_WriteLog(0x12u, __str, v6, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_AidRequest_Out(int a1, int a2, int a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    unint64_t v9 = (LcsUtils *)mach_continuous_time();
    double v10 = *(double *)&g_MacClockTicksToMsRelation;
    LcsUtils::GetInstance(v9);
    uint64_t v11 = mach_continuous_time();
    std::to_string(&v14, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11));
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v14;
    }
    else {
      uint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: time stamp,%s,Handle,%u,Timeout,%u,PosMethod%u,AllowedGnssMask,%u\n", (unint64_t)(v10 * (double)(unint64_t)v9), "SPL", 65, "Trace_GN_SUPL_AidRequest_Out", (const char *)v12, a1, a2, a3, a4);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    return LbsOsaTrace_WriteLog(0x12u, __str, v13, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_Connect_Req_Parms(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a1 + 260))
  {
    case 0:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IP Type is DFLT\n");
        goto LABEL_6;
      }
      break;
    case 1:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FQDN,%s,Port,%u\n", v7);
        goto LABEL_13;
      }
      break;
    case 2:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV4,%s,Port,%u\n", v8);
        goto LABEL_13;
      }
      break;
    case 3:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV6,%s,Port,%u\n", v9);
LABEL_13:
        size_t v3 = v5;
        int v4 = 1;
        goto LABEL_14;
      }
      break;
    default:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IP Type,%u\n", v6);
LABEL_6:
        size_t v3 = v2;
        int v4 = 0;
LABEL_14:
        size_t result = LbsOsaTrace_WriteLog(0x12u, __str, v3, v4, 1);
      }
      break;
  }
  return result;
}

size_t Trace_GN_SUPL_Disconnect_Req_Out(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 65, "Trace_GN_SUPL_Disconnect_Req_Out", a1);
    return LbsOsaTrace_WriteLog(0x12u, __str, v4, 1, 1);
  }
  return result;
}

void Trace_GN_SUPL_PDU_Delivery_Out(int a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    unint64_t v7 = (LcsUtils *)mach_continuous_time();
    double v8 = *(double *)&g_MacClockTicksToMsRelation;
    LcsUtils::GetInstance(v7);
    uint64_t v9 = mach_continuous_time();
    std::to_string(&v13, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9));
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v13;
    }
    else {
      double v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PDU_Delivery_Out time stamp,%s,request_id,%u,buflen,%u\n", (unint64_t)(v8 * (double)(unint64_t)v7), "SPL", 77, "Trace_GN_SUPL_PDU_Delivery_Out", (const char *)v10, a1, a2);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v11, 3, 1);
  }
  uint64_t Instance = (LcsUtils *)LcsUtils::GetInstance((LcsUtils *)IsLoggingAllowed);
  LcsUtils::TraceBuffer(Instance, a3, a2);
}

uint64_t Trace_GN_SUPL_Position_Resp_Out(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v7 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v8 = 70;
    if (a4) {
      uint64_t v8 = 84;
    }
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u,NiSession,%c\n", (unint64_t)v7, "SPL", 65, "Trace_GN_SUPL_Position_Resp_Out", a1, v8);
    LbsOsaTrace_WriteLog(0x12u, __str, v9, 1, 1);
  }
  return Trace_GN_SUPL_Pos_data(a3);
}

size_t Trace_GN_SUPL_TimerStart_Out(int a1, int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerID,%u,Type,%u,DurationMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 65, "Trace_GN_SUPL_TimerStart_Out", a1, a2, a3);
    return LbsOsaTrace_WriteLog(0x12u, __str, v8, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_TimerStop_Out(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerID,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 65, "Trace_GN_SUPL_TimerStop_Out", a1, a2);
    return LbsOsaTrace_WriteLog(0x12u, __str, v6, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_PPDU_Decode_Out(int a1, int a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = (LcsUtils *)mach_continuous_time();
    double v13 = *(double *)&g_MacClockTicksToMsRelation;
    LcsUtils::GetInstance(v12);
    uint64_t v14 = mach_continuous_time();
    std::to_string(&v19, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14));
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v19;
    }
    else {
      uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    uint64_t v16 = 70;
    if (a6) {
      uint64_t v17 = 84;
    }
    else {
      uint64_t v17 = 70;
    }
    if (a5) {
      uint64_t v16 = 84;
    }
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_PPDU_Decode_Out time stamp,%s,Handle,%u,PDU_Size,%u,PduType,%u,LoggingDisabled,%c,Emergency,%c\n", (unint64_t)(v13 * (double)(unint64_t)v12), "SPL", 65, "Trace_GN_SUPL_PPDU_Decode_Out", (const char *)v15, a1, a2, a4, v16, v17);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    return LbsOsaTrace_WriteLog(0x12u, __str, v18, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_PPDU_SessionEnd_Out(int a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = (LcsUtils *)mach_continuous_time();
    double v6 = *(double *)&g_MacClockTicksToMsRelation;
    LcsUtils::GetInstance(v5);
    uint64_t v7 = mach_continuous_time();
    std::to_string(&v10, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7));
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v10;
    }
    else {
      uint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: time stamp,%s,PpduHandle,%u,status,%u\n", (unint64_t)(v6 * (double)(unint64_t)v5), "SPL", 65, "Trace_GN_SUPL_PPDU_SessionEnd_Out", (const char *)v8, a1, a2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    return LbsOsaTrace_WriteLog(0x12u, __str, v9, 1, 1);
  }
  return result;
}

size_t Trace_GN_SUPL_PPDU_PduRequest_Out(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unsigned __int16 v11 = (LcsUtils *)mach_continuous_time();
    double v12 = *(double *)&g_MacClockTicksToMsRelation;
    LcsUtils::GetInstance(v11);
    uint64_t v13 = mach_continuous_time();
    std::to_string(&v17, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13));
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v17;
    }
    else {
      uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: time stamp,%s,Handle,%u,ProtocolType,%u,ReqPduType,%u\n", (unint64_t)(v12 * (double)(unint64_t)v11), "SPL", 65, "Trace_GN_SUPL_PPDU_PduRequest_Out", (const char *)v14, a1, a2, a3);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    LbsOsaTrace_WriteLog(0x12u, __str, v15, 1, 1);
  }
  Trace_GN_SUPL_AidReqData(a4);
  return Trace_GN_SUPL_LocationId(a6);
}

uint64_t Trace_gnsSUPL_SlpInfo(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 256))
    {
      case 0:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (result) {
          goto LABEL_15;
        }
        break;
      case 1:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV4,%s\n");
          goto LABEL_13;
        }
        break;
      case 2:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPV6,%s\n");
          goto LABEL_13;
        }
        break;
      case 3:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FQDN,%s\n");
LABEL_13:
          size_t v4 = v3;
          int v5 = 4;
          return LbsOsaTrace_WriteLog(0x12u, __str, v4, v5, 1);
        }
        break;
      default:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
        if (result)
        {
LABEL_15:
          bzero(__str, 0x410uLL);
          unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Address Type,%u\n", v6);
          goto LABEL_16;
        }
        break;
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_16:
      size_t v4 = v2;
      int v5 = 0;
      return LbsOsaTrace_WriteLog(0x12u, __str, v4, v5, 1);
    }
  }
  return result;
}

size_t Trace_GN_SUPL_SuplInitInfo(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (*(unsigned char *)(a1 + 808)) {
      int v3 = 84;
    }
    else {
      int v3 = 70;
    }
    if (*(unsigned char *)(a1 + 5)) {
      uint64_t v4 = 84;
    }
    else {
      uint64_t v4 = 70;
    }
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ProxyMode,%c,Ver,%u,%u,%u,PosMethod,%u,ecall,%u,NotifyType,%u,posTech,%u\n", (unint64_t)v2, "SPL", 65, "Trace_GN_SUPL_SuplInitInfo", v4, *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7), *(unsigned __int8 *)(a1 + 8), *(_DWORD *)(a1 + 12), v3, *(_DWORD *)(a1 + 812), *(unsigned __int8 *)(a1 + 816));
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 1, 1);
  }
  if (*(_DWORD *)(a1 + 272))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: v_SlpId\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 65, "Trace_GN_SUPL_SuplInitInfo");
      LbsOsaTrace_WriteLog(0x12u, __str, v7, 1, 1);
    }
    Trace_gnsSUPL_SlpInfo(a1 + 16);
  }
  if (*(_DWORD *)(a1 + 536))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: E_Slp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 65, "Trace_GN_SUPL_SuplInitInfo");
      LbsOsaTrace_WriteLog(0x12u, __str, v9, 1, 1);
    }
    Trace_gnsSUPL_SlpInfo(a1 + 280);
  }
  if (*(_DWORD *)(a1 + 800))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: p_Slp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 65, "Trace_GN_SUPL_SuplInitInfo");
      LbsOsaTrace_WriteLog(0x12u, __str, v11, 1, 1);
    }
    Trace_gnsSUPL_SlpInfo(a1 + 544);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 1, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v14 = 84;
    if (!*(unsigned char *)(a1 + 817)) {
      uint64_t v14 = 70;
    }
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: QoP valid,%c,horacc,%u,veracc,%u,maxLocAge,%u,delay,%u\n", (unint64_t)v13, "SPL", 65, "Trace_GN_SUPL_SuplInitInfo", v14, *(unsigned __int8 *)(a1 + 820), *(char *)(a1 + 821), *(_DWORD *)(a1 + 824), *(unsigned __int8 *)(a1 + 828));
    return LbsOsaTrace_WriteLog(0x12u, __str, v15, 1, 1);
  }
  return result;
}

double GAL_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = 60 * *(unsigned __int16 *)(a1 + 18);
  uint64_t v2 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  *(void *)&v4.f64[0] = *(_OWORD *)&vcvtq_f64_s64((int64x2_t)v3);
  v3.i64[0] = v2;
  v3.i64[1] = HIDWORD(v2);
  v4.f64[1] = vcvtq_f64_u64(v3).f64[1];
  *(float64x2_t *)(a2 + 24) = vmulq_f64(v4, (float64x2_t)xmmword_22BB44E50);
  uint64_t v5 = *(void *)(a1 + 28);
  v3.i64[0] = v5;
  v3.i64[1] = HIDWORD(v5);
  *(void *)&v4.f64[0] = *(_OWORD *)&vcvtq_f64_u64(v3);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  v4.f64[1] = vcvtq_f64_s64(*(int64x2_t *)&v3).f64[1];
  *(float64x2_t *)(a2 + 40) = vmulq_f64(v4, (float64x2_t)xmmword_22BB44E60);
  uint64_t v6 = *(void *)(a1 + 36);
  v3.i64[0] = (int)v6;
  v3.i64[1] = SHIDWORD(v6);
  *(float64x2_t *)(a2 + 56) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  double v7 = (double)*(__int16 *)(a1 + 48) * 3.57157734e-13;
  *(double *)(a2 + 72) = (double)*(int *)(a1 + 44) * 3.57157734e-13;
  *(double *)(a2 + 80) = v7;
  v4.f64[0] = (double)*(__int16 *)(a1 + 52) * 0.00000000186264515;
  *(double *)(a2 + 88) = (double)*(__int16 *)(a1 + 50) * 3.57157734e-13;
  *(float64_t *)(a2 + 96) = v4.f64[0];
  v4.f64[0] = (double)*(__int16 *)(a1 + 56) * 0.03125;
  *(double *)(a2 + 104) = (double)*(__int16 *)(a1 + 54) * 0.00000000186264515;
  *(float64_t *)(a2 + 112) = v4.f64[0];
  v4.f64[0] = (double)*(__int16 *)(a1 + 60) * 0.00000000186264515;
  *(double *)(a2 + 120) = (double)*(__int16 *)(a1 + 58) * 0.03125;
  *(float64_t *)(a2 + 128) = v4.f64[0];
  *(double *)(a2 + 136) = (double)*(__int16 *)(a1 + 62) * 0.00000000186264515;
  *(_DWORD *)(a2 + 144) = 60 * *(unsigned __int16 *)(a1 + 74);
  uint64_t v8 = *(void *)(a1 + 64);
  v3.i64[0] = (int)v8;
  v3.i64[1] = SHIDWORD(v8);
  v4.f64[0] = (double)*(__int16 *)(a1 + 72);
  *(float64x2_t *)(a2 + 152) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)xmmword_22BB44E70);
  double v9 = (double)*(__int16 *)(a1 + 76) * 2.32830644e-10;
  *(double *)(a2 + 168) = v4.f64[0] * 1.73472348e-18;
  *(double *)(a2 + 176) = v9;
  double result = (double)*(__int16 *)(a1 + 78) * 2.32830644e-10;
  *(double *)(a2 + 184) = result;
  *(_WORD *)(a2 + 194) = *(_WORD *)(a1 + 16);
  *(unsigned char *)(a2 + 197) = *(unsigned char *)(a1 + 82);
  *(unsigned char *)(a2 + 198) = *(unsigned char *)(a1 + 83);
  *(unsigned char *)(a2 + 200) = *(unsigned char *)(a1 + 85);
  *(unsigned char *)(a2 + 201) = *(unsigned char *)(a1 + 86);
  return result;
}

uint64_t Nav_Kalman_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list(a1, "Nav_Kalman_Update_Wrapper: Entry");
  Nav_Kalman_Update(*(void *)(a1 + 176), *(void *)(a1 + 232), *(void *)(a1 + 280), *(void *)(a1 + 104), *(void *)(a1 + 32), *(void *)(a1 + 96), *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 80), *(void *)(a1 + 72), *(unsigned char **)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 120));

  return GNSS_Validate_p_list(a1, "Nav_Kalman_Update_Wrapper:  Exit");
}

uint64_t Gnm29_01RestoreVarMENv(int a1)
{
  *(void *)&v24[2036] = *MEMORY[0x263EF8340];
  bzero(&__s, 0x7FCuLL);
  memset_s(&__s, 0x7FCuLL, 0, 0x7FCuLL);
  __int16 __s = -256;
  char v22 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:PrefLtlTable,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm29_01RestoreVarMENv", a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (a1 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:GOOH Occured\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm29_01RestoreVarMENv");
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    }
    if (g_PrevUsedLtl == 1)
    {
      g_PrevUsedLtl = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0)) {
        goto LABEL_12;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Swapped from Initial To Learned LTL\n");
    }
    else
    {
      g_PrevUsedLtl = 1;
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0)) {
        goto LABEL_12;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Swapped from Learned To Initial LTL\n");
    }
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 3, 1);
  }
LABEL_12:
  if ((Gnm53_43ComposeMeWakeMsg((uint64_t)v24, 2034, (uint64_t)&v23, g_PrevUsedLtl, v2, v3) & 1) == 0)
  {
    uint64_t v9 = Gnm53_25ComputeCalibVarMENv();
    if (!v9)
    {
      if (g_BootMode != 2) {
        return Gnm53_31SendCalibReq();
      }
      Gnm53_24ComputeDefaultVarMENv(v9, v10, v11, v12, v13, v14);
    }
    if ((Gnm53_43ComposeMeWakeMsg((uint64_t)v24, 2034, (uint64_t)&v23, g_PrevUsedLtl, v13, v14) & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Sending error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm29_01RestoreVarMENv");
        LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
      }
      int v23 = 0;
    }
  }
  Gnm26_04SendXRestoreVariableMeNv(&__s);
  ++BYTE2(dword_26AE6D43E);
  LOBYTE(dword_26AE6D43E) = 0;
  uint64_t result = AgpsFsmStartTimer(0x802E06u, 0xFAu);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 87, "Gnm29_01RestoreVarMENv", 1544);
      uint64_t result = LbsOsaTrace_WriteLog(0xBu, __str, v19, 2, 1);
    }
    BYTE1(dword_26AE6D43E) = 0;
  }
  else
  {
    BYTE1(dword_26AE6D43E) = 1;
  }
  return result;
}

void *Gnm29_02HandleMeNvRestoreAck(unsigned __int8 *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1[1])
  {
    int v2 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 87, "Gnm29_02HandleMeNvRestoreAck", a1[1]);
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
      int v2 = 0;
    }
  }
  else
  {
    int v2 = Gnm25_18CheckRestoreStatus(*a1, "LTL:Var ME");
  }
  if (BYTE1(dword_26AE6D43E))
  {
    if (AgpsFsmStopTimer(8400390) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm29_02HandleMeNvRestoreAck", 1545);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
    }
    BYTE1(dword_26AE6D43E) = 0;
  }
  if (v2)
  {
    Gnm10_31SendMEWakeRsp(1);
    Gnm10_29SendFwActivity(1, 0);
    return 0;
  }
  if (BYTE2(dword_26AE6D43E) <= 2u)
  {
    Gnm29_01RestoreVarMENv(0);
    return 0;
  }
  byte_26AE6D442 = 0;
  dword_26AE6D43E = 0;
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v10, 0x400uLL, "ASSERT: %s %d MWL : LTL restore failed after max attempts", "Gnm29_02HandleMeNvRestoreAck", 233);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "Gnm29_02HandleMeNvRestoreAck", v10);
      LbsOsaTrace_WriteLog(0xEu, __str, v9, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm29_02HandleMeNvRestoreAck", "gnm29NvMeZx.cpp", 234, "false && \"LTL restore failed after max attempts\"");
  }
  Gnm03_60BaseBandResetReq(6);
  return &a_GnmResetState;
}

uint64_t Gnm29_03HandleVarMeRestoreNoAck(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_VAR_ME_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm29_03HandleVarMeRestoreNoAck");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (BYTE1(dword_26AE6D43E))
    {
      BYTE1(dword_26AE6D43E) = 0;
      if (BYTE2(dword_26AE6D43E) > 2u)
      {
        byte_26AE6D442 = 0;
        dword_26AE6D43E = 0;
        snprintf(v9, 0x400uLL, "ASSERT: %s %d MWL : LTL restore timeout after max attempts", "Gnm29_03HandleVarMeRestoreNoAck", 279);
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "Gnm29_03HandleVarMeRestoreNoAck", v9);
          LbsOsaTrace_WriteLog(0xEu, __str, v8, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("Gnm29_03HandleVarMeRestoreNoAck", "gnm29NvMeZx.cpp", 280, "false && \"LTL restore timeout after max attempts\"");
      }
      Gnm29_01RestoreVarMENv(0);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm29_03HandleVarMeRestoreNoAck", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm29_04BackupMeNv(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Len,%ubytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm29_04BackupMeNv", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  unsigned __int16 __dst = 0;
  memcpy_s("Gnm29_04BackupMeNv", 299, &__dst, 2u, (const void *)(a1 + 8), 2uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:MENType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm29_04BackupMeNv", __dst);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if ((~__dst & 3) != 0) {
    goto LABEL_20;
  }
  if ((__dst & 0x40) != 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:STLDivBit set by ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm29_04BackupMeNv");
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
    }
    if (g_StlDivergenceIndicator) {
      goto LABEL_18;
    }
    if ((dword_26AE53244 & 0x10000) != 0) {
      goto LABEL_15;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:STLDivBit considered by HSW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm29_04BackupMeNv");
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    }
    Gnm53_56SetStlDivInd();
  }
  if ((g_StlDivergenceIndicator & 1) == 0)
  {
LABEL_15:
    if (!g_IsExtClock)
    {
      uint64_t result = Gnm53_64CopyLearntLTL((unsigned __int8 *)(a1 + 10), (unsigned __int16)(*(_WORD *)(a1 + 4) - 2));
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
  }
LABEL_18:
  bzero(&g_LTLDataPPM, 0x5E2uLL);
  g_AgeingTimeGpsSeconds = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:XO Learnings Dropped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm29_04BackupMeNv");
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
  }
LABEL_20:
  if ((__dst & 0x1C) == 0) {
    return 1;
  }
  uint64_t result = Gnm53_44BackupLearntMENv((unsigned __int8 *)(a1 + 8), *(unsigned __int16 *)(a1 + 4), __dst, v4, v5, v6);
  if (result) {
    return 1;
  }
  return result;
}

size_t Hal_Init(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_Init");
    LbsOsaTrace_WriteLog(0xDu, __str, v1, 4, 1);
  }
  g_HalCallbacks = 0;
  off_26AE6D3C8 = 0;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 73, "Hal_Init");
    return LbsOsaTrace_WriteLog(0xDu, __str, v4, 4, 1);
  }
  return result;
}

size_t Hal_DeInit(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_DeInit");
    LbsOsaTrace_WriteLog(0xDu, __str, v1, 4, 1);
  }
  size_t result = (size_t)gnssOsa_Calloc("Hal_DeInit", 71, 1, 0x18uLL);
  if (result)
  {
    *(void *)(result + 16) = 0;
    AgpsSendFsmMsg(129, 129, 8454656, (unsigned char *)result);
    g_HalCallbacks = 0;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 73, "Hal_DeInit");
      return LbsOsaTrace_WriteLog(0xDu, __str, v4, 4, 1);
    }
  }
  return result;
}

void Hal_DestMissingHandler(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (*(_DWORD *)(a1 + 4) == 8455424)
  {
    unsigned __int16 v4 = *(void **)(a1 + 16);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal_DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
  }
}

uint64_t Hal00_03DefaultMsgHandler()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 69, "Hal00_03DefaultMsgHandler", 519);
    LbsOsaTrace_WriteLog(0xDu, __str, v1, 0, 1);
  }
  return 0;
}

void Hal_SetConfigurations(long long *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = (char *)gnssOsa_Calloc("Hal_SetConfigurations", 122, 1, 0x108uLL);
    if (v2)
    {
      unsigned __int16 v3 = v2;
      long long v4 = *a1;
      long long v5 = a1[1];
      long long v6 = a1[2];
      *(_OWORD *)(v2 + 60) = a1[3];
      *(_OWORD *)(v2 + 44) = v6;
      *(_OWORD *)(v2 + 28) = v5;
      *(_OWORD *)(v2 + 12) = v4;
      long long v7 = a1[4];
      long long v8 = a1[5];
      long long v9 = a1[6];
      *(_OWORD *)(v2 + 124) = a1[7];
      *(_OWORD *)(v2 + 108) = v9;
      *(_OWORD *)(v2 + 92) = v8;
      *(_OWORD *)(v2 + 76) = v7;
      long long v10 = a1[8];
      long long v11 = a1[9];
      long long v12 = a1[10];
      *(_OWORD *)(v2 + 188) = a1[11];
      *(_OWORD *)(v2 + 172) = v12;
      *(_OWORD *)(v2 + 156) = v11;
      *(_OWORD *)(v2 + 140) = v10;
      long long v13 = a1[12];
      long long v14 = a1[13];
      long long v15 = a1[14];
      *(_OWORD *)(v2 + 248) = *(long long *)((char *)a1 + 236);
      *(_OWORD *)(v2 + 236) = v15;
      *(_OWORD *)(v2 + 220) = v14;
      *(_OWORD *)(v2 + 204) = v13;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAL_SET_CFG_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 73, "Hal_SetConfigurations");
        LbsOsaTrace_WriteLog(0xDu, __str, v17, 4, 1);
      }
      AgpsSendFsmMsg(129, 129, 8457728, v3);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx pltcnf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 73, "Hal_SetConfigurations", 513);
    LbsOsaTrace_WriteLog(0xDu, __str, v19, 4, 1);
  }
}

size_t Hal_StartConn(int a1, char a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal_StartConn");
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 4, 1);
  }
  if (!a3)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal_StartConn", 516);
    int v11 = 0;
    return LbsOsaTrace_WriteLog(0xDu, __str, v10, v11, 1);
  }
  size_t result = (size_t)gnssOsa_Calloc("Hal_StartConn", 157, 1, 0x20uLL);
  if (result)
  {
    *(void *)(result + 16) = a3;
    *(_DWORD *)(result + 24) = a1;
    *(unsigned char *)(result + 28) = a2;
    AgpsSendFsmMsg(129, 129, 8454144, (unsigned char *)result);
    if ((a2 & 1) == 0) {
      GnssDbgMgr_SetPlatform(a1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal_StartConn");
      int v11 = 4;
      return LbsOsaTrace_WriteLog(0xDu, __str, v10, v11, 1);
    }
  }
  return result;
}

size_t Hal_StopConn(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_StopConn");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  size_t result = (size_t)gnssOsa_Calloc("Hal_StopConn", 191, 1, 0x18uLL);
  if (result)
  {
    *(void *)(result + 16) = a1;
    AgpsSendFsmMsg(129, 129, 8454656, (unsigned char *)result);
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal_StopConn");
      return LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
    }
  }
  return result;
}

void Hal00_06ReadBufNtf(size_t a1, unsigned __int8 *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
LABEL_12:
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 2, 1);
    return;
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_12;
  }
  long long v4 = gnssOsa_Calloc("Hal00_06ReadBufNtf", 232, 1, 0x20uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    unsigned __int16 v6 = gnssOsa_Calloc("Hal00_06ReadBufNtf", 238, 1, a1);
    v5[2] = v6;
    if (v6)
    {
      memcpy_s("Hal00_06ReadBufNtf", 245, v6, a1, a2, a1);
      *((_WORD *)v5 + 12) = a1;
      AgpsSendFsmMsg(129, 129, 8455424, v5);
    }
    else
    {
      free(v5);
    }
  }
}

void Hal_GnssBaseBandReset(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = gnssOsa_Calloc("Hal_GnssBaseBandReset", 284, 1, 0x18uLL);
    if (v2)
    {
      v2[2] = a1;
      AgpsSendFsmMsg(129, 129, 8454912, v2);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal_GnssBaseBandReset", 516);
    LbsOsaTrace_WriteLog(0xDu, __str, v4, 0, 1);
  }
}

void Hal_SetPowerReportStatus(char a1, uint64_t a2)
{
  unsigned __int16 v4 = gnssOsa_Calloc("Hal_SetPowerReportStatus", 305, 1, 0x18uLL);
  if (v4)
  {
    v4[2] = a2;
    *((unsigned char *)v4 + 12) = a1;
    AgpsSendFsmMsg(129, 129, 8457216, v4);
  }
}

void Hal_NotifyMEInActiveStat(void (*a1)(BOOL))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_NotifyMEInActiveStat");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (a1)
  {
    unsigned __int16 v4 = gnssOsa_Calloc("Hal_NotifyMEInActiveStat", 330, 1, 0xCuLL);
    if (v4)
    {
      off_26AE6D3C8 = a1;
      AgpsSendFsmMsg(129, 129, 8456448, v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "Hal_NotifyMEInActiveStat", 516);
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
  }
}

uint64_t Hal_TriggerTimeMarkPulse(void (*a1)(unsigned int, BOOL))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_TriggerTimeMarkPulse");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t result = (uint64_t)gnssOsa_Calloc("Hal_TriggerTimeMarkPulse", 355, 1, 0x18uLL);
    if (result)
    {
      *(void *)(result + 16) = a1;
      AgpsSendFsmMsg(129, 129, 8457472, (unsigned char *)result);
      return 1;
    }
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 87, "Hal_TriggerTimeMarkPulse", 516);
      LbsOsaTrace_WriteLog(0xDu, __str, v7, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t AscToU1(uint64_t result, unsigned __int8 *a2)
{
  *a2 = 0;
  if (result)
  {
    int v2 = *(unsigned __int8 *)result;
    if ((v2 - 48) > 9)
    {
      if ((v2 - 65) > 5 && (v2 - 97) > 5) {
        return 0;
      }
      unsigned __int8 v3 = 16 * v2 - 112;
    }
    else
    {
      unsigned __int8 v3 = 16 * v2;
    }
    *a2 = v3;
    int v4 = *(unsigned __int8 *)(result + 1);
    char v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
    {
LABEL_12:
      *a2 = v5 + v3;
      return 1;
    }
    if ((v4 - 65) <= 5)
    {
      char v5 = v4 - 55;
      goto LABEL_12;
    }
    if ((v4 - 97) <= 5)
    {
      char v5 = v4 - 87;
      goto LABEL_12;
    }
    return 0;
  }
  return result;
}

uint64_t GM_Adjust_AAD(unsigned int a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (((a2 & a1 & 0x80000000) != 0) != v5
    || (a1 & 0x80000000) == 0 && !*(unsigned char *)(a5 + 48 * a1 + 4)
    || (a2 & 0x80000000) == 0 && !*(unsigned char *)(a5 + 48 * a2 + 4))
  {
    return 0;
  }
  if ((a1 & 0x80000000) != 0)
  {
    uint64_t v22 = a3 + 56 * (int)a2;
    long long v23 = *(_OWORD *)(v22 + 16);
    v32[0] = *(_OWORD *)v22;
    v32[1] = v23;
    v32[2] = *(_OWORD *)(v22 + 32);
    uint64_t v33 = *(void *)(v22 + 48);
    uint64_t v24 = a5 + 48 * (int)a2;
    GM_Aid_NSSS_Meas(v24, 0, (int *)v32);
    int32x2_t v25 = vsub_s32(*(int32x2_t *)&v32[0], *(int32x2_t *)(v24 + 28));
    uint64_t v21 = (v25.i32[1] + 1534500 * v25.i32[0]);
  }
  else
  {
    uint64_t v8 = (int *)(a3 + 56 * a1);
    uint64_t v9 = a5 + 48 * a1;
    int v11 = *(_DWORD *)(v9 + 28);
    int v12 = *(_DWORD *)(v9 + 32);
    size_t v10 = (_DWORD *)(v9 + 28);
    int v14 = *v8;
    int v13 = v8[1];
    int v15 = *v8 - v11;
    if (v15 >= 201601)
    {
      if (v15 >= 604800) {
        int v15 = 604800;
      }
      int v16 = v11 + 403200 * ((v14 + ~(v11 + v15) + 403200) / 0x62700u);
      int v15 = v14 - 403200 - v16;
      int v11 = v16 + 403200;
      *size_t v10 = v11;
    }
    int v17 = v13 - v12;
    if (v15 <= -201601)
    {
      if (v15 <= -604800) {
        int v18 = -604800;
      }
      else {
        int v18 = v15;
      }
      unsigned int v19 = (v18 - v15 - (v15 < 0xFFF6C580)) / 0x62700;
      if (v15 < 0xFFF6C580) {
        ++v19;
      }
      int v20 = 403200 * v19;
      v15 += 403200 + v20;
      *size_t v10 = v11 - 403200 - v20;
    }
    uint64_t v21 = (v17 + 1534500 * v15);
  }
  if ((int)v21 >= 0) {
    unsigned int v26 = v21;
  }
  else {
    unsigned int v26 = -(int)v21;
  }
  uint64_t v27 = (a4 - 1);
  if (a4 - 1 >= 0 && v26 >= 6)
  {
    uint64_t v28 = v27 + 1;
    unsigned __int16 v29 = (int *)(a5 + 48 * v27 + 32);
    do
    {
      if (*((unsigned char *)v29 - 28)) {
        Inc_CA_Chips(v21, v29, v29 - 1);
      }
      v29 -= 12;
    }
    while (v28-- > 1);
  }
  return v21;
}

uint64_t Kep_Check_Ephemeris(int a1, int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  switch(v3)
  {
    case 1:
    case 5:
      LOWORD(v4) = *(_WORD *)(a3 + 18);
      if (!(_WORD)v4) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 3:
      int v4 = *(unsigned __int16 *)(a3 + 18);
      if (v4 == 1024) {
        goto LABEL_8;
      }
      goto LABEL_13;
    case 4:
      int v4 = *(unsigned __int16 *)(a3 + 18);
      if (v4 != 1356) {
        goto LABEL_13;
      }
LABEL_8:
      *(_WORD *)(a3 + 18) = a1;
      int v5 = a2 - *(_DWORD *)(a3 + 20);
      if (v5 <= 302399)
      {
        LOWORD(v4) = a1;
        if (v5 >= -302400) {
          goto LABEL_13;
        }
        LOWORD(v4) = a1 - 1;
      }
      else
      {
        LOWORD(v4) = a1 + 1;
      }
      *(_WORD *)(a3 + 18) = v4;
LABEL_13:
      if (a1 - 512 <= (__int16)v4)
      {
        int v6 = (__int16)v4;
      }
      else
      {
        do
          LOWORD(v4) = v4 + 1024;
        while (a1 - 512 > (__int16)v4);
        int v6 = (__int16)v4;
        *(_WORD *)(a3 + 18) = v4;
      }
      int v7 = -604800;
      int v8 = *(_DWORD *)(a3 + 20);
      int v9 = v8 + 604800 * v6;
      int v10 = a2 + 604800 * a1 - v9;
      if (v10 <= 302399)
      {
        if (v10 >= -302400) {
          goto LABEL_22;
        }
        __int16 v11 = -1;
        int v12 = -604800;
        int v7 = 604800;
      }
      else
      {
        __int16 v11 = 1;
        int v12 = 604800;
      }
      *(_WORD *)(a3 + 18) = v11 + v4;
      v9 += v12;
      v10 += v7;
LABEL_22:
      int v13 = *(_DWORD *)a3;
      if (*(_DWORD *)a3)
      {
        int v14 = v9 - v13;
        if (v14 < 0) {
          int v14 = -v14;
        }
        int v13 = v14 > 0xA8C0;
      }
      if (v10 >= 0) {
        unsigned int v15 = v10;
      }
      else {
        unsigned int v15 = -v10;
      }
      if (!*(unsigned char *)(a3 + 14) && v15 > 0x2A30 || *(unsigned char *)(a3 + 14) == 1 && v15 >= 0x3F49) {
        v13 |= 2u;
      }
      unsigned int v16 = *(unsigned __int8 *)(a3 + 12);
      if (v3 == 6 || (double v17 = 4800.0, v3 == 4) && v16 <= 5) {
        double v17 = 6300.0;
      }
      int v18 = *(_DWORD *)(a3 + 24);
      double v19 = 0.000000314159265;
      double v20 = 7000.0;
      double v21 = 0.1;
      if (v3 != 5 && (v3 != 4 || v16 <= 5))
      {
        BOOL v24 = v3 == 4 && v16 < 6 || v3 == 6;
        BOOL v25 = (((_BYTE)v16 - 14) & 0xFB) == 0 && v3 == 3;
        double v21 = 0.03;
        if (v25) {
          double v21 = 0.25;
        }
        double v20 = 6700.0;
        if (!v24) {
          double v20 = 5800.0;
        }
        double v19 = 0.000000314159265;
        if (!v24) {
          double v19 = 0.0;
        }
      }
      double v26 = *(double *)(a3 + 168);
      int v27 = v13 | 4;
      if (v8 >= 0) {
        int v27 = v13;
      }
      if (v8 <= 604799) {
        int v28 = v27;
      }
      else {
        int v28 = v27 | 8;
      }
      if (v18 < 0) {
        v28 |= 0x10u;
      }
      if (v18 <= 604799) {
        unsigned int v29 = v28;
      }
      else {
        unsigned int v29 = v28 | 0x20;
      }
      if (v26 < v17) {
        v29 |= 0x40u;
      }
      if (v26 > v20) {
        v29 |= 0x80u;
      }
      double v30 = *(double *)(a3 + 200);
      double v31 = *(double *)(a3 + 208);
      if (v30 < 0.0) {
        v29 |= 0x100u;
      }
      if (v30 > v21) {
        v29 |= 0x200u;
      }
      if (v31 < -0.00000198862815) {
        v29 |= 0x400u;
      }
      if (v31 <= v19) {
        return v29;
      }
      else {
        return v29 | 0x800;
      }
    default:
      LOWORD(v4) = *(_WORD *)(a3 + 18);
      goto LABEL_13;
  }
}

uint64_t SBAS_Set_StateTable(unsigned int a1, unsigned int a2, int *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v5 = &dword_26AE64BC8;
  uint64_t v6 = 139;
  int v7 = "SBAS_Set_StateTable:  Replacing Eph,  SV %3d  IOD %3d";
  while (*v5 != 1 || *((unsigned __int8 *)v5 - 4) != a1)
  {
    ++v6;
    v5 += 48;
    if (v6 == 149)
    {
      int v8 = &dword_26AE64BC8;
      uint64_t v6 = 139;
      int v7 = "SBAS_Set_StateTable:  New Eph,  SV %3d  IOD %3d";
      while (1)
      {
        int v9 = *v8;
        v8 += 48;
        if (!v9) {
          break;
        }
        if (++v6 == 149) {
          return 0;
        }
      }
      break;
    }
  }
  EvLog_v(v7, a1, a2);
  *(unint64_t *)((char *)v13[0].n128_u64 + 5) = 0;
  v13[0].n128_u64[0] = 0;
  v13[1] = 0u;
  float64x2_t v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  SBAS_EphInt2Real((uint64_t)a3, (uint64_t)v13);
  SBAS_Eph2RefState(v13, a1, word_26AE652B8, (int)*(double *)&qword_26AE652C0, (uint64_t)&g_DB_SV_State_Table + 192 * v6);
  *(int32x2_t *)__int16 v11 = vmovn_s64(vcvtq_s64_f64(v14));
  int v12 = (int)*(double *)&v15;
  if (!Core_Save_SBAS_Apx(a1, 0, *a3, v11)) {
    EvCrt_v("SBAS_Set_StateTable:  Core_Save_SBAS_Apx() Failed,  SV %3d", a1);
  }
  return 1;
}

char *NK_Range_Chip_Check(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 233)
    || *(_DWORD *)(a3 + 968) != 1
    || *(double *)(a3 + 24752) >= 48.8420427
    || *(_DWORD *)(a3 + 12) != 11)
  {
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v31 = 0;
  memset(v32, 0, sizeof(v32));
  unsigned int v29 = result + 604;
  int v8 = (unsigned __int8 *)(result + 76);
  uint64_t v9 = 4832;
  int v28 = result;
  do
  {
    double v10 = *(double *)(a3 + v9);
    uint64_t v11 = a3 + v6;
    if (fabs(v10) <= 586.104512)
    {
      uint64_t v7 = v7 + *(unsigned __int8 *)(v11 + 2960);
      goto LABEL_27;
    }
    if (*(unsigned char *)(v11 + 2960))
    {
      int v12 = &result[2 * v6];
      char v13 = (*((unsigned __int16 *)v12 + 158) >> 12) - 1;
      unsigned int v14 = 10 * *((unsigned __int16 *)v12 + 422);
      unsigned int v15 = v14 >> v13;
      double v16 = *(double *)(a3 + v9 + 2016);
      if (v16 < 21469.9062 && v15 >= 6)
      {
        uint64_t v30 = v7;
        *((unsigned char *)v32 + v6) = 1;
        int v18 = v8[2];
        int v19 = *v8;
        int v20 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v8);
        double v21 = *(double *)(a3 + v9);
        if (v21 <= 0.0) {
          double v22 = -0.5;
        }
        else {
          double v22 = 0.5;
        }
        double v23 = v21 + v22;
        if (v23 <= 2147483650.0)
        {
          if (v23 >= -2147483650.0) {
            int v24 = (int)v23;
          }
          else {
            int v24 = 0x80000000;
          }
        }
        else
        {
          int v24 = 0x7FFFFFFF;
        }
        ++v31;
        EvCrt_v("Potential ChanReset %d : NKRCC %d %d %d Bad Chip, Resid %d Integ %d CodeLock %d LoopCl %d SNR %d", v6, v18, v19, v20, v24, 1 << v13, v14, v15, v29[v6]);
        uint64_t result = v28;
        uint64_t v7 = v30;
        goto LABEL_27;
      }
    }
    else
    {
      double v16 = *(double *)(a3 + v9 + 2016);
    }
    double v25 = v10 * 0.5 * (v10 * 0.5);
    if (v16 > v25) {
      double v25 = v16;
    }
    *(double *)(a3 + v9 + 2016) = v25;
LABEL_27:
    ++v6;
    v8 += 4;
    v9 += 8;
  }
  while (v6 != 48);
  if (v31 >= 1)
  {
    if (v31 > 4)
    {
      return EvCrt_v("Skipping above ChanResets:  %d large & %d small (probably clock bias adjustment)", v31, v7);
    }
    else
    {
      uint64_t result = EvCrt_v("Applying above ChanResets to %d channels, with %d not reset", v31, v7);
      for (uint64_t i = 0; i != 48; ++i)
      {
        if (*((unsigned char *)v32 + i))
        {
          *(unsigned char *)(a3 + i + 2960) = 0;
          *(_DWORD *)(a3 + 3056 + 4 * i) = 13;
          ++*(unsigned char *)(a3 + 2812);
          *(unsigned char *)(a2 + 6696 + i) = 0;
          *(unsigned char *)(a4 + i + 365) |= 1u;
          *(_DWORD *)(a4 + 416 + 4 * i) = *(_DWORD *)a3;
        }
      }
    }
  }
  return result;
}

uint64_t NK_Comp_PR_DO_Res(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a7 + 19952) = 0u;
  *(_OWORD *)(a7 + 19936) = 0u;
  *(_OWORD *)(a7 + 19920) = 0u;
  *(_OWORD *)(a7 + 19904) = 0u;
  uint64_t v11 = (char *)a3 + 24372;
  *(_OWORD *)(a7 + 19888) = 0u;
  int v12 = (_DWORD *)(a7 + 22732);
  *(_OWORD *)(a7 + 19872) = 0u;
  *(_OWORD *)(a7 + 19856) = 0u;
  *(_OWORD *)(a7 + 19840) = 0u;
  *(_OWORD *)(a7 + 19824) = 0u;
  *(_OWORD *)(a7 + 19808) = 0u;
  *(_OWORD *)(a7 + 19792) = 0u;
  *(_OWORD *)(a7 + 19776) = 0u;
  *(_OWORD *)(a7 + 19760) = 0u;
  *(_OWORD *)(a7 + 19744) = 0u;
  *(_OWORD *)(a7 + 19728) = 0u;
  *(_OWORD *)(a7 + 19712) = 0u;
  *(_OWORD *)(a7 + 19696) = 0u;
  *(_OWORD *)(a7 + 19680) = 0u;
  *(_OWORD *)(a7 + 19664) = 0u;
  *(_OWORD *)(a7 + 19648) = 0u;
  *(_OWORD *)(a7 + 19632) = 0u;
  *(_OWORD *)(a7 + 19616) = 0u;
  *(_OWORD *)(a7 + 19600) = 0u;
  *(_OWORD *)(a7 + 19584) = 0u;
  *(_OWORD *)(a7 + 5584) = 0u;
  *(_OWORD *)(a7 + 5568) = 0u;
  *(_OWORD *)(a7 + 5552) = 0u;
  *(_OWORD *)(a7 + 5536) = 0u;
  *(_OWORD *)(a7 + 5520) = 0u;
  *(_OWORD *)(a7 + 5504) = 0u;
  *(_OWORD *)(a7 + 5488) = 0u;
  *(_OWORD *)(a7 + 5472) = 0u;
  *(_OWORD *)(a7 + 5456) = 0u;
  *(_OWORD *)(a7 + 5440) = 0u;
  *(_OWORD *)(a7 + 5424) = 0u;
  *(_OWORD *)(a7 + 5408) = 0u;
  *(_OWORD *)(a7 + 5392) = 0u;
  *(_OWORD *)(a7 + 5376) = 0u;
  *(_OWORD *)(a7 + 5360) = 0u;
  *(_OWORD *)(a7 + 5344) = 0u;
  *(_OWORD *)(a7 + 5328) = 0u;
  *(_OWORD *)(a7 + 5312) = 0u;
  *(_OWORD *)(a7 + 5296) = 0u;
  *(_OWORD *)(a7 + 5280) = 0u;
  *(_OWORD *)(a7 + 5264) = 0u;
  *(_OWORD *)(a7 + 5248) = 0u;
  *(_OWORD *)(a7 + 5232) = 0u;
  *(_OWORD *)(a7 + 5216) = 0u;
  *(_OWORD *)(a7 + 11144) = 0u;
  *(_OWORD *)(a7 + 11160) = 0u;
  *(_OWORD *)(a7 + 11112) = 0u;
  *(_OWORD *)(a7 + 11128) = 0u;
  *(_OWORD *)(a7 + 11080) = 0u;
  *(_OWORD *)(a7 + 11096) = 0u;
  *(_OWORD *)(a7 + 11048) = 0u;
  *(_OWORD *)(a7 + 11064) = 0u;
  *(_OWORD *)(a7 + 11016) = 0u;
  *(_OWORD *)(a7 + 11032) = 0u;
  *(_OWORD *)(a7 + 10984) = 0u;
  *(_OWORD *)(a7 + 11000) = 0u;
  *(_OWORD *)(a7 + 10952) = 0u;
  *(_OWORD *)(a7 + 10968) = 0u;
  *(_OWORD *)(a7 + 10920) = 0u;
  *(_OWORD *)(a7 + 10936) = 0u;
  *(_OWORD *)(a7 + 10888) = 0u;
  *(_OWORD *)(a7 + 10904) = 0u;
  *(_OWORD *)(a7 + 10856) = 0u;
  *(_OWORD *)(a7 + 10872) = 0u;
  *(_OWORD *)(a7 + 10824) = 0u;
  *(_OWORD *)(a7 + 10840) = 0u;
  *(_OWORD *)(a7 + 10792) = 0u;
  *(_OWORD *)(a7 + 10808) = 0u;
  float64x2_t v106 = (_DWORD *)(a7 + 22732);
  if (!*(unsigned char *)(a4 + 1132) || !*(unsigned char *)(a7 + 24948)) {
    goto LABEL_6;
  }
  if (*v12 >= 0xCu)
  {
    EvCrt_Illegal_Default("NK_Comp_PR_DO_Res", 0x90u);
LABEL_6:
    unsigned int v111 = 0;
    goto LABEL_7;
  }
  unsigned int v111 = (0xF4u >> *v12) & 1;
LABEL_7:
  if (!*(unsigned char *)(a6 + 30))
  {
    uint64_t v16 = 0;
    while (1)
    {
      int v17 = *(_DWORD *)(a1 + 76 + 4 * v16);
      BOOL v18 = !Is_Legal(v17) || v17 == 3;
      if (!v18 && *(unsigned char *)(a7 + 2864 + v16)) {
        break;
      }
      if (++v16 == 48) {
        goto LABEL_22;
      }
    }
    *(unsigned char *)(a6 + 30) = 1;
  }
  if ((*(_DWORD *)v11 - 2) > 4)
  {
LABEL_22:
    *(void *)(a7 + 608) = 0;
    *(_DWORD *)(a7 + 616) = -1;
  }
  else
  {
    if (*((unsigned __int16 *)v11 + 20) - *(__int16 *)(a7 + 18) >= 0) {
      int v13 = -((*((unsigned __int16 *)v11 + 20) - *(__int16 *)(a7 + 18)) & 0x3F);
    }
    else {
      int v13 = (*(_WORD *)(a7 + 18) - *((_WORD *)v11 + 20)) & 0x3F;
    }
    if (v13 > 31) {
      v13 -= 64;
    }
    int v14 = *((_DWORD *)v11 + 9);
    double v15 = a3[3049] + a3[3050] * (double)((int)*(double *)(a7 + 24) - v14 + 604800 * v13);
    *(double *)(a7 + 608) = v15;
    *(_DWORD *)(a7 + 616) = v14;
    *(double *)(a6 + 7304) = v15 * 299792458.0;
  }
  double v118 = 0.0;
  int v19 = (double *)(a6 + 1504);
  *(void *)(a6 + 1496) = 0;
  *(void *)(a6 + 1512) = 0;
  *(void *)(a6 + 1504) = 0;
  double v20 = *(double *)(a7 + 816) - *(double *)(a7 + 824);
  int v117 = 0;
  if (*(unsigned char *)(a7 + 644))
  {
    GPS_To_UTC_DOY(&v117, *(_WORD *)(a7 + 646), *(double *)(a7 + 632), a3[4933]);
    int v21 = v117;
  }
  else
  {
    int v21 = 0;
  }
  double v22 = *(double *)(a7 + 800) * 57.2957795;
  int v110 = v21;
  BOOL v103 = (int *)v11;
  if (UNB_TropModel::Get_Zenith_Delays_Meter((UNB_TropModel *)(a6 + 1520), v20, v22, v21, (double *)(a6 + 1504), (double *)(a6 + 1512)))
  {
    double v23 = *v19 + *(double *)(a6 + 1512);
    uint64_t v24 = a2;
  }
  else
  {
    double v25 = v20 * 0.001;
    if (v20 * 0.001 <= 1.0)
    {
      double v23 = v25 * -0.3248 + 2.4644043 + v25 * 0.0223957 * v25;
      uint64_t v24 = a2;
    }
    else
    {
      uint64_t v24 = a2;
      if (v25 <= 9.0) {
        double v23 = (0.375 - exp((1.0 - v25) * 0.1226)) * -2.2838 + 0.732;
      }
      else {
        double v23 = exp((v25 + -9.0) * -0.1424) * 0.7374;
      }
    }
    *int v19 = v23;
  }
  *(double *)(a6 + 1496) = v23;
  unsigned int v114 = *(unsigned __int8 *)(a6 + 1697);
  unsigned __int8 v26 = *(unsigned char *)(a6 + 1696) + v114;
  unsigned int v27 = v26;
  if (v26 > 0x2Fu) {
    unsigned __int8 v26 = 0;
  }
  *(unsigned char *)(a6 + 1697) = v26;
  int v130 = 0;
  char v131 = 0;
  memset(v124, 0, sizeof(v124));
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  memset(v129, 0, 30);
  uint64_t result = VecSortDscU1(a1 + 604, 0x30u, v132);
  uint64_t v29 = 0;
  long long v30 = v133;
  double v101 = (long long *)(a3 + 1053);
  *(_OWORD *)(a7 + 31345) = *(_OWORD *)v132;
  *(_OWORD *)(a7 + 31361) = v30;
  double v104 = a3;
  *(_OWORD *)(a7 + 31377) = v134;
  double v31 = -0.9;
  double v32 = 1.0;
  double v33 = 25.0;
  *(double *)&uint64_t v34 = 90000.0;
  double v35 = 2.25;
  uint64_t v102 = a7 + 8384;
  do
  {
    uint64_t v36 = v132[v29];
    uint64_t v37 = a1 + 4 * v36;
    int v39 = *(unsigned __int8 *)(v37 + 76);
    unint64_t v38 = (int *)(v37 + 76);
    if (v39 == 6) {
      goto LABEL_67;
    }
    BOOL v41 = v36 >= v114 && v36 < v27;
    uint64_t result = Is_Legal(*v38);
    if (!result || !*(unsigned char *)(a7 + v36 + 2864) || *(__int16 *)(a7 + 2 * v36 + 25476) < 0) {
      goto LABEL_64;
    }
    uint64_t v42 = (_OWORD *)(v24 + 192 * *(unsigned __int16 *)(a7 + 2 * v36 + 25476));
    long long v43 = v42[9];
    v119[8] = v42[8];
    v119[9] = v43;
    long long v44 = v42[11];
    long long v120 = v42[10];
    long long v121 = v44;
    long long v45 = v42[5];
    v119[4] = v42[4];
    v119[5] = v45;
    long long v46 = v42[7];
    v119[6] = v42[6];
    v119[7] = v46;
    long long v47 = v42[1];
    v119[0] = *v42;
    v119[1] = v47;
    long long v48 = v42[3];
    v119[2] = v42[2];
    v119[3] = v48;
    if (DWORD2(v121) == 2)
    {
      if (!*(unsigned char *)(a6 + 5)) {
        goto LABEL_64;
      }
      int v49 = *(__int16 *)(a7 + 18);
      if (v49 - SWORD2(v120) > 2 || !*(_DWORD *)(a6 + 11048) && *(int *)(a7 + 964) < 2) {
        goto LABEL_64;
      }
    }
    else
    {
      if (DWORD2(v121) != 1) {
        goto LABEL_64;
      }
      LOWORD(v49) = *(_WORD *)(a7 + 18);
    }
    uint64_t result = Comp_CurrState(0x258u, (__int16)v49, (uint64_t)v119, (uint64_t)v124, *(double *)(a7 + 24), *(double *)(a1 + 8 * v36 + 1232));
    if (DWORD2(v121) != 1)
    {
      if (!result) {
        goto LABEL_64;
      }
LABEL_60:
      double v116 = 0.0;
      uint64_t v50 = a6 + 4 * v36;
      BOOL v51 = *v38 != *(_DWORD *)(v50 + 7360)
         || WORD6(v129[1]) != *(unsigned __int16 *)(a6 + 2 * v36 + 7744)
         || DWORD2(v129[1]) != *(_DWORD *)(a6 + 4 * v36 + 7552)
         || *(unsigned char *)(a6 + v36 + 7840) == 0;
      unsigned int v105 = v27;
      double v109 = (int *)(v50 + 7360);
      double v112 = (BOOL *)(a7 + v36 + 19968);
      *double v112 = v51;
      double v53 = Comp_SVrange_Sag_Corr(&v122, &v116, (float64x2_t *)(a7 + 664), (float64x2_t *)&v124[0].f64[1]);
      uint64_t v54 = 0;
      float64x2_t v55 = v122;
      uint64_t v56 = (double *)(a7 + 848);
      double v57 = v123;
      do
      {
        double v58 = *(v56 - 1) * v55.f64[1] + *(v56 - 2) * v55.f64[0];
        double v59 = *v56;
        v56 += 3;
        *(double *)((char *)v119 + v54) = v58 + v59 * v57;
        v54 += 8;
      }
      while (v54 != 24);
      uint64_t v60 = a6 + 40 * v36;
      uint64_t v61 = (_DWORD *)(v60 + 4008);
      uint64_t v62 = v60 + 2088;
      AzEl_SinCos((double *)v119, v60 + 4008, v60 + 2088);
      float64x2_t v107 = (int *)v62;
      AzEl_RadDeg((uint64_t)v61, v62);
      *(_DWORD *)(a6 + 4 * v36 + 5928) = *(_DWORD *)a7;
      char v63 = *v112 || v41;
      if ((v63 & 1) != 0 || !*(_DWORD *)(a6 + 11048))
      {
        uint64_t v64 = (int *)v62;
        unsigned int v27 = v105;
      }
      else
      {
        *(void *)&long long v115 = 0;
        if (!R8_EQ((const double *)(a6 + 8 * v36 + 1704), (const double *)&v115))
        {
          uint64_t v64 = (int *)v62;
          unsigned int v27 = v105;
LABEL_89:
          uint64_t v74 = (const double *)(a6 + 8 * v36 + 1704);
          *(void *)&long long v115 = 0;
          if (R8_EQ(v74, (const double *)&v115))
          {
            double v75 = *(double *)(a6 + 40 * v36 + 2104);
            double v76 = v33 / (v32 + v75 * v31 * v75);
            double v77 = 0.0;
          }
          else
          {
            double v77 = *v74;
            double v76 = *v74 * 0.25 * (*v74 * 0.25);
          }
          uint64_t v24 = a2;
          if (*(unsigned char *)v38 == 3 && *(unsigned char *)(a6 + 30))
          {
            int v78 = *v103;
            double v79 = *(double *)&v34;
            if ((*v103 - 2) <= 4)
            {
              *((double *)&v126 + 1) = *((double *)&v126 + 1) - *(double *)(a7 + 608);
              double v79 = 100.0;
              if (v78 != 2) {
                double v79 = v35;
              }
            }
            *(double *)(a6 + 7312) = v79;
            *((double *)&v127 + 1) = v79 + *((double *)&v127 + 1);
          }
          NK_Comp_ith_PR_Res(v36, v110, (uint64_t)v124, (uint64_t)v64, a1, (double *)a6, (double *)a7, v53, v20, v22, v77, v76, v116);
          if (*(unsigned char *)(a7 + v36 + 26208))
          {
            uint64_t v80 = a7 + 24 * v36;
            *(float64x2_t *)(v80 + 26688) = *(float64x2_t *)((char *)v124 + 8);
            *(float64_t *)(v80 + 26704) = v124[1].f64[1];
            *(_OWORD *)(v80 + 27840) = v125;
            *(void *)(v80 + 27856) = v126;
            double v81 = (void *)(a7 + 8 * v36);
            uint64_t v82 = v127;
            v81[3624] = *((void *)&v126 + 1);
            v81[3672] = v82;
            v81[3720] = *((void *)&v127 + 1);
          }
          if (*(unsigned char *)(a7 + v36 + 2912))
          {
            int v83 = *(_DWORD *)a7;
            uint64_t v84 = a6 + 4 * v36;
            double v85 = *(double *)(a7 + 2808 + 8 * v36 + 1640)
                + (*(double *)(a7 + 2808 + 24 * v36 + 488)
                 + *(double *)(a7 + 2808 + 24 * v36 + 496))
                * 0.16
                * *(double *)(a6 + 10888);
            double v86 = (unsigned char *)(a6 + v36 + 6696);
            if (*v86
              && *v38 == *v109
              && ((int v87 = v83 - *(_DWORD *)(v84 + 6120), v88 = a6 + 8 * v36, v89 = *(double *)(v88 + 6312), v89 < v85)
                ? (BOOL v90 = v87 <= 59999)
                : (BOOL v90 = 0),
                  v90))
            {
              *(double *)(v88 + 6312) = v89 + (double)(v87 / 1000);
            }
            else
            {
              unsigned char *v86 = 1;
              *(_DWORD *)(v84 + 6120) = v83;
              *(double *)(a6 + 8 * v36 + 6312) = v85;
            }
          }
          if (v111)
          {
            uint64_t v91 = v34;
            double v92 = v31;
            uint64_t v93 = a1 + 8 * v36;
            double v94 = *(double *)(v93 + 2000);
            int v95 = (unsigned char *)(a7 + v36 + 19536);
            *int v95 = 1;
            double v96 = *(double *)(v93 + 1616);
            if (*v106 == 7) {
              double v97 = 52.0;
            }
            else {
              double v97 = 32.0;
            }
            *(void *)&long long v115 = 0;
            if (R8_EQ((const double *)(v93 + 2000), (const double *)&v115))
            {
              *int v95 = 0;
              EvLog_v("NK_Comp_PR_DO_Meas: Ignore 0.0 AD for SV: %d, Constell: %d");
            }
            else if (fabs(v96 - v94) <= v97)
            {
              double v96 = v94;
            }
            else
            {
              *int v95 = 0;
              EvLog_v("NK_Comp_PR_DO_Meas: DO-AD = %d Hz ! (%d %d %d)");
            }
            uint64_t v34 = v91;
            uint64_t result = NK_Comp_ith_DO_Res(v36, v122.f64, (uint64_t)v124, a7, &v118, v96);
            double v31 = v92;
            double v32 = 1.0;
            double v33 = 25.0;
            double v35 = 2.25;
            if (*v95 && *(unsigned char *)(a7 + v36 + 8536))
            {
              *(unsigned char *)(v102 + v36 + 200) = 1;
              *(double *)(v102 + 8 * v36 + 4040) = *(double *)(v102 + 8 * v36 + 4040) * 0.5;
            }
          }
          else
          {
            uint64_t result = NK_Comp_ith_DO_Res(v36, v122.f64, (uint64_t)v124, a7, &v118, *(double *)(a1 + 8 * v36 + 1616));
          }
          uint64_t v98 = (float64x2_t *)(a7 + 56 * v36);
          v98[1252] = v122;
          v98[1253].f64[0] = v123;
          if (!*v112)
          {
            for (uint64_t i = 0; i != -24; i -= 8)
              *(double *)(a7 + 20072 + 56 * v36 + i) = *(double *)(a6
                                                                                 + 8712
                                                                                 + 24 * v36
                                                                                 + i)
                                                                     - *(double *)((char *)&v123 + i);
          }
          *(double *)(a7 + 56 * v36 + 20080) = (v118 + *(double *)(a7 + 760) * -299792458.0) * 0.001;
          *double v109 = *v38;
          *(_WORD *)(a6 + 2 * v36 + 7744) = WORD6(v129[1]);
          *(_DWORD *)(a6 + 4 * v36 + 7552) = DWORD2(v129[1]);
          *(unsigned char *)(a6 + v36 + 7840) = 1;
          *(double *)(a6 + 8 * v36 + 7888) = v53;
          uint64_t v100 = a6 + 24 * v36;
          *(float64x2_t *)(v100 + 8696) = v122;
          *(double *)(v100 + 8712) = v123;
          goto LABEL_65;
        }
        uint64_t v64 = (int *)v62;
        unsigned int v27 = v105;
        if (!*((_DWORD *)v104 + 2107)) {
          goto LABEL_89;
        }
      }
      int v65 = GNSS_Id_To_Num_Prn_Idx(*v38);
      *(_WORD *)(a5 + 2 * v65 + 178) = *v61;
      *(unsigned char *)(a5 + v65) = *v64;
      uint64_t v66 = a6 + 40 * v36;
      uint64_t v67 = a5 + 8 * v65;
      *(void *)(v67 + 1960) = *(void *)(v66 + 4032);
      *(void *)(v67 + 536) = *(void *)(v66 + 2112);
      uint64_t v68 = a6 + 8 * v36;
      *(void *)(v68 + 1704) = 0;
      if (*(unsigned char *)(a7 + 960) && *v64 >= 1 && *((_DWORD *)v104 + 2107))
      {
        uint64_t v69 = (uint64_t)v64;
        unsigned __int16 v70 = (double *)(v68 + 1704);
        long long v115 = *v101;
        double v71 = GPS_Klob_Iono_Delay((double *)(a7 + 800), (uint64_t)v61, v69, (char *)&v115, *(double *)(a7 + 24));
        *unsigned __int16 v70 = v71;
        unint64_t v72 = *((unsigned __int8 *)v38 + 1);
        double v73 = 1.0;
        if (v72 <= 0xF) {
          double v73 = g_GPS_L1_Iono_SF_Table[v72];
        }
        *unsigned __int16 v70 = v71 * v73;
        uint64_t v64 = v107;
      }
      goto LABEL_89;
    }
    *(unsigned char *)(a7 + v36 + 49) = 1;
    if (result) {
      goto LABEL_60;
    }
LABEL_64:
    int v52 = (_DWORD *)(a6 + 4 * v36);
    v52[1840] = 0;
    *(_WORD *)(a6 + 2 * v36 + 7744) = 0;
    v52[1888] = 0;
    *(void *)(a6 + 8 * v36 + 7888) = 0;
    *(unsigned char *)(a6 + v36 + 7840) = 0;
    v52[1482] = 0;
LABEL_65:
    if (!*(unsigned char *)(a7 + v36 + 2912)) {
      *(unsigned char *)(a7 + v36 + 19968) = 1;
    }
LABEL_67:
    ++v29;
  }
  while (v29 != 48);
  return result;
}

uint64_t SuplSession::SuplSession(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26DF1AFC0;
  *(_OWORD *)(a1 + 24) = 0u;
  int v8 = (SuplVersionNegotiation *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  ASN1T_SessionID::ASN1T_SessionID((ASN1T_SessionID *)(a1 + 64));
  *(unsigned char *)(a1 + 380) = -1;
  *(unsigned char *)(a1 + 384) = -1;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 396) = 0;
  *(void *)(a1 + 401) = 0;
  *(void *)(a1 + 443) = 0;
  *(_DWORD *)(a1 + 450) = 0;
  *(void *)(a1 + 432) = 0x200000100000101;
  *(_WORD *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 442) = 0;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 376) = a3;
  uint64_t v9 = *a4;
  *(_DWORD *)(a1 + 388) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 380) = v9;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 532) = a2;
  *(void *)(a1 + 24) = a1;
  SuplSessionVer2::FillSetCapabilities(v8, a1 + 432, a2);
  *(_DWORD *)(a1 + 8) = a3;
  double v10 = (SuplUtils *)SuplSessionVer2::RequestLppCapPayLoad(v8, a2);
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(SuplUtils::GetInstance(v10) + 272) = a2;
  *(void *)(a1 + 424) = 0;
  return a1;
}

void sub_22BA4FA58(_Unwind_Exception *exception_object)
{
  v1[3] = 0;
  int v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  v1[2] = 0;
  _Unwind_Resume(exception_object);
}

void SuplSession::~SuplSession(SuplSession *this)
{
  *(void *)this = &unk_26DF1AFC0;
  uint64_t Instance = SuplUtils::GetInstance(this);
  if (Instance) {
    SuplUtils::DeleteSuplInitRecd(Instance, *((_DWORD *)this + 94));
  }
  LcsTimer::Release((SuplSession *)((char *)this + 392));
  uint64_t v3 = *((void *)this + 52);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 52) = 0;
  uint64_t v4 = *((void *)this + 53);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 53) = 0;
  int v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    *((void *)this + 63) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 59);
  if (v6)
  {
    *((void *)this + 60) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 44);
  if (v7)
  {
    *((void *)this + 45) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 41);
  if (v8)
  {
    *((void *)this + 42) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 38);
  if (v9)
  {
    *((void *)this + 39) = v9;
    operator delete(v9);
  }
  double v10 = (void *)*((void *)this + 33);
  if (v10)
  {
    *((void *)this + 34) = v10;
    operator delete(v10);
  }
  ASN1T_SETId::U::~U((SuplSession *)((char *)this + 88));
  *((void *)this + 3) = 0;
  uint64_t v11 = (void *)*((void *)this + 4);
  if (v11)
  {
    *((void *)this + 5) = v11;
    operator delete(v11);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t vars8;

  SuplSession::~SuplSession(this);
}

{
  uint64_t vars8;

  SuplSession::~SuplSession(this);

  JUMPOUT(0x230F4E5D0);
}

void sub_22BA4FC00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t SuplSession::InitializeResources(SuplSession *this)
{
  if (*((unsigned __int8 *)this + 380) >= 2u)
  {
    unsigned __int16 v1 = (int *)((char *)this + 392);
    int v2 = *((_DWORD *)this + 94);
    int v3 = *(_DWORD *)(SuplUtils::GetInstance(this) + 24);
    if (v3) {
      int v4 = v3;
    }
    else {
      int v4 = 11000;
    }
    LcsTimer::Init(v1, v2, 0, v4, 0);
  }
  return 0;
}

void SuplSession::ProcessSuplRequest(SuplSession *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t Instance = SuplUtils::GetInstance(this);
  if (Instance)
  {
    int v3 = *((unsigned __int8 *)this + 380);
    if (*((unsigned char *)this + 380))
    {
      if (v3 == 1)
      {
        uint64_t v9 = *((void *)this + 52);
        if (v9) {
          goto LABEL_18;
        }
        double v10 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
        uint64_t v11 = v10;
        if (v10)
        {
          SuplState::SuplState(v10);
          *(void *)uint64_t v11 = &unk_26DF18D70;
        }
        SuplSession::SetSuplStateObject(this, v11);
        uint64_t v9 = *((void *)this + 52);
        if (v9)
        {
LABEL_18:
          SuplState::UpdateState(v9, 7, (uint64_t)this);
          size_t v12 = *((void *)this + 52);
          SuplEndRecd::TerminateSession(v12, 0, 3);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "SPL", 69, "ProcessSuplRequest", 1537);
          LbsOsaTrace_WriteLog(0x12u, __str, v25, 0, 1);
        }
      }
      else if (v3 == 3)
      {
        uint64_t v4 = *(void *)(Instance + 16);
        if (!v4) {
          goto LABEL_28;
        }
        while (*(_DWORD *)v4 != *((_DWORD *)this + 94))
        {
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            goto LABEL_28;
          }
        }
        uint64_t v16 = *(void *)(v4 + 16);
        if (v16 && !*(unsigned char *)(v16 + 17))
        {
          SuplUtils::FillSetCapabilities((unsigned char *)Instance, (uint64_t)this + 432, *(unsigned __int8 *)(*(void *)(v16 + 40) + 5), *((_DWORD *)this + 133));
        }
        else
        {
LABEL_28:
          if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "SPL", 69, "ProcessSuplRequest", 513);
            LbsOsaTrace_WriteLog(0x12u, __str, v18, 0, 1);
          }
        }
        int v19 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
        double v20 = v19;
        if (v19)
        {
          SuplState::SuplState(v19);
          *(void *)double v20 = &unk_26DF18D70;
        }
        SuplSession::SetSuplStateObject(this, v20);
        uint64_t v21 = *((void *)this + 52);
        if (v21)
        {
          SuplState::UpdateState(v21, 0, (uint64_t)this);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "SPL", 69, "ProcessSuplRequest", 1537);
          LbsOsaTrace_WriteLog(0x12u, __str, v23, 0, 1);
        }
      }
      else
      {
        uint64_t v13 = *((void *)this + 52);
        SuplSessionVer2::ProcessSuplRequest((SuplSession *)((char *)this + 24), (unsigned char *)this + 380, v13, (uint64_t)this + 432);
      }
    }
    else
    {
      uint64_t v7 = *((void *)this + 52);
      if (v7)
      {
        SuplState::UpdateState(v7, 7, (uint64_t)this);
        int v8 = (SuplEndRecd *)*((void *)this + 52);
        *(unsigned char *)(*((void *)v8 + 5) + 432) = 18;
        *(unsigned char *)(*((void *)v8 + 5) + 1) = 1;
        std::vector<unsigned char>::vector(__str, 0xBB8uLL);
        v26[0] = __str;
        v26[1] = 0;
        char v27 = 0;
        SuplEndRecd::SetSessionIdPresent(v8);
        (*(void (**)(SuplEndRecd *, void *))(*(void *)v8 + 32))(v8, v26);
        SuplEndRecd::TerminateSession((size_t)v8, 0, 3);
        if (*(void *)__str)
        {
          uint64_t v29 = *(void **)__str;
          operator delete(*(void **)__str);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "ProcessSuplRequest", 1028);
        LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
      }
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ProcessSuplRequest", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
  }
}

void sub_22BA502E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  MEMORY[0x230F4E5C0](v19, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

unsigned char *SuplSession::UpdateTimer(unsigned char *result, int a2)
{
  if (a2 == 6)
  {
    if (result[408] != 1) {
      return result;
    }
    int v2 = (LcsTimer *)(result + 392);
    int v3 = *(_DWORD *)(SuplUtils::GetInstance((SuplUtils *)result) + 32);
    BOOL v4 = v3 == 0;
    int v5 = 10000;
    goto LABEL_7;
  }
  if (a2 == 4)
  {
    if (result[408] != 1) {
      return result;
    }
    int v2 = (LcsTimer *)(result + 392);
    int v3 = *(_DWORD *)(SuplUtils::GetInstance((SuplUtils *)result) + 28);
    BOOL v4 = v3 == 0;
    int v5 = 11000;
LABEL_7:
    if (v4) {
      int v6 = v5;
    }
    else {
      int v6 = v3;
    }
    LcsTimer::SetTimeout(v2, v6);
    return (unsigned char *)LcsTimer::Start(v2);
  }
  uint64_t v7 = (LcsTimer *)(result + 392);

  return (unsigned char *)LcsTimer::Stop(v7);
}

size_t SuplSession::ConnectInd(int *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t Instance = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)a1);
  LcsSuplGlueLayer::SendSuplConnectionStatus(Instance, a1[94], a2);
  if (a2 == 6)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)SuplSession::GetSuplStateObject((SuplSession *)a1) + 16);
    return v5();
  }
  else
  {
    int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "ConnectInd", 514);
      int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    }
    char v21 = -1;
    __int16 v20 = -17;
    *(_DWORD *)std::string __str = -1;
    memset(v23, 0, sizeof(v23));
    int v24 = -1;
    char v25 = 0;
    __int16 v27 = 0;
    int v28 = 0;
    v26[0] = 0;
    *(_DWORD *)((char *)v26 + 3) = 0;
    double v10 = (LcsSuplGlueLayer *)SuplProvider::GetInstance(IsLoggingAllowed);
    uint64_t v11 = a1[94];
    size_t v12 = (uint64_t (***)(void, __int16 *, char *, uint64_t))LcsSuplGlueLayer::GetInstance(v10);
    uint64_t v13 = (SuplPosPayloadHandler *)(**v12)(v12, &v20, __str, v11);
    *((void *)v10 + 6) = *((void *)v10 + 5);
    uint64_t v14 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(v13);
    unsigned __int16 v15 = a1 + 94;
    uint64_t v16 = a1[94];
    uint64_t v17 = LcsSuplGlueLayer::GetInstance(v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v17 + 8))(v17, v16, a2, 0);
    unsigned __int16 v18 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)v14);
    uint64_t v19 = (SuplProvider *)SuplProvider::GetInstance((SuplProvider *)v18);
    return SuplProvider::Disconnect(v19, *v15);
  }
}

uint64_t SuplSession::GetSuplStateObject(SuplSession *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 52))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "GetSuplStateObject", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v3, 0, 1);
    }
    BOOL v4 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
    if (v4)
    {
      int v5 = v4;
      SuplState::SuplState(v4);
      *(void *)int v5 = &unk_26DF18D70;
      *((void *)this + 52) = v5;
    }
    else
    {
      *((void *)this + 52) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "GetSuplStateObject", 1537);
        LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
      }
    }
  }
  return *((void *)this + 52);
}

void sub_22BA50864(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

size_t SuplSession::DisconnectInd(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 376);
  BOOL v4 = *(SuplProvider **)(a1 + 416);
  if (v4 && *((unsigned char *)v4 + 16) != 7)
  {
    SuplState::UpdateState((uint64_t)v4, 7, a1);
    BOOL v4 = (SuplProvider *)SuplEndRecd::TerminateSession(*(void *)(a1 + 416), -1, a2);
  }
  uint64_t Instance = (SuplProvider *)SuplProvider::GetInstance(v4);

  return SuplProvider::Disconnect(Instance, v3);
}

uint64_t SuplSession::ReceiveDataInd(uint64_t result, void *a2)
{
  if (*a2 != a2[1])
  {
    uint64_t v2 = (SuplSession *)result;
    int v3 = (SuplUtils *)LcsTimer::Stop((LcsTimer *)(result + 392));
    *(_DWORD *)(SuplUtils::GetInstance(v3) + 272) = *((_DWORD *)v2 + 133);
    BOOL v4 = *(uint64_t (**)(void))(*(void *)SuplSession::GetSuplStateObject(v2) + 40);
    return v4();
  }
  return result;
}

void SuplSession::OnTimerEvent(SuplSession *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((void *)this + 52))
  {
    if (*((unsigned char *)this + 396) != 1 && LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "SPL", 69, "OnTimerEvent", 1028);
      LbsOsaTrace_WriteLog(0x12u, __str, v3, 0, 1);
    }
    *((unsigned char *)this + 396) = 0;
    std::vector<unsigned char>::vector(__str, 0xBB8uLL);
    v6[0] = __str;
    v6[1] = 0;
    char v7 = 0;
    SuplState::UpdateState(*((void *)this + 52), 7, (uint64_t)this);
    (*(void (**)(void, void *))(**((void **)this + 52) + 32))(*((void *)this + 52), v6);
    SuplEndRecd::TerminateSession(*((void *)this + 52), -8, 17);
    if (*(void *)__str)
    {
      unsigned __int16 v9 = *(void **)__str;
      operator delete(*(void **)__str);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "OnTimerEvent", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
  }
}

void sub_22BA50C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

size_t SuplSession::SetSuplStateObject(SuplSession *this, SuplState *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    size_t result = *((void *)this + 53);
    if (result) {
      size_t result = (*(uint64_t (**)(size_t))(*(void *)result + 8))(result);
    }
    uint64_t v5 = *((void *)this + 52);
    *((void *)this + 52) = a2;
    *((void *)this + 53) = v5;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "SetSuplStateObject", 515);
      return LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t SuplSession::GetSuplInitRecd(SuplSession *this)
{
  uint64_t v2 = *(void *)(SuplUtils::GetInstance(this) + 16);
  if (!v2) {
    return 0;
  }
  while (*(_DWORD *)v2 != *((_DWORD *)this + 94))
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return *(void *)(v2 + 16);
}

uint64_t SuplSession::SetAidMask(SuplSession *this, SuplAsstDataNeededInfo *a2)
{
  *((_WORD *)this + 228) = *(_WORD *)a2;
  *((void *)this + 58) = *((void *)a2 + 1);
  if ((SuplSession *)((char *)this + 456) != a2)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 59, *((char **)a2 + 2), *((char **)a2 + 3), *((void *)a2 + 3) - *((void *)a2 + 2));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 62, *((char **)a2 + 5), *((char **)a2 + 6), *((void *)a2 + 6) - *((void *)a2 + 5));
  }
  *((unsigned char *)this + 520) = *((unsigned char *)a2 + 64);

  return SuplSessionVer2::RequestLppAdPayLoad((SuplSession *)((char *)this + 24));
}

size_t SuplSession::ProcessAbortRequest(SuplSession *this, int a2)
{
  __p[130] = *(void **)MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 52);
  if (v4) {
    goto LABEL_5;
  }
  uint64_t v5 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
  uint64_t v6 = v5;
  if (v5)
  {
    SuplState::SuplState(v5);
    *(void *)uint64_t v6 = &unk_26DF18D70;
  }
  SuplSession::SetSuplStateObject(this, v6);
  uint64_t v4 = *((void *)this + 52);
  if (v4)
  {
LABEL_5:
    SuplState::UpdateState(v4, 7, (uint64_t)this);
    unsigned __int16 v7 = (SuplEndRecd *)*((void *)this + 52);
    if (!a2)
    {
      *(unsigned char *)(*((void *)v7 + 5) + 432) = 18;
      *(unsigned char *)(*((void *)v7 + 5) + 1) = 1;
      std::vector<unsigned char>::vector(__p, 0xBB8uLL);
      v17[0] = __p;
      v17[1] = 0;
      char v18 = 0;
      SuplEndRecd::SetSessionIdPresent(v7);
      (*(void (**)(SuplEndRecd *, void *))(*(void *)v7 + 32))(v7, v17);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    return SuplEndRecd::TerminateSession((size_t)v7, 0, 3);
  }
  else
  {
    int IsLoggingAllowed = (SuplPosPayloadHandler *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__p, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf((char *)__p, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 69, "ProcessAbortRequest", 1537);
      int IsLoggingAllowed = (SuplPosPayloadHandler *)LbsOsaTrace_WriteLog(0x12u, (char *)__p, v11, 0, 1);
    }
    uint64_t Instance = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(IsLoggingAllowed);
    uint64_t v13 = *((unsigned int *)this + 94);
    uint64_t v14 = LcsSuplGlueLayer::GetInstance(Instance);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 8))(v14, v13, 3, 0);
    unsigned __int16 v15 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)Instance);
    uint64_t v16 = (SuplProvider *)SuplProvider::GetInstance((SuplProvider *)v15);
    return SuplProvider::Disconnect(v16, *((_DWORD *)this + 94));
  }
}

void sub_22BA510C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  MEMORY[0x230F4E5C0](v19, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

char *NK_Validate_Cor(char *result, double *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6, unsigned char *a7, unsigned char *a8, uint64_t a9, _WORD *a10, uint64_t a11, uint64_t a12, double *a13, double *a14, uint64_t a15, uint64_t a16, _DWORD *a17, unsigned int *a18, _DWORD *a19, _DWORD *a20,unsigned int *a21,uint64_t a22)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a15 + 7) = 0;
  *(void *)a15 = 0;
  long long v22 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)a16 = *(_OWORD *)a12;
  *(_OWORD *)(a16 + 16) = v22;
  long long v23 = *(_OWORD *)(a12 + 32);
  long long v24 = *(_OWORD *)(a12 + 48);
  long long v25 = *(_OWORD *)(a12 + 64);
  *(void *)(a16 + 80) = *(void *)(a12 + 80);
  *(_OWORD *)(a16 + 48) = v24;
  *(_OWORD *)(a16 + 64) = v25;
  *(_OWORD *)(a16 + 32) = v23;
  unsigned __int8 v26 = (double *)(a4 + 16);
  for (uint64_t i = 40; i != 64; i += 8)
  {
    double v28 = *(v26 - 1) * *(double *)(a12 + 48) + *(v26 - 2) * *(double *)(a12 + 40);
    double v29 = *v26;
    v26 += 3;
    *(double *)(a16 + i) = v28 + v29 * *(double *)(a12 + 56);
  }
  uint64_t v30 = (double *)(a4 + 16);
  do
  {
    double v31 = *(v30 - 1) * *(double *)(a12 + 72) + *(v30 - 2) * *(double *)(a12 + 64);
    double v32 = *v30;
    v30 += 3;
    *(double *)(a16 + i) = v31 + v32 * *(double *)(a12 + 80);
    i += 8;
  }
  while (i != 88);
  for (uint64_t j = 0; j != 11; ++j)
  {
    v97[j] = *(double *)(a16 + j * 8) * *(double *)(a16 + j * 8);
    v92.f64[j] = *(double *)(a3 + j * 8) * 16.0;
  }
  float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
  float64x2_t v35 = vmaxnmq_f64(v92, v34);
  float64x2_t v36 = vmaxnmq_f64(v93, (float64x2_t)xmmword_22BB44EC0);
  float64x2_t v92 = v35;
  float64x2_t v93 = v36;
  float64x2_t v37 = vmaxnmq_f64(v94, v34);
  float64x2_t v94 = v37;
  float64x2_t v38 = vmaxnmq_f64(v95, (float64x2_t)xmmword_22BB44EC0);
  float64x2_t v95 = v38;
  float64x2_t v39 = vmaxnmq_f64(v96, (float64x2_t)vdupq_n_s64(0x4079000000000000uLL));
  float64x2_t v96 = v39;
  double v40 = fabs(*(double *)(a16 + 32));
  *a17 = v40;
  double v41 = 0.0;
  uint64_t v42 = 7;
  do
  {
    double v41 = v41 + *(double *)(a16 + 8 * v42) * *(double *)(a16 + 8 * v42);
    unint64_t v43 = v42 - 4;
    --v42;
  }
  while (v43 > 1);
  *a18 = sqrt(v41);
  double v44 = 0.0;
  *a19 = sqrt(*(double *)(a16 + 48) * *(double *)(a16 + 48)+ 0.0+ *(double *)(a16 + 40) * *(double *)(a16 + 40));
  *a20 = fabs(*(double *)(a16 + 56));
  uint64_t v45 = 10;
  do
  {
    double v44 = v44 + *(double *)(a16 + 8 * v45) * *(double *)(a16 + 8 * v45);
    unint64_t v46 = v45 - 7;
    --v45;
  }
  while (v46 > 1);
  *a21 = sqrt(v44);
  if (*(unsigned char *)a9) {
    goto LABEL_147;
  }
  if (*a7)
  {
    BOOL v47 = 1;
    BOOL v48 = 1;
  }
  else
  {
    BOOL v48 = a13[1] >= 5.0;
    BOOL v47 = a13[2] >= 5.0;
    if (*a13 < 5.0 && (*a2 >= 100000000.0 || v97[0] >= v35.f64[0])) {
      goto LABEL_25;
    }
  }
  if (result[7]
    || *((_DWORD *)result + 7) == 1
    || *((_DWORD *)result + 8) == 2
    || fabs(*(double *)a16) < fmin(*a13, 5.0))
  {
    *(unsigned char *)a15 = 1;
  }
LABEL_25:
  if (v48 || (a2[1] < 100000000.0 ? (BOOL v50 = v97[1] < v35.f64[1]) : (BOOL v50 = 0), v50))
  {
    if (result[12]
      || *((_DWORD *)result + 7) == 1
      || *((_DWORD *)result + 8) == 2
      || fabs(*(double *)(a16 + 8)) < fmin(a13[1], 5.0))
    {
      *(unsigned char *)(a15 + 1) = 1;
    }
  }
  if (v47 || (a2[2] < 100000000.0 ? (BOOL v51 = v97[2] < v36.f64[0]) : (BOOL v51 = 0), v51))
  {
    if (result[17]
      || *((_DWORD *)result + 7) == 1
      || *((_DWORD *)result + 9) == 2
      || fabs(*(double *)(a16 + 16)) < fmin(a13[2], 5.0))
    {
      *(unsigned char *)(a15 + 2) = 1;
    }
  }
  int v52 = *a7;
  if (*a7 || a2[3] < 900.0 && v97[3] < v36.f64[1])
  {
    if (result[5] || *((_DWORD *)result + 10) == 1 || fabs(*(double *)(a16 + 24)) < fmin(a13[3], 0.5))
    {
      *(unsigned char *)(a15 + 3) = 1;
      int v52 = *a7;
    }
    if (v52)
    {
      int v53 = 1;
LABEL_56:
      int v54 = *((_DWORD *)result + 12);
      int v55 = *((_DWORD *)result + 13);
      if (v54 == 1) {
        int v56 = 1;
      }
      else {
        int v56 = 3;
      }
      unsigned int v57 = v56 - (v55 == 1);
      unsigned int v58 = result[2];
      if (v57 <= v58 || v98 < a14[5] && v99 < a14[6] && v100 < a14[7]) {
        goto LABEL_83;
      }
      if (v54) {
        unsigned int v59 = v58 + 2;
      }
      else {
        unsigned int v59 = result[2];
      }
      if (v55) {
        ++v59;
      }
      if (*((_DWORD *)result + 7)) {
        ++v59;
      }
      if (*((_DWORD *)result + 15) || *((_DWORD *)result + 16)) {
        ++v59;
      }
      if (*((_DWORD *)result + 17) || *((_DWORD *)result + 19)) {
        ++v59;
      }
      if (*((_DWORD *)result + 18) || *((_DWORD *)result + 20)) {
        ++v59;
      }
      if (*((_DWORD *)result + 21) || *((_DWORD *)result + 22)) {
        ++v59;
      }
      if (v59 >= 3)
      {
LABEL_83:
        *(unsigned char *)(a15 + 5) = 1;
        int v53 = *a7;
      }
      if (v53) {
        goto LABEL_85;
      }
      goto LABEL_102;
    }
  }
  if (a2[5] < 100000000.0
    && a2[6] < 100000000.0
    && a2[7] < 100000000.0
    && v98 < v37.f64[0]
    && v99 < v37.f64[1]
    && v100 < v38.f64[0])
  {
    int v53 = 0;
    goto LABEL_56;
  }
LABEL_102:
  uint64_t v64 = (int)*a5;
  if (v64 > 8) {
    double v65 = 100000000.0;
  }
  else {
    double v65 = dbl_22BB44ED8[v64];
  }
  if (a2[8] >= v65) {
    goto LABEL_133;
  }
  double v66 = v64 > 8 ? 100000000.0 : dbl_22BB44ED8[v64];
  if (a2[9] >= v66) {
    goto LABEL_133;
  }
  double v67 = v64 > 8 ? 100000000.0 : dbl_22BB44ED8[v64];
  if (a2[10] >= v67 || v101 >= v38.f64[1] || v102 >= v39.f64[0] || v103 >= v39.f64[1]) {
    goto LABEL_133;
  }
LABEL_85:
  int v60 = *((_DWORD *)result + 14);
  if (v60 == 1) {
    unsigned int v61 = 2;
  }
  else {
    unsigned int v61 = 3;
  }
  unsigned int v62 = result[5];
  if (v61 <= v62 || v101 < a14[8] && v102 < a14[9] && v103 < a14[10]) {
    goto LABEL_131;
  }
  if (v62 >= 2 && *(unsigned char *)(a15 + 3)) {
    unsigned int v63 = (v62 - 1);
  }
  else {
    unsigned int v63 = 0;
  }
  if (v60) {
    unsigned int v68 = v63 + 1;
  }
  else {
    unsigned int v68 = v63;
  }
  if (*((_DWORD *)result + 10)) {
    ++v68;
  }
  if (*((_DWORD *)result + 15) || *((_DWORD *)result + 16)) {
    ++v68;
  }
  if (*((_DWORD *)result + 17) || *((_DWORD *)result + 19)) {
    ++v68;
  }
  if (*((_DWORD *)result + 18) || *((_DWORD *)result + 20)) {
    ++v68;
  }
  if (*((_DWORD *)result + 21) || *((_DWORD *)result + 22)) {
    ++v68;
  }
  if (v68 > 2)
  {
LABEL_131:
    char v69 = 1;
    uint64_t v70 = 8;
LABEL_132:
    *(unsigned char *)(a15 + v70) = v69;
    goto LABEL_133;
  }
  if (!result[2] && *((_DWORD *)result + 12) != 1 && *((_DWORD *)result + 13) != 1 && *((_DWORD *)result + 7) != 1)
  {
    char v69 = 0;
    uint64_t v70 = 5;
    goto LABEL_132;
  }
LABEL_133:
  if ((*((_DWORD *)result + 6) - 1) < 2) {
    goto LABEL_134;
  }
  if (result[2] >= 3u && (*(unsigned char *)a15 || *(unsigned char *)(a15 + 1) || *(unsigned char *)(a15 + 2)))
  {
    if (*(unsigned char *)(a15 + 5))
    {
      if (a2[4] < 250000.0)
      {
        uint64_t v71 = 0;
        double v72 = 0.0;
        do
        {
          double v72 = v72 + a2[v71 + 5];
          ++v71;
        }
        while (v71 != 3);
        if (v72 < 250000.0) {
          goto LABEL_134;
        }
      }
    }
  }
  if (!*a7 && a2[4] < 100.0 && v40 < a13[4]) {
LABEL_134:
  }
    *(unsigned char *)(a15 + 4) = 1;
LABEL_147:
  unsigned int v73 = *a18;
  if (*a18 >= 0xC351 && *(unsigned char *)(a15 + 5))
  {
    if (*a7)
    {
LABEL_157:
      if (v73 >= 0x927C01 && *(unsigned char *)(a15 + 5))
      {
        double v80 = 9600000.0 / (double)v73;
        *(float64x2_t *)a12 = vmulq_n_f64(*(float64x2_t *)a12, v80);
        *(double *)(a12 + 16) = v80 * *(double *)(a12 + 16);
        uint64_t v81 = 7;
        do
        {
          *(double *)(a12 + 8 * v81) = v80 * *(double *)(a12 + 8 * v81);
          unint64_t v82 = v81 - 4;
          --v81;
        }
        while (v82 > 1);
        uint64_t v83 = 0;
        *(void *)(a15 + 3) = 0x10000;
        *(_WORD *)a15 = 257;
        *(unsigned char *)(a15 + 2) = 1;
        long long v84 = *(_OWORD *)(a12 + 16);
        *(_OWORD *)a16 = *(_OWORD *)a12;
        *(_OWORD *)(a16 + 16) = v84;
        long long v85 = *(_OWORD *)(a12 + 32);
        long long v86 = *(_OWORD *)(a12 + 48);
        long long v87 = *(_OWORD *)(a12 + 64);
        *(void *)(a16 + 80) = *(void *)(a12 + 80);
        *(_OWORD *)(a16 + 48) = v86;
        *(_OWORD *)(a16 + 64) = v87;
        *(_OWORD *)(a16 + 32) = v85;
        *a8 = 0;
        do
        {
          a13[v83] = 10098990.0;
          a14[v83++] = 1.00979801e14;
        }
        while (v83 != 11);
      }
      goto LABEL_163;
    }
    uint64_t v74 = 0;
    *(_DWORD *)(a15 + 7) = 0;
    *(void *)a15 = 0;
    *(unsigned char *)a9 = 1;
    *(_DWORD *)(a9 + 4) = 96;
    *a8 = 0;
    uint64_t v91 = a7;
    *a7 = 1;
    do
    {
      a13[v74] = 10098990.0;
      a14[v74] = 1.00979801e14;
      *(unsigned char *)(a22 + v74++) = 0;
    }
    while (v74 != 11);
    double v75 = a5;
    double v76 = a8;
    uint64_t v77 = 0;
    *(unsigned char *)(a11 + 412) = 1;
    *(void *)&long long v78 = 0x101010101010101;
    *((void *)&v78 + 1) = 0x101010101010101;
    *(_OWORD *)(a11 + 380) = v78;
    *(_OWORD *)(a11 + 396) = v78;
    *(_OWORD *)(a11 + 364) = v78;
    int32x4_t v79 = vdupq_n_s32(a6);
    do
    {
      *(int32x4_t *)(a11 + 416 + v77) = v79;
      v77 += 16;
    }
    while (v77 != 192);
    size_t result = EvCrt_v("ChanReset ALL : NKVC %d %d", *a18, *a21);
    a8 = v76;
    a5 = v75;
    a7 = v91;
  }
  if (*a7)
  {
    unsigned int v73 = *a18;
    goto LABEL_157;
  }
LABEL_163:
  if (*a5 >= 5) {
    unsigned int v88 = 1200;
  }
  else {
    unsigned int v88 = 600;
  }
  if (*(unsigned char *)(a15 + 3) && fabs(*(double *)(a12 + 24)) > 15000.0) {
    goto LABEL_170;
  }
  if (!*(unsigned char *)(a15 + 8))
  {
    char v89 = 0;
    goto LABEL_174;
  }
  if (*a21 > v88)
  {
LABEL_170:
    char v89 = 0;
    *(unsigned char *)(a15 + 3) = 0;
    *(unsigned char *)(a15 + 8) = 0;
    if ((unsigned __int16)*a10 <= 2u)
    {
      char v89 = 0;
      *a10 = 3;
    }
  }
  else
  {
    char v89 = 1;
  }
LABEL_174:
  if (*a18 >= 0x1D4C1)
  {
    char v89 = 0;
    *(unsigned char *)(a15 + 3) = 0;
    *(unsigned char *)(a15 + 8) = 0;
  }
  char v90 = *(unsigned char *)(a15 + 5);
  *(unsigned char *)(a15 + 6) = v90;
  *(unsigned char *)(a15 + 7) = v90;
  *(unsigned char *)(a15 + 9) = v89;
  *(unsigned char *)(a15 + 10) = v89;
  return result;
}

void Apply_Q_Boost(double a1, unsigned int a2, unsigned int a3, double *a4, unsigned int *a5, double *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  do
  {
    bzero(a6, 8 * a2);
    a6[a2++] = 1.0;
    int v12 = 0;
    if (a1 > 0.0)
    {
      rnk1_core(a4, a2, a1, a6, &v12);
      if (v12) {
        ++*a5;
      }
    }
    --v11;
  }
  while (v11);
}

void Hal_GpioNotification()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((g_HwProduct - 5) >= 0xFFFFFFFC)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No UartLp,Incorrect ntf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 87, "Hal_GpioNotification");
      LbsOsaTrace_WriteLog(0xDu, __str, v3, 2, 1);
    }
  }
  else
  {
    uint64_t v0 = (void (*)(void))g_GpioNotifCB;
    if (g_IsProdMode) {
      BOOL v1 = g_GpioNotifCB == 0;
    }
    else {
      BOOL v1 = 1;
    }
    if (!v1)
    {
      v0();
    }
  }
}

uint64_t Hal25_SetGetLowPowerStatus(int a1, char a2, unsigned __int8 *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a3 && (a1 & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
  }
  if (gnssOsa_MacEnterCriticalSection("Hal25_SetGetLowPowerStatus", 624, &stru_26AE77918))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_13;
  }
  if (a1) {
    _MergedGlobals_8 = a2;
  }
  else {
    *a3 = _MergedGlobals_8;
  }
  uint64_t result = gnssOsa_MacExitCriticalSection("Hal25_SetGetLowPowerStatus", 638, &stru_26AE77918);
  if (result)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
LABEL_13:
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UartLPState\n");
      return LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t Hal_CommsItfInitialize(void)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((g_HwProduct - 5) > 0xFFFFFFFB)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "Hal_CommsInitPcie");
      LbsOsaTrace_WriteLog(0xDu, __str, v11, 4, 1);
    }
    if (!gp_Comm)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx comm obj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 69, "Hal_CommsInitPcie", 513);
      LbsOsaTrace_WriteLog(0xDu, __str, v18, 0, 1);
      return 0;
    }
    if (Hal25_OpenTtyPort())
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 73, "Hal_CommsInitPcie");
        LbsOsaTrace_WriteLog(0xDu, __str, v13, 4, 1);
      }
      return 1;
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx open port\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 69, "Hal_CommsInitPcie", 1293);
      LbsOsaTrace_WriteLog(0xDu, __str, v20, 0, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_CommsInitUart");
      LbsOsaTrace_WriteLog(0xDu, __str, v1, 4, 1);
    }
    if (!gp_Gpio)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gpio obj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "Hal_CommsInitUart", 513);
      LbsOsaTrace_WriteLog(0xDu, __str, v16, 0, 1);
      return 0;
    }
    if (!gp_Comm)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx comm obj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 69, "Hal_CommsInitUart", 513);
      LbsOsaTrace_WriteLog(0xDu, __str, v22, 0, 1);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal25_ResetChip");
      LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
    }
    (*(void (**)(uint64_t))(*(void *)gp_Gpio + 16))(gp_Gpio);
    usleep(0x2710u);
    (*(void (**)(uint64_t))(*(void *)gp_Gpio + 24))(gp_Gpio);
    usleep(0x2710u);
    if (Hal25_OpenTtyPort())
    {
      if (g_IsProdMode)
      {
        v25[0] = &unk_26DF1B018;
        v25[1] = Hal_GpioNotification;
        void v25[3] = v25;
        (*(void (**)(uint64_t, void *))(*(void *)gp_Gpio + 56))(gp_Gpio, v25);
        std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100](v25);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        double v5 = *(double *)&g_MacClockTicksToMsRelation;
        double v6 = (*(double (**)(uint64_t))(*(void *)gp_Comm + 136))(gp_Comm);
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: commTimeout,%fsec\n", (unint64_t)(v5 * (double)v4), "HAL", 73, "Hal_CommsInitUart", v6);
        LbsOsaTrace_WriteLog(0xDu, __str, v7, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 73, "Hal_CommsInitUart");
        LbsOsaTrace_WriteLog(0xDu, __str, v9, 4, 1);
      }
      return 1;
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx open port\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "HAL", 69, "Hal_CommsInitUart", 1293);
      LbsOsaTrace_WriteLog(0xDu, __str, v24, 0, 1);
      return 0;
    }
  }
  return result;
}

void sub_22BA526C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t Hal_CommsItfUpdateStatus(int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Nonfunctional\n");
        goto LABEL_13;
      }
      break;
    case 1:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Gnss-functional\n");
        goto LABEL_13;
      }
      break;
    case 2:
      if (!(*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 120))(gp_Comm))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: enterLowPowerMode fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal_CommsItfUpdateStatus");
          LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
        }
        snprintf(v12, 0x400uLL, "ASSERT: %s %d UARTLP: Gnss::Comm::enterLowPowerMode returned false", "Hal_CommsItfUpdateStatus", 250);
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 69, "Hal_CommsItfUpdateStatus", v12);
          LbsOsaTrace_WriteLog(0xEu, __str, v11, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("Hal_CommsItfUpdateStatus", "hal25IosAdapt.cpp", 251, "false && \"Enter low power failed (RTS pull high)\"");
      }
      Hal25_SetGetLowPowerStatus(1, 2, 0);
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Sending LP ACK, enterLowPowerMode\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 73, "Hal_CommsItfUpdateStatus");
        int v6 = 4;
        goto LABEL_14;
      }
      break;
    case 3:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LowPower\n");
LABEL_13:
        size_t v5 = v3;
        int v6 = 5;
        goto LABEL_14;
      }
      break;
    default:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: default,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal_CommsItfUpdateStatus", a1);
        int v6 = 2;
LABEL_14:
        size_t result = LbsOsaTrace_WriteLog(0xDu, __str, v5, v6, 1);
      }
      break;
  }
  return result;
}

void *Hal_CommsItfDeInitialize(void)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((g_HwProduct - 5) > 0xFFFFFFFB)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal_CommsDeInitPcie");
      LbsOsaTrace_WriteLog(0xDu, __str, v10, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Skipping GnssPort close\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 73, "Hal_CommsDeInitPcie");
      LbsOsaTrace_WriteLog(0xDu, __str, v12, 4, 1);
    }
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 73, "Hal_CommsDeInitPcie");
      return (void *)LbsOsaTrace_WriteLog(0xDu, __str, v14, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal_CommsDeinitUart");
      LbsOsaTrace_WriteLog(0xDu, __str, v1, 4, 1);
    }
    (*(void (**)(uint64_t))(*(void *)gp_Gpio + 16))(gp_Gpio);
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssEn low\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_CommsDeinitUart");
      LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
    }
    (*(void (**)(uint64_t))(*(void *)gp_Comm + 24))(gp_Comm);
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssPort close\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal_CommsDeinitUart");
      LbsOsaTrace_WriteLog(0xDu, __str, v5, 4, 1);
    }
    v16[3] = 0;
    v15[3] = 0;
    (*(void (**)(uint64_t, void *))(*(void *)gp_Gpio + 56))(gp_Gpio, v15);
    std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100](v15);
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal_CommsDeinitUart");
      LbsOsaTrace_WriteLog(0xDu, __str, v7, 4, 1);
    }
    return std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100](v16);
  }
  return result;
}

void sub_22BA52FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Hal_CommsItfWriteData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v4 = g_HwProduct - 5;
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 32))(gp_Comm);
  if (v4 <= 0xFFFFFFFB)
  {
    if (v5)
    {
      if ((*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)gp_Comm + 96))(gp_Comm, a1, a2))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Writesuccess,%u\n", v6, "HAL", 68, "Hal_CommsItfWriteDataUart", a2);
LABEL_10:
          LbsOsaTrace_WriteLog(0xDu, __str, v7, 5, 1);
          return a2;
        }
        return a2;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
        goto LABEL_18;
      }
      return 0xFFFFFFFFLL;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return 0xFFFFFFFFLL;
    }
LABEL_14:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Port\n");
LABEL_19:
    LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
    return 0xFFFFFFFFLL;
  }
  if ((v5 & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)gp_Comm + 96))(gp_Comm, a1, a2) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
LABEL_18:
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_19;
    }
    return 0xFFFFFFFFLL;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Writesuccess,%u\n", v8, "HAL", 68, "Hal_CommsItfWriteDataPcie", a2);
    goto LABEL_10;
  }
  return a2;
}

uint64_t Hal_CommsItfReadData(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 32))(gp_Comm) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Port\n");
LABEL_9:
      LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)gp_Comm + 56))(gp_Comm, a1, a2);
  if (v4 < 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_9;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: read,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 68, "Hal_CommsItfReadData", v5);
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 5, 1);
  }
  return v5;
}

uint64_t Hal_SetReadCbAsync(void (*a1)(unsigned __int8 *, unsigned int))
{
  double v11[4] = *MEMORY[0x263EF8340];
  if (!a1 || !gp_Comm)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal_SetReadCbAsync");
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 4, 1);
    return 0;
  }
  v11[0] = &unk_26DF1B0C8;
  v11[1] = a1;
  v11[3] = v11;
  int v1 = (*(uint64_t (**)(uint64_t, void *))(*(void *)gp_Comm + 80))(gp_Comm, v11);
  std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100](v11);
  if (!v1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: read cb set failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal_SetReadCbAsync");
    LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: read via cb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal_SetReadCbAsync");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  return 1;
}

void sub_22BA53868(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t Hal25_TriggerTimeMarkStrobe(unsigned int *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal25_TriggerTimeMarkStrobe");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if ((g_HwProduct - 5) <= 0xFFFFFFFB)
  {
    if (gp_Gpio)
    {
      (*(void (**)(char *__return_ptr))(*(void *)gp_Gpio + 48))(__str);
      uint64_t v4 = *(void *)__str;
      uint64_t v5 = v14;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TM trigger via gpio interface\n");
LABEL_10:
        LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gpio obj\n");
LABEL_20:
    LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
    return 0;
  }
  if (!gp_Comm)
  {
    int v12 = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx comm obj\n");
    goto LABEL_20;
  }
  (*(void (**)(char *__return_ptr))(*(void *)gp_Comm + 144))(__str);
  uint64_t v4 = *(void *)__str;
  uint64_t v5 = v14;
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TM trigger via comm interface\n");
    goto LABEL_10;
  }
LABEL_11:
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time LB,%llu,UB,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 68, "Hal25_TriggerTimeMarkStrobe", v4, v5);
    LbsOsaTrace_WriteLog(0xDu, __str, v8, 5, 1);
  }
  if (a1) {
    *a1 = ((double)((unint64_t)(v5 + v4) >> 1) / 1000000.0 + 0.5);
  }
  return 1;
}

uint64_t Hal25_OpenTtyPort(void)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 16))(gp_Comm)) {
    return 0;
  }
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)gp_Comm + 112);

  return v0();
}

void std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::~__func()
{
  JUMPOUT(0x230F4E5D0);
}

void *std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DF1B018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DF1B018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::destroy_deallocate(void *__p)
{
  operator delete(__p);
}

uint64_t std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(a1 + 8);
  uint64_t v3 = *a2;

  return v2(v3);
}

uint64_t std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(GnssHal::GpioNotification),std::allocator<void (*)(GnssHal::GpioNotification)>,void ()(GnssHal::GpioNotification)>::target_type()
{
}

void *std::__function::__value_func<void ()(GnssHal::GpioNotification)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::~__func()
{
  JUMPOUT(0x230F4E5D0);
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DF1B0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DF1B0C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::destroy_deallocate(void *__p)
{
  operator delete(__p);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;

  return v3(v4, v5);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int),std::allocator<void (*)(unsigned char *,unsigned int)>,void ()(unsigned char *,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void gnss::GnssAdaptDevice::injectAssistanceFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    unsigned __int16 v6 = *(void **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    unsigned __int16 v8 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20injectAssistanceFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS_16SvPositionSourceENS1_8functionIFvONS_24DecodedExtendedEphemerisEEEENS8_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_18;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a5);
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, v7, v7 - (void)v6);
    dispatch_async(v8, block);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
    if (v6) {
      operator delete(v6);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "injectAssistanceFile", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
}

void sub_22BA54770(_Unwind_Exception *exception_object)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice20injectAssistanceFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS_16SvPositionSourceENS1_8functionIFvONS_24DecodedExtendedEphemerisEEEENS8_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v40[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectAssistanceFile_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    uint64_t v5 = v2 + 344;
    if (__str != (char *)(v2 + 344))
    {
      unsigned __int16 v6 = v39;
      uint64_t v7 = *(void *)(v2 + 368);
      if (v39 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v40);
          (*(void (**)(char *))(*(void *)v39 + 32))(v39);
          float64x2_t v39 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 368) + 24))(*(void *)(v2 + 368), __str);
          (*(void (**)(void))(**(void **)(v2 + 368) + 32))(*(void *)(v2 + 368));
          *(void *)(v2 + 368) = 0;
          float64x2_t v39 = __str;
          (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, v2 + 344);
          (*(void (**)(void *))(v40[0] + 32))(v40);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 344);
          (*(void (**)(char *))(*(void *)v39 + 32))(v39);
          float64x2_t v39 = *(char **)(v2 + 368);
        }
        *(void *)(v2 + 368) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 344, __str);
        (*(void (**)(void))(**(void **)(v2 + 368) + 32))(*(void *)(v2 + 368));
        *(void *)(v2 + 368) = v39;
        float64x2_t v39 = __str;
      }
      else
      {
        float64x2_t v39 = *(char **)(v2 + 368);
        *(void *)(v2 + 368) = v6;
      }
    }
    std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](__str);
    uint64_t v13 = *(void *)(a1 + 104);
    uint64_t v14 = *(void *)(a1 + 112);
    if (v13 == v14)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v36, (uint64_t)"injectAssistanceFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Prediction\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "injectAssistanceFile_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "injectAssistanceFile_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
    }
    else if ((unint64_t)(v14 - v13 - 427673) >= 0xFFFFFFFFFFF979E7)
    {
      int v23 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(v2, v23, (uint64_t)v34);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
      unsigned int v24 = GNS_EeInjectOrbitData(v23, *(signed __int8 **)(a1 + 104), *(_DWORD *)(a1 + 112) - *(void *)(a1 + 104));
      if (v24 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EESize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "injectAssistanceFile_block_invoke", *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
          LbsOsaTrace_WriteLog(0x18u, __str, v26, 4, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "injectAssistanceFile_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v24, (uint64_t)v33, "injectAssistanceFile_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut((gnss::GnssAdaptDevice *)v2, v23);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EeInjectOrbitData Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "injectAssistanceFile_block_invoke", 257, v24);
          LbsOsaTrace_WriteLog(0x18u, __str, v30, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 68, "injectAssistanceFile_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v32, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v35, (uint64_t)"injectAssistanceFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx File size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "injectAssistanceFile_block_invoke", 515, *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "injectAssistanceFile_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v37, (uint64_t)"injectAssistanceFile_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "injectAssistanceFile_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "injectAssistanceFile_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22BA55154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), a2 + 40);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 9), a2 + 72);
  v3[13] = 0;
  v3[14] = 0;
  v3 += 13;
  v3[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, *(const void **)(a2 + 104), *(void *)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
}

void sub_22BA55248(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](a1 + 9);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

void gnss::GnssAdaptDevice::injectRtiFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice13injectRtiFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS1_8functionIFvONS_10DecodedRtiEEEENS7_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_1;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, v6, v6 - (void)v5);
    dispatch_async(v7, block);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    if (v5) {
      operator delete(v5);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "injectRtiFile", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
}

void sub_22BA554C0(_Unwind_Exception *exception_object)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice13injectRtiFileEONSt3__16vectorIhNS1_9allocatorIhEEEENS1_8functionIFvONS_10DecodedRtiEEEENS7_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v40[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectRtiFile_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    uint64_t v5 = v2 + 376;
    if (__str != (char *)(v2 + 376))
    {
      uint64_t v6 = v39;
      uint64_t v7 = *(void *)(v2 + 400);
      if (v39 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v40);
          (*(void (**)(char *))(*(void *)v39 + 32))(v39);
          float64x2_t v39 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 400) + 24))(*(void *)(v2 + 400), __str);
          (*(void (**)(void))(**(void **)(v2 + 400) + 32))(*(void *)(v2 + 400));
          *(void *)(v2 + 400) = 0;
          float64x2_t v39 = __str;
          (*(void (**)(void *, uint64_t))(v40[0] + 24))(v40, v2 + 376);
          (*(void (**)(void *))(v40[0] + 32))(v40);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 376);
          (*(void (**)(char *))(*(void *)v39 + 32))(v39);
          float64x2_t v39 = *(char **)(v2 + 400);
        }
        *(void *)(v2 + 400) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 376, __str);
        (*(void (**)(void))(**(void **)(v2 + 400) + 32))(*(void *)(v2 + 400));
        *(void *)(v2 + 400) = v39;
        float64x2_t v39 = __str;
      }
      else
      {
        float64x2_t v39 = *(char **)(v2 + 400);
        *(void *)(v2 + 400) = v6;
      }
    }
    std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](__str);
    uint64_t v13 = *(void *)(a1 + 104);
    uint64_t v14 = *(void *)(a1 + 112);
    if (v13 == v14)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v36, (uint64_t)"injectRtiFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FileStore\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "injectRtiFile_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "injectRtiFile_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
      }
    }
    else if (v14 - v13 == 160)
    {
      int v15 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(v2, v15, (uint64_t)v34);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
      unsigned int v16 = GNS_EeInjectRtiData(v15, *(signed __int8 **)(a1 + 104), *(_DWORD *)(a1 + 112) - *(void *)(a1 + 104));
      if (v16 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RtiSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "injectRtiFile_block_invoke", *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
          LbsOsaTrace_WriteLog(0x18u, __str, v18, 4, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v19 = mach_continuous_time();
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "injectRtiFile_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v16, (uint64_t)v33, "injectRtiFile_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut((gnss::GnssAdaptDevice *)v2, v15);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EEInjectRti,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 69, "injectRtiFile_block_invoke", 257, v16);
          LbsOsaTrace_WriteLog(0x18u, __str, v30, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 68, "injectRtiFile_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v32, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v35, (uint64_t)"injectRtiFile_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "injectRtiFile_block_invoke", 515, *(_DWORD *)(a1 + 112) - *(_DWORD *)(a1 + 104));
        LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "injectRtiFile_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v37, (uint64_t)"injectRtiFile_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "injectRtiFile_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "injectRtiFile_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  return result;
}

void sub_22BA55E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), a2 + 40);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 9), a2 + 72);
  v3[13] = 0;
  v3[14] = 0;
  v3 += 13;
  v3[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, *(const void **)(a2 + 104), *(void *)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
}

void sub_22BA55F88(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE104c40_ZTSKNSt3__16vectorIhNS_9allocatorIhEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](a1 + 9);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

void gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, long long *a3)
{
  int v4 = (int)a1;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    if (a3)
    {
      uint64_t v6 = DeviceInstance;
      char v7 = *((unsigned char *)a3 + 16);
      long long v13 = *a3;
      *(_OWORD *)uint64_t v14 = *(long long *)((char *)a3 + 17);
      *(void *)&v14[15] = *((void *)a3 + 4);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Api,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse", *((_DWORD *)a3 + 1), *((_DWORD *)a3 + 2));
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 4, 1);
      }
      unsigned __int16 v10 = *(NSObject **)(v6 + 288);
      *(void *)std::string __str = MEMORY[0x263EF8330];
      uint64_t v16 = 0x40000000;
      uint64_t v17 = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke;
      unsigned __int16 v18 = &__block_descriptor_tmp_30;
      uint64_t v19 = v6;
      long long v20 = v13;
      char v21 = v7;
      *(_OWORD *)unsigned __int16 v22 = *(_OWORD *)v14;
      *(void *)&v22[15] = *(void *)&v14[15];
      int v23 = v4;
      dispatch_async(v10, __str);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EeMsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse", 513);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
  }
}

void *___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v54 = 0;
  uint64_t v2 = *(void *)(v1 + 264);
  if (!v2) {
    goto LABEL_49;
  }
  uint64_t v4 = v1 + 264;
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = v1 + 264;
  uint64_t v7 = *(void *)(v1 + 264);
  do
  {
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      unsigned __int16 v10 = (uint64_t *)v7;
    }
    else {
      unsigned __int16 v10 = (uint64_t *)(v7 + 8);
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 != v4 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v13 = v1 + 264;
    do
    {
      unsigned int v14 = *(_DWORD *)(v2 + 32);
      BOOL v15 = v14 >= v5;
      if (v14 >= v5) {
        uint64_t v16 = (uint64_t *)v2;
      }
      else {
        uint64_t v16 = (uint64_t *)(v2 + 8);
      }
      if (v15) {
        uint64_t v13 = v2;
      }
      uint64_t v2 = *v16;
    }
    while (*v16);
    if (v13 == v4 || v5 < *(_DWORD *)(v13 + 32)) {
      uint64_t v13 = v1 + 264;
    }
    std::function<void ()(gnss::Result)>::operator=(v53, v13 + 40);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer((uint64_t **)(v1 + 256), (uint64_t *)v6);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v6 + 40));
    operator delete((void *)v6);
    if (v54)
    {
      int v17 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v1, *(_DWORD *)(a1 + 48));
      int v18 = *(_DWORD *)(a1 + 44);
      if (v18)
      {
        if (v18 == 1)
        {
          if (*(void *)(v1 + 368))
          {
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v51, v1 + 344);
            uint64_t v36 = 0;
            float64x2_t v37 = &v36;
            uint64_t v38 = 0x4802000000;
            float64x2_t v39 = __Block_byref_object_copy__4;
            double v40 = __Block_byref_object_dispose__4;
            LOBYTE(v41) = 0;
            char v43 = *(unsigned char *)(a1 + 56);
            long long v42 = *(_OWORD *)(a1 + 64);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v27 = mach_continuous_time();
              unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ORB Data StartGpsSecs,%llu,EndGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", v37[6], v37[7]);
              LbsOsaTrace_WriteLog(0x18u, __str, v28, 4, 1);
            }
            uint64_t v29 = *(NSObject **)(v1 + 296);
            v49[0] = MEMORY[0x263EF8330];
            v49[1] = 1174405120;
            v49[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2;
            v49[3] = &unk_26DF1B1D0;
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100]((uint64_t)v50, (uint64_t)v51);
            v49[4] = &v36;
            dispatch_async(v29, v49);
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v50);
            _Block_object_dispose(&v36, 8);
            std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v51);
          }
        }
        else if (v18 == 2)
        {
          if (*(void *)(v1 + 400))
          {
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v51, v1 + 376);
            uint64_t v36 = 0;
            float64x2_t v37 = &v36;
            uint64_t v38 = 0x3802000000;
            float64x2_t v39 = __Block_byref_object_copy__21_0;
            LOBYTE(v42) = *(unsigned char *)(a1 + 56);
            uint64_t v19 = *(void *)(a1 + 64);
            double v40 = __Block_byref_object_dispose__22_0;
            uint64_t v41 = v19;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v20 = mach_continuous_time();
              unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RTI Data StartGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", v37[5]);
              LbsOsaTrace_WriteLog(0x18u, __str, v21, 4, 1);
            }
            unsigned __int16 v22 = *(NSObject **)(v1 + 296);
            block[0] = MEMORY[0x263EF8330];
            block[1] = 1174405120;
            block[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_24;
            block[3] = &unk_26DF1B208;
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100]((uint64_t)v48, (uint64_t)v51);
            void block[4] = &v36;
            dispatch_async(v22, block);
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v48);
            _Block_object_dispose(&v36, 8);
            std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v51);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ApiState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 87, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 262, *(_DWORD *)(a1 + 44));
          LbsOsaTrace_WriteLog(0x18u, __str, v31, 2, 1);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ApiType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
      }
      unsigned __int16 v32 = *(NSObject **)(v1 + 296);
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 1174405120;
      v44[2] = ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_27;
      v44[3] = &__block_descriptor_tmp_28_0;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v53);
      int v46 = v17;
      dispatch_async(v32, v44);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v33 = mach_continuous_time();
        unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Ee Type,%u,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 73, "Ga04_01HandleGnsEeStatusResponse_block_invoke", *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 44));
        LbsOsaTrace_WriteLog(0x18u, __str, v34, 4, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v45);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lut Hdl NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 87, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 516);
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 2, 1);
    }
  }
  else
  {
LABEL_49:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lut Hdl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga04_01HandleGnsEeStatusResponse_block_invoke", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v53);
}

void sub_22BA569D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  _Block_object_dispose(&a16, 8);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](&a52);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v52 - 104));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c60_ZTSNSt3__18functionIFvON4gnss24DecodedExtendedEphemerisEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t __Block_byref_object_copy__21_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c46_ZTSNSt3__18functionIFvON4gnss10DecodedRtiEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga04_01HandleGnsEeStatusResponseE15e_gnsEE_MsgTypejP17s_gnsEE_ApiStatus_block_invoke_2_27(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

uint64_t std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(gnss::DecodedRti &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t DD_Delete_Bad_BDS_Data(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 + 3990;
  unsigned int v5 = a3 + 3065;
  uint64_t v6 = 12952;
  uint64_t v7 = 15024;
  do
  {
    uint64_t v8 = a3[3056];
    if (*(unsigned char *)(v8 + v3))
    {
      *(_WORD *)(result + 2 * v3) = 255;
      *(unsigned char *)(v8 + v3) = 0;
      *(unsigned char *)(a3[3054] + v3) = 0;
      *(unsigned char *)(a3[3058] + v3) = 0;
      *((_DWORD *)v5 + 24) = 0;
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *(_OWORD *)unsigned int v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *(unsigned char *)(a3[3064] + v3) = 0;
      *(unsigned char *)(a3[3061] + v3) = 1;
      uint64_t v9 = p_NV + v7;
      *(void *)(v9 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_OWORD *)(v9 + 48) = 0uLL;
      *(_OWORD *)(v9 + 64) = 0uLL;
      *(_OWORD *)(v9 + 80) = 0uLL;
      *(_DWORD *)(v9 + 96) = 0;
    }
    if (*(unsigned char *)(a3[3057] + v3))
    {
      *(unsigned char *)(a2 + v3) = -1;
      *(unsigned char *)(a3[3057] + v3) = 0;
      *(unsigned char *)(a3[3055] + v3) = 0;
      *(unsigned char *)(a3[3060] + v3) = 0;
      *(_OWORD *)((char *)v4 + 28) = 0uLL;
      _OWORD *v4 = 0uLL;
      v4[1] = 0uLL;
      *(unsigned char *)(a3[3064] + v3) = 0;
      unsigned __int16 v10 = (_OWORD *)(p_NV + v6);
      *((void *)v10 - 1) = 0xFFFFFFFFLL;
      *unsigned __int16 v10 = 0uLL;
      v10[1] = 0uLL;
      *(_OWORD *)((char *)v10 + 28) = 0uLL;
    }
    ++v3;
    v6 += 56;
    v7 += 112;
    uint64_t v4 = (_OWORD *)((char *)v4 + 44);
    unsigned int v5 = (void *)((char *)v5 + 100);
  }
  while (v3 != 37);
  return result;
}

uint64_t DD_Delete_Inhib_BDS_Data(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  unsigned int v5 = a4 + 3990;
  uint64_t v6 = (char *)a4 + 28220;
  uint64_t v7 = 15024;
  uint64_t v8 = 12952;
  do
  {
    if (*(unsigned char *)(result + v4))
    {
      *(_WORD *)(a2 + 2 * v4) = 255;
      *(unsigned char *)(a4[3056] + v4) = 0;
      *(unsigned char *)(a4[3054] + v4) = 0;
      *(unsigned char *)(a4[3058] + v4) = 0;
      uint64_t v9 = v6 - 3700;
      *((_DWORD *)v9 + 24) = 0;
      *((_OWORD *)v9 + 4) = 0uLL;
      *((_OWORD *)v9 + 5) = 0uLL;
      *((_OWORD *)v9 + 2) = 0uLL;
      *((_OWORD *)v9 + 3) = 0uLL;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *((_OWORD *)v9 + 1) = 0uLL;
      *(unsigned char *)(a4[3059] + v4) = 0;
      *((_DWORD *)v6 + 24) = 0;
      *((_OWORD *)v6 + 4) = 0uLL;
      *((_OWORD *)v6 + 5) = 0uLL;
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *(unsigned char *)(a4[3064] + v4) = 0;
      *(unsigned char *)(a4[3061] + v4) = 1;
      uint64_t v10 = p_NV + v7;
      *(void *)(v10 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      *(_OWORD *)(v10 + 32) = 0uLL;
      *(_OWORD *)(v10 + 48) = 0uLL;
      *(_OWORD *)(v10 + 64) = 0uLL;
      *(_OWORD *)(v10 + 80) = 0uLL;
      *(_DWORD *)(v10 + 96) = 0;
      *(unsigned char *)(a3 + v4) = -1;
      *(unsigned char *)(a4[3057] + v4) = 0;
      *(unsigned char *)(a4[3055] + v4) = 0;
      *(unsigned char *)(a4[3060] + v4) = 0;
      *(_OWORD *)((char *)v5 + 28) = 0uLL;
      *unsigned int v5 = 0uLL;
      v5[1] = 0uLL;
      uint64_t v11 = (_OWORD *)(p_NV + v8);
      *((void *)v11 - 1) = 0xFFFFFFFFLL;
      *uint64_t v11 = 0uLL;
      v11[1] = 0uLL;
      *(_OWORD *)((char *)v11 + 28) = 0uLL;
    }
    ++v4;
    v7 += 112;
    v8 += 56;
    unsigned int v5 = (_OWORD *)((char *)v5 + 44);
    v6 += 100;
  }
  while (v4 != 37);
  return result;
}

uint64_t DD_Check_Age_BDS_Data(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if ((int)result < 1) {
    return result;
  }
  int v6 = result;
  uint64_t v7 = 0;
  int v8 = 0;
  char v9 = 0;
  uint64_t v10 = (char *)a5 + 39302;
  uint64_t v27 = (int *)a5 + 8387;
  int v11 = result + 900;
  if ((int)result <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = result;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = a5[3058];
  int v30 = (result - a2 / 0x3E8) & ~((int)(result - a2 / 0x3E8) >> 31);
  uint64_t v15 = 24520;
  do
  {
    if (!*(unsigned char *)(v14 + v7)) {
      goto LABEL_17;
    }
    int v16 = *(_DWORD *)((char *)a5 + v15);
    if (v16 < v13 && v16 >= 1)
    {
LABEL_15:
      char v9 = 1;
      *(unsigned char *)(a5[3056] + v7) = 1;
      goto LABEL_17;
    }
    if (v16)
    {
      if (v16 > v11)
      {
        ++v8;
        if (!*v10) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)((char *)a5 + v15) = v30;
    }
LABEL_17:
    ++v7;
    v15 += 100;
  }
  while (v7 != 37);
  if (v8 >= 1)
  {
    EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future EPH, %d", v8);
    if (*v10) {
      EvLog("DD_Check_Age_BDS_Data:  Skip Future Check");
    }
  }
  uint64_t v18 = 0;
  int v19 = 0;
  if (v6 <= 15724800) {
    int v20 = 15724800;
  }
  else {
    int v20 = v6;
  }
  int v21 = v20 - 15724800;
  uint64_t v22 = 31920;
  do
  {
    if (*(unsigned char *)(a5[3060] + v18))
    {
      int v23 = *(_DWORD *)((char *)a5 + v22);
      if (v23 >= v21 || v23 < 1)
      {
        if (v23)
        {
          if (v23 > v11)
          {
            ++v19;
            EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future ALM, SV %d age %d thresh %d %d %d", v18 + 1, (v6 - v23) / 604800, 0, v26, v27);
            if (!*v10)
            {
              char v9 = 1;
              *(unsigned char *)(a5[3057] + v18) = 1;
            }
          }
        }
        else
        {
          *(_DWORD *)((char *)a5 + v22) = v30;
        }
      }
      else
      {
        char v9 = 1;
        *(unsigned char *)(a5[3057] + v18) = 1;
        EvLog_v("DD_Check_Age_BDS_Data:  Deleting Old ALM, SV %d age %d thresh %d %d %d", v18 + 1, (v6 - v23) / 604800, (v6 - v21) / 604800, v26, v27);
      }
    }
    ++v18;
    v22 += 44;
  }
  while (v18 != 37);
  if (v19 >= 1)
  {
    EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future ALM, %d", v19);
    if (*v10) {
      EvLog("DD_Check_Age_BDS_Data:  Skip Future Check");
    }
  }
  if (v27[1])
  {
    int v25 = *v27;
    if (*v27 >= v21 || v25 < 1)
    {
      if (v25)
      {
        if (v25 > v11)
        {
          EvLog_v("DD_Check_Age_BDS_Data:  Deleting Future BGTO, %d %d", *v27, v11);
          if (!*v10) {
            goto LABEL_43;
          }
          EvLog("DD_Check_Age_BDS_Data:  Skip Future Check");
        }
      }
      else
      {
        *uint64_t v27 = v30;
      }
    }
    else
    {
LABEL_43:
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0;
      v27[4] = 0;
    }
  }
  __n128 result = a3;
  if (v9)
  {
    return DD_Delete_Bad_BDS_Data(a3, a4, a5);
  }
  return result;
}

char *DD_Proc_BDS_Data(char *result, uint64_t a2, uint64_t a3, int *a4, void *a5)
{
  if (*(unsigned __int8 *)(a2 + 6) >= 6u)
  {
    int v5 = *(unsigned __int16 *)(a2 + 56);
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    if (v5)
    {
      int v7 = (v6 >> 8) & 7;
      if ((v7 - 1) >= 5) {
        return EvLog_v("DD_BDS_Data:  Bad SF Num %d", v7);
      }
      *(unsigned char *)(a2 + 12) = v7;
      if (v5 == 1023)
      {
        return DD_Proc_BDS_D1_Data(result, a2, a3, a4, a5);
      }
    }
    else
    {
      if ((v6 & 0x3FF8000) == 0x3890000)
      {
        int v7 = 0;
        return EvLog_v("DD_BDS_Data:  Bad SF Num %d", v7);
      }
      return EvCrt_v("DD_BDS_Data:  Preamble Fail");
    }
  }
  return result;
}

char *DD_Proc_BDS_D1_Data(char *result, uint64_t a2, uint64_t a3, int *a4, void *a5)
{
  char v9 = (int *)result;
  uint64_t v62 = *MEMORY[0x263EF8340];
  unsigned int v10 = *(unsigned __int8 *)(a2 + 12);
  if (*(unsigned char *)(a2 + 12) && *(int *)a3 >= 4)
  {
    double v11 = *(double *)(a3 + 24) + -14.0;
    if (v11 < 0.0) {
      double v11 = v11 + 604800.0;
    }
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    double v14 = 7.0;
    if (v13 <= 2147483650.0)
    {
      double v14 = -8.0;
      if (v13 >= -2147483650.0) {
        double v14 = (double)((int)v13 % 30);
      }
    }
    double v15 = v14 * 0.166666667 + 4.5;
    if (v10 != (char)((int)v15
                     - 5 * ((((103 * (int)v15) & 0x8000) != 0) + (((103 * (int)v15) >> 8) >> 1))
                     + 1))
    {
      __n128 result = EvCrt_v("DD_Proc_BDS_D1_Data:  SF Num Error %d %d", *(unsigned __int8 *)(a2 + 12), (char)((int)v15- 5 * ((((103 * (int)v15) & 0x8000) != 0) + (((103 * (int)v15) >> 8) >> 1))+ 1));
      unsigned int v10 = 0;
      *(unsigned char *)(a2 + 12) = 0;
    }
  }
  int v16 = *(unsigned __int16 *)(a2 + 56);
  if ((v16 & 2) != 0)
  {
    unsigned int v17 = v10 >= 4 ? (*(_DWORD *)(a2 + 20) >> 2) & 0x7F : 0;
    *(unsigned char *)(a2 + 13) = v17;
    uint64_t v18 = *(unsigned __int8 *)(a2 + 8);
    if (v18 <= 0x24)
    {
      switch(v10)
      {
        case 0u:
          return (char *)EvLog("DD_Proc_BDS_D1_Data:  Bad SF Num!");
        case 1u:
        case 2u:
        case 3u:
          if (v18 <= 4) {
            return EvLog_v("DD_BDS_D1_Eph_SF:  bad SV, SV %d ");
          }
          if ((v18 + 1) <= 5u) {
            char v19 = -1;
          }
          else {
            char v19 = -6;
          }
          unsigned __int8 v20 = v19 + v18 + 1;
          if ((~v16 & 3) != 0)
          {
            if (*(int *)a3 < 6) {
              goto LABEL_42;
            }
            double v22 = *(double *)(a3 + 24) + -14.0;
            if (v22 < 0.0) {
              double v22 = v22 + 604800.0;
            }
            unsigned int v21 = 6 * ((int)v22 % 6);
          }
          else
          {
            unsigned int v21 = (*(_DWORD *)(a2 + 16) << 12) | (*(_DWORD *)(a2 + 20) >> 10) & 0xFFF;
            if (v21 == 0xFFFF)
            {
LABEL_42:
              if ((~v16 & 0xC) != 0 || v10 != 1) {
                return EvLog_v("DD_BDS_D1_Eph_SF:  bad Eph IOD, IOD %d  TOW sts %d  Wd[0,1] %x %x ");
              }
              unint64_t v23 = (9544372
                   * (unint64_t)((*(_DWORD *)(a2 + 28) >> 14) & 0xFE | ((*(_DWORD *)(a2 + 24) & 0x1FFu) << 8))) >> 32;
              goto LABEL_45;
            }
          }
          LODWORD(v23) = v21 / 0xE10;
          if (v10 >= 2 && v21 % 0xE10 >= 0xDF2 && (~*((unsigned __int16 *)v9 + 3 * v20 + 5020) & 0x39E) != 0) {
            return result;
          }
LABEL_45:
          unsigned __int16 v24 = v23 + 1;
          int v25 = (char *)v9 + 2 * v18;
          unsigned int v26 = v20;
          if (*((unsigned __int16 *)v25 + 3254) != v24)
          {
            uint64_t v27 = (unsigned __int16 *)(v25 + 6508);
            unsigned __int16 v28 = &v9[27 * v26 + 1646];
            *(_OWORD *)(v28 + 23) = 0u;
            *((_OWORD *)v28 + 4) = 0u;
            *((_OWORD *)v28 + 5) = 0u;
            *((_OWORD *)v28 + 2) = 0u;
            *((_OWORD *)v28 + 3) = 0u;
            *(_OWORD *)unsigned __int16 v28 = 0u;
            *((_OWORD *)v28 + 1) = 0u;
            uint64_t v29 = (char *)v9 + 6 * v26;
            *((_WORD *)v29 + 5022) = 0;
            *((_DWORD *)v29 + 2510) = 0;
            *((_DWORD *)v29 + 2558) = 0;
            *((_WORD *)v29 + 5118) = 0;
            *((unsigned char *)v9 + v18 + 12972) = 0;
            *uint64_t v27 = v24;
          }
          unsigned __int16 v51 = v24;
          int v58 = v18 + 1;
          uint64_t v30 = v10 - 1;
          uint64_t v31 = (uint64_t)&v9[27 * v26 + 9 * v30];
          int v61 = *(_DWORD *)(v31 + 6616);
          long long v32 = *(_OWORD *)(v31 + 6600);
          uint64_t v55 = v31 + 6584;
          unsigned int v56 = v26;
          long long v59 = *(_OWORD *)(v31 + 6584);
          long long v60 = v32;
          uint64_t v33 = (char *)v9 + 6 * v26;
          uint64_t v54 = (unsigned __int16 *)(v33 + 10040);
          int v53 = &v33[2 * v30 + 10040];
          int v34 = *(unsigned __int16 *)v53;
          BOOL v50 = (unsigned __int16 *)(v33 + 10232);
          float64x2_t v35 = &v33[2 * v30 + 10232];
          unsigned int v57 = v9;
          uint64_t v52 = v35;
          if (*(_WORD *)v53)
          {
            uint64_t v36 = 0;
            int v37 = *(unsigned __int16 *)v35;
            uint64_t v38 = (char *)&D1_MaskToSubFrCheck + 36 * v30;
            uint64_t v39 = (uint64_t)&v9[27 * v26 + 1646 + 9 * v30];
            uint64_t v40 = a2 + 20;
            do
            {
              uint64_t v41 = v36 + 1;
              int v42 = 1 << (v36 + 1);
              if ((v42 & v16) != 0)
              {
                int v43 = *(_DWORD *)(v40 + 4 * v36);
                if ((v42 & v34) != 0)
                {
                  int v44 = *(_DWORD *)(v39 + 4 * v36);
                  int v45 = v42 & v37;
                  if ((*(_DWORD *)&v38[4 * v36] & (v44 ^ v43)) != 0)
                  {
                    if (!v45) {
                      *((_DWORD *)&v59 + v36) = v43;
                    }
                    __n128 result = EvLog_v("DD_BDS_D1_Eph_SF:  Diff SF Words, SV %d  SF %d  Wd %d 0x%x 0x%x  CrosChked? %d  SFmsk 0x%x 0x%x", v58, v10, v41, v43, v44, v45 != 0, v16, v34);
                  }
                  else if (!v45)
                  {
                    v37 |= (unsigned __int16)(1 << (v36 + 1));
                  }
                }
                else
                {
                  *((_DWORD *)&v59 + v36) = v43;
                  v34 |= (unsigned __int16)(1 << (v36 + 1));
                }
              }
              uint64_t v36 = v41;
            }
            while (v41 != 9);
          }
          else
          {
            LOWORD(v37) = 0;
            long long v46 = *(_OWORD *)(a2 + 36);
            long long v59 = *(_OWORD *)(a2 + 20);
            long long v60 = v46;
            int v61 = *(_DWORD *)(a2 + 52);
            LOWORD(v34) = v16 & 0x3FE;
          }
          if (v10 == 1 && (v37 & 0x39E) != 0x39E && (v34 & 2) != 0 && (v59 & 0x200) != 0)
          {
            if (*(unsigned char *)(a5[3052] + v18))
            {
              __n128 result = EvLog_v("DD_BDS_D1_Eph_SF:  EPH H->U, SV %d  IOD %d", v58, v51);
              *(unsigned char *)(a5[3052] + v18) = 0;
            }
            *(_DWORD *)(a5[3053] + 20 * v18) = 2;
          }
          long long v47 = v60;
          *(_OWORD *)uint64_t v55 = v59;
          *(_OWORD *)(v55 + 16) = v47;
          *(_DWORD *)(v55 + 32) = v61;
          *(_WORD *)int v53 = v34;
          *(_WORD *)uint64_t v52 = v37;
          if ((~*v54 & 0x39E) == 0
            && (~*((unsigned __int16 *)v57 + 3 * v56 + 5021) & 0x3FE) == 0
            && (~*((unsigned __int16 *)v57 + 3 * v56 + 5022) & 0x3FE) == 0)
          {
            if ((~*v50 & 0x39E) != 0
              || (~*((unsigned __int16 *)v57 + 3 * v56 + 5117) & 0x3FE) != 0
              || (~*((unsigned __int16 *)v57 + 3 * v56 + 5118) & 0x3FE) != 0)
            {
              BOOL v48 = (char *)v57 + v18;
              char v49 = 1;
            }
            else
            {
              BOOL v48 = (char *)v57 + v18;
              char v49 = 2;
            }
            v48[12972] = v49;
          }
          break;
        case 4u:
          if (v17 - 25 <= 0xFFFFFFE7) {
            return EvLog_v("DD_Proc_BDS_D1_Data:  Bad SF4 Pg %d  SV %d");
          }
          if ((~v16 & 0x3FE) == 0) {
            goto LABEL_89;
          }
          return result;
        case 5u:
          if (v17 - 25 <= 0xFFFFFFE7) {
            return EvLog_v("DD_Proc_BDS_D1_Data:  Bad SF5 Pg %d  SV %d");
          }
          if (v17 <= 0x18 && ((1 << v17) & 0x1000180) != 0)
          {
            if ((~v16 & 0x3FE) == 0
              && (!*(unsigned char *)(a5[3058] + v18) || *((unsigned char *)a5 + 100 * *(unsigned __int8 *)(a2 + 8) + 24542) != 1))
            {
              return (char *)DD_Proc_BDS_Health_Subframe(a4, a2, a5, v9);
            }
          }
          else if ((~v16 & 0x3FE) == 0 && v17 <= 6)
          {
LABEL_89:
            return DD_Check_BDS_Alm_AmEpID((char *)a2, (uint64_t)a5);
          }
          return result;
        default:
          return EvLog_v("DD_Proc_BDS_D1_Data:  Bad SF Num %d");
      }
    }
  }
  return result;
}

char *DD_Check_BDS_Alm_AmEpID(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[8];
  int v5 = (unsigned char *)(a2 + 33568 + v4);
  int v6 = (char)*v5;
  if ((*((_DWORD *)result + 13) & 3) == 3)
  {
    if ((v6 & 0x80000000) == 0)
    {
      if (v6 <= 1) {
        *int v5 = v6 + 1;
      }
      return result;
    }
    __n128 result = EvLog_v("DD_Check_BDS_Alm_AmEpID: PRN %d AmEpID change from %d to 11", result[8], 3);
    uint64_t v7 = a2 + v3[8];
    char v8 = 1;
LABEL_8:
    *(unsigned char *)(v7 + 33568) = v8;
    return result;
  }
  if (v6 >= 1)
  {
    __n128 result = EvLog_v("DD_Check_BDS_Alm_AmEpID: PRN %d AmEpID change from 11 to %d", v4, *((_DWORD *)result + 13) & 3);
    uint64_t v7 = a2 + v3[8];
    char v8 = -1;
    goto LABEL_8;
  }
  if (v6 >= -1) {
    *int v5 = v6 - 1;
  }
  return result;
}

int *DD_Proc_BDS_Health_Subframe(int *result, uint64_t a2, void *a3, int *a4)
{
  uint64_t v52 = result;
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v7 = *(unsigned __int8 *)(a2 + 13);
  memset(v56, 0, 37);
  unint64_t v8 = *(unsigned __int8 *)(a2 + 8);
  if (v8 >= 5)
  {
    if (v7 == 7)
    {
LABEL_24:
      if ((~*(unsigned __int16 *)(a2 + 56) & 0x3FE) != 0) {
        return result;
      }
      long long v14 = *(_OWORD *)(a2 + 36);
      __b[0] = *(_OWORD *)(a2 + 20);
      __b[1] = v14;
      int v55 = *(_DWORD *)(a2 + 52);
      memset_pattern16(v53, &unk_22BB45080, 0x26uLL);
      Decode_BDS_1st_Health_SF((uint64_t)__b, (unsigned __int16 *)v53);
      for (uint64_t i = 0; i != 19; ++i)
      {
        if ((int)Decode_BDS_Alm_Health_Sts(*(unsigned __int16 *)&v53[2 * i]) >= 4) {
          *((unsigned char *)v56 + i) = 1;
        }
      }
      uint64_t v49 = 0;
      unsigned int v11 = 0;
      int v10 = 19;
      goto LABEL_30;
    }
    if (v7 == 8) {
      goto LABEL_17;
    }
    if (v7 != 24) {
      return result;
    }
LABEL_9:
    if ((~*(unsigned __int16 *)(a2 + 56) & 0x3FE) != 0
      || *((char *)a3 + v8 + 33568) < 2
      || (*(_DWORD *)(a2 + 44) & 0x18000) != 0x8000)
    {
      return result;
    }
    *(_OWORD *)int v53 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)&v53[12] = *(_OWORD *)(a2 + 32);
    memset_pattern16(__b, &unk_22BB45080, 0x1AuLL);
    Decode_BDS_3rd_Health_SF((uint64_t)v53, (unsigned __int16 *)__b);
    for (uint64_t j = 0; j != 7; ++j)
    {
      if ((int)Decode_BDS_Alm_Health_Sts(*((unsigned __int16 *)__b + j)) >= 4) {
        *((unsigned char *)&v56[1] + j + 14) = 1;
      }
    }
    int v10 = 7;
    unsigned int v11 = 30;
    uint64_t v12 = 2;
    goto LABEL_23;
  }
  if (v7 == 116) {
    goto LABEL_9;
  }
  if (v7 != 36)
  {
    if (v7 != 35) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_17:
  if ((~*(unsigned __int16 *)(a2 + 56) & 0xFE) != 0) {
    return result;
  }
  *(_OWORD *)int v53 = *(_OWORD *)(a2 + 20);
  *(void *)&v53[16] = *(void *)(a2 + 36);
  memset_pattern16(__b, &unk_22BB45080, 0x16uLL);
  Decode_BDS_2nd_Health_SF((uint64_t)v53, (unsigned __int16 *)__b);
  for (uint64_t k = 0; k != 11; ++k)
  {
    if ((int)Decode_BDS_Alm_Health_Sts(*((unsigned __int16 *)__b + k)) >= 4) {
      *((unsigned char *)&v56[1] + k + 3) = 1;
    }
  }
  int v10 = 11;
  unsigned int v11 = 19;
  uint64_t v12 = 1;
LABEL_23:
  uint64_t v49 = v12;
LABEL_30:
  unint64_t v16 = v10 + v11;
  unint64_t v17 = v11;
  uint64_t v18 = 56 * v11 + 12952;
  unint64_t v19 = v17;
  do
  {
    if (*(unsigned char *)(a3[3060] + v19))
    {
      if (!*((unsigned char *)v56 + v19))
      {
        unsigned __int8 v20 = (char *)a3 + 44 * v19 + 31962;
        if (*v20)
        {
          uint64_t v21 = 0;
          LODWORD(v22) = 0;
          unint64_t v23 = (_OWORD *)((char *)a3 + 44 * v19);
          *unsigned __int8 v20 = 0;
          uint64_t v24 = p_NV;
          long long v25 = v23[1995];
          long long v26 = v23[1996];
          uint64_t v27 = p_NV + 56 * v19 + 12944;
          *(_OWORD *)(v27 + 36) = *(_OWORD *)((char *)v23 + 31948);
          *(_OWORD *)(v27 + 24) = v26;
          *(_OWORD *)(v27 + 8) = v25;
          uint64_t v28 = v24 + v18;
          __int16 v29 = -9871;
          do
          {
            int v30 = *(unsigned __int8 *)(v28 + v21) ^ HIBYTE(v29);
            __int16 v29 = -12691 * (v29 + (*(unsigned __int8 *)(v28 + v21) ^ HIBYTE(v29))) + 22719;
            uint64_t v22 = (v22 + v30);
            ++v21;
          }
          while (v21 != 48);
          *(void *)uint64_t v27 = v22;
        }
      }
    }
    ++v19;
    v18 += 56;
  }
  while (v19 < v16);
  __uint64_t n = v10;
  uint64_t v31 = 20 * v17 + 4;
  unsigned __int16 v51 = a4 + 1627;
  uint64_t v32 = (uint64_t)a3 + 100 * v17 + 24520;
  uint64_t v33 = (_DWORD *)a3 + 11 * v17 + 7980;
  unint64_t v34 = v17;
  do
  {
    if (*(unsigned char *)(a3[3052] + v34))
    {
      uint64_t v35 = a3[3058];
    }
    else
    {
      uint64_t v35 = a3[3058];
      if (*((unsigned char *)v56 + v34))
      {
        int v37 = *(unsigned __int8 *)(v35 + v34);
        if (*(unsigned char *)(v35 + v34) && *(unsigned char *)(v32 + 22) == 1 && *(_DWORD *)v32 + 3600 > *v52)
        {
          *((unsigned char *)v56 + v34) = 0;
        }
        else
        {
          uint64_t v38 = a3[3060];
          if (*(unsigned char *)(v38 + v34) && *v33 + 100 < *v52)
          {
            *(unsigned char *)(a3[3055] + v34) = 0;
            *(unsigned char *)(v38 + v34) = 0;
            *((unsigned char *)v51 + v34 - 52) = -1;
            uint64_t v35 = a3[3058];
            int v37 = *(unsigned __int8 *)(v35 + v34);
          }
          if (v37 && *(unsigned char *)(v32 + 22) == 1 && *(_DWORD *)v32 + 100 < *v52)
          {
            *(unsigned char *)(a3[3054] + v34) = 0;
            *(unsigned char *)(v35 + v34) = 0;
            *((_WORD *)v51 + v34) = 255;
          }
        }
      }
    }
    if (*(unsigned char *)(v35 + v34) && *(unsigned char *)(a3[3052] + v34) && !*((unsigned char *)v56 + v34)) {
      EvLog_v("BDS_Health_SF:  ALM H->U, SV %d  SF5_PG7_wd[0-1] %x %x", v34 + 1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
    }
    if (*((unsigned char *)v56 + v34)) {
      int v36 = 1;
    }
    else {
      int v36 = 2;
    }
    *(_DWORD *)(a3[3053] + v31) = v36;
    ++v34;
    v31 += 20;
    v32 += 100;
    v33 += 11;
  }
  while (v34 < v16);
  __n128 result = (int *)memcpy((void *)(a3[3052] + v17), (char *)v56 + v17, __n);
  a4[v49 + 1624] = *v52;
  if (a4[1624] >= 1 && a4[1625] >= 1 && a4[1626] >= 1)
  {
    uint64_t v39 = 0;
    LODWORD(v40) = 0;
    uint64_t v41 = a3[3052];
    uint64_t v42 = p_NV;
    uint64_t v43 = p_NV + 12856;
    uint64_t v44 = *(void *)(v41 + 29);
    long long v45 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)(p_NV + 12868) = *(_OWORD *)v41;
    *(_OWORD *)(v43 + 28) = v45;
    *(void *)(v43 + 41) = v44;
    uint64_t v46 = v42 + 12864;
    __int16 v47 = -9871;
    do
    {
      int v48 = *(unsigned __int8 *)(v46 + v39) ^ HIBYTE(v47);
      __int16 v47 = -12691 * (v47 + (*(unsigned __int8 *)(v46 + v39) ^ HIBYTE(v47))) + 22719;
      uint64_t v40 = (v40 + v48);
      ++v39;
    }
    while (v39 != 48);
    *(void *)(v42 + 12856) = v40;
  }
  return result;
}

BOOL DD_Save_New_BDS_D1_Eph(int a1, void *a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v4 = 0;
    if (a1 % 604800 >= 14) {
      int v5 = -14;
    }
    else {
      int v5 = 604786;
    }
    int v41 = a1;
    int v42 = a1 % 604800 + v5 + 3600;
    uint64_t v6 = (uint64_t)a2 + 25020;
    uint64_t v44 = a3 + 6518;
    int v7 = (char *)a2 + 32182;
    uint64_t v8 = a3 + 12977;
    uint64_t v9 = 100;
    long long v10 = 0uLL;
    uint64_t v43 = a2;
    while (1)
    {
      if (!*(unsigned char *)(v8 + v4) || *(unsigned char *)(v8 + v4) == 1 && *(unsigned char *)(a2[3058] + v4 + 5)) {
        goto LABEL_17;
      }
      if ((v4 + 6) <= 5u) {
        char v11 = -1;
      }
      else {
        char v11 = -6;
      }
      char v12 = v11 + v4 + 6;
      int v50 = 0;
      memset(v45, 0, 23);
      long long v46 = v10;
      long long v47 = v10;
      long long v48 = v10;
      *(_OWORD *)uint64_t v49 = v10;
      *(void *)&v49[14] = 0;
      int v13 = *(unsigned __int16 *)(v44 + 2 * v4);
      if (v13 == 255) {
        goto LABEL_15;
      }
      int v14 = v42 - 3600 * v13 + (v42 - 3600 * v13 < 0 ? 0x93A80 : 0);
      if (v14 >= 3661) {
        break;
      }
      char v52 = 1;
      __int16 v51 = 257;
      long long v17 = *(_OWORD *)(a3 + 108 * v12 + 6664);
      v53[4] = *(_OWORD *)(a3 + 108 * v12 + 6648);
      v54[0] = v17;
      *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(a3 + 108 * v12 + 6676);
      long long v18 = *(_OWORD *)(a3 + 108 * v12 + 6600);
      v53[0] = *(_OWORD *)(a3 + 108 * v12 + 6584);
      v53[1] = v18;
      long long v19 = *(_OWORD *)(a3 + 108 * v12 + 6632);
      v53[2] = *(_OWORD *)(a3 + 108 * v12 + 6616);
      void v53[3] = v19;
      BDS_D1_EphBin2Int(&v51, (unsigned int *)v53, (uint64_t)v45);
      BYTE4(v45[2]) = v4 + 6;
      v45[0] = v41 | 0x400000000;
      if (*(unsigned __int8 *)(v8 + v4) <= 1u) {
        int v20 = 0;
      }
      else {
        int v20 = 0x7FFFFFF;
      }
      int v50 = v20;
      unsigned __int8 v21 = v4 + 6;
      BOOL v22 = SLOWORD(v45[2]) < 3073;
      if (SLOWORD(v45[2]) >= 3073)
      {
        EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  WeekNo = %d > 3072, Out of range !", (v4 + 6), LOWORD(v45[2]));
        unsigned __int8 v21 = BYTE4(v45[2]);
      }
      if (HIDWORD(v45[1]) >= 0x12751)
      {
        EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  toe = %d > 604800 s, Out of range !", v21, 8 * HIDWORD(v45[1]));
        BOOL v22 = 0;
        unsigned __int8 v21 = BYTE4(v45[2]);
      }
      if (DWORD1(v46) >= 0x1999999B)
      {
        EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  e = %g > 0.05 ", v21, (double)DWORD1(v46) * 1.16415322e-10);
        BOOL v22 = 0;
        unsigned __int8 v21 = BYTE4(v45[2]);
      }
      a2 = v43;
      long long v10 = 0uLL;
      if ((v21 - 1) <= 4u)
      {
        if ((DWORD2(v46) + 777519103) <= 0xF3F7FFFE)
        {
          EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  sqrtA = %g, Out of [6709 .. 6324 m^0.5]", v21, (double)DWORD2(v46) * 0.00000190734863);
          BOOL v22 = 0;
          unsigned __int8 v21 = BYTE4(v45[2]);
        }
        if ((v47 - 119304648) < 0xF1C71C71)
        {
          EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  i0 = %f, Out of [-10 .. 10 deg]", v21, (double)(int)v47 * 0.0000000838190317);
          BOOL v22 = 0;
          unsigned __int8 v21 = BYTE4(v45[2]);
        }
        a2 = v43;
        long long v10 = 0uLL;
      }
      if ((v21 - 6) <= 0x1Fu)
      {
        if ((DWORD2(v46) + 777519103) <= 0xCDAFFFFE)
        {
          EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  sqrtA = %g, Out of [5099 .. 6324 m^0.5]", v21, (double)DWORD2(v46) * 0.00000190734863);
          long long v10 = 0uLL;
          a2 = v43;
          BOOL v22 = 0;
        }
        if ((v47 - 775480207) < 0xF1C71C71)
        {
          EvCrt_v("DD_BDS_IntEph_Valid:  FAILED:  SV %d  i0 = %f, Out of [45 .. 65 deg]", BYTE4(v45[2]), (double)(int)v47 * 0.0000000838190317);
          goto LABEL_65;
        }
      }
      if (v22)
      {
        if (!*(unsigned char *)(a2[3058] + v4 + 5)) {
          goto LABEL_45;
        }
        int v23 = *(_DWORD *)(v6 + 8);
        if (LODWORD(v45[1]) != v23 && (unsigned __int16)g_Enable_Event_Log >= 6u)
        {
          EvLog_v("DD_Val_BDS_Eph:  New Eph SV %d %d %d %d", BYTE4(v45[2]), HIDWORD(v45[1]), *(unsigned __int8 *)(v6 + 18), *(unsigned __int8 *)(v6 + 19));
          long long v10 = 0uLL;
          a2 = v43;
LABEL_45:
          uint64_t v24 = 6504;
          if ((v4 - 14) < 0xB) {
            uint64_t v24 = 6500;
          }
          if ((unint64_t)(v4 + 5) < 0x13) {
            uint64_t v24 = 6496;
          }
          int v25 = *(_DWORD *)(a3 + v24);
          uint64_t v26 = a2[3052];
          if (v25 < 1 || *(unsigned __int8 *)(v26 + v4 + 5) | BYTE6(v45[2]))
          {
LABEL_51:
            int v27 = BYTE6(v45[2]);
            *(unsigned char *)(v26 + v4 + 5) = BYTE6(v45[2]) == 0;
            if (v27) {
              goto LABEL_52;
            }
LABEL_59:
            int v28 = 1;
          }
          else
          {
            if (*v7 || v25 + 3600 <= v41)
            {
              uint64_t v29 = a2[3060] + v4;
              if (!*(unsigned char *)(v29 + 5) || v25 + 100 >= v41) {
                goto LABEL_51;
              }
              *(unsigned char *)(a2[3055] + v4 + 5) = 0;
              *(unsigned char *)(v29 + 5) = 0;
              *(unsigned char *)(v44 + v4 - 57) = -1;
              *(unsigned char *)(a2[3052] + v4 + 5) = 1;
              goto LABEL_59;
            }
            *(unsigned char *)(v26 + v4 + 5) = 0;
LABEL_52:
            int v28 = 2;
          }
          *(_DWORD *)(a2[3053] + v9) = v28;
          if (*(unsigned char *)(a2[3058] + v4 + 5) && BYTE6(v45[2])) {
            *(unsigned char *)(v6 + 22) = BYTE6(v45[2]);
          }
          if (v41 < 1) {
            goto LABEL_16;
          }
          *(unsigned char *)(a2[3061] + v4 + 5) = 1;
          Core_Save_BDS_Eph((v4 + 6), 0, v6);
LABEL_65:
          long long v10 = 0uLL;
          a2 = v43;
          goto LABEL_16;
        }
        if (LODWORD(v45[1]) != v23) {
          goto LABEL_45;
        }
      }
LABEL_16:
      *(unsigned char *)(v8 + v4) = 0;
LABEL_17:
      ++v4;
      v6 += 100;
      v9 += 20;
      v7 += 44;
      if (v4 == 32)
      {
        uint64_t v30 = 0;
        LODWORD(v31) = 0;
        uint64_t v32 = a2[3052];
        uint64_t v33 = p_NV;
        uint64_t v34 = p_NV + 12856;
        uint64_t v35 = *(void *)(v32 + 29);
        long long v36 = *(_OWORD *)(v32 + 16);
        *(_OWORD *)(p_NV + 12868) = *(_OWORD *)v32;
        *(_OWORD *)(v34 + 28) = v36;
        *(void *)(v34 + 41) = v35;
        uint64_t v37 = v33 + 12864;
        __int16 v38 = -9871;
        do
        {
          int v39 = *(unsigned __int8 *)(v37 + v30) ^ HIBYTE(v38);
          __int16 v38 = -12691 * (v38 + (*(unsigned __int8 *)(v37 + v30) ^ HIBYTE(v38))) + 22719;
          uint64_t v31 = (v31 + v39);
          ++v30;
        }
        while (v30 != 48);
        *(void *)(v33 + 12856) = v31;
        a1 = v41;
        return a1 != 0;
      }
    }
    EvLog_v("DD_Save_New_BDS_D1_Eph:  Old SF in SD, SV %d, IOD %d  Age %d  ", v4 + 6, *(unsigned __int16 *)(v44 + 2 * v4), v14);
    a2 = v43;
    long long v10 = 0uLL;
LABEL_15:
    double v15 = (_OWORD *)(a3 + 108 * v12 + 6584);
    *(_OWORD *)((char *)v15 + 92) = v10;
    void v15[4] = v10;
    v15[5] = v10;
    v15[2] = v10;
    v15[3] = v10;
    *double v15 = v10;
    v15[1] = v10;
    uint64_t v16 = a3 + 6 * v12;
    *(_WORD *)(v16 + 10044) = 0;
    *(_DWORD *)(v16 + 10040) = 0;
    *(_DWORD *)(v16 + 10232) = 0;
    *(_WORD *)(v16 + 10236) = 0;
    goto LABEL_16;
  }
  return a1 != 0;
}

char **Sen_Aug_FPE_ReInit(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  g_p_CB_LCD_SA_Dbg = a3;
  g_TCU = (uint64_t)a1[5492].i64;
  g_FPE_LogSeverity = *(_WORD *)(a2 + 4);
  g_DBfd = a4;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v9 = *(double *)(g_TCU + 8);
    }
    else {
      double v9 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f ReInit function was called", "Sen_Aug_FPE_ReInit", 153, v8, v9);
  }
  long long v15 = *(_OWORD *)(a2 + 55);
  long long v16 = *(_OWORD *)(a2 + 71);
  long long v17 = *(_OWORD *)(a2 + 87);
  int v18 = *(_DWORD *)(a2 + 103);
  long long v12 = *(_OWORD *)(a2 + 7);
  long long v13 = *(_OWORD *)(a2 + 23);
  long long v14 = *(_OWORD *)(a2 + 39);
  unsigned __int16 v11 = 12;
  return FPE_ApplyNewMeas((char **)0xD, &v11, a2, a1, 0, a3, a4, 0);
}

char **Sen_Aug_FPE_Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5, _DWORD *a6, char **a7, _DWORD *a8, uint64_t a9)
{
  v38[3] = *MEMORY[0x263EF8340];
  bzero(a6, 0x5F70uLL);
  *a6 = *(_DWORD *)(a2 + 4);
  *((void *)a6 + 49) = *(void *)(a2 + 8);
  uint64_t v31 = (unsigned __int8 *)a4;
  SA_Interface_Logger(a2, (uint64_t)a5, a1, a3, a4, a7);
  *a8 = 0;
  FPE_ApplyNewMeas((char **)0xA, (unsigned __int16 *)a2, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  uint64_t v17 = 0;
  v38[0] = a1 + 240;
  v38[1] = a1 + 336;
  v38[2] = a1 + 432;
  do
  {
    memset(__dst, 0, 32);
    int v18 = (_DWORD *)v38[v17];
    unsigned int v19 = Cyc_Record_Count_Occupied(v18, 1u);
    unsigned int v20 = dword_22BB4509C[v17];
    if (a5[132943].i8[1]) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v19 > v20;
    }
    if (v21)
    {
      unsigned int v22 = v19;
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        uint64_t v23 = mach_continuous_time();
        if (g_TCU) {
          double v24 = *(double *)(g_TCU + 8);
        }
        else {
          double v24 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f num new samples is large, and limited to maximum, numNewSamples = %d", "FpeAdapter_extractSensorData", 267, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), v24, v22);
      }
      if (v22 == v20)
      {
        unsigned int v20 = v22;
      }
      else
      {
        do
        {
          Cyc_Record_Read((uint64_t)v18, 1u, __dst);
          --v22;
        }
        while (v20 != v22);
      }
    }
    if (v20 < Cyc_Record_Count_Occupied(v18, 1u))
    {
      if (g_FPE_LogSeverity)
      {
        uint64_t v25 = mach_continuous_time();
        if (g_TCU) {
          double v26 = *(double *)(g_TCU + 8);
        }
        else {
          double v26 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f num new samples is bigger than max allowed = %d.measTypeTble[i]=%d", "FpeAdapter_extractSensorData", 280, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), v26, v20, dword_22BB45090[v17]);
      }
      g_FPE_AssertFlag = 1;
    }
    for (int i = 0; !Cyc_Record_IsEmpty(v18, 1u); ++i)
    {
      Cyc_Record_Read((uint64_t)v18, 1u, __dst);
      FPE_ApplyNewMeas((char **)dword_22BB45090[v17], (unsigned __int16 *)__dst, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
    }
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      uint64_t v28 = mach_continuous_time();
      if (g_TCU) {
        double v29 = *(double *)(g_TCU + 8);
      }
      else {
        double v29 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f \tNum new_Samples =%d for measType = %d", "FpeAdapter_extractSensorData", 301, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), v29, i, dword_22BB45090[v17]);
    }
    ++v17;
  }
  while (v17 != 3);
  FpeAdapter_extractAssistMeasData(0, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)1, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)2, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)4, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)5, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)0xA, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)3, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  FpeAdapter_extractAssistMeasData((void *)0xB, (uint64_t)a5, v31, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
  *(_WORD *)unsigned __int16 __dst = 12;
  long long v34 = *(_OWORD *)(a3 + 55);
  long long v35 = *(_OWORD *)(a3 + 71);
  long long v36 = *(_OWORD *)(a3 + 87);
  int v37 = *(_DWORD *)(a3 + 103);
  *(_OWORD *)&__dst[2] = *(_OWORD *)(a3 + 7);
  *(_OWORD *)&__dst[18] = *(_OWORD *)(a3 + 23);
  long long v33 = *(_OWORD *)(a3 + 39);
  return FPE_ApplyNewMeas((char **)0xC, (unsigned __int16 *)__dst, a3, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a9);
}

void *FpeAdapter_extractAssistMeasData(void *result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int64x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = (int)result;
  uint64_t v16 = result;
  switch((int)result)
  {
    case 0:
      uint64_t v17 = (uint64_t *)(a3 + 208);
      int v18 = (__int16 **)(a3 + 16);
      uint64_t v19 = 3;
      goto LABEL_5;
    case 1:
      uint64_t v17 = (uint64_t *)(a3 + 216);
      int v18 = (__int16 **)(a3 + 24);
      uint64_t v19 = 6;
      goto LABEL_5;
    case 2:
      uint64_t v17 = (uint64_t *)(a3 + 224);
      int v18 = (__int16 **)(a3 + 32);
      uint64_t v19 = 4;
LABEL_5:
      unsigned int v20 = 12;
      goto LABEL_14;
    case 3:
      uint64_t v17 = (uint64_t *)(a3 + 232);
      int v18 = (__int16 **)(a3 + 40);
      uint64_t v19 = 5;
      unsigned int v20 = 4;
      goto LABEL_14;
    case 4:
      uint64_t v17 = (uint64_t *)(a3 + 240);
      int v18 = (__int16 **)(a3 + 48);
      uint64_t v19 = 7;
      unsigned int v20 = 32;
      goto LABEL_14;
    case 5:
      uint64_t v17 = (uint64_t *)(a3 + 248);
      int v18 = (__int16 **)(a3 + 56);
      uint64_t v19 = 8;
      unsigned int v20 = 72;
      goto LABEL_14;
    case 10:
      uint64_t v17 = (uint64_t *)(a3 + 200);
      int v18 = (__int16 **)(a3 + 8);
      uint64_t v19 = 9;
      unsigned int v20 = 80;
      goto LABEL_14;
    case 11:
      uint64_t v17 = (uint64_t *)(a3 + 288);
      int v18 = (__int16 **)(a3 + 96);
      uint64_t v19 = 14;
      unsigned int v20 = 64;
LABEL_14:
      __int16 v23 = **v18;
      uint64_t v24 = *v17;
      unsigned __int16 v25 = v23 - *(_WORD *)(a2 + 2 * result);
      if (a5[132943].i8[1]) {
        goto LABEL_15;
      }
      if (result == 10)
      {
        unsigned int v26 = *a3;
        if (v26 < v25)
        {
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unsigned int v41 = v20;
            __int16 v50 = **v18;
            uint64_t v31 = a2;
            unint64_t v32 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v33 = *(double *)(g_TCU + 8);
            }
            else {
              double v33 = 0.0;
            }
            __n128 result = (void *)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f num new Ext_Pos samples is large, and limited to maximum, numNewSamples = %d", "FpeAdapter_extractAssistMeasData", 425, v32, v33, v26);
            a2 = v31;
            uint64_t v16 = 10;
            __int16 v23 = v50;
            unsigned int v20 = v41;
          }
          int v27 = (unsigned __int16 *)(v24 + (v26 - 1) * v20);
          if (!v26) {
            goto LABEL_43;
          }
LABEL_34:
          __int16 v52 = v23;
          uint64_t v45 = a2;
          uint64_t v48 = v16;
          uint64_t v37 = -(uint64_t)v20;
          unsigned int v43 = v26;
          do
          {
            __n128 result = FPE_ApplyNewMeas((char **)v19, v27, a4, a5, a6, a7, a8, a9);
            int v27 = (unsigned __int16 *)((char *)v27 + v37);
            --v26;
          }
          while (v26);
          a2 = v45;
          uint64_t v16 = v48;
          __int16 v23 = v52;
          if (v43 >= 0x21)
          {
            if (g_FPE_LogSeverity)
            {
              unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v39 = *(double *)(g_TCU + 8);
              }
              else {
                double v39 = 0.0;
              }
              __n128 result = (void *)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f FPE_MAX_ASSIST_IN_EPOCH = %d, but %d new samples were sent to FPE Manager", "FpeAdapter_extractAssistMeasData", 465, v38, v39, 32, v43);
              a2 = v45;
              uint64_t v16 = v48;
              __int16 v23 = v52;
            }
            g_FPE_AssertFlag = 1;
          }
          goto LABEL_43;
        }
      }
      unsigned int v34 = a3[1];
      if (v34 < v25)
      {
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unsigned int v42 = v20;
          __int16 v51 = **v18;
          uint64_t v44 = a2;
          uint64_t v47 = result;
          unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v36 = *(double *)(g_TCU + 8);
          }
          else {
            double v36 = 0.0;
          }
          __n128 result = (void *)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f num new ExtA samples is large, and limited to maximum, numNewSamples = %d", "FpeAdapter_extractAssistMeasData", 430, v35, v36, v34);
          unsigned __int16 v25 = v34;
          a2 = v44;
          uint64_t v16 = v47;
          __int16 v23 = v51;
          unsigned int v20 = v42;
        }
        else
        {
          unsigned __int16 v25 = a3[1];
        }
      }
LABEL_15:
      unsigned int v26 = v25;
      int v27 = (unsigned __int16 *)(v24 + (v25 - 1) * v20);
      if (!v9 && v25 > a3[1])
      {
        if (g_FPE_LogSeverity)
        {
          unsigned int v40 = v20;
          __int16 v49 = v23;
          uint64_t v46 = v16;
          uint64_t v28 = a2;
          unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v30 = *(double *)(g_TCU + 8);
          }
          else {
            double v30 = 0.0;
          }
          __n128 result = (void *)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f numNewSamples = %d, (counter delta) of DMS assistance is bigger than PE array size = %d", "FpeAdapter_extractAssistMeasData", 441, v29, v30, v26, a3[1]);
          a2 = v28;
          uint64_t v16 = v46;
          __int16 v23 = v49;
          unsigned int v20 = v40;
        }
        g_FPE_AssertFlag = 1;
      }
      if (v26) {
        goto LABEL_34;
      }
LABEL_43:
      *(_WORD *)(a2 + 2 * v16) = v23;
      return result;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v22 = *(double *)(g_TCU + 8);
        }
        else {
          double v22 = 0.0;
        }
        __n128 result = (void *)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f meas type %d is not supported ", "FpeAdapter_extractAssistMeasData", 409, v21, v22, v9);
      }
      g_FPE_AssertFlag = 1;
      return result;
  }
}

uint64_t NK_Check_TOW_Adjust(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 40);
  if (v2)
  {
    if (*(unsigned char *)(result + 128))
    {
      *(void *)(a2 + 792) = 0;
    }
    else
    {
      if (v2 >= 0) {
        unsigned int v3 = *(_DWORD *)(a2 + 40);
      }
      else {
        unsigned int v3 = -v2;
      }
      uint64_t v4 = *(unsigned int *)(a2 + 640);
      if ((int)v4 >= 3 && v3 >= TOW_stat_DeltaTOW_Limit[v4]
        || (uint64_t v5 = *(unsigned int *)(a2 + 12), (int)v5 >= 3) && v3 >= TOW_stat_DeltaTOW_Limit[v5])
      {
        *(void *)(a2 + 792) = 0;
        *(_DWORD *)(result + 132) = 24;
        *(unsigned char *)(result + 128) = 1;
        *(_DWORD *)(a2 + 640) = v4 - 1;
      }
      else
      {
        *(double *)(a2 + 792) = *(double *)(a2 + 792) - (double)v2;
      }
    }
  }
  return result;
}

void Gnm13_00SendGnssReqCnf(int a1, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a3 == 2)
  {
    long long v10 = gnssOsa_Calloc("Gnm13_00SendGnssReqCnf", 82, 1, 0x14uLL);
    if (!v10) {
      return;
    }
    uint64_t v6 = v10;
    *((_DWORD *)v10 + 3) = a2;
    *((_DWORD *)v10 + 4) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSA_GNSS_CNF =>LSIM AssistId,%u,Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm13_00SendGnssReqCnf", a2, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    int v9 = 8596481;
    goto LABEL_11;
  }
  if (a3 == 4)
  {
    uint64_t v5 = gnssOsa_Calloc("Gnm13_00SendGnssReqCnf", 61, 1, 0x14uLL);
    if (!v5) {
      return;
    }
    uint64_t v6 = v5;
    *((_DWORD *)v5 + 3) = a2;
    *((_DWORD *)v5 + 4) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSB_GNSS_CNF =>LSIM AssistId,%u,Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm13_00SendGnssReqCnf", a2, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    int v9 = 8597249;
LABEL_11:
    AgpsSendFsmMsg(128, 131, v9, v6);
    return;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm13_00SendGnssReqCnf", 515);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
  }
}

uint64_t Gnm13_01EarlyRespCriteriaMet(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 7) == 4
      && ((int v2 = *(_DWORD *)(result + 24),
           unsigned int v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v2,
           unsigned int v4 = *(_DWORD *)(v1 + 44),
           v3 < v4)
        ? (BOOL v5 = v3 + 1000 > v4)
        : (BOOL v5 = 0),
          v5))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ElapsedTime,%ums,EarlyRespTime,%ums,SafetyMargin,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm13_01EarlyRespCriteriaMet", v3, *(_DWORD *)(v1 + 44), 1000);
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
      }
      *(_DWORD *)(v1 + 44) = v3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void Gnm13_02SendMsbGnssResp(_DWORD *a1, size_t a2, char a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)gnssOsa_Calloc("Gnm13_02SendMsbGnssResp", 152, 1, 0x88uLL);
  if (v6)
  {
    unsigned __int16 v7 = v6;
    *((_DWORD *)v6 + 33) = *a1;
    v6[16] = a3;
    if (a2)
    {
      long long v8 = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      long long v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v6 + 60) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v6 + 44) = v10;
      *(_OWORD *)(v6 + 28) = v9;
      *(_OWORD *)(v6 + 12) = v8;
      long long v11 = *(_OWORD *)(a2 + 64);
      long long v12 = *(_OWORD *)(a2 + 80);
      long long v13 = *(_OWORD *)(a2 + 96);
      *(void *)(v6 + 124) = *(void *)(a2 + 112);
      *(_OWORD *)(v6 + 108) = v13;
      *(_OWORD *)(v6 + 92) = v12;
      *(_OWORD *)(v6 + 76) = v11;
      Gnm05_32PrintGadData(a2);
    }
    else
    {
      *((_DWORD *)v6 + 8) = 7;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_POS_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm13_02SendMsbGnssResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8596995, v7);
  }
}

void Gnm13_03SendAbortCnf(int a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v4 = gnssOsa_Calloc("Gnm13_03SendAbortCnf", 188, 1, 0x14uLL);
  if (v4)
  {
    BOOL v5 = v4;
    *((_DWORD *)v4 + 3) = a1;
    *((_DWORD *)v4 + 4) = a2;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_ABORT_CNF =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm13_03SendAbortCnf");
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8591873, v5);
  }
}

void Gnm13_04SendGnssPosAidReq(int a1, unsigned char *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = gnssOsa_Calloc("Gnm13_04SendGnssPosAidReq", 215, 1, 0x50uLL);
  if (!v6) {
    return;
  }
  unsigned __int16 v7 = v6;
  v6[18] = a1;
  if (a2)
  {
    if (Gnm05_25PopulateGnssAidReq(a2, (void *)v6 + 2, a3))
    {
LABEL_4:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_AID_REQ_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm13_04SendGnssPosAidReq");
        LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8596739, v7);
      return;
    }
  }
  else if (Gnm05_27PopulateDefaultGnssAidReq((void *)v6 + 2, a3))
  {
    goto LABEL_4;
  }
  long long v10 = (void *)*((void *)v7 + 3);
  if (v10) {
    free(v10);
  }
  *((void *)v7 + 3) = 0;
  long long v11 = (void *)*((void *)v7 + 4);
  if (v11) {
    free(v11);
  }
  *((void *)v7 + 4) = 0;
  long long v12 = (void *)*((void *)v7 + 5);
  if (v12) {
    free(v12);
  }
  *((void *)v7 + 5) = 0;
  long long v13 = (void *)*((void *)v7 + 6);
  if (v13) {
    free(v13);
  }
  *((void *)v7 + 6) = 0;
  uint64_t v14 = (void *)*((void *)v7 + 7);
  if (v14) {
    free(v14);
  }
  *((void *)v7 + 7) = 0;
  unsigned __int16 v15 = (void *)*((void *)v7 + 8);
  if (v15) {
    free(v15);
  }
  free(v7);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aid not required\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm13_04SendGnssPosAidReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
}

void Gnm13_05AssistHandleAssistStatus(uint64_t a1, unsigned char *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = *(unsigned __int8 *)(v5 + 6);
    BOOL v7 = *(unsigned char *)(v5 + 58) == 0;
    uint64_t v8 = 89;
    if (v7) {
      uint64_t v8 = 78;
    }
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReqType,%u,AssistAllwd,%c\n", (unint64_t)v4, "GNM", 73, "Gnm13_05AssistHandleAssistStatus", v6, v8);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v10 + 58))
  {
    if ((*(unsigned char *)(v10 + 6) & 0x10) != 0) {
      Gnm13_04SendGnssPosAidReq(*(_DWORD *)v10, a2, *(unsigned __int8 *)(v10 + 20));
    }
  }
}

void Gnm13_07SendAidStatusCnf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (unsigned char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v23 = *MEMORY[0x263EF8340];
  __dst[0] = 0;
  *(_DWORD *)&__dst[8] = 0;
  *(_DWORD *)&__dst[4] = 0;
  *(void *)&__dst[16] = 0;
  *(_DWORD *)&__dst[23] = 0;
  memset(&__dst[28], 0, 18);
  memset(&__dst[48], 0, 262);
  bzero(&__dst[312], 0x28CuLL);
  for (uint64_t i = 964; i != 1348; i += 3)
  {
    uint64_t v8 = &__dst[i];
    char v9 = __dst[i + 2];
    *(_WORD *)uint64_t v8 = 0;
    v8[2] = v9 & 0xE0;
  }
  memset(&__dst[1348], 0, 256);
  bzero(&__dst[1608], 0x1100uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v11 = 89;
    if (BYTE1(g_AssistReq)) {
      uint64_t v12 = 89;
    }
    else {
      uint64_t v12 = 78;
    }
    if (!(_BYTE)g_AssistReq) {
      uint64_t v11 = 78;
    }
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AssistStatusCnf ExtReq,%c,IntReq,%c\n", (unint64_t)v10, "GNM", 73, "Gnm13_07SendAidStatusCnf", v11, v12);
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
  }
  if ((_BYTE)g_AssistReq)
  {
    uint64_t v14 = gnssOsa_Calloc("Gnm13_07SendAidStatusCnf", 300, 1, 0xA0uLL);
    if (v14)
    {
      unsigned __int16 v15 = v14;
      if (v6)
      {
        if (AgpsFsmStopTimer(8399366) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 87, "Gnm13_07SendAidStatusCnf", 1545);
          LbsOsaTrace_WriteLog(0xBu, __str, v17, 2, 1);
        }
        char v18 = Gnm05_25PopulateGnssAidReq(v6, v15 + 2, 255);
      }
      else
      {
        char v18 = Gnm05_27PopulateDefaultGnssAidReq(v14 + 2, 33);
      }
      *((unsigned char *)v15 + 72) = v18;
      *((unsigned char *)v15 + 152) = 0;
      if (g_PosEstimate)
      {
        memcpy(__dst, &g_PosEstimate, sizeof(__dst));
        Gnm05_43ConvertNavToGpsGad((uint64_t)(v15 + 10), (uint64_t)v15 + 132, (uint64_t)&__dst[16], *(int *)&__dst[4]);
        *((unsigned char *)v15 + 152) = *((_DWORD *)v15 + 21) == 1;
      }
      *((_DWORD *)v15 + 19) = HIDWORD(g_AssistReq);
      HIDWORD(g_AssistReq) = -1;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_CNF =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm13_07SendAidStatusCnf");
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8591361, v15);
      LOBYTE(g_AssistReq) = 0;
    }
  }
}

void Gnm13_08SendErrAssistStatus(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((_BYTE)g_AssistReq)
  {
    uint64_t v0 = gnssOsa_Calloc("Gnm13_08SendErrAssistStatus", 363, 1, 0xA0uLL);
    if (v0)
    {
      uint64_t v1 = v0;
      v0[72] = 0;
      v0[152] = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_AID_STATUS_CNF =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm13_08SendErrAssistStatus");
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8591361, v1);
      LOBYTE(g_AssistReq) = 0;
    }
  }
}

unint64_t Gnm13_09SendAsstGadData(unint64_t result, size_t a2, int a3)
{
  double v4 = (unsigned __int16 *)result;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(result + 2);
  if (v5 == 3)
  {
    __n128 result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GADPos ignored Ecall pre-emptive sess\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm13_09SendAsstGadData");
      __n128 result = LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (a3) {
      return Gnm10_28StopPositioning(v4);
    }
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(result + 8);
    char v7 = *(unsigned char *)(v6 + 6);
    if ((v7 & 0x10) != 0)
    {
      if (!*(_DWORD *)(v6 + 44)
        || (a3 & 1) != 0
        || (__n128 result = Gnm13_01EarlyRespCriteriaMet(*(void *)(result + 8)), result))
      {
        Gnm13_02SendMsbGnssResp((_DWORD *)v6, a2, a3);
        __n128 result = mach_continuous_time();
        *(_DWORD *)(v6 + 52) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
      }
    }
    if (a3)
    {
      Gnm10_28StopPositioning(v4);
      __n128 result = Gnm02_21DeleteInstn(v4);
    }
    if ((v7 & 0x10) == 0)
    {
LABEL_11:
      __n128 result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm13_09SendAsstGadData", 2052);
        return LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
      }
    }
  }
  return result;
}

void Gnm13_10SendMsaGnssResp(_DWORD *a1, const void *a2, char a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = gnssOsa_Calloc("Gnm13_10SendMsaGnssResp", 461, 1, 0x285ACuLL);
  if (v6)
  {
    char v7 = v6;
    v6[41322] = *a1;
    if (a2)
    {
      Gnm05_35PrintMeas((uint64_t)a2);
      memcpy(v7 + 12, a2, 0x2859CuLL);
    }
    else
    {
      v6[173] = 7;
      v6[11] = 7;
    }
    v7[16] = a3;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_MSR_RESULT_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm13_10SendMsaGnssResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8596227, v7);
  }
}

unint64_t Gnm13_11SendAsstGnssMeas(unint64_t result, const void *a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 2) == 2)
  {
    int v5 = (unsigned __int16 *)result;
    uint64_t v6 = *(void *)(result + 8);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReqType,%u,AllwdGnss,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm13_11SendAsstGnssMeas", *(unsigned __int8 *)(v6 + 6), *(unsigned __int8 *)(v6 + 20));
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    if (!*(_DWORD *)(v6 + 44) || (a3 & 1) != 0 || (__n128 result = Gnm13_01EarlyRespCriteriaMet(v6), result))
    {
      Gnm13_10SendMsaGnssResp((_DWORD *)v6, a2, a3);
      __n128 result = mach_continuous_time();
      *(_DWORD *)(v6 + 52) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
    }
    if (a3)
    {
      Gnm10_28StopPositioning(v5);
      return Gnm02_21DeleteInstn(v5);
    }
  }
  return result;
}

void Gnm13_13HandleAssistStatus(unsigned char *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v3 = 89;
    if (BYTE1(g_AssistReq)) {
      uint64_t v4 = 89;
    }
    else {
      uint64_t v4 = 78;
    }
    if (!(_BYTE)g_AssistReq) {
      uint64_t v3 = 78;
    }
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AssistStatus ExtRequest,%c,IntRequest,%c\n", (unint64_t)v2, "GNM", 73, "Gnm13_13HandleAssistStatus", v3, v4);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (BYTE1(g_AssistReq))
  {
    BYTE1(g_AssistReq) = 0;
    if (a1)
    {
      if (AgpsFsmStopTimer(8399366) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm13_13HandleAssistStatus", 1545);
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      }
      uint64_t InstnAssistReq = Gnm02_37GetInstnAssistReq();
      if (InstnAssistReq)
      {
        uint64_t v9 = InstnAssistReq;
        int v10 = *(unsigned __int8 *)(InstnAssistReq + 2);
        if (v10 == 2)
        {
          *(unsigned char *)(*(void *)(InstnAssistReq + 8) + 59) = 0;
          Gnm13_05AssistHandleAssistStatus(InstnAssistReq, a1);
        }
        else if (v10 == 1)
        {
          *(unsigned char *)(*(void *)(InstnAssistReq + 8) + 5) = 0;
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm13_13HandleAssistStatus", 2052, *(unsigned __int8 *)(v9 + 2));
          LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
        }
      }
    }
  }
}

void Gnm13_15StartPosResp(unsigned __int16 *a1, int a2)
{
  char v2 = a2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)*((void *)a1 + 1);
  int v5 = *v4;
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success AssistId,%u,InstId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm13_15StartPosResp", v5, *a1);
      int v8 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    else
    {
      int v8 = 1;
    }
  }
  else
  {
    int v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fail AssistId,%u,InstId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm13_15StartPosResp", v5, *a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
      int v8 = 0;
    }
  }
  if ((*((unsigned char *)v4 + 6) & 4) != 0)
  {
    Gnm13_00SendGnssReqCnf(v8, *v4, 4);
    goto LABEL_13;
  }
  if ((*((unsigned char *)v4 + 6) & 2) != 0)
  {
    Gnm13_00SendGnssReqCnf(v8, *v4, 2);
    if (v2) {
      goto LABEL_14;
    }
LABEL_20:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Clearing Assist Session AssistId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm13_15StartPosResp", *v4);
      LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
    }
    Gnm02_21DeleteInstn(a1);
    return;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
LABEL_13:
    if (v2) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  bzero(__str, 0x410uLL);
  uint64_t v11 = mach_continuous_time();
  unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm13_15StartPosResp", 770, *((unsigned __int8 *)v4 + 6));
  LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
  if ((v2 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_14:
  if (*((unsigned char *)v4 + 68)) {
    return;
  }
  uint64_t v13 = *((void *)a1 + 1);
  if (!v13)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo\n");
    goto LABEL_35;
  }
  int v14 = *((unsigned __int8 *)a1 + 2);
  if (v14 == 2)
  {
    unsigned __int16 v15 = (unsigned char *)(v13 + 59);
    goto LABEL_27;
  }
  if (v14 != 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v21);
LABEL_35:
    LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
    return;
  }
  unsigned __int16 v15 = (unsigned char *)(v13 + 5);
LABEL_27:
  *unsigned __int16 v15 = 1;
  if (!(BYTE1(g_AssistReq) | g_AssistReq))
  {
    if (AgpsFsmStartTimer(0x802A06u, 0x1388u)
      && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 87, "Gnm13_14HandleIntlAssistStatusReq", 1544);
      LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
    }
    Gnm17_13SendPollAssistStatus();
  }
  BYTE1(g_AssistReq) = 1;
}

void Gnm13_16StopPosResp(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = **(_DWORD **)(a1 + 8);
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success AssistId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm13_16StopPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    BOOL v6 = Gnm02_21DeleteInstn((unsigned __int16 *)a1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Error AssistId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm13_16StopPosResp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    }
    Gnm02_21DeleteInstn((unsigned __int16 *)a1);
    BOOL v6 = 0;
  }
  Gnm13_03SendAbortCnf(v3, v6);
}

void Gnm13_17SendClearCacheInd(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  char v2 = gnssOsa_Calloc("Gnm13_17SendClearCacheInd", 738, 1, 0x10uLL);
  if (v2)
  {
    int v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_CLEAR_DATA_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm13_17SendClearCacheInd");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8604675, v3);
  }
}

uint64_t DD_Delete_Bad_QZSS_Data(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 0;
  unsigned __int16 v5 = a4 + 1346;
  BOOL v6 = a4 + 1076;
  uint64_t v7 = (_WORD *)(a1 + 4);
  uint64_t v8 = 5848;
  uint64_t v9 = 6408;
  uint64_t result = 256;
  do
  {
    uint64_t v11 = a4[1067];
    if (*(unsigned char *)(v11 + v4))
    {
      *((_DWORD *)v7 - 1) = 16777472;
      *uint64_t v7 = 256;
      *(_WORD *)(a2 + 2 * v4) = 256;
      *(unsigned char *)(v11 + v4) = 0;
      *(unsigned char *)(a4[1065] + v4) = 0;
      *(unsigned char *)(a4[1069] + v4) = 0;
      *(_OWORD *)((char *)v6 + 92) = 0uLL;
      v6[4] = 0uLL;
      v6[5] = 0uLL;
      void v6[2] = 0uLL;
      v6[3] = 0uLL;
      *BOOL v6 = 0uLL;
      v6[1] = 0uLL;
      *(unsigned char *)(a4[1075] + v4) = 0;
      *(unsigned char *)(a4[1072] + v4) = 1;
      unsigned __int16 v12 = (_OWORD *)(p_NV + v9);
      *((void *)v12 - 1) = 0xFFFFFFFFLL;
      *unsigned __int16 v12 = 0uLL;
      v12[1] = 0uLL;
      v12[2] = 0uLL;
      v12[3] = 0uLL;
      void v12[4] = 0uLL;
      void v12[5] = 0uLL;
      *(_OWORD *)((char *)v12 + 92) = 0uLL;
    }
    if (*(unsigned char *)(a4[1068] + v4))
    {
      *(unsigned char *)(a3 + v4) = -1;
      *(unsigned char *)(a4[1068] + v4) = 0;
      *(unsigned char *)(a4[1066] + v4) = 0;
      *(unsigned char *)(a4[1071] + v4) = 0;
      *(_OWORD *)((char *)v5 + 28) = 0uLL;
      *unsigned __int16 v5 = 0uLL;
      v5[1] = 0uLL;
      *(unsigned char *)(a4[1075] + v4) = 0;
      uint64_t v13 = (_OWORD *)(p_NV + v8);
      *((void *)v13 - 1) = 0xFFFFFFFFLL;
      *uint64_t v13 = 0uLL;
      v13[1] = 0uLL;
      *(_OWORD *)((char *)v13 + 28) = 0uLL;
    }
    ++v4;
    v8 += 56;
    v9 += 120;
    unsigned __int16 v5 = (_OWORD *)((char *)v5 + 44);
    BOOL v6 = (_OWORD *)((char *)v6 + 108);
    v7 += 3;
  }
  while (v4 != 10);
  return result;
}

uint64_t DD_Delete_Inhib_QZSS_Data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  BOOL v6 = a5 + 1346;
  uint64_t v7 = a5 + 1076;
  uint64_t v8 = a2 + 2;
  uint64_t v9 = 6408;
  uint64_t v10 = 5848;
  do
  {
    if (*(unsigned char *)(result + v5))
    {
      *(_DWORD *)(v8 - 2) = 16777472;
      *(_WORD *)(v8 + 2) = 256;
      *(_WORD *)(a3 + 2 * v5) = 256;
      *(unsigned char *)(a5[1067] + v5) = 0;
      *(unsigned char *)(a5[1065] + v5) = 0;
      *(unsigned char *)(a5[1069] + v5) = 0;
      *(_OWORD *)((char *)v7 + 92) = 0uLL;
      v7[4] = 0uLL;
      v7[5] = 0uLL;
      v7[2] = 0uLL;
      v7[3] = 0uLL;
      *uint64_t v7 = 0uLL;
      v7[1] = 0uLL;
      *(unsigned char *)(a5[1070] + v5) = 0;
      *(_OWORD *)((char *)v7 + 1172) = 0uLL;
      *(_OWORD *)((char *)v7 + 1144) = 0uLL;
      *(_OWORD *)((char *)v7 + 1160) = 0uLL;
      *(_OWORD *)((char *)v7 + 1112) = 0uLL;
      *(_OWORD *)((char *)v7 + 1128) = 0uLL;
      *(_OWORD *)((char *)v7 + 1080) = 0uLL;
      *(_OWORD *)((char *)v7 + 1096) = 0uLL;
      *(unsigned char *)(a5[1075] + v5) = 0;
      *(unsigned char *)(a5[1072] + v5) = 1;
      uint64_t v11 = (_OWORD *)(p_NV + v9);
      *((void *)v11 - 1) = 0xFFFFFFFFLL;
      *uint64_t v11 = 0uLL;
      v11[1] = 0uLL;
      int v11[2] = 0uLL;
      v11[3] = 0uLL;
      void v11[4] = 0uLL;
      void v11[5] = 0uLL;
      *(_OWORD *)((char *)v11 + 92) = 0uLL;
      *(unsigned char *)(a4 + v5) = -1;
      *(unsigned char *)(a5[1068] + v5) = 0;
      *(unsigned char *)(a5[1066] + v5) = 0;
      *(unsigned char *)(a5[1071] + v5) = 0;
      *(_OWORD *)((char *)v6 + 28) = 0uLL;
      *BOOL v6 = 0uLL;
      v6[1] = 0uLL;
      unsigned __int16 v12 = (_OWORD *)(p_NV + v10);
      *((void *)v12 - 1) = 0xFFFFFFFFLL;
      *unsigned __int16 v12 = 0uLL;
      v12[1] = 0uLL;
      *(_OWORD *)((char *)v12 + 28) = 0uLL;
    }
    ++v5;
    v9 += 120;
    v10 += 56;
    BOOL v6 = (_OWORD *)((char *)v6 + 44);
    uint64_t v7 = (_OWORD *)((char *)v7 + 108);
    v8 += 6;
  }
  while (v5 != 10);
  return result;
}

uint64_t DD_Check_Age_QZSS_Data(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if ((int)result < 1) {
    return result;
  }
  int v7 = result;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  int v11 = result + 900;
  if ((int)result <= 86400) {
    int v12 = 86400;
  }
  else {
    int v12 = result;
  }
  int v13 = v12 - 86400;
  uint64_t v14 = a6[1069];
  unsigned __int16 v15 = (char *)a6 + 39302;
  int v29 = (result - a2 / 0x3E8) & ~((int)(result - a2 / 0x3E8) >> 31);
  uint64_t v16 = 8608;
  do
  {
    if (!*(unsigned char *)(v14 + v8)) {
      goto LABEL_17;
    }
    int v17 = *(_DWORD *)((char *)a6 + v16);
    if (v17 < v13 && v17 >= 1)
    {
LABEL_15:
      char v10 = 1;
      *(unsigned char *)(a6[1067] + v8) = 1;
      goto LABEL_17;
    }
    if (v17)
    {
      if (v17 > v11)
      {
        uint64_t v9 = (v9 + 1);
        if (!*v15) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)((char *)a6 + v16) = v29;
    }
LABEL_17:
    ++v8;
    v16 += 108;
  }
  while (v8 != 10);
  if ((int)v9 >= 1)
  {
    EvLog_nd("DD_Check_Age_QZSS_Data: Deleting EPH since in the future", 1, a3, v9);
    if (*v15) {
      EvLog("DD_Check_Age_QZSS_Data: Skipping since SkipFutureCheck set");
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v7 <= 15724800) {
    int v21 = 15724800;
  }
  else {
    int v21 = v7;
  }
  int v22 = v21 - 15724800;
  uint64_t v23 = 10768;
  do
  {
    if (*(unsigned char *)(a6[1071] + v19))
    {
      int v24 = *(_DWORD *)((char *)a6 + v23);
      if (v24 >= v22 || v24 < 1)
      {
        if (v24)
        {
          if (v24 > v11)
          {
            uint64_t v20 = (v20 + 1);
            EvLog_v("DD_Check_Age_QZSS_Data: Future almanac deleted SV %d age %d thresh %d", v19 + 193, (v7 - v24) / 604800, 0);
            if (!*v15)
            {
              char v10 = 1;
              *(unsigned char *)(a6[1068] + v19) = 1;
            }
          }
        }
        else
        {
          *(_DWORD *)((char *)a6 + v23) = v29;
        }
      }
      else
      {
        char v10 = 1;
        *(unsigned char *)(a6[1068] + v19) = 1;
        EvLog_v("DD_Check_Age_QZSS_Data: Old almanac deleted SV %d age %d thresh %d", v19 + 193, (v7 - v24) / 604800, (v7 - v22) / 604800);
      }
    }
    ++v19;
    v23 += 44;
  }
  while (v19 != 10);
  if ((int)v20 >= 1)
  {
    EvLog_nd("DD_Check_Age_QZSS_Data: Deleting ALM since in the future", 1, a3, v20);
    if (*v15) {
      EvLog("DD_Check_Age_QZSS_Data: Skipping since SkipFutureCheck set");
    }
  }
  uint64_t result = a3;
  if (v10)
  {
    return DD_Delete_Bad_QZSS_Data(a3, a4, a5, a6);
  }
  return result;
}

uint64_t DD_Proc_QZSS_Data(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, void *a6)
{
  uint64_t v130 = result;
  uint64_t v9 = a2;
  uint64_t v155 = *MEMORY[0x263EF8340];
  *(_WORD *)int v132 = 0;
  uint64_t v10 = *(unsigned __int8 *)(a2 + 8);
  if (!*((_DWORD *)a6 + 27 * v10 + 2178)) {
    *(unsigned char *)(a6[1075] + v10) = 0;
  }
  __int16 v11 = *(_WORD *)(a2 + 56);
  if ((v11 & 1) == 0) {
    return result;
  }
  int v12 = (unsigned int *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 18) << 16 != 9109504) {
    return result;
  }
  if ((v11 & 2) == 0)
  {
    int v13 = (unsigned char *)(a2 + 12);
    uint64_t v14 = result;
LABEL_7:
    uint64_t v15 = 0;
    *int v13 = 0;
    goto LABEL_18;
  }
  uint64_t v16 = (*(unsigned __int8 *)(a2 + 20) >> 2) & 7;
  *(unsigned char *)(a2 + 12) = (*(unsigned char *)(a2 + 20) >> 2) & 7;
  int v13 = (unsigned char *)(a2 + 12);
  uint64_t v14 = result;
  if (v16)
  {
    uint64_t result = DD_Predict_Subframe_Number(a4, v132);
    if (result)
    {
      uint64_t v15 = v16;
      uint64_t v9 = a2;
      if (v16 != v132[0] && !*a3 && !*(unsigned char *)(a6[6] + v10))
      {
        if (v16 == 1 && v132[0] == 2)
        {
          uint64_t v15 = 1;
        }
        else if (v16 == 2 && v132[0] == 3)
        {
          uint64_t v15 = 2;
        }
        else
        {
          if (v16 != 3 || v132[0] != 4)
          {
            uint64_t result = (uint64_t)EvCrt_v("DD_Proc_QZSS_Data:  SV %2d Subframe Number Error - decoded %d  expected %d", (int)v10 + 1, v16, v132[0]);
            uint64_t v9 = a2;
            goto LABEL_7;
          }
          uint64_t v15 = 3;
        }
      }
    }
    else
    {
      uint64_t v9 = a2;
      uint64_t v15 = v16;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_18:
  if ((unsigned __int16)g_Enable_Event_Log >= 4u)
  {
    EvLog_nd("QZS Subf ", 4, v9, *(unsigned __int8 *)(v9 + 6), v15, (int)*(double *)(a4 + 24), *(unsigned int *)(a4 + 8));
    int v17 = (unsigned __int16 *)(v14 + 6 * *(unsigned __int8 *)(a2 + 8));
    uint64_t result = (uint64_t)EvLog_nd("QZS Subf masks", 3, v18, v17[2318], v17[2319], v17[2320]);
    uint64_t v9 = a2;
    uint64_t v15 = *(unsigned __int8 *)(a2 + 12);
  }
  if ((v15 - 1) >= 3)
  {
    if ((v15 - 4) >= 2)
    {
      if (v15)
      {
        return (uint64_t)EvCrt_Illegal_Default("DD_Proc_QZSS_Data", 0x3B5u);
      }
      return result;
    }
    if ((~*(unsigned __int16 *)(v9 + 56) & 0x3FE) != 0) {
      return result;
    }
    if (!*(unsigned char *)(a4 + 5)) {
      return result;
    }
    int v19 = *(__int16 *)(a4 + 16);
    if (v19 < 1025) {
      return result;
    }
    unsigned int v20 = *(_DWORD *)(v9 + 24);
    int v21 = HIWORD(v20) & 0x3F;
    *(unsigned char *)(v9 + 13) = BYTE2(v20) & 0x3F;
    int v22 = (v20 >> 22) & 3;
    *(unsigned char *)(v9 + 14) = v22;
    if (v22) {
      goto LABEL_113;
    }
    uint64_t v23 = (v21 - 1);
    if (v23 <= 0x1F)
    {
      uint64_t v24 = v9;
      uint64_t result = Decode_GPS_Check_Alm_TOA(v12, *(unsigned char *)(*a6 + v23), v19, (unsigned __int8 *)(v130 + v23 + 192), (__int16 *)(v9 + 10), &v132[1]);
      if (result)
      {
        int v25 = *(_DWORD *)(v24 + 32);
        if ((v25 & 0x1F) == 0x1F || (v25 & 0x1F) == 3)
        {
          v25 &= 0xFFFFFFE0;
          *(_DWORD *)(v24 + 32) = v25;
        }
        if ((v25 & 0xE0) != 0) {
          *(_DWORD *)(v24 + 32) = v25 & 0xFFFFFF1F;
        }
        uint64_t result = DD_Proc_GPS_Alm_Subframe(*(unsigned __int8 *)(v24 + 13), *(_WORD *)(v24 + 10), (uint64_t)v12, *a5, v130, v130 + 224, a6);
      }
      else
      {
        uint64_t v9 = v24;
        if (!v132[1]) {
          goto LABEL_112;
        }
        uint64_t result = *(unsigned __int8 *)(v24 + 13);
        long long v84 = (char *)a6 + 44 * result;
        int v85 = *((_DWORD *)v84 + 1743);
        *((_DWORD *)v84 + 1743) = *a5;
        if (v85 || *a5 < 1) {
          goto LABEL_112;
        }
        uint64_t result = Core_Save_GPS_Alm(result, 0, (long long *)(v84 + 6972));
      }
      uint64_t v9 = a2;
    }
LABEL_112:
    int v22 = *(unsigned __int8 *)(v9 + 14);
LABEL_113:
    if (v22 == 3)
    {
      int v86 = *(unsigned __int8 *)(v9 + 13);
      if ((v86 - 1) <= 9)
      {
        uint64_t v87 = v9;
        uint64_t result = Decode_GPS_Check_Alm_TOA(v12, *(unsigned char *)(a6[1063] + (v86 - 1)), v19, (unsigned __int8 *)(v130 + (v86 - 1) + 3644), (__int16 *)(v9 + 10), &v132[1]);
        if (result)
        {
          uint64_t result = DD_Proc_QZSS_Alm_Subframe(*(unsigned char *)(v87 + 13), *(_WORD *)(v87 + 10), (uint64_t)v12, *a5, v130 + 3584, v130 + 3654, a6);
          uint64_t v9 = v87;
        }
        else
        {
          uint64_t v9 = v87;
          if (v132[1])
          {
            unsigned __int8 v88 = *(unsigned char *)(v87 + 13);
            char v89 = (char *)a6 + 44 * v88;
            int v90 = *((_DWORD *)v89 + 2681);
            *((_DWORD *)v89 + 2681) = *a5;
            if (!v90 && *a5 >= 1)
            {
              uint64_t result = Core_Save_QZSS_Alm((v88 - 64), 0, (long long *)(v89 + 10724));
              uint64_t v9 = a2;
            }
          }
        }
      }
    }
    int v91 = *(unsigned __int8 *)(v9 + 14);
    if (!*(unsigned char *)(v9 + 14))
    {
      if (*(unsigned char *)(v9 + 13) != 56) {
        return result;
      }
      uint64_t result = (uint64_t)DD_Proc_GPS_ION_UTC_Subframe(*(unsigned __int8 *)(v9 + 8), v12, *a5, v19, a6[1075], (uint64_t)a6);
      uint64_t v9 = a2;
      int v91 = *(unsigned __int8 *)(a2 + 14);
    }
    if (v91 == 3 && *(unsigned char *)(v9 + 13) == 51)
    {
      uint64_t result = DD_Proc_QZSS_Health_Subframe(v12, *a5, v130 + 3584, v130 + 3654, v130 + 3644, a6);
      uint64_t v92 = a6[1075];
      *(_WORD *)(v92 + 8) = 0;
      *(void *)uint64_t v92 = 0;
    }
    return result;
  }
  *(unsigned char *)(v9 + 13) = 0;
  uint64_t v26 = *(unsigned __int8 *)(v9 + 8);
  int v27 = (char *)a6 + 108 * v26;
  int v28 = *((_DWORD *)v27 + 2178);
  double v118 = a5;
  double v123 = v12;
  uint64_t v124 = (uint64_t)a6;
  unsigned int v122 = v15 - 1;
  if (v28 == 0xFFFFFF)
  {
    LODWORD(v117) = 0;
    HIDWORD(v117) = *(unsigned __int8 *)(a6[1063] + v26);
  }
  else if (*(unsigned char *)(a6[1063] + v26))
  {
    if (*(unsigned char *)(a6[1069] + v26))
    {
      uint64_t v29 = 0;
      double v30 = v27 + 8712;
      unsigned int v31 = *(unsigned __int16 *)(v9 + 56);
      do
      {
        int v32 = 1 << (8 * v15 - 8 + v29);
        if ((v28 & v32) == 0
          && ((v31 >> v29) & 1) != 0
          && *(_DWORD *)(v9 + 24 + 4 * v29) == *((_DWORD *)a6
                                               + 27 * v26
                                               + (8 * v15 - 8)
                                               + v29
                                               + 2154))
        {
          v28 |= v32;
          *double v30 = v28;
        }
        ++v29;
      }
      while (v29 != 8);
      LODWORD(v117) = v28 == 0xFFFFFF;
      HIDWORD(v117) = 1;
    }
    else
    {
      uint64_t v117 = 0x100000000;
    }
  }
  else
  {
    uint64_t v117 = 0;
  }
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = 0;
  int v36 = 0;
  int v37 = 0;
  uint64_t v38 = *(unsigned __int16 *)(v9 + 56);
  uint64_t v120 = v15;
  uint64_t v121 = v14 + 3676;
  uint64_t v125 = v14 + 4636;
  uint64_t v126 = v26;
  uint64_t v119 = v15 - 1;
  double v39 = (_WORD *)(v14 + 4636 + 6 * v26 + 2 * v119);
  int v127 = v26 + 193;
  uint64_t v40 = 32 * v15 + 96 * v26 + v14 + 3644;
  uint64_t v41 = v9 + 24;
  do
  {
    int v42 = 1 << (v33 + 2);
    int v43 = (unsigned __int16)(v42 & *v39);
    if (v43) {
      ++v37;
    }
    if ((v42 & v38) != 0)
    {
      ++v36;
      BOOL v44 = v43 == 0;
    }
    else
    {
      BOOL v44 = 1;
    }
    if (!v44)
    {
      ++v35;
      int v45 = *(_DWORD *)(v40 + 4 * v33);
      if (*(_DWORD *)(v41 + 4 * v33) != v45)
      {
        ++v34;
        uint64_t v46 = v15;
        uint64_t v47 = v38;
        EvLog_v("GPS_Data_Decode: SV %d SF %d Diff Wd %d 0x%x 0x%x", v127, v15, v33 + 2, *(_DWORD *)(v41 + 4 * v33), v45);
        uint64_t v38 = v47;
        uint64_t v15 = v46;
        uint64_t v9 = a2;
      }
    }
    ++v33;
  }
  while (v33 != 8);
  uint64_t v48 = v130;
  uint64_t v49 = v130 + 3584;
  uint64_t result = v125;
  uint64_t v50 = v126;
  if (v34 >= 1)
  {
    if (v34 == 1
      && v35 >= 4
      && (v15 == 1 && (v38 & 0x3C4) != 0x3C4 || v15 >= 2 && (v38 & 0x3FC) != 0x3FC))
    {
      return result;
    }
    int v37 = 0;
    uint64_t v51 = 2 * v15 - 2;
    *(_WORD *)(v125 + 6 * v126 + v51) = 0;
    *(_WORD *)(v49 + 6 * v126 + v51) = 256;
    uint64_t v48 = v130;
  }
  if (v35 - v34 <= 1)
  {
    if (v36 >= v37)
    {
      *(_WORD *)(v125 + 6 * v126 + 2 * (v120 - 1)) = v38;
      long long v62 = *(_OWORD *)(v9 + 40);
      unsigned int v63 = (_OWORD *)(v121 + 96 * v126 + 32 * (v120 - 1));
      *unsigned int v63 = *(_OWORD *)(v9 + 24);
      v63[1] = v62;
    }
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v53 = v125 + 6 * v126 + 2 * v15;
    int v56 = *(unsigned __int16 *)(v53 - 2);
    uint64_t v54 = (_WORD *)(v53 - 2);
    int v55 = v56;
    uint64_t v57 = v9 + 24;
    uint64_t v58 = 32 * v15 + 96 * v126 + v48 + 3644;
    do
    {
      int v59 = 1 << (v52 + 2);
      int v60 = v59 & v55;
      if ((v59 & v38) != 0 && v60 == 0)
      {
        *(_DWORD *)(v58 + 4 * v52) = *(_DWORD *)(v57 + 4 * v52);
        v55 |= (unsigned __int16)(1 << (v52 + 2));
        *uint64_t v54 = v55;
      }
      else if ((v59 & v38) == 0 && v60)
      {
        *(_DWORD *)(v57 + 4 * v52) = *(_DWORD *)(v58 + 4 * v52);
        LODWORD(v38) = v38 | (unsigned __int16)(1 << (v52 + 2));
      }
      ++v52;
    }
    while (v52 != 8);
  }
  if (v122 <= 2)
  {
    unsigned int v64 = 0x90207u >> (8 * v122);
    if ((v38 >> (v64 & 0xF)))
    {
      int v65 = BYTE2(v123[v64 & 0xF]);
      if ((v15 != 1 || (v38 & 0x3C4) == 0x3C4) && (v15 < 2 || (v38 & 0x3FC) == 0x3FC))
      {
        uint64_t v66 = v130 + 3654;
        double v67 = (unsigned __int16 *)(v49 + 6 * v126);
        unsigned int v68 = &v67[v119];
        int v69 = *v68;
        if (v65 != v69) {
          *unsigned int v68 = v65;
        }
        if (v65 != *(unsigned __int16 *)(v66 + 2 * v126))
        {
          for (uint64_t i = 0; i != 6; i += 2)
          {
            if (2 * v119 != i) {
              *(_WORD *)(v130 + 6 * v126 + 4636 + i) = 0;
            }
          }
          *(_WORD *)(v66 + 2 * v126) = v65;
        }
        uint64_t v71 = (_WORD *)(v125 + 6 * v126);
        int v72 = (unsigned __int16)*v71;
        if ((~v72 & 0x3C4) != 0
          || (uint64_t v73 = v125 + 6 * v126,
              int v75 = *(unsigned __int16 *)(v73 + 2),
              uint64_t v74 = (_WORD *)(v73 + 2),
              (~v75 & 0x3FC) != 0)
          || (uint64_t v76 = v125 + 6 * v126,
              int v78 = *(unsigned __int16 *)(v76 + 4),
              uint64_t v77 = (_WORD *)(v76 + 4),
              (~v78 & 0x3FC) != 0)
          || (int v79 = *v67, v79 != *(unsigned __int16 *)(v49 + 6 * v126 + 2))
          || v79 != *(unsigned __int16 *)(v49 + 6 * v126 + 4))
        {
LABEL_139:
          if ((~v72 & 0x3C4) != 0) {
            return result;
          }
          uint64_t v93 = result + 6 * v50;
          int v95 = *(unsigned __int16 *)(v93 + 2);
          float64x2_t v94 = (_WORD *)(v93 + 2);
          if ((~v95 & 0x3FC) != 0) {
            return result;
          }
          uint64_t v96 = result + 6 * v50;
          int v98 = *(unsigned __int16 *)(v96 + 4);
          double v97 = (_WORD *)(v96 + 4);
          if ((~v98 & 0x3FC) != 0) {
            return result;
          }
          int v99 = *v67;
          if (v99 != *(unsigned __int16 *)(v49 + 6 * v50 + 2)
            || v99 != *(unsigned __int16 *)(v49 + 6 * v50 + 4))
          {
            return result;
          }
          uint64_t v100 = v130 + 4696;
          unint64_t v101 = *(unsigned int *)(v121 + 96 * v50);
          unint64_t v102 = 0xE4FE7F3uLL >> ((v101 >> 2) & 0x1F);
          if (v65 == v69)
          {
            int v103 = HIDWORD(v117);
            if (!HIDWORD(v117) && (v102 & 1) != 0)
            {
              *(unsigned char *)(v100 + v50) = 1;
              *uint64_t v71 = 0;
              *float64x2_t v94 = 0;
              *double v97 = 0;
              return result;
            }
            BOOL v104 = *(unsigned __int8 *)(v100 + v50) == 0;
          }
          else
          {
            BOOL v104 = 0;
            *(unsigned char *)(v100 + v50) = 1;
            int v103 = HIDWORD(v117);
          }
          *uint64_t v71 = 0;
          *float64x2_t v94 = 0;
          *double v97 = 0;
          unsigned int v105 = (int *)a4;
          if (!v103 || (v102 & 1) == 0) {
            goto LABEL_166;
          }
          signed int v106 = (v101 >> 14) & 0x3FF;
          if (*(unsigned char *)(a4 + 5))
          {
            do
            {
              unsigned __int16 v107 = v106;
              v106 += 1024;
            }
            while (*(__int16 *)(a4 + 16) - 512 > (__int16)v107);
            unsigned int v105 = (int *)a4;
            if (*(unsigned __int16 *)(a4 + 16) == v107) {
              goto LABEL_166;
            }
            if (*(int *)a4 < 3) {
              goto LABEL_166;
            }
            int v108 = (int)*(double *)(a4 + 24);
            if ((v108 - 32) >= 0x93A41) {
              goto LABEL_166;
            }
          }
          else
          {
            signed int v109 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
            if (v106 > v109) {
              LOWORD(v109) = (v101 >> 14) & 0x3FF;
            }
            unsigned __int16 v107 = ((v106 ^ 0x3FF) + v109) & 0xFC00 | v106;
            int v108 = (int)*(double *)(a4 + 24);
          }
          int v110 = (__int16)v107;
          uint64_t result = DD_Submit_WeekNum((v126 - 63), (__int16)v107, v124, v121, (uint64_t)v105);
          if (result)
          {
            int v111 = v108 + 604800 * v110;
            if (*v105 <= 2) {
              int v111 = 0;
            }
            double v112 = v118;
            *double v118 = v111;
            uint64_t v113 = a2;
            if (!v104) {
              return result;
            }
LABEL_168:
            uint64_t v114 = *(unsigned __int8 *)(v113 + 8);
            uint64_t v115 = v124 + 108 * v114;
            BOOL v116 = *(_DWORD *)(v115 + 8608) != 0;
            *(_DWORD *)(v115 + 8608) = v111;
            if ((v116 & ~v117 & 1) == 0 && *v112 >= 1)
            {
              *(unsigned char *)(*(void *)(v124 + 8576) + v114) = 1;
              return Core_Save_QZSS_Eph((v114 - 63), 0, (long long *)(v115 + 8608));
            }
            return result;
          }
LABEL_166:
          double v112 = v118;
          uint64_t v113 = a2;
          if (!v104) {
            return result;
          }
          int v111 = *v118;
          goto LABEL_168;
        }
        double v80 = (long long *)(v121 + 96 * v126);
        long long v81 = v80[3];
        long long v150 = v80[2];
        long long v151 = v81;
        long long v82 = v80[5];
        long long v152 = v80[4];
        long long v153 = v82;
        long long v83 = v80[1];
        long long v148 = *v80;
        int v154 = 0;
        v147[0] = *v118;
        v147[1] = 4;
        long long v149 = v83;
        memset(v133, 0, sizeof(v133));
        int v134 = 0;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        uint64_t v146 = 0;
        Get_GPS_Kep_Ephemeris(5, v126 - 63, (uint64_t)v147, (uint64_t)v133);
        uint64_t v50 = v126;
        int v128 = Kep_Check_Ephemeris(*v118 / 604800, *v118 % 604800, (uint64_t)v133);
        if (!ST_Check_Eph_Kep_Err((uint64_t)"DD_Proc_QZSS_Eph_Subframe", v128, (uint64_t)v133))
        {
          if ((v128 & 0xC) != 0) {
            *uint64_t v71 = 0;
          }
          if ((v128 & 0x3F0) != 0) {
            *uint64_t v74 = 0;
          }
          if ((v128 & 0xC00) != 0)
          {
            _WORD *v77 = 0;
            uint64_t v50 = v126;
LABEL_137:
            *(unsigned char *)(*(void *)(v124 + 8600) + v50) = 1;
            goto LABEL_138;
          }
          uint64_t v50 = v126;
          if ((v128 & 0xFFC) != 0) {
            goto LABEL_137;
          }
        }
LABEL_138:
        int v72 = (unsigned __int16)*v71;
        uint64_t result = v125;
        goto LABEL_139;
      }
    }
  }
  return result;
}

BOOL DD_Proc_QZSS_Alm_Subframe(char a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v12 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  uint64_t v13 = (a1 - 1);
  if (*(unsigned char *)(a7[1063] + v13)) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(a7[1063] + v13)) {
    int v15 = 0;
  }
  else {
    int v15 = ((*(_DWORD *)(a3 + 16) & 0xE0) == 0) & (0xE4FE7F3uLL >> (*(_DWORD *)(a3 + 16) & 0x1F));
  }
  if (v15 == 1)
  {
    uint64_t v16 = a7[1069];
    if (*(unsigned char *)(v16 + v13))
    {
      int v17 = (char *)a7 + 108 * (a1 - 1);
      int v18 = *((_DWORD *)v17 + 2152);
      if (((0xE4FE7F3uLL >> (((unint64_t)*((unsigned int *)v17 + 2154) >> 2) & 0x1F)) & 1) == 0
        && v18 + 3600 > a4)
      {
LABEL_12:
        LOBYTE(v12) = 0;
        goto LABEL_16;
      }
      if (v18 + 100 < a4)
      {
        *(unsigned char *)(a7[1065] + v13) = 0;
        *(unsigned char *)(v16 + v13) = 0;
        uint64_t v19 = a5 + 6 * (a1 - 1);
        *(_DWORD *)uint64_t v19 = 16777472;
        *(_WORD *)(v19 + 4) = 256;
        *(_WORD *)(a6 + 2 * v13) = 256;
      }
    }
    LOBYTE(v12) = 1;
  }
LABEL_16:
  uint64_t v50 = 0;
  int v49 = a4;
  long long v51 = *(_OWORD *)(a3 + 8);
  long long v52 = *(_OWORD *)(a3 + 24);
  __int16 v44 = 0;
  memset(v43, 0, 15);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  Get_GPS_Kep_Almanac((uint64_t)&v49, (uint64_t)v43);
  LODWORD(v43[1]) = 5;
  int v20 = Kep_Check_Almanac(a4 / 604800, (uint64_t)v43);
  if (v20) {
    *(unsigned char *)(a7[1075] + v13) = 1;
  }
  BOOL result = ST_Check_Alm_Kep_Err((uint64_t)"DD_Proc_QZSS_Alm_Subframe:", v20, (uint64_t)v43);
  if (result)
  {
    uint64_t v22 = a7[1063];
    *(unsigned char *)(v22 + v13) = v12;
    uint64_t v23 = (char *)a7 + 44 * v13;
    uint64_t v24 = (long long *)(v23 + 10768);
    *((_WORD *)v23 + 5389) = a2;
    long long v25 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v23 + 10796) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v23 + 10780) = v25;
    *((_DWORD *)v23 + 2692) = a4;
    *((_DWORD *)v23 + 2693) = 4;
    *(unsigned char *)(a7[1066] + v13) = 1;
    *(unsigned char *)(a7[1071] + v13) = 1;
    if (*(unsigned char *)(v22 + v13)) {
      int v26 = 1;
    }
    else {
      int v26 = 2;
    }
    *(_DWORD *)(a7[1064] + 20 * v13 + 4) = v26;
    if (a4 >= 1)
    {
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = p_NV + 56 * (a1 - 64);
      uint64_t v30 = v29 - 4968;
      long long v31 = *v24;
      long long v32 = v24[1];
      *(_OWORD *)(v30 + 36) = *(long long *)((char *)v24 + 28);
      *(_OWORD *)(v30 + 24) = v32;
      *(_OWORD *)(v30 + 8) = v31;
      uint64_t v33 = v29 - 4960;
      __int16 v34 = -9871;
      do
      {
        int v35 = *(unsigned __int8 *)(v33 + v27) ^ HIBYTE(v34);
        __int16 v34 = -12691 * (v34 + (*(unsigned __int8 *)(v33 + v27) ^ HIBYTE(v34))) + 22719;
        uint64_t v28 = (v28 + v35);
        ++v27;
      }
      while (v27 != 48);
      *(void *)uint64_t v30 = v28;
      uint64_t v22 = a7[1063];
    }
    uint64_t v36 = 0;
    LODWORD(v37) = 0;
    uint64_t v38 = p_NV;
    __int16 v39 = *(_WORD *)(v22 + 8);
    *(void *)(p_NV + 5828) = *(void *)v22;
    *(_WORD *)(v38 + 5836) = v39;
    uint64_t v40 = v38 + 5824;
    __int16 v41 = -9871;
    do
    {
      int v42 = *(unsigned __int8 *)(v40 + v36) ^ HIBYTE(v41);
      __int16 v41 = -12691 * (v41 + (*(unsigned __int8 *)(v40 + v36) ^ HIBYTE(v41))) + 22719;
      uint64_t v37 = (v37 + v42);
      ++v36;
    }
    while (v36 != 40);
    *(void *)(v38 + 5816) = v37;
  }
  return result;
}

unint64_t DD_Proc_QZSS_Health_Subframe(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t result = (unint64_t)Decode_QZSS_Health_Subframe(a1, v30);
  uint64_t v12 = 0;
  uint64_t v13 = (_WORD *)(a3 + 4);
  BOOL v14 = a6 + 1076;
  int v15 = (int *)(a6 + 1346);
  uint64_t v16 = 4;
  do
  {
    if (*(unsigned char *)(a6[1063] + v12))
    {
      if (v30[v12]) {
        goto LABEL_4;
      }
    }
    else if (v30[v12])
    {
      uint64_t v18 = a6[1069];
      int v19 = *(unsigned __int8 *)(v18 + v12);
      if (!*(unsigned char *)(v18 + v12)
        || ((0xE4FE7F3uLL >> (((unint64_t)v14[2] >> 2) & 0x1F)) & 1) != 0
        || (unint64_t result = (*v14 + 3600), (int)result <= a2))
      {
        unint64_t result = a6[1071];
        if (!*(unsigned char *)(result + v12)) {
          goto LABEL_18;
        }
        int v20 = *v15;
        if (((0xE4FE7F3uLL >> (v15[5] & 0x1F)) & 1) != 0 || v20 + 3600 <= a2)
        {
          if (v20 + 100 < a2)
          {
            *(unsigned char *)(a6[1066] + v12) = 0;
            *(unsigned char *)(result + v12) = 0;
            *(unsigned char *)(a5 + v12) = -1;
            uint64_t v18 = a6[1069];
            int v19 = *(unsigned __int8 *)(v18 + v12);
          }
LABEL_18:
          if (v19 && *v14 + 100 < a2)
          {
            *(unsigned char *)(a6[1065] + v12) = 0;
            *(unsigned char *)(v18 + v12) = 0;
            *((_DWORD *)v13 - 1) = 16777472;
            *uint64_t v13 = 256;
            *(_WORD *)(a4 + 2 * v12) = 256;
          }
LABEL_4:
          int v17 = 1;
          goto LABEL_14;
        }
      }
      v30[v12] = 0;
    }
    int v17 = 2;
LABEL_14:
    *(_DWORD *)(a6[1064] + v16) = v17;
    ++v12;
    v16 += 20;
    v13 += 3;
    v14 += 27;
    v15 += 11;
  }
  while (v12 != 10);
  uint64_t v21 = 0;
  LODWORD(v22) = 0;
  uint64_t v23 = a6[1063];
  *(void *)uint64_t v23 = *(void *)v30;
  *(_WORD *)(v23 + 8) = v31;
  uint64_t v24 = a6[1063];
  uint64_t v25 = p_NV;
  __int16 v26 = *(_WORD *)(v24 + 8);
  *(void *)(p_NV + 5828) = *(void *)v24;
  *(_WORD *)(v25 + 5836) = v26;
  uint64_t v27 = v25 + 5824;
  __int16 v28 = -9871;
  do
  {
    int v29 = *(unsigned __int8 *)(v27 + v21) ^ HIBYTE(v28);
    __int16 v28 = -12691 * (v28 + (*(unsigned __int8 *)(v27 + v21) ^ HIBYTE(v28))) + 22719;
    uint64_t v22 = (v22 + v29);
    ++v21;
  }
  while (v21 != 40);
  *(void *)(v25 + 5816) = v22;
  return result;
}

uint64_t DD_Save_New_QZSS_Eph(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 8616;
  uint64_t v11 = 8608;
  uint64_t v12 = 10768;
  do
  {
    if (!*(unsigned char *)(a3 + v9)) {
      goto LABEL_22;
    }
    uint64_t v13 = (_OWORD *)(a2 + v7);
    unint64_t v14 = *(unsigned int *)(a2 + v7);
    if (!DD_Check_New_QZSS_Eph(v9, a2, (uint64_t)a5))
    {
      *(unsigned char *)(a3 + v9) = 0;
      void v13[4] = 0u;
      v13[5] = 0u;
      __n128 v13[2] = 0u;
      v13[3] = 0u;
      *uint64_t v13 = 0u;
      v13[1] = 0u;
      goto LABEL_22;
    }
    unint64_t v15 = (0xE4FE7F3uLL >> ((v14 >> 2) & 0x1F)) & 1;
    uint64_t v16 = a5[1063];
    if (v15) {
      BOOL v17 = *(unsigned char *)(v16 + v9) == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v18 = a5[1071];
      if (!*(unsigned char *)(v18 + v9)) {
        goto LABEL_18;
      }
      int v19 = *(_DWORD *)((char *)a5 + v12);
      if (((0xE4FE7F3uLL >> (*(_DWORD *)((unsigned char *)a5 + v12 + 20) & 0x1F)) & 1) == 0 && v19 + 3600 > a1)
      {
        *(unsigned char *)(v16 + v9) = 0;
LABEL_15:
        int v20 = 2;
        goto LABEL_20;
      }
      if (v19 + 100 < a1)
      {
        *(unsigned char *)(a5[1066] + v9) = 0;
        *(unsigned char *)(v18 + v9) = 0;
        *(unsigned char *)(a4 + v9) = -1;
        *(unsigned char *)(a5[1063] + v9) = 1;
      }
      else
      {
LABEL_18:
        *(unsigned char *)(v16 + v9) = v15;
      }
    }
    else
    {
      *(unsigned char *)(v16 + v9) = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    int v20 = 1;
LABEL_20:
    *(_DWORD *)(a5[1064] + v8) = v20;
    uint64_t v21 = (char *)a5 + v11;
    uint64_t v22 = (_OWORD *)((char *)a5 + v10);
    long long v23 = v13[5];
    long long v25 = v13[2];
    long long v24 = v13[3];
    _OWORD v22[4] = v13[4];
    v22[5] = v23;
    double v22[2] = v25;
    v22[3] = v24;
    long long v26 = v13[1];
    *uint64_t v22 = *v13;
    v22[1] = v26;
    *(_DWORD *)uint64_t v21 = a1;
    *((_DWORD *)v21 + 1) = 4;
    *(unsigned char *)(a5[1065] + v9) = 1;
    *(unsigned char *)(a5[1069] + v9) = 1;
    *((_DWORD *)v21 + 26) = 0;
    *(unsigned char *)(a5[1074] + v9) = 0;
    *(unsigned char *)(a3 + v9) = 0;
    if (a1 >= 1)
    {
      *(unsigned char *)(a5[1072] + v9) = 1;
      Core_Save_QZSS_Eph((v9 - 63), 0, (long long *)v21);
    }
LABEL_22:
    ++v9;
    v10 += 108;
    v11 += 108;
    v8 += 20;
    v12 += 44;
    v7 += 96;
  }
  while (v9 != 10);
  return 1;
}

BOOL DD_Check_New_QZSS_Eph(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*(void *)(a3 + 8552) + a1);
  uint64_t v4 = a3 + 108 * a1;
  long long v5 = *(_OWORD *)(v4 + 8664);
  long long v16 = *(_OWORD *)(v4 + 8648);
  long long v17 = v5;
  long long v6 = *(_OWORD *)(v4 + 8696);
  long long v18 = *(_OWORD *)(v4 + 8680);
  long long v19 = v6;
  long long v7 = *(_OWORD *)(v4 + 8632);
  long long v14 = *(_OWORD *)(v4 + 8616);
  long long v15 = v7;
  if (!v3) {
    return 1;
  }
  uint64_t v8 = a2 + 96 * a1;
  if (((*(_DWORD *)(v8 + 20) ^ DWORD1(v15)) & 0xFF0000) != 0) {
    return 1;
  }
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v4 + 8712);
  int32x4_t v12 = 0uLL;
  do
  {
    int32x4_t v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)&v14 + v10), *(int32x4_t *)(v8 + v10))));
    v10 += 16;
  }
  while (v10 != 96);
  if (vaddvq_s32(v12)) {
    BOOL v13 = v11 == 0xFFFFFF;
  }
  else {
    BOOL v13 = 0;
  }
  return !v13;
}

uint64_t SA_Interface_Logger(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t v225 = *MEMORY[0x263EF8340];
  if ((g_FPE_LogSeverity & 0x20) != 0)
  {
    uint64_t v7 = result;
    double v214 = (double *)(a2 + 2127104);
    *(double *)(a2 + 2127104) = *(double *)(a2 + 2127104) + (double)*(int *)(result + 24);
    LCD_SA_Debug_Ctl((uint64_t)a6);
    uint64_t v8 = *a6;
    char v9 = 76;
    uint64_t v10 = 1u;
    do
    {
      *a6 = v8 + 1;
      *uint64_t v8 = v9;
      uint64_t v8 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v8 = a6[2];
        *a6 = v8;
      }
      char v9 = aLcdKfsol[v10++];
    }
    while (v10 != 12);
    v222[1] = 0.0;
    v222[0] = 0.0;
    double v223 = 0.0;
    long long v220 = *(_OWORD *)(v7 + 128);
    uint64_t v215 = v7;
    uint64_t v221 = *(void *)(v7 + 144);
    ECEF2Geo((double *)&v220, (uint64_t)&WGS84_Datum, (uint64_t)v222);
    uint64_t v11 = 0;
    char v12 = 1;
    do
    {
      double v13 = v222[v11] * 57.2957795;
      double v14 = -v13;
      if (v13 >= 0.0) {
        double v14 = v222[v11] * 57.2957795;
      }
      unsigned int v15 = (int)v14;
      char v16 = v12;
      double v17 = (v14 - (double)(int)v14) * 60.0;
      unsigned int v18 = (int)v17;
      double v19 = (v17 - (double)(int)v17) * 60.0;
      sprintf_4d(a6, v15);
      sprintf_3d(a6, v18);
      if (v19 * 100000.0 <= 0.0) {
        double v20 = -0.5;
      }
      else {
        double v20 = 0.5;
      }
      double v21 = v19 * 100000.0 + v20;
      if (v21 <= 2147483650.0)
      {
        if (v21 >= -2147483650.0) {
          unsigned int v22 = (int)v21;
        }
        else {
          unsigned int v22 = 0x80000000;
        }
      }
      else
      {
        unsigned int v22 = 0x7FFFFFFF;
      }
      sprintf_8f((uint64_t)a6, v22, 6);
      long long v23 = (char *)&ch_NSEW + 8 * v11;
      if (v222[v11] < 0.0) {
        v23 += 4;
      }
      char v24 = *v23;
      if (*v23)
      {
        long long v25 = *a6;
        long long v26 = v23 + 1;
        do
        {
          *a6 = v25 + 1;
          *long long v25 = v24;
          long long v25 = *a6;
          if (*a6 >= a6[3])
          {
            long long v25 = a6[2];
            *a6 = v25;
          }
          int v27 = *v26++;
          char v24 = v27;
        }
        while (v27);
      }
      char v12 = 0;
      uint64_t v11 = 1;
    }
    while ((v16 & 1) != 0);
    sprintf_13f3(a6, v223);
    uint64_t v28 = v215;
    sprintf_gR8(a6, *(double *)(v215 + 800));
    int v29 = *a6;
    uint64_t v30 = &ch_TOW_Status[10 * *(unsigned int *)(v215 + 16) + 1];
    char v31 = 32;
    do
    {
      *a6 = v29 + 1;
      *int v29 = v31;
      int v29 = *a6;
      if (*a6 >= a6[3])
      {
        int v29 = a6[2];
        *a6 = v29;
      }
      int v32 = *v30++;
      char v31 = v32;
    }
    while (v32);
    sprintf_13f3(a6, *(double *)(v215 + 96) + *v214 * 299792.458);
    sprintf_13f3(a6, *(double *)(v215 + 104) + *v214 * 299792.458);
    sprintf_13f3(a6, *(double *)(v215 + 112) + *v214 * 299792.458);
    sprintf_13f3(a6, *(double *)(v215 + 120));
    uint64_t v33 = *a6;
    char v34 = 32;
    uint64_t v35 = 1u;
    do
    {
      *a6 = v33 + 1;
      *uint64_t v33 = v34;
      uint64_t v33 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v33 = a6[2];
        *a6 = v33;
      }
      char v34 = aPosEcef[v35++];
    }
    while (v35 != 11);
    sprintf_13f3(a6, *(double *)(v215 + 128));
    sprintf_13f3(a6, *(double *)(v215 + 136));
    sprintf_13f3(a6, *(double *)(v215 + 144));
    uint64_t v36 = *a6;
    char v37 = 32;
    uint64_t v38 = 1u;
    do
    {
      *a6 = v36 + 1;
      *uint64_t v36 = v37;
      uint64_t v36 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v36 = a6[2];
        *a6 = v36;
      }
      char v37 = aVelEcef[v38++];
    }
    while (v38 != 11);
    sprintf_13f3(a6, *(double *)(v215 + 152));
    sprintf_13f3(a6, *(double *)(v215 + 160));
    sprintf_13f3(a6, *(double *)(v215 + 168));
    uint64_t v39 = 0;
    uint64_t v40 = *a6;
    char v41 = 32;
    do
    {
      *a6 = v40 + 1;
      *uint64_t v40 = v41;
      uint64_t v40 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v40 = a6[2];
        *a6 = v40;
      }
      char v41 = aSlewedPeBias[++v39];
    }
    while (v39 != 16);
    sprintf_13f3(a6, *(double *)(v215 + 96));
    sprintf_13f3(a6, *(double *)(v215 + 104));
    sprintf_13f3(a6, *(double *)(v215 + 112));
    ud2cov((const double *)(v215 + 256), v219, 0xBu);
    int v42 = *a6;
    char v43 = 32;
    uint64_t v44 = 1u;
    do
    {
      *a6 = v42 + 1;
      *int v42 = v43;
      int v42 = *a6;
      if (*a6 >= a6[3])
      {
        int v42 = a6[2];
        *a6 = v42;
      }
      char v43 = aPosEcefVar[v44++];
    }
    while (v44 != 15);
    sprintf_sgR8(a6, v219[20]);
    sprintf_sgR8(a6, v219[27]);
    sprintf_sgR8(a6, v219[35]);
    sprintf_sgR8(a6, v219[26]);
    sprintf_sgR8(a6, v219[33]);
    sprintf_sgR8(a6, v219[34]);
    long long v45 = *a6;
    char v46 = 32;
    uint64_t v47 = 1u;
    do
    {
      *a6 = v45 + 1;
      *long long v45 = v46;
      long long v45 = *a6;
      if (*a6 >= a6[3])
      {
        long long v45 = a6[2];
        *a6 = v45;
      }
      char v46 = aVelEcefVar[v47++];
    }
    while (v47 != 15);
    sprintf_sgR8(a6, v219[44]);
    sprintf_sgR8(a6, v219[54]);
    sprintf_sgR8(a6, v219[65]);
    sprintf_sgR8(a6, v219[53]);
    sprintf_sgR8(a6, v219[63]);
    sprintf_sgR8(a6, v219[64]);
    uint64_t v48 = *a6;
    char v49 = 32;
    uint64_t v50 = 1u;
    do
    {
      *a6 = v48 + 1;
      *uint64_t v48 = v49;
      uint64_t v48 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v48 = a6[2];
        *a6 = v48;
      }
      char v49 = aAcc_0[v50++];
    }
    while (v50 != 6);
    sprintf_ACC(a6, *(double *)(v215 + 176));
    sprintf_ACC(a6, *(double *)(v215 + 184));
    sprintf_ACC(a6, *(double *)(v215 + 192));
    sprintf_ACC(a6, *(double *)(v215 + 200));
    sprintf_ACC(a6, *(double *)(v215 + 208));
    sprintf_gR8(a6, *(double *)(v215 + 216));
    sprintf_ACC(a6, *(double *)(v215 + 224));
    sprintf_ACC(a6, *(double *)(v215 + 232));
    sprintf_ACC(a6, *(double *)(v215 + 240));
    sprintf_gR8(a6, *(double *)(v215 + 248));
    long long v51 = *a6;
    char v52 = 32;
    uint64_t v53 = 1u;
    do
    {
      *a6 = v51 + 1;
      *long long v51 = v52;
      long long v51 = *a6;
      if (*a6 >= a6[3])
      {
        long long v51 = a6[2];
        *a6 = v51;
      }
      char v52 = aBiasVar[v53++];
    }
    while (v53 != 11);
    sprintf_sgR8(a6, v219[0]);
    sprintf_sgR8(a6, v219[2]);
    sprintf_sgR8(a6, v219[5]);
    sprintf_sgR8(a6, v219[9]);
    uint64_t v54 = *a6;
    char v55 = 32;
    uint64_t v56 = 1u;
    do
    {
      *a6 = v54 + 1;
      *uint64_t v54 = v55;
      uint64_t v54 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v54 = a6[2];
        *a6 = v54;
      }
      char v55 = aTimeSlewMs[v56++];
    }
    while (v56 != 15);
    sprintf_3d(a6, *(_DWORD *)(v215 + 24));
    uint64_t v57 = 0;
    uint64_t v58 = *a6;
    char v59 = 32;
    do
    {
      *a6 = v58 + 1;
      *uint64_t v58 = v59;
      uint64_t v58 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v58 = a6[2];
        *a6 = v58;
      }
      char v59 = aAs[++v57];
    }
    while (v57 != 4);
    sprintf_3d(a6, (int)*v214);
    uint64_t v60 = 0;
    int v61 = *a6;
    char v62 = 32;
    do
    {
      *a6 = v61 + 1;
      *int v61 = v62;
      int v61 = *a6;
      if (*a6 >= a6[3])
      {
        int v61 = a6[2];
        *a6 = v61;
      }
      char v62 = asc_22BAAA2FA[++v60];
    }
    while (v60 != 2);
    sprintf_gR8(a6, *(double *)(v215 + 808));
    unsigned int v63 = (*a6)++;
    *unsigned int v63 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, *(double *)(v215 + 816));
    unsigned int v64 = (*a6)++;
    *unsigned int v64 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, *(double *)(v215 + 824));
    uint64_t v66 = (*a6)++;
    *uint64_t v66 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    LOBYTE(v65) = *(unsigned char *)(v215 + 1200);
    sprintf_gR8(a6, (double)v65);
    double v67 = (*a6)++;
    *double v67 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, *(double *)(v215 + 80));
    unsigned int v68 = (*a6)++;
    *unsigned int v68 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, *(double *)(v215 + 88));
    int v69 = (*a6)++;
    *int v69 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    int v70 = 4;
    do
    {
      sprintf_gR8(a6, 0.0);
      uint64_t v71 = (*a6)++;
      *uint64_t v71 = 32;
      if (*a6 >= a6[3]) {
        *a6 = a6[2];
      }
      --v70;
    }
    while (v70);
    double v72 = 0.0;
    if (*(unsigned char *)(v215 + 1201)) {
      double v72 = 1.0;
    }
    sprintf_gR8(a6, v72);
    uint64_t v73 = (*a6)++;
    *uint64_t v73 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_3d(a6, *(_DWORD *)(v215 + 1204));
    uint64_t v74 = (*a6)++;
    *uint64_t v74 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, 0.0);
    int v75 = (*a6)++;
    *int v75 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, 0.0);
    uint64_t v76 = (*a6)++;
    *uint64_t v76 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_gR8(a6, 1.0);
    uint64_t v77 = (*a6)++;
    char *v77 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_2d(a6, *(unsigned __int8 *)(v215 + 784));
    int v78 = (*a6)++;
    *int v78 = 32;
    int v79 = *a6;
    if (*a6 >= a6[3]) {
      int v79 = a6[2];
    }
    *a6 = v79 + 1;
    *int v79 = 10;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    LCD_SA_Debug_Ctl((uint64_t)a6);
    double v80 = *a6;
    char v81 = 76;
    uint64_t v82 = 1u;
    do
    {
      *a6 = v80 + 1;
      *double v80 = v81;
      double v80 = *a6;
      if (*a6 >= a6[3])
      {
        double v80 = a6[2];
        *a6 = v80;
      }
      char v81 = aLcdGBgto[v82++];
    }
    while (v82 != 14);
    sprintf_2d(a6, *(unsigned __int8 *)(v215 + 32));
    sprintf_gR8(a6, *(double *)(v215 + 40));
    sprintf_gR8(a6, *(double *)(v215 + 48));
    sprintf_2d(a6, *(unsigned __int8 *)(v215 + 56));
    sprintf_gR8(a6, *(double *)(v215 + 64));
    sprintf_gR8(a6, *(double *)(v215 + 72));
    long long v83 = (*a6)++;
    *long long v83 = 10;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    for (uint64_t i = 0; i != 48; ++i)
    {
      uint64_t v85 = v28 + 144 * i;
      if (Is_Legal(*(_DWORD *)(v85 + 1208)))
      {
        int v86 = (double *)(v215 + 144 * i);
        double v87 = v86[158];
        double v88 = v86[159];
        double v89 = v86[160];
        double v90 = *v214;
        int v91 = *a6;
        char v92 = 76;
        uint64_t v93 = 1u;
        do
        {
          *a6 = v91 + 1;
          *int v91 = v92;
          int v91 = *a6;
          if (*a6 >= a6[3])
          {
            int v91 = a6[2];
            *a6 = v91;
          }
          char v92 = aLcdSvmeas[v93++];
        }
        while (v93 != 14);
        unint64_t v94 = *(unsigned __int8 *)(v85 + 1208);
        if (v94 >= 7) {
          char v95 = 42;
        }
        else {
          char v95 = 0x53514245524758uLL >> (8 * v94);
        }
        *a6 = v91 + 1;
        *int v91 = v95;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        double v96 = v87 + v90 * 299792.458;
        sprintf_4d(a6, *(unsigned __int8 *)(v85 + 1210));
        sprintf_14f3(a6, v96);
        sprintf_14f3(a6, v88 / 0.190293673);
        uint64_t v97 = 0;
        int v98 = *a6;
        char v99 = 32;
        do
        {
          *a6 = v98 + 1;
          *int v98 = v99;
          int v98 = *a6;
          if (*a6 >= a6[3])
          {
            int v98 = a6[2];
            *a6 = v98;
          }
          char v99 = asc_22BB0260F[++v97];
        }
        while (v97 != 4);
        sprintf_gR8(a6, v89);
        uint64_t v100 = 0;
        unint64_t v101 = *a6;
        char v102 = 32;
        do
        {
          *a6 = v101 + 1;
          *unint64_t v101 = v102;
          unint64_t v101 = *a6;
          if (*a6 >= a6[3])
          {
            unint64_t v101 = a6[2];
            *a6 = v101;
          }
          char v102 = asc_22BB0260F[++v100];
        }
        while (v100 != 4);
        uint64_t v103 = v215 + 144 * i;
        sprintf_14f3(a6, *(double *)(v103 + 1288));
        sprintf_14f3(a6, *(double *)(v103 + 1296));
        sprintf_gR8(a6, *(double *)(v103 + 1304));
        sprintf_3d(a6, *(unsigned __int8 *)(v103 + 1344));
        BOOL v104 = (*a6)++;
        *BOOL v104 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_3d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1345));
        unsigned int v105 = (*a6)++;
        *unsigned int v105 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_3d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1346));
        signed int v106 = (*a6)++;
        *signed int v106 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_3d(a6, (int)*(double *)(v215 + 144 * i + 1336));
        unsigned __int16 v107 = (*a6)++;
        *unsigned __int16 v107 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_3d(a6, (int)*(double *)(v215 + 144 * i + 1328));
        int v108 = (*a6)++;
        *int v108 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1216));
        signed int v109 = (*a6)++;
        *signed int v109 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1224));
        int v110 = (*a6)++;
        *int v110 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1232));
        int v111 = (*a6)++;
        *int v111 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1240));
        double v112 = (*a6)++;
        *double v112 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1248));
        uint64_t v113 = (*a6)++;
        *uint64_t v113 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_14f3(a6, *(double *)(v215 + 144 * i + 1256));
        uint64_t v114 = (*a6)++;
        *uint64_t v114 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_gR8(a6, 0.0);
        uint64_t v115 = (*a6)++;
        *uint64_t v115 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_gR8(a6, 0.0);
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1312));
        BOOL v116 = (*a6)++;
        *BOOL v116 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1313));
        uint64_t v117 = (*a6)++;
        *uint64_t v117 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1314));
        double v118 = (*a6)++;
        *double v118 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1318));
        uint64_t v119 = (*a6)++;
        *uint64_t v119 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1319));
        uint64_t v120 = (*a6)++;
        *uint64_t v120 = 32;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
        sprintf_2d(a6, *(unsigned __int8 *)(v215 + 144 * i + 1320));
        uint64_t v121 = (*a6)++;
        *uint64_t v121 = 32;
        unsigned int v122 = *a6;
        if (*a6 >= a6[3]) {
          unsigned int v122 = a6[2];
        }
        char v123 = *(unsigned char *)(v215 + 144 * i + 1315);
        if (v123)
        {
          *a6 = v122 + 1;
          *unsigned int v122 = v123;
          unsigned int v122 = *a6;
          if (*a6 >= a6[3]) {
            unsigned int v122 = a6[2];
          }
        }
        else
        {
          strcpy((char *)v224, " 0");
          LOBYTE(v124) = 32;
          uint64_t v125 = 1;
          do
          {
            *a6 = v122 + 1;
            *unsigned int v122 = v124;
            unsigned int v122 = *a6;
            if (*a6 >= a6[3])
            {
              unsigned int v122 = a6[2];
              *a6 = v122;
            }
            int v124 = *((unsigned __int8 *)v224 + v125++);
          }
          while (v124);
        }
        *a6 = v122 + 1;
        *unsigned int v122 = 32;
        uint64_t v126 = *a6;
        if (*a6 >= a6[3]) {
          uint64_t v126 = a6[2];
        }
        char v127 = *(unsigned char *)(v215 + 144 * i + 1316);
        if (v127)
        {
          *a6 = v126 + 1;
          *uint64_t v126 = v127;
          uint64_t v126 = *a6;
          if (*a6 >= a6[3]) {
            uint64_t v126 = a6[2];
          }
        }
        else
        {
          strcpy((char *)v224, " 0");
          LOBYTE(v128) = 32;
          uint64_t v129 = 1;
          do
          {
            *a6 = v126 + 1;
            *uint64_t v126 = v128;
            uint64_t v126 = *a6;
            if (*a6 >= a6[3])
            {
              uint64_t v126 = a6[2];
              *a6 = v126;
            }
            int v128 = *((unsigned __int8 *)v224 + v129++);
          }
          while (v128);
        }
        char v130 = *(unsigned char *)(v215 + 144 * i + 1317);
        if (v130)
        {
          *a6 = v126 + 1;
          *uint64_t v126 = v130;
          uint64_t v126 = *a6;
          if (*a6 >= a6[3]) {
            uint64_t v126 = a6[2];
          }
        }
        else
        {
          strcpy((char *)v224, " 0");
          LOBYTE(v131) = 32;
          uint64_t v132 = 1;
          do
          {
            *a6 = v126 + 1;
            *uint64_t v126 = v131;
            uint64_t v126 = *a6;
            if (*a6 >= a6[3])
            {
              uint64_t v126 = a6[2];
              *a6 = v126;
            }
            int v131 = *((unsigned __int8 *)v224 + v132++);
          }
          while (v131);
        }
        *a6 = v126 + 1;
        *uint64_t v126 = 32;
        long long v133 = *a6;
        if (*a6 >= a6[3]) {
          long long v133 = a6[2];
        }
        for (int j = 0; j != 20; ++j)
        {
          strcpy((char *)v224, "    0");
          LOBYTE(v135) = 32;
          uint64_t v136 = 1;
          do
          {
            *a6 = v133 + 1;
            *long long v133 = v135;
            long long v133 = *a6;
            if (*a6 >= a6[3])
            {
              long long v133 = a6[2];
              *a6 = v133;
            }
            int v135 = *((unsigned __int8 *)v224 + v136++);
          }
          while (v135);
          *a6 = v133 + 1;
          *long long v133 = 32;
          long long v133 = *a6;
          if (*a6 >= a6[3])
          {
            long long v133 = a6[2];
            *a6 = v133;
          }
        }
        char v137 = 32;
        uint64_t v138 = 1u;
        do
        {
          *a6 = v133 + 1;
          *long long v133 = v137;
          long long v133 = *a6;
          if (*a6 >= a6[3])
          {
            long long v133 = a6[2];
            *a6 = v133;
          }
          char v137 = aSlewedPr[v138++];
        }
        while (v138 != 12);
        sprintf_14f3(a6, v87);
        long long v139 = (*a6)++;
        *long long v139 = 10;
        if (*a6 >= a6[3]) {
          *a6 = a6[2];
        }
      }
      LCD_SA_Debug_Ctl((uint64_t)a6);
      uint64_t v28 = v215;
    }
    long long v140 = *a6;
    char v141 = 76;
    uint64_t v142 = 1u;
    do
    {
      *a6 = v140 + 1;
      *long long v140 = v141;
      long long v140 = *a6;
      if (*a6 >= a6[3])
      {
        long long v140 = a6[2];
        *a6 = v140;
      }
      char v141 = aLcdEpoch[v142++];
    }
    while (v142 != 11);
    unsigned int v143 = *(_DWORD *)(v215 + 4);
    *a6 = v140 + 1;
    *long long v140 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_10u(a6, v143);
    sprintf_12f3(a6, *(double *)(v215 + 8));
    long long v144 = (*a6)++;
    *long long v144 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    v224[0] = 0;
    *(_DWORD *)uint64_t v217 = 0;
    *(_DWORD *)v218 = 0;
    *(_DWORD *)v216 = 0;
    GPS_To_UTC_Time(v218, &v218[1], v224, &v217[1], v217, &v216[1], v216, *(_WORD *)(v215 + 22), *(double *)(v215 + 8), *(double *)(v215 + 792));
    sprintf_02d(a6, v217[1]);
    sprintf_02d(a6, v217[0]);
    sprintf_02d(a6, v216[1]);
    long long v145 = (*a6)++;
    *long long v145 = 46;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_03d((uint64_t)a6, v216[0]);
    uint64_t v146 = (*a6)++;
    *uint64_t v146 = 44;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, v224[0]);
    sprintf_02d(a6, v218[1]);
    sprintf_02d(a6, v218[0] - 2000);
    double v147 = (*a6)++;
    *double v147 = 32;
    long long v148 = *a6;
    if (*a6 >= a6[3]) {
      long long v148 = a6[2];
    }
    unsigned int v149 = *(_DWORD *)v215;
    *a6 = v148 + 1;
    *long long v148 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_10d(a6, v149);
    long long v150 = (*a6)++;
    *long long v150 = 10;
    long long v151 = *a6;
    if (*a6 >= a6[3]) {
      long long v151 = a6[2];
    }
    char v152 = 76;
    uint64_t v153 = 1u;
    do
    {
      *a6 = v151 + 1;
      *long long v151 = v152;
      long long v151 = *a6;
      if (*a6 >= a6[3])
      {
        long long v151 = a6[2];
        *a6 = v151;
      }
      char v152 = aLcdLsq[v153++];
    }
    while (v153 != 12);
    uint64_t v154 = 0;
    char v155 = 1;
    do
    {
      uint64_t v156 = v28 + 8 * v154;
      double v157 = *(double *)(v156 + 832) * 57.2957795;
      double v158 = -v157;
      if (v157 >= 0.0) {
        double v158 = *(double *)(v156 + 832) * 57.2957795;
      }
      unsigned int v159 = (int)v158;
      char v160 = v155;
      double v161 = (v158 - (double)(int)v158) * 60.0;
      unsigned int v162 = (int)v161;
      double v163 = (v161 - (double)(int)v161) * 60.0;
      sprintf_4d(a6, v159);
      sprintf_3d(a6, v162);
      if (v163 * 100000.0 <= 0.0) {
        double v164 = -0.5;
      }
      else {
        double v164 = 0.5;
      }
      double v165 = v163 * 100000.0 + v164;
      if (v165 <= 2147483650.0)
      {
        if (v165 >= -2147483650.0) {
          unsigned int v166 = (int)v165;
        }
        else {
          unsigned int v166 = 0x80000000;
        }
      }
      else
      {
        unsigned int v166 = 0x7FFFFFFF;
      }
      sprintf_8f((uint64_t)a6, v166, 6);
      uint64_t v167 = (char *)&ch_NSEW + 8 * v154;
      if (*(double *)(v156 + 832) < 0.0) {
        v167 += 4;
      }
      char v168 = *v167;
      uint64_t v28 = v215;
      if (*v167)
      {
        int v169 = *a6;
        unsigned __int8 v170 = v167 + 1;
        do
        {
          *a6 = v169 + 1;
          *int v169 = v168;
          int v169 = *a6;
          if (*a6 >= a6[3])
          {
            int v169 = a6[2];
            *a6 = v169;
          }
          int v171 = *v170++;
          char v168 = v171;
        }
        while (v171);
      }
      char v155 = 0;
      uint64_t v154 = 1;
    }
    while ((v160 & 1) != 0);
    sprintf_13f3(a6, *(double *)(v215 + 848));
    sprintf_gR8(a6, *(double *)(v215 + 800));
    __int16 v172 = *a6;
    char v173 = 32;
    uint64_t v174 = 1u;
    do
    {
      *a6 = v172 + 1;
      *__int16 v172 = v173;
      __int16 v172 = *a6;
      if (*a6 >= a6[3])
      {
        __int16 v172 = a6[2];
        *a6 = v172;
      }
      char v173 = aLsqVel[v174++];
    }
    while (v174 != 10);
    sprintf_sgR8(a6, *(double *)(v215 + 856));
    sprintf_sgR8(a6, *(double *)(v215 + 864));
    sprintf_sgR8(a6, *(double *)(v215 + 872));
    BOOL v175 = *a6;
    char v176 = 32;
    uint64_t v177 = 1u;
    do
    {
      *a6 = v175 + 1;
      *BOOL v175 = v176;
      BOOL v175 = *a6;
      if (*a6 >= a6[3])
      {
        BOOL v175 = a6[2];
        *a6 = v175;
      }
      char v176 = aLsqClkbGpsGloB[v177++];
    }
    while (v177 != 24);
    sprintf_sgR8(a6, *(double *)(v215 + 880));
    sprintf_sgR8(a6, *(double *)(v215 + 888));
    sprintf_sgR8(a6, *(double *)(v215 + 896));
    uint64_t v178 = 0;
    long long v179 = *a6;
    char v180 = 32;
    do
    {
      *a6 = v179 + 1;
      *long long v179 = v180;
      long long v179 = *a6;
      if (*a6 >= a6[3])
      {
        long long v179 = a6[2];
        *a6 = v179;
      }
      char v180 = aLsqDt[++v178];
    }
    while (v178 != 8);
    sprintf_sgR8(a6, *(double *)(v215 + 904));
    uint64_t v181 = 0;
    uint64_t v182 = *a6;
    char v183 = 32;
    do
    {
      *a6 = v182 + 1;
      *uint64_t v182 = v183;
      uint64_t v182 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v182 = a6[2];
        *a6 = v182;
      }
      char v183 = aNumUsedPrDo[++v181];
    }
    while (v181 != 16);
    sprintf_02d(a6, *(unsigned __int8 *)(v215 + 912));
    uint64_t v184 = (*a6)++;
    *uint64_t v184 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(unsigned __int8 *)(v215 + 913));
    long long v185 = *a6;
    char v186 = 32;
    uint64_t v187 = 1u;
    do
    {
      *a6 = v185 + 1;
      *long long v185 = v186;
      long long v185 = *a6;
      if (*a6 >= a6[3])
      {
        long long v185 = a6[2];
        *a6 = v185;
      }
      char v186 = aAccPos[v187++];
    }
    while (v187 != 10);
    for (uint64_t k = 0; k != 56; k += 8)
    {
      sprintf_ACC(a6, *(double *)(v215 + 920 + k));
      unsigned __int8 v189 = (*a6)++;
      *unsigned __int8 v189 = 32;
      uint64_t v190 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v190 = a6[2];
        *a6 = v190;
      }
    }
    char v191 = 32;
    uint64_t v192 = 1u;
    do
    {
      *a6 = v190 + 1;
      char *v190 = v191;
      uint64_t v190 = *a6;
      if (*a6 >= a6[3])
      {
        uint64_t v190 = a6[2];
        *a6 = v190;
      }
      char v191 = aAccVel[v192++];
    }
    while (v192 != 10);
    for (uint64_t m = 0; m != 32; m += 8)
    {
      sprintf_ACC(a6, *(double *)(v215 + 976 + m));
      long long v194 = (*a6)++;
      *long long v194 = 32;
      long long v195 = *a6;
      if (*a6 >= a6[3])
      {
        long long v195 = a6[2];
        *a6 = v195;
      }
    }
    char v196 = 32;
    uint64_t v197 = 1u;
    do
    {
      *a6 = v195 + 1;
      *long long v195 = v196;
      long long v195 = *a6;
      if (*a6 >= a6[3])
      {
        long long v195 = a6[2];
        *a6 = v195;
      }
      char v196 = aArpPos[v197++];
    }
    while (v197 != 10);
    sprintf_02d(a6, *(char *)(v215 + 1008));
    long long v198 = (*a6)++;
    *long long v198 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1009));
    long long v199 = (*a6)++;
    char *v199 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1010));
    int v200 = (*a6)++;
    *int v200 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1011));
    long long v201 = (*a6)++;
    *long long v201 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_sgR8(a6, *(double *)(v215 + 1016));
    sprintf_sgR8(a6, *(double *)(v215 + 1024));
    sprintf_sgR8(a6, *(double *)(v215 + 1032));
    sprintf_sgR8(a6, *(double *)(v215 + 1040));
    sprintf_sgR8(a6, *(double *)(v215 + 1048));
    sprintf_sgR8(a6, *(double *)(v215 + 1056));
    sprintf_sgR8(a6, *(double *)(v215 + 1064));
    sprintf_sgR8(a6, *(double *)(v215 + 1072));
    sprintf_2d(a6, *(unsigned __int8 *)(v215 + 1080));
    int v202 = (*a6)++;
    *int v202 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_sgR8(a6, *(double *)(v215 + 1088));
    uint64_t v203 = (*a6)++;
    *uint64_t v203 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_2d(a6, *(char *)(v215 + 1096));
    long long v204 = *a6;
    char v205 = 32;
    uint64_t v206 = 1u;
    do
    {
      *a6 = v204 + 1;
      *long long v204 = v205;
      long long v204 = *a6;
      if (*a6 >= a6[3])
      {
        long long v204 = a6[2];
        *a6 = v204;
      }
      char v205 = aArpVel[v206++];
    }
    while (v206 != 10);
    sprintf_02d(a6, *(char *)(v215 + 1104));
    long long v207 = (*a6)++;
    *long long v207 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1105));
    unsigned int v208 = (*a6)++;
    *unsigned int v208 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1106));
    uint64_t v209 = (*a6)++;
    *uint64_t v209 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_02d(a6, *(char *)(v215 + 1107));
    long long v210 = (*a6)++;
    *long long v210 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_sgR8(a6, *(double *)(v215 + 1112));
    sprintf_sgR8(a6, *(double *)(v215 + 1120));
    sprintf_sgR8(a6, *(double *)(v215 + 1128));
    sprintf_sgR8(a6, *(double *)(v215 + 1136));
    sprintf_sgR8(a6, *(double *)(v215 + 1144));
    sprintf_sgR8(a6, *(double *)(v215 + 1152));
    sprintf_sgR8(a6, *(double *)(v215 + 1160));
    sprintf_sgR8(a6, *(double *)(v215 + 1168));
    sprintf_2d(a6, *(unsigned __int8 *)(v215 + 1176));
    long long v211 = (*a6)++;
    *long long v211 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_sgR8(a6, *(double *)(v215 + 1184));
    v212 = (*a6)++;
    char *v212 = 32;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    sprintf_2d(a6, *(char *)(v215 + 1192));
    double v213 = (*a6)++;
    *double v213 = 10;
    if (*a6 >= a6[3]) {
      *a6 = a6[2];
    }
    return LCD_SA_Debug_Ctl((uint64_t)a6);
  }
  return result;
}

uint64_t Get_UTC_Leap_Second_For_GLON_Day_4yrBlk(int a1, int a2, double a3)
{
  if (a3 + -10800.0 < 0.0)
  {
    int v3 = a2 < 2;
    if (a2 >= 2) {
      --a2;
    }
    else {
      a2 = 1461;
    }
    a1 -= v3;
  }
  uint64_t v4 = 0;
  int v5 = a2 + 1461 * a1;
  while (v5 < *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v4 + 8] + 1461 * Time_Data_At_Leap_Sec_Change[v4 + 6]
       || v5 >= *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v4 + 20]
              + 1461 * Time_Data_At_Leap_Sec_Change[v4 + 18])
  {
    v4 += 12;
    if (v4 == 96) {
      return -99;
    }
  }
  return (char)Time_Data_At_Leap_Sec_Change[v4 + 10];
}

uint64_t U4sqrt(unsigned int a1)
{
  int v1 = (((a1 & 0xC0000000) != 0) << 15) | 0x4000;
  if (v1 * v1 <= a1) {
    unsigned int v2 = (((a1 & 0xC0000000) != 0) << 15) | 0x4000;
  }
  else {
    unsigned int v2 = ((a1 & 0xC0000000) != 0) << 15;
  }
  if ((v2 | 0x2000) * (v2 | 0x2000) <= a1) {
    v2 |= 0x2000u;
  }
  if ((v2 | 0x1000) * (v2 | 0x1000) <= a1) {
    v2 |= 0x1000u;
  }
  if ((v2 + 2048) * (v2 + 2048) <= a1) {
    v2 += 2048;
  }
  if ((v2 + 1024) * (v2 + 1024) <= a1) {
    v2 += 1024;
  }
  if ((v2 + 512) * (v2 + 512) <= a1) {
    v2 += 512;
  }
  if ((v2 + 256) * (v2 + 256) <= a1) {
    v2 += 256;
  }
  if ((v2 + 128) * (v2 + 128) <= a1) {
    v2 += 128;
  }
  if ((v2 + 64) * (v2 + 64) <= a1) {
    v2 += 64;
  }
  if ((v2 + 32) * (v2 + 32) <= a1) {
    v2 += 32;
  }
  if ((v2 + 16) * (v2 + 16) <= a1) {
    v2 += 16;
  }
  if ((v2 + 8) * (v2 + 8) <= a1) {
    v2 += 8;
  }
  if ((v2 + 4) * (v2 + 4) <= a1) {
    v2 += 4;
  }
  if ((v2 + 2) * (v2 + 2) <= a1) {
    v2 += 2;
  }
  if ((v2 + 1) * (v2 + 1) > a1) {
    return v2;
  }
  else {
    return v2 + 1;
  }
}

double skewSimMat(double *a1, int *a2)
{
  unsigned char v6[10] = *MEMORY[0x263EF8340];
  v6[0] = 0x300000003;
  v6[1] = 0;
  double v3 = a1[2];
  double v2 = a1[3];
  double v4 = a1[1];
  *(double *)&void v6[2] = -v2;
  *(double *)&v6[3] = v3;
  *(double *)&v6[4] = v2;
  v6[5] = 0;
  *(double *)&v6[6] = -v4;
  *(double *)&v6[7] = -v3;
  *(double *)&v6[8] = v4;
  v6[9] = 0;
  Copy_Mat(9, (int *)v6, (const char *)9, a2);
  return result;
}

void CreateC_e_n(uint64_t a1, int *a2)
{
  unsigned char v6[10] = *MEMORY[0x263EF8340];
  __double2 v4 = __sincos_stret(*(double *)(a1 + 16));
  __double2 v5 = __sincos_stret(*(double *)(a1 + 8));
  v6[0] = 0x300000003;
  *(double *)&v6[1] = -(v4.__sinval * v5.__cosval);
  *(double *)&void v6[2] = -(v4.__sinval * v5.__sinval);
  v6[3] = *(void *)&v4.__cosval;
  *(double *)&v6[4] = -v5.__sinval;
  v6[5] = *(void *)&v5.__cosval;
  v6[6] = 0;
  *(double *)&v6[7] = -(v4.__cosval * v5.__cosval);
  *(double *)&v6[8] = -(v4.__cosval * v5.__sinval);
  *(double *)&v6[9] = -v4.__sinval;
  Copy_Mat(9, (int *)v6, (const char *)9, a2);
}

double CreateG_0(uint64_t a1)
{
  long double v1 = sin(*(long double *)(a1 + 16));
  double v2 = v1 * v1;
  double v3 = v1 * v1 * -0.00669437999 + 1.0;
  if (v3 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v5 = *(double *)(g_TCU + 8);
      }
      else {
        double v5 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "CreateG_0", 122, v4, v5, v2 * -0.00669437999 + 1.0);
    }
    g_FPE_AssertFlag = 1;
    double v3 = 1.0;
  }
  double v6 = sqrt(v3);
  if (fabs(v6) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "CreateG_0", 124, v7, v8, v6, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v6 = 1.0;
  }
  return (v2 * 0.001931853 + 1.0) * 9.78032534 / v6;
}

const char *extractOfromC_b_n(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 4);
  long double v5 = *(double *)(a1 + 8 + 8 * ((2 * v4) | 1));
  long double v6 = *(double *)(a1 + 8 + 8 * (2 * v4 + 2));
  double v7 = *(double *)(a1 + 8 + 16 * v4);
  if (fabs(v7) > 1.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to asin number %f that is abs larger than 1.0", "extractOfromC_b_n", 162, v8, v9, v7);
      unsigned int v4 = *(_DWORD *)(a1 + 4);
    }
    g_FPE_AssertFlag = 1;
    double v7 = 1.0;
  }
  double v10 = atan2(v5, v6);
  double v11 = asin(v7);
  double v12 = atan2(*(long double *)(a1 + 8 + 8 * v4), *(long double *)(a1 + 8));

  return VecSet_3x1((const char *)3, a2, v10, -v11, v12);
}

const char *extractOfromC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 4);
  long double v5 = *(double *)(a1 + 8 + 8 * (v4 + 2));
  long double v6 = *(double *)(a1 + 8 + 8 * (2 * v4 + 2));
  double v7 = *(double *)(a1 + 24);
  if (fabs(v7) > 1.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to asin number %f that is abs larger than 1.0", "extractOfromC", 182, v8, v9, v7);
    }
    g_FPE_AssertFlag = 1;
    double v7 = 1.0;
  }
  double v10 = atan2(v5, v6);
  double v11 = asin(v7);
  double v12 = atan2(*(long double *)(a1 + 16), *(long double *)(a1 + 8));

  return VecSet_3x1((const char *)3, a2, v10, -v11, v12);
}

void CreateC_b_n(double *a1, int *a2)
{
  v7[10] = *MEMORY[0x263EF8340];
  __double2 v4 = __sincos_stret(a1[1]);
  __double2 v5 = __sincos_stret(a1[2]);
  __double2 v6 = __sincos_stret(a1[3]);
  v7[0] = 0x300000003;
  *(double *)&v7[1] = v5.__cosval * v6.__cosval;
  *(double *)&v7[2] = v4.__sinval * v5.__sinval * v6.__cosval - v4.__cosval * v6.__sinval;
  *(double *)&v7[3] = v4.__cosval * v5.__sinval * v6.__cosval + v4.__sinval * v6.__sinval;
  *(double *)&v7[4] = v5.__cosval * v6.__sinval;
  *(double *)&v7[5] = v4.__sinval * v5.__sinval * v6.__sinval + v4.__cosval * v6.__cosval;
  *(double *)&v7[6] = v4.__cosval * v5.__sinval * v6.__sinval - v4.__sinval * v6.__cosval;
  *(double *)&v7[7] = -v5.__sinval;
  *(double *)&v7[8] = v4.__sinval * v5.__cosval;
  *(double *)&v7[9] = v4.__cosval * v5.__cosval;
  Copy_Mat(9, (int *)v7, (const char *)9, a2);
}

double InsUtil_ECEF2Geo_Iterative(double *a1, uint64_t a2, double a3)
{
  double v3 = a3;
  unsigned int v4 = 0;
  double v5 = a1[3];
  long double v29 = a1[1];
  long double v30 = a1[2];
  double v6 = sqrt(v30 * v30 + v29 * v29);
  do
  {
    double v7 = v3;
    unsigned int v32 = v4;
    double v8 = 1.57079633;
    double v9 = v3 * 0.99330562 - v3;
    double v10 = 0.0;
    unsigned int v11 = -1;
    do
    {
      double v12 = v6 + v9 * cos(v10);
      if (fabs(v12) <= 1.0e-30)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v13 = mach_continuous_time();
          if (g_TCU) {
            double v14 = *(double *)(g_TCU + 8);
          }
          else {
            double v14 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "InsUtil_ECEF2Geo_Iterative", 289, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), v14, v12, 1.0e-30);
        }
        g_FPE_AssertFlag = 1;
        double v12 = 1.0;
      }
      ++v11;
      double v10 = atan(v5 / v12);
      double v15 = v10 - v8;
      if (v10 - v8 < 0.0) {
        double v15 = -v15;
      }
      BOOL v16 = v15 < 1.0e-13 || v11 >= 0xE;
      double v8 = v10;
    }
    while (!v16);
    ++v4;
    double v3 = calcRe(v10);
    double v17 = v7 - v3;
    if (v7 - v3 < 0.0) {
      double v17 = -v17;
    }
  }
  while (v17 >= 1.0e-13 && v32 < 0xB);
  double v19 = atan2(v30, v29);
  double v20 = cos(v10);
  if (fabs(v20) <= 1.0e-30)
  {
    unsigned int v21 = v32;
    if (g_FPE_LogSeverity)
    {
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v23 = *(double *)(g_TCU + 8);
      }
      else {
        double v23 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "InsUtil_ECEF2Geo_Iterative", 317, v22, v23, v20, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v20 = 1.0;
  }
  else
  {
    unsigned int v21 = v32;
  }
  VecSet_3x1((const char *)3, a2, v19, v10, v6 / v20 - v7);
  if ((v21 > 0xA || v11 >= 0xE) && (g_FPE_LogSeverity & 4) != 0)
  {
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v25 = *(double *)(g_TCU + 8);
    }
    else {
      double v25 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Exit due to loop limit k1,k2 = %d,%d when running with args: [pOut,Ro]=ECEF2Geo([%f %f %f],%f)", "InsUtil_ECEF2Geo_Iterative", 327, v24, v25, v4, v11 + 1, a1[1], a1[2], a1[3], a3);
  }
  return v3;
}

double calcRe(long double a1)
{
  long double v1 = sin(a1);
  double v2 = v1 * v1 * -0.00669437999 + 1.0;
  if (v2 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v4 = *(double *)(g_TCU + 8);
      }
      else {
        double v4 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "calcRe", 588, v3, v4, v2);
    }
    g_FPE_AssertFlag = 1;
    double v2 = 1.0;
  }
  double v5 = sqrt(v2);
  if (fabs(v5) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v7 = *(double *)(g_TCU + 8);
      }
      else {
        double v7 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "calcRe", 590, v6, v7, v5, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v5 = 1.0;
  }
  return 6378137.0 / v5;
}

const char *InsUtil_Geo2ECEF_Iterative(double *a1, uint64_t a2)
{
  double v3 = a1[1] * 0.0174532925;
  double v4 = a1[2] * 0.0174532925;
  double v5 = a1[3];
  double v6 = calcRe(v3);
  __double2 v7 = __sincos_stret(v3);
  __double2 v8 = __sincos_stret(v4);

  return VecSet_3x1((const char *)3, a2, v8.__cosval * (v7.__cosval * (v5 + v6)), v8.__sinval * (v7.__cosval * (v5 + v6)), v7.__sinval * (v5 + v6 * 0.99330562));
}

void createC_e_map(int *a1, int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  if (a5) {
    __double2 v7 = a5;
  }
  else {
    __double2 v7 = (int *)v26;
  }
  Sub_Mat(3, a2, 3, a1, (const char *)3, v7);
  double v8 = Norma_Vec(3, v7);
  if (fabs(v8) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "createC_e_map", 391, v9, v10, v8, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v8 = 1.0;
  }
  memset(v25, 0, sizeof(v25));
  Mult_Mat_scalar(1.0 / v8, 3, v7, (const char *)3, (int *)v25);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  Mult_Mat_Mat(9, a3, 3, (uint64_t)v25, 9, (uint64_t)&v20);
  *((void *)&v21 + 1) = 0;
  double v11 = Norma_Vec(9, (int *)&v20);
  if (fabs(v11) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "createC_e_map", 402, v12, v13, v11, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v11 = 1.0;
  }
  Mult_Mat_scalar(1.0 / v11, 9, (int *)&v20, (const char *)9, (int *)&v20);
  long long v18 = 0u;
  long long v19 = 0u;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v18, 0.0);
  *((void *)&v19 + 1) = 0x3FF0000000000000;
  memset(v17, 0, sizeof(v17));
  Cross_Vec_Vec(9, (double *)&v20, 3, (double *)&v18, (const char *)3, (int *)v17);
  Mult_Mat_scalar(-1.0, 3, (int *)v17, (const char *)3, (int *)v17);
  memset(v16, 0, sizeof(v16));
  Set_Mat_Size((const char *)9, (int *)v16, 3, 3);
  Copy_SubMat_to_Mat(1.0, 9, &v20, 0, 0, 9, (int *)v16);
  Copy_SubMat_to_Mat(1.0, 3, v17, 0, 1, 9, (int *)v16);
  Copy_SubMat_to_Mat(1.0, 3, &v18, 0, 2, 9, (int *)v16);
  Transpose_Mat(9, (uint64_t)v16, 9, (uint64_t)v16, v14, v15);
  Mult_Mat_Mat(9, (uint64_t)v16, 9, a3, 9, a4);
}

const char *calcElipseParams(double *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, int *a8)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  InsUtil_ECEF2Geo_Iterative(a1, a4, 6378137.0);
  CreateC_e_n(a4, a8);
  Mult_Mat_Mat(9, (uint64_t)a8, 9, a2, 9, (uint64_t)a3);
  Mult_Mat_MatT(9, (uint64_t)a3, 9, (uint64_t)a8, 9, (uint64_t)a3);
  memset(v33, 0, sizeof(v33));
  Transpose_Mat(9, (uint64_t)a3, 9, (uint64_t)v33, v15, v16);
  Add_Mat(9, a3, 9, (int *)v33, (const char *)9, a3);
  Mult_Mat_scalar(0.5, 9, a3, (const char *)9, a3);
  memset(v32, 0, sizeof(v32));
  Copy_Mat(9, a3, (const char *)9, (int *)v32);
  Copy_SubMat_from_Mat(1.0, 9, a3, 0, 0, 2, 2u, 9, (int *)v32);
  memset(v31, 0, sizeof(v31));
  Eig2x2(9, (int *)v32, (const char *)9, a7, (const char *)9, (uint64_t)v31);
  double v17 = *((double *)v31 + (DWORD1(v31[0]) + 1) + 1);
  if (v17 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v19 = *(double *)(g_TCU + 8);
      }
      else {
        double v19 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "calcElipseParams", 463, v18, v19, v17);
    }
    g_FPE_AssertFlag = 1;
    double v17 = 1.0;
  }
  double v20 = *((double *)v31 + 1);
  if (*((double *)v31 + 1) < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v22 = *(double *)(g_TCU + 8);
      }
      else {
        double v22 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "calcElipseParams", 466, v21, v22, v20);
    }
    g_FPE_AssertFlag = 1;
    double v20 = 1.0;
  }
  double v23 = *(double *)&a3[2 * (2 * a3[1] + 2) + 2];
  if (v23 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v25 = *(double *)(g_TCU + 8);
      }
      else {
        double v25 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "calcElipseParams", 469, v24, v25, v23);
    }
    g_FPE_AssertFlag = 1;
    double v23 = 1.0;
  }
  double v26 = sqrt(v20);
  *a6 = sqrt(v23);
  double v27 = sqrt(v17);
  double v28 = atan2(*(long double *)(a7 + 8 + 8 * *(unsigned int *)(a7 + 4)), *(long double *)(a7 + 8));
  if (v28 < 0.0) {
    double v28 = v28 + 3.14159265;
  }
  double v29 = v28 * 57.2957795;
  double result = Set_Mat_Size((const char *)3, (int *)a5, 1, 3);
  *(double *)(a5 + 8) = v26;
  *(double *)(a5 + 16) = v27;
  *(double *)(a5 + 24) = v29;
  return result;
}

const char *InsUtil_mat2quat(uint64_t a1, uint64_t a2)
{
  double result = Set_Mat_Const((const char *)4, 1u, (const char *)6, (int *)a2, 0.0);
  double v5 = *(double *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  double v7 = *(double *)(a1 + 8 + 8 * (v6 + 1));
  unsigned int v8 = 2 * v6;
  double v9 = *(double *)(a1 + 8 + 8 * (2 * v6 + 2));
  double v10 = v5 + 1.0 + v7 + v9;
  if (v10 > 0.1)
  {
    if (v10 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v12 = *(double *)(g_TCU + 8);
        }
        else {
          double v12 = 0.0;
        }
        double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "InsUtil_mat2quat", 507, v11, v12, v10);
        unsigned int v6 = *(_DWORD *)(a1 + 4);
        unsigned int v8 = 2 * v6;
      }
      g_FPE_AssertFlag = 1;
      double v10 = 1.0;
    }
    double v25 = sqrt(v10) * 0.5;
    *(double *)(a2 + 8) = v25;
    double v26 = v25 * 4.0;
    *(double *)(a2 + 16) = (*(double *)(a1 + 8 + 8 * (v6 + 2)) - *(double *)(a1 + 8 + 8 * (v8 | 1))) / v26;
    *(double *)(a2 + 24) = (*(double *)(a1 + 8 + 8 * v8) - *(double *)(a1 + 24)) / v26;
    double v27 = *(double *)(a1 + 16) - *(double *)(a1 + 8 + 8 * v6);
    goto LABEL_37;
  }
  double v13 = v5 + 1.0 - v7 - v9;
  if (v13 > 0.1)
  {
    if (v13 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "InsUtil_mat2quat", 516, v14, v15, v13);
        unsigned int v6 = *(_DWORD *)(a1 + 4);
        unsigned int v8 = 2 * v6;
      }
      g_FPE_AssertFlag = 1;
      double v13 = 1.0;
    }
    double v28 = sqrt(v13) * 0.5;
    *(double *)(a2 + 16) = v28;
    double v26 = v28 * 4.0;
    *(double *)(a2 + 8) = (*(double *)(a1 + 8 + 8 * (v6 + 2)) - *(double *)(a1 + 8 + 8 * (v8 | 1))) / v26;
    *(double *)(a2 + 24) = (*(double *)(a1 + 8 + 8 * v6) + *(double *)(a1 + 16)) / v26;
    double v29 = *(double *)(a1 + 8 + 8 * v8);
    double v30 = *(double *)(a1 + 24);
LABEL_36:
    double v27 = v29 + v30;
LABEL_37:
    *(double *)(a2 + 32) = v27 / v26;
    return result;
  }
  double v16 = 1.0 - v5;
  double v17 = v16 + v7 - v9;
  if (v17 > 0.1)
  {
    if (v17 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v19 = *(double *)(g_TCU + 8);
        }
        else {
          double v19 = 0.0;
        }
        double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "InsUtil_mat2quat", 525, v18, v19, v17);
        unsigned int v6 = *(_DWORD *)(a1 + 4);
        unsigned int v8 = 2 * v6;
      }
      g_FPE_AssertFlag = 1;
      double v17 = 1.0;
    }
    double v31 = sqrt(v17) * 0.5;
    *(double *)(a2 + 24) = v31;
    double v26 = v31 * 4.0;
    *(double *)(a2 + 8) = -(*(double *)(a1 + 24) - *(double *)(a1 + 8 + 8 * v8)) / v26;
    *(double *)(a2 + 16) = (*(double *)(a1 + 16) + *(double *)(a1 + 8 + 8 * v6)) / v26;
    double v29 = *(double *)(a1 + 8 + 8 * (v6 + 2));
    double v30 = *(double *)(a1 + 8 + 8 * (v8 | 1));
    goto LABEL_36;
  }
  double v20 = v16 - v7 + v9;
  if (v20 <= 0.1)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v24 = *(double *)(g_TCU + 8);
      }
      else {
        double v24 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f not a stable rotation matrix", "InsUtil_mat2quat", 542, v23, v24);
    }
    g_FPE_AssertFlag = 1;
  }
  else
  {
    if (v20 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v22 = *(double *)(g_TCU + 8);
        }
        else {
          double v22 = 0.0;
        }
        double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "InsUtil_mat2quat", 534, v21, v22, v20);
        unsigned int v6 = *(_DWORD *)(a1 + 4);
        unsigned int v8 = 2 * v6;
      }
      g_FPE_AssertFlag = 1;
      double v20 = 1.0;
    }
    double v32 = sqrt(v20) * 0.5;
    *(double *)(a2 + 32) = v32;
    double v33 = v32 * 4.0;
    *(double *)(a2 + 8) = -(*(double *)(a1 + 8 + 8 * v6) - *(double *)(a1 + 16)) / v33;
    *(double *)(a2 + 16) = (*(double *)(a1 + 24) + *(double *)(a1 + 8 + 8 * v8)) / v33;
    *(double *)(a2 + 24) = (*(double *)(a1 + 8 + 8 * (v6 + 2)) + *(double *)(a1 + 8 + 8 * (v8 | 1))) / v33;
  }
  return result;
}

double InsUtil_quat2mat(double *a1, int *a2)
{
  double v2 = a2;
  Set_Mat_Const((const char *)3, 3u, (const char *)9, a2, 0.0);
  *((double *)v2 + 1) = a1[2] * a1[2] + a1[1] * a1[1] - a1[3] * a1[3] - a1[4] * a1[4];
  v2 += 2;
  uint64_t v4 = *(v2 - 1);
  *(double *)&v2[2 * (v4 + 1)] = a1[1] * a1[1] - a1[2] * a1[2] + a1[3] * a1[3] - a1[4] * a1[4];
  *(double *)&v2[2 * (2 * v4 + 2)] = a1[1] * a1[1] - a1[2] * a1[2] - a1[3] * a1[3] + a1[4] * a1[4];
  double v5 = a1[4] * a1[1] + a1[2] * a1[3];
  *((double *)v2 + 1) = v5 + v5;
  double v6 = a1[2] * a1[3] - a1[4] * a1[1];
  *(double *)&v2[2 * v4] = v6 + v6;
  double v7 = a1[2] * a1[4] - a1[3] * a1[1];
  *((double *)v2 + 2) = v7 + v7;
  double v8 = a1[3] * a1[1] + a1[2] * a1[4];
  *(double *)&v2[2 * (2 * v4)] = v8 + v8;
  double v9 = a1[2] * a1[1] + a1[3] * a1[4];
  *(double *)&v2[2 * (v4 + 2)] = v9 + v9;
  double v10 = a1[3] * a1[4] - a1[2] * a1[1];
  double result = v10 + v10;
  *(double *)&v2[2 * ((2 * v4) | 1)] = result;
  return result;
}

const char *CovMatToVec(uint64_t a1, uint64_t a2, double a3)
{
  double result = Set_Mat_Size((const char *)6, (int *)a2, 6, 1);
  double v7 = *(double *)(a1 + 8);
  if (v7 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v9 = *(double *)(g_TCU + 8);
      }
      else {
        double v9 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "CovMatToVec", 642, v8, v9, v7);
    }
    g_FPE_AssertFlag = 1;
    double v7 = 1.0;
  }
  int v10 = *(_DWORD *)(a1 + 4);
  double v11 = *(double *)(a1 + 8 * (v10 + 1) + 8);
  if (v11 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v13 = *(double *)(g_TCU + 8);
      }
      else {
        double v13 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "CovMatToVec", 645, v12, v13, v11);
      int v10 = *(_DWORD *)(a1 + 4);
    }
    g_FPE_AssertFlag = 1;
    double v11 = 1.0;
  }
  double v14 = sqrt(v7);
  double v15 = *(double *)(a1 + 8 * (2 * v10 + 2) + 8);
  double v16 = sqrt(v11);
  if (v15 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "CovMatToVec", 648, v17, v18, v15);
    }
    g_FPE_AssertFlag = 1;
    double v15 = 1.0;
  }
  double v19 = sqrt(v15);
  *(double *)(a2 + 8) = v14 * a3;
  *(double *)(a2 + 16) = v16 * a3;
  *(double *)(a2 + 24) = v19 * a3;
  double v20 = v14 * v16;
  if (fabs(v14 * v16) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v22 = *(double *)(g_TCU + 8);
      }
      else {
        double v22 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "CovMatToVec", 657, v21, v22, v14 * v16, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v20 = 1.0;
  }
  *(double *)(a2 + 32) = *(double *)(a1 + 16) / v20;
  double v23 = v14 * v19;
  if (fabs(v23) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v25 = *(double *)(g_TCU + 8);
      }
      else {
        double v25 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "CovMatToVec", 660, v24, v25, v23, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v23 = 1.0;
  }
  *(double *)(a2 + 40) = *(double *)(a1 + 24) / v23;
  double v26 = v16 * v19;
  if (fabs(v26) <= 1.0e-30)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v28 = *(double *)(g_TCU + 8);
      }
      else {
        double v28 = 0.0;
      }
      double result = LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "CovMatToVec", 663, v27, v28, v26, 1.0e-30);
    }
    g_FPE_AssertFlag = 1;
    double v26 = 1.0;
  }
  *(double *)(a2 + 48) = *(double *)(a1 + 8 * (*(_DWORD *)(a1 + 4) + 2) + 8) / v26;
  return result;
}

long double distLLA(double *a1, double *a2, double *a3)
{
  long double v6 = a1[1] * 0.0174532925;
  long double v7 = a2[1] * 0.0174532925;
  double v8 = a2[2] * 0.0174532925 - a1[2] * 0.0174532925;
  double v9 = sin((v7 - v6) * 0.5);
  double v10 = cos(v6);
  long double v11 = v10 * cos(v7);
  long double v12 = sin(v8 * 0.5);
  double v13 = v11 * (v12 * v12) + v9 * v9;
  double v14 = 1.0 - v13;
  if (v13 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "distLLA", 690, v15, v16, v13);
    }
    g_FPE_AssertFlag = 1;
    double v13 = 1.0;
  }
  if (v14 < 0.0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "distLLA", 691, v17, v18, v14);
    }
    g_FPE_AssertFlag = 1;
    double v14 = 1.0;
  }
  long double v19 = atan2(sqrt(v13), sqrt(v14));
  *a3 = a1[3] - a2[3];
  return (v19 + v19) * 6371008.8;
}

uint64_t asn1PD_IPAddress_ipv4Address(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x20u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_IPAddress_ipv6Address(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x80u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_IPAddress(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 1, *a2 - 1);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_3:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  int v9 = *a2;
  if (v9 == 2)
  {
    uint64_t v10 = Asn1Coder::EncodeOctetString(a1, 0, 0, 16, (void *)a2 + 4, 1, 0);
    uint64_t v5 = v10;
    if (!v10) {
      return v5;
    }
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (v9 != 1)
  {
    SuplAsn1Logger::TraceError(0, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    return 0;
  }
  uint64_t v10 = Asn1Coder::EncodeOctetString(a1, 0, 0, 4, (void *)a2 + 1, 1, 0);
  uint64_t v5 = v10;
  if (v10)
  {
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
LABEL_11:
    SuplAsn1Logger::TraceError(v10, v11, v12);
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
    goto LABEL_3;
  }
  return v5;
}

uint64_t asn1PD_IPAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned __int8 v10 = 0;
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v10);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    int v9 = v10;
    *(unsigned char *)a2 = v10 + 1;
    if (v9 == 1)
    {
      uint64_t v4 = asn1PD_IPAddress_ipv6Address(a1, (unint64_t *)(a2 + 32));
    }
    else
    {
      if (v9)
      {
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        uint64_t v5 = 4;
        LODWORD(v4) = 4;
        goto LABEL_3;
      }
      uint64_t v4 = asn1PD_IPAddress_ipv4Address(a1, (unint64_t *)(a2 + 8));
    }
    uint64_t v5 = v4;
    if (!v4) {
      return v5;
    }
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
LABEL_3:
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PD_FQDN(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  uint64_t v3 = Asn1Coder::DecodeVisibleStringSubType(a1, 1, 0xFFu, &v6, a2, 0x40u, (uint64_t)"-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 0);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_SLPAddress(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 1, *a2 - 1);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int v9 = *a2;
      switch(v9)
      {
        case 1:
          uint64_t v4 = asn1PE_IPAddress(a1, a2 + 8);
          if (!v4) {
            return v4;
          }
          break;
        case 255:
          int v5 = *(_DWORD *)(a1 + 8);
          int v6 = *(_DWORD *)(a1 + 12);
          uint64_t v4 = 1;
          LODWORD(v7) = 1;
          goto LABEL_5;
        case 2:
          uint64_t v10 = Asn1Coder::EncodeVisibleStringSubType(a1, 1, 0xFFu, *((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 16), (void *)a2 + 8, 64, (uint64_t)"-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 0);
          uint64_t v4 = v10;
          if (!v10) {
            return v4;
          }
          SuplAsn1Logger::TraceError(v10, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
          break;
        default:
          int v5 = *(_DWORD *)(a1 + 8);
          int v6 = *(_DWORD *)(a1 + 12);
          uint64_t v4 = 4;
          LODWORD(v7) = 4;
          goto LABEL_5;
      }
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      LODWORD(v7) = v4;
    }
  }
LABEL_5:
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PD_SLPAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
  }
  else if (BitFromBuffer)
  {
    Asn1Coder::SkipChoiceExtension(a1);
    uint64_t v5 = v8;
    if (!v8) {
      return v5;
    }
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    unsigned __int8 v11 = 0;
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v11);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int v10 = v11;
      *(unsigned char *)a2 = v11 + 1;
      if (v10 != 254)
      {
        if (v10 == 1)
        {
          uint64_t v8 = asn1PD_FQDN(a1, (unint64_t *)(a2 + 64));
        }
        else
        {
          if (v10)
          {
            int v6 = *(_DWORD *)(a1 + 8);
            int v7 = *(_DWORD *)(a1 + 12);
            uint64_t v5 = 4;
            LODWORD(v8) = 4;
            goto LABEL_3;
          }
          uint64_t v8 = asn1PD_IPAddress(a1, a2 + 8);
        }
        uint64_t v5 = v8;
        if (!v8) {
          return v5;
        }
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        goto LABEL_3;
      }
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      uint64_t v5 = 1;
      LODWORD(v8) = 1;
    }
  }
LABEL_3:
  SuplAsn1Logger::TraceError(v8, v6, v7);
  return v5;
}

uint64_t asn1PE_SETId_msisdn(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeOctetString(a1, 0, 0, 8, a2, 1, 1);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_SETId_msisdn(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, a2, 1);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_SETId_mdn(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeOctetString(a1, 0, 0, 8, a2, 1, 0);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_SETId_mdn(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_SETId_min(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeBitString(a1, 0, 0, 0x22u, a2, 1);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_SETId_min(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x22u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_SETId_imsi(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeOctetString(a1, 0, 0, 8, a2, 1, 1);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_SETId_imsi(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, a2, 1);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_SETId(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_17:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 5, *a2 - 1);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  switch(*a2)
  {
    case 1u:
      uint64_t v7 = asn1PE_SETId_msisdn(a1, (void *)a2 + 1);
      break;
    case 2u:
      uint64_t v7 = asn1PE_SETId_mdn(a1, (void *)a2 + 4);
      break;
    case 3u:
      uint64_t v7 = asn1PE_SETId_min(a1, (void *)a2 + 7);
      break;
    case 4u:
      uint64_t v7 = asn1PE_SETId_imsi(a1, (void *)a2 + 10);
      break;
    case 5u:
      uint64_t v7 = Asn1Coder::EncodeVisibleString7(a1, 1, 1000, *((_DWORD *)a2 + 28) - *((_DWORD *)a2 + 26), (void *)a2 + 13, 0);
      break;
    case 6u:
      uint64_t v7 = asn1PE_IPAddress(a1, a2 + 128);
      break;
    default:
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      if (*a2 == 255)
      {
        uint64_t v4 = 1;
        LODWORD(v7) = 1;
      }
      else
      {
        uint64_t v4 = 4;
        LODWORD(v7) = 4;
      }
      goto LABEL_17;
  }
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
  return v4;
}

uint64_t asn1PD_SETId(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_3:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  if (BitFromBuffer)
  {
    Asn1Coder::SkipChoiceExtension(a1);
    uint64_t v5 = v8;
    if (!v8) {
      return v5;
    }
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_3;
  }
  __int16 v12 = 0;
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 5u, &v12);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_3;
  }
  int v10 = v12;
  *(unsigned char *)a2 = v12 + 1;
  switch(v10)
  {
    case 0:
      uint64_t v8 = asn1PD_SETId_msisdn(a1, (unint64_t *)(a2 + 8));
      break;
    case 1:
      uint64_t v8 = asn1PD_SETId_mdn(a1, (unint64_t *)(a2 + 32));
      break;
    case 2:
      uint64_t v8 = asn1PD_SETId_min(a1, (unint64_t *)(a2 + 56));
      break;
    case 3:
      uint64_t v8 = asn1PD_SETId_imsi(a1, (unint64_t *)(a2 + 80));
      break;
    case 4:
      int v11 = 0;
      uint64_t v8 = Asn1Coder::DecodeVisibleString7(a1, 1, 0x3E8u, &v11, (unint64_t *)(a2 + 104), 0);
      break;
    case 5:
      uint64_t v8 = asn1PD_IPAddress(a1, a2 + 128);
      break;
    default:
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      if (v10 == 254)
      {
        uint64_t v5 = 1;
        LODWORD(v8) = 1;
      }
      else
      {
        uint64_t v5 = 4;
        LODWORD(v8) = 4;
      }
      goto LABEL_3;
  }
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_3;
  }
  return v5;
}

uint64_t asn1PE_SlpSessionID_sessionID(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeOctetString(a1, 0, 0, 4, a2, 1, 0);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_SlpSessionID_sessionID(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x20u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_SlpSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = asn1PE_SlpSessionID_sessionID(a1, (void *)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = asn1PE_SLPAddress(a1, (unsigned __int8 *)(a2 + 24));
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

uint64_t asn1PD_SlpSessionID(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = asn1PD_SlpSessionID_sessionID(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = asn1PD_SLPAddress(a1, (uint64_t)(a2 + 3));
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

uint64_t asn1PE_SetSessionID(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFF, *(unsigned __int16 *)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = asn1PE_SETId(a1, a2 + 8);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

uint64_t asn1PD_SetSessionID(uint64_t a1, _WORD *a2)
{
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0xFFFFu, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = asn1PD_SETId(a1, (uint64_t)(a2 + 4));
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return v5;
}

void ASN1T_SessionID::ASN1T_SessionID(ASN1T_SessionID *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((unsigned char *)this + 16) = -1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((_WORD *)this + 4) = 0;
  std::vector<unsigned char>::vector((void *)this + 25, 4uLL);
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 224) = -1;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 38) = 0;
  *(_WORD *)this = 0;
}

void sub_22BA628E4(_Unwind_Exception *a1)
{
  ASN1T_SETId::U::~U(v1);
  _Unwind_Resume(a1);
}

uint64_t asn1PE_SessionID(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_5:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_5;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_SetSessionID(a1, a2 + 8);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_5;
    }
  }
  if (!a2[1]) {
    return 0;
  }

  return asn1PE_SlpSessionID(a1, (uint64_t)(a2 + 200));
}

uint64_t asn1PD_SessionID(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_5:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  *(unsigned char *)(a2 + 1) = BitFromBuffer;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_5;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = asn1PD_SetSessionID(a1, (_WORD *)(a2 + 8));
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_5;
    }
    int BitFromBuffer = *(unsigned __int8 *)(a2 + 1);
  }
  if (!BitFromBuffer) {
    return 0;
  }

  return asn1PD_SlpSessionID(a1, (unint64_t *)(a2 + 200));
}

double *Inc_GPS_TOW(double a1, double *result, __int16 *a3)
{
  double v3 = *result + a1;
  *double result = v3;
  if (v3 >= 604800.0)
  {
    __int16 v4 = *a3;
    do
    {
      double v3 = v3 + -604800.0;
      ++v4;
    }
    while (v3 >= 604800.0);
    *double result = v3;
    *a3 = v4;
  }
  if (v3 < 0.0)
  {
    __int16 v5 = *a3;
    do
    {
      double v3 = v3 + 604800.0;
      --v5;
    }
    while (v3 < 0.0);
    *double result = v3;
    *a3 = v5;
  }
  return result;
}

uint64_t NK_Sample_Track_Meas(int *a1, _DWORD *a2, double *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = 0;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned __int8 v14 = 0;
  int v15 = *a1;
  *(_DWORD *)a4 = *a1;
  int v16 = v15 - *a2;
  if (v15 == *a2) {
    int v16 = 1;
  }
  *(_DWORD *)(a4 + 8) = v16;
  *a2 = v15;
  int v17 = a1[2];
  *(_DWORD *)(a4 + 4) = a1[1];
  *(_DWORD *)(a4 + 12) = v17;
  *(unsigned char *)(a4 + 16) = *((unsigned char *)a1 + 12);
  *(unsigned char *)(a4 + 17) = *((unsigned char *)a1 + 14);
  *(unsigned char *)(a4 + 48) = *((unsigned char *)a1 + 13);
  *(_WORD *)(a4 + 18) = *((_WORD *)a1 + 8);
  double v18 = *((double *)a1 + 3);
  *(double *)(a4 + 24) = v18;
  LODWORD(a8) = *(_DWORD *)(a4 + 8);
  uint64_t v19 = *((void *)a1 + 5);
  *(double *)(a4 + 32) = v18 - *a3 + (double)*(unint64_t *)&a8 * -0.001;
  *a3 = v18;
  *(_DWORD *)(a4 + 100) = a1[12];
  *(unsigned char *)(a4 + 104) = *((unsigned char *)a1 + 52);
  *(_WORD *)(a4 + 106) = *((_WORD *)a1 + 27);
  *(_WORD *)(a4 + 108) = *((_WORD *)a1 + 28);
  *(void *)(a4 + 40) = v19;
  *(void *)(a4 + 112) = *((void *)a1 + 8);
  uint64_t v20 = (uint64_t)a1 + 843;
  do
  {
    uint64_t v21 = v20 + 4 * v8;
    if (*(_DWORD *)(v21 - 579))
    {
      ++v13;
      v12 += *(unsigned __int8 *)(v20 + v8);
      if (*(int *)(v21 - 243) >= 10)
      {
        ++v14;
        switch(*(_DWORD *)(v21 - 579))
        {
          case 1u:
          case 3u:
          case 5u:
            ++v11;
            break;
          case 2u:
            ++v10;
            break;
          case 4u:
            ++v9;
            break;
          default:
            break;
        }
      }
    }
    --v8;
  }
  while (v8 != -48);
  if (v13) {
    *(unsigned char *)(a4 + 600) = v12 / v13;
  }
  *(unsigned char *)(a4 + 24782) = v11;
  *(unsigned char *)(a4 + 24787) = v10;
  *(unsigned char *)(a4 + 24792) = v9;
  return v14;
}

uint64_t Decode_GPS_Check_Alm_TOA(const unsigned int *a1, char a2, __int16 a3, unsigned __int8 *a4, __int16 *a5, BOOL *a6)
{
  uint64_t v6 = 0;
  *a6 = 0;
  unsigned int v7 = *((unsigned __int8 *)a1 + 14);
  if (v7 <= 0x93)
  {
    unsigned int v8 = a1[1] & 0xFFFF80;
    if (v8 > 0xC4DFEA) {
      return 0;
    }
    signed int v9 = (v7 << 12) - ((3 * v8) >> 6);
    if (v9 >= -302400) {
      __int16 v10 = a3 - (v9 > 302399);
    }
    else {
      __int16 v10 = a3 - (v9 > 302399) + 1;
    }
    *a5 = v10;
    unsigned int v11 = *a4;
    if (v11 < v7 || (int)(v11 - v7) >= 74)
    {
      *a4 = v7;
      return 1;
    }
    if (v11 != v7) {
      return 0;
    }
    *a6 = 1;
    if (a2) {
      return 0;
    }
    else {
      return ((a1[4] & 0xE0) == 0) & (0xE4FE7F3uLL >> (a1[4] & 0x1F));
    }
  }
  return v6;
}

void NK_Comp_DR_Meas(unsigned int a1, int a2, unsigned __int16 *a3, double *a4, double *a5, unsigned __int16 *a6, int *a7, double *a8, double a9, unsigned char *a10, double *a11, unsigned char *a12)
{
  LODWORD(v18) = a1;
  uint64_t v21 = a11;
  size_t v33 = 8 * a1;
  bzero(a11, v33);
  if (a9 > 0.0)
  {
    double v32 = a8;
    if (v18)
    {
      uint64_t v18 = v18;
      unsigned int v23 = (a9 * 100.0) + 1;
      double v24 = (double)a2 * 1575420.0;
      double v25 = 1.0 / a9;
      double v26 = a4;
      unsigned int v31 = v23;
      do
      {
        if (*a7 <= 14)
        {
          *a12 = 1;
        }
        else if (v23 >= *a3 || (~*a6 & 0x300) != 0)
        {
          *a7 = 14;
        }
        else
        {
          *a12 = 1;
          double v27 = v24 + *v26 - *a8;
          *uint64_t v21 = v27 * 0.190293673;
          if (*a10)
          {
            double v28 = *a5;
            double v29 = *a5 + v27 * v25;
            if (fabs(v29) > 32.0)
            {
              *a7 = 14;
              int v30 = (int)*v26;
              *a12 = 0;
              EvLog_v("NK_Comp_DR_Meas: DR-DO = %d Hz ! (%d, %d, %d)", (int)v29, v30, (int)*a8, (int)v28);
              unsigned int v23 = v31;
            }
          }
        }
        ++a10;
        ++a5;
        ++v21;
        ++a8;
        ++v26;
        ++a12;
        ++a6;
        ++a3;
        ++a7;
        --v18;
      }
      while (v18);
    }
    memcpy(v32, a4, v33);
  }
}

BOOL Init_DB_Sys_Status(uint64_t a1)
{
  uint64_t v2 = a1 + 1019;
  uint64_t v3 = a1 + 253;
  *(void *)(a1 + 432) = a1 + 253;
  *(void *)(a1 + 440) = a1 + 285;
  *(void *)(a1 + 464) = a1 + 345;
  *(void *)(a1 + 472) = a1 + 309;
  *(void *)(a1 + 448) = a1 + 382;
  *(void *)(a1 + 456) = a1 + 392;
  uint64_t v4 = a1 + 480;
  *(void *)(a1 + 664) = a1 + 480;
  *(void *)(a1 + 672) = a1 + 512;
  *(void *)(a1 + 680) = a1 + 609;
  *(void *)(a1 + 704) = a1 + 536;
  *(void *)(a1 + 696) = a1 + 572;
  *(void *)(a1 + 688) = a1 + 619;
  uint64_t v5 = a1 + 712;
  *(void *)(a1 + 896) = a1 + 712;
  *(void *)(a1 + 904) = a1 + 744;
  *(void *)(a1 + 912) = a1 + 841;
  *(void *)(a1 + 936) = a1 + 768;
  *(void *)(a1 + 928) = a1 + 804;
  *(void *)(a1 + 920) = a1 + 851;
  *(void *)a1 = 0x200000000;
  *(void *)(a1 + 13) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 27) = 0x101010100000000;
  *(_DWORD *)(a1 + 34) = 16843009;
  *(void *)(a1 + 38) = 0;
  *(unsigned char *)(a1 + 46) = 1;
  if ((gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled((gnss::GnssAdaptDevice *)a1) & 1) == 0) {
    *(unsigned char *)(a1 + 46) = 0;
  }
  *(unsigned char *)(a1 + 47) = 0;
  *(void *)(a1 + 48) = 0x200000000;
  *(_WORD *)(a1 + 65) = 1024;
  *(_DWORD *)(a1 + 68) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(v2 + 97) = xmmword_22BB45280;
  *(_WORD *)(a1 + 1132) = 1;
  *(unsigned char *)(a1 + 1134) = 1;
  *(unsigned char *)(a1 + 252) = 0;
  *(void *)(a1 + 944) = 0x3E800000000;
  *(_DWORD *)(a1 + 956) = 0;
  *(int64x2_t *)(a1 + 960) = vdupq_n_s64(0x4060A00000000000uLL);
  *(int64x2_t *)(a1 + 976) = vdupq_n_s64(0x4079000000000000uLL);
  *(_OWORD *)(a1 + 992) = xmmword_22BB45290;
  *(_DWORD *)(a1 + 1012) = 16843009;
  *(_DWORD *)(a1 + 1015) = 16843009;
  *(_DWORD *)(a1 + 1024) = 126484480;
  *(_WORD *)(a1 + 1028) = 1930;
  *(void *)(a1 + 1052) = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_WORD *)(v3 + 176) = 0;
  *(_WORD *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_WORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_DWORD *)uint64_t v2 = 65792;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(unsigned char *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1248) = xmmword_22BB45330;
  *(_OWORD *)(a1 + 1232) = unk_22BB45320;
  *(_OWORD *)(a1 + 1216) = xmmword_22BB45310;
  *(_OWORD *)(a1 + 1200) = unk_22BB45300;
  *(_OWORD *)(a1 + 1184) = xmmword_22BB452F0;
  *(_OWORD *)(a1 + 1168) = unk_22BB452E0;
  *(_OWORD *)(a1 + 1152) = InterChanBias_GLON_L1OF;
  *(_OWORD *)(a1 + 1264) = xmmword_22BB452A0;
  EvLog_v("Init_ICB: Model %d", 0);
  *(_DWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1296) = xmmword_22BB452B0;

  return Core_Load_Inhib_EE((BOOL *)v5, (uint64_t *)(a1 + 1040));
}

char *Init_Set_Inter_Chan_Bias(char *result, unsigned int a2)
{
  if (a2 < 6)
  {
    if (result[1022] != a2)
    {
      result[1022] = a2;
      uint64_t v2 = &InterChanBias_GLON_L1OF[7 * a2];
      *((_OWORD *)result + 75) = v2[3];
      *((_OWORD *)result + 76) = v2[4];
      *((_OWORD *)result + 77) = v2[5];
      *((_OWORD *)result + 78) = v2[6];
      *((_OWORD *)result + 72) = *v2;
      *((_OWORD *)result + 73) = v2[1];
      *((_OWORD *)result + 74) = v2[2];
      *((void *)result + 158) = InterChanBias_BDS_B1[a2];
      *((void *)result + 159) = 0x3FD51EB851EB851FLL;
      return EvLog_v("Init_ICB: Model %d", a2);
    }
  }
  else
  {
    return (char *)gn_report_assertion_failure("Init_ICB: Bad Model Id");
  }
  return result;
}

double Init_DB_Sys_Status_NV(uint64_t a1, uint64_t a2)
{
  v11[1] = *(double *)MEMORY[0x263EF8340];
  v11[0] = 0.0;
  int v10 = 0;
  int v4 = Core_Load_Clk_Drift(&v10, v11);
  int v5 = 0;
  double v6 = 0.000004;
  if (!v4 || (double v7 = v11[0], v11[0] == 0.0) || fabs(v11[0]) >= 0.000004)
  {
    double v7 = 0.0;
  }
  else
  {
    int v5 = 0;
    double v6 = 0.000001;
    if (*(unsigned char *)(a1 + 5) && *(__int16 *)(a1 + 16) >= 1025 && *(int *)a1 >= 1)
    {
      int v5 = (int)*(double *)(a1 + 24) + 604800 * *(unsigned __int16 *)(a1 + 16) - v10;
      if ((v5 - 31449600) >= 0xFE201BA8)
      {
        if (v5 < 1209601)
        {
          double v6 = dbl_22BB452C0[v5 < 900];
        }
        else
        {
          v5 -= 1209600;
          double v9 = (double)v5 * 0.0000000330687831;
          double v6 = v9 * 0.0000035 + 0.0000005;
          double v7 = v11[0] * (1.0 - v9);
        }
      }
      else
      {
        double v7 = 0.0;
        double v6 = 0.000004;
      }
    }
  }
  *(double *)(a2 + 992) = v7;
  *(double *)(a2 + 1000) = v6;
  *(_DWORD *)(a2 + 1288) = v5;
  *(double *)(a2 + 1304) = v7 * 1000000.0;
  double result = v6 * 1000000.0;
  *(double *)(a2 + 1296) = v6 * 1000000.0;
  return result;
}

int64x2_t MotionCtxGen_Init(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 8;
  Set_Mat_Const(0, 0, (const char *)6, (int *)(a1 + 16), 0.0);
  Set_Mat_Const(0, 0, (const char *)6, (int *)(a1 + 72), 0.0);
  int64x2_t result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 248) = 12;
  *(int64x2_t *)(a1 + 216) = result;
  *(void *)(a1 + 240) = 0xFFEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 256) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 264) = 12;
  *(void *)(a1 + 384) = 0;
  return result;
}

uint64_t MotionCtxGen_Run(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  double v7 = *(void **)(a3 + 87744);
  unsigned int v8 = *(_DWORD **)(a4 + 128032);
  int v27 = 0;
  uint64_t __dst = 0;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  unsigned int v23 = v7;
  if (*(unsigned char *)(a1 + 472)) {
    goto LABEL_5;
  }
  uint64_t result = Cyc_Record_IsEmpty(v7, a2);
  if ((result & 1) == 0)
  {
    Cyc_Record_Read((uint64_t)v7, a2, &__dst);
    MotionCtxGen_inCntx2McST((unsigned int *)&__dst, (double *)&v28, a5, 1);
    uint64_t result = (uint64_t)MotionCtxGen_UpdateState((const char *)a1, (uint64_t)&v28, a2, a3, a5);
  }
  if (*(unsigned char *)(a1 + 472))
  {
LABEL_5:
    MotionCtxGen_SetValidUntil(a1, a2, a3, a5);
    while (1)
    {
      uint64_t result = Cyc_Record_Count_Free(v8, 1u);
      double v11 = *(double *)(a1 + 216);
      double v10 = *(double *)(a1 + 224);
      if (result < 2 || v10 > v11)
      {
        unsigned int v13 = v23;
      }
      else
      {
        unsigned int v13 = v23;
        do
        {
          if (v10 < *(double *)(a1 + 240))
          {
            if (g_FPE_LogSeverity)
            {
              uint64_t v14 = mach_continuous_time();
              if (g_TCU) {
                double v15 = *(double *)(g_TCU + 8);
              }
              else {
                double v15 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f MOTC: run meas error: writing meas in the past", "MotionCtxGen_Run", 413, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), v15);
              double v10 = *(double *)(a1 + 224);
            }
            g_FPE_AssertFlag = 1;
          }
          *(double *)(a1 + 240) = v10;
          *(double *)a1 = v10 + 0.003;
          long long v16 = *(_OWORD *)(a1 + 432);
          long long v38 = *(_OWORD *)(a1 + 416);
          long long v39 = v16;
          long long v40 = *(_OWORD *)(a1 + 448);
          uint64_t v41 = *(void *)(a1 + 464);
          long long v17 = *(_OWORD *)(a1 + 368);
          long long v34 = *(_OWORD *)(a1 + 352);
          long long v35 = v17;
          long long v18 = *(_OWORD *)(a1 + 400);
          long long v36 = *(_OWORD *)(a1 + 384);
          long long v37 = v18;
          long long v19 = *(_OWORD *)(a1 + 304);
          long long v30 = *(_OWORD *)(a1 + 288);
          long long v31 = v19;
          long long v20 = *(_OWORD *)(a1 + 336);
          long long v32 = *(_OWORD *)(a1 + 320);
          long long v33 = v20;
          long long v21 = *(_OWORD *)(a1 + 272);
          *((void *)&v28 + 1) = *(void *)(a1 + 264);
          long long v29 = v21;
          *(double *)&long long v28 = v10 + -0.003;
          Cyc_Record_Write((uint64_t)v8, &v28);
          Cyc_Record_Write((uint64_t)v8, (const void *)a1);
          *(double *)(a1 + 224) = *(double *)(a1 + 224) + 0.5;
          double v22 = *(double *)(a1 + 384) + -0.5;
          if (v22 < 0.0) {
            double v22 = 0.0;
          }
          *(double *)(a1 + 384) = v22;
          *(double *)(a1 + 480) = *(double *)(a1 + 480) + 0.5;
          uint64_t result = Cyc_Record_Count_Free(v8, 1u);
          double v11 = *(double *)(a1 + 216);
          double v10 = *(double *)(a1 + 224);
        }
        while (result >= 2 && v10 <= v11);
      }
      if (v10 <= v11) {
        break;
      }
      uint64_t result = Cyc_Record_IsEmpty(v13, a2);
      if (result) {
        break;
      }
      Cyc_Record_Read((uint64_t)v13, a2, &__dst);
      MotionCtxGen_inCntx2McST((unsigned int *)&__dst, (double *)&v28, a5, 1);
      MotionCtxGen_UpdateState((const char *)a1, (uint64_t)&v28, a2, a3, a5);
    }
  }
  return result;
}

const char *MotionCtxGen_inCntx2McST(unsigned int *a1, double *a2, uint64_t a3, int a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *((_DWORD *)a2 + 2) = 13;
  unsigned int v8 = a1[1];
  if (v8 == 1 || v8 == 2 && a1[2] == 3)
  {
    *((_DWORD *)a2 + 2) = 6;
    double v9 = 0.0;
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)a2 + 4, 0.0);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v16, 0.5);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v14, 0.005);
    Set_Mat_Size((const char *)6, (int *)a2 + 18, 6, 1);
    Copy_SubMat_to_Mat(1.0, 3, &v16, 0, 0, 6, (int *)a2 + 18);
    Copy_SubMat_to_Mat(1.0, 3, &v14, 3, 0, 6, (int *)a2 + 18);
    a2[16] = 0.0;
  }
  else
  {
    *((_DWORD *)a2 + 2) = 5;
    Set_Mat_Const((const char *)4, 1u, (const char *)6, (int *)a2 + 4, 0.0);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v16, 1.125);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v14, 0.05625);
    Set_Mat_Size((const char *)6, (int *)a2 + 18, 4, 1);
    Copy_SubMat_to_Mat(1.0, 3, &v16, 0, 0, 6, (int *)a2 + 18);
    Copy_SubMat_to_Mat(1.0, 3, &v14, 3, 0, 6, (int *)a2 + 18);
    a2[16] = 0.0;
    double v9 = 0.5;
  }
  *(void *)&long long v16 = 0;
  uint64_t result = TCU_ConvertOStimeToTTICKtime((const char *)a3, *a1, (double *)&v16);
  double v11 = *(double *)&v16;
  *a2 = *(double *)&v16 - v9;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v13 = *(double *)(g_TCU + 8);
    }
    else {
      double v13 = 0.0;
    }
    uint64_t result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MOTC: generating new meas. measType = %d, measTime = %f", "MotionCtxGen_inCntx2McST", 220, v12, v13, *((_DWORD *)a2 + 2), *a2);
  }
  if (a4)
  {
    if ((g_FPE_LogSeverity & 0x200) != 0) {
      return LC_LOG_NMEA_GENERIC("%s,MOTC,%.3f,%d,%d,%.3f", "$PFPEX", *a2, a1[1], a1[2], *(double *)(a3 + 40) - v11);
    }
  }
  return result;
}

const char *MotionCtxGen_UpdateState(const char *result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 != 13)
  {
    uint64_t v10 = (uint64_t)result;
    *((_DWORD *)result + 62) = v5;
    if (result[472])
    {
      if (*(double *)a2 > *((double *)result + 28) + 0.5)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v12 = *(double *)(g_TCU + 8);
          }
          else {
            double v12 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f MOTC: Update state error: measurement time too big", "MotionCtxGen_UpdateState", 340, v11, v12);
        }
        g_FPE_AssertFlag = 1;
      }
    }
    else
    {
      double v13 = *(double *)(a5 + 40) + -1.0;
      *((double *)result + 28) = v13;
      *((double *)result + 29) = v13;
      *((unsigned char *)result + 472) = 1;
    }
    uint64_t result = MotionCtxGen_SetValidUntil(v10, a3, a4, a5);
    if (*(_DWORD *)(v10 + 264) == *(_DWORD *)(a2 + 8))
    {
      double v14 = *(double *)(v10 + 384);
    }
    else
    {
      *(void *)(v10 + 480) = 0;
      double v14 = 5.0;
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        uint64_t result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f -MOTC: t=%0.3f,type=%u", "MotionCtxGen_UpdateState", 356, v15, v16, *(double *)a2, *(_DWORD *)(v10 + 264));
      }
    }
    long long v17 = *(_OWORD *)(a2 + 96);
    long long v18 = *(_OWORD *)(a2 + 112);
    long long v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v10 + 384) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v10 + 400) = v19;
    long long v20 = *(_OWORD *)(a2 + 160);
    long long v21 = *(_OWORD *)(a2 + 176);
    long long v22 = *(_OWORD *)(a2 + 192);
    *(void *)(v10 + 464) = *(void *)(a2 + 208);
    *(_OWORD *)(v10 + 432) = v21;
    *(_OWORD *)(v10 + 448) = v22;
    *(_OWORD *)(v10 + 416) = v20;
    long long v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v10 + 256) = *(_OWORD *)a2;
    *(_OWORD *)(v10 + 272) = v23;
    long long v24 = *(_OWORD *)(a2 + 32);
    long long v25 = *(_OWORD *)(a2 + 48);
    long long v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v10 + 320) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v10 + 336) = v26;
    *(_OWORD *)(v10 + 288) = v24;
    *(_OWORD *)(v10 + 304) = v25;
    *(_OWORD *)(v10 + 352) = v17;
    *(_OWORD *)(v10 + 368) = v18;
    *(double *)(v10 + 384) = v14;
  }
  return result;
}

const char *MotionCtxGen_SetValidUntil(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v7 = *(void **)(a3 + 87744);
  uint64_t result = (const char *)Cyc_Record_IsEmpty(v7, a2);
  if (result)
  {
    double v9 = 0.7;
    if (*(_DWORD *)(a1 + 248) != 6) {
      double v9 = 0.0;
    }
    double v10 = *(double *)(a4 + 40) - v9;
  }
  else
  {
    int v20 = 0;
    uint64_t __dst = 0;
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    Cyc_Record_Peek((uint64_t)v7, a2, 0, &__dst);
    uint64_t result = MotionCtxGen_inCntx2McST((unsigned int *)&__dst, (double *)v21, a4, 0);
    double v10 = *(double *)v21;
  }
  *(double *)(a1 + 216) = v10;
  double v11 = *(double *)(a4 + 40);
  double v12 = *(double *)(a1 + 232);
  if (v12 != v11)
  {
    double v13 = v11 - v12 + -1.0;
    double v14 = -v13;
    if (v13 >= 0.0) {
      double v14 = v13;
    }
    if (v14 >= 0.2)
    {
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v18 = *(double *)(g_TCU + 8);
        }
        else {
          double v18 = 0.0;
        }
        uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f MOTC: suspicious clock correction: %0.1fms - ignored", "MotionCtxGen_fixStateTime", 260, v17, v18, v13 * 1000.0);
      }
    }
    else
    {
      if (v14 > 2.22044605e-16 && (g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v16 = *(double *)(g_TCU + 8);
        }
        else {
          double v16 = 0.0;
        }
        uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f MOTC: clock correction by %0.1fms (%0.3f before)", "MotionCtxGen_fixStateTime", 252, v15, v16, v13 * 1000.0, *(double *)(a1 + 224));
      }
      *(double *)(a1 + 224) = v13 + *(double *)(a1 + 224);
    }
    *(double *)(a1 + 232) = v11;
  }
  return result;
}

double NK_DeCor_Ext_Meas(uint64_t a1, uint64_t a2, double result)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2 + 23120;
  uint64_t v6 = a2 + 22776;
  int v7 = *(unsigned __int8 *)(a2 + 22992);
  if (*(unsigned char *)(a2 + 22992) && *(int *)(a2 + 23004) > 0 || (double v8 = 0.0, *(unsigned char *)v5) && *(int *)(a2 + 23132) >= 1)
  {
    Comp_NEDvar_UDU(a1 + 344, 0xBu, 5, (double (*)[3])(a2 + 832), v36);
    Comp_ErrorEllipse(v36[0], v36[1], v9, &v33, &v34, &v35);
    uint64_t result = v33;
    double v8 = result * result;
    int v7 = *(unsigned __int8 *)(v6 + 216);
  }
  if (v7)
  {
    uint64_t result = *(double *)(a2 + 23040);
    *(double *)(a2 + 23064) = result;
    double v10 = *(double *)(a2 + 23048);
    *(double *)(a2 + 23072) = v10;
    int v11 = *(_DWORD *)(v6 + 228);
    if (!*(_DWORD *)(a2 + 968) && v11 <= 0)
    {
      if (*(_DWORD *)(v6 + 224) == 4 || v8 >= result * 4.0) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
    if (v11 < 1) {
      goto LABEL_24;
    }
    if (v11 == 2)
    {
      double v13 = 1.5;
    }
    else
    {
      if (v11 != 1)
      {
LABEL_21:
        if (v8 >= result * 4.0) {
          goto LABEL_24;
        }
LABEL_22:
        double v14 = 1.7;
        goto LABEL_23;
      }
      double v13 = 0.75;
    }
    if (v8 < result * v13)
    {
      double v14 = 90000.0;
LABEL_23:
      *(double *)(a2 + 23040) = result * v14;
      uint64_t result = v10 * v14;
      *(double *)(a2 + 23048) = v10 * v14;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_24:
  if (!*(unsigned char *)v5) {
    goto LABEL_36;
  }
  uint64_t result = *(double *)(a2 + 23152);
  *(double *)(a2 + 23160) = result;
  int v15 = *(_DWORD *)(v5 + 12);
  if (v15 < 1) {
    goto LABEL_36;
  }
  if (v15 == 1)
  {
    double v16 = v37;
    double v17 = 0.75;
LABEL_30:
    if (v16 < result * v17)
    {
      double v18 = 90000.0;
LABEL_35:
      uint64_t result = result * v18;
      *(double *)(a2 + 23152) = result;
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  if (v15 == 2)
  {
    double v16 = v37;
    double v17 = 1.5;
    goto LABEL_30;
  }
  double v16 = v37;
LABEL_33:
  if (v16 < result * 4.0)
  {
    double v18 = 1.7;
    goto LABEL_35;
  }
LABEL_36:
  if (!*(unsigned char *)(v6 + 72)) {
    goto LABEL_48;
  }
  uint64_t result = *(double *)(a2 + 22880);
  *(double *)(a2 + 22888) = result;
  int v19 = *(_DWORD *)(v6 + 84);
  if (v19 < 1) {
    goto LABEL_48;
  }
  if (v19 == 1)
  {
    double v20 = *(double *)(a2 + 24496);
    double v21 = 0.75;
LABEL_42:
    if (v20 < result * v21)
    {
      double v22 = 900.0;
LABEL_47:
      uint64_t result = result * v22;
      *(double *)(a2 + 22880) = result;
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (v19 == 2)
  {
    double v20 = *(double *)(a2 + 24496);
    double v21 = 1.5;
    goto LABEL_42;
  }
  double v20 = *(double *)(a2 + 24496);
LABEL_45:
  if (v20 < result * 4.0)
  {
    double v22 = 1.7;
    goto LABEL_47;
  }
LABEL_48:
  if (!*(unsigned char *)(v6 + 144)) {
    goto LABEL_62;
  }
  uint64_t result = *(double *)(a2 + 22952);
  *(double *)(a2 + 22960) = result;
  int v23 = *(_DWORD *)(v6 + 156);
  if (v23 < 1) {
    goto LABEL_62;
  }
  if (v23 == 1)
  {
    double v24 = *(double *)(a2 + 24520);
    double v25 = 0.75;
  }
  else
  {
    double v24 = *(double *)(a2 + 24520);
    if (v23 != 2) {
      goto LABEL_59;
    }
    double v25 = 1.5;
  }
  if (v24 < result * v25)
  {
    if (*(_DWORD *)(a1 + 11048) || *(unsigned char *)(a2 + 8387) || *(unsigned char *)(a2 + 13963))
    {
      double v26 = 10000.0;
LABEL_61:
      uint64_t result = result * v26;
      *(double *)(a2 + 22952) = result;
      goto LABEL_62;
    }
    double v31 = 4.0;
    if (v23 == 1) {
      double v31 = 1.0;
    }
    uint64_t result = -(v24 - result * v31);
    unsigned int v32 = 0;
    if (result > 0.0) {
      Apply_Q_Boost(result, 3u, 1u, (double *)(a1 + 344), &v32, &v33);
    }
    goto LABEL_62;
  }
LABEL_59:
  if (v24 < result * 4.0)
  {
    double v26 = 1.7;
    goto LABEL_61;
  }
LABEL_62:
  if (*(unsigned char *)v6)
  {
    uint64_t result = *(double *)(a2 + 22808);
    *(double *)(a2 + 22816) = result;
    int v27 = *(_DWORD *)(v6 + 12);
    if (v27 >= 1)
    {
      if (v27 == 1)
      {
        double v28 = *(double *)(a2 + 24528);
        double v29 = 0.75;
      }
      else
      {
        if (v27 != 2)
        {
          double v28 = *(double *)(a2 + 24528);
          goto LABEL_71;
        }
        double v28 = *(double *)(a2 + 24528);
        double v29 = 1.5;
      }
      if (v28 < result * v29)
      {
        double v30 = 900.0;
LABEL_73:
        uint64_t result = result * v30;
        *(double *)(a2 + 22808) = result;
        return result;
      }
LABEL_71:
      if (v28 >= result * 4.0) {
        return result;
      }
      double v30 = 1.7;
      goto LABEL_73;
    }
  }
  return result;
}

const double *invtst(double *a1, double *a2, unsigned int a3, double a4, double a5, double a6, double *a7)
{
  double v8 = *a1;
  uint64_t result = a1 - 1;
  double v9 = a4 + v8 * *a2 * *a2;
  if (a3 >= 2)
  {
    if (a3 + 1 > 3) {
      uint64_t v10 = a3 + 1;
    }
    else {
      uint64_t v10 = 3;
    }
    uint64_t v11 = 1;
    int v12 = 2;
    uint64_t v13 = 2;
    unsigned int v14 = 1;
    do
    {
      double v15 = a2[v13 - 1];
      double v16 = a2;
      int v17 = v12;
      uint64_t v18 = v11;
      do
      {
        double v19 = *v16++;
        double v15 = v15 + v19 * result[v17++];
        --v18;
      }
      while (v18);
      v14 += v13;
      double v9 = v9 + v15 * v15 * result[v14];
      v12 += v13;
      ++v11;
      ++v13;
    }
    while (v13 != v10);
  }
  if (a5 * a5 > v9 * a6) {
    double v9 = -v9;
  }
  *a7 = v9;
  return result;
}

uint64_t Partial_Reset(uint64_t result, double *a2, double *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (result)
  {
    unsigned int v5 = result;
    unsigned int v6 = 0;
    unsigned __int8 v7 = 0;
    double v15 = 0.0;
    double v13 = 0.0;
    do
    {
      uint64_t v8 = v7;
      double v9 = a2[v7];
      if (v9 > 0.0)
      {
        uint64_t v34 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        unsigned int v10 = v6 + 1;
        long long v18 = 0u;
        long long v19 = 0u;
        *((void *)&v18 + v7) = 0x3FF0000000000000;
        uint64_t result = ud2var((uint64_t)a3, v5, v6 + 1, 1u, &v15);
        double v11 = v15;
        double v12 = v15 * 100000000.0;
        if (v15 * 100000000.0 <= v9 * 1.01)
        {
          if (v9 - v15 > 0.0) {
            uint64_t result = (uint64_t)rnk1_core(a3, v10, v9 - v15, (double *)&v18, &v14);
          }
        }
        else
        {
          if (v12 > 0.0)
          {
            rnk1_core(a3, v10, v15 * 100000000.0, (double *)&v18, &v14);
            double v9 = a2[v8];
          }
          uint64_t v34 = 0;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          *((void *)&v18 + v8) = 0x3FF0000000000000;
          uint64_t result = umeas((BOOL)a3, v5, v9 * ((v11 + v12) / (v11 + v12 - v9)), (double *)&v18, v17, v16, &v13, -1.0);
        }
      }
      unsigned __int8 v7 = v8 + 1;
      unsigned int v6 = (v8 + 1);
    }
    while (v6 < v5);
  }
  return result;
}

unsigned char *LPP_init(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  StaticLppPrivate = (char *)GetStaticLppPrivate();
  memset_s(StaticLppPrivate + 18, 6uLL, 0, 6uLL);
  *((unsigned char *)GetStaticLppPrivate() + 2) = 0;
  *((unsigned char *)GetStaticLppPrivate() + 3) = 0;
  *(unsigned char *)GetStaticLppPrivate() = 0;
  *((unsigned char *)GetStaticLppPrivate() + 1) = 0;
  *((void *)GetStaticLppPrivate() + 1) = 0;
  *((unsigned char *)GetStaticLppPrivate() + 28) = 0;
  *((_DWORD *)GetStaticLppPrivate() + 6) = -1;
  long double v1 = operator new(0x10uLL, MEMORY[0x263F8C180]);
  if (v1)
  {
    *long double v1 = 0;
    v1[1] = 0;
  }
  *((void *)GetStaticLppPrivate() + 1) = v1;
  if (!*((void *)GetStaticLppPrivate() + 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "LPP_init", "LPP_init");
      LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("LPP_init", "lpp_if.cpp", 86, "false && \"Memory allocation failure\"");
  }
  uint64_t result = GetStaticLppPrivate();
  *uint64_t result = 1;
  return result;
}

uint64_t LPP_destroy(void)
{
  lpp_reset(0);
  uint64_t v0 = *((void *)GetStaticLppPrivate() + 1);
  if (v0) {
    MEMORY[0x230F4E5D0](v0, 0x20C40A4A59CD2);
  }
  *((void *)GetStaticLppPrivate() + 1) = 0;
  *((unsigned char *)GetStaticLppPrivate() + 1) = 0;
  *((void *)GetStaticLppPrivate() + 1) = 0;
  *(unsigned char *)GetStaticLppPrivate() = 0;
  *((unsigned char *)GetStaticLppPrivate() + 28) = 0;
  *((unsigned char *)GetStaticLppPrivate() + 16) = 0;
  *((_DWORD *)GetStaticLppPrivate() + 6) = -1;
  long double v1 = (char *)GetStaticLppPrivate() + 2;

  return memset_s(v1, 6uLL, 0, 6uLL);
}

size_t lpp_t_classmark_ind(unsigned char *a1)
{
  if (!*(unsigned char *)GetStaticLppPrivate()) {
    LPP_init();
  }
  if (*a1 == 1)
  {
    int v2 = a1[10];
    if (v2 == 1) {
      char v3 = (a1[11] == 1) | (4 * (a1[13] == 1)) | (2 * (a1[12] == 1));
    }
    else {
      char v3 = 0;
    }
    *((unsigned char *)GetStaticLppPrivate() + 2) = v2;
    *((unsigned char *)GetStaticLppPrivate() + 3) = v3;
  }
  if (a1[1] == 1)
  {
    if (a1[19] == 1)
    {
      char v4 = (a1[20] == 1) | (2 * (a1[22] == 1));
      char v5 = 2 * (a1[23] == 1);
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      char v4 = 0;
      char v5 = 0;
    }
    StaticLppPrivate = GetStaticLppPrivate();
    StaticLppPrivate[4] = v6;
    StaticLppPrivate[5] = v4;
    StaticLppPrivate[6] = v5;
  }
  if (a1[25] == 1)
  {
    BOOL v8 = a1[24] == 1;
    *((unsigned char *)GetStaticLppPrivate() + 7) = v8;
  }

  return lpp_state_control(2u);
}

void lpp_t_supl_pos_trigger(int a1, char a2, size_t a3, const void *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)GetStaticLppPrivate() + 1) && *((unsigned char *)GetStaticLppPrivate() + 16) == 1)
  {
    if (a4 && (int)a3 >= 1)
    {
      __s[0] = -1;
      int v10 = -1;
      memset_s(__s, 8uLL, 0, 8uLL);
      __s[0] = 1;
      int v10 = a1;
      BOOL v8 = gnssOsa_Calloc("posp_alloc", 18, 1, a3);
      memcpy_s("lpp_t_supl_pos_trigger", 213, v8, a3, a4, a3);
      lpp_process_downlink_message(__s, a2);
      if (v8) {
        free(v8);
      }
      return;
    }
    ms_report_exception(2, 16429, 219, "lpp_t_supl_pos_trigger");
    ms_report_exception(2, 16391, 220, "lpp_t_supl_pos_trigger");
  }

  send_supl_pos_ind(a1, 1, 0, 0, 0);
}

void lpp_handle_aid_req(int a1, char a2, int a3, long long *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  LOBYTE(__s) = -1;
  HIDWORD(__s) = -1;
  memset_s(&__s, 8uLL, 0, 8uLL);
  LOBYTE(__s) = 1;
  HIDWORD(__s) = -1;
  uint64_t v22 = 0;
  int v23 = 0;
  v19[1] = 0;
  long long v20 = 0;
  v19[0] = 0;
  unsigned int v21 = 0;
  memset_s(v19, 0x30uLL, 0, 0x30uLL);
  if (!a4)
  {
LABEL_18:
    if (!a3) {
      goto LABEL_19;
    }
LABEL_22:
    HIDWORD(__s) = a1;
    send_lpm_supl_ad_rsp(a1, 1, 0);
    ms_report_exception(2, 16430, 346, "lpp_handle_aid_req");
    goto LABEL_23;
  }
  v30[0] = 2;
  *(void *)&long long v31 = 0x8000000080000000;
  *((void *)&v31 + 1) = 0xFFFF00007FFFFFFFLL;
  *(_WORD *)long long v32 = 255;
  *(_WORD *)&v32[8] = -1;
  v32[10] = -1;
  *(_DWORD *)&v32[2] = -1;
  v32[6] = -1;
  memset(&v32[11], 0, 32);
  v32[44] = 0;
  memset_s(v30, 0x44uLL, 0, 0x44uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aid Mask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 68, "lpp_handle_aid_req", *((unsigned __int16 *)a4 + 6));
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 5, 1);
  }
  long long v10 = a4[1];
  long long v31 = *a4;
  *(_OWORD *)long long v32 = v10;
  *(_OWORD *)&v32[16] = a4[2];
  *(_OWORD *)&v32[29] = *(long long *)((char *)a4 + 45);
  if (a3 == 1)
  {
    LOBYTE(__s) = 1;
    HIDWORD(__s) = a1;
    uint64_t v11 = (unsigned __int8 *)lpp_session_detect((unsigned __int8 *)&__s);
    if (v11 || (uint64_t v11 = (unsigned __int8 *)lpp_session_create(&__s, a2)) != 0)
    {
      memset_s(__str, 8uLL, 0, 8uLL);
      int v12 = v11[24];
      *(_DWORD *)std::string __str = 1;
      *(_DWORD *)&char __str[4] = v12;
      double v13 = (_DWORD *)**((void **)v11 + 5);
      if (v13)
      {
        while (v13[4] != 1 || v13[5] != v12)
        {
          double v13 = *(_DWORD **)v13;
          if (!v13) {
            goto LABEL_11;
          }
        }
        goto LABEL_12;
      }
LABEL_11:
      double v13 = lpp_transaction_start((uint64_t)v11, __str, 6);
      if (v13)
      {
LABEL_12:
        *((unsigned char *)v13 + 25) = 1;
        goto LABEL_14;
      }
    }
    ms_report_exception(2, 16425, 325, "lpp_handle_aid_req");
    goto LABEL_22;
  }
  double v13 = __str;
  _LPP_TRANSACTION::_LPP_TRANSACTION((_LPP_TRANSACTION *)__str);
  memset_s(__str, 0x1E8uLL, 0, 0x1E8uLL);
LABEL_14:
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v25 = 0;
  long long v26 = 0;
  *(void *)std::string __str = 0;
  int v27 = 0;
  memset_s(__str, 0x30uLL, 0, 0x30uLL);
  if (lpp_transaction_process_request_assistance_data((uint64_t)v13, (uint64_t)v30, (uint64_t)__str) != 1) {
    goto LABEL_18;
  }
  int v14 = v26;
  long long v20 = v26;
  *((unsigned char *)v26 + 16) = 0;
  *((unsigned char *)v14 + 32) = 0;
  int v15 = encode_asn1_message(0, 0, &v22, 0, &v21, v14);
  if (a3)
  {
    if (!v15)
    {
      send_lpm_supl_ad_rsp(SHIDWORD(__s), 0, &v21);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_19:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Aid Response message is not for SUPL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "lpp_handle_aid_req", 770);
    LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
  }
LABEL_23:
  if (v20)
  {
    GenericFreeSort(v20, (uint64_t)&ySDL_T_LASN_LPP_Message);
    if (v20) {
      free(v20);
    }
  }
}

void lpp_t_supl_lpp_caps_req(int a1, char a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char __src = 0;
  int v24 = 0;
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  uint64_t v19 = 0;
  LODWORD(size) = 0;
  LOBYTE(v12) = 1;
  HIDWORD(v12) = a1;
  if (*((unsigned char *)GetStaticLppPrivate() + 16))
  {
    char v4 = lpp_session_detect((unsigned __int8 *)&v12);
    if (v4)
    {
      char v5 = (_LPP_SESSION *)v4;
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v13 = 0;
      int v16 = 0;
    }
    else
    {
      char v5 = lpp_session_create(&v12, a2);
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v13 = 0;
      int v16 = 0;
      if (!v5) {
        goto LABEL_16;
      }
    }
    int v6 = *((unsigned __int8 *)v5 + 24);
    v11[0] = 1;
    v11[1] = v6;
    unsigned __int8 v7 = (_LPP_TRANSACTION *)**((void **)v5 + 5);
    if (v7)
    {
      while (*((_DWORD *)v7 + 4) != 1 || *((_DWORD *)v7 + 5) != v6)
      {
        unsigned __int8 v7 = *(_LPP_TRANSACTION **)v7;
        if (!v7) {
          goto LABEL_12;
        }
      }
      goto LABEL_13;
    }
LABEL_12:
    unsigned __int8 v7 = lpp_transaction_start((uint64_t)v5, v11, 5);
    if (v7)
    {
LABEL_13:
      *((unsigned char *)v7 + 25) = 1;
      if (lpp_transaction_process_provide_capabilities((uint64_t)v7, (uint64_t)&v13) == 1)
      {
        uint64_t v8 = (int *)v15;
        unsigned int v21 = v15;
        *((unsigned char *)v15 + 16) = 0;
        *((unsigned char *)v8 + 32) = 0;
        LODWORD(size) = 0;
        if (encode_asn1_message(0, 0, (uint64_t *)&__src, 0, &size, v8))
        {
          ms_report_exception(2, 16422, 418, "lpp_t_supl_lpp_caps_req");
          int v9 = 1;
          long long v10 = __src;
        }
        else
        {
          *((unsigned char *)v5 + 84) = 1;
          long long v10 = gnssOsa_Calloc("posp_alloc", 18, 1, size);
          memcpy_s("lpp_t_supl_lpp_caps_req", 428, v10, size, __src, size);
          int v9 = 0;
          char __src = v10;
        }
      }
      else
      {
        long long v10 = 0;
        LODWORD(size) = 0;
        char __src = 0;
        int v9 = 1;
        uint64_t v8 = (int *)v15;
      }
      send_supl_caps_rsp(SHIDWORD(v12), v9, size, v10);
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v8 = 0;
LABEL_20:
    GenericFreeSort(v8, (uint64_t)&ySDL_T_LASN_LPP_Message);
    if (v15) {
      free(v15);
    }
    return;
  }

  send_supl_caps_rsp(a1, 1, 0, 0);
}

void lpp_t_supl_session_end_ind(int a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v2[0] = 1;
  int v3 = a1;
  long double v1 = lpp_session_detect(v2);
  if (v1)
  {
    lpp_session_delete((uint64_t)v1);
  }
}

void lpp_t_lpi_pos_aid_req(long long *a1, char a2, uint64_t a3, int a4)
{
  char v4 = BYTE4(a3);
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v5 = a1[1];
  long long v12 = *a1;
  long long v13 = v5;
  *(_OWORD *)uint64_t v14 = a1[2];
  *(_OWORD *)&v14[11] = *(long long *)((char *)a1 + 43);
  char v15 = a2;
  if (a3 == 2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aid Mask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "lpp_t_lpi_pos_aid_req", WORD6(v12));
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
    }
    v11[0] = 0;
    __str[0] = v4;
    int v10 = a4;
    lpp_transaction_pos_aid_req(v11, (unsigned __int8 *)__str);
  }
  else
  {
    ms_report_exception(2, 16420, 486, "lpp_t_lpi_pos_aid_req");
  }
}

void lpp_t_pos_loc_cnf(long long *a1, uint64_t a2, int a3, char a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v7 = a1[5];
  long long v33 = a1[4];
  v34[0] = v7;
  *(_OWORD *)((char *)v34 + 14) = *(long long *)((char *)a1 + 94);
  long long v8 = a1[1];
  long long v29 = *a1;
  long long v30 = v8;
  long long v9 = a1[3];
  long long v31 = a1[2];
  long long v32 = v9;
  char v10 = *((unsigned char *)a1 + 110);
  T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v12);
  char v15 = 0;
  T_GPS_MEAS_s::T_GPS_MEAS_s((T_GPS_MEAS_s *)v16);
  v12[3] = v32;
  void v12[4] = v33;
  *(_OWORD *)long long v13 = v34[0];
  *(_OWORD *)&v13[14] = *(_OWORD *)((char *)v34 + 14);
  v12[0] = v29;
  v12[1] = v30;
  v16[44] = 2;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = -1;
  unint64_t v20 = 0xFFFF7FFFFFFFFFFFLL;
  uint64_t v21 = -1;
  char v22 = 0;
  __int16 v23 = 0;
  int v24 = 0;
  char v25 = 0;
  int v27 = 2;
  v11[0] = 1;
  v12[2] = v31;
  char v14 = v10;
  char v28 = a4;
  char v26 = v10;
  lpm_t_handle_loc_info_rsp((uint64_t)v11, a2, a3);
}

void lpm_t_handle_loc_info_rsp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __s[0] = -1;
  int v16 = -1;
  memset_s(__s, 8uLL, 0, 8uLL);
  if ((a2 & 0xFFFFFFFFFFLL) == 0x100000002)
  {
    __s[0] = BYTE4(a2);
    int v16 = a3;
  }
  else
  {
    ms_report_exception(2, 16420, 552, "lpm_t_handle_loc_info_rsp");
  }
  v17[0] = 0;
  unsigned __int8 v18 = -1;
  T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v19);
  LOBYTE(v21[0]) = 0;
  T_GPS_MEAS_s::T_GPS_MEAS_s((T_GPS_MEAS_s *)((char *)v21 + 8));
  LOWORD(v22) = 2;
  BYTE2(v22) = 0;
  *((void *)&v22 + 1) = 0;
  *(void *)&long long v23 = -1;
  *((void *)&v23 + 1) = 0xFFFF7FFFFFFFFFFFLL;
  *(void *)&long long v24 = -1;
  BYTE8(v24) = 0;
  WORD6(v24) = 0;
  LODWORD(v25) = 0;
  BYTE4(v25) = 0;
  char v26 = 0;
  int v27 = 2;
  char v28 = 0;
  memset_s(v17, 0x128uLL, 0, 0x128uLL);
  v17[0] = 1;
  unsigned __int8 v18 = *(unsigned char *)a1;
  char v26 = *(unsigned char *)(a1 + 272);
  if (v18 > 1u)
  {
    if (v18 == 2)
    {
      ms_report_exception(2, 16437, 569, "lpm_t_handle_loc_info_rsp");
LABEL_13:
      long long v10 = *(_OWORD *)(a1 + 56);
      long long v11 = *(_OWORD *)(a1 + 88);
      void v19[4] = *(_OWORD *)(a1 + 72);
      v20[0] = v11;
      *(_OWORD *)((char *)v20 + 15) = *(_OWORD *)(a1 + 103);
      long long v12 = *(_OWORD *)(a1 + 24);
      v19[0] = *(_OWORD *)(a1 + 8);
      v19[1] = v12;
      void v19[2] = *(_OWORD *)(a1 + 40);
      v19[3] = v10;
      char v28 = *(unsigned char *)(a1 + 280);
      goto LABEL_14;
    }
    if (v18 == 255)
    {
      ms_report_exception(2, 16438, 580, "lpm_t_handle_loc_info_rsp");
      return;
    }
  }
  else
  {
    if (v18)
    {
      if (v18 != 1) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    long long v6 = *(_OWORD *)(a1 + 232);
    long long v22 = *(_OWORD *)(a1 + 216);
    long long v23 = v6;
    long long v24 = *(_OWORD *)(a1 + 248);
    uint64_t v25 = *(void *)(a1 + 264);
    long long v7 = *(_OWORD *)(a1 + 168);
    v21[2] = *(_OWORD *)(a1 + 152);
    _OWORD v21[3] = v7;
    long long v8 = *(_OWORD *)(a1 + 200);
    void v21[4] = *(_OWORD *)(a1 + 184);
    v21[5] = v8;
    long long v9 = *(_OWORD *)(a1 + 136);
    v21[0] = *(_OWORD *)(a1 + 120);
    v21[1] = v9;
  }
LABEL_14:
  long long v13 = 0;
  char v14 = 0;
  memset_s(&v13, 0x10uLL, 0, 0x10uLL);
  long long v13 = __s;
  char v14 = v17;
  lpp_control_loc_info_rsp((uint64_t)&v13);
}

void lpp_t_pos_meas_cnf(long long *a1, long long *a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)&v20);
  char v21 = 0;
  T_GPS_MEAS_s::T_GPS_MEAS_s((T_GPS_MEAS_s *)v22);
  LOWORD(v23) = 2;
  BYTE2(v23) = 0;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = 0xFFFF7FFFFFFFFFFFLL;
  *(void *)uint64_t v25 = -1;
  v25[8] = 0;
  *(_WORD *)&v25[12] = 0;
  *(_DWORD *)&v25[16] = 0;
  v25[20] = 0;
  char v28 = 0;
  int v27 = a6;
  v19[0] = 0;
  char v26 = 0;
  if (a6)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Measurement result status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "lpp_t_pos_meas_cnf", 770, v27);
      LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
    }
  }
  else
  {
    if (a3)
    {
      v21 |= 1u;
      *(void *)(v12 + 80) = *((void *)a1 + 10);
      long long v15 = a1[4];
      long long v16 = a1[2];
      *(_OWORD *)(v12 + 48) = a1[3];
      *(_OWORD *)(v12 + 64) = v15;
      long long v17 = *a1;
      *(_OWORD *)(v12 + 16) = a1[1];
      *(_OWORD *)(v12 + 32) = v16;
      *(_OWORD *)uint64_t v12 = v17;
      v22[20] = 0;
      v22[44] = 0;
    }
    if ((a3 & 2) != 0)
    {
      v21 |= 2u;
      long long v18 = a2[1];
      long long v23 = *a2;
      long long v24 = v18;
      *(_OWORD *)uint64_t v25 = a2[2];
      *(void *)&v25[13] = *(void *)((char *)a2 + 45);
    }
  }
  lpm_t_handle_loc_info_rsp((uint64_t)v19, a4, a5);
}

unsigned char *lpp_t_mm_lpm_status_ind(char a1, int a2, unint64_t a3)
{
  __int16 v3 = a3;
  unint64_t v5 = a3 >> 16;
  unint64_t v6 = HIDWORD(a3);
  *((unsigned char *)GetStaticLppPrivate() + 16) = a1;
  *((_DWORD *)GetStaticLppPrivate() + 6) = a2;
  *((_WORD *)GetStaticLppPrivate() + 9) = v3;
  *((_WORD *)GetStaticLppPrivate() + 10) = v5;
  uint64_t result = GetStaticLppPrivate();
  result[22] = v6;
  return result;
}

void lpp_t_supl_ad_req(int a1, char a2, long long *a3, int a4)
{
  if (*((unsigned char *)GetStaticLppPrivate() + 16) == 1 && (a3 || a4 != 0xFFFF))
  {
    lpp_handle_aid_req(a1, a2, 1, a3);
    if (a3)
    {
LABEL_5:
      JUMPOUT(0x230F4E5D0);
    }
  }
  else
  {
    send_lpm_supl_ad_rsp(a1, 1, 0);
    if (a3) {
      goto LABEL_5;
    }
  }
}

void T_GPS_MEAS_s::T_GPS_MEAS_s(T_GPS_MEAS_s *this)
{
  *(void *)this = 0xFFFFLL;
  *((_WORD *)this + 4) = 255;
  *((unsigned char *)this + 44) = 0;
  *(void *)((char *)this + 12) = 0;
  *((unsigned char *)this + 20) = 0;
  *((_WORD *)this + 36) = 255;
  *((void *)this + 10) = 0;
  memset_s((char *)this + 24, 0x14uLL, 0, 0x14uLL);
  memset_s((char *)this + 48, 0x18uLL, 0, 0x18uLL);
}

uint64_t asn1PE_Ver(uint64_t a1, void *a2)
{
  uint64_t v3 = Asn1Coder::EncodeBitString(a1, 0, 0, 0x40u, a2, 1);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_Ver(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PE_StatusCode(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = *a2 - 20;
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, v4 < 5);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_8:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = *a2;
  if (v4 > 4) {
    uint64_t v8 = Asn1Coder::EncodeInteger(a1, 0, 19, v9);
  }
  else {
    uint64_t v8 = Asn1Coder::EncodeChoiceExtension(a1, (v9 - 20));
  }
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_8;
  }
  return v5;
}

uint64_t asn1PD_StatusCode(uint64_t a1, unsigned char *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
LABEL_8:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  char v11 = 0;
  if (BitFromBuffer)
  {
    uint64_t v5 = Asn1Coder::DecodeEnumerationExtension(a1, &v11);
    char v9 = v11 + 20;
  }
  else
  {
    uint64_t v5 = Asn1Coder::DecodeInteger(a1, 0, 0x13u, &v11);
    char v9 = v11;
  }
  *a2 = v9;
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = v5;
    goto LABEL_8;
  }
  return v5;
}

uint64_t Hal01_01HandleInitReq(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_INIT_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal01_01HandleInitReq");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  int v28 = 3;
  if (a1)
  {
    g_IsFSMDeInit = 0;
    int v4 = *(_DWORD *)(a1 + 24);
    g_HwProduct = v4;
    g_IsProdMode = *(unsigned char *)(a1 + 28);
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal01_01HandleInitReq", 1291);
      LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
    }
    int v7 = (char *)gnssOsa_Calloc("Hal01_01HandleInitReq", 148, 1, 0xB8uLL);
    if (v7)
    {
      unsigned int v8 = v7;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssHw,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal01_01HandleInitReq", v4);
        LbsOsaTrace_WriteLog(0xDu, __str, v10, 4, 1);
      }
      if (Hal22_InitializeConn()) {
        goto LABEL_41;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 73, "Hal01_01HandleInitReq", 1313);
        LbsOsaTrace_WriteLog(0xDu, __str, v12, 4, 1);
      }
      if ((v4 - 1) >= 3)
      {
        if (v4 != 4 && v4) {
          goto LABEL_28;
        }
        if (Hal01_GetRevisionInfo(v8, *(void (**)(uint64_t, char *))(a1 + 16), 0))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "HAL", 73, "Hal01_01HandleInitReq", 1285);
            LbsOsaTrace_WriteLog(0xDu, __str, v18, 4, 1);
          }
          Hal08_InitPatchesCode();
          if (Hal24_PatchDnldBright(&v28))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v19 = mach_continuous_time();
              unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "HAL", 69, "Hal01_01HandleInitReq", 1293);
              LbsOsaTrace_WriteLog(0xDu, __str, v20, 0, 1);
            }
            *(_DWORD *)unsigned int v8 = 1;
            *((_DWORD *)v8 + 1) = v28;
            goto LABEL_40;
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (Hal34_InitPciGnssDevice(&v28))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v13 = mach_continuous_time();
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 69, "Hal01_01HandleInitReq", 1293);
            LbsOsaTrace_WriteLog(0xDu, __str, v14, 0, 1);
          }
          *(_DWORD *)unsigned int v8 = 1;
          *((_DWORD *)v8 + 1) = v28;
          (*(void (**)(uint64_t, char *))(a1 + 16))(3, v8);
LABEL_28:
          if (*(_DWORD *)v8 != 2) {
            goto LABEL_40;
          }
LABEL_34:
          if (Hal01_GetRevisionInfo(v8, *(void (**)(uint64_t, char *))(a1 + 16), 1))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v23 = mach_continuous_time();
              size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AfterInit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "HAL", 73, "Hal01_01HandleInitReq", 1285);
              int v25 = 4;
LABEL_39:
              LbsOsaTrace_WriteLog(0xDu, __str, v24, v25, 1);
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AfterInit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "HAL", 69, "Hal01_01HandleInitReq", 1286);
            int v25 = 0;
            goto LABEL_39;
          }
LABEL_40:
          (*(void (**)(uint64_t, char *))(a1 + 16))(3, v8);
          goto LABEL_41;
        }
        if (Hal01_GetRevisionInfo(v8, *(void (**)(uint64_t, char *))(a1 + 16), 0))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v21 = mach_continuous_time();
            unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 73, "Hal01_01HandleInitReq", 1285);
            LbsOsaTrace_WriteLog(0xDu, __str, v22, 4, 1);
          }
LABEL_33:
          *(_DWORD *)unsigned int v8 = 2;
          *((_DWORD *)v8 + 1) = v28;
          goto LABEL_34;
        }
      }
LABEL_41:
      free(v8);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 69, "Hal01_01HandleInitReq", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v16, 0, 1);
  }
  return 0;
}

uint64_t Hal01_03WriteDataToChip(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_WRITE_DATA_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 68, "Hal01_03WriteDataToChip");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 5, 1);
  }
  if (g_IsFSMDeInit == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeInitState\n");
LABEL_12:
      LbsOsaTrace_WriteLog(0xDu, __str, v4, 0, 1);
    }
  }
  else if (a1)
  {
    Hal22_ZxSendToChip(*(unsigned __int8 **)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5) {
      free(v5);
    }
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_12;
  }
  return 0;
}

uint64_t Hal01_02HandleDeInitReq(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_DEINIT_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal01_02HandleDeInitReq");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal01_02HandleDeInitReq");
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 4, 1);
  }
  if (a1)
  {
    g_IsFSMDeInit = 1;
    unsigned __int16 v6 = gnssOsa_Calloc("Hal01_02HandleDeInitReq", 245, 1, 0xB8uLL);
    if (v6)
    {
      int v7 = v6;
      *unsigned __int16 v6 = 6;
      Hal22_DeInitializeConn();
      uint64_t v8 = *(void (**)(uint64_t, void *))(a1 + 16);
      if (v8) {
        v8(4, v7);
      }
      free(v7);
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal01_02HandleDeInitReq");
        int v11 = 4;
LABEL_13:
        LbsOsaTrace_WriteLog(0xDu, __str, v10, v11, 1);
      }
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal01_02HandleDeInitReq", 517);
    int v11 = 0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t Hal01_HandleGnssBBResetReq(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:E_HAL_GNSSBASEBAND_RESET_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal01_HandleGnssBBResetReq");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  int v21 = 0;
  if (Hal22_GetHwRevisionAfterInit(&v21))
  {
    int v4 = v21;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
    if (v4 == 16)
    {
      if (!IsLoggingAllowed) {
        goto LABEL_13;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Cpcpu noComms\n");
    }
    else
    {
      if (!IsLoggingAllowed) {
        goto LABEL_13;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEcpu noComms\n");
    }
    size_t v8 = v6;
    int v9 = 2;
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_13;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Awake CP/ME cpu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 73, "Hal01_PingCpus");
    int v9 = 4;
  }
  LbsOsaTrace_WriteLog(0xDu, __str, v8, v9, 1);
LABEL_13:
  if (a1)
  {
    if ((g_HwProduct - 1) >= 3)
    {
      if (g_HwProduct == 4 || !g_HwProduct)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Triggering GnssBB reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 73, "Hal01_HandleGnssBBResetReq");
          LbsOsaTrace_WriteLog(0xDu, __str, v15, 4, 1);
        }
        if (!Hal17_SoftReset(80, 115)) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Triggering ME Soft Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 73, "Hal01_HandleGnssBBResetReq");
        LbsOsaTrace_WriteLog(0xDu, __str, v11, 4, 1);
      }
      if (!Hal29_ReqGnssSoftReset())
      {
LABEL_29:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 73, "Hal01_HandleGnssBBResetReq", 1304);
          LbsOsaTrace_WriteLog(0xDu, __str, v19, 4, 1);
        }
        (*(void (**)(uint64_t))(a1 + 16))(7);
        return 0;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 69, "Hal01_HandleGnssBBResetReq", 1305);
      LbsOsaTrace_WriteLog(0xDu, __str, v17, 0, 1);
    }
    (*(void (**)(uint64_t))(a1 + 16))(8);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal01_HandleGnssBBResetReq", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v13, 0, 1);
  }
  return 0;
}

uint64_t HAL01_09HandleLPEvent(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_LOW_POWER_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 68, "HAL01_09HandleLPEvent");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 68, "HAL01_09HandleLPEvent");
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 5, 1);
  }
  if (g_IsFSMDeInit == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeInitState\n");
LABEL_13:
      size_t v8 = v6;
      int v9 = 0;
      goto LABEL_14;
    }
  }
  else if (a1)
  {
    Hal26_SendLPResponse(*(unsigned __int8 *)(a1 + 12));
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 68, "HAL01_09HandleLPEvent");
      int v9 = 5;
LABEL_14:
      LbsOsaTrace_WriteLog(0xDu, __str, v8, v9, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_13;
  }
  return 0;
}

uint64_t HAL01_09HandleLPAllowReq(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_LOW_POWER_ALLOW_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "HAL01_09HandleLPAllowReq");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx config UartLP NA \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "HAL01_09HandleLPAllowReq", 264);
      LbsOsaTrace_WriteLog(0xDu, __str, v5, 4, 1);
    }
    if (off_26AE6D3C8) {
      off_26AE6D3C8(0);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "HAL01_09HandleLPAllowReq", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Hal01_HandleSetPowerReport(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_SET_POWER_RPT_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal01_HandleSetPowerReport");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  __s[0] = 0;
  memset_s(__s, 0xB8uLL, 0, 0xB8uLL);
  __s[0] = 0;
  if (a1)
  {
    __s[0] = *(unsigned char *)(a1 + 12);
    if (Hal32_SetPowerReport(__s[0]))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (*(unsigned char *)(a1 + 12)) {
          unsigned __int16 v5 = "En";
        }
        else {
          unsigned __int16 v5 = "Dis";
        }
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Failed,%s\n", (unint64_t)v4, "HAL", 69, "Hal01_HandleSetPowerReport", 257, v5);
        int v7 = 0;
LABEL_17:
        LbsOsaTrace_WriteLog(0xDu, __str, v6, v7, 1);
      }
    }
    else
    {
      __s[0] |= 2u;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (*(unsigned char *)(a1 + 12)) {
          unsigned __int16 v11 = "En";
        }
        else {
          unsigned __int16 v11 = "Dis";
        }
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success,%s\n", (unint64_t)v10, "HAL", 73, "Hal01_HandleSetPowerReport", v11);
        int v7 = 4;
        goto LABEL_17;
      }
    }
    (*(void (**)(uint64_t, unsigned char *))(a1 + 16))(5, __s);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal01_HandleSetPowerReport", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
  }
  return 0;
}

uint64_t Hal01_HandleTMPulseTrig(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:HAL_TRIG_TIMEMARK_PULSE_MSG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal01_HandleTMPulseTrig");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_10:
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
    return 0;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMarkPulseCb\n");
    goto LABEL_10;
  }
  *(_DWORD *)std::string __str = 0;
  uint64_t v4 = Hal25_TriggerTimeMarkStrobe((unsigned int *)__str);
  (*(void (**)(void, uint64_t))(a1 + 16))(*(unsigned int *)__str, v4);
  return 0;
}

uint64_t Hal01_HandleSetCfgReq(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 16);
    g_PltHWSettings = *(unsigned char *)(a1 + 12);
    dword_26AE6CB5C = v1;
    memmove(&unk_26AE6CB60, (const void *)(a1 + 20), 0xF4uLL);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "Hal01_HandleSetCfgReq", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
  }
  return 0;
}

uint64_t Hal01_HandleStackDumpReq(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    HAL34_StackDumpReq(*(unsigned __int8 *)(a1 + 12));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 69, "Hal01_HandleStackDumpReq", 517);
    LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  return 0;
}

BOOL Hal01_GetRevisionInfo(char *a1, void (*a2)(uint64_t, char *), int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v24 = 1;
  uint64_t v6 = (char *)gnssOsa_Calloc("Hal01_GetRevisionInfo", 73, 1, 0xB8uLL);
  if (!v6) {
    return 0;
  }
  int v7 = v6;
  if (a3)
  {
    int HwRevisionAfterInit = Hal22_GetHwRevisionAfterInit(&v24);
    uint64_t v9 = 2;
  }
  else
  {
    int HwRevisionAfterInit = Hal22_GetHwRevision(&v24);
    uint64_t v9 = 1;
  }
  BOOL v10 = HwRevisionAfterInit == 0;
  if (HwRevisionAfterInit)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "HAL", 69, "Hal01_GetRevisionInfo", 1286);
      LbsOsaTrace_WriteLog(0xDu, __str, v12, 0, 1);
    }
    int v13 = v24;
    *(_DWORD *)a1 = 3;
    *((_DWORD *)a1 + 1) = v13;
    uint64_t v9 = 3;
    uint64_t v14 = a1;
  }
  else
  {
    *(_DWORD *)int v7 = 4;
    *((_DWORD *)v7 + 1) = dword_26AE023BC;
    *(_OWORD *)(v7 + 8) = xmmword_26AE023AC;
    long long v15 = *(_OWORD *)algn_26AE023C4;
    *((_DWORD *)v7 + 10) = dword_26AE023D4;
    *(_OWORD *)(v7 + 24) = v15;
    long long v16 = unk_26AE02414;
    *((_DWORD *)v7 + 30) = dword_26AE02424;
    *(_OWORD *)(v7 + 104) = v16;
    long long v17 = *(_OWORD *)&qword_26AE023D8;
    *((_DWORD *)v7 + 15) = dword_26AE023E8;
    *(_OWORD *)(v7 + 44) = v17;
    long long v18 = unk_26AE02428;
    *((_DWORD *)v7 + 35) = dword_26AE02438;
    *(_OWORD *)(v7 + 124) = v18;
    uint64_t v19 = qword_26AE0243C;
    *((_WORD *)v7 + 76) = word_26AE02444;
    *((void *)v7 + 18) = v19;
    uint64_t v20 = qword_26AE023EC;
    *((_WORD *)v7 + 36) = word_26AE023F4;
    *((void *)v7 + 8) = v20;
    uint64_t v21 = qword_26AE02400;
    *((_WORD *)v7 + 46) = word_26AE02408;
    *(void *)(v7 + 84) = v21;
    uint64_t v22 = unk_26AE02450;
    *((_WORD *)v7 + 86) = word_26AE02458;
    *(void *)(v7 + 164) = v22;
    uint64_t v14 = v7;
  }
  a2(v9, v14);
  free(v7);
  return v10;
}

void Geo2ECEF(uint64_t a1, uint64_t a2, double *a3)
{
  _OWORD v21[3] = *(double *)MEMORY[0x263EF8340];
  double v6 = *(double *)(a1 + 16);
  __double2 v7 = __sincos_stret(*(double *)a1);
  double v8 = *(double *)(a2 + 8) / sqrt(-(*(double *)(a2 + 24) * v7.__sinval) * v7.__sinval + 1.0);
  double v9 = v7.__cosval * (v6 + v8);
  double v10 = cos(*(long double *)(a1 + 8)) * v9;
  *a3 = v10;
  double v11 = sin(*(long double *)(a1 + 8)) * v9;
  a3[1] = v11;
  double v12 = v7.__sinval * (v6 + v8 * *(double *)(a2 + 40));
  a3[2] = v12;
  if (*(_WORD *)a2)
  {
    double v13 = v10 - *(double *)(a2 + 48);
    *a3 = v13;
    double v14 = v11 - *(double *)(a2 + 56);
    a3[1] = v14;
    double v15 = v12 - *(double *)(a2 + 64);
    a3[2] = v15;
    if (*(unsigned char *)(a2 + 2))
    {
      uint64_t v16 = 0;
      long long v17 = (double *)(a2 + 88);
      do
      {
        double v18 = v14 * *(v17 - 1) + *(v17 - 2) * v13;
        double v19 = *v17;
        v17 += 3;
        v21[v16++] = v18 + v19 * v15;
      }
      while (v16 != 3);
      double v20 = v14 - v21[1];
      *a3 = v13 - v21[0];
      a3[1] = v20;
      a3[2] = v15 - v21[2];
    }
  }
}

void GncS04_07SndDbgNmea(char *a1, size_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = gnssOsa_Calloc("GncS04_07SndDbgNmea", 207, 1, 0x18uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    double v6 = gnssOsa_Calloc("GncS04_07SndDbgNmea", 216, (unsigned __int16)(a2 + 1), 1uLL);
    v5[2] = v6;
    if (v6)
    {
      memcpy_s("GncS04_07SndDbgNmea", 223, v6, (unsigned __int16)(a2 + 1), a1, a2);
      *((_WORD *)v5 + 6) = a2;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NMEA_DATA_IND =>GNM Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncS04_07SndDbgNmea", *((unsigned __int16 *)v5 + 6));
        LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
      }
      AgpsSendFsmMsg(130, 128, 8521475, v5);
    }
    else
    {
      free(v5);
    }
  }
}

void GncS04_08SndStartPosNmea(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  __int16 v2 = g_GncSConfig;
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
  if ((IsLoggingAllowed & 1) != 0 || (v2 & 0x200) != 0)
  {
    bzero(__str, 0x400uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x400uLL, "$PDPSS,%u,%u,%u,%u,%d,%u,%u,%u,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), *(unsigned __int16 *)(a1 + 2), *(unsigned __int8 *)(a1 + 4), *(unsigned __int8 *)(a1 + 49), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(unsigned __int16 *)(a1 + 34), *(unsigned __int16 *)(a1 + 36), *(unsigned __int8 *)(a1 + 32));
    if (HswUtil_AddNmeaCS(__str, 0x400u, &v7))
    {
      if (IsLoggingAllowed) {
        LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)__str, v7);
      }
      if ((v2 & 0x200) != 0) {
        GncS04_07SndDbgNmea(__str, v7);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(v8, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(v8, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncS04_08SndStartPosNmea", 772, v7);
      LbsOsaTrace_WriteLog(8u, v8, v6, 0, 1);
    }
  }
}

void GncS04_20SendUpdateToGncpe(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BYTE8(v4) = 0;
  *(void *)&long long v4 = 0;
  BYTE12(v4) = 1;
  HIWORD(v4) = *(_WORD *)(a1 + 2);
  char v5 = *(unsigned char *)(a1 + 32) & 0xF;
  int v6 = *(_DWORD *)(a1 + 8);
  char v15 = *(unsigned char *)(a1 + 50);
  int v1 = *(unsigned __int8 *)(a1 + 4);
  if (*(unsigned char *)(a1 + 4)) {
    int v1 = *(_DWORD *)(a1 + 28);
  }
  int v2 = *(_DWORD *)(a1 + 12);
  int v7 = v1;
  int v8 = v2;
  int v3 = *(_DWORD *)(a1 + 34);
  int v9 = *(_DWORD *)(a1 + 24);
  int v10 = v3;
  __int16 v11 = 0;
  char v12 = *(unsigned char *)(a1 + 33);
  __int16 v13 = 1;
  char v14 = *(unsigned char *)(a1 + 49);
  GncS03_07PosEventUpdate(&v4);
}

uint64_t GncS04_29GetRespUpdtStat(uint64_t a1, int a2, unsigned char *a3, BOOL *a4, unsigned char *a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a5)
  {
    uint64_t v17 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_18;
  }
  int v6 = a4;
  if (*(unsigned __int8 *)(a1 + 4) - 1 >= 2)
  {
    if (!*(unsigned char *)(a1 + 4))
    {
      BOOL v19 = *(_DWORD *)(a1 + 20) == 1;
      if (*(_DWORD *)(a1 + 16))
      {
        int v20 = *(_DWORD *)(a1 + 8);
        int v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v20;
        if (HIWORD(g_GncSConfig) + v21 + 30 > *(_DWORD *)(a1 + 16))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PeriodicSessStopTm,%u,TimeElapsed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 73, "GncS04_29GetRespUpdtStat", *(_DWORD *)(a1 + 16), v21);
            BOOL v19 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v23, 4, 1);
          }
          else
          {
            BOOL v19 = 1;
          }
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v31 = mach_continuous_time();
        uint64_t v17 = 1;
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Periodc ID,%u,Qual,%hhu,IsFinal,%u,SndUpdt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 73, "GncS04_29GetRespUpdtStat", *(unsigned __int16 *)(a1 + 2), a2, v19, 1);
        LbsOsaTrace_WriteLog(8u, __str, v32, 4, 1);
        BOOL v24 = 0;
        char v27 = 0;
      }
      else
      {
        BOOL v24 = 0;
        char v27 = 0;
        uint64_t v17 = 1;
      }
      goto LABEL_33;
    }
    uint64_t v17 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return v17;
    }
    bzero(__str, 0x410uLL);
    unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%hhu\n", v33);
LABEL_18:
    LbsOsaTrace_WriteLog(8u, __str, v18, 2, 1);
    return 0;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v10;
  if (a2 == 1 && !*(unsigned char *)(a1 + 48))
  {
    BOOL v24 = 0;
  }
  else
  {
    int v12 = v11 + 30;
    if ((v11 + 30) < *(_DWORD *)(a1 + 28))
    {
      int LatestUpdtOsTime = GncP_GetLatestUpdtOsTime();
      if (LatestUpdtOsTime)
      {
        int v14 = LatestUpdtOsTime;
        uint64_t v15 = mach_continuous_time();
        int v16 = HIWORD(g_GncSConfig);
        if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15) - v14 <= HIWORD(g_GncSConfig))
        {
          int v11 = v14 - *(_DWORD *)(a1 + 8);
          int v12 = v11 + 30;
        }
      }
      else
      {
        int v16 = HIWORD(g_GncSConfig);
      }
      BOOL v24 = (v12 + v16) > *(_DWORD *)(a1 + 28);
      unsigned int v25 = v24;
      goto LABEL_24;
    }
    BOOL v24 = 1;
  }
  unsigned int v25 = 1;
LABEL_24:
  int v26 = *(unsigned __int8 *)(a1 + 4);
  if (v26 == 1) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v25;
  }
  char v27 = v25 ^ 1;
  if (v26 == 1) {
    uint64_t v17 = v25;
  }
  else {
    uint64_t v17 = 1;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v28 = mach_continuous_time();
    unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SS ID,%u,Qual,%hhu,IsFinal,%u,SndUpdt,%u,TimeElapsed,%u,RespTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 73, "GncS04_29GetRespUpdtStat", *(unsigned __int16 *)(a1 + 2), a2, v19, v17, v11, *(_DWORD *)(a1 + 28));
    LbsOsaTrace_WriteLog(8u, __str, v29, 4, 1);
  }
  int v6 = a4;
LABEL_33:
  *a5 = v19;
  if (a3) {
    *a3 = v27;
  }
  if (v6) {
    *int v6 = v24;
  }
  return v17;
}

void GncS04_33SessStopAckTimrExpiry(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (byte_26AE02474)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NoResp from GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncS04_33SessStopAckTimrExpiry");
      LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
    }
    byte_26AE02474 = 0;
    GncS04_31ChkSendPendingStopAck(0);
  }
}

size_t GncS04_31ChkSendPendingStopAck(size_t result)
{
  int v1 = result;
  uint64_t v2 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  char v3 = 1;
  do
  {
    char v4 = v3;
    if (g_GncSFGClientData[52 * v2 + 330916] == 3)
    {
      GncS04_21SendStopPosResp(v1, *(unsigned __int16 *)&g_GncSFGClientData[52 * v2 + 330918]);
      uint64_t result = GncS04_05DeRegClient(v2);
    }
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  if (byte_26AE02474)
  {
    uint64_t result = AgpsFsmStopTimer(8523270);
    if (result)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncS04_31ChkSendPendingStopAck", 1545);
        uint64_t result = LbsOsaTrace_WriteLog(8u, __str, v6, 2, 1);
      }
    }
    byte_26AE02474 = 0;
  }
  return result;
}

void GncS04_36SessStartAckTimrExp(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (byte_26AE0246C)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NoResp from GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncS04_36SessStartAckTimrExp");
      LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
    }
    byte_26AE0246C = 0;
    GncS04_35ChkSendPendingStartAck(0);
  }
}

void GncS04_35ChkSendPendingStartAck(int a1)
{
  uint64_t v2 = 0;
  *(void *)((char *)&v13[125] + 4) = *MEMORY[0x263EF8340];
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = &g_GncSFGClientData[52 * v2 + 330916];
    if (*v5 == 2)
    {
      unsigned __int16 v6 = &g_GncSFGClientData[52 * v2 + 330918];
      GncS04_22SendStartPosResp(a1, *(unsigned __int16 *)v6);
      if (a1 == 255)
      {
        *uint64_t v5 = 1;
      }
      else
      {
        __int16 v7 = *(_WORD *)v6;
        char __str[8] = 0;
        *(void *)std::string __str = 0;
        uint64_t v12 = 0;
        v13[0] = 0;
        uint64_t v11 = 0;
        *(_DWORD *)((char *)v13 + 7) = 0;
        __str[12] = 1;
        *(_WORD *)&__str[14] = v7;
        char __str[16] = 0;
        GncS03_07PosEventUpdate((long long *)__str);
        GncS04_05DeRegClient(v2);
      }
    }
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  if (byte_26AE0246C)
  {
    if (AgpsFsmStopTimer(8523014))
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncS04_35ChkSendPendingStartAck", 1545);
        LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
      }
    }
    byte_26AE0246C = 0;
  }
}

void GncS04_41SendNavData(__int16 a1, char a2, char a3, _DWORD *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v8 = gnssOsa_Calloc("GncS04_41SendNavData", 1339, 1, 0x20uLL);
  if (v8)
  {
    unsigned __int16 v9 = v8;
    int v10 = gnssOsa_Calloc("GncS04_41SendNavData", 1345, 1, 0x1738uLL);
    v9[3] = v10;
    if (v10)
    {
      *((_DWORD *)v9 + 3) = *a4;
      *((_WORD *)v9 + 8) = a1;
      *((unsigned char *)v9 + 18) = a2;
      *((unsigned char *)v9 + 19) = a3;
      memcpy(v10, a4 + 2, 0x1738uLL);
      __int16 v11 = g_GncSConfig;
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
      if ((IsLoggingAllowed & 1) != 0 || (v11 & 0x200) != 0)
      {
        bzero(__str, 0x400uLL);
        uint64_t v13 = v9[3];
        unsigned __int16 v18 = snprintf(__str, 0x400uLL, "$PDPPR,%u,%u,%u,%.9f,%.9f,%f,%.12f,%.12f,%u,%u,%u,%u,%u,%u", *((_DWORD *)v9 + 3), *(_DWORD *)v13, *((unsigned __int16 *)v9 + 8), *(double *)(v13 + 104), *(double *)(v13 + 112), *(double *)(v13 + 128), *(double *)(v13 + 40), *(double *)(v13 + 32), *(unsigned __int8 *)(v13 + 306), *(unsigned __int8 *)(v13 + 307), *(_DWORD *)(v13 + 296), *(unsigned __int8 *)(v13 + 304), *(unsigned __int8 *)(v13 + 289), *(_DWORD *)(v13 + 300));
        if (HswUtil_AddNmeaCS(__str, 0x400u, &v18))
        {
          if (IsLoggingAllowed) {
            LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)__str, v18);
          }
          if ((v11 & 0x200) != 0) {
            GncS04_07SndDbgNmea(__str, v18);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(v19, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncS04_40SndNavRespNmea", 772, v18);
          LbsOsaTrace_WriteLog(8u, v19, v15, 0, 1);
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(v19, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NAV_DATA_IND =>GNM ID,%u,OSTTick,%u,BBTick,%u,Valid,%u,VSF,%u,SVView,%u,SVUsed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GncS04_41SendNavData", *((unsigned __int16 *)v9 + 8), *((_DWORD *)v9 + 3), *(_DWORD *)v9[3], *((unsigned __int8 *)v9 + 19), *(unsigned __int8 *)(v9[3] + 289), *(unsigned __int8 *)(v9[3] + 306), *(unsigned __int8 *)(v9[3] + 307));
        LbsOsaTrace_WriteLog(8u, v19, v17, 4, 1);
      }
      AgpsSendFsmMsg(130, 128, 8520707, v9);
    }
    else
    {
      free(v9);
    }
  }
}

uint64_t GncS04_42GetValidNavDataCopy(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  GncP_GetNavData(a1);
  if (*(_WORD *)(a1 + 20))
  {
    if ((*(_DWORD *)a1 - a2) >= 0x3E9) {
      unsigned int v6 = a2 - *(_DWORD *)a1;
    }
    else {
      unsigned int v6 = 0;
    }
    if (v6 <= HIWORD(g_GncSConfig) + 900)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: NavData PosDataAge,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 68, "GncS04_42GetValidNavDataCopy", v6);
        uint64_t v10 = 1;
        int v13 = 5;
LABEL_14:
        LbsOsaTrace_WriteLog(8u, __str, v12, v13, 1);
        return v10;
      }
    }
    else
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (v6 > a3)
      {
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NavData NA PosDataAge,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncS04_42GetValidNavDataCopy", v6);
          LbsOsaTrace_WriteLog(8u, __str, v9, 4, 1);
        }
        return 0;
      }
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: NavData AllwdAge,%u,PosDataAge,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "GncS04_42GetValidNavDataCopy", a3, v6);
        uint64_t v10 = 1;
        int v13 = 4;
        goto LABEL_14;
      }
    }
    return 1;
  }
  return 0;
}

size_t GncS04_65PopulateMeasData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a4 + 165204) = *(unsigned char *)(a2 + 165204);
  long long v7 = *(_OWORD *)(a2 + 165208);
  long long v8 = *(_OWORD *)(a2 + 165224);
  long long v9 = *(_OWORD *)(a2 + 165240);
  *(_DWORD *)(a4 + 165256) = *(_DWORD *)(a2 + 165256);
  *(_OWORD *)(a4 + 165224) = v8;
  *(_OWORD *)(a4 + 165240) = v9;
  *(_OWORD *)(a4 + 165208) = v7;
  *(_DWORD *)(a4 + 165260) = *(_DWORD *)(a2 + 165260);
  uint64_t v10 = *(void *)(a2 + 165264);
  *(_DWORD *)(a4 + 165272) = *(_DWORD *)(a2 + 165272);
  *(void *)(a4 + 165264) = v10;
  *(_DWORD *)(a4 + 684) = *(_DWORD *)(a2 + 684);
  *(unsigned char *)(a4 + 688) = *(unsigned char *)(a2 + 688);
  *(_DWORD *)(a4 + 700) = *(_DWORD *)(a2 + 700);
  *(_WORD *)(a4 + 710) = *(_WORD *)(a2 + 710);
  *(void *)(a4 + 712) = *(void *)(a2 + 712);
  *(_DWORD *)(a4 + 692) = *(_DWORD *)(a3 + 12);
  *(_WORD *)(a4 + 696) = *(_WORD *)(a3 + 10);
  *(unsigned char *)(a4 + 698) = *(unsigned char *)(a3 + 8);
  *(unsigned char *)(a4 + 699) = *(unsigned char *)(a3 + 16);
  int v11 = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a4 + 704) = v11;
  if (*(unsigned __int8 *)(a2 + 720) >= 0x10u) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 720);
  }
  if (v12)
  {
    uint64_t v14 = 0;
    unsigned __int16 v15 = (unsigned __int8 *)(a2 + 736);
    while (1)
    {
      uint64_t v16 = a2 + 10280 * v14;
      if (*(_DWORD *)(v16 + 724) == v11)
      {
        uint64_t v17 = a2 + 10280 * v14;
        uint64_t v18 = *(unsigned __int8 *)(v17 + 728) >= 8u ? 8 : *(unsigned __int8 *)(v17 + 728);
        if (v18) {
          break;
        }
      }
LABEL_21:
      ++v14;
      v15 += 10280;
      if (v14 == v12)
      {
        LOBYTE(v14) = v12;
        goto LABEL_34;
      }
    }
    uint64_t v19 = 0;
    int v20 = (unsigned char *)(v17 + 728);
    uint64_t v21 = v15;
    while (1)
    {
      if (*(unsigned __int8 *)(a2 + 10280 * v14 + 1284 * v19 + 732) == *(unsigned __int8 *)(a3 + 24))
      {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 10280 * v14 + 1284 * v19 + 734) >= 0x40u
            ? 64
            : *(unsigned __int8 *)(a2 + 10280 * v14 + 1284 * v19 + 734);
        if (v22) {
          break;
        }
      }
LABEL_20:
      ++v19;
      v21 += 1284;
      if (v19 == v18) {
        goto LABEL_21;
      }
    }
    uint64_t v23 = 0;
    BOOL v24 = v21;
    while (*v24 != *(unsigned __int8 *)(a3 + 25))
    {
      ++v23;
      v24 += 20;
      if (v22 == v23) {
        goto LABEL_20;
      }
    }
    uint64_t v50 = (_DWORD *)(v16 + 724);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Found SVId,%u,Idx,%u,SgnlIdx,%u,GnssIdx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNC", 73, "GncS04_64PopulateGnssSvMeas", *(unsigned __int8 *)(a3 + 25), v23, v19, v14);
      LbsOsaTrace_WriteLog(8u, __str, v26, 4, 1);
    }
    *(unsigned char *)(a4 + 720) = 1;
    *(_DWORD *)(a4 + 724) = *v50;
    *(unsigned char *)(a4 + 728) = *v20;
    uint64_t v27 = a2 + 10280 * v14 + 1284 * v19;
    *(unsigned char *)(a4 + 732) = *(unsigned char *)(v27 + 732);
    *(_WORD *)(a4 + 733) = *(_WORD *)(v27 + 733);
    long long v28 = *(_OWORD *)v24;
    *(_DWORD *)(a4 + 752) = *((_DWORD *)v24 + 4);
    *(_OWORD *)(a4 + 736) = v28;
    unsigned int v29 = *(unsigned __int8 *)(v27 + 734);
    if (*(unsigned char *)(v27 + 734))
    {
      unint64_t v30 = 0;
      int v31 = 0;
      unsigned __int16 v32 = (unsigned __int8 *)(v27 + 734);
      do
      {
        if (v23)
        {
          uint64_t v33 = a4 + 20 * ++v31;
          long long v34 = *(_OWORD *)v21;
          *(_DWORD *)(v33 + 752) = *((_DWORD *)v21 + 4);
          *(_OWORD *)(v33 + 736) = v34;
          unsigned int v29 = *v32;
        }
        if (v30 > 0x3E) {
          break;
        }
        ++v30;
        v21 += 20;
        --v23;
      }
      while (v30 < v29);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v35 = mach_continuous_time();
      unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssId,%u,NumSVMeas,%u,NumSgnl,%u,NumGnss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 73, "GncS04_64PopulateGnssSvMeas", *(_DWORD *)(a4 + 724), *(unsigned __int8 *)(a4 + 734), *(unsigned __int8 *)(a4 + 728), *(unsigned __int8 *)(a4 + 720));
      LbsOsaTrace_WriteLog(8u, __str, v36, 4, 1);
    }
  }
  else
  {
    LOBYTE(v14) = 0;
  }
LABEL_34:
  unsigned int v37 = *(unsigned __int8 *)(a2 + 720);
  if (*(unsigned char *)(a2 + 720))
  {
    unsigned int v38 = *(unsigned __int8 *)(a4 + 720);
    if (v38 <= 0xF)
    {
      unint64_t v39 = 0;
      uint64_t v40 = v14;
      uint64_t v41 = (_DWORD *)(a2 + 724);
      do
      {
        if (v40 && (*v41 & *(unsigned __int8 *)(a1 + 33)) != 0)
        {
          memcpy((void *)(a4 + 10280 * v38 + 724), v41, 0x2828uLL);
          ++*(unsigned char *)(a4 + 720);
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v42 = mach_continuous_time();
            unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnssId,%u,NumSVMeas,%u,NumSgnl,%u,NumGnss,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 73, "GncS04_64PopulateGnssSvMeas", *(_DWORD *)(a4 + 10280 * v38 + 724), *(unsigned __int8 *)(a4 + 10280 * v38 + 734), *(unsigned __int8 *)(a4 + 728), *(unsigned __int8 *)(a4 + 720), v38);
            LbsOsaTrace_WriteLog(8u, __str, v43, 4, 1);
          }
          ++v38;
          unsigned int v37 = *(unsigned __int8 *)(a2 + 720);
        }
        if (v39 > 0xE) {
          break;
        }
        if (++v39 >= v37) {
          break;
        }
        v41 += 2570;
        --v40;
      }
      while (v38 < 0x10);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v45 = mach_continuous_time();
    unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TotalGnss,%u,UsedGnss,%u,ConstMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNC", 73, "GncS04_64PopulateGnssSvMeas", *(unsigned __int8 *)(a2 + 720), *(unsigned __int8 *)(a4 + 720), *(unsigned __int8 *)(a1 + 33));
    size_t result = LbsOsaTrace_WriteLog(8u, __str, v46, 4, 1);
  }
  if (*(unsigned char *)(a4 + 720))
  {
    *(unsigned char *)(a4 + 16) |= 2u;
    int v47 = 1;
  }
  else
  {
    int v47 = 7;
  }
  *(_DWORD *)(a4 + 680) = v47;
  if ((*(unsigned char *)(a1 + 33) & 1) != 0 && *(unsigned char *)(a2 + 37))
  {
    memcpy((void *)(a4 + 20), (const void *)(a2 + 20), 0x292uLL);
    *(unsigned char *)(a4 + 16) |= 1u;
    *(_DWORD *)(a4 + 32) = 1;
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v48 = mach_continuous_time();
      unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumGpsMeas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 73, "GncS04_65PopulateMeasData", *(unsigned __int8 *)(a4 + 37));
      return LbsOsaTrace_WriteLog(8u, __str, v49, 4, 1);
    }
  }
  else
  {
    *(_DWORD *)(a4 + 32) = 7;
  }
  return result;
}

BOOL GncS04_71CheckAgeLimitCond(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  int v9 = v6;
  uint64_t v98 = *MEMORY[0x263EF8340];
  v61[0] = 0;
  *(void *)char v62 = 0;
  *(_DWORD *)((char *)&v62[1] + 3) = 0;
  *(void *)&v62[5] = 0;
  *(void *)&v62[3] = 0;
  __int16 v63 = 0;
  long long v78 = 0u;
  memset(v79, 0, sizeof(v79));
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  bzero(v80, 0x28CuLL);
  for (uint64_t i = 956; i != 1340; i += 3)
  {
    int v11 = (char *)v61 + i;
    char v12 = *((unsigned char *)v61 + i + 2);
    *(_WORD *)int v11 = 0;
    _DWORD v11[2] = v12 & 0xE0;
  }
  long long v94 = 0u;
  long long v95 = 0u;
  int v13 = v8;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  *(_OWORD *)&v80[1036] = 0u;
  long long v81 = 0u;
  bzero(&v96, 0x1109uLL);
  uint64_t v14 = &g_GncSFGClientData[52 * v8 + 330948];
  if ((*v14 & 0xC) != 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(v97, 0x410uLL);
      unint64_t v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v15 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: AgeLimit NA ID,%u,PosOutput,%u\n", v53);
LABEL_31:
      size_t v32 = v15;
      BOOL v30 = 1;
      goto LABEL_32;
    }
    return 1;
  }
  uint64_t v16 = (unsigned int *)&g_GncSFGClientData[52 * v13 + 330960];
  if ((GncS04_42GetValidNavDataCopy((uint64_t)v61, v9, *v16) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(v97, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v15 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: NavData NA ID,%u\n");
      goto LABEL_31;
    }
    return 1;
  }
  unsigned int v17 = *v16;
  if (*(_WORD *)&g_GncSFGClientData[52 * v13 + 330950]) {
    unsigned int v18 = *(unsigned __int16 *)&g_GncSFGClientData[52 * v13 + 330950];
  }
  else {
    unsigned int v18 = 100;
  }
  if (*(_WORD *)&g_GncSFGClientData[52 * v13 + 330952]) {
    unsigned int v19 = *(unsigned __int16 *)&g_GncSFGClientData[52 * v13 + 330952];
  }
  else {
    unsigned int v19 = 150;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(v97, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v21 = v61[0];
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: CurrPos Age,%u,VSF,%u,HAcc,%f,VAcc,%f\n", v20, "GNC", 73, "GncS04_70QualifyNavForAgeLimit", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22) - v21, v79[17], *((double *)&v74 + 1), *(double *)&v74);
    LbsOsaTrace_WriteLog(8u, v97, v23, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(v97, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: SessReq Age,%u,HAcc,%u,VAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncS04_70QualifyNavForAgeLimit", v17, v18, v19);
    LbsOsaTrace_WriteLog(8u, v97, v25, 4, 1);
  }
  int v26 = v61[0];
  if (!v61[0]) {
    goto LABEL_26;
  }
  double v27 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  unsigned int v28 = (unint64_t)v27 - v26;
  if (v26 - (unint64_t)v27 < 0x3E9) {
    unsigned int v28 = 0;
  }
  BOOL v29 = v28 >= v17 || v79[17] == 0;
  if (v29 || *((double *)&v74 + 1) > (double)v18 || *(double *)&v74 > (double)v19)
  {
LABEL_26:
    BOOL v30 = 1;
    goto LABEL_27;
  }
  uint64_t v33 = (__int16 *)&g_GncSFGClientData[52 * v13 + 330918];
  GncS04_22SendStartPosResp(255, (unsigned __int16)*v33);
  char v34 = *v14;
  BOOL v30 = (*v14 & 1) == 0;
  if (*v14)
  {
    GncS04_41SendNavData(*v33, 1, 1, v61);
    char v34 = *v14;
  }
  if ((v34 & 2) != 0)
  {
    uint64_t v35 = 0;
    uint64_t v54 = 0;
    *(_DWORD *)char v55 = -1;
    *(_WORD *)&v55[4] = 0;
    *(_OWORD *)&v55[8] = xmmword_22BB0C140;
    *(void *)&v55[24] = 0;
    *(void *)&long long v56 = 0;
    *(void *)((char *)&v56 + 6) = 0;
    HIWORD(v56) = -1;
    LOBYTE(v57) = 0;
    DWORD1(v57) = 0;
    *((void *)&v57 + 1) = -1;
    *(void *)uint64_t v58 = 0;
    *(_DWORD *)&v58[8] = -1;
    *(void *)&v58[28] = -1;
    *(void *)&v58[14] = -1;
    *(_DWORD *)&v58[21] = -1;
    v58[12] = -1;
    *(void *)&v58[36] = 0x7FFFFFFFLL;
    v58[44] = 0;
    *(_WORD *)&v58[46] = -1;
    unint64_t v59 = 0xFFFFFFFF7FFFFFFFLL;
    do
    {
      unsigned __int16 v36 = &v55[v35 - 8];
      *((_DWORD *)v36 + 34) = 0;
      *((_DWORD *)v36 + 32) = 0;
      v36[132] = 0;
      v36[140] = -1;
      *((_WORD *)v36 + 71) = -1;
      *((_DWORD *)v36 + 36) = -1;
      v36[148] = -1;
      v35 += 28;
      *((_DWORD *)v36 + 38) = -1;
    }
    while (v35 != 56);
    char v60 = 0;
    GncP_GetGADData((uint64_t)&v54);
    if (*(_DWORD *)&v55[20] != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(v97, 0x410uLL);
        uint64_t v50 = mach_continuous_time();
        unsigned __int16 v51 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: GADData NA ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 73, "GncS04_71CheckAgeLimitCond", (unsigned __int16)*v33);
        LbsOsaTrace_WriteLog(8u, v97, v51, 4, 1);
      }
      return 1;
    }
    unsigned int v37 = gnssOsa_Calloc("GncS04_71CheckAgeLimitCond", 2431, 1, 0x20uLL);
    if (v37)
    {
      unsigned int v38 = v37;
      unint64_t v39 = gnssOsa_Calloc("GncS04_71CheckAgeLimitCond", 2437, 1, 0x78uLL);
      v38[3] = v39;
      if (!v39)
      {
        free(v38);
        return 1;
      }
      int v40 = HIDWORD(v54);
      *((_DWORD *)v38 + 3) = v54;
      *((_WORD *)v38 + 8) = *v33;
      *((_WORD *)v38 + 9) = 257;
      long long v42 = *(_OWORD *)&v58[16];
      long long v41 = *(_OWORD *)&v58[32];
      long long v43 = *(_OWORD *)v58;
      v39[14] = v59;
      *((_OWORD *)v39 + 5) = v42;
      *((_OWORD *)v39 + 6) = v41;
      *((_OWORD *)v39 + 4) = v43;
      long long v44 = *(_OWORD *)v55;
      long long v45 = *(_OWORD *)&v55[16];
      long long v46 = v57;
      *((_OWORD *)v39 + 2) = v56;
      *((_OWORD *)v39 + 3) = v46;
      *(_OWORD *)unint64_t v39 = v44;
      *((_OWORD *)v39 + 1) = v45;
      uint64_t v47 = v38[3];
      *(_DWORD *)uint64_t v47 = (unsigned __int16)*v33;
      *(unsigned char *)(v47 + 4) = 1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(v97, 0x410uLL);
        uint64_t v48 = mach_continuous_time();
        unsigned __int16 v49 = snprintf(v97, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_GAD_IND =>GNM ID,%u,OSTTick,%u,BBTick,%u,Quality,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 73, "GncS04_71CheckAgeLimitCond", *((unsigned __int16 *)v38 + 8), *((_DWORD *)v38 + 3), v40, 1);
        LbsOsaTrace_WriteLog(8u, v97, v49, 4, 1);
      }
      AgpsSendFsmMsg(130, 128, 8520963, v38);
      BOOL v30 = 0;
      goto LABEL_27;
    }
    return 1;
  }
LABEL_27:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(v97, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    size_t v32 = (unsigned __int16)snprintf(v97, 0x40FuLL, "%10u %s%c %s: SendReqGncP,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 73, "GncS04_71CheckAgeLimitCond", v30);
LABEL_32:
    LbsOsaTrace_WriteLog(8u, v97, v32, 4, 1);
  }
  return v30;
}

void GncS04_22SendStartPosResp(int a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v4 = gnssOsa_Calloc("GncS04_22SendStartPosResp", 447, 1, 0x10uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    *((_WORD *)v4 + 6) = a2;
    v4[14] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_RSP =>GNM ID,%hu,Code,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS04_22SendStartPosResp", a2, a1);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(130, 128, 8519684, v5);
  }
}

unint64_t GncS04_72SendUpdates()
{
  int v0 = MEMORY[0x270FA5388]();
  uint64_t v261 = *MEMORY[0x263EF8340];
  unint64_t result = mach_continuous_time();
  char v2 = 0;
  uint64_t v3 = 0;
  *(void *)uint64_t v230 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
  int v227 = v0;
  do
  {
    char v4 = v2;
    uint64_t v5 = &g_GncSFGClientData[52 * v3 + 330916];
    if (*v5) {
      uint64_t v6 = &g_GncSFGClientData[52 * v3 + 330916];
    }
    else {
      uint64_t v6 = 0;
    }
    if (*v5 == 1)
    {
      if (!*(_DWORD *)&g_GncSFGClientData[52 * v3 + 330936])
      {
        unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
        if (!result) {
          goto LABEL_218;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NoUpdt ID,%u,NumFix,0\n");
        goto LABEL_19;
      }
      char v231 = v4;
      unsigned int v7 = *(_DWORD *)&g_GncSFGClientData[52 * v3 + 330928];
      int v229 = &g_GncSFGClientData[52 * v3 + 330924];
      if (v7) {
        BOOL v8 = v230[0] - *(_DWORD *)&g_GncSFGClientData[52 * v3 + 330924] + 30 >= v7;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        int v228 = &g_GncSFGClientData[52 * v3 + 330936];
        if (v227)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updt Unsol ID,%u,Type,%hhu,PrevUpdt,%u\n", v9);
            goto LABEL_23;
          }
          goto LABEL_24;
        }
        int v15 = g_GncSFGClientData[52 * v3 + 330920];
        unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
        if (v15)
        {
          if (result)
          {
            bzero(__str, 0x410uLL);
            unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updt ID,%u,Type,%hhu,Unsol,N,TmElapsed,%u,RespTime,%u\n", v16, "GNC");
LABEL_23:
            LbsOsaTrace_WriteLog(8u, __str, v10, 4, 1);
          }
LABEL_24:
          unsigned int v17 = &g_GncSFGClientData[52 * v3 + 330948];
          char v18 = *v17;
          if (*v17)
          {
            LOBYTE(v253) = 0;
            *(_DWORD *)std::string __str = 0;
            *(void *)int v238 = 0;
            *(_DWORD *)&v238[7] = 0;
            memset(&v238[12], 0, 18);
            memset(&v238[32], 0, 262);
            bzero(&v238[296], 0x28CuLL);
            for (uint64_t i = 956; i != 1340; i += 3)
            {
              int v21 = &__str[i];
              char v22 = __str[i + 2];
              *(_WORD *)int v21 = 0;
              v21[2] = v22 & 0xE0;
            }
            memset(&v238[1332], 0, 256);
            bzero(&v238[1592], 0x1109uLL);
            int ValidNavDataCopy = GncS04_42GetValidNavDataCopy((uint64_t)__str, v230[0], 0);
            char v24 = ValidNavDataCopy;
            if (ValidNavDataCopy)
            {
              if (v238[5952] >= 2u) {
                uint64_t v25 = 2;
              }
              else {
                uint64_t v25 = v238[5952];
              }
              if (v25)
              {
                int v26 = (unsigned __int16 *)&v238[5946];
                while (*((unsigned char *)v26 - 1) != 1 || *v26 != *((unsigned __int16 *)v6 + 1))
                {
                  v26 += 2;
                  if (!--v25) {
                    goto LABEL_37;
                  }
                }
                int v27 = *((unsigned __int8 *)v26 - 2);
              }
              else
              {
LABEL_37:
                int v27 = 2;
                if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(&v241, 0x410uLL);
                  uint64_t v28 = mach_continuous_time();
                  unsigned __int16 v29 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: NavQual Missing ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 87, "GncS04_43UpdateNavSvData", *((unsigned __int16 *)v6 + 1));
                  LbsOsaTrace_WriteLog(8u, (char *)&v241, v29, 2, 1);
                }
              }
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(&v241, 0x410uLL);
                uint64_t v30 = mach_continuous_time();
                unsigned __int16 v31 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: NavData NA ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 73, "GncS04_43UpdateNavSvData", *((unsigned __int16 *)v6 + 1));
                LbsOsaTrace_WriteLog(8u, (char *)&v241, v31, 4, 1);
              }
              int v27 = 2;
            }
            int RespUpdtStat = GncS04_29GetRespUpdtStat((uint64_t)v6, v27, 0, 0, &v253);
            if (RespUpdtStat)
            {
              GncS04_41SendNavData(*((_WORD *)v6 + 1), v253, v24, __str);
              if (*((_DWORD *)v6 + 6) >> 3 >= 0x271u) {
                GncS03_08SessRespSentInd(v230[0], *(int *)v238, *((_WORD *)v6 + 1), 0);
              }
            }
            else if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(&v241, 0x410uLL);
              uint64_t v32 = mach_continuous_time();
              unsigned __int16 v33 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: NavData NoUpdt ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 73, "GncS04_43UpdateNavSvData", *((unsigned __int16 *)v6 + 1));
              LbsOsaTrace_WriteLog(8u, (char *)&v241, v33, 4, 1);
            }
            char v18 = *v17;
          }
          else
          {
            LOBYTE(RespUpdtStat) = 0;
          }
          if ((v18 & 2) != 0)
          {
            uint64_t v34 = 0;
            uint64_t v253 = 0;
            LODWORD(v254[0]) = -1;
            WORD2(v254[0]) = 0;
            *(_OWORD *)((char *)v254 + 8) = xmmword_22BB0C140;
            *((void *)&v254[1] + 1) = 0;
            *(void *)&long long v255 = 0;
            *(void *)((char *)&v255 + 6) = 0;
            HIWORD(v255) = -1;
            LOBYTE(v256) = 0;
            DWORD1(v256) = 0;
            *((void *)&v256 + 1) = -1;
            *(void *)&v257[0] = 0;
            DWORD2(v257[0]) = -1;
            BYTE12(v257[0]) = -1;
            *(void *)((char *)&v257[1] + 12) = -1;
            *(void *)((char *)v257 + 14) = -1;
            *(_DWORD *)((char *)&v257[1] + 5) = -1;
            *(void *)((char *)&v257[2] + 4) = 0x7FFFFFFFLL;
            BYTE12(v257[2]) = 0;
            HIWORD(v257[2]) = -1;
            unint64_t v258 = 0xFFFFFFFF7FFFFFFFLL;
            do
            {
              uint64_t v35 = (char *)&v253 + v34;
              *((_DWORD *)v35 + 34) = 0;
              *((_DWORD *)v35 + 32) = 0;
              v35[132] = 0;
              v35[140] = -1;
              *((_WORD *)v35 + 71) = -1;
              *((_DWORD *)v35 + 36) = -1;
              v35[148] = -1;
              v34 += 28;
              *((_DWORD *)v35 + 38) = -1;
            }
            while (v34 != 56);
            unsigned __int8 v260 = 0;
            int v36 = *((unsigned __int16 *)v6 + 1);
            GncP_GetGADData((uint64_t)&v253);
            if (v260 >= 2u) {
              unsigned int v37 = 2;
            }
            else {
              unsigned int v37 = v260;
            }
            if (v37)
            {
              uint64_t v38 = 0;
              int v39 = BYTE5(v254[0]);
              uint64_t v40 = 28 * v37;
              while (v259[v38] != 1 || *(unsigned __int16 *)&v259[v38 + 1] != v36)
              {
                v38 += 28;
                if (v40 == v38) {
                  goto LABEL_59;
                }
              }
              char v60 = (char *)&v253 + v38;
              int v61 = v60[128];
              BYTE5(v254[0]) = v60[132];
              DWORD2(v257[2]) = *((_DWORD *)v60 + 34);
              DWORD1(v257[1]) = *((_DWORD *)v60 + 38);
              BYTE8(v257[1]) = v60[148];
              HIDWORD(v257[1]) = *((_DWORD *)v60 + 36);
              LOWORD(v257[2]) = *((_WORD *)v60 + 71);
              BYTE2(v257[2]) = v60[140];
              LOBYTE(v235) = 0;
              __int16 v234 = 0;
              int v224 = v61;
              int v62 = GncS04_29GetRespUpdtStat((uint64_t)v6, v61, &v235, (BOOL *)&v234 + 1, &v234);
              int v63 = v62;
              if (!v62) {
                goto LABEL_133;
              }
              int v218 = v62;
              long long v64 = gnssOsa_Calloc("GncS04_54UpdateGADData", 1728, 1, 0x20uLL);
              if (v64)
              {
                uint64_t v221 = v64;
                long long v65 = gnssOsa_Calloc("GncS04_54UpdateGADData", 1734, 1, 0x78uLL);
                long long v66 = v221;
                v221[3] = v65;
                if (v65)
                {
                  int v216 = HIDWORD(v253);
                  *((_DWORD *)v221 + 3) = v253;
                  int v67 = *((unsigned __int16 *)v6 + 1);
                  *((_WORD *)v221 + 8) = v67;
                  char v68 = v234;
                  *((unsigned char *)v221 + 18) = v234;
                  *((unsigned char *)v221 + 19) = v39 != 0;
                  if (!HIBYTE(v234)) {
                    goto LABEL_126;
                  }
                  uint64_t v69 = 0;
                  char v70 = 1;
                  while (1)
                  {
                    char v71 = v70;
                    if (*(unsigned __int16 *)&g_GncSFGClientData[132 * v69 + 30] == v67) {
                      break;
                    }
                    char v70 = g_GncSFGClientData[132 * v69 + 28];
                    if (v70) {
                      break;
                    }
                    uint64_t v69 = 1;
                    if ((v71 & 1) == 0) {
                      goto LABEL_126;
                    }
                  }
                  if (g_GncSFGClientData[132 * v69 + 86] < BYTE14(v255)
                    && (g_GncSFGClientData[132 * v69 + 87] < HIBYTE(v255)
                     || g_GncSFGClientData[132 * v69 + 96] < BYTE8(v256)))
                  {
LABEL_123:
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v87 = mach_continuous_time();
                      unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CachedGad Used\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "GNC", 73, "GncS04_54UpdateGADData");
                      LbsOsaTrace_WriteLog(8u, __str, v88, 4, 1);
                    }
                    long long v66 = v221;
                    *((unsigned char *)v221 + 19) = 1;
                    long long v89 = &g_GncSFGClientData[132 * v69];
                    *((_DWORD *)v221 + 3) = *((_DWORD *)v89 + 8);
                    int v216 = *((_DWORD *)v89 + 9);
                    uint64_t v90 = v221[3];
                    long long v91 = *(_OWORD *)(v89 + 104);
                    long long v92 = *(_OWORD *)(v89 + 120);
                    long long v93 = *(_OWORD *)(v89 + 136);
                    *(void *)(v90 + 112) = *((void *)v89 + 19);
                    *(_OWORD *)(v90 + 80) = v92;
                    *(_OWORD *)(v90 + 96) = v93;
                    *(_OWORD *)(v90 + 64) = v91;
                    long long v94 = *(_OWORD *)(v89 + 40);
                    long long v95 = *(_OWORD *)(v89 + 56);
                    long long v96 = *(_OWORD *)(v89 + 88);
                    *(_OWORD *)(v90 + 32) = *(_OWORD *)(v89 + 72);
                    *(_OWORD *)(v90 + 48) = v96;
                    *(_OWORD *)uint64_t v90 = v94;
                    *(_OWORD *)(v90 + 16) = v95;
                    char v68 = v234;
                    char v4 = v231;
                  }
                  else
                  {
                    if (!v39 || BYTE5(v254[0]) == 128)
                    {
                      long long v81 = &g_GncSFGClientData[132 * v69];
                      int v83 = *((_DWORD *)v81 + 9);
                      long long v82 = v81 + 36;
                      if (v83)
                      {
                        long long v84 = v82;
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v85 = mach_continuous_time();
                          unsigned __int16 v86 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CurrData,%u,GnssUsed,%u,CacheBBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "GNC", 73, "GncS04_50CheckGadCacheUse", v39 != 0, BYTE5(v254[0]), *(_DWORD *)v84);
                          LbsOsaTrace_WriteLog(8u, __str, v86, 4, 1);
                        }
                        goto LABEL_123;
                      }
                    }
LABEL_126:
                    long long v97 = v254[0];
                    long long v98 = v254[1];
                    long long v99 = v256;
                    v65[2] = v255;
                    v65[3] = v99;
                    *long long v65 = v97;
                    v65[1] = v98;
                    long long v100 = v257[0];
                    long long v101 = v257[1];
                    long long v102 = v257[2];
                    *((void *)v65 + 14) = v258;
                    v65[5] = v101;
                    v65[6] = v102;
                    void v65[4] = v100;
                  }
                  uint64_t v103 = v66[3];
                  *(_DWORD *)uint64_t v103 = *((unsigned __int16 *)v6 + 1);
                  *(unsigned char *)(v103 + 4) = v68;
                  __int16 v104 = g_GncSConfig;
                  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
                  if ((IsLoggingAllowed & 1) != 0 || (v104 & 0x200) != 0)
                  {
                    int v214 = IsLoggingAllowed;
                    bzero(&v241, 0x400uLL);
                    uint64_t v115 = v221[3];
                    *(_WORD *)BOOL v236 = snprintf((char *)&v241, 0x400uLL, "$PDPGR,%u,%u,%u,%u,%u,%d,%u,%u,%u,%u,%u,%u", *((_DWORD *)v221 + 3), v216, *((unsigned __int16 *)v221 + 8), *(_DWORD *)(v115 + 32), *(_DWORD *)(v115 + 36), *(_DWORD *)(v115 + 40), *(unsigned __int16 *)(v115 + 44), v224, *(_DWORD *)(v115 + 92), *(unsigned __int8 *)(v115 + 98), *(unsigned __int8 *)(v115 + 5), *(_DWORD *)(v115 + 12));
                    if (HswUtil_AddNmeaCS((char *)&v241, 0x400u, (unsigned __int16 *)v236))
                    {
                      if (v214) {
                        LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)&v241, *(unsigned __int16 *)v236);
                      }
                      if ((v104 & 0x200) != 0) {
                        GncS04_07SndDbgNmea((char *)&v241, *(unsigned __int16 *)v236);
                      }
                    }
                    else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v186 = mach_continuous_time();
                      unsigned __int16 v187 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v186), "GNC", 69, "GncS04_53SndGadRespNmea", 772, *(unsigned __int16 *)v236);
                      LbsOsaTrace_WriteLog(8u, __str, v187, 0, 1);
                    }
                  }
                  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v106 = mach_continuous_time();
                    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_GAD_IND =>GNM ID,%u,OSTTick,%u,BBTick,%u,Quality,%hhu,Valid,%u,Final,%u,GnssUsed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "GNC", 73, "GncS04_54UpdateGADData", *((unsigned __int16 *)v221 + 8), *((_DWORD *)v221 + 3), v216, v224, *((unsigned __int8 *)v221 + 19), v234, *(unsigned __int8 *)(v221[3] + 5));
                    LbsOsaTrace_WriteLog(8u, __str, v107, 4, 1);
                  }
                  AgpsSendFsmMsg(130, 128, 8520963, v221);
                  int v63 = v218;
                  if ((_BYTE)v234)
                  {
                    GncS03_08SessRespSentInd(v230[0], v216, *((_WORD *)v6 + 1), 1);
                    int v63 = v218;
                  }
LABEL_133:
                  if (!(_BYTE)v235 || !v39) {
                    goto LABEL_249;
                  }
                  if (SBYTE5(v254[0]) == -128)
                  {
                    int v108 = v63;
                    int v109 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
                    int v63 = v108;
                    if (v109)
                    {
                      char v220 = v108;
                      bzero(__str, 0x410uLL);
                      unint64_t v110 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      unsigned __int16 v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Ignore BBTick,%u,GnssUsed,%u,HAccMaj,%u,HAccMin,%u,AltUnc,%u\n", v110, "GNC");
                      goto LABEL_138;
                    }
LABEL_249:
                    if (v63) {
LABEL_250:
                    }
                      LOBYTE(RespUpdtStat) = RespUpdtStat + 1;
                  }
                  else
                  {
                    uint64_t v112 = 0;
                    char v113 = 1;
                    while (1)
                    {
                      char v114 = v113;
                      if (*(unsigned __int16 *)&g_GncSFGClientData[132 * v112 + 30] == *((unsigned __int16 *)v6 + 1))
                      {
                        if (g_GncSFGClientData[132 * v112 + 28]) {
                          break;
                        }
                      }
                      char v113 = 0;
                      uint64_t v112 = 1;
                      if ((v114 & 1) == 0) {
                        goto LABEL_249;
                      }
                    }
                    int v182 = HIDWORD(v253);
                    char v183 = &g_GncSFGClientData[132 * v112];
                    int v185 = *((_DWORD *)v183 + 9);
                    uint64_t v184 = v183 + 36;
                    if (HIDWORD(v253) == v185) {
                      goto LABEL_249;
                    }
                    uint64_t v190 = &g_GncSFGClientData[132 * v112];
                    unsigned int v192 = v190[86];
                    char v191 = v190 + 86;
                    if (BYTE14(v255) > v192
                      || HIBYTE(v255) > g_GncSFGClientData[132 * v112 + 87]
                      && BYTE8(v256) > g_GncSFGClientData[132 * v112 + 96])
                    {
                      if ((SBYTE5(v254[0]) & 0x80000000) == 0) {
                        goto LABEL_249;
                      }
                      if (BYTE14(v255) > 0x27u) {
                        goto LABEL_249;
                      }
                      if (BYTE8(v256) > 0xFu) {
                        goto LABEL_249;
                      }
                      int v193 = &g_GncSFGClientData[132 * v112];
                      unsigned int v195 = v193[96];
                      long long v194 = v193 + 96;
                      if (BYTE8(v256) > v195) {
                        goto LABEL_249;
                      }
                      *long long v194 = BYTE8(v256);
                      char v196 = &g_GncSFGClientData[132 * v112];
                      *((_WORD *)v196 + 42) = WORD6(v255);
                      *((_DWORD *)v196 + 23) = DWORD1(v256);
                      int v197 = v63;
                      int v198 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
                      int v63 = v197;
                      if (!v198) {
                        goto LABEL_249;
                      }
                      char v220 = v197;
                      bzero(__str, 0x410uLL);
                      unint64_t v199 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      char v4 = v231;
                      unsigned __int16 v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GadCache Alt Updt Idx,%u,BBTick,%u,HAccMaj,%u,HAccMin,%u,AltUnc,%u\n", v199, "GNC");
                    }
                    else
                    {
                      uint64_t v203 = v191 - 46;
                      long long v204 = v257[1];
                      *(_OWORD *)(v191 + 18) = v257[0];
                      *(_OWORD *)(v191 + 34) = v204;
                      *(_OWORD *)(v191 + 50) = v257[2];
                      *(void *)(v191 + 66) = v258;
                      long long v205 = v254[1];
                      *(_OWORD *)uint64_t v203 = v254[0];
                      *((_OWORD *)v203 + 1) = v205;
                      long long v206 = v256;
                      *((_OWORD *)v203 + 2) = v255;
                      *(_OWORD *)(v191 + 2) = v206;
                      *uint64_t v184 = v182;
                      *(_DWORD *)&g_GncSFGClientData[132 * v112 + 32] = v253;
                      int v207 = v63;
                      int v208 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
                      int v63 = v207;
                      if (!v208) {
                        goto LABEL_249;
                      }
                      char v220 = v207;
                      bzero(__str, 0x410uLL);
                      unint64_t v209 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                      char v4 = v231;
                      unsigned __int16 v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GadCache LLH Updt Idx,%u,BBTick,%u,HAccMaj,%u,HAccMin,%u,AltUnc,%u\n", v209, "GNC");
                    }
LABEL_138:
                    LbsOsaTrace_WriteLog(8u, __str, v111, 4, 1);
                    if (v220) {
                      goto LABEL_250;
                    }
                  }
                }
                else
                {
                  free(v221);
                }
              }
            }
            else
            {
LABEL_59:
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v41 = mach_continuous_time();
                unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GADQual Missing ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNC", 87, "GncS04_54UpdateGADData", *((unsigned __int16 *)v6 + 1));
                LbsOsaTrace_WriteLog(8u, __str, v42, 2, 1);
              }
            }
          }
          char v43 = *v17;
          if ((*v17 & 4) != 0)
          {
            *(void *)BOOL v236 = 0;
            v236[8] = 127;
            *(_WORD *)&v236[10] = 0;
            *(_DWORD *)&v236[12] = 0;
            v236[16] = 0;
            *(_DWORD *)&v236[20] = 0;
            *(_WORD *)&v236[24] = 0;
            v238[0] = 0;
            *(void *)std::string __str = 0;
            *(_DWORD *)&v238[4] = -1;
            v238[8] = 0;
            *(void *)&v238[12] = 0;
            v238[20] = 0;
            *(void *)&v238[24] = 0x7FFFFFFFFFFFFFFFLL;
            *(_WORD *)&v238[32] = -1;
            *(_DWORD *)&v238[36] = 0;
            uint64_t v44 = 50;
            *(_WORD *)&v238[40] = 0;
            do
            {
              long long v45 = &__str[v44];
              *long long v45 = -1;
              *(void *)(v45 + 1) = 0;
              v45[9] = 0;
              v44 += 10;
            }
            while (v45 + 10 != &v238[682]);
            *(void *)&v238[684] = 0xFFFFFFFF00000000;
            v238[692] = -1;
            *(void *)&v238[696] = -1;
            *(void *)&v238[704] = 0x7FFFFFFFLL;
            v238[712] = 0;
            *(_WORD *)&v238[714] = -1;
            *(void *)&v238[716] = 0xFFFFFFFF7FFFFFFFLL;
            long long v46 = &v238[728];
            v238[724] = 0;
            do
            {
              *(_DWORD *)long long v46 = 0;
              void v46[4] = 0;
              uint64_t v47 = v46 + 8;
              v46 += 10280;
              do
              {
                *(_WORD *)uint64_t v47 = 0;
                void v47[2] = 0;
                uint64_t v48 = v47 + 4;
                v47 += 1284;
                do
                {
                  *uint64_t v48 = -1;
                  *((_DWORD *)v48 + 2) = 0;
                  *((_WORD *)v48 + 6) = 0;
                  *((_DWORD *)v48 + 4) = 0;
                  *(_DWORD *)(v48 + 1) = 0;
                  v48[5] = 0;
                  v48 += 20;
                }
                while (v48 != v47);
              }
              while (v47 != v46);
            }
            while (v46 != &v238[165208]);
            v238[165208] = 0;
            *(void *)&v238[165212] = 0x700000000;
            *(void *)&v238[165220] = 0;
            *(void *)&v238[165228] = 0;
            *(void *)&v238[165234] = 0;
            *(_WORD *)&v238[165242] = -1;
            v238[165244] = 0;
            *(_DWORD *)&v238[165248] = 0;
            *(void *)&v238[165252] = -1;
            *(_DWORD *)&v238[165260] = 0;
            *(_DWORD *)&v238[165264] = 0;
            *(_DWORD *)&v238[165268] = -1;
            v238[165272] = -1;
            *(_DWORD *)&v238[165274] = -1;
            uint64_t v49 = 165288;
            *(_WORD *)&v238[165278] = -1;
            do
            {
              uint64_t v50 = &__str[v49];
              *(void *)uint64_t v50 = 0;
              v50[8] = 127;
              *((_WORD *)v50 + 5) = 0;
              *((_DWORD *)v50 + 3) = 0;
              v50[16] = 0;
              *((_DWORD *)v50 + 5) = 0;
              v49 += 28;
              *((_WORD *)v50 + 12) = 0;
            }
            while (v50 + 28 != (char *)&v240);
            unsigned __int8 v240 = 0;
            if (*((_DWORD *)v6 + 10) == *((_DWORD *)v6 + 2)) {
              int v51 = 0;
            }
            else {
              int v51 = *((_DWORD *)v6 + 10);
            }
            GncP_GetMeasData(v51, (uint64_t)__str, v6[50]);
            uint64_t v52 = 0;
            uint64_t v241 = 0;
            int v242 = -1;
            __int16 v243 = 0;
            *(_OWORD *)char v244 = xmmword_22BB0C140;
            *(void *)&v244[16] = 0;
            *(void *)&long long v245 = 0;
            *(void *)((char *)&v245 + 6) = 0;
            HIWORD(v245) = -1;
            LOBYTE(v246) = 0;
            DWORD1(v246) = 0;
            *((void *)&v246 + 1) = -1;
            uint64_t v247 = 0;
            v248[0] = -1;
            LOBYTE(v248[1]) = -1;
            *(void *)&v248[5] = -1;
            *(void *)((char *)&v248[1] + 2) = -1;
            *(_DWORD *)((char *)&v248[3] + 1) = -1;
            *(void *)&v248[7] = 0x7FFFFFFFLL;
            char v249 = 0;
            __int16 v250 = -1;
            unint64_t v251 = 0xFFFFFFFF7FFFFFFFLL;
            do
            {
              unint64_t v53 = (char *)&v241 + v52;
              *((_DWORD *)v53 + 34) = 0;
              *((_DWORD *)v53 + 32) = 0;
              v53[132] = 0;
              v53[140] = -1;
              *((_WORD *)v53 + 71) = -1;
              *((_DWORD *)v53 + 36) = -1;
              v53[148] = -1;
              v52 += 28;
              *((_DWORD *)v53 + 38) = -1;
            }
            while (v52 != 56);
            char v252 = 0;
            GncP_GetGADData((uint64_t)&v241);
            v238[165208] = HIBYTE(v243);
            *(_OWORD *)&v238[165212] = *(_OWORD *)&v244[8];
            *(_OWORD *)&v238[165228] = v245;
            *(void *)&v238[165260] = v247;
            *(void *)&v238[165268] = *(void *)v248;
            *(_DWORD *)&v238[165276] = v248[2];
            if (v240 >= 2u) {
              uint64_t v54 = 2;
            }
            else {
              uint64_t v54 = v240;
            }
            *(_OWORD *)&v238[165244] = v246;
            char v4 = v231;
            if (v54)
            {
              char v55 = (unsigned __int8 *)&v239;
              while (v55[1] != 1 || *((unsigned __int16 *)v55 + 1) != *((unsigned __int16 *)v6 + 1))
              {
                v55 += 28;
                if (!--v54) {
                  goto LABEL_85;
                }
              }
              *(_OWORD *)BOOL v236 = *(_OWORD *)v55;
              *(_OWORD *)&v236[12] = *(_OWORD *)(v55 + 12);
              BOOL v72 = v55[8] <= 0x5Fu && *v55 == 255;
              int v225 = v238[724];
              __int16 v234 = 0;
              BOOL v73 = v238[724] != 0;
              unsigned __int8 v233 = 0;
              int v56 = GncS04_29GetRespUpdtStat((uint64_t)v6, v72, (unsigned char *)&v234 + 1, (BOOL *)&v234, &v233);
              if (v56)
              {
                long long v74 = (unsigned __int8 *)gnssOsa_Calloc("GncS04_66UpdateMeasData", 2250, 1, 0x20uLL);
                if (v74)
                {
                  v222 = v74;
                  long long v75 = gnssOsa_Calloc("GncS04_66UpdateMeasData", 2256, 1, 0x2859CuLL);
                  *((void *)v222 + 3) = v75;
                  if (v75)
                  {
                    int v219 = *(_DWORD *)&__str[4];
                    *((_DWORD *)v222 + 3) = *(_DWORD *)__str;
                    int v76 = *((unsigned __int16 *)v6 + 1);
                    *((_WORD *)v222 + 8) = v76;
                    unsigned __int8 v77 = v233;
                    v222[18] = v233;
                    v222[19] = v73;
                    *(_DWORD *)long long v75 = v76;
                    void v75[4] = v77;
                    if (!(_BYTE)v234) {
                      goto LABEL_155;
                    }
                    uint64_t v78 = 0;
                    char v79 = 1;
                    while (1)
                    {
                      char v80 = v79;
                      if (*(unsigned __int16 *)&g_GncSFGClientData[165312 * v78 + 294] == v76) {
                        break;
                      }
                      char v79 = g_GncSFGClientData[165312 * v78 + 292];
                      if (v79) {
                        break;
                      }
                      uint64_t v78 = 1;
                      if ((v80 & 1) == 0) {
                        goto LABEL_155;
                      }
                    }
                    if ((unsigned int v116 = g_GncSFGClientData[165312 * v78 + 165576], v236[0] == v116)
                      && v236[8] == g_GncSFGClientData[165312 * v78 + 165584]
                      || (v236[0] > v116
                       || v236[8] < g_GncSFGClientData[165312 * v78 + 165584])
                      && (v225 || !*(_DWORD *)&g_GncSFGClientData[165312 * v78 + 296]))
                    {
LABEL_155:
                      GncS04_65PopulateMeasData((uint64_t)v6, (uint64_t)&v238[4], (uint64_t)v236, (uint64_t)v75);
                      int v217 = v236[0];
                    }
                    else
                    {
                      int v217 = v236[0];
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                      {
                        bzero(&v241, 0x410uLL);
                        uint64_t v200 = mach_continuous_time();
                        unsigned __int16 v201 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: CachedMeas Used\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v200), "GNC", 73, "GncS04_66UpdateMeasData");
                        LbsOsaTrace_WriteLog(8u, (char *)&v241, v201, 4, 1);
                      }
                      v222[19] = 1;
                      int v202 = &g_GncSFGClientData[165312 * v78];
                      GncS04_65PopulateMeasData((uint64_t)v6, (uint64_t)(v202 + 300), (uint64_t)(v202 + 165576), *((void *)v222 + 3));
                      int v219 = *((_DWORD *)v202 + 74);
                    }
                    int v215 = v236[8];
                    __int16 v117 = g_GncSConfig;
                    int v118 = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
                    if ((v118 & 1) == 0 && (v117 & 0x200) == 0)
                    {
LABEL_158:
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                      {
                        bzero(&v241, 0x410uLL);
                        uint64_t v119 = mach_continuous_time();
                        uint64_t v120 = *((void *)v222 + 3);
                        unsigned __int16 v121 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_3GPPMEAS_DATA_IND =>GNM ID,%u,BBTick,%u,Valid,%u,Final,%u,Quality,%u,ToDUnc,%u,NumGnss,%u,NumGps,%u,GnssUsed,%u,PosStatus,%u,VelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v119), "GNC", 73, "GncS04_66UpdateMeasData", *(_DWORD *)v120, v219, v222[19], v233, v217, v215, *(unsigned __int8 *)(v120 + 720), *(unsigned __int8 *)(v120 + 37), *(unsigned __int8 *)(v120 + 165204), *(_DWORD *)(v120 + 165212), *(_DWORD *)(v120 + 165260));
                        LbsOsaTrace_WriteLog(8u, (char *)&v241, v121, 4, 1);
                      }
                      AgpsSendFsmMsg(130, 128, 8520451, v222);
                      char v4 = v231;
                      if (v233) {
                        GncS03_08SessRespSentInd(v230[0], v219, *((_WORD *)v6 + 1), 1);
                      }
                      goto LABEL_162;
                    }
                    int v213 = v118;
                    bzero(&v253, 0x400uLL);
                    uint64_t v150 = *((void *)v222 + 3);
                    if (!*(unsigned char *)(v150 + 720))
                    {
                      unsigned __int8 v157 = 0;
                      unsigned __int8 v156 = 0;
                      unsigned __int8 v155 = 0;
                      unsigned __int8 v154 = 0;
                      unsigned __int8 v153 = 0;
                      unsigned __int8 v152 = 0;
LABEL_254:
                      unsigned __int16 v235 = snprintf((char *)&v253, 0x400uLL, "$PDPMR,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", *((_DWORD *)v222 + 3), v219, *((unsigned __int16 *)v222 + 8), *(_DWORD *)(v150 + 692), v215, v217, v157, v156, v155, v154, v153, v152, *(_DWORD *)(v150 + 12));
                      if (HswUtil_AddNmeaCS((char *)&v253, 0x400u, &v235))
                      {
                        if (v213) {
                          LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)&v253, v235);
                        }
                        if ((v117 & 0x200) != 0) {
                          GncS04_07SndDbgNmea((char *)&v253, v235);
                        }
                      }
                      else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                      {
                        bzero(&v241, 0x410uLL);
                        uint64_t v188 = mach_continuous_time();
                        unsigned __int16 v189 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v188), "GNC", 69, "GncS04_60SndMeasRespNmea", 772, v235);
                        LbsOsaTrace_WriteLog(8u, (char *)&v241, v189, 0, 1);
                      }
                      goto LABEL_158;
                    }
                    uint64_t v151 = 0;
                    unsigned __int8 v152 = 0;
                    unsigned __int8 v153 = 0;
                    unsigned __int8 v154 = 0;
                    unsigned __int8 v155 = 0;
                    unsigned __int8 v156 = 0;
                    unsigned __int8 v157 = 0;
                    double v158 = (unsigned char *)(v150 + 734);
                    while (2)
                    {
                      int v159 = *(_DWORD *)(v150 + 10280 * v151 + 724);
                      if (v159 == 1)
                      {
                        uint64_t v160 = *(unsigned __int8 *)(v150 + 10280 * v151 + 728);
                        if (*(unsigned char *)(v150 + 10280 * v151 + 728))
                        {
                          double v161 = v158;
                          do
                          {
                            v157 += *v161;
                            v161 += 1284;
                            --v160;
                          }
                          while (v160);
                          goto LABEL_226;
                        }
                      }
                      else
                      {
LABEL_226:
                        if (v159 == 32)
                        {
                          uint64_t v162 = v150 + 10280 * v151;
                          unsigned int v163 = *(unsigned __int8 *)(v162 + 728);
                          if (!*(unsigned char *)(v162 + 728)) {
                            goto LABEL_246;
                          }
                          uint64_t v164 = 0;
                          uint64_t v165 = 1284 * v163;
                          do
                          {
                            v156 += v158[v164];
                            v164 += 1284;
                          }
                          while (v165 != v164);
                        }
                        if (v159 == 2)
                        {
                          uint64_t v166 = v150 + 10280 * v151;
                          unsigned int v167 = *(unsigned __int8 *)(v166 + 728);
                          if (!*(unsigned char *)(v166 + 728)) {
                            goto LABEL_246;
                          }
                          uint64_t v168 = 0;
                          uint64_t v169 = 1284 * v167;
                          do
                          {
                            v155 += v158[v168];
                            v168 += 1284;
                          }
                          while (v169 != v168);
                        }
                        if (v159 == 64)
                        {
                          uint64_t v170 = v150 + 10280 * v151;
                          unsigned int v171 = *(unsigned __int8 *)(v170 + 728);
                          if (!*(unsigned char *)(v170 + 728)) {
                            goto LABEL_246;
                          }
                          uint64_t v172 = 0;
                          uint64_t v173 = 1284 * v171;
                          do
                          {
                            v154 += v158[v172];
                            v172 += 1284;
                          }
                          while (v173 != v172);
                        }
                        if (v159 == 16)
                        {
                          uint64_t v174 = v150 + 10280 * v151;
                          unsigned int v175 = *(unsigned __int8 *)(v174 + 728);
                          if (!*(unsigned char *)(v174 + 728)) {
                            goto LABEL_246;
                          }
                          uint64_t v176 = 0;
                          uint64_t v177 = 1284 * v175;
                          do
                          {
                            v153 += v158[v176];
                            v176 += 1284;
                          }
                          while (v177 != v176);
                        }
                        if (v159 == 4)
                        {
                          uint64_t v178 = v150 + 10280 * v151;
                          unsigned int v179 = *(unsigned __int8 *)(v178 + 728);
                          if (*(unsigned char *)(v178 + 728))
                          {
                            uint64_t v180 = 0;
                            uint64_t v181 = 1284 * v179;
                            do
                            {
                              v152 += v158[v180];
                              v180 += 1284;
                            }
                            while (v181 != v180);
                          }
                        }
                      }
LABEL_246:
                      ++v151;
                      v158 += 10280;
                      if (v151 == *(unsigned __int8 *)(v150 + 720)) {
                        goto LABEL_254;
                      }
                      continue;
                    }
                  }
                  free(v222);
                }
                LOBYTE(v56) = 0;
                char v4 = v231;
              }
              else
              {
LABEL_162:
                if (HIBYTE(v234) && v225)
                {
                  uint64_t v122 = 0;
                  char v123 = 1;
                  while (1)
                  {
                    char v124 = v123;
                    if (*(unsigned __int16 *)&g_GncSFGClientData[165312 * v122 + 294] == *((unsigned __int16 *)v6 + 1))
                    {
                      if (g_GncSFGClientData[165312 * v122 + 292]) {
                        break;
                      }
                    }
                    char v123 = 0;
                    uint64_t v122 = 1;
                    if ((v124 & 1) == 0) {
                      goto LABEL_174;
                    }
                  }
                  if (v236[0] >= g_GncSFGClientData[165312 * v122 + 165576]
                    && v236[8] <= g_GncSFGClientData[165312 * v122 + 165584])
                  {
                    uint64_t v125 = &g_GncSFGClientData[165312 * v122];
                    if (*(_DWORD *)&__str[4] != *((_DWORD *)v125 + 74))
                    {
                      int v226 = v125 + 296;
                      unsigned int v232 = &g_GncSFGClientData[165312 * v122 + 165576];
                      int v223 = *(_DWORD *)&__str[4];
                      memcpy(&g_GncSFGClientData[165312 * v122 + 300], &v238[4], 0x2859CuLL);
                      *(_OWORD *)unsigned int v232 = *(_OWORD *)v236;
                      *(_OWORD *)(v232 + 10) = *(_OWORD *)&v236[10];
                      *int v226 = v223;
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                      {
                        bzero(&v241, 0x410uLL);
                        uint64_t v126 = mach_continuous_time();
                        unsigned __int16 v127 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: MeasCache Idx,%u,BBTick,%u,Qual,%u,ToDUnc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "GNC", 73, "GncS04_62MeasCacheUpdt", v122, *(_DWORD *)&__str[4], *v232, g_GncSFGClientData[165312 * v122 + 165584]);
                        LbsOsaTrace_WriteLog(8u, (char *)&v241, v127, 4, 1);
                      }
                    }
                  }
                }
              }
            }
            else
            {
LABEL_85:
              LOBYTE(v56) = 0;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(&v241, 0x410uLL);
                uint64_t v57 = mach_continuous_time();
                unsigned __int16 v58 = snprintf((char *)&v241, 0x40FuLL, "%10u %s%c %s: MeasQual Missing ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "GNC", 87, "GncS04_66UpdateMeasData", *((unsigned __int16 *)v6 + 1));
                LbsOsaTrace_WriteLog(8u, (char *)&v241, v58, 2, 1);
                LOBYTE(v56) = 0;
              }
            }
LABEL_174:
            LOBYTE(RespUpdtStat) = RespUpdtStat + v56;
            char v43 = *v17;
          }
          if ((v43 & 8) != 0)
          {
            if (v227)
            {
              int v128 = gnssOsa_Calloc("GncS04_37UpdateDetailedMeasData", 1239, 1, 0x110uLL);
              if (v128)
              {
                uint64_t v129 = v128;
                if (GncP_GetDetailedMeasData((uint64_t)v128))
                {
                  LOBYTE(v241) = 0;
                  GncS04_29GetRespUpdtStat((uint64_t)v6, 1, 0, 0, &v241);
                  char v130 = gnssOsa_Calloc("GncS04_37UpdateDetailedMeasData", 1263, 1, 0x20uLL);
                  if (v130)
                  {
                    int v131 = v130;
                    v130[3] = v230[0];
                    *((_WORD *)v130 + 8) = *((_WORD *)v6 + 1);
                    *((unsigned char *)v130 + 18) = v241;
                    *((void *)v130 + 3) = v129;
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v132 = mach_continuous_time();
                      unsigned __int16 v133 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_RAWMEAS_DATA_IND =>GNM ID,%d,OSTTick,%d,Final,%d,NumMeas,%u,NumUsed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "GNC", 73, "GncS04_37UpdateDetailedMeasData", *((unsigned __int16 *)v131 + 8), v131[3], *((unsigned __int8 *)v131 + 18), *((unsigned __int16 *)v129 + 32), *((unsigned __int16 *)v129 + 120));
                      LbsOsaTrace_WriteLog(8u, __str, v133, 4, 1);
                    }
                    AgpsSendFsmMsg(130, 128, 8520195, v131);
                    if (*v17 == 8) {
                      LOBYTE(RespUpdtStat) = RespUpdtStat + 1;
                    }
                    goto LABEL_194;
                  }
                }
                else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v134 = mach_continuous_time();
                  unsigned __int16 v135 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DetailMeas Updt NA ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v134), "GNC", 87, "GncS04_37UpdateDetailedMeasData", *((unsigned __int16 *)v6 + 1));
                  LbsOsaTrace_WriteLog(8u, __str, v135, 2, 1);
                }
                uint64_t v136 = (void *)v129[9];
                if (v136) {
                  free(v136);
                }
                v129[9] = 0;
                char v137 = (void *)v129[31];
                if (v137) {
                  free(v137);
                }
                v129[31] = 0;
                uint64_t v138 = (void *)v129[33];
                if (v138) {
                  free(v138);
                }
                free(v129);
              }
            }
          }
LABEL_194:
          int v139 = RespUpdtStat;
          if ((_BYTE)RespUpdtStat) {
            *((_DWORD *)v6 + 10) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
          }
                                                    * (double)mach_continuous_time());
          int v140 = v6[4];
          if (v140 == 2)
          {
            int v144 = *(_DWORD *)v229;
            if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)mach_continuous_time())
               - v144 < *((_DWORD *)v6 + 7))
              goto LABEL_215;
            *(_DWORD *)int v228 = 0;
            if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
              goto LABEL_215;
            }
            bzero(__str, 0x410uLL);
            uint64_t v145 = mach_continuous_time();
            size_t v146 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: ID,%u,RespTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v145), "GNC", 73, "GncS04_30UpdateSessionParam", *((unsigned __int16 *)v6 + 1), *((_DWORD *)v6 + 7));
            int v147 = 4;
            goto LABEL_213;
          }
          if (v140 != 1)
          {
            if (!v6[4])
            {
              if ((_BYTE)RespUpdtStat && *(_DWORD *)v228 != -1) {
                --*(_DWORD *)v228;
              }
              if (*((_DWORD *)v6 + 4))
              {
                int v141 = *(_DWORD *)v229;
                uint64_t v142 = mach_continuous_time();
                if (v139)
                {
                  if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v142)
                     - v141
                     + HIWORD(g_GncSConfig)
                     + 30 > *((_DWORD *)v6 + 4))
                  {
                    unsigned int v143 = v228;
                    goto LABEL_210;
                  }
                }
              }
              goto LABEL_215;
            }
            if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
              goto LABEL_215;
            }
            bzero(__str, 0x410uLL);
            uint64_t v148 = mach_continuous_time();
            size_t v146 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "GNC", 87, "GncS04_30UpdateSessionParam", 770, v6[4]);
            int v147 = 2;
LABEL_213:
            LbsOsaTrace_WriteLog(8u, __str, v146, v147, 1);
            goto LABEL_215;
          }
          unsigned int v143 = v228;
          if ((_BYTE)RespUpdtStat) {
LABEL_210:
          }
            *(_DWORD *)unsigned int v143 = 0;
          else {
            *((_DWORD *)v6 + 10) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
          }
                                                    * (double)mach_continuous_time());
LABEL_215:
          unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
          if (!result) {
            goto LABEL_218;
          }
          bzero(__str, 0x410uLL);
          uint64_t v149 = mach_continuous_time();
          size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: ID,%u,UpdtSnt,%u,PrevUpdt,%u,NumFix,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v149), "GNC", 68, "GncS04_30UpdateSessionParam", *((unsigned __int16 *)v6 + 1), v139, *((_DWORD *)v6 + 10), *(_DWORD *)v228);
          int v14 = 5;
LABEL_217:
          unint64_t result = LbsOsaTrace_WriteLog(8u, __str, v13, v14, 1);
          goto LABEL_218;
        }
        if (!result) {
          goto LABEL_218;
        }
        bzero(__str, 0x410uLL);
        unint64_t v59 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NoUpdt ID,%u,Type,%hhu,Unsol,N,PrevUpdt,%u\n", v59);
LABEL_19:
        size_t v13 = v11;
        int v14 = 4;
        goto LABEL_217;
      }
      unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NoUpdt ID,%u,Unsol,%c,TmElapsed,%u,StartUpdt,%u\n", v12, "GNC");
        goto LABEL_19;
      }
    }
LABEL_218:
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v4 & 1) == 0);
  uint64_t v210 = 0;
  char v211 = 1;
  do
  {
    unsigned int v212 = g_GncSFGClientData[52 * v210 + 330916] - 3;
    if ((v211 & 1) == 0) {
      break;
    }
    char v211 = 0;
    uint64_t v210 = 1;
  }
  while (v212 < 0xFFFFFFFE);
  if (v212 >= 0xFFFFFFFE && (v227 & 1) == 0) {
    return GncS04_74UpdateScheduler();
  }
  return result;
}

uint64_t GncS04_74UpdateScheduler(void)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (g_GncSFGClientData[0])
  {
    if (AgpsFsmStopTimer(8522758) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncS04_74UpdateScheduler", 1545);
      LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
    }
    g_GncSFGClientData[0] = 0;
  }
  uint64_t v2 = 0;
  signed int v3 = 0x7FFFFFFF;
  char v4 = 1;
  do
  {
    char v5 = v4;
    if (g_GncSFGClientData[52 * v2 + 330916])
    {
      if (g_GncSFGClientData[52 * v2 + 330916] <= 2u
        && *(_DWORD *)&g_GncSFGClientData[52 * v2 + 330936] != 0)
      {
        unsigned int v7 = (unsigned __int8 *)&g_GncSFGClientData[52 * v2 + 330920];
        if (*v7 - 1 >= 2)
        {
          if (*v7 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v19 = mach_continuous_time();
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 87, "GncS04_27GetUpdateReportInt", 770, *v7);
            LbsOsaTrace_WriteLog(8u, __str, v20, 2, 1);
          }
        }
        else
        {
          BOOL v8 = &g_GncSFGClientData[52 * v2];
          unint64_t v9 = v8 + 330916;
          int v10 = *((_DWORD *)v8 + 82731);
          int v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v10;
          unsigned int v12 = v11 + 30;
          int v14 = *((_DWORD *)v9 + 3);
          size_t v13 = v9 + 12;
          unsigned int v15 = v14 + v13[4];
          int v16 = v15 - v11 - 30;
          if (v16 <= 30) {
            int v16 = 30;
          }
          if (v12 >= v15) {
            int v16 = 30;
          }
          if (v16 < v3) {
            signed int v3 = v16;
          }
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ID,%u,StartTm,%u,RespTime,%u,MinPosTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncS04_27GetUpdateReportInt", *(unsigned __int16 *)&g_GncSFGClientData[52 * v2 + 330918], *v13, v13[4], v3);
            LbsOsaTrace_WriteLog(8u, __str, v18, 5, 1);
          }
        }
      }
    }
    char v4 = 0;
    uint64_t v2 = 1;
  }
  while ((v5 & 1) != 0);
  if (v3 == 0x7FFFFFFF)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FGSess timer Not Req\n");
  }
  else
  {
    if (AgpsFsmStartTimer(0x820C06u, v3))
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      size_t v24 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 87, "GncS04_74UpdateScheduler", 1544, v3);
      int v25 = 2;
      return LbsOsaTrace_WriteLog(8u, __str, v24, v25, 1);
    }
    g_GncSFGClientData[0] = 1;
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Scheduler timer,%u\n");
  }
  size_t v24 = v22;
  int v25 = 5;
  return LbsOsaTrace_WriteLog(8u, __str, v24, v25, 1);
}

unint64_t GncS04_73FGPosTimerExpiry(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FG timer Expired\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "GncS04_73FGPosTimerExpiry");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  g_GncSFGClientData[0] = 0;
  return GncS04_72SendUpdates();
}

uint64_t GncS04_75HandleStopPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncS04_75HandleStopPos");
    LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
  }
  if (v6)
  {
    uint64_t v9 = 0;
    int v70 = *(unsigned __int16 *)(v6 + 12);
    for (char i = 1; ; char i = 0)
    {
      char v11 = i;
      unsigned int v12 = &g_GncSFGClientData[52 * v9 + 330918];
      if (*(unsigned __int16 *)v12 == *(unsigned __int16 *)(v6 + 12)) {
        break;
      }
      uint64_t v9 = 1;
      if ((v11 & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionNotFound ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncS04_75HandleStopPos", 2052, v70);
          LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
        }
        GncS04_21SendStopPosResp(1, v70);
        return 0;
      }
    }
    __int16 v18 = g_GncSConfig;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
    if ((IsLoggingAllowed & 1) != 0 || (v18 & 0x200) != 0)
    {
      bzero(v73, 0x400uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v71 = snprintf(v73, 0x400uLL, "$PDPST,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), v70);
      if (HswUtil_AddNmeaCS(v73, 0x400u, &v71))
      {
        if (IsLoggingAllowed) {
          LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)v73, v71);
        }
        if ((v18 & 0x200) != 0) {
          GncS04_07SndDbgNmea(v73, v71);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 69, "GncS04_09SndStopPosNmea", 772, v71);
        LbsOsaTrace_WriteLog(8u, __str, v22, 0, 1);
      }
    }
    uint64_t v23 = (unsigned __int8 *)&g_GncSFGClientData[52 * v9 + 330916];
    switch(*v23)
    {
      case 0u:
        goto LABEL_53;
      case 1u:
        __int16 v24 = *(_WORD *)v12;
        char __str[8] = 0;
        *(void *)std::string __str = 0;
        memset(&__str[20], 0, 27);
        __str[12] = 1;
        *(_WORD *)&__str[14] = v24;
        char __str[16] = 0;
        GncS03_07PosEventUpdate((long long *)__str);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Stopped ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNC", 77, "GncS04_75HandleStopPos", 2058, v70);
          LbsOsaTrace_WriteLog(8u, __str, v26, 3, 1);
        }
        if (byte_26AE02474)
        {
          if (AgpsFsmStopTimer(8523270) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v27 = mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 87, "GncS04_75HandleStopPos", 1545);
            LbsOsaTrace_WriteLog(8u, __str, v28, 2, 1);
          }
          byte_26AE02474 = 0;
        }
        *uint64_t v23 = 3;
        if (AgpsFsmStartTimer(0x820E06u, 0x258u))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v29 = mach_continuous_time();
            size_t v30 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 87, "GncS04_75HandleStopPos", 1544, 600);
            int v31 = 2;
LABEL_42:
            LbsOsaTrace_WriteLog(8u, __str, v30, v31, 1);
          }
        }
        else
        {
          byte_26AE02474 = 1;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v39 = mach_continuous_time();
            size_t v30 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessStopAck Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncS04_75HandleStopPos", 600);
            int v31 = 5;
            goto LABEL_42;
          }
        }
        uint64_t v40 = 0;
        char v41 = 1;
        do
        {
          unsigned int v42 = g_GncSFGClientData[52 * v40 + 330916] - 3;
          if ((v41 & 1) == 0) {
            break;
          }
          char v41 = 0;
          uint64_t v40 = 1;
        }
        while (v42 < 0xFFFFFFFE);
        if (v42 > 0xFFFFFFFD)
        {
          GncS04_74UpdateScheduler();
        }
        else if (g_GncSFGClientData[0])
        {
          if (AgpsFsmStopTimer(8522758) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v43 = mach_continuous_time();
            unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "GNC", 87, "GncS04_75HandleStopPos", 1545);
            LbsOsaTrace_WriteLog(8u, __str, v44, 2, 1);
          }
          g_GncSFGClientData[0] = 0;
        }
LABEL_53:
        uint64_t v45 = 0;
        char v46 = 1;
        int v47 = v70;
        do
        {
          char v48 = v46;
          uint64_t v49 = &g_GncSFGClientData[132 * v45];
          if (*((unsigned __int16 *)v49 + 15) == v47)
          {
            int v51 = v49[28];
            uint64_t v50 = v49 + 28;
            if (v51)
            {
              *(void *)uint64_t v50 = 0;
              *((void *)v50 + 1) = 0xFFFFFFFF00000000;
              *((void *)v50 + 2) = 0;
              *((void *)v50 + 3) = 0;
              *((_DWORD *)v50 + 8) = 7;
              *(void *)(v50 + 44) = 0;
              *(void *)(v50 + 36) = 0;
              *(void *)(v50 + 50) = 0;
              *((_WORD *)v50 + 29) = -1;
              *(_OWORD *)(v50 + 60) = xmmword_22BB455C0;
              *((_DWORD *)v50 + 19) = 0;
              *((_DWORD *)v50 + 20) = 0;
              *((_DWORD *)v50 + 21) = -1;
              *((_WORD *)v50 + 44) = 255;
              *(void *)(v50 + 90) = -1;
              *(_DWORD *)(v50 + 97) = -1;
              *(_WORD *)(v50 + 101) = 0;
              v50[103] = 0;
              *((void *)v50 + 13) = -1;
              *((void *)v50 + 14) = 0x7FFFFFFFLL;
              *((_DWORD *)v50 + 30) = -65536;
              *(void *)(v50 + 124) = 0xFFFFFFFF7FFFFFFFLL;
              int v52 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
              int v47 = v70;
              if (v52)
              {
                bzero(__str, 0x410uLL);
                uint64_t v53 = mach_continuous_time();
                unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GadCacheFreed ID,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNC", 73, "GncS04_75HandleStopPos", v70, v45);
                LbsOsaTrace_WriteLog(8u, __str, v54, 4, 1);
                int v47 = v70;
              }
            }
          }
          char v46 = 0;
          uint64_t v45 = 1;
        }
        while ((v48 & 1) != 0);
        char v55 = 0;
        uint64_t v56 = 0;
        do
        {
          char v57 = v55;
          unsigned __int16 v58 = &g_GncSFGClientData[165312 * v56];
          if (*((unsigned __int16 *)v58 + 147) == v47)
          {
            unint64_t v59 = v58 + 292;
            if (v58[292])
            {
              bzero(__str, 0x285C0uLL);
              *(_DWORD *)&char __str[8] = -1;
              *(void *)&char __str[16] = 0;
              char __str[24] = 0;
              *(void *)&__str[28] = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v60 = 46;
              *(_WORD *)&__str[36] = -1;
              do
              {
                int v61 = &__str[v60];
                *int v61 = -1;
                *(void *)(v61 + 1) = 0;
                v61[9] = 0;
                v60 += 10;
              }
              while (v61 + 10 != &__str[686]);
              *(void *)&__str[688] = 0xFFFFFFFF00000000;
              __str[696] = -1;
              *(void *)&__str[700] = -1;
              *(void *)&__str[708] = 0x7FFFFFFFLL;
              __str[716] = 0;
              *(_WORD *)&__str[718] = -1;
              *(void *)&__str[720] = 0xFFFFFFFF7FFFFFFFLL;
              int v62 = &__str[732];
              __str[728] = 0;
              do
              {
                *(_DWORD *)int v62 = 0;
                v62[4] = 0;
                int v63 = v62 + 8;
                v62 += 10280;
                do
                {
                  *(_WORD *)int v63 = 0;
                  v63[2] = 0;
                  long long v64 = v63 + 4;
                  v63 += 1284;
                  do
                  {
                    *long long v64 = -1;
                    *((_DWORD *)v64 + 2) = 0;
                    *((_WORD *)v64 + 6) = 0;
                    *((_DWORD *)v64 + 4) = 0;
                    *(_DWORD *)(v64 + 1) = 0;
                    v64[5] = 0;
                    v64 += 20;
                  }
                  while (v64 != v63);
                }
                while (v63 != v62);
              }
              while (v62 != &__str[165212]);
              __str[165212] = 0;
              *(void *)&__str[165216] = 0x700000000;
              *(void *)&__str[165224] = 0;
              *(void *)&__str[165232] = 0;
              *(void *)&__str[165238] = 0;
              *(_WORD *)&__str[165246] = -1;
              __str[165248] = 0;
              *(_DWORD *)&__str[165252] = 0;
              *(void *)&__str[165256] = -1;
              *(_DWORD *)&__str[165264] = 0;
              *(_DWORD *)&__str[165268] = 0;
              *(_DWORD *)&__str[165272] = -1;
              __str[165276] = -1;
              *(_DWORD *)&__str[165278] = -1;
              *(_WORD *)&__str[165282] = -1;
              *(void *)&__str[165284] = 0;
              __str[165292] = 127;
              *(_WORD *)&__str[165294] = 0;
              *(_DWORD *)&__str[165296] = 0;
              __str[165300] = 0;
              *(_DWORD *)&__str[165304] = 0;
              *(_WORD *)&__str[165308] = 0;
              memcpy(v59, __str, 0x285C0uLL);
              int v65 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
              int v47 = v70;
              if (v65)
              {
                bzero(__str, 0x410uLL);
                uint64_t v66 = mach_continuous_time();
                unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasCacheFreed ID,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "GNC", 73, "GncS04_75HandleStopPos", v70, v56);
                LbsOsaTrace_WriteLog(8u, __str, v67, 4, 1);
                int v47 = v70;
              }
            }
          }
          char v55 = 1;
          uint64_t v56 = 1;
        }
        while ((v57 & 1) == 0);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v68 = mach_continuous_time();
          size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: InstanceCount,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "GNC", 68, "GncS04_75HandleStopPos", byte_26AE0247C);
          int v17 = 5;
          goto LABEL_75;
        }
        return 0;
      case 2u:
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionNotActive ID,%u,State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 87, "GncS04_75HandleStopPos", 2050, v70, *v23);
          LbsOsaTrace_WriteLog(8u, __str, v36, 2, 1);
        }
        __int16 v37 = *(_WORD *)v12;
        char __str[8] = 0;
        *(void *)std::string __str = 0;
        memset(&__str[20], 0, 27);
        __str[12] = 1;
        *(_WORD *)&__str[14] = v37;
        char __str[16] = 0;
        GncS03_07PosEventUpdate((long long *)__str);
        GncS04_05DeRegClient(v9);
        GncS04_21SendStopPosResp(0, v70);
        goto LABEL_53;
      case 3u:
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v38 = mach_continuous_time();
          size_t v33 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: StopAckPending ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 73, "GncS04_75HandleStopPos", v70);
          int v34 = 4;
          goto LABEL_39;
        }
        goto LABEL_53;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v32 = mach_continuous_time();
          size_t v33 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 87, "GncS04_75HandleStopPos", 770);
          int v34 = 2;
LABEL_39:
          LbsOsaTrace_WriteLog(8u, __str, v33, v34, 1);
        }
        goto LABEL_53;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 69, "GncS04_75HandleStopPos", 517);
    int v17 = 0;
LABEL_75:
    LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
  }
  return 0;
}

void GncS04_21SendStopPosResp(int a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = gnssOsa_Calloc("GncS04_21SendStopPosResp", 424, 1, 0x10uLL);
  if (v4)
  {
    char v5 = v4;
    *((_WORD *)v4 + 6) = a2;
    v4[14] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_RSP =>GNM ID,%hu,Code,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncS04_21SendStopPosResp", a2, a1);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(130, 128, 8519940, v5);
  }
}

uint64_t GncS04_05DeRegClient(unsigned int a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!byte_26AE0247C)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: InstanceCount,%u\n");
    return LbsOsaTrace_WriteLog(8u, __str, v2, 2, 1);
  }
  if (a1 >= 2)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
LABEL_12:
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Handle,%u\n", v7);
    return LbsOsaTrace_WriteLog(8u, __str, v2, 2, 1);
  }
  uint64_t v4 = &g_GncSFGClientData[52 * a1 + 330916];
  if (!*v4)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_12;
  }
  --byte_26AE0247C;
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: InstanceCount,%u,DeRegSessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncS04_05DeRegClient", byte_26AE0247C, *(unsigned __int16 *)&g_GncSFGClientData[52 * a1 + 330918]);
    uint64_t result = LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
  }
  *(_DWORD *)(v4 + 47) = 0;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  return result;
}

uint64_t GncS04_76HandleStartPos(uint64_t a1)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS04_76HandleStartPos");
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "GncS04_76HandleStartPos", 517);
    int v15 = 0;
    goto LABEL_14;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  char v6 = 1;
  do
  {
    char v7 = v6;
    if (*(unsigned __int16 *)&g_GncSFGClientData[52 * v4 + 330918] == *(unsigned __int16 *)(a1 + 12))
    {
      if (*(unsigned char *)(a1 + 14))
      {
        if (*(unsigned char *)(a1 + 14))
        {
          unsigned int v16 = *(_DWORD *)(a1 + 32);
          if (*(unsigned char *)(a1 + 15) == 2 && v16 > *(_DWORD *)(a1 + 36))
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FixInterval,%u,ResponseTime,%u\n", v17);
LABEL_58:
              int v40 = 1;
              LbsOsaTrace_WriteLog(8u, __str, v18, 2, 1);
LABEL_109:
              int v21 = *(unsigned __int16 *)(a1 + 12);
              int v22 = v40;
              goto LABEL_110;
            }
            goto LABEL_59;
          }
          if (v16 - 1 <= 0x62)
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FixInterval,%u,MinSupportedInt,%u\n", v29);
              goto LABEL_58;
            }
LABEL_59:
            int v40 = 1;
            goto LABEL_109;
          }
        }
        if ((*(unsigned char *)(a1 + 14) & 2) != 0 && g_GncSFGClientData[52 * v4 + 330920])
        {
          int v30 = *(_DWORD *)(a1 + 36);
          if (!v30) {
            int v30 = 1000;
          }
          int v31 = &g_GncSFGClientData[52 * v4 + 330944];
          *(_DWORD *)int v31 = v30;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v32 = mach_continuous_time();
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated RespTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 73, "GncS04_32HandleSessionModifyReq", *(_DWORD *)v31);
            int v34 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v33, 4, 1);
          }
          else
          {
            int v34 = 1;
          }
        }
        else
        {
          int v34 = 0;
        }
        if (*(unsigned char *)(a1 + 14))
        {
          int v35 = 1000;
          if (*(_DWORD *)(a1 + 32))
          {
            if (g_GncSFGClientData[52 * v4 + 330920] == 1) {
              int v35 = 1000;
            }
            else {
              int v35 = *(_DWORD *)(a1 + 32);
            }
          }
          unsigned __int16 v36 = &g_GncSFGClientData[52 * v4 + 330940];
          *(_DWORD *)unsigned __int16 v36 = v35;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v37 = mach_continuous_time();
            unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated FixInterval,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 73, "GncS04_32HandleSessionModifyReq", *(_DWORD *)v36);
            int v34 = 1;
            LbsOsaTrace_WriteLog(8u, __str, v38, 4, 1);
          }
          else
          {
            int v34 = 1;
          }
        }
        if ((*(unsigned char *)(a1 + 14) & 4) != 0)
        {
          char v41 = (unsigned __int8 *)&g_GncSFGClientData[52 * v4 + 330948];
          int v42 = *(unsigned __int8 *)(a1 + 48);
          if (*v41 != v42)
          {
            *char v41 = v42;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v43 = mach_continuous_time();
              unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated PosOutput,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "GNC", 73, "GncS04_32HandleSessionModifyReq", *v41);
              int v34 = 1;
              LbsOsaTrace_WriteLog(8u, __str, v44, 4, 1);
            }
            else
            {
              int v34 = 1;
            }
          }
        }
        if ((*(unsigned char *)(a1 + 14) & 8) != 0)
        {
          int v47 = (unsigned __int8 *)&g_GncSFGClientData[52 * v4 + 330949];
          int v48 = *(unsigned __int8 *)(a1 + 50);
          if (*v47 != v48)
          {
            *int v47 = v48;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v49 = mach_continuous_time();
              unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated ConstMask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "GNC", 73, "GncS04_32HandleSessionModifyReq", *v47);
              int v34 = 1;
              LbsOsaTrace_WriteLog(8u, __str, v50, 4, 1);
            }
            else
            {
              int v34 = 1;
            }
          }
        }
        if ((*(unsigned char *)(a1 + 14) & 0x10) == 0)
        {
LABEL_86:
          if ((*(unsigned char *)(a1 + 14) & 0x20) != 0)
          {
            char v55 = (unsigned __int16 *)&g_GncSFGClientData[52 * v4 + 330950];
            int v56 = *(unsigned __int16 *)(a1 + 44);
            if (*v55 != v56)
            {
              *char v55 = v56;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v57 = mach_continuous_time();
                unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated HorAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "GNC", 73, "GncS04_32HandleSessionModifyReq", *v55);
                int v34 = 1;
                LbsOsaTrace_WriteLog(8u, __str, v58, 4, 1);
              }
              else
              {
                int v34 = 1;
              }
            }
          }
          char v59 = *(unsigned char *)(a1 + 14);
          if ((v59 & 0x40) != 0)
          {
            uint64_t v60 = (unsigned __int16 *)&g_GncSFGClientData[52 * v4 + 330952];
            int v61 = *(unsigned __int16 *)(a1 + 46);
            if (*v60 != v61)
            {
              *uint64_t v60 = v61;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v62 = mach_continuous_time();
                unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated VertAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "GNC", 73, "GncS04_32HandleSessionModifyReq", *v60);
                int v34 = 1;
                LbsOsaTrace_WriteLog(8u, __str, v63, 4, 1);
              }
              else
              {
                int v34 = 1;
              }
            }
            char v59 = *(unsigned char *)(a1 + 14);
          }
          if ((v59 & 0x80) == 0) {
            goto LABEL_104;
          }
          long long v64 = &g_GncSFGClientData[52 * v4 + 330960];
          int v65 = *(_DWORD *)(a1 + 40);
          if (*(_DWORD *)v64 == v65 || !*(unsigned char *)(a1 + 15)) {
            goto LABEL_104;
          }
          *(_DWORD *)long long v64 = v65;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v70 = mach_continuous_time();
            unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated AgeLimit,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "GNC", 73, "GncS04_32HandleSessionModifyReq", *(_DWORD *)v64);
            LbsOsaTrace_WriteLog(8u, __str, v71, 4, 1);
          }
          if (*(_DWORD *)v64 && !g_GncSFGClientData[52 * v4 + 330964])
          {
            BOOL v78 = GncS04_71CheckAgeLimitCond(v5, v4, v66, v67, v68, v69);
            char v79 = &g_GncSFGClientData[52 * v4 + 330916];
            *((_DWORD *)v79 + 2) = v5;
            *((_DWORD *)v79 + 10) = v5;
            if (v78) {
              goto LABEL_105;
            }
          }
          else
          {
LABEL_104:
            BOOL v72 = &g_GncSFGClientData[52 * v4 + 330916];
            *((_DWORD *)v72 + 2) = v5;
            *((_DWORD *)v72 + 10) = v5;
            if (v34)
            {
LABEL_105:
              if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v73 = mach_continuous_time();
                unsigned __int16 v74 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionUpdted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "GNC", 77, "GncS04_32HandleSessionModifyReq", 2059);
                LbsOsaTrace_WriteLog(8u, __str, v74, 3, 1);
              }
              GncS04_20SendUpdateToGncpe((uint64_t)&g_GncSFGClientData[52 * v4 + 330916]);
              GncS04_74UpdateScheduler();
            }
          }
          GncS04_08SndStartPosNmea((uint64_t)&g_GncSFGClientData[52 * v4 + 330916]);
          int v40 = 255;
          goto LABEL_109;
        }
        int v51 = *(unsigned __int16 *)(a1 + 28);
        if (*(_WORD *)(a1 + 28))
        {
          if (!g_GncSFGClientData[52 * v4 + 330920])
          {
LABEL_83:
            int v52 = &g_GncSFGClientData[52 * v4 + 330936];
            *(_DWORD *)int v52 = v51;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v53 = mach_continuous_time();
              unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Updated NumReports,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNC", 73, "GncS04_32HandleSessionModifyReq", *(_DWORD *)v52);
              int v34 = 1;
              LbsOsaTrace_WriteLog(8u, __str, v54, 4, 1);
            }
            else
            {
              int v34 = 1;
            }
            goto LABEL_86;
          }
        }
        else if (!g_GncSFGClientData[52 * v4 + 330920])
        {
          int v51 = -1;
          goto LABEL_83;
        }
        int v51 = 1;
        goto LABEL_83;
      }
      if (g_GncSFGClientData[52 * v4 + 330916] != 2)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ID,%u,ReqRcvd,%u\n", v39);
          goto LABEL_58;
        }
        goto LABEL_59;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
        return 0;
      }
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartAckPending ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncS04_76HandleStartPos", 2053, *(unsigned __int16 *)(a1 + 12));
      int v15 = 4;
LABEL_14:
      LbsOsaTrace_WriteLog(8u, __str, v14, v15, 1);
      return 0;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  uint64_t v8 = 0;
  char v9 = 1;
  while (1)
  {
    char v10 = v9;
    char v11 = &g_GncSFGClientData[52 * v8 + 330916];
    if (!*v11) {
      break;
    }
    char v9 = 0;
    uint64_t v8 = 1;
    if ((v10 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
        goto LABEL_24;
      }
      goto LABEL_25;
    }
  }
  if (byte_26AE0247C <= 1u)
  {
    ++byte_26AE0247C;
    *char v11 = 1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: InstanceCount,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncS04_76HandleStartPos", byte_26AE0247C);
      LbsOsaTrace_WriteLog(8u, __str, v25, 4, 1);
    }
    if (*(unsigned char *)(a1 + 14))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
LABEL_38:
        GncS04_05DeRegClient(v8);
        int v21 = *(unsigned __int16 *)(a1 + 12);
        int v22 = 1;
        goto LABEL_110;
      }
      bzero(__str, 0x410uLL);
      unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v133 = *(unsigned __int16 *)(a1 + 12);
      uint64_t v134 = *(unsigned __int8 *)(a1 + 14);
      uint64_t v132 = 515;
      uint64_t v27 = "%10u %s%c %s: #%04hx SessionID,%u,ReqType,%u\n";
      goto LABEL_36;
    }
    if (!*(unsigned char *)(a1 + 48))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_38;
      }
      bzero(__str, 0x410uLL);
      unint64_t v131 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OutputType,%u\n", v131);
      goto LABEL_37;
    }
    unsigned int v45 = *(_DWORD *)(a1 + 24);
    int v46 = *(unsigned __int8 *)(a1 + 15);
    if (v45)
    {
      if (*(unsigned char *)(a1 + 15))
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_38;
        }
        bzero(__str, 0x410uLL);
        unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v133 = *(unsigned __int8 *)(a1 + 15);
        uint64_t v134 = *(unsigned int *)(a1 + 24);
        uint64_t v132 = 515;
        uint64_t v27 = "%10u %s%c %s: #%04hx SessType,%hhu,StopTime,%u\n";
        goto LABEL_36;
      }
      if (v45 <= *(_DWORD *)(a1 + 20))
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_38;
        }
        bzero(__str, 0x410uLL);
        unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v133 = *(unsigned int *)(a1 + 20);
        uint64_t v134 = *(unsigned int *)(a1 + 24);
        uint64_t v132 = 515;
        uint64_t v27 = "%10u %s%c %s: #%04hx StartTime,%u,StopTime,%u\n";
        goto LABEL_36;
      }
      int v76 = 0;
    }
    else
    {
      int v76 = *(unsigned __int8 *)(a1 + 15);
      if (v46 == 2)
      {
        unsigned int v77 = *(_DWORD *)(a1 + 32);
        if (v77 > *(_DWORD *)(a1 + 36))
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_38;
          }
          bzero(__str, 0x410uLL);
          unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v133 = *(unsigned int *)(a1 + 32);
          uint64_t v134 = *(unsigned int *)(a1 + 36);
          uint64_t v132 = 514;
          uint64_t v27 = "%10u %s%c %s: #%04hx FixInterval,%u,ResponseTime,%u\n";
          goto LABEL_36;
        }
        int v76 = 2;
LABEL_127:
        if (v77 - 1 <= 0x62)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_38;
          }
          bzero(__str, 0x410uLL);
          unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v133 = *(unsigned int *)(a1 + 32);
          uint64_t v134 = 100;
          uint64_t v132 = 514;
          uint64_t v27 = "%10u %s%c %s: #%04hx FixInterval,%u,MinSupportedInt,%u\n";
LABEL_36:
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, v27, v26, "GNC", 87, "GncS04_23ChkStartPosParams", v132, v133, v134);
LABEL_37:
          LbsOsaTrace_WriteLog(8u, __str, v28, 2, 1);
          goto LABEL_38;
        }
        if (!v76 && *(_DWORD *)(a1 + 40))
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v80 = mach_continuous_time();
            unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AgeLimit,%u,SessionType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "GNC", 87, "GncS04_23ChkStartPosParams", 515, *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 15));
            LbsOsaTrace_WriteLog(8u, __str, v81, 2, 1);
          }
          *(_DWORD *)(a1 + 40) = 0;
          int v46 = *(unsigned __int8 *)(a1 + 15);
        }
        if (*(unsigned char *)(a1 + 16) && !v46)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v82 = mach_continuous_time();
            unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WaitToTimeout,%u,SessionType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "GNC", 87, "GncS04_23ChkStartPosParams", 515, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 15));
            LbsOsaTrace_WriteLog(8u, __str, v83, 2, 1);
          }
          *(unsigned char *)(a1 + 16) = 0;
          int v46 = *(unsigned __int8 *)(a1 + 15);
        }
        __int16 v84 = *(_WORD *)(a1 + 12);
        int v85 = 1000 * *(_DWORD *)(a1 + 20);
        *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330928] = v85;
        unsigned __int16 v86 = &g_GncSFGClientData[52 * v8 + 330928];
        *(_WORD *)&g_GncSFGClientData[52 * v8 + 330918] = v84;
        char v137 = (unsigned __int16 *)&g_GncSFGClientData[52 * v8 + 330918];
        *((_DWORD *)v86 - 1) = v5;
        *((_DWORD *)v86 + 7) = v5;
        g_GncSFGClientData[52 * v8 + 330920] = v46;
        int v139 = (unsigned __int8 *)&g_GncSFGClientData[52 * v8 + 330920];
        int v87 = *(unsigned __int16 *)(a1 + 28);
        if (*(_WORD *)(a1 + 28))
        {
          if (!v46)
          {
LABEL_145:
            int v88 = *(_DWORD *)(a1 + 32);
            if (v46 == 1 || v88 == 0) {
              int v88 = 1000;
            }
            *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330940] = v88;
            *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330936] = v87;
            int v90 = *(_DWORD *)(a1 + 24);
            if (v90)
            {
              if (!v46)
              {
                int v91 = 1000 * v90;
                long long v92 = &g_GncSFGClientData[52 * v8];
                unsigned __int16 v93 = 3252;
                goto LABEL_156;
              }
            }
            else if (!v46)
            {
              goto LABEL_158;
            }
            int v94 = *(_DWORD *)(a1 + 36);
            if (!v94)
            {
              *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330944] = 1000;
LABEL_158:
              char v95 = *(unsigned char *)(a1 + 54);
              unsigned __int16 v135 = &g_GncSFGClientData[52 * v8];
              v135[330965] = *(unsigned char *)(a1 + 49) != 0;
              v135[330966] = v95;
              v135[330948] = *(unsigned char *)(a1 + 48);
              uint64_t v136 = (unsigned __int8 *)(v135 + 330948);
              v135[330949] = *(unsigned char *)(a1 + 50);
              *(_DWORD *)(v135 + 330950) = *(_DWORD *)(a1 + 44);
              *((_DWORD *)v135 + 82740) = *(_DWORD *)(a1 + 40);
              uint64_t v138 = v135 + 330960;
              v135[330964] = *(unsigned char *)(a1 + 16);
              long long v96 = (unsigned __int8 *)(v135 + 330964);
              if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v97 = mach_continuous_time();
                unsigned __int16 v98 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ID,%u,Type,%hhu,NumFix,%d,FixInt,%u,Age,%u,PrefFtaMeasTime,%u,StartTm,%u,StopTm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v97), "GNC", 77, "GncS04_24StoreSessParams", 2057, *v137, *v139, *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330936], *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330940], *v138, v135[330966], *(_DWORD *)v86, *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330932]);
                LbsOsaTrace_WriteLog(8u, __str, v98, 3, 1);
              }
              if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v103 = mach_continuous_time();
                unsigned __int16 v104 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespTime,%u,HAcc,%u,VAcc,%u,Output,%u,ConstMask,%u,WaitTO,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "GNC", 77, "GncS04_24StoreSessParams", 2057, *(_DWORD *)&g_GncSFGClientData[52 * v8 + 330944], *((unsigned __int16 *)v135 + 165475), *((unsigned __int16 *)v135 + 165476), *v136, v135[330949], *v96);
                LbsOsaTrace_WriteLog(8u, __str, v104, 3, 1);
              }
              BOOL v105 = !*v138 || *v96 || GncS04_71CheckAgeLimitCond(v5, v8, v99, v100, v101, v102);
              if (*v139 && v135[330965])
              {
                if ((*v136 & 2) != 0)
                {
                  uint64_t v111 = 0;
                  char v112 = 1;
                  while (1)
                  {
                    char v113 = v112;
                    char v114 = &g_GncSFGClientData[132 * v111];
                    int v116 = v114[28];
                    uint64_t v115 = v114 + 28;
                    if (!v116) {
                      break;
                    }
                    char v112 = 0;
                    uint64_t v111 = 1;
                    if ((v113 & 1) == 0)
                    {
                      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
                        goto LABEL_188;
                      }
                      bzero(__str, 0x410uLL);
                      mach_continuous_time();
                      unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GadCache NA\n");
LABEL_180:
                      size_t v117 = v110;
                      int v118 = 2;
                      goto LABEL_187;
                    }
                  }
                  *uint64_t v115 = 1;
                  uint64_t v119 = &g_GncSFGClientData[132 * v111];
                  *((_WORD *)v119 + 15) = *v137;
                  v119 += 30;
                  *(void *)(v119 + 6) = 0xFFFFFFFF00000000;
                  *(void *)(v119 + 22) = 0;
                  *(void *)(v119 + 14) = 0;
                  *(_DWORD *)(v119 + 30) = 7;
                  *(void *)(v119 + 42) = 0;
                  *(void *)(v119 + 34) = 0;
                  *((void *)v119 + 6) = 0;
                  *((_WORD *)v119 + 28) = -1;
                  *(_OWORD *)(v119 + 58) = xmmword_22BB455C0;
                  *(void *)(v119 + 74) = 0;
                  *(_DWORD *)(v119 + 82) = -1;
                  *((_WORD *)v119 + 43) = 255;
                  *((void *)v119 + 11) = -1;
                  *(_DWORD *)(v119 + 95) = -1;
                  v119[101] = 0;
                  *(_WORD *)(v119 + 99) = 0;
                  *(void *)(v119 + 102) = -1;
                  *(void *)(v119 + 110) = 0x7FFFFFFFLL;
                  *(_DWORD *)(v119 + 118) = -65536;
                  *(void *)(v119 + 122) = 0xFFFFFFFF7FFFFFFFLL;
                  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
                    goto LABEL_188;
                  }
                  bzero(__str, 0x410uLL);
                  mach_continuous_time();
                  unsigned __int16 v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GadCacheUsed ID,%u\n");
                }
                else
                {
                  if ((*v136 & 4) == 0) {
                    goto LABEL_188;
                  }
                  uint64_t v106 = 0;
                  char v107 = 1;
                  while (1)
                  {
                    char v108 = v107;
                    int v109 = &g_GncSFGClientData[165312 * v106];
                    if (!v109[292]) {
                      break;
                    }
                    char v107 = 0;
                    uint64_t v106 = 1;
                    if ((v108 & 1) == 0)
                    {
                      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
                        goto LABEL_188;
                      }
                      bzero(__str, 0x410uLL);
                      mach_continuous_time();
                      unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasCache NA\n");
                      goto LABEL_180;
                    }
                  }
                  v109[292] = 1;
                  unsigned __int16 v121 = &g_GncSFGClientData[165312 * v106];
                  *((_DWORD *)v121 + 74) = 0;
                  *((_WORD *)v121 + 147) = *v137;
                  *((void *)v121 + 20697) = 0;
                  v121[165584] = 127;
                  *(void *)(v121 + 165593) = 0;
                  *(void *)(v121 + 165585) = 0;
                  v121[165601] = 0;
                  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
                    goto LABEL_188;
                  }
                  bzero(__str, 0x410uLL);
                  mach_continuous_time();
                  unsigned __int16 v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeasCacheUsed ID,%u\n");
                }
                size_t v117 = v120;
                int v118 = 4;
LABEL_187:
                LbsOsaTrace_WriteLog(8u, __str, v117, v118, 1);
              }
LABEL_188:
              if (!v105) {
                return 0;
              }
              *char v11 = 2;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v122 = mach_continuous_time();
                unsigned __int16 v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartAckPending ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "GNC", 73, "GncS04_76HandleStartPos", *v137);
                LbsOsaTrace_WriteLog(8u, __str, v123, 4, 1);
              }
              if (byte_26AE0246C)
              {
                if (AgpsFsmStopTimer(8523014) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v124 = mach_continuous_time();
                  unsigned __int16 v125 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v124), "GNC", 87, "GncS04_76HandleStartPos", 1545);
                  LbsOsaTrace_WriteLog(8u, __str, v125, 2, 1);
                }
                byte_26AE0246C = 0;
              }
              if (AgpsFsmStartTimer(0x820D06u, 0x3E8u))
              {
                if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v126 = mach_continuous_time();
                  size_t v127 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "GNC", 87, "GncS04_76HandleStartPos", 1544, 1000);
                  int v128 = 2;
LABEL_201:
                  LbsOsaTrace_WriteLog(8u, __str, v127, v128, 1);
                }
              }
              else
              {
                byte_26AE0246C = 1;
                if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v129 = mach_continuous_time();
                  size_t v127 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessStartAck Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "GNC", 68, "GncS04_76HandleStartPos", 1000);
                  int v128 = 5;
                  goto LABEL_201;
                }
              }
              GncS04_20SendUpdateToGncpe((uint64_t)v11);
              GncS04_74UpdateScheduler();
              GncS04_08SndStartPosNmea((uint64_t)v11);
              return 0;
            }
            int v91 = v94 + v85;
            long long v92 = &g_GncSFGClientData[52 * v8];
            unsigned __int16 v93 = 3264;
LABEL_156:
            *(_DWORD *)&v92[v93 | 0x50000] = v91;
            goto LABEL_158;
          }
        }
        else if (!v46)
        {
          int v87 = -1;
          goto LABEL_145;
        }
        int v87 = 1;
        goto LABEL_145;
      }
    }
    unsigned int v77 = *(_DWORD *)(a1 + 32);
    goto LABEL_127;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v130 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: InstanceCount,%u,Max,%lu\n", v130);
LABEL_24:
    LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
  }
LABEL_25:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 87, "GncS04_76HandleStartPos", 2049);
    LbsOsaTrace_WriteLog(8u, __str, v20, 2, 1);
  }
  int v21 = *(unsigned __int16 *)(a1 + 12);
  int v22 = 0;
LABEL_110:
  GncS04_22SendStartPosResp(v22, v21);
  return 0;
}

uint64_t GncS04_78HandlePosEstimateReq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  v28[745] = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NO_COST_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncS04_78HandlePosEstimateReq");
    LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
  }
  if (v6)
  {
    char v9 = (unsigned __int8 *)gnssOsa_Calloc("GncS04_78HandlePosEstimateReq", 2891, 1, 0x20uLL);
    if (!v9) {
      return 0;
    }
    char v10 = v9;
    char v11 = gnssOsa_Calloc("GncS04_78HandlePosEstimateReq", 2897, 1, 0x1738uLL);
    *((void *)v10 + 3) = v11;
    if (!v11)
    {
      free(v10);
      return 0;
    }
    *(_DWORD *)std::string __str = 0;
    v28[0] = 0;
    *(_DWORD *)((char *)v28 + 7) = 0;
    *(void *)((char *)&v28[2] + 4) = 0;
    *(void *)((char *)&v28[1] + 4) = 0;
    WORD2(v28[3]) = 0;
    memset(&v28[4], 0, 262);
    bzero(&v28[37], 0x28CuLL);
    for (uint64_t i = 956; i != 1340; i += 3)
    {
      uint64_t v13 = &__str[i];
      char v14 = __str[i + 2];
      *(_WORD *)uint64_t v13 = 0;
      __n128 v13[2] = v14 & 0xE0;
    }
    *(_OWORD *)((char *)&v28[194] + 4) = 0u;
    *(_OWORD *)((char *)&v28[196] + 4) = 0u;
    *(_OWORD *)((char *)&v28[190] + 4) = 0u;
    *(_OWORD *)((char *)&v28[192] + 4) = 0u;
    *(_OWORD *)((char *)&v28[186] + 4) = 0u;
    *(_OWORD *)((char *)&v28[188] + 4) = 0u;
    *(_OWORD *)((char *)&v28[182] + 4) = 0u;
    *(_OWORD *)((char *)&v28[184] + 4) = 0u;
    *(_OWORD *)((char *)&v28[178] + 4) = 0u;
    *(_OWORD *)((char *)&v28[180] + 4) = 0u;
    *(_OWORD *)((char *)&v28[174] + 4) = 0u;
    *(_OWORD *)((char *)&v28[176] + 4) = 0u;
    *(_OWORD *)((char *)&v28[170] + 4) = 0u;
    *(_OWORD *)((char *)&v28[172] + 4) = 0u;
    *(_OWORD *)((char *)&v28[166] + 4) = 0u;
    *(_OWORD *)((char *)&v28[168] + 4) = 0u;
    bzero(&v28[199], 0x1109uLL);
    GncP_GetNavData((uint64_t)__str);
    if (WORD2(v28[1]) > 0x7BBu)
    {
      int v20 = *(_DWORD *)__str;
      unsigned int v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v20;
      *((_DWORD *)v10 + 4) = *(_DWORD *)__str;
      *((_DWORD *)v10 + 5) = v21;
      if (v21 < 0x5265C00)
      {
        v10[12] = 1;
        memcpy(*((void **)v10 + 3), v28, 0x1738uLL);
        goto LABEL_20;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(v26, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        size_t v16 = (unsigned __int16)snprintf(v26, 0x40FuLL, "%10u %s%c %s: #%04hx PosAge,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 73, "GncS04_78HandlePosEstimateReq", 772, *((_DWORD *)v10 + 5));
        int v17 = 4;
        goto LABEL_17;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(v26, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      size_t v16 = (unsigned __int16)snprintf(v26, 0x40FuLL, "%10u %s%c %s: InvalidNav\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncS04_78HandlePosEstimateReq");
      int v17 = 2;
LABEL_17:
      LbsOsaTrace_WriteLog(8u, v26, v16, v17, 1);
    }
    v10[12] = 0;
LABEL_20:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(v26, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(v26, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NO_COST_POS_RSP =>GNM Valid,%u,Age,%u,PosTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncS04_78HandlePosEstimateReq", v10[12], *((_DWORD *)v10 + 5), *((_DWORD *)v10 + 4));
      LbsOsaTrace_WriteLog(8u, v26, v24, 4, 1);
    }
    AgpsSendFsmMsg(130, 128, 8521220, v10);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 69, "GncS04_78HandlePosEstimateReq", 517);
    LbsOsaTrace_WriteLog(8u, __str, v19, 0, 1);
  }
  return 0;
}

uint64_t GncS04_80HandleCfgUpdtInd(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    char v1 = *(unsigned char *)(a1 + 12);
    if (v1) {
      LOWORD(g_GncSConfig) = *(_WORD *)(a1 + 14);
    }
    if ((v1 & 2) != 0) {
      HIWORD(g_GncSConfig) = *(_WORD *)(a1 + 16);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDT_IND NmeaMask,%u,MEUpdtRate,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS04_80HandleCfgUpdtInd", (unsigned __int16)g_GncSConfig, HIWORD(g_GncSConfig));
      int v4 = 4;
LABEL_10:
      LbsOsaTrace_WriteLog(8u, __str, v3, v4, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncS04_80HandleCfgUpdtInd", 517);
    int v4 = 0;
    goto LABEL_10;
  }
  return 0;
}

uint64_t GncS04_82HandlePosEvntResp(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT_RSP Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncS04_82HandlePosEvntResp", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    switch(*(unsigned char *)(a1 + 12))
    {
      case 1:
      case 3:
        size_t v4 = 255;
        goto LABEL_10;
      case 2:
      case 7:
        return 0;
      case 4:
      case 5:
        size_t v4 = 2;
LABEL_10:
        GncS04_31ChkSendPendingStopAck(v4);
        return 0;
      case 6:
      case 8:
        int v8 = 255;
        goto LABEL_15;
      case 9:
        int v8 = 0;
LABEL_15:
        GncS04_35ChkSendPendingStartAck(v8);
        return 0;
      default:
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          return 0;
        }
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncS04_82HandlePosEvntResp", 770, *(unsigned __int8 *)(a1 + 12));
        int v7 = 2;
        break;
    }
    goto LABEL_8;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncS04_82HandlePosEvntResp", 517);
    int v7 = 0;
LABEL_8:
    LbsOsaTrace_WriteLog(8u, __str, v6, v7, 1);
  }
  return 0;
}

void GncS04_99DeInitFGClientInstance(void)
{
  if (g_GncSFGClientData[0]) {
    AgpsFsmStopTimer(8522758);
  }
  if (byte_26AE02474) {
    AgpsFsmStopTimer(8523270);
  }
  if (byte_26AE0246C)
  {
    AgpsFsmStopTimer(8523014);
  }
}

void s_GncS_FGClientData::s_GncS_FGClientData(s_GncS_FGClientData *this)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + 24) = 0;
  char v1 = (char *)this + 292;
  uint64_t v2 = 28;
  do
  {
    unsigned __int16 v3 = (char *)this + v2;
    *unsigned __int16 v3 = 0;
    *((_WORD *)v3 + 1) = 0;
    *(void *)(v3 + 4) = 0;
    *((_DWORD *)v3 + 3) = -1;
    *((_WORD *)v3 + 8) = 0;
    *(_OWORD *)(v3 + 20) = xmmword_22BB0C140;
    *(void *)(v3 + 44) = 0;
    *(void *)(v3 + 36) = 0;
    *(void *)(v3 + 50) = 0;
    *((_WORD *)v3 + 29) = -1;
    v3[60] = 0;
    *((_DWORD *)v3 + 16) = 0;
    *(void *)(v3 + 68) = -1;
    *(void *)(v3 + 76) = 0;
    *((_DWORD *)v3 + 21) = -1;
    v3[88] = -1;
    *((void *)v3 + 13) = -1;
    *(_DWORD *)(v3 + 97) = -1;
    *(void *)(v3 + 90) = -1;
    *((void *)v3 + 14) = 0x7FFFFFFFLL;
    v3[120] = 0;
    v2 += 132;
    *((_WORD *)v3 + 61) = -1;
    *(void *)(v3 + 124) = 0xFFFFFFFF7FFFFFFFLL;
  }
  while (v3 + 132 != v1);
  uint64_t v4 = 338;
  do
  {
    uint64_t v5 = v1 + 165212;
    *char v1 = 0;
    *((_WORD *)v1 + 1) = 0;
    *(void *)(v1 + 4) = 0xFFFFFFFF00000000;
    v1[12] = 0;
    *((void *)v1 + 2) = 0;
    v1[24] = 0;
    *(void *)(v1 + 28) = 0x7FFFFFFFFFFFFFFFLL;
    *((_WORD *)v1 + 18) = -1;
    *((_DWORD *)v1 + 10) = 0;
    uint64_t v6 = v4;
    *((_WORD *)v1 + 22) = 0;
    do
    {
      int v7 = (char *)this + v6;
      *int v7 = -1;
      *(void *)(v7 + 1) = 0;
      v7[9] = 0;
      v6 += 10;
    }
    while (v7 + 10 != v1 + 686);
    *((void *)v1 + 86) = 0xFFFFFFFF00000000;
    v1[696] = -1;
    *(void *)(v1 + 700) = -1;
    *(void *)(v1 + 708) = 0x7FFFFFFFLL;
    v1[716] = 0;
    *((_WORD *)v1 + 359) = -1;
    *((void *)v1 + 90) = 0xFFFFFFFF7FFFFFFFLL;
    int v8 = v1 + 732;
    v1[728] = 0;
    do
    {
      *(_DWORD *)int v8 = 0;
      void v8[4] = 0;
      uint64_t v9 = v8 + 8;
      v8 += 10280;
      do
      {
        *(_WORD *)uint64_t v9 = 0;
        v9[2] = 0;
        char v10 = v9 + 4;
        v9 += 1284;
        do
        {
          *char v10 = -1;
          *((_DWORD *)v10 + 2) = 0;
          *((_WORD *)v10 + 6) = 0;
          *((_DWORD *)v10 + 4) = 0;
          *(_DWORD *)(v10 + 1) = 0;
          v10[5] = 0;
          v10 += 20;
        }
        while (v10 != v9);
      }
      while (v9 != v8);
    }
    while (v8 != v5);
    *uint64_t v5 = 0;
    *((void *)v1 + 20652) = 0x700000000;
    char v11 = v1 + 165216;
    v11[1] = 0;
    _DWORD v11[2] = 0;
    *(void *)((char *)v11 + 22) = 0;
    *((_WORD *)v5 + 17) = -1;
    v5[36] = 0;
    *((_DWORD *)v5 + 10) = 0;
    *(void *)(v5 + 44) = -1;
    *((_DWORD *)v5 + 13) = 0;
    *((_DWORD *)v5 + 14) = 0;
    *((_DWORD *)v5 + 15) = -1;
    v5[64] = -1;
    *(_DWORD *)(v5 + 66) = -1;
    *((_WORD *)v5 + 35) = -1;
    *((void *)v5 + 9) = 0;
    v5[80] = 127;
    *((_WORD *)v5 + 41) = 0;
    *((_DWORD *)v5 + 21) = 0;
    v5[88] = 0;
    *((_DWORD *)v5 + 23) = 0;
    char v1 = v5 + 100;
    v4 += 165312;
    *((_WORD *)v5 + 48) = 0;
  }
  while (v5 + 100 != (char *)this + 330916);
  uint64_t v12 = 330916;
  do
  {
    uint64_t v13 = (char *)this + v12;
    *uint64_t v13 = 0;
    *((_WORD *)v13 + 1) = 0;
    void v13[4] = 0;
    *((void *)v13 + 2) = 0;
    *((void *)v13 + 3) = 0;
    *((void *)v13 + 1) = 0;
    *(void *)(v13 + 30) = 0;
    *((void *)v13 + 5) = 0;
    v12 += 52;
    *(_DWORD *)(v13 + 47) = 0;
  }
  while (v13 + 52 != (char *)this + 331020);
}

uint64_t Gnm10_00InitReq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm10_00InitReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (v6)
  {
    off_26AE66DA8 = 0;
    *(_OWORD *)&qword_26AE66D88 = 0u;
    *(_OWORD *)&off_26AE66D98 = 0u;
    *(_OWORD *)&g_GnmCBs = 0u;
    g_NmeaMasuint64_t k = 0;
    Gnm30_00InitConfig();
    qword_26AE541A0 = 0;
    unk_26AE541A8 = 0;
    qword_26AE541B0 = 0;
    g_GnmInstances[0] = 0;
    unk_26AE53188 = 0u;
    *(_OWORD *)&dword_26AE53198 = 0u;
    unk_26AE531A8 = 0u;
    *(_OWORD *)&algn_26AE531B0[8] = 0u;
    *(long long *)((char *)&xmmword_26AE531C4 + 4) = 0u;
    unk_26AE531D8 = 0u;
    *(_OWORD *)&dword_26AE531E8 = 0u;
    unk_26AE531F8 = 0u;
    unk_26AE53208 = 0u;
    *(long long *)((char *)&xmmword_26AE53214 + 4) = 0u;
    byte_26AE53228 = 0;
    *(void *)g_HWStatus = 0;
    *(void *)&long long v9 = 0x400000004;
    *((void *)&v9 + 1) = 0x400000004;
    *(_OWORD *)((char *)&qword_26AE53174 + 4) = v9;
    g_HalStatusInfo = 0;
    g_AssistReq = 0xFFFFFFFF00000000;
    g_ClearGnssReq = 0;
    bzero(__str, 0x1748uLL);
    for (uint64_t i = 964; i != 1348; i += 3)
    {
      char v11 = &__str[i];
      char v12 = __str[i + 2];
      *(_WORD *)char v11 = 0;
      _DWORD v11[2] = v12 & 0xE0;
    }
    memset(&__str[1348], 0, 256);
    bzero(&__str[1608], 0x1100uLL);
    memcpy(&g_PosEstimate, __str, 0x1748uLL);
    qword_26AE6D430 = 0;
    unk_26AE6D438 = 0;
    g_Gnm_NVStoreCntxt = 0;
    *(int *)((char *)&dword_26AE6D43E + 1) = 0;
    g_SbState = 234881279;
    g_PowerRepEnbStatus = 0;
    g_XOTimerStatus = 0;
    g_PrevUsedLtl = 0;
    bzero(&g_LTLDataPPM, 0x5E2uLL);
    g_AgeingTimeGpsSeconds = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm10_00InitReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 0, 1);
  }
  return 0;
}

void *Gnm10_01DeinitReq(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_DEINIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_01DeinitReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    g_IsHwInit = 0;
    Gnm02_24AbortAllNafSessions(7);
    Gnm02_26AbortAllAssistSessions();
    Gnm02_52DeInitializeInstances();
    Gnm53_71DeInitializeXOParams();
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmState,Active/Reset->Init\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 77, "Gnm10_01DeinitReq", 261);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 3, 1);
    }
    return &a_GnmInitState;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm10_01DeinitReq", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
    }
    return 0;
  }
}

uint64_t Gnm10_04PositioningReq(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_REG_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_04PositioningReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t v4 = *(unsigned char *)(a1 + 54) & 2;
    if (Gnm02_54IsEmerSessionOngoing() || Gnm02_39GetEarlyStartInstn())
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 77, "Gnm10_04PositioningReq", 1025);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 3, 1);
      }
      uint64_t v7 = *(unsigned int *)(a1 + 12);
      uint64_t v8 = 9;
LABEL_9:
      Gnm11_00ApiStatusCB(v8, 1, v7, v4);
      long long v9 = *(void **)(a1 + 64);
      if (v9) {
        free(v9);
      }
      *(void *)(a1 + 64) = 0;
      return 0;
    }
    if ((dword_26AE53244 & 0x800) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 77, "Gnm10_04PositioningReq", 1027);
        LbsOsaTrace_WriteLog(0xBu, __str, v14, 3, 1);
      }
      uint64_t v7 = *(unsigned int *)(a1 + 12);
      uint64_t v8 = 7;
      goto LABEL_9;
    }
    uint64_t v15 = Gnm02_13ReqNewNafInstn(*(_DWORD *)(a1 + 12), "GNM_REG_POS_REQ");
    if (!v15 || (size_t v16 = v15, (v17 = *((void *)v15 + 1)) == 0) || *((unsigned char *)v15 + 2) != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 87, "Gnm10_04PositioningReq", 2052);
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
      }
      uint64_t v7 = *(unsigned int *)(a1 + 12);
      uint64_t v8 = 3;
      goto LABEL_9;
    }
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    *(unsigned char *)(v17 + 4) = *(unsigned char *)(a1 + 54);
    *(void *)(v17 + 72) = *(void *)(a1 + 64);
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(a1 + 48);
    *(_DWORD *)(v17 + 12) = v18;
    *(_DWORD *)(v17 + 40) = v18;
    *(int32x2_t *)(v17 + 16) = vmul_s32(*(int32x2_t *)(a1 + 36), vdup_n_s32(0x3E8u));
    *(_DWORD *)(v17 + 24) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(v17 + 36) = v18;
    *(_WORD *)(v17 + 44) = *(_WORD *)(a1 + 44);
    *(_WORD *)(v17 + 52) = *(_WORD *)(a1 + 50);
    *(_WORD *)(v17 + 54) = *(_WORD *)(a1 + 52);
    *(void *)(v17 + 28) = *(void *)(a1 + 24);
    *(void *)(v17 + 56) = *(void *)(a1 + 16);
    *(unsigned char *)(v17 + 64) = *(unsigned char *)(a1 + 56);
    if (!Gnm10_27SendPosStart((uint64_t)v16))
    {
      Gnm11_00ApiStatusCB(11, 1, *(unsigned int *)(a1 + 12), v4);
      Gnm02_21DeleteInstn(v16);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm10_04PositioningReq", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 0, 1);
    }
    Gnm11_00ApiStatusCB(11, 0, 0, 0);
  }
  return 0;
}

BOOL Gnm10_27SendPosStart(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int16 v3 = gnssOsa_Calloc("Gnm10_27SendPosStart", 636, 1, 0x38uLL);
  uint64_t v5 = v3;
  if (v3)
  {
    v3[6] = *(_WORD *)a1;
    v3[7] = 0;
    if ((*(unsigned char *)(v2 + 4) & 2) != 0)
    {
      v3[14] = *(_WORD *)(v2 + 44);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm10_27SendPosStart", 770);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    }
    LODWORD(v4) = *(_DWORD *)(v2 + 16);
    *(double *)&unint64_t v8 = (double)v4 * 0.001;
    *((_DWORD *)v5 + 5) = *(double *)&v8;
    LODWORD(v8) = *(_DWORD *)(v2 + 20);
    *((_DWORD *)v5 + 6) = ((double)v8 * 0.001);
    *((_DWORD *)v5 + 8) = *(_DWORD *)(v2 + 24);
    v5[22] = *(_WORD *)(v2 + 52);
    v5[23] = *(_WORD *)(v2 + 54);
    *((unsigned char *)v5 + 48) = *(unsigned char *)(v2 + 8);
    *((unsigned char *)v5 + 50) = 55;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionId,%u,StartTime,%u,StopTime,%u,NoOfRep,%u,FixInt,%u RespTime,%u,HorAcc,%u,VerAcc,%u,PosOutput,%u,ConstRep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm10_27SendPosStart", (unsigned __int16)v5[6], *((_DWORD *)v5 + 5), *((_DWORD *)v5 + 6), (unsigned __int16)v5[14], *((_DWORD *)v5 + 8), *((_DWORD *)v5 + 9), (unsigned __int16)v5[22], (unsigned __int16)v5[23], *((unsigned __int8 *)v5 + 48), *((unsigned __int8 *)v5 + 50));
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_REQ =>GNCS Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm10_27SendPosStart", (unsigned __int16)v5[6]);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    AgpsSendFsmMsg(128, 130, 8519680, v5);
  }
  return v5 != 0;
}

uint64_t Gnm10_05DiscardPosReq(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_REG_POS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_05DiscardPosReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm11_00ApiStatusCB(4, 1, *(unsigned int *)(a1 + 12), *(unsigned char *)(a1 + 54) & 2);
    unint64_t v4 = *(void **)(a1 + 64);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 64) = 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm10_05DiscardPosReq", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
    }
    Gnm11_00ApiStatusCB(11, 0, 0, 0);
  }
  return 0;
}

uint64_t Gnm10_06StopPosnReq(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_STOP_POSN_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_06StopPosnReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm10_06StopPosnReq", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
    }
    uint64_t v8 = 11;
    goto LABEL_14;
  }
  uint64_t InstnFromNafId = Gnm02_32GetInstnFromNafId(*(_DWORD *)(a1 + 12));
  if (!InstnFromNafId)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm10_06StopPosnReq", 2052);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
    }
    uint64_t v8 = 3;
LABEL_14:
    Gnm11_00ApiStatusCB(v8, 0, 0, 1);
    return 0;
  }
  uint64_t v5 = (unsigned __int16 *)InstnFromNafId;
  if ((*(unsigned char *)(*(void *)(InstnFromNafId + 8) + 4) & 7) == 0 || !Gnm02_23StopNafSession(InstnFromNafId))
  {
    Gnm11_00ApiStatusCB(11, 1, *(unsigned int *)(a1 + 12), 1);
    Gnm02_21DeleteInstn(v5);
  }
  return 0;
}

uint64_t Gnm10_08HandleClearGnss(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_CLEAR_GNSS_CACHE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_08HandleClearGnss");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    if ((v4 - 0x400000) <= 0xFFC00000)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeleteFields,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm10_08HandleClearGnss", 770, v4);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
      uint64_t v7 = 1;
      goto LABEL_15;
    }
    if (!byte_268466F4B)
    {
      byte_268466F4B = 1;
      Gnm17_12SendClearNv(v4);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PrevReqOngoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm10_08HandleClearGnss", 1028);
      int v10 = 2;
      goto LABEL_13;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm10_08HandleClearGnss", 517);
    int v10 = 0;
LABEL_13:
    LbsOsaTrace_WriteLog(0xBu, __str, v9, v10, 1);
  }
  uint64_t v7 = 11;
LABEL_15:
  Gnm11_00ApiStatusCB(v7, 0, 0, 16);
  return 0;
}

uint64_t Gnm10_09DisableGnss(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_DISABLE_GNSS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_09DisableGnss");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm02_24AbortAllNafSessions(7);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm10_09DisableGnss", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm10_10RegisterGnmCBs(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_REG_CALLBACKS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_10RegisterGnmCBs");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (a1[2]) {
      g_GnmCBs = (uint64_t (*)(void, void, void, void))a1[2];
    }
    if (a1[3]) {
      qword_26AE66D88 = (uint64_t (*)(void, void))a1[3];
    }
    if (a1[4]) {
      off_26AE66DA0 = (uint64_t (*)(void, void, void))a1[4];
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm10_10RegisterGnmCBs", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm10_13StopFwActivityRsp(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_13StopFwActivityRsp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm10_13StopFwActivityRsp", 517);
    int v10 = 0;
LABEL_19:
    LbsOsaTrace_WriteLog(0xBu, __str, v9, v10, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Activity,%hhu,Resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm10_13StopFwActivityRsp", *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 13));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  int v6 = *(unsigned __int8 *)(a1 + 12);
  if (v6 == 3)
  {
    Gnm37_13HandleSbStopFwActResp(*(unsigned __int8 *)(a1 + 13));
    return 0;
  }
  if (v6 != 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ActivityType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm10_13StopFwActivityRsp", 770, *(unsigned __int8 *)(a1 + 12));
    int v10 = 2;
    goto LABEL_19;
  }
  if (HIBYTE(dword_26AE6D43E))
  {
    if (*(unsigned char *)(a1 + 13)) {
      unsigned __int8 v7 = byte_26AE6D442;
    }
    else {
      unsigned __int8 v7 = 11;
    }
    Gnm11_00ApiStatusCB(v7, 0, 0, 17);
  }
  byte_26AE6D442 = 0;
  dword_26AE6D43E = 0;
  return 0;
}

uint64_t Gnm10_14InjectLTL(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_INJECT_LTL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_14InjectLTL");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm10_14InjectLTL", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
    }
    uint64_t v6 = 11;
    goto LABEL_10;
  }
  if (g_BootMode != 2)
  {
    uint64_t v6 = 2;
LABEL_10:
    Gnm11_00ApiStatusCB(v6, 0, 0, 17);
    return 0;
  }
  HIWORD(dword_26AE6D43E) = 256;
  LOBYTE(dword_26AE6D43E) = 1;
  Gnm10_29SendFwActivity(1, 1);
  Gnm29_01RestoreVarMENv(0);
  return 0;
}

uint64_t Gnm10_29SendFwActivity(char a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t result = (uint64_t)gnssOsa_Calloc("Gnm10_29SendFwActivity", 712, 1, 0x10uLL);
    if (!result) {
      return result;
    }
    uint64_t v4 = (unsigned char *)result;
    *(unsigned char *)(result + 12) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_FW_ACTIVE_IND =>GNCP Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm10_29SendFwActivity", v4[12]);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
    }
    int v7 = 8392195;
  }
  else
  {
    uint64_t result = (uint64_t)gnssOsa_Calloc("Gnm10_29SendFwActivity", 729, 1, 0x10uLL);
    if (!result) {
      return result;
    }
    uint64_t v4 = (unsigned char *)result;
    *(unsigned char *)(result + 12) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_REQ =>GNC Activity,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm10_29SendFwActivity", v4[12]);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
    }
    int v7 = 8392448;
  }
  AgpsSendFsmMsg(128, 134, v7, v4);
  return 1;
}

uint64_t Gnm10_15NmeaUpdateReq(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_REG_NMEA_UPDATES\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_15NmeaUpdateReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v12 = 517;
LABEL_13:
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v11, "GNM", 69, "Gnm10_15NmeaUpdateReq", v12);
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 0, 1);
    return 0;
  }
  uint64_t v4 = gnssOsa_Calloc("Gnm10_15NmeaUpdateReq", 527, 1, 0x10uLL);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v12 = 1537;
    goto LABEL_13;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (v6)
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Registering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm10_15NmeaUpdateReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
    }
    off_26AE66D90 = *(uint64_t (**)(void, void, void))(a1 + 16);
    v5[12] = 1;
    __int16 v10 = *(_WORD *)(a1 + 24);
  }
  else
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Deregistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm10_15NmeaUpdateReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
    }
    __int16 v10 = 0;
    off_26AE66D90 = 0;
    v5[12] = 0;
  }
  *((_WORD *)v5 + 7) = v10;
  g_NmeaMasuint64_t k = v10;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm10_15NmeaUpdateReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  AgpsSendFsmMsg(128, 134, 8786688, v5);
  return 0;
}

uint64_t Gnm10_25SendZxMsg(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SEND_ZX_MES\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_25SendZxMsg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm10_25SendZxMsg", 517);
    int v9 = 0;
LABEL_13:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm10_25SendZxMsg", 770);
    int v9 = 2;
    goto LABEL_13;
  }
  uint64_t v5 = (unsigned __int8 *)*(unsigned __int16 *)(a1 + 24);
  int v6 = v4[2];
  if (v5 < 7 || v6 != 86) {
    goto LABEL_15;
  }
  if (v4[3] != 110)
  {
    int v6 = 86;
LABEL_15:
    Gnm07_01Send(v6, v4[4], (uint64_t)v4, v5);
    goto LABEL_16;
  }
  Gnm06_04SendTruthPos(*(unsigned __int8 **)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
LABEL_16:
  unint64_t v11 = *(void **)(a1 + 16);
  if (v11) {
    free(v11);
  }
  *(void *)(a1 + 16) = 0;
  return 0;
}

uint64_t Gnm10_26DiscardZxMsg(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SEND_ZX_MES\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm10_26DiscardZxMsg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 16) = 0;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm10_26DiscardZxMsg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
  }
  return 0;
}

BOOL Gnm10_28StopPositioning(unsigned __int16 *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned __int16 *)gnssOsa_Calloc("Gnm10_28StopPositioning", 686, 1, 0x10uLL);
  unsigned __int16 v3 = v2;
  if (v2)
  {
    v2[6] = *a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_REQ =>GNCS Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm10_28StopPositioning", v3[6]);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 130, 8519936, v3);
  }
  return v3 != 0;
}

BOOL Gnm10_31SendMEWakeRsp(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm10_31SendMEWakeRsp", 755, 1, 0x10uLL);
  unsigned __int16 v3 = v2;
  if (v2)
  {
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_RSP =>GNCP Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm10_31SendMEWakeRsp", a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 134, 8392708, v3);
  }
  return v3 != 0;
}

unsigned char *NK_Set_Fix_Type(unsigned char *result, double *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int *a8, double a9, double a10, int a11, char a12, int a13, int a14, unsigned char *a15, _DWORD *a16, unsigned int *a17, _DWORD *a18, int *a19, int *a20)
{
  uint64_t v20 = *a8;
  if (v20 > 8) {
    double v21 = 100000000.0;
  }
  else {
    double v21 = dbl_22BB455D0[v20];
  }
  double v22 = sqrt(a2[5] + a2[6]);
  double v23 = sqrt(a2[8] + a2[9]);
  unsigned int v24 = 1000 * a11 / a5;
  double v25 = sqrt(v21);
  if (!a13 || (unsigned int v26 = *a17, *a17 >= v24))
  {
    BOOL v28 = 0;
    int v29 = 0;
    BOOL v30 = 0;
    LOBYTE(v27) = 0;
    *(_DWORD *)(a4 + 20) = 0;
    goto LABEL_33;
  }
  if (*(_DWORD *)(a4 + 16) > v26)
  {
    BOOL v27 = *(_DWORD *)(a3 + 40) == 2
       || *(_DWORD *)(a3 + 60) == 2
       || *(_DWORD *)(a3 + 64) == 2
       || *(_DWORD *)(a3 + 68) == 2
       || *(_DWORD *)(a3 + 72) == 2
       || *(_DWORD *)(a3 + 76) == 2
       || *(_DWORD *)(a3 + 80) == 2;
    BOOL v28 = (*(_DWORD *)(a3 + 84) == 2 || *(_DWORD *)(a3 + 88) == 2) && (v20 - 3) < 6;
    int v29 = a9 < 1000000.0 && *(_DWORD *)(a3 + 48) == 2 || *(_DWORD *)(a3 + 28) == 2 || v27;
LABEL_29:
    BOOL v30 = v23 < v25 + (double)((v26 * a5 / 0x1F4) & 0xFFFFFE) && v22 < 400.0;
    ++*(_DWORD *)(a4 + 20);
    goto LABEL_33;
  }
  if ((v20 - 4) > 4)
  {
    BOOL v28 = 0;
    int v29 = 0;
    BOOL v30 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_33;
  }
  LOBYTE(v27) = 0;
  int v29 = 0;
  BOOL v28 = 0;
  BOOL v30 = 0;
  if (*(unsigned __int8 *)(a3 + 2) <= 1u) {
    goto LABEL_29;
  }
LABEL_33:
  int v31 = *(_DWORD *)(a3 + 52);
  int v32 = *(_DWORD *)(a3 + 56);
  int v33 = *(_DWORD *)(a3 + 48);
  BOOL v35 = a10 < 500000.0 && v31 == 2;
  if (v33 != 1) {
    a9 = 1.0e16;
  }
  if (v31 != 1) {
    a10 = 1.0e16;
  }
  *a19 = 0;
  int v36 = result[5];
  if (!result[5] || *(unsigned char *)a4)
  {
    int v37 = 1;
LABEL_46:
    if (*a17 < 0x1869F) {
      ++*a17;
    }
    *a16 = 0;
    if (v36) {
      int v38 = 0;
    }
    else {
      int v38 = v37;
    }
    if ((v38 & v30) == 1 && *a17 <= v24 && *(unsigned __int8 *)(a3 + 2) <= 1u) {
      *a19 = 1;
    }
    goto LABEL_93;
  }
  if (v22 >= 400.0 && (a6 > 0x7CF || *a15 || v22 >= 1000.0))
  {
    char v39 = a12 ^ 1;
    int v37 = 1;
    if (a6 < 0x186A0) {
      char v39 = 0;
    }
    if ((v39 & 1) != 0 || !*a15) {
      goto LABEL_46;
    }
  }
  int v40 = *(_DWORD *)(a3 + 28);
  if (a14 > 8 || (int v41 = v40 == 1, result[4]))
  {
    if (v40 == 1) {
      int v41 = 2;
    }
    else {
      int v41 = 1;
    }
  }
  if (((v29 | v35) & 1) != 0
    || (v46 = *(unsigned __int8 *)(a3 + 1), int v44 = 5, 5 - v41 > v46)
    && (4 - v41 > v46 || (int v44 = 5, a10 >= 160000.0) && a9 >= 160000.0))
  {
    int v42 = v32 == 2 || v35;
    if ((v29 & 1) != 0
      || (v22 < 400.0 ? (BOOL v43 = v42 == 0) : (BOOL v43 = 1),
          v43 || (int v44 = 4, 4 - v41 > *(unsigned __int8 *)(a3 + 1))))
    {
      if (v20 > 1) {
        char v45 = 1;
      }
      else {
        char v45 = v29;
      }
      if (v45)
      {
        if (v33 == 1)
        {
LABEL_155:
          int v37 = 2;
LABEL_156:
          *a19 = v37;
          int v37 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        unsigned int v58 = *(unsigned __int8 *)(a3 + 1);
        if (2 - v41 > v58) {
          int v37 = 2;
        }
        else {
          int v37 = 3;
        }
        if (2 - v41 <= v58 || v33 == 1) {
          goto LABEL_156;
        }
      }
      if (*(_DWORD *)(a3 + 84) == 1
        && (*(_DWORD *)(a3 + 60) == 1
         || *(_DWORD *)(a3 + 64) == 1
         || *(_DWORD *)(a3 + 68) == 1
         || *(_DWORD *)(a3 + 72) == 1
         || *(_DWORD *)(a3 + 76) == 1
         || *(_DWORD *)(a3 + 80) == 1))
      {
        goto LABEL_155;
      }
      if (*(_DWORD *)(a3 + 88) == 1)
      {
        if (*(_DWORD *)(a3 + 60) == 1
          || *(_DWORD *)(a3 + 64) == 1
          || *(_DWORD *)(a3 + 68) == 1
          || *(_DWORD *)(a3 + 72) == 1
          || *(_DWORD *)(a3 + 76) == 1)
        {
          goto LABEL_155;
        }
        int v62 = *(_DWORD *)(a3 + 80);
        BOOL v63 = v62 == 1;
        char v64 = v62 == 1 || v30;
        if (v63) {
          int v37 = 2;
        }
        else {
          int v37 = 1;
        }
        if (v64) {
          goto LABEL_156;
        }
      }
      else if (v30)
      {
        int v37 = 1;
        goto LABEL_156;
      }
      int v37 = 1;
      if (1 - v41 > *(unsigned __int8 *)(a3 + 1) || ((v28 | v29) & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_156;
    }
  }
  *a19 = v44;
  if (*a16 < 0x1869Fu) {
    ++*a16;
  }
  *a17 = 0;
  *a18 = 0;
  if (!a13 && *a16 >= 3u) {
    *a16 = 2;
  }
LABEL_93:
  if (!*a15)
  {
LABEL_96:
    int v47 = 1;
    goto LABEL_97;
  }
  if (*a16 > 4u) {
    goto LABEL_95;
  }
  int v47 = 0;
  if (a6 > 0x12B || !v36 || v22 >= 400.0) {
    goto LABEL_97;
  }
  if (*(unsigned __int8 *)(a3 + 1) >= 6u)
  {
LABEL_95:
    *a15 = 0;
    goto LABEL_96;
  }
  int v47 = 0;
LABEL_97:
  *a20 = 0;
  if ((v20 - 5) >= 4) {
    unsigned int v48 = 30;
  }
  else {
    unsigned int v48 = 100;
  }
  if (result[8] && !*(unsigned char *)a4 && (!v47 || v48 > a7 && v23 < v25))
  {
    int v49 = *(_DWORD *)(a3 + 40);
    BOOL v50 = v49 == 1;
    char v51 = v32 == 2 || v27;
    if (v51)
    {
      char v52 = v32 != 2 || v27;
      if ((v52 & 1) == 0 && (v50 ^ 3u) <= *(unsigned __int8 *)(a3 + 5))
      {
        int v53 = 4;
LABEL_169:
        *a20 = v53;
        return result;
      }
    }
    else
    {
      unsigned int v54 = *(unsigned __int8 *)(a3 + 5);
      if (v49 == 1) {
        unsigned int v55 = 3;
      }
      else {
        unsigned int v55 = 4;
      }
      if (v55 <= v54 || (v50 ^ 3u) <= v54 && v32 == 1)
      {
        int v53 = 5;
        goto LABEL_169;
      }
    }
    char v56 = v20 > 1 || v27;
    if ((v56 & 1) == 0)
    {
      unsigned int v57 = v49 == 1 ? 1 : 2;
      if (v57 <= *(unsigned __int8 *)(a3 + 5))
      {
        int v53 = 3;
        goto LABEL_169;
      }
    }
    if (*(_DWORD *)(a3 + 68) == 1)
    {
      int v53 = 2;
      goto LABEL_169;
    }
    int v59 = *(_DWORD *)(a3 + 60);
    char v60 = v59 == 1 || v30;
    if (v59 == 1) {
      int v53 = 2;
    }
    else {
      int v53 = 1;
    }
    if (v60) {
      goto LABEL_169;
    }
    char v61 = v51 ^ 1;
    if ((v49 != 1) > *(unsigned __int8 *)(a3 + 5)) {
      char v61 = 1;
    }
    if ((v61 & 1) == 0)
    {
      int v53 = 1;
      goto LABEL_169;
    }
  }
  return result;
}

double *NK_Correct_State(double *result, unsigned char *a2, double *a3)
{
  if (*a2) {
    a3[14] = a3[14] + *result * -0.00000000333564095;
  }
  if (a2[1]) {
    a3[15] = a3[15] + result[1] * -0.00000000333564095;
  }
  if (a2[2]) {
    a3[16] = a3[16] + result[2] * -0.00000000333564095;
  }
  if (a2[3]) {
    a3[17] = a3[17] + result[3] * -0.00000000333564095;
  }
  if (a2[5] && a2[6] && a2[7])
  {
    for (uint64_t i = 0; i != 3; ++i)
      a3[i + 5] = a3[i + 5] - result[i + 5];
  }
  if (a2[8] && a2[9] && a2[10])
  {
    uint64_t v4 = 0;
    double v5 = a3[4];
    unsigned __int16 v6 = result + 8;
    do
    {
      uint64_t v7 = &a3[v4];
      v7[8] = a3[v4 + 8] - v6[v4];
      void v7[11] = -v6[v4++] / v5;
    }
    while (v4 != 3);
  }
  if (a2[4]) {
    a3[21] = a3[21] - result[4];
  }
  return result;
}

BOOL Is_GPS_BinEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12)
      || *(_DWORD *)(a1 + 16)
      || *(_DWORD *)(a1 + 20)
      || *(_DWORD *)(a1 + 24)
      || *(unsigned char *)(a1 + 34)
      || *(_WORD *)(a1 + 40)
      || *(unsigned __int16 *)(a1 + 45) << 8
      || *(unsigned __int16 *)(a1 + 53) << 8
      || *(unsigned __int16 *)(a1 + 61) << 8
      || *(unsigned __int16 *)(a1 + 73) << 8
      || *(unsigned __int16 *)(a1 + 81) << 8
      || *(unsigned __int16 *)(a1 + 89) << 8
      || *(_DWORD *)(a1 + 96)
      || (*(_WORD *)(a1 + 100) & 0xFFFC) != 0;
}

uint64_t DW_Parity_Encode(unsigned int a1, int a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = a1 & 0xFFFFFF3F;
  if ((a2 & 0xFFFFFFF7) != 1) {
    unsigned int v3 = a1;
  }
  int v4 = 1;
  do
  {
    unsigned int v5 = Parity_Table[v2] & v3 ^ ((Parity_Table[v2] & v3) >> 16);
    v3 |= ((int)(0x6996u >> ((v5 ^ BYTE1(v5) ^ ((v5 ^ (v5 >> 8)) >> 4)) & 0xF) << 31) >> 31) & v4;
    v4 *= 2;
    ++v2;
  }
  while (v2 != 6);
  if ((a2 & 0xFFFFFFF7) == 1) {
    v3 ^= Forced_Parity[v3 & 3];
  }
  if ((v3 & 0x40000000) != 0) {
    return v3 ^ 0x3FFFFFC0;
  }
  else {
    return v3;
  }
}

void GNB_Debug_Flush_Check(void)
{
  int v0 = qword_26AE54878 - qword_26AE54870;
  if (dword_26AE54868 - (int)g_CB_GDbg > 0) {
    int v0 = 0;
  }
  if ((v0 + dword_26AE54868 - g_CB_GDbg) <= 0x1FF)
  {
    GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
  }
}

void GNB_Debug_BlockMove(char *__src, int a2)
{
  if (g_Enable_GNB_Debug)
  {
    int v2 = a2;
    int v4 = (void *)g_CB_GDbg;
    int v5 = qword_26AE54878;
    int v6 = qword_26AE54878 - qword_26AE54870;
    if (dword_26AE54868 - (int)g_CB_GDbg > 0) {
      int v6 = 0;
    }
    if (v6 + dword_26AE54868 - (int)g_CB_GDbg <= a2)
    {
      GNSS_GNB_Debug_Ctl((uint64_t)&g_CB_GDbg);
      uint64_t v10 = (void *)g_CB_GDbg;
      int v11 = qword_26AE54878;
      int v12 = qword_26AE54878 - qword_26AE54870;
      if (dword_26AE54868 - (int)g_CB_GDbg > 0) {
        int v12 = 0;
      }
      int v13 = v12 + dword_26AE54868 - g_CB_GDbg;
      if (v2 > 1023)
      {
        if (v13 == 1024)
        {
          do
          {
            uint64_t v16 = 1023;
            do
            {
              uint64_t v17 = v16;
              BOOL v18 = v16-- != 0;
            }
            while (v18 && __src[v17] != 10);
            unsigned __int16 v19 = v16 + 2;
            if (v17) {
              unsigned __int16 v20 = v19;
            }
            else {
              unsigned __int16 v20 = 1024;
            }
            unsigned int v21 = GN_GPS_Write_GNB_Debug(v20, __src);
            if (!v21)
            {
              LbsOsaTrace_PrintAsciiBuf(0, 4u, 1, (uint64_t)"<OVERFLOW>\n", 12);
              goto LABEL_47;
            }
            __src += v21;
            v2 -= v21;
          }
          while (v2 > 1023);
          if (v2 >= 1)
          {
            int v22 = qword_26AE54878;
            double v23 = (void *)g_CB_GDbg;
            do
            {
              int v24 = v22 - v23;
              if (v2 >= v24) {
                int v25 = v24;
              }
              else {
                int v25 = v2;
              }
              memcpy(v23, __src, v25);
              double v23 = (void *)(g_CB_GDbg + v25);
              g_CB_GDbg = (uint64_t)v23;
              int v22 = qword_26AE54878;
              if ((unint64_t)v23 >= qword_26AE54878)
              {
                double v23 = (void *)qword_26AE54870;
                g_CB_GDbg = qword_26AE54870;
              }
              __src += v25;
              BOOL v9 = __OFSUB__(v2, v25);
              v2 -= v25;
            }
            while (!((v2 < 0) ^ v9 | (v2 == 0)));
          }
        }
      }
      else if (v13 > v2)
      {
        do
        {
          int v14 = v11 - v10;
          if (v2 >= v14) {
            int v15 = v14;
          }
          else {
            int v15 = v2;
          }
          memcpy(v10, __src, v15);
          uint64_t v10 = (void *)(g_CB_GDbg + v15);
          g_CB_GDbg = (uint64_t)v10;
          int v11 = qword_26AE54878;
          if ((unint64_t)v10 >= qword_26AE54878)
          {
            uint64_t v10 = (void *)qword_26AE54870;
            g_CB_GDbg = qword_26AE54870;
          }
          __src += v15;
          BOOL v9 = __OFSUB__(v2, v15);
          v2 -= v15;
        }
        while (!((v2 < 0) ^ v9 | (v2 == 0)));
      }
    }
    else
    {
      do
      {
        int v7 = v5 - v4;
        if (v2 >= v7) {
          int v8 = v7;
        }
        else {
          int v8 = v2;
        }
        memcpy(v4, __src, v8);
        int v4 = (void *)(g_CB_GDbg + v8);
        g_CB_GDbg = (uint64_t)v4;
        int v5 = qword_26AE54878;
        if ((unint64_t)v4 >= qword_26AE54878)
        {
          int v4 = (void *)qword_26AE54870;
          g_CB_GDbg = qword_26AE54870;
        }
        __src += v8;
        BOOL v9 = __OFSUB__(v2, v8);
        v2 -= v8;
      }
      while (!((v2 < 0) ^ v9 | (v2 == 0)));
    }
LABEL_47:
    GNB_Debug_Flush_Check();
  }
}

char **FPE_ApplyNewMeas(char **a1, unsigned __int16 *a2, uint64_t a3, int64x2_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  int v11 = &a4[5491].i8[8];
  int v12 = a4 + 132932;
  switch((int)a1)
  {
    case 2:
    case 4:
    case 5:
    case 6:
    case 14:
      FpeEnabler_UpdateFlags(a4[132929].i8, (int)a1, (uint64_t *)a2);
      if (a1 == 10) {
        goto LABEL_73;
      }
      if (a1 == 5)
      {
        __int32 v13 = *(_DWORD *)a2;
        if (*(_DWORD *)a2)
        {
          uint64_t v14 = a4[131166].u32[2];
          if (v14)
          {
            int v15 = (double *)&a4[131696].i64[1];
            uint64_t v16 = a4 + 17927;
            do
            {
              if (*v15 != 0.0) {
                v16->i32[0] = v13;
              }
              v16 += 7342;
              ++v15;
              --v14;
            }
            while (v14);
          }
          *((_DWORD *)v11 + 460) = v13;
        }
      }
      break;
    case 11:
      BOOL v18 = a4 + 5492;
      g_p_CB_LCD_SA_Dbg = a6;
      g_TCU = (uint64_t)a4[5492].i64;
      g_FPE_LogSeverity = *(_WORD *)(a3 + 4);
      g_DBfd = a7;
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        uint64_t v19 = mach_continuous_time();
        double v20 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "FPE_Init", 230, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), v20, "Welcome to SA Diagnostic Log");
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          uint64_t v31 = mach_continuous_time();
          if (g_TCU) {
            double v32 = *(double *)(g_TCU + 8);
          }
          else {
            double v32 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "FPE_Init", 232, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), v32, "Init process started");
        }
      }
      if (*a2 != 12)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v35 = mach_continuous_time();
          if (g_TCU) {
            double v36 = *(double *)(g_TCU + 8);
          }
          else {
            double v36 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f error, FPE version does not match. fpeVersion->fpeVersion =%d, FPE_HEADER_VERSION=%d", "FPE_Init", 237, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), v36, *a2, 12);
        }
        g_FPE_AssertFlag = 1;
      }
      a4[132947].i64[0] = 0;
      a4[132945] = 0u;
      a4[132946] = 0u;
      a4[132944] = 0u;
      bzero(a4, 0x2074FAuLL);
      v12->i64[0] = 0xC08F380000000000;
      a4[132942].i64[0] = 0;
      a4[132942].i64[1] = 0;
      v12[11].i16[4] = *(_WORD *)(a3 + 4);
      int Init = ExtMeasExtract_Init((uint64_t)&a4[1].i64[1]);
      if (Init)
      {
        a4[5496] = 0u;
        a4[5497] = 0u;
        a4[5494] = 0u;
        a4[5495] = 0u;
        *BOOL v18 = 0u;
        a4[5493] = 0u;
        *((void *)v11 + 2) = 0xC08F380000000000;
        *((_WORD *)v11 + 17) = -999;
        *(int64x2_t *)(v11 + 40) = vdupq_n_s64(0xC08F380000000000);
        *((void *)v11 + 8) = 0x7FF8000000000000;
        a4[5496].i64[0] = 0;
        a4[5496].i64[1] = 0;
        *((void *)v11 + 11) = 0xC08F380000000000;
        *((void *)v11 + 13) = 0;
        v11[112] = 0;
        char v43 = MGen_Init(a4 + 5499);
        LOBYTE(Init) = 0;
        if (v43)
        {
          int v44 = a4 + 5607;
          int Init = KfirController_Init((uint64_t)v44, v38, v39, v40, v41, v42);
          if (Init) {
            LOBYTE(Init) = MeasSyncher_Init((uint64_t)v44);
          }
        }
      }
      else
      {
        v11[112] = 0;
      }
      g_FPE_AssertFlag = 0;
      v12[11].i8[0] = Init;
      *(void *)&long long v84 = 1;
      char v45 = (char **)&v84;
      int v46 = 0;
      int v47 = 8;
      goto LABEL_101;
    case 12:
      double v23 = a4 + 5492;
      HIDWORD(v24) = -1775253149 * (int)*(double *)&a4[5492].i64[1] + 28633112;
      LODWORD(v24) = HIDWORD(v24);
      if ((v24 >> 2) <= 0xDA740C && (g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v26 = *(double *)(g_TCU + 8);
        }
        else {
          double v26 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f fpeLogVer=%u peLibVer=%s", "FPE_ApplyNewMeas", 372, v25, v26, *a2, (const char *)a2 + 2);
      }
      unsigned int v48 = (unsigned __int8 *)(v11 + 112);
      i8 = a4[132929].i8;
      FpeEnabler_UpdateFlags(a4[132929].i8, 12, (uint64_t *)a2);
      bzero((void *)a8, 0x3F8uLL);
      if (v12->i8[8])
      {
        LOBYTE(v84) = 0;
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v51 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v52 = *(double *)(g_TCU + 8);
          }
          else {
            double v52 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "FpeManager_PositionGeneration", 549, v51, v52, "FpeMan: starting PositionGeneration");
        }
        uint64_t v53 = (uint64_t)v48;
        char v54 = (MGen_generateMeas(a4[5492].i8, &a4[1].i32[2], *v48, (uint64_t)a4[5499].i64, (uint64_t)a4[5607].i64, v50) & 0xFFFFFFFD) != 0;
        KfirController_ProcessMeas((uint64_t)a4[5607].i64, (char *)&v84, a5);
        unsigned int updated = FpeEnabler_UpdateStopFlags((uint64_t)a4[132929].i64, v54);
        unsigned int v58 = updated;
        int v59 = g_FPE_AssertFlag;
        int v60 = v84;
        if (g_FPE_AssertFlag || (updated & 1) != 0 || !(_BYTE)v84)
        {
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            unint64_t v61 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v62 = *(double *)(g_TCU + 8);
            }
            else {
              double v62 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Trigering Internal Reset: [AssertFlag=%u FPEnStop=%u kfirOkFlag=%u]", "FPE_ApplyNewMeas", 402, v61, v62, g_FPE_AssertFlag, v58, v60);
            int v59 = g_FPE_AssertFlag;
          }
          if (v59) {
            uint64_t v65 = 1;
          }
          else {
            uint64_t v65 = v58;
          }
          FusionManager_InternalReset((uint64_t)a4, v53, v65, v60 == 0, v56, v57);
          *(unsigned char *)(a8 + 24) = 0;
          g_FPE_AssertFlag = 0;
        }
        unsigned int v48 = (unsigned __int8 *)v53;
        i8 = a4[132929].i8;
        double v23 = a4 + 5492;
      }
      else
      {
        FpeManager_FlushInFIFOs((uint64_t)a4);
        if (v12[6].i8[0]) {
          ExtMeasExtract_extractData((uint64_t)&a4[1].i64[1], 3u, (char *)&a4[132932].u64[1] + 4);
        }
        if (v12[6].i8[1]) {
          ExtMeasExtract_extractData((uint64_t)&a4[1].i64[1], 4u, (char *)a4[132934].i64 + 4);
        }
        if (v12[6].i8[2]) {
          ExtMeasExtract_extractData((uint64_t)&a4[1].i64[1], 6u, &a4[132933].u64[1]);
        }
      }
      KfirController_GetPosition((uint64_t)a4[5607].i64, (uint64_t)v23, a5, (_DWORD *)a8);
      *(unsigned char *)(a8 + 392) = v12[10].i8[12];
      *(unsigned char *)(a8 + 400) = v12[10].i8[13];
      v12[10].i16[6] = 0;
      *(unsigned char *)(a8 + 376) = v12[10].i8[14];
      *(unsigned char *)(a8 + 384) = v12[10].i8[15];
      if (v12->i8[8])
      {
        memset(v91, 0, sizeof(v91));
        if (a4[132878].i8[1])
        {
          Transpose_Mat(3, (uint64_t)a4[132350].i64, 3, (uint64_t)v91, v66, v67);
          Sub_Mat(3, a4[5594].i32, 3, (int *)v91, (const char *)3, (int *)v91);
          double v68 = Norma_Vec(3, (int *)v91);
          long long v89 = 0u;
          long long v90 = 0u;
          InsUtil_ECEF2Geo_Iterative((double *)a4[5594].i64, (uint64_t)&v89, 6378137.0);
          double v69 = *(double *)(a8 + 208);
          double v70 = *((double *)&v90 + 1);
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v84 = 0u;
          Mult_Mat_Mat(9, (uint64_t)&a4[132360].i64[1], 9, (uint64_t)&a4[132355].i64[1], 9, (uint64_t)&v84);
          Mult_Mat_Mat(9, (uint64_t)&v84, 3, (uint64_t)a4[5596].i64, 9, (uint64_t)&v84);
          double v71 = Norma_Vec(3, a4[5596].i32);
          double v72 = sqrt(*(double *)&v85 * *(double *)&v85 + *((double *)&v84 + 1) * *((double *)&v84 + 1));
          double v73 = Norma_Vec(9, (int *)&v84);
          if (v73 <= 1.0e-30)
          {
            double v74 = NAN;
          }
          else
          {
            long long v82 = 0u;
            long long v83 = 0u;
            Mult_Mat_scalar(1.0 / v73, 9, (int *)&v84, (const char *)3, (int *)&v82);
            double v74 = atan2(*(long double *)&v83, *((long double *)&v82 + 1)) * 57.2957795;
          }
          double v75 = v69 - v70;
          double v76 = *(double *)(a8 + 240) - v71;
          double v77 = *(double *)(a8 + 248) - v72;
          double v78 = *(double *)(a8 + 256) - v74;
        }
        else
        {
          double v68 = 0.0;
          double v75 = 0.0;
          double v76 = 0.0;
          double v77 = 0.0;
          double v78 = 0.0;
        }
        if ((g_FPE_LogSeverity & 0x200) != 0) {
          LC_LOG_NMEA_GENERIC("%s,SOLN,%d,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", "$PFPEX", a4[132878].u8[1], a4[132878].u8[2], *(double *)(a8 + 240), *(double *)(a8 + 248), *(double *)(a8 + 256), *(double *)(a8 + 40), *(double *)(a8 + 48), *(double *)(a8 + 64), *(double *)(a8 + 96), *(double *)(a8 + 104), *(double *)(a8 + 120), *(double *)(a8 + 80), *(double *)(a8 + 88), *(double *)(a8 + 136), *(double *)(a8 + 144), *(double *)(a8 + 152), v68,
        }
            v75,
            v76,
            v77,
            v78);
      }
      KFP_ResetStatistics((uint64_t)a4[13693].i64);
      if (g_FPE_AssertFlag)
      {
        *(unsigned char *)(a8 + 24) = 0;
      }
      else if (*(unsigned char *)(a8 + 24))
      {
        v12[11].i8[1] = 1;
      }
      LOBYTE(v84) = 0;
      LOBYTE(v91[0]) = 0;
      FpeEnabler_UpdateState(i8, &v84, v91);
      if (LOBYTE(v91[0])) {
        FusionManager_InternalReset((uint64_t)a4, (uint64_t)v48, 1, 0, v79, v80);
      }
      char v45 = (char **)a8;
      int v46 = 1;
      int v47 = 1016;
LABEL_101:
      FpeManager_printFpeSoln(v45, v46, v47);
      break;
    case 13:
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v28 = *(double *)(g_TCU + 8);
        }
        else {
          double v28 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f ReInit", "FPE_ApplyNewMeas", 350, v27, v28);
      }
      FpeEnabler_UpdateFlags(a4[132929].i8, 13, (uint64_t *)a2);
      LOBYTE(v84) = 0;
      LOBYTE(v91[0]) = 0;
      FpeEnabler_UpdateState(a4[132929].i8, &v84, v91);
      if (LOBYTE(v91[0])) {
        FusionManager_InternalReset((uint64_t)a4, (uint64_t)&a4[5498].i64[1], 1, 0, v33, v34);
      }
      break;
    default:
      FpeEnabler_UpdateFlags(a4[132929].i8, (int)a1, (uint64_t *)a2);
      if (Cyc_Record_Count_Free((_DWORD *)a4[5484].i64[a1], v11[112]))
      {
        ExtMeasExtract_extractData((uint64_t)&a4[1].i64[1], a1, a2);
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v30 = *(double *)(g_TCU + 8);
          }
          else {
            double v30 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f MeasExt CRB full of type %d. Triggering reset!", "FPE_ApplyNewMeas", 519, v29, v30, a1);
        }
        g_FPE_AssertFlag = 1;
      }
      if (a1 == 10)
      {
LABEL_73:
        *(_DWORD *)int v11 = *(_DWORD *)a2;
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v63 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v64 = *(double *)(g_TCU + 8);
          }
          else {
            double v64 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %f EPOCH: TOW_Stat=%d OS_TIME=%d TTICK=%d TOW=%.15f WEEK_NUM=%d", "FPE_SendGnssEpochTimesToLog", 192, v63, v64, *((double *)v11 + 2) + (double)(604800 * *((_DWORD *)v11 + 20)), *((_DWORD *)a2 + 4), *(_DWORD *)a2, *((_DWORD *)a2 + 1), *((double *)a2 + 1), (__int16)a2[11]);
        }
      }
      break;
  }
  return FPE_InterfaceLogger(a1, (unsigned __int8 *)a2);
}

char **FpeManager_printFpeSoln(char **result, int a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v16 = a3;
  int v17 = a2;
  if ((g_FPE_LogSeverity & 0x100) != 0)
  {
    unsigned int v3 = result;
    if (result)
    {
      LODWORD(v4) = a3;
      int v5 = (char **)g_p_CB_LCD_SA_Dbg;
      if (g_p_CB_LCD_SA_Dbg)
      {
        int v6 = *(char **)g_p_CB_LCD_SA_Dbg;
        char v7 = 36;
        uint64_t v8 = 1u;
        do
        {
          *int v5 = v6 + 1;
          *int v6 = v7;
          int v6 = *v5;
          if (*v5 >= v5[3])
          {
            int v6 = v5[2];
            *int v5 = v6;
          }
          char v7 = aSolnData[v8++];
        }
        while (v8 != 12);
        LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
        int v5 = (char **)g_p_CB_LCD_SA_Dbg;
      }
      uint64_t v9 = 0;
      uint64_t v10 = v5;
      do
      {
        if (v10)
        {
          sprintf_02x(v10, *((unsigned __int8 *)&v16 + v9));
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v5 = (char **)g_p_CB_LCD_SA_Dbg;
          uint64_t v10 = (char **)g_p_CB_LCD_SA_Dbg;
        }
        ++v9;
      }
      while (v9 != 4);
      uint64_t v11 = 0;
      int v12 = v5;
      do
      {
        if (v12)
        {
          sprintf_02x(v12, *((unsigned __int8 *)&v17 + v11));
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v5 = (char **)g_p_CB_LCD_SA_Dbg;
          int v12 = (char **)g_p_CB_LCD_SA_Dbg;
        }
        ++v11;
      }
      while (v11 != 4);
      uint64_t v4 = v4;
      uint64_t result = v5;
      do
      {
        if (result)
        {
          sprintf_02x(result, *(unsigned __int8 *)v3);
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v5 = (char **)g_p_CB_LCD_SA_Dbg;
          uint64_t result = (char **)g_p_CB_LCD_SA_Dbg;
        }
        unsigned int v3 = (char **)((char *)v3 + 1);
        --v4;
      }
      while (v4);
      if (v5)
      {
        __int32 v13 = (*v5)++;
        *__int32 v13 = 10;
        if (*v5 >= v5[3]) {
          *int v5 = v5[2];
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        uint64_t result = (char **)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input FpeSolution is equal to nullptr!", "FpeManager_printFpeSoln", 614, v14, v15);
      }
      g_FPE_AssertFlag = 1;
    }
  }
  return result;
}

uint64_t FusionManager_InternalReset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = a4;
  int v7 = a3;
  uint64_t v9 = result;
  if ((g_FPE_LogSeverity & 0x10) != 0)
  {
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v11 = *(double *)(g_TCU + 8);
    }
    else {
      double v11 = 0.0;
    }
    uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("INF:[%s() #%d] TT = %d, %0.3f FPE starting Internal Reset! (fpeErr=%u,peErr=%u)", "FusionManager_InternalReset", 283, v10, v11, v7, v6);
  }
  if (v7)
  {
    *(unsigned char *)(v9 + 2127089) = 0;
    FpeManager_FlushInFIFOs(v9);
    int v12 = MGen_Init((int64x2_t *)(a2 + 8));
    *(_OWORD *)(v9 + 87936) = 0u;
    *(_OWORD *)(v9 + 87952) = 0u;
    *(_OWORD *)(v9 + 87904) = 0u;
    *(_OWORD *)(v9 + 87920) = 0u;
    *(_OWORD *)(v9 + 87872) = 0u;
    *(_OWORD *)(v9 + 87888) = 0u;
    *(void *)(v9 + 87880) = 0xC08F380000000000;
    *(_WORD *)(v9 + 87898) = -999;
    *(int64x2_t *)(v9 + 87904) = vdupq_n_s64(0xC08F380000000000);
    *(void *)(v9 + 87928) = 0x7FF8000000000000;
    *(void *)(v9 + 87936) = 0;
    *(void *)(v9 + 87944) = 0;
    *(void *)(v9 + 87952) = 0xC08F380000000000;
    *(void *)(v9 + 87968) = 0;
    if (v12)
    {
      *(void *)(a2 + 1752) = *(void *)(a2 + 1736);
      *(unsigned char *)(a2 + 1821) = 0;
      *(void *)(a2 + 1848) = *(void *)(a2 + 1832);
      *(unsigned char *)(a2 + 1917) = 0;
      *(void *)(a2 + 1944) = *(void *)(a2 + 1928);
      *(unsigned char *)(a2 + 2013) = 0;
      *(void *)(a2 + 2040) = *(void *)(a2 + 2024);
      *(unsigned char *)(a2 + 2109) = 0;
      *(void *)(a2 + 2136) = *(void *)(a2 + 2120);
      *(unsigned char *)(a2 + 2205) = 0;
      *(void *)(a2 + 2232) = *(void *)(a2 + 2216);
      *(_DWORD *)(a2 + 131096) = 0;
      *(_WORD *)(a2 + 131100) = 0;
      *(void *)(a2 + 131104) = 0;
      char v13 = 1;
      *(unsigned char *)(a2 + 2301) = 0;
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v15 = *(double *)(g_TCU + 8);
        }
        else {
          double v15 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f internal reset error! (one module was not successful)", "FusionManager_InternalReset", 302, v14, v15);
      }
      char v13 = 0;
      g_FPE_AssertFlag = 1;
    }
    *(unsigned char *)(v9 + 2127088) = v13;
  }
  else if (!v6)
  {
    return result;
  }
  uint64_t result = KfirController_Init(a2 + 1736, a2, a3, a4, a5, a6);
  if ((result & 1) == 0)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v17 = *(double *)(g_TCU + 8);
      }
      else {
        double v17 = 0.0;
      }
      uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f internal reset error! (KfirController was not successful)", "FusionManager_InternalReset", 313, v16, v17);
    }
    g_FPE_AssertFlag = 1;
  }
  return result;
}

uint64_t FpeManager_FlushInFIFOs(uint64_t a1)
{
  unsigned int v1 = 0;
  int v2 = (unsigned __int8 *)(a1 + 87976);
  uint64_t v3 = a1 + 24;
  do
  {
    uint64_t result = isMeasDataType(v1);
    if (result) {
      uint64_t result = ExtMeasExtract_FlushMemory(v3, *v2, v1);
    }
    ++v1;
  }
  while (v1 != 15);
  return result;
}

size_t lsim03_01SendPosnApiStatus(int a1, int a2, int a3, int a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim03_01SendPosnApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if ((a2 - 1) > 1)
  {
    if ((a2 - 3) > 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "lsim03_01SendPosnApiStatus", 515, a1, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
      }
LABEL_18:
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (!result) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v14 = gnssOsa_Calloc("lsim03_01SendPosnApiStatus", 204, 1, 0x285A0uLL);
    if (v14)
    {
      double v11 = v14;
      v14[1] = a4;
      v14[2] = a3;
      *unint64_t v14 = a1;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>PospCB,Api,%u,Status,%u,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 77, "lsim03_01SendPosnApiStatus", a4, a3, a1, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v16, 3, 1);
      }
      GNS_ExecutePospCallback(4, 165280, (uint64_t)v11);
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v10 = gnssOsa_Calloc("lsim03_01SendPosnApiStatus", 181, 1, 0x285A0uLL);
    if (v10)
    {
      double v11 = v10;
      v10[1] = a4;
      v10[2] = a3;
      *unint64_t v10 = a1;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>CpCB,Api,%u,Status,%u,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 77, "lsim03_01SendPosnApiStatus", a4, a3, a1, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 3, 1);
      }
      GNS_ExecuteCpCb();
LABEL_13:
      free(v11);
      goto LABEL_18;
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (!result) {
    return result;
  }
LABEL_19:
  bzero(__str, 0x410uLL);
  unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v20, "LSM", 73, "lsim03_01SendPosnApiStatus");
  return LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
}

unsigned char *lsim03_11PrintAidRequestParams(void *a1, const char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1 && a1[1])
  {
    size_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      int v6 = (unsigned __int8 *)a1[1];
      int v7 = *v6;
      int v8 = v6[1];
      BOOL v9 = v6[2] == 0;
      uint64_t v10 = 89;
      if (v9) {
        uint64_t v11 = 78;
      }
      else {
        uint64_t v11 = 89;
      }
      if (v8) {
        uint64_t v12 = 89;
      }
      else {
        uint64_t v12 = 78;
      }
      if (!v7) {
        uint64_t v10 = 78;
      }
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LSIMAR,%s,RefTime,%c,RefPos,%c,Iono,%c\n", (unint64_t)v5, "LSM", 73, "lsim03_11PrintAidRequestParams", a2, v10, v12, v11);
      size_t result = (unsigned char *)LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    unint64_t v14 = (unsigned char *)a1[1];
    if (v14[3])
    {
      size_t result = (unsigned char *)a1[2];
      if (result)
      {
        size_t result = (unsigned char *)lsim03_05TraceArPerConstel(result, "GPS ");
        unint64_t v14 = (unsigned char *)a1[1];
      }
    }
    if (v14[4])
    {
      size_t result = (unsigned char *)a1[3];
      if (result)
      {
        size_t result = (unsigned char *)lsim03_05TraceArPerConstel(result, "GLON");
        unint64_t v14 = (unsigned char *)a1[1];
      }
    }
    if (v14[7])
    {
      size_t result = (unsigned char *)a1[6];
      if (result)
      {
        size_t result = (unsigned char *)lsim03_05TraceArPerConstel(result, "BDS ");
        unint64_t v14 = (unsigned char *)a1[1];
      }
    }
    if (v14[5])
    {
      size_t result = (unsigned char *)a1[4];
      if (result)
      {
        size_t result = (unsigned char *)lsim03_05TraceArPerConstel(result, "QZSS");
        unint64_t v14 = (unsigned char *)a1[1];
      }
    }
    if (v14[6])
    {
      size_t result = (unsigned char *)a1[5];
      if (result) {
        return (unsigned char *)lsim03_05TraceArPerConstel(result, "SBAS");
      }
    }
  }
  else
  {
    size_t result = (unsigned char *)LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AidReqParams\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim03_11PrintAidRequestParams", 513);
      return (unsigned char *)LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    }
  }
  return result;
}

size_t lsim03_05TraceArPerConstel(unsigned char *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a1[11]) {
      uint64_t v6 = 89;
    }
    else {
      uint64_t v6 = 78;
    }
    if (a1[9]) {
      uint64_t v7 = 89;
    }
    else {
      uint64_t v7 = 78;
    }
    if (a1[10]) {
      uint64_t v8 = 89;
    }
    else {
      uint64_t v8 = 78;
    }
    if (a1[5]) {
      uint64_t v9 = 89;
    }
    else {
      uint64_t v9 = 78;
    }
    if (a1[12]) {
      uint64_t v10 = 89;
    }
    else {
      uint64_t v10 = 78;
    }
    if (a1[4]) {
      uint64_t v11 = 89;
    }
    else {
      uint64_t v11 = 78;
    }
    if (a1[8]) {
      uint64_t v12 = 89;
    }
    else {
      uint64_t v12 = 78;
    }
    if (a1[7]) {
      uint64_t v13 = 89;
    }
    else {
      uint64_t v13 = 78;
    }
    if (a1[6]) {
      uint64_t v14 = 89;
    }
    else {
      uint64_t v14 = 78;
    }
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s:  LSIMAR,%s,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimeM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v5, "LSM", 73, "lsim03_05TraceArPerConstel", a2, v14, v13, v12, v11, v10, v9, v8, v7, v6);
    int v16 = 4;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ArList\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 87, "lsim03_05TraceArPerConstel", 513);
    int v16 = 2;
  }
  return LbsOsaTrace_WriteLog(0xCu, __str, v15, v16, 1);
}

uint64_t lsim03_12UpdateAidReqParams(char *a1, void *a2, int a3, int a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim03_12UpdateAidReqParams");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a2)
  {
    uint64_t v10 = (unsigned char *)a2[1];
    if (v10)
    {
      char v11 = *a1;
      if (*a1)
      {
        if ((*a1 & 2) != 0) {
          goto LABEL_7;
        }
      }
      else
      {
        v10[2] = 0;
        if ((v11 & 2) != 0)
        {
LABEL_7:
          if ((v11 & 4) != 0) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
      }
      v10[1] = 0;
      if ((v11 & 4) != 0)
      {
LABEL_9:
        if (v10[3])
        {
          uint64_t v12 = (unsigned char *)a2[2];
          if (v12)
          {
            lsim03_06UpdateAllowedArForConstel(*((_WORD *)a1 + 1), v12, v10 + 3);
            uint64_t v10 = (unsigned char *)a2[1];
          }
        }
        if (v10[4])
        {
          uint64_t v13 = (unsigned char *)a2[3];
          if (v13)
          {
            lsim03_06UpdateAllowedArForConstel(*((_WORD *)a1 + 2), v13, v10 + 4);
            uint64_t v10 = (unsigned char *)a2[1];
          }
        }
        if (v10[5])
        {
          uint64_t v14 = (unsigned char *)a2[4];
          if (v14)
          {
            lsim03_06UpdateAllowedArForConstel(*((_WORD *)a1 + 5), v14, v10 + 5);
            uint64_t v10 = (unsigned char *)a2[1];
          }
        }
        if (v10[6])
        {
          size_t v15 = (unsigned char *)a2[5];
          if (v15)
          {
            lsim03_06UpdateAllowedArForConstel(*((_WORD *)a1 + 4), v15, v10 + 6);
            uint64_t v10 = (unsigned char *)a2[1];
          }
        }
        int v17 = v10[7];
        int v16 = v10 + 7;
        if (v17)
        {
          uint64_t v18 = (unsigned char *)a2[6];
          if (v18) {
            lsim03_06UpdateAllowedArForConstel(*((_WORD *)a1 + 3), v18, v16);
          }
        }
        if ((~a3 & 0x21) != 0 && (a3 & 3) != 3) {
          goto LABEL_30;
        }
        uint64_t v19 = (unsigned char *)a2[2];
        if (v19)
        {
LABEL_29:
          void v19[4] = 1;
LABEL_30:
          if (a4) {
            lsim02_45CheckWithDeliveredAssistance(a2);
          }
          unint64_t v20 = (unsigned char *)a2[1];
          if (v20[1]
            || *v20
            || v20[3]
            && (unint64_t v29 = (unsigned char *)a2[2]) != 0
            && (v29[5] || v29[6] || v29[10] || v29[9] || v29[7] || v29[8] || v29[4] || v29[12])
            || v20[4]
            && (double v30 = (unsigned char *)a2[3]) != 0
            && (v30[5] || v30[6] || v30[10] || v30[9] || v30[7] || v30[8] || v30[4] || v30[12])
            || v20[5]
            && (uint64_t v31 = (unsigned char *)a2[4]) != 0
            && (v31[5] || v31[6] || v31[10] || v31[9] || v31[7] || v31[8] || v31[4] || v31[12])
            || v20[6]
            && (double v32 = (unsigned char *)a2[5]) != 0
            && (v32[5] || v32[6] || v32[10] || v32[9] || v32[7] || v32[8] || v32[4] || v32[12])
            || v20[7]
            && (uint64_t v33 = (unsigned char *)a2[6]) != 0
            && (v33[5] || v33[6] || v33[10] || v33[9] || v33[7] || v33[8] || v33[4] || v33[12] || v33[11]))
          {
            lsim03_11PrintAidRequestParams(a2, "POSITIONING AFTER MASKS");
            uint64_t v21 = 1;
          }
          else
          {
            uint64_t v21 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v34 = mach_continuous_time();
              unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AR NOT NEEDED AFTER MASKS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 73, "lsim03_12UpdateAidReqParams");
              LbsOsaTrace_WriteLog(0xCu, __str, v35, 4, 1);
              uint64_t v21 = 0;
            }
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim03_12UpdateAidReqParams");
            LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
          }
          return v21;
        }
        uint64_t v19 = gnssOsa_Calloc("lsim03_12UpdateAidReqParams", 939, 1, 0xD8uLL);
        a2[2] = v19;
        if (v19)
        {
          *(unsigned char *)(a2[1] + 3) = 1;
          goto LABEL_29;
        }
        uint64_t v21 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return v21;
        }
LABEL_40:
        bzero(__str, 0x410uLL);
        unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v26, "LSM", 73, "lsim03_12UpdateAidReqParams");
        LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
        return 0;
      }
LABEL_8:
      *uint64_t v10 = 0;
      goto LABEL_9;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AidReqParams\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 87, "lsim03_12UpdateAidReqParams", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v25, 2, 1);
  }
  uint64_t v21 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    goto LABEL_40;
  }
  return v21;
}

uint64_t lsim03_06UpdateAllowedArForConstel(__int16 a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_06UpdateAllowedArForConstel");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a3)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelFlag\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "lsim03_06UpdateAllowedArForConstel", 513);
    int v11 = 2;
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
  }
  if ((a1 & 8) != 0)
  {
    if ((a1 & 0x10) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    a2[6] = 0;
    if ((a1 & 0x10) != 0)
    {
LABEL_6:
      if ((a1 & 0x20) != 0) {
        goto LABEL_7;
      }
      goto LABEL_32;
    }
  }
  a2[4] = 0;
  if ((a1 & 0x20) != 0)
  {
LABEL_7:
    if ((a1 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  a2[7] = 0;
  if ((a1 & 0x40) != 0)
  {
LABEL_8:
    if ((a1 & 0x80) != 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  a2[8] = 0;
  if ((a1 & 0x80) != 0)
  {
LABEL_9:
    if ((a1 & 0x400) != 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  a2[5] = 0;
  if ((a1 & 0x400) != 0)
  {
LABEL_10:
    if ((a1 & 0x200) != 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  a2[9] = 0;
  if ((a1 & 0x200) != 0)
  {
LABEL_11:
    if ((a1 & 0x800) != 0) {
      goto LABEL_12;
    }
LABEL_37:
    a2[11] = 0;
    if ((a1 & 0x100) != 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_36:
  a2[10] = 0;
  if ((a1 & 0x800) == 0) {
    goto LABEL_37;
  }
LABEL_12:
  if ((a1 & 0x100) == 0) {
LABEL_13:
  }
    a2[12] = 0;
LABEL_14:
  if (!a2[5] && !a2[6] && !a2[10] && !a2[9] && !a2[7] && !a2[8] && !a2[4] && !a2[11] && !a2[12]) {
    *a3 = 0;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim03_06UpdateAllowedArForConstel");
    int v11 = 4;
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
  }
  return result;
}

uint64_t lsim03_13SendLocInfoReq(int a1, uint64_t a2, int a3, char a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim03_13SendLocInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if ((a3 - 1) >= 4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src,%u,SId,%u\n", v13);
    goto LABEL_30;
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoReq Src,%u,SId,%u\n", v14);
    goto LABEL_30;
  }
  if ((*(_DWORD *)a2 - 1) >= 3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocType,%u,Src,%u,SId,%u\n", v15, "LSM");
    goto LABEL_30;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  if ((v10 - 1) >= 3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosRepType,%u,Src,%u,SId,%u\n", v16, "LSM");
    goto LABEL_30;
  }
  if (*(char *)(a2 + 6) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HorAcc,%u,Src,%u,SId,%u\n", v17, "LSM");
    goto LABEL_30;
  }
  if (*(char *)(a2 + 8) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VertAcc,%u,Src,%u,SId,%u\n", v18, "LSM");
    goto LABEL_30;
  }
  if ((*(unsigned char *)(a2 + 7) + 1) >= 0x66u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HorAccConf,%u,Src,%u,SId,%u\n", v19, "LSM");
    goto LABEL_30;
  }
  if ((*(unsigned char *)(a2 + 9) + 1) >= 0x66u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VertAccConf,%u,Src,%u,SId,%u\n", v20, "LSM");
    goto LABEL_30;
  }
  if ((*(_DWORD *)(a2 + 12) - 7200001) < 0xFF9226E7)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespTime,%u,Src,%u,SId,%u\n", v11, "LSM");
    goto LABEL_30;
  }
  int v25 = *(_DWORD *)(a2 + 24);
  if (v25 && (v25 - 7200001) < 0xFF9226E7)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EarlyRespTime,%u,Src,%u,SId,%u\n", v26, "LSM");
LABEL_30:
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 0, 1);
      goto LABEL_31;
    }
    goto LABEL_31;
  }
  if (*(_DWORD *)(a2 + 20) && (*(_DWORD *)a2 == 1 || v10 != 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AgeLimit,%u,PosReportType,%u,LocInfoType,%u,Src,%u,SId,%u\n", v29, "LSM", 69);
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if (*(_DWORD *)(a2 + 32) >= 0x20u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocShapeTypes,%X,Src,%u,SId,%u\n", v27, "LSM");
      goto LABEL_30;
    }
LABEL_31:
    uint64_t v21 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim03_13SendLocInfoReq");
      LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
      return 0;
    }
    return v21;
  }
  if (*(_DWORD *)(a2 + 28) >= 0x10u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VelReqType,%X,Src,%u,SId,%u\n", v28, "LSM");
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if (*(char *)(a2 + 36) <= 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssIDMask,%X,Src,%u,SId,%u\n", v35, "LSM");
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  double v30 = (char *)gnssOsa_Calloc("lsim03_13SendLocInfoReq", 1256, 1, 0x40uLL);
  *((_DWORD *)v30 + 3) = a1;
  *((_DWORD *)v30 + 14) = a3;
  uint64_t v21 = 1;
  v30[60] = a4;
  uint64_t v31 = *(void *)(a2 + 31);
  long long v32 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v30 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v30 + 2) = v32;
  *(void *)(v30 + 47) = v31;
  AgpsSendFsmMsg(131, 131, 8623616, v30);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "LSM", 73, "lsim03_13SendLocInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v34, 4, 1);
  }
  return v21;
}

BOOL lsim03_14SendAbortInd(int a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_14SendAbortInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  uint64_t v6 = gnssOsa_Calloc("lsim03_14SendAbortInd", 1282, 1, 0x14uLL);
  unsigned __int16 v7 = v6;
  if (v6)
  {
    v6[3] = a1;
    v6[4] = a2;
    AgpsSendFsmMsg(131, 131, 8623363, v6);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim03_14SendAbortInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
  }
  return v7 != 0;
}

uint64_t lsim03_16AbortInd(int a1, int a2, BOOL a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  BOOL v30 = a3;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_16AbortInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  unsigned int v29 = 0;
  if ((a2 - 3) < 2)
  {
    if (g_GnsPospCallback)
    {
      int v8 = 1;
      int v9 = 2;
      goto LABEL_9;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    uint64_t v27 = mach_continuous_time();
    size_t v21 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx POSP,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 87, "lsim03_16AbortInd", 258, a1);
    int v22 = 2;
LABEL_30:
    LbsOsaTrace_WriteLog(0xCu, __str, v21, v22, 1);
    goto LABEL_31;
  }
  if ((a2 - 1) > 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_31;
    }
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    size_t v21 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 69, "lsim03_16AbortInd", 515, a2);
    int v22 = 0;
    goto LABEL_30;
  }
  if (!g_GnsCpCallback)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    size_t v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 87, "lsim03_16AbortInd", 258, a1);
    int v26 = 2;
    return LbsOsaTrace_WriteLog(0xCu, __str, v25, v26, 1);
  }
  int v8 = 2;
  int v9 = 1;
LABEL_9:
  if (!lsim11_07GnmGetSessionFromNativeId(a1, v8, &v29))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 69, "lsim03_16AbortInd", 2052, a1, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 0, 1);
    }
    if (a3) {
      lsim03_01SendPosnApiStatus(a1, a2, 4, v9);
    }
LABEL_31:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_32;
  }
  int v10 = gnssOsa_Calloc("lsim03_16AbortInd", 1356, 1, 0x10uLL);
  if (v10)
  {
    unint64_t v11 = v10;
    if (!a3
      && (lsim11_03GnmUpdateSession(v29, (uint64_t)&v30) & 1) == 0
      && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionUpdateFailed GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "lsim03_16AbortInd", v29);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    }
    v11[3] = v29;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SId,%u,GnmSId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 77, "lsim03_16AbortInd", a1, v29, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 3, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_ABORT_REQ =>GNM,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim03_16AbortInd", v29);
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    AgpsSendFsmMsg(131, 128, 8591616, v11);
    lsim03_09ResetAidReqData();
    goto LABEL_31;
  }
  if (a3) {
    lsim03_01SendPosnApiStatus(a1, a2, 6, v9);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
LABEL_32:
    bzero(__str, 0x410uLL);
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    size_t v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v28, "LSM", 73, "lsim03_16AbortInd");
    int v26 = 4;
    return LbsOsaTrace_WriteLog(0xCu, __str, v25, v26, 1);
  }
  return result;
}

size_t lsim03_09ResetAidReqData(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  g_lsimAsstReqOsTimeMs = 0;
  memset_s(&g_lsimAsstDelivered, 0x20uLL, 0, 0x20uLL);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstReqData Cleared\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "LSM", 77, "lsim03_09ResetAidReqData");
    return LbsOsaTrace_WriteLog(0xCu, __str, v2, 3, 1);
  }
  return result;
}

size_t lsim03_17GnssMeasResultInd(int a1, const void *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_17GnssMeasResultInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  int v8 = (int *)gnssOsa_Calloc("lsim03_17GnssMeasResultInd", 1416, 1, 0x285A0uLL);
  if (v8)
  {
    int v9 = v8;
    if (a2)
    {
      memcpy(v8, a2, 0x2859CuLL);
    }
    else
    {
      v8[170] = 9;
      v8[8] = 9;
      *((unsigned char *)v8 + 4) = 1;
    }
    *int v9 = a1;
    if (a3 == 3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:MEAS =>PospCB,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 77, "lsim03_17GnssMeasResultInd", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 3, 1);
      }
      GNS_ExecutePospCallback(1, 165276, (uint64_t)v9);
    }
    else if (a3 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:MEAS =>CpCB,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 77, "lsim03_17GnssMeasResultInd", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 3, 1);
      }
      GNS_ExecuteCpCb();
    }
    free(v9);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "lsim03_17GnssMeasResultInd");
    return LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  return result;
}

size_t lsim03_18GnssPosnResultInd(int a1, long long *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_18GnssPosnResultInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  int v8 = gnssOsa_Calloc("lsim03_18GnssPosnResultInd", 1460, 1, 0x285A0uLL);
  if (v8)
  {
    int v9 = v8;
    if (a2)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      long long v12 = a2[3];
      v8[2] = a2[2];
      void v8[3] = v12;
      *int v8 = v10;
      v8[1] = v11;
      long long v13 = a2[4];
      long long v14 = a2[5];
      long long v15 = a2[6];
      *((void *)v8 + 14) = *((void *)a2 + 14);
      v8[5] = v14;
      v8[6] = v15;
      void v8[4] = v13;
    }
    else
    {
      *((_DWORD *)v8 + 5) = 9;
      *((unsigned char *)v8 + 4) = 1;
    }
    *(_DWORD *)int v8 = a1;
    if (a3 == 3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:POSN =>PospCB,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 77, "lsim03_18GnssPosnResultInd", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 3, 1);
      }
      GNS_ExecutePospCallback(2, 120, (uint64_t)v9);
    }
    else if (a3 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:POSN =>CpCB,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 77, "lsim03_18GnssPosnResultInd", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 3, 1);
      }
      GNS_ExecuteCpCb();
    }
    free(v9);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim03_18GnssPosnResultInd");
    return LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
  }
  return result;
}

uint64_t lsim03_19HandleGnssAbortCnf(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_19HandleGnssAbortCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  char v14 = 0;
  int v13 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_ABORT_CNF,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_19HandleGnssAbortCnf", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 12), &v13, 0, 0, 0, &v14))
  {
    if (lsim11_13GnmAsyncRspNeeded(*(_DWORD *)(a1 + 12)))
    {
      int v6 = *(_DWORD *)(a1 + 16);
      if (v14)
      {
        lsim03_01SendPosnApiStatus(v13, 1, v6, 1);
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CP,SId,%u,GnmSId,%u\n", v11);
LABEL_12:
          LbsOsaTrace_WriteLog(0xCu, __str, v7, 5, 1);
        }
      }
      else
      {
        lsim03_01SendPosnApiStatus(v13, 3, v6, 2);
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL,SId,%u,GnmSId,%u\n", v12);
          goto LABEL_12;
        }
      }
    }
    lsim11_04GnmResetSession(*(_DWORD *)(a1 + 12));
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim03_19HandleGnssAbortCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

uint64_t lsim03_31HandleGnssMsrResultInd(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_31HandleGnssMsrResultInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  char v11 = 0;
  int v10 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_MSR_RESULT_IND,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_31HandleGnssMsrResultInd", *(_DWORD *)(a1 + 165288));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 165288), &v10, 0, 0, 0, &v11))
  {
    int v6 = v11 ? 1 : 3;
    lsim03_17GnssMeasResultInd(v10, (const void *)(a1 + 12), v6);
    if (*(unsigned char *)(a1 + 16) == 1) {
      lsim11_04GnmResetSession(*(_DWORD *)(a1 + 165288));
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim03_31HandleGnssMsrResultInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  return 0;
}

uint64_t lsim03_32HandleGnssMsAssistedCnf(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_32HandleGnssMsAssistedCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  char v14 = 0;
  int v13 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSA_GNSS_CNF,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_32HandleGnssMsAssistedCnf", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 12), &v13, 0, 0, 0, &v14))
  {
    if (v14)
    {
      int v6 = 1;
      int v7 = 0;
    }
    else
    {
      int v6 = 3;
      int v7 = 1;
    }
    lsim03_01SendPosnApiStatus(v13, v6, *(_DWORD *)(a1 + 16), v7);
    if (*(_DWORD *)(a1 + 16) != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim03_32HandleGnssMsAssistedCnf", 2049, *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
      }
      lsim11_04GnmResetSession(*(_DWORD *)(a1 + 12));
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim03_32HandleGnssMsAssistedCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return 0;
}

uint64_t lsim03_33HandleGnssPosInd(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_33HandleGnssPosInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  char v11 = 0;
  int v10 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_POS_IND,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_33HandleGnssPosInd", *(_DWORD *)(a1 + 132));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 132), &v10, 0, 0, 0, &v11))
  {
    int v6 = v11 ? 1 : 3;
    lsim03_18GnssPosnResultInd(v10, (long long *)(a1 + 12), v6);
    if (*(unsigned char *)(a1 + 16)) {
      lsim11_04GnmResetSession(*(_DWORD *)(a1 + 132));
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim03_33HandleGnssPosInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  return 0;
}

uint64_t lsim03_34HandleGnssAidRequInd(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_34HandleGnssAidRequInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  unsigned __int8 v119 = 0;
  int v117 = 0;
  int v118 = -1;
  unsigned __int8 v116 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_POSN_GNSS_AID_REQ_IND,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_34HandleGnssAidRequInd", *(_DWORD *)(a1 + 72));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 72), &v118, &v117, 0, &v116, (char *)&v119)) {
    goto LABEL_78;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LastAsstReqTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_04CheckAsstReqStatus", g_lsimAsstReqOsTimeMs);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  int v8 = g_lsimAsstReqOsTimeMs;
  if (g_lsimAsstReqOsTimeMs
    && (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v8 <= 0x2710)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_78;
    }
    bzero(__str, 0x410uLL);
    unint64_t v114 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LastReq,%ums,Threshold,%ums\n", v114);
    goto LABEL_77;
  }
  __s[0] = 0;
  *(void *)&__s[2] = 0;
  *(_DWORD *)&__s[10] = 0;
  memset_s(__s, 0xEuLL, 0, 0xEuLL);
  lsim03_11PrintAidRequestParams((void *)(a1 + 16), "POSITIONING BEFORE MASKS");
  if (v117 == 2)
  {
    unsigned __int16 v9 = &qword_26AE6D3FE;
  }
  else
  {
    if (v117 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosMethod,%u,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim03_34HandleGnssAidRequInd", 515, v117, *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
      }
      goto LABEL_19;
    }
    unsigned __int16 v9 = &g_LsimPltConfig;
  }
  *(void *)uint64_t __s = *v9;
  *(void *)&__s[6] = *(uint64_t *)((char *)v9 + 6);
LABEL_19:
  int v13 = v119;
  if (!lsim03_12UpdateAidReqParams(__s, (void *)(a1 + 16), v116, 1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_78;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AidReq Cleared,GnmSId,%u\n");
    goto LABEL_77;
  }
  g_lsimAsstReqOsTimeMs = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  int v14 = v118;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "lsim03_03GnssAidRequest");
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  if (*(void *)(a1 + 24))
  {
    unsigned __int16 v17 = gnssOsa_Calloc("lsim03_03GnssAidRequest", 374, 1, 0x285A0uLL);
    if (!v17) {
      goto LABEL_71;
    }
    uint64_t v18 = v17;
    *unsigned __int16 v17 = v14;
    unsigned __int16 v19 = gnssOsa_Calloc("lsim03_03GnssAidRequest", 384, 1, 8uLL);
    v18[1] = v19;
    if (!v19)
    {
LABEL_70:
      free(v18);
LABEL_71:
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
    *unsigned __int16 v19 = **(void **)(a1 + 24);
    uint64_t v20 = *(unsigned char **)(a1 + 24);
    if (v20[3] && *(void *)(a1 + 32))
    {
      uint64_t v21 = (char *)gnssOsa_Calloc("lsim03_03GnssAidRequest", 399, 1, 0xD8uLL);
      v18[2] = v21;
      if (!v21)
      {
        int v94 = (void *)v18[1];
        if (!v94) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      long long v23 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v23;
      long long v24 = *(_OWORD *)(v22 + 32);
      long long v25 = *(_OWORD *)(v22 + 48);
      long long v26 = *(_OWORD *)(v22 + 80);
      *((_OWORD *)v21 + 4) = *(_OWORD *)(v22 + 64);
      *((_OWORD *)v21 + 5) = v26;
      *((_OWORD *)v21 + 2) = v24;
      *((_OWORD *)v21 + 3) = v25;
      long long v27 = *(_OWORD *)(v22 + 96);
      long long v28 = *(_OWORD *)(v22 + 112);
      long long v29 = *(_OWORD *)(v22 + 144);
      *((_OWORD *)v21 + 8) = *(_OWORD *)(v22 + 128);
      *((_OWORD *)v21 + 9) = v29;
      *((_OWORD *)v21 + 6) = v27;
      *((_OWORD *)v21 + 7) = v28;
      long long v30 = *(_OWORD *)(v22 + 160);
      long long v31 = *(_OWORD *)(v22 + 176);
      long long v32 = *(_OWORD *)(v22 + 192);
      *(void *)(v21 + 206) = *(void *)(v22 + 206);
      *((_OWORD *)v21 + 11) = v31;
      *((_OWORD *)v21 + 12) = v32;
      *((_OWORD *)v21 + 10) = v30;
      uint64_t v20 = *(unsigned char **)(a1 + 24);
    }
    if (v20[4] && *(void *)(a1 + 40))
    {
      uint64_t v33 = (char *)gnssOsa_Calloc("lsim03_03GnssAidRequest", 414, 1, 0xD8uLL);
      v18[3] = v33;
      if (!v33)
      {
        unsigned __int16 v104 = (void *)v18[1];
        if (v104) {
          free(v104);
        }
        v18[1] = 0;
        int v94 = (void *)v18[2];
        if (!v94) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      uint64_t v34 = *(void *)(a1 + 40);
      long long v35 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v35;
      long long v36 = *(_OWORD *)(v34 + 32);
      long long v37 = *(_OWORD *)(v34 + 48);
      long long v38 = *(_OWORD *)(v34 + 80);
      *((_OWORD *)v33 + 4) = *(_OWORD *)(v34 + 64);
      *((_OWORD *)v33 + 5) = v38;
      *((_OWORD *)v33 + 2) = v36;
      *((_OWORD *)v33 + 3) = v37;
      long long v39 = *(_OWORD *)(v34 + 96);
      long long v40 = *(_OWORD *)(v34 + 112);
      long long v41 = *(_OWORD *)(v34 + 144);
      *((_OWORD *)v33 + 8) = *(_OWORD *)(v34 + 128);
      *((_OWORD *)v33 + 9) = v41;
      *((_OWORD *)v33 + 6) = v39;
      *((_OWORD *)v33 + 7) = v40;
      long long v42 = *(_OWORD *)(v34 + 160);
      long long v43 = *(_OWORD *)(v34 + 176);
      long long v44 = *(_OWORD *)(v34 + 192);
      *(void *)(v33 + 206) = *(void *)(v34 + 206);
      *((_OWORD *)v33 + 11) = v43;
      *((_OWORD *)v33 + 12) = v44;
      *((_OWORD *)v33 + 10) = v42;
      uint64_t v20 = *(unsigned char **)(a1 + 24);
    }
    if (v20[6] && *(void *)(a1 + 56))
    {
      char v45 = (char *)gnssOsa_Calloc("lsim03_03GnssAidRequest", 430, 1, 0xD8uLL);
      v18[5] = v45;
      if (!v45)
      {
        BOOL v105 = (void *)v18[1];
        if (v105) {
          free(v105);
        }
        v18[1] = 0;
        uint64_t v106 = (void *)v18[2];
        if (v106) {
          free(v106);
        }
        v18[2] = 0;
        int v94 = (void *)v18[3];
        if (!v94) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      uint64_t v46 = *(void *)(a1 + 56);
      long long v47 = *(_OWORD *)(v46 + 16);
      *(_OWORD *)char v45 = *(_OWORD *)v46;
      *((_OWORD *)v45 + 1) = v47;
      long long v48 = *(_OWORD *)(v46 + 32);
      long long v49 = *(_OWORD *)(v46 + 48);
      long long v50 = *(_OWORD *)(v46 + 80);
      *((_OWORD *)v45 + 4) = *(_OWORD *)(v46 + 64);
      *((_OWORD *)v45 + 5) = v50;
      *((_OWORD *)v45 + 2) = v48;
      *((_OWORD *)v45 + 3) = v49;
      long long v51 = *(_OWORD *)(v46 + 96);
      long long v52 = *(_OWORD *)(v46 + 112);
      long long v53 = *(_OWORD *)(v46 + 144);
      *((_OWORD *)v45 + 8) = *(_OWORD *)(v46 + 128);
      *((_OWORD *)v45 + 9) = v53;
      *((_OWORD *)v45 + 6) = v51;
      *((_OWORD *)v45 + 7) = v52;
      long long v54 = *(_OWORD *)(v46 + 160);
      long long v55 = *(_OWORD *)(v46 + 176);
      long long v56 = *(_OWORD *)(v46 + 192);
      *(void *)(v45 + 206) = *(void *)(v46 + 206);
      *((_OWORD *)v45 + 11) = v55;
      *((_OWORD *)v45 + 12) = v56;
      *((_OWORD *)v45 + 10) = v54;
      uint64_t v20 = *(unsigned char **)(a1 + 24);
    }
    if (v20[5] && *(void *)(a1 + 48))
    {
      uint64_t v57 = (char *)gnssOsa_Calloc("lsim03_03GnssAidRequest", 447, 1, 0xD8uLL);
      void v18[4] = v57;
      if (!v57)
      {
        char v107 = (void *)v18[1];
        if (v107) {
          free(v107);
        }
        v18[1] = 0;
        char v108 = (void *)v18[2];
        if (v108) {
          free(v108);
        }
        v18[2] = 0;
        int v109 = (void *)v18[3];
        if (v109) {
          free(v109);
        }
        v18[3] = 0;
        int v94 = (void *)v18[5];
        if (!v94) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      uint64_t v58 = *(void *)(a1 + 48);
      long long v59 = *(_OWORD *)(v58 + 16);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *((_OWORD *)v57 + 1) = v59;
      long long v60 = *(_OWORD *)(v58 + 32);
      long long v61 = *(_OWORD *)(v58 + 48);
      long long v62 = *(_OWORD *)(v58 + 80);
      *((_OWORD *)v57 + 4) = *(_OWORD *)(v58 + 64);
      *((_OWORD *)v57 + 5) = v62;
      *((_OWORD *)v57 + 2) = v60;
      *((_OWORD *)v57 + 3) = v61;
      long long v63 = *(_OWORD *)(v58 + 96);
      long long v64 = *(_OWORD *)(v58 + 112);
      long long v65 = *(_OWORD *)(v58 + 144);
      *((_OWORD *)v57 + 8) = *(_OWORD *)(v58 + 128);
      *((_OWORD *)v57 + 9) = v65;
      *((_OWORD *)v57 + 6) = v63;
      *((_OWORD *)v57 + 7) = v64;
      long long v66 = *(_OWORD *)(v58 + 160);
      long long v67 = *(_OWORD *)(v58 + 176);
      long long v68 = *(_OWORD *)(v58 + 192);
      *(void *)(v57 + 206) = *(void *)(v58 + 206);
      *((_OWORD *)v57 + 11) = v67;
      *((_OWORD *)v57 + 12) = v68;
      *((_OWORD *)v57 + 10) = v66;
      uint64_t v20 = *(unsigned char **)(a1 + 24);
    }
    if (!v20[7] || !*(void *)(a1 + 64)) {
      goto LABEL_45;
    }
    double v69 = (char *)gnssOsa_Calloc("lsim03_03GnssAidRequest", 467, 1, 0xD8uLL);
    v18[6] = v69;
    if (v69)
    {
      uint64_t v70 = *(void *)(a1 + 64);
      long long v71 = *(_OWORD *)(v70 + 16);
      *(_OWORD *)double v69 = *(_OWORD *)v70;
      *((_OWORD *)v69 + 1) = v71;
      long long v72 = *(_OWORD *)(v70 + 32);
      long long v73 = *(_OWORD *)(v70 + 48);
      long long v74 = *(_OWORD *)(v70 + 80);
      *((_OWORD *)v69 + 4) = *(_OWORD *)(v70 + 64);
      *((_OWORD *)v69 + 5) = v74;
      *((_OWORD *)v69 + 2) = v72;
      *((_OWORD *)v69 + 3) = v73;
      long long v75 = *(_OWORD *)(v70 + 96);
      long long v76 = *(_OWORD *)(v70 + 112);
      long long v77 = *(_OWORD *)(v70 + 144);
      *((_OWORD *)v69 + 8) = *(_OWORD *)(v70 + 128);
      *((_OWORD *)v69 + 9) = v77;
      *((_OWORD *)v69 + 6) = v75;
      *((_OWORD *)v69 + 7) = v76;
      long long v78 = *(_OWORD *)(v70 + 160);
      long long v79 = *(_OWORD *)(v70 + 176);
      long long v80 = *(_OWORD *)(v70 + 192);
      *(void *)(v69 + 206) = *(void *)(v70 + 206);
      *((_OWORD *)v69 + 11) = v79;
      *((_OWORD *)v69 + 12) = v80;
      *((_OWORD *)v69 + 10) = v78;
LABEL_45:
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (v13)
      {
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v82 = mach_continuous_time();
          unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:AIDREQ =>CpCB,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "LSM", 73, "lsim03_03GnssAidRequest", v14, 1);
          LbsOsaTrace_WriteLog(0xCu, __str, v83, 4, 1);
        }
        GNS_ExecuteCpCb();
      }
      else
      {
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v86 = mach_continuous_time();
          unsigned __int16 v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:AIDREQ =>PospCB,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "LSM", 73, "lsim03_03GnssAidRequest", v14, 3);
          LbsOsaTrace_WriteLog(0xCu, __str, v87, 4, 1);
        }
        GNS_ExecutePospCallback(3, 56, (uint64_t)v18);
      }
      long long v88 = (void *)v18[1];
      if (v88) {
        free(v88);
      }
      v18[1] = 0;
      long long v89 = (void *)v18[2];
      if (v89) {
        free(v89);
      }
      v18[2] = 0;
      long long v90 = (void *)v18[3];
      if (v90) {
        free(v90);
      }
      v18[3] = 0;
      int v91 = (void *)v18[5];
      if (v91) {
        free(v91);
      }
      v18[5] = 0;
      uint64_t v92 = (void *)v18[4];
      if (v92) {
        free(v92);
      }
      void v18[4] = 0;
      unsigned __int16 v93 = (void *)v18[6];
      if (v93) {
        free(v93);
      }
      goto LABEL_70;
    }
    unsigned __int16 v110 = (void *)v18[1];
    if (v110) {
      free(v110);
    }
    v18[1] = 0;
    uint64_t v111 = (void *)v18[2];
    if (v111) {
      free(v111);
    }
    v18[2] = 0;
    char v112 = (void *)v18[3];
    if (v112) {
      free(v112);
    }
    v18[3] = 0;
    char v113 = (void *)v18[5];
    if (v113) {
      free(v113);
    }
    v18[5] = 0;
    int v94 = (void *)v18[4];
    if (!v94)
    {
LABEL_75:
      free(v18);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
LABEL_74:
    free(v94);
    goto LABEL_75;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v84 = mach_continuous_time();
    unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssAidReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "LSM", 87, "lsim03_03GnssAidRequest", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v85, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_76:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n");
LABEL_77:
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
LABEL_78:
  char v95 = *(void **)(a1 + 24);
  if (v95) {
    free(v95);
  }
  *(void *)(a1 + 24) = 0;
  long long v96 = *(void **)(a1 + 32);
  if (v96) {
    free(v96);
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v97 = *(void **)(a1 + 40);
  if (v97) {
    free(v97);
  }
  *(void *)(a1 + 40) = 0;
  unsigned __int16 v98 = *(void **)(a1 + 48);
  if (v98) {
    free(v98);
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v99 = *(void **)(a1 + 56);
  if (v99) {
    free(v99);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v100 = *(void **)(a1 + 64);
  if (v100) {
    free(v100);
  }
  *(void *)(a1 + 64) = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v101 = mach_continuous_time();
    unsigned __int16 v102 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v101), "LSM", 73, "lsim03_34HandleGnssAidRequInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v102, 4, 1);
  }
  return 0;
}

uint64_t lsim03_35HandleGnssMsBasedCnf(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v14 = 0;
  int v13 = -1;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_35HandleGnssMsBasedCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSB_GNSS_CNF,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_35HandleGnssMsBasedCnf", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (lsim11_05GnmGetSessionInfo(*(_DWORD *)(a1 + 12), &v13, 0, 0, 0, &v14))
  {
    if (v14)
    {
      int v6 = 1;
      int v7 = 0;
    }
    else
    {
      int v6 = 3;
      int v7 = 1;
    }
    lsim03_01SendPosnApiStatus(v13, v6, *(_DWORD *)(a1 + 16), v7);
    if (*(_DWORD *)(a1 + 16) != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim03_35HandleGnssMsBasedCnf", 2049, *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
      }
      lsim11_04GnmResetSession(*(_DWORD *)(a1 + 12));
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim03_35HandleGnssMsBasedCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return 0;
}

uint64_t lsim03_36HandleAbortInd(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_36HandleAbortInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_ABORT_IND,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_36HandleAbortInd", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  lsim03_16AbortInd(*(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), 1);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim03_36HandleAbortInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  return 0;
}

uint64_t lsim03_37HandleLocInfoReq(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_37HandleLocInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_LOC_INFO_REQ,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_37HandleLocInfoReq", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 56));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LOCREQ:SId,%u,Src,%u,Emer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 77, "lsim03_37HandleLocInfoReq", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 3, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LOCREQ:GEN,PosM,%u,VelMask,%X,ShapeMask,%X,GnssId,%X,BlockAidReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 77, "lsim03_37HandleLocInfoReq", *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 3, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LOCREQ:QOS,NumRep,%u,HorAcc,%u,HorAccConf,%u,VertAcc,%u,VertAccConf,%u,RspTime,%u,RepType,%u,AgeLimit,%u,EarlyRspTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 77, "lsim03_37HandleLocInfoReq", *(unsigned __int16 *)(a1 + 20), *(unsigned __int8 *)(a1 + 22), *(unsigned __int8 *)(a1 + 23), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40));
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 3, 1);
  }
  int v12 = *(_DWORD *)(a1 + 12);
  int v13 = *(_DWORD *)(a1 + 56);
  int v14 = *(unsigned __int8 *)(a1 + 60);
  int v60 = 0;
  if ((v13 - 3) >= 2)
  {
    if ((v13 - 1) > 1)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
        goto LABEL_71;
      }
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      size_t v31 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 69, "lsim03_02LocInfoReqInd", 515, v12, v13);
      int v32 = 0;
    }
    else
    {
      if (g_GnsCpCallback)
      {
        int v15 = 0;
        int v16 = 2;
        int v17 = 255;
        goto LABEL_17;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
        goto LABEL_71;
      }
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      size_t v31 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "LSM", 87, "lsim03_02LocInfoReqInd", 258, v12);
      int v32 = 2;
    }
LABEL_35:
    LbsOsaTrace_WriteLog(0xCu, __str, v31, v32, 1);
    goto LABEL_71;
  }
  if (g_GnsPospCallback)
  {
    int v16 = 1;
    int v17 = 4;
    int v15 = 1;
LABEL_17:
    int v18 = *(_DWORD *)(a1 + 16);
    if ((v18 - 1) >= 3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoType,%u,SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 87, "lsim03_02LocInfoReqInd", 515, *(_DWORD *)(a1 + 16), v12, v13);
        LbsOsaTrace_WriteLog(0xCu, __str, v26, 2, 1);
      }
      int v27 = v12;
      int v28 = v13;
      int v29 = 2;
    }
    else
    {
      if (v14 || (~dword_26AE537A4 & 0x81) == 0)
      {
        int v19 = v15;
        char SessionFromNativeId = lsim11_07GnmGetSessionFromNativeId(v12, v16, &v60);
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
        if (SessionFromNativeId)
        {
          if (IsLoggingAllowed)
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmSId,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim03_02LocInfoReqInd", 2053, v60);
            LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
          }
          int v24 = lsim03_07SendRequestToGnm(v60, v14 != 0, (long long *)(a1 + 16));
          int v15 = v19;
          goto LABEL_68;
        }
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v37 = mach_continuous_time();
          unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "LSM", 73, "lsim03_08HandleEmerPriority");
          LbsOsaTrace_WriteLog(0xCu, __str, v38, 4, 1);
        }
        unsigned int v61 = 2;
        int v15 = v19;
        if (!v14 && ((lsim04_03CheckEmergencySessions(2) & 1) != 0 || lsim04_03CheckEmergencySessions(1)))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v44 = mach_continuous_time();
            unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SType,%u,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "LSM", 87, "lsim03_08HandleEmerPriority", 1025, v16, v12);
            LbsOsaTrace_WriteLog(0xCu, __str, v45, 2, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v46 = mach_continuous_time();
            unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "LSM", 73, "lsim03_08HandleEmerPriority");
            LbsOsaTrace_WriteLog(0xCu, __str, v47, 4, 1);
          }
          int v24 = 10;
          goto LABEL_68;
        }
        if ((lsim11_02GnmCreateSession(v12, v16, v18, v14 != 0, 1, *(unsigned char *)(a1 + 52), &v61) & 1) == 0)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v48 = mach_continuous_time();
            unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SType,%u,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "LSM", 87, "lsim03_08HandleEmerPriority", 2049, v16, v12);
            LbsOsaTrace_WriteLog(0xCu, __str, v49, 2, 1);
          }
          int v24 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v50 = mach_continuous_time();
            unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "LSM", 73, "lsim03_08HandleEmerPriority");
            LbsOsaTrace_WriteLog(0xCu, __str, v51, 4, 1);
            int v24 = 0;
          }
          goto LABEL_68;
        }
        int v39 = lsim03_07SendRequestToGnm(v61, v14 != 0, (long long *)(a1 + 16));
        if (v39 == 1)
        {
          if (v14)
          {
            lsim23_02GnmStopEarlyStartSession(0);
            lsim04_02CloseOtherCpNiSessions(255, &v61);
            lsim05_43CloseOtherPospSessions(255, &v61);
            lsim05_42CloseSuplSessions(v17, 0);
          }
          if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
          {
            int v24 = 1;
            goto LABEL_68;
          }
          bzero(__str, 0x410uLL);
          uint64_t v40 = mach_continuous_time();
          size_t v41 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "LSM", 73, "lsim03_08HandleEmerPriority");
          int v24 = 1;
        }
        else
        {
          int v24 = v39;
          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v52 = mach_continuous_time();
            unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SType,%u,CpGnmRequest,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "LSM", 87, "lsim03_08HandleEmerPriority", 2049, v16, v12);
            LbsOsaTrace_WriteLog(0xCu, __str, v53, 2, 1);
          }
          if (!lsim11_04GnmResetSession(v61) && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v54 = mach_continuous_time();
            unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SType,%u,CpGnmRequest,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "LSM", 87, "lsim03_08HandleEmerPriority", 2050, v16, v12);
            LbsOsaTrace_WriteLog(0xCu, __str, v55, 2, 1);
          }
          if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
            goto LABEL_68;
          }
          bzero(__str, 0x410uLL);
          uint64_t v56 = mach_continuous_time();
          size_t v41 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "LSM", 73, "lsim03_08HandleEmerPriority");
        }
        LbsOsaTrace_WriteLog(0xCu, __str, v41, 4, 1);
LABEL_68:
        if (v24 == 1) {
          goto LABEL_71;
        }
        int v27 = v12;
        int v28 = v13;
        int v29 = v24;
        goto LABEL_70;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v42 = mach_continuous_time();
        unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SId,%u,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "LSM", 87, "lsim03_02LocInfoReqInd", 1027, v12, v13);
        LbsOsaTrace_WriteLog(0xCu, __str, v43, 2, 1);
      }
      int v27 = v12;
      int v28 = v13;
      int v29 = 3;
    }
LABEL_70:
    lsim03_01SendPosnApiStatus(v27, v28, v29, v15);
    goto LABEL_71;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx POSP,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 87, "lsim03_02LocInfoReqInd", 258, v12);
    LbsOsaTrace_WriteLog(0xCu, __str, v35, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    size_t v31 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "LSM", 73, "lsim03_02LocInfoReqInd");
    int v32 = 4;
    goto LABEL_35;
  }
LABEL_71:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v57 = mach_continuous_time();
    unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "LSM", 73, "lsim03_37HandleLocInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v58, 4, 1);
  }
  return 0;
}

uint64_t lsim03_38HandleClearGnssInd(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim03_38HandleClearGnssInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0)) {
      goto LABEL_13;
    }
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 69, "lsim03_38HandleClearGnssInd", 517);
    int v8 = 0;
    goto LABEL_12;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_CLEAR_DATA_IND,Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim03_38HandleClearGnssInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x7087F) != 0)
  {
    lsim03_09ResetAidReqData();
    goto LABEL_13;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClearNotNeeded\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim03_38HandleClearGnssInd");
    int v8 = 4;
LABEL_12:
    LbsOsaTrace_WriteLog(0xCu, __str, v7, v8, 1);
  }
LABEL_13:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim03_38HandleClearGnssInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return 0;
}

uint64_t lsim03_07SendRequestToGnm(int a1, char a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a3 + 4) == 2 && (dword_26AE537A4 & 0x40000) != 0)
  {
    *((_DWORD *)a3 + 4) = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Overriding Periodic, GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 87, "lsim03_07SendRequestToGnm", a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AsstAvail,%u,GnssID,%u,LocInfoType,%u,VelTypeMask,%X,LocShapeMask,%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 68, "lsim03_07SendRequestToGnm", *((unsigned __int8 *)a3 + 37), *((unsigned __int8 *)a3 + 36), *(_DWORD *)a3, *((_DWORD *)a3 + 7), *((_DWORD *)a3 + 8));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HorAccConf,%u,HorAcc,%u,PosRepType,%u,RepAmt,%u,RespTime,%u,VertAccConf,%u,VertAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim03_07SendRequestToGnm", *((unsigned __int8 *)a3 + 7), *((unsigned __int8 *)a3 + 6), *((_DWORD *)a3 + 4), *((unsigned __int16 *)a3 + 2), *((_DWORD *)a3 + 3), *((unsigned __int8 *)a3 + 9), *((unsigned __int8 *)a3 + 8));
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
  }
  if ((*(_DWORD *)a3 - 2) >= 2)
  {
    if (*(_DWORD *)a3 != 1) {
      return 1;
    }
    int v19 = (char *)gnssOsa_Calloc("lsim03_07SendRequestToGnm", 690, 1, 0x3CuLL);
    if (v19)
    {
      int v13 = v19;
      *((_DWORD *)v19 + 3) = a1;
      v19[16] = a2;
      long long v20 = *a3;
      long long v21 = a3[1];
      *(void *)(v19 + 51) = *(void *)((char *)a3 + 31);
      *(_OWORD *)(v19 + 36) = v21;
      *(_OWORD *)(v19 + 20) = v20;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSA_GNSS_REQ =>GNM,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim03_07SendRequestToGnm", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
      }
      int v18 = 8595968;
      goto LABEL_19;
    }
  }
  else
  {
    int v12 = (char *)gnssOsa_Calloc("lsim03_07SendRequestToGnm", 669, 1, 0x3CuLL);
    if (v12)
    {
      int v13 = v12;
      *((_DWORD *)v12 + 3) = a1;
      v12[16] = a2;
      long long v14 = *a3;
      long long v15 = a3[1];
      *(void *)(v12 + 51) = *(void *)((char *)a3 + 31);
      *(_OWORD *)(v12 + 36) = v15;
      *(_OWORD *)(v12 + 20) = v14;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_POSN_START_MSB_GNSS_REQ =>GNM,GnmSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim03_07SendRequestToGnm", a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
      }
      int v18 = 8595712;
LABEL_19:
      AgpsSendFsmMsg(131, 128, v18, v13);
      return 1;
    }
  }
  return 6;
}

double BDS_EphInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 16);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 20);
  *(_WORD *)(a2 + 11) = *(_WORD *)(a1 + 21);
  *(_WORD *)(a2 + 13) = *(_WORD *)(a1 + 18);
  *(int32x2_t *)(a2 + 16) = vrev64_s32(vshl_n_s32(*(int32x2_t *)(a1 + 8), 3uLL));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  v4.i64[0] = (int)v2;
  v4.i64[1] = SHIDWORD(v2);
  *(void *)&v5.f64[0] = *(_OWORD *)&vcvtq_f64_s64((int64x2_t)v4);
  v4.i64[0] = v2;
  v4.i64[1] = HIDWORD(v2);
  v5.f64[1] = vcvtq_f64_u64(v4).f64[1];
  *(float64x2_t *)(a2 + 24) = vmulq_f64(v5, (float64x2_t)xmmword_22BB44E50);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(void *)&v6.f64[0] = *(_OWORD *)&vcvtq_f64_u64(v4);
  v4.i64[0] = (int)v3;
  v4.i64[1] = SHIDWORD(v3);
  v6.f64[1] = vcvtq_f64_s64(*(int64x2_t *)&v4).f64[1];
  *(float64x2_t *)(a2 + 40) = vmulq_f64(v6, (float64x2_t)xmmword_22BB44E60);
  v6.f64[0] = *(float64_t *)(a1 + 40);
  v4.i64[0] = SLODWORD(v6.f64[0]);
  v4.i64[1] = SHIDWORD(v6.f64[0]);
  *(float64x2_t *)(a2 + 56) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v4), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  v6.f64[0] = (double)*(int *)(a1 + 52) * 3.57157734e-13;
  *(double *)(a2 + 72) = (double)*(__int16 *)(a1 + 48) * 3.57157734e-13;
  *(float64_t *)(a2 + 80) = v6.f64[0];
  *(double *)(a2 + 88) = (double)*(__int16 *)(a1 + 50) * 3.57157734e-13;
  v6.f64[0] = *(float64_t *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  v4.i64[0] = SLODWORD(v6.f64[0]);
  v4.i64[1] = SHIDWORD(v6.f64[0]);
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x3E00000000000000uLL);
  float64x2_t v9 = vmulq_f64(vcvtq_f64_s64((int64x2_t)v4), v8);
  v4.i64[0] = (int)v7;
  v4.i64[1] = SHIDWORD(v7);
  *(float64x2_t *)(a2 + 96) = v9;
  *(float64x2_t *)(a2 + 112) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v4), (float64x2_t)vdupq_n_s64(0x3F90000000000000uLL));
  v9.f64[0] = *(float64_t *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  v4.i64[0] = SLODWORD(v9.f64[0]);
  v4.i64[1] = SHIDWORD(v9.f64[0]);
  float64x2_t v11 = vmulq_f64(vcvtq_f64_s64((int64x2_t)v4), v8);
  v4.i64[0] = (int)v10;
  v4.i64[1] = SHIDWORD(v10);
  *(float64x2_t *)(a2 + 128) = v11;
  *(float64x2_t *)(a2 + 144) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v4), (float64x2_t)xmmword_22BB45640);
  double v12 = (double)*(__int16 *)(a1 + 90) * 0.1;
  double v13 = (double)*(__int16 *)(a1 + 92);
  *(double *)(a2 + 160) = (double)*(__int16 *)(a1 + 88) * 4.33680869e-19;
  *(double *)(a2 + 168) = v12;
  double result = v13 * 0.1;
  *(double *)(a2 + 176) = v13 * 0.1;
  return result;
}

_WORD *GPS_To_UTC_Time(_WORD *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7, __int16 a8, double a9, double a10)
{
  for (double i = 0.0005 - a10 + a9; i >= 604800.0; ++a8)
    double i = i + -604800.0;
  while (i < 0.0)
  {
    double i = i + 604800.0;
    --a8;
  }
  int v11 = (int)i;
  double v12 = (i - (double)(int)i) * 1000.0;
  int v13 = (int)v12;
  if (v12 < -2147483650.0) {
    LOWORD(v13) = 0;
  }
  if (v12 <= 2147483650.0) {
    unsigned __int16 v14 = v13;
  }
  else {
    unsigned __int16 v14 = -1;
  }
  *a7 = v14;
  int v15 = v11 / 86400;
  int v16 = v11 % 86400;
  *a4 = v16 / 3600;
  v16 %= 3600;
  *a5 = v16 / 60;
  *a6 = v16 % 60;
  int v17 = v15 - a8 + 8 * a8;
  signed int v18 = v17 + 6;
  if (v17 < 1456)
  {
    LOWORD(v20) = 1980;
  }
  else
  {
    if (v18 >= 2922) {
      signed int v18 = 2922;
    }
    unsigned int v19 = v17 - v18 + 1466;
    signed int v18 = v17 - 1461 * (v19 / 0x5B5) - 1455;
    unsigned int v20 = 4 * (v19 / 0x5B5) + 1984;
  }
  if (v18 >= 367)
  {
    do
    {
      if ((v20 & 3) != 0) {
        int v21 = -365;
      }
      else {
        int v21 = -366;
      }
      v18 += v21;
      LOWORD(v20) = v20 + 1;
    }
    while (v18 > 0x16E);
  }
  uint64_t v22 = 0;
  if ((v20 & 3) != 0) {
    __int16 v23 = v20 + 1;
  }
  else {
    __int16 v23 = v20;
  }
  if ((v20 & 3) != 0) {
    int v24 = 1;
  }
  else {
    int v24 = 366;
  }
  if (v18 == 366) {
    LOWORD(v20) = v23;
  }
  else {
    int v24 = v18;
  }
  *double result = v20;
  while (1)
  {
    int v25 = Days_in_Month[v22];
    BOOL v26 = __OFSUB__(v24, v25);
    int v27 = v24 - v25;
    if ((v27 < 0) ^ v26 | (v27 == 0))
    {
      *a3 = v24;
      unsigned __int16 v28 = v22 + 1;
      goto LABEL_40;
    }
    if (v22 == 1 && (v20 & 3) == 0) {
      break;
    }
LABEL_36:
    ++v22;
    int v24 = v27;
    if (v22 == 12) {
      return result;
    }
  }
  if (v27 >= 2)
  {
    --v27;
    goto LABEL_36;
  }
  *a3 = 29;
  unsigned __int16 v28 = 2;
LABEL_40:
  *a2 = v28;
  return result;
}

uint64_t GPS_To_UTC_DOY(int *a1, __int16 a2, double a3, double a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_DWORD *)int v27 = 0;
  unsigned __int16 v26 = 0;
  uint64_t result = (uint64_t)GPS_To_UTC_Time(&v27[1], v27, &v26, &v25, &v24, &v23, &v22, a2, a3, a4);
  HIDWORD(v7) = -1030792151 * v27[1];
  LODWORD(v7) = HIDWORD(v7);
  unsigned int v6 = v7 >> 2;
  LODWORD(v7) = HIDWORD(v7);
  if ((v7 >> 4) < 0xA3D70B || v6 > 0x28F5C28) {
    int v9 = 32;
  }
  else {
    int v9 = 31;
  }
  if ((v27[1] & 3) != 0) {
    int v10 = 31;
  }
  else {
    int v10 = v9;
  }
  if (v27[0] - 13 >= 0xFFFFFFF4)
  {
    int v12 = 0;
    int v13 = 31;
    int v14 = 28;
    int v15 = 59;
    int v16 = 89;
    int v17 = 120;
    int v18 = 150;
    uint64_t result = 181;
    uint64_t v19 = 212;
    uint64_t v20 = 242;
    uint64_t v21 = 273;
    switch(v27[0])
    {
      case 1u:
        goto LABEL_24;
      case 2u:
        goto LABEL_23;
      case 3u:
        goto LABEL_22;
      case 4u:
        goto LABEL_21;
      case 5u:
        goto LABEL_20;
      case 6u:
        goto LABEL_19;
      case 7u:
        goto LABEL_18;
      case 8u:
        goto LABEL_17;
      case 9u:
        goto LABEL_16;
      case 0xAu:
        goto LABEL_15;
      case 0xBu:
        goto LABEL_14;
      case 0xCu:
        uint64_t v21 = 303;
LABEL_14:
        uint64_t v20 = v21;
LABEL_15:
        uint64_t v19 = v20;
LABEL_16:
        uint64_t result = v19;
LABEL_17:
        int v18 = result;
LABEL_18:
        int v17 = v18;
LABEL_19:
        int v16 = v17;
LABEL_20:
        int v15 = v16;
LABEL_21:
        int v14 = v15;
LABEL_22:
        int v13 = v14 + v10;
LABEL_23:
        int v12 = v13;
LABEL_24:
        int v11 = v12 + v26;
        break;
      default:
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    int v11 = -1;
  }
  *a1 = v11;
  return result;
}

char **ds_NK_Crude_Apx_Pos(char **result, uint64_t a2, uint64_t a3)
{
  float64x2_t v5 = result;
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v6 = a3 + 27088;
  if (*(unsigned __int8 *)(a3 + 27089) <= 2u && !*(unsigned char *)v6) {
    return result;
  }
  int v7 = (int)*(double *)(a2 + 24) + 604800 * *(__int16 *)(a2 + 18) - *(_DWORD *)(a3 + 264);
  unsigned int v8 = v7 >= 0
     ? (int)*(double *)(a2 + 24) + 604800 * *(__int16 *)(a2 + 18) - *(_DWORD *)(a3 + 264)
     : *(_DWORD *)(a3 + 264) - ((int)*(double *)(a2 + 24) + 604800 * *(__int16 *)(a2 + 18));
  if (*(unsigned char *)(a2 + 960) && v8 >= 0xA && !*(unsigned char *)v6) {
    return result;
  }
  int v9 = (unsigned __int8 *)(a3 + 8272);
  int v10 = *result;
  if ((unsigned __int16)g_Enable_Nav_Debug >= 3u)
  {
    uint64_t v11 = 0;
    char v12 = 67;
    do
    {
      *uint64_t result = v10 + 1;
      *int v10 = v12;
      int v10 = *result;
      if (*result >= result[3])
      {
        int v10 = result[2];
        *uint64_t result = v10;
      }
      char v12 = aCapSrch[++v11];
    }
    while (v11 != 8);
    sprintf_5d(result, gDebug);
    sprintf_5d(v5, DWORD1(gDebug));
    sprintf_5d(v5, xmmword_268466FE0);
    sprintf_5d(v5, DWORD1(xmmword_268466FE0));
    sprintf_5d(v5, DWORD2(xmmword_268466FE0));
    uint64_t v13 = 0;
    int v14 = *v5;
    char v15 = 32;
    do
    {
      *float64x2_t v5 = v14 + 1;
      *int v14 = v15;
      int v14 = *v5;
      if (*v5 >= v5[3])
      {
        int v14 = v5[2];
        *float64x2_t v5 = v14;
      }
      char v15 = aEll[++v13];
    }
    while (v13 != 4);
    sprintf_7f((uint64_t)v5, (int)(*(double *)&xmmword_268466FB8 * 180.0 * 100.0 / 3.14159265), 3);
    sprintf_7f((uint64_t)v5, (int)(*((double *)&xmmword_268466FB8 + 1) * 180.0 * 100.0 / 3.14159265), 3);
    sprintf_7d(v5, (int)(*(double *)&xmmword_268466FA0 / 1000.0));
    sprintf_7d(v5, (int)(*((double *)&xmmword_268466FA0 + 1) / 1000.0));
    sprintf_4d(v5, (int)*(double *)&qword_268466FB0);
    uint64_t v16 = 0;
    int v17 = *v5;
    char v18 = 32;
    do
    {
      *float64x2_t v5 = v17 + 1;
      *int v17 = v18;
      int v17 = *v5;
      if (*v5 >= v5[3])
      {
        int v17 = v5[2];
        *float64x2_t v5 = v17;
      }
      char v18 = aLsq[++v16];
    }
    while (v16 != 4);
    sprintf_2d(v5, dword_268466FCC);
    sprintf_2d(v5, dword_268466FC8);
    sprintf_2d(v5, byte_268466FDD);
    sprintf_2d(v5, byte_268466FDE);
    uint64_t v19 = *v5;
    char v20 = 32;
    uint64_t v21 = 1u;
    do
    {
      *float64x2_t v5 = v19 + 1;
      *uint64_t v19 = v20;
      uint64_t v19 = *v5;
      if (*v5 >= v5[3])
      {
        uint64_t v19 = v5[2];
        *float64x2_t v5 = v19;
      }
      char v20 = aIter[v21++];
    }
    while (v21 != 6);
    sprintf_3d(v5, byte_268466FD0);
    sprintf_3d(v5, byte_268466FD1);
    sprintf_3d(v5, byte_268466FD2);
    unsigned __int16 v22 = *v5;
    char v23 = 32;
    uint64_t v24 = 1u;
    do
    {
      *float64x2_t v5 = v22 + 1;
      *unsigned __int16 v22 = v23;
      unsigned __int16 v22 = *v5;
      if (*v5 >= v5[3])
      {
        unsigned __int16 v22 = v5[2];
        *float64x2_t v5 = v22;
      }
      char v23 = aSrchprls[v24++];
    }
    while (v24 != 10);
    sprintf_2d(v5, byte_268466FD3);
    sprintf_4d(v5, byte_268466FD4);
    sprintf_2d(v5, byte_268466FDC);
    unsigned __int16 v25 = (*v5)++;
    *unsigned __int16 v25 = 32;
    if (*v5 >= v5[3]) {
      *float64x2_t v5 = v5[2];
    }
    if (dword_268466FD8 >= 0) {
      unsigned int v26 = dword_268466FD8;
    }
    else {
      unsigned int v26 = -dword_268466FD8;
    }
    sprintf1da(v5, v26, v90, 0, dword_268466FD8 >> 31);
    int v27 = (*v5)++;
    *int v27 = 10;
    uint64_t v28 = *v5;
    if (*v5 >= v5[3]) {
      uint64_t v28 = v5[2];
    }
    char v29 = 67;
    uint64_t v30 = 1u;
    do
    {
      *float64x2_t v5 = v28 + 1;
      *uint64_t v28 = v29;
      uint64_t v28 = *v5;
      if (*v5 >= v5[3])
      {
        uint64_t v28 = v5[2];
        *float64x2_t v5 = v28;
      }
      char v29 = aCapVv[v30++];
    }
    while (v30 != 7);
    int v31 = dword_268466FF0;
    if (dword_268466FF0 >= 9999) {
      int v31 = 9999;
    }
    if (v31 <= -9999) {
      unsigned int v32 = -9999;
    }
    else {
      unsigned int v32 = v31;
    }
    sprintf_5d(v5, v32);
    int v33 = dword_268466FF8;
    if (dword_268466FF8 >= 9999) {
      int v33 = 9999;
    }
    if (v33 <= -9999) {
      unsigned int v34 = -9999;
    }
    else {
      unsigned int v34 = v33;
    }
    sprintf_5d(v5, v34);
    unsigned __int16 v35 = *v5;
    char v36 = 32;
    uint64_t v37 = 1u;
    do
    {
      *float64x2_t v5 = v35 + 1;
      *unsigned __int16 v35 = v36;
      unsigned __int16 v35 = *v5;
      if (*v5 >= v5[3])
      {
        unsigned __int16 v35 = v5[2];
        *float64x2_t v5 = v35;
      }
      char v36 = aHv[v37++];
    }
    while (v37 != 4);
    int v38 = HIDWORD(xmmword_268466FE0);
    if (SHIDWORD(xmmword_268466FE0) >= 9999) {
      int v38 = 9999;
    }
    if (v38 <= -9999) {
      unsigned int v39 = -9999;
    }
    else {
      unsigned int v39 = v38;
    }
    sprintf_5d(v5, v39);
    int v40 = dword_268466FF4;
    if (dword_268466FF4 >= 9999) {
      int v40 = 9999;
    }
    if (v40 <= -9999) {
      unsigned int v41 = -9999;
    }
    else {
      unsigned int v41 = v40;
    }
    sprintf_5d(v5, v41);
    uint64_t v42 = 0;
    unsigned __int16 v43 = *v5;
    char v44 = 32;
    do
    {
      *float64x2_t v5 = v43 + 1;
      *unsigned __int16 v43 = v44;
      unsigned __int16 v43 = *v5;
      if (*v5 >= v5[3])
      {
        unsigned __int16 v43 = v5[2];
        *float64x2_t v5 = v43;
      }
      char v44 = aA_0[++v42];
    }
    while (v42 != 2);
    int v45 = dword_268466FFC;
    if (dword_268466FFC >= 9999) {
      int v45 = 9999;
    }
    if (v45 <= -9999) {
      unsigned int v46 = -9999;
    }
    else {
      unsigned int v46 = v45;
    }
    sprintf_5d(v5, v46);
    unsigned __int16 v47 = *v5;
    char v48 = 32;
    uint64_t v49 = 1u;
    do
    {
      *float64x2_t v5 = v47 + 1;
      *unsigned __int16 v47 = v48;
      unsigned __int16 v47 = *v5;
      if (*v5 >= v5[3])
      {
        unsigned __int16 v47 = v5[2];
        *float64x2_t v5 = v47;
      }
      char v48 = aR2[v49++];
    }
    while (v49 != 4);
    int v50 = dword_268466F98;
    if (dword_268466F98 >= 9999) {
      int v50 = 9999;
    }
    if (v50 <= -9999) {
      unsigned int v51 = -9999;
    }
    else {
      unsigned int v51 = v50;
    }
    sprintf_5d(v5, v51);
    uint64_t v52 = (*v5)++;
    *uint64_t v52 = 10;
    if (*v5 >= v5[3]) {
      *float64x2_t v5 = v5[2];
    }
    xmmword_268466FE0 = 0u;
    *(_OWORD *)&dword_268466FF0 = 0u;
    *(long long *)((char *)&xmmword_268466FB8 + 8) = 0u;
    *(_OWORD *)&byte_268466FD0 = 0u;
    xmmword_268466FA0 = 0u;
    *(_OWORD *)&qword_268466FB0 = 0u;
    gDebug = 0u;
    unk_268466F90 = 0u;
    int v10 = *v5;
    if ((unsigned __int16)g_Enable_Nav_Debug >= 3u)
    {
      char v53 = 67;
      uint64_t v54 = 1u;
      do
      {
        *float64x2_t v5 = v10 + 1;
        *int v10 = v53;
        int v10 = *v5;
        if (*v5 >= v5[3])
        {
          int v10 = v5[2];
          *float64x2_t v5 = v10;
        }
        char v53 = aCapSv[v54++];
      }
      while (v54 != 7);
      sprintf_2d(v5, *(unsigned __int8 *)(v6 + 4));
      sprintf_2d(v5, *(unsigned __int8 *)(v6 + 5));
      sprintf_2d(v5, *(unsigned __int8 *)(v6 + 6));
      sprintf_2d(v5, *(unsigned __int8 *)(v6 + 7));
      unsigned __int16 v55 = (*v5)++;
      *unsigned __int16 v55 = 32;
      uint64_t v56 = *v5;
      if (*v5 >= v5[3]) {
        uint64_t v56 = v5[2];
      }
      *float64x2_t v5 = v56 + 1;
      *uint64_t v56 = 10;
      int v10 = *v5;
      if (*v5 >= v5[3]) {
        int v10 = v5[2];
      }
    }
  }
  uint64_t v57 = 0;
  char v58 = 67;
  do
  {
    *float64x2_t v5 = v10 + 1;
    *int v10 = v58;
    int v10 = *v5;
    if (*v5 >= v5[3])
    {
      int v10 = v5[2];
      *float64x2_t v5 = v10;
    }
    char v58 = aCap[++v57];
  }
  while (v57 != 4);
  long long v59 = "pass";
  if (!*(unsigned char *)(v6 + 16)) {
    long long v59 = "fail";
  }
  char v60 = *v59;
  if (*v59)
  {
    unsigned int v61 = (unsigned __int8 *)(v59 + 1);
    do
    {
      *float64x2_t v5 = v10 + 1;
      *int v10 = v60;
      int v10 = *v5;
      if (*v5 >= v5[3])
      {
        int v10 = v5[2];
        *float64x2_t v5 = v10;
      }
      int v62 = *v61++;
      char v60 = v62;
    }
    while (v62);
  }
  uint64_t v63 = 0;
  char v64 = 32;
  do
  {
    *float64x2_t v5 = v10 + 1;
    *int v10 = v64;
    int v10 = *v5;
    if (*v5 >= v5[3])
    {
      int v10 = v5[2];
      *float64x2_t v5 = v10;
    }
    char v64 = aSv_0[++v63];
  }
  while (v63 != 4);
  sprintf_3d(v5, *(unsigned __int8 *)(v6 + 1));
  long long v65 = *v5;
  char v66 = 32;
  uint64_t v67 = 1u;
  do
  {
    *float64x2_t v5 = v65 + 1;
    *long long v65 = v66;
    long long v65 = *v5;
    if (*v5 >= v5[3])
    {
      long long v65 = v5[2];
      *float64x2_t v5 = v65;
    }
    char v66 = aMs[v67++];
  }
  while (v67 != 6);
  sprintf_5d(v5, *(unsigned __int16 *)(v6 + 2));
  int v69 = *(_DWORD *)(v6 + 8);
  int v68 = *(_DWORD *)(v6 + 12);
  if (*(void *)(v6 + 8))
  {
    unsigned int v70 = (5729 * v69) >> 15;
    unsigned int v71 = (5729 * v68) >> 15;
    long double v72 = (double)v68 * 0.0000305175781 - *(double *)(a3 + 27040);
    double v73 = *(double *)(a3 + 27056);
    __double2 v74 = __sincos_stret((double)v69 * 0.0000305175781);
    double v75 = v74.__cosval * *(double *)(a3 + 27064);
    long double v76 = cos(v72) * v75 + v73 * v74.__sinval;
    if (fabs(v76) < 1.0)
    {
      signed int v77 = (int)(acos(v76) * 6378.137);
      goto LABEL_118;
    }
  }
  else
  {
    unsigned int v70 = 0;
    unsigned int v71 = 0;
  }
  signed int v77 = 0;
LABEL_118:
  sprintf_7f((uint64_t)v5, v70, 3);
  sprintf_7f((uint64_t)v5, v71, 3);
  sprintf_6d(v5, v77);
  long long v78 = *v5;
  for (unsigned int i = 5; i > 1; --i)
  {
    *float64x2_t v5 = v78 + 1;
    *long long v78 = 32;
    long long v78 = *v5;
    if (*v5 >= v5[3])
    {
      long long v78 = v5[2];
      *float64x2_t v5 = v78;
    }
  }
  if (*(int *)(a2 + 12) >= 4 && (unsigned int v80 = *(unsigned __int8 *)(v6 + 1), v80 >= 3))
  {
    uint64_t v82 = "BAD ";
    if (v77 < 151) {
      uint64_t v82 = "GOOD";
    }
    unsigned __int16 v83 = "bad ";
    if (v77 < 901) {
      unsigned __int16 v83 = "good";
    }
    if (v80 == 3) {
      unsigned __int16 v81 = v83;
    }
    else {
      unsigned __int16 v81 = v82;
    }
    if (!*(unsigned char *)(v6 + 16)) {
      unsigned __int16 v81 = "FAIL";
    }
  }
  else
  {
    unsigned __int16 v81 = "SKIP";
  }
  char v84 = *v81;
  if (*v81)
  {
    unsigned __int16 v85 = (unsigned __int8 *)(v81 + 1);
    do
    {
      *float64x2_t v5 = v78 + 1;
      *long long v78 = v84;
      long long v78 = *v5;
      if (*v5 >= v5[3])
      {
        long long v78 = v5[2];
        *float64x2_t v5 = v78;
      }
      int v86 = *v85++;
      char v84 = v86;
    }
    while (v86);
  }
  if (v7 >= 99) {
    int v87 = 99;
  }
  else {
    int v87 = v7;
  }
  if (v87 <= -99) {
    unsigned int v88 = -99;
  }
  else {
    unsigned int v88 = v87;
  }
  sprintf_5d(v5, v88);
  sprintf_3d(v5, *v9);
  uint64_t result = (char **)sprintf1da(v5, v9[1], v90, 0, 0);
  long long v89 = (*v5)++;
  *long long v89 = 10;
  if (*v5 >= v5[3]) {
    *float64x2_t v5 = v5[2];
  }
  return result;
}

void WGS84_ECEF2Geo(long double *a1, double *a2)
{
  long double v4 = *a1;
  double v3 = a1[1];
  double v5 = a1[2];
  double v6 = v3 * v3 + v4 * v4;
  double v7 = v5 * v5 * 2.45817226e-14;
  int v9 = 3;
  double v10 = 0.00669437999;
  do
  {
    double v8 = v7 * 0.99330562;
    double v10 = v10
        - (v10 * -0.0000896294469
         + v10 * v10 * (v6 * 2.45817226e-14 + v7 * 0.99330562 + -0.0000448147235 + (v8 + v8) * v10 + v8 * (v10 * v10))
         + -0.0000448147235)
        / ((v6 * 2.45817226e-14
          + v7 * 0.99330562
          + -0.0000448147235
          + v6 * 2.45817226e-14
          + v7 * 0.99330562
          + -0.0000448147235)
         * v10
         + v7 * 0.99330562 * 4.0 * (v10 * v10) * ((v8 + v8) * 3.0 + v10)
         + -0.0000896294469);
    --v9;
  }
  while (v9);
  double v11 = v10 + 1.0;
  if (fabs(v4) >= 0.001 || fabs(v3) >= 0.001)
  {
    a2[1] = atan2(v3, v4);
  }
  else
  {
    a2[1] = 0.0;
    double v12 = 0.0;
    if (fabs(v5) < 0.001) {
      goto LABEL_9;
    }
  }
  double v12 = atan2(v5 * v11, sqrt(v6));
LABEL_9:
  *a2 = v12;
  a2[2] = (v10 * -148.379032 + 1.0) * sqrt(v7 + v6 * 2.45817226e-14 / (v11 * v11)) * 6378137.0;
}

uint64_t LcsLinkedList::Remove(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2) {
    BOOL v3 = v2 == a2;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (v2)
    {
      *(void *)(result + 16) = *(void *)(v2 + 8);
      *(void *)(v2 + 8) = 0;
    }
  }
  else
  {
    do
    {
      uint64_t v4 = v2;
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2) {
        BOOL v5 = v2 == a2;
      }
      else {
        BOOL v5 = 1;
      }
    }
    while (!v5);
    if (v2) {
      *(void *)(v4 + 8) = *(void *)(v2 + 8);
    }
  }
  if (a2) {
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t GncP11_01ConvertGnssID(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((a1 - 1) >= 6)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v1 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP11_01ConvertGnssID", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v1;
}

uint64_t GncP11_02ConvertAGnssID(uint64_t result)
{
  int v1 = result;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (((result - 1) > 0x3F || ((1 << (result - 1)) & 0x800000008000808BLL) == 0)
    && result != 128)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AGNSSId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP11_02ConvertAGnssID", 770, v1);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GncP11_03ConvertGnssIDToGn(uint64_t result)
{
  int v1 = result;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((result - 1) > 0x3F || ((1 << (result - 1)) & 0x800000008000800BLL) == 0)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Input,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP11_03ConvertGnssIDToGn", 770, v1);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GncP11_05ConvertGnssSignalID(uint64_t result)
{
  int v1 = result;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (((result - 17) > 0x30 || ((1 << (result - 17)) & 0x1000F001F000FLL) == 0)
    && ((result - 81) > 0x14 || ((1 << (result - 81)) & 0x1F0007) == 0))
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SignalID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "GncP11_05ConvertGnssSignalID", 770, v1);
      LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t GncP11_15PopulateGnssAssist(uint64_t result, uint64_t a2, char a3, char a4, char a5, char a6)
{
  *(unsigned char *)uint64_t result = 1;
  *(unsigned char *)(result + 1) = a4;
  *(unsigned char *)(result + 2) = a5;
  *(unsigned char *)(result + 3) = a6;
  *(unsigned char *)(result + 23) = 0;
  *(unsigned char *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 10);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(result + 21) = *(_WORD *)(a2 + 8);
  *(_WORD *)(result + 30) = *(_WORD *)(a2 + 14);
  *(unsigned char *)(result + 28) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 32) = *(unsigned char *)(a2 + 17);
  LODWORD(v6) = *(unsigned __int8 *)(a2 + 18);
  *(unsigned char *)(result + 33) = v6;
  *(void *)(result + 8) = *(void *)(a2 + 168);
  if (v6 >= 0x30) {
    uint64_t v6 = 48;
  }
  else {
    uint64_t v6 = v6;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (_WORD *)(result + 36);
    do
    {
      *((unsigned char *)v8 - 2) = *(unsigned char *)(a2 + v7 + 19);
      *uint64_t v8 = *(_WORD *)(a2 + 2 * v7 + 68);
      v8 += 2;
      ++v7;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t GncP11_23ConvertUsrState(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 6)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UsrState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP11_23ConvertUsrState", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP11_24ConvertGnssContent(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 5)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssCntnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP11_24ConvertGnssContent", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP11_25ConvertReliab(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 5)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP11_25ConvertReliab", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

BOOL GncP11_30CheckUtcValidity(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v7 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a3 && a4 <= 0x17 && a5 <= 0x3B && a6 <= 0x3C && a7 <= 0x3E7)
  {
    if (a2 <= 0xC)
    {
      if (((1 << a2) & 0x15AA) != 0) {
        return a3 <= 0x1F;
      }
      if (((1 << a2) & 0xA50) != 0) {
        return a3 <= 0x1E;
      }
      if (a2 == 2)
      {
        if ((a1 & 3) == 0
          && ((HIDWORD(v9) = -1030792151 * a1, LODWORD(v9) = -1030792151 * a1, (v9 >> 2) > 0x28F5C28)
           || a1 == 400 * ((10737419 * (unint64_t)a1) >> 32)))
        {
          if (a3 > 0x1D) {
            return 0;
          }
        }
        else if (a3 > 0x1C)
        {
          return 0;
        }
        return 1;
      }
    }
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t v7 = 0;
    if (!IsLoggingAllowed) {
      return v7;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Month,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP11_30CheckUtcValidity", 770, a2);
    LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
    return 0;
  }
  return v7;
}

uint64_t GncP11_32ConvertEstimatedTech(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 4)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EstimTech,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP11_32ConvertEstimatedTech", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

double GLON_RealAlm2RefState(__int16 a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a5 + 172) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  if (a3 >= 1) {
    int v10 = -1;
  }
  else {
    int v10 = 86399;
  }
  *(_OWORD *)(a5 + 80) = 0uLL;
  *(_OWORD *)(a5 + 96) = 0uLL;
  *(_OWORD *)(a5 + 48) = 0uLL;
  *(_OWORD *)(a5 + 64) = 0uLL;
  *(_OWORD *)(a5 + 32) = 0uLL;
  *(_OWORD *)a5 = 0uLL;
  *(_OWORD *)(a5 + 16) = 0uLL;
  GLON_RealAlm2ECEF((uint64_t)v18, (uint64_t)&v16, (double *)a4, v10 + a3, (__int16)(a2 - (a3 < 1)));
  GLON_RealAlm2ECEF(a5, a5 + 24, (double *)a4, a3, a2);
  *(float64x2_t *)(a5 + 48) = vsubq_f64(*(float64x2_t *)(a5 + 24), v16);
  *(double *)(a5 + 64) = *(double *)(a5 + 40) - v17;
  *(double *)(a5 + 96) = -*(double *)(a4 + 72);
  *(void *)(a5 + 104) = 0;
  *(_DWORD *)(a5 + 168) = a3;
  *(_WORD *)(a5 + 172) = a2;
  *(_WORD *)(a5 + 174) = a1;
  *(_DWORD *)(a5 + 184) = 2;
  *(_WORD *)(a5 + 166) = 123;
  *(unsigned char *)(a5 + 180) = *(unsigned char *)(a4 + 10);
  *(_DWORD *)(a5 + 176) = 2;
  int v11 = a2 - *(unsigned __int16 *)(a4 + 8);
  int v12 = v11 + 1461;
  if (v11 >= -730) {
    int v12 = a2 - *(unsigned __int16 *)(a4 + 8);
  }
  if (v11 <= 730) {
    int v13 = v12;
  }
  else {
    int v13 = v11 - 1461;
  }
  if (v13 < 0) {
    int v13 = -v13;
  }
  if (v13 >= 0x281) {
    int v14 = 65500;
  }
  else {
    int v14 = 100 * v13 + 1500;
  }
  double result = (double)(v14 * v14);
  *(double *)(a5 + 112) = result;
  return result;
}

void DD_Assist_GPS_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 0;
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v101 = a1 + 224;
  uint64_t v103 = a1 + 192;
  int v104 = a2 - 241;
  do
  {
    if (*(unsigned __int8 *)(a3 + v8) > 0xA5u
      || *(unsigned char *)(*(void *)(a4 + 48) + v8) && (v104 - *(_DWORD *)(a4 + 108 * v8 + 104)) > 0xFFFFF806)
    {
      goto LABEL_38;
    }
    long long v112 = 0u;
    memset(v113, 0, 28);
    long long v111 = 0u;
    long long v109 = 0u;
    memset(v110, 0, sizeof(v110));
    if (!Core_Get_GPS_Eph((v8 + 1), a2, (int *)&v109)) {
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(a4 + 48);
    if (*(unsigned char *)(v9 + v8))
    {
      uint64_t v10 = a4 + 108 * v8;
      int v13 = *(_DWORD *)(v10 + 104);
      int v12 = (_DWORD *)(v10 + 104);
      int v11 = v13;
      int v14 = v109 - v13;
      if ((int)v109 <= v13 && (int)a2 - v11 > -1801)
      {
LABEL_9:
        *(void *)(*(void *)(a4 + 8) + 20 * v8 + 8) = 0;
        goto LABEL_38;
      }
      unsigned int v15 = DWORD2(v109);
      if (v14 <= 10799 && Is_GPS_BinEph_Real((uint64_t)v12) && !Is_GPS_BinEph_Real((uint64_t)&v109))
      {
        *int v12 = a2;
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v15 = DWORD2(v109);
    }
    unint64_t v16 = (0xE4FE7F3uLL >> ((v15 >> 2) & 0x1F)) & 1;
    double v17 = *(_OWORD **)a4;
    if (*(unsigned char *)(*(void *)a4 + v8)) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v16 == 0;
    }
    if (!v18)
    {
      uint64_t v19 = *(void *)(a4 + 64);
      if (!*(unsigned char *)(v19 + v8)) {
        goto LABEL_26;
      }
      uint64_t v20 = a4 + 44 * v8;
      unint64_t v21 = 0xE4FE7F3uLL >> (*(_DWORD *)(v20 + 7036) & 0x1F);
      int v22 = *(_DWORD *)(v20 + 7016);
      if ((v21 & 1) != 0 || v22 + 3600 <= (int)a2)
      {
        if (v22 + 100 < (int)a2)
        {
          *(unsigned char *)(*(void *)(a4 + 24) + v8) = 0;
          *(unsigned char *)(v19 + v8) = 0;
          *(unsigned char *)(v103 + v8) = -1;
          uint64_t v9 = *(void *)(a4 + 48);
          double v17 = *(_OWORD **)a4;
        }
LABEL_26:
        LODWORD(v16) = 1;
        goto LABEL_27;
      }
      LODWORD(v16) = 0;
    }
LABEL_27:
    uint64_t v23 = a4 + 108 * v8;
    long long v24 = v110[1];
    *(_OWORD *)(v23 + 152) = v111;
    long long v25 = v113[0];
    *(_OWORD *)(v23 + 168) = v112;
    *(_OWORD *)(v23 + 184) = v25;
    *(_OWORD *)(v23 + 196) = *(_OWORD *)((char *)v113 + 12);
    long long v26 = v110[0];
    *(_OWORD *)(v23 + 104) = v109;
    *(_OWORD *)(v23 + 120) = v26;
    *(_OWORD *)(v23 + 136) = v24;
    *(unsigned char *)(*(void *)(a4 + 16) + v8) = 1;
    *(unsigned char *)(v9 + v8) = 1;
    *((unsigned char *)v17 + v8) = v16;
    if (v16) {
      int v27 = 1;
    }
    else {
      int v27 = 2;
    }
    uint64_t v28 = *(void *)(a4 + 8) + 20 * v8;
    char v29 = (int *)(v28 + 12);
    uint64_t v30 = (int *)(v28 + 8);
    if (*(_DWORD *)(v23 + 108) == 5) {
      int v31 = v30;
    }
    else {
      int v31 = v29;
    }
    *int v31 = v27;
    if ((int)a2 >= 1)
    {
      *(unsigned char *)(*(void *)(a4 + 72) + v8) = 1;
      Core_Save_GPS_Eph((v8 + 1), 0, (long long *)(v23 + 104));
      double v17 = *(_OWORD **)a4;
    }
    uint64_t v32 = 0;
    LODWORD(v33) = 0;
    uint64_t v34 = p_NV;
    long long v35 = v17[1];
    *(_OWORD *)(p_NV + 92) = *v17;
    *(_OWORD *)(v34 + 108) = v35;
    uint64_t v36 = v34 + 88;
    __int16 v37 = -9871;
    do
    {
      int v38 = *(unsigned __int8 *)(v36 + v32) ^ HIBYTE(v37);
      __int16 v37 = -12691 * (v37 + (*(unsigned __int8 *)(v36 + v32) ^ HIBYTE(v37))) + 22719;
      uint64_t v33 = (v33 + v38);
      ++v32;
    }
    while (v32 != 40);
    *(void *)(v34 + 80) = v33;
    uint64_t v39 = a1 + 6 * v8;
    *(_DWORD *)uint64_t v39 = 16777472;
    *(_WORD *)(v39 + 4) = 256;
    *(_WORD *)(v101 + 2 * v8) = 256;
LABEL_38:
    ++v8;
  }
  while (v8 != 32);
  uint64_t v40 = a5;
  if ((int)a2 >= 1)
  {
    for (uint64_t i = 0; i != 32; ++i)
    {
      if (*(unsigned char *)(*(void *)a4 + i)
        && !*(unsigned char *)(*(void *)(v40 + 896) + i)
        && *(unsigned __int8 *)(a3 + i) <= 0xA5u
        && (!*(unsigned char *)(*(void *)(a4 + 56) + i) || (int)a2 - *(_DWORD *)(a4 + 108 * i + 3560) >= 241))
      {
        long long v112 = 0u;
        memset(v113, 0, 28);
        long long v111 = 0u;
        long long v109 = 0u;
        memset(v110, 0, sizeof(v110));
        int GPS_BinEph = EE_Get_GPS_BinEph((i + 1), a2, (uint64_t)&v109);
        uint64_t v43 = *(void *)(a4 + 56);
        if (!GPS_BinEph || (int v44 = v109, *(unsigned char *)(v43 + i)) && (int)v109 <= *(_DWORD *)(a4 + 108 * i + 3560))
        {
          *(unsigned char *)(v43 + i) = 0;
        }
        else
        {
          long long v45 = v110[0];
          unsigned int v46 = (_OWORD *)(a4 + 108 * i + 3560);
          *unsigned int v46 = v109;
          v46[1] = v45;
          *(_OWORD *)((char *)v46 + 92) = *(_OWORD *)((char *)v113 + 12);
          long long v47 = v113[0];
          void v46[4] = v112;
          v46[5] = v47;
          long long v48 = v111;
          v46[2] = v110[1];
          v46[3] = v48;
          *(unsigned char *)(*(void *)(a4 + 16) + i) = 1;
          *(unsigned char *)(v43 + i) = 1;
          uint64_t v49 = a1 + 6 * i;
          *(_DWORD *)uint64_t v49 = 16777472;
          *(_WORD *)(v49 + 4) = 256;
          long long v107 = 0u;
          memset(v108, 0, sizeof(v108));
          long long v106 = 0u;
          v105[0] = v44;
          v105[1] = DWORD1(v109);
          LOBYTE(v106) = BYTE8(v109);
          unsigned int v50 = 21;
          uint64_t v51 = 11;
          *(_WORD *)((char *)&v106 + 1) = *(_WORD *)((char *)&v109 + 9);
          uint64_t v52 = (char *)v110 + 8;
          *(_WORD *)(v101 + 2 * i) = 256;
          do
          {
            char v53 = (char *)v105 + v51;
            *char v53 = *v52;
            *(_WORD *)(v53 + 1) = *(_WORD *)(v52 + 1);
            v52 += 4;
            --v50;
            v51 += 3;
          }
          while (v50 > 1);
          Debug_Log_GPS_Eph(2, i + 1, (uint64_t)v105);
        }
        uint64_t v40 = a5;
      }
    }
  }
  uint64_t v54 = 0;
  uint64_t v55 = 192;
  long long v109 = 0u;
  memset(v110, 0, 28);
  while (2)
  {
    if (!*(unsigned char *)(*(void *)(a4 + 64) + v54) || (int)a2 - *(_DWORD *)(a4 + 44 * v54 + 7016) >= 1801)
    {
      *(_OWORD *)((unint64_t)&v109 | 0xC) = 0u;
      *(_OWORD *)(((unint64_t)&v109 | 0xC) + 0x10) = 0u;
      if (Core_Get_GPS_Alm((v54 + 1), a2, (uint64_t)&v109))
      {
        uint64_t v56 = *(void *)(a4 + 64);
        if (!*(unsigned char *)(v56 + v54) || (int)v109 > *(_DWORD *)(a4 + 44 * v54 + 7016))
        {
          unint64_t v57 = (0xE4FE7F3uLL >> (BYTE4(v110[0]) & 0x1F)) & 1;
          char v58 = *(_OWORD **)a4;
          if (*(unsigned char *)(*(void *)a4 + v54)) {
            BOOL v59 = 1;
          }
          else {
            BOOL v59 = v57 == 0;
          }
          if (!v59)
          {
            uint64_t v60 = *(void *)(a4 + 48);
            if (*(unsigned char *)(v60 + v54))
            {
              uint64_t v61 = a4 + 108 * v54;
              unint64_t v62 = 0xE4FE7F3uLL >> (((unint64_t)*(unsigned int *)(v61 + 112) >> 2) & 0x1F);
              int v63 = *(_DWORD *)(v61 + 104);
              if ((v62 & 1) == 0 && v63 + 3600 > (int)a2)
              {
                LOBYTE(v57) = 0;
                goto LABEL_74;
              }
              if (v63 + 100 < (int)a2)
              {
                *(unsigned char *)(*(void *)(a4 + 16) + v54) = 0;
                *(unsigned char *)(v60 + v54) = 0;
                uint64_t v64 = a1 + 6 * v54;
                *(_DWORD *)uint64_t v64 = 16777472;
                *(_WORD *)(v64 + 4) = 256;
                *(_WORD *)(v101 + 2 * v54) = 256;
              }
            }
            LOBYTE(v57) = 1;
          }
LABEL_74:
          long long v65 = (long long *)(a4 + 44 * v54 + 7016);
          long long v66 = v110[0];
          *long long v65 = v109;
          v65[1] = v66;
          *(long long *)((char *)v65 + 28) = *(_OWORD *)((char *)v110 + 12);
          *(unsigned char *)(*(void *)(a4 + 24) + v54) = 1;
          *(unsigned char *)(v56 + v54) = 1;
          *((unsigned char *)v58 + v54) = v57;
          if ((int)a2 >= 1)
          {
            uint64_t v67 = 0;
            LODWORD(v68) = 0;
            uint64_t v69 = p_NV;
            unsigned int v70 = (_OWORD *)(p_NV + 56 * v54);
            unsigned int v71 = (void *)v70 + 23;
            long long v72 = *v65;
            long long v73 = *(_OWORD *)(a4 + 44 * v54 + 7032);
            *(_OWORD *)((char *)v70 + 220) = *(_OWORD *)(a4 + 44 * v54 + 7044);
            v70[12] = v72;
            v70[13] = v73;
            uint64_t v74 = v69 + v55;
            __int16 v75 = -9871;
            do
            {
              int v76 = *(unsigned __int8 *)(v74 + v67) ^ HIBYTE(v75);
              __int16 v75 = -12691 * (v75 + (*(unsigned __int8 *)(v74 + v67) ^ HIBYTE(v75))) + 22719;
              uint64_t v68 = (v68 + v76);
              ++v67;
            }
            while (v67 != 48);
            *unsigned int v71 = v68;
            char v58 = *(_OWORD **)a4;
          }
          uint64_t v77 = 0;
          LODWORD(v78) = 0;
          uint64_t v79 = p_NV;
          long long v80 = v58[1];
          *(_OWORD *)(p_NV + 92) = *v58;
          *(_OWORD *)(v79 + 108) = v80;
          uint64_t v81 = v79 + 88;
          __int16 v82 = -9871;
          do
          {
            int v83 = *(unsigned __int8 *)(v81 + v77) ^ HIBYTE(v82);
            __int16 v82 = -12691 * (v82 + (*(unsigned __int8 *)(v81 + v77) ^ HIBYTE(v82))) + 22719;
            uint64_t v78 = (v78 + v83);
            ++v77;
          }
          while (v77 != 40);
          *(void *)(v79 + 80) = v78;
          *(unsigned char *)(v103 + v54) = -1;
        }
      }
    }
    ++v54;
    v55 += 56;
    if (v54 != 32) {
      continue;
    }
    break;
  }
  long long v109 = 0uLL;
  char v84 = (_OWORD *)(a4 + 8424);
  if ((*(_DWORD *)(a4 + 8428) - 4) > 2 || (int)a2 - *(_DWORD *)v84 >= 1801)
  {
    int GPS_Klob = Core_Get_GPS_Klob(a2, &v109);
    int v86 = *(_DWORD *)(a4 + 8428);
    if (GPS_Klob)
    {
      if ((v86 - 4) > 2 || (int)v109 > *(_DWORD *)v84)
      {
        *char v84 = v109;
        if ((int)a2 >= 1 && *(_DWORD *)(a4 + 8428) != 3)
        {
          uint64_t v87 = 0;
          LODWORD(v88) = 0;
          uint64_t v89 = p_NV;
          *(_OWORD *)(p_NV + 136) = v109;
          uint64_t v90 = v89 + 136;
          __int16 v91 = -9871;
          do
          {
            int v92 = *(unsigned __int8 *)(v90 + v87) ^ HIBYTE(v91);
            __int16 v91 = -12691 * (v91 + (*(unsigned __int8 *)(v90 + v87) ^ HIBYTE(v91))) + 22719;
            uint64_t v88 = (v88 + v92);
            ++v87;
          }
          while (v87 != 16);
          *(void *)(v89 + 128) = v88;
        }
      }
    }
    else if ((int)a2 >= 901 && !v86)
    {
      *(_DWORD *)(a4 + 8424) = a2 - 900;
      *(void *)(a4 + 8432) = 0xFAFF0427FFFF0205;
      *(_DWORD *)(a4 + 8428) = 1;
      EvLog("DD_Assist_GPS_Ion:  Iono Model missing, default used.");
    }
  }
  long long v109 = 0uLL;
  *(void *)&v110[0] = 0;
  unsigned __int16 v93 = (_OWORD *)(a4 + 8440);
  if (((*(_DWORD *)(a4 + 8444) - 4) > 2 || (int)a2 - *(_DWORD *)v93 >= 1801)
    && Core_Get_GPS_UTC(a2, (uint64_t)&v109)
    && ((*(_DWORD *)(a4 + 8444) - 4) > 2 || (int)v109 > *(_DWORD *)v93))
  {
    *unsigned __int16 v93 = v109;
    *(void *)(a4 + 8456) = *(void *)&v110[0];
    if ((int)a2 >= 1 && *(_DWORD *)(a4 + 8444) != 3)
    {
      uint64_t v94 = 0;
      LODWORD(v95) = 0;
      uint64_t v96 = p_NV;
      *(_OWORD *)(p_NV + 160) = v109;
      *(void *)(v96 + 176) = *(void *)&v110[0];
      uint64_t v97 = v96 + 160;
      __int16 v98 = -9871;
      do
      {
        int v99 = *(unsigned __int8 *)(v97 + v94) ^ HIBYTE(v98);
        __int16 v98 = -12691 * (v98 + (*(unsigned __int8 *)(v97 + v94) ^ HIBYTE(v98))) + 22719;
        uint64_t v95 = (v95 + v99);
        ++v94;
      }
      while (v94 != 24);
      *(void *)(v96 + 152) = v95;
    }
  }
}

uint64_t gps_find_session_info(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = sessionInfoTable;
  if (sessionInfoTable)
  {
    while (*(_DWORD *)v1 != a1)
    {
      uint64_t v1 = *(void *)(v1 + 192);
      if (!v1) {
        return v1;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionId,%u,sessionProtocol,%u,posProtocol,%u,v_Emergency,%u,isMsrPosReqRcvd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 73, "gps_find_session_info", *(_DWORD *)v1, *(unsigned __int8 *)(v1 + 4), *(_DWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 14), *(unsigned __int8 *)(v1 + 16));
      LbsOsaTrace_WriteLog(0x13u, __str, v3, 4, 1);
    }
  }
  return v1;
}

_OWORD *gps_create_session_info_ext(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "gps_create_session_info_ext");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  uint64_t v4 = operator new(0xC8uLL, MEMORY[0x263F8C180]);
  unsigned __int16 v5 = v4;
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_11;
    }
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 69, "gps_create_session_info_ext", 1537);
    int v14 = 0;
    goto LABEL_10;
  }
  long long v6 = *(_OWORD *)(a1 + 176);
  v4[10] = *(_OWORD *)(a1 + 160);
  v4[11] = v6;
  *((void *)v4 + 24) = *(void *)(a1 + 192);
  long long v7 = *(_OWORD *)(a1 + 112);
  v4[6] = *(_OWORD *)(a1 + 96);
  v4[7] = v7;
  long long v8 = *(_OWORD *)(a1 + 144);
  v4[8] = *(_OWORD *)(a1 + 128);
  v4[9] = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  v4[4] = *(_OWORD *)(a1 + 64);
  v4[5] = v10;
  long long v11 = *(_OWORD *)(a1 + 16);
  _OWORD *v4 = *(_OWORD *)a1;
  v4[1] = v11;
  if (sessionInfoTable) {
    *((void *)v4 + 24) = sessionInfoTable;
  }
  sessionInfoTable = (uint64_t)v4;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,SessionProtocol,%u,posProtocol,%u,v_Emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 65, "gps_create_session_info_ext", *(_DWORD *)v5, *((unsigned __int8 *)v5 + 4), *((_DWORD *)v5 + 2), *((unsigned __int8 *)v5 + 14));
    int v14 = 1;
LABEL_10:
    LbsOsaTrace_WriteLog(0x13u, __str, v13, v14, 1);
  }
LABEL_11:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 68, "gps_create_session_info_ext");
    LbsOsaTrace_WriteLog(0x13u, __str, v17, 5, 1);
  }
  return v5;
}

size_t gps_delete_session_info(int a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "gps_delete_session_info");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  uint64_t v4 = sessionInfoTable;
  if (sessionInfoTable)
  {
    if (*(_DWORD *)sessionInfoTable == a1)
    {
      uint64_t v5 = 0;
LABEL_9:
      if (v5) {
        long long v7 = (uint64_t *)(v5 + 192);
      }
      else {
        long long v7 = &sessionInfoTable;
      }
      *long long v7 = *(void *)(v4 + 192);
      MEMORY[0x230F4E5D0]();
    }
    else
    {
      uint64_t v6 = sessionInfoTable;
      while (1)
      {
        uint64_t v4 = *(void *)(v6 + 192);
        if (!v4) {
          break;
        }
        uint64_t v5 = v6;
        uint64_t v6 = *(void *)(v6 + 192);
        if (*(_DWORD *)v4 == a1) {
          goto LABEL_9;
        }
      }
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 68, "gps_delete_session_info");
    return LbsOsaTrace_WriteLog(0x13u, __str, v10, 5, 1);
  }
  return result;
}

size_t gps_delete_all_sessions(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 68, "gps_delete_all_sessions");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 5, 1);
  }
  while (1)
  {
    uint64_t v2 = (int *)sessionInfoTable;
    if (!sessionInfoTable) {
      break;
    }
    sessionInfoTable = *(void *)(sessionInfoTable + 192);
    HandlePPDUStopSession(v2);
    MEMORY[0x230F4E5D0](v2, 0x1020C407D934135);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "gps_delete_all_sessions");
    return LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  return result;
}

uint64_t find_wlan_session_info(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unsigned int *)sessionInfoTable;
  if (!sessionInfoTable) {
    return 0xFFFFFFFFLL;
  }
  while (*((unsigned char *)v0 + 188) != 1)
  {
    uint64_t v0 = (unsigned int *)*((void *)v0 + 24);
    if (!v0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WLAN SessionId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 73, "find_wlan_session_info", *v0);
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 4, 1);
  }
  return *v0;
}

SuplProvider *SUPL_Message_Handler(SuplProvider *result)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  for (uint64_t i = SUPL_Queue; SUPL_Queue; uint64_t i = SUPL_Queue)
  {
    uint64_t v2 = *(void **)(i + 8);
    if (v2)
    {
      SUPL_Queue = *(void *)(i + 8);
      *uint64_t v2 = 0;
      *(void *)(i + 8) = 0;
    }
    else
    {
      SUPL_Queue = 0;
      qword_2684657F8 = 0;
    }
    switch(*(unsigned char *)(i + 16))
    {
      case 0:
        SUPL_Handle_Comms_Open(i);
        break;
      case 1:
        SUPL_Handle_Comms_Close((unsigned int *)i);
        break;
      case 2:
        SUPL_Handle_PUSH_Received((void *)i);
        break;
      case 3:
        uint64_t v5 = *(unsigned int *)(i + 20);
        uint64_t Instance = SuplProvider::GetInstance(result);
        if (Instance) {
          uint64_t v7 = Instance + 8;
        }
        else {
          uint64_t v7 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v5, i + 64);
        break;
      case 4:
        SUPL_Process_AidResponse(i);
        break;
      case 5:
        SUPL_Process_posResponse((void *)i);
        break;
      case 6:
        LcsTimer::OnTimer((LcsTimer *)*(unsigned int *)(i + 20));
        break;
      case 7:
        SUPL_HandleECIDParams(i);
        break;
      case 8:
        SUPL_Recieve_LPP_Ad_Rsp(*(_DWORD **)(i + 88));
        break;
      case 9:
        SUPL_Recieve_LPP_Pos_Rsp(*(void *)(i + 96));
        break;
      case 0xA:
        SUPL_Recieve_LPP_Cap_Rsp(*(_DWORD **)(i + 104));
        break;
      case 0xB:
        SUPL_process_Abort_In((SuplProvider *)i);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v3 = mach_continuous_time();
          unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL Event\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "SUPL_Message_Handler", 770);
          LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
        }
        break;
    }
    size_t result = (SuplProvider *)SUPL_Message_Free((void *)i);
  }
  return result;
}

void SUPL_Handle_Comms_Open(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  LcsFunctionEntryExitTrace::LcsFunctionEntryExitTrace((LcsFunctionEntryExitTrace *)v12, 109, "SUPL_Handle_Comms_Open");
  if (a1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 20);
    int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 73, "SUPL_Handle_Comms_Open", *(unsigned __int16 *)(a1 + 24));
      int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v5, 4, 1);
    }
    if (!v2)
    {
      int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "SUPL_Handle_Comms_Open", 770);
        int IsLoggingAllowed = (SuplProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
      }
    }
    uint64_t Instance = SuplProvider::GetInstance(IsLoggingAllowed);
    if (Instance) {
      uint64_t v9 = Instance + 8;
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 8))(v9, v2, *(unsigned int *)(a1 + 28));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 69, "SUPL_Handle_Comms_Open", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v11, 0, 1);
  }
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace(v12);
}

void sub_22BA7DF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  LcsFunctionEntryExitTrace::~LcsFunctionEntryExitTrace((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SUPL_Handle_Comms_Close(unsigned int *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t Instance = (LcsSuplGlueLayer *)LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)a1);
  if (!Instance)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_12:
    size_t v8 = v10;
    int v9 = 0;
    return LbsOsaTrace_WriteLog(0x12u, __str, v8, v9, 1);
  }
  uint64_t v3 = a1[5];
  if (!v3)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n");
    goto LABEL_12;
  }
  uint64_t v4 = Instance;
  uint64_t v5 = *((void *)Instance + 5);
  if (!v5)
  {
LABEL_6:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 5, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: No session exist with SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 68, "SUPL_Handle_Comms_Close", v3);
    int v9 = 5;
    return LbsOsaTrace_WriteLog(0x12u, __str, v8, v9, 1);
  }
  while (*(_DWORD *)v5 != v3)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      goto LABEL_6;
    }
  }
  uint64_t v11 = SuplProvider::GetInstance(Instance);
  if (v11) {
    uint64_t v12 = v11 + 8;
  }
  else {
    uint64_t v12 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v12 + 16))(v12, v3, a1[7]);

  return LcsSuplGlueLayer::DeleteSessionInfo(v4, v3);
}

void SUPL_Handle_PUSH_Received(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    unsigned __int16 v1 = a1;
    int v2 = *((_DWORD *)a1 + 5);
    if (v2)
    {
      std::string __p = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      if (&__p != a1 + 5) {
        a1 = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)a1[5], (char *)a1[6], a1[6] - a1[5]);
      }
      uint64_t Instance = (SuplProvider *)SuplUtils::GetInstance((SuplUtils *)a1);
      SuplUtils::ProcessSuplMtlrMessage(Instance, *((unsigned __int8 *)v1 + 32), (const void **)&__p, v2);
      if (__p)
      {
        int v9 = __p;
        operator delete(__p);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(&__p, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf((char *)&__p, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "SUPL_Handle_PUSH_Received", 770);
      LbsOsaTrace_WriteLog(0x12u, (char *)&__p, v7, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(&__p, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)&__p, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "SUPL_Handle_PUSH_Received", 513);
    LbsOsaTrace_WriteLog(0x12u, (char *)&__p, v5, 0, 1);
  }
}

void sub_22BA7E3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

SimUtils *SUPL_HandleECIDParams(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 && *(void *)(a1 + 128))
  {
    uint64_t result = (SimUtils *)SimUtils::GetInstance((SimUtils *)a1);
    if (result)
    {
      unsigned int updated = (SuplUtils *)SimUtils::UpdateLocationIdInfo(result, *(unsigned __int8 *)(a1 + 32), *(void *)(a1 + 128));
      uint64_t Instance = (SuplProvider *)SuplUtils::GetInstance(updated);
      return SuplUtils::ProcessWaitingSuplInits(Instance);
    }
  }
  else
  {
    uint64_t result = (SimUtils *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Either SuplMessage or locationIDInfo is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "SUPL_HandleECIDParams", 770);
      return (SimUtils *)LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t SUPL_Recieve_LPP_Ad_Rsp(_DWORD *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: sessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 73, "SUPL_Recieve_LPP_Ad_Rsp", *a1);
      int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 4, 1);
    }
    uint64_t Instance = (SuplProvider *)SuplLppProvider::GetInstance(IsLoggingAllowed);
    return SuplLppProvider::SetLppAdPayload(Instance, (uint64_t)a1);
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "SUPL_Recieve_LPP_Ad_Rsp", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t *SUPL_Recieve_LPP_Pos_Rsp(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: sessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 73, "SUPL_Recieve_LPP_Pos_Rsp", *(_DWORD *)(a1 + 28));
      int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 4, 1);
    }
    uint64_t Instance = (SuplPosPayloadHandler *)SuplLppProvider::GetInstance(IsLoggingAllowed);
    unsigned __int16 v6 = (uint64_t *)SuplPosPayloadHandler::GetInstance(Instance);
    return SuplPosPayloadHandler::HandleLppPosResponseFromStack(v6, a1);
  }
  else
  {
    uint64_t result = (uint64_t *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "SUPL_Recieve_LPP_Pos_Rsp", 513);
      return (uint64_t *)LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    }
  }
  return result;
}

void *SUPL_Recieve_LPP_Cap_Rsp(_DWORD *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_IsLoggingAllowed(0x12u, 4, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: sessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 73, "SUPL_Recieve_LPP_Cap_Rsp", *a1);
      int IsLoggingAllowed = (SuplLppProvider *)LbsOsaTrace_WriteLog(0x12u, __str, v4, 4, 1);
    }
    uint64_t Instance = (void *)SuplLppProvider::GetInstance(IsLoggingAllowed);
    return SuplLppProvider::SetLppCapPayload(Instance, (uint64_t)a1);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "SUPL_Recieve_LPP_Cap_Rsp", 513);
      return (void *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
  }
  return result;
}

char *SUPL_Process_AidResponse(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return (char *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if (!v2)
  {
    uint64_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n");
    return (char *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
  if (!*(void *)(a1 + 120))
  {
    uint64_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AID Rsp\n");
    return (char *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
  }
  uint64_t Instance = SuplProvider::GetInstance((SuplProvider *)a1);
  unsigned __int16 v4 = (SuplUtils *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)Instance + 8))(Instance, v2, **(void **)(a1 + 120));
  uint64_t v5 = (char *)SuplUtils::GetInstance(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 120) + 8);

  return SuplUtils::StoreLastKnownPositionFix(v5, v6);
}

void SUPL_Process_posResponse(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1 && (v1 = a1, (uint64_t v2 = a1[14]) != 0))
  {
    if (*(_DWORD *)(v2 + 24) == 3)
    {
      int v3 = *((_DWORD *)a1 + 5);
      if (v3)
      {
        *(void *)std::string __str = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        char v16 = -1;
        char v18 = 0;
        int v17 = v3;
        if (__str == (char *)v2)
        {
          char v5 = 0;
        }
        else
        {
          a1 = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, *(char **)v2, *(char **)(v2 + 8), *(void *)(v2 + 8) - *(void *)v2);
          uint64_t v4 = v1[14];
          char v5 = *(unsigned char *)(v4 + 32);
          int v3 = *(_DWORD *)(v4 + 28);
        }
        char v18 = v5;
        char v16 = v3 != 2;
        uint64_t Instance = SuplProvider::GetInstance((SuplProvider *)a1);
        (*(void (**)(uint64_t, char *))(*(void *)Instance + 16))(Instance, __str);
        if (*(void *)__str)
        {
          uint64_t v14 = *(void **)__str;
          operator delete(*(void **)__str);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 69, "SUPL_Process_posResponse", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v11, 0, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx posRspContentType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "SPL", 69, "SUPL_Process_posResponse", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v9, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Either SuplMessage or ppduResponseMsg is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "SUPL_Process_posResponse", 770);
    LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
  }
}

void sub_22BA7EEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***SUPL_process_Abort_In(SuplProvider *a1))(void, void, char *, void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = *((_DWORD *)a1 + 5);
  if (v1)
  {
    __str[0] = 1;
    int v6 = v1;
    uint64_t result = (uint64_t (***)(void, void, char *, void))SuplProvider::GetInstance(a1);
    if (result) {
      return (uint64_t (***)(void, void, char *, void))(**result)(result, 0, __str, 0);
    }
  }
  else
  {
    uint64_t result = (uint64_t (***)(void, void, char *, void))LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requestID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "SUPL_process_Abort_In", 770);
      return (uint64_t (***)(void, void, char *, void))LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    }
  }
  return result;
}

char **KFP_printMeas(char **result)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((g_FPE_LogSeverity & 0x80) != 0)
  {
    int v1 = result;
    if (result)
    {
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v3 = *(double *)(g_TCU + 8);
        }
        else {
          double v3 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: nonSyncedFields = {KfirInputMeas:[%6.12f %d]}", "KFP_printMeas", 177, v2, v3, *(double *)v1, *((_DWORD *)v1 + 2));
      }
      int v6 = (char **)g_p_CB_LCD_SA_Dbg;
      if (g_p_CB_LCD_SA_Dbg)
      {
        uint64_t v7 = *(char **)g_p_CB_LCD_SA_Dbg;
        char v8 = 36;
        uint64_t v9 = 1u;
        do
        {
          *int v6 = v7 + 1;
          *uint64_t v7 = v8;
          uint64_t v7 = *v6;
          if (*v6 >= v6[3])
          {
            uint64_t v7 = v6[2];
            *int v6 = v7;
          }
          char v8 = aKfiData[v9++];
        }
        while (v9 != 11);
        LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
        int v6 = (char **)g_p_CB_LCD_SA_Dbg;
      }
      uint64_t v10 = 0;
      int v17 = 216;
      unsigned __int16 v11 = v6;
      do
      {
        if (v11)
        {
          sprintf_02x(v11, *((unsigned __int8 *)&v17 + v10));
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v6 = (char **)g_p_CB_LCD_SA_Dbg;
          unsigned __int16 v11 = (char **)g_p_CB_LCD_SA_Dbg;
        }
        ++v10;
      }
      while (v10 != 4);
      uint64_t v12 = 0;
      int v16 = *((_DWORD *)v1 + 2);
      size_t v13 = v6;
      do
      {
        if (v13)
        {
          sprintf_02x(v13, *((unsigned __int8 *)&v16 + v12));
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v6 = (char **)g_p_CB_LCD_SA_Dbg;
          size_t v13 = (char **)g_p_CB_LCD_SA_Dbg;
        }
        ++v12;
      }
      while (v12 != 4);
      uint64_t v14 = 0;
      uint64_t result = v6;
      do
      {
        if (result)
        {
          sprintf_02x(result, *((unsigned __int8 *)v1 + v14));
          LCD_SA_Debug_Flush_Check(g_p_CB_LCD_SA_Dbg);
          int v6 = (char **)g_p_CB_LCD_SA_Dbg;
          uint64_t result = (char **)g_p_CB_LCD_SA_Dbg;
        }
        ++v14;
      }
      while (v14 != 216);
      if (v6)
      {
        uint64_t v15 = (*v6)++;
        *uint64_t v15 = 10;
        if (*v6 >= v6[3]) {
          *int v6 = v6[2];
        }
      }
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v5 = *(double *)(g_TCU + 8);
        }
        else {
          double v5 = 0.0;
        }
        uint64_t result = (char **)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input meas is equal to nullptr!", "KFP_printMeas", 172, v4, v5);
      }
      g_FPE_AssertFlag = 1;
    }
  }
  return result;
}

void KFP_runLeveler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v10 = v6 + 1889392;
  int v11 = *(_DWORD *)(v7 + 8);
  if (v11 == 6 || v11 == 0) {
    LVLR_Run(v6 + 1889376, v7);
  }
  if (*(unsigned char *)v10 && *(_DWORD *)(v8 + 8) == 2 && *(unsigned char *)(v8 + 208))
  {
    uint64_t v69 = 0;
    memset(v68, 0, sizeof(v68));
    Set_Mat_Const((const char *)1, *(_DWORD *)(v9 + 1879576), (const char *)0x20, (int *)v68, *(double *)(v8 + 128));
    Copy_SubMat_to_Mat(1.0, 32, v68, 27, 0, 1024, (int *)(v9 + 1879584));
    size_t v13 = (double *)(v8 + 80);
    uint64_t v60 = (double *)(v8 + 16);
    unint64_t v62 = (unsigned int *)(v9 + 1879576);
    Set_Mat_Const((const char *)1, *(_DWORD *)(v9 + 1879576), (const char *)0x20, (int *)v68, *(double *)(v8 + 80));
    uint64_t v61 = (int *)(v9 + 1879584);
    Copy_SubMat_to_Mat(1.0, 32, v68, 28, 0, 1024, (int *)(v9 + 1879584));
    *(void *)&v65[0] = 0;
    if (R8_EQ((const double *)(v8 + 80), (const double *)v65)
      || (*(void *)&v77[0] = 0, R8_EQ((const double *)(v8 + 88), (const double *)v77)))
    {
      unsigned int v14 = *v62;
      double v15 = 0.0;
    }
    else
    {
      unsigned int v14 = *v62;
      double v15 = *(double *)(v8 + 88) - *v13;
    }
    Set_Mat_Const((const char *)1, v14, (const char *)0x20, (int *)v68, v15);
    Copy_SubMat_to_Mat(1.0, 32, v68, 29, 0, 1024, v61);
    *(void *)&v65[0] = 0;
    if (R8_EQ((const double *)(v8 + 80), (const double *)v65)
      || (*(void *)&v77[0] = 0, R8_EQ((const double *)(v8 + 96), (const double *)v77)))
    {
      unsigned int v16 = *v62;
      double v17 = 0.0;
    }
    else
    {
      unsigned int v16 = *v62;
      double v17 = *(double *)(v8 + 96) - *v13;
    }
    Set_Mat_Const((const char *)1, v16, (const char *)0x20, (int *)v68, v17);
    Copy_SubMat_to_Mat(1.0, 32, v68, 31, 0, 1024, v61);
    double v18 = *(double *)v8;
    uint64_t v80 = 0;
    long long v79 = 0u;
    memset(v78, 0, sizeof(v78));
    memset(v77, 0, sizeof(v77));
    LVLR_GetLevelerOutputs(v9 + 1889376, (uint64_t)v77);
    uint64_t v19 = *((void *)&v79 + 1);
    uint64_t v20 = v80;
    memset(v76, 0, sizeof(v76));
    Copy_Mat(3, (int *)v77, (const char *)3, (int *)v76);
    uint64_t v75 = 0;
    long long v74 = 0u;
    memset(v73, 0, sizeof(v73));
    Copy_Mat(3, (int *)v78, (const char *)6, (int *)v73);
    Set_Mat_Size((const char *)6, (int *)v73, 4, 1);
    LODWORD(v21) = v78[2];
    *(double *)&long long v74 = (double)v21;
    memset(v72, 0, sizeof(v72));
    Copy_Mat(3, (int *)&v78[2] + 2, (const char *)3, (int *)v72);
    memset(v71, 0, sizeof(v71));
    InsUtil_ECEF2Geo_Iterative(v60, (uint64_t)v71, 6378137.0);
    memset(v70, 0, sizeof(v70));
    CreateC_e_n((uint64_t)v71, (int *)v70);
    bzero(v68, 0x2008uLL);
    Copy_Mat(1024, (int *)(v9 + 1890000), (const char *)0x400, (int *)v68);
    memset(v67, 0, sizeof(v67));
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v9 + 1890000), 0, 0, 3, 3u, 9, (int *)v67);
    Mult_MatT_Mat(9, (uint64_t)v70, 9, (uint64_t)v67, 9, (uint64_t)v67);
    Mult_Mat_Mat(9, (uint64_t)v67, 9, (uint64_t)v70, 9, (uint64_t)v67);
    Copy_SubMat_to_Mat(1.0, 9, v67, 0, 0, 1024, (int *)v68);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v9 + 1890000), 18, 18, 3, 3u, 9, (int *)v67);
    Mult_MatT_Mat(9, (uint64_t)v70, 9, (uint64_t)v67, 9, (uint64_t)v67);
    Mult_Mat_Mat(9, (uint64_t)v67, 9, (uint64_t)v70, 9, (uint64_t)v67);
    Copy_SubMat_to_Mat(1.0, 9, v67, 18, 18, 1024, (int *)v68);
    uint64_t v58 = v10;
    int v22 = *(_DWORD *)(v10 + 612);
    double v23 = *(double *)(v9 + 1890000 + 8 * (28 * v22 + 28) + 8);
    double v24 = *(double *)(v8 + 104);
    if (v23 < v24) {
      double v23 = *(double *)(v8 + 104);
    }
    int v25 = DWORD1(v68[0]);
    *((double *)v68 + (28 * DWORD1(v68[0]) + 28) + 1) = v23;
    *(void *)&v65[0] = 0;
    if (!R8_EQ((const double *)(v8 + 80), (const double *)v65))
    {
      *(void *)&long long v63 = 0;
      if (!R8_EQ((const double *)(v8 + 88), (const double *)&v63))
      {
        double v26 = *(double *)(v9 + 8 * (29 * v22 + 29) + 1890008);
        if (v26 < v24 + *(double *)(v8 + 112)) {
          double v26 = v24 + *(double *)(v8 + 112);
        }
        *((double *)v68 + (29 * v25 + 29) + 1) = v26;
      }
    }
    double v27 = *(double *)(v9 + 8 * (30 * v22 + 30) + 1890008);
    if (v27 < v24) {
      double v27 = v24;
    }
    *((double *)v68 + (30 * v25 + 30) + 1) = v27;
    *(void *)&v65[0] = 0;
    if (!R8_EQ((const double *)(v8 + 80), (const double *)v65))
    {
      *(void *)&long long v63 = 0;
      if (!R8_EQ((const double *)(v8 + 96), (const double *)&v63))
      {
        double v28 = *(double *)(v9 + 8 * (31 * v22 + 31) + 1890008);
        if (v28 < v24 + *(double *)(v8 + 120)) {
          double v28 = v24 + *(double *)(v8 + 120);
        }
        *((double *)v68 + (31 * v25 + 31) + 1) = v28;
      }
    }
    BOOL v59 = (void *)v8;
    if (All_Mat_Greater_Than(0.0, 3, (unsigned int *)v72))
    {
      Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)v67, 0.0);
      Copy_Vec_to_Mat_diag(3, (int *)v72, 0, 0, 1, 1, 9, (unsigned int *)v67);
      Copy_SubMat_to_Mat(1.0, 9, v67, 12, 12, 1024, (int *)v68);
    }
    if (*v62)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      int v31 = (int *)(v8 + 48);
      uint64_t v32 = 134584;
      uint64_t v33 = 184872;
      uint64_t v34 = 1887792;
      uint64_t v35 = 67400;
      do
      {
        uint64_t v36 = *(void *)(v9 + v34);
        uint64_t v66 = 0;
        memset(v65, 0, sizeof(v65));
        Copy_SubMat_from_Mat(1.0, 1024, v61, 0, v30, *v61, 1u, 32, (int *)v65);
        long long v63 = 0u;
        long long v64 = 0u;
        Set_Mat_Size((const char *)3, (int *)&v63, 1, 3);
        *((void *)&v63 + 1) = v19;
        *(void *)&long long v64 = v20;
        *((void *)&v64 + 1) = v36;
        KF_initKFafterLeveling(v9 + v29 + 24, (int *)v65, (int *)v68, (double *)&v63, (int *)v76, v60, v31, v73, v18);
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          uint64_t v37 = mach_continuous_time();
          double v38 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
          _X25 = v9 + v32;
          _X8 = v9 + v32 + 648;
          __asm { PRFM            #0, [X8] }
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Attitude_State[deg] for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_initPosAfterLeveling", 393, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), v38, v30, *(double *)(v9 + v29 + 17760), *(double *)(v9 + v29 + 17768), *(double *)(v9 + v29 + 17776));
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            uint64_t v45 = mach_continuous_time();
            double v46 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Attitude_Rate_State[deg/s]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_initPosAfterLeveling", 400, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), v46, v30, *(double *)(v9 + v29 + 17792), *(double *)(v9 + v29 + 17800), *(double *)(v9 + v29 + 17808));
            if ((g_FPE_LogSeverity & 8) != 0)
            {
              uint64_t v47 = mach_continuous_time();
              double v48 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
              _X9 = v9 + v33;
              __asm { PRFM            #0, [X9] }
              LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CCH_Values_And_Lever_Arm: for Filter Index %d  =  {%lf, %lf}", "KFP_initPosAfterLeveling", 406, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), v48, v30, *(double *)(v9 + v35), *(double *)(v9 + v29 + 17744));
              if ((g_FPE_LogSeverity & 8) != 0)
              {
                uint64_t v51 = mach_continuous_time();
                double v52 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
                __asm { PRFM            #0, [X25] }
                LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Accel_Bias[m/samp_period^2]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_initPosAfterLeveling", 413, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), v52, v30, *(double *)(v9 + v29 + 17112), *(double *)(v9 + v29 + 17120), *(double *)(v9 + v29 + 17128));
                if ((g_FPE_LogSeverity & 8) != 0)
                {
                  uint64_t v54 = mach_continuous_time();
                  if (g_TCU) {
                    double v55 = *(double *)(g_TCU + 8);
                  }
                  else {
                    double v55 = 0.0;
                  }
                  LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Gyro_Bias[deg/samp_period]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_initPosAfterLeveling", 420, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), v55, v30, *(double *)(v9 + v29 + 17144) * 57.2957795, *(double *)(v9 + v29 + 17152) * 57.2957795, *(double *)(v9 + v29 + 17160) * 57.2957795);
                }
              }
            }
          }
        }
        ++v30;
        v32 += 117472;
        v33 += 117472;
        v34 += 8;
        v29 += 117472;
        v35 += 117472;
      }
      while (v30 < *v62);
    }
    *(void *)(v9 + 8) = *v59;
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v56 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v57 = *(double *)(g_TCU + 8);
      }
      else {
        double v57 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f KF_SM: Init After leveling", "KFP_runLeveler", 465, v56, v57);
    }
    *(void *)(v58 + 9104) = *(void *)v9;
    *(_DWORD *)(v58 + 600) = 4;
  }
}

uint64_t KFP_runMeas(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t)a2;
  unint64_t v4 = (double *)a1;
  uint64_t v182 = *MEMORY[0x263EF8340];
  if (*a2 < *(double *)a1)
  {
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v6 = *(double *)(g_TCU + 8);
      }
      else {
        double v6 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Ignoring meas type #%d measurements from the past (%0.2f) at time: %0.2f", "KFP_runMeas", 699, v5, v6, *(_DWORD *)(v3 + 8), *(double *)v3, *v4);
    }
    return 1;
  }
  uint64_t v7 = (unsigned int *)(a1 + 1879576);
  if (!*(_DWORD *)(a1 + 1879576)) {
    return 1;
  }
  uint64_t v8 = a3;
  uint64_t v9 = 0;
  int v10 = 0;
  int v118 = (_DWORD *)(a3 + 17512);
  unsigned __int16 v110 = (int *)(a1 + 1888048);
  uint64_t v104 = a3 + 17520;
  BOOL v105 = (int *)(a1 + 1898200);
  int64x2_t v103 = vdupq_n_s64(0x40F86A0000000000uLL);
  long long v106 = (unsigned int *)(a1 + 1879576);
  while (1)
  {
    int v11 = &v4[v9 + 236007];
    if (*v11 == 0.0) {
      goto LABEL_121;
    }
    uint64_t v126 = 0;
    memset(v125, 0, sizeof(v125));
    uint64_t v124 = 0;
    memset(v123, 0, sizeof(v123));
    int v122 = *(_DWORD *)(v3 + 8);
    v10 |= v7[2604] == 3;
    uint64_t v12 = (uint64_t)&v4[14684 * v9 + 3];
    char v13 = KF_ApplySingleMeas(v12, v3, v10 & 1, (uint64_t)v125, (uint64_t)v123, (uint64_t)&v122);
    char v14 = v13;
    unsigned int v15 = v7[2604];
    if (v15 == 3)
    {
      if (v13)
      {
        if (*(_DWORD *)(v3 + 8) != 4) {
          goto LABEL_97;
        }
        goto LABEL_95;
      }
      Shift_Left_Vec(*v4, 32, v105, (const char *)0x20, v105);
      uint64_t v177 = 0;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      Diff_Vec(32, v105, (const char *)0x20, (int *)&v161);
      double v23 = Max_Vec(32, (uint64_t)&v161, 0);
      uint64_t v160 = 0;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      int v24 = *v105 - 4;
      long long v144 = 0u;
      long long v145 = 0u;
      Copy_SubMat_from_Mat(1.0, 32, v105, v24, 0, 4, 1u, 32, (int *)&v144);
      uint64_t v143 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      Diff_Vec(32, &v144, (const char *)0x20, (int *)&v127);
      double v25 = Max_Vec(32, (uint64_t)&v127, 0);
      if (v23 > 60.0)
      {
        if (v25 <= 60.0)
        {
          double v33 = *v4 + 15.0;
          uint64_t v34 = (uint64_t)&v4[14684 * (int)v7[2185] + 3];
          Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, (int *)(v34 + 67384), 10.0);
          *(double *)(v34 + 67648) = v33;
          KF_softResetCmd((uint64_t)&v4[14684 * (int)v7[2185] + 3], 0, 10.0);
          __int16 v35 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            uint64_t v36 = mach_continuous_time();
            if (g_TCU) {
              double v37 = *(double *)(g_TCU + 8);
            }
            else {
              double v37 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f KFP requests Soft Reset (AllStates) during RUN mode, time=%f", "KFP_UpdateBankState", 617, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), v37, *v4);
            __int16 v35 = g_FPE_LogSeverity;
          }
          if ((v35 & 0x200) != 0) {
            LC_LOG_NMEA_GENERIC("%s,CCHA,%d", "$PFPEX", 3);
          }
          double v48 = &v4[14684 * (int)v7[2185]];
          v48[26] = 0.0;
          v48[27] = 0.0;
          v48[25] = 0.0;
          KF_softResetCmd((uint64_t)(v48 + 3), 3, 0.0);
        }
        else
        {
          unsigned int v29 = v7[2185];
          double v30 = *v4 - v4[14684 * (int)v29 + 6096];
          if (v30 < 0.0) {
            double v30 = -v30;
          }
          if (v30 <= 80.0)
          {
            uint64_t v40 = &v4[14684 * (int)v29 + 3];
            v40[22] = 0.0;
            v40[23] = 0.0;
            v40[24] = 0.0;
            KF_softResetCmd((uint64_t)v40, 3, 0.0);
            double v41 = *v4;
            double v42 = *v4 + 30.0;
            uint64_t v43 = (uint64_t)&v4[14684 * (int)v7[2185] + 3];
            *(int64x2_t *)(v43 + 67560) = v103;
            *(void *)(v43 + 67576) = 0x40F86A0000000000;
            *(double *)(v43 + 67648) = v42;
            *(double *)(v43 + 48744) = v41;
            __int16 v44 = g_FPE_LogSeverity;
            if ((g_FPE_LogSeverity & 4) != 0)
            {
              uint64_t v45 = mach_continuous_time();
              if (g_TCU) {
                double v46 = *(double *)(g_TCU + 8);
              }
              else {
                double v46 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f KFP requests Soft Reset (Unmount) during RUN mode, time=%f", "KFP_UpdateBankState", 651, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), v46, *v4);
              __int16 v44 = g_FPE_LogSeverity;
            }
            if ((v44 & 0x200) != 0)
            {
              int v47 = 4;
              goto LABEL_46;
            }
          }
          else if ((g_FPE_LogSeverity & 4) != 0)
          {
            uint64_t v31 = mach_continuous_time();
            if (g_TCU) {
              double v32 = *(double *)(g_TCU + 8);
            }
            else {
              double v32 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f KFP Divergence detected during run, time=%f", "KFP_UpdateBankState", 659, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), v32, *v4);
          }
        }
      }
      else
      {
        __int16 v26 = g_FPE_LogSeverity;
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          uint64_t v27 = mach_continuous_time();
          if (g_TCU) {
            double v28 = *(double *)(g_TCU + 8);
          }
          else {
            double v28 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f KFP requests Internal Reset during RUN mode, time=%f", "KFP_UpdateBankState", 600, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), v28, *v4);
          __int16 v26 = g_FPE_LogSeverity;
        }
        if ((v26 & 0x200) != 0)
        {
          int v47 = 2;
LABEL_46:
          LC_LOG_NMEA_GENERIC("%s,CCHA,%d", "$PFPEX", v47);
        }
      }
      KF_softResetCmd((uint64_t)&v4[14684 * (int)v7[2185] + 3], 0, 10.0);
      CCH_initStates((int *)&v4[14684 * (int)v7[2185] + 6098]);
      uint64_t v49 = &v4[14684 * (int)v7[2185] + 4300];
      *(_OWORD *)uint64_t v49 = 0u;
      *((_OWORD *)v49 + 1) = 0u;
      *((_OWORD *)v49 + 2) = 0u;
      *((_OWORD *)v49 + 3) = 0u;
      *((_OWORD *)v49 + 4) = 0u;
      *((_OWORD *)v49 + 5) = 0u;
      *((_OWORD *)v49 + 6) = 0u;
      *((_OWORD *)v49 + 7) = 0u;
      *((_OWORD *)v49 + 8) = 0u;
      *((_OWORD *)v49 + 9) = 0u;
      *((_OWORD *)v49 + 10) = 0u;
      *(_OWORD *)((char *)v49 + 169) = 0u;
      if (v23 <= 60.0) {
        return 0;
      }
      goto LABEL_65;
    }
    if (v15 == 2) {
      break;
    }
LABEL_66:
    if (*(_DWORD *)(v3 + 8) != 4) {
      goto LABEL_96;
    }
    if (v15 == 2 && (g_FPE_LogSeverity & 8) != 0)
    {
      uint64_t v56 = mach_continuous_time();
      double v57 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Attitude_State[deg] for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_runMeas", 755, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), v57, v9, v4[14684 * v9 + 2220], v4[14684 * v9 + 2221], v4[14684 * v9 + 2222]);
      if ((g_FPE_LogSeverity & 8) != 0)
      {
        uint64_t v58 = mach_continuous_time();
        double v59 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Attitude_Rate_State[deg/s]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_runMeas", 762, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), v59, v9, v4[14684 * v9 + 2224], v4[14684 * v9 + 2225], v4[14684 * v9 + 2226]);
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          uint64_t v60 = mach_continuous_time();
          double v61 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CCH_Values_And_Lever_Arm: for Filter Index %d  =  {%lf, %lf}", "KFP_runMeas", 768, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), v61, v9, v4[14684 * v9 + 8425], v4[14684 * v9 + 2218]);
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            uint64_t v62 = mach_continuous_time();
            double v63 = g_TCU ? *(double *)(g_TCU + 8) : 0.0;
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Accel_Bias[m/samp_period^2]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_runMeas", 775, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), v63, v9, v4[14684 * v9 + 2139], v4[14684 * v9 + 2140], v4[14684 * v9 + 2141]);
            if ((g_FPE_LogSeverity & 8) != 0)
            {
              uint64_t v64 = mach_continuous_time();
              if (g_TCU) {
                double v65 = *(double *)(g_TCU + 8);
              }
              else {
                double v65 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Gyro_Bias[deg/samp_period]: for Filter Index %d  =  {%lf, %lf, %lf}", "KFP_runMeas", 782, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), v65, v9, v4[14684 * v9 + 2143] * 57.2957795, v4[14684 * v9 + 2144] * 57.2957795, v4[14684 * v9 + 2145] * 57.2957795);
            }
          }
        }
      }
    }
LABEL_95:
    v4[14684 * v9 + 14686] = *(double *)v3;
    unsigned int v15 = v7[2604];
LABEL_96:
    if ((v15 & 0xFFFFFFFE) == 2)
    {
LABEL_97:
      uint64_t v66 = v7[2185];
      if ((v66 & 0x80000000) == 0 && v9 == v66 && v122 == 3)
      {
        int v111 = v10;
        uint64_t v109 = v9;
        if (*v118)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          uint64_t v69 = a1 + 117472 * v9;
          unsigned __int8 v116 = (int *)(v69 + 17032);
          uint64_t v117 = v12;
          uint64_t v115 = (int *)(v69 + 16968);
          uint64_t v70 = 17552;
          uint64_t v71 = 17520;
          uint64_t v72 = 6608;
          uint64_t v73 = v104;
          do
          {
            long long v161 = 0u;
            long long v162 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v161, 0.0);
            Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v144, 0.0);
            Sub_Mat(3, v116, 3, (int *)(v73 + 48), (const char *)3, (int *)&v161);
            Sub_Mat(3, v115, 3, (int *)(v73 + 80), (const char *)3, (int *)&v144);
            Transpose_Mat(3, (uint64_t)&v161, 3, (uint64_t)&v161, v74, v75);
            Transpose_Mat(3, (uint64_t)&v144, 3, (uint64_t)&v144, v76, v77);
            double v120 = Dot_Vec_Vec(3, v73, 3, (uint64_t)&v161);
            double v78 = Dot_Vec_Vec(3, v73, 3, (uint64_t)&v144);
            v79.f64[0] = *(float64_t *)(v12 + 232);
            uint64_t v80 = v8 + 4 * v68;
            int v81 = *(_DWORD *)(v80 + 592);
            if (((v81 - 1) & 0xFFFFFFFB) != 0) {
              v79.f64[0] = v79.f64[0] + *(double *)(v12 + 8 * (v81 + 27) + 8);
            }
            float64_t v82 = *(double *)(v12 + 224);
            uint64_t v83 = v8 + v71;
            char v84 = (double *)(v8 + v70);
            v79.f64[1] = v82;
            v85.f64[0] = v120;
            v85.f64[1] = v78;
            *(float64x2_t *)(v8 + v70 + 96) = vaddq_f64(vsubq_f64(v79, *(float64x2_t *)(v8 + v71 + 112)), vaddq_f64(v85, *(float64x2_t *)(v8 + v70)));
            if (g_TCU) {
              double v86 = *(double *)(v8 + 392) + *(double *)(g_TCU + 64);
            }
            else {
              double v86 = 0.0;
            }
            uint64_t v87 = v8 + 8 * v68;
            if (v86 - *(double *)(v87 + 8) > 0.5 && (g_FPE_LogSeverity & 8) != 0)
            {
              uint64_t v112 = mach_continuous_time();
              if (g_TCU) {
                double v88 = *(double *)(g_TCU + 8);
              }
              else {
                double v88 = 0.0;
              }
              double v89 = *(double *)&g_MacClockTicksToMsRelation;
              double v90 = *(double *)(v87 + 8);
              int v121 = *(_DWORD *)(v80 + 592);
              uint64_t v91 = a3 + 4 * v68;
              int v114 = *(_DWORD *)(v91 + 400);
              double v92 = *(double *)(a3 + 8 * v68 + 2808);
              uint64_t v93 = *(int *)(v91 + 1032);
              BOOL v113 = v93 == 0;
              if (v93 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                uint64_t v94 = 120;
              }
              else
              {
                uint64_t v94 = dword_22BB457A8[v93];
              }
              double v95 = *(double *)(a3 + v67 + 8384);
              uint64_t v96 = *(int *)(a3 + v72);
              BOOL v97 = *(_DWORD *)(a3 + v72) == 0;
              if (v96 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                uint64_t v98 = 120;
              }
              else
              {
                uint64_t v98 = dword_22BB457A8[v96];
              }
              LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f SVLine  %6.1f   %6.1f   %d  %d    %6.1f %d%c    %6.1f %d%c    %6.1f    %6.1f    %6.1f    %6.1f    %6.1f    %6.1f", "KFP_runMeas", 879, (unint64_t)(v89 * (double)v112), v88, v86, v90, v121, v114, v92, v113, v94, v95, v97, v98, sqrt(*(double *)(a3 + v67 + 4824)), sqrt(*(double *)(a3 + v67 + 10400)), *v84,
                v84[12],
                *(double *)(v83 + 40),
                *(double *)(v83 + 136));
            }
            ++v68;
            v73 += 144;
            uint64_t v8 = a3;
            v67 += 8;
            v72 += 4;
            v71 += 144;
            v70 += 144;
            uint64_t v12 = v117;
          }
          while (v68 < *v118);
        }
        uint64_t v3 = (uint64_t)a2;
        unint64_t v4 = (double *)a1;
        uint64_t v7 = v106;
        uint64_t v9 = v109;
        int v10 = v111;
      }
    }
LABEL_121:
    if (++v9 >= (unint64_t)*v7) {
      return 1;
    }
  }
  int v16 = v122;
  *(void *)&long long v164 = 0;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v161 = 0u;
  Mat_Eq_Scalar(1.0, 6, (int *)v125, (const char *)6, (int *)&v161);
  *(void *)&long long v147 = 0;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v144 = 0u;
  Mat_Eq_Scalar(0.0, 6, (int *)v125, (const char *)6, (int *)&v144);
  if (*v4 - v4[1] > 10.0)
  {
    Sum_Mat(6, &v144);
    double v18 = v17;
    Sum_Mat(6, &v161);
    BOOL v20 = v19 > 0.0;
    if (v18 > 0.0) {
      BOOL v20 = 1;
    }
    if ((v16 & 0xFFFFFFF7) == 1 && v20)
    {
      *(void *)&long long v130 = 0;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      uint64_t v181 = 0;
      memset(v180, 0, sizeof(v180));
      uint64_t v179 = 0;
      memset(v178, 0, sizeof(v178));
      if (v16 == 1)
      {
        double v21 = 1.0;
        double v22 = 10.0;
      }
      else if (v16 == 9)
      {
        double v21 = 10.0;
        double v22 = 100.0;
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v38 = mach_continuous_time();
          if (g_TCU) {
            double v39 = *(double *)(g_TCU + 8);
          }
          else {
            double v39 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f meas type input is not legal in this context", "KFP_UpdateBankState", 539, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), v39);
        }
        g_FPE_AssertFlag = 1;
        double v22 = 0.0;
        double v21 = 0.0;
      }
      Min_Mat_Scalar(v22, 6, (int *)v123, (const char *)6, (int *)&v127);
      Max_Mat_Scalar(-v22, 6, (int *)&v127, (const char *)6, v180);
      ElMult_Mat_Mat(6, v180, 6, v180, (const char *)6, v178);
      Sum_Mat(6, v178);
      uint64_t v51 = &v4[v9];
      v51[236041] = v51[236041] - v21 * v50;
      v51[236074] = v51[236074] + 1.0;
    }
  }
  if ((v14 & 1) == 0)
  {
    *int v11 = 0.0;
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      uint64_t v52 = mach_continuous_time();
      if (g_TCU) {
        double v53 = *(double *)(g_TCU + 8);
      }
      else {
        double v53 = 0.0;
      }
      unint64_t v54 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52);
      Sum_Mat(32, v110);
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Killing KF#%d by CCH (%d remains)", "KFP_UpdateBankState", 562, v54, v53, v9, (int)v55);
    }
  }
  if (Any_Mat_Greater_Than(0.0, 32, v110))
  {
LABEL_65:
    unsigned int v15 = v7[2604];
    goto LABEL_66;
  }
  __int16 v100 = g_FPE_LogSeverity;
  if ((g_FPE_LogSeverity & 4) != 0)
  {
    unint64_t v101 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v102 = *(double *)(g_TCU + 8);
    }
    else {
      double v102 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f KFP requests Internal Reset during CVG mode, because no kalmans left, time=%f", "KFP_UpdateBankState", 572, v101, v102, *v4);
    __int16 v100 = g_FPE_LogSeverity;
  }
  if ((v100 & 0x200) != 0) {
    LC_LOG_NMEA_GENERIC("%s,CCHA,%d", "$PFPEX", 1);
  }
  return 0;
}

void KFP_createOutputFromKFPool(uint64_t a1, int *a2, double a3)
{
  v46[33] = *(double *)MEMORY[0x263EF8340];
  double v6 = (unsigned __int8 *)(a2 + 2112);
  uint64_t v7 = (unsigned __int8 *)(a1 + 1898472);
  uint64_t v8 = (signed int *)(a1 + 1879576);
  int v9 = *(_DWORD *)(a1 + 1889992);
  if (v9 == 4 || v9 == 2)
  {
    int v11 = Any_Mat_Greater_Than(1000.0, 32, (int *)(a1 + 1888584));
    unsigned int v38 = 0;
    memset(v46, 0, 264);
    Mat_Greater_than_Scalar(0.0, 32, (int *)(a1 + 1888584), (const char *)0x20, (int *)v46);
    ElMult_Mat_Mat(32, (int *)(a1 + 1888048), 32, (int *)(a1 + 1888584), (const char *)0x20, (int *)v46);
    uint64_t v45 = 0;
    memset(v44, 0, sizeof(v44));
    ElDiv_Mat_Mat_Cond(32, (uint64_t *)(a1 + 1888320), 32, (_DWORD *)(a1 + 1888584), 32, v46, (const char *)0x20, (int *)v44);
    Sum_Mat(32, v46);
    if (v12 == 0.0)
    {
      unsigned int First_NonZero_in_Vector_Starting_At = Find_First_NonZero_in_Vector_Starting_At(32, (int *)(a1 + 1888048), 0);
      if ((First_NonZero_in_Vector_Starting_At & 0x80000000) != 0) {
        v8[2185] = 0;
      }
      else {
        v8[2185] = First_NonZero_in_Vector_Starting_At;
      }
    }
    else
    {
      Max_Vec_Cond(32, v44, 32, (int *)v46, &v38);
      double v15 = v14;
      unsigned int v16 = v8[2185];
      unsigned int v17 = v38;
      if ((v16 & 0x80000000) == 0 && v16 != v38 && (g_FPE_LogSeverity & 8) != 0)
      {
        unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v19 = *(double *)(g_TCU + 8);
        }
        else {
          double v19 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Chosen filter changed from %d to %d", "KFP_UpdateChosenOne", 962, v18, v19, v8[2185], v38);
        unsigned int v17 = v38;
      }
      v8[2185] = v17;
      uint64_t v43 = 0;
      memset(v42, 0, sizeof(v42));
      Mat_Greater_than_Scalar(1000.0, 32, (int *)(a1 + 1888584), (const char *)0x20, v42);
      Sum_Mat(32, v42);
      memset(v41, 0, 264);
      if (*(double *)a1 - *(double *)(a1 + 8) > 60.0 && v20)
      {
        uint64_t v40 = 0;
        if (v11) {
          double v21 = -2.22e-16;
        }
        else {
          double v21 = 1.0;
        }
        memset(v39, 0, sizeof(v39));
        Set_Mat_Const((const char *)*v8, 1u, (const char *)0x20, (int *)v39, v15);
        Sub_Mat(32, (int *)v39, 32, (int *)v44, (const char *)0x20, (int *)v39);
        Mat_Greater_than_Scalar(v21, 32, (int *)v39, (const char *)0x20, (int *)v39);
        ElMult_Mat_Mat(32, (int *)v39, 32, (int *)v46, (const char *)0x20, (int *)v39);
        Copy_Mat(32, (int *)v39, (const char *)0x20, (int *)v41);
        signed int v22 = v8[2185];
        if (v22 < 0 || v22 >= *v8)
        {
          if (g_FPE_LogSeverity)
          {
            unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v24 = *(double *)(g_TCU + 8);
            }
            else {
              double v24 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f chosenOne = %d is not legal. prevent memory corruption!", "KFP_UpdateChosenOne", 1001, v23, v24, v8[2185]);
          }
          signed int v22 = 0;
          g_FPE_AssertFlag = 1;
          v8[2185] = 0;
        }
        v41[v22 + 1] = 0;
      }
      else
      {
        Set_Mat_Const((const char *)*v8, 1u, (const char *)0x20, (int *)v41, 0.0);
      }
      Set_Mat_Const_Cond(0.0, 32, v41, (const char *)0x20, (int *)(a1 + 1888048));
    }
    Sum_Mat(32, (_DWORD *)(a1 + 1888048));
    unsigned int v26 = v25;
    v8[2184] = v25;
    if (v11)
    {
      *(unsigned char *)(a1 + 117472 * v8[2185] + 34392) = 0;
      if (v26 < 0xA)
      {
        if (v26 == 1)
        {
          v8[2604] = 3;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            mach_continuous_time();
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f KF_SM: Finished Convergence. Chosen filter %d");
          }
        }
      }
      else
      {
        do
        {
          Min_Vec_Cond(32, v44, 32, (int *)(a1 + 1888048), &v38);
          *(void *)(a1 + 8 * v38 + 1888056) = 0;
          Sum_Mat(32, (_DWORD *)(a1 + 1888048));
          v8[2184] = v27;
        }
        while (v27 > 9);
        v8[2604] = 2;
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f KF_SM: Reduced number of filters to %d. Chosen filter: %d");
        }
      }
      *((void *)v7 + 4) = *(void *)a1;
    }
  }
  bzero(a2, 0x23E8uLL);
  if ((v8[2604] - 2) > 2)
  {
    Set_Mat_Const((const char *)1, 3u, (const char *)3, a2, NAN);
    Set_Mat_Const((const char *)1, 3u, (const char *)3, a2 + 8, NAN);
    *((void *)a2 + 10) = 0x7FF8000000000000;
    Set_Mat_Const((const char *)3, 3u, (const char *)9, a2 + 2154, NAN);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, a2 + 22, NAN);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, a2 + 42, NAN);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, a2 + 2114, NAN);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, a2 + 2134, NAN);
    Set_Mat_Const((const char *)5, 5u, (const char *)0x24, a2 + 2174, NAN);
    Set_Mat_Const((const char *)5, 1u, (const char *)6, a2 + 2248, NAN);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, a2 + 62, NAN);
    unsigned int v29 = 0;
    BOOL v31 = 0;
    int v30 = -1;
  }
  else
  {
    KF_prepOutput(a1 + 117472 * v8[2185] + 24, a2, a3);
    Sum_Mat(32, (_DWORD *)(a1 + 1888048));
    unsigned int v29 = v28;
    int v30 = v8[2185];
    BOOL v31 = v28 < 0xB;
  }
  a2[2262] = v29;
  a2[2263] = v30;
  v6[4] = v31;
  int v32 = *v7;
  v6[5] = v32 ^ 1;
  int v33 = *v6;
  if (*v6) {
    int v35 = v31 && v32 == 0;
  }
  else {
    int v35 = 0;
  }
  *double v6 = v35;
  if (v33 != v35 && (g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v37 = *(double *)(g_TCU + 8);
    }
    else {
      double v37 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Valid Out = %d, [pos,head,extrp,mount,filt,outage] = [%d,%d,%d,%d,%d,%d]", "KFP_createOutputFromKFPool", 1136, v36, v37, *v6, v6[1], v6[2], v6[3], v6[6], v6[4], v6[5]);
  }
}

uint64_t KFP_run(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = a1 + 1898468;
    uint64_t v9 = a1 + 1888056;
    if (a3 != 1)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v11 = *(double *)(g_TCU + 8);
        }
        else {
          double v11 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f numOfMeas is greater than 1 (%d), which is unsupported", "KFP_run", 1166, v10, v11, a3);
      }
      g_FPE_AssertFlag = 1;
    }
    KFP_printMeas((char **)a2);
    int v16 = *(_DWORD *)(a2 + 8);
    if (v16 != 2)
    {
LABEL_28:
      if (v16 != 3)
      {
LABEL_78:
        switch(*(_DWORD *)(v9 + 1936))
        {
          case 0:
            uint64_t v51 = 1;
            if (*(unsigned char *)(a1 + 16))
            {
              *(_DWORD *)(v9 + 1936) = 1;
              KFP_runLeveler(a1, a2, v12, v13, v14, v15);
              *(void *)(v8 + 20) = *(void *)a2;
            }
            return v51;
          case 1:
            KFP_runLeveler(a1, a2, v12, v13, v14, v15);
            return 1;
          case 2:
          case 3:
            return KFP_runMeas(a1, (double *)a2, a4);
          case 4:
            if (*(_DWORD *)(a2 + 8) == 1) {
              return 1;
            }
            uint64_t v51 = KFP_runMeas(a1, (double *)a2, a4);
            if (*(_DWORD *)(a2 + 8) == 4) {
              *(_DWORD *)(v9 + 1936) = 2;
            }
            return v51;
          default:
            if (g_FPE_LogSeverity)
            {
              unint64_t v49 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v50 = *(double *)(g_TCU + 8);
              }
              else {
                double v50 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f KF BANK wrong state", "KFP_run", 1217, v49, v50);
            }
            uint64_t v51 = 1;
            g_FPE_AssertFlag = 1;
            return v51;
        }
      }
      int v29 = *(_DWORD *)(a2 + 16);
      uint64_t v30 = *(unsigned int *)(a1 + 1879576);
      if (v30)
      {
        BOOL v31 = (_DWORD *)(a1 + 40560);
        int v32 = (double *)v9;
        do
        {
          if (*v32 != 0.0) {
            *BOOL v31 = v29;
          }
          v31 += 29368;
          ++v32;
          --v30;
        }
        while (v30);
      }
      int v33 = *(_DWORD *)(v8 + 12);
      if (v29)
      {
        if (v33 && (g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v34 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v35 = *(double *)(g_TCU + 8);
          }
          else {
            double v35 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f SvOutageSM: end of outage after %u sec", "KFP_runSVOSM", 1552, v34, v35, *(_DWORD *)(v8 + 12));
        }
        unsigned int v36 = 0;
      }
      else
      {
        unsigned int v36 = v33 + 1;
      }
      *(_DWORD *)(v8 + 12) = v36;
      int v37 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 != 2)
      {
        if (v37 != 1)
        {
          if (v37)
          {
            if (g_FPE_LogSeverity)
            {
              unint64_t v44 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v45 = *(double *)(g_TCU + 8);
              }
              else {
                double v45 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f SV Outage State %u is not supported!", "KFP_runSVOSM", 1608, v44, v45, *(_DWORD *)v8);
            }
            g_FPE_AssertFlag = 1;
          }
          else if (v36)
          {
            *(_DWORD *)uint64_t v8 = 1;
          }
          goto LABEL_77;
        }
        if (v36)
        {
          if (v36 >= 0x28)
          {
            if ((g_FPE_LogSeverity & 8) != 0)
            {
              unint64_t v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v43 = *(double *)(g_TCU + 8);
              }
              else {
                double v43 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f SvOutageSM: reached maxOutageDR - invalidate output", "KFP_runSVOSM", 1580, v42, v43);
            }
            *(_DWORD *)uint64_t v8 = 2;
            *(_DWORD *)(v8 + 8) = 0;
          }
          goto LABEL_77;
        }
LABEL_76:
        *(_DWORD *)uint64_t v8 = 0;
LABEL_77:
        *(unsigned char *)(v8 + 4) = *(_DWORD *)v8 == 2;
        goto LABEL_78;
      }
      if (!*(unsigned char *)(v8 + 16) || v36)
      {
        *(_DWORD *)(v8 + 8) = 0;
        char v39 = g_FPE_LogSeverity;
      }
      else
      {
        unsigned int v38 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v38;
        char v39 = g_FPE_LogSeverity;
        if (v38 >= 5)
        {
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v41 = *(double *)(g_TCU + 8);
            }
            else {
              double v41 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f SvOutageSM: validCount=%u - all ok now", "KFP_runSVOSM", 1598, v40, v41, *(_DWORD *)(v8 + 8));
          }
          goto LABEL_76;
        }
      }
      if ((v39 & 8) != 0)
      {
        unint64_t v46 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v47 = *(double *)(g_TCU + 8);
        }
        else {
          double v47 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f SvOutageSM: validCount=%u - waiting", "KFP_runSVOSM", 1603, v46, v47, *(_DWORD *)(v8 + 8));
      }
      goto LABEL_77;
    }
    double v17 = *(double *)(v8 + 20);
    double v18 = -1.0;
    double v19 = -1.0;
    if (v17 >= 0.0)
    {
      double v20 = *(double *)a1 - v17;
      if (v20 < 99.0) {
        double v19 = v20;
      }
      else {
        double v19 = 99.0;
      }
    }
    double v21 = *(double *)(v8 + 28);
    if (v21 >= 0.0)
    {
      double v22 = *(double *)a1 - v21;
      if (v22 < 99.0) {
        double v18 = v22;
      }
      else {
        double v18 = 99.0;
      }
    }
    double v23 = *(double *)(v8 + 36);
    if (v23 >= 0.0)
    {
      double v27 = *(double *)a1 - v23;
      if (v27 < 99.0) {
        double v25 = v27;
      }
      else {
        double v25 = 99.0;
      }
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(v9 + 260);
      double v25 = -1.0;
      if ((v24 & 0x80000000) == 0)
      {
        double v26 = *(double *)(a1 + 8 * v24 + 1888592);
LABEL_25:
        if ((g_FPE_LogSeverity & 0x200) != 0)
        {
          Sum_Mat(32, (_DWORD *)(a1 + 1888048));
          LC_LOG_NMEA_GENERIC("%s,KFB,%.3f,%.1f,%.1f,%.1f,%.1f,%d,%d", "$PFPEX", *(double *)a1, v19, v18, v26, v25, *(_DWORD *)(v9 + 260), v28);
        }
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(v8 + 16) = *(unsigned char *)(a2 + 208);
        int v16 = *(_DWORD *)(a2 + 8);
        goto LABEL_28;
      }
    }
    double v26 = -1.0;
    goto LABEL_25;
  }
  return 1;
}

const char *KFP_init(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v17[0] = 0u;
  uint64_t v4 = a1 + 1898464;
  uint64_t v18 = 0;
  unint64_t v5 = (unsigned int *)(a1 + 1879576);
  memset(&v17[2], 0, 176);
  DWORD2(v17[0]) = 12;
  v17[1] = 0x4088480000000000uLL;
  KFP_printMeas((char **)v17);
  if (!*(unsigned char *)v4)
  {
    *(unsigned char *)uint64_t v4 = 1;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)a2;
    Copy_Mat(1024, (int *)(a2 + 8936), (const char *)0x400, (int *)(a1 + 1890000));
    *unint64_t v5 = *(_DWORD *)(a2 + 4);
    Copy_Mat(1024, (int *)(a2 + 8), (const char *)0x400, (int *)(a1 + 1879584));
    Copy_Mat(32, (int *)(a2 + 8208), (const char *)0x20, (int *)(a1 + 1887784));
    Mult_Mat_scalar(0.0174532925, 32, (int *)(a1 + 1887784), (const char *)0x20, (int *)(a1 + 1887784));
  }
  v5[2604] = 0;
  *(int64x2_t *)a1 = vdupq_n_s64(0xC0C3878000000000);
  Set_Mat_Const((const char *)*v5, 1u, (const char *)0x20, (int *)(a1 + 1888048), 1.0);
  Set_Mat_Const((const char *)*v5, 1u, (const char *)0x20, (int *)(a1 + 1888320), 0.0);
  Set_Mat_Const((const char *)*v5, 1u, (const char *)0x20, (int *)(a1 + 1888584), 0.0);
  Set_Mat_Const((const char *)*v5, 1u, (const char *)0x20, (int *)(a1 + 1888848), 0.0);
  Set_Mat_Const((const char *)*v5, 1u, (const char *)0x20, (int *)(a1 + 1889112), 0.037);
  *((void *)v5 + 1092) = 0xFFFFFFFF00000010;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v4 + 24) = _Q0;
  *(void *)(v4 + 40) = 0xBFF0000000000000;
  LVLR_Init(a1 + 1889376);
  if (*v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = a2 + 8480;
    uint64_t v13 = a1 + 24;
    do
    {
      KF_initializeKalmanFilterCarMode(v13, v12, v11++);
      v13 += 117472;
    }
    while (v11 < *v5);
  }
  uint64_t result = Set_Mat_Const((const char *)6, 1u, (const char *)0x20, (int *)(a1 + 1898200), -9999.0);
  *(_DWORD *)(v4 + 4) = 0;
  *(unsigned char *)(v4 + 8) = 0;
  *(void *)(a1 + 1898476) = 0;
  *(unsigned char *)(a1 + 1898484) = 0;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v16 = *(double *)(g_TCU + 8);
    }
    else {
      double v16 = 0.0;
    }
    return LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f init KFB", "KFP_init", 1290, v15, v16);
  }
  return result;
}

void KFP_setDefaultConfig(int *a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1 + 2163;
  bzero(a1, 0x42F0uLL);
  v27[0] = xmmword_22BB45700;
  v27[1] = unk_22BB45710;
  unsigned __int16 v27[2] = xmmword_22BB45720;
  uint64_t v28 = 0x3F50624DD2F1A9FCLL;
  v25[0] = xmmword_22BB45738;
  v25[1] = unk_22BB45748;
  _OWORD v25[2] = xmmword_22BB45758;
  uint64_t v26 = 0x3E45798EE2308C3ALL;
  v23[0] = xmmword_22BB45770;
  v23[1] = unk_22BB45780;
  uint64_t v24 = 0x3F947AE147AE147BLL;
  v23[2] = xmmword_22BB45790;
  Copy_Mat(6, (int *)v27, (const char *)6, a1 + 2120);
  Copy_Mat(6, (int *)v25, (const char *)6, a1 + 2134);
  Copy_Mat(6, (int *)v23, (const char *)6, a1 + 2148);
  Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, a1 + 2168, 0.0);
  *((void *)a1 + 1107) = 0x3FF0000000000000;
  a1[2162] = 32;
  *unint64_t v2 = 0;
  *(_DWORD *)(v2 + 1) = 16843009;
  v2[5] = 0;
  *((void *)a1 + 1083) = 0x4024000000000000;
  *(unsigned char *)a1 = 1;
  a1[1] = 16;
  *((void *)a1 + 1059) = 0x4014000000000000;
  Set_Mat_Size((const char *)0x20, a1 + 2052, 1, 16);
  uint64_t v3 = 0;
  int32x2_t v4 = *(int32x2_t *)"";
  float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x4036800000000000uLL);
  int8x16_t v17 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
  int8x16_t v18 = (int8x16_t)vdupq_n_s64(0x4076800000000000uLL);
  do
  {
    v5.i64[0] = v4.u32[0];
    v5.i64[1] = v4.u32[1];
    float64x2_t __x = vmlaq_f64((float64x2_t)0, v19, vcvtq_f64_u64(v5));
    long double v21 = fmod(__x.f64[1], 360.0);
    v6.f64[0] = fmod(__x.f64[0], 360.0);
    v6.f64[1] = v21;
    *(float64x2_t *)&a1[v3 + 2054] = vaddq_f64(v6, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v6), v18, v17));
    int32x2_t v4 = vadd_s32(v4, (int32x2_t)0x200000002);
    v3 += 4;
  }
  while (v3 != 32);
  Set_Mat_Size((const char *)0x400, a1 + 2, 32, 16);
  for (int i = 0; i != 16; ++i)
    Copy_SubMat_to_Mat(1.0, 32, a1 + 2168, 0, i, 1024, a1 + 2);
  memset(v22, 0, 264);
  double v8 = 0.0;
  Set_Mat_Const((const char *)1, 0x20u, (const char *)0x20, (int *)v22, 0.0);
  __asm { FMOV            V0.2D, #0.25 }
  *(_OWORD *)((char *)v22 + 8) = _Q0;
  *(_OWORD *)((char *)&v22[1] + 8) = xmmword_22BB456B0;
  __asm { FMOV            V1.2D, #2.25 }
  *(_OWORD *)((char *)&v22[2] + 8) = _Q1;
  *(int64x2_t *)((char *)&v22[3] + 8) = vdupq_n_s64(0x4099000000000000uLL);
  *(_OWORD *)((char *)&v22[4] + 8) = xmmword_22BB456C0;
  *(_OWORD *)((char *)&v22[5] + 8) = _Q0;
  *(int64x2_t *)((char *)&v22[6] + 8) = vdupq_n_s64(0x3F7F5C28F5C28F5BuLL);
  *(_OWORD *)((char *)&v22[7] + 8) = xmmword_22BB456D0;
  *(_OWORD *)((char *)&v22[8] + 8) = *(_OWORD *)((char *)&v22[3] + 8);
  *(_OWORD *)((char *)&v22[9] + 8) = _Q0;
  *(_OWORD *)((char *)&v22[10] + 8) = xmmword_22BB456E0;
  __asm { FMOV            V0.2D, #10.0 }
  *(_OWORD *)((char *)&v22[11] + 8) = _Q0;
  *(_OWORD *)((char *)&v22[12] + 8) = _Q1;
  *(_OWORD *)((char *)&v22[13] + 8) = xmmword_22BB456F0;
  *(int64x2_t *)((char *)&v22[14] + 8) = vdupq_n_s64(0x4059000000000000uLL);
  *(_OWORD *)((char *)&v22[15] + 8) = *(_OWORD *)((char *)&v22[14] + 8);
  Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, a1 + 2234, 0.0);
  Copy_Vec_to_Mat_diag(32, (int *)v22, 0, 0, 1, 1, 1024, (unsigned int *)a1 + 2234);
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v8 = *(double *)(g_TCU + 8);
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f KFP_INIT_CFG:  bankSize=%d, firstYaw=%f, deltaAngle=%f, lastYaw=%f", "KFP_setDefaultConfig", 1400, v16, v8, 16, *((double *)a1 + 1027), 22.5, *((double *)a1 + 1042));
  }
}

uint64_t KFP_ResetStatistics(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v68 = *MEMORY[0x263EF8340];
  unint64_t v2 = (unsigned int *)(result + 1879576);
  unsigned int v3 = *(_DWORD *)(result + 1888316);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = result + 24;
    uint64_t v5 = result + 24 + 117472 * v3;
    double v6 = *(double *)(v5 + 17192);
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    InsUtil_mat2quat(v5 + 16832, (uint64_t)&v64);
    uint64_t v63 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    InsUtil_mat2quat(v4 + 117472 * (int)v2[2185] + 16672, (uint64_t)&v60);
    long long v58 = 0u;
    long long v59 = 0u;
    Copy_Mat(3, (int *)(v4 + 117472 * (int)v2[2185] + 16944), (const char *)3, (int *)&v58);
    long long v56 = 0u;
    long long v57 = 0u;
    Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)(v4 + 117472 * (int)v2[2185]), 21, 0, 3, 1u, 3, (int *)&v56);
    double v55 = 0.0;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    Set_Mat_Size((const char *)6, (int *)&v52, 6, 1);
    Copy_SubMat_to_Mat(1.0, 3, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 17080), 0, 0, 6, (int *)&v52);
    Copy_SubMat_to_Mat(1.0, 3, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 17112), 3, 0, 6, (int *)&v52);
    uint64_t v51 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)(v4 + 117472 * (int)v2[2185]), 27, 0, 4, 1u, 6, (int *)&v48);
    if ((g_FPE_LogSeverity & 0x200) != 0) {
      LC_LOG_NMEA_GENERIC("%s,KFX,%.3f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.1f,%.1f,%.1f,%.2f,%.2f,%.2f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.1f,%.1f,%.1f,%.1f", "$PFPEX", v6, *((double *)&v64 + 1), *(double *)&v65, *((double *)&v65 + 1), *(double *)&v66, *((double *)&v60 + 1), *(double *)&v61, *((double *)&v61 + 1), *(double *)&v62, *((double *)&v58 + 1), *(double *)&v59, *((double *)&v59 + 1), *((double *)&v56 + 1), *(double *)&v57, *((double *)&v57 + 1), *((double *)&v52 + 1),
    }
        *(double *)&v53,
        *((double *)&v53 + 1),
        *(double *)&v54,
        *((double *)&v54 + 1),
        v55,
        *((double *)&v48 + 1),
        *(double *)&v49,
        *((double *)&v49 + 1),
        *(double *)&v50);
    memset(v47, 0, sizeof(v47));
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 0, 0, 3, 3u, 9, (int *)v47);
    double v46 = 0.0;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v43, 1.0);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 3, 3, 3, 3u, 9, (int *)v47);
    double v42 = 0.0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v39, 1.0);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 6, 6, 3, 3u, 9, (int *)v47);
    double v38 = 0.0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v35, 1.0);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 9, 9, 3, 3u, 9, (int *)v47);
    double v34 = 0.0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v31, 100.0);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 12, 12, 3, 3u, 9, (int *)v47);
    double v30 = 0.0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v27, 1000.0);
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v4 + 117472 * (int)v2[2185] + 264), 21, 21, 3, 3u, 9, (int *)v47);
    double v26 = 0.0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    CovMatToVec((uint64_t)v47, (uint64_t)&v23, 1.0);
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    Copy_Mat_diag_to_Vec(1024, (unsigned int *)(v4 + 117472 * (int)v2[2185] + 264), 0x1Bu, 4, 6, &v19);
    Sqrt_Mat(6, (int *)&v19, (const char *)6, (int *)&v19);
    if ((g_FPE_LogSeverity & 0x200) != 0)
    {
      uint64_t v7 = v4 + 117472 * v3 + 117328;
      int v8 = *(unsigned __int8 *)(v4 + 117472 * v3 + 117352);
      int v9 = *(unsigned __int8 *)(v4 + 117472 * v3 + 117360);
      unint64_t v10 = (unsigned __int8 *)(v5 + 117328);
      int v11 = *(unsigned __int8 *)(v4 + 117472 * v3 + 117376);
      int v12 = *(unsigned __int8 *)(v7 + 56);
      int v13 = *v10;
      int v14 = v10[8];
      LC_LOG_NMEA_GENERIC("%s,KFP1,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f", "$PFPEX", *((double *)&v35 + 1), *(double *)&v36, *((double *)&v36 + 1), *(double *)&v37, *((double *)&v37 + 1), v38, *((double *)&v39 + 1), *(double *)&v40, *((double *)&v40 + 1), *(double *)&v41, *((double *)&v41 + 1), v42, *((double *)&v43 + 1), *(double *)&v44, *((double *)&v44 + 1), *(double *)&v45, *((double *)&v45 + 1),
        v46,
        *((double *)&v23 + 1),
        *(double *)&v24,
        *((double *)&v24 + 1),
        *(double *)&v25,
        *((double *)&v25 + 1),
        v26);
      if ((g_FPE_LogSeverity & 0x200) != 0) {
        LC_LOG_NMEA_GENERIC("%s,KFP2,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.3f,%.2f,%.2f,%.2f,%d,%d,%d", "$PFPEX", *((double *)&v31 + 1), *(double *)&v32, *((double *)&v32 + 1), *(double *)&v33, *((double *)&v33 + 1), v34, *((double *)&v27 + 1), *(double *)&v28, *((double *)&v28 + 1), *(double *)&v29, *((double *)&v29 + 1), v30, *((double *)&v19 + 1), *(double *)&v20, *((double *)&v20 + 1), *(double *)&v21, v9 + v8,
      }
          v12 + v11,
          v14 + v13);
    }
    uint64_t result = (uint64_t)CCH_logLastFeatures((const char *)(v1 + 117472 * (int)v2[2185] + 48784));
  }
  unint64_t v15 = *v2;
  if (v15)
  {
    unint64_t v16 = 0;
    uint64_t v17 = v1 + 24;
    uint64_t v18 = v1 + 1888056;
    do
    {
      if (*(double *)(v18 + 8 * v16) != 0.0)
      {
        uint64_t result = KF_ResetStatistics(v17);
        unint64_t v15 = *v2;
      }
      ++v16;
      v17 += 117472;
    }
    while (v16 < v15);
  }
  return result;
}

uint64_t Decode_BDS_2nd_Health_SF(uint64_t result, unsigned __int16 *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 4);
  *a2 = ((*(_WORD *)result & 3) << 7) | (v2 >> 15) & 0x7F;
  a2[1] = (v2 >> 6) & 0x1FF;
  __int16 v3 = 8 * (v2 & 0x3F);
  unsigned int v4 = *(_DWORD *)(result + 8);
  unsigned int v5 = *(_DWORD *)(result + 12);
  a2[2] = v3 & 0xFFF8 | (v4 >> 10) & 7;
  a2[3] = (v4 >> 10) & 0x1FF;
  a2[4] = (v4 >> 1) & 0x1FF;
  a2[5] = ((v4 & 1) << 8) | (v5 >> 14);
  a2[6] = (v5 >> 5) & 0x1FF;
  __int16 v6 = 16 * (v5 & 0x1F);
  unsigned int v7 = *(_DWORD *)(result + 16);
  unsigned int v8 = *(_DWORD *)(result + 20);
  a2[7] = v6 & 0xFFF0 | (v7 >> 18) & 0xF;
  a2[8] = (v7 >> 9) & 0x1FF;
  a2[9] = v7 & 0x1FF;
  a2[10] = (v8 >> 13) & 0x1FF;
  return result;
}

uint64_t lsim02_22HandleGpsRefTimeInd(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_22HandleGpsRefTimeInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_REFTIME_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_22HandleGpsRefTimeInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSRFT,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_22HandleGpsRefTimeInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSRFT,Tow,%u,TowUnc,%u,RefDCTime,%d,Wk,%u,RCTUnc,%u,NumTowA,%u,OsTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_22HandleGpsRefTimeInd", *(_DWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 28), *(_DWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 144));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (*(unsigned char *)(a1 + 44))
  {
    unint64_t v10 = 0;
    int v11 = (unsigned __int16 *)(a1 + 50);
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSTOWA,SvId,%u,Spoof,%u,Alert,%u,TlmRes,%u,TlmWord,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim02_22HandleGpsRefTimeInd", *((unsigned __int8 *)v11 - 4), *((unsigned __int8 *)v11 - 3), *((unsigned __int8 *)v11 - 2), *((unsigned __int8 *)v11 - 1), *v11);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      }
      ++v10;
      v11 += 3;
    }
    while (v10 < *(unsigned __int8 *)(a1 + 44));
  }
  if (*(_DWORD *)(a1 + 16) == 7)
  {
    int v14 = *(_DWORD *)(a1 + 24);
    __int16 v15 = *(_WORD *)(a1 + 36);
    __int16 v16 = *(_WORD *)(a1 + 28);
    uint64_t v17 = gnssOsa_Calloc("lsim02_15SendGnmOsRefTime", 266, 1, 0x14uLL);
    if (v17)
    {
      uint64_t v18 = v17;
      *((_DWORD *)v17 + 3) = v14;
      *((_WORD *)v17 + 8) = v15;
      *((_WORD *)v17 + 9) = v16;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_REF_OS_TIME_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim02_15SendGnmOsRefTime");
        LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
      }
      AgpsSendFsmMsg(131, 128, 8604931, v18);
    }
  }
  int v21 = *(_DWORD *)(a1 + 16);
  uint64_t v22 = (char *)gnssOsa_Calloc("lsim02_05RefTimeInd", 301, 1, 0x90uLL);
  if (v22)
  {
    long long v23 = v22;
    long long v24 = *(_OWORD *)(a1 + 24);
    long long v25 = *(_OWORD *)(a1 + 40);
    long long v26 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(v22 + 60) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v22 + 44) = v26;
    *(_OWORD *)(v22 + 28) = v25;
    *(_OWORD *)(v22 + 12) = v24;
    long long v27 = *(_OWORD *)(a1 + 88);
    long long v28 = *(_OWORD *)(a1 + 104);
    long long v29 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + 132);
    *(_OWORD *)(v22 + 108) = v29;
    *(_OWORD *)(v22 + 92) = v28;
    *(_OWORD *)(v22 + 76) = v27;
    *((_DWORD *)v22 + 34) = v21;
    *((_DWORD *)v22 + 35) = -1;
    if ((v21 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(0, 4);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_RTIME_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim02_05RefTimeInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8585987, v23);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "LSM", 73, "lsim02_22HandleGpsRefTimeInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
  }
  return 0;
}

uint64_t lsim02_23HandleGpsNavModelInd(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_23HandleGpsNavModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_NAVMODEL_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_23HandleGpsNavModelInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSEPH,SId,%u,NumSv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_23HandleGpsNavModelInd", *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 20));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  uint64_t v8 = *(const void **)(a1 + 24);
  if (!v8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_22;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:NavModelList\n");
LABEL_20:
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    goto LABEL_22;
  }
  int v9 = *(unsigned __int8 *)(a1 + 20);
  if (!*(unsigned char *)(a1 + 20))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_22;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:NumSvs\n");
    goto LABEL_20;
  }
  int v10 = *(_DWORD *)(a1 + 16);
  int v11 = gnssOsa_Calloc("lsim02_06NavModelElmInd", 344, 1, 0x20uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    v11[3] = v10;
    v11[7] = -1;
    *((unsigned char *)v11 + 24) = v9;
    unsigned __int16 v13 = gnssOsa_Calloc("lsim02_06NavModelElmInd", 355, v9, 0x54uLL);
    *((void *)v12 + 2) = v13;
    if (v13)
    {
      memcpy_s("lsim02_06NavModelElmInd", 366, v13, 84 * v9, v8, (84 * v9));
      if ((v10 - 1) <= 3) {
        lsim02_02UpdateAsstBitmask(1, 32);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_NAVM_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim02_06NavModelElmInd");
        LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8586243, v12);
    }
    else
    {
      free(v12);
    }
  }
LABEL_22:
  uint64_t v17 = *(void **)(a1 + 24);
  if (v17)
  {
    if (!*(unsigned char *)(a1 + 20)) {
      goto LABEL_33;
    }
    unint64_t v18 = 0;
    uint64_t v19 = 80;
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        uint64_t v21 = *(void *)(a1 + 24) + v19;
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSEPH,SvId,%u,CodeL2,%u,URA,%u,SvH,%u,L2PFlag,%u,Iodc,%u,Toc,%u,R1,%u,R2,%u,R3,%u,R4,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "lsim02_23HandleGpsNavModelInd", *(unsigned __int8 *)(v21 - 80), *(unsigned __int8 *)(v21 - 79), *(unsigned __int8 *)(v21 - 78), *(unsigned __int8 *)(v21 - 77), *(unsigned __int8 *)(v21 - 76), *(unsigned __int16 *)(v21 - 74), *(unsigned __int16 *)(v21 - 72), *(_DWORD *)(v21 - 68), *(_DWORD *)(v21 - 64), *(_DWORD *)(v21 - 60), *(_DWORD *)(v21 - 56));
        LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        uint64_t v24 = *(void *)(a1 + 24) + v19;
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSEPH,Tgd,%d,Af2,%d,Af1,%d,Af0,%d,Crs,%d,DN,%d,Mo,%d,Cuc,%d,Cus,%d,e,%u,Powerhalf,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "lsim02_23HandleGpsNavModelInd", *(char *)(v24 - 52), *(char *)(v24 - 51), *(__int16 *)(v24 - 50), *(_DWORD *)(v24 - 48), *(__int16 *)(v24 - 44), *(__int16 *)(v24 - 42), *(_DWORD *)(v24 - 40), *(__int16 *)(v24 - 36), *(__int16 *)(v24 - 34), *(_DWORD *)(v24 - 32), *(_DWORD *)(v24 - 28));
        LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        long long v27 = (_DWORD *)(*(void *)(a1 + 24) + v19);
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSEPH,Toe,%u,FitF,%u,AODO,%u,Cic,%d,Cis,%d,OmegaA0,%d,Io,%d,Idot,%d,Crc,%d,W,%d,OmegaAdot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "lsim02_23HandleGpsNavModelInd", *((unsigned __int16 *)v27 - 12), *((unsigned __int8 *)v27 - 22), *((unsigned __int8 *)v27 - 21), *((__int16 *)v27 - 10), *((__int16 *)v27 - 9), *(v27 - 4), *(v27 - 3), *((__int16 *)v27 - 4), *((__int16 *)v27 - 3), *(v27 - 1), *v27);
        LbsOsaTrace_WriteLog(0xCu, __str, v28, 4, 1);
      }
      ++v18;
      v19 += 84;
    }
    while (v18 < *(unsigned __int8 *)(a1 + 20));
    uint64_t v17 = *(void **)(a1 + 24);
    if (v17) {
LABEL_33:
    }
      free(v17);
    *(void *)(a1 + 24) = 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v29 = mach_continuous_time();
    unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 73, "lsim02_23HandleGpsNavModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
  }
  return 0;
}

uint64_t lsim02_24HandleGpsAcqAsstInd(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_ACQASST_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSACQ,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSACQ GEN,Tow,%u,TowUnc,%u,RefDCTime,%d,TimeUnc,%u,NrOfSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 40));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v10 = 0;
    int v11 = (unsigned __int8 *)(a1 + 53);
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSACQ,SvId,%u,D1,%u,D0,%d,Uncert,%u,Phase,%u,C_Phase,%u,BitNum,%u,Window,%u,Azimuth,%u,Elev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd", *(v11 - 11), *(v11 - 10), *(__int16 *)(v11 - 9), *(v11 - 7), *(v11 - 6), *(unsigned __int16 *)(v11 - 5), *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      }
      ++v10;
      v11 += 12;
    }
    while (v10 < *(unsigned __int8 *)(a1 + 40));
  }
  int v14 = *(_DWORD *)(a1 + 16);
  unsigned __int16 v15 = (char *)gnssOsa_Calloc("lsim02_07AcquisAssistInd", 397, 1, 0xE8uLL);
  if (v15)
  {
    unsigned __int16 v16 = v15;
    long long v17 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v15 + 28) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v15 + 12) = v17;
    long long v18 = *(_OWORD *)(a1 + 56);
    long long v19 = *(_OWORD *)(a1 + 72);
    long long v20 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v15 + 92) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v15 + 76) = v20;
    *(_OWORD *)(v15 + 60) = v19;
    *(_OWORD *)(v15 + 44) = v18;
    long long v21 = *(_OWORD *)(a1 + 120);
    long long v22 = *(_OWORD *)(a1 + 136);
    long long v23 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v15 + 156) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(v15 + 140) = v23;
    *(_OWORD *)(v15 + 124) = v22;
    *(_OWORD *)(v15 + 108) = v21;
    long long v24 = *(_OWORD *)(a1 + 184);
    long long v25 = *(_OWORD *)(a1 + 200);
    long long v26 = *(_OWORD *)(a1 + 216);
    *((_WORD *)v15 + 110) = *(_WORD *)(a1 + 232);
    *(_OWORD *)(v15 + 204) = v26;
    *(_OWORD *)(v15 + 188) = v25;
    *(_OWORD *)(v15 + 172) = v24;
    *((_DWORD *)v15 + 56) = v14;
    *((_DWORD *)v15 + 57) = -1;
    if ((v14 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(1, 64);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_ACQ_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 73, "lsim02_07AcquisAssistInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v28, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8586499, v16);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v29 = mach_continuous_time();
    unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 73, "lsim02_24HandleGpsAcqAsstInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
  }
  return 0;
}

uint64_t lsim02_25HandleGpsAlmInd(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_25HandleGpsAlmInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_ALMANAC_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_25HandleGpsAlmInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSALM,SId,%u,NumSv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_25HandleGpsAlmInd", *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 20));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  uint64_t v8 = *(const void **)(a1 + 24);
  if (!v8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_27;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AlmanacList\n");
LABEL_23:
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 2, 1);
    goto LABEL_27;
  }
  int v9 = *(unsigned __int8 *)(a1 + 20);
  if (!*(unsigned char *)(a1 + 20))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_27;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:NumSvs\n");
    goto LABEL_23;
  }
  unint64_t v10 = *(const void **)(a1 + 32);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = gnssOsa_Calloc("lsim02_08AlmanacElm", 442, 1, 0x30uLL);
  if (!v12) {
    goto LABEL_27;
  }
  unsigned __int16 v13 = v12;
  v12[3] = 0;
  *((_DWORD *)v12 + 9) = v11;
  *((_DWORD *)v12 + 10) = -1;
  *((unsigned char *)v12 + 32) = v9;
  int v14 = gnssOsa_Calloc("lsim02_08AlmanacElm", 454, v9, 0x24uLL);
  __n128 v13[2] = v14;
  if (!v14) {
    goto LABEL_26;
  }
  memcpy_s("lsim02_08AlmanacElm", 465, v14, 36 * v9, v8, (36 * v9));
  if ((v11 - 1) <= 3) {
    lsim02_02UpdateAsstBitmask(1, 8);
  }
  if (!v10) {
    goto LABEL_16;
  }
  unsigned __int16 v15 = gnssOsa_Calloc("lsim02_08AlmanacElm", 477, v9, 0x2EuLL);
  v13[3] = v15;
  if (!v15)
  {
    long long v19 = (void *)v13[2];
    if (v19) {
      free(v19);
    }
LABEL_26:
    free(v13);
    goto LABEL_27;
  }
  memcpy_s("lsim02_08AlmanacElm", 489, v15, 46 * v9, v10, (46 * v9));
LABEL_16:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_ALMANAC_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim02_08AlmanacElm");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  AgpsSendFsmMsg(131, 134, 8586755, v13);
LABEL_27:
  long long v20 = *(void **)(a1 + 24);
  if (v20)
  {
    if (!*(unsigned char *)(a1 + 20)) {
      goto LABEL_34;
    }
    unint64_t v21 = 0;
    uint64_t v22 = 32;
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        long long v24 = (__int16 *)(*(void *)(a1 + 24) + v22);
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSALM,SvId,%u,DId,%u,WNA,%u,E,%u,Toa,%u,SVh,%u,Deltai,%d,Asqrt,%u,Omega0,%d,Omega,%d,M0,%d,OmegaDot,%d,AF0,%d,AF1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "lsim02_25HandleGpsAlmInd", *((unsigned __int8 *)v24 - 32), *((unsigned __int8 *)v24 - 31), *((unsigned __int8 *)v24 - 30), (unsigned __int16)*(v24 - 14), *((unsigned __int8 *)v24 - 26), *((unsigned __int8 *)v24 - 25), *(v24 - 12), *((_DWORD *)v24 - 5), *((_DWORD *)v24 - 4), *((_DWORD *)v24 - 3), *((_DWORD *)v24 - 2),
                *(v24 - 2),
                *(v24 - 1),
                *v24);
        LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
      }
      ++v21;
      v22 += 36;
    }
    while (v21 < *(unsigned __int8 *)(a1 + 20));
    long long v20 = *(void **)(a1 + 24);
    if (v20) {
LABEL_34:
    }
      free(v20);
    *(void *)(a1 + 24) = 0;
  }
  long long v26 = *(void **)(a1 + 32);
  if (v26)
  {
    if (!*(unsigned char *)(a1 + 20)) {
      goto LABEL_43;
    }
    unint64_t v27 = 0;
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v28 = mach_continuous_time();
        unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSALM,SvGHealth,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "LSM", 73, "lsim02_25HandleGpsAlmInd", *(unsigned __int8 *)(*(void *)(a1 + 32) + v27));
        LbsOsaTrace_WriteLog(0xCu, __str, v29, 4, 1);
      }
      ++v27;
    }
    while (v27 < *(unsigned __int8 *)(a1 + 20));
    long long v26 = *(void **)(a1 + 32);
    if (v26) {
LABEL_43:
    }
      free(v26);
    *(void *)(a1 + 32) = 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim02_25HandleGpsAlmInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
  }
  return 0;
}

uint64_t lsim02_27HandleGpsIonoModelInd(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_27HandleGpsIonoModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_IONOMODEL_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_27HandleGpsIonoModelInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSIONO,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_27HandleGpsIonoModelInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSIONO,A0,%d,A1,%d,A2,%d,A3,%d,B0,%d,B1,%d,B2,%d,B3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_27HandleGpsIonoModelInd", *(char *)(a1 + 21), *(char *)(a1 + 22), *(char *)(a1 + 23), *(char *)(a1 + 24), *(char *)(a1 + 25), *(char *)(a1 + 26), *(char *)(a1 + 27), *(char *)(a1 + 28));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  int v10 = *(_DWORD *)(a1 + 16);
  int v11 = gnssOsa_Calloc("lsim02_09IonoModelInd", 512, 1, 0x20uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    *((void *)v11 + 2) = *(void *)(a1 + 21);
    *((_DWORD *)v11 + 6) = v10;
    *((_DWORD *)v11 + 7) = -1;
    *((_DWORD *)v11 + 3) = 1;
    if ((v10 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_IONO_MODEL_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "lsim02_09IonoModelInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8587779, v12);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "lsim02_27HandleGpsIonoModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  return 0;
}

uint64_t lsim02_28HandleGpsUtcModelInd(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_28HandleGpsUtcModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_UTCMODEL_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_28HandleGpsUtcModelInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSUTC,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_28HandleGpsUtcModelInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSUTC, A1,%d,A0,%d,Tot,%u,WnT,%u,TLs,%d,WnLsf,%u,Dn,%d,TLsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_28HandleGpsUtcModelInd", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33), *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), *(char *)(a1 + 36), *(char *)(a1 + 37));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  int v10 = *(_DWORD *)(a1 + 16);
  int v11 = (char *)gnssOsa_Calloc("lsim02_10UtcModelInd", 552, 1, 0x28uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a1 + 24);
    *(void *)(v11 + 22) = *(void *)(a1 + 30);
    *((void *)v11 + 2) = v13;
    *((_DWORD *)v11 + 8) = v10;
    *((_DWORD *)v11 + 9) = -1;
    *((_DWORD *)v11 + 3) = 1;
    if ((v10 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(1, 16);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_UTC_MODEL_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "lsim02_10UtcModelInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8588035, v12);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim02_28HandleGpsUtcModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  return 0;
}

uint64_t lsim02_29HandleGpsRtiInd(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_29HandleGpsRtiInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GPS_BADSVLIST_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_29HandleGpsRtiInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSRTI,SId,%u,NrOfSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_29HandleGpsRtiInd", *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 21));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  uint64_t v8 = (unsigned __int8 *)(a1 + 21);
  if (*(unsigned char *)(a1 + 21))
  {
    unint64_t v9 = 0;
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GPSRTI,BadSatId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim02_29HandleGpsRtiInd", *(unsigned __int8 *)(a1 + 22 + v9));
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
      ++v9;
    }
    while (v9 < *v8);
  }
  int v12 = *(_DWORD *)(a1 + 16);
  uint64_t v13 = (char *)gnssOsa_Calloc("lsim02_11RtIntegrityInd", 591, 1, 0x28uLL);
  if (v13)
  {
    uint64_t v14 = v13;
    long long v15 = *(_OWORD *)v8;
    v13[28] = v8[16];
    *(_OWORD *)(v13 + 12) = v15;
    *((_DWORD *)v13 + 8) = v12;
    *((_DWORD *)v13 + 9) = -1;
    if ((v12 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(1, 128);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_RTI_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim02_11RtIntegrityInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8587011, v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "lsim02_29HandleGpsRtiInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
  }
  return 0;
}

uint64_t lsim02_30HandleGnssRefTimeInd(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_30HandleGnssRefTimeInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GNSS_REFTIME_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_30HandleGnssRefTimeInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRFT,SId,%u,GnssId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_30HandleGnssRefTimeInd", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 20));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRFT,DayNum,%u,ToD,%u,ToDFracMs,%u,NLeapSec,%u,TimeUnc,%u,NumCells,%u,RefDCTime,%d,OsTimeMs,%u,NumTowA,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_30HandleGnssRefTimeInd", *(unsigned __int16 *)(a1 + 24), *(_DWORD *)(a1 + 28), *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34), *(unsigned __int16 *)(a1 + 36), *(unsigned __int8 *)(a1 + 38), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    unint64_t v10 = 0;
    unsigned __int16 v11 = (unsigned __int16 *)(a1 + 54);
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSTOWA,SvId,%u,Spoof,%u,Alert,%u,TlmRes,%u,TlmWord,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim02_30HandleGnssRefTimeInd", *((unsigned __int8 *)v11 - 4), *((unsigned __int8 *)v11 - 3), *((unsigned __int8 *)v11 - 2), *((unsigned __int8 *)v11 - 1), *v11);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      }
      ++v10;
      v11 += 3;
    }
    while (v10 < *(unsigned __int8 *)(a1 + 48));
  }
  int v14 = *(_DWORD *)(a1 + 16);
  int v15 = *(_DWORD *)(a1 + 20);
  uint64_t v16 = gnssOsa_Calloc("lsim02_12GnssRefTimeInd", 630, 1, 0x1B4uLL);
  if (v16)
  {
    unsigned __int16 v17 = v16;
    v16[108] = -1;
    memcpy(v16 + 3, (const void *)(a1 + 24), 0x19AuLL);
    v17[107] = v14;
    v17[106] = v15;
    if ((v14 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(0, 4);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:Tod,%u,DayNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 68, "lsim02_12GnssRefTimeInd", v17[4], *((unsigned __int16 *)v17 + 6));
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RTIME_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "lsim02_12GnssRefTimeInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8588803, v17);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim02_30HandleGnssRefTimeInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
  }
  return 0;
}

uint64_t lsim02_31HandleGnssTimeModelInd(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_31HandleGnssTimeModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GNSS_TIMEMODEL_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_31HandleGnssTimeModelInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSTM,SId,%u,GNSSIDFrom,%u,NumTM,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_31HandleGnssTimeModelInd", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 28));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (*(unsigned char *)(a1 + 28))
  {
    unint64_t v8 = 0;
    unsigned __int16 v9 = (__int16 *)(a1 + 54);
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSTM,RefTime,%u,TA0,%d,TA1,%d,TA2,%d,GNSSIDTo,%u,WeekNum,%u,DeltaT,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim02_31HandleGnssTimeModelInd", (unsigned __int16)*(v9 - 11), *(_DWORD *)(v9 - 9), *(_DWORD *)(v9 - 7), *((char *)v9 - 10), *(_DWORD *)(v9 - 3), (unsigned __int16)*(v9 - 1), *v9);
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
      ++v8;
      v9 += 12;
    }
    while (v8 < *(unsigned __int8 *)(a1 + 28));
  }
  int v12 = *(_DWORD *)(a1 + 16);
  unsigned __int16 v13 = (char *)gnssOsa_Calloc("lsim02_15GnssTimeModelInd", 750, 1, 0xDCuLL);
  if (v13)
  {
    int v14 = v13;
    *(_OWORD *)(v13 + 12) = *(_OWORD *)(a1 + 24);
    long long v15 = *(_OWORD *)(a1 + 40);
    long long v16 = *(_OWORD *)(a1 + 56);
    long long v17 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v13 + 76) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v13 + 60) = v17;
    *(_OWORD *)(v13 + 44) = v16;
    *(_OWORD *)(v13 + 28) = v15;
    long long v18 = *(_OWORD *)(a1 + 104);
    long long v19 = *(_OWORD *)(a1 + 120);
    long long v20 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(v13 + 140) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v13 + 124) = v20;
    *(_OWORD *)(v13 + 108) = v19;
    *(_OWORD *)(v13 + 92) = v18;
    long long v21 = *(_OWORD *)(a1 + 168);
    long long v22 = *(_OWORD *)(a1 + 184);
    long long v23 = *(_OWORD *)(a1 + 200);
    *(void *)(v13 + 204) = *(void *)(a1 + 216);
    *(_OWORD *)(v13 + 188) = v23;
    *(_OWORD *)(v13 + 172) = v22;
    *(_OWORD *)(v13 + 156) = v21;
    *((_DWORD *)v13 + 53) = v12;
    *((_DWORD *)v13 + 54) = -1;
    if ((v12 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(*(_DWORD *)(a1 + 24), 256);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_TIME_MODEL_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 73, "lsim02_15GnssTimeModelInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8589571, v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "lsim02_31HandleGnssTimeModelInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
  }
  return 0;
}

uint64_t lsim02_32HandleGnssRtiInd(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_32HandleGnssRtiInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GNSS_BADSVLIST_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_32HandleGnssRtiInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRTI,SId,%u,NumBadSv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_32HandleGnssRtiInd", *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 24));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  unint64_t v8 = (unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v9 = 0;
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRTI,GnssId,%u,BadSv,%u,SigId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim02_32HandleGnssRtiInd", *(_DWORD *)(a1 + 4 * v9 + 28), *(unsigned __int8 *)(a1 + v9 + 284), *(unsigned __int8 *)(a1 + v9 + 348));
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
      ++v9;
    }
    while (v9 < *v8);
  }
  int v12 = *(_DWORD *)(a1 + 16);
  unsigned __int16 v13 = (char *)gnssOsa_Calloc("lsim02_13GnssRtIntegrityInd", 671, 1, 0x198uLL);
  if (v13)
  {
    int v14 = v13;
    memcpy(v13 + 12, v8, 0x184uLL);
    *((_DWORD *)v14 + 100) = v12;
    *((_DWORD *)v14 + 101) = -1;
    if ((v12 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(32, 128);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RTI_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "lsim02_13GnssRtIntegrityInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8589059, v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim02_32HandleGnssRtiInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  return 0;
}

uint64_t lsim02_33HandleGnssAcqAsstInd(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GNSS_ACQASST_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSACQ,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSACQ GEN,Tod,%u,Tow,%u,TimeId,%u,Conf,%u,NumAA,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 36), *(unsigned __int8 *)(a1 + 37));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (*(unsigned char *)(a1 + 37))
  {
    unint64_t v10 = 0;
    unsigned __int16 v11 = (unsigned __int8 *)(a1 + 60);
    do
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSACQ,SvId,%d,GnssId,%u,SigID,%u,D0,%d,D1,%u,DUnc,%u,CPhase,%d,Int_Phase,%u,Window,%u,Azimuth,%d,Elev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd", *(v11 - 20), *((_DWORD *)v11 - 4), *(v11 - 12), *((__int16 *)v11 - 5), *(v11 - 8), *(v11 - 7), *((__int16 *)v11 - 3), *(v11 - 4), *(v11 - 3), *((unsigned __int16 *)v11 - 1), *v11);
        LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
      }
      ++v10;
      v11 += 24;
    }
    while (v10 < *(unsigned __int8 *)(a1 + 37));
  }
  int v14 = *(_DWORD *)(a1 + 16);
  uint64_t v15 = (char *)gnssOsa_Calloc("lsim02_14GnssAcquisAssistInd", 712, 1, 0x624uLL);
  if (v15)
  {
    unsigned __int16 v16 = v15;
    memcpy(v15 + 12, (const void *)(a1 + 24), 0x610uLL);
    *((_DWORD *)v16 + 391) = v14;
    *((_DWORD *)v16 + 392) = -1;
    if ((v14 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(32, 64);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_ACQ_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim02_14GnssAcquisAssistInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8589315, v16);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim02_33HandleGnssAcqAsstInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
  }
  return 0;
}

uint64_t lsim02_34HandleGnssRefPosInd(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_34HandleGnssRefPosInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_GNSS_REFPOS_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_34HandleGnssRefPosInd", *(_DWORD *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRFP,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_34HandleGnssRefPosInd", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRFP,OsTimeMs,%u,Stat,%u,FType,%u,SType,%u,LatSign,%u,Lat,%u,Long,%d,AltDir,%u,Alt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_34HandleGnssRefPosInd", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 60), *(unsigned __int16 *)(a1 + 52));
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:GNSSRFP,UncSemiMaj,%u,UncSMin,%u,AxisBrng,%u,AltUnc,%u,Conf,%u,IncAngle,%u,OffAngle,%u,Radius,%u,Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim02_34HandleGnssRefPosInd", *(unsigned __int8 *)(a1 + 54), *(unsigned __int8 *)(a1 + 55), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(unsigned __int8 *)(a1 + 67), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72));
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  int v12 = *(_DWORD *)(a1 + 16);
  unsigned __int16 v13 = (char *)gnssOsa_Calloc("lsim02_03GnssRefPositionInd", 217, 1, 0x48uLL);
  if (v13)
  {
    int v14 = v13;
    long long v15 = *(_OWORD *)(a1 + 24);
    long long v16 = *(_OWORD *)(a1 + 56);
    int v17 = *(_DWORD *)(a1 + 72);
    *(_OWORD *)(v13 + 28) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v13 + 44) = v16;
    *(_OWORD *)(v13 + 12) = v15;
    *((_DWORD *)v13 + 15) = v17;
    *((_DWORD *)v13 + 16) = v12;
    *((_DWORD *)v13 + 17) = -1;
    int v18 = *((_DWORD *)v13 + 9);
    *((_DWORD *)v13 + 8) &= 0x7FFFFFu;
    v13[39] = v18 << 8 >> 31;
    if ((v12 - 1) <= 3) {
      lsim02_02UpdateAsstBitmask(0, 2);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ASST_GNSS_RPOS_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim02_03GnssRefPositionInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8585475, v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "lsim02_34HandleGnssRefPosInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
  }
  return 0;
}

size_t GNS_AsstGpsRefTime(int a1, unsigned int a2, long long *a3, char a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstGpsRefTime");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (!a3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:RefTime\n");
    goto LABEL_18;
  }
  if (a2 > 7 || ((1 << a2) & 0xDE) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", v24);
LABEL_18:
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
LABEL_19:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)a3 >= 0x240C8400u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsTow,%u\n", v22);
    goto LABEL_18;
  }
  if (*((unsigned __int16 *)a3 + 6) >= 0x2000u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsWkNum,%u\n", v23);
    goto LABEL_18;
  }
  unsigned __int16 v11 = (char *)gnssOsa_Calloc("GNS_AsstGpsRefTime", 1190, 1, 0x94uLL);
  int v12 = (int)v11;
  if (v11)
  {
    *((_DWORD *)v11 + 3) = a1;
    *((_DWORD *)v11 + 4) = a2;
    v11[20] = a4;
    long long v13 = *a3;
    long long v14 = a3[1];
    long long v15 = a3[2];
    *(_OWORD *)(v11 + 72) = a3[3];
    *(_OWORD *)(v11 + 56) = v15;
    *(_OWORD *)(v11 + 40) = v14;
    *(_OWORD *)(v11 + 24) = v13;
    long long v16 = a3[4];
    long long v17 = a3[5];
    long long v18 = a3[6];
    *(_OWORD *)(v11 + 132) = *(long long *)((char *)a3 + 108);
    *(_OWORD *)(v11 + 120) = v18;
    *(_OWORD *)(v11 + 104) = v17;
    *(_OWORD *)(v11 + 88) = v16;
    AgpsSendFsmMsg(131, 131, 8629763, v11);
    int v12 = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v12);
  if (result)
  {
LABEL_20:
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v20, "LSM", 73, "GNS_AsstGpsRefTime");
    return LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
  }
  return result;
}

size_t GNS_AsstGpsNavModel(int a1, int a2, int a3, const void *a4, char a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_AsstGpsNavModel");
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  if (!a3 || !a4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:NavModelElm NumSv,%d\n", v19);
    goto LABEL_14;
  }
  if ((a2 - 1) >= 4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_15;
    }
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", v20);
LABEL_14:
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
LABEL_15:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  int v12 = gnssOsa_Calloc("GNS_AsstGpsNavModel", 1271, 1, 0x20uLL);
  if (v12)
  {
    long long v13 = v12;
    v12[3] = a1;
    void v12[4] = a2;
    *((unsigned char *)v12 + 21) = a5;
    *((unsigned char *)v12 + 20) = a3;
    long long v14 = gnssOsa_Calloc("GNS_AsstGpsNavModel", 1285, a3, 0x54uLL);
    *((void *)v13 + 3) = v14;
    if (v14)
    {
      memcpy_s("GNS_AsstGpsNavModel", 1296, v14, 84 * a3, a4, (84 * a3));
      AgpsSendFsmMsg(131, 131, 8624643, v13);
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (!result) {
        return result;
      }
    }
    else
    {
      free(v13);
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
  }
LABEL_20:
  bzero(__str, 0x410uLL);
  unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_AsstGpsNavModel");
  return LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
}

size_t GNS_AsstGpsAcqAsst(int a1, int a2, long long *a3, char a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstGpsAcqAsst");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a3 && *((unsigned char *)a3 + 16))
  {
    if ((a2 - 1) >= 4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 87, "GNS_AsstGpsAcqAsst", 515, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v26, 2, 1);
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (result) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = (char *)gnssOsa_Calloc("GNS_AsstGpsAcqAsst", 1362, 1, 0xECuLL);
      int v11 = (int)v10;
      if (v10)
      {
        *((_DWORD *)v10 + 3) = a1;
        *((_DWORD *)v10 + 4) = a2;
        v10[20] = a4;
        long long v12 = *a3;
        *(_OWORD *)(v10 + 40) = a3[1];
        *(_OWORD *)(v10 + 24) = v12;
        long long v13 = a3[2];
        long long v14 = a3[3];
        long long v15 = a3[4];
        *(_OWORD *)(v10 + 104) = a3[5];
        *(_OWORD *)(v10 + 88) = v15;
        *(_OWORD *)(v10 + 72) = v14;
        *(_OWORD *)(v10 + 56) = v13;
        long long v16 = a3[6];
        long long v17 = a3[7];
        long long v18 = a3[8];
        *(_OWORD *)(v10 + 168) = a3[9];
        *(_OWORD *)(v10 + 152) = v18;
        *(_OWORD *)(v10 + 136) = v17;
        *(_OWORD *)(v10 + 120) = v16;
        long long v19 = a3[10];
        long long v20 = a3[11];
        long long v21 = a3[12];
        *((_WORD *)v10 + 116) = *((_WORD *)a3 + 104);
        *(_OWORD *)(v10 + 216) = v21;
        *(_OWORD *)(v10 + 200) = v20;
        *(_OWORD *)(v10 + 184) = v19;
        AgpsSendFsmMsg(131, 131, 8624899, v10);
        int v11 = 0;
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v11);
      if (result)
      {
LABEL_17:
        bzero(__str, 0x410uLL);
        unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v27, "LSM", 73, "GNS_AsstGpsAcqAsst");
        return LbsOsaTrace_WriteLog(0xCu, __str, v28, 4, 1);
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsAcqAsst\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 87, "GNS_AsstGpsAcqAsst", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v23, 2, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_17;
    }
  }
  return result;
}

size_t GNS_AsstGpsIonoModel(int a1, int a2, void *a3, char a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstGpsIonoModel");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a3)
  {
    if ((a2 - 1) >= 4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_AsstGpsIonoModel", 515, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (result) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v10 = (char *)gnssOsa_Calloc("GNS_AsstGpsIonoModel", 1557, 1, 0x20uLL);
      int v11 = (int)v10;
      if (v10)
      {
        *((_DWORD *)v10 + 3) = a1;
        *((_DWORD *)v10 + 4) = a2;
        v10[20] = a4;
        *(void *)(v10 + 21) = *a3;
        AgpsSendFsmMsg(131, 131, 8625667, v10);
        int v11 = 0;
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v11);
      if (result)
      {
LABEL_16:
        bzero(__str, 0x410uLL);
        unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_AsstGpsIonoModel");
        return LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsIonoModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "GNS_AsstGpsIonoModel", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_16;
    }
  }
  return result;
}

size_t GNS_AsstGpsUtcModel(int a1, int a2, uint64_t *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstGpsUtcModel");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a3)
  {
    if ((a2 - 1) >= 4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 87, "GNS_AsstGpsUtcModel", 515, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 2, 1);
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (result) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v10 = (char *)gnssOsa_Calloc("GNS_AsstGpsUtcModel", 1632, 1, 0x28uLL);
      int v11 = (int)v10;
      if (v10)
      {
        *((_DWORD *)v10 + 3) = a1;
        *((_DWORD *)v10 + 4) = a2;
        v10[20] = a4;
        uint64_t v12 = *a3;
        *(void *)(v10 + 30) = *(uint64_t *)((char *)a3 + 6);
        *((void *)v10 + 3) = v12;
        AgpsSendFsmMsg(131, 131, 8625923, v10);
        int v11 = 0;
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v11);
      if (result)
      {
LABEL_16:
        bzero(__str, 0x410uLL);
        unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v18, "LSM", 73, "GNS_AsstGpsUtcModel");
        return LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsUtcModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "GNS_AsstGpsUtcModel", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_16;
    }
  }
  return result;
}

size_t GNS_AsstGpsRti(int a1, int a2, long long *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstGpsRti");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (a3 && *(unsigned char *)a3)
  {
    if ((a2 - 1) >= 4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 87, "GNS_AsstGpsRti", 515, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 2, 1);
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (result) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = (char *)gnssOsa_Calloc("GNS_AsstGpsRti", 1707, 1, 0x28uLL);
      int v11 = (int)v10;
      if (v10)
      {
        *((_DWORD *)v10 + 3) = a1;
        *((_DWORD *)v10 + 4) = a2;
        v10[20] = a4;
        long long v12 = *a3;
        v10[37] = *((unsigned char *)a3 + 16);
        *(_OWORD *)(v10 + 21) = v12;
        AgpsSendFsmMsg(131, 131, 8626179, v10);
        int v11 = 0;
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v11);
      if (result)
      {
LABEL_17:
        bzero(__str, 0x410uLL);
        unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v18, "LSM", 73, "GNS_AsstGpsRti");
        return LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GpsRti\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "GNS_AsstGpsRti", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_17;
    }
  }
  return result;
}

size_t GNS_AsstRefPos(int a1, unsigned int a2, long long *a3, char a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstRefPos");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if (!a3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:RefPos\n");
    goto LABEL_38;
  }
  if (a2 > 7) {
    goto LABEL_28;
  }
  if (((1 << a2) & 0xD4) != 0) {
    goto LABEL_6;
  }
  if (a2 != 1)
  {
    if (a2 == 3)
    {
      if (g_LsimEcallOngoing)
      {
        a2 = 4;
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:Updating SUPL to SUPL_ECALL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "GNS_AsstRefPos");
          a2 = 4;
          LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
        }
      }
      else
      {
        a2 = 3;
      }
      goto LABEL_6;
    }
LABEL_28:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", v27);
    goto LABEL_38;
  }
  if (g_LsimEcallOngoing)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:Updating CP to CP_ECALL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GNS_AsstRefPos");
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    a2 = 2;
  }
  else
  {
    a2 = 1;
  }
LABEL_6:
  if (*((_DWORD *)a3 + 12) >= 5u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:Trust,%u\n", v25);
    goto LABEL_38;
  }
  unsigned int v10 = *((unsigned __int8 *)a3 + 41);
  if (!*((unsigned char *)a3 + 41) || v10 != 255 && v10 >= 0x65)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:Confidence,%u\n", v24);
    goto LABEL_38;
  }
  if (*((char *)a3 + 30) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:UncSemiMajor,%u\n", v26);
    goto LABEL_38;
  }
  if (*((char *)a3 + 31) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:UncSemiMinor,%d\n", v28);
    goto LABEL_38;
  }
  if (*((char *)a3 + 40) <= -2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_39;
    }
    bzero(__str, 0x410uLL);
    unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:UncAlt,%d\n", v29);
LABEL_38:
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
LABEL_39:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_40;
  }
  unsigned __int16 v19 = (char *)gnssOsa_Calloc("GNS_AsstRefPos", 2276, 1, 0x4CuLL);
  int v20 = (int)v19;
  if (v19)
  {
    long long v21 = *a3;
    long long v22 = a3[1];
    long long v23 = a3[2];
    *((_DWORD *)v19 + 18) = *((_DWORD *)a3 + 12);
    *(_OWORD *)(v19 + 56) = v23;
    *(_OWORD *)(v19 + 40) = v22;
    *(_OWORD *)(v19 + 24) = v21;
    *((_DWORD *)v19 + 3) = a1;
    *((_DWORD *)v19 + 4) = a2;
    v19[20] = a4;
    AgpsSendFsmMsg(131, 131, 8629251, v19);
    int v20 = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v20);
  if (result)
  {
LABEL_40:
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_AsstRefPos");
    return LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  return result;
}

uint64_t lsim02_61HandleServerErrInd(_DWORD *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_61HandleServerErrInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SVR_ERR_IND,Src,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim02_61HandleServerErrInd", a1[4]);
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:SId,%d,Cause,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_61HandleServerErrInd", a1[3], a1[6]);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a1[6] > 4u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:SvrErrCause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "lsim02_61HandleServerErrInd", 515, a1[6]);
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_9;
    }
  }
  else
  {
    qword_268466F68 = -1;
    *(void *)&dword_268466F70 = -1;
    g_lsimAsstDelivered = -1;
    dword_268466F78 = -1;
    dword_268466F7C = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_9:
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim02_61HandleServerErrInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
  }
  return 0;
}

uint64_t lsim02_45CheckWithDeliveredAssistance(void *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim02_45CheckWithDeliveredAssistance");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (g_lsimAsstDelivered) {
      uint64_t v5 = 89;
    }
    else {
      uint64_t v5 = 78;
    }
    if ((g_lsimAsstDelivered & 2) != 0) {
      uint64_t v6 = 89;
    }
    else {
      uint64_t v6 = 78;
    }
    if ((g_lsimAsstDelivered & 4) != 0) {
      uint64_t v7 = 89;
    }
    else {
      uint64_t v7 = 78;
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:LSIMDA,LastUpdateOsTimeMs,%u,RefTime,%c,RefPos,%c,Iono,%c\n", (unint64_t)v4, "LSM", 73, "lsim02_44TraceDeliveredAssistance", dword_268466F7C, v7, v6, v5);
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  lsim02_47TraceDelvAsstForConstel(SWORD2(g_lsimAsstDelivered), "GPS ");
  lsim02_47TraceDelvAsstForConstel(qword_268466F68, "GLON");
  lsim02_47TraceDelvAsstForConstel(dword_268466F70, "BDS ");
  lsim02_47TraceDelvAsstForConstel(SWORD2(qword_268466F68), "GAL ");
  lsim02_47TraceDelvAsstForConstel(dword_268466F78, "QZSS");
  lsim02_47TraceDelvAsstForConstel(dword_268466F74, "SBAS");
  if (!a1 || !a1[1])
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AidReqParam\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 87, "lsim02_45CheckWithDeliveredAssistance", 513);
    int v21 = 2;
    return LbsOsaTrace_WriteLog(0xCu, __str, v20, v21, 1);
  }
  uint64_t result = lsim02_01DeliveredAsstCheckNeeded();
  if (!result) {
    return result;
  }
  char v10 = g_lsimAsstDelivered;
  uint64_t v11 = (unsigned char *)a1[1];
  if ((g_lsimAsstDelivered & 1) == 0)
  {
    if ((g_lsimAsstDelivered & 2) == 0) {
      goto LABEL_19;
    }
LABEL_43:
    v11[1] = 0;
    if ((v10 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  _DWORD v11[2] = 0;
  if ((v10 & 2) != 0) {
    goto LABEL_43;
  }
LABEL_19:
  if ((v10 & 4) != 0) {
LABEL_20:
  }
    *uint64_t v11 = 0;
LABEL_21:
  if (v11[3])
  {
    unsigned __int16 v12 = (unsigned char *)a1[2];
    if (v12)
    {
      lsim02_46UpdateAidReqMask(SWORD2(g_lsimAsstDelivered), v12, v11 + 3);
      *(unsigned char *)(a1[2] + 11) = 0;
      uint64_t v11 = (unsigned char *)a1[1];
    }
  }
  if (v11[4])
  {
    unsigned __int16 v13 = (unsigned char *)a1[3];
    if (v13)
    {
      lsim02_46UpdateAidReqMask(qword_268466F68, v13, v11 + 4);
      *(unsigned char *)(a1[3] + 11) = 0;
      uint64_t v11 = (unsigned char *)a1[1];
    }
  }
  if (v11[5])
  {
    uint64_t v14 = (unsigned char *)a1[4];
    if (v14)
    {
      lsim02_46UpdateAidReqMask(dword_268466F78, v14, v11 + 5);
      *(unsigned char *)(a1[4] + 11) = 0;
      uint64_t v11 = (unsigned char *)a1[1];
    }
  }
  if (v11[6])
  {
    unsigned __int16 v15 = (unsigned char *)a1[5];
    if (v15)
    {
      lsim02_46UpdateAidReqMask(dword_268466F74, v15, v11 + 6);
      *(unsigned char *)(a1[5] + 11) = 0;
      uint64_t v11 = (unsigned char *)a1[1];
    }
  }
  int v17 = v11[7];
  uint64_t v16 = v11 + 7;
  if (v17)
  {
    unsigned __int16 v18 = (unsigned char *)a1[6];
    if (v18) {
      lsim02_46UpdateAidReqMask(dword_268466F70, v18, v16);
    }
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "lsim02_45CheckWithDeliveredAssistance");
    int v21 = 4;
    return LbsOsaTrace_WriteLog(0xCu, __str, v20, v21, 1);
  }
  return result;
}

uint64_t lsim02_01DeliveredAsstCheckNeeded(void)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:LastDelAsstTime,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 68, "lsim02_01DeliveredAsstCheckNeeded", dword_268466F7C);
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 5, 1);
  }
  int v2 = dword_268466F7C;
  if (!dword_268466F7C) {
    return 1;
  }
  unsigned int v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v2;
  if (v3 >> 4 < 0x271) {
    return 1;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:LastUpdate,%ums,Threshold,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_01DeliveredAsstCheckNeeded", v3, 10000);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    return 0;
  }
  return result;
}

uint64_t lsim02_46UpdateAidReqMask(__int16 a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim02_46UpdateAidReqMask");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a3)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:ReqFlag\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "lsim02_46UpdateAidReqMask", 513);
    int v11 = 2;
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
  }
  if ((a1 & 8) != 0)
  {
    a2[6] = 0;
    if ((a1 & 0x20) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_32;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_6;
  }
  a2[7] = 0;
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  a2[4] = 0;
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  a2[8] = 0;
  if ((a1 & 0x200) == 0)
  {
LABEL_9:
    if ((a1 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  a2[10] = 0;
  if ((a1 & 0x400) == 0)
  {
LABEL_10:
    if ((a1 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  a2[9] = 0;
  if ((a1 & 0x80) == 0)
  {
LABEL_11:
    if ((a1 & 0x100) == 0) {
      goto LABEL_12;
    }
LABEL_37:
    a2[12] = 0;
    if ((a1 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_36:
  a2[5] = 0;
  if ((a1 & 0x100) != 0) {
    goto LABEL_37;
  }
LABEL_12:
  if ((a1 & 0x800) != 0) {
LABEL_13:
  }
    a2[11] = 0;
LABEL_14:
  if (!a2[5] && !a2[6] && !a2[10] && !a2[9] && !a2[7] && !a2[8] && !a2[4] && !a2[11] && !a2[12]) {
    *a3 = 0;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim02_46UpdateAidReqMask");
    int v11 = 4;
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
  }
  return result;
}

size_t GNS_AsstServerError(int a1, int a2, unsigned int a3, char a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_AsstServerError");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if ((a2 - 1) >= 4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_12;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstSrc,%u\n", v16);
LABEL_11:
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
    goto LABEL_12;
  }
  if (a3 >= 5)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_12;
    }
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:Cause,%u\n", v17);
    goto LABEL_11;
  }
  size_t v10 = gnssOsa_Calloc("GNS_AsstServerError", 2607, 1, 0x1CuLL);
  int v11 = (int)v10;
  if (v10)
  {
    v10[3] = a1;
    void v10[4] = a2;
    *((unsigned char *)v10 + 20) = a4;
    v10[6] = a3;
    AgpsSendFsmMsg(131, 131, 8633347, v10);
LABEL_12:
    int v11 = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v11);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GNS_AsstServerError");
    return LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return result;
}

unint64_t lsim02_02UpdateAsstBitmask(int a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = a2 & 7;
  if ((a2 & 7) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_8;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:Common AsstBitmask,%u\n");
    goto LABEL_7;
  }
  if ((a2 & 0x1F8) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_8;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:Constel,%u,AsstBitmask,%u\n", v9);
LABEL_7:
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
LABEL_8:
    if ((lsim02_01DeliveredAsstCheckNeeded() & 1) == 0) {
      memset_s(&g_lsimAsstDelivered, 0x20uLL, 0, 0x20uLL);
    }
    if (v4)
    {
      uint64_t v6 = (int *)&g_lsimAsstDelivered;
LABEL_12:
      *v6 |= a2;
      unint64_t result = mach_continuous_time();
      dword_268466F7C = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
      return result;
    }
    if (a1 > 15)
    {
      switch(a1)
      {
        case 16:
          uint64_t v6 = &dword_268466F78;
          goto LABEL_12;
        case 32:
          uint64_t v6 = (int *)&qword_268466F68;
          goto LABEL_12;
        case 64:
          uint64_t v6 = &dword_268466F70;
          goto LABEL_12;
      }
    }
    else
    {
      switch(a1)
      {
        case 1:
          uint64_t v6 = (int *)&g_lsimAsstDelivered + 1;
          goto LABEL_12;
        case 2:
          uint64_t v6 = (int *)&qword_268466F68 + 1;
          goto LABEL_12;
        case 4:
          uint64_t v6 = &dword_268466F74;
          goto LABEL_12;
      }
    }
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:GnssID,%u\n", v11);
      return LbsOsaTrace_WriteLog(0xCu, __str, v8, 2, 1);
    }
    return result;
  }
  unint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:AsstBitmask,%u\n", v10);
    return LbsOsaTrace_WriteLog(0xCu, __str, v8, 2, 1);
  }
  return result;
}

size_t lsim02_47TraceDelvAsstForConstel(__int16 a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v6 = 89;
    if ((a1 & 0x800) != 0) {
      uint64_t v7 = 89;
    }
    else {
      uint64_t v7 = 78;
    }
    if ((a1 & 0x400) != 0) {
      uint64_t v8 = 89;
    }
    else {
      uint64_t v8 = 78;
    }
    uint64_t v20 = v8;
    uint64_t v21 = v7;
    if ((a1 & 0x200) != 0) {
      uint64_t v9 = 89;
    }
    else {
      uint64_t v9 = 78;
    }
    if ((a1 & 0x80) != 0) {
      uint64_t v10 = 89;
    }
    else {
      uint64_t v10 = 78;
    }
    uint64_t v18 = v10;
    uint64_t v19 = v9;
    if ((a1 & 0x100) != 0) {
      uint64_t v11 = 89;
    }
    else {
      uint64_t v11 = 78;
    }
    if ((a1 & 0x10) != 0) {
      uint64_t v12 = 89;
    }
    else {
      uint64_t v12 = 78;
    }
    uint64_t v16 = v12;
    uint64_t v17 = v11;
    if ((a1 & 0x40) != 0) {
      uint64_t v13 = 89;
    }
    else {
      uint64_t v13 = 78;
    }
    if ((a1 & 0x20) != 0) {
      uint64_t v14 = 89;
    }
    else {
      uint64_t v14 = 78;
    }
    if ((a1 & 8) == 0) {
      uint64_t v6 = 78;
    }
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ASST:LSIMDA,%s,Alm,%c,Eph,%c,AcqA,%c,UtcM,%c,TimeM,%c,Rti,%c,Aux,%c,DBit,%c,GrIono,%c\n", (unint64_t)v5, "LSM", 73, "lsim02_47TraceDelvAsstForConstel", a2, v6, v14, v13, v16, v17, v18, v19, v20, v21);
    return LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
  }
  return result;
}

uint64_t EE_Get_GPS_BinEph(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  strcpy(v27, "GN_EE_Get_GPS_Eph_El: ");
  if ((a1 + 53) > 0xF5u || (a1 - 33) > 0xDFu)
  {
    uint64_t result = GN_EE_Get_GPS_Eph_El(a1, (unsigned __int16)(((1861606989 * a2) >> 50) + ((unint64_t)(1861606989 * a2) >> 63)), a2- 604800* (unsigned __int16)(((1861606989 * a2) >> 50)+ ((unint64_t)(1861606989 * a2) >> 63)), &v17);
    if (result)
    {
      v8[2] = v18;
      char v9 = v19;
      __int16 v10 = v20;
      char v11 = v21;
      long long v12 = v22;
      uint64_t v13 = v23;
      __int16 v14 = v24;
      long long v15 = v25;
      long long v16 = v26;
      uint64_t v6 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v6 + 5) && *(int *)v6 >= 3) {
        int v7 = (int)*(double *)(v6 + 24) + 604800 * *(__int16 *)(v6 + 16);
      }
      else {
        int v7 = 0;
      }
      v8[0] = v7;
      v8[1] = 6;
      if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
        EvLog_GPS_IntEph(v27, a1, (uint64_t)v8);
      }
      uint64_t result = Is_GPS_IntEph_Valid((uint64_t)v27, a1, (uint64_t)v8);
      if (result)
      {
        GPS_EphInt2Bin((uint64_t)v8, a3);
        return 1;
      }
    }
  }
  else
  {
    EvCrt_v("EE_Get_GLON_GPS_BinEph:  FAILED:  SV = %d, Out of range !", a1);
    return 0;
  }
  return result;
}

uint64_t EE_Set_GPS_BinEph(int a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, 42);
  *(_OWORD *)((char *)&v7[2] + 12) = 0u;
  *(_OWORD *)((char *)&v7[3] + 12) = 0u;
  if ((a1 + 53) > 0xF5u || (a1 - 33) > 0xDFu)
  {
    GPS_EphBin2Int(a2, (uint64_t)v7);
    int v3 = LODWORD(v7[0]) - 16 * WORD1(v7[1]);
    LOWORD(v4) = v7[1];
    if (!LOWORD(v7[1]))
    {
      if (v3 < 619012800) {
        return 0;
      }
      LOWORD(v7[1]) = (v3 + 302400) / 604800;
      int v4 = (v3 + 302400) / 604800;
    }
    int v5 = (v3 + 302400) / 604800 - 512;
    if (v5 > (unsigned __int16)v4)
    {
      do
        LOWORD(v4) = v4 + 1024;
      while (v5 > (unsigned __int16)v4);
      LOWORD(v7[1]) = v4;
    }
    if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
      EvLog_GPS_IntEph("GN_EE_Set_GPS_Eph_El: ", a1, (uint64_t)v7);
    }
  }
  else
  {
    EvCrt_v("EE_Set_GPS_Eph_El:  FAILED  SV = %d, Out of range !", a1);
  }
  return 0;
}

uint64_t EE_Get_GLON_GPS_BinEph(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v28 = *MEMORY[0x263EF8340];
  strcpy(v27, "GN_EE_Get_GLON_GPS_Eph_El: ");
  if ((a1 - 25) > 0xE7u)
  {
    uint64_t result = GN_EE_Get_GLON_GPS_Eph_El(a1, (unsigned __int16)(((1861606989 * a2) >> 50) + ((unint64_t)(1861606989 * a2) >> 63)), a2- 604800* (unsigned __int16)(((1861606989 * a2) >> 50)+ ((unint64_t)(1861606989 * a2) >> 63)), &v17);
    if (result)
    {
      v8[2] = v18;
      char v9 = v19;
      __int16 v10 = v20;
      char v11 = v21;
      long long v12 = v22;
      uint64_t v13 = v23;
      __int16 v14 = v24;
      long long v15 = v25;
      long long v16 = v26;
      uint64_t v6 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v6 + 5) && *(int *)v6 >= 3) {
        int v7 = (int)*(double *)(v6 + 24) + 604800 * *(__int16 *)(v6 + 16);
      }
      else {
        int v7 = 0;
      }
      v8[0] = v7;
      v8[1] = 6;
      if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
        EvLog_GPS_IntEph(v27, v3, (uint64_t)v8);
      }
      uint64_t result = Is_GPS_IntEph_Valid((uint64_t)v27, v3, (uint64_t)v8);
      if (result)
      {
        GPS_EphInt2Bin((uint64_t)v8, a3);
        return 1;
      }
    }
  }
  else
  {
    EvCrt_v("EE_Get_GLON_GPS_BinEph:  FAILED:  SV = %d < %d || > %d, Out of range !", a1, 1, 24);
    return 0;
  }
  return result;
}

uint64_t EE_Get_GAL_IntEph(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if ((a1 - 37) <= 0xDBu)
  {
    EvCrt_v("EE_Get_GAL_IntEph:  FAILED:  SV = %d, Out of range !");
    return 0;
  }
  if (a2 < 619315200) {
    return 0;
  }
  uint64_t result = GN_EE_Get_GAL_Eph_El(a1, (unsigned __int16)(a2 / 0x93A80u - 1024), a2 % 0x93A80u, (uint64_t)&v19);
  if (!result) {
    return result;
  }
  if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
    EvLog_GN_EE_GAL_Eph_El("GN_EE_Get_GAL_Eph_El: ", (unsigned int *)&v19);
  }
  unsigned int v5 = BYTE6(v19) - 37;
  BOOL v6 = v5 < 0xFFFFFFDC;
  if (v5 <= 0xFFFFFFDB) {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  SVid = %d, Out of range !", BYTE6(v19));
  }
  if (v19 > 0x93A7F)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  WeekNo = %d >= 604800, Out of range !", v19);
    BOOL v6 = 1;
  }
  if (WORD2(v19) >= 0x1000u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  WeekNo = %d >= 4096, Out of range !", WORD2(v19));
    BOOL v6 = 1;
  }
  unsigned int v7 = BYTE6(v19);
  if (BYTE6(v19) >= 0x41u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  SVid = %d > 2^6, Out of range !", BYTE6(v19));
    unsigned int v7 = BYTE6(v19);
    BOOL v6 = 1;
  }
  if (v7 >= 0x25)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  SVid = %d > 36, Unrealistic value !", v7);
    BOOL v6 = 1;
  }
  if (WORD1(v26) >> 5 >= 0x13Bu)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  toc = %d > 10079, Out of range !", WORD1(v26));
    BOOL v6 = 1;
  }
  if (HIWORD(v20) >> 5 >= 0x13Bu)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  toe = %d > 10079, Out of range !", HIWORD(v20));
    BOOL v6 = 1;
  }
  if ((unsigned __int16)v20 >= 0x400u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  IODnav = %d > 1023, Out of range !", (unsigned __int16)v20);
    BOOL v6 = 1;
  }
  HIDWORD(v8) = 1067366481;
  if (((BYTE6(v19) - 14) & 0xFB) != 0) {
    double v9 = 0.03;
  }
  else {
    double v9 = 0.25;
  }
  LODWORD(v8) = DWORD1(v21);
  double v10 = (double)v8;
  double v11 = v10 * 1.16415322e-10;
  if (v10 * 1.16415322e-10 < 0.0)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  e = %g  < %g, Unrealistic value !", v10 * 1.16415322e-10, 0.0);
    BOOL v6 = 1;
  }
  if (v11 > v9)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  e = %g  > %g, Unrealistic value !", v11, v9);
    BOOL v6 = 1;
  }
  LODWORD(v10) = DWORD2(v21);
  double v12 = (double)*(unint64_t *)&v10 * 0.00000190734863;
  if (v12 < 4800.0)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  sqrtA = %g  < %g, Unrealistic value !", v12, 4800.0);
    BOOL v6 = 1;
  }
  if (v12 > 5800.0)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  sqrtA = %g  > %g, Unrealistic value !", v12, 5800.0);
    BOOL v6 = 1;
  }
  if ((v23 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  OmegaDot = %d < -2^23 || >= 2^23, Out of range !");
LABEL_42:
    BOOL v6 = 1;
    goto LABEL_43;
  }
  double v13 = (double)v23 * 3.57157734e-13;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  OmegaDot = %e  < %e rad/s, Unrealistic value !");
    goto LABEL_42;
  }
  if (v13 > 0.0)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  OmegaDot = %e  > %e rad/s, Unrealistic value !");
    goto LABEL_42;
  }
LABEL_43:
  if ((unsigned __int16)((unsigned __int16)(v24 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  IDOT = %d < -2^13 || >= 2^13, Out of range !", (__int16)v24);
    BOOL v6 = 1;
  }
  if ((int)v25 - 0x40000000 >= 0)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  af0 = %d < -2^30 || >= 2^30, Out of range !", v25);
    BOOL v6 = 1;
  }
  if ((HIDWORD(v25) - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  af1 = %d < -2^20 || >= 2^20, Out of range !", HIDWORD(v25));
    BOOL v6 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(v26 - 32) >> 6) <= 0x3FEu)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  af2 = %d < -2^5 || >= 2^5, Out of range !", (__int16)v26);
    BOOL v6 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(WORD2(v26) - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  bgdE1E5b = %d < -2^9 || >= 2^9, Out of range !", SWORD2(v26));
    BOOL v6 = 1;
  }
  if ((unsigned __int16)((unsigned __int16)(HIWORD(v26) - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  bgdE1E5a = %d < -2^9 || >= 2^9, Out of range !", SHIWORD(v26));
    BOOL v6 = 1;
  }
  if (v27 >= 2u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  Model_ID = %d < 0 || > 1, Out of range !", v27);
    BOOL v6 = 1;
  }
  if (BYTE1(v27) >= 2u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  E5a_Nav_DVS = %d < 0 || > 1, Out of range !", BYTE1(v27));
    BOOL v6 = 1;
  }
  if (BYTE2(v27) >= 2u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:   E5b_Nav_DVS = %d < 0 || > 1, Out of range !", BYTE2(v27));
    BOOL v6 = 1;
  }
  if (HIBYTE(v27) >= 2u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  E1B_Nav_DVS = %d < 0 || > 1, Out of range !", HIBYTE(v27));
    BOOL v6 = 1;
  }
  if (v28 >= 4u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  E5a_Sig_HS = %d < 0 || > 3, Out of range !", v28);
    BOOL v6 = 1;
  }
  unsigned __int8 v14 = v29;
  if (v29 > 3u)
  {
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  E5b_Sig_HS = %d < 0 || > 3, Out of range !", v29);
    if (v30 < 4u) {
      return 0;
    }
LABEL_69:
    EvCrt_v("GN_EE_Get_GAL_Eph_El:  FAILED:  E1B_Sig_HS = %d < 0 || > 1, Out of range !");
    return 0;
  }
  unsigned __int8 v15 = v30;
  if (v30 > 3u) {
    goto LABEL_69;
  }
  if (v6) {
    return 0;
  }
  uint64_t v16 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v16 + 5) && *(int *)v16 >= 3) {
    int v17 = (int)*(double *)(v16 + 24) + 604800 * *(__int16 *)(v16 + 16);
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)a3 = v17;
  *(_DWORD *)(a3 + 4) = 6;
  *(void *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 16) = v20;
  *(_OWORD *)(a3 + 20) = v21;
  *(void *)(a3 + 36) = v22;
  *(_DWORD *)(a3 + 44) = v23;
  *(_OWORD *)(a3 + 48) = v24;
  uint64_t v18 = v26;
  *(void *)(a3 + 64) = v25;
  *(void *)(a3 + 72) = v18;
  *(_DWORD *)(a3 + 80) = v27;
  *(unsigned char *)(a3 + 84) = v28;
  *(unsigned char *)(a3 + 85) = v14;
  uint64_t result = 1;
  *(unsigned char *)(a3 + 86) = v15;
  return result;
}

void *EvLog_GN_EE_GAL_Eph_El(void *a1, unsigned int *a2)
{
  return EvLog_nd(a1, 34, *((__int16 *)a2 + 25), *a2, *((unsigned __int16 *)a2 + 2), *((unsigned __int8 *)a2 + 6), *((unsigned __int8 *)a2 + 7), *((unsigned __int16 *)a2 + 4), *((unsigned __int16 *)a2 + 5), a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a2[9], *((__int16 *)a2 + 20), *((__int16 *)a2 + 21), *((__int16 *)a2 + 22),
           *((__int16 *)a2 + 23),
           *((__int16 *)a2 + 24),
           *((__int16 *)a2 + 25),
           *((__int16 *)a2 + 26),
           *((__int16 *)a2 + 27),
           *((unsigned __int16 *)a2 + 33),
           a2[14],
           a2[15],
           *((__int16 *)a2 + 32),
           *((__int16 *)a2 + 34),
           *((__int16 *)a2 + 35),
           *((unsigned __int8 *)a2 + 72),
           *((unsigned __int8 *)a2 + 73),
           *((unsigned __int8 *)a2 + 74),
           *((unsigned __int8 *)a2 + 75),
           *((unsigned __int8 *)a2 + 76),
           *((unsigned __int8 *)a2 + 77),
           *((unsigned __int8 *)a2 + 78),
           *((unsigned __int16 *)a2 + 5),
           *((unsigned __int16 *)a2 + 4),
           *((unsigned __int8 *)a2 + 7),
           *((unsigned __int8 *)a2 + 6),
           *((unsigned __int16 *)a2 + 2),
           a1,
           *MEMORY[0x263EF8340]);
}

uint64_t EE_Set_GAL_IntEph(int a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((a1 - 37) > 0xFFFFFFDB)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 20);
    uint64_t v7 = *(void *)(a2 + 36);
    int v8 = *(_DWORD *)(a2 + 44);
    long long v9 = *(_OWORD *)(a2 + 48);
    uint64_t v2 = *(void *)(a2 + 72);
    uint64_t v10 = *(void *)(a2 + 64);
    uint64_t v11 = v2;
    int v12 = *(_DWORD *)(a2 + 80);
    char v13 = *(unsigned char *)(a2 + 84);
    __int16 v14 = *(_WORD *)(a2 + 85);
    if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
      EvLog_GN_EE_GAL_Eph_El("GN_EE_Set_GAL_Eph_El: ", (unsigned int *)&v4);
    }
  }
  else
  {
    EvCrt_v("EE_Set_GAL_Eph_El:  FAILED  SV = %d, Out of range !", a1);
  }
  return 0;
}

uint64_t EE_Get_BDS_IntEph(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if ((a1 - 38) <= 0xDAu)
  {
    EvCrt_v("EE_Get_BDS_IntEph:  FAILED:  SV = %d, Out of range !");
    return 0;
  }
  if ((int)a2 < 820713600) {
    return 0;
  }
  unsigned int v5 = a2 % 0x93A80;
  if (a2 % 0x93A80 < 0xE) {
    __int16 v6 = -1357;
  }
  else {
    __int16 v6 = -1356;
  }
  if (v5 < 0xE) {
    unsigned int v5 = a2 % 0x93A80 + 604800;
  }
  uint64_t result = GN_EE_Get_BDS_Eph_El(a1, (unsigned __int16)(v6 + a2 / 0x93A80), v5 - 14, v16);
  if (result)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
      EvLog_GN_EE_BDS_Eph_El("GN_EE_Get_BDS_Eph_El: ", v16);
    }
    unsigned int v8 = BYTE2(v18) - 38;
    BOOL v9 = v8 < 0xFFFFFFDB;
    if (v8 <= 0xFFFFFFDA) {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  SVid = %d, Out of range !", BYTE2(v18));
    }
    if (v16[0] >= 0x2000)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  WeekNo = %d > 8191, Out of range !", (unsigned __int16)v16[0]);
      BOOL v9 = 1;
    }
    if (v17 > 0x1274F)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  toc = %d > 75599, Out of range !", v17);
      BOOL v9 = 1;
    }
    if (HIDWORD(v17) > 0x1274F)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  toe = %d > 75599, Out of range !", HIDWORD(v17));
      BOOL v9 = 1;
    }
    if (v18 >= 0x20u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  AODE = %d > 31, Out of range !", v18);
      BOOL v9 = 1;
    }
    if (BYTE1(v18) >= 0x20u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  AODC = %d > 31, Out of range !", BYTE1(v18));
      BOOL v9 = 1;
    }
    if (BYTE2(v18) >= 0x26u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  SVid = %d > 37, Out of range !", BYTE2(v18));
      BOOL v9 = 1;
    }
    if (HIBYTE(v18) >= 0x10u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  URAI = %d > 15, Out of range !", HIBYTE(v18));
      BOOL v9 = 1;
    }
    if (v19 >= 2u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  SatH1 = %d > 15, Out of range !", v19);
      BOOL v9 = 1;
    }
    if ((unsigned __int16)((unsigned __int16)(v22 - 0x2000) >> 14) <= 2u)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  IDOT = %d < -2^13 || >= 2^13, Out of range !", (__int16)v22);
      BOOL v9 = 1;
    }
    if ((DWORD1(v23) - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Cuc = %d < -2^17 || >= 2^17, Out of range !", DWORD1(v23));
      BOOL v9 = 1;
    }
    if ((DWORD2(v23) - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Cus = %d < -2^17 || >= 2^17, Out of range !", DWORD2(v23));
      BOOL v9 = 1;
    }
    if ((HIDWORD(v23) - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Crc = %d < -2^17 || >= 2^17, Out of range !", HIDWORD(v23));
      BOOL v9 = 1;
    }
    if ((v24 - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Crs = %d < -2^17 || >= 2^17, Out of range !", v24);
      BOOL v9 = 1;
    }
    if ((DWORD1(v24) - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Cic = %d < -2^17 || >= 2^17, Out of range !", DWORD1(v24));
      BOOL v9 = 1;
    }
    if ((DWORD2(v24) - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  Cis = %d < -2^17 || >= 2^17, Out of range !", DWORD2(v24));
      BOOL v9 = 1;
    }
    if ((HIDWORD(v24) - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  af0 = %d < -2^23 || >= 2^23, Out of range !", HIDWORD(v24));
      BOOL v9 = 1;
    }
    if ((v25 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  af1 = %d < -2^21 || >= 2^23, Out of range !", v25);
      BOOL v9 = 1;
    }
    if ((unsigned __int16)((unsigned __int16)(v26 - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  af2 = %d < -2^10 || >= 2^10, Out of range !", v26);
      BOOL v9 = 1;
    }
    __int16 v10 = v27;
    if ((unsigned __int16)((unsigned __int16)(v27 - 512) >> 10) < 0x3Fu)
    {
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  TGD1 = %d < -2^9 || >= 2^9, Out of range !", v27);
      if ((unsigned __int16)((unsigned __int16)(v28 - 512) >> 10) > 0x3Eu) {
        return 0;
      }
LABEL_57:
      EvCrt_v("GN_EE_Get_BDS_Eph_El:  FAILED:  TGD2 = %d < -2^9 || >= 2^9, Out of range !");
      return 0;
    }
    __int16 v11 = v28;
    if ((unsigned __int16)((unsigned __int16)(v28 - 512) >> 10) < 0x3Fu) {
      goto LABEL_57;
    }
    if (v9) {
      return 0;
    }
    uint64_t v12 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v12 + 5) && *(int *)v12 >= 3)
    {
      double v7 = *(double *)(v12 + 24);
      int v13 = (int)v7 + 604800 * *(__int16 *)(v12 + 16);
    }
    else
    {
      int v13 = 0;
    }
    *(_DWORD *)a3 = v13;
    *(_DWORD *)(a3 + 4) = 6;
    *(_WORD *)(a3 + 16) = v16[0];
    *(unsigned char *)(a3 + 22) = v19;
    LODWORD(v7) = v18;
    *(_OWORD *)(a3 + 24) = v20;
    *(void *)(a3 + 40) = v21;
    long long v14 = v24;
    *(_OWORD *)(a3 + 52) = v23;
    *(void *)(a3 + 8) = v17;
    *(_DWORD *)(a3 + 18) = LODWORD(v7);
    *(_DWORD *)(a3 + 48) = v22;
    *(_OWORD *)(a3 + 68) = v14;
    *(_DWORD *)(a3 + 84) = v25;
    *(_WORD *)(a3 + 88) = v26;
    *(_WORD *)(a3 + 90) = v10;
    *(_WORD *)(a3 + 92) = v11;
    if (vmovl_u8(*(uint8x8_t *)&v7).u8[4] > 5u) {
      int v15 = 0x7FFFFFF;
    }
    else {
      int v15 = -1;
    }
    *(_DWORD *)(a3 + 96) = v15;
    return 1;
  }
  return result;
}

void *EvLog_GN_EE_BDS_Eph_El(void *a1, __int16 *a2)
{
  return EvLog_nd(a1, 28, a2[42], *a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), *((unsigned __int8 *)a2 + 12), *((unsigned __int8 *)a2 + 13), *((unsigned __int8 *)a2 + 14), *((unsigned __int8 *)a2 + 15), *((unsigned __int8 *)a2 + 16), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6), *((unsigned int *)a2 + 7), *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 9), *((unsigned int *)a2 + 10), a2[22], a2[23],
           *((unsigned int *)a2 + 12),
           *((unsigned int *)a2 + 13),
           *((unsigned int *)a2 + 14),
           *((unsigned int *)a2 + 15),
           *((unsigned int *)a2 + 16),
           *((unsigned int *)a2 + 17),
           *((unsigned int *)a2 + 18),
           *((unsigned int *)a2 + 19),
           *((unsigned int *)a2 + 20),
           a2[42],
           a2[43],
           a2[44],
           *MEMORY[0x263EF8340]);
}

uint64_t EE_Set_BDS_IntEph(int a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((a1 - 38) > 0xFFFFFFDA)
  {
    __int16 v5 = *(_WORD *)(a2 + 16);
    char v8 = *(unsigned char *)(a2 + 22);
    int v7 = *(_DWORD *)(a2 + 18);
    long long v9 = *(_OWORD *)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 40);
    int v11 = *(_DWORD *)(a2 + 48);
    long long v2 = *(_OWORD *)(a2 + 52);
    uint64_t v6 = *(void *)(a2 + 8);
    long long v3 = *(_OWORD *)(a2 + 68);
    long long v12 = v2;
    long long v13 = v3;
    int v14 = *(_DWORD *)(a2 + 84);
    __int16 v15 = *(_WORD *)(a2 + 88);
    int v16 = *(_DWORD *)(a2 + 90);
    if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
      EvLog_GN_EE_BDS_Eph_El("GN_EE_Set_BDS_Eph_El: ", &v5);
    }
  }
  else
  {
    EvCrt_v("EE_Set_BDS_Eph_El:  FAILED  SV = %d, Out of range !", a1);
  }
  return 0;
}

uint64_t GNS_Initialize(void)
{
  if (g_GnsInit) {
    return 1;
  }
  gnssDataMgt_Init();
  uint64_t result = AgpsSpawnFsm((uint64_t)&g_AgpsFsmTable, 8);
  g_Gnsint Init = result;
  return result;
}

uint64_t GNS_ProductionInitialize(int a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  if (a2 && a3 && !g_GnsInit)
  {
    if (AgpsSpawnFsm((uint64_t)&g_AgpsProdFsmTable, 2))
    {
      gnssDataMgtProduction_Init(a3);
      uint64_t v3 = 1;
      Hal_StartConn(a1, 1, a2);
      g_Gnsint Init = 1;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t GNS_ProductionDeInitialize(void)
{
  if (!g_GnsInit) {
    return 0;
  }
  uint64_t v0 = AgpsShutdownAllFsm();
  g_Gnsint Init = 0;
  usleep(0x186A0u);
  return v0;
}

uint64_t SuplVersionNegotiation::GetInstance(SuplVersionNegotiation *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SuplVersionNegotiation::GetInstance(void)::pred_suplVersionNegotiation != -1) {
    dispatch_once(&SuplVersionNegotiation::GetInstance(void)::pred_suplVersionNegotiation, &__block_literal_global_8);
  }
  uint64_t result = SuplVersionNegotiation::m_supl_version_negotiation;
  if (!SuplVersionNegotiation::m_supl_version_negotiation)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplVersionNegotiation.cpp", 44, "false && \"Memory allocation failure\"");
  }
  return result;
}

_DWORD *___ZN22SuplVersionNegotiation11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(4uLL, MEMORY[0x263F8C180]);
  if (result) {
    *uint64_t result = 196352;
  }
  SuplVersionNegotiation::m_supl_version_negotiatiouint64_t n = (uint64_t)result;
  return result;
}

BOOL SuplVersionNegotiation::Instance::NegotiateNetInitiated(SuplVersionNegotiation::Instance *this, unsigned int a2)
{
  unsigned int v3 = this;
  uint64_t Instance = SuplVersionNegotiation::GetInstance(this);
  BOOL result = 0;
  int v6 = atomic_load((unsigned __int8 *)(Instance + 1));
  BOOL v7 = v6 == 255;
  uint64_t v8 = 1;
  if (v7) {
    uint64_t v8 = 2;
  }
  unsigned int v9 = atomic_load((unsigned __int8 *)(Instance + v8));
  if (a2 <= 2 && v9 <= 2)
  {
    if (v3 <= 1 && v3 < a2) {
      return 0;
    }
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(Instance + 3));
    if (v10)
    {
      if (v3 > 2)
      {
        if (v9 < a2) {
          return 0;
        }
        atomic_store(v9, (unsigned __int8 *)(Instance + 1));
      }
      else
      {
        atomic_store(v3, (unsigned __int8 *)(Instance + 1));
      }
      return 1;
    }
    else
    {
      return v9 == v3;
    }
  }
  return result;
}

unsigned __int8 *SuplVersionNegotiation::Instance::Reset(SuplVersionNegotiation::Instance *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  BOOL result = (unsigned __int8 *)SuplVersionNegotiation::GetInstance(this);
  int v2 = atomic_load(result + 1);
  BOOL v3 = v2 == 255;
  uint64_t v4 = 1;
  if (v3) {
    uint64_t v4 = 2;
  }
  unsigned int v5 = atomic_load(&result[v4]);
  if (v5 > 2)
  {
    BOOL result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 69, "Reset", 770);
      return (unsigned __int8 *)LbsOsaTrace_WriteLog(0x12u, __str, v8, 0, 1);
    }
  }
  else
  {
    unsigned __int8 v6 = atomic_load(result + 3);
    if (v6) {
      atomic_store(2u, result + 2);
    }
    atomic_store(0xFFu, result + 1);
  }
  return result;
}

BOOL NK_Crude_Apx_Pos_Core(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  v518 = v11;
  long long v13 = v12;
  v532 = v14;
  uint64_t v551 = v15;
  v520 = v16;
  uint64_t v573 = v17;
  int v18 = (int (*)[3])v9;
  v680[48] = *(double *)MEMORY[0x263EF8340];
  long long v579 = 0uLL;
  *(double *)&uint64_t v580 = 0.0;
  int8x16_t __x = 0uLL;
  double v589 = 0.0;
  uint64_t v587 = 0;
  long long v585 = 0u;
  long long v586 = 0u;
  int32x4_t v524 = 0u;
  unsigned __int8 v19 = (unsigned __int16 *)&unk_26AE65000;
  long long v20 = (double *)&g_Crc32_RemTable[230];
  v553 = v10;
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    uint64_t v21 = mach_continuous_time();
    uint64_t v10 = v553;
    int32x4_t v524 = vdupq_n_s32((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21));
  }
  uint64_t v22 = 0;
  int v23 = 0;
  unsigned int v24 = 0;
  int v25 = &(*v18)[2];
  do
  {
    if (v10[v22] == 3) {
      ++v24;
    }
    if (*(v25 - 2) && *(v25 - 1) && *v25) {
      ++v23;
    }
    ++v22;
    v25 += 3;
  }
  while (v22 != 48);
  int v517 = v23;
  v525 = v18;
  int v26 = Centroid_SV_Pos(v18, 0x30u, (double *)v593);
  if (v26)
  {
    *(void *)&v593[24] = 0;
    long long v594 = 0uLL;
    long long v590 = *(_OWORD *)v593;
    long long v591 = *(unint64_t *)&v593[16];
    long long v592 = 0uLL;
  }
  else
  {
    long long v591 = 0u;
    long long v592 = 0u;
    long long v590 = 0u;
  }
  int32x4_t v521 = v524;
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    uint64_t v27 = mach_continuous_time();
    int32x4_t v28 = v524;
    v28.i32[1] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27);
    int32x4_t v521 = v28;
  }
  long long v29 = 0uLL;
  xmmword_268466FE0 = 0u;
  *(_OWORD *)&dword_268466FF0 = 0u;
  *(long long *)((char *)&xmmword_268466FB8 + 8) = 0u;
  *(_OWORD *)&byte_268466FD0 = 0u;
  xmmword_268466FA0 = 0u;
  *(_OWORD *)&qword_268466FB0 = 0u;
  if (v24 > 2) {
    int v30 = v26;
  }
  else {
    int v30 = 0;
  }
  gDebug = 0uLL;
  unk_268466F90 = 0uLL;
  v519 = v13;
  if (v30 == 1)
  {
    byte_268466FDE = 1;
    *(_OWORD *)v582 = *(_OWORD *)v593;
    long long v583 = *(_OWORD *)&v593[16];
    long long v584 = v594;
    bzero(v598, 0xA80uLL);
    uint64_t v32 = 0;
    int v33 = 0;
    char v648 = 0;
    memset(v644, 0, sizeof(v644));
    memset(v645, 0, 345);
    uint64_t v650 = 0;
    uint64_t v647 = 0;
    uint64_t v649 = 0;
    long long v661 = 0u;
    long long v662 = 0u;
    long long v663 = 0u;
    long long v664 = 0u;
    long long v665 = 0u;
    long long v666 = 0u;
    long long v667 = 0u;
    long long v668 = 0u;
    long long v669 = 0u;
    long long v670 = 0u;
    long long v671 = 0u;
    long long v672 = 0u;
    int v653 = 1;
    v655 = (double *)&v640;
    v654 = &v595;
    v656 = v680;
    v657 = &v635;
    v658 = &v621;
    unint64_t v652 = 0xFFFFFFFF00000000;
    long long v660 = 0u;
    long long v659 = 0u;
    char v651 = 1;
    uint64_t v646 = 0;
    dword_268466FC8 = 0;
    memset(v596, 0, sizeof(v596));
    long long v595 = 0u;
    double v620 = 0.0;
    long long v619 = 0u;
    long long v618 = 0u;
    uint64_t v34 = &(*v525)[2];
    int v35 = -1;
    uint64_t v36 = 592;
    memset(__b, 0, sizeof(__b));
    do
    {
      v680[v32] = 1.0;
      if (v553[v32] == 3 && *(v34 - 2) && *(v34 - 1) && *v34)
      {
        *((unsigned char *)&v596[-1] + v32) = 1;
        *((unsigned char *)v644 + v36) = 1;
        ++v33;
        *(unsigned char *)(v573 + v32) = 1;
      }
      else if (v35 == -1)
      {
        HIDWORD(v652) = v32;
        int v35 = v32;
      }
      ++v32;
      v36 += 4;
      v34 += 3;
    }
    while (v32 != 48);
    *(_DWORD *)((char *)&v649 + 3) = -1;
    LODWORD(v649) = -16645888;
    signed int v37 = 3;
    HIBYTE(v649) = 3;
    if ((_BYTE)v33)
    {
      BYTE3(v649) = 3;
      signed int v37 = 4;
      HIBYTE(v649) = 4;
    }
    LODWORD(v650) = 2;
    if (v33 >= 3)
    {
      unsigned int v41 = 0;
      double v42 = 0.0;
      while (1)
      {
        float64_t v43 = *(double *)v593;
        float64_t v44 = *(double *)&v593[8];
        *(_OWORD *)v623 = *(_OWORD *)v593;
        uint64_t v45 = *(void *)&v593[16];
        *(void *)&v623[16] = *(void *)&v593[16];
        ECEF2Geo((double *)v623, (uint64_t)&WGS84_Datum, (uint64_t)v615);
        double v46 = *(double *)&v615[2];
        double v47 = -6.28318531;
        if (*(double *)&v615[2] >= 3.14159265 || (double v47 = 6.28318531, *(double *)&v615[2] < -3.14159265))
        {
          double v46 = *(double *)&v615[2] + v47;
          *(double *)&v615[2] = *(double *)&v615[2] + v47;
        }
        __double2 v48 = __sincos_stret(*(double *)v615);
        __double2 v49 = __sincos_stret(v46);
        uint64_t v50 = 0;
        *(double *)__b = -(v48.__sinval * v49.__cosval);
        *((double *)__b + 1) = -(v48.__sinval * v49.__sinval);
        *(double *)&__b[1] = v48.__cosval;
        *((double *)&__b[1] + 1) = -v49.__sinval;
        long long v618 = *(unint64_t *)&v49.__cosval;
        *(double *)&long long v619 = -(v48.__cosval * v49.__cosval);
        *((double *)&v619 + 1) = -(v48.__cosval * v49.__sinval);
        double v620 = -v48.__sinval;
        long long v52 = &(*v525)[2];
        uint64_t v51 = &v598[2];
        do
        {
          if (*((unsigned char *)v654 + v50))
          {
            uint64_t v53 = *((void *)v52 - 1);
            v54.i64[0] = (int)v53;
            v54.i64[1] = SHIDWORD(v53);
            *(float64x2_t *)v609 = vcvtq_f64_s64(v54);
            double v610 = (double)*v52;
            v611.f64[0] = v43;
            v611.f64[1] = v44;
            uint64_t v612 = v45;
            double v55 = Comp_SVrange_Sag_Corr((float64x2_t *)v613, (double *)v581, &v611, (float64x2_t *)v609);
            *((_OWORD *)v51 - 1) = *(_OWORD *)v613;
            *(void *)uint64_t v51 = v614;
            double v56 = 0.0;
            switch(*(unsigned char *)(v573 + v50))
            {
              case 1:
              case 3:
              case 5:
                int v57 = SBYTE3(v649);
                goto LABEL_45;
              case 2:
                int v57 = SBYTE4(v649);
LABEL_45:
                if (v57 > 0) {
                  goto LABEL_46;
                }
                break;
              case 4:
                LOBYTE(v57) = BYTE5(v649);
                if (SBYTE5(v649) < 1) {
                  break;
                }
LABEL_46:
                double v56 = *(double *)&v593[8 * v57];
                break;
              default:
                break;
            }
            v655[v50] = (double)v532[v50] - v55 - v56;
          }
          ++v50;
          v51 += 7;
          v52 += 3;
        }
        while (v50 != 48);
        if (v33 > 4)
        {
          HIDWORD(v652) = -1;
        }
        else
        {
          uint64_t v58 = SHIDWORD(v652);
          *((unsigned char *)v654 + SHIDWORD(v652)) = 1;
          long long v59 = v655;
          v613[0] = 0;
          LODWORD(v611.f64[0]) = 0;
          v609[0] = 0;
          v581[0] = 0;
          *(float64_t *)v623 = v43;
          *(float64_t *)&v623[8] = v44;
          *(void *)&v623[16] = v45;
          ECEF2Geo((double *)v623, (uint64_t)&WGS84_Datum, (uint64_t)v615);
          double v61 = *(double *)&v615[2];
          double v62 = -6.28318531;
          if (*(double *)&v615[2] >= 3.14159265 || (double v62 = 6.28318531, *(double *)&v615[2] < -3.14159265))
          {
            double v61 = *(double *)&v615[2] + v62;
            *(double *)&v615[2] = *(double *)&v615[2] + v62;
          }
          uint64_t v63 = &v598[7 * (int)v58];
          LODWORD(v60) = vcvtd_n_s64_f64(*(double *)v615, 0xFuLL);
          uint64_t v64 = Taylor_sin_cos(v60, (int *)v613, (int *)&v611);
          LODWORD(v64) = vcvtd_n_s64_f64(v61, 0xFuLL);
          Taylor_sin_cos(v64, v609, v581);
          double v65 = (double)(v609[0] * LODWORD(v611.f64[0]));
          *uint64_t v63 = (double)(LODWORD(v611.f64[0]) * v581[0]) * 9.31322575e-10;
          v63[1] = v65 * 9.31322575e-10;
          v63[2] = (double)(int)v613[0] * 0.0000305175781;
          v59[v58] = v616;
          if (v33 == 4) {
            v656[SHIDWORD(v652)] = 1000000.0;
          }
        }
        BOOL v66 = NK_Least_Squares_Core(v598, (double (*)[3])__b, v37, 0, 0, (uint64_t)&v673, (uint64_t)&v677, &v597, (uint64_t)v644);
        uint64_t v67 = 0;
        double v68 = 0.0;
        do
        {
          if ((*((char *)&v649 + v67) & 0x80000000) == 0)
          {
            uint64_t v69 = *((unsigned __int8 *)&v649 + v67);
            double v70 = *((double *)v644 + v69);
            *(double *)&v593[8 * v69] = *(double *)&v593[8 * v69] + v70;
            double v68 = v68 + v70 * v70;
          }
          ++v67;
        }
        while (v67 != 7);
        BOOL v71 = v68 - v42 <= 2500.0 || v41 == 0;
        BOOL v72 = v71 && v66;
        ++byte_268466FD0;
        if (!v72) {
          break;
        }
        int v73 = v41 + 1;
        if (v41 <= 8)
        {
          ++v41;
          double v42 = v68;
          if (v68 > 10000.0) {
            continue;
          }
        }
        goto LABEL_75;
      }
      int v73 = v41;
LABEL_75:
      BOOL v75 = v73 > 9 && v72;
      BOOL v76 = v68 > 90000.0 && v75;
      int v77 = !v76;
      if (v76 || !v72)
      {
        if (v76) {
          int v78 = 1;
        }
        else {
          int v78 = 2;
        }
        dword_268466FC8 = v78;
      }
      int v79 = v72 & v77;
      unsigned __int8 v19 = (unsigned __int16 *)&unk_26AE65000;
      long long v39 = v525;
      if (SHIDWORD(v652) >= 1) {
        *((unsigned char *)&v596[-1] + HIDWORD(v652)) = 0;
      }
      if (!v79)
      {
        int v38 = 0;
        goto LABEL_108;
      }
      unint64_t v80 = 0;
      uint64_t v81 = (char)v649;
      float64_t v82 = (double *)&v593[8 * (char)v649];
      while (1)
      {
        if (*((unsigned char *)&v596[-1] + v80))
        {
          uint64_t v83 = v525[v80];
          v84.i64[0] = (int)*(void *)v83;
          v84.i64[1] = (int)HIDWORD(*(void *)v83);
          *(float64x2_t *)v615 = vcvtq_f64_s64(v84);
          double v616 = (double)v83[2];
          uint64_t v85 = 2;
          do
          {
            *(double *)&v623[8 * v85] = *(double *)&v615[2 * v85] - v82[v85];
            unint64_t v86 = v85-- + 1;
          }
          while (v86 > 1);
          uint64_t v87 = 0;
          double v88 = 0.0;
          do
          {
            double v88 = v88 + v82[v87] * *(double *)&v623[v87 * 8];
            ++v87;
          }
          while (v87 != 3);
          if (v88 < 0.0)
          {
            int v38 = 0;
            uint64_t v91 = &unk_268466000;
            int v92 = 3;
            goto LABEL_107;
          }
        }
        if (v80 >= 0x2F) {
          break;
        }
        ++v80;
      }
      uint64_t v89 = 0;
      double v90 = 0.0;
      do
      {
        if (*((unsigned char *)&v596[-1] + v89)) {
          double v90 = v90 + *(double *)&v635.i64[v89] * *(double *)&v635.i64[v89];
        }
        ++v89;
      }
      while (v89 != 48);
      if (v90 > 225000000.0)
      {
        int v38 = 0;
        uint64_t v91 = (_DWORD *)&unk_268466000;
        int v92 = 4;
LABEL_107:
        v91[1010] = v92;
        goto LABEL_108;
      }
      *(_OWORD *)v615 = *(_OWORD *)v82;
      uint64_t v506 = 8 * v81 + 16;
      double v616 = *(double *)&v593[v506];
      ECEF2Geo((double *)v615, (uint64_t)&WGS84_Datum, (uint64_t)&__x);
      int v507 = (int)v589;
      dword_268466FFC = (int)v589;
      __double2 v508 = __sincos_stret(*(double *)__x.i64);
      __double2 v509 = __sincos_stret(*(double *)&__x.i64[1]);
      *(double *)v623 = -(v508.__sinval * v509.__cosval);
      *(double *)&v623[8] = -(v508.__sinval * v509.__sinval);
      *(double *)&v623[16] = v508.__cosval;
      *(double *)&v623[24] = -v509.__sinval;
      long long v624 = *(unint64_t *)&v509.__cosval;
      *(double *)&long long v625 = -(v508.__cosval * v509.__cosval);
      *((double *)&v625 + 1) = -(v508.__cosval * v509.__sinval);
      *(double *)&long long v626 = -v508.__sinval;
      Comp_NEDvar_UDU((uint64_t)v645, HIBYTE(v649), v81, (double (*)[3])v623, (double *)&v644[3] + v81 + 1);
      double v510 = *(double *)((char *)&v644[3] + v506 + 8);
      if (v510 >= 100000000.0
        || ((int v511 = U4sqrt((int)v510), -500 - 1000 * v511 < v507) ? (v512 = 1000 * v511 + 18000 <= v507) : (v512 = 1),
            v512))
      {
        int v38 = 0;
        dword_268466FC8 = 5;
      }
      else
      {
        int v38 = 1;
      }
    }
    else
    {
      int v38 = 0;
    }
    long long v39 = v525;
LABEL_108:
    if ((unsigned __int16)g_Enable_Event_Log >= 2u)
    {
      uint64_t v93 = mach_continuous_time();
      int32x4_t v94 = v521;
      v94.i32[2] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93);
      int32x4_t v521 = v94;
    }
    if (v38) {
      int v95 = CompVelDoLs(v39, v520, v13, (double *)v593, (uint64_t)&v585, v31);
    }
    else {
      int v95 = 0;
    }
    if ((unsigned __int16)g_Enable_Event_Log >= 2u)
    {
      uint64_t v96 = mach_continuous_time();
      int32x4_t v97 = v521;
      v97.i32[3] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96);
      int32x4_t v521 = v97;
    }
    if (v95)
    {
      __double2 v98 = __sincos_stret(*(double *)__x.i64);
      __double2 v99 = __sincos_stret(*(double *)&__x.i64[1]);
      uint64_t v100 = 0;
      v598[0] = -(v98.__sinval * v99.__cosval);
      v598[1] = -(v98.__sinval * v99.__sinval);
      unint64_t v101 = &v598[2];
      v598[2] = v98.__cosval;
      v598[3] = -v99.__sinval;
      long long v599 = *(unint64_t *)&v99.__cosval;
      *(double *)&long long v600 = -(v98.__cosval * v99.__cosval);
      *((double *)&v600 + 1) = -(v98.__cosval * v99.__sinval);
      *(double *)&long long v601 = -v98.__sinval;
      long long v102 = v585;
      double v103 = *(double *)&v586;
      do
      {
        double v104 = *(v101 - 1) * *((double *)&v102 + 1) + *(v101 - 2) * *(double *)&v102;
        double v105 = *v101;
        v101 += 3;
        *(double *)((char *)v644 + v100) = v104 + v105 * v103;
        v100 += 8;
      }
      while (v100 != 24);
      double v106 = *((double *)v644 + 1) * *((double *)v644 + 1) + *(double *)v644 * *(double *)v644;
      double v107 = fabs(*(double *)&v644[1]);
      BOOL v108 = v107 < 10.0 && v106 < 4556.25;
      HIDWORD(xmmword_268466FE0) = (int)sqrt(v106);
      dword_268466FF0 = (int)v107;
      long long v40 = v525;
      if (!v108) {
        dword_268466FC8 = 6;
      }
    }
    else
    {
      BOOL v108 = 0;
      long long v40 = v525;
    }
    if ((unsigned __int16)g_Enable_Event_Log >= 2u)
    {
      uint64_t v109 = mach_continuous_time();
      int32x4_t v110 = v524;
      v110.i32[0] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109);
      int32x4_t v524 = v110;
    }
    if (v108)
    {
      int8x16_t *v518 = __x;
      BOOL v111 = 1;
      byte_268466FDD = 1;
      goto LABEL_617;
    }
    *(_OWORD *)v593 = *(_OWORD *)v582;
    *(_OWORD *)&v593[16] = v583;
    long long v594 = v584;
    long long v29 = 0uLL;
    long long v585 = 0u;
    long long v586 = 0u;
    uint64_t v587 = 0;
    double v589 = 0.0;
    int8x16_t __x = 0uLL;
    dword_268466FCC = dword_268466FC8;
    goto LABEL_129;
  }
  if (!v26)
  {
    int v74 = 0;
    goto LABEL_211;
  }
  long long v40 = v525;
LABEL_129:
  uint64_t v112 = 0;
  size_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v631 = 0;
  long long v630 = v29;
  long long v629 = v29;
  long long v628 = v29;
  long long v627 = v29;
  long long v626 = v29;
  long long v625 = v29;
  long long v624 = v29;
  v633 = &v621;
  v634 = __b;
  uint64_t v115 = &(*v520)[2];
  unsigned int v632 = -1;
  unsigned __int8 v116 = &(*v40)[2];
  *(_OWORD *)&v623[16] = v29;
  *(_OWORD *)v623 = v29;
  while (1)
  {
    int v117 = *(v116 - 2);
    int v118 = *(v116 - 1);
    int v119 = *v116;
    if (!*((void *)v116 - 1)) {
      break;
    }
LABEL_133:
    v116 += 3;
    double v120 = (double)v117;
    int v121 = (double *)((char *)v644 + v112 * 8);
    *int v121 = v120;
    v121[1] = (double)v118;
    double v122 = (double)v119;
    v121[2] = (double)v119;
    int v123 = *(v115 - 2);
    v680[v114] = (double)v13[v114];
    double v124 = (double)v123;
    unsigned __int16 v125 = (double *)&v640.i64[v112];
    double v126 = (double)*(v115 - 1);
    double v127 = (double)v118 * (double)v118 + v120 * v120 + v122 * v122;
    double v128 = (double)*v115;
    *(double *)&v635.i64[v114++] = v127;
    *unsigned __int16 v125 = v124;
    v125[1] = v126;
    v125[2] = v128;
    v113 += 8;
    v112 += 3;
    v115 += 3;
    if (v114 == 48)
    {
      memset_pattern16(__b, &unk_22BB45890, 0x180uLL);
LABEL_135:
      BOOL v566 = 0;
      goto LABEL_136;
    }
  }
  if (v119)
  {
    int v118 = 0;
    goto LABEL_133;
  }
  BOOL v566 = v114 == 0;
  if (!v114)
  {
    unsigned int v632 = 0;
    goto LABEL_587;
  }
  memset_pattern16(__b, &unk_22BB45890, v113);
  if (v114 >= 0x30) {
    goto LABEL_135;
  }
  unsigned int v632 = v114;
  if (v114 == 5)
  {
    BOOL v566 = 0;
    *((void *)&v618 + 1) = 0x3FF9000000000000;
    LODWORD(v114) = 5;
    goto LABEL_136;
  }
  if (v114 == 4)
  {
    BOOL v566 = 0;
    *(void *)&long long v618 = 0x3F647AE147AE147CLL;
    LODWORD(v114) = 4;
    goto LABEL_136;
  }
  if (v114 != 3)
  {
    if (v114 > 7)
    {
      BOOL v566 = 0;
      uint64_t v483 = 0x4039000000000000;
      goto LABEL_588;
    }
LABEL_587:
    uint64_t v483 = 0x4019000000000000;
LABEL_588:
    *((void *)__b + v114) = v483;
    goto LABEL_136;
  }
  BOOL v566 = 0;
  *((void *)&__b[1] + 1) = 0x3F647AE147AE147CLL;
  LODWORD(v114) = 3;
LABEL_136:
  long long v677 = *(_OWORD *)v593;
  *(void *)&long long v678 = *(void *)&v593[16];
  WGS84_ECEF2Geo((long double *)&v677, (double *)__x.i64);
  unsigned int v129 = 0;
  *(int8x16_t *)&v593[8] = __x;
  *(void *)v593 = 0x415854A640000000;
  *(void *)&v593[24] = 0;
  do
  {
    unsigned int v570 = v129;
    double v130 = *(double *)v593;
    __double2 v131 = __sincos_stret(*(double *)&v593[8]);
    __double2 v132 = __sincos_stret(*(double *)&v593[16]);
    *(double *)&long long v673 = v131.__cosval * v132.__cosval;
    *((double *)&v673 + 1) = v131.__cosval * v132.__sinval;
    v674.i64[0] = *(void *)&v131.__sinval;
    *(double *)&v674.i64[1] = -(v131.__sinval * v132.__cosval);
    *(double *)v675.i64 = -(v131.__sinval * v132.__sinval);
    v675.i64[1] = *(void *)&v131.__cosval;
    v676[0] = -(v131.__cosval * v132.__sinval);
    v676[1] = v131.__cosval * v132.__cosval;
    v676[2] = 0.0;
    if (!v566)
    {
      uint64_t v133 = 0;
      double v134 = -v130;
      long long v135 = v644;
      long long v136 = &v640;
      double v137 = *(double *)&v593[24];
      do
      {
        uint64_t v138 = 0;
        double v139 = 0.0;
        double v140 = 0.0;
        double v141 = 0.0;
        double v142 = 0.0;
        double v143 = 0.0;
        double v144 = 0.0;
        double v145 = 0.0;
        do
        {
          double v146 = *(double *)((char *)&v673 + v138 * 8);
          double v147 = *(double *)&v136->i64[v138];
          double v145 = v145 + v146 * v147;
          double v148 = *(double *)&v674.i64[v138 + 1];
          double v143 = v143 + v148 * v147;
          double v149 = v676[v138];
          double v141 = v141 + v149 * v147;
          double v150 = *(double *)((char *)v135 + v138 * 8);
          double v144 = v144 + v146 * v150;
          double v142 = v142 + v148 * v150;
          double v140 = v140 + v149 * v150;
          double v139 = v139 + v150 * v147;
          ++v138;
        }
        while (v138 != 3);
        double v151 = *(double *)&v635.i64[v133] + v130 * v130 + v130 * -2.0 * v144;
        double v152 = sqrt(v151);
        double v153 = v151 * v152;
        double v154 = 1.0 / v152;
        double v155 = -(v139 - v145 * v130);
        double v156 = v155 / v153;
        double v157 = -((v130 - v144) * v156 + -v145 * v154);
        long long v158 = &v598[3 * v133];
        double v159 = -(v156 * v130);
        *long long v158 = v157;
        v158[1] = -(v142 * v159 + v154 * v134 * v143);
        v158[2] = -(v140 * v159 + v154 * v134 * v141);
        v621.f64[v133] = v680[v133] - (v137 - v155 * v154);
        ++v133;
        long long v135 = (_OWORD *)((char *)v135 + 24);
        long long v136 = (int8x16_t *)((char *)v136 + 24);
      }
      while (v133 != v114);
    }
    uint64_t v160 = v632;
    if ((v632 & 0x80000000) == 0)
    {
      long long v161 = &v598[3 * v632];
      v161[1] = 0.0;
      v161[2] = 0.0;
      *long long v161 = -1.0;
      v621.f64[v160] = -(v130
                       + sqrt((v131.__cosval * v131.__cosval + v131.__sinval * v131.__sinval * 0.986656055)/ (v131.__cosval * v131.__cosval + v131.__sinval * v131.__sinval * 0.99330562))* -6378137.0);
    }
    int v162 = CAP_LSQ4_Core((uint64_t)v598, v114, (uint64_t)v623);
    uint64_t v163 = 0;
    ++byte_268466FD1;
    double v164 = 0.0;
    do
    {
      double v165 = *(double *)&v623[8 * v163];
      double v166 = *(double *)&v593[8 * v163] + v165;
      *(double *)&v593[8 * v163] = v166;
      if ((v163 - 1) > 1)
      {
        double v164 = v164 + v165 * v165;
      }
      else
      {
        if (v166 > 3.14159265)
        {
          do
            double v166 = v166 + -6.28318531;
          while (v166 > 3.14159265);
          *(double *)&v593[8 * v163] = v166;
        }
        if (v166 < -3.14159265)
        {
          do
            double v166 = v166 + 6.28318531;
          while (v166 < -3.14159265);
          *(double *)&v593[8 * v163] = v166;
        }
        double v164 = v164 + v165 * v165 * 1.0e10;
      }
      ++v163;
    }
    while (v163 != 4);
    if (v164 > 40000.0) {
      int v167 = v162;
    }
    else {
      int v167 = 0;
    }
    BOOL v168 = v167 != 1 || v570 >= 0xE;
    unsigned int v129 = v570 + 1;
  }
  while (!v168);
  if (v162)
  {
    double v169 = 0.0;
    unsigned __int8 v19 = (unsigned __int16 *)&unk_26AE65000;
    long long v20 = (double *)&g_Crc32_RemTable[230];
    if (!v566)
    {
      long long v170 = &v621;
      uint64_t v171 = v114;
      do
      {
        double v172 = v170->f64[0];
        long long v170 = (float64x2_t *)((char *)v170 + 8);
        double v169 = v169 + v172 * v172;
        --v171;
      }
      while (v171);
    }
    if (v169 / (double)(int)v114 > 10000.0)
    {
      int v173 = 4;
      goto LABEL_170;
    }
    int v174 = 1;
  }
  else
  {
    int v173 = 2;
    unsigned __int8 v19 = (_WORD *)&unk_26AE65000;
    long long v20 = (double *)(g_Crc32_RemTable + 920);
LABEL_170:
    int v174 = 0;
    dword_268466FC8 = v173;
  }
  int8x16_t __x = *(int8x16_t *)&v593[8];
  double v589 = 0.0;
  Geo2ECEF((uint64_t)&__x, (uint64_t)&WGS84_Datum, (double *)&v677);
  *(_OWORD *)v593 = v677;
  *(void *)&v593[16] = v678;
  if (v114 && v174)
  {
    uint64_t v175 = 0;
    long long v176 = v644;
    while (1)
    {
      uint64_t v177 = 2;
      do
      {
        *((double *)&v673 + v177) = *((double *)v176 + v177) - *(double *)&v593[8 * v177];
        unint64_t v178 = v177-- + 1;
      }
      while (v178 > 1);
      uint64_t v179 = 0;
      double v180 = 0.0;
      do
      {
        double v180 = v180 + *(double *)&v593[v179] * *(double *)((char *)&v673 + v179);
        v179 += 8;
      }
      while (v179 != 24);
      double v181 = 0.0;
      uint64_t v182 = 2;
      do
      {
        double v181 = v181 + *(double *)&v593[8 * v182] * *(double *)&v593[8 * v182];
        unint64_t v183 = v182-- + 1;
      }
      while (v183 > 1);
      double v184 = v180 / sqrt(v181);
      if (v184 < 0.0)
      {
        double v185 = 0.0;
        uint64_t v186 = 2;
        do
        {
          double v185 = v185 + *((double *)&v673 + v186) * *((double *)&v673 + v186);
          unint64_t v187 = v186-- + 1;
        }
        while (v187 > 1);
        if (v184 / sqrt(v185) < -0.087155743) {
          break;
        }
      }
      ++v175;
      long long v176 = (_OWORD *)((char *)v176 + 24);
      if (v175 == v114) {
        goto LABEL_194;
      }
    }
    dword_268466FC8 = 3;
LABEL_210:
    int v74 = 0;
    int8x16_t __x = 0uLL;
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    double v589 = 0.0;
  }
  else
  {
    if (!v174) {
      goto LABEL_210;
    }
LABEL_194:
    int v188 = 1;
    int v189 = 6;
    uint64_t v190 = 2;
    int v191 = 6;
    unint64_t v192 = 1;
    do
    {
      unint64_t v193 = v192 - 1;
      unsigned int v194 = v192 + v192 * v192;
      uint64_t v195 = v192 + (v194 >> 1);
      unsigned int v196 = v194 >> 1;
      int v197 = v189;
      int v198 = v191;
      uint64_t v199 = v190;
      int v200 = v188;
      unint64_t v201 = v192;
      do
      {
        unsigned int v202 = v201 + v201 * v201;
        if (v192 == v201)
        {
          double v203 = *((double *)&v624 + v195);
          unsigned int v204 = v202 >> 1;
        }
        else
        {
          unsigned int v204 = v202 >> 1;
          double v205 = *((double *)&v624 + v201 + (v202 >> 1));
          unsigned int v206 = v192 + (v202 >> 1);
          if (v192 >= v201) {
            unsigned int v206 = v196 + v201;
          }
          double v203 = v205 * *((double *)&v624 + v206);
        }
        unsigned int v207 = v197;
        int v208 = v198;
        uint64_t v209 = v199;
        unsigned int v210 = v200;
        do
        {
          unsigned int v211 = v210 + 1;
          unsigned int v212 = (v210 + 2) * (v210 + 1);
          double v213 = *((double *)&v624 + v209 + ((unint64_t)v207 >> 1))
               * *((double *)&v624 + v192 + (v212 >> 1));
          unsigned int v214 = v201 + (v212 >> 1);
          if (v211 <= v201) {
            unsigned int v214 = v211 + v204;
          }
          double v203 = v203 + v213 * *((double *)&v624 + v214);
          ++v209;
          v207 += v208;
          v208 += 2;
          unsigned int v210 = v211;
        }
        while (v211 < 3);
        *((double *)&v673 + 2 * v193 + v201 - 1) = v203;
        *((double *)&v673 + 2 * v201 + v193 - 2) = v203;
        ++v200;
        ++v199;
        v197 += v198;
        v198 += 2;
        BOOL v71 = v201 == 2;
        unint64_t v201 = 2;
      }
      while (!v71);
      ++v190;
      ++v188;
      v189 += v191;
      v191 += 2;
      unint64_t v192 = 2;
    }
    while (v190 != 4);
    double v215 = cos(*(long double *)__x.i64);
    double v6 = *(double *)&v673 * 4.06806316e13;
    double v7 = *(double *)&v674.i64[1] * (v215 * v215 * 4.06806316e13);
    double v8 = fabs(v215) * 4.06806316e13 * *((double *)&v673 + 1);
    int v74 = 1;
  }
LABEL_211:
  if (v19[395] >= 2u)
  {
    uint64_t v216 = mach_continuous_time();
    int32x4_t v217 = v524;
    v217.i32[1] = (unint64_t)(v20[61] * (double)v216);
    int32x4_t v524 = v217;
  }
  if (!v74)
  {
    *(_OWORD *)v593 = v590;
    *(_OWORD *)&v593[16] = v591;
    long long v594 = v592;
LABEL_263:
    unint64_t v252 = 0;
    long long v595 = xmmword_22BB45880;
    uint64_t v253 = (const double *)v593;
    do
    {
      v598[0] = 0.0;
      BOOL v254 = R8_EQ(v253, v598);
      if (v252 > 3) {
        break;
      }
      ++v252;
      ++v253;
    }
    while (v254);
    uint64_t v255 = 0;
    char v256 = 0;
    uint64_t v257 = 0;
    long long v607 = 0u;
    long long v608 = 0u;
    long long v605 = 0u;
    long long v606 = 0u;
    long long v603 = 0u;
    long long v604 = 0u;
    long long v601 = 0u;
    long long v602 = 0u;
    long long v599 = 0u;
    long long v600 = 0u;
    memset(v598, 0, sizeof(v598));
    memset(__b, 0, 20);
    long long v677 = 0uLL;
    unint64_t v258 = v525;
    unint64_t v259 = &(*v525)[2];
    LODWORD(v678) = 0;
    do
    {
      if (*(v259 - 2) && *(v259 - 1) && *v259)
      {
        uint64_t v260 = (v257 + 1);
        if ((int)v257 <= 4) {
          v256 |= *(unsigned char *)(v573 + v255) == 2;
        }
      }
      else
      {
        uint64_t v260 = v257;
      }
      ++v255;
      v259 += 3;
      uint64_t v257 = v260;
    }
    while (v255 != 48);
    if ((int)v260 < 1) {
      goto LABEL_300;
    }
    char v543 = v256;
    unint64_t v261 = 0;
    int v262 = 0;
    int v263 = 0;
    int v264 = 1;
    unint64_t v265 = v260;
    while (1)
    {
      int v266 = v553[v261];
      if (v266 == 1) {
        break;
      }
      if (v266 == 2)
      {
        int v269 = *v553;
        if (v269 == 3) {
          goto LABEL_284;
        }
        if (v269 == 2)
        {
          int v269 = 6;
LABEL_284:
          *((_DWORD *)v598 + v261) = v269;
        }
        ++v262;
LABEL_293:
        if (v261 >= 5) {
          goto LABEL_298;
        }
LABEL_296:
        int v268 = 5;
        int v267 = 2;
LABEL_297:
        *((_DWORD *)__b + v261) = v267;
        v264 *= v268;
        goto LABEL_298;
      }
      if (v266 == 3)
      {
        ++v263;
        *((_DWORD *)v598 + v261) = 0;
        if (v261 < 5)
        {
          int v267 = 0;
          int v268 = 1;
          goto LABEL_297;
        }
      }
      else
      {
        *((_DWORD *)v598 + v261) = 22;
        if (v261 <= 4) {
          goto LABEL_296;
        }
      }
LABEL_298:
      if (v260 == ++v261)
      {
        if ((int)v260 < 4)
        {
LABEL_300:
          BOOL v273 = 0;
          goto LABEL_595;
        }
        if ((int)v260 >= 5) {
          uint64_t v274 = 5;
        }
        else {
          uint64_t v274 = v260;
        }
        char v275 = v263 + v262 >= (int)v274 || v254;
        int v546 = v260;
        int v549 = v263;
        int v550 = v264;
        *(void *)v563 = v274;
        if (v275)
        {
LABEL_308:
          memset(v623, 0, 20);
        }
        else
        {
          uint64_t v457 = 0;
          *(int32x2_t *)v640.i8 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)v593));
          v640.i32[2] = (int)*(double *)&v593[16];
          do
          {
            *(_DWORD *)((char *)v644 + v457 * 4) = v640.i32[v457] / 1000;
            ++v457;
          }
          while (v457 != 3);
          uint64_t v458 = 0;
          int v459 = 0;
          char v460 = 1;
          v461 = v525;
          do
          {
            uint64_t v462 = 0;
            unsigned int v463 = 0;
            do
            {
              int v464 = (*v461)[v462] / 1000 - *(_DWORD *)((char *)v644 + v462 * 4);
              v463 += v464 * v464;
              ++v462;
            }
            while (v462 != 3);
            int v465 = v532[v458] / -1000;
            int v466 = U4sqrt(v463);
            if (!v458)
            {
              *(_DWORD *)v623 = 0;
              int v459 = v465 + v466;
            }
            int v467 = *((_DWORD *)v598 + v458);
            if (v467 < 1)
            {
              int v468 = 0;
            }
            else
            {
              int v468 = (437 * (v465 + v466 - v459) + 65550) >> 17;
              if (v468 >= 0) {
                unsigned int v469 = (437 * (v465 + v466 - v459) + 65550) >> 17;
              }
              else {
                unsigned int v469 = -v468;
              }
              v460 &= v469 <= v467;
            }
            unint64_t v258 = v525;
            *(_DWORD *)&v623[4 * v458++] = v468;
            ++v461;
          }
          while (v458 != *(void *)v563);
          if ((v460 & 1) == 0)
          {
            LODWORD(v260) = v546;
            uint64_t v274 = *(void *)v563;
            if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
              EvLog_VecI4("SearchPrLs: CheckFit   FAIL , Unused msCorr_Fit: ", v563[0], (int *)v623);
            }
            goto LABEL_308;
          }
          LODWORD(v260) = v546;
          if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
            EvLog_VecI4("SearchPrLs: CheckFit    OK , msCorr_Fit: ", v563[0], (int *)v623);
          }
          uint64_t v470 = 0;
          char v471 = 0;
          do
          {
            int v472 = *(_DWORD *)&v623[v470];
            if (v472 >= 0) {
              int v473 = *(_DWORD *)&v623[v470];
            }
            else {
              int v473 = -v472;
            }
            int v474 = *(_DWORD *)((char *)__b + v470);
            int v475 = v473 + v474;
            int v476 = *(_DWORD *)((char *)v598 + v470);
            if (v475 > v476)
            {
              int v477 = v474 - v476;
              int v478 = v476 - v474;
              if (v472 > 0) {
                int v477 = v478;
              }
              *(_DWORD *)&v623[v470] = v477;
              char v471 = 1;
            }
            v470 += 4;
          }
          while (4 * v563[0] != v470);
          uint64_t v274 = *(void *)v563;
          if ((v471 & ((unsigned __int16)g_Enable_Event_Log > 1u)) == 1) {
            EvLog_VecI4("SearchPrLs: CheckFit    OK ADJ , msCorr_Fit: ", v563[0], (int *)v623);
          }
        }
        uint64_t v276 = 0;
        uint64_t v567 = (v274 - 1);
        int v277 = &(*v258)[2];
        do
        {
          double v278 = (float64x2_t *)((char *)v644 + v276);
          uint64_t v279 = *((void *)v277 - 1);
          v280.i64[0] = (int)v279;
          v280.i64[1] = SHIDWORD(v279);
          *double v278 = vcvtq_f64_s64(v280);
          int v281 = *v277;
          v277 += 3;
          v278[1].f64[0] = (double)v281;
          v276 += 24;
        }
        while (24 * v274 != v276);
        long long v673 = 0uLL;
        v674.i32[0] = 0;
        if (v263 >= 1)
        {
          if (v263 >= (int)v274) {
            uint64_t v282 = v274;
          }
          else {
            uint64_t v282 = v263;
          }
          double v283 = v680;
          uint64_t v284 = v532;
          do
          {
            int v285 = *v284++;
            *v283++ = (double)v285;
            --v282;
          }
          while (v282);
        }
        int v575 = 0;
        int v286 = 0;
        v559 = &v680[v263];
        uint64_t v561 = v274 - v263;
        v556 = (char *)&v677 + 4 * v263;
        v557 = &v532[v263];
        v552 = (char *)&v673 + 4 * v263;
        v554 = (int *)&v623[4 * v263];
        uint64_t v287 = v263;
        int v547 = __b[0];
        uint64_t v288 = *(void *)&v593[24];
        int v540 = v264;
        int v542 = v264;
        while (2)
        {
          int v572 = v286;
          v615[0] = 0;
          v613[0] = 0;
          if (v263 < (int)v274)
          {
            double v289 = (int *)v552;
            v290 = v554;
            double v291 = v556;
            double v292 = v557;
            uint64_t v293 = v559;
            uint64_t v294 = v561;
            do
            {
              int v296 = *v289++;
              int v295 = v296;
              int v297 = *v290++;
              int v298 = v297 + v295;
              *v291++ = v298;
              int v299 = *v292++;
              *v293++ = (double)(v299 + 299792 * v298);
              --v294;
            }
            while (v294);
          }
          ++v575;
          v636.i64[1] = v288;
          int64x2_t v635 = *(int64x2_t *)v593;
          v636.i64[0] = *(void *)&v593[16];
          if (!CompPr_LSQ4((double (*)[3])v644, v680, v274, (double *)v635.i64, v615, v613, v621.f64))
          {
            char v318 = 0;
            goto LABEL_355;
          }
          if (v260 >= 6)
          {
            uint64_t v300 = 0;
            unsigned int v301 = 0;
            double v302 = *(double *)v635.i64;
            v582[0] = (int)*(double *)v635.i64 / 1000;
            v582[1] = (int)*(double *)&v635.i64[1] / 1000;
            v582[2] = (int)*(double *)v636.i64 / 1000;
            do
            {
              unsigned int v303 = (*v258)[v300] / 1000 - v582[v300];
              v301 += v303 * v303;
              ++v300;
            }
            while (v300 != 3);
            uint64_t v304 = 0;
            int v305 = *v532 / 1000 - U4sqrt(v301);
            double v306 = v258;
            do
            {
              uint64_t v307 = 0;
              unsigned int v308 = 0;
              signed int v310 = *((_DWORD *)v598 + v304);
              do
              {
                unsigned int v311 = (*v306)[v307] / 1000 - v582[v307];
                v308 += v311 * v311;
                ++v307;
              }
              while (v307 != 3);
              int v309 = v532[v304];
              signed int v312 = v305 + v309 / -1000 + U4sqrt(v308);
              if (v312 < 0) {
                signed int v312 = -v312;
              }
              if (v312 < 0x97)
              {
                signed int v315 = 0;
              }
              else
              {
                if (v312 >= 450) {
                  int v313 = 450;
                }
                else {
                  int v313 = v312;
                }
                unsigned int v314 = v312 - v313 + 299;
                signed int v312 = v312 - 300 * (v314 / 0x12C) - 300;
                signed int v315 = v314 / 0x12C + 1;
              }
              unint64_t v258 = v525;
              if (v312 < 0) {
                signed int v312 = -v312;
              }
              BOOL v317 = v315 > v310 || v312 > 0xF;
              if (++v304 >= v265) {
                break;
              }
              ++v306;
            }
            while (!v317);
            if (v317)
            {
              int v513 = v304;
              int v264 = v550;
              EvLog_v("SearchPrLs:  BAD %d %d %d  %g %g %g   ClkB %g   ResSq %d", v513, v575, v550, v621.f64[0] * 57.2957795, v621.f64[1] * 57.2957795, v622, v302, v613[0]);
              char v318 = 0;
              LODWORD(v260) = v546;
              int v263 = v549;
              goto LABEL_354;
            }
            LODWORD(v260) = v546;
            int v263 = v549;
            int v264 = v550;
          }
          unsigned int v319 = v613[0];
          if (v613[0] <= 0x57E3)
          {
            dword_268466FD8 = v613[0];
            if ((unsigned __int16)g_Enable_Event_Log >= 2u)
            {
              EvLog_v("SearchPrLs: GOOD %d %d %d  %g %g %g   ClkB %g  ResSq %d", v563[0], v575, v542, v621.f64[0] * 57.2957795, v621.f64[1] * 57.2957795, v622, *(double *)v635.i64, v613[0]);
              EvLog_VecI4("SearchPrLs: GOOD msCorr", v563[0], (int *)&v677);
            }
            int8x16_t __x = (int8x16_t)v621;
            double v589 = v622;
            char v318 = 1;
LABEL_354:
            LODWORD(v274) = v563[0];
LABEL_355:
            int v320 = v615[0];
            int v321 = (*((_DWORD *)&v673 + v567) < 1) - *((_DWORD *)&v673 + v567);
            *((_DWORD *)&v673 + v567) = v321;
            if ((int)v567 > v263)
            {
              uint64_t v322 = v567;
              do
              {
                if (v321 <= *((_DWORD *)__b + v322)) {
                  break;
                }
                uint64_t v323 = (char *)&v673 + 4 * v322;
                int v321 = (*((_DWORD *)v323 - 1) < 1) - *((_DWORD *)v323 - 1);
                *(void *)(v323 - 4) = v321;
                --v322;
              }
              while (v322 > v287);
            }
            int v286 = v320 + v572;
            if (v263)
            {
              if (v263 >= (int)v274) {
                goto LABEL_380;
              }
              int v324 = *((_DWORD *)&v673 + v287);
              int v325 = *((_DWORD *)__b + v287);
            }
            else
            {
              int v324 = v673;
              int v325 = v547;
            }
            if (v318 & 1 | (v324 > v325) || v286 > 149)
            {
LABEL_380:
              if (v318)
              {
                BOOL v273 = 1;
                unsigned __int8 v19 = (_WORD *)&unk_26AE65000;
                long long v13 = v519;
                long long v20 = (double *)(g_Crc32_RemTable + 920);
                char v328 = v543;
              }
              else
              {
                if ((int)v260 >= 5) {
                  unsigned int v479 = 250000 * v274;
                }
                else {
                  unsigned int v479 = 22500;
                }
                dword_268466FD8 = v595;
                unsigned __int8 v19 = (unsigned __int16 *)&unk_26AE65000;
                long long v13 = v519;
                long long v20 = (double *)&g_Crc32_RemTable[230];
                char v328 = v543;
                if (v595 >= v479)
                {
                  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
                  {
                    char v484 = v286;
                    EvLog_v("SearchPrLs: FAIL %d %d %d", v575, v264, v286);
                    LOBYTE(v286) = v484;
                  }
                  BOOL v273 = 0;
                }
                else
                {
                  int8x16_t __x = v640;
                  double v589 = *(double *)v641;
                  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
                  {
                    int v514 = v274;
                    char v480 = v286;
                    EvLog_v("SearchPrLs:   OK %d %d %d  %g %g %g   ClkB %g  ResSq %d", v514, v575, v264, *(double *)__x.i64 * 57.2957795, *(double *)&__x.i64[1] * 57.2957795, v589, *(double *)v635.i64, v595);
                    LOBYTE(v286) = v480;
                  }
                  BOOL v273 = 1;
                }
              }
              byte_268466FDC = v328 & 1;
              byte_268466FD3 = v273;
              byte_268466FD4 = v286;
              goto LABEL_595;
            }
            continue;
          }
          break;
        }
        if (v613[0] < v595)
        {
          uint64_t v326 = 0;
          goto LABEL_372;
        }
        if (v613[0] < DWORD1(v595))
        {
          uint64_t v326 = 1;
          goto LABEL_372;
        }
        if (v613[0] >= DWORD2(v595))
        {
          if (v613[0] >= HIDWORD(v595))
          {
            char v318 = 0;
            LODWORD(v274) = v563[0];
            goto LABEL_355;
          }
          uint64_t v326 = 3;
        }
        else
        {
          uint64_t v326 = 2;
LABEL_372:
          memmove(&v641[6 * v326 + 2], (char *)&v640 + 24 * v326, 24 * (v326 ^ 3));
          memmove((void *)(((unint64_t)&v595 | (4 * v326)) + 4), (const void *)((unint64_t)&v595 | (4 * v326)), 4 * (v326 ^ 3));
          unint64_t v258 = v525;
        }
        double v327 = (double *)&v640.i64[3 * v326];
        *(float64x2_t *)double v327 = v621;
        v327[2] = v622;
        *(_DWORD *)((unint64_t)&v595 | (4 * v326)) = v319;
        if ((unsigned __int16)g_Enable_Event_Log < 2u)
        {
          char v318 = 0;
          int v263 = v549;
          LODWORD(v274) = v563[0];
        }
        else
        {
          LODWORD(v274) = v563[0];
          EvLog_v("SearchPrLs: WAIT %d %d %d  %g %g %g   ClkB %g  ResSq %d", v563[0], v575, v540, v621.f64[0] * 57.2957795, v621.f64[1] * 57.2957795, v622, *(double *)v635.i64, v595);
          EvLog_VecI4("SearchPrLs: WAIT msCorr", v563[0], (int *)&v677);
          char v318 = 0;
          int v263 = v549;
        }
        int v264 = v550;
        goto LABEL_355;
      }
    }
    int v270 = *v553;
    if (v270 == 2) {
      int v271 = 14;
    }
    else {
      int v271 = 22;
    }
    if (v270 == 3) {
      int v272 = 11;
    }
    else {
      int v272 = v271;
    }
    *((_DWORD *)v598 + v261) = v272;
    goto LABEL_293;
  }
  Comp_ErrorEllipse(v6, v7, v8, (double *)&v579, (double *)&v579 + 1, (double *)&v580);
  xmmword_268466FB8 = (__int128)__x;
  if (v517 >= 5) {
    int v218 = 5;
  }
  else {
    int v218 = v517;
  }
  if (v218 <= 3) {
    int v218 = 3;
  }
  double v219 = User_Velocity_Compensation[v218 - 3];
  double v220 = *(double *)&v579 * v219;
  double v221 = v219 * *((double *)&v579 + 1);
  *(double *)&long long v579 = v220;
  *((double *)&v579 + 1) = v221;
  double v222 = v220 * 0.00000320473867;
  double v223 = v220 * 0.00000320473867 * v221;
  if (v517 >= 8)
  {
    double v224 = v223 * 0.0016;
    double v225 = 2.0;
    if (v223 * 0.0016 <= 2500.0 && v224 * 4.0 >= 2500.0) {
      double v225 = sqrt(2500.0 / v224);
    }
    double v220 = v220 * v225;
    *(double *)&long long v579 = v220;
    double v226 = v221 * v225;
    goto LABEL_227;
  }
  double v226 = 200000.0;
  if (v220 < 200000.0)
  {
    *(void *)&long long v579 = 0x41086A0000000000;
    double v226 = 200000.0;
    double v220 = 200000.0;
    goto LABEL_227;
  }
  if (v221 < 200000.0 && v223 < 1562500.0)
  {
    if (v222 * 200000.0 > 1562500.0) {
      double v226 = 1562500.0 / v222;
    }
LABEL_227:
    *((double *)&v579 + 1) = v226;
    double v221 = v226;
  }
  if (v221 * (v220 * 3.14159265) * 0.000001 > 1562500.0) {
    goto LABEL_263;
  }
  float64x2_t v574 = (float64x2_t)__x;
  long long v595 = 0uLL;
  *(void *)&v596[0] = 0;
  double v227 = *(double *)&v580;
  bzero(&v640, 0x220uLL);
  uint64_t v228 = 0;
  long long v679 = 0u;
  long long v678 = 0u;
  long long v677 = 0u;
  unsigned int v229 = -83886080;
  do
  {
    uint64_t v230 = (int32x2_t *)&v640.i8[v228];
    *uint64_t v230 = 0;
    v230[1] = vdup_n_s32(v229);
    v228 += 68;
    v229 += 0x10000;
  }
  while (v228 != 544);
  uint64_t v231 = 0;
  int v232 = 0;
  unsigned __int8 v233 = 0;
  int v234 = 0;
  unsigned __int16 v235 = v598;
  BOOL v236 = v644;
  int v237 = v525;
  do
  {
    uint64_t v238 = v525[v231][0];
    if (v238)
    {
      uint64_t v238 = v525[v231][1];
      if (v238)
      {
        uint64_t v238 = v525[v231][2];
        if (v238)
        {
          for (uint64_t i = 0; i != 3; ++i)
          {
            int v240 = (*v237)[i];
            if (v240 > 0) {
              int v241 = 500;
            }
            else {
              int v241 = -500;
            }
            *((_DWORD *)v236 + i) = (v241 + v240) / 1000;
            v235[i] = (double)v240;
          }
          uint64_t v242 = 274877907 * (v532[v231] + 500);
          *((_DWORD *)__b + v231) = (v242 >> 38) + ((unint64_t)v242 >> 63);
          if (*(_DWORD *)(v551 + 4 * v231) == 1)
          {
            ++v233;
            uint64_t v238 = 250000;
          }
          else
          {
            uint64_t v238 = 2250000;
          }
          v232 += v238;
          ++v234;
        }
      }
    }
    ++v231;
    v235 += 3;
    BOOL v236 = (_OWORD *)((char *)v236 + 12);
    ++v237;
  }
  while (v231 != 48);
  double v243 = v227 * 0.0174532925;
  uint64_t v571 = v234;
  if (v234 >= 1)
  {
    uint64_t v244 = 0;
    while (1)
    {
      int v245 = v553[v244];
      if (v245 == 1) {
        break;
      }
      if (v245 == 3)
      {
        char v247 = 0;
        goto LABEL_256;
      }
      if (v245 != 2) {
        break;
      }
      int v246 = *v553;
      if (v246 == 3)
      {
        char v247 = 2;
        goto LABEL_256;
      }
      if (v246 == 2)
      {
        char v247 = 4;
LABEL_256:
        *((unsigned char *)&v677 + v244) = v247;
      }
      if (v234 == ++v244) {
        goto LABEL_258;
      }
    }
    char v247 = 22;
    goto LABEL_256;
  }
LABEL_258:
  unsigned __int8 v515 = v233;
  *(int32x2_t *)&long long v595 = vmovn_s64(vcvtq_n_s64_f64(v574, 0xFuLL));
  unsigned int v248 = v595;
  if ((int)v595 < 0) {
    unsigned int v248 = -(int)v595;
  }
  LODWORD(v238) = vcvtd_n_s64_f64(v243, 0xFuLL);
  DWORD2(v595) = ((40839 * (v248 >> 1)) >> 14) + 6335439;
  HIDWORD(v595) = v238;
  Taylor_sin_cos(v238, (int *)v596, (int *)v596 + 1);
  uint64_t v249 = HIDWORD(v595);
  int v545 = v234;
  int v516 = v232;
  if (v243 < 0.785398163 || v243 > 2.35619449)
  {
    double v250 = -v243;
    uint64_t v249 = (HIDWORD(v595) - 51472);
    double v251 = v221;
  }
  else
  {
    double v250 = 1.57079633 - v243;
    double v251 = v220;
    double v220 = v221;
  }
  Taylor_sin_cos(v249, (int *)v596, (int *)v596 + 1);
  double v329 = v220 * v220;
  double v330 = v220 * v220 / (v251 * v251);
  double v331 = tan(v250);
  double v332 = v330 + v331 * v331;
  int v333 = (int)(v251 * sqrt(v332));
  *(double *)v334.i64 = cos(v250);
  if (v333 >= 1)
  {
    int v523 = (int)(25000.0 / fabs(*(double *)v334.i64));
    int v522 = v333 - v523;
    uint64_t v336 = LODWORD(v596[0]);
    double v337 = v329 * v332;
    uint64_t v338 = DWORD1(v596[0]);
    int v528 = v595;
    int v529 = SDWORD2(v595) >> 6;
    int v526 = DWORD1(v595);
    int v527 = v333;
    int v537 = xmmword_268466FE0;
    int v538 = DWORD2(xmmword_268466FE0);
    int v539 = DWORD1(xmmword_268466FE0);
    int v536 = DWORD1(gDebug);
    int v568 = gDebug;
    int v339 = 0;
    uint64_t v340 = *(void *)&v596[0];
    do
    {
      double v341 = (double)v339;
      double v342 = v337 + -(v341 * v341) * v330;
      if (v342 < 0.0) {
        double v342 = 0.0;
      }
      int v343 = (int)(v331 * (1.0 / v332) * v341);
      int v344 = (int)(1.0 / v332 * sqrt(v342));
      int v530 = v344;
      int v531 = -v339;
      int v345 = 1;
      int v535 = v339;
      while (1)
      {
        v613[0] = 0;
        LODWORD(v611.f64[0]) = 0;
        unsigned int v534 = v345;
        if (v345 == 2) {
          int v346 = -v343;
        }
        else {
          int v346 = v343;
        }
        int v347 = v344 - v346;
        if (v345 == 2) {
          int v339 = v531;
        }
        uint64_t v348 = v338;
        int v349 = v347 >> 9;
        uint64_t v350 = v336;
        int v351 = (v339 + (int)(v331 * (double)(v344 - v346))) >> 9;
        int v352 = v528 + 8 * (((int)v348 * (v347 >> 9) - v351 * (int)v350) / v529);
        LODWORD(v353) = 102944 - v352;
        if (v352 <= 51472) {
          LODWORD(v353) = v528 + 8 * (((int)v348 * (v347 >> 9) - v351 * (int)v350) / v529);
        }
        uint64_t v353 = v352 >= -51472 ? v353 : (-102944 - v352);
        unsigned int v354 = (int)v353 >= 0 ? v353 : -(int)v353;
        if (v354 >> 8 > 0xC8) {
          break;
        }
        int v576 = v528 + 8 * (((int)v348 * (v347 >> 9) - v351 * (int)v350) / v529);
        int v533 = v346;
        int v355 = -v344 - v346;
        int v356 = v339 + (int)(v331 * (double)v355);
        int v541 = v353;
        Taylor_sin_cos(v353, (int *)v613, (int *)&v611);
        int v357 = LODWORD(v611.f64[0]);
        int v548 = LODWORD(v611.f64[0]);
        if (SLODWORD(v611.f64[0]) < 0) {
          int v357 = -LODWORD(v611.f64[0]);
        }
        unsigned int v564 = ((99658 * v357) >> 15) * (((17965 * v354) >> 23) | 0x8000);
        int v358 = 8 * (((int)v350 * v349 + v351 * (int)v348) / (int)(v564 >> 15));
        LODWORD(v359) = v526 + v358;
        int v360 = ((int)v350 * (v355 >> 9) + (v356 >> 9) * (int)v348) / (int)(v564 >> 15);
        unsigned int v361 = v526 + 8 * v360;
        BOOL v362 = v358 <= 8 * v360;
        if (v358 <= 8 * v360) {
          int v363 = v526 + 8 * v360;
        }
        else {
          int v363 = v526 + v358;
        }
        if (v362) {
          uint64_t v359 = v359;
        }
        else {
          uint64_t v359 = v361;
        }
        signed int v562 = 102944;
        uint64_t v364 = 4294864352;
        int v365 = v234;
        uint64_t v336 = v350;
        if (v363 - (int)v359 <= 205887)
        {
          if ((int)v359 >= -205887)
          {
            if (v363 <= 205886)
            {
              signed int v562 = v363;
              uint64_t v364 = v359;
            }
            else
            {
              signed int v562 = v363 % 0x3243Fu;
              uint64_t v364 = v359 - 205887 * (v363 / 0x3243Fu);
            }
          }
          else
          {
            unsigned int v366 = -(int)v359 % 0x3243Fu;
            uint64_t v364 = -v366;
            signed int v562 = v363 - v359 - v366;
          }
        }
        unsigned int v367 = v613[0];
        unsigned int v368 = 0x18EA2312 / U4sqrt(~(4 * v367 * v367 / 0x95));
        if (v234 >= 1)
        {
          unint64_t v369 = v234 + 1;
          do
          {
            unsigned int v370 = v369 - 2;
            int v371 = *((_DWORD *)v644 + 3 * (v369 - 2) + 2)
                 - ((int)((v368 - ((112313 * v368 + 0x1000000) >> 24)) * v367) >> 15);
            v635.i32[v370] = v371 * v367;
            *((_DWORD *)v680 + v370) = v371 * v371;
            --v369;
          }
          while (v369 > 1);
        }
        if ((int)v364 <= v562)
        {
          uint64_t v372 = v364;
          unsigned int v558 = v576 - 51473;
          int v544 = (int)(v368 * v548 + 0x8000) >> 15;
          unsigned int v555 = 0x30D40000 / (v564 >> 9);
          uint64_t v338 = HIDWORD(v340);
          do
          {
            v582[0] = 0;
            v615[0] = 0;
            int64x2_t v675 = 0u;
            int v373 = 205887;
            uint32x4_t v674 = 0u;
            long long v673 = 0u;
            if ((int)v372 < -102944 || (int v373 = -205887, v374 = v372, (int)v372 > 102943)) {
              uint64_t v374 = (v373 + v372);
            }
            if (v558 < 0xFFFE6DDF)
            {
              if ((v374 & 0x80000000) != 0) {
                int v375 = 102944;
              }
              else {
                int v375 = -102944;
              }
              uint64_t v374 = (v374 + v375);
            }
            int v565 = v372;
            __int32 v560 = v374;
            Taylor_sin_cos(v374, (int *)v582, v615);
            if (v365 < 1)
            {
              unsigned int v393 = 0;
              __int32 v394 = 0;
              int v395 = v562;
LABEL_454:
              uint64_t v396 = 0;
              unsigned int v397 = 1000000 * v393;
              long long v398 = v641;
              while (1)
              {
                unsigned int v399 = HIBYTE(v640.i32[17 * v396 + 2]);
                if (v365 < 1 || v399 > 0xFA) {
                  break;
                }
                uint64_t v400 = 0;
                do
                {
                  int v401 = *((unsigned __int8 *)v398 + v400);
                  int v402 = *((unsigned __int8 *)&v673 + v400++);
                }
                while (v400 < v234 && v401 == v402);
                if (v401 == v402) {
                  goto LABEL_465;
                }
                ++v396;
                v398 += 17;
                if (v396 == 8) {
                  goto LABEL_475;
                }
              }
              if (v399 >= 0xFB) {
                goto LABEL_475;
              }
LABEL_465:
              if ((v396 & 0x80000000) == 0)
              {
                uint64_t v403 = v396;
                v404 = &v640.i32[17 * v396];
                double v406 = (unsigned int *)(v404 + 2);
                unsigned int v405 = v404[2];
                if (v397 < v405) {
                  unsigned int v405 = v397;
                }
                *double v406 = v405 >> 1;
                if (v396)
                {
                  uint64_t v407 = 0;
                  do
                  {
                    if (*v406 >= v640.i32[17 * v407 + 2])
                    {
                      ++v407;
                    }
                    else
                    {
                      long long v408 = &v640.i8[68 * v407];
                      long long v409 = *((_OWORD *)v404 + 3);
                      long long v624 = *((_OWORD *)v404 + 2);
                      long long v625 = v409;
                      LODWORD(v626) = v404[16];
                      long long v410 = *(_OWORD *)v404;
                      *(_OWORD *)&v623[16] = *((_OWORD *)v404 + 1);
                      *(_OWORD *)v623 = v410;
                      uint64_t v411 = v407 + 1;
                      memmove(v408 + 68, v408, 68 * (v403 - v407));
                      long long v412 = v625;
                      *((_OWORD *)v408 + 2) = v624;
                      *((_OWORD *)v408 + 3) = v412;
                      *((_DWORD *)v408 + 16) = v626;
                      int64x2_t v334 = *(int64x2_t *)&v623[16];
                      uint32x4_t v335 = *(uint32x4_t *)v623;
                      *(_OWORD *)long long v408 = *(_OWORD *)v623;
                      *((int64x2_t *)v408 + 1) = v334;
                      uint64_t v407 = v411;
                    }
                  }
                  while (v407 != v403);
                }
                uint64_t v336 = v340;
                uint64_t v338 = HIDWORD(v340);
                goto LABEL_492;
              }
LABEL_475:
              uint64_t v413 = 0;
              __int32 v414 = v541;
              while (v397 >= v640.i32[v413 + 2])
              {
                v413 += 17;
                if (v413 == 136) {
                  goto LABEL_492;
                }
              }
              if (v413 != 119)
              {
                memmove(&v642[v413], &v640.i8[v413 * 4], 476 - v413 * 4);
                __int32 v414 = v541;
              }
              long long v415 = &v640.i32[v413];
              *long long v415 = v414;
              v415[1] = v560;
              v415[2] = v397;
              uint32x4_t v335 = v674;
              *((_OWORD *)v415 + 1) = v673;
              *((uint32x4_t *)v415 + 2) = v335;
              int64x2_t v334 = v675;
              *((int64x2_t *)v415 + 3) = v675;
              v415[16] = v394;
            }
            else
            {
              uint64_t v376 = 0;
              int v377 = 0;
              int v378 = 0;
              int v577 = (v615[0] * v544) >> 15;
              signed int v379 = (signed int)(v582[0] * v544) >> 15;
              int v380 = (v615[0] * v548) >> 15;
              signed int v381 = (signed int)(v582[0] * v548) >> 15;
              int v382 = (_DWORD *)v644 + 1;
              do
              {
                int v383 = *(v382 - 1) - v577;
                int v384 = *v382 - v379;
                int v385 = v635.i32[v376] + v383 * v380 + v384 * v381;
                int v386 = U4sqrt(v383 * v383 + v384 * v384 + *((_DWORD *)v680 + v376));
                if (v385 < 0 && v385 / v386 <= -2857)
                {
                  DWORD1(gDebug) = ++v536;
                  goto LABEL_491;
                }
                if (!v376) {
                  int v377 = LODWORD(__b[0]) - v386;
                }
                int v387 = *((_DWORD *)__b + v376) - v386 - v377;
                unsigned int v388 = *((unsigned __int8 *)&v677 + v376);
                if (*((unsigned char *)&v677 + v376))
                {
                  int v389 = (437 * v387 + 65550) >> 17;
                  if (v389 >= 0) {
                    unsigned int v390 = (437 * v387 + 65550) >> 17;
                  }
                  else {
                    unsigned int v390 = -v389;
                  }
                  *((unsigned char *)&v673 + v376) = v389;
                  if (v390 > v388)
                  {
                    DWORD2(xmmword_268466FE0) = ++v538;
                    goto LABEL_491;
                  }
                  v387 -= (613975 * v389) >> 11;
                }
                *((_DWORD *)v621.f64 + v376) = v387;
                if (v387 >= 0) {
                  unsigned int v391 = v387;
                }
                else {
                  unsigned int v391 = -v387;
                }
                if (v391 >= 0x1A)
                {
                  DWORD1(xmmword_268466FE0) = ++v539;
LABEL_491:
                  int v365 = v234;
                  uint64_t v336 = v340;
                  uint64_t v338 = HIDWORD(v340);
                  int v395 = v562;
                  goto LABEL_492;
                }
                v382 += 3;
                v378 += v387;
                ++v376;
              }
              while (v234 != v376);
              int v365 = v234;
              if (v234 >= 15) {
                int v392 = v378 / v234;
              }
              else {
                int v392 = (v378 * num_SV_Div_Table[v234]) >> 15;
              }
              uint64_t v336 = v340;
              uint64_t v338 = HIDWORD(v340);
              int v395 = v562;
              unsigned int v393 = 0;
              __int32 v394 = v392 + v377;
              long long v416 = &v621;
              uint64_t v417 = v234;
              do
              {
                int v418 = LODWORD(v416->f64[0]);
                long long v416 = (float64x2_t *)((char *)v416 + 4);
                v393 += (v418 - v392) * (v418 - v392);
                if (v393 > 225 * v234)
                {
                  LODWORD(xmmword_268466FE0) = ++v537;
                  goto LABEL_492;
                }
                --v417;
              }
              while (v417);
              if (v393 <= 0x1072) {
                goto LABEL_454;
              }
            }
LABEL_492:
            ++v568;
            unsigned int v419 = v565;
            if (v565 < v395 && v565 > (int)(v562 - v555)) {
              unsigned int v419 = v562 - v555;
            }
            uint64_t v372 = v419 + v555;
          }
          while ((int)v372 <= v395);
          LODWORD(gDebug) = v568;
        }
        else
        {
          uint64_t v338 = HIDWORD(v340);
        }
        int v333 = v527;
        int v339 = v535;
        int v343 = v533;
        int v344 = v530;
        if (v535)
        {
          int v345 = v534 + 1;
          int v339 = v535;
          if (v534 < 2) {
            continue;
          }
        }
        goto LABEL_503;
      }
      EvLog_d("SearchEllipse: Stop Candidate search near the poles - ", v353);
      int v537 = xmmword_268466FE0;
      int v538 = DWORD2(xmmword_268466FE0);
      int v539 = DWORD1(xmmword_268466FE0);
      int v536 = DWORD1(gDebug);
      int v568 = gDebug;
      int v339 = v333;
      uint64_t v336 = v350;
      uint64_t v338 = v348;
LABEL_503:
      if (v339 < v333 && v339 > v522) {
        int v339 = v522;
      }
      v339 += v523;
    }
    while (v339 < v333);
  }
  if (v640.i32[2] < 0xFB000000)
  {
    uint64_t v422 = 0;
    v423 = (char *)v641;
    int64x2_t v334 = vdupq_n_s64(0x3F00000000000000uLL);
    float64x2_t v569 = (float64x2_t)v334;
    do
    {
      v424 = &v640.i32[17 * v422];
      v426 = v424 + 2;
      unsigned int v425 = v424[2];
      if (v425 >= 0xFB000000) {
        break;
      }
      v582[0] = 0;
      v427.i64[0] = (int)*(void *)v424;
      v427.i64[1] = (int)HIDWORD(*(void *)v424);
      float64x2_t v578 = vcvtq_f64_s64(v427);
      float64x2_t v621 = vmulq_f64(v578, v569);
      double v622 = 0.0;
      Geo2ECEF((uint64_t)&v621, (uint64_t)&WGS84_Datum, (double *)v623);
      int v428 = 1000 * v641[17 * v422 + 12];
      int64x2_t v635 = *(int64x2_t *)v623;
      *(double *)&v636.i64[1] = (double)v428;
      v636.i64[0] = *(void *)&v623[16];
      EvLog_v("SearchEllipse: Best Points: %d  %g %g  %u", v545, 0.00174852843 * v578.f64[0], vmuld_lane_f64(0.00174852843, v578, 1), v425);
      if (v545 >= 1)
      {
        v429 = v680;
        v430 = v532;
        v431 = v423;
        uint64_t v432 = v571;
        do
        {
          int v434 = *v430++;
          int v433 = v434;
          int v435 = *v431++;
          *v429++ = (double)(v433 - 299792 * v435);
          --v432;
        }
        while (v432);
      }
      if (CompPr_LSQ4((double (*)[3])v598, v680, v545, (double *)v635.i64, (int *)&v673, v582, v621.f64))
      {
        int64x2_t v334 = vcvtq_n_s64_f64(v621, 0xFuLL);
        *(int32x2_t *)v334.i8 = vmovn_s64(v334);
        *(void *)v424 = v334.i64[0];
        unsigned int v436 = v582[0];
        _DWORD *v426 = v582[0];
        if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
          EvLog_v("SearchEllipse: LSQ Upd %d %d   ResSq %d", v334.i32[0], v334.i32[1], v436);
        }
      }
      else
      {
        _DWORD *v426 = -83886080;
        if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
          EvLog("SearchEllipse: ERROR DID NOT CONVERGE!");
        }
      }
      ++v422;
      v423 += 68;
    }
    while (v422 != 8);
  }
  unint64_t v437 = 0;
  v438 = &v643;
  uint64_t v439 = -7;
  long long v13 = v519;
  long long v20 = (double *)(g_Crc32_RemTable + 920);
  do
  {
    if (v437 > 6)
    {
      int v442 = v437;
    }
    else
    {
      v440 = v438;
      uint64_t v441 = v439;
      int v442 = v437;
      do
      {
        unsigned int v443 = *v440;
        v440 += 17;
        if (v443 < v640.i32[17 * v442 + 2]) {
          int v442 = v441 + 8;
        }
        BOOL v168 = __CFADD__(v441++, 1);
      }
      while (!v168);
    }
    if (v437 != v442)
    {
      v444 = &v640.i32[17 * v437];
      long long v445 = *((_OWORD *)v444 + 3);
      long long v637 = *((_OWORD *)v444 + 2);
      long long v638 = v445;
      __int32 v639 = v444[16];
      int64x2_t v446 = *(int64x2_t *)v444;
      uint32x4_t v636 = *((uint32x4_t *)v444 + 1);
      int64x2_t v635 = v446;
      v447 = &v640.i32[17 * v442];
      *(_OWORD *)v444 = *(_OWORD *)v447;
      long long v449 = *((_OWORD *)v447 + 2);
      long long v448 = *((_OWORD *)v447 + 3);
      long long v450 = *((_OWORD *)v447 + 1);
      v444[16] = v447[16];
      *((_OWORD *)v444 + 2) = v449;
      *((_OWORD *)v444 + 3) = v448;
      *((_OWORD *)v444 + 1) = v450;
      v447[16] = v639;
      long long v451 = v638;
      *((_OWORD *)v447 + 2) = v637;
      *((_OWORD *)v447 + 3) = v451;
      int64x2_t v334 = v635;
      uint32x4_t v335 = v636;
      *(int64x2_t *)v447 = v635;
      *((uint32x4_t *)v447 + 1) = v335;
    }
    ++v437;
    ++v439;
    v438 += 17;
  }
  while (v437 != 8);
  for (uint64_t j = 0; j != 136; j += 17)
  {
    if (v640.i32[j + 2] >= 0xFB000000) {
      break;
    }
    EvLog_v("SearchEllipse: Best Points Upd: %d  %g %g  %u", v545, (double)v640.i32[j] * 0.00174852843, (double)v640.i32[j + 1] * 0.00174852843, v640.i32[j + 2]);
  }
  unsigned int v453 = v640.u32[2];
  BOOL v454 = v643 < 0xFB000000 && v545 <= 4;
  unsigned __int8 v19 = (_WORD *)&unk_26AE65000;
  if (v454)
  {
    int v455 = v516;
    unint64_t v258 = v525;
    if (v545 == v515 && (int v456 = 10000 * v545, v640.i32[2] < (10000 * v545)))
    {
      if (v640.i32[2] >= (1089 * v545)) {
        int v456 = 90000 * v545;
      }
    }
    else
    {
      int v456 = 1000000 * v545;
    }
    if (v643 < v456 + v640.i32[2])
    {
      EvLog_v("Ellipse Candidate INVALID as not better than the next: 0 %g %g %d   %d %g %g  %d   %d", (double)v640.i32[0] * 0.00174852843, (double)v640.i32[1] * 0.00174852843, v640.i32[2], 1, (double)v642[0] * 0.00174852843, (double)v642[1] * 0.00174852843, v643, v545);
      unsigned int v453 = -83886080;
    }
  }
  else
  {
    unint64_t v258 = v525;
    int v455 = v516;
  }
  int v481 = 16000000 * v545;
  if (v545 <= 5) {
    int v481 = 0;
  }
  v334.i32[0] = v453;
  v335.i32[0] = v455 + v481;
  dword_268466F98 = v453 / v545;
  v482.i64[0] = v640.i32[0];
  v482.i64[1] = v640.i32[1];
  BOOL v273 = v453 < v455 + v481;
  int8x16_t __x = vandq_s8((int8x16_t)vmulq_f64(vcvtq_f64_s64(v482), (float64x2_t)vdupq_n_s64(0x3F00000000000000uLL)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(v335, (uint32x4_t)v334), 0));
  double v589 = 0.0;
LABEL_595:
  if (v19[395] >= 2u)
  {
    uint64_t v485 = mach_continuous_time();
    int32x4_t v486 = v524;
    v486.i32[2] = (unint64_t)(v20[61] * (double)v485);
    int32x4_t v524 = v486;
  }
  if (v273)
  {
    Geo2ECEF((uint64_t)&__x, (uint64_t)&WGS84_Datum, (double *)v644);
    *(_OWORD *)v593 = v644[0];
    *(void *)&v593[16] = *(void *)&v644[1];
    char v488 = CompVelDoLs(v258, v520, v13, (double *)v593, (uint64_t)&v585, v487);
  }
  else
  {
    char v488 = 0;
  }
  if (v19[395] >= 2u)
  {
    uint64_t v489 = mach_continuous_time();
    int32x4_t v490 = v524;
    v490.i32[3] = (unint64_t)(v20[61] * (double)v489);
    int32x4_t v524 = v490;
  }
  uint64_t v491 = __x.i64[0];
  if (v488)
  {
    __double2 v492 = __sincos_stret(*(double *)__x.i64);
    uint64_t v493 = __x.i64[1];
    __double2 v494 = __sincos_stret(*(double *)&__x.i64[1]);
    uint64_t v495 = 0;
    v598[0] = -(v492.__sinval * v494.__cosval);
    v598[1] = -(v492.__sinval * v494.__sinval);
    v496 = &v598[2];
    v598[2] = v492.__cosval;
    v598[3] = -v494.__sinval;
    long long v599 = *(unint64_t *)&v494.__cosval;
    *(double *)&long long v600 = -(v492.__cosval * v494.__cosval);
    *((double *)&v600 + 1) = -(v492.__cosval * v494.__sinval);
    *(double *)&long long v601 = -v492.__sinval;
    long long v497 = v585;
    double v498 = *(double *)&v586;
    do
    {
      double v499 = *(v496 - 1) * *((double *)&v497 + 1) + *(v496 - 2) * *(double *)&v497;
      double v500 = *v496;
      v496 += 3;
      *(double *)&v640.i64[v495++] = v499 + v500 * v498;
    }
    while (v495 != 3);
    double v501 = *(double *)&v640.i64[1] * *(double *)&v640.i64[1] + *(double *)v640.i64 * *(double *)v640.i64;
    if (v517 >= 5) {
      int v502 = 5;
    }
    else {
      int v502 = v517;
    }
    if (v502 <= 3) {
      int v502 = 3;
    }
    double v503 = fabs(*(double *)v641);
    if (v503 < 10.0)
    {
      double v504 = User_Velocity_Compensation[v502 - 3] * 1.5;
      BOOL v111 = v501 < v504 * v504;
    }
    else
    {
      BOOL v111 = 0;
    }
    dword_268466FF4 = (int)sqrt(v501);
    dword_268466FF8 = (int)v503;
    if (!v111) {
      dword_268466FC8 = 6;
    }
  }
  else
  {
    BOOL v111 = 0;
    uint64_t v493 = __x.i64[1];
  }
  v518->i64[0] = v491;
  v518->i64[1] = v493;
  xmmword_268466FA0 = v579;
  qword_268466FB0 = v580;
LABEL_617:
  if (v19[395] >= 3u) {
    EvLog_v("CAP Time Waypoints %u %d %d %d %d %d %d %d", v521.i32[0], v521.i32[1] - v521.i32[0], v521.i32[2] - v521.i32[0], v521.i32[3] - v521.i32[0], v524.i32[0] - v521.i32[0], v524.i32[1] - v521.i32[0], v524.i32[2] - v521.i32[0], v524.i32[3] - v521.i32[0]);
  }
  return v111;
}

uint64_t CompVelDoLs(int (*a1)[3], __int16 (*a2)[3], __int16 *a3, double *a4, uint64_t a5, double *a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  double v8 = v7;
  uint64_t v10 = v9;
  uint64_t v81 = v11;
  uint64_t v13 = v12;
  uint64_t v14 = v6;
  uint64_t v127 = *MEMORY[0x263EF8340];
  bzero(v123, 0xA80uLL);
  uint64_t v15 = 0;
  int v16 = 0;
  v88[59] = 0;
  char v89 = 0;
  memset(v88, 0, 457);
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  char v92 = 0;
  uint64_t v93 = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  int v94 = 2;
  uint64_t v96 = (double *)&v87;
  int v95 = v85;
  int32x4_t v97 = v86;
  __double2 v98 = &v84;
  __double2 v99 = &v83;
  v88[58] = 0;
  v88[54] = 0;
  long long v101 = 0u;
  long long v100 = 0u;
  dword_268466FC8 = 0;
  memset(v85, 0, sizeof(v85));
  double v117 = 0.0;
  long long v116 = 0u;
  long long v115 = 0u;
  uint64_t v17 = (_DWORD *)(v14 + 8);
  int v18 = -1;
  memset(v114, 0, sizeof(v114));
  do
  {
    v86[v15] = 0x3FF0000000000000;
    if (*(v17 - 2) && *(v17 - 1) && *v17)
    {
      v85[v15] = 1;
      ++v16;
    }
    else if (v18 == -1)
    {
      int v18 = v15;
    }
    v17 += 3;
    ++v15;
  }
  while (v15 != 48);
  HIDWORD(v93) = v18;
  if (v16 < 3) {
    return 0;
  }
  if (v18 == -1) {
    goto LABEL_18;
  }
  long long v20 = &v123[7 * v18];
  v125[0] = 0;
  LODWORD(v118) = 0;
  *(void *)float64_t v82 = 0;
  long long v121 = *v10;
  uint64_t v122 = *((void *)v10 + 2);
  ECEF2Geo((double *)&v121, (uint64_t)&WGS84_Datum, (uint64_t)&v119);
  double v21 = v120;
  if (v120 >= 3.14159265)
  {
    double v22 = -6.28318531;
    goto LABEL_16;
  }
  if (v120 < -3.14159265)
  {
    double v22 = 6.28318531;
LABEL_16:
    double v21 = v120 + v22;
    double v120 = v120 + v22;
  }
  double v23 = v119;
  __double2 v24 = __sincos_stret(v119);
  __double2 v25 = __sincos_stret(v21);
  v114[0] = -(v24.__sinval * v25.__cosval);
  v114[1] = -(v24.__sinval * v25.__sinval);
  v114[2] = v24.__cosval;
  v114[3] = -v25.__sinval;
  long long v115 = *(unint64_t *)&v25.__cosval;
  *(double *)&long long v116 = -(v24.__cosval * v25.__cosval);
  *((double *)&v116 + 1) = -(v24.__cosval * v25.__sinval);
  double v117 = -v24.__sinval;
  LODWORD(v26) = vcvtd_n_s64_f64(v23, 0xFuLL);
  uint64_t v27 = Taylor_sin_cos(v26, v125, (int *)&v118);
  LODWORD(v27) = vcvtd_n_s64_f64(v21, 0xFuLL);
  Taylor_sin_cos(v27, &v82[1], v82);
  double v28 = (double)(v82[1] * (int)v118);
  *long long v20 = (double)((int)v118 * v82[0]) * 9.31322575e-10;
  v20[1] = v28 * 9.31322575e-10;
  _OWORD v20[2] = (double)v125[0] * 0.0000305175781;
LABEL_18:
  unsigned int v29 = 0;
  *(_DWORD *)((char *)&v90 + 3) = -1;
  LODWORD(v90) = 50462976;
  HIBYTE(v90) = 4;
  LODWORD(v91) = 1;
  uint64_t v80 = v14;
  int v30 = (int *)(v14 + 4);
  double v31 = 0.0;
  do
  {
    unsigned int v32 = v29;
    int v33 = v30;
    uint64_t v34 = v96;
    int v35 = (__int16 *)(v13 + 4);
    uint64_t v36 = v81;
    signed int v37 = v96;
    for (uint64_t i = 2; i != 338; i += 7)
    {
      int v39 = *(v33 - 1);
      int v40 = *v33;
      int v41 = v33[1];
      if (!*(void *)(v33 - 1))
      {
        if (!v41) {
          break;
        }
        int v40 = 0;
      }
      double v42 = &v123[i];
      v33 += 3;
      double v43 = (double)v39 - *(double *)v10;
      double v44 = (double)v40 - *((double *)v10 + 1);
      double v45 = (double)v41 - *((double *)v10 + 2);
      double v46 = 1.0 / sqrt(v44 * v44 + v43 * v43 + v45 * v45);
      int v47 = *v36++;
      *v37++ = (double)v47 * 0.190293673
             - v46
             * (v44 * -(v8[1] - (double)*(v35 - 1) * 0.190293673)
              + v43 * -(*v8 - (double)*(v35 - 2) * 0.190293673)
              + v45 * -(v8[2] - (double)*v35 * 0.190293673))
             - v8[3];
      *(v42 - 2) = v43 * v46;
      *(v42 - 1) = v44 * v46;
      *double v42 = v45 * v46;
      v35 += 3;
    }
    if (v16 <= 4)
    {
      uint64_t v48 = 0;
      uint64_t v49 = SHIDWORD(v93);
      v95[SHIDWORD(v93)] = 1;
      double v50 = *v8;
      double v51 = v8[1];
      double v52 = v8[2];
      uint64_t v53 = &v114[2];
      do
      {
        double v54 = *(v53 - 1) * v51 + *(v53 - 2) * v50;
        double v55 = *v53;
        v53 += 3;
        *(double *)&v125[v48] = v54 + v55 * v52;
        v48 += 2;
      }
      while (v48 != 6);
      v34[v49] = -v126;
    }
    BOOL v56 = NK_Least_Squares_Core(v123, (double (*)[3])v114, 4, 0, 0, (uint64_t)&v121, (uint64_t)&v119, &v118, (uint64_t)v88);
    uint64_t v57 = 0;
    double v58 = 0.0;
    do
    {
      if ((*((char *)&v90 + v57) & 0x80000000) == 0)
      {
        uint64_t v59 = *((unsigned __int8 *)&v90 + v57);
        double v60 = *(double *)&v88[v59];
        v8[v59] = v8[v59] + v60;
        double v58 = v58 + v60 * v60;
      }
      ++v57;
    }
    while (v57 != 7);
    BOOL v62 = (v58 <= v31 || v32 == 0) && v56;
    ++byte_268466FD2;
    if (!v62)
    {
      if (v32 > 9) {
        int v79 = 1;
      }
      else {
        int v79 = 2;
      }
      goto LABEL_59;
    }
    if (v32 > 8) {
      break;
    }
    unsigned int v29 = v32 + 1;
    double v31 = v58;
  }
  while (v58 > 1.0);
  if (v32 > 8)
  {
    int v79 = 1;
LABEL_59:
    double v68 = &unk_268466000;
    goto LABEL_60;
  }
  uint64_t v63 = 0;
  uint64_t v64 = v96;
  double v65 = (double *)&v124;
  BOOL v66 = (int *)(v80 + 8);
  uint64_t v67 = (__int16 *)(v13 + 4);
  double v68 = (_DWORD *)&unk_268466000;
  do
  {
    int v69 = *(v66 - 2);
    int v70 = *(v66 - 1);
    int v71 = *v66;
    if (!*((void *)v66 - 1))
    {
      if (!v71) {
        break;
      }
      int v70 = 0;
    }
    v66 += 3;
    double v72 = (double)v69 - *(double *)v10;
    double v73 = (double)v70 - *((double *)v10 + 1);
    double v74 = (double)v71 - *((double *)v10 + 2);
    double v75 = 1.0 / sqrt(v73 * v73 + v72 * v72 + v74 * v74);
    v64[v63] = (double)v81[v63] * 0.190293673
             - v75
             * (v73 * -(v8[1] - (double)*(v67 - 1) * 0.190293673)
              + v72 * -(*v8 - (double)*(v67 - 2) * 0.190293673)
              + v74 * -(v8[2] - (double)*v67 * 0.190293673))
             - v8[3];
    *(v65 - 2) = v72 * v75;
    *(v65 - 1) = v73 * v75;
    *double v65 = v74 * v75;
    v65 += 7;
    ++v63;
    v67 += 3;
  }
  while (v63 != 48);
  uint64_t v76 = 0;
  double v77 = 0.0;
  do
  {
    if (v85[v76]) {
      double v77 = v77 + v64[v76] * v64[v76];
    }
    ++v76;
  }
  while (v76 != 48);
  double v78 = (double)v16 * 4.0;
  if (v16 >= 5) {
    double v78 = 400.0;
  }
  if (v77 > v78)
  {
    int v79 = 4;
LABEL_60:
    uint64_t result = 0;
    v68[1010] = v79;
    return result;
  }
  return 1;
}

uint64_t CAP_LSQ4_Core(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 32) = 0x426D1A94A2000000;
  uint64_t v4 = a3 + 32;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(a3 + 48) = 0x426D1A94A2000000;
  *(void *)(a3 + 72) = 0x426D1A94A2000000;
  *(void *)(a3 + 104) = 0x426D1A94A2000000;
  uint64_t v5 = a2 + (*(_DWORD *)(a3 + 152) >= 0);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v15 = 0;
    double v7 = (double *)(a1 + 16);
    do
    {
      if (v6 == *(_DWORD *)(a3 + 152)) {
        double v8 = 0.0;
      }
      else {
        double v8 = 1.0;
      }
      float64x2_t v19 = vnegq_f64(*(float64x2_t *)(v7 - 2));
      double v9 = *v7;
      v7 += 3;
      double v20 = -v9;
      double v21 = v8;
      uint64_t v10 = *(void *)(a3 + 168);
      uint64_t v22 = *(void *)(*(void *)(a3 + 160) + 8 * v6);
      umeas(v4, 4u, *(double *)(v10 + 8 * v6++), v19.f64, v18, v17, (double *)&v15, 1.0e20);
    }
    while (v5 != v6);
  }
  ud2var(v4, 4u, 1, 4u, v16);
  if (v16[0] > 1000000000.0) {
    return 0;
  }
  uint64_t v12 = 1;
  while (v12 != 4)
  {
    double v13 = v16[v12++];
    if (v13 > 1000000000.0)
    {
      if ((unint64_t)(v12 - 2) < 3) {
        return 0;
      }
      break;
    }
  }
  long long v14 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)a3 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a3 + 16) = v14;
  return 1;
}

uint64_t CompPr_LSQ4(double (*a1)[3], double *a2, int a3, double *a4, int *a5, unsigned int *a6, double *a7)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v105 = 0;
  long long v103 = 0u;
  memset(v104, 0, sizeof(v104));
  long long v102 = 0u;
  long long v107 = v101;
  long long v108 = __b;
  unsigned int v106 = -1;
  dword_268466FC8 = 0;
  memset(v109, 0, sizeof(v109));
  unint64_t v11 = a3;
  long long v110 = 0u;
  long long v111 = 0u;
  double v112 = 0.0;
  if (a3 < 1)
  {
    __b[a3] = 5.0;
    unsigned int v106 = a3;
    int v29 = a3;
  }
  else
  {
    memset_pattern16(__b, &unk_22BB0E9A0, 8 * a3);
    double v12 = 5.0;
    if (a3 < 5 || (double v12 = 25.0, a3 < 9))
    {
      __b[v11] = v12;
      unsigned int v106 = a3;
    }
    uint64_t v13 = 0;
    double v14 = *a4;
    float64x2_t v15 = *(float64x2_t *)(a4 + 1);
    double v16 = a4[3];
    do
    {
      uint64_t v17 = &(*a1)[3 * v13];
      double v18 = *v17;
      double v19 = *v17 - v14;
      *(double *)__double2 v99 = v19;
      float64x2_t v20 = *(float64x2_t *)(v17 + 1);
      float64x2_t v21 = vsubq_f64(v20, v15);
      *(float64x2_t *)&v99[8] = v21;
      double v22 = 0.0;
      uint64_t v23 = 2;
      do
      {
        double v22 = v22 + *(double *)&v99[8 * v23] * *(double *)&v99[8 * v23];
        unint64_t v24 = v23-- + 1;
      }
      while (v24 > 1);
      uint64_t v25 = 0;
      uint64_t v26 = &v113[3 * v13];
      double v27 = sqrt(v22);
      *(double *)uint64_t v26 = v19 / v27;
      *(float64x2_t *)(v26 + 1) = vdivq_f64(v21, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0));
      double v114 = -0.0000729211515 * v20.f64[0];
      double v115 = v18 * 0.0000729211515;
      double v116 = 0.0;
      double v28 = 0.0;
      do
      {
        double v28 = v28 + *(double *)((char *)&v114 + v25) * *(double *)&v99[v25];
        v25 += 8;
      }
      while (v25 != 24);
      v101[v13] = a2[v13] - (v27 + v28 * -0.00000000333564095) - v16;
      ++v13;
    }
    while (v13 != v11);
    int v29 = a3;
  }
  unsigned int v30 = 0;
  int v95 = 0;
  double v92 = (double)v29 * 25.0;
  double v31 = 0.0;
  while (1)
  {
    unsigned int v96 = v30;
    uint64_t v32 = v106;
    if ((v106 & 0x80000000) == 0)
    {
      int v33 = v107;
      *(void *)int32x4_t v97 = 0;
      *(void *)__double2 v98 = 0;
      *(_OWORD *)__double2 v99 = *(_OWORD *)a4;
      *(double *)&v99[16] = a4[2];
      ECEF2Geo((double *)v99, (uint64_t)&WGS84_Datum, (uint64_t)&v114);
      double v35 = v115;
      double v36 = -6.28318531;
      int v94 = v33;
      if (v115 >= 3.14159265 || (double v36 = 6.28318531, v115 < -3.14159265))
      {
        double v35 = v115 + v36;
        double v115 = v115 + v36;
      }
      signed int v37 = (double *)&v113[3 * v32];
      LODWORD(v34) = vcvtd_n_s64_f64(v114, 0xFuLL);
      uint64_t v38 = Taylor_sin_cos(v34, &v98[1], v98);
      LODWORD(v38) = vcvtd_n_s64_f64(v35, 0xFuLL);
      Taylor_sin_cos(v38, &v97[1], v97);
      double v39 = (double)(v97[1] * v98[0]);
      double *v37 = (double)(v98[0] * v97[0]) * 9.31322575e-10;
      v37[1] = v39 * 9.31322575e-10;
      v37[2] = (double)v98[1] * 0.0000305175781;
      int v29 = a3;
      v94[v32] = v116;
    }
    if ((CAP_LSQ4_Core((uint64_t)v113, v29, (uint64_t)&v102) & 1) == 0)
    {
      uint64_t result = 0;
      *a5 = v96 + 1;
      dword_268466FC8 = 2;
      return result;
    }
    double v40 = *((double *)&v102 + 1);
    double v41 = *(double *)&v103;
    if (*((double *)&v103 + 1) > 1.0e10
      || *(double *)&v102 > 1.0e10
      || *((double *)&v102 + 1) > 1.0e10
      || *(double *)&v103 > 1.0e10)
    {
      EvLog_v("CompPR_LSQ4: StateVec Innovation Out Of Range! %f %f %f %f", *((double *)&v103 + 1), *(double *)&v102, *((double *)&v102 + 1), *(double *)&v103);
      return 0;
    }
    double v42 = a4[2];
    double v43 = *((double *)&v103 + 1) + a4[3];
    double v44 = a4[1];
    double v45 = *(double *)&v102 + *a4;
    double v46 = *((double *)&v102 + 1) + v44;
    *a4 = v45;
    a4[1] = v40 + v44;
    double v47 = v41 + v42;
    a4[2] = v41 + v42;
    a4[3] = v43;
    if (v29 >= 1) {
      break;
    }
    double v62 = 0.0;
    unsigned int v49 = v96;
    if (v96) {
      goto LABEL_36;
    }
LABEL_46:
    int v69 = v49 + 1;
    if (v49 <= 3)
    {
      unsigned int v30 = v49 + 1;
      double v31 = v62;
      if (v95 != 2) {
        continue;
      }
    }
    goto LABEL_51;
  }
  uint64_t v48 = 0;
  unsigned int v49 = v96;
  do
  {
    double v50 = &(*a1)[3 * v48];
    double v51 = *v50;
    double v52 = v50[1];
    double v53 = *v50 - v45;
    *(double *)__double2 v99 = v53;
    *(double *)&v99[8] = v52 - v46;
    double v54 = v50[2] - v47;
    *(double *)&v99[16] = v54;
    double v55 = 0.0;
    uint64_t v56 = 2;
    do
    {
      double v55 = v55 + *(double *)&v99[8 * v56] * *(double *)&v99[8 * v56];
      unint64_t v57 = v56-- + 1;
    }
    while (v57 > 1);
    uint64_t v58 = 0;
    uint64_t v59 = (double *)&v113[3 * v48];
    double v60 = sqrt(v55);
    *uint64_t v59 = v53 / v60;
    v59[1] = (v52 - v46) / v60;
    v59[2] = v54 / v60;
    double v114 = v52 * -0.0000729211515;
    double v115 = v51 * 0.0000729211515;
    double v116 = 0.0;
    double v61 = 0.0;
    do
    {
      double v61 = v61 + *(double *)((char *)&v114 + v58) * *(double *)&v99[v58];
      v58 += 8;
    }
    while (v58 != 24);
    v101[v48] = a2[v48] - (v60 + v61 * -0.00000000333564095) - v43;
    ++v48;
  }
  while (v48 != v11);
  double v62 = 0.0;
  uint64_t v63 = v101;
  unint64_t v64 = v11;
  do
  {
    double v65 = *v63++;
    double v62 = v62 + v65 * v65;
    --v64;
  }
  while (v64);
  if (!v96) {
    goto LABEL_46;
  }
LABEL_36:
  if (v62 >= v92 && v62 * 8.0 <= v31)
  {
    if (v62 * 128.0 > v31)
    {
      if (v95 == 1) {
        int v67 = 2;
      }
      else {
        int v67 = 1;
      }
      int v95 = v67;
    }
    goto LABEL_46;
  }
  int v69 = v49 + 1;
LABEL_51:
  *a5 = v69;
  double v114 = v45;
  double v115 = v46;
  double v116 = v47;
  ECEF2Geo(&v114, (uint64_t)&WGS84_Datum, (uint64_t)a7);
  double v70 = a7[1];
  if (v70 >= 3.14159265)
  {
    double v71 = -6.28318531;
LABEL_55:
    double v70 = v70 + v71;
    a7[1] = v70;
  }
  else if (v70 < -3.14159265)
  {
    double v71 = 6.28318531;
    goto LABEL_55;
  }
  __double2 v72 = __sincos_stret(*a7);
  __double2 v73 = __sincos_stret(v70);
  v109[0] = -(v72.__sinval * v73.__cosval);
  v109[1] = -(v72.__sinval * v73.__sinval);
  v109[2] = v72.__cosval;
  v109[3] = -v73.__sinval;
  long long v110 = *(unint64_t *)&v73.__cosval;
  *(double *)&long long v111 = -(v72.__cosval * v73.__cosval);
  *((double *)&v111 + 1) = -(v72.__cosval * v73.__sinval);
  double v112 = -v72.__sinval;
  if (a3 < 1)
  {
    char v75 = 1;
    char v82 = 1;
  }
  else
  {
    unint64_t v74 = 0;
    char v75 = 1;
    do
    {
      uint64_t v76 = 2;
      do
      {
        *(double *)&v99[8 * v76] = (*a1)[v76] - a4[v76];
        unint64_t v77 = v76-- + 1;
      }
      while (v77 > 1);
      double v78 = -(v72.__cosval * v73.__sinval) * *(double *)&v99[8]
          + -(v72.__cosval * v73.__cosval) * *(double *)v99
          + -v72.__sinval * *(double *)&v99[16];
      if (v78 > 0.0)
      {
        double v79 = 0.0;
        uint64_t v80 = 2;
        do
        {
          double v79 = v79 + *(double *)&v99[8 * v80] * *(double *)&v99[8 * v80];
          unint64_t v81 = v80-- + 1;
        }
        while (v81 > 1);
        if (-v78 / sqrt(v79) < -0.087155743) {
          char v75 = 0;
        }
      }
      char v82 = v75;
      if ((v75 & 1) == 0) {
        break;
      }
      ++v74;
      ++a1;
    }
    while (v74 < v11);
  }
  int v83 = v75 & 1;
  if ((v82 & (v62 > 225000000.0)) != 0) {
    int v84 = 0;
  }
  else {
    int v84 = v83;
  }
  if (a3 <= 5 && v84)
  {
    Comp_NEDvar_UDU((uint64_t)v104, 4u, 0, (double (*)[3])v109, (double *)v99);
    int v85 = 0;
    if (*(double *)&v99[16] < 100000000.0)
    {
      int v86 = (int)a7[2];
      int v87 = 1000 * U4sqrt((int)*(double *)&v99[16]);
      if (v87 <= 500) {
        int v87 = 500;
      }
      if (v87 + 18000 > v86 && -500 - v87 < v86) {
        int v85 = v84;
      }
      else {
        int v85 = 0;
      }
    }
    int v84 = v85;
  }
  if (v84)
  {
    *a6 = v62;
    return 1;
  }
  return 0;
}

void *GNSS_Init_p_list(gnss::GnssAdaptDevice *a1)
{
  g_GN_GPS_Data_p_list = 0u;
  *(_OWORD *)&qword_26AE66C58 = 0u;
  xmmword_26AE66C68 = 0u;
  *(_OWORD *)&qword_26AE66C78 = 0u;
  xmmword_26AE66C88 = 0u;
  *(_OWORD *)&qword_26AE66C98 = 0u;
  xmmword_26AE66CA8 = 0u;
  *(_OWORD *)&qword_26AE66CB8 = 0u;
  xmmword_26AE66CC8 = 0u;
  unk_26AE66CD8 = 0u;
  xmmword_26AE66CE8 = 0u;
  unk_26AE66CF8 = 0u;
  xmmword_26AE66D08 = 0u;
  xmmword_26AE66D18 = 0u;
  xmmword_26AE66D28 = 0u;
  xmmword_26AE66D38 = 0u;
  *((void *)&g_GN_GPS_Data_p_list + 1) = &unk_26AE77990;
  qword_26AE66BF8 = (uint64_t)&g_DB_Raw_Meas;
  qword_26AE66C00 = (uint64_t)&g_DB_SV_Subframes;
  unk_26AE66C08 = &g_DB_SV_AzEl;
  qword_26AE66C10 = (uint64_t)&g_DB_Acq_Aid_Table;
  xmmword_26AE66D48 = 0u;
  xmmword_26AE66D58 = 0u;
  qword_26AE66C18 = (uint64_t)&g_DB_Time_Sync;
  qword_26AE66C20 = (uint64_t)&g_DB_SV_Nav_Mess;
  *(void *)&xmmword_26AE66C28 = &unk_26AE77EB8;
  *((void *)&xmmword_26AE66C28 + 1) = &xmmword_26AEA4A20;
  qword_26AE66C38 = (uint64_t)&g_DB_GNSS_Soln;
  unk_26AE66C40 = &g_DB_Nav_Soln;
  xmmword_26AE66D68 = 0u;
  *(void *)&xmmword_26AE66C48 = &g_DB_SV_State_Table;
  *((void *)&xmmword_26AE66C48 + 1) = &g_DB_Track_Meas;
  qword_26AE66C58 = (uint64_t)&g_DB_Sensor;
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(a1))
  {
    if (!_MergedGlobals_9) {
      _MergedGlobals_9 = (uint64_t)malloc_type_malloc(0x2068uLL, 0x10000405140872EuLL);
    }
    if (!qword_26AE77960) {
      qword_26AE77960 = (uint64_t)malloc_type_malloc(0x128uLL, 0x10300408C5C66BBuLL);
    }
    if (!qword_26AE77968) {
      qword_26AE77968 = (uint64_t)malloc_type_malloc(0x6CuLL, 0x100004024435D43uLL);
    }
    if (!qword_26AE77970) {
      qword_26AE77970 = (uint64_t)malloc_type_malloc(0x3F8uLL, 0x10000402D7176F6uLL);
    }
    unsigned __int16 v1 = (gnss::GnssAdaptDevice *)qword_26AE77978;
    if (!qword_26AE77978)
    {
      unsigned __int16 v1 = (gnss::GnssAdaptDevice *)malloc_type_malloc(0x2804uLL, 0x10000407E7A484BuLL);
      qword_26AE77978 = (uint64_t)v1;
    }
  }
  else
  {
    unsigned __int16 v1 = (gnss::GnssAdaptDevice *)qword_26AE77978;
  }
  qword_26AE66C60 = _MergedGlobals_9;
  xmmword_26AE66C68 = *(_OWORD *)&qword_26AE77960;
  qword_26AE66C78 = qword_26AE77970;
  unk_26AE66C80 = v1;
  *(void *)&xmmword_26AE66C88 = &g_G5K_ME_SD;
  *((void *)&xmmword_26AE66C88 + 1) = &g_SV_Gen_Meas_SD;
  qword_26AE66C98 = (uint64_t)&g_Nav_Kalman_SD;
  unk_26AE66CA0 = &g_SV_Data_Decode_SD;
  *(void *)&xmmword_26AE66CA8 = &xmmword_26AE77BF4;
  *((void *)&xmmword_26AE66CA8 + 1) = &unk_26AE77A38;
  int v2 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v1);
  BOOL v3 = (gnss::GnssAdaptDevice *)qword_26AE77980;
  if (v2 && !qword_26AE77980)
  {
    BOOL v3 = (gnss::GnssAdaptDevice *)malloc_type_malloc(0x207538uLL, 0x1030040D565750FuLL);
    qword_26AE77980 = (uint64_t)v3;
  }
  qword_26AE66CB8 = (uint64_t)v3;
  unk_26AE66CC0 = &g_Fused_Nav_SD;
  *((void *)&xmmword_26AE66CC8 + 1) = &g_Nav_Kalman_WD;
  unk_26AE66CD8 = &xmmword_26AE77A70;
  qword_26AE66CE0 = (uint64_t)&unk_26AE779A4;
  int v4 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v3);
  uint64_t v5 = (void *)qword_26AE77988;
  if (v4 && !qword_26AE77988)
  {
    uint64_t v5 = malloc_type_malloc(0x5F70uLL, 0x10000404055741BuLL);
    qword_26AE77988 = (uint64_t)v5;
  }
  *((void *)&xmmword_26AE66CE8 + 1) = v5;
  unk_26AE66CF8 = &g_Fused_Nav_WD;
  qword_26AE66D00 = (uint64_t)&g_GNSS_Debug_Data;
  *(void *)&xmmword_26AE66D08 = &g_GN_GNSS_IntVersion;
  *((void *)&xmmword_26AE66D08 + 1) = &unk_26AE77AC8;
  *(void *)&xmmword_26AE66D18 = &g_GN_GNSS_Nav_Data;
  *((void *)&xmmword_26AE66D18 + 1) = &g_GN_GNSS_Dbg_Data;
  *(void *)&xmmword_26AE66D28 = &g_NV_Ram;
  *((void *)&xmmword_26AE66D28 + 1) = &g_NA_Ram;
  *(void *)&xmmword_26AE66D38 = &unk_26AE77B30;
  qword_26AE779C8 = (uint64_t)&g_CBuff_Meas;
  unk_26AE779D0 = (char *)&g_CBuff_Meas + 6144;
  qword_26AE779B8 = (uint64_t)&g_CBuff_Meas;
  unk_26AE779C0 = &g_CBuff_Meas;
  qword_26AE779E8 = (uint64_t)&g_CBuff_Ctrl;
  unk_26AE779F0 = &g_CBuff_Meas;
  qword_26AE779E0 = (uint64_t)&g_CBuff_Ctrl;
  qword_26AE779D8 = (uint64_t)&g_CBuff_Ctrl;
  *((void *)&xmmword_26AE66D38 + 1) = &qword_26AE779B8;
  *(void *)&xmmword_26AE66D48 = &qword_26AE779D8;
  qword_26AE77A08 = (uint64_t)&g_CBuff_NMEA;
  unk_26AE77A10 = (char *)&g_CBuff_NMEA + 14336;
  qword_26AE77A00 = (uint64_t)&g_CBuff_NMEA;
  qword_26AE779F8 = (uint64_t)&g_CBuff_NMEA;
  qword_26AE54890 = (uint64_t)&g_CBuff_NDbg;
  qword_26AE54898 = (uint64_t)&g_CBuff_NMEA;
  g_CB_NDbg = (uint64_t)&g_CBuff_NDbg;
  *(void *)&dword_26AE54888 = &g_CBuff_NDbg;
  *((void *)&xmmword_26AE66D48 + 1) = &qword_26AE779F8;
  *(void *)&xmmword_26AE66D58 = &g_CB_NDbg;
  qword_26AE54870 = (uint64_t)&unk_26AE78518;
  qword_26AE54878 = (uint64_t)&g_GncPTxStream;
  g_CB_ELog = (uint64_t)&unk_26AE78118;
  *(void *)&dword_26AE54848 = &unk_26AE78118;
  qword_26AE54850 = (uint64_t)&unk_26AE78118;
  qword_26AE54858 = (uint64_t)&unk_26AE78518;
  g_CB_GDbg = (uint64_t)&unk_26AE78518;
  *(void *)&dword_26AE54868 = &unk_26AE78518;
  *((void *)&xmmword_26AE66D58 + 1) = &g_CB_ELog;
  *(void *)&xmmword_26AE66D68 = &g_CB_GDbg;
  qword_26AE77A18 = (uint64_t)&_MergedGlobals_51;
  qword_26AE77A28 = (uint64_t)&_MergedGlobals_51;
  unk_26AE77A30 = &xmmword_26AEA4A20;
  qword_26AE77A20 = (uint64_t)&_MergedGlobals_51;
  *((void *)&xmmword_26AE66D68 + 1) = &qword_26AE77A18;
  LODWORD(g_GN_GPS_Data_p_list) = 2;
  p_apuint64_t i = (uint64_t)&g_GN_GPS_Data_p_list;
  p_NA = (uint64_t)&g_NA_Ram;
  p_NA = (uint64_t)&g_NA_Ram;
  p_NA = (uint64_t)&g_NA_Ram;
  p_NA = (uint64_t)&g_NA_Ram;
  p_NA = (uint64_t)&g_NA_Ram;
  p_NA = (uint64_t)&g_NA_Ram;

  return memcpy(&unk_26AE77D28, &g_GN_GPS_Data_p_list, 0x190uLL);
}

void *GNSS_Clear_DataAreas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v202 = *MEMORY[0x263EF8340];
  bzero(v201, 0x2C78uLL);
  uint64_t v6 = 540;
  do
  {
    double v7 = (char *)v201 + v6;
    *double v7 = 0;
    *(void *)(v7 + 4) = 0;
    *(void *)(v7 + 11) = 0;
    v6 += 20;
  }
  while (v7 + 20 != (char *)&v201[43] + 12);
  uint64_t v8 = 704;
  do
  {
    double v9 = (char *)v201 + v8;
    *(void *)double v9 = 0;
    *((_WORD *)v9 + 4) = 0;
    *(void *)(v9 + 12) = 0;
    *((_WORD *)v9 + 10) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = 0;
    v8 += 56;
    *((_WORD *)v9 + 20) = 0;
  }
  while (v9 + 56 != (char *)&v201[212]);
  for (uint64_t i = 3392; i != 5120; i += 36)
  {
    unint64_t v11 = (char *)v201 + i;
    v11[32] = 0;
    *(_OWORD *)unint64_t v11 = 0uLL;
    *((_OWORD *)v11 + 1) = 0uLL;
  }
  uint64_t v12 = -960;
  do
  {
    uint64_t v13 = (char *)v201 + v12;
    *((_WORD *)v13 + 3048) = 0;
    *((_OWORD *)v13 + 380) = 0uLL;
    v12 += 20;
  }
  while (v12);
  uint64_t v14 = 0xFFFFFFFFFFFFF80;
  do
  {
    *(void *)&v201[v14 + 508] = 0;
    *(void *)((char *)&v201[v14 + 508] + 6) = 0;
    ++v14;
  }
  while (v14 * 16);
  uint64_t v15 = 8128;
  do
  {
    double v16 = (char *)v201 + v15;
    *(_DWORD *)double v16 = 0;
    v16[52] = 0;
    v15 += 56;
  }
  while (v16 + 56 != (char *)&v201[676]);
  WORD4(v201[697]) = 0;
  HIDWORD(v201[702]) = 0;
  LOBYTE(v201[703]) = 0;
  *(_OWORD *)((char *)&v201[698] + 12) = 0u;
  *(_OWORD *)((char *)&v201[699] + 12) = 0u;
  *(_OWORD *)((char *)&v201[700] + 12) = 0u;
  *(_OWORD *)((char *)&v201[701] + 10) = 0u;
  HIDWORD(v201[703]) = 0;
  *(_DWORD *)((char *)&v201[703] + 7) = 0;
  DWORD1(v201[703]) = 0;
  memset(&v201[676], 0, 343);
  *(void *)((char *)&v201[698] + 2) = 0;
  *(void *)((char *)&v201[697] + 12) = 0;
  memcpy(&g_G5K_ME_SD, v201, 0x2C78uLL);
  qword_26AE93A58 = (uint64_t)&g_G5K_ME_SD;
  bzero(&g_SV_Gen_Meas_SD, 0x8E0uLL);
  bzero(v201, 0x35A4uLL);
  uint64_t v17 = 5580;
  do
  {
    double v18 = (char *)v201 + v17;
    *(void *)double v18 = 0;
    *((_WORD *)v18 + 4) = 0;
    *((_DWORD *)v18 + 3) = 0;
    v18[16] = 0;
    *((_DWORD *)v18 + 5) = 0;
    v17 += 28;
    unsigned char v18[24] = 0;
  }
  while (v18 + 28 != (char *)&v201[373] + 4);
  *(_OWORD *)((char *)&v201[397] + 4) = 0u;
  *(_OWORD *)((char *)&v201[398] + 4) = 0u;
  *(_OWORD *)((char *)&v201[395] + 4) = 0u;
  *(_OWORD *)((char *)&v201[396] + 4) = 0u;
  *(_OWORD *)((char *)&v201[393] + 4) = 0u;
  *(_OWORD *)((char *)&v201[394] + 4) = 0u;
  *(_OWORD *)((char *)&v201[391] + 4) = 0u;
  *(_OWORD *)((char *)&v201[392] + 4) = 0u;
  *(_OWORD *)((char *)&v201[389] + 4) = 0u;
  *(_OWORD *)((char *)&v201[390] + 4) = 0u;
  *(_OWORD *)((char *)&v201[387] + 4) = 0u;
  *(_OWORD *)((char *)&v201[388] + 4) = 0u;
  *(_OWORD *)((char *)&v201[385] + 4) = 0u;
  *(_OWORD *)((char *)&v201[386] + 4) = 0u;
  *(_OWORD *)((char *)&v201[383] + 4) = 0u;
  *(_OWORD *)((char *)&v201[384] + 4) = 0u;
  *(_OWORD *)((char *)&v201[381] + 4) = 0u;
  *(_OWORD *)((char *)&v201[382] + 4) = 0u;
  *(_OWORD *)((char *)&v201[379] + 4) = 0u;
  *(_OWORD *)((char *)&v201[380] + 4) = 0u;
  *(_OWORD *)((char *)&v201[377] + 4) = 0u;
  *(_OWORD *)((char *)&v201[378] + 4) = 0u;
  *(_OWORD *)((char *)&v201[375] + 4) = 0u;
  *(_OWORD *)((char *)&v201[376] + 4) = 0u;
  *(_OWORD *)((char *)&v201[373] + 4) = 0u;
  *(_OWORD *)((char *)&v201[374] + 4) = 0u;
  *(_OWORD *)((char *)&v201[398] + 15) = 0u;
  memset(&v201[400], 0, 93);
  memset(&v201[406], 0, 86);
  bzero((char *)&v201[411] + 8, 0x193DuLL);
  bzero((char *)&v201[815] + 6, 0x2ACuLL);
  bzero((char *)&v201[858] + 4, 0x10DCuLL);
  memcpy(&g_SV_Data_Decode_SD, v201, 0x4680uLL);
  bzero(v201, 0x69F0uLL);
  *(void *)((char *)&v201[1] + 4) = 0x500000002;
  BYTE13(v201[1]) = 0;
  *(void *)((char *)&v201[8] + 4) = 0;
  *(void *)((char *)&v201[9] + 4) = 0;
  *(void *)((char *)&v201[8] + 12) = 0;
  memset(&v201[10], 0, 21);
  *(void *)&v201[19] = 0;
  *((void *)&v201[18] + 1) = 0;
  DWORD2(v201[19]) = 0;
  memset(&v201[20], 0, 20);
  memset(&v201[2], 0, 97);
  *(void *)((char *)&v201[14] + 6) = 0;
  *(_OWORD *)((char *)&v201[13] + 8) = 0u;
  *(_OWORD *)((char *)&v201[12] + 8) = 0u;
  *(_OWORD *)((char *)&v201[11] + 8) = 0u;
  memset(&v201[15], 0, 52);
  bzero((char *)&v201[21] + 8, 0x498uLL);
  *(void *)&v201[96] = 0;
  *((void *)&v201[95] + 1) = 0;
  memset(&v201[97], 0, 65);
  LODWORD(v201[95]) = 1;
  DWORD2(v201[96]) = 0;
  BYTE12(v201[96]) = 0;
  LODWORD(v201[102]) = 1;
  *(_OWORD *)((char *)&v201[102] + 8) = 0u;
  *(_OWORD *)((char *)&v201[103] + 8) = 0u;
  *(_OWORD *)((char *)&v201[104] + 8) = 0u;
  *(_DWORD *)((char *)&v201[105] + 7) = 0;
  *(_OWORD *)((char *)&v201[128] + 8) = 0u;
  *(_OWORD *)((char *)&v201[129] + 8) = 0u;
  *(_OWORD *)((char *)&v201[126] + 8) = 0u;
  *(_OWORD *)((char *)&v201[127] + 8) = 0u;
  *(_OWORD *)((char *)&v201[124] + 8) = 0u;
  *(_OWORD *)((char *)&v201[125] + 8) = 0u;
  *(_OWORD *)((char *)&v201[122] + 8) = 0u;
  *(_OWORD *)((char *)&v201[123] + 8) = 0u;
  *(_OWORD *)((char *)&v201[120] + 8) = 0u;
  *(_OWORD *)((char *)&v201[121] + 8) = 0u;
  *(_OWORD *)((char *)&v201[118] + 8) = 0u;
  *(_OWORD *)((char *)&v201[119] + 8) = 0u;
  *(_OWORD *)((char *)&v201[116] + 8) = 0u;
  *(_OWORD *)((char *)&v201[117] + 8) = 0u;
  *(_OWORD *)((char *)&v201[114] + 8) = 0u;
  *(_OWORD *)((char *)&v201[115] + 8) = 0u;
  *(_OWORD *)((char *)&v201[112] + 8) = 0u;
  *(_OWORD *)((char *)&v201[113] + 8) = 0u;
  *(_OWORD *)((char *)&v201[110] + 8) = 0u;
  *(_OWORD *)((char *)&v201[111] + 8) = 0u;
  *(_OWORD *)((char *)&v201[108] + 8) = 0u;
  *(_OWORD *)((char *)&v201[109] + 8) = 0u;
  *(_OWORD *)((char *)&v201[106] + 8) = 0u;
  *(_OWORD *)((char *)&v201[107] + 8) = 0u;
  uint64_t v19 = 2088;
  BYTE1(v201[106]) = 0;
  do
  {
    float64x2_t v20 = (char *)v201 + v19;
    *(_DWORD *)float64x2_t v20 = 0;
    *(_OWORD *)(v20 + 8) = 0uLL;
    *(_OWORD *)(v20 + 24) = 0uLL;
    v19 += 40;
  }
  while (v20 + 40 != (char *)&v201[250] + 8);
  uint64_t v21 = 4008;
  do
  {
    double v22 = (char *)v201 + v21;
    *(_DWORD *)double v22 = 0;
    *(_OWORD *)(v22 + 8) = 0uLL;
    *(_OWORD *)(v22 + 24) = 0uLL;
    v21 += 40;
  }
  while (v22 + 40 != (char *)&v201[370] + 8);
  *(void *)&v201[449] = 0;
  DWORD2(v201[449]) = 0;
  *(void *)&v201[450] = 0;
  DWORD2(v201[450]) = 0;
  bzero((char *)&v201[370] + 8, 0x4E4uLL);
  memset(&v201[451], 0, 128);
  LODWORD(v201[459]) = -1;
  *((void *)&v201[517] + 1) = 0;
  LOBYTE(v201[518]) = 0;
  *((void *)&v201[695] + 1) = 0;
  LODWORD(v201[696]) = 0;
  *((void *)&v201[702] + 1) = 0;
  LODWORD(v201[703]) = 0;
  *(void *)&v201[720] = 0;
  BYTE8(v201[720]) = 0;
  *(_OWORD *)((char *)&v201[715] + 8) = 0u;
  *(_OWORD *)((char *)&v201[716] + 8) = 0u;
  *(_OWORD *)((char *)&v201[717] + 8) = 0u;
  *(_OWORD *)((char *)&v201[718] + 8) = 0u;
  BYTE8(v201[719]) = 0;
  *(void *)&v201[726] = 0;
  BYTE8(v201[726]) = 0;
  LODWORD(v201[721]) = 0;
  *(_OWORD *)((char *)&v201[721] + 8) = 0u;
  *(_OWORD *)((char *)&v201[722] + 8) = 0u;
  *(_OWORD *)((char *)&v201[723] + 8) = 0u;
  *(_OWORD *)((char *)&v201[724] + 8) = 0u;
  BYTE8(v201[725]) = 0;
  LOBYTE(v201[727]) = 0;
  BYTE8(v201[1682]) = 0;
  *(void *)((char *)&v201[1687] + 4) = 0;
  *(void *)((char *)&v201[1694] + 4) = 0;
  bzero((char *)&v201[459] + 4, 0x39FuLL);
  bzero((char *)&v201[518] + 8, 0xAA6uLL);
  memset(&v201[689], 0, 36);
  *((void *)&v201[691] + 1) = 0;
  memset(&v201[692], 0, 17);
  *(_OWORD *)((char *)&v201[693] + 4) = 0u;
  *(_OWORD *)((char *)&v201[694] + 4) = 0u;
  *(_OWORD *)((char *)&v201[696] + 8) = 0u;
  *(_DWORD *)((char *)&v201[697] + 7) = 0;
  *(_OWORD *)((char *)&v201[697] + 12) = 0u;
  *(void *)((char *)&v201[698] + 10) = 0;
  *(void *)((char *)&v201[700] + 4) = 0;
  *(_OWORD *)((char *)&v201[699] + 4) = 0u;
  memset(&v201[701], 0, 17);
  *(_OWORD *)((char *)&v201[703] + 8) = 0u;
  *(_OWORD *)((char *)&v201[704] + 8) = 0u;
  *(_OWORD *)((char *)&v201[705] + 8) = 0u;
  *(_OWORD *)((char *)&v201[706] + 8) = 0u;
  *(_OWORD *)((char *)&v201[707] + 8) = 0u;
  *(_OWORD *)((char *)&v201[708] + 8) = 0u;
  *(_OWORD *)((char *)&v201[709] + 8) = 0u;
  *(_OWORD *)((char *)&v201[710] + 8) = 0u;
  *(_OWORD *)((char *)&v201[711] + 8) = 0u;
  *(_OWORD *)((char *)&v201[712] + 8) = 0u;
  *(_OWORD *)((char *)&v201[713] + 8) = 0u;
  *(_OWORD *)((char *)&v201[714] + 4) = 0u;
  bzero((char *)&v201[727] + 4, 0x3B6CuLL);
  memset(&v201[1683], 0, 65);
  memset(&v201[1688], 0, 97);
  g_Nav_Kalman_SD = v201[0];
  dword_26AEA7940 = v201[1];
  unk_26AEA7944 = *(void *)((char *)&v201[1] + 4);
  memcpy(&unk_26AEA794C, (char *)&v201[1] + 12, 0x69D0uLL);
  xmmword_26AE77BF4 = 0u;
  unk_26AE77C04 = 0u;
  xmmword_26AE77C14 = 0u;
  unk_26AE77C24 = 0u;
  xmmword_26AE77C34 = 0u;
  unk_26AE77C44 = 0u;
  xmmword_26AE77C54 = 0u;
  unk_26AE77C64 = 0u;
  xmmword_26AE77C74 = 0u;
  unk_26AE77C84 = 0u;
  xmmword_26AE77C94 = 0u;
  unk_26AE77CA4 = 0u;
  xmmword_26AE77CB4 = 0u;
  unk_26AE77CC4 = 0u;
  xmmword_26AE77CD4 = 0u;
  unk_26AE77CE4 = 0u;
  xmmword_26AE77CF4 = 0u;
  unk_26AE77D04 = 0u;
  xmmword_26AE77D14 = 0u;
  *(_DWORD *)((char *)&xmmword_26AE77D14 + 15) = 0;
  byte_26AE77A68 = 0;
  unk_26AE77A58 = 0u;
  unk_26AE77A48 = 0u;
  unk_26AE77A38 = 0u;
  if (qword_26AE77980) {
    bzero((void *)qword_26AE77980, 0x207538uLL);
  }
  memset(v194, 0, 288);
  byte_26AE76923 = 0;
  word_26AE76921 = 0;
  byte_26AE7692B = 0;
  word_26AE76929 = 0;
  byte_26AE76933 = 0;
  word_26AE76931 = 0;
  byte_26AE7693B = 0;
  word_26AE76939 = 0;
  byte_26AE76943 = 0;
  word_26AE76941 = 0;
  byte_26AE7694B = 0;
  word_26AE76949 = 0;
  byte_26AE76953 = 0;
  word_26AE76951 = 0;
  byte_26AE7695B = 0;
  word_26AE76959 = 0;
  byte_26AE76963 = 0;
  word_26AE76961 = 0;
  byte_26AE7696B = 0;
  word_26AE76969 = 0;
  byte_26AE76973 = 0;
  word_26AE76971 = 0;
  byte_26AE7697B = 0;
  word_26AE76979 = 0;
  byte_26AE76983 = 0;
  word_26AE76981 = 0;
  byte_26AE7698B = 0;
  word_26AE76989 = 0;
  byte_26AE76993 = 0;
  word_26AE76991 = 0;
  BYTE2(v185[0]) = 0;
  LOWORD(v185[0]) = 0;
  BYTE2(v172[37]) = 0;
  LOWORD(v172[37]) = 0;
  BYTE2(v172[29]) = 0;
  LOWORD(v172[29]) = 0;
  BYTE2(v174) = 0;
  LOWORD(v174) = 0;
  v170[2] = 0;
  *(_WORD *)long long v170 = 0;
  BYTE2(v181[0]) = 0;
  LOWORD(v181[0]) = 0;
  BYTE2(v177[2]) = 0;
  LOWORD(v177[2]) = 0;
  BYTE2(v191[0]) = 0;
  LOWORD(v191[0]) = 0;
  BYTE2(v189[0]) = 0;
  LOWORD(v189[0]) = 0;
  BYTE2(v187[0]) = 0;
  LOWORD(v187[0]) = 0;
  BYTE2(v183[0]) = 0;
  LOWORD(v183[0]) = 0;
  BYTE2(v181[18]) = 0;
  LOWORD(v181[18]) = 0;
  memset(v201, 0, 408);
  memset(v168, 0, 24);
  memset(v165, 0, 24);
  memset(v172, 0, 27);
  memset(v164, 0, 288);
  BYTE2(v179[0]) = 0;
  LOWORD(v179[0]) = 0;
  BYTE2(v177[7]) = 0;
  LOWORD(v177[7]) = 0;
  BYTE2(v181[10]) = 0;
  LOWORD(v181[10]) = 0;
  BYTE2(v181[5]) = 0;
  LOWORD(v181[5]) = 0;
  v169[2] = 0;
  *(_WORD *)double v169 = 0;
  BYTE10(v181[16]) = 0;
  WORD4(v181[16]) = 0;
  BYTE2(v181[15]) = 0;
  LOWORD(v181[15]) = 0;
  v193[2] = 0;
  *(_WORD *)unint64_t v193 = 0;
  BYTE2(v166) = 0;
  LOWORD(v166) = 0;
  BYTE2(v192) = 0;
  LOWORD(v192) = 0;
  BYTE2(v190) = 0;
  LOWORD(v190) = 0;
  BYTE2(v188) = 0;
  LOWORD(v188) = 0;
  BYTE2(v186) = 0;
  LOWORD(v186) = 0;
  BYTE2(v184) = 0;
  LOWORD(v184) = 0;
  BYTE2(v182) = 0;
  LOWORD(v182) = 0;
  BYTE2(v180) = 0;
  LOWORD(v180) = 0;
  BYTE2(v178) = 0;
  LOWORD(v178) = 0;
  BYTE2(v173) = 0;
  LOWORD(v173) = 0;
  BYTE6(v181[14]) = 0;
  WORD2(v181[14]) = 0;
  BYTE6(v181[9]) = 0;
  WORD2(v181[9]) = 0;
  BYTE6(v181[4]) = 0;
  WORD2(v181[4]) = 0;
  BYTE6(v177[6]) = 0;
  WORD2(v177[6]) = 0;
  BYTE6(v172[36]) = 0;
  WORD2(v172[36]) = 0;
  BYTE2(v171[13]) = 0;
  LOWORD(v171[13]) = 0;
  memset(v195, 0, 408);
  memset(v171, 0, 24);
  memset(v197, 0, 17);
  memset(v196, 0, 45);
  memset(&v198[1], 0, 17);
  g_Fused_Nav_SD = v197[0];
  *(void *)((char *)&g_Fused_Nav_SD + 14) = 0;
  word_26AE767FE = 0;
  byte_26AE76800 = 0;
  memcpy(&unk_26AE76801, v194, 0x120uLL);
  dword_26AE76924 = 0;
  byte_26AE76928 = 0;
  dword_26AE7692C = 0;
  byte_26AE76930 = 0;
  dword_26AE76934 = 0;
  byte_26AE76938 = 0;
  dword_26AE7693C = 0;
  byte_26AE76940 = 0;
  dword_26AE76944 = 0;
  byte_26AE76948 = 0;
  dword_26AE7694C = 0;
  byte_26AE76950 = 0;
  dword_26AE76954 = 0;
  byte_26AE76958 = 0;
  dword_26AE7695C = 0;
  byte_26AE76960 = 0;
  dword_26AE76964 = 0;
  byte_26AE76968 = 0;
  dword_26AE7696C = 0;
  byte_26AE76970 = 0;
  dword_26AE76974 = 0;
  byte_26AE76978 = 0;
  dword_26AE7697C = 0;
  byte_26AE76980 = 0;
  dword_26AE76984 = 0;
  byte_26AE76988 = 0;
  dword_26AE7698C = 0;
  byte_26AE76990 = 0;
  dword_26AE76994 = 0;
  byte_26AE76998 = 0;
  word_26AE76999 = 0;
  byte_26AE7699B = 0;
  dword_26AE7699C = 0;
  byte_26AE769A0 = 0;
  word_26AE769A1 = 0;
  byte_26AE769A3 = 0;
  dword_26AE769A4 = 0;
  byte_26AE769A8 = 0;
  word_26AE769A9 = 0;
  byte_26AE769AB = 0;
  dword_26AE769AC = 0;
  byte_26AE769B0 = 0;
  byte_26AE769B3 = 0;
  word_26AE769B1 = 0;
  dword_26AE769B4 = 0;
  byte_26AE769B8 = 0;
  byte_26AE769BB = 0;
  word_26AE769B9 = 0;
  dword_26AE769BC = 0;
  byte_26AE769C0 = 0;
  byte_26AE769C3 = 0;
  word_26AE769C1 = 0;
  dword_26AE769C4 = 0;
  byte_26AE769C8 = 0;
  byte_26AE769CB = 0;
  word_26AE769C9 = 0;
  dword_26AE769CC = 0;
  byte_26AE769D0 = 0;
  byte_26AE769D3 = 0;
  word_26AE769D1 = 0;
  dword_26AE769D4 = 0;
  byte_26AE769D8 = 0;
  byte_26AE769DB = 0;
  word_26AE769D9 = 0;
  dword_26AE769DC = 0;
  byte_26AE769E0 = 0;
  byte_26AE769E3 = 0;
  word_26AE769E1 = 0;
  dword_26AE769E4 = 0;
  byte_26AE769E8 = 0;
  byte_26AE769EB = 0;
  word_26AE769E9 = 0;
  dword_26AE769EC = 0;
  byte_26AE769F0 = 0;
  byte_26AE769F3 = 0;
  word_26AE769F1 = 0;
  dword_26AE769F4 = 0;
  byte_26AE769F8 = 0;
  byte_26AE769FB = 0;
  word_26AE769F9 = 0;
  dword_26AE769FC = 0;
  byte_26AE76A00 = 0;
  byte_26AE76A03 = 0;
  word_26AE76A01 = 0;
  dword_26AE76A04 = 0;
  byte_26AE76A08 = 0;
  byte_26AE76A0B = 0;
  word_26AE76A09 = 0;
  dword_26AE76A0C = 0;
  word_26AE76A10 = 0;
  memcpy(&unk_26AE76A12, v201, 0x198uLL);
  xmmword_26AE76BAA = 0u;
  qword_26AE76BBA = 0;
  xmmword_26AE76BC2 = 0u;
  qword_26AE76BD2 = 0;
  xmmword_26AE76BDA = 0u;
  *(long long *)((char *)&xmmword_26AE76BDA + 11) = 0u;
  byte_26AE76BF5 = 0;
  word_26AE76BF6 = 0;
  byte_26AE76BF8 = 0;
  memcpy(&unk_26AE76BF9, v164, 0x120uLL);
  word_26AE76D19 = 0;
  byte_26AE76D1B = 0;
  dword_26AE76D1C = 0;
  byte_26AE76D20 = 0;
  word_26AE76D21 = 0;
  byte_26AE76D23 = 0;
  dword_26AE76D24 = 0;
  byte_26AE76D28 = 0;
  word_26AE76D29 = 0;
  byte_26AE76D2B = 0;
  dword_26AE76D2C = 0;
  byte_26AE76D30 = 0;
  word_26AE76D31 = 0;
  byte_26AE76D33 = 0;
  dword_26AE76D34 = 0;
  byte_26AE76D38 = 0;
  word_26AE76D39 = 0;
  byte_26AE76D3B = 0;
  dword_26AE76D3C = 0;
  byte_26AE76D40 = 0;
  word_26AE76D41 = 0;
  byte_26AE76D43 = 0;
  dword_26AE76D44 = 0;
  byte_26AE76D48 = 0;
  byte_26AE76D4B = 0;
  word_26AE76D49 = 0;
  dword_26AE76D4C = 0;
  byte_26AE76D50 = 0;
  byte_26AE76D53 = 0;
  word_26AE76D51 = 0;
  dword_26AE76D54 = 0;
  byte_26AE76D58 = 0;
  byte_26AE76D5B = 0;
  word_26AE76D59 = 0;
  dword_26AE76D5C = 0;
  byte_26AE76D60 = 0;
  byte_26AE76D63 = 0;
  word_26AE76D61 = 0;
  dword_26AE76D64 = 0;
  byte_26AE76D68 = 0;
  byte_26AE76D6B = 0;
  word_26AE76D69 = 0;
  dword_26AE76D6C = 0;
  byte_26AE76D70 = 0;
  byte_26AE76D73 = 0;
  word_26AE76D71 = 0;
  dword_26AE76D74 = 0;
  byte_26AE76D78 = 0;
  byte_26AE76D7B = 0;
  word_26AE76D79 = 0;
  dword_26AE76D7C = 0;
  byte_26AE76D80 = 0;
  byte_26AE76D83 = 0;
  word_26AE76D81 = 0;
  dword_26AE76D84 = 0;
  byte_26AE76D88 = 0;
  byte_26AE76D8B = 0;
  word_26AE76D89 = 0;
  dword_26AE76D8C = 0;
  byte_26AE76D90 = 0;
  byte_26AE76D93 = 0;
  word_26AE76D91 = 0;
  dword_26AE76D94 = 0;
  byte_26AE76D98 = 0;
  byte_26AE76D9B = 0;
  word_26AE76D99 = 0;
  dword_26AE76D9C = 0;
  byte_26AE76DA0 = 0;
  byte_26AE76DA3 = 0;
  word_26AE76DA1 = 0;
  dword_26AE76DA4 = 0;
  byte_26AE76DA8 = 0;
  byte_26AE76DAB = 0;
  word_26AE76DA9 = 0;
  dword_26AE76DAC = 0;
  byte_26AE76DB0 = 0;
  byte_26AE76DB3 = 0;
  word_26AE76DB1 = 0;
  dword_26AE76DB4 = 0;
  byte_26AE76DB8 = 0;
  byte_26AE76DBB = 0;
  word_26AE76DB9 = 0;
  dword_26AE76DBC = 0;
  byte_26AE76DC0 = 0;
  byte_26AE76DC3 = 0;
  word_26AE76DC1 = 0;
  dword_26AE76DC4 = 0;
  byte_26AE76DC8 = 0;
  byte_26AE76DCB = 0;
  word_26AE76DC9 = 0;
  dword_26AE76DCC = 0;
  byte_26AE76DD0 = 0;
  byte_26AE76DD3 = 0;
  word_26AE76DD1 = 0;
  dword_26AE76DD4 = 0;
  byte_26AE76DD8 = 0;
  byte_26AE76DDB = 0;
  word_26AE76DD9 = 0;
  dword_26AE76DDC = 0;
  byte_26AE76DE0 = 0;
  byte_26AE76DE3 = 0;
  word_26AE76DE1 = 0;
  dword_26AE76DE4 = 0;
  byte_26AE76DE8 = 0;
  byte_26AE76DEB = 0;
  word_26AE76DE9 = 0;
  dword_26AE76DEC = 0;
  byte_26AE76DF0 = 0;
  byte_26AE76DF3 = 0;
  word_26AE76DF1 = 0;
  dword_26AE76DF4 = 0;
  byte_26AE76DF8 = 0;
  byte_26AE76DFB = 0;
  word_26AE76DF9 = 0;
  dword_26AE76DFC = 0;
  byte_26AE76E00 = 0;
  byte_26AE76E03 = 0;
  word_26AE76E01 = 0;
  dword_26AE76E04 = 0;
  word_26AE76E08 = 0;
  memcpy(&unk_26AE76E0A, v195, 0x198uLL);
  xmmword_26AE76FA2 = 0u;
  qword_26AE76FB2 = 0;
  xmmword_26AE76FBA = 0u;
  qword_26AE76FCA = 0;
  dword_26AE76FD2 = 0;
  word_26AE76FD6 = 0;
  byte_26AE76FD8 = 0;
  byte_26AE76FDB = 0;
  word_26AE76FD9 = 0;
  xmmword_26AE76FE8 = 0u;
  xmmword_26AE76FF8 = 0u;
  *(long long *)((char *)&xmmword_26AE76FF8 + 13) = *(_OWORD *)((char *)&v196[1] + 13);
  unk_26AE7701D = 0u;
  qword_26AE76FDC = 0;
  dword_26AE76FE4 = 0;
  unk_26AE77015 = 0;
  unk_26AE7702D = v198[1];
  unk_26AE7703A = 0u;
  qword_26AE7704A = 0;
  byte_26AE77AC0 = 0;
  xmmword_26AE77A70 = 0u;
  unk_26AE77A80 = 0u;
  xmmword_26AE77AA0 = 0u;
  unk_26AE77AB0 = 0u;
  xmmword_26AE77A90 = 0u;
  memset(v200, 0, sizeof(v200));
  long long v199 = 0u;
  memset(v198, 0, 491);
  memset(&v197[8], 0, 25);
  memset(v197, 0, 119);
  memset(&v196[117], 0, 179);
  memset(&v196[109], 0, 113);
  bzero(v196, 0x6CBuLL);
  bzero(v195, 0x15C8uLL);
  bzero(v194, 0x15C8uLL);
  bzero(v201, 0x2258uLL);
  memset(v193, 0, sizeof(v193));
  LOWORD(v192) = 0;
  BYTE2(v192) = 0;
  memset(v191, 0, 56);
  LOWORD(v190) = 0;
  BYTE2(v190) = 0;
  memset(v189, 0, 56);
  BYTE2(v188) = 0;
  LOWORD(v188) = 0;
  memset(v187, 0, 56);
  BYTE2(v186) = 0;
  LOWORD(v186) = 0;
  memset(v185, 0, sizeof(v185));
  BYTE2(v184) = 0;
  LOWORD(v184) = 0;
  memset(v183, 0, 56);
  BYTE2(v182) = 0;
  LOWORD(v182) = 0;
  memset(&v181[15], 0, 104);
  memset((char *)&v181[14] + 4, 0, 12);
  memset(&v181[10], 0, 53);
  memset((char *)&v181[9] + 4, 0, 12);
  memset(&v181[5], 0, 53);
  memset((char *)&v181[4] + 4, 0, 12);
  memset(v181, 0, 61);
  BYTE2(v180) = 0;
  LOWORD(v180) = 0;
  memset(v179, 0, 56);
  BYTE2(v178) = 0;
  LOWORD(v178) = 0;
  memset(&v177[7], 0, 56);
  memset((char *)&v177[6] + 4, 0, 12);
  memset(&v177[2], 0, 61);
  memset(v177, 0, 31);
  long long v176 = 0u;
  long long v175 = 0u;
  long long v174 = 0u;
  BYTE2(v173) = 0;
  LOWORD(v173) = 0;
  memset(&v172[37], 0, 112);
  memset((char *)&v172[36] + 4, 0, 12);
  memset(&v172[29], 0, 102);
  memset(v172, 0, 455);
  memset(&v171[13], 0, 12);
  memset(v171, 0, 199);
  *(_WORD *)long long v170 = 0;
  v170[2] = 0;
  v169[2] = 0;
  *(_WORD *)double v169 = 0;
  *(_DWORD *)&v168[3] = 0;
  *(_DWORD *)BOOL v168 = 0;
  *(_WORD *)&v165[4] = 0;
  *(_DWORD *)double v165 = 0;
  *(_DWORD *)((char *)v164 + 3) = 0;
  v164[0] = 0;
  long long v199 = 0uLL;
  *(_DWORD *)int v200 = 0;
  memset(&v200[8], 0, 73);
  *(_OWORD *)((char *)&v198[29] + 11) = 0u;
  *(_OWORD *)((char *)&v198[29] + 2) = 0u;
  *(_OWORD *)((char *)&v198[28] + 2) = 0u;
  *(_OWORD *)((char *)&v198[27] + 2) = 0u;
  *(_OWORD *)((char *)&v198[26] + 2) = 0u;
  *(_OWORD *)((char *)&v198[25] + 2) = 0u;
  *(_OWORD *)((char *)&v198[24] + 2) = 0u;
  *(_OWORD *)((char *)&v198[23] + 2) = 0u;
  *(_OWORD *)((char *)&v198[22] + 2) = 0u;
  *(_OWORD *)((char *)&v198[21] + 2) = 0u;
  *(_OWORD *)((char *)&v198[20] + 2) = 0u;
  *(_OWORD *)((char *)&v198[19] + 2) = 0u;
  *(_OWORD *)((char *)&v198[18] + 2) = 0u;
  *(_OWORD *)((char *)&v198[17] + 2) = 0u;
  *(_OWORD *)((char *)&v198[16] + 2) = 0u;
  *(_OWORD *)((char *)&v198[15] + 2) = 0u;
  *(_OWORD *)((char *)&v198[14] + 2) = 0u;
  *(_OWORD *)((char *)&v198[13] + 2) = 0u;
  *(_OWORD *)((char *)&v198[12] + 2) = 0u;
  *(_OWORD *)((char *)&v198[11] + 2) = 0u;
  *(_OWORD *)((char *)&v198[10] + 2) = 0u;
  *(_OWORD *)((char *)&v198[9] + 2) = 0u;
  *(_OWORD *)((char *)&v198[8] + 2) = 0u;
  *(_OWORD *)((char *)&v198[7] + 2) = 0u;
  *(_OWORD *)((char *)&v198[6] + 2) = 0u;
  *(_OWORD *)((char *)&v198[5] + 2) = 0u;
  *(_OWORD *)((char *)&v198[4] + 2) = 0u;
  *(_OWORD *)((char *)&v198[3] + 2) = 0u;
  *(_OWORD *)((char *)&v198[2] + 2) = 0u;
  *(_OWORD *)((char *)&v198[1] + 2) = 0u;
  *(_OWORD *)((char *)v198 + 2) = 0u;
  memset((char *)&v197[8] + 4, 0, 21);
  memset((char *)v197 + 4, 0, 115);
  *(void *)((char *)&v192 + 3) = 0;
  *((void *)&v192 + 1) = 0;
  *(void *)((char *)&v190 + 3) = 0;
  *((void *)&v190 + 1) = 0;
  *(void *)((char *)&v188 + 3) = 0;
  *((void *)&v188 + 1) = 0;
  *((void *)&v186 + 1) = 0;
  *(void *)((char *)&v186 + 3) = 0;
  *((void *)&v184 + 1) = 0;
  *(void *)((char *)&v184 + 3) = 0;
  *(void *)((char *)&v182 + 3) = 0;
  *((void *)&v182 + 1) = 0;
  *(void *)((char *)&v180 + 3) = 0;
  *((void *)&v180 + 1) = 0;
  *((void *)&v178 + 1) = 0;
  *(void *)((char *)&v178 + 3) = 0;
  *(void *)((char *)&v173 + 3) = 0;
  *((void *)&v173 + 1) = 0;
  xmmword_26AE73290 = 0uLL;
  uint64_t v163 = &g_Nav_Kalman_WD + 1506;
  *(_DWORD *)((char *)v163 + 31) = 0;
  memset(&v170[3], 0, 73);
  memset(&v165[6], 0, 316);
  memset((char *)&v196[117] + 2, 0, 177);
  memset((char *)&v196[109] + 3, 0, 96);
  *(_OWORD *)((char *)&v196[115] + 1) = 0u;
  bzero((char *)v196 + 6, 0x6C5uLL);
  bzero((char *)v195 + 3, 0x15C5uLL);
  bzero(&v194[3], 0x15C5uLL);
  bzero((char *)v201 + 3, 0x2255uLL);
  memset(&v193[1], 0, 19);
  memset((char *)v191 + 3, 0, 48);
  *(void *)&v191[3] = 0;
  memset((char *)v189 + 3, 0, 48);
  *(void *)&v189[3] = 0;
  memset((char *)v187 + 3, 0, 48);
  *(void *)&v187[3] = 0;
  memset((char *)v185 + 3, 0, 96);
  v185[6] = 0u;
  memset((char *)v183 + 3, 0, 53);
  memset((char *)&v181[18] + 3, 0, 48);
  *(void *)&v181[21] = 0;
  memset((char *)&v181[16] + 15, 0, 17);
  memset((char *)&v181[15] + 7, 0, 17);
  memset((char *)&v181[10] + 4, 0, 49);
  memset((char *)&v181[5] + 4, 0, 49);
  memset((char *)v181 + 4, 0, 57);
  memset((char *)v179 + 3, 0, 53);
  memset((char *)&v177[7] + 3, 0, 53);
  memset((char *)&v177[2] + 4, 0, 57);
  memset((char *)&v172[37] + 3, 0, 109);
  memset((char *)&v172[29] + 4, 0, 98);
  *(_WORD *)((char *)&v172[28] + 5) = 0;
  *(_OWORD *)((char *)&v172[27] + 5) = 0u;
  *(_OWORD *)((char *)&v172[26] + 5) = 0u;
  *(_OWORD *)((char *)&v172[25] + 5) = 0u;
  *(_OWORD *)((char *)&v172[24] + 5) = 0u;
  *(_OWORD *)((char *)&v172[23] + 5) = 0u;
  *(_OWORD *)((char *)&v172[22] + 5) = 0u;
  *(_OWORD *)((char *)&v172[21] + 5) = 0u;
  *(_OWORD *)((char *)&v172[20] + 5) = 0u;
  *(_OWORD *)((char *)&v172[19] + 5) = 0u;
  *(_OWORD *)((char *)&v172[18] + 5) = 0u;
  *(_OWORD *)((char *)&v172[17] + 5) = 0u;
  *(_OWORD *)((char *)&v172[16] + 5) = 0u;
  *(_OWORD *)((char *)&v172[15] + 5) = 0u;
  *(_OWORD *)((char *)&v172[14] + 5) = 0u;
  *(_OWORD *)((char *)&v172[13] + 5) = 0u;
  *(_OWORD *)((char *)&v172[12] + 5) = 0u;
  *(_OWORD *)((char *)&v172[11] + 5) = 0u;
  *(_OWORD *)((char *)&v172[10] + 5) = 0u;
  *(_OWORD *)((char *)&v172[9] + 5) = 0u;
  *(_OWORD *)((char *)&v172[8] + 5) = 0u;
  *(_OWORD *)((char *)&v172[7] + 5) = 0u;
  *(_OWORD *)((char *)&v172[6] + 5) = 0u;
  *(_OWORD *)((char *)&v172[5] + 5) = 0u;
  *(_OWORD *)((char *)&v172[4] + 5) = 0u;
  *(_OWORD *)((char *)&v172[3] + 5) = 0u;
  *(_OWORD *)((char *)&v172[2] + 5) = 0u;
  *(_OWORD *)((char *)&v172[1] + 5) = 0u;
  *(_OWORD *)((char *)v172 + 5) = 0u;
  WORD5(v171[13]) = 0;
  *(void *)((char *)&v171[13] + 2) = 0;
  memset((char *)v171 + 2, 0, 197);
  memset(&v169[3], 0, 33);
  memset(&v168[7], 0, 402);
  long long v166 = 0uLL;
  __int16 v167 = 0;
  bzero((char *)&v164[1] + 3, 0x1491uLL);
  xmmword_26AE6D4A0 = *(_OWORD *)&v200[48];
  unk_26AE6D4B0 = *(_OWORD *)&v200[64];
  dword_26AE6D4C0 = *(_DWORD *)&v200[80];
  g_Nav_Kalman_WD = v199;
  *(_OWORD *)&dword_26AE6D470 = *(_OWORD *)v200;
  xmmword_26AE6D480 = *(_OWORD *)&v200[16];
  unk_26AE6D490 = *(_OWORD *)&v200[32];
  *(void *)&dword_26AE6D4C4 = 0;
  word_26AE6D4CC = 0;
  memcpy(algn_26AE6D4CE, v198, 0x1EBuLL);
  dword_26AE6D6B9 = 0;
  *(int *)((char *)&dword_26AE6D6B9 + 3) = 0;
  qword_26AE6D6C0 = 0;
  dword_26AE6D6C8 = -1;
  xmmword_26AE6D6CC = v197[8];
  *(long long *)((char *)&xmmword_26AE6D6CC + 9) = *(_OWORD *)((char *)&v197[8] + 9);
  byte_26AE6D6E5 = 0;
  word_26AE6D6E6 = 0;
  dword_26AE6D6E8 = 0;
  xmmword_26AE6D70C = v197[2];
  unk_26AE6D71C = v197[3];
  xmmword_26AE6D6EC = v197[0];
  *(_OWORD *)algn_26AE6D6FC = v197[1];
  *(void *)((char *)&xmmword_26AE6D750 + 11) = *(void *)((char *)&v197[6] + 15);
  xmmword_26AE6D73C = v197[5];
  unk_26AE6D74C = v197[6];
  xmmword_26AE6D72C = v197[4];
  *(_DWORD *)((char *)&qword_26AE6D763 + 7) = 0;
  qword_26AE6D763 = 0;
  *(long long *)((char *)&xmmword_26AE6D780 + 14) = v196[119];
  unk_26AE6D79E = v196[120];
  xmmword_26AE6D76E = v196[117];
  *(_OWORD *)algn_26AE6D77E = v196[118];
  *(long long *)((char *)&xmmword_26AE6D7C0 + 14) = v196[123];
  unk_26AE6D7DE = v196[124];
  *(long long *)((char *)&xmmword_26AE6D7A0 + 14) = v196[121];
  unk_26AE6D7BE = v196[122];
  unk_26AE6D81D = *(_DWORD *)((char *)&v196[127] + 15);
  xmmword_26AE6D7FE = v196[126];
  unk_26AE6D80E = v196[127];
  *(long long *)((char *)&xmmword_26AE6D7E0 + 14) = v196[125];
  xmmword_26AE6D861 = v196[113];
  unk_26AE6D871 = v196[114];
  xmmword_26AE6D881 = v196[115];
  byte_26AE6D891 = v196[116];
  unk_26AE6D821 = v196[109];
  unk_26AE6D831 = v196[110];
  xmmword_26AE6D841 = v196[111];
  unk_26AE6D851 = v196[112];
  memcpy(&unk_26AE6D892, v196, 0x6CBuLL);
  memcpy(&unk_26AE6DF5D, v195, 0x15C8uLL);
  memcpy((char *)&g_Nav_Kalman_WD + 8389, v194, 0x15C8uLL);
  memcpy((char *)&g_Nav_Kalman_WD + 13965, v201, 0x2258uLL);
  uint64_t v23 = (char *)&g_Nav_Kalman_WD + 22757;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v193;
  *((_DWORD *)v23 + 4) = *(_DWORD *)&v193[16];
  *(long long *)((char *)&g_Nav_Kalman_WD + 22777) = v192;
  unint64_t v24 = (char *)&g_Nav_Kalman_WD + 22793;
  long long v25 = v191[1];
  *(_OWORD *)unint64_t v24 = v191[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v191[2];
  *((void *)v24 + 6) = *(void *)&v191[3];
  *(long long *)((char *)&g_Nav_Kalman_WD + 22849) = v190;
  uint64_t v26 = (char *)&g_Nav_Kalman_WD + 22865;
  long long v27 = v189[0];
  long long v28 = v189[1];
  long long v29 = v189[2];
  *((void *)v26 + 6) = *(void *)&v189[3];
  *((_OWORD *)v26 + 1) = v28;
  *((_OWORD *)v26 + 2) = v29;
  *(_OWORD *)uint64_t v26 = v27;
  *(long long *)((char *)&g_Nav_Kalman_WD + 22921) = v188;
  unsigned int v30 = (char *)&g_Nav_Kalman_WD + 22937;
  *((void *)v30 + 6) = *(void *)&v187[3];
  long long v31 = v187[2];
  long long v32 = v187[0];
  *((_OWORD *)v30 + 1) = v187[1];
  *((_OWORD *)v30 + 2) = v31;
  *(_OWORD *)unsigned int v30 = v32;
  *(long long *)((char *)&g_Nav_Kalman_WD + 22993) = v186;
  int v33 = (long long *)((char *)&g_Nav_Kalman_WD + 23009);
  long long v34 = v185[1];
  *int v33 = v185[0];
  v33[1] = v34;
  long long v35 = v185[2];
  long long v36 = v185[3];
  long long v37 = v185[6];
  long long v38 = v185[4];
  _OWORD v33[5] = v185[5];
  v33[6] = v37;
  v33[3] = v36;
  void v33[4] = v38;
  v33[2] = v35;
  *(long long *)((char *)&g_Nav_Kalman_WD + 23121) = v184;
  double v39 = (char *)&g_Nav_Kalman_WD + 23137;
  long long v40 = v183[0];
  long long v41 = v183[1];
  long long v42 = v183[2];
  *((void *)v39 + 6) = *(void *)&v183[3];
  *((_OWORD *)v39 + 1) = v41;
  *((_OWORD *)v39 + 2) = v42;
  *(_OWORD *)double v39 = v40;
  *(long long *)((char *)&g_Nav_Kalman_WD + 23193) = v182;
  double v43 = (char *)&g_Nav_Kalman_WD + 23209;
  long long v44 = v181[18];
  long long v45 = v181[19];
  long long v46 = v181[20];
  *((void *)v43 + 6) = *(void *)&v181[21];
  *((_OWORD *)v43 + 1) = v45;
  *((_OWORD *)v43 + 2) = v46;
  *(_OWORD *)double v43 = v44;
  double v47 = (char *)&g_Nav_Kalman_WD + 23265;
  void v47[2] = 0;
  *(_WORD *)double v47 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5817) = 0;
  *((unsigned char *)&g_Nav_Kalman_WD + 23272) = 0;
  uint64_t v48 = (char *)&g_Nav_Kalman_WD + 23273;
  long long v49 = *(_OWORD *)((char *)&v181[16] + 8);
  *((void *)v48 + 2) = *((void *)&v181[17] + 1);
  *(_OWORD *)uint64_t v48 = v49;
  double v50 = (char *)&g_Nav_Kalman_WD + 23297;
  long long v51 = v181[15];
  *((void *)v50 + 2) = *(void *)&v181[16];
  *(_OWORD *)double v50 = v51;
  double v52 = (char *)&g_Nav_Kalman_WD + 23321;
  uint64_t v53 = *(void *)((char *)&v181[14] + 4);
  *((_DWORD *)v52 + 2) = HIDWORD(v181[14]);
  *(void *)double v52 = v53;
  double v54 = (char *)&g_Nav_Kalman_WD + 23333;
  _OWORD v54[2] = 0;
  *(_WORD *)double v54 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5834) = 0;
  double v55 = (char *)&g_Nav_Kalman_WD + 23340;
  long long v56 = v181[10];
  long long v57 = v181[11];
  long long v58 = v181[12];
  *(void *)(v55 + 45) = *(void *)((char *)&v181[12] + 13);
  *((_OWORD *)v55 + 1) = v57;
  *((_OWORD *)v55 + 2) = v58;
  *(_OWORD *)double v55 = v56;
  uint64_t v59 = (char *)&g_Nav_Kalman_WD + 23393;
  uint64_t v60 = *(void *)((char *)&v181[9] + 4);
  *((_DWORD *)v59 + 2) = HIDWORD(v181[9]);
  *(void *)uint64_t v59 = v60;
  double v61 = (char *)&g_Nav_Kalman_WD + 23405;
  _DWORD v61[2] = 0;
  *(_WORD *)double v61 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5852) = 0;
  double v62 = (char *)&g_Nav_Kalman_WD + 23412;
  long long v63 = v181[5];
  long long v64 = v181[6];
  long long v65 = v181[7];
  *(void *)(v62 + 45) = *(void *)((char *)&v181[7] + 13);
  *((_OWORD *)v62 + 1) = v64;
  *((_OWORD *)v62 + 2) = v65;
  *(_OWORD *)double v62 = v63;
  BOOL v66 = (char *)&g_Nav_Kalman_WD + 23465;
  uint64_t v67 = *(void *)((char *)&v181[4] + 4);
  *((_DWORD *)v66 + 2) = HIDWORD(v181[4]);
  *(void *)BOOL v66 = v67;
  double v68 = (char *)&g_Nav_Kalman_WD + 23477;
  v68[2] = 0;
  *(_WORD *)double v68 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5870) = 0;
  int v69 = (long long *)((char *)&g_Nav_Kalman_WD + 23484);
  long long v70 = v181[0];
  long long v71 = v181[1];
  long long v72 = v181[2];
  *(_OWORD *)((char *)v69 + 45) = *(_OWORD *)((char *)&v181[2] + 13);
  v69[1] = v71;
  v69[2] = v72;
  *(long long *)((char *)&g_Nav_Kalman_WD + 23545) = v180;
  *int v69 = v70;
  __double2 v73 = (char *)&g_Nav_Kalman_WD + 23561;
  long long v74 = v179[0];
  long long v75 = v179[1];
  long long v76 = v179[2];
  *((void *)v73 + 6) = *(void *)&v179[3];
  *((_OWORD *)v73 + 1) = v75;
  *((_OWORD *)v73 + 2) = v76;
  *(_OWORD *)__double2 v73 = v74;
  *(long long *)((char *)&g_Nav_Kalman_WD + 23617) = v178;
  unint64_t v77 = (char *)&g_Nav_Kalman_WD + 23633;
  long long v78 = v177[7];
  long long v79 = v177[8];
  long long v80 = v177[9];
  *((void *)v77 + 6) = *(void *)&v177[10];
  *((_OWORD *)v77 + 1) = v79;
  *((_OWORD *)v77 + 2) = v80;
  *(_OWORD *)unint64_t v77 = v78;
  unint64_t v81 = (char *)&g_Nav_Kalman_WD + 23689;
  uint64_t v82 = *(void *)((char *)&v177[6] + 4);
  *((_DWORD *)v81 + 2) = HIDWORD(v177[6]);
  *(void *)unint64_t v81 = v82;
  int v83 = (char *)&g_Nav_Kalman_WD + 23701;
  v83[2] = 0;
  *(_WORD *)int v83 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5926) = 0;
  int v84 = (long long *)((char *)&g_Nav_Kalman_WD + 23708);
  long long v85 = v177[2];
  long long v86 = v177[3];
  long long v87 = v177[4];
  *(_OWORD *)((char *)v84 + 45) = *(_OWORD *)((char *)&v177[4] + 13);
  v84[1] = v86;
  v84[2] = v87;
  *int v84 = v85;
  double v88 = (long long *)((char *)&g_Nav_Kalman_WD + 23769);
  long long v89 = v174;
  long long v90 = v175;
  *(_OWORD *)((char *)v88 + 63) = *(_OWORD *)((char *)v177 + 15);
  long long v91 = v177[0];
  v88[2] = v176;
  v88[3] = v91;
  *double v88 = v89;
  v88[1] = v90;
  *((unsigned char *)&g_Nav_Kalman_WD + 23848) = 0;
  *(long long *)((char *)&g_Nav_Kalman_WD + 23849) = v173;
  double v92 = (long long *)((char *)&g_Nav_Kalman_WD + 23865);
  long long v93 = v172[38];
  _OWORD *v92 = v172[37];
  v92[1] = v93;
  long long v94 = v172[39];
  long long v95 = v172[40];
  long long v96 = v172[43];
  long long v97 = v172[41];
  v92[5] = v172[42];
  v92[6] = v96;
  v92[3] = v95;
  v92[4] = v97;
  v92[2] = v94;
  __double2 v98 = (char *)&g_Nav_Kalman_WD + 23977;
  uint64_t v99 = *(void *)((char *)&v172[36] + 4);
  *((_DWORD *)v98 + 2) = HIDWORD(v172[36]);
  *(void *)__double2 v98 = v99;
  long long v100 = (char *)&g_Nav_Kalman_WD + 23989;
  v100[2] = 0;
  *(_WORD *)long long v100 = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5998) = 0;
  long long v101 = (char *)&g_Nav_Kalman_WD + 23996;
  long long v102 = v172[30];
  *(_OWORD *)long long v101 = v172[29];
  *((_OWORD *)v101 + 1) = v102;
  long long v103 = v172[31];
  long long v104 = v172[32];
  long long v105 = v172[33];
  long long v106 = v172[34];
  *(void *)(v101 + 94) = *(void *)((char *)&v172[34] + 14);
  *((_OWORD *)v101 + 4) = v105;
  *((_OWORD *)v101 + 5) = v106;
  *((_OWORD *)v101 + 2) = v103;
  *((_OWORD *)v101 + 3) = v104;
  qword_26AE73288 = 0;
  *(void *)((char *)v163 + 2) = 0;
  memcpy((char *)&g_Nav_Kalman_WD + 24131, v172, 0x1C7uLL);
  long long v107 = (char *)&g_Nav_Kalman_WD + 24586;
  *(void *)long long v107 = *(void *)&v171[13];
  *((_DWORD *)v107 + 2) = DWORD2(v171[13]);
  long long v108 = (char *)&g_Nav_Kalman_WD + 24598;
  long long v109 = v171[11];
  *((_OWORD *)v108 + 10) = v171[10];
  *((_OWORD *)v108 + 11) = v109;
  *(void *)(v108 + 191) = *(void *)((char *)&v171[11] + 15);
  long long v110 = v171[7];
  *((_OWORD *)v108 + 6) = v171[6];
  *((_OWORD *)v108 + 7) = v110;
  long long v111 = v171[9];
  *((_OWORD *)v108 + 8) = v171[8];
  *((_OWORD *)v108 + 9) = v111;
  long long v112 = v171[3];
  *((_OWORD *)v108 + 2) = v171[2];
  *((_OWORD *)v108 + 3) = v112;
  long long v113 = v171[5];
  *((_OWORD *)v108 + 4) = v171[4];
  *((_OWORD *)v108 + 5) = v113;
  long long v114 = v171[1];
  *(_OWORD *)long long v108 = v171[0];
  *((_OWORD *)v108 + 1) = v114;
  double v115 = (long long *)((char *)&g_Nav_Kalman_WD + 24797);
  long long v116 = *(_OWORD *)&v170[16];
  long long v117 = *(_OWORD *)&v170[48];
  v115[2] = *(_OWORD *)&v170[32];
  v115[3] = v117;
  *(_OWORD *)((char *)v115 + 60) = *(_OWORD *)&v170[60];
  *double v115 = *(_OWORD *)v170;
  v115[1] = v116;
  uint64_t v118 = (char *)&g_Nav_Kalman_WD + 24873;
  *(_WORD *)uint64_t v118 = 0;
  v118[2] = 0;
  double v119 = (char *)&g_Nav_Kalman_WD + 24776;
  v119[100] = 0;
  double v120 = (char *)&g_Nav_Kalman_WD + 24877;
  *(_WORD *)double v120 = 0;
  v120[2] = 0;
  *((_DWORD *)v119 + 26) = 0;
  v119[108] = 0;
  long long v121 = (char *)&g_Nav_Kalman_WD + 24885;
  *(_WORD *)long long v121 = 0;
  v121[2] = 0;
  *((_DWORD *)v119 + 28) = 0;
  v119[116] = 0;
  uint64_t v122 = (char *)&g_Nav_Kalman_WD + 24893;
  *(_WORD *)uint64_t v122 = 0;
  v122[2] = 0;
  *((_DWORD *)v119 + 30) = 0;
  v119[124] = 0;
  int v123 = (char *)&g_Nav_Kalman_WD + 24901;
  *(_WORD *)int v123 = 0;
  double v123[2] = 0;
  *((_DWORD *)v119 + 32) = 0;
  v119[132] = 0;
  uint64_t v124 = (char *)&g_Nav_Kalman_WD + 24909;
  float64x2_t v124[2] = 0;
  *(_WORD *)uint64_t v124 = 0;
  *((_DWORD *)v119 + 34) = 0;
  v119[140] = 0;
  unsigned __int16 v125 = (char *)&g_Nav_Kalman_WD + 24917;
  v125[2] = 0;
  *(_WORD *)unsigned __int16 v125 = 0;
  *((_DWORD *)v119 + 36) = 0;
  v119[148] = 0;
  double v126 = (char *)&g_Nav_Kalman_WD + 24925;
  v126[2] = 0;
  *(_WORD *)double v126 = 0;
  *((_DWORD *)v119 + 38) = 0;
  v119[156] = 0;
  uint64_t v127 = (char *)&g_Nav_Kalman_WD + 24933;
  v127[2] = 0;
  *(_WORD *)uint64_t v127 = 0;
  *((_DWORD *)v119 + 40) = 0;
  v119[164] = 0;
  double v128 = (char *)&g_Nav_Kalman_WD + 24941;
  v128[2] = 0;
  *(_WORD *)double v128 = 0;
  *((_DWORD *)v119 + 42) = 0;
  v119[172] = 0;
  unsigned int v129 = (char *)&g_Nav_Kalman_WD + 24949;
  _OWORD v129[2] = 0;
  *(_WORD *)unsigned int v129 = 0;
  *((_DWORD *)v119 + 44) = 0;
  v119[180] = 0;
  double v130 = (char *)&g_Nav_Kalman_WD + 24957;
  v130[2] = 0;
  *(_WORD *)double v130 = 0;
  *((_DWORD *)v119 + 46) = 0;
  v119[188] = 0;
  __double2 v131 = (char *)&g_Nav_Kalman_WD + 24965;
  v131[2] = 0;
  *(_WORD *)__double2 v131 = 0;
  *((_DWORD *)v119 + 48) = 0;
  v119[196] = 0;
  __double2 v132 = (char *)&g_Nav_Kalman_WD + 24973;
  BOOL v132[2] = 0;
  *(_WORD *)__double2 v132 = 0;
  *((_DWORD *)v119 + 50) = 0;
  v119[204] = 0;
  uint64_t v133 = (char *)&g_Nav_Kalman_WD + 24981;
  v133[2] = 0;
  *(_WORD *)uint64_t v133 = 0;
  *((_DWORD *)v119 + 52) = 0;
  v119[212] = 0;
  double v134 = (char *)&g_Nav_Kalman_WD + 24989;
  v134[2] = 0;
  *(_WORD *)double v134 = 0;
  *((_DWORD *)v119 + 54) = 0;
  v119[220] = 0;
  long long v135 = (char *)&g_Nav_Kalman_WD + 24997;
  v135[2] = 0;
  *(_WORD *)long long v135 = 0;
  *((_DWORD *)v119 + 56) = 0;
  v119[228] = 0;
  long long v136 = (char *)&g_Nav_Kalman_WD + 25005;
  v136[2] = 0;
  *(_WORD *)long long v136 = 0;
  *((_DWORD *)v119 + 58) = 0;
  v119[236] = 0;
  double v137 = (char *)&g_Nav_Kalman_WD + 25013;
  v137[2] = 0;
  *(_WORD *)double v137 = 0;
  *((_DWORD *)v119 + 60) = 0;
  v119[244] = 0;
  uint64_t v138 = (char *)&g_Nav_Kalman_WD + 25021;
  v138[2] = 0;
  *(_WORD *)uint64_t v138 = 0;
  *((_DWORD *)v119 + 62) = 0;
  v119[252] = 0;
  double v139 = (char *)&g_Nav_Kalman_WD + 25029;
  v139[2] = 0;
  *(_WORD *)double v139 = 0;
  *((_DWORD *)v119 + 64) = 0;
  v119[260] = 0;
  double v140 = (char *)&g_Nav_Kalman_WD + 25037;
  v140[2] = 0;
  *(_WORD *)double v140 = 0;
  *((_DWORD *)v119 + 66) = 0;
  v119[268] = 0;
  double v141 = (char *)&g_Nav_Kalman_WD + 25045;
  v141[2] = 0;
  *(_WORD *)double v141 = 0;
  *((_DWORD *)v119 + 68) = 0;
  v119[276] = 0;
  double v142 = (char *)&g_Nav_Kalman_WD + 25053;
  v142[2] = 0;
  *(_WORD *)double v142 = 0;
  *((_DWORD *)v119 + 70) = 0;
  v119[284] = 0;
  double v143 = (char *)&g_Nav_Kalman_WD + 25061;
  v143[2] = 0;
  *(_WORD *)double v143 = 0;
  *((_DWORD *)v119 + 72) = 0;
  v119[292] = 0;
  double v144 = (char *)&g_Nav_Kalman_WD + 25069;
  v144[2] = 0;
  *(_WORD *)double v144 = 0;
  *((_DWORD *)v119 + 74) = 0;
  v119[300] = 0;
  double v145 = (char *)&g_Nav_Kalman_WD + 25077;
  v145[2] = 0;
  *(_WORD *)double v145 = 0;
  *((_DWORD *)v119 + 76) = 0;
  v119[308] = 0;
  double v146 = (char *)&g_Nav_Kalman_WD + 25085;
  v146[2] = 0;
  *(_WORD *)double v146 = 0;
  *((_DWORD *)v119 + 78) = 0;
  v119[316] = 0;
  double v147 = (char *)&g_Nav_Kalman_WD + 25093;
  _DWORD v147[2] = 0;
  *(_WORD *)double v147 = 0;
  *((_DWORD *)v119 + 80) = 0;
  v119[324] = 0;
  double v148 = (char *)&g_Nav_Kalman_WD + 25101;
  v148[2] = 0;
  *(_WORD *)double v148 = 0;
  *((_DWORD *)v119 + 82) = 0;
  v119[332] = 0;
  double v149 = (char *)&g_Nav_Kalman_WD + 25109;
  v149[2] = 0;
  *(_WORD *)double v149 = 0;
  *((_DWORD *)v119 + 84) = 0;
  v119[340] = 0;
  double v150 = (char *)&g_Nav_Kalman_WD + 25117;
  v150[2] = 0;
  *(_WORD *)double v150 = 0;
  *((_DWORD *)v119 + 86) = 0;
  v119[348] = 0;
  double v151 = (char *)&g_Nav_Kalman_WD + 25125;
  void v151[2] = 0;
  *(_WORD *)double v151 = 0;
  *((_DWORD *)v119 + 88) = 0;
  v119[356] = 0;
  double v152 = (char *)&g_Nav_Kalman_WD + 25133;
  v152[2] = 0;
  *(_WORD *)double v152 = 0;
  *((_DWORD *)v119 + 90) = 0;
  v119[364] = 0;
  double v153 = (char *)&g_Nav_Kalman_WD + 25141;
  long long v154 = *(_OWORD *)v169;
  long long v155 = *(_OWORD *)&v169[16];
  *((_DWORD *)v153 + 8) = *(_DWORD *)&v169[32];
  *(_OWORD *)double v153 = v154;
  *((_OWORD *)v153 + 1) = v155;
  memcpy((char *)&g_Nav_Kalman_WD + 25177, v168, 0x199uLL);
  double v156 = (char *)&g_Nav_Kalman_WD + 25579;
  *(_DWORD *)(v156 + 7) = 0;
  *(_WORD *)(v156 + 11) = 0;
  qword_26AE73858 = 0;
  xmmword_26AE73860 = v166;
  *(_WORD *)&algn_26AE6D474[25596] = v167;
  memcpy((char *)&g_Nav_Kalman_WD + 25618, v165, 0x142uLL);
  double v157 = &g_Nav_Kalman_WD + 1621;
  *(long long *)((char *)v157 + 24) = 0u;
  *(long long *)((char *)v157 + 40) = 0u;
  *(long long *)((char *)v157 + 56) = 0u;
  *(long long *)((char *)v157 + 8) = 0u;
  long long v158 = &g_Nav_Kalman_WD + 1627;
  *(long long *)((char *)v158 + 8) = 0u;
  *(long long *)((char *)v158 + 56) = 0u;
  *(long long *)((char *)v158 + 40) = 0u;
  double v159 = &g_Nav_Kalman_WD + 1601;
  *((_DWORD *)v159 + 81) = 0;
  *((unsigned char *)v159 + 392) = 0;
  *(_DWORD *)((char *)v157 + 73) = 0;
  *((_DWORD *)v159 + 99) = 0;
  qword_26AE73A00 = 0;
  *((unsigned char *)v159 + 408) = 0;
  *((_DWORD *)v159 + 103) = 0;
  *(_DWORD *)((char *)v157 + 89) = 0;
  qword_26AE73A10 = 0;
  *((unsigned char *)v159 + 488) = 0;
  *(long long *)((char *)v158 + 24) = 0u;
  *((_DWORD *)v159 + 123) = 0;
  *(_DWORD *)((char *)v158 + 73) = 0;
  qword_26AE73A60 = 0;
  *((unsigned char *)v159 + 504) = 0;
  memcpy((char *)&g_Nav_Kalman_WD + 26121, v164, 0x1498uLL);
  uint64_t v160 = (_DWORD *)((char *)&g_Nav_Kalman_WD + 31393);
  *uint64_t v160 = 0;
  *(_DWORD *)((char *)v160 + 3) = 0;
  long long v161 = (long long *)((char *)&g_Nav_Kalman_WD + 31400);
  *long long v161 = xmmword_22BB45920;
  v161[1] = xmmword_22BB45930;
  qword_26AE74F28 = 0;
  byte_26AE779B4 = 0;
  unk_26AE779AC = 0;
  unk_26AE779A4 = 0;
  if (qword_26AE77988) {
    bzero((void *)qword_26AE77988, 0x5F70uLL);
  }
  memset(v194, 0, 288);
  byte_26AE9320B = 0;
  word_26AE93209 = 0;
  byte_26AE93213 = 0;
  word_26AE93211 = 0;
  byte_26AE9321B = 0;
  word_26AE93219 = 0;
  byte_26AE93223 = 0;
  word_26AE93221 = 0;
  byte_26AE9322B = 0;
  word_26AE93229 = 0;
  byte_26AE93233 = 0;
  word_26AE93231 = 0;
  byte_26AE9323B = 0;
  word_26AE93239 = 0;
  byte_26AE93243 = 0;
  word_26AE93241 = 0;
  byte_26AE9324B = 0;
  word_26AE93249 = 0;
  byte_26AE93253 = 0;
  word_26AE93251 = 0;
  byte_26AE9325B = 0;
  word_26AE93259 = 0;
  byte_26AE93263 = 0;
  word_26AE93261 = 0;
  byte_26AE9326B = 0;
  word_26AE93269 = 0;
  byte_26AE93273 = 0;
  word_26AE93271 = 0;
  byte_26AE9327B = 0;
  word_26AE93279 = 0;
  byte_26AE93283 = 0;
  word_26AE93281 = 0;
  byte_26AE9328B = 0;
  word_26AE93289 = 0;
  BYTE2(v196[109]) = 0;
  LOWORD(v196[109]) = 0;
  BYTE2(v185[0]) = 0;
  LOWORD(v185[0]) = 0;
  BYTE2(v172[37]) = 0;
  LOWORD(v172[37]) = 0;
  BYTE2(v172[29]) = 0;
  LOWORD(v172[29]) = 0;
  BYTE2(v199) = 0;
  LOWORD(v199) = 0;
  BYTE2(v174) = 0;
  LOWORD(v174) = 0;
  v170[2] = 0;
  *(_WORD *)long long v170 = 0;
  BYTE2(v181[0]) = 0;
  LOWORD(v181[0]) = 0;
  BYTE2(v177[2]) = 0;
  LOWORD(v177[2]) = 0;
  BYTE2(v191[0]) = 0;
  LOWORD(v191[0]) = 0;
  BYTE2(v189[0]) = 0;
  LOWORD(v189[0]) = 0;
  memset(v201, 0, 408);
  memset(v198, 0, 24);
  memset(v172, 0, 24);
  memset(v196, 0, 322);
  memset(v164, 0, 288);
  BYTE2(v187[0]) = 0;
  LOWORD(v187[0]) = 0;
  BYTE2(v183[0]) = 0;
  LOWORD(v183[0]) = 0;
  BYTE2(v181[18]) = 0;
  LOWORD(v181[18]) = 0;
  BYTE2(v179[0]) = 0;
  LOWORD(v179[0]) = 0;
  BYTE2(v177[7]) = 0;
  LOWORD(v177[7]) = 0;
  BYTE2(v181[10]) = 0;
  LOWORD(v181[10]) = 0;
  BYTE2(v181[5]) = 0;
  LOWORD(v181[5]) = 0;
  v169[2] = 0;
  *(_WORD *)double v169 = 0;
  BYTE2(v197[8]) = 0;
  LOWORD(v197[8]) = 0;
  BYTE10(v181[16]) = 0;
  WORD4(v181[16]) = 0;
  BYTE2(v181[15]) = 0;
  LOWORD(v181[15]) = 0;
  v193[2] = 0;
  *(_WORD *)unint64_t v193 = 0;
  BYTE2(v166) = 0;
  LOWORD(v166) = 0;
  BYTE2(v192) = 0;
  LOWORD(v192) = 0;
  BYTE2(v190) = 0;
  LOWORD(v190) = 0;
  BYTE2(v188) = 0;
  LOWORD(v188) = 0;
  BYTE2(v186) = 0;
  LOWORD(v186) = 0;
  BYTE2(v184) = 0;
  LOWORD(v184) = 0;
  BYTE2(v182) = 0;
  LOWORD(v182) = 0;
  BYTE2(v180) = 0;
  LOWORD(v180) = 0;
  BYTE2(v178) = 0;
  LOWORD(v178) = 0;
  BYTE2(v173) = 0;
  LOWORD(v173) = 0;
  BYTE6(v181[14]) = 0;
  WORD2(v181[14]) = 0;
  BYTE6(v181[9]) = 0;
  WORD2(v181[9]) = 0;
  BYTE6(v181[4]) = 0;
  WORD2(v181[4]) = 0;
  BYTE6(v177[6]) = 0;
  WORD2(v177[6]) = 0;
  BYTE6(v172[36]) = 0;
  WORD2(v172[36]) = 0;
  BYTE2(v171[13]) = 0;
  LOWORD(v171[13]) = 0;
  memset(v195, 0, 584);
  memset(v168, 0, 33);
  memset(v165, 0, 24);
  WORD2(v197[0]) = 0;
  LODWORD(v197[0]) = 0;
  memset(v171, 0, 22);
  v196[117] = 0uLL;
  g_Fused_Nav_WD = v171[0];
  *(void *)((char *)&g_Fused_Nav_WD + 14) = *(void *)((char *)v171 + 14);
  word_26AE930E6 = 0;
  byte_26AE930E8 = 0;
  memcpy(&unk_26AE930E9, v194, 0x120uLL);
  dword_26AE9320C = 0;
  byte_26AE93210 = 0;
  dword_26AE93214 = 0;
  byte_26AE93218 = 0;
  dword_26AE9321C = 0;
  byte_26AE93220 = 0;
  dword_26AE93224 = 0;
  byte_26AE93228 = 0;
  dword_26AE9322C = 0;
  byte_26AE93230 = 0;
  dword_26AE93234 = 0;
  byte_26AE93238 = 0;
  dword_26AE9323C = 0;
  byte_26AE93240 = 0;
  dword_26AE93244 = 0;
  byte_26AE93248 = 0;
  dword_26AE9324C = 0;
  byte_26AE93250 = 0;
  dword_26AE93254 = 0;
  byte_26AE93258 = 0;
  dword_26AE9325C = 0;
  byte_26AE93260 = 0;
  dword_26AE93264 = 0;
  byte_26AE93268 = 0;
  dword_26AE9326C = 0;
  byte_26AE93270 = 0;
  dword_26AE93274 = 0;
  byte_26AE93278 = 0;
  dword_26AE9327C = 0;
  byte_26AE93280 = 0;
  dword_26AE93284 = 0;
  byte_26AE93288 = 0;
  dword_26AE9328C = 0;
  byte_26AE93290 = 0;
  word_26AE93291 = 0;
  byte_26AE93293 = 0;
  dword_26AE93294 = 0;
  byte_26AE93298 = 0;
  word_26AE93299 = 0;
  byte_26AE9329B = 0;
  dword_26AE9329C = 0;
  byte_26AE932A0 = 0;
  word_26AE932A1 = 0;
  byte_26AE932A3 = 0;
  dword_26AE932A4 = 0;
  byte_26AE932A8 = 0;
  byte_26AE932AB = 0;
  word_26AE932A9 = 0;
  dword_26AE932AC = 0;
  byte_26AE932B0 = 0;
  byte_26AE932B3 = 0;
  word_26AE932B1 = 0;
  dword_26AE932B4 = 0;
  byte_26AE932B8 = 0;
  byte_26AE932BB = 0;
  word_26AE932B9 = 0;
  dword_26AE932BC = 0;
  byte_26AE932C0 = 0;
  byte_26AE932C3 = 0;
  word_26AE932C1 = 0;
  dword_26AE932C4 = 0;
  byte_26AE932C8 = 0;
  byte_26AE932CB = 0;
  word_26AE932C9 = 0;
  dword_26AE932CC = 0;
  byte_26AE932D0 = 0;
  byte_26AE932D3 = 0;
  word_26AE932D1 = 0;
  dword_26AE932D4 = 0;
  byte_26AE932D8 = 0;
  byte_26AE932DB = 0;
  word_26AE932D9 = 0;
  dword_26AE932DC = 0;
  byte_26AE932E0 = 0;
  byte_26AE932E3 = 0;
  word_26AE932E1 = 0;
  dword_26AE932E4 = 0;
  byte_26AE932E8 = 0;
  byte_26AE932EB = 0;
  word_26AE932E9 = 0;
  dword_26AE932EC = 0;
  byte_26AE932F0 = 0;
  byte_26AE932F3 = 0;
  word_26AE932F1 = 0;
  dword_26AE932F4 = 0;
  word_26AE932F8 = 0;
  memcpy(&unk_26AE932FA, v201, 0x198uLL);
  xmmword_26AE93492 = v198[0];
  qword_26AE934A2 = *(void *)&v198[1];
  xmmword_26AE934AA = v172[0];
  qword_26AE934BA = *(void *)&v172[1];
  xmmword_26AE934C2 = v196[0];
  *(long long *)((char *)&xmmword_26AE934C2 + 11) = *(_OWORD *)((char *)v196 + 11);
  byte_26AE934DD = 0;
  word_26AE934DE = 0;
  byte_26AE934E0 = 0;
  memcpy(&unk_26AE934E1, v164, 0x120uLL);
  word_26AE93601 = 0;
  byte_26AE93603 = 0;
  dword_26AE93604 = 0;
  byte_26AE93608 = 0;
  word_26AE93609 = 0;
  byte_26AE9360B = 0;
  dword_26AE9360C = 0;
  byte_26AE93610 = 0;
  word_26AE93611 = 0;
  byte_26AE93613 = 0;
  dword_26AE93614 = 0;
  byte_26AE93618 = 0;
  word_26AE93619 = 0;
  byte_26AE9361B = 0;
  dword_26AE9361C = 0;
  byte_26AE93620 = 0;
  word_26AE93621 = 0;
  byte_26AE93623 = 0;
  dword_26AE93624 = 0;
  byte_26AE93628 = 0;
  word_26AE93629 = 0;
  byte_26AE9362B = 0;
  dword_26AE9362C = 0;
  byte_26AE93630 = 0;
  byte_26AE93633 = 0;
  word_26AE93631 = 0;
  dword_26AE93634 = 0;
  byte_26AE93638 = 0;
  byte_26AE9363B = 0;
  word_26AE93639 = 0;
  dword_26AE9363C = 0;
  byte_26AE93640 = 0;
  byte_26AE93643 = 0;
  word_26AE93641 = 0;
  dword_26AE93644 = 0;
  byte_26AE93648 = 0;
  byte_26AE9364B = 0;
  word_26AE93649 = 0;
  dword_26AE9364C = 0;
  byte_26AE93650 = 0;
  byte_26AE93653 = 0;
  word_26AE93651 = 0;
  dword_26AE93654 = 0;
  byte_26AE93658 = 0;
  byte_26AE9365B = 0;
  word_26AE93659 = 0;
  dword_26AE9365C = 0;
  byte_26AE93660 = 0;
  byte_26AE93663 = 0;
  word_26AE93661 = 0;
  dword_26AE93664 = 0;
  byte_26AE93668 = 0;
  byte_26AE9366B = 0;
  word_26AE93669 = 0;
  dword_26AE9366C = 0;
  byte_26AE93670 = 0;
  byte_26AE93673 = 0;
  word_26AE93671 = 0;
  dword_26AE93674 = 0;
  byte_26AE93678 = 0;
  byte_26AE9367B = 0;
  word_26AE93679 = 0;
  dword_26AE9367C = 0;
  byte_26AE93680 = 0;
  byte_26AE93683 = 0;
  word_26AE93681 = 0;
  dword_26AE93684 = 0;
  byte_26AE93688 = 0;
  byte_26AE9368B = 0;
  word_26AE93689 = 0;
  dword_26AE9368C = 0;
  byte_26AE93690 = 0;
  byte_26AE93693 = 0;
  word_26AE93691 = 0;
  dword_26AE93694 = 0;
  byte_26AE93698 = 0;
  byte_26AE9369B = 0;
  word_26AE93699 = 0;
  dword_26AE9369C = 0;
  byte_26AE936A0 = 0;
  byte_26AE936A3 = 0;
  word_26AE936A1 = 0;
  dword_26AE936A4 = 0;
  byte_26AE936A8 = 0;
  byte_26AE936AB = 0;
  word_26AE936A9 = 0;
  dword_26AE936AC = 0;
  byte_26AE936B0 = 0;
  byte_26AE936B3 = 0;
  word_26AE936B1 = 0;
  dword_26AE936B4 = 0;
  byte_26AE936B8 = 0;
  byte_26AE936BB = 0;
  word_26AE936B9 = 0;
  dword_26AE936BC = 0;
  byte_26AE936C0 = 0;
  byte_26AE936C3 = 0;
  word_26AE936C1 = 0;
  dword_26AE936C4 = 0;
  byte_26AE936C8 = 0;
  byte_26AE936CB = 0;
  word_26AE936C9 = 0;
  dword_26AE936CC = 0;
  byte_26AE936D0 = 0;
  byte_26AE936D3 = 0;
  word_26AE936D1 = 0;
  dword_26AE936D4 = 0;
  byte_26AE936D8 = 0;
  byte_26AE936DB = 0;
  word_26AE936D9 = 0;
  dword_26AE936DC = 0;
  byte_26AE936E0 = 0;
  byte_26AE936E3 = 0;
  word_26AE936E1 = 0;
  dword_26AE936E4 = 0;
  byte_26AE936E8 = 0;
  byte_26AE936EB = 0;
  word_26AE936E9 = 0;
  dword_26AE936EC = 0;
  word_26AE936F0 = 0;
  memcpy(&unk_26AE936F2, v195, 0x198uLL);
  xmmword_26AE9388A = *(_OWORD *)v168;
  qword_26AE9389A = *(void *)&v168[16];
  xmmword_26AE938A2 = *(_OWORD *)v165;
  qword_26AE938B2 = *(void *)&v165[16];
  dword_26AE938BA = 0;
  word_26AE938BE = 0;
  qword_26AE938C0 = 0;
  xmmword_26AE938C8 = 0uLL;
  DWORD1(v195[38]) = 0;
  *((void *)&v195[42] + 1) = 0;
  *(int *)((char *)&dword_26AE96809 + 3) = 0;
  dword_26AE96809 = 0;
  dword_26AE96859 = 0;
  *(int *)((char *)&dword_26AE96859 + 3) = 0;
  memset(v198, 0, 33);
  memset(v194, 0, 322);
  dword_26AE96A11 = 0;
  *(int *)((char *)&dword_26AE96A11 + 3) = 0;
  dword_26AE96A21 = 0;
  *(int *)((char *)&dword_26AE96A21 + 3) = 0;
  dword_26AE96A71 = 0;
  *(int *)((char *)&dword_26AE96A71 + 3) = 0;
  memset(v172, 0, 33);
  memset(v164, 0, 322);
  *(int *)((char *)&dword_26AE96C29 + 3) = 0;
  dword_26AE96C29 = 0;
  dword_26AE96C39 = 0;
  *(int *)((char *)&dword_26AE96C39 + 3) = 0;
  dword_26AE96C89 = 0;
  *(int *)((char *)&dword_26AE96C89 + 3) = 0;
  *(_DWORD *)BOOL v168 = 0;
  *(_DWORD *)&v168[3] = 0;
  LODWORD(v196[0]) = 0;
  dword_26AE96E41 = 0;
  *(int *)((char *)&dword_26AE96E41 + 3) = 0;
  dword_26AE96E51 = 0;
  *(int *)((char *)&dword_26AE96E51 + 3) = 0;
  *(int *)((char *)&dword_26AE96EA1 + 3) = 0;
  dword_26AE96EA1 = 0;
  LODWORD(v201[0]) = 0;
  *(_DWORD *)((char *)v201 + 3) = 0;
  *(_OWORD *)((char *)&v195[40] + 8) = 0u;
  *(_OWORD *)((char *)&v195[41] + 8) = 0u;
  *(_OWORD *)((char *)&v195[38] + 8) = 0u;
  *(_OWORD *)((char *)&v195[39] + 8) = 0u;
  byte_26AE96858 = 0;
  unk_26AE96848 = 0u;
  unk_26AE96838 = 0u;
  unk_26AE96828 = 0u;
  unk_26AE96818 = 0u;
  *(_OWORD *)((char *)&v195[37] + 4) = 0u;
  *(_OWORD *)((char *)&v195[36] + 8) = 0u;
  byte_26AE96A10 = 0;
  xmmword_26AE96A00 = 0u;
  xmmword_26AE969F0 = 0u;
  xmmword_26AE969E0 = 0u;
  xmmword_26AE969D0 = 0u;
  xmmword_26AE96A30 = 0u;
  xmmword_26AE96A40 = 0u;
  xmmword_26AE96A50 = 0u;
  xmmword_26AE96A60 = 0u;
  byte_26AE96A70 = 0;
  byte_26AE96C28 = 0;
  unk_26AE96C18 = 0u;
  unk_26AE96C08 = 0u;
  unk_26AE96BF8 = 0u;
  unk_26AE96BE8 = 0u;
  unk_26AE96C48 = 0u;
  unk_26AE96C58 = 0u;
  unk_26AE96C68 = 0u;
  unk_26AE96C78 = 0u;
  byte_26AE96C88 = 0;
  byte_26AE96E40 = 0;
  xmmword_26AE96E30 = 0u;
  xmmword_26AE96E20 = 0u;
  xmmword_26AE96E10 = 0u;
  xmmword_26AE96E00 = 0u;
  xmmword_26AE96E60 = 0u;
  xmmword_26AE96E70 = 0u;
  xmmword_26AE96E80 = 0u;
  xmmword_26AE96E90 = 0u;
  byte_26AE96EA0 = 0;
  *(_OWORD *)((char *)v196 + 6) = 0u;
  memset(v195, 0, 408);
  *(void *)&v168[7] = 0;
  bzero((char *)v201 + 7, 0x324uLL);
  memcpy(&g_GNSS_Debug_Data, v195, 0x2B0uLL);
  qword_26AE96800 = 0;
  byte_26AE96808 = 0;
  qword_26AE96810 = 0;
  qword_26AE96860 = 0;
  byte_26AE96868 = 0;
  xmmword_26AE96869 = v198[0];
  unk_26AE96879 = v198[1];
  byte_26AE96889 = v198[2];
  memcpy(&unk_26AE9688A, v194, 0x142uLL);
  dword_26AE969CC = 0;
  qword_26AE96A18 = 0;
  byte_26AE96A20 = 0;
  qword_26AE96A28 = 0;
  qword_26AE96A78 = 0;
  byte_26AE96A80 = 0;
  xmmword_26AE96A81 = v172[0];
  unk_26AE96A91 = v172[1];
  byte_26AE96AA1 = v172[2];
  memcpy(&unk_26AE96AA2, v164, 0x142uLL);
  dword_26AE96BE4 = 0;
  qword_26AE96C30 = 0;
  byte_26AE96C38 = 0;
  qword_26AE96C40 = 0;
  qword_26AE96C90 = 0;
  byte_26AE96C98 = 0;
  xmmword_26AE96C99 = *(_OWORD *)v168;
  unk_26AE96CA9 = *(_OWORD *)&v168[16];
  byte_26AE96CB9 = v168[32];
  memcpy(&unk_26AE96CBA, v196, 0x142uLL);
  dword_26AE96DFC = 0;
  qword_26AE96E48 = 0;
  byte_26AE96E50 = 0;
  qword_26AE96E58 = 0;
  qword_26AE96EA8 = 0;
  byte_26AE96EB0 = 0;
  return memcpy(&unk_26AE96EB1, v201, 0x32BuLL);
}

char *GNSS_Log_p_list_Ptr_Mismatch(char *result, const void *a2, const void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 != a3)
  {
    int v4 = v18;
    double v16 = v18;
    uint64_t v17 = &v19;
    v15[1] = v18;
    char v5 = 69;
    uint64_t v6 = 1u;
    do
    {
      v15[0] = v4 + 1;
      char *v4 = v5;
      int v4 = (char *)v15[0];
      if (v15[0] >= (unint64_t)v17)
      {
        int v4 = v16;
        v15[0] = v16;
      }
      char v5 = aErrorPListCorr[v6++];
    }
    while (v6 != 30);
    char v7 = *result;
    if (*result)
    {
      uint64_t v8 = (unsigned __int8 *)(result + 1);
      do
      {
        v15[0] = v4 + 1;
        char *v4 = v7;
        int v4 = (char *)v15[0];
        if (v15[0] >= (unint64_t)v17)
        {
          int v4 = v16;
          v15[0] = v16;
        }
        int v9 = *v8++;
        char v7 = v9;
      }
      while (v9);
    }
    uint64_t v10 = 0;
    char v11 = 58;
    do
    {
      v15[0] = v4 + 1;
      char *v4 = v11;
      int v4 = (char *)v15[0];
      if (v15[0] >= (unint64_t)v17)
      {
        int v4 = v16;
        v15[0] = v16;
      }
      char v11 = asc_22BB0A4D5[++v10];
    }
    while (v10 != 2);
    sprintf_p((uint64_t)v15, (unint64_t)a2);
    uint64_t v12 = 0;
    char v13 = 32;
    uint64_t v14 = (char *)v15[0];
    do
    {
      v15[0] = v14 + 1;
      *uint64_t v14 = v13;
      uint64_t v14 = (char *)v15[0];
      if (v15[0] >= (unint64_t)v17)
      {
        uint64_t v14 = v16;
        v15[0] = v16;
      }
      char v13 = asc_22BB0A4D8[++v12];
    }
    while (v12 != 4);
    sprintf_p((uint64_t)v15, (unint64_t)a3);
    *(unsigned char *)v15[0] = 0;
    return EvCrt_v("%s", v18);
  }
  return result;
}

uint64_t GNSS_Validate_p_list(uint64_t result, const char *a2)
{
  BOOL v3 = (const void **)result;
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v4 = *(const void **)(result + 8);
  if (v4 != (const void *)qword_26AE77D30
    || *(const void **)(result + 16) != qword_26AE77D38
    || *(_OWORD *)(result + 24) != xmmword_26AE77D40
    || *(void *)(result + 40) != qword_26AE77D50
    || *(const void **)(result + 48) != qword_26AE77D58
    || *(_OWORD *)(result + 56) != xmmword_26AE77D60
    || *(void *)(result + 72) != qword_26AE77D70
    || *(_OWORD *)(result + 80) != xmmword_26AE77D78
    || *(void *)(result + 96) != qword_26AE77D88
    || *(void *)(result + 104) != qword_26AE77D90
    || *(const void **)(result + 112) != qword_26AE77D98
    || *(_OWORD *)(result + 120) != xmmword_26AE77DA0
    || *(void *)(result + 136) != qword_26AE77DB0
    || *(void *)(result + 144) != (void)xmmword_26AE77DB8
    || *(void *)(result + 160) != qword_26AE77DC8
    || *(void *)(result + 168) != qword_26AE77DD0
    || *(const void **)(result + 176) != qword_26AE77DD8
    || *(_OWORD *)(result + 184) != xmmword_26AE77DE0
    || *(void *)(result + 200) != qword_26AE77DF0
    || *(void *)(result + 208) != qword_26AE77DF8
    || *(void *)(result + 216) != qword_26AE77E00
    || *(void *)(result + 232) != qword_26AE77E10
    || *(void *)(result + 240) != qword_26AE77E18
    || *(void *)(result + 248) != qword_26AE77E20
    || *(void *)(result + 264) != qword_26AE77E30
    || *(const void **)(result + 272) != qword_26AE77E38
    || *(_OWORD *)(result + 280) != xmmword_26AE77E40
    || *(void *)(result + 296) != qword_26AE77E50
    || *(const void **)(result + 304) != qword_26AE77E58
    || *(_OWORD *)(result + 312) != xmmword_26AE77E60
    || *(void *)(result + 328) != qword_26AE77E70
    || *(const void **)(result + 336) != qword_26AE77E78
    || *(_OWORD *)(result + 344) != xmmword_26AE77E80
    || *(void *)(result + 360) != qword_26AE77E90
    || *(const void **)(result + 368) != qword_26AE77E98
    || *(_OWORD *)(result + 376) != xmmword_26AE77EA0
    || *(void *)(result + 392) != qword_26AE77EB0)
  {
    GNSS_Log_p_list_Ptr_Mismatch("DBtt", v4, (const void *)qword_26AE77D30);
    GNSS_Log_p_list_Ptr_Mismatch("DBrm", v3[2], qword_26AE77D38);
    GNSS_Log_p_list_Ptr_Mismatch("DBsf", v3[3], (const void *)xmmword_26AE77D40);
    GNSS_Log_p_list_Ptr_Mismatch("DBae", v3[4], *((const void **)&xmmword_26AE77D40 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("DBaa", v3[5], (const void *)qword_26AE77D50);
    GNSS_Log_p_list_Ptr_Mismatch("DBts", v3[6], qword_26AE77D58);
    GNSS_Log_p_list_Ptr_Mismatch("DBnm", v3[7], (const void *)xmmword_26AE77D60);
    GNSS_Log_p_list_Ptr_Mismatch("DBcr", v3[8], *((const void **)&xmmword_26AE77D60 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("DBss", v3[9], (const void *)qword_26AE77D70);
    GNSS_Log_p_list_Ptr_Mismatch("DBgs", v3[10], (const void *)xmmword_26AE77D78);
    GNSS_Log_p_list_Ptr_Mismatch("DBns", v3[11], *((const void **)&xmmword_26AE77D78 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("DBst", v3[12], (const void *)qword_26AE77D88);
    GNSS_Log_p_list_Ptr_Mismatch("DBtm", v3[13], (const void *)qword_26AE77D90);
    GNSS_Log_p_list_Ptr_Mismatch("DBsn", v3[14], qword_26AE77D98);
    GNSS_Log_p_list_Ptr_Mismatch("DBsa", v3[16], *((const void **)&xmmword_26AE77DA0 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("DBsi", v3[15], (const void *)xmmword_26AE77DA0);
    GNSS_Log_p_list_Ptr_Mismatch("DBsc", v3[17], (const void *)qword_26AE77DB0);
    GNSS_Log_p_list_Ptr_Mismatch("DBsa", v3[18], (const void *)xmmword_26AE77DB8);
    GNSS_Log_p_list_Ptr_Mismatch("MEsd", v3[20], (const void *)qword_26AE77DC8);
    GNSS_Log_p_list_Ptr_Mismatch("GMsd", v3[21], (const void *)qword_26AE77DD0);
    GNSS_Log_p_list_Ptr_Mismatch("NKsd", v3[22], qword_26AE77DD8);
    GNSS_Log_p_list_Ptr_Mismatch("DDsd", v3[23], (const void *)xmmword_26AE77DE0);
    GNSS_Log_p_list_Ptr_Mismatch("STsd", v3[24], *((const void **)&xmmword_26AE77DE0 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("PPsd", v3[25], (const void *)qword_26AE77DF0);
    GNSS_Log_p_list_Ptr_Mismatch("SAsd", v3[26], (const void *)qword_26AE77DF8);
    GNSS_Log_p_list_Ptr_Mismatch("FNsd", v3[27], (const void *)qword_26AE77E00);
    GNSS_Log_p_list_Ptr_Mismatch("NKwd", v3[29], (const void *)qword_26AE77E10);
    GNSS_Log_p_list_Ptr_Mismatch("DDwd", v3[30], (const void *)qword_26AE77E18);
    GNSS_Log_p_list_Ptr_Mismatch("STwd", v3[31], (const void *)qword_26AE77E20);
    GNSS_Log_p_list_Ptr_Mismatch("SAwd", v3[33], (const void *)qword_26AE77E30);
    GNSS_Log_p_list_Ptr_Mismatch("FNwd", v3[34], qword_26AE77E38);
    GNSS_Log_p_list_Ptr_Mismatch("GNdd", v3[35], (const void *)xmmword_26AE77E40);
    GNSS_Log_p_list_Ptr_Mismatch("Vers", v3[36], *((const void **)&xmmword_26AE77E40 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("GNcf", v3[37], (const void *)qword_26AE77E50);
    GNSS_Log_p_list_Ptr_Mismatch("GNnd", v3[38], qword_26AE77E58);
    GNSS_Log_p_list_Ptr_Mismatch("GNdd", v3[39], (const void *)xmmword_26AE77E60);
    GNSS_Log_p_list_Ptr_Mismatch("NVrm", v3[40], *((const void **)&xmmword_26AE77E60 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("NArm", v3[41], (const void *)qword_26AE77E70);
    GNSS_Log_p_list_Ptr_Mismatch("NVrs", v3[42], qword_26AE77E78);
    GNSS_Log_p_list_Ptr_Mismatch("Meas", v3[43], (const void *)xmmword_26AE77E80);
    GNSS_Log_p_list_Ptr_Mismatch("Ctrl", v3[44], *((const void **)&xmmword_26AE77E80 + 1));
    GNSS_Log_p_list_Ptr_Mismatch("NMEA", v3[45], (const void *)qword_26AE77E90);
    GNSS_Log_p_list_Ptr_Mismatch("NDbg", v3[46], qword_26AE77E98);
    GNSS_Log_p_list_Ptr_Mismatch("ELog", v3[47], (const void *)xmmword_26AE77EA0);
    GNSS_Log_p_list_Ptr_Mismatch("GDbg", v3[48], *((const void **)&xmmword_26AE77EA0 + 1));
    strlcpy(__dst, a2, 0x69uLL);
    strlcat(__dst, ": p_list DB corrupted!", 0x80uLL);
    return gn_report_assertion_failure(__dst);
  }
  return result;
}

void _GLOBAL__sub_I_GNSS_Core_Data_cpp()
{
  uint64_t v0 = 0;
  g_GN_GPS_Data_p_list = 0u;
  *(_OWORD *)&qword_26AE66BF8 = 0u;
  unk_26AE66C08 = 0u;
  *(_OWORD *)&qword_26AE66C18 = 0u;
  xmmword_26AE66C28 = 0u;
  *(_OWORD *)&qword_26AE66C38 = 0u;
  xmmword_26AE66C48 = 0u;
  *(_OWORD *)&qword_26AE66C58 = 0u;
  xmmword_26AE66C68 = 0u;
  *(_OWORD *)&qword_26AE66C78 = 0u;
  xmmword_26AE66C88 = 0u;
  *(_OWORD *)&qword_26AE66C98 = 0u;
  xmmword_26AE66CA8 = 0u;
  unk_26AE66CC0 = 0u;
  *(long long *)((char *)&xmmword_26AE66CC8 + 8) = 0u;
  *(_OWORD *)&qword_26AE66CE0 = 0u;
  unk_26AE66CF8 = 0u;
  xmmword_26AE66D08 = 0u;
  xmmword_26AE66D18 = 0u;
  xmmword_26AE66D28 = 0u;
  xmmword_26AE66D38 = 0u;
  xmmword_26AE66D48 = 0u;
  xmmword_26AE66D58 = 0u;
  xmmword_26AE66D68 = 0u;
  do
  {
    unsigned __int16 v1 = (char *)&g_DB_SV_Subframes + v0;
    *(_DWORD *)unsigned __int16 v1 = 0;
    v1[52] = 0;
    v0 += 56;
  }
  while (v0 != 2688);
  qword_26AE84C78 = 0;
  unk_26AE84C80 = 0;
  qword_26AE84C88 = 0;
  g_DB_Acq_Aid_Table = 0u;
  *(_OWORD *)algn_26AEA5060 = 0u;
  *(_OWORD *)&algn_26AEA5060[13] = 0u;
  qword_26AEA5080 = 0x200000000;
  dword_26AEA5088 = 5;
  int v2 = &dword_26AEA508C;
  do
  {
    *int v2 = 0;
    *((unsigned char *)v2 + 4) = 0;
    *(_OWORD *)(v2 + 2) = 0uLL;
    *(_OWORD *)(v2 + 6) = 0uLL;
    *(void *)((char *)v2 + 37) = 0;
    v2 += 12;
  }
  while (v2 != (int *)&unk_26AEA5FEC);
  qword_26AEA6928 = 0;
  bzero(&unk_26AEA5FEC, 0x85DuLL);
  *(long long *)((char *)&xmmword_26AEA687C + 9) = 0u;
  xmmword_26AEA687C = 0u;
  xmmword_26AEA686C = 0u;
  xmmword_26AEA685C = 0u;
  xmmword_26AEA684C = 0u;
  xmmword_26AEA6898 = 0u;
  unk_26AEA68A8 = 0u;
  xmmword_26AEA68B8 = 0u;
  unk_26AEA68C8 = 0u;
  xmmword_26AEA68D8 = 0u;
  unk_26AEA68E8 = 0u;
  xmmword_26AEA68F8 = 0u;
  unk_26AEA6908 = 0u;
  unk_26AEA6917 = 0u;
  xmmword_26AEA4A20 = 0u;
  *(void *)((char *)&xmmword_26AEA4A20 + 13) = 0;
  qword_26AEA4A48 = 0;
  dword_26AEA4A50 = 0;
  unk_26AEA4A38 = 0u;
  unk_26AEA4A54 = 0x500000002;
  dword_26AEA4A64 = 0;
  word_26AEA4A68 = 0;
  dword_26AEA4E20 = 0;
  word_26AEA4E24 = 0;
  dword_26AEA4A5C = 0;
  *(int *)((char *)&dword_26AEA4A5C + 3) = 0;
  xmmword_26AEA4A70 = 0u;
  unk_26AEA4A80 = 0u;
  xmmword_26AEA4A90 = 0u;
  unk_26AEA4AA0 = 0u;
  xmmword_26AEA4AB0 = 0u;
  unk_26AEA4AC0 = 0u;
  xmmword_26AEA4AD0 = 0u;
  unk_26AEA4AE0 = 0u;
  xmmword_26AEA4AF0 = 0u;
  unk_26AEA4B00 = 0u;
  xmmword_26AEA4B10 = 0u;
  unk_26AEA4B20 = 0u;
  xmmword_26AEA4B30 = 0u;
  unk_26AEA4B40 = 0u;
  xmmword_26AEA4B50 = 0u;
  unk_26AEA4B60 = 0u;
  xmmword_26AEA4B70 = 0u;
  unk_26AEA4B80 = 0u;
  xmmword_26AEA4B90 = 0u;
  unk_26AEA4BA0 = 0u;
  xmmword_26AEA4BB0 = 0u;
  *(long long *)((char *)&xmmword_26AEA4BB0 + 15) = 0u;
  word_26AEA4CB0 = 0;
  xmmword_26AEA4C90 = 0u;
  unk_26AEA4CA0 = 0u;
  xmmword_26AEA4C70 = 0u;
  unk_26AEA4C80 = 0u;
  xmmword_26AEA4C50 = 0u;
  unk_26AEA4C60 = 0u;
  xmmword_26AEA4C30 = 0u;
  unk_26AEA4C40 = 0u;
  xmmword_26AEA4C10 = 0u;
  unk_26AEA4C20 = 0u;
  xmmword_26AEA4BF0 = 0u;
  unk_26AEA4C00 = 0u;
  xmmword_26AEA4BD0 = 0u;
  unk_26AEA4BE0 = 0u;
  xmmword_26AEA4CB8 = 0u;
  unk_26AEA4CC8 = 0u;
  xmmword_26AEA4CD8 = 0u;
  unk_26AEA4CE8 = 0u;
  xmmword_26AEA4CF8 = 0u;
  unk_26AEA4D08 = 0u;
  xmmword_26AEA4D18 = 0u;
  unk_26AEA4D28 = 0u;
  xmmword_26AEA4D38 = 0u;
  unk_26AEA4D48 = 0u;
  xmmword_26AEA4D58 = 0u;
  unk_26AEA4D68 = 0u;
  xmmword_26AEA4D78 = 0u;
  unk_26AEA4D88 = 0u;
  word_26AEA4D98 = 0;
  unk_26AEA4E0F = 0u;
  xmmword_26AEA4DF0 = 0u;
  unk_26AEA4E00 = 0u;
  xmmword_26AEA4DD0 = 0u;
  unk_26AEA4DE0 = 0u;
  xmmword_26AEA4DB0 = 0u;
  unk_26AEA4DC0 = 0u;
  xmmword_26AEA4DA0 = 0u;
  word_26AEA4E38 = 0;
  xmmword_26AEA4E28 = 0u;
  xmmword_26AEA4E6C = 0u;
  unk_26AEA4E7C = 0u;
  xmmword_26AEA4E4C = 0u;
  unk_26AEA4E5C = 0u;
  xmmword_26AEA4E3C = 0u;
  word_26AEA4E8C = 1;
  byte_26AEA4E8E = 1;
  qword_26AEA4F24 = 0;
  word_26AEA4F1F = 0;
  xmmword_26AEA4EFF = 0u;
  unk_26AEA4F0F = 0u;
  xmmword_26AEA4EDF = 0u;
  unk_26AEA4EEF = 0u;
  xmmword_26AEA4EBF = 0u;
  unk_26AEA4ECF = 0u;
  xmmword_26AEA4E9F = 0u;
  unk_26AEA4EAF = 0u;
  xmmword_26AEA4E8F = 0u;
  dword_26AEA4F60 = 0;
  xmmword_26AEA4F50 = 0u;
  xmmword_26AEA4F40 = 0u;
  xmmword_26AEA4F30 = 0u;
  g_DB_GNSS_Soluint64_t n = 0;
  unk_26AEA6934 = 0u;
  unk_26AEA6944 = 0x500000002;
  word_26AEA6966 = 0;
  dword_26AEA6968 = 0;
  dword_26AEA69E4 = 0;
  byte_26AEA69E8 = 0;
  *(_DWORD *)&algn_26AEA69E9[1] = 0;
  *(void *)((char *)&xmmword_26AEA6950 + 13) = 0;
  xmmword_26AEA6950 = 0u;
  xmmword_26AEA6970 = 0u;
  unk_26AEA6980 = 0u;
  xmmword_26AEA6990 = 0u;
  unk_26AEA69A0 = 0u;
  xmmword_26AEA69B0 = 0u;
  unk_26AEA69C0 = 0u;
  xmmword_26AEA69D0 = 0u;
  *(_DWORD *)((char *)&xmmword_26AEA69D0 + 15) = 0;
  byte_26AEA6B04 = 0;
  dword_26AEA6B08 = 0;
  byte_26AEA6B0C = 0;
  dword_26AEA6B10 = 0;
  byte_26AEA6B14 = 0;
  dword_26AEA6B18 = 0;
  byte_26AEA6B1C = 0;
  dword_26AEA6B20 = 0;
  byte_26AEA6B24 = 0;
  dword_26AEA6B28 = 0;
  byte_26AEA6B2C = 0;
  dword_26AEA6B30 = 0;
  byte_26AEA6B34 = 0;
  dword_26AEA6B38 = 0;
  byte_26AEA6B3C = 0;
  dword_26AEA6B40 = 0;
  byte_26AEA6B44 = 0;
  dword_26AEA6B48 = 0;
  byte_26AEA6B4C = 0;
  dword_26AEA6B50 = 0;
  byte_26AEA6B54 = 0;
  dword_26AEA6B58 = 0;
  byte_26AEA6B5C = 0;
  dword_26AEA6B60 = 0;
  byte_26AEA6B64 = 0;
  dword_26AEA6B68 = 0;
  byte_26AEA6B6C = 0;
  dword_26AEA6B70 = 0;
  byte_26AEA6B74 = 0;
  dword_26AEA6B78 = 0;
  byte_26AEA6B7C = 0;
  dword_26AEA6B80 = 0;
  byte_26AEA6B84 = 0;
  dword_26AEA6B88 = 0;
  byte_26AEA6B8C = 0;
  dword_26AEA6B90 = 0;
  byte_26AEA6B94 = 0;
  dword_26AEA6B98 = 0;
  byte_26AEA6B9C = 0;
  dword_26AEA6BA0 = 0;
  byte_26AEA6BA4 = 0;
  dword_26AEA6BA8 = 0;
  byte_26AEA6BAC = 0;
  dword_26AEA6BB0 = 0;
  byte_26AEA6BB4 = 0;
  dword_26AEA6BB8 = 0;
  byte_26AEA6BBC = 0;
  dword_26AEA6BC0 = 0;
  byte_26AEA6BC4 = 0;
  dword_26AEA6BC8 = 0;
  byte_26AEA6BCC = 0;
  dword_26AEA6BD0 = 0;
  byte_26AEA6BD4 = 0;
  dword_26AEA6BD8 = 0;
  byte_26AEA6BDC = 0;
  dword_26AEA6BE0 = 0;
  byte_26AEA6BE4 = 0;
  dword_26AEA6BE8 = 0;
  byte_26AEA6BEC = 0;
  dword_26AEA6BF0 = 0;
  byte_26AEA6BF4 = 0;
  dword_26AEA6BF8 = 0;
  byte_26AEA6BFC = 0;
  dword_26AEA6C00 = 0;
  byte_26AEA6C04 = 0;
  dword_26AEA6C08 = 0;
  byte_26AEA6C0C = 0;
  dword_26AEA6C10 = 0;
  xmmword_26AEA69F0 = 0u;
  xmmword_26AEA6AA0 = 0u;
  unk_26AEA6AF1 = 0u;
  unk_26AEA6AE8 = 0u;
  unk_26AEA6AD8 = 0u;
  unk_26AEA6AC8 = 0u;
  unk_26AEA6AB8 = 0u;
  xmmword_26AEA7100 = 0u;
  word_26AEA7110 = 0;
  word_26AEA7128 = 0;
  xmmword_26AEA7118 = 0u;
  xmmword_26AEA6A00 = 0u;
  unk_26AEA6A10 = 0u;
  xmmword_26AEA6A20 = 0u;
  unk_26AEA6A30 = 0u;
  xmmword_26AEA6A40 = 0u;
  unk_26AEA6A50 = 0u;
  xmmword_26AEA6A60 = 0u;
  unk_26AEA6A70 = 0u;
  xmmword_26AEA6A80 = 0u;
  unk_26AEA6A90 = 0u;
  *(void *)((char *)&xmmword_26AEA6AA0 + 13) = 0;
  bzero(&unk_26AEA6C18, 0x4E2uLL);
  g_DB_Nav_Soluint64_t n = 0;
  unk_26AEA7134 = 0u;
  unk_26AEA7144 = 0x500000002;
  word_26AEA7166 = 0;
  dword_26AEA7168 = 0;
  dword_26AEA71E4 = 0;
  byte_26AEA71E8 = 0;
  *(_DWORD *)&algn_26AEA71E9[1] = 0;
  xmmword_26AEA7150 = 0u;
  *(void *)((char *)&xmmword_26AEA7150 + 13) = 0;
  xmmword_26AEA7170 = 0u;
  unk_26AEA7180 = 0u;
  xmmword_26AEA7190 = 0u;
  unk_26AEA71A0 = 0u;
  xmmword_26AEA71B0 = 0u;
  unk_26AEA71C0 = 0u;
  xmmword_26AEA71D0 = 0u;
  *(_DWORD *)((char *)&xmmword_26AEA71D0 + 15) = 0;
  byte_26AEA7304 = 0;
  dword_26AEA7308 = 0;
  byte_26AEA730C = 0;
  dword_26AEA7310 = 0;
  byte_26AEA7314 = 0;
  dword_26AEA7318 = 0;
  byte_26AEA731C = 0;
  dword_26AEA7320 = 0;
  byte_26AEA7324 = 0;
  dword_26AEA7328 = 0;
  byte_26AEA732C = 0;
  dword_26AEA7330 = 0;
  byte_26AEA7334 = 0;
  dword_26AEA7338 = 0;
  byte_26AEA733C = 0;
  dword_26AEA7340 = 0;
  byte_26AEA7344 = 0;
  dword_26AEA7348 = 0;
  byte_26AEA734C = 0;
  dword_26AEA7350 = 0;
  byte_26AEA7354 = 0;
  dword_26AEA7358 = 0;
  byte_26AEA735C = 0;
  dword_26AEA7360 = 0;
  byte_26AEA7364 = 0;
  dword_26AEA7368 = 0;
  byte_26AEA736C = 0;
  dword_26AEA7370 = 0;
  byte_26AEA7374 = 0;
  dword_26AEA7378 = 0;
  byte_26AEA737C = 0;
  dword_26AEA7380 = 0;
  byte_26AEA7384 = 0;
  dword_26AEA7388 = 0;
  byte_26AEA738C = 0;
  dword_26AEA7390 = 0;
  byte_26AEA7394 = 0;
  dword_26AEA7398 = 0;
  byte_26AEA739C = 0;
  dword_26AEA73A0 = 0;
  byte_26AEA73A4 = 0;
  dword_26AEA73A8 = 0;
  byte_26AEA73AC = 0;
  dword_26AEA73B0 = 0;
  byte_26AEA73B4 = 0;
  dword_26AEA73B8 = 0;
  byte_26AEA73BC = 0;
  dword_26AEA73C0 = 0;
  byte_26AEA73C4 = 0;
  dword_26AEA73C8 = 0;
  byte_26AEA73CC = 0;
  dword_26AEA73D0 = 0;
  byte_26AEA73D4 = 0;
  dword_26AEA73D8 = 0;
  byte_26AEA73DC = 0;
  dword_26AEA73E0 = 0;
  byte_26AEA73E4 = 0;
  dword_26AEA73E8 = 0;
  byte_26AEA73EC = 0;
  dword_26AEA73F0 = 0;
  byte_26AEA73F4 = 0;
  dword_26AEA73F8 = 0;
  byte_26AEA73FC = 0;
  dword_26AEA7400 = 0;
  byte_26AEA7404 = 0;
  dword_26AEA7408 = 0;
  byte_26AEA740C = 0;
  dword_26AEA7410 = 0;
  xmmword_26AEA71F0 = 0u;
  unk_26AEA72E8 = 0u;
  unk_26AEA72D8 = 0u;
  unk_26AEA72C8 = 0u;
  unk_26AEA72B8 = 0u;
  unk_26AEA72F1 = 0u;
  xmmword_26AEA7900 = 0u;
  word_26AEA7910 = 0;
  word_26AEA7928 = 0;
  xmmword_26AEA7918 = 0u;
  xmmword_26AEA7200 = 0u;
  unk_26AEA7210 = 0u;
  xmmword_26AEA7220 = 0u;
  unk_26AEA7230 = 0u;
  xmmword_26AEA7240 = 0u;
  unk_26AEA7250 = 0u;
  xmmword_26AEA7260 = 0u;
  unk_26AEA7270 = 0u;
  xmmword_26AEA7280 = 0u;
  unk_26AEA7290 = 0u;
  xmmword_26AEA72A0 = 0u;
  *(void *)((char *)&xmmword_26AEA72A0 + 13) = 0;
  bzero(&unk_26AEA7418, 0x4E2uLL);
  qword_26AE84DC8 = 0;
  unk_26AE84DD0 = 0;
  word_26AE84DD8 = 0;
  qword_26AE84E28 = 0;
  unk_26AE84E30 = 0;
  word_26AE84E38 = 0;
  qword_26AE84E88 = 0;
  unk_26AE84E90 = 0;
  word_26AE84E98 = 0;
  dword_26AE93AAC = 0;
  word_26AE93AB0 = 0;
  dword_26AE93AC8 = 0;
  byte_26AE93ACC = 0;
  dword_26AE93AF0 = 0;
  g_G5K_ME_SD[0] = 0u;
  unk_26AE938E8 = 0u;
  xmmword_26AE938F8 = 0u;
  unk_26AE93908 = 0u;
  xmmword_26AE93918 = 0u;
  unk_26AE93928 = 0u;
  xmmword_26AE93938 = 0u;
  unk_26AE93948 = 0u;
  xmmword_26AE93958 = 0u;
  unk_26AE93968 = 0u;
  xmmword_26AE93978 = 0u;
  unk_26AE93988 = 0u;
  xmmword_26AE93998 = 0u;
  unk_26AE939A8 = 0u;
  xmmword_26AE939B8 = 0u;
  unk_26AE939C8 = 0u;
  xmmword_26AE939D8 = 0u;
  unk_26AE939E8 = 0u;
  xmmword_26AE939F8 = 0u;
  unk_26AE93A08 = 0u;
  xmmword_26AE93A18 = 0u;
  unk_26AE93A28 = 0u;
  xmmword_26AE93A38 = 0u;
  unk_26AE93A48 = 0u;
  unk_26AE93A51 = 0u;
  qword_26AE93A6A = 0;
  qword_26AE93A62 = 0;
  *(uint64_t *)((char *)&qword_26AE93A72 + 7) = 0;
  qword_26AE93A72 = 0;
  qword_26AE93A84 = 0;
  *(uint64_t *)((char *)&qword_26AE93A84 + 5) = 0;
  qword_26AE93A9C = 0;
  qword_26AE93A94 = 0;
  *(uint64_t *)((char *)&qword_26AE93A9C + 6) = 0;
  qword_26AE93ABC = 0;
  qword_26AE93AB4 = 0;
  *(_DWORD *)((char *)&qword_26AE93ABC + 7) = 0;
  qword_26AE93AE0 = 0;
  *(uint64_t *)((char *)&qword_26AE93AE0 + 5) = 0;
  BOOL v3 = &byte_26AE93AF4;
  qword_26AE93AD0 = 0;
  unk_26AE93AD8 = 0;
  do
  {
    *BOOL v3 = 0;
    *(void *)(v3 + 4) = 0;
    *(void *)(v3 + 11) = 0;
    v3 += 20;
  }
  while (v3 != (char *)&unk_26AE93B94);
  int v4 = &qword_26AE93B98;
  do
  {
    uint64_t *v4 = 0;
    *((_WORD *)v4 + 4) = 0;
    *(uint64_t *)((char *)v4 + 12) = 0;
    *((_WORD *)v4 + 10) = 0;
    v4[6] = 0;
    v4[3] = 0;
    v4[4] = 0;
    *((_WORD *)v4 + 20) = 0;
    v4 += 7;
  }
  while (v4 != (uint64_t *)&unk_26AE94618);
  for (uint64_t i = 0; i != 1728; i += 36)
  {
    uint64_t v6 = (char *)g_G5K_ME_SD + i;
    v6[3424] = 0;
    *((_OWORD *)v6 + 213) = 0uLL;
    *((_OWORD *)v6 + 212) = 0uLL;
  }
  for (uint64_t j = 0; j != 960; j += 20)
  {
    uint64_t v8 = (char *)g_G5K_ME_SD + j;
    *((void *)v8 + 641) = 0;
    *((void *)v8 + 640) = 0;
    *((_WORD *)v8 + 2568) = 0;
  }
  for (uint64_t k = 0; k != 128; ++k)
  {
    *(void *)&g_G5K_ME_SD[k + 380] = 0;
    *(void *)((char *)&g_G5K_ME_SD[k + 380] + 6) = 0;
  }
  uint64_t v10 = &dword_26AE95898;
  do
  {
    *uint64_t v10 = 0;
    *((unsigned char *)v10 + 52) = 0;
    v10 += 14;
  }
  while (v10 != (int *)&xmmword_26AE96318);
  word_26AE96470 = 0;
  dword_26AE964C4 = 0;
  byte_26AE964C8 = 0;
  xmmword_26AE96484 = 0u;
  unk_26AE96494 = 0u;
  xmmword_26AE964A4 = 0u;
  *(long long *)((char *)&xmmword_26AE964A4 + 14) = 0u;
  dword_26AE964D4 = 0;
  dword_26AE964CC = 0;
  *(int *)((char *)&dword_26AE964CC + 3) = 0;
  xmmword_26AE96318 = 0u;
  unk_26AE96328 = 0u;
  xmmword_26AE96338 = 0u;
  unk_26AE96348 = 0u;
  xmmword_26AE96358 = 0u;
  unk_26AE96368 = 0u;
  xmmword_26AE96378 = 0u;
  unk_26AE96388 = 0u;
  xmmword_26AE96398 = 0u;
  unk_26AE963A8 = 0u;
  xmmword_26AE963B8 = 0u;
  unk_26AE963C8 = 0u;
  xmmword_26AE963D8 = 0u;
  unk_26AE963E8 = 0u;
  xmmword_26AE963F8 = 0u;
  unk_26AE96408 = 0u;
  xmmword_26AE96418 = 0u;
  unk_26AE96428 = 0u;
  xmmword_26AE96438 = 0u;
  unk_26AE96448 = 0u;
  xmmword_26AE96458 = 0u;
  *(void *)((char *)&xmmword_26AE96458 + 15) = 0;
  *(uint64_t *)((char *)&qword_26AE96474 + 6) = 0;
  qword_26AE96474 = 0;
  s_Nav_Kalman_SD::s_Nav_Kalman_SD((s_Nav_Kalman_SD *)&g_Nav_Kalman_SD);
  dword_26AE6D4C4 = 0;
  byte_26AE6D4C8 = 0;
  *(_DWORD *)&algn_26AE6D4C9[1] = 0;
  qword_26AE6D6C0 = 0;
  g_Nav_Kalman_WD = 0u;
  dword_26AE6D470 = 0;
  *(_OWORD *)&algn_26AE6D474[4] = 0u;
  *(long long *)((char *)&xmmword_26AE6D480 + 8) = 0u;
  unk_26AE6D498 = 0u;
  *(long long *)((char *)&xmmword_26AE6D4A0 + 8) = 0u;
  unk_26AE6D4B1 = 0u;
  xmmword_26AE6D4D0 = 0u;
  unk_26AE6D4E0 = 0u;
  xmmword_26AE6D4F0 = 0u;
  unk_26AE6D500 = 0u;
  xmmword_26AE6D510 = 0u;
  unk_26AE6D520 = 0u;
  xmmword_26AE6D530 = 0u;
  unk_26AE6D540 = 0u;
  xmmword_26AE6D550 = 0u;
  unk_26AE6D560 = 0u;
  xmmword_26AE6D570 = 0u;
  unk_26AE6D580 = 0u;
  xmmword_26AE6D590 = 0u;
  unk_26AE6D5A0 = 0u;
  xmmword_26AE6D5B0 = 0u;
  unk_26AE6D5C0 = 0u;
  xmmword_26AE6D5D0 = 0u;
  unk_26AE6D5E0 = 0u;
  xmmword_26AE6D5F0 = 0u;
  unk_26AE6D600 = 0u;
  xmmword_26AE6D610 = 0u;
  unk_26AE6D620 = 0u;
  xmmword_26AE6D630 = 0u;
  unk_26AE6D640 = 0u;
  xmmword_26AE6D650 = 0u;
  unk_26AE6D660 = 0u;
  xmmword_26AE6D670 = 0u;
  unk_26AE6D680 = 0u;
  xmmword_26AE6D690 = 0u;
  unk_26AE6D6A0 = 0u;
  xmmword_26AE6D6A9 = 0u;
  dword_26AE6D6C8 = -1;
  word_26AE6D6E6 = 0;
  dword_26AE6D6E8 = 0;
  *(_DWORD *)((char *)&qword_26AE6D763 + 1) = 0;
  BYTE5(qword_26AE6D763) = 0;
  *(_DWORD *)((char *)&qword_26AE6D763 + 7) = 0;
  *(long long *)((char *)&xmmword_26AE6D6CC + 4) = 0u;
  unk_26AE6D6DD = 0;
  *(long long *)((char *)&xmmword_26AE6D6EC + 4) = 0u;
  unk_26AE6D700 = 0u;
  *(long long *)((char *)&xmmword_26AE6D70C + 4) = 0u;
  unk_26AE6D720 = 0u;
  *(long long *)((char *)&xmmword_26AE6D72C + 4) = 0u;
  *(long long *)((char *)&xmmword_26AE6D73C + 4) = 0u;
  xmmword_26AE6D750 = 0u;
  *(_DWORD *)((char *)&xmmword_26AE6D750 + 15) = 0;
  double v55 = (char *)&g_Nav_Kalman_WD + 22776;
  *(void *)(v55 + 9) = 0;
  *(void *)(v55 + 4) = 0;
  double v54 = &g_Nav_Kalman_WD + 1428;
  *(void *)((char *)v54 + 9) = 0;
  *(void *)((char *)v54 + 4) = 0;
  char v11 = (char *)&g_Nav_Kalman_WD + 22920;
  *(void *)(v11 + 4) = 0;
  *(void *)(v11 + 9) = 0;
  uint64_t v12 = &g_Nav_Kalman_WD + 1437;
  *(void *)((char *)v12 + 4) = 0;
  *(void *)((char *)v12 + 9) = 0;
  char v13 = &g_Nav_Kalman_WD + 1445;
  *(void *)((char *)v13 + 4) = 0;
  *(void *)((char *)v13 + 9) = 0;
  uint64_t v14 = (char *)&g_Nav_Kalman_WD + 23192;
  *(void *)(v14 + 4) = 0;
  *((_DWORD *)&g_Nav_Kalman_WD + 5817) = 0;
  *((unsigned char *)&g_Nav_Kalman_WD + 23272) = 0;
  *(void *)(v14 + 9) = 0;
  long long v56 = (char *)&g_Nav_Kalman_WD + 23320;
  *((_DWORD *)v56 + 4) = 0;
  *(void *)(v56 + 4) = 0;
  v56[12] = 0;
  uint64_t v15 = &g_Nav_Kalman_WD + 1462;
  *((_DWORD *)v15 + 4) = 0;
  *((unsigned char *)v15 + 12) = 0;
  *(void *)((char *)v15 + 4) = 0;
  uint64_t v53 = (char *)&g_Nav_Kalman_WD + 23464;
  *((_DWORD *)v53 + 4) = 0;
  v53[12] = 0;
  *(void *)(v53 + 4) = 0;
  double v16 = (char *)&g_Nav_Kalman_WD + 23544;
  *(void *)(v16 + 9) = 0;
  *(void *)(v16 + 4) = 0;
  uint64_t v17 = &g_Nav_Kalman_WD + 1476;
  *(void *)((char *)v17 + 9) = 0;
  *(void *)((char *)v17 + 4) = 0;
  long long v51 = (char *)&g_Nav_Kalman_WD + 23688;
  *((_DWORD *)v51 + 4) = 0;
  v51[12] = 0;
  *(void *)(v51 + 4) = 0;
  double v18 = (char *)&g_Nav_Kalman_WD + 23848;
  *double v18 = 0;
  *(void *)(v18 + 4) = 0;
  *(void *)(v18 + 9) = 0;
  double v50 = (char *)&g_Nav_Kalman_WD + 23976;
  *((_DWORD *)v50 + 4) = 0;
  v50[12] = 0;
  *(void *)(v50 + 4) = 0;
  uint64_t v19 = &g_Nav_Kalman_WD + 1506;
  *((_DWORD *)v19 + 1) = 0;
  *((_DWORD *)v19 + 2) = 0;
  *(_DWORD *)((char *)v19 + 31) = 0;
  xmmword_26AE73290 = 0u;
  float64x2_t v20 = (char *)&g_Nav_Kalman_WD + 24776;
  v20[100] = 0;
  *((_DWORD *)v20 + 26) = 0;
  v20[108] = 0;
  *((_DWORD *)v20 + 28) = 0;
  v20[116] = 0;
  *((_DWORD *)v20 + 30) = 0;
  v20[124] = 0;
  *((_DWORD *)v20 + 32) = 0;
  v20[132] = 0;
  *((_DWORD *)v20 + 34) = 0;
  v20[140] = 0;
  *((_DWORD *)v20 + 36) = 0;
  v20[148] = 0;
  *((_DWORD *)v20 + 38) = 0;
  v20[156] = 0;
  *((_DWORD *)v20 + 40) = 0;
  v20[164] = 0;
  *((_DWORD *)v20 + 42) = 0;
  v20[172] = 0;
  *((_DWORD *)v20 + 44) = 0;
  v20[180] = 0;
  *((_DWORD *)v20 + 46) = 0;
  v20[188] = 0;
  *((_DWORD *)v20 + 48) = 0;
  v20[196] = 0;
  *((_DWORD *)v20 + 50) = 0;
  v20[204] = 0;
  *((_DWORD *)v20 + 52) = 0;
  v20[212] = 0;
  *((_DWORD *)v20 + 54) = 0;
  v20[220] = 0;
  *((_DWORD *)v20 + 56) = 0;
  v20[228] = 0;
  *((_DWORD *)v20 + 58) = 0;
  v20[236] = 0;
  *((_DWORD *)v20 + 60) = 0;
  v20[244] = 0;
  *((_DWORD *)v20 + 62) = 0;
  v20[252] = 0;
  *((_DWORD *)v20 + 64) = 0;
  v20[260] = 0;
  *((_DWORD *)v20 + 66) = 0;
  v20[268] = 0;
  *((_DWORD *)v20 + 68) = 0;
  v20[276] = 0;
  *((_DWORD *)v20 + 70) = 0;
  v20[284] = 0;
  *((_DWORD *)v20 + 72) = 0;
  v20[292] = 0;
  *((_DWORD *)v20 + 74) = 0;
  v20[300] = 0;
  *((_DWORD *)v20 + 76) = 0;
  v20[308] = 0;
  *((_DWORD *)v20 + 78) = 0;
  v20[316] = 0;
  *((_DWORD *)v20 + 80) = 0;
  v20[324] = 0;
  *((_DWORD *)v20 + 82) = 0;
  v20[332] = 0;
  *((_DWORD *)v20 + 84) = 0;
  v20[340] = 0;
  *((_DWORD *)v20 + 86) = 0;
  v20[348] = 0;
  *((_DWORD *)v20 + 88) = 0;
  v20[356] = 0;
  *((_DWORD *)v20 + 90) = 0;
  v20[364] = 0;
  *(_OWORD *)(v20 + 81) = 0u;
  xmmword_26AE73570 = 0u;
  unk_26AE73560 = 0u;
  xmmword_26AE73550 = 0u;
  *(long long *)((char *)&xmmword_26AE7353D + 3) = 0u;
  double v52 = (char *)&g_Nav_Kalman_WD + 25592;
  *(_DWORD *)double v52 = 0;
  *((_WORD *)v52 + 2) = 0;
  qword_26AE73A00 = 0;
  uint64_t v21 = &g_Nav_Kalman_WD + 1621;
  double v22 = &g_Nav_Kalman_WD + 1601;
  *((unsigned char *)v22 + 408) = 0;
  *(long long *)((char *)v21 + 8) = 0u;
  *(long long *)((char *)v21 + 24) = 0u;
  *(long long *)((char *)v21 + 40) = 0u;
  *(long long *)((char *)v21 + 56) = 0u;
  *((unsigned char *)v22 + 392) = 0;
  qword_26AE73A60 = 0;
  *((unsigned char *)v22 + 504) = 0;
  *((_DWORD *)v22 + 104) = 0;
  *((unsigned char *)v22 + 488) = 0;
  *(long long *)((char *)v22 + 472) = 0u;
  *(long long *)((char *)v22 + 456) = 0u;
  *(long long *)((char *)v22 + 440) = 0u;
  *(long long *)((char *)v22 + 424) = 0u;
  *(long long *)((char *)&g_Nav_Kalman_WD + 25924) = 0u;
  *(long long *)((char *)v22 + 8) = 0u;
  uint64_t v23 = (long long *)((char *)&g_Nav_Kalman_WD + 25624);
  v23[17] = 0u;
  v23[18] = 0u;
  v23[15] = 0u;
  _OWORD v23[16] = 0u;
  v23[13] = 0u;
  unsigned char v23[14] = 0u;
  v23[11] = 0u;
  v23[12] = 0u;
  v23[9] = 0u;
  v23[10] = 0u;
  v23[7] = 0u;
  v23[8] = 0u;
  v23[5] = 0u;
  v23[6] = 0u;
  _OWORD v23[3] = 0u;
  void v23[4] = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  byte_26AE6D820 = 0;
  *(long long *)((char *)&xmmword_26AE6D7FE + 2) = 0u;
  unk_26AE6D810 = 0u;
  xmmword_26AE6D7E0 = 0u;
  unk_26AE6D7F0 = 0u;
  xmmword_26AE6D7C0 = 0u;
  unk_26AE6D7D0 = 0u;
  xmmword_26AE6D7A0 = 0u;
  unk_26AE6D7B0 = 0u;
  xmmword_26AE6D780 = 0u;
  unk_26AE6D790 = 0u;
  *(long long *)((char *)&xmmword_26AE6D76E + 2) = 0u;
  unk_26AE6D824 = 0u;
  unk_26AE6D834 = 0u;
  *(long long *)((char *)&xmmword_26AE6D841 + 3) = 0u;
  unk_26AE6D854 = 0u;
  *(long long *)((char *)&xmmword_26AE6D861 + 3) = 0u;
  unk_26AE6D874 = 0u;
  *(long long *)((char *)&xmmword_26AE6D881 + 1) = 0u;
  bzero(&unk_26AE6D898, 0x6C5uLL);
  bzero(&unk_26AE6DF60, 0x15C5uLL);
  bzero((char *)&g_Nav_Kalman_WD + 8392, 0x15C5uLL);
  bzero(&g_Nav_Kalman_WD + 873, 0x2255uLL);
  unint64_t v24 = (char *)&g_Nav_Kalman_WD + 22758;
  *(_DWORD *)(v24 + 15) = 0;
  *(_OWORD *)unint64_t v24 = 0u;
  *(_OWORD *)(v55 + 20) = 0u;
  *(_OWORD *)(v55 + 36) = 0u;
  *(_OWORD *)(v55 + 52) = 0u;
  *(void *)(v55 + 65) = 0;
  *(long long *)((char *)v54 + 20) = 0u;
  *(long long *)((char *)v54 + 36) = 0u;
  *(long long *)((char *)v54 + 52) = 0u;
  *(void *)((char *)v54 + 65) = 0;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(void *)(v11 + 65) = 0;
  *(long long *)((char *)v12 + 20) = 0u;
  *(long long *)((char *)v12 + 36) = 0u;
  *(long long *)((char *)v12 + 52) = 0u;
  *(long long *)((char *)v12 + 68) = 0u;
  *(long long *)((char *)v12 + 84) = 0u;
  *(long long *)((char *)v12 + 100) = 0u;
  *(long long *)((char *)v12 + 113) = 0u;
  *(void *)((char *)v13 + 65) = 0;
  *(long long *)((char *)v13 + 52) = 0u;
  *(long long *)((char *)v13 + 36) = 0u;
  *(long long *)((char *)v13 + 20) = 0u;
  *(_OWORD *)(v14 + 20) = 0u;
  *(_OWORD *)(v14 + 36) = 0u;
  *(_OWORD *)(v14 + 52) = 0u;
  *(void *)(v14 + 65) = 0;
  *(long long *)((char *)&xmmword_26AE72F49 + 7) = 0u;
  *((unsigned char *)&dword_26AE6D470 + 23280) = 0;
  long long v25 = (char *)&g_Nav_Kalman_WD + 23304;
  *(_OWORD *)long long v25 = 0u;
  v25[16] = 0;
  *(long long *)((char *)&xmmword_26AE72F8C + 4) = 0u;
  *(long long *)((char *)&xmmword_26AE72F9C + 4) = 0u;
  xmmword_26AE72FB0 = 0u;
  v56[72] = 0;
  *(long long *)((char *)v15 + 24) = 0u;
  *(long long *)((char *)v15 + 40) = 0u;
  *(long long *)((char *)v15 + 56) = 0u;
  *((unsigned char *)&xmmword_26AE6D4A0 + 23400) = 0;
  *(_OWORD *)(v53 + 65) = 0u;
  xmmword_26AE73040 = 0u;
  *(long long *)((char *)&xmmword_26AE7302C + 4) = 0u;
  *(long long *)((char *)&xmmword_26AE7301C + 4) = 0u;
  *(void *)(v16 + 65) = 0;
  *(_OWORD *)(v16 + 52) = 0u;
  *(_OWORD *)(v16 + 36) = 0u;
  *(_OWORD *)(v16 + 20) = 0u;
  *(void *)((char *)v17 + 65) = 0;
  *(long long *)((char *)v17 + 52) = 0u;
  *(long long *)((char *)v17 + 36) = 0u;
  *(long long *)((char *)v17 + 20) = 0u;
  *(_OWORD *)(v51 + 65) = 0u;
  xmmword_26AE73120 = 0u;
  *(long long *)((char *)&xmmword_26AE7310C + 4) = 0u;
  *(long long *)((char *)&xmmword_26AE730FC + 4) = 0u;
  *(_OWORD *)(v18 + 113) = 0u;
  *(_OWORD *)(v18 + 100) = 0u;
  *(_OWORD *)(v18 + 84) = 0u;
  *(_OWORD *)(v18 + 68) = 0u;
  *(_OWORD *)(v18 + 52) = 0u;
  *(_OWORD *)(v18 + 36) = 0u;
  *(_OWORD *)(v18 + 20) = 0u;
  *((_WORD *)v50 + 60) = 0;
  xmmword_26AE73270 = 0u;
  unk_26AE73260 = 0u;
  xmmword_26AE73250 = 0u;
  unk_26AE73240 = 0u;
  xmmword_26AE73230 = 0u;
  *(long long *)((char *)&xmmword_26AE7321C + 4) = 0u;
  uint64_t v26 = (char *)&g_Nav_Kalman_WD + 24136;
  *((_WORD *)v26 + 224) = 0;
  *((_OWORD *)v26 + 26) = 0u;
  *((_OWORD *)v26 + 27) = 0u;
  *((_OWORD *)v26 + 24) = 0u;
  *((_OWORD *)v26 + 25) = 0u;
  *((_OWORD *)v26 + 22) = 0u;
  *((_OWORD *)v26 + 23) = 0u;
  *((_OWORD *)v26 + 20) = 0u;
  *((_OWORD *)v26 + 21) = 0u;
  *((_OWORD *)v26 + 18) = 0u;
  *((_OWORD *)v26 + 19) = 0u;
  *((_OWORD *)v26 + 16) = 0u;
  *((_OWORD *)v26 + 17) = 0u;
  *((_OWORD *)v26 + 14) = 0u;
  *((_OWORD *)v26 + 15) = 0u;
  *((_OWORD *)v26 + 12) = 0u;
  *((_OWORD *)v26 + 13) = 0u;
  *((_OWORD *)v26 + 10) = 0u;
  *((_OWORD *)v26 + 11) = 0u;
  *((_OWORD *)v26 + 8) = 0u;
  *((_OWORD *)v26 + 9) = 0u;
  *((_OWORD *)v26 + 6) = 0u;
  *((_OWORD *)v26 + 7) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  *((_OWORD *)v26 + 5) = 0u;
  *((_OWORD *)v26 + 2) = 0u;
  *((_OWORD *)v26 + 3) = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  *((_OWORD *)v26 + 1) = 0u;
  long long v27 = (char *)&g_Nav_Kalman_WD + 24588;
  *((_WORD *)v27 + 4) = 0;
  *(void *)long long v27 = 0;
  long long v28 = (char *)&g_Nav_Kalman_WD + 24600;
  *(_OWORD *)long long v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_OWORD *)v28 + 6) = 0u;
  *((_OWORD *)v28 + 7) = 0u;
  *((_OWORD *)v28 + 8) = 0u;
  *((_OWORD *)v28 + 9) = 0u;
  *((_OWORD *)v28 + 10) = 0u;
  *((_OWORD *)v28 + 11) = 0u;
  *(void *)(v28 + 189) = 0;
  *(long long *)((char *)&xmmword_26AE6D5D0 + 24776) = 0u;
  *(long long *)((char *)&xmmword_26AE6D5D0 + 24792) = 0u;
  *((unsigned char *)&xmmword_26AE6D5F0 + 24776) = 0;
  *((_WORD *)&xmmword_26AE6D5F0 + 12592) = 0;
  xmmword_26AE73840 = 0u;
  xmmword_26AE73830 = 0u;
  xmmword_26AE73820 = 0u;
  xmmword_26AE73810 = 0u;
  xmmword_26AE73800 = 0u;
  xmmword_26AE737F0 = 0u;
  xmmword_26AE737E0 = 0u;
  xmmword_26AE737D0 = 0u;
  xmmword_26AE737C0 = 0u;
  xmmword_26AE737B0 = 0u;
  xmmword_26AE737A0 = 0u;
  xmmword_26AE73790 = 0u;
  xmmword_26AE73780 = 0u;
  xmmword_26AE73770 = 0u;
  xmmword_26AE73760 = 0u;
  xmmword_26AE73750 = 0u;
  xmmword_26AE73740 = 0u;
  xmmword_26AE73730 = 0u;
  xmmword_26AE73720 = 0u;
  xmmword_26AE73710 = 0u;
  xmmword_26AE73700 = 0u;
  xmmword_26AE736F0 = 0u;
  xmmword_26AE736E0 = 0u;
  xmmword_26AE736D0 = 0u;
  xmmword_26AE736C0 = 0u;
  *((_WORD *)v52 + 12) = 0;
  xmmword_26AE73860 = 0u;
  bzero(&g_Nav_Kalman_WD + 1633, 0x1491uLL);
  long long v29 = (char *)&g_Nav_Kalman_WD + 31400;
  *(_OWORD *)long long v29 = xmmword_22BB45920;
  *((_OWORD *)v29 + 1) = xmmword_22BB45930;
  *((_DWORD *)v29 + 8) = 0;
  *((_WORD *)v29 + 18) = 0;
  qword_26AE9A550 = 0;
  byte_26AE9A558 = 0;
  g_NA_Ram[0] = 0u;
  unk_26AE9A298 = 0u;
  xmmword_26AE9A2A8 = 0u;
  unk_26AE9A2B8 = 0u;
  xmmword_26AE9A2C8 = 0u;
  unk_26AE9A2D8 = 0u;
  xmmword_26AE9A2E8 = 0u;
  unk_26AE9A2F8 = 0u;
  xmmword_26AE9A308 = 0u;
  unk_26AE9A318 = 0u;
  xmmword_26AE9A328 = 0u;
  unk_26AE9A338 = 0u;
  xmmword_26AE9A348 = 0u;
  unk_26AE9A358 = 0u;
  xmmword_26AE9A368 = 0u;
  unk_26AE9A378 = 0u;
  xmmword_26AE9A388 = 0u;
  unk_26AE9A398 = 0u;
  xmmword_26AE9A3A8 = 0u;
  unk_26AE9A3B8 = 0u;
  xmmword_26AE9A3C8 = 0u;
  unk_26AE9A3D8 = 0u;
  xmmword_26AE9A3E8 = 0u;
  unk_26AE9A3F8 = 0u;
  xmmword_26AE9A408 = 0u;
  unk_26AE9A418 = 0u;
  xmmword_26AE9A422 = 0u;
  word_26AE9A468 = 0;
  xmmword_26AE9A448 = 0u;
  unk_26AE9A458 = 0u;
  xmmword_26AE9A438 = 0u;
  qword_26AE9A470 = 0;
  xmmword_26AE9A478 = 0u;
  dword_26AE9A488 = 0;
  xmmword_26AE9A490 = 0u;
  *(_OWORD *)algn_26AE9A4A0 = 0u;
  *(_OWORD *)&algn_26AE9A4A0[12] = 0u;
  xmmword_26AE9A4C0 = 0u;
  byte_26AE9A4D0 = 0;
  xmmword_26AE9A4D8 = 0u;
  dword_26AE9A4E8 = 0;
  xmmword_26AE9A4F0 = 0u;
  unk_26AE9A500 = 0u;
  xmmword_26AE9A510 = 0u;
  unk_26AE9A520 = 0u;
  xmmword_26AE9A530 = 0u;
  *(long long *)((char *)&xmmword_26AE9A530 + 12) = 0u;
  xmmword_26AE9A5B0 = 0u;
  unk_26AE9A5C0 = 0u;
  uint64_t v30 = 0x350u;
  qword_26AE9A5D0 = 0;
  do
  {
    long long v31 = (char *)g_NA_Ram + v30;
    *(void *)(v31 + 63) = 0;
    *((_OWORD *)v31 + 2) = 0uLL;
    *((_OWORD *)v31 + 3) = 0uLL;
    v30 += 72;
    *(_OWORD *)long long v31 = 0uLL;
    *((_OWORD *)v31 + 1) = 0uLL;
  }
  while (v30 != 3152);
  for (uint64_t m = 0; m != 1152; m += 36)
  {
    int v33 = (char *)g_NA_Ram + m;
    *((_WORD *)v33 + 1592) = 0;
    *((_OWORD *)v33 + 198) = 0uLL;
    *((_OWORD *)v33 + 197) = 0uLL;
  }
  for (uint64_t n = 0; n != 720; n += 72)
  {
    long long v35 = (long long *)((char *)g_NA_Ram + n);
    v35[272] = 0uLL;
    v35[271] = 0uLL;
    v35[270] = 0uLL;
    v35[269] = 0uLL;
    *(void *)((char *)&g_NA_Ram[272] + n + 15) = 0;
  }
  for (iuint64_t i = 0; ii != 360; ii += 36)
  {
    long long v37 = (char *)g_NA_Ram + ii;
    *((_WORD *)v37 + 2528) = 0;
    *((_OWORD *)v37 + 315) = 0uLL;
    *((_OWORD *)v37 + 314) = 0uLL;
  }
  uint64_t v38 = 0;
  *(uint64_t *)((char *)&qword_26AE9B790 + 6) = 0;
  qword_26AE9B790 = 0;
  do
  {
    double v39 = (char *)&g_NA_Ram[337] + v38 + 8;
    *(void *)(v39 + 79) = 0;
    *((_OWORD *)v39 + 3) = 0uLL;
    *((_OWORD *)v39 + 4) = 0uLL;
    *((_OWORD *)v39 + 1) = 0uLL;
    *((_OWORD *)v39 + 2) = 0uLL;
    *(_OWORD *)double v39 = 0uLL;
    v38 += 88;
  }
  while (v38 != 3168);
  for (juint64_t j = 0; jj != 1296; jj += 36)
  {
    long long v41 = (char *)&g_NA_Ram[535] + jj + 8;
    *(_DWORD *)(v41 + 31) = 0;
    *(_OWORD *)long long v41 = 0uLL;
    *((_OWORD *)v41 + 1) = 0uLL;
  }
  qword_26AE9C910 = 0;
  *(void *)algn_26AE9C918 = 0;
  dword_26AE9C920 = 0;
  unint64_t v42 = 0xFFFFFFFFFFFFF18CLL;
  do
  {
    double v43 = (char *)g_NA_Ram + v42;
    *((_DWORD *)v43 + 3420) = 0;
    long long v44 = (char *)&g_NA_Ram[850] + v42 + 8;
    *((_OWORD *)v43 + 849) = 0uLL;
    *(void *)((char *)&g_NA_Ram[849] + v42 + 15) = 0;
    *(_OWORD *)long long v44 = 0uLL;
    *((_OWORD *)v44 + 1) = 0uLL;
    *((_OWORD *)v44 + 2) = 0uLL;
    *((_OWORD *)v44 + 3) = 0uLL;
    *(void *)(v44 + 62) = 0;
    v42 += 100;
  }
  while (v42);
  bzero(&unk_26AE9D798, 0x65CuLL);
  for (kuint64_t k = 0; kk != 96; kk += 4)
  {
    long long v46 = (long long *)((char *)&g_NA_Ram[kk + 950] + 12);
    *(_OWORD *)((char *)v46 + 46) = 0uLL;
    v46[1] = 0uLL;
    v46[2] = 0uLL;
    *long long v46 = 0uLL;
  }
  double v47 = &qword_26AE9E3F4;
  do
  {
    *double v47 = 0;
    *((_WORD *)v47 + 4) = 0;
    *(uint64_t *)((char *)v47 + 12) = 0;
    *(uint64_t *)((char *)v47 + 28) = 0;
    *(uint64_t *)((char *)v47 + 20) = 0;
    double v47 = (uint64_t *)((char *)v47 + 36);
  }
  while (v47 != &qword_26AE9E754);
  qword_26AE9E754 = 0;
  word_26AE9E75C = 0;
  dword_26AE9E760 = 0;
  byte_26AE9E764 = 0;
  dword_26AE9E768 = 0;
  byte_26AE9E76C = 0;
  unk_26AE9E770 = 0u;
  unk_26AE9E780 = 0u;
  uint64_t v48 = &qword_26AE9E794;
  uint64_t v49 = 1344;
  byte_26AE9E790 = 0;
  do
  {
    *((_DWORD *)v48 + 5) = 0;
    *((_DWORD *)v48 + 6) = 0;
    *uint64_t v48 = 0;
    v48[1] = 0;
    *((_WORD *)v48 + 8) = 0;
    uint64_t v48 = (uint64_t *)((char *)v48 + 28);
    v49 -= 28;
  }
  while (v49);
  dword_26AE9F670 = 0;
  xmmword_26AE9ECD4 = 0u;
  unk_26AE9ECE4 = 0u;
  xmmword_26AE9ECF4 = 0u;
  unk_26AE9ED04 = 0u;
  xmmword_26AE9ED14 = 0u;
  unk_26AE9ED24 = 0u;
  xmmword_26AE9ED34 = 0u;
  unk_26AE9ED44 = 0u;
  unk_26AE9ED4D = 0u;
  unk_26AE9ED60 = 0;
  byte_26AE9ED68 = 0;
  xmmword_26AE9F678 = 0u;
  dword_26AE9F688 = 0;
  dword_26AE9F6A0 = 0;
  xmmword_26AE9F690 = 0u;
  qword_26AE9F6B8 = 0;
  xmmword_26AE9F6A8 = 0u;
  *(_OWORD *)&qword_26AE77DD8 = 0u;
  *(long long *)((char *)&xmmword_26AE77DE0 + 8) = 0u;
  xmmword_26AE77DB8 = 0u;
  *(_OWORD *)&qword_26AE77DC8 = 0u;
  *(_OWORD *)&qword_26AE77D98 = 0u;
  *(long long *)((char *)&xmmword_26AE77DA0 + 8) = 0u;
  xmmword_26AE77D78 = 0u;
  *(_OWORD *)&qword_26AE77D88 = 0u;
  *(_OWORD *)&qword_26AE77D58 = 0u;
  *(long long *)((char *)&xmmword_26AE77D60 + 8) = 0u;
  *(_OWORD *)&qword_26AE77D38 = 0u;
  *(long long *)((char *)&xmmword_26AE77D40 + 8) = 0u;
  unk_26AE77D28 = 0u;
  *(_OWORD *)&qword_26AE77E00 = 0u;
  *(_OWORD *)&qword_26AE77E10 = 0u;
  *(_OWORD *)&qword_26AE77E20 = 0u;
  *(_OWORD *)&qword_26AE77E38 = 0u;
  *(long long *)((char *)&xmmword_26AE77E40 + 8) = 0u;
  *(_OWORD *)&qword_26AE77E58 = 0u;
  *(long long *)((char *)&xmmword_26AE77E60 + 8) = 0u;
  *(_OWORD *)&qword_26AE77E78 = 0u;
  *(long long *)((char *)&xmmword_26AE77E80 + 8) = 0u;
  *(_OWORD *)&qword_26AE77E98 = 0u;
  *(long long *)((char *)&xmmword_26AE77EA0 + 8) = 0u;
}

double Inc_Local_Time(int a1, int a2, double *a3, __int16 *a4)
{
  int v4 = 1000 * a2;
  double v5 = *a3 * 1000.0;
  double v6 = -0.5;
  if (v5 > 0.0) {
    double v6 = 0.5;
  }
  double v7 = v5 + v6;
  if (v7 <= 2147483650.0)
  {
    if (v7 >= -2147483650.0) {
      int v8 = (int)v7;
    }
    else {
      int v8 = 0x80000000;
    }
  }
  else
  {
    int v8 = 0x7FFFFFFF;
  }
  int v9 = v8 + a1;
  if (v9 >= v4)
  {
    __int16 v10 = *a4;
    do
    {
      v9 -= v4;
      ++v10;
    }
    while (v9 >= v4);
    *a4 = v10;
  }
  if (v9 < 0)
  {
    __int16 v11 = *a4;
    do
    {
      v9 += v4;
      --v11;
    }
    while (v9 < 0);
    *a4 = v11;
  }
  double result = (double)v9 * 0.001;
  *a3 = result;
  return result;
}

uint64_t lsim07_01HandleFtaApiStatus(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim07_01HandleFtaApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (g_GnsFtaCallback)
  {
    int v4 = gnssOsa_Calloc("lsim07_01HandleFtaApiStatus", 65, 1, 0xCuLL);
    if (v4)
    {
      double v5 = v4;
      _DWORD *v4 = *(_DWORD *)(a1 + 12);
      v4[1] = 0;
      v4[2] = *(_DWORD *)(a1 + 16);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>FtaCB,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim07_01HandleFtaApiStatus", *v5, v5[2]);
        LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
      }
      g_GnsFtaCallback(0, 12, v5);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_12;
      }
      return 0;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim07_01HandleFtaApiStatus", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
LABEL_12:
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v10, "LSM", 73, "lsim07_01HandleFtaApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return 0;
}

size_t lsim07_02FtaCbInit(size_t result)
{
  unsigned __int16 v1 = (void *)result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsFtaCallback)
  {
    double result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim07_02FtaCbInit", 513);
      double result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsFtaCallbacuint64_t k = v1;
    return result;
  }
  double result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim07_02FtaCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_FtaInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_FtaInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_FtaInitialize", 113, 1, 0x18uLL);
  if (!v4) {
    return 6;
  }
  v4[3] = 11;
  *((void *)v4 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v4);
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v5 = mach_continuous_time();
  unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 73, "GNS_FtaInitialize");
  uint64_t v7 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
  return v7;
}

uint64_t GNS_FtaPulseInd(int a1, long long *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_FtaPulseInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA,PulseTime,Id,%u\n", v24);
    goto LABEL_18;
  }
  if (*((_DWORD *)a2 + 4) >= 2u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA,TrgSrc,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "GNS_FtaPulseInd", 515, *((_DWORD *)a2 + 4), a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_20;
  }
  if ((*((_DWORD *)a2 + 3) + 1) <= 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA,PulseUncUs,%u,Id,%u\n", v6);
    goto LABEL_18;
  }
  if (*((_DWORD *)a2 + 1) >= 0x93A80u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ASST:FTA,GpsTowSec,%u,Id,%u\n", v10);
LABEL_18:
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
LABEL_19:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
LABEL_20:
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v11, "LSM", 73, "GNS_FtaPulseInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
    return 2;
  }
  uint64_t v15 = (char *)gnssOsa_Calloc("GNS_FtaPulseInd", 194, 1, 0x28uLL);
  if (v15)
  {
    double v16 = v15;
    long long v17 = *a2;
    *(void *)(v15 + 28) = *((void *)a2 + 2);
    *(_OWORD *)(v15 + 12) = v17;
    *((_DWORD *)v15 + 9) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_FTA_PULSE_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GNS_FtaPulseInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8595203, v16);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "GNS_FtaPulseInd");
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "GNS_FtaPulseInd");
      LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
    }
    return 6;
  }
  return v13;
}

void GLON_Alm_Calc_ECEF_PosVel(double *a1, double *a2, double *a3, int a4)
{
  double v8 = a1[4];
  if (v8 > 3.14159265)
  {
    do
      double v8 = v8 + -6.28318531;
    while (v8 > 3.14159265);
    a1[4] = v8;
  }
  if (v8 < -3.14159265)
  {
    do
      double v8 = v8 + 6.28318531;
    while (v8 < -3.14159265);
    a1[4] = v8;
  }
  double v9 = a1[1];
  long double v10 = v8;
  do
  {
    double v11 = v10;
    long double v10 = v8 + v9 * sin(v10);
  }
  while (vabdd_f64(v11, v10) > 2.22044605e-15);
  double v12 = sqrt(1.0 - v9 * v9);
  __double2 v13 = __sincos_stret(v10);
  double v14 = atan2(v12 * v13.__sinval, v13.__cosval - v9);
  double v15 = v14 + a1[5];
  double v16 = (1.0 - v9 * v13.__cosval) * *a1;
  double v17 = sqrt(398600.44 / *a1);
  __double2 v18 = __sincos_stret(v14);
  double v19 = v18.__sinval * (v9 * v17) / v12;
  double v20 = (v9 * v18.__cosval + 1.0) * v17 / v12;
  __double2 v21 = __sincos_stret(v15);
  __double2 v22 = __sincos_stret(a1[2]);
  __double2 v23 = __sincos_stret(a1[3]);
  double v24 = -(v21.__sinval * v22.__sinval) * v23.__cosval + v21.__cosval * v22.__cosval;
  double v25 = v21.__sinval * v22.__cosval * v23.__cosval + v21.__cosval * v22.__sinval;
  *a2 = v16 * v24;
  a2[1] = v16 * v25;
  a2[2] = v16 * v21.__sinval * v23.__sinval;
  *a3 = v19 * v24 - v20 * (v21.__cosval * v22.__sinval * v23.__cosval + v21.__sinval * v22.__cosval);
  a3[1] = v19 * v25 - v20 * (-(v21.__cosval * v22.__cosval) * v23.__cosval + v21.__sinval * v22.__sinval);
  a3[2] = v23.__sinval * (v21.__cosval * v20) + v21.__sinval * v19 * v23.__sinval;
  __double2 v26 = __sincos_stret((double)(a4 % 86400 - 10800) * 0.00007292115);
  double v27 = a2[1];
  double v28 = v26.__sinval * v27 + *a2 * v26.__cosval;
  double v29 = v26.__cosval * v27 - *a2 * v26.__sinval;
  *a2 = v28;
  a2[1] = v29;
  double v30 = a3[1];
  double v31 = v26.__cosval * v30 - *a3 * v26.__sinval;
  *a3 = v26.__sinval * v30 + *a3 * v26.__cosval + v29 * 0.00007292115;
  a3[1] = v31 + v28 * -0.00007292115;
  uint64_t v32 = 2;
  do
  {
    a2[v32] = a2[v32] * 1000.0;
    unint64_t v33 = v32-- + 1;
  }
  while (v33 > 1);
  uint64_t v34 = 2;
  do
  {
    a3[v34] = a3[v34] * 1000.0;
    unint64_t v35 = v34-- + 1;
  }
  while (v35 > 1);
}

void *gnss::GnssAdaptDevice::injectAssistancePosition(uint64_t a1, char a2, int a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(void *)(a7 + 24))
  {
    uint64_t v25 = *a6;
    __double2 v26 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice24injectAssistancePositionEddbdddddNS_11ReliabilityEyNS_18PositionAssistTypeERKNS_20PositionAssistOriginENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_19;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v31, a7);
    *(double *)&v31[4] = a8;
    *(double *)&_OWORD v31[5] = a9;
    char v34 = a2;
    *(double *)&v31[6] = a10;
    *(double *)&v31[7] = a11;
    *(double *)&v31[8] = a12;
    *(double *)&v31[9] = a13;
    *(double *)&v31[10] = a14;
    int v32 = a3;
    int v33 = a5;
    v31[11] = a4;
    v31[12] = v25;
    dispatch_async(v26, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
  }
  else
  {
    double result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "injectAssistancePosition", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice24injectAssistancePositionEddbdddddNS_11ReliabilityEyNS_18PositionAssistTypeERKNS_20PositionAssistOriginENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectAssistancePosition_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*((unsigned char *)v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v91, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v91, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v91);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "injectAssistancePosition_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
    }
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v6 = 84;
    if (!*(unsigned char *)(a1 + 152)) {
      uint64_t v6 = 70;
    }
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%f,Long,%f,Alt,%f,AltValid,%c,VUncert,%f,SemiMajHUnc,%f,SemiMinHUnc,%f,SemiMajAzmHUnc,%f,MachContTimeNs,%llu,Rel,%d,PosType,%u,mHash,%llu\n", v5, "ADP", 77, "injectAssistancePosition_block_invoke", *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), v6, *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 120), *(void *)(a1 + 128), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148),
           *(void *)(a1 + 136));
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 3, 1);
  }
  double v8 = *(double *)(a1 + 72);
  if (v8 > 90.0 || v8 < -90.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v90, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v90, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v90);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lat,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
    }
    return result;
  }
  double v9 = *(double *)(a1 + 80);
  if (v9 > 180.0 || v9 < -180.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v89, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v89, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v89);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Long,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 80));
      LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
    }
    return result;
  }
  char v10 = *(unsigned char *)(a1 + 152);
  if (v10)
  {
    double v11 = *(double *)(a1 + 88);
    if (v11 > 100000.0 || v11 < -100000.0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v88, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v88, (uint64_t)"injectAssistancePosition_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v88);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v34 = mach_continuous_time();
        unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Height,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 88));
        LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "injectAssistancePosition_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
      }
      return result;
    }
  }
  if (*(double *)(a1 + 96) < 0.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v87, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v87, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v87);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 96));
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
    }
    return result;
  }
  double v29 = *(double *)(a1 + 104);
  if (v29 < 0.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v86, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v86, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v86);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SemiMajHUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 104));
      LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
    }
    return result;
  }
  double v38 = *(double *)(a1 + 112);
  if (v38 < 0.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v85, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v85, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v85);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SemiMinHUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 112));
      LbsOsaTrace_WriteLog(0x18u, __str, v40, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v41 = mach_continuous_time();
      unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v42, 5, 1);
    }
    return result;
  }
  double v43 = *(double *)(a1 + 120);
  if (v43 < 0.0 || v43 > 360.0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v84, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v84, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v84);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v47 = mach_continuous_time();
      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SemiMajAzmHUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(double *)(a1 + 120));
      LbsOsaTrace_WriteLog(0x18u, __str, v48, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v49 = mach_continuous_time();
      unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v50, 5, 1);
    }
    return result;
  }
  double v76 = *(double *)(a1 + 96);
  uint64_t v77 = 0x700000000;
  uint64_t v78 = 0;
  if (fabs(v9 + 180.0) < 2.22044605e-16) {
    double v9 = v9 + 360.0;
  }
  *((double *)&v69 + 1) = v8;
  double v70 = v9;
  double v44 = *(double *)(a1 + 88);
  char v74 = v10;
  double v75 = v44;
  double v71 = v29;
  double v72 = v38;
  double v45 = v43 + -360.0;
  if (v43 <= 180.0) {
    double v45 = v43;
  }
  __int16 v73 = (int)v45;
  LODWORD(v69) = (*(void *)(a1 + 128) + 500000) / 0xF4240uLL;
  int v46 = *(_DWORD *)(a1 + 144);
  if (v46 <= 24)
  {
    if (v46)
    {
      if (v46 != 10) {
        goto LABEL_82;
      }
      int v46 = 1;
    }
  }
  else
  {
    switch(v46)
    {
      case 25:
        int v46 = 2;
        break;
      case 50:
        int v46 = 3;
        break;
      case 75:
        int v46 = 4;
        break;
      default:
LABEL_82:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v83, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v83, (uint64_t)"injectAssistancePosition_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v83);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v65 = mach_continuous_time();
          unsigned __int16 v66 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(_DWORD *)(a1 + 144));
          LbsOsaTrace_WriteLog(0x18u, __str, v66, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v67 = mach_continuous_time();
          unsigned __int16 v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "ADP", 68, "injectAssistancePosition_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v68, 5, 1);
        }
        return result;
    }
  }
  LODWORD(v77) = v46;
  if (*(_DWORD *)(a1 + 148) >= 3u)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v82, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v82, (uint64_t)"injectAssistancePosition_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v82);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v59 = mach_continuous_time();
      unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "ADP", 69, "injectAssistancePosition_block_invoke", 514, *(_DWORD *)(a1 + 148));
      LbsOsaTrace_WriteLog(0x18u, __str, v60, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v61 = mach_continuous_time();
      unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "ADP", 68, "injectAssistancePosition_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v62, 5, 1);
    }
  }
  else
  {
    int v79 = *(_DWORD *)(a1 + 148);
    uint64_t v78 = *(void *)(a1 + 136);
    int v51 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
    uint64_t v52 = a1 + 40;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v81, v52);
    gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v51, (uint64_t)v81);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v81);
    unsigned int v53 = GNS_EaWgs84RefPos(v51, &v69);
    if (v53 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v54 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v55 = 84;
        if (!v74) {
          uint64_t v55 = 70;
        }
        unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%f,Long,%f,Ht,%f,HtPresent,%c,RmsHeight,%f,RmsSemiMaj,%f,RmsSemiMin,%f,RmsSemiMajBrg,%hd,SrcHash,%llu\n", v54, "ADP", 68, "injectAssistancePosition_block_invoke", *((double *)&v69 + 1), v70, v75, v55, v76, v71, v72, v73, v78);
        LbsOsaTrace_WriteLog(0x18u, __str, v56, 5, 1);
      }
      *((unsigned char *)v2 + 176) = 1;
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
LABEL_73:
        bzero(__str, 0x410uLL);
        uint64_t v57 = mach_continuous_time();
        unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "ADP", 68, "injectAssistancePosition_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v58, 5, 1);
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v80, v52);
      gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v53, (uint64_t)v80, "injectAssistancePosition_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v80);
      gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v51);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v63 = mach_continuous_time();
        unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaWgs84RefPos,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "ADP", 69, "injectAssistancePosition_block_invoke", 257, v53);
        LbsOsaTrace_WriteLog(0x18u, __str, v64, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_73;
      }
    }
  }
  return result;
}

void sub_22BA97A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
}

void *gnss::GnssAdaptDevice::injectAssistanceTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    double v8 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20injectAssistanceTimeEyyyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_25_5;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
    void v13[4] = a2;
    v13[5] = a3;
    v13[6] = a4;
    dispatch_async(v8, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "injectAssistanceTime", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice20injectAssistanceTimeEyyyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(void *a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "injectAssistanceTime_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsTimeNS,%llu,UncNS,%llu,MachContTimeNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "injectAssistanceTime_block_invoke", a1[9], a1[10], a1[11]);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    unint64_t v7 = a1[10];
    if (v7)
    {
      LODWORD(v34) = 0;
      WORD2(v34) = -1;
      DWORD2(v34) = 0x7FFFFFFF;
      int v35 = -1;
      uint64_t v8 = 22;
      char v36 = 0;
      do
      {
        double v9 = (char *)&v34 + v8;
        *double v9 = -1;
        *(_DWORD *)(v9 + 1) = 0;
        v9[5] = 0;
        v8 += 6;
      }
      while (v9 + 6 != v37);
      *(_DWORD *)&v37[2] = 0;
      unint64_t v10 = a1[9];
      WORD6(v34) = v10 / 0x2260FF9290000;
      if (v10 % 0x2260FF9290000 < 0xF424000000000)
      {
        LODWORD(v34) = v10 % 0x2260FF9290000 / 0xF4240;
        if (v7 < 0xF42400000)
        {
          if (v7 >= 0xF4240)
          {
            WORD2(v34) = v7 / 0xF4240;
          }
          else
          {
            WORD2(v34) = 1;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v26 = mach_continuous_time();
              unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RefTimeUncMs < 1ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "injectAssistanceTime_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
            }
          }
        }
        else
        {
          WORD2(v34) = -1;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v24 = mach_continuous_time();
            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RefTimeUncMs > 65535ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "injectAssistanceTime_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
          }
        }
        *(_DWORD *)&v37[2] = (a1[11] + 500000) / 0xF4240uLL;
        GNS_AsstGpsRefTime(0, 7u, &v34, 0);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Wk,%u,Tow,%u,TowUnc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "injectAssistanceTime_block_invoke", WORD6(v34), v34, WORD2(v34));
          LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)(a1 + 5));
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, 1u, (uint64_t)v32, "injectAssistanceTime_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "injectAssistanceTime_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)(a1 + 5));
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v33, (uint64_t)"injectAssistanceTime_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Calc GpsTow invalid\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "injectAssistanceTime_block_invoke", 515);
          LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "injectAssistanceTime_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)(a1 + 5));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v38, (uint64_t)"injectAssistanceTime_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RefTimeUnc\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "injectAssistanceTime_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "injectAssistanceTime_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)(a1 + 5));
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v39, (uint64_t)"injectAssistanceTime_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v39);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "injectAssistanceTime_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "injectAssistanceTime_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
    }
  }
  return result;
}

void sub_22BA984A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceAlongTrackVelocity(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v8 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice31setAssistanceAlongTrackVelocityEyddNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_32_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
    void v13[4] = a2;
    *(double *)&v13[5] = a4;
    *(double *)&v13[6] = a5;
    dispatch_async(v8, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setAssistanceAlongTrackVelocity", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice31setAssistanceAlongTrackVelocityEyddNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceAlongTrackVelocity_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,VAlongTrack,%f,VAlongTrackUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceAlongTrackVelocity_block_invoke", *(void *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    double v7 = *(double *)(a1 + 80);
    if (v7 > 100.0 || v7 < 0.0 || (double v8 = *(double *)(a1 + 88), v8 <= 0.0))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v32, (uint64_t)"setAssistanceAlongTrackVelocity_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx VAlongTrack,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setAssistanceAlongTrackVelocity_block_invoke", 514, *(double *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "setAssistanceAlongTrackVelocity_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
      }
    }
    else
    {
      unint64_t v9 = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
      LODWORD(v28) = v9;
      *((double *)&v28 + 1) = v7;
      double v29 = v8;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsTimeMs,%u,Vel,%f,RmsVel,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setAssistanceAlongTrackVelocity_block_invoke", v9, v7, v8);
        LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
      }
      int v12 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v13 = a1 + 40;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v31, v13);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v12, (uint64_t)v31);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
      unsigned int v14 = GNS_EaAlongTrackVel(v12, &v28);
      if (v14 == 1)
      {
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
LABEL_13:
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setAssistanceAlongTrackVelocity_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, v13);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v14, (uint64_t)v30, "setAssistanceAlongTrackVelocity_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v12);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v26 = mach_continuous_time();
          unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LongTrackVel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "setAssistanceAlongTrackVelocity_block_invoke", 257, v14);
          LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result) {
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v33, (uint64_t)"setAssistanceAlongTrackVelocity_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "setAssistanceAlongTrackVelocity_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "setAssistanceAlongTrackVelocity_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
    }
  }
  return result;
}

void sub_22BA98D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceDem(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    double v8 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice16setAssistanceDemEyddNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_40_1;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
    void v13[4] = a2;
    *(double *)&v13[5] = a4;
    *(double *)&v13[6] = a5;
    dispatch_async(v8, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setAssistanceDem", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice16setAssistanceDemEyddNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceDem_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,EllipAlt,%f,AltUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceDem_block_invoke", *(void *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    double v7 = *(double *)(a1 + 80);
    if (v7 > 9000.0 || v7 < -500.0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v37, (uint64_t)"setAssistanceDem_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EllipAlt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setAssistanceDem_block_invoke", 514, *(double *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "setAssistanceDem_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
      }
    }
    else
    {
      double v8 = *(double *)(a1 + 88);
      if (v8 <= 0.0 || v8 > 9000.0)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v36, (uint64_t)"setAssistanceDem_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AltUnc,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "setAssistanceDem_block_invoke", 514, *(double *)(a1 + 88));
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "setAssistanceDem_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
        }
      }
      else
      {
        int v33 = 0;
        LODWORD(v31) = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
        *((double *)&v31 + 1) = v7;
        double v32 = v8;
        int v9 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
        uint64_t v10 = a1 + 40;
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v9, (uint64_t)v35);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
        unsigned int v11 = GNS_EaAltitude(v9, &v31);
        if (v11 != 1)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, v10);
          gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v11, (uint64_t)v34, "setAssistanceDem_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
          gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v9);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v12 = mach_continuous_time();
            unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaAltitude,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setAssistanceDem_block_invoke", 257, v11);
            LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
          }
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsTimeMs,%u,Alt,%f,RmsAlt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setAssistanceDem_block_invoke", v31, *((double *)&v31 + 1), v32);
          LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setAssistanceDem_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v38, (uint64_t)"setAssistanceDem_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setAssistanceDem_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setAssistanceDem_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
  }
  return result;
}

void sub_22BA996D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceMapVector(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, uint64_t a15)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(void *)(a15 + 24))
  {
    unsigned __int16 v28 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice22setAssistanceMapVectorEyddbddddbbbbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_50_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a15);
    void v33[4] = a2;
    *(double *)&_OWORD v33[5] = a9;
    *(double *)&v33[6] = a10;
    char v34 = a3;
    *(double *)&v33[7] = a11;
    *(double *)&v33[8] = a12;
    *(double *)&v33[9] = a13;
    *(double *)&v33[10] = a14;
    char v35 = a4;
    char v36 = a5;
    char v37 = a6;
    char v38 = a7;
    char v39 = a8;
    dispatch_async(v28, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setAssistanceMapVector", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice22setAssistanceMapVectorEyddbddddbbbbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceMapVector_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (*(unsigned char *)(a1 + 133)) {
        uint64_t v6 = 84;
      }
      else {
        uint64_t v6 = 70;
      }
      if (*(unsigned char *)(a1 + 132)) {
        uint64_t v7 = 84;
      }
      else {
        uint64_t v7 = 70;
      }
      if (*(unsigned char *)(a1 + 131)) {
        uint64_t v8 = 84;
      }
      else {
        uint64_t v8 = 70;
      }
      if (*(unsigned char *)(a1 + 130)) {
        uint64_t v9 = 84;
      }
      else {
        uint64_t v9 = 70;
      }
      if (*(unsigned char *)(a1 + 129)) {
        uint64_t v10 = 84;
      }
      else {
        uint64_t v10 = 70;
      }
      if (*(unsigned char *)(a1 + 128)) {
        uint64_t v11 = 84;
      }
      else {
        uint64_t v11 = 70;
      }
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,SegStartLat,%f,SegStartLong,%f,AltValid,%c,SegStartAltWgs84,%f,SegLenM,%f,SegDirDeg,%f,SegWidM,%f,Freeway,%c,Railway,%c,OneWayRoad,%c,Tunnel,%c,Bridge,%c\n", v5, "ADP", 77, "setAssistanceMapVector_block_invoke", *(void *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), v11, *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 120), v10, v9, v8,
              v7,
              v6);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 3, 1);
    }
    double v13 = *(double *)(a1 + 80);
    if (v13 > 90.0 || v13 < -90.0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v81, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v81, (uint64_t)"setAssistanceMapVector_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v81);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Lat,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "setAssistanceMapVector_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
      }
    }
    else
    {
      double v14 = *(double *)(a1 + 88);
      if (v14 > 180.0 || v14 < -180.0)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v80, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v80, (uint64_t)"setAssistanceMapVector_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v80);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Long,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 88));
          LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "setAssistanceMapVector_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a1 + 128);
        if (*(unsigned char *)(a1 + 128) && ((double v16 = *(double *)(a1 + 96), v16 > 100000.0) || v16 < -100000.0))
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v79, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v79, (uint64_t)"setAssistanceMapVector_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v79);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v41 = mach_continuous_time();
            unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Alt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 96));
            LbsOsaTrace_WriteLog(0x18u, __str, v42, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v43 = mach_continuous_time();
            unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "ADP", 68, "setAssistanceMapVector_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v44, 5, 1);
          }
        }
        else
        {
          double v17 = *(double *)(a1 + 104);
          if (v17 <= 100000.0)
          {
            double v35 = *(double *)(a1 + 112);
            if (v35 < 0.0 || v35 > 360.0)
            {
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 40);
              gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v77, (uint64_t)"setAssistanceMapVector_block_invoke");
              std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v77);
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v45 = mach_continuous_time();
                unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dir,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 112));
                LbsOsaTrace_WriteLog(0x18u, __str, v46, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result)
              {
                bzero(__str, 0x410uLL);
                uint64_t v47 = mach_continuous_time();
                unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 68, "setAssistanceMapVector_block_invoke");
                return LbsOsaTrace_WriteLog(0x18u, __str, v48, 5, 1);
              }
            }
            else
            {
              double v36 = *(double *)(a1 + 120);
              if (v36 <= 100000.0)
              {
                unint64_t v49 = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
                int v66 = v49;
                if (fabs(v14 + 180.0) >= 2.22044605e-16) {
                  double v50 = v14;
                }
                else {
                  double v50 = v14 + 360.0;
                }
                double v67 = v13;
                double v68 = v50;
                double v51 = *(double *)(a1 + 96);
                double v69 = v51;
                char v70 = v15;
                double v71 = v35;
                double v72 = v17;
                double v73 = v36;
                LODWORD(v14) = *(_DWORD *)(a1 + 129);
                int16x8_t v52 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v14);
                *(int8x8_t *)v52.i8 = vext_s8(*(int8x8_t *)v52.i8, *(int8x8_t *)v52.i8, 6uLL);
                unsigned __int32 v74 = vmovn_s16(v52).u32[0];
                int v53 = *(unsigned __int8 *)(a1 + 133);
                char v75 = *(unsigned char *)(a1 + 133);
                int v54 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
                uint64_t v55 = a1 + 40;
                std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v65, v55);
                gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v54, (uint64_t)v65);
                std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v65);
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  double v56 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
                  uint64_t v57 = 84;
                  if (!v15) {
                    uint64_t v57 = 70;
                  }
                  unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsTimeMs,%u,StartLat,%f,StartLong,%f,StartAlt,%f,HtAvail,%c,Dir,%f,Len,%f,Width,%f,Bridge,%d\n", (unint64_t)v56, "ADP", 68, "setAssistanceMapVector_block_invoke", v49, v13, v50, v51, v57, v35, v17, v36, v53);
                  LbsOsaTrace_WriteLog(0x18u, __str, v58, 5, 1);
                }
                unsigned int v59 = GNS_EaMapVectorSeg(v54, (uint64_t)&v66);
                if (v59 != 1)
                {
                  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v64, v55);
                  gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v59, (uint64_t)v64, "setAssistanceMapVector_block_invoke");
                  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v64);
                  gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v54);
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v60 = mach_continuous_time();
                    unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaMapVectorSeg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 69, "setAssistanceMapVector_block_invoke", 257, v59);
                    LbsOsaTrace_WriteLog(0x18u, __str, v61, 0, 1);
                  }
                }
                uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if (result)
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v62 = mach_continuous_time();
                  unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "ADP", 68, "setAssistanceMapVector_block_invoke");
                  return LbsOsaTrace_WriteLog(0x18u, __str, v63, 5, 1);
                }
              }
              else
              {
                std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v76, a1 + 40);
                gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v76, (uint64_t)"setAssistanceMapVector_block_invoke");
                std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v76);
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v37 = mach_continuous_time();
                  unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Width,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 120));
                  LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
                }
                uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if (result)
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v39 = mach_continuous_time();
                  unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 68, "setAssistanceMapVector_block_invoke");
                  return LbsOsaTrace_WriteLog(0x18u, __str, v40, 5, 1);
                }
              }
            }
          }
          else
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v78, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v78, (uint64_t)"setAssistanceMapVector_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v78);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v18 = mach_continuous_time();
              unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Len,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setAssistanceMapVector_block_invoke", 514, *(double *)(a1 + 104));
              LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v21 = mach_continuous_time();
              unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setAssistanceMapVector_block_invoke");
              return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
            }
          }
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v82, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v82, (uint64_t)"setAssistanceMapVector_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v82);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setAssistanceMapVector_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "setAssistanceMapVector_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
    }
  }
  return result;
}

void sub_22BA9A734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void *gnss::GnssAdaptDevice::setAssistanceMotionActivityContext(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(void *)(a6 + 24))
  {
    uint64_t v10 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice34setAssistanceMotionActivityContextEyNS_21MotionActivityContextENS_11MovingStateENS_11ReliabilityENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_59_1;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a6);
    void v15[4] = a2;
    int v16 = a3;
    int v17 = a4;
    int v18 = a5;
    dispatch_async(v10, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setAssistanceMotionActivityContext", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice34setAssistanceMotionActivityContextEyNS_21MotionActivityContextENS_11MovingStateENS_11ReliabilityENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceMotionActivityContext_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,Ctxt,%u,MovState,%u,Rel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceMotionActivityContext_block_invoke", *(void *)(a1 + 72), *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    unint64_t v7 = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
    LODWORD(v40) = v7;
    uint64_t v38 = v7;
    uint64_t v8 = *(int *)(a1 + 80);
    if (v8 >= 9)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Context,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 515, *(_DWORD *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v47, (uint64_t)"setAssistanceMotionActivityContext_block_invoke");
      int v18 = v47;
      return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
    }
    int v9 = dword_22BB45940[v8];
    HIDWORD(v40) = v9;
    int v10 = *(_DWORD *)(a1 + 88);
    if (v10 <= 24)
    {
      if (!v10) {
        goto LABEL_26;
      }
      if (v10 == 10)
      {
LABEL_11:
        int v10 = 1;
LABEL_26:
        int v41 = v10;
        int v39 = v10;
        unsigned int v21 = *(_DWORD *)(a1 + 84);
        if (v21 < 4)
        {
          HIDWORD(v38) = *(_DWORD *)(a1 + 84);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ActCtx,%u,MovState,%u,Rel,%u,TimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "setAssistanceMotionActivityContext_block_invoke", v9, v21, v10, v7);
            LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
          }
          unsigned int v24 = GNS_EaUsrActCtxt(++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key, &v40);
          if (v24 == 1)
          {
            int v25 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
            uint64_t v26 = a1 + 40;
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v25, (uint64_t)v43);
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v43);
            unsigned int v27 = GNS_EaDevMovState(v25, &v38);
            if (v27 != 1)
            {
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v42, v26);
              gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v27, (uint64_t)v42, "setAssistanceMotionActivityContext_block_invoke");
              std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v42);
              gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v25);
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v28 = mach_continuous_time();
                unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaDevMovState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 257, v27);
                LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
              }
            }
            uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v30 = mach_continuous_time();
              unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "setAssistanceMotionActivityContext_block_invoke");
              return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
            }
          }
          else
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v44, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v24, (uint64_t)v44, "setAssistanceMotionActivityContext_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v44);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v34 = mach_continuous_time();
              unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaUsrActCtxt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 257, v24);
              LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
            }
            uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v36 = mach_continuous_time();
              unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "setAssistanceMotionActivityContext_block_invoke");
              return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
            }
          }
          return result;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v32 = mach_continuous_time();
          unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Moving State,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 515, *(_DWORD *)(a1 + 84));
          LbsOsaTrace_WriteLog(0x18u, __str, v33, 0, 1);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v45, (uint64_t)"setAssistanceMotionActivityContext_block_invoke");
        int v18 = v45;
        return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
      }
    }
    else
    {
      switch(v10)
      {
        case 75:
          int v10 = 3;
          goto LABEL_26;
        case 50:
          int v10 = 2;
          goto LABEL_26;
        case 25:
          goto LABEL_11;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 515, *(_DWORD *)(a1 + 88));
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v46, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v46, (uint64_t)"setAssistanceMotionActivityContext_block_invoke");
    int v18 = v46;
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v18);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v48, (uint64_t)"setAssistanceMotionActivityContext_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setAssistanceMotionActivityContext_block_invoke", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setAssistanceMotionActivityContext_block_invoke");
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
  }
  return result;
}

void sub_22BA9B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceMountState(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    unsigned __int16 v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23setAssistanceMountStateEyNS_16DeviceMountStateENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_66;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    unsigned char v11[4] = a2;
    int v12 = a3;
    dispatch_async(v6, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setAssistanceMountState", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice23setAssistanceMountStateEyNS_16DeviceMountStateENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceMountState_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,MtState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceMountState_block_invoke", *(void *)(a1 + 72), *(_DWORD *)(a1 + 80));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    LODWORD(v26) = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
    uint64_t v7 = *(int *)(a1 + 80);
    if (v7 >= 3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MountState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "setAssistanceMountState_block_invoke", 515, *(_DWORD *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v30, (uint64_t)"setAssistanceMountState_block_invoke");
      return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
    }
    else
    {
      int v8 = dword_22BB45964[v7];
      int v9 = dword_22BB45970[v7];
      HIDWORD(v26) = v8;
      int v27 = v9;
      int v10 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v11 = a1 + 40;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, v11);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v10, (uint64_t)v29);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
      unsigned int v12 = GNS_EaFixedInVehicle(v10, &v26);
      if (v12 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsTimeMs,%u,FivInd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setAssistanceMountState_block_invoke", v26, HIDWORD(v26));
          LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
        }
        uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
LABEL_23:
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "setAssistanceMountState_block_invoke");
          return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, v11);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v12, (uint64_t)v28, "setAssistanceMountState_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v10);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FixedInVeh,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "setAssistanceMountState_block_invoke", 257, v12);
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
        }
        uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result) {
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v31, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v31, (uint64_t)"setAssistanceMountState_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setAssistanceMountState_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    }
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "setAssistanceMountState_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
    }
  }
  return result;
}

void sub_22BA9BA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceSignalEnvironment(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice30setAssistanceSignalEnvironmentENS_21SignalEnvironmentTypeENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_73_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    int v10 = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setAssistanceSignalEnvironment", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice30setAssistanceSignalEnvironmentENS_21SignalEnvironmentTypeENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceSignalEnvironment_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SigEnv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceSignalEnvironment_block_invoke", *(_DWORD *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    uint64_t v7 = *(int *)(a1 + 72);
    if (v7 >= 7)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigEnv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setAssistanceSignalEnvironment_block_invoke", 515, *(_DWORD *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v27, (uint64_t)"setAssistanceSignalEnvironment_block_invoke");
      return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
    }
    else
    {
      unsigned int v8 = dword_22BB4597C[v7];
      int v9 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v10 = a1 + 40;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v9, (uint64_t)v26);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      unsigned int v11 = GNS_EaSigEnvSev(v9, v8);
      if (v11 != 1)
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, v10);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v11, (uint64_t)v25, "setAssistanceSignalEnvironment_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v9);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigEnvSev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setAssistanceSignalEnvironment_block_invoke", 257, v11);
          LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SESInd,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setAssistanceSignalEnvironment_block_invoke", v8);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
      }
      uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setAssistanceSignalEnvironment_block_invoke");
        return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v28, (uint64_t)"setAssistanceSignalEnvironment_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setAssistanceSignalEnvironment_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setAssistanceSignalEnvironment_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
  }
  return result;
}

void sub_22BA9C1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setAssistanceSpeedConstraint(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v10 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice28setAssistanceSpeedConstraintEydddNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_80;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
    void v15[4] = a2;
    *(double *)&void v15[5] = a4;
    *(double *)&v15[6] = a5;
    *(double *)&v15[7] = a6;
    dispatch_async(v10, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setAssistanceSpeedConstraint", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice28setAssistanceSpeedConstraintEydddNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setAssistanceSpeedConstraint_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*((unsigned char *)v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MachContTimeNs,%llu,DurSec,%f,SpeedLwrBound,%f,SpeedUprBound,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setAssistanceSpeedConstraint_block_invoke", *(void *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    double v7 = *(double *)(a1 + 80);
    if (v7 > 86400.0
      || (double v8 = *(double *)(a1 + 88), v8 < 0.0)
      || (double v18 = *(double *)(a1 + 96), v18 < v8)
      || v18 < 0.0
      || v18 > 100.0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MachContiTimeNs,%llu,Dur,%f,SpeedLwrBound,%f,SpeedUprBound,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setAssistanceSpeedConstraint_block_invoke", 514, *(void *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
        LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 4, (uint64_t)v34, (uint64_t)"setAssistanceSpeedConstraint_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setAssistanceSpeedConstraint_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
      }
    }
    else
    {
      unsigned int v19 = (v7 * 1000.0);
      unint64_t v20 = (*(void *)(a1 + 72) + 500000) / 0xF4240uLL;
      *(void *)&long long v30 = __PAIR64__(v19, v20);
      *((double *)&v30 + 1) = v8;
      double v31 = v18;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: OsTimeMs,%u,DurMs,%d,SpeedL,%f,SpeedU,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setAssistanceSpeedConstraint_block_invoke", v20, v19, v8, v18);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
      int v23 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key;
      uint64_t v24 = a1 + 40;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, v24);
      gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT((uint64_t)v2, v23, (uint64_t)v33);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
      unsigned int v25 = GNS_EaSpeedConstraint(v23, &v30);
      if (v25 == 1)
      {
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
LABEL_24:
          bzero(__str, 0x410uLL);
          uint64_t v26 = mach_continuous_time();
          unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 68, "setAssistanceSpeedConstraint_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v27, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, v24);
        gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse((uint64_t)v2, v25, (uint64_t)v32, "setAssistanceSpeedConstraint_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
        gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(v2, v23);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SpeedConstraint,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "setAssistanceSpeedConstraint_block_invoke", 257, v25);
          LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result) {
          goto LABEL_24;
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)v2, 7, (uint64_t)v35, (uint64_t)"setAssistanceSpeedConstraint_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setAssistanceSpeedConstraint_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setAssistanceSpeedConstraint_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    }
  }
  return result;
}

void sub_22BA9CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::startTimeTransferSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a4 + 24))
  {
    unsigned __int16 v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice24startTimeTransferSessionENSt3__18functionIFvNS_6ResultENS_16TimeTransferDataEEEENS2_IFvS3_EEES8__block_invoke;
    block[3] = &__block_descriptor_tmp_85;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
    return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v11);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "startTimeTransferSession", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
  return result;
}

void sub_22BA9CD68(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice24startTimeTransferSessionENSt3__18functionIFvNS_6ResultENS_16TimeTransferDataEEEENS2_IFvS3_EEES8__block_invoke(uint64_t a1)
{
  v39[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "startTimeTransferSession_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    if (*(unsigned char *)(v2 + 88))
    {
      if (*(unsigned char *)(v2 + 92))
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 72);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v34, (uint64_t)"startTimeTransferSession_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "startTimeTransferSession_block_invoke", 2056);
          LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "startTimeTransferSession_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
        uint64_t v18 = v2 + 440;
        if (__str != (char *)(v2 + 440))
        {
          unsigned int v19 = v38;
          uint64_t v20 = *(void *)(v2 + 464);
          if (v38 == __str)
          {
            if (v20 == v18)
            {
              (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v39);
              (*(void (**)(char *))(*(void *)v38 + 32))(v38);
              uint64_t v38 = 0;
              (*(void (**)(void, char *))(**(void **)(v2 + 464) + 24))(*(void *)(v2 + 464), __str);
              (*(void (**)(void))(**(void **)(v2 + 464) + 32))(*(void *)(v2 + 464));
              *(void *)(v2 + 464) = 0;
              uint64_t v38 = __str;
              (*(void (**)(void *, uint64_t))(v39[0] + 24))(v39, v2 + 440);
              (*(void (**)(void *))(v39[0] + 32))(v39);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 440);
              (*(void (**)(char *))(*(void *)v38 + 32))(v38);
              uint64_t v38 = *(char **)(v2 + 464);
            }
            *(void *)(v2 + 464) = v18;
          }
          else if (v20 == v18)
          {
            (*(void (**)(uint64_t, char *))(*(void *)v18 + 24))(v2 + 440, __str);
            (*(void (**)(void))(**(void **)(v2 + 464) + 32))(*(void *)(v2 + 464));
            *(void *)(v2 + 464) = v38;
            uint64_t v38 = __str;
          }
          else
          {
            uint64_t v38 = *(char **)(v2 + 464);
            *(void *)(v2 + 464) = v19;
          }
        }
        std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](__str);
        _OWORD v32[3] = 0;
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 104);
        gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 18, (uint64_t)v32);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
        unsigned int started = Gnm_StartTimeMarkSesion((uint64_t)gnss::GnssAdaptDevice::Ga03_03GnssTimeMarkDataCallBack);
        if (started)
        {
          uint64_t v22 = *(void *)(v2 + 464);
          *(void *)(v2 + 464) = 0;
          if (v22 == v18)
          {
            (*(void (**)(uint64_t))(*(void *)v18 + 32))(v2 + 440);
          }
          else if (v22)
          {
            (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
          }
          gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, started, 0x12u);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v27 = mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "startTimeTransferSession_block_invoke", 2049, started);
            LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v29 = mach_continuous_time();
            unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "startTimeTransferSession_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
          }
        }
        else
        {
          *(unsigned char *)(v2 + 92) = 1;
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v31, a1 + 72);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v31, (uint64_t)"startTimeTransferSession_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v23 = mach_continuous_time();
            unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Started\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 77, "startTimeTransferSession_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v24, 3, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v25 = mach_continuous_time();
            unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "startTimeTransferSession_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
          }
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v35, (uint64_t)"startTimeTransferSession_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "startTimeTransferSession_block_invoke", 1302);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "startTimeTransferSession_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v36, (uint64_t)"startTimeTransferSession_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "startTimeTransferSession_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "startTimeTransferSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22BA9D77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga03_03GnssTimeMarkDataCallBack(gnss::GnssAdaptDevice *a1, char *a2)
{
  char v3 = (char)a1;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    uint64_t v5 = DeviceInstance;
    memset(&v34[4], 0, 17);
    if (a2)
    {
      char v6 = *a2;
      char v7 = a2[1];
      __int16 v8 = *((_WORD *)a2 + 1);
      *(_OWORD *)uint64_t v34 = *(_OWORD *)(a2 + 4);
      *(void *)&v34[13] = *(void *)(a2 + 17);
      *(_DWORD *)unsigned __int16 v17 = *(_DWORD *)(a2 + 25);
      *(_DWORD *)&v17[3] = *((_DWORD *)a2 + 7);
      uint64_t v9 = *((void *)a2 + 4);
      int v10 = *((_DWORD *)a2 + 10);
      char v11 = a2[44];
      char v12 = a2[45];
      __int16 v13 = *((_WORD *)a2 + 23);
    }
    else
    {
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMarkData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga03_02HandleTimeMarkDataCallback", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      __int16 v13 = 0;
      char v11 = 0;
      int v10 = 0;
      __int16 v8 = 0;
      char v6 = 0;
      char v3 = 11;
    }
    uint64_t v16 = *(NSObject **)(v5 + 288);
    *(void *)std::string __str = MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    uint64_t v20 = ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke;
    uint64_t v21 = &__block_descriptor_tmp_117;
    uint64_t v22 = v5;
    char v33 = v3;
    char v23 = v6;
    char v24 = v7;
    __int16 v25 = v8;
    *(_OWORD *)unsigned __int16 v26 = *(_OWORD *)v34;
    *(void *)&v26[13] = *(void *)&v34[13];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v17;
    *(_DWORD *)&_OWORD v27[3] = *(_DWORD *)&v17[3];
    uint64_t v28 = v9;
    int v29 = v10;
    char v30 = v11;
    char v31 = v12;
    __int16 v32 = v13;
    dispatch_async(v16, __str);
  }
}

uint64_t __copy_helper_block_e8_40c63_ZTSNSt3__18functionIFvN4gnss6ResultENS1_16TimeTransferDataEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE104c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 104, a2 + 104);
}

void sub_22BA9DA88(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c63_ZTSNSt3__18functionIFvN4gnss6ResultENS1_16TimeTransferDataEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE104c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(void *a1)
{
  uint64_t v2 = a1 + 9;
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 13);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2);

  return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](a1 + 5);
}

void *gnss::GnssAdaptDevice::stopTimeTransferSession(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23stopTimeTransferSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_88;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "stopTimeTransferSession", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice23stopTimeTransferSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 92) = 0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v3, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 1, (uint64_t)v3, (uint64_t)"stopTimeTransferSession_block_invoke");
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v3);
}

void sub_22BA9DD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga03_00RegisterGnsEaStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, int *a3)
{
  int v4 = (int)a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    uint64_t v6 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga03_01HandleGnsEaStatusResponse", v4);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
    }
    if (!a3)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
        return;
      }
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgData,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga03_01HandleGnsEaStatusResponse", 770, v4);
      int v12 = 0;
      goto LABEL_10;
    }
    int v9 = a3[1];
    if (v9 == 3)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0)) {
        return;
      }
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Resp rcvd for E_gnsEA_DATA_UAC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 73, "Ga03_01HandleGnsEaStatusResponse");
      int v12 = 4;
LABEL_10:
      LbsOsaTrace_WriteLog(0x18u, __str, v11, v12, 1);
      return;
    }
    int v14 = *a3;
    int v15 = a3[2];
    uint64_t v16 = *(NSObject **)(v6 + 288);
    *(void *)std::string __str = MEMORY[0x263EF8330];
    uint64_t v18 = 0x40000000;
    uint64_t v19 = ___ZN4gnss15GnssAdaptDevice32Ga03_01HandleGnsEaStatusResponseE15e_gnsEA_MsgTypejP17s_gnsEA_ApiStatus_block_invoke;
    uint64_t v20 = &__block_descriptor_tmp_98_1;
    uint64_t v21 = v6;
    int v22 = v14;
    int v23 = v9;
    int v24 = v15;
    dispatch_async(v16, __str);
  }
}

void *___ZN4gnss15GnssAdaptDevice32Ga03_01HandleGnsEaStatusResponseE15e_gnsEA_MsgTypejP17s_gnsEA_ApiStatus_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v33 = 0;
  uint64_t v2 = *(void *)(v1 + 264);
  if (!v2) {
    goto LABEL_40;
  }
  uint64_t v4 = v1 + 264;
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = v1 + 264;
  uint64_t v7 = *(void *)(v1 + 264);
  do
  {
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      uint64_t v10 = (uint64_t *)v7;
    }
    else {
      uint64_t v10 = (uint64_t *)(v7 + 8);
    }
    if (v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 != v4 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v13 = v1 + 264;
    do
    {
      unsigned int v14 = *(_DWORD *)(v2 + 32);
      BOOL v15 = v14 >= v5;
      if (v14 >= v5) {
        uint64_t v16 = (uint64_t *)v2;
      }
      else {
        uint64_t v16 = (uint64_t *)(v2 + 8);
      }
      if (v15) {
        uint64_t v13 = v2;
      }
      uint64_t v2 = *v16;
    }
    while (*v16);
    if (v13 == v4 || v5 < *(_DWORD *)(v13 + 32)) {
      uint64_t v13 = v1 + 264;
    }
    std::function<void ()(gnss::Result)>::operator=(v32, v13 + 40);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer((uint64_t **)(v1 + 256), (uint64_t *)v6);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v6 + 40));
    operator delete((void *)v6);
    if (v33)
    {
      int v17 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v1, *(_DWORD *)(a1 + 48));
      if (*(_DWORD *)(a1 + 44) == 1)
      {
        if (*(_DWORD *)(a1 + 48) == 1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v18 = mach_continuous_time();
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ExtPosAssist Accepted\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "Ga03_01HandleGnsEaStatusResponse_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ExtPosAssist Rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 73, "Ga03_01HandleGnsEaStatusResponse_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 4, 1);
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Ea Type,%u,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "Ga03_01HandleGnsEaStatusResponse_block_invoke", *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 40));
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
      }
      unsigned __int16 v26 = *(NSObject **)(v1 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice32Ga03_01HandleGnsEaStatusResponseE15e_gnsEA_MsgTypejP17s_gnsEA_ApiStatus_block_invoke_2;
      block[3] = &__block_descriptor_tmp_97;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v32);
      int v30 = v17;
      dispatch_async(v26, block);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx API type,%u ID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 87, "Ga03_01HandleGnsEaStatusResponse_block_invoke", 770, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 2, 1);
    }
  }
  else
  {
LABEL_40:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnsStatusRespLut Hdl\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 87, "Ga03_01HandleGnsEaStatusResponse_block_invoke", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 2, 1);
    }
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
}

void sub_22BA9E420(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga03_01HandleGnsEaStatusResponseE15e_gnsEA_MsgTypejP17s_gnsEA_ApiStatus_block_invoke_2(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

void *___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke(uint64_t a1)
{
  void v76[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)v76, v2 + 440);
  if (v76[3])
  {
    if (*(unsigned char *)(a1 + 88))
    {
      char v3 = *(NSObject **)(v2 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2;
      block[3] = &__block_descriptor_tmp_101;
      uint64_t v4 = v66;
      std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)v66, (uint64_t)v76);
      v66[32] = 0;
      uint64_t v67 = 0;
      int v68 = -1082130432;
      char v69 = 0;
      int v70 = 0;
      uint64_t v71 = -1;
      long long v72 = 0u;
      long long v73 = 0u;
      uint64_t v74 = 0;
      dispatch_async(v3, block);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status Unavailable\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga03_02HandleTimeMarkDataCallback_block_invoke", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40))
      {
        unint64_t v10 = (unint64_t)(*(double *)(a1 + 48) * 1000000.0) + 604800000000000 * *(__int16 *)(a1 + 42);
        double v11 = *(double *)(a1 + 56) * 1000000.0;
        BOOL v12 = v11 <= 3.40282347e38;
        float v13 = v11;
        if (v12) {
          float v14 = v13;
        }
        else {
          float v14 = 3.4028e38;
        }
        char v15 = 1;
      }
      else
      {
        unint64_t v10 = 0;
        char v15 = 0;
        float v14 = -1.0;
      }
      uint64_t v16 = 1000000 * *(unsigned int *)(a1 + 80);
      double v17 = *(double *)(a1 + 72);
      if (v17 <= 2147483650.0)
      {
        if (v17 <= 0.0) {
          double v23 = -0.5;
        }
        else {
          double v23 = 0.5;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UTCCorr %.9f,LeapSec,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga03_02HandleTimeMarkDataCallback_block_invoke", v17, (int)(v17 + v23));
          LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
        }
        double v26 = v17 - (double)(unint64_t)v17;
        if (v26 > 0.0000005 && v26 < 0.9999995 && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UtcCorr beyond 500ns from seconds boundary,%.9f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 87, "Ga03_02HandleTimeMarkDataCallback_block_invoke", 770, v17);
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 2, 1);
        }
        if (*(unsigned char *)(a1 + 64)) {
          BOOL v29 = *(unsigned char *)(a1 + 40) != 0;
        }
        else {
          BOOL v29 = 0;
        }
        unsigned int v30 = *(unsigned __int8 *)(a1 + 84);
        if (v30 >= 6)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v31 = mach_continuous_time();
            unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid TimeMark Qual\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 73, "Ga03_02HandleTimeMarkDataCallback_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v32, 4, 1);
          }
          unsigned int v30 = 0;
        }
        unsigned int v33 = *(unsigned __int16 *)(a1 + 86);
        if ((v33 & 8) != 0 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v34 = mach_continuous_time();
          unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel E_GNM_GNSSID_MODGPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 69, "Ga03_02HandleTimeMarkDataCallback_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, __str, v35, 0, 1);
        }
        int v36 = v33 & 0x11 | (8 * ((v33 >> 1) & 1)) | (v33 >> 4) & 6;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v38 = 70;
          if (v29) {
            uint64_t v39 = 84;
          }
          else {
            uint64_t v39 = 70;
          }
          if (v9) {
            uint64_t v38 = 84;
          }
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WkValid,%c,TimeNs,%llu,TimeUncNs,%f,ClkNs,%llu,LeapSecValid,%c,LeapSec,%d,Qual,%u,ConstUsed,%u\n", v37, "ADP", 73, "Ga03_02HandleTimeMarkDataCallback_block_invoke", v38, v10, v14, v16, v39, (int)(v17 + v23), v30, v36);
          LbsOsaTrace_WriteLog(0x18u, __str, v40, 4, 1);
        }
        int v41 = *(NSObject **)(v2 + 296);
        v42[0] = MEMORY[0x263EF8330];
        v42[1] = 1174405120;
        v42[2] = ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2_113;
        v42[3] = &__block_descriptor_tmp_116;
        std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v76);
        unsigned char v43[32] = v15;
        unint64_t v44 = v10;
        float v45 = v14;
        BOOL v46 = v29;
        int v47 = (int)(v17 + v23);
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v48 = v16;
        unsigned int v51 = v30;
        int v52 = v36;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        dispatch_async(v41, v42);
        unsigned __int16 v21 = v43;
        goto LABEL_17;
      }
      uint64_t v18 = *(NSObject **)(v2 + 296);
      v55[0] = MEMORY[0x263EF8330];
      v55[1] = 1174405120;
      v55[2] = ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2_103;
      v55[3] = &__block_descriptor_tmp_106_0;
      uint64_t v4 = v56;
      std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100]((uint64_t)v56, (uint64_t)v76);
      v56[32] = v15;
      unint64_t v57 = v10;
      float v58 = v14;
      char v59 = 0;
      int v60 = 0;
      long long v62 = 0u;
      long long v63 = 0u;
      uint64_t v61 = v16;
      uint64_t v64 = 0;
      dispatch_async(v18, v55);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTCorr,%.9f \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "Ga03_02HandleTimeMarkDataCallback_block_invoke", 770, v17);
        LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
      }
    }
    unsigned __int16 v21 = v4;
LABEL_17:
    std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v21);
    return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v76);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeTransferDataCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga03_02HandleTimeMarkDataCallback_block_invoke", 770);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
  return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v76);
}

void sub_22BA9ECD0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100]((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2(uint64_t a1)
{
  return std::function<void ()(gnss::Result,gnss::TimeTransferData)>::operator()(*(void *)(a1 + 56), 8);
}

uint64_t std::function<void ()(gnss::Result,gnss::TimeTransferData)>::operator()(uint64_t a1, int a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t __copy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN4gnss6ResultENS1_16TimeTransferDataEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN4gnss6ResultENS1_16TimeTransferDataEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2_103(uint64_t a1)
{
  return std::function<void ()(gnss::Result,gnss::TimeTransferData)>::operator()(*(void *)(a1 + 56), 8);
}

uint64_t ___ZN4gnss15GnssAdaptDevice33Ga03_02HandleTimeMarkDataCallbackE11e_Gnm_ErrorP18s_Gnm_TimeMarkData_block_invoke_2_113(uint64_t a1)
{
  return std::function<void ()(gnss::Result,gnss::TimeTransferData)>::operator()(*(void *)(a1 + 56), 1);
}

uint64_t std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t NK_Reflection_Rejection_Ped(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned char *)(a3 + 11162);
  if (a4[242])
  {
    if (*(_DWORD *)(a3 + 11048))
    {
      if (!*((unsigned char *)a4 + 600)
        && *(double *)(a3 + 11432) <= 6.0
        && (*(_DWORD *)(a3 + 20) - 4) >= 5
        && *((unsigned __int8 *)a4 + 977) > 0xEu)
      {
        uint64_t v9 = result;
        if (!*(_WORD *)(result + 248)
          || (double v10 = *(double *)(result + 80), v10 >= -10.0) && v10 <= 70.0 && fabs(*(double *)(result + 120)) <= 0.3)
        {
          long long v107 = (char *)a4 + 8387;
          uint64_t v7 = (unsigned char *)(a3 + 11644);
          if (!*(unsigned char *)(a3 + 11644))
          {
            *(_WORD *)(a3 + 11644) = 1;
            bzero((void *)(a3 + 11872), 0x3A80uLL);
            *(_WORD *)(a3 + 11870) = -1;
            *(void *)&long long v11 = -1;
            *((void *)&v11 + 1) = -1;
            *(_OWORD *)(a3 + 11838) = v11;
            *(_OWORD *)(a3 + 11854) = v11;
            *(_OWORD *)(a3 + 11806) = v11;
            *(_OWORD *)(a3 + 11822) = v11;
            *(_OWORD *)(a3 + 11774) = v11;
            *(_OWORD *)(a3 + 11790) = v11;
            *(_OWORD *)(a3 + 11742) = v11;
            *(_OWORD *)(a3 + 11758) = v11;
            *(_OWORD *)(a3 + 11710) = v11;
            *(_OWORD *)(a3 + 11726) = v11;
            *(_OWORD *)(a3 + 11678) = v11;
            *(_OWORD *)(a3 + 11694) = v11;
            *(_OWORD *)(a3 + 11646) = v11;
            *(_OWORD *)(a3 + 11662) = v11;
          }
          uint64_t v12 = 0;
          v108[0] = 0;
          *(void *)&long long v13 = -1;
          *((void *)&v13 + 1) = -1;
          v110[1] = v13;
          _OWORD v110[2] = v13;
          v110[0] = v13;
          uint64_t v14 = a3 + 11824;
          while (1)
          {
            int v15 = *(_DWORD *)(a2 + 4 * v12 + 76);
            uint64_t result = Is_Legal(v15);
            if (result) {
              BOOL v16 = v15 == 6;
            }
            else {
              BOOL v16 = 1;
            }
            if (!v16)
            {
              BOOL v17 = v15 != 4 || BYTE2(v15) >= 5u;
              if (v17 && *((unsigned char *)a4 + v12 + 2864) && *((unsigned char *)a4 + v12 + 8440) && *((unsigned char *)a4 + v12 + 49))
              {
                if (*((unsigned char *)a4 + v12 + 26208) && *((unsigned char *)a4 + v12 + 26160))
                {
                  uint64_t result = GNSS_Id_To_Num_Prn_Idx(v15);
                  uint64_t v18 = (unsigned char *)(a3 + (int)result + 11646);
                  unsigned int v19 = *v18;
                  if (v19 == 255)
                  {
                    if (v4[483] == 48)
                    {
                      uint64_t result = (uint64_t)EvLog("NK_Reflection_Rejection_Ped: No space");
LABEL_55:
                      if ((int)v108[0] < 4) {
                        goto LABEL_8;
                      }
                      VecMedian8(v109, v108[0]);
                      uint64_t result = 300000;
                      uint64_t v25 = 0;
                      double v27 = -v26;
                      uint64_t v28 = a3 + 11904;
                      uint64_t v29 = a3 + 12104;
                      unsigned int v30 = (void *)(a3 + 12112);
                      long long v31 = 0uLL;
                      double v32 = 0.5;
                      double v33 = 0.75;
                      double v34 = 2.25;
                      long long v106 = a4 + 2096;
                      double v35 = 20.0;
                      while (2)
                      {
                        int v36 = (unsigned char *)(a3 + v25 + 11824);
                        uint64_t v37 = *v36;
                        if (v37 != 255)
                        {
                          uint64_t v38 = *((unsigned __int8 *)v110 + v25);
                          if (v38 == 255)
                          {
                            uint64_t v47 = a3 + 312 * v25;
                            int v48 = *(_DWORD *)(v47 + 11872);
                            unsigned int v49 = v48 - 1;
                            if (v48 >= 1
                              && (uint64_t v50 = a3 + 312 * v25, (v51 = *(_DWORD *)(v50 + 11876)) != 0)
                              && *(_DWORD *)(a3 + 312 * v25 + 4 * v49 + 11904)
                              && (unsigned int v52 = *a4,
                                  10 * *(_DWORD *)(v9 + 948) + 300000 + *(_DWORD *)(a3 + 312 * v25 + 11904) > *a4))
                            {
                              *(double *)(a3 + 312 * v25 + 11896) = *(double *)(a3 + 312 * v25 + 11896)
                                                                  + v27 * ((double)(int)(v52 - v51) * 0.001);
                              *(_DWORD *)(v50 + 11876) = v52;
                            }
                            else
                            {
                              uint64_t v53 = v47 + 11872;
                              *(void *)(v53 + 304) = 0;
                              *(_OWORD *)(v53 + 272) = v31;
                              *(_OWORD *)(v53 + 288) = v31;
                              *(_OWORD *)(v53 + 240) = v31;
                              *(_OWORD *)(v53 + 256) = v31;
                              *(_OWORD *)(v53 + 208) = v31;
                              *(_OWORD *)(v53 + 224) = v31;
                              *(_OWORD *)(v53 + 176) = v31;
                              *(_OWORD *)(v53 + 192) = v31;
                              *(_OWORD *)(v53 + 144) = v31;
                              *(_OWORD *)(v53 + 160) = v31;
                              *(_OWORD *)(v53 + 112) = v31;
                              *(_OWORD *)(v53 + 128) = v31;
                              *(_OWORD *)(v53 + 80) = v31;
                              *(_OWORD *)(v53 + 96) = v31;
                              *(_OWORD *)(v53 + 48) = v31;
                              *(_OWORD *)(v53 + 64) = v31;
                              *(_OWORD *)(v53 + 16) = v31;
                              *(_OWORD *)(v53 + 32) = v31;
                              *(_OWORD *)uint64_t v53 = v31;
                              *(unsigned char *)(a3 + v37 + 11646) = -1;
                              *int v36 = -1;
                              --v4[483];
                            }
                          }
                          else
                          {
                            uint64_t v39 = (unsigned int *)(a3 + 312 * v25 + 11872);
                            uint64_t v40 = *v39;
                            if (!v40)
                            {
                              *(void *)(a3 + 312 * v25 + 12176) = 0;
                              *(_OWORD *)(a3 + 312 * v25 + 12144) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12160) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12112) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12128) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12080) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12096) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12048) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12064) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12016) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12032) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11984) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12000) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11952) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11968) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11920) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11936) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11888) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11904) = v31;
                              *(_OWORD *)uint64_t v39 = v31;
                              *uint64_t v39 = 1;
                              unsigned int v54 = *a4;
                              uint64_t v55 = a3 + 312 * v25;
                              *(_DWORD *)(v55 + 11876) = *a4;
                              *(void *)(v55 + 11880) = *(void *)&a4[2 * v38 + 6576];
                              *(_DWORD *)(v55 + 11904) = v54;
                              *(void *)(v55 + 11944) = 0;
                              *(void *)(v55 + 11888) = *(void *)(a2 + 8 * v38 + 1232);
                              goto LABEL_122;
                            }
                            uint64_t v41 = (v40 - 1);
                            unsigned int v42 = *a4;
                            int v43 = *(_DWORD *)(a3 + 312 * v25 + 4 * (int)v41 + 11904);
                            int v44 = *a4 - v43;
                            if (v44 > 300000)
                            {
                              uint64_t v45 = a3 + 312 * v25;
                              *(void *)(v45 + 12176) = 0;
                              *(_OWORD *)(v45 + 12144) = v31;
                              *(_OWORD *)(v45 + 12160) = v31;
                              *(_OWORD *)(v45 + 12112) = v31;
                              *(_OWORD *)(v45 + 12128) = v31;
                              *(_OWORD *)(v45 + 12080) = v31;
                              *(_OWORD *)(v45 + 12096) = v31;
                              *(_OWORD *)(v45 + 12048) = v31;
                              *(_OWORD *)(v45 + 12064) = v31;
                              *(_OWORD *)(v45 + 12016) = v31;
                              *(_OWORD *)(v45 + 12032) = v31;
                              *(_OWORD *)(v45 + 11984) = v31;
                              *(_OWORD *)(v45 + 12000) = v31;
                              *(_OWORD *)(v45 + 11952) = v31;
                              *(_OWORD *)(v45 + 11968) = v31;
                              *(_OWORD *)(v45 + 11920) = v31;
                              *(_OWORD *)(v45 + 11936) = v31;
                              *(_OWORD *)(v45 + 11888) = v31;
                              *(_OWORD *)(v45 + 11904) = v31;
                              *(_OWORD *)uint64_t v39 = v31;
                              *uint64_t v39 = 1;
                              unsigned int v46 = *a4;
                              *(_DWORD *)(v45 + 11876) = *a4;
                              *(void *)(v45 + 11880) = *(void *)&a4[2 * v38 + 6576];
                              *(_DWORD *)(v45 + 11904) = v46;
                              *(void *)(v45 + 11944) = 0;
                              *(void *)(v45 + 11888) = *(void *)(a2 + 8 * v38 + 1232);
                              goto LABEL_122;
                            }
                            uint64_t v56 = a2 + 8 * v38;
                            double v57 = *(double *)(a3 + 312 * v25 + 11888);
                            if (vabdd_f64(*(double *)(v56 + 1232), v57) > 149896.229)
                            {
                              *(void *)(a3 + 312 * v25 + 12176) = 0;
                              *(_OWORD *)(a3 + 312 * v25 + 12144) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12160) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12112) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12128) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12080) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12096) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12048) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12064) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12016) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12032) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11984) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 12000) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11952) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11968) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11920) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11936) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11888) = v31;
                              *(_OWORD *)(a3 + 312 * v25 + 11904) = v31;
                              *(_OWORD *)uint64_t v39 = v31;
                              goto LABEL_122;
                            }
                            *(void *)long long v108 = *((unsigned __int8 *)v110 + v25);
                            uint64_t v58 = a3 + 312 * v25;
                            int v59 = *(_DWORD *)(v58 + 11876);
                            double v60 = *(double *)(v58 + 11896) + v27 * ((double)(int)(v42 - v59) * 0.001);
                            *(double *)(v58 + 11896) = v60;
                            if (*v4)
                            {
                              double v61 = 1.5;
                              double v62 = 0.15;
                              if (*(double *)(a3 + 11432) > 1.5)
                              {
                                if (*((double *)a4 + 3089) >= 0.15) {
                                  double v62 = *((double *)a4 + 3089);
                                }
                                else {
                                  double v62 = 0.15;
                                }
                                double v61 = *(double *)(a3 + 11432);
                              }
                            }
                            else
                            {
                              double v61 = 1.5;
                              double v62 = 0.15;
                            }
                            double v63 = (double)v44;
                            uint64_t v64 = (double *)(v56 + 1232);
                            double v65 = (double)v44 * 0.001;
                            uint64_t v67 = a3 + 312 * v25;
                            uint64_t v66 = *(void *)v108;
                            long long v105 = &a4[2 * *(void *)v108];
                            double v68 = v65 * ((*(double *)(v67 + 11880) + *((double *)v105 + 3288)) * v32);
                            double v69 = *(double *)(a3 + 40 * v108[0] + 2104);
                            double v70 = v65 * (v62 * 3.0 + v69 * v61);
                            double v71 = *v64;
                            double v72 = *v64 - (v57 + v60 + v68 + v70 + 50.0);
                            int v73 = v72 < 1000.0 && v72 > 0.0;
                            if (v73)
                            {
                              int v73 = 1;
                            }
                            else if ((int)v40 < 2)
                            {
                              int v73 = 0;
                            }
                            else
                            {
                              uint64_t v74 = 0;
                              int v75 = v40 - 1;
                              while (*(_DWORD *)(v28 + 4 * v74) < v42 - 10 * *(_DWORD *)(v9 + 948))
                              {
                                ++v74;
                                --v75;
                                if (v40 == v74) {
                                  goto LABEL_99;
                                }
                              }
                              if ((int)v41 <= (int)v74)
                              {
                                int v76 = 1;
                                double v78 = v57;
                              }
                              else
                              {
                                int v76 = v40 - v74;
                                double v77 = 0.0;
                                double v78 = v57;
                                double v79 = v57;
                                long long v80 = (double *)(v29 + 8 * (int)v41);
                                do
                                {
                                  double v77 = v77 + *(v80 - 10) + *v80;
                                  double v79 = v79 - *(v80 - 20);
                                  double v78 = v77 + v78 + v79;
                                  --v80;
                                  --v75;
                                }
                                while (v75);
                              }
                              double v81 = v71 - (50.0 / (double)v76 + v70 + v68 + v60 + v78 / (double)v76 + v35);
                              if (v81 < 1000.0 && v81 > 0.0) {
                                int v73 = 2;
                              }
LABEL_99:
                              uint64_t v67 = a3 + 312 * v25;
                              uint64_t v66 = *(void *)v108;
                            }
                            int v83 = (_DWORD *)(v67 + 11876);
                            if (v59 != v43) {
                              goto LABEL_113;
                            }
                            if ((v73 - 1) < 3) {
                              goto LABEL_121;
                            }
                            long long v104 = (_DWORD *)(v67 + 11876);
                            if (v73)
                            {
                              long long v103 = v64;
                              int v102 = v73;
                              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                              int v73 = v102;
                              uint64_t v64 = v103;
                              int v83 = v104;
                              uint64_t v67 = a3 + 312 * v25;
                              uint64_t v66 = *(void *)v108;
                              double v35 = 20.0;
                              double v32 = 0.5;
                              double v34 = 2.25;
                              double v33 = 0.75;
                              long long v31 = 0uLL;
                              uint64_t result = 300000;
                              goto LABEL_113;
                            }
                            uint64_t v84 = a3 + 312 * v25;
                            if ((int)v40 < 6)
                            {
LABEL_119:
                              *uint64_t v39 = v40 + 1;
                              unsigned int v98 = *a4;
                              *long long v104 = *a4;
                              uint64_t v99 = a3 + 312 * v25 + 11872;
                              *(_DWORD *)(v99 + 4 * (int)v40 + 32) = v98;
                              uint64_t v100 = v99 + 8 * (int)v40;
                              *(double *)(v100 + 72) = *v64 - *(double *)(v84 + 11888);
                              *(double *)(v84 + 11888) = *v64;
                              *(void *)(v100 + 152) = *(void *)(v67 + 11896);
                              *(double *)(v100 + 232) = v68;
                              *(void *)(v67 + 11896) = 0;
                              *(void *)(v67 + 11880) = *((void *)v105 + 3288);
                            }
                            else
                            {
                              if (v62 <= v33) {
                                double v85 = v34;
                              }
                              else {
                                double v85 = v62 * 3.0;
                              }
                              double v86 = v60 + v68;
                              double v87 = v57 + v60 + v68 - v71;
                              double v88 = v87 * v63;
                              double v89 = v63 * v63;
                              uint64_t v90 = v41 - 1;
                              long long v91 = (double *)(v29 + 8 * v41);
                              int v92 = 1;
                              do
                              {
                                double v86 = v86 + *(v91 - 10) + *v91;
                                double v93 = (double)(int)(v42 - *(_DWORD *)(a3 + 312 * v25 + 4 * v90 + 11904));
                                double v57 = v57 - *(v91 - 20);
                                double v94 = v86 + v57 - v71;
                                ++v92;
                                double v63 = v63 + v93;
                                double v89 = v89 + v93 * v93;
                                double v87 = v87 + v94;
                                double v88 = v88 + v94 * v93;
                                --v90;
                                --v91;
                              }
                              while (v40 != v92);
                              double v95 = (double)(int)v40 * v89 - v63 * v63;
                              int v83 = (_DWORD *)(v67 + 11876);
                              if (v95 > 0.0 && (v87 * -v63 + (double)(int)v40 * v88) * -1000.0 / v95 > v85 + v69 * v61)
                              {
                                int v73 = 3;
                                goto LABEL_121;
                              }
LABEL_113:
                              if ((v73 - 1) >= 3)
                              {
                                long long v104 = v83;
                                if (!v73)
                                {
                                  LODWORD(v40) = *v39;
                                  uint64_t v84 = a3 + 312 * v25;
                                  if (*v39 == 10)
                                  {
                                    uint64_t v96 = 0;
                                    long long v97 = v30;
                                    do
                                    {
                                      *(_DWORD *)(v28 + v96) = *(_DWORD *)(v28 + v96 + 4);
                                      *(v97 - 21) = *(v97 - 20);
                                      *(v97 - 11) = *(v97 - 10);
                                      *(v97 - 1) = *v97;
                                      v96 += 4;
                                      ++v97;
                                    }
                                    while (v96 != 36);
                                    LODWORD(v40) = 9;
                                  }
                                  goto LABEL_119;
                                }
                                int v101 = v73;
                                EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                                int v73 = v101;
                                uint64_t v66 = *(void *)v108;
                                double v35 = 20.0;
                                double v32 = 0.5;
                                double v34 = 2.25;
                                double v33 = 0.75;
                                long long v31 = 0uLL;
                                uint64_t result = 300000;
                                int v83 = v104;
                              }
LABEL_121:
                              *int v83 = *a4;
                              a4[v66 + 764] = v73;
                              ++*((unsigned char *)a4 + 2812);
                              *((unsigned char *)a4 + v66 + 2960) = 0;
                              --*((unsigned char *)a4 + 2811);
                              v106[v66 + 62] = v73;
                              ++v107[1];
                              *((unsigned char *)v106 + v66 + 152) = 0;
                              --*v107;
                            }
                          }
                        }
LABEL_122:
                        ++v25;
                        v28 += 312;
                        v29 += 312;
                        v30 += 39;
                        if (v25 == 48) {
                          return result;
                        }
                        continue;
                      }
                    }
                    uint64_t v20 = 0;
                    while (*(unsigned __int8 *)(v14 + v20) != 255)
                    {
                      if (++v20 == 48)
                      {
                        uint64_t result = (uint64_t)EvCrt_v("NK_Reflection_Rejection_Ped: CODING ERROR");
                        goto LABEL_8;
                      }
                    }
                    *(unsigned char *)(v14 + v20) = result;
                    *uint64_t v18 = v20;
                    ++v4[483];
                    unsigned int v19 = *v18;
                  }
                  *((unsigned char *)v110 + v19) = v12;
                  if (*(unsigned __int8 *)(a2 + v12 + 604) >= 0x13u && *(int *)(a3 + 40 * v12 + 2088) >= 45)
                  {
                    double v21 = *(double *)&a4[2 * v12 + 6576] + *(double *)(a2 + 8 * v12 + 1616) * 0.190293673;
                    unsigned int v22 = v108[0];
                    if (v108[0])
                    {
                      if ((int)v108[0] < 1)
                      {
LABEL_48:
                        unsigned int v22 = v108[0];
                        v109[v108[0]] = v21;
                      }
                      else
                      {
                        uint64_t v23 = 0;
                        uint64_t v24 = v108[0];
                        while (v21 >= v109[v23])
                        {
                          if (v108[0] == ++v23) {
                            goto LABEL_48;
                          }
                        }
                        if ((int)v108[0] > (int)v23)
                        {
                          do
                          {
                            v109[v24] = v109[v24 - 1];
                            --v24;
                          }
                          while (v24 > v23);
                        }
                        v109[v23] = v21;
                        unsigned int v22 = v108[0];
                      }
                    }
                    else
                    {
                      v109[0] = *(double *)&a4[2 * v12 + 6576] + *(double *)(a2 + 8 * v12 + 1616) * 0.190293673;
                    }
                    v108[0] = v22 + 1;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)EvLog("NK_Reflection_Rejection_Ped: No SAPE data");
                }
              }
            }
            if (++v12 == 48) {
              goto LABEL_55;
            }
          }
        }
      }
    }
  }
  uint64_t v7 = (unsigned char *)(a3 + 11644);
LABEL_8:
  *uint64_t v7 = 0;
  return result;
}

uint64_t MeasSyncher_Init(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = (void *)(a1 + 128016);
  *(_DWORD *)(a1 + 80) = 75600;
  *(void *)a1 = a1 + 576;
  uint64_t v3 = a1 + 76176;
  *(void *)(a1 + 56) = a1 + 576;
  *(void *)(a1 + 64) = a1 + 76176;
  *(void *)(a1 + 72) = 0x15E000000D8;
  do
  {
    *(void *)(a1 + 8 * v1 + 8) = *(void *)(a1 + 56);
    *(unsigned char *)(a1 + v1++ + 84) = 0;
  }
  while (v1 != 6);
  uint64_t v4 = 0;
  *(void *)(a1 + 96) = v3;
  uint64_t v5 = a1 + 119376;
  *(void *)(a1 + 152) = v3;
  *(void *)(a1 + 160) = a1 + 119376;
  *(void *)(a1 + 168) = 0xC8000000D8;
  *(_DWORD *)(a1 + 176) = 43200;
  do
  {
    *(void *)(a1 + 8 * v4 + 104) = *(void *)(a1 + 152);
    *(unsigned char *)(a1 + v4++ + 180) = 0;
  }
  while (v4 != 6);
  uint64_t v6 = 0;
  *(void *)(a1 + 192) = v5;
  uint64_t v7 = a1 + 121536;
  *(void *)(a1 + 248) = v5;
  *(void *)(a1 + 256) = a1 + 121536;
  *(void *)(a1 + 264) = 0xA000000D8;
  *(_DWORD *)(a1 + 272) = 2160;
  do
  {
    *(void *)(a1 + 8 * v6 + 200) = *(void *)(a1 + 248);
    *(unsigned char *)(a1 + v6++ + 276) = 0;
  }
  while (v6 != 6);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 123696;
  *(void *)(a1 + 344) = v7;
  *(void *)(a1 + 352) = a1 + 123696;
  *(void *)(a1 + 288) = v7;
  *(void *)(a1 + 360) = 0xA000000D8;
  *(_DWORD *)(a1 + 368) = 2160;
  do
  {
    *(void *)(a1 + 8 * v8 + 296) = *(void *)(a1 + 344);
    *(unsigned char *)(a1 + v8++ + 372) = 0;
  }
  while (v8 != 6);
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 125856;
  *(void *)(a1 + 440) = v9;
  *(void *)(a1 + 448) = a1 + 125856;
  *(void *)(a1 + 384) = v9;
  *(void *)(a1 + 456) = 0xA000000D8;
  *(_DWORD *)(a1 + 464) = 2160;
  do
  {
    *(void *)(a1 + 8 * v10 + 392) = *(void *)(a1 + 440);
    *(unsigned char *)(a1 + v10++ + 468) = 0;
  }
  while (v10 != 6);
  uint64_t v12 = 0;
  *(void *)(a1 + 536) = v11;
  *(void *)(a1 + 544) = v2;
  *(void *)(a1 + 480) = v11;
  *(void *)(a1 + 552) = 0xA000000D8;
  *(_DWORD *)(a1 + 560) = 2160;
  do
  {
    *(void *)(a1 + 8 * v12 + 488) = *(void *)(a1 + 536);
    *(unsigned char *)(a1 + v12++ + 564) = 0;
  }
  while (v12 != 6);
  *uint64_t v2 = a1 + 96;
  *(void *)(a1 + 128024) = a1;
  *(void *)(a1 + 128032) = a1 + 192;
  *(void *)(a1 + 128040) = a1 + 288;
  *(void *)(a1 + 128048) = a1 + 480;
  *(void *)(a1 + 128056) = a1 + 384;
  *(_DWORD *)(a1 + 129360) = 0;
  *(_WORD *)(a1 + 129364) = 0;
  *(void *)(a1 + 129368) = 0;
  return 1;
}

BOOL MeasSyncher_applyNewRecord(int a1, _DWORD *a2, uint64_t a3)
{
  int v6 = a2[2];
  if (a1 >= 7)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f fifo type not in range", "MeasSyncher_applyNewRecord", 209, v7, v8);
    }
    g_FPE_AssertFlag = 1;
  }
  else
  {
    if (a1 == 1 && (v6 - 1) >= 4)
    {
      if (g_FPE_LogSeverity)
      {
        mach_continuous_time();
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for GNSS FIFO");
      }
LABEL_38:
      g_FPE_AssertFlag = 1;
      goto LABEL_39;
    }
    if (!a1 && v6)
    {
      if (g_FPE_LogSeverity)
      {
        mach_continuous_time();
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for SENSORS FIFO");
      }
      goto LABEL_38;
    }
  }
  switch(a1)
  {
    case 2:
      if ((v6 - 5) >= 4 && v6 != 12)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for CTX FIFO");
        }
        goto LABEL_38;
      }
      break;
    case 3:
      if ((v6 - 11) >= 2)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for DEM FIFO");
        }
        goto LABEL_38;
      }
      break;
    case 4:
      if (v6 != 10 && v6 != 12)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for MAP FIFO");
        }
        goto LABEL_38;
      }
      break;
    case 5:
      if (v6 != 9 && v6 != 12)
      {
        if (g_FPE_LogSeverity)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Incompatible measurement type for EXT_POSITION FIFO");
        }
        goto LABEL_38;
      }
      break;
    default:
      break;
  }
LABEL_39:
  uint64_t v12 = *(_DWORD **)(a3 + 8 * a1 + 128016);
  int v13 = Cyc_Record_Count_Free(v12, 1u);
  if (v13) {
    Cyc_Record_Write((uint64_t)v12, a2);
  }
  return v13 != 0;
}

uint64_t readNextSample(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (unsigned char *)(a1 + a2 + 129360);
  if (*v2) {
    return 1;
  }
  int v6 = *(void **)(a1 + 8 * a2 + 128016);
  uint64_t v3 = 1;
  if (Cyc_Record_IsEmpty(v6, 1u)) {
    return 0;
  }
  Cyc_Record_Read((uint64_t)v6, 1u, (void *)(a1 + 216 * a2 + 128064));
  *uint64_t v2 = 1;
  return v3;
}

BOOL MeasSyncher_getNextRecord(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = 0;
  int v5 = 0;
  int v6 = (double *)(a1 + 128064);
  do
    v5 |= readNextSample(a1, v4++) ^ 1;
  while (v4 != 6);
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    double v9 = *v6;
    uint64_t v10 = v6;
    do
    {
      double v11 = *v10;
      v10 += 27;
      double v12 = v11;
      if (v11 < v9)
      {
        double v9 = v12;
        unsigned int v8 = v7;
      }
      ++v7;
    }
    while (v7 != 6);
    long long v13 = *(_OWORD *)(a1 + 216 * v8 + 128080);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 216 * v8 + 128064);
    *((_OWORD *)a2 + 1) = v13;
    long long v14 = *(_OWORD *)(a1 + 216 * v8 + 128096);
    long long v15 = *(_OWORD *)(a1 + 216 * v8 + 128112);
    long long v16 = *(_OWORD *)(a1 + 216 * v8 + 128144);
    *((_OWORD *)a2 + 4) = *(_OWORD *)(a1 + 216 * v8 + 128128);
    *((_OWORD *)a2 + 5) = v16;
    *((_OWORD *)a2 + 2) = v14;
    *((_OWORD *)a2 + 3) = v15;
    long long v17 = *(_OWORD *)(a1 + 216 * v8 + 128160);
    long long v18 = *(_OWORD *)(a1 + 216 * v8 + 128176);
    long long v19 = *(_OWORD *)(a1 + 216 * v8 + 128208);
    *((_OWORD *)a2 + 8) = *(_OWORD *)(a1 + 216 * v8 + 128192);
    *((_OWORD *)a2 + 9) = v19;
    *((_OWORD *)a2 + 6) = v17;
    *((_OWORD *)a2 + 7) = v18;
    long long v20 = *(_OWORD *)(a1 + 216 * v8 + 128224);
    long long v21 = *(_OWORD *)(a1 + 216 * v8 + 128240);
    long long v22 = *(_OWORD *)(a1 + 216 * v8 + 128256);
    a2[26] = *(void *)(a1 + 216 * v8 + 128272);
    *((_OWORD *)a2 + 11) = v21;
    *((_OWORD *)a2 + 12) = v22;
    *((_OWORD *)a2 + 10) = v20;
    *(unsigned char *)(a1 + v8 + 129360) = 0;
    uint64_t v23 = *a2;
    if (*(double *)a2 < v6[163])
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v25 = *(double *)(g_TCU + 8);
        }
        else {
          double v25 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f measurement from the past in MeasSyncher: measToReadTime=%f, lastRecordTime=%f", "MeasSyncher_getNextRecord", 330, v24, v25, v9, v6[163]);
        uint64_t v23 = *a2;
      }
      g_FPE_AssertFlag = 1;
    }
    *((void *)v6 + 163) = v23;
  }
  return (v5 & 1) == 0;
}

uint64_t SV_Gen_Meas_Update_Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v7 = 0;
  v36[198] = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v8 = &__dst[v7];
    v8[32] = 0;
    *(_OWORD *)unsigned int v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
    v7 += 36;
  }
  while (v7 != 1728);
  uint64_t v9 = 1728;
  do
  {
    uint64_t v10 = &__dst[v9];
    *(void *)uint64_t v10 = 0;
    *((_WORD *)v10 + 4) = 0;
    *(void *)(v10 + 12) = 0;
    *((_WORD *)v10 + 10) = 0;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = 0;
    v9 += 56;
    *((_WORD *)v10 + 20) = 0;
  }
  while (v10 + 56 != (char *)&v15);
  char v16 = 0;
  int v15 = 0;
  uint64_t v11 = 4424;
  do
  {
    double v12 = &__dst[v11];
    *(_DWORD *)double v12 = 0;
    void v12[4] = 0;
    *(_OWORD *)(v12 + 8) = 0uLL;
    *(_OWORD *)(v12 + 24) = 0uLL;
    *(void *)(v12 + 37) = 0;
    v11 += 48;
  }
  while (v12 + 48 != (char *)&v17);
  int v17 = 0;
  char v18 = 0;
  __int16 v21 = 0;
  long long v19 = 0u;
  char v20 = 0;
  long long v22 = 0u;
  char v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  bzero(v36, 0x630uLL);
  GNSS_Validate_p_list(v6, "SV_Gen_Meas_Update_Wrapper: Entry");
  *(void *)(v6 + 224) = __dst;
  SV_Gen_Meas(*(int **)(v6 + 168), __dst, *(void *)(v6 + 280), *(void *)(v6 + 80), *(void *)(v6 + 16), *(void *)(v6 + 72), *(void *)(v6 + 40), *(void *)(v6 + 56), *(void *)(v6 + 48), *(void *)(v6 + 104), *(void *)(v6 + 64));
  *(void *)(v6 + 224) = 0;
  return GNSS_Validate_p_list(v6, "SV_Gen_Meas_Update_Wrapper:  Exit");
}

size_t Gnm30_00InitConfig(void)
{
  Gnm33_10InitTraceCfg();
  dword_26AE54190 = 0;
  *(_OWORD *)&byte_26AE54068[200] = 0u;
  *(_OWORD *)&byte_26AE54068[184] = 0u;
  *(_OWORD *)&byte_26AE54068[168] = 0u;
  *(_OWORD *)&byte_26AE54068[152] = 0u;
  *(_OWORD *)&byte_26AE54068[136] = 0u;
  *(_OWORD *)&byte_26AE54068[120] = 0u;
  *(_OWORD *)&byte_26AE54068[104] = 0u;
  *(_OWORD *)&byte_26AE54068[88] = 0u;
  *(_OWORD *)&byte_26AE54068[72] = 0u;
  *(_OWORD *)&byte_26AE54068[56] = 0u;
  *(_OWORD *)&byte_26AE54068[40] = 0u;
  *(_OWORD *)&byte_26AE54068[24] = 0u;
  *(_OWORD *)&byte_26AE54068[8] = 0u;
  *(_OWORD *)&dword_26AE54060 = 0u;
  *(_OWORD *)&dword_26AE54050 = 0u;
  unk_26AE54040 = 0u;
  xmmword_26AE54170 = 0u;
  *(_OWORD *)&qword_26AE54180 = 0u;
  unk_26AE54150 = 0u;
  *(_OWORD *)((char *)&qword_26AE5415E + 2) = 0u;
  xmmword_26AE54140 = 0u;
  g_PltfmConfig = 0x332E352E322E76;
  *(void *)&dword_26AE54044 = 0x50004000000727;
  dword_26AE54060 = 131073796;
  WORD2(qword_26AE54048) = 64;
  LODWORD(qword_26AE54054) = 36700192;
  WORD2(qword_26AE54054) = 32;
  word_26AE5415C = 140;
  Gnm32_00PrintPltfmCfg("INITIALIZED DEFAULT VALUE");
  LOBYTE(qword_26AE53A30) = 2;
  dword_26AE53A2C = 33686018;
  Gnm34_00PrintTaTraceCfg("INITIALIZED DEFAULT VALUE");

  return Gnm31_10InitUserCfg();
}

uint64_t Gnm30_10GetConfig(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_GET_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm30_10GetConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm30_10GetConfig", 517);
    int v8 = 0;
LABEL_18:
    LbsOsaTrace_WriteLog(0xBu, __str, v7, v8, 1);
    return 0;
  }
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, int *))(a1 + 24);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_17;
  }
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 == 3)
  {
    Gnm33_16GetTraceCfg(*(unsigned int *)(a1 + 12), (uint64_t (*)(uint64_t, uint64_t, unsigned char *))v4);
    return 0;
  }
  if (v5 == 2)
  {
    Gnm32_14GetPltfmCfg(*(unsigned int *)(a1 + 12), v4);
    return 0;
  }
  if (v5 != 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConfigType,%hhu\n", v11);
LABEL_17:
    size_t v7 = v9;
    int v8 = 2;
    goto LABEL_18;
  }
  Gnm31_14GetUserCfg(*(unsigned int *)(a1 + 12), v4);
  return 0;
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[](void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__double cosval = v2;
  result.__double sinval = v1;
  return result;
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x270ED8610](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

void cblas_dgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const double __alpha, const double *__A, const int __lda, const double *__B, const int __ldb, const double __beta, double *__C, const int __ldc)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

int dgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__s, __CLPK_doublereal *__u, __CLPK_integer *__ldu, __CLPK_doublereal *__vt, __CLPK_integer *__ldvt, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x270EDE590](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x270ED9518](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x270ED9580](source);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

void free(void *a1)
{
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270EDA038](a1, a2);
  result.reuint64_t m = v3;
  result.quot = v2;
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

void longjmp(jmp_buf a1, int a2)
{
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x270EDA158]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x270EDA4B8](__s, __smax, *(void *)&__c, __n);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x270EDADF8](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x270EDAE10](a1);
}

int pthread_attr_setstacksize(pthread_attr_t *a1, size_t a2)
{
  return MEMORY[0x270EDAE40](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x270EDAEE8](a1, a2, a3);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x270EDAF10](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x270EDB040](a1, *(void *)&a2, a3);
}

int sched_get_priority_max(int a1)
{
  return MEMORY[0x270EDB310](*(void *)&a1);
}

int sched_get_priority_min(int a1)
{
  return MEMORY[0x270EDB318](*(void *)&a1);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x270EDB3F8](a1);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}