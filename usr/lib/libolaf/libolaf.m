size_t gnssOsa_readNv(int a1, void *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  size_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  void *__p;
  unsigned char *v21;
  char __str[1040];
  uint64_t v23;

  v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_readNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 5, 1);
  }
  if (a2 && gp_NvStorage)
  {
    (*(void (**)(void **__return_ptr))(*(void *)gp_NvStorage + 64))(&__p);
    if (v21 - (unsigned char *)__p >= a3) {
      v8 = a3;
    }
    else {
      v8 = v21 - (unsigned char *)__p;
    }
    memcpy(a2, __p, v8);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvID,%d,BytesRead,%zu,BytesReq,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "gnssOsa_readNv", a1, v21 - (unsigned char *)__p, a3);
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 5, 1);
    }
    if (__p == v21 && LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No NV data,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 87, "gnssOsa_readNv", 769, a1);
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 68, "gnssOsa_readNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v14, 5, 1);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 69, "gnssOsa_readNv", 770);
      LbsOsaTrace_WriteLog(0xEu, __str, v16, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = mach_continuous_time();
      v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 68, "gnssOsa_readNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v18, 5, 1);
    }
    return 0;
  }
  return v8;
}

void sub_22B844F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_storeBufferToNv(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_storeBufferToNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 5, 1);
  }
  if (a2 && gp_NvStorage)
  {
    *(void *)__str = 0;
    v15 = 0;
    uint64_t v16 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(__str, a2, (uint64_t)a2 + a3, a3);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)gp_NvStorage + 32))(gp_NvStorage, a1, __str);
    if (*(void *)__str)
    {
      v15 = *(void **)__str;
      operator delete(*(void **)__str);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: invalid Argument\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_storeBufferToNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 68, "gnssOsa_storeBufferToNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 5, 1);
    }
    return 0;
  }
  return v8;
}

void sub_22B845240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_getNvSize(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 68, "gnssOsa_getNvSize");
    LbsOsaTrace_WriteLog(0xEu, __str, v4, 5, 1);
  }
  if (a2)
  {
    if (gp_NvStorage)
    {
      (*(void (**)(void **__return_ptr))(*(void *)gp_NvStorage + 64))(&__p);
      *a2 = v17 - (unsigned char *)__p;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvSize,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_getNvSize", *a2);
        LbsOsaTrace_WriteLog(0xEu, __str, v6, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "gnssOsa_getNvSize");
        LbsOsaTrace_WriteLog(0xEu, __str, v8, 5, 1);
      }
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      return 1;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NvStorage\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 69, "gnssOsa_getNvSize", 770);
      LbsOsaTrace_WriteLog(0xEu, __str, v13, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
    if (result)
    {
LABEL_19:
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 68, "gnssOsa_getNvSize");
      LbsOsaTrace_WriteLog(0xEu, __str, v15, 5, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NvSize\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 69, "gnssOsa_getNvSize", 513);
      LbsOsaTrace_WriteLog(0xEu, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
    if (result) {
      goto LABEL_19;
    }
  }
  return result;
}

void sub_22B8456E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_clearNV(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "gnssOsa_clearNV", a1);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 4, 1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)gp_NvStorage + 80))(gp_NvStorage, a1);
}

size_t gnssOsa_flushNv(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_flushNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v1, 5, 1);
  }
  (*(void (**)(uint64_t))(*(void *)gp_NvStorage + 56))(gp_NvStorage);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 68, "gnssOsa_flushNv");
    return LbsOsaTrace_WriteLog(0xEu, __str, v4, 5, 1);
  }
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    size_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      size_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22B845A24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  size_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2648B1360, MEMORY[0x263F8C060]);
}

void sub_22B845B40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  size_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

unint64_t NK_Set_Environ_Severity(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 43))
  {
    *(_DWORD *)(a2 + 60) = 1;
  }
  else
  {
    uint64_t v7 = (unsigned char *)result;
    size_t v8 = (unsigned char *)(a4 + 25068);
    uint64_t v9 = (_OWORD *)(a3 + 6752);
    size_t result = (unint64_t)memmove((void *)(a3 + 6800), (const void *)(a3 + 6752), 0x150uLL);
    uint64_t v10 = *(void *)(a3 + 7152);
    *(_OWORD *)(a3 + 7140) = *(_OWORD *)(a3 + 7136);
    int v11 = *(_DWORD *)(a3 + 7160);
    *(void *)(a3 + 7156) = v10;
    *(_DWORD *)(a3 + 7164) = v11;
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a3 + 7136) = v12;
    *(_OWORD *)(a3 + 6784) = 0u;
    *(_OWORD *)(a3 + 6768) = 0u;
    *(_OWORD *)(a3 + 6752) = 0u;
    unsigned int v13 = 7;
    int v14 = 8750;
    do
    {
      int v15 = *(_DWORD *)(a3 + 4 * v13 + 7136);
      v14 -= 1000;
      BOOL v16 = v13-- != 0;
    }
    while (v16 && !v15);
    unsigned int v17 = v15 + v14;
    if (v12 <= v17 && v12 + 750 >= v17 - 750)
    {
      int v18 = v13 + 1;
    }
    else
    {
      int v18 = 0;
      v9[24] = 0u;
      v9[25] = 0u;
      v9[22] = 0u;
      v9[23] = 0u;
      v9[20] = 0u;
      v9[21] = 0u;
      v9[18] = 0u;
      v9[19] = 0u;
      v9[16] = 0u;
      v9[17] = 0u;
      v9[14] = 0u;
      v9[15] = 0u;
      v9[12] = 0u;
      v9[13] = 0u;
      v9[10] = 0u;
      v9[11] = 0u;
      v9[8] = 0u;
      v9[9] = 0u;
      v9[6] = 0u;
      v9[7] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      *(_DWORD *)(a3 + 7136) = *(_DWORD *)(a4 + 4);
    }
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = a3 + 48 * v18 + 6752;
    do
    {
      if (*(int *)&v7[4 * v19 + 412] >= 10 && *(unsigned __int16 *)&v7[2 * v19 + 844] >= 0x65u)
      {
        *((unsigned char *)v9 + v19) = v7[v19 + 604];
        int v25 = v7[v19 + 604];
        v21 += v25;
        ++v20;
        if (v18 < 1)
        {
          int v33 = v7[v19 + 604];
        }
        else
        {
          v26 = (unsigned __int8 *)v24;
          uint64_t v27 = v18 + 1;
          unsigned __int8 v28 = v7[v19 + 604];
          do
          {
            unsigned int v30 = *v26;
            v26 -= 48;
            unsigned int v29 = v30;
            unsigned __int8 v31 = v28;
            if (v30 > v28) {
              unsigned __int8 v31 = v29;
            }
            char v32 = v25;
            if (v29 < v25) {
              char v32 = v29;
            }
            if (v29)
            {
              v21 += v29;
              ++v20;
              unsigned __int8 v28 = v31;
              LOBYTE(v25) = v32;
            }
            --v27;
          }
          while (v27 > 1);
          int v33 = v28;
          int v25 = v25;
        }
        int v34 = v33 - v25;
        size_t result = (v34 - 2);
        if ((*(_WORD *)&v7[2 * v19 + 316] & 0x300) == 0) {
          v34 -= 2;
        }
        if (v34 > v22) {
          int v22 = v34;
        }
        if (v34 > v23)
        {
          int v22 = v23;
          int v23 = v34;
        }
      }
      ++v19;
      ++v24;
    }
    while (v19 != 48);
    if (v20 < 8)
    {
      int v35 = 0;
    }
    else if (v22 + v23 > 8 || v21 / v20 <= *(unsigned __int8 *)(a3 + 3))
    {
      int v35 = 7;
    }
    else
    {
      int v35 = 1;
    }
    char v36 = *(unsigned char *)(p_NA + 319);
    if (v36)
    {
      int v37 = *(_DWORD *)(p_NA + 19388);
      switch(v37)
      {
        case 0:
          goto LABEL_43;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          break;
        default:
          int v37 = 0;
          break;
      }
      *(_DWORD *)(a2 + 60) = v37;
      if (!v8[8])
      {
        *size_t v8 = v36;
        v8[8] = v36;
      }
    }
    else
    {
LABEL_43:
      if (v20 >= 8) {
        *(_DWORD *)(a2 + 60) = v35;
      }
    }
  }
  return result;
}

void PERAppendData(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1088);
  uint64_t v5 = *(void (**)(uint64_t, unint64_t))(a1 + 728);
  if (v5)
  {
    v5(a1, a2);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 880))(a1, a1 + 1104);
    *(void *)(a1 + 1088) = v6;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 1088);
  }
  if (v6 - v4 < a2)
  {
    EPErrorHandler(a1, 22);
  }
}

uint64_t PERPutBit(uint64_t result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned char **)(result + 1096);
  if (v4 == *(unsigned char **)(result + 1080))
  {
    uint64_t v5 = *(void *)(result + 1072);
    uint64_t v6 = *(void *)(result + 1088) - v5;
    uint64_t v7 = &v4[-v5];
    size_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
    *(void *)(v3 + 1072) = result;
    uint64_t v4 = &v7[result];
    *(void *)(v3 + 1080) = &v7[result + 1];
    *(void *)(v3 + 1088) = result + v6;
    *(void *)(v3 + 1096) = &v7[result];
  }
  int v8 = *(unsigned __int8 *)(v3 + 1105);
  if (v8 == 7)
  {
    *uint64_t v4 = a2 << 7;
    char v9 = *(unsigned char *)(v3 + 1105);
  }
  else
  {
    *v4 |= a2 << v8;
    char v9 = *(unsigned char *)(v3 + 1105);
    if (!v9)
    {
      ++*(void *)(v3 + 1096);
      char v10 = 7;
      goto LABEL_7;
    }
  }
  char v10 = v9 - 1;
LABEL_7:
  *(unsigned char *)(v3 + 1105) = v10;
  return result;
}

uint64_t PERGetBit(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 1096);
  if (v2 == *(unsigned __int8 **)(a1 + 1088))
  {
    PERAppendData(a1, 1uLL);
    uint64_t v2 = *(unsigned __int8 **)(a1 + 1096);
  }
  unsigned int v3 = *v2;
  char v4 = *(unsigned char *)(a1 + 1105);
  if (v4)
  {
    char v5 = v4 - 1;
  }
  else
  {
    *(void *)(a1 + 1096) = v2 + 1;
    char v5 = 7;
  }
  *(unsigned char *)(a1 + 1105) = v5;
  return (v3 >> v4) & 1;
}

size_t PERPutBits(size_t result, unint64_t a2, unsigned int a3)
{
  if (a3)
  {
    size_t v4 = result;
    unsigned __int8 v5 = a3 - *(unsigned char *)(result + 1105) + 7;
    int v6 = v5 & 7;
    if (a3 >= 0x21) {
      size_t result = CUCFErrorHandler(result, 15);
    }
    uint64_t v7 = v5 >> 3;
    int v8 = *(unsigned char **)(v4 + 1096);
    if ((v5 & 7) != 0) {
      unint64_t v9 = (unint64_t)&v8[v7 + 1];
    }
    else {
      unint64_t v9 = (unint64_t)&v8[v7];
    }
    unint64_t v10 = *(void *)(v4 + 1080);
    if (v9 > v10)
    {
      int v11 = &v8[(v6 != 0) + v7 - v10];
      uint64_t v12 = *(void *)(v4 + 1072);
      uint64_t v13 = *(void *)(v4 + 1088) - v12;
      int v14 = &v8[-v12];
      uint64_t v15 = v10 - v12;
      size_t result = (*(uint64_t (**)(size_t, unsigned char *))(v4 + 856))(v4, v11);
      *(void *)(v4 + 1072) = result;
      *(void *)(v4 + 1080) = &v11[v15 + result];
      *(void *)(v4 + 1088) = result + v13;
      int v8 = &v14[result];
      *(void *)(v4 + 1096) = &v14[result];
    }
    if (*(unsigned char *)(v4 + 1105) == 7) {
      *int v8 = 0;
    }
    if (v5 >= 8u)
    {
      int v18 = (unsigned char *)(*(void *)(v4 + 1096) + v7);
      *(void *)(v4 + 1096) = v18;
      if ((v5 & 7) != 0)
      {
        *int v18 = a2 << (8 - v6);
        a2 >>= v6;
        int v18 = *(unsigned char **)(v4 + 1096);
      }
      unsigned int v17 = v18 - 1;
      if (v5 >= 0x10u)
      {
        do
        {
          *v17-- = a2;
          LODWORD(v7) = v7 - 1;
          a2 >>= 8;
        }
        while (v7 > 1u);
      }
      unsigned int v16 = (0xFFu >> (7 - *(unsigned char *)(v4 + 1105))) & a2;
    }
    else
    {
      unsigned int v16 = (0xFFu >> (7 - *(unsigned char *)(v4 + 1105))) & (a2 << (8 - v6));
      unsigned int v17 = *(unsigned char **)(v4 + 1096);
    }
    *v17 |= v16;
    *(unsigned char *)(v4 + 1105) = v6 ^ 7;
  }
  return result;
}

unint64_t PERGetBits(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2;
  if (a2 >= 0x21) {
    CUCFErrorHandler(a1, 15);
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 1105);
  unint64_t v5 = v4 - *(unsigned __int8 *)(a1 + 1104) + 8 * (*(void *)(a1 + 1088) - *(void *)(a1 + 1096));
  BOOL v6 = v2 >= v5;
  unint64_t v7 = v2 - v5;
  if (v7 != 0 && v6)
  {
    if ((v7 & 7) != 0) {
      unint64_t v8 = (v7 >> 3) + 1;
    }
    else {
      unint64_t v8 = v7 >> 3;
    }
    PERAppendData(a1, v8);
    LODWORD(v4) = *(unsigned __int8 *)(a1 + 1105);
  }
  if (v4 == 7)
  {
    unint64_t result = 0;
LABEL_15:
    if (v2 >= 8u)
    {
      uint64_t v12 = *(void *)(a1 + 1096) + 1;
      do
      {
        unint64_t result = *(unsigned __int8 *)(v12 - 1) | (result << 8);
        LOBYTE(v2) = v2 - 8;
        *(void *)(a1 + 1096) = v12++;
      }
      while (v2 > 7u);
    }
    if ((_BYTE)v2)
    {
      *(unsigned char *)(a1 + 1105) = v2 ^ 7;
      return (result << v2) | (**(unsigned __int8 **)(a1 + 1096) >> (8 - v2));
    }
    char v13 = 7;
    goto LABEL_24;
  }
  unint64_t v10 = *(unsigned __int8 **)(a1 + 1096);
  unint64_t v11 = (*v10 << (7 - v4));
  if ((int)v4 + 1 < v2)
  {
    unint64_t result = v11 >> (7 - v4);
    LOBYTE(v2) = ~(_BYTE)v4 + v2;
    *(void *)(a1 + 1096) = v10 + 1;
    goto LABEL_15;
  }
  unint64_t result = v11 >> (8 - v2);
  if (v4 + 1 == v2)
  {
    *(unsigned char *)(a1 + 1105) = 7;
    *(void *)(a1 + 1096) = v10 + 1;
    return result;
  }
  char v13 = v4 - v2;
LABEL_24:
  *(unsigned char *)(a1 + 1105) = v13;
  return result;
}

uint64_t PERPutByte(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  int v4 = *(unsigned __int8 *)(result + 1105);
  unint64_t v5 = *(unsigned char **)(result + 1096);
  if (v4 == 7)
  {
    if (v5 == *(unsigned char **)(result + 1080))
    {
      uint64_t v6 = *(void *)(result + 1072);
      uint64_t v7 = *(void *)(result + 1088) - v6;
      unint64_t v8 = &v5[-v6];
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
      *(void *)(v3 + 1072) = result;
      unint64_t v5 = &v8[result];
      *(void *)(v3 + 1080) = &v8[result + 1];
      *(void *)(v3 + 1088) = result + v7;
      *(void *)(v3 + 1096) = &v8[result];
    }
    *unint64_t v5 = a2;
    ++*(void *)(v3 + 1096);
  }
  else
  {
    if (v5 + 1 == *(unsigned char **)(result + 1080))
    {
      uint64_t v9 = *(void *)(result + 1072);
      uint64_t v10 = *(void *)(result + 1088) - v9;
      unint64_t v11 = &v5[-v9];
      uint64_t v12 = &v5[-v9 + 1];
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
      *(void *)(v3 + 1072) = result;
      *(void *)(v3 + 1080) = &v12[result + 1];
      *(void *)(v3 + 1088) = result + v10;
      unint64_t v5 = &v11[result];
      *(void *)(v3 + 1096) = &v11[result];
      LOBYTE(v4) = *(unsigned char *)(v3 + 1105);
    }
    *v5 |= a2 >> (7 - v4);
    uint64_t v13 = *(void *)(v3 + 1096);
    *(void *)(v3 + 1096) = v13 + 1;
    *(unsigned char *)(v13 + 1) = a2 << (*(unsigned char *)(v3 + 1105) + 1);
  }
  return result;
}

uint64_t PERGetByte(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1105);
  if (v2 == 7)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 1096);
    if (v3 == *(unsigned char **)(a1 + 1088))
    {
      PERAppendData(a1, 1uLL);
      uint64_t v3 = *(unsigned char **)(a1 + 1096);
    }
    LOBYTE(v4) = *v3;
    *(void *)(a1 + 1096) = v3 + 1;
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 **)(a1 + 1096);
    uint64_t v6 = *(void *)(a1 + 1088) - (void)v5;
    if (v6 <= 1)
    {
      PERAppendData(a1, 2 - v6);
      unint64_t v5 = *(unsigned __int8 **)(a1 + 1096);
      LOBYTE(v2) = *(unsigned char *)(a1 + 1105);
    }
    int v7 = *v5 << (7 - v2);
    *(void *)(a1 + 1096) = v5 + 1;
    return ((v5[1] >> (v2 + 1)) | v7);
  }
  return v4;
}

uint64_t PERSkipBytes(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 1105);
  unint64_t v5 = *(unsigned char **)(a1 + 1096);
  uint64_t v6 = &v5[a2];
  unint64_t v7 = *(void *)(a1 + 1080);
  if (v4 == 7)
  {
    if ((unint64_t)v6 > v7)
    {
      unint64_t v8 = &v5[a2 - v7];
      uint64_t v9 = *(void *)(a1 + 1072);
      uint64_t v10 = *(void *)(a1 + 1088) - v9;
      unint64_t v11 = &v5[-v9];
      uint64_t v12 = v7 - v9;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, unsigned char *))(a1 + 856))(a1, v8);
      *(void *)(a1 + 1072) = v13;
      *(void *)(a1 + 1080) = &v8[v12 + v13];
      *(void *)(a1 + 1088) = v13 + v10;
      unint64_t v5 = &v11[v13];
      *(void *)(a1 + 1096) = v5;
    }
  }
  else
  {
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v14 = (uint64_t)&v5[a2 - v7 + 1];
      uint64_t v15 = *(void *)(a1 + 1072);
      uint64_t v16 = *(void *)(a1 + 1088) - v15;
      unsigned int v17 = &v5[-v15];
      uint64_t v18 = v7 - v15;
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 856))(a1, v14);
      *(void *)(a1 + 1072) = v19;
      *(void *)(a1 + 1080) = v19 + v18 + v14;
      *(void *)(a1 + 1088) = v19 + v16;
      unint64_t v5 = &v17[v19];
      *(void *)(a1 + 1096) = v5;
      LOBYTE(v4) = *(unsigned char *)(a1 + 1105);
    }
    *v5 &= 510 << v4;
    unint64_t v5 = (unsigned char *)(*(void *)(a1 + 1096) + 1);
  }
  uint64_t result = memset_s(v5, a2, 0, a2);
  *(void *)(a1 + 1096) += a2;
  return result;
}

void PERGetSkipBytes(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 1096);
    unint64_t v5 = v4 + a2;
    if (*(unsigned char *)(a1 + 1105) == 7)
    {
      unint64_t v6 = *(void *)(a1 + 1088);
      if (v5 > v6)
      {
        unint64_t v7 = v4 + a2 - v6;
LABEL_7:
        PERAppendData(a1, v7);
        uint64_t v4 = *(void *)(a1 + 1096);
      }
    }
    else
    {
      unint64_t v8 = v5 + 1;
      unint64_t v9 = *(void *)(a1 + 1088);
      if (v8 > v9)
      {
        unint64_t v7 = a2 + v4 - v9 + 1;
        goto LABEL_7;
      }
    }
    *(void *)(a1 + 1096) = v4 + a2;
  }
}

uint64_t PERPutSeg(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  if (a3)
  {
    size_t v3 = a3;
    unint64_t v5 = (void *)result;
    unint64_t v6 = *(char **)(result + 1096);
    unint64_t v7 = &v6[v3];
    if (*(unsigned char *)(result + 1105) == 7)
    {
      unint64_t v8 = *(void *)(result + 1080);
      if ((unint64_t)v7 > v8)
      {
        unint64_t v9 = &v6[v3 - v8];
        uint64_t v10 = *(void *)(result + 1072);
        uint64_t v11 = *(void *)(result + 1088) - v10;
        uint64_t v12 = &v6[-v10];
        uint64_t v13 = v8 - v10;
        uint64_t v14 = (*(uint64_t (**)(uint64_t, char *))(result + 856))(result, v9);
        v5[134] = v14;
        v5[135] = &v9[v13 + v14];
        v5[136] = v14 + v11;
        unint64_t v6 = &v12[v14];
        v5[137] = &v12[v14];
      }
      uint64_t result = (uint64_t)memcpy_s("posp_memcpy", 29, v6, v3, a2, v3);
      v5[137] += v3;
    }
    else
    {
      unint64_t v15 = *(void *)(result + 1080);
      if ((unint64_t)(v7 + 1) > v15)
      {
        uint64_t v16 = (uint64_t)&v6[v3 - v15 + 1];
        uint64_t v17 = *(void *)(result + 1072);
        uint64_t v18 = *(void *)(result + 1088) - v17;
        uint64_t v19 = &v6[-v17];
        uint64_t v20 = v15 - v17;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, v16);
        v5[134] = result;
        v5[135] = result + v20 + v16;
        v5[136] = result + v18;
        v5[137] = &v19[result];
      }
      do
      {
        *(unsigned char *)v5[137] |= *a2 >> (7 - *((unsigned char *)v5 + 1105));
        uint64_t v21 = v5[137];
        v5[137] = v21 + 1;
        int v22 = *a2++;
        *(unsigned char *)(v21 + 1) = v22 << (*((unsigned char *)v5 + 1105) + 1);
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

void *PEROctetsFragmentation(uint64_t a1, unint64_t a2)
{
  size_t v2 = a2;
  if (a2 >= 0x4000)
  {
    unsigned int v7 = (a2 - 0x10000) >> 16;
    unsigned int v8 = v7 + 1;
    if (a2 >> 16) {
      unsigned int v9 = v7 + 1;
    }
    else {
      unsigned int v9 = 0;
    }
    unint64_t v10 = (unsigned __int16)a2 >> 14;
    if ((unsigned __int16)a2 < 0x4000uLL) {
      unsigned int v11 = v9;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    BOOL v12 = (unsigned __int16)a2 < 0x4000uLL;
    if ((unsigned __int16)a2 >= 0x4000uLL) {
      unsigned int v13 = 0x4000;
    }
    else {
      unsigned int v13 = 0;
    }
    if ((unsigned __int16)a2 >= 0x8000uLL)
    {
      unsigned int v11 = v9 + 1;
      BOOL v12 = 0;
      unsigned int v13 = 0x8000;
    }
    if (v10 > 2) {
      unsigned int v14 = v9 + 1;
    }
    else {
      unsigned int v14 = v11;
    }
    BOOL v15 = v10 <= 2 && v12;
    if (v10 <= 2) {
      size_t v16 = v13;
    }
    else {
      size_t v16 = 49152;
    }
    size_t v17 = (unsigned __int16)a2 - (unint64_t)v16;
    if (v17 < 0x80)
    {
      PERSkipBytes(a1, (unsigned __int16)v14);
      uint64_t v19 = (char *)(*(void *)(a1 + 1096) - v17);
      uint64_t v18 = &v19[-(unsigned __int16)v14];
      uint64_t result = memmove(v19, v18, v17);
    }
    else
    {
      PERSkipBytes(a1, (unsigned __int16)v14 + 1);
      uint64_t v18 = (char *)(*(void *)(a1 + 1096) + ~(v17 + (unsigned __int16)v14));
      uint64_t result = memmove(&v18[(unsigned __int16)v14 + 1], v18, v17);
      v18[(unsigned __int16)v14] = v2;
      LODWORD(v2) = (v17 >> 8) | 0xFFFFFF80;
    }
    v18[(unsigned __int16)v14 - 1] = v2;
    if (!v15)
    {
      --v14;
      v18 -= v16;
      if ((_WORD)v14)
      {
        uint64_t v20 = (unsigned __int16)v14;
        uint64_t result = memmove(&v18[(unsigned __int16)v14], v18, v16);
      }
      else
      {
        uint64_t v20 = 0;
      }
      v18[v20 - 1] = (v16 >> 14) | 0xC0;
    }
    if ((_WORD)v9)
    {
      if ((unsigned __int16)v9 == 1)
      {
        uint64_t v21 = v18;
      }
      else
      {
        unsigned int v22 = v14 - 1;
        do
        {
          uint64_t v21 = v18 - 0x10000;
          int v23 = &v18[(unsigned __int16)v22];
          uint64_t result = memmove(v23 - 0x10000, v21, 0x10000uLL);
          *(v23 - 65537) = -60;
          --v8;
          --v22;
          uint64_t v18 = v21;
        }
        while ((unsigned __int16)v8 > 1u);
      }
      *(v21 - 65537) = -60;
    }
  }
  else
  {
    PERSkipBytes(a1, 1);
    uint64_t v4 = *(void *)(a1 + 1096);
    unint64_t v5 = (unsigned char *)(v4 + ~v2);
    uint64_t result = memmove((void *)(v4 - v2), v5, v2);
    *unint64_t v5 = v2;
    *(v5 - 1) = BYTE1(v2) | 0x80;
  }
  return result;
}

uint64_t PEROctetsDefragmentation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1096);
  switch(PERGetByte(a1))
  {
    case 0xC1u:
      size_t v3 = (char *)(*(void *)(a1 + 1096) + 0x4000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x4000;
      break;
    case 0xC2u:
      size_t v3 = (char *)(*(void *)(a1 + 1096) + 0x8000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x8000;
      break;
    case 0xC3u:
      size_t v3 = (char *)(*(void *)(a1 + 1096) + 49152);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 49152;
      break;
    case 0xC4u:
      size_t v3 = (char *)(*(void *)(a1 + 1096) + 0x10000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x10000;
      break;
    default:
      EPErrorHandler(a1, 26);
      uint64_t v4 = 0;
      size_t v3 = *(char **)(a1 + 1096);
      break;
  }
  unint64_t v5 = *(void *)(a1 + 1088);
  if ((unint64_t)v3 >= v5)
  {
    PERAppendData(a1, (unint64_t)&v3[-v5]);
    size_t v3 = *(char **)(a1 + 1096);
  }
  for (unsigned int i = PERGetByte(a1); i == 196; v4 += 0x10000)
  {
    unsigned int v7 = *(const void **)(a1 + 1096);
    uint64_t v8 = *(void *)(a1 + 1088) - (void)v7;
    if (v8 < 0x10000)
    {
      PERAppendData(a1, 0x10000 - v8);
      unsigned int v7 = *(const void **)(a1 + 1096);
    }
    memmove(v3, v7, 0x10000uLL);
    v3 += 0x10000;
    *(void *)(a1 + 1096) += 0x10000;
    unsigned int i = PERGetByte(a1);
  }
  char v9 = i;
  if (i >= 0xC1)
  {
    size_t v10 = (unint64_t)(i & 3) << 14;
    v4 += v10;
    unsigned int v11 = *(const void **)(a1 + 1096);
    uint64_t v12 = *(void *)(a1 + 1088) - (void)v11;
    BOOL v13 = __OFSUB__(v10, v12);
    int64_t v14 = v10 - v12;
    if (!((v14 < 0) ^ v13 | (v14 == 0)))
    {
      PERAppendData(a1, v14);
      unsigned int v11 = *(const void **)(a1 + 1096);
    }
    memmove(v3, v11, v10);
    v3 += v10;
    *(void *)(a1 + 1096) += v10;
    char v9 = PERGetByte(a1);
  }
  if ((v9 & 0xC0) == 0x80)
  {
    unint64_t v15 = PERGetByte(a1) & 0xFFFF80FF | ((v9 & 0x7F) << 8);
    v4 += v15;
    size_t v16 = *(const void **)(a1 + 1096);
    unint64_t v17 = *(void *)(a1 + 1088) - (void)v16;
    BOOL v18 = v15 >= v17;
    unint64_t v19 = v15 - v17;
    if (v19 != 0 && v18)
    {
      PERAppendData(a1, v19);
      size_t v16 = *(const void **)(a1 + 1096);
    }
    uint64_t v20 = v3;
    size_t v21 = v15;
  }
  else
  {
    if (v9 < 0)
    {
      EPErrorHandler(a1, 26);
      goto LABEL_27;
    }
    size_t v22 = v9 & 0x7F;
    v4 += v22;
    size_t v16 = *(const void **)(a1 + 1096);
    uint64_t v23 = *(void *)(a1 + 1088) - (void)v16;
    BOOL v13 = __OFSUB__(v22, v23);
    int64_t v24 = v22 - v23;
    if (!((v24 < 0) ^ v13 | (v24 == 0)))
    {
      PERAppendData(a1, v24);
      size_t v16 = *(const void **)(a1 + 1096);
    }
    uint64_t v20 = v3;
    size_t v21 = v22;
  }
  memmove(v20, v16, v21);
LABEL_27:
  *(void *)(a1 + 1096) = v2 + 1;
  return v4;
}

void *PEROctetsFragmentationWithOffset(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 < 0x4000)
  {
    PERSkipBytes(a1, 1);
    uint64_t v4 = *(void *)(a1 + 1096);
    unint64_t v5 = (unsigned char *)(v4 + ~v2);
    unint64_t v6 = (char *)(v4 - v2);
    uint64_t result = memmove((void *)(v4 - v2), v5, v2 + 1);
    uint64_t v8 = (unsigned char *)(a1 + 1105);
    char v9 = *(v5 - 1) & (510 << *(unsigned char *)(a1 + 1105));
    *(v5 - 1) = v9;
    *(v5 - 1) = v9 | ((v2 | 0x8000) >> (15 - *(unsigned char *)(a1 + 1105)));
    *unint64_t v5 = (v2 | 0x8000) >> (7 - *(unsigned char *)(a1 + 1105));
    unsigned int v10 = 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    char v11 = *v6;
    goto LABEL_48;
  }
  unsigned int v12 = (a2 - 0x10000) >> 16;
  unsigned int v13 = v12 + 1;
  if (a2 >> 16) {
    unsigned int v14 = v12 + 1;
  }
  else {
    unsigned int v14 = 0;
  }
  unint64_t v15 = (unsigned __int16)a2 >> 14;
  if ((unsigned __int16)a2 < 0x4000uLL) {
    unsigned int v16 = v14;
  }
  else {
    unsigned int v16 = v14 + 1;
  }
  BOOL v17 = (unsigned __int16)a2 < 0x4000uLL;
  if ((unsigned __int16)a2 >= 0x4000uLL) {
    unsigned int v18 = 0x4000;
  }
  else {
    unsigned int v18 = 0;
  }
  if ((unsigned __int16)a2 >= 0x8000uLL)
  {
    unsigned int v16 = v14 + 1;
    BOOL v17 = 0;
    unsigned int v18 = 0x8000;
  }
  if (v15 > 2) {
    unsigned int v19 = v14 + 1;
  }
  else {
    unsigned int v19 = v16;
  }
  BOOL v20 = v15 <= 2 && v17;
  if (v15 <= 2) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = 49152;
  }
  unint64_t v22 = (unsigned __int16)a2 - (unint64_t)v21;
  if (v22 < 0x80)
  {
    PERSkipBytes(a1, (unsigned __int16)v19);
    uint64_t v23 = (char *)(*(void *)(a1 + 1096) - v22 - (unsigned __int16)v19);
    int64_t v24 = (char *)(*(void *)(a1 + 1096) - v22);
  }
  else
  {
    PERSkipBytes(a1, (unsigned __int16)v19 + 1);
    uint64_t v23 = (char *)(*(void *)(a1 + 1096) + ~(v22 + (unsigned __int16)v19));
    int64_t v24 = &v23[(unsigned __int16)v19 + 1];
  }
  uint64_t result = memmove(v24, v23, v22 + 1);
  if (!v20)
  {
    --v19;
    v23 -= v21;
    if ((_WORD)v19)
    {
      uint64_t result = memmove(&v23[(unsigned __int16)v19], v23, v21 | 1);
    }
    else
    {
      unsigned int v19 = 0;
      --v23;
    }
  }
  if ((_WORD)v14)
  {
    if ((unsigned __int16)v14 != 1)
    {
      int v25 = v23 - 0x10000;
      unsigned int v26 = v19 - 1;
      do
      {
        uint64_t result = memmove(&v25[(unsigned __int16)v26], v25, 0x10001uLL);
        --v13;
        v25 -= 0x10000;
        --v26;
      }
      while ((unsigned __int16)v13 > 1u);
      uint64_t v23 = v25 + 0x10000;
    }
    v23 -= 65537;
  }
  if (v2 >= 0x10000)
  {
    do
    {
      char v27 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
      *uint64_t v23 = v27;
      *uint64_t v23 = v27 | (0xC4u >> (7 - *(unsigned char *)(a1 + 1105)));
      char v28 = v23[1] & (0xFFu >> (7 - *(unsigned char *)(a1 + 1105)));
      v23[1] = v28;
      v23[1] = v28 | (392 << *(unsigned char *)(a1 + 1105));
      v2 -= 0x10000;
      v23 += 65537;
    }
    while (v2 >> 16);
  }
  if (v2 < 0xC000)
  {
    if (v2 < 0x8000)
    {
      if (v2 < 0x4000) {
        goto LABEL_45;
      }
      unsigned int v29 = (unsigned char *)(a1 + 1105);
      char v36 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
      *uint64_t v23 = v36;
      *uint64_t v23 = v36 | (0xC1u >> (7 - *(unsigned char *)(a1 + 1105)));
      unsigned int v31 = v23[1] & (0xFFu >> (7 - *(unsigned char *)(a1 + 1105)));
      v23[1] &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
      uint64_t v32 = -16384;
      char v33 = -126;
      uint64_t v34 = 16385;
    }
    else
    {
      unsigned int v29 = (unsigned char *)(a1 + 1105);
      char v35 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
      *uint64_t v23 = v35;
      *uint64_t v23 = v35 | (0xC2u >> (7 - *(unsigned char *)(a1 + 1105)));
      unsigned int v31 = v23[1] & (0xFFu >> (7 - *(unsigned char *)(a1 + 1105)));
      v23[1] &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
      uint64_t v32 = -32768;
      char v33 = -124;
      uint64_t v34 = 32769;
    }
  }
  else
  {
    unsigned int v29 = (unsigned char *)(a1 + 1105);
    char v30 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
    *uint64_t v23 = v30;
    *uint64_t v23 = v30 | (0xC3u >> (7 - *(unsigned char *)(a1 + 1105)));
    unsigned int v31 = v23[1] & (0xFFu >> (7 - *(unsigned char *)(a1 + 1105)));
    v23[1] &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    uint64_t v32 = -49152;
    char v33 = -122;
    uint64_t v34 = 49153;
  }
  v23[1] = v31 | (v33 << *v29);
  v2 += v32;
  v23 += v34;
LABEL_45:
  uint64_t v8 = (unsigned char *)(a1 + 1105);
  if (v2 < 0x80)
  {
    char v39 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
    *uint64_t v23 = v39;
    *uint64_t v23 = v39 | (v2 >> (7 - *(unsigned char *)(a1 + 1105)));
    unsigned int v10 = 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    char v40 = v23[1];
    unint64_t v6 = v23 + 1;
    char v11 = v40;
  }
  else
  {
    char v37 = *v23 & (510 << *(unsigned char *)(a1 + 1105));
    *uint64_t v23 = v37;
    *uint64_t v23 = v37 | ((v2 | 0x8000) >> (15 - *(unsigned char *)(a1 + 1105)));
    v23[1] = (v2 | 0x8000) >> (7 - *(unsigned char *)(a1 + 1105));
    unsigned int v10 = 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    char v38 = v23[2];
    unint64_t v6 = v23 + 2;
    char v11 = v38;
  }
LABEL_48:
  char v41 = v11 & v10;
  *unint64_t v6 = v41;
  *unint64_t v6 = v41 | (v2 << (*v8 + 1));
  return result;
}

uint64_t PEROctetsDefragmentationWithOffset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1096);
  switch(PERGetByte(a1))
  {
    case 0xC1u:
      size_t v3 = (unsigned char *)(*(void *)(a1 + 1096) + 0x4000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x4000;
      break;
    case 0xC2u:
      size_t v3 = (unsigned char *)(*(void *)(a1 + 1096) + 0x8000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x8000;
      break;
    case 0xC3u:
      size_t v3 = (unsigned char *)(*(void *)(a1 + 1096) + 49152);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 49152;
      break;
    case 0xC4u:
      size_t v3 = (unsigned char *)(*(void *)(a1 + 1096) + 0x10000);
      *(void *)(a1 + 1096) = v3;
      uint64_t v4 = 0x10000;
      break;
    default:
      EPErrorHandler(a1, 26);
      uint64_t v4 = 0;
      size_t v3 = *(unsigned char **)(a1 + 1096);
      break;
  }
  unint64_t v5 = *(void *)(a1 + 1088);
  if ((unint64_t)v3 >= v5)
  {
    PERAppendData(a1, (unint64_t)&v3[-v5]);
    size_t v3 = *(unsigned char **)(a1 + 1096);
  }
  for (unsigned int i = PERGetByte(a1); i == 196; v4 += 0x10000)
  {
    uint64_t v7 = *(void *)(a1 + 1088) - *(void *)(a1 + 1096);
    if (v7 < 65537) {
      PERAppendData(a1, 65537 - v7);
    }
    *v3 &= 510 << *(unsigned char *)(a1 + 1105);
    **(unsigned char **)(a1 + 1096) &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    *v3 |= **(unsigned char **)(a1 + 1096);
    memmove(v3 + 1, (const void *)(*(void *)(a1 + 1096) + 1), 0x10000uLL);
    v3 += 0x10000;
    *(void *)(a1 + 1096) += 0x10000;
    unsigned int i = PERGetByte(a1);
  }
  char v8 = i;
  if (i >= 0xC1)
  {
    unint64_t v9 = (unint64_t)(i & 3) << 14;
    v4 += v9;
    uint64_t v10 = *(void *)(a1 + 1088) - *(void *)(a1 + 1096);
    uint64_t v11 = (unsigned __int16)((_WORD)i << 14) | 1u;
    if (v11 > v10) {
      PERAppendData(a1, v11 - v10);
    }
    *v3 &= 510 << *(unsigned char *)(a1 + 1105);
    **(unsigned char **)(a1 + 1096) &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    *v3 |= **(unsigned char **)(a1 + 1096);
    memmove(v3 + 1, (const void *)(*(void *)(a1 + 1096) + 1), (unint64_t)(v8 & 3) << 14);
    v3 += v9;
    *(void *)(a1 + 1096) += v9;
    char v8 = PERGetByte(a1);
  }
  if ((v8 & 0xC0) == 0x80)
  {
    unint64_t v12 = PERGetByte(a1) & 0xFFFF80FF | ((v8 & 0x7F) << 8);
    v4 += v12;
    unint64_t v13 = *(void *)(a1 + 1088) - *(void *)(a1 + 1096);
    if (v12 > v13) {
      PERAppendData(a1, v12 - v13);
    }
    *v3 &= 510 << *(unsigned char *)(a1 + 1105);
    **(unsigned char **)(a1 + 1096) &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    *v3 |= **(unsigned char **)(a1 + 1096);
    unsigned int v14 = (const void *)(*(void *)(a1 + 1096) + 1);
    unint64_t v15 = v3 + 1;
    size_t v16 = v12;
  }
  else
  {
    if (v8 < 0)
    {
      EPErrorHandler(a1, 26);
      goto LABEL_26;
    }
    int64_t v17 = v8 & 0x7F;
    v4 += v17;
    uint64_t v18 = *(void *)(a1 + 1088) - *(void *)(a1 + 1096);
    if (v17 > v18) {
      PERAppendData(a1, v17 - v18);
    }
    *v3 &= 510 << *(unsigned char *)(a1 + 1105);
    **(unsigned char **)(a1 + 1096) &= 0xFFu >> (7 - *(unsigned char *)(a1 + 1105));
    *v3 |= **(unsigned char **)(a1 + 1096);
    unsigned int v14 = (const void *)(*(void *)(a1 + 1096) + 1);
    unint64_t v15 = v3 + 1;
    size_t v16 = v17;
  }
  memmove(v15, v14, v16);
LABEL_26:
  *(void *)(a1 + 1096) = v2 + 1;
  return v4;
}

uint64_t PERConstructedEncode(size_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x4000)
  {
    if (v4 >= 0x10000)
    {
      do
      {
        if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
        {
          int v5 = *(unsigned __int8 *)(a1 + 1105);
          if (v5 != 7)
          {
            *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v5;
            *(unsigned char *)(a1 + 1105) = 7;
          }
        }
        PERPutByte(a1, 0xC4u);
        (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x10000, a2);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      while (v4 >> 16);
    }
    if (v4 >= 0xC000)
    {
      if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
      {
        int v6 = *(unsigned __int8 *)(a1 + 1105);
        if (v6 != 7)
        {
          *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v6;
          *(unsigned char *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC3u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 49152, a2);
      unint64_t v4 = *(void *)(a2 + 8);
    }
    if (v4 >= 0x8000)
    {
      if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
      {
        int v7 = *(unsigned __int8 *)(a1 + 1105);
        if (v7 != 7)
        {
          *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v7;
          *(unsigned char *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC2u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x8000, a2);
      unint64_t v4 = *(void *)(a2 + 8);
    }
    if (v4 >= 0x4000)
    {
      if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
      {
        int v8 = *(unsigned __int8 *)(a1 + 1105);
        if (v8 != 7)
        {
          *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v8;
          *(unsigned char *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC1u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x4000, a2);
    }
  }
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 1105);
    if (v9 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v9;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  unint64_t v10 = *(void *)(a2 + 8);
  if (v10 > 0x7F) {
    PERPutBits(a1, v10 | 0x8000, 0x10u);
  }
  else {
    PERPutByte(a1, *(void *)(a2 + 8));
  }
  uint64_t v11 = *(void *)(a2 + 8);
  unint64_t v12 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(a2 + 16);

  return v12(a1, v11, a2);
}

uint64_t PERConstructedDecode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  while (1)
  {
    if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
    {
      int v5 = *(unsigned __int8 *)(a1 + 1105);
      if (v5 != 7)
      {
        *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v5;
        *(unsigned char *)(a1 + 1105) = 7;
      }
    }
    char v6 = PERGetByte(a1);
    if ((v6 + 63) >= 4u) {
      break;
    }
    unint64_t v4 = ((unint64_t)(v6 + 63) << 14) + 0x4000;
LABEL_11:
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a2 + 16))(a1, v4, a2);
    if (!(v4 >> 14)) {
      return result;
    }
  }
  if ((v6 & 0xC0) == 0x80)
  {
    unint64_t v4 = PERGetByte(a1) & 0xFFFF80FF | ((v6 & 0x7F) << 8);
    goto LABEL_11;
  }
  if (v6 < 0)
  {
    EPErrorHandler(a1, 26);
    goto LABEL_11;
  }
  int v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(a2 + 16);

  return v8(a1, v6 & 0x7F, a2);
}

uint64_t Hal17_SoftReset(uint64_t a1, int a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  v31[0] = 0;
  __int16 v28 = 29250;
  char v29 = a1;
  __int16 v33 = 3;
  char v34 = 0;
  plc00_10EncodeHdrPlCs(&v28, (uint64_t)v32, 12, 1u, 1, (uint64_t)v31);
  int v4 = v31[0];
  if (v31[0])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HdrErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "Hal17_SoftReset", 775, v4);
      LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  char v35 = a2;
  char v36 = a2;
  __int16 v37 = 2560;
  if (a1 == 77)
  {
    int v8 = 2;
  }
  else
  {
    if (a1 != 80) {
      goto LABEL_11;
    }
    int v8 = 3;
  }
  g_HalState = v8;
LABEL_11:
  if ((int)Hal22_ZxSendToChip(v32, 0xCuLL) > 0)
  {
    char v9 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
    if (v9 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v17 = 1543;
LABEL_26:
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx cpu,%c\n", v16, "HAL", 69, "Hal17_SoftReset", v17, a1);
        LbsOsaTrace_WriteLog(0xDu, __str, v18, 0, 1);
      }
    }
    else
    {
      if (!v9)
      {
        int v10 = g_HalState;
        if (g_HalState != 3)
        {
          uint64_t result = 0xFFFFFFFFLL;
          goto LABEL_36;
        }
        if (g_ResetResp == a2)
        {
          if (g_ResetResp == 32)
          {
            int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
            uint64_t result = 0;
            if (IsLoggingAllowed)
            {
              bzero(__str, 0x410uLL);
              uint64_t v12 = mach_continuous_time();
              unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 73, "Hal17_SoftReset", 1289);
              LbsOsaTrace_WriteLog(0xDu, __str, v13, 4, 1);
              uint64_t result = 0;
            }
            goto LABEL_35;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%c\n", v26);
            goto LABEL_33;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RstType,%x,Resp,%x\n", v19);
LABEL_33:
          LbsOsaTrace_WriteLog(0xDu, __str, v20, 0, 1);
        }
        uint64_t result = 4294967288;
LABEL_35:
        int v10 = g_HalState;
LABEL_36:
        if (v10 != 2) {
          return result;
        }
        if (g_ResetResp == a2)
        {
          if (g_ResetResp == 32)
          {
            int v21 = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
            uint64_t result = 0;
            if (v21)
            {
              bzero(__str, 0x410uLL);
              uint64_t v22 = mach_continuous_time();
              unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "HAL", 73, "Hal17_SoftReset", 1289);
              LbsOsaTrace_WriteLog(0xDu, __str, v23, 4, 1);
              return 0;
            }
            return result;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%c\n", v27);
            goto LABEL_45;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rst,%x,resp,%x\n", v24);
LABEL_45:
          LbsOsaTrace_WriteLog(0xDu, __str, v25, 0, 1);
        }
        return 4294967288;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v17 = 1541;
        goto LABEL_26;
      }
    }
    return 4294967287;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal17_SoftReset", 1282);
    LbsOsaTrace_WriteLog(0xDu, __str, v15, 0, 1);
  }
  return 4294967289;
}

size_t Hal17_HandleReset(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = 513;
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_16;
  }
  if (a2 <= 0xC)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = 515;
    uint64_t v12 = a2;
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = "%10u %s%c %s: #%04hx len,%u\n";
    goto LABEL_16;
  }
  if (a1[2] != 66 || a1[3] != 82 || (int v6 = a1[4], v6 != 80) && v6 != 77)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    uint64_t v11 = 1290;
    uint64_t v12 = a1[2];
    int v4 = "%10u %s%c %s: #%04hx rcvd MC,%c,MID,%c,MIDEx,%c\n";
    unint64_t v10 = v8;
    goto LABEL_16;
  }
  g_ResetResp = a1[9];
  g_ResetResp = a1[8];
  size_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v11 = 1542;
      uint64_t v12 = *__error();
      unint64_t v10 = v7;
      int v4 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_16:
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, v4, v10, "HAL", 69, "Hal17_HandleReset", v11, v12, v13, v14);
      return LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
    }
  }
  return result;
}

uint64_t GM_Conv_Lock_Units(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    size_t v3 = (__int16 *)(a3 + 34);
    int v4 = (_WORD *)(a2 + 14);
    size_t result = result;
    do
    {
      if ((unsigned __int16)*(v4 - 2) >= 0xFDF2u) {
        __int16 v5 = 6500;
      }
      else {
        __int16 v5 = *(v4 - 2) / 0xAu;
      }
      *(v4 - 2) = v5;
      if ((unsigned __int16)*(v4 - 1) >= 0xFDF2u) {
        __int16 v6 = 6500;
      }
      else {
        __int16 v6 = *(v4 - 1) / 0xAu;
      }
      *(v4 - 1) = v6;
      unsigned int v7 = (unsigned __int16)*v4;
      BOOL v8 = v7 > 0xFDEC;
      unint64_t v9 = (429496730 * (unint64_t)(v7 + 5)) >> 32;
      if (v8) {
        LOWORD(v9) = 6500;
      }
      *int v4 = v9;
      v4 += 18;
      int v10 = *v3;
      unsigned int v11 = ((26215 * v10) >> 18) + ((26215 * v10) >> 31);
      if (v10 > 32009) {
        LOWORD(v11) = 3200;
      }
      if (v10 >= -32009) {
        __int16 v12 = v11;
      }
      else {
        __int16 v12 = -3200;
      }
      *size_t v3 = v12;
      v3 += 28;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t asn1PE_PosTechnology(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    }
    else
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
      uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
      }
      else
      {
        Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
        uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
        if (*(unsigned char *)(a1 + 16))
        {
          int v5 = *(_DWORD *)(a1 + 8);
          int v6 = *(_DWORD *)(a1 + 12);
          unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
        }
        else
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[3]);
          uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(unsigned char *)(a1 + 16))
          {
            int v5 = *(_DWORD *)(a1 + 8);
            int v6 = *(_DWORD *)(a1 + 12);
            unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[4]);
            uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
            if (*(unsigned char *)(a1 + 16))
            {
              int v5 = *(_DWORD *)(a1 + 8);
              int v6 = *(_DWORD *)(a1 + 12);
              unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
            }
            else
            {
              Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[5]);
              uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
              if (!*(unsigned char *)(a1 + 16))
              {
                Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[6]);
                return *(unsigned __int8 *)(a1 + 16);
              }
              int v5 = *(_DWORD *)(a1 + 8);
              int v6 = *(_DWORD *)(a1 + 12);
              unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
            }
          }
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_PrefMethod(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a2;
  if (v3 >= 3)
  {
    uint64_t v4 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 2, v3);
    if (!v4) {
      return v4;
    }
  }
  SuplAsn1Logger::TraceError(v4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_PosProtocol(uint64_t a1, unsigned __int8 *a2, uint8x8_t a3)
{
  a3.i32[0] = *(_DWORD *)(a2 + 3);
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0] != 0);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  v9.i32[0] = *(_DWORD *)(a2 + 3);
  if (!vmovn_s16((int16x8_t)vmovl_u8(v9)).u32[0]) {
    return 0;
  }
  uint64_t v8 = asn1PE_PosProtocol_VER2(a1, a2);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  return v5;
}

uint64_t asn1PE_SETCapabilities(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  uint64_t v7 = asn1PE_PosTechnology(a1, a2);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  uint64_t v7 = asn1PE_PrefMethod(a1, a2 + 7);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }

  return asn1PE_PosProtocol(a1, a2 + 8, v8);
}

uint64_t ds_NK_Summary_FirstLine(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(char **)result;
  char v3 = 78;
  do
  {
    *(void *)size_t result = v2 + 1;
    *uint64_t v2 = v3;
    uint64_t v2 = *(char **)result;
    if (*(void *)result >= *(void *)(result + 24))
    {
      uint64_t v2 = *(char **)(result + 16);
      *(void *)size_t result = v2;
    }
    char v3 = str_0[++v1];
  }
  while (v1 != 16);
  *(void *)size_t result = v2 + 1;
  *uint64_t v2 = 10;
  if (*(void *)result >= *(void *)(result + 24)) {
    *(void *)size_t result = *(void *)(result + 16);
  }

  return GNSS_Nav_Debug_Flush_Check(result);
}

uint64_t ds_NK_Summary(void *a1)
{
  uint64_t v1575 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char **)a1[46];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[22];
  uint64_t v6 = a1[36];
  int v7 = *(unsigned __int16 *)(a1[20] + 394);
  GN_GPS_Get_LibVersion((char *)v1571);
  uint8x8_t v8 = *v2;
  char v9 = 86;
  uint64_t v10 = 1u;
  do
  {
    *uint64_t v2 = v8 + 1;
    *uint8x8_t v8 = v9;
    uint8x8_t v8 = *v2;
    if (*v2 >= v2[3])
    {
      uint8x8_t v8 = v2[2];
      *uint64_t v2 = v8;
    }
    char v9 = aVer[v10++];
  }
  while (v10 != 7);
  char v11 = v1571[0];
  if (LOBYTE(v1571[0]))
  {
    __int16 v12 = (unsigned __int8 *)v1571 + 1;
    do
    {
      *uint64_t v2 = v8 + 1;
      *uint8x8_t v8 = v11;
      uint8x8_t v8 = *v2;
      if (*v2 >= v2[3])
      {
        uint8x8_t v8 = v2[2];
        *uint64_t v2 = v8;
      }
      int v13 = *v12++;
      char v11 = v13;
    }
    while (v13);
  }
  *uint64_t v2 = v8 + 1;
  *uint8x8_t v8 = 32;
  uint64_t v14 = *v2;
  if (*v2 >= v2[3]) {
    uint64_t v14 = v2[2];
  }
  *uint64_t v2 = v14 + 1;
  *uint64_t v14 = 91;
  unsigned __int16 v15 = *v2;
  if (*v2 >= v2[3])
  {
    unsigned __int16 v15 = v2[2];
    *uint64_t v2 = v15;
  }
  char v16 = *(unsigned char *)(v6 + 118);
  if (v16)
  {
    int v17 = (unsigned __int8 *)(v6 + 119);
    do
    {
      *uint64_t v2 = v15 + 1;
      char *v15 = v16;
      unsigned __int16 v15 = *v2;
      if (*v2 >= v2[3])
      {
        unsigned __int16 v15 = v2[2];
        *uint64_t v2 = v15;
      }
      int v18 = *v17++;
      char v16 = v18;
    }
    while (v18);
  }
  *uint64_t v2 = v15 + 1;
  char *v15 = 93;
  unint64_t v19 = *v2;
  if (*v2 >= v2[3]) {
    unint64_t v19 = v2[2];
  }
  for (unsigned int i = 3; i > 1; --i)
  {
    *uint64_t v2 = v19 + 1;
    *unint64_t v19 = 32;
    unint64_t v19 = *v2;
    if (*v2 >= v2[3])
    {
      unint64_t v19 = v2[2];
      *uint64_t v2 = v19;
    }
  }
  sprintf_2f((uint64_t)v2, (*(_DWORD *)(v4 + 32) - *(_DWORD *)(v5 + 26996)) / 0x64u);
  int v21 = (*v2)++;
  *int v21 = 32;
  uint64_t v22 = *v2;
  if (*v2 >= v2[3]) {
    uint64_t v22 = v2[2];
  }
  unsigned __int16 v23 = &ch_GNSS_Exe_States[20 * *(int *)(v3 + 1284) + 1];
  char v24 = 32;
  do
  {
    *uint64_t v2 = v22 + 1;
    *uint64_t v22 = v24;
    uint64_t v22 = *v2;
    if (*v2 >= v2[3])
    {
      uint64_t v22 = v2[2];
      *uint64_t v2 = v22;
    }
    int v25 = *v23++;
    char v24 = v25;
  }
  while (v25);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v3 + 1280));
  sprintf_sp1d(v2, v7);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v5 + 29));
  unint64_t v26 = (*v2)++;
  char *v26 = 10;
  if (*v2 >= v2[3]) {
    *uint64_t v2 = v2[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v2);
  unint64_t v27 = (char **)a1[46];
  uint64_t v28 = a1[2];
  char v29 = (double *)a1[6];
  unsigned int v31 = (_DWORD *)a1[9];
  uint64_t v30 = a1[10];
  uint64_t v32 = (unsigned int *)a1[22];
  uint64_t v33 = a1[29];
  char v34 = *v27;
  char v35 = 84;
  uint64_t v36 = 1u;
  do
  {
    *unint64_t v27 = v34 + 1;
    *char v34 = v35;
    char v34 = *v27;
    if (*v27 >= v27[3])
    {
      char v34 = v27[2];
      *unint64_t v27 = v34;
    }
    char v35 = aTime[v36++];
  }
  while (v36 != 7);
  uint64_t v1540 = v28;
  *(void *)&v1571[0] = 0;
  LOWORD(v1572[0]) = 0;
  LOWORD(v1546) = 0;
  *(_DWORD *)v1544 = 0;
  *(_DWORD *)v1545 = 0;
  unsigned __int16 v1543 = 0;
  double v37 = *(double *)(v30 + 40);
  __int16 v38 = *(_WORD *)(v30 + 54);
  char v39 = (double *)(v30 + 144);
  *(void *)v1547 = 0;
  if (!R8_EQ((const double *)(v30 + 144), (const double *)v1547)
    || (char v39 = (double *)(v30 + 152), *(void *)v1547 = 0, !R8_EQ((const double *)(v30 + 152), (const double *)v1547))
    || (char v39 = (double *)(v30 + 160),
        *(void *)v1547 = 0,
        BOOL v40 = R8_EQ((const double *)(v30 + 160), (const double *)v1547),
        double v41 = 0.0,
        !v40))
  {
    double v41 = *v39;
  }
  for (double j = v37 - v41; j >= 604800.0; ++v38)
    double j = j + -604800.0;
  while (j < 0.0)
  {
    double j = j + 604800.0;
    --v38;
  }
  API_Get_UTC_Cor(0, (double *)v1571);
  GPS_To_UTC_Time(v1572, (unsigned __int16 *)&v1546, &v1545[1], v1545, &v1544[1], v1544, &v1543, v38, j, *(double *)v1571);
  sprintf_02d(v27, v1545[0]);
  sprintf_02d(v27, v1544[1]);
  unsigned __int16 v43 = v1544[0];
  if (v1545[0] == 23 && v1544[1] == 59 && v1544[0] >= 0x3Au)
  {
    v1547[0] = 0;
    signed __int8 v1542 = 0;
    v1574[0] = 0;
    API_Get_Next_Leap_Second(v1547, &v1542, (int *)v1574);
    unsigned __int16 v43 = v1544[0];
    if (!v1574[0] && v1542 == 1) {
      unsigned __int16 v43 = ++v1544[0];
    }
  }
  sprintf_02d(v27, v43);
  v44 = (*v27)++;
  char *v44 = 46;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_03d((uint64_t)v27, v1543);
  unsigned int v45 = *(_DWORD *)(v30 + 32);
  v46 = (*v27)++;
  char *v46 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_10u(v27, v45);
  sprintf_5d(v27, *(__int16 *)(v30 + 54));
  sprintf_12f3(v27, *(double *)(v30 + 40));
  sprintf_2d(v27, *(unsigned __int8 *)(v33 + 16));
  v47 = *v27;
  v48 = &g_TOW_Stat_As_String[10 * *(unsigned int *)v29 + 1];
  char v49 = 32;
  do
  {
    *unint64_t v27 = v47 + 1;
    char *v47 = v49;
    v47 = *v27;
    if (*v27 >= v27[3])
    {
      v47 = v27[2];
      *unint64_t v27 = v47;
    }
    int v50 = *v48++;
    char v49 = v50;
  }
  while (v50);
  sprintf_6d(v27, v32[2757]);
  sprintf_6d(v27, v32[2758]);
  sprintf_gR8(v27, v29[4] * 1000000000.0);
  sprintf_sgR8(v27, *(double *)(v30 + 168) * 1000000000.0);
  v51 = (*v27)++;
  char *v51 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_sp1u(v27, *(_DWORD *)(v30 + 36));
  if (*(int *)v29 < 1)
  {
    uint64_t v56 = 0;
    v57 = *v27;
    char v58 = 32;
    do
    {
      *unint64_t v27 = v57 + 1;
      char *v57 = v58;
      v57 = *v27;
      if (*v27 >= v27[3])
      {
        v57 = v27[2];
        *unint64_t v27 = v57;
      }
      char v58 = a9999999[++v56];
    }
    while (v56 != 16);
    goto LABEL_95;
  }
  double v52 = *(double *)(v30 + 40) * 1000.0;
  double v53 = -0.5;
  if (v52 > 0.0) {
    double v53 = 0.5;
  }
  double v54 = v52 + v53;
  if (v54 <= 2147483650.0)
  {
    if (v54 >= -2147483650.0) {
      int v55 = (int)v54;
    }
    else {
      int v55 = 0x80000000;
    }
  }
  else
  {
    int v55 = 0x7FFFFFFF;
  }
  int v59 = _MergedGlobals_0;
  int v60 = *(_DWORD *)(v30 + 32);
  if (_MergedGlobals_0)
  {
    int v61 = dword_26AE7705C;
  }
  else
  {
    _MergedGlobals_0 = *(_DWORD *)(v30 + 32);
    dword_26AE7705C = v55;
    int v61 = v55;
    int v59 = v60;
  }
  int v62 = v59 + v55;
  int v63 = v61 + v60;
  int v64 = v63 - v62;
  if (v63 - v62 <= -302400000) {
    int v64 = -302400000;
  }
  int v65 = v64 + v62;
  unsigned int v66 = (v65 - v63 - (v65 != v63)) / 0x240C8400;
  if (v65 != v63) {
    ++v66;
  }
  unsigned int v67 = v63 + 604800000 * v66;
  if ((int)(v67 - v62) >= 302399999) {
    int v68 = 302399999;
  }
  else {
    int v68 = v67 - v62;
  }
  unsigned int v69 = v67 - v62 - 604800000 * ((v67 + ~(v62 + v68) + 604800000) / 0x240C8400);
  v70 = (*v27)++;
  char *v70 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_4d(v27, v69);
  LODWORD(v1571[0]) = 0;
  v1547[0] = 0;
  v1574[0] = 0;
  v1572[0] = 0;
  if (!API_Get_FS_Pulse_TTick((unsigned int *)v1571, v1547, v1574, v1572))
  {
    v74 = *v27;
    char v75 = 32;
    uint64_t v76 = 1u;
    do
    {
      *unint64_t v27 = v74 + 1;
      char *v74 = v75;
      v74 = *v27;
      if (*v27 >= v27[3])
      {
        v74 = v27[2];
        *unint64_t v27 = v74;
      }
      char v75 = a9999999_0[v76++];
    }
    while (v76 != 15);
LABEL_95:
    double k = 0.0;
    goto LABEL_110;
  }
  LODWORD(v71) = v1547[0];
  double v72 = *(double *)(v30 + 40)
      - *(double *)(v30 + 144)
      + ((double)(*(_DWORD *)(v30 + 32) - LODWORD(v1571[0])) + (double)v71 * -0.0000152587891)
      * -0.001
      * (1.0 - *(double *)(v30 + 168));
  for (double k = v72 - (double)(int)v72; k < -0.5; double k = k + 1.0)
    ;
  for (; k > 0.5; double k = k + -1.0)
    ;
  uint64_t v77 = 0;
  v78 = *v27;
  char v79 = 32;
  do
  {
    *unint64_t v27 = v78 + 1;
    char *v78 = v79;
    v78 = *v27;
    if (*v27 >= v27[3])
    {
      v78 = v27[2];
      *unint64_t v27 = v78;
    }
    char v79 = asc_22BAAA2FA[++v77];
  }
  while (v77 != 2);
  sprintf_10u(v27, v1571[0]);
  sprintf_10u(v27, v1547[0]);
  double v80 = -0.5;
  if (k * 10000.0 > 0.0) {
    double v80 = 0.5;
  }
  double v81 = k * 10000.0 + v80;
  if (v81 <= 2147483650.0)
  {
    if (v81 >= -2147483650.0) {
      unsigned int v82 = (int)v81;
    }
    else {
      unsigned int v82 = 0x80000000;
    }
  }
  else
  {
    unsigned int v82 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v27, v82, 2);
LABEL_110:
  double v83 = *(double *)(v30 + 40) * 1000.0;
  double v84 = -0.5;
  if (v83 > 0.0) {
    double v84 = 0.5;
  }
  double v85 = v83 + v84;
  if (v85 <= 2147483650.0)
  {
    if (v85 >= -2147483650.0) {
      int v86 = (int)v85;
    }
    else {
      int v86 = 0x80000000;
    }
  }
  else
  {
    int v86 = 0x7FFFFFFF;
  }
  unsigned int v87 = *(_DWORD *)(v30 + 32) - (*((_DWORD *)v29 + 25) + v86) + *((_DWORD *)v29 + 24);
  v88 = (*v27)++;
  char *v88 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_4d(v27, v87);
  v89 = (*v27)++;
  char *v89 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_2d(v27, v32[2763]);
  unsigned int v90 = v31[265];
  if (v90 == -1) {
    unsigned int v91 = 255;
  }
  else {
    unsigned int v91 = v90 / 0xEA60;
  }
  sprintf_4d(v27, v91);
  v92 = (*v27)++;
  char *v92 = 32;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  sprintf_1u(v27, v31[267]);
  v93 = *v27;
  if (*(unsigned char *)(v1540 + 22))
  {
    *unint64_t v27 = v93 + 1;
    char *v93 = 32;
    if (*v27 >= v27[3]) {
      *unint64_t v27 = v27[2];
    }
    double v94 = *(double *)(v30 + 40) * 1000.0;
    double v95 = -0.5;
    if (v94 > 0.0) {
      double v95 = 0.5;
    }
    double v96 = v94 + v95;
    if (v96 <= 2147483650.0)
    {
      if (v96 >= -2147483650.0) {
        int v97 = (int)v96;
      }
      else {
        int v97 = 0x80000000;
      }
    }
    else
    {
      int v97 = 0x7FFFFFFF;
    }
    sprintf_5f((uint64_t)v27, *(_DWORD *)(v1540 + 24) - v97, 4);
    sprintf_sp1d(v27, *(unsigned __int8 *)(v1540 + 22));
    sprintf_sp1d(v27, *(unsigned __int8 *)(v1540 + 21));
    v93 = *v27;
  }
  else
  {
    uint64_t v98 = 0;
    char v99 = 32;
    do
    {
      *unint64_t v27 = v93 + 1;
      char *v93 = v99;
      v93 = *v27;
      if (*v27 >= v27[3])
      {
        v93 = v27[2];
        *unint64_t v27 = v93;
      }
      char v99 = a0000[++v98];
    }
    while (v98 != 8);
  }
  char v100 = 32;
  uint64_t v101 = 1u;
  do
  {
    *unint64_t v27 = v93 + 1;
    char *v93 = v100;
    v93 = *v27;
    if (*v27 >= v27[3])
    {
      v93 = v27[2];
      *unint64_t v27 = v93;
    }
    char v100 = aGoh[v101++];
  }
  while (v101 != 6);
  sprintf_4d(v27, v31[282]);
  int v102 = v31[279];
  if (v102)
  {
    uint64_t v103 = 274877907 * (*(_DWORD *)(v30 + 36) - v102);
    unsigned int v104 = (v103 >> 38) + ((unint64_t)v103 >> 63);
    v105 = (*v27)++;
    char *v105 = 32;
    if (*v27 >= v27[3]) {
      *unint64_t v27 = v27[2];
    }
    sprintf_4d(v27, v104);
    int v106 = v31[282];
    if (v106)
    {
      uint64_t v107 = 274877907 * (*(_DWORD *)(v30 + 36) - v106);
      unsigned int v108 = (v107 >> 38) + ((unint64_t)v107 >> 63);
    }
    else
    {
      unsigned int v108 = 0;
    }
    v112 = (*v27)++;
    char *v112 = 32;
    if (*v27 >= v27[3]) {
      *unint64_t v27 = v27[2];
    }
    sprintf_4d(v27, v108);
    v110 = *v27;
  }
  else
  {
    uint64_t v109 = 0;
    v110 = *v27;
    char v111 = 32;
    do
    {
      *unint64_t v27 = v110 + 1;
      char *v110 = v111;
      v110 = *v27;
      if (*v27 >= v27[3])
      {
        v110 = v27[2];
        *unint64_t v27 = v110;
      }
      char v111 = a00[++v109];
    }
    while (v109 != 4);
  }
  *unint64_t v27 = v110 + 1;
  char *v110 = 10;
  if (*v27 >= v27[3]) {
    *unint64_t v27 = v27[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v27);
  v113 = (char **)a1[46];
  uint64_t v115 = a1[6];
  uint64_t v114 = a1[7];
  v116 = (unsigned __int8 *)(v114 + 16232);
  v117 = (char *)(v114 + 8458);
  uint64_t v118 = a1[10];
  v119 = *v113;
  char v120 = 71;
  uint64_t v121 = 1u;
  do
  {
    *v113 = v119 + 1;
    char *v119 = v120;
    v119 = *v113;
    if (*v113 >= v113[3])
    {
      v119 = v113[2];
      *v113 = v119;
    }
    char v120 = aGlot[v121++];
  }
  while (v121 != 7);
  double v122 = *(double *)(v115 + 72) - *(double *)(v118 + 152) + 0.0005;
  if (v122 >= 86400.0) {
    double v122 = v122 + -86400.0;
  }
  unsigned int v123 = ((v122 - (double)v122) * 1000.0);
  unsigned int v124 = (unsigned __int16)(v122 / 0xE10);
  unsigned int v125 = v122 - 3600 * v124;
  unsigned int v126 = (unsigned __int16)(v125 / 0x3C);
  unsigned int v127 = v125 - 60 * v126;
  sprintf_02d(v113, v124);
  sprintf_02d(v113, v126);
  sprintf_02d(v113, v127);
  v128 = (*v113)++;
  char *v128 = 46;
  if (*v113 >= v113[3]) {
    *v113 = v113[2];
  }
  sprintf_03d((uint64_t)v113, v123);
  sprintf_3d(v113, *(__int16 *)(v115 + 66));
  sprintf_5d(v113, *(__int16 *)(v115 + 68));
  unsigned int v129 = v117[3];
  sprintf_3d(v113, *v117);
  sprintf_3d(v113, v129);
  uint64_t v130 = 0;
  v131 = *v113;
  char v132 = 32;
  do
  {
    *v113 = v131 + 1;
    char *v131 = v132;
    v131 = *v113;
    if (*v113 >= v113[3])
    {
      v131 = v113[2];
      *v113 = v131;
    }
    char v132 = asc_22BAAA2FA[++v130];
  }
  while (v130 != 2);
  sprintf_12f3(v113, *(double *)(v115 + 72));
  sprintf_2d(v113, *(unsigned __int8 *)(v115 + 64));
  sprintf_3d(v113, *v116);
  sprintf_5d(v113, *((unsigned __int16 *)v117 + 3883));
  v133 = (*v113)++;
  char *v133 = 32;
  v134 = *v113;
  if (*v113 >= v113[3]) {
    v134 = v113[2];
  }
  *v113 = v134 + 1;
  char *v134 = 32;
  v135 = *v113;
  if (*v113 >= v113[3]) {
    v135 = v113[2];
  }
  v136 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v115 + 60) + 1];
  char v137 = 32;
  do
  {
    *v113 = v135 + 1;
    char *v135 = v137;
    v135 = *v113;
    if (*v113 >= v113[3])
    {
      v135 = v113[2];
      *v113 = v135;
    }
    int v138 = *v136++;
    char v137 = v138;
  }
  while (v138);
  *v113 = v135 + 1;
  char *v135 = 10;
  if (*v113 >= v113[3]) {
    *v113 = v113[2];
  }
  v139 = (gnss::GnssAdaptDevice *)GNSS_Nav_Debug_Flush_Check((uint64_t)v113);
  int v140 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v139);
  v141 = (char **)a1[46];
  if (v140)
  {
    uint64_t v142 = a1[34];
    if (*(_DWORD *)(v142 + 1020) == *(_DWORD *)(v142 + 4))
    {
      uint64_t v143 = a1[27];
      v144 = *v141;
      char v145 = 83;
      uint64_t v146 = 1u;
      do
      {
        *v141 = v144 + 1;
        char *v144 = v145;
        v144 = *v141;
        if (*v141 >= v141[3])
        {
          v144 = v141[2];
          *v141 = v144;
        }
        char v145 = aSel[v146++];
      }
      while (v146 != 6);
      if (*(unsigned char *)(v143 + 2032)) {
        char v147 = 70;
      }
      else {
        char v147 = 71;
      }
      *v141 = v144 + 1;
      char *v144 = v147;
      v148 = *v141;
      if (*v141 >= v141[3]) {
        v148 = v141[2];
      }
      *v141 = v148 + 1;
      char *v148 = 32;
      v149 = *v141;
      if (*v141 >= v141[3]) {
        v149 = v141[2];
      }
      if (*(unsigned char *)(v142 + 24)) {
        char v150 = 103;
      }
      else {
        char v150 = 45;
      }
      *v141 = v149 + 1;
      char *v149 = v150;
      v151 = *v141;
      if (*v141 >= v141[3]) {
        v151 = v141[2];
      }
      if (*(unsigned char *)(v142 + 1040)) {
        char v152 = 102;
      }
      else {
        char v152 = 45;
      }
      *v141 = v151 + 1;
      char *v151 = v152;
      v153 = *v141;
      if (*v141 >= v141[3]) {
        v153 = v141[2];
      }
      if (*(unsigned char *)(v142 + 2032)) {
        char v154 = 83;
      }
      else {
        char v154 = 45;
      }
      *v141 = v153 + 1;
      char *v153 = v154;
      v155 = *v141;
      if (*v141 >= v141[3]) {
        v155 = v141[2];
      }
      if (*(unsigned char *)(v142 + 2033)) {
        char v156 = 71;
      }
      else {
        char v156 = 70;
      }
      *v141 = v155 + 1;
      char *v155 = v156;
      v157 = *v141;
      if (*v141 >= v141[3]) {
        v157 = v141[2];
      }
      if (*(unsigned char *)(v142 + 2034)) {
        char v158 = 78;
      }
      else {
        char v158 = 45;
      }
      *v141 = v157 + 1;
      char *v157 = v158;
      v159 = *v141;
      if (*v141 >= v141[3]) {
        v159 = v141[2];
      }
      if (*(unsigned char *)(v142 + 2035)) {
        char v160 = 66;
      }
      else {
        char v160 = 45;
      }
      *v141 = v159 + 1;
      char *v159 = v160;
      v161 = *v141;
      if (*v141 >= v141[3]) {
        v161 = v141[2];
      }
      *v141 = v161 + 1;
      char *v161 = 32;
      if (*v141 >= v141[3]) {
        *v141 = v141[2];
      }
      Str_FIX_TYPE = Get_Str_FIX_TYPE(*(_DWORD *)(v142 + 28));
      char v163 = *Str_FIX_TYPE;
      v164 = *v141;
      if (*Str_FIX_TYPE)
      {
        v165 = (unsigned __int8 *)(Str_FIX_TYPE + 1);
        do
        {
          *v141 = v164 + 1;
          char *v164 = v163;
          v164 = *v141;
          if (*v141 >= v141[3])
          {
            v164 = v141[2];
            *v141 = v164;
          }
          int v166 = *v165++;
          char v163 = v166;
        }
        while (v166);
      }
      *v141 = v164 + 1;
      char *v164 = 32;
      if (*v141 >= v141[3]) {
        *v141 = v141[2];
      }
      sprintf_4d(v141, *(_DWORD *)(v143 + 2148));
      uint64_t v167 = 0;
      v168 = *v141;
      char v169 = 32;
      do
      {
        *v141 = v168 + 1;
        char *v168 = v169;
        v168 = *v141;
        if (*v141 >= v141[3])
        {
          v168 = v141[2];
          *v141 = v168;
        }
        char v169 = aG[++v167];
      }
      while (v167 != 4);
      sprintf_ACC(v141, *(double *)(v142 + 2040));
      int v170 = *(_DWORD *)(v143 + 2136);
      unsigned int v171 = v170 - 1;
      int v172 = v170 - 5 * ((v170 - 1) / 5u);
      for (int m = 4; m != -1; --m)
      {
        int v174 = v172 + m;
        if (v172 + m - 5 >= 0) {
          int v174 = v172 + m - 5;
        }
        v175 = (*v141)++;
        char *v175 = 32;
        if (*v141 >= v141[3]) {
          *v141 = v141[2];
        }
        sprintf_ACC(v141, *(double *)(v143 + 8 * v174 + 2096));
      }
      uint64_t v176 = 0;
      v177 = *v141;
      char v178 = 32;
      do
      {
        *v141 = v177 + 1;
        char *v177 = v178;
        v177 = *v141;
        if (*v141 >= v141[3])
        {
          v177 = v141[2];
          *v141 = v177;
        }
        char v178 = aF[++v176];
      }
      while (v176 != 4);
      sprintf_ACC(v141, *(double *)(v142 + 2048));
      int v179 = v170 - 5 * (v171 / 5);
      for (int n = 4; n != -1; --n)
      {
        int v181 = v179 + n;
        if (v179 + n - 5 >= 0) {
          int v181 = v179 + n - 5;
        }
        v182 = (*v141)++;
        char *v182 = 32;
        if (*v141 >= v141[3]) {
          *v141 = v141[2];
        }
        sprintf_ACC(v141, *(double *)(v143 + 8 * v181 + 2048));
      }
      v183 = (*v141)++;
      char *v183 = 32;
      if (*v141 >= v141[3]) {
        *v141 = v141[2];
      }
      int v184 = v170 - 5 * (v171 / 5);
      for (iunsigned int i = 4; ii != -1; --ii)
      {
        int v186 = v184 + ii;
        if (v184 + ii - 5 >= 0) {
          int v186 = v184 + ii - 5;
        }
        sprintf1da(v141, *(unsigned __int8 *)(v143 + v186 + 2088), v1571, 0, 0);
      }
      v187 = (*v141)++;
      char *v187 = 10;
      if (*v141 >= v141[3]) {
        *v141 = v141[2];
      }
      GNSS_Nav_Debug_Flush_Check((uint64_t)v141);
      v141 = (char **)a1[46];
    }
  }
  uint64_t v188 = a1[38];
  v189 = *v141;
  char v190 = 112;
  uint64_t v191 = 1u;
  do
  {
    *v141 = v189 + 1;
    char *v189 = v190;
    v189 = *v141;
    if (*v141 >= v141[3])
    {
      v189 = v141[2];
      *v141 = v189;
    }
    char v190 = aPNd[v191++];
  }
  while (v191 != 7);
  v1571[0] = vmulq_f64(*(float64x2_t *)(v188 + 96), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL));
  sprintf_LaLo(v141, (uint64_t)v1571);
  sprintf_sgR8(v141, *(double *)(v188 + 112));
  sprintf_sgR8(v141, *(double *)(v188 + 120));
  v192 = (*v141)++;
  char *v192 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_sgR8(v141, *(double *)(v188 + 128));
  double v193 = *(double *)(v188 + 136) * 10.0;
  double v194 = -0.5;
  if (v193 > 0.0) {
    double v194 = 0.5;
  }
  double v195 = v193 + v194;
  if (v195 <= 2147483650.0)
  {
    if (v195 >= -2147483650.0) {
      unsigned int v196 = (int)v195;
    }
    else {
      unsigned int v196 = 0x80000000;
    }
  }
  else
  {
    unsigned int v196 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v141, v196, 2);
  sprintf_sgR8(v141, *(double *)(v188 + 144));
  v197 = *v141;
  char v198 = 32;
  uint64_t v199 = 1u;
  do
  {
    *v141 = v197 + 1;
    char *v197 = v198;
    v197 = *v141;
    if (*v141 >= v141[3])
    {
      v197 = v141[2];
      *v141 = v197;
    }
    char v198 = aSt[v199++];
  }
  while (v199 != 6);
  sprintf_2d(v141, *(unsigned __int8 *)(v188 + 317));
  sprintf_2d(v141, *(unsigned __int8 *)(v188 + 318));
  v200 = (*v141)++;
  char *v200 = 32;
  v201 = *v141;
  if (*v141 >= v141[3])
  {
    v201 = v141[2];
    *v141 = v201;
  }
  char v202 = 45;
  switch(*(_DWORD *)(v188 + 304))
  {
    case 0:
      break;
    case 1:
      char v202 = 86;
      break;
    case 2:
      char v202 = 76;
      break;
    case 3:
      char v202 = 77;
      break;
    case 4:
      char v202 = 72;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_GN_RELIAB", 0x1103u);
      v201 = *v141;
      char v202 = 120;
      break;
  }
  *v141 = v201 + 1;
  char *v201 = v202;
  v203 = *v141;
  if (*v141 >= v141[3]) {
    v203 = v141[2];
  }
  *v141 = v203 + 1;
  char *v203 = 32;
  v204 = *v141;
  if (*v141 >= v141[3])
  {
    v204 = v141[2];
    *v141 = v204;
  }
  v205 = "NC";
  switch(*(_DWORD *)(v188 + 300))
  {
    case 0:
      break;
    case 1:
      v205 = "0D";
      break;
    case 2:
      v205 = "1D";
      break;
    case 3:
      v205 = "2D";
      break;
    case 4:
      v205 = "3D";
      break;
    default:
      EvCrt_Illegal_Default("Get_Str_GN_GNSS_CONTENT", 0x10EFu);
      v204 = *v141;
      v205 = "xx";
      break;
  }
  char v206 = *v205;
  if (*v205)
  {
    v207 = (unsigned __int8 *)(v205 + 1);
    do
    {
      *v141 = v204 + 1;
      char *v204 = v206;
      v204 = *v141;
      if (*v141 >= v141[3])
      {
        v204 = v141[2];
        *v141 = v204;
      }
      int v208 = *v207++;
      char v206 = v208;
    }
    while (v208);
  }
  *v141 = v204 + 1;
  char *v204 = 32;
  v209 = *v141;
  if (*v141 >= v141[3])
  {
    v209 = v141[2];
    *v141 = v209;
  }
  v210 = "NF";
  switch(*(_DWORD *)(v188 + 296))
  {
    case 0:
      break;
    case 1:
      v210 = "ES";
      break;
    case 2:
      v210 = "G2";
      break;
    case 3:
      v210 = "D2";
      break;
    case 4:
      v210 = "G3";
      break;
    case 5:
      v210 = "D3";
      break;
    default:
      EvCrt_Illegal_Default("Get_Str_GN_GPS_FIX_TYPE", 0x10C4u);
      v209 = *v141;
      v210 = "xx";
      break;
  }
  char v211 = *v210;
  if (*v210)
  {
    v212 = (unsigned __int8 *)(v210 + 1);
    do
    {
      *v141 = v209 + 1;
      char *v209 = v211;
      v209 = *v141;
      if (*v141 >= v141[3])
      {
        v209 = v141[2];
        *v141 = v209;
      }
      int v213 = *v212++;
      char v211 = v213;
    }
    while (v213);
  }
  *v141 = v209 + 1;
  char *v209 = 32;
  v214 = *v141;
  if (*v141 >= v141[3])
  {
    v214 = v141[2];
    *v141 = v214;
  }
  char v215 = 45;
  switch(*(_DWORD *)(v188 + 292))
  {
    case 0:
      break;
    case 1:
      char v215 = 83;
      break;
    case 2:
      char v215 = 80;
      break;
    case 3:
      char v215 = 86;
      break;
    case 4:
      char v215 = 70;
      break;
    case 5:
      char v215 = 43;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_GN_USTATE", 0x112Du);
      v214 = *v141;
      char v215 = 120;
      break;
  }
  *v141 = v214 + 1;
  char *v214 = v215;
  v216 = *v141;
  if (*v141 >= v141[3]) {
    v216 = v141[2];
  }
  uint64_t v217 = 0;
  char v218 = 32;
  do
  {
    *v141 = v216 + 1;
    char *v216 = v218;
    v216 = *v141;
    if (*v141 >= v141[3])
    {
      v216 = v141[2];
      *v141 = v216;
    }
    char v218 = a0x[++v217];
  }
  while (v217 != 4);
  unint64_t v219 = *(unsigned int *)(v188 + 312);
  LOBYTE(v1547[0]) = hexTABLE[v219 >> 28];
  BYTE1(v1547[0]) = hexTABLE[(v219 >> 24) & 0xF];
  hex6((uint64_t)v141, v219, v1547, 2);
  uint64_t v220 = 0;
  v221 = *v141;
  char v222 = 32;
  do
  {
    *v141 = v221 + 1;
    char *v221 = v222;
    v221 = *v141;
    if (*v141 >= v141[3])
    {
      v221 = v141[2];
      *v141 = v221;
    }
    char v222 = a0x[++v220];
  }
  while (v220 != 4);
  sprintf_03x(v141, *(unsigned int *)(v188 + 288));
  v223 = *v141;
  char v224 = 32;
  uint64_t v225 = 1u;
  do
  {
    *v141 = v223 + 1;
    char *v223 = v224;
    v223 = *v141;
    if (*v141 >= v141[3])
    {
      v223 = v141[2];
      *v141 = v223;
    }
    char v224 = aPa[v225++];
  }
  while (v225 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 200));
  v226 = (*v141)++;
  char *v226 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 208));
  v227 = (*v141)++;
  char *v227 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_3d(v141, (int)*(double *)(v188 + 216));
  v228 = (*v141)++;
  char *v228 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 192));
  v229 = *v141;
  char v230 = 32;
  uint64_t v231 = 1u;
  do
  {
    *v141 = v229 + 1;
    char *v229 = v230;
    v229 = *v141;
    if (*v141 >= v141[3])
    {
      v229 = v141[2];
      *v141 = v229;
    }
    char v230 = aVa[v231++];
  }
  while (v231 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 224));
  v232 = (*v141)++;
  char *v232 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 232));
  v233 = (*v141)++;
  char *v233 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 240));
  v234 = *v141;
  char v235 = 32;
  uint64_t v236 = 1u;
  do
  {
    *v141 = v234 + 1;
    char *v234 = v235;
    v234 = *v141;
    if (*v141 >= v141[3])
    {
      v234 = v141[2];
      *v141 = v234;
    }
    char v235 = aTa[v236++];
  }
  while (v236 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 152) * 1000.0);
  v237 = (*v141)++;
  char *v237 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 160) * 1000000000.0);
  v238 = (*v141)++;
  char *v238 = 32;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  sprintf_ACC(v141, *(double *)(v188 + 168) * 1000000000.0);
  v239 = *v141;
  char v240 = 32;
  uint64_t v241 = 1u;
  do
  {
    *v141 = v239 + 1;
    char *v239 = v240;
    v239 = *v141;
    if (*v141 >= v141[3])
    {
      v239 = v141[2];
      *v141 = v239;
    }
    char v240 = aEt[v241++];
  }
  while (v241 != 6);
  int v242 = *(_DWORD *)(v188 + 308);
  if (v242 >= 0) {
    unsigned int v243 = *(_DWORD *)(v188 + 308);
  }
  else {
    unsigned int v243 = -v242;
  }
  sprintf1da(v141, v243, v1547, 0, v242 >> 31);
  v244 = (*v141)++;
  char *v244 = 10;
  if (*v141 >= v141[3]) {
    *v141 = v141[2];
  }
  v245 = (gnss::GnssAdaptDevice *)GNSS_Nav_Debug_Flush_Check((uint64_t)v141);
  int v246 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v245);
  uint64_t v247 = a1[46];
  if (v246 && (unsigned __int16)g_Enable_Nav_Debug >= 2u && *(unsigned char *)(a1[26] + 2126920))
  {
    uint64_t v248 = a1[18];
    uint64_t v249 = a1[11];
    char v250 = 70;
    uint64_t v251 = 1u;
    v252 = *(char **)v247;
    do
    {
      *(void *)uint64_t v247 = v252 + 1;
      char *v252 = v250;
      v252 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v252 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v252;
      }
      char v250 = aFpe[v251++];
    }
    while (v251 != 7);
    sprintf_LaLo((char **)v247, v248 + 192);
    sprintf_sgR8((void *)v247, *(double *)(v248 + 208));
    sprintf_sgR8((void *)v247, *(double *)(v248 + 208) - *(double *)(v249 + 232));
    v253 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v253 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_sgR8((void *)v247, *(double *)(v248 + 248));
    double v254 = *(double *)(v248 + 256) * 10.0;
    double v255 = -0.5;
    if (v254 > 0.0) {
      double v255 = 0.5;
    }
    double v256 = v254 + v255;
    if (v256 <= 2147483650.0)
    {
      if (v256 >= -2147483650.0) {
        unsigned int v257 = (int)v256;
      }
      else {
        unsigned int v257 = 0x80000000;
      }
    }
    else
    {
      unsigned int v257 = 0x7FFFFFFF;
    }
    sprintf_7f(v247, v257, 2);
    sprintf_sgR8((void *)v247, -*(double *)(v248 + 232));
    v258 = *(char **)v247;
    char v259 = 32;
    uint64_t v260 = 1u;
    do
    {
      *(void *)uint64_t v247 = v258 + 1;
      char *v258 = v259;
      v258 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v258 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v258;
      }
      char v259 = aSt[v260++];
    }
    while (v260 != 6);
    uint64_t v261 = 0;
    char v262 = 32;
    do
    {
      *(void *)uint64_t v247 = v258 + 1;
      char *v258 = v262;
      v258 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v258 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v258;
      }
      char v262 = asc_22BAAA3E5[++v261];
    }
    while (v261 != 2);
    sprintf_2d((void *)v247, *(unsigned __int8 *)(v248 + 24));
    v263 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v263 = 32;
    v264 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v264 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v264;
    }
    char v265 = 45;
    switch(*(_DWORD *)(v248 + 36))
    {
      case 0:
        break;
      case 1:
        char v265 = 76;
        break;
      case 2:
        char v265 = 72;
        break;
      case 3:
        char v265 = 70;
        break;
      default:
        EvCrt_Illegal_Default("Get_Char_FPE_CONF", 0x1117u);
        v264 = *(char **)v247;
        char v265 = 120;
        break;
    }
    *(void *)uint64_t v247 = v264 + 1;
    char *v264 = v265;
    v266 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v266 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v266 + 1;
    char *v266 = 32;
    v267 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v267 = *(char **)(v247 + 16);
    }
    uint64_t v268 = 0;
    char v269 = 32;
    do
    {
      *(void *)uint64_t v247 = v267 + 1;
      char *v267 = v269;
      v267 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v267 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v267;
      }
      char v269 = asc_22BAAA3E5[++v268];
    }
    while (v268 != 2);
    *(void *)uint64_t v247 = v267 + 1;
    char *v267 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    v270 = Get_Str_FIX_TYPE(*(_DWORD *)(v248 + 28));
    char v271 = *v270;
    v272 = *(char **)v247;
    if (*v270)
    {
      v273 = (unsigned __int8 *)(v270 + 1);
      do
      {
        *(void *)uint64_t v247 = v272 + 1;
        char *v272 = v271;
        v272 = *(char **)v247;
        if (*(void *)v247 >= *(void *)(v247 + 24))
        {
          v272 = *(char **)(v247 + 16);
          *(void *)uint64_t v247 = v272;
        }
        int v274 = *v273++;
        char v271 = v274;
      }
      while (v274);
    }
    *(void *)uint64_t v247 = v272 + 1;
    char *v272 = 32;
    v275 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v275 = *(char **)(v247 + 16);
    }
    uint64_t v276 = 0;
    char v277 = 45;
    do
    {
      *(void *)uint64_t v247 = v275 + 1;
      char *v275 = v277;
      v275 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v275 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v275;
      }
      char v277 = asc_22BAAA3E8[++v276];
    }
    while (v276 != 2);
    uint64_t v278 = 0;
    int32x4_t v279 = 0uLL;
    int32x4_t v280 = 0uLL;
    int32x4_t v281 = 0uLL;
    int32x4_t v282 = 0uLL;
    do
    {
      uint8x16_t v283 = *(uint8x16_t *)(v248 + 264 + v278);
      uint16x8_t v284 = vmovl_u8(*(uint8x8_t *)v283.i8);
      uint16x8_t v285 = vmovl_high_u8(v283);
      int32x4_t v282 = (int32x4_t)vaddw_high_u16((uint32x4_t)v282, v285);
      int32x4_t v281 = (int32x4_t)vaddw_u16((uint32x4_t)v281, *(uint16x4_t *)v285.i8);
      int32x4_t v280 = (int32x4_t)vaddw_high_u16((uint32x4_t)v280, v284);
      int32x4_t v279 = (int32x4_t)vaddw_u16((uint32x4_t)v279, *(uint16x4_t *)v284.i8);
      v278 += 16;
    }
    while (v278 != 48);
    sprintf_2d((void *)v247, vaddvq_s32(vaddq_s32(vaddq_s32(v279, v281), vaddq_s32(v280, v282))));
    v286 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v286 = 32;
    v287 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v287 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v287 + 1;
    char *v287 = 97;
    v288 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v288 = *(char **)(v247 + 16);
    }
    if (*(unsigned char *)(v248 + 312))
    {
      if (*(unsigned char *)(v248 + 320))
      {
        char v289 = 85;
      }
      else if (*(_DWORD *)(v248 + 316))
      {
        char v289 = 69;
      }
      else
      {
        char v289 = 65;
      }
    }
    else
    {
      char v289 = 45;
    }
    *(void *)uint64_t v247 = v288 + 1;
    char *v288 = v289;
    v290 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v290 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v290 + 1;
    char *v290 = 32;
    v291 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v291 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v291 + 1;
    char *v291 = 103;
    v292 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v292 = *(char **)(v247 + 16);
    }
    if (*(unsigned char *)(v248 + 328))
    {
      if (*(unsigned char *)(v248 + 336))
      {
        char v293 = 85;
      }
      else if (*(_DWORD *)(v248 + 332))
      {
        char v293 = 69;
      }
      else
      {
        char v293 = 65;
      }
    }
    else
    {
      char v293 = 45;
    }
    *(void *)uint64_t v247 = v292 + 1;
    char *v292 = v293;
    v294 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v294 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v294 + 1;
    char *v294 = 32;
    v295 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v295 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v295 + 1;
    char *v295 = 109;
    v296 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v296 = *(char **)(v247 + 16);
    }
    if (*(unsigned char *)(v248 + 360))
    {
      if (*(unsigned char *)(v248 + 368))
      {
        char v297 = 85;
      }
      else if (*(_DWORD *)(v248 + 364))
      {
        char v297 = 69;
      }
      else
      {
        char v297 = 65;
      }
    }
    else
    {
      char v297 = 45;
    }
    *(void *)uint64_t v247 = v296 + 1;
    char *v296 = v297;
    v298 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v298 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v298 + 1;
    char *v298 = 32;
    v299 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v299 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v299 + 1;
    char *v299 = 99;
    v300 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v300 = *(char **)(v247 + 16);
    }
    if (*(unsigned char *)(v248 + 376))
    {
      if (*(unsigned char *)(v248 + 384))
      {
        char v301 = 85;
      }
      else if (*(_DWORD *)(v248 + 380))
      {
        char v301 = 69;
      }
      else
      {
        char v301 = 65;
      }
    }
    else
    {
      char v301 = 45;
    }
    *(void *)uint64_t v247 = v300 + 1;
    char *v300 = v301;
    v302 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v302 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v302 + 1;
    char *v302 = 32;
    v303 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v303 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v303 + 1;
    char *v303 = 102;
    v304 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v304 = *(char **)(v247 + 16);
    }
    if (*(unsigned char *)(v248 + 392))
    {
      if (*(unsigned char *)(v248 + 400))
      {
        char v305 = 85;
      }
      else if (*(_DWORD *)(v248 + 396))
      {
        char v305 = 69;
      }
      else
      {
        char v305 = 65;
      }
    }
    else
    {
      char v305 = 45;
    }
    *(void *)uint64_t v247 = v304 + 1;
    char *v304 = v305;
    v306 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v306 = *(char **)(v247 + 16);
    }
    *(void *)uint64_t v247 = v306 + 1;
    char *v306 = 32;
    v307 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      v307 = *(char **)(v247 + 16);
    }
    char v308 = 32;
    uint64_t v309 = 1u;
    do
    {
      *(void *)uint64_t v247 = v307 + 1;
      char *v307 = v308;
      v307 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v307 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v307;
      }
      char v308 = aPa[v309++];
    }
    while (v309 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 136));
    v310 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v310 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 144));
    v311 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v311 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_3d((void *)v247, (int)*(double *)(v248 + 152));
    v312 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v312 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 64));
    v313 = *(char **)v247;
    char v314 = 32;
    uint64_t v315 = 1u;
    do
    {
      *(void *)uint64_t v247 = v313 + 1;
      char *v313 = v314;
      v313 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v313 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v313;
      }
      char v314 = aVa[v315++];
    }
    while (v315 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 96));
    v316 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v316 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 104));
    v317 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v317 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 120));
    v318 = *(char **)v247;
    char v319 = 32;
    uint64_t v320 = 1u;
    do
    {
      *(void *)uint64_t v247 = v318 + 1;
      char *v318 = v319;
      v318 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v318 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v318;
      }
      char v319 = aTa[v320++];
    }
    while (v320 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 88) * 1000.0);
    v321 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v321 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 80) * 1000000000.0);
    v322 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v322 = 32;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    sprintf_ACC((char **)v247, *(double *)(v248 + 128) * 1000000000.0);
    v323 = *(char **)v247;
    char v324 = 32;
    uint64_t v325 = 1u;
    do
    {
      *(void *)uint64_t v247 = v323 + 1;
      char *v323 = v324;
      v323 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v323 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v323;
      }
      char v324 = aCl[v325++];
    }
    while (v325 != 6);
    sprintf_sgR8((void *)v247, *(double *)(v248 + 184) * 1000000000.0);
    sprintf_gR8((void *)v247, *(double *)(v248 + 160) * 1000000000.0);
    sprintf_sgR8((void *)v247, (*(double *)(v248 + 168) - *(double *)(v248 + 160)) * 1000000000.0);
    sprintf_sgR8((void *)v247, (*(double *)(v248 + 176) - *(double *)(v248 + 160)) * 1000000000.0);
    v326 = (unsigned char *)(*(void *)v247)++;
    unsigned char *v326 = 10;
    if (*(void *)v247 >= *(void *)(v247 + 24)) {
      *(void *)uint64_t v247 = *(void *)(v247 + 16);
    }
    GNSS_Nav_Debug_Flush_Check(v247);
    uint64_t v247 = a1[46];
  }
  uint64_t v327 = a1[9];
  uint64_t v328 = a1[10];
  uint64_t v329 = a1[22];
  uint64_t v330 = a1[29];
  strcpy((char *)v1571, "    -------------- ");
  v331 = *(char **)v247;
  char v332 = 71;
  uint64_t v333 = 1u;
  do
  {
    *(void *)uint64_t v247 = v331 + 1;
    char *v331 = v332;
    v331 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v331 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v331;
    }
    char v332 = aGeod[v333++];
  }
  while (v333 != 7);
  sprintf_LaLo((char **)v247, v328 + 208);
  sprintf_sgR8((void *)v247, *(double *)(v328 + 224));
  sprintf_sgR8((void *)v247, *(double *)(v328 + 224) - *(double *)(v328 + 232));
  int v334 = *(_DWORD *)(v328 + 392);
  if (v334 == 2)
  {
    char v335 = 115;
  }
  else
  {
    if (v334 != 1) {
      goto LABEL_536;
    }
    char v335 = 83;
  }
  BYTE4(v1571[0]) = v335;
LABEL_536:
  int v336 = *(_DWORD *)(v328 + 396);
  if (v336 == 2)
  {
    char v337 = 98;
  }
  else
  {
    if (v336 != 1) {
      goto LABEL_541;
    }
    char v337 = 66;
  }
  BYTE5(v1571[0]) = v337;
LABEL_541:
  int v338 = *(_DWORD *)(v328 + 408);
  if (v338 == 2)
  {
    char v339 = 100;
  }
  else
  {
    if (v338 != 1) {
      goto LABEL_546;
    }
    char v339 = 68;
  }
  BYTE6(v1571[0]) = v339;
LABEL_546:
  int v340 = *(_DWORD *)(v328 + 400);
  if (v340 == 2)
  {
    char v341 = 103;
  }
  else
  {
    if (v340 != 1) {
      goto LABEL_551;
    }
    char v341 = 71;
  }
  BYTE7(v1571[0]) = v341;
LABEL_551:
  int v342 = *(_DWORD *)(v328 + 416);
  if (v342 == 2)
  {
    char v343 = 104;
  }
  else
  {
    if (v342 != 1) {
      goto LABEL_556;
    }
    char v343 = 72;
  }
  BYTE8(v1571[0]) = v343;
LABEL_556:
  int v344 = *(_DWORD *)(v328 + 420);
  if (v344 == 2)
  {
    char v345 = 97;
  }
  else
  {
    if (v344 != 1) {
      goto LABEL_561;
    }
    char v345 = 65;
  }
  BYTE9(v1571[0]) = v345;
LABEL_561:
  int v346 = *(_DWORD *)(v328 + 424);
  if (v346 == 2)
  {
    char v347 = 118;
  }
  else
  {
    if (v346 != 1) {
      goto LABEL_566;
    }
    char v347 = 86;
  }
  BYTE10(v1571[0]) = v347;
LABEL_566:
  int v348 = *(_DWORD *)(v328 + 428);
  if (v348 == 2)
  {
    char v349 = 100;
  }
  else
  {
    if (v348 != 1) {
      goto LABEL_571;
    }
    char v349 = 68;
  }
  BYTE11(v1571[0]) = v349;
LABEL_571:
  int v350 = *(_DWORD *)(v328 + 432);
  if (v350 == 2)
  {
    char v351 = 103;
  }
  else
  {
    if (v350 != 1) {
      goto LABEL_576;
    }
    char v351 = 71;
  }
  BYTE12(v1571[0]) = v351;
LABEL_576:
  int v352 = *(_DWORD *)(v328 + 436);
  if (v352 == 2)
  {
    char v353 = 115;
  }
  else
  {
    if (v352 != 1) {
      goto LABEL_581;
    }
    char v353 = 83;
  }
  BYTE13(v1571[0]) = v353;
LABEL_581:
  int v354 = *(_DWORD *)(v328 + 440);
  if (v354 == 2)
  {
    char v355 = 100;
  }
  else
  {
    if (v354 != 1) {
      goto LABEL_586;
    }
    char v355 = 68;
  }
  BYTE14(v1571[0]) = v355;
LABEL_586:
  int v356 = *(_DWORD *)(v328 + 444);
  if (v356 == 2)
  {
    char v357 = 103;
  }
  else
  {
    if (v356 != 1) {
      goto LABEL_591;
    }
    char v357 = 71;
  }
  HIBYTE(v1571[0]) = v357;
LABEL_591:
  int v358 = *(_DWORD *)(v328 + 448);
  if (v358 == 2)
  {
    char v359 = 100;
  }
  else
  {
    if (v358 != 1) {
      goto LABEL_596;
    }
    char v359 = 68;
  }
  LOBYTE(v1571[1]) = v359;
LABEL_596:
  int v360 = *(_DWORD *)(v328 + 452);
  if (v360 == 2)
  {
    char v361 = 116;
  }
  else
  {
    if (v360 != 1) {
      goto LABEL_601;
    }
    char v361 = 84;
  }
  BYTE1(v1571[1]) = v361;
LABEL_601:
  int v362 = *(_DWORD *)(v328 + 456);
  if (v362 == 2)
  {
    char v363 = 100;
    goto LABEL_605;
  }
  if (v362 == 1)
  {
    char v363 = 68;
LABEL_605:
    BYTE2(v1571[1]) = v363;
  }
  char v364 = v1571[0];
  v365 = *(char **)v247;
  if (LOBYTE(v1571[0]))
  {
    v366 = (unsigned __int8 *)v1571 + 1;
    do
    {
      *(void *)uint64_t v247 = v365 + 1;
      char *v365 = v364;
      v365 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v365 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v365;
      }
      int v367 = *v366++;
      char v364 = v367;
    }
    while (v367);
  }
  char v368 = 32;
  uint64_t v369 = 1u;
  do
  {
    *(void *)uint64_t v247 = v365 + 1;
    char *v365 = v368;
    v365 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v365 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v365;
    }
    char v368 = aPf[v369++];
  }
  while (v369 != 6);
  sprintf_2d((void *)v247, *(unsigned __int8 *)(v327 + 66));
  v370 = *(char **)v247;
  char v371 = 32;
  uint64_t v372 = 1u;
  do
  {
    *(void *)uint64_t v247 = v370 + 1;
    char *v370 = v371;
    v370 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v370 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v370;
    }
    char v371 = aSf[v372++];
  }
  while (v372 != 6);
  uint64_t v373 = *(unsigned int *)(v329 + 11116);
  char v374 = ch_Stat_Fil[v373];
  if (v374)
  {
    v375 = (unsigned __int8 *)&ch_Stat_Fil[v373] + 1;
    do
    {
      *(void *)uint64_t v247 = v370 + 1;
      char *v370 = v374;
      v370 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v370 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v370;
      }
      int v376 = *v375++;
      char v374 = v376;
    }
    while (v376);
  }
  sprintf_2d((void *)v247, *(unsigned __int8 *)(v329 + 11161));
  sprintf_2d((void *)v247, *(_DWORD *)(v329 + 11120));
  sprintf_2d((void *)v247, *(unsigned __int8 *)(v329 + 11160));
  double v377 = *(double *)(v329 + 11128);
  if (v377 >= 9.89999962) {
    double v378 = 98.9999962;
  }
  else {
    double v378 = v377 * 10.0;
  }
  double v379 = -0.5;
  if (v378 > 0.0) {
    double v379 = 0.5;
  }
  double v380 = v378 + v379;
  if (v380 <= 2147483650.0)
  {
    if (v380 >= -2147483650.0) {
      unsigned int v381 = (int)v380;
    }
    else {
      unsigned int v381 = 0x80000000;
    }
  }
  else
  {
    unsigned int v381 = 0x7FFFFFFF;
  }
  sprintf_3f(v247, v381, 2);
  sprintf_sgR8((void *)v247, *(double *)(v329 + 11144));
  sprintf_sgR8((void *)v247, *(double *)(v329 + 11152));
  v382 = *(char **)v247;
  char v383 = 32;
  uint64_t v384 = 1u;
  do
  {
    *(void *)uint64_t v247 = v382 + 1;
    char *v382 = v383;
    v382 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v382 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v382;
    }
    char v383 = aHf[v384++];
  }
  while (v384 != 6);
  uint64_t v385 = *(unsigned int *)(v329 + 11188);
  char v386 = ch_Heading[v385];
  if (v386)
  {
    v387 = (unsigned __int8 *)&ch_Heading[v385] + 1;
    do
    {
      *(void *)uint64_t v247 = v382 + 1;
      char *v382 = v386;
      v382 = *(char **)v247;
      if (*(void *)v247 >= *(void *)(v247 + 24))
      {
        v382 = *(char **)(v247 + 16);
        *(void *)uint64_t v247 = v382;
      }
      int v388 = *v387++;
      char v386 = v388;
    }
    while (v388);
  }
  double v389 = *(double *)(v329 + 11192);
  double v390 = -0.5;
  if (v389 > 0.0) {
    double v390 = 0.5;
  }
  double v391 = v389 + v390;
  if (v391 <= 2147483650.0)
  {
    if (v391 >= -2147483650.0) {
      unsigned int v392 = (int)v391;
    }
    else {
      unsigned int v392 = 0x80000000;
    }
  }
  else
  {
    unsigned int v392 = 0x7FFFFFFF;
  }
  sprintf_5d((void *)v247, v392);
  v393 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v393 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  int v394 = *(_DWORD *)(v329 + 11208);
  if (v394) {
    unsigned int v395 = (*(_DWORD *)v330 - v394) / 1000;
  }
  else {
    unsigned int v395 = 0;
  }
  sprintf_4d((void *)v247, v395);
  double v396 = *(double *)(v329 + 11240);
  double v397 = -0.5;
  if (v396 > 0.0) {
    double v397 = 0.5;
  }
  double v398 = v396 + v397;
  if (v398 <= 2147483650.0)
  {
    if (v398 >= -2147483650.0) {
      unsigned int v399 = (int)v398;
    }
    else {
      unsigned int v399 = 0x80000000;
    }
  }
  else
  {
    unsigned int v399 = 0x7FFFFFFF;
  }
  sprintf_5d((void *)v247, v399);
  v400 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v400 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  int v401 = *(_DWORD *)(v329 + 11248);
  if (v401) {
    unsigned int v402 = (*(_DWORD *)v330 - v401) / 1000;
  }
  else {
    unsigned int v402 = 0;
  }
  sprintf_4d((void *)v247, v402);
  sprintf_2d((void *)v247, *(unsigned __int8 *)(v329 + 11232));
  v403 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v403 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  sprintf_11f9((void *)v247, *(double *)(v329 + 11216));
  v404 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v404 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  sprintf_11f9((void *)v247, *(double *)(v329 + 11224));
  v405 = *(char **)v247;
  char v406 = 32;
  uint64_t v407 = 1u;
  do
  {
    *(void *)uint64_t v247 = v405 + 1;
    char *v405 = v406;
    v405 = *(char **)v247;
    if (*(void *)v247 >= *(void *)(v247 + 24))
    {
      v405 = *(char **)(v247 + 16);
      *(void *)uint64_t v247 = v405;
    }
    char v406 = aHi[v407++];
  }
  while (v407 != 6);
  double v408 = *(double *)(v330 + 31424) * 10.0;
  double v409 = -0.5;
  if (v408 > 0.0) {
    double v409 = 0.5;
  }
  double v410 = v408 + v409;
  if (v410 <= 2147483650.0)
  {
    if (v410 >= -2147483650.0) {
      unsigned int v411 = (int)v410;
    }
    else {
      unsigned int v411 = 0x80000000;
    }
  }
  else
  {
    unsigned int v411 = 0x7FFFFFFF;
  }
  sprintf_2f(v247, v411);
  v412 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v412 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  double v413 = *(double *)(v330 + 31400);
  double v414 = -0.5;
  if (v413 > 0.0) {
    double v414 = 0.5;
  }
  double v415 = v413 + v414;
  if (v415 <= 2147483650.0)
  {
    if (v415 >= -2147483650.0) {
      unsigned int v416 = (int)v415;
    }
    else {
      unsigned int v416 = 0x80000000;
    }
  }
  else
  {
    unsigned int v416 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v247, v416);
  v417 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v417 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  double v418 = *(double *)(v330 + 952);
  double v419 = -0.5;
  if (v418 > 0.0) {
    double v419 = 0.5;
  }
  double v420 = v418 + v419;
  if (v420 <= 2147483650.0)
  {
    if (v420 >= -2147483650.0) {
      unsigned int v421 = (int)v420;
    }
    else {
      unsigned int v421 = 0x80000000;
    }
  }
  else
  {
    unsigned int v421 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v247, v421);
  v422 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v422 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  double v423 = *(double *)(v330 + 31416);
  double v424 = -0.5;
  if (v423 > 0.0) {
    double v424 = 0.5;
  }
  double v425 = v423 + v424;
  if (v425 <= 2147483650.0)
  {
    if (v425 >= -2147483650.0) {
      unsigned int v426 = (int)v425;
    }
    else {
      unsigned int v426 = 0x80000000;
    }
  }
  else
  {
    unsigned int v426 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v247, v426);
  v427 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v427 = 32;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  double v428 = *(double *)(v330 + 31408);
  double v429 = -0.5;
  if (v428 > 0.0) {
    double v429 = 0.5;
  }
  double v430 = v428 + v429;
  if (v430 <= 2147483650.0)
  {
    if (v430 >= -2147483650.0) {
      unsigned int v431 = (int)v430;
    }
    else {
      unsigned int v431 = 0x80000000;
    }
  }
  else
  {
    unsigned int v431 = 0x7FFFFFFF;
  }
  sprintf_3d((void *)v247, v431);
  v432 = (unsigned char *)(*(void *)v247)++;
  unsigned char *v432 = 32;
  v433 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24))
  {
    v433 = *(char **)(v247 + 16);
    *(void *)uint64_t v247 = v433;
  }
  char v434 = 120;
  switch(*(_DWORD *)(v330 + 31432))
  {
    case 0:
      break;
    case 1:
      char v434 = 85;
      break;
    case 2:
      char v434 = 83;
      break;
    case 3:
      char v434 = 70;
      break;
    case 4:
      char v434 = 49;
      break;
    case 5:
      char v434 = 50;
      break;
    case 6:
      char v434 = 48;
      break;
    case 7:
      char v434 = 77;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_Hdg_Filt_Info", 0x11C6u);
      v433 = *(char **)v247;
      char v434 = 120;
      break;
  }
  *(void *)uint64_t v247 = v433 + 1;
  char *v433 = v434;
  v435 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    v435 = *(char **)(v247 + 16);
  }
  *(void *)uint64_t v247 = v435 + 1;
  char *v435 = 32;
  v436 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    v436 = *(char **)(v247 + 16);
  }
  if (*(unsigned char *)(v330 + 31436)) {
    char v437 = 83;
  }
  else {
    char v437 = 45;
  }
  *(void *)uint64_t v247 = v436 + 1;
  char *v436 = v437;
  v438 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    v438 = *(char **)(v247 + 16);
  }
  *(void *)uint64_t v247 = v438 + 1;
  char *v438 = 32;
  v439 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    v439 = *(char **)(v247 + 16);
  }
  if (*(unsigned char *)(v330 + 31437)) {
    char v440 = 84;
  }
  else {
    char v440 = 45;
  }
  *(void *)uint64_t v247 = v439 + 1;
  char *v439 = v440;
  v441 = *(char **)v247;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    v441 = *(char **)(v247 + 16);
  }
  *(void *)uint64_t v247 = v441 + 1;
  char *v441 = 10;
  if (*(void *)v247 >= *(void *)(v247 + 24)) {
    *(void *)uint64_t v247 = *(void *)(v247 + 16);
  }
  GNSS_Nav_Debug_Flush_Check(v247);
  uint64_t v442 = a1[46];
  uint64_t v444 = a1[9];
  v443 = (double *)a1[10];
  uint64_t v445 = a1[22];
  uint64_t v446 = a1[29];
  v447 = *(char **)v442;
  char v448 = 76;
  uint64_t v449 = 1u;
  do
  {
    *(void *)uint64_t v442 = v447 + 1;
    char *v447 = v448;
    v447 = *(char **)v442;
    if (*(void *)v442 >= *(void *)(v442 + 24))
    {
      v447 = *(char **)(v442 + 16);
      *(void *)uint64_t v442 = v447;
    }
    char v448 = aLocal[v449++];
  }
  while (v449 != 8);
  v450 = (double *)(v445 + 27072);
  v451 = v443 + 26;
  uint64_t v452 = -3;
  do
  {
    double v453 = *v451 - *(v450 - 5);
    if (v452 != -3)
    {
      if (v452 != -2) {
        goto LABEL_758;
      }
      double v454 = -6.28318531;
      if (v453 >= 3.14159265 || (double v454 = 6.28318531, v453 < -3.14159265)) {
        double v453 = v453 + v454;
      }
    }
    double v453 = v453 * *v450;
LABEL_758:
    v455 = (unsigned char *)(*(void *)v442)++;
    unsigned char *v455 = 32;
    if (*(void *)v442 >= *(void *)(v442 + 24)) {
      *(void *)uint64_t v442 = *(void *)(v442 + 16);
    }
    sprintf_12f3((char **)v442, v453);
    ++v450;
    ++v451;
  }
  while (!__CFADD__(v452++, 1));
  v457 = (unsigned char *)(*(void *)v442)++;
  unsigned char *v457 = 32;
  if (*(void *)v442 >= *(void *)(v442 + 24)) {
    *(void *)uint64_t v442 = *(void *)(v442 + 16);
  }
  sprintf_sgR8((void *)v442, v443[44]);
  sprintf_sgR8((void *)v442, -v443[42]);
  uint64_t v458 = 120;
  if (!*(unsigned char *)(v444 + 66)) {
    uint64_t v458 = 45;
  }
  sprintf_6d((void *)v442, (int)v443[v458]);
  double v459 = 0.0;
  uint64_t v460 = 17;
  do
  {
    double v459 = v459 + v443[v460] * v443[v460];
    unint64_t v461 = v460 - 14;
    --v460;
  }
  while (v461 > 1);
  sprintf_sgR8((void *)v442, sqrt(v459));
  sprintf_6d((void *)v442, (int)*(double *)(v446 + 952));
  sprintf_sgR8((void *)v442, v443[40]);
  sprintf_sgR8((void *)v442, v443[41]);
  sprintf_sgR8((void *)v442, v443[115]);
  sprintf_sgR8((void *)v442, v443[116]);
  sprintf_sgR8((void *)v442, v443[118]);
  sprintf_sgR8((void *)v442, v443[119]);
  v462 = (unsigned char *)(*(void *)v442)++;
  unsigned char *v462 = 10;
  if (*(void *)v442 >= *(void *)(v442 + 24)) {
    *(void *)uint64_t v442 = *(void *)(v442 + 16);
  }
  GNSS_Nav_Debug_Flush_Check(v442);
  print_line_LS(a1, 1);
  print_line_LS(a1, 2);
  print_line_LS(a1, 3);
  print_line_LS(a1, 4);
  print_line_LS(a1, 5);
  v463 = (char **)a1[46];
  v464 = "tState";
  v1526 = a1;
  if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
  {
    uint64_t v465 = a1[22];
    v466 = *v463;
    char v467 = 75;
    uint64_t v468 = 1u;
    do
    {
      *v463 = v466 + 1;
      char *v466 = v467;
      v466 = *v463;
      if (*v463 >= v463[3])
      {
        v466 = v463[2];
        *v463 = v466;
      }
      char v467 = aKfarp[v468++];
    }
    while (v468 != 7);
    *v463 = v466 + 1;
    char *v466 = 32;
    v469 = *v463;
    if (*v463 >= v463[3]) {
      v469 = v463[2];
    }
    *v463 = v469 + 1;
    char *v469 = 80;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11528));
    double v470 = *(double *)(v465 + 11520);
    if (v470 >= 9.89999962) {
      double v471 = 98.9999962;
    }
    else {
      double v471 = v470 * 10.0;
    }
    double v472 = -0.5;
    if (v471 > 0.0) {
      double v472 = 0.5;
    }
    double v473 = v471 + v472;
    if (v473 <= 2147483650.0)
    {
      if (v473 >= -2147483650.0) {
        unsigned int v474 = (int)v473;
      }
      else {
        unsigned int v474 = 0x80000000;
      }
    }
    else
    {
      unsigned int v474 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v463, v474, 2);
    v475 = (*v463)++;
    char *v475 = 32;
    v476 = *v463;
    if (*v463 >= v463[3]) {
      v476 = v463[2];
    }
    *v463 = v476 + 1;
    char *v476 = 72;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11480), 99999.0));
    v477 = (*v463)++;
    char *v477 = 32;
    v478 = *v463;
    if (*v463 >= v463[3]) {
      v478 = v463[2];
    }
    *v463 = v478 + 1;
    char *v478 = 86;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11488), 99999.0));
    v479 = (*v463)++;
    char *v479 = 32;
    v480 = *v463;
    if (*v463 >= v463[3]) {
      v480 = v463[2];
    }
    *v463 = v480 + 1;
    char *v480 = 66;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11496), 99999.0));
    v481 = (*v463)++;
    char *v481 = 32;
    v482 = *v463;
    if (*v463 >= v463[3]) {
      v482 = v463[2];
    }
    *v463 = v482 + 1;
    char *v482 = 83;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11504), 99999.0));
    v483 = (*v463)++;
    char *v483 = 32;
    v484 = *v463;
    if (*v463 >= v463[3]) {
      v484 = v463[2];
    }
    *v463 = v484 + 1;
    char *v484 = 72;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11440));
    v485 = (*v463)++;
    char *v485 = 32;
    v486 = *v463;
    if (*v463 >= v463[3]) {
      v486 = v463[2];
    }
    *v463 = v486 + 1;
    char *v486 = 86;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11441));
    v487 = (*v463)++;
    char *v487 = 32;
    v488 = *v463;
    if (*v463 >= v463[3]) {
      v488 = v463[2];
    }
    *v463 = v488 + 1;
    char *v488 = 66;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11442));
    v489 = (*v463)++;
    char *v489 = 32;
    v490 = *v463;
    if (*v463 >= v463[3]) {
      v490 = v463[2];
    }
    *v463 = v490 + 1;
    char *v490 = 83;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11443));
    v491 = (*v463)++;
    char *v491 = 32;
    v492 = *v463;
    if (*v463 >= v463[3]) {
      v492 = v463[2];
    }
    *v463 = v492 + 1;
    char *v492 = 86;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11624));
    double v493 = *(double *)(v465 + 11616);
    if (v493 >= 9.89999962) {
      double v494 = 98.9999962;
    }
    else {
      double v494 = v493 * 10.0;
    }
    double v495 = -0.5;
    if (v494 > 0.0) {
      double v495 = 0.5;
    }
    double v496 = v494 + v495;
    if (v496 <= 2147483650.0)
    {
      if (v496 >= -2147483650.0) {
        unsigned int v497 = (int)v496;
      }
      else {
        unsigned int v497 = 0x80000000;
      }
    }
    else
    {
      unsigned int v497 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v463, v497, 2);
    v498 = (*v463)++;
    char *v498 = 32;
    v499 = *v463;
    if (*v463 >= v463[3]) {
      v499 = v463[2];
    }
    *v463 = v499 + 1;
    char *v499 = 72;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11576), 99.0));
    v500 = (*v463)++;
    char *v500 = 32;
    v501 = *v463;
    if (*v463 >= v463[3]) {
      v501 = v463[2];
    }
    *v463 = v501 + 1;
    char *v501 = 86;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11584), 99.0));
    v502 = (*v463)++;
    char *v502 = 32;
    v503 = *v463;
    if (*v463 >= v463[3]) {
      v503 = v463[2];
    }
    *v463 = v503 + 1;
    char *v503 = 66;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11592), 99.0));
    v504 = (*v463)++;
    char *v504 = 32;
    v505 = *v463;
    if (*v463 >= v463[3]) {
      v505 = v463[2];
    }
    *v463 = v505 + 1;
    char *v505 = 83;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11600), 99.0));
    v506 = (*v463)++;
    char *v506 = 32;
    v507 = *v463;
    if (*v463 >= v463[3]) {
      v507 = v463[2];
    }
    *v463 = v507 + 1;
    char *v507 = 72;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11536));
    v508 = (*v463)++;
    char *v508 = 32;
    v509 = *v463;
    if (*v463 >= v463[3]) {
      v509 = v463[2];
    }
    *v463 = v509 + 1;
    char *v509 = 86;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11537));
    v510 = (*v463)++;
    char *v510 = 32;
    v511 = *v463;
    if (*v463 >= v463[3]) {
      v511 = v463[2];
    }
    *v463 = v511 + 1;
    char *v511 = 66;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11538));
    v512 = (*v463)++;
    char *v512 = 32;
    v513 = *v463;
    if (*v463 >= v463[3]) {
      v513 = v463[2];
    }
    *v463 = v513 + 1;
    char *v513 = 83;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    sprintf_3d(v463, *(char *)(v465 + 11539));
    v514 = (*v463)++;
    char *v514 = 10;
    if (*v463 >= v463[3]) {
      *v463 = v463[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
    v463 = (char **)a1[46];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
      uint64_t v515 = a1[7];
      uint64_t v516 = a1[5];
      v517 = (unsigned char *)a1[9];
      v518 = *v463;
      char v519 = 78;
      uint64_t v520 = 1u;
      do
      {
        *v463 = v518 + 1;
        char *v518 = v519;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        char v519 = aNavm[v520++];
      }
      while (v520 != 7);
      if (v517[31])
      {
        uint64_t v521 = 0;
        unint64_t v522 = 0;
        char v523 = 31;
        uint64_t v524 = 208;
        do
        {
          if (*(unsigned char *)(*(void *)(v515 + 64) + v521)) {
            char v525 = 65;
          }
          else {
            char v525 = 45;
          }
          if (*(unsigned char *)(*(void *)(v515 + 48) + v521) || *(unsigned char *)(*(void *)(v515 + 56) + v521)) {
            v525 += 24;
          }
          if (!*(unsigned char *)(*(void *)v515 + v521)) {
            v525 += 32;
          }
          if (v525 == 77) {
            char v525 = 46;
          }
          if (*(unsigned char *)(*(void *)(v515 + 48) + v521)) {
            BOOL v526 = *(unsigned char *)(*(void *)v515 + v521) == 0;
          }
          else {
            BOOL v526 = 1;
          }
          if (!v526 && *(_DWORD *)(v515 + v524) == 0xFFFFFF) {
            unint64_t v522 = v522 | (1 << v523);
          }
          *v463 = v518 + 1;
          char *v518 = v525;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          if ((~(_BYTE)v521 & 3) == 0)
          {
            *v463 = v518 + 1;
            char *v518 = 32;
            v518 = *v463;
            if (*v463 >= v463[3])
            {
              v518 = v463[2];
              *v463 = v518;
            }
          }
          ++v521;
          --v523;
          v524 += 108;
        }
        while (v521 != 32);
        char v527 = 32;
        uint64_t v528 = 1u;
        do
        {
          *v463 = v518 + 1;
          char *v518 = v527;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          char v527 = asc_22BAAA4AA[v528++];
        }
        while (v528 != 8);
        for (jdouble j = 0; jj != 32; ++jj)
        {
          char v530 = 120;
          switch(*(_DWORD *)(v516 + 5420 + 4 * jj))
          {
            case 0:
              char v530 = 77;
              break;
            case 1:
              char v530 = 86;
              break;
            case 2:
              char v530 = 110;
              break;
            case 3:
              break;
            default:
              EvCrt_Illegal_Default("print_line_NavM", 0x66Fu);
              v518 = *v463;
              char v530 = 120;
              break;
          }
          *v463 = v518 + 1;
          char *v518 = v530;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          if ((~(_BYTE)jj & 3) == 0)
          {
            *v463 = v518 + 1;
            char *v518 = 32;
            v518 = *v463;
            if (*v463 >= v463[3])
            {
              v518 = v463[2];
              *v463 = v518;
            }
          }
        }
        uint64_t v531 = 0;
        char v532 = 32;
        do
        {
          *v463 = v518 + 1;
          char *v518 = v532;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          char v532 = asc_22BAAA4C2[++v531];
        }
        while (v531 != 8);
        LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v522 >> 28];
        BYTE1(v1571[0]) = hexTABLE[(v522 >> 24) & 0xF];
        hex6((uint64_t)v463, v522, v1571, 2);
        sprintf_sp1d(v463, *(_DWORD *)(v515 + 8428));
        sprintf_sp1d(v463, *(_DWORD *)(v515 + 8444));
        v518 = *v463;
      }
      else
      {
        char v533 = 71;
        uint64_t v534 = 1u;
        do
        {
          *v463 = v518 + 1;
          char *v518 = v533;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          char v533 = aGpsDisabled[v534++];
        }
        while (v534 != 15);
      }
      char v535 = 32;
      uint64_t v536 = 1u;
      do
      {
        *v463 = v518 + 1;
        char *v518 = v535;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        char v535 = aQzss[v536++];
      }
      while (v536 != 8);
      if (v517[33])
      {
        uint64_t v537 = 0;
        unint64_t v538 = 0;
        v539 = (_DWORD *)(v515 + 8712);
        char v540 = 9;
        do
        {
          if (*(unsigned char *)(*(void *)(v515 + 8568) + v537)) {
            char v541 = 65;
          }
          else {
            char v541 = 45;
          }
          if (*(unsigned char *)(*(void *)(v515 + 8552) + v537) || *(unsigned char *)(*(void *)(v515 + 8560) + v537)) {
            v541 += 24;
          }
          if (!*(unsigned char *)(*(void *)(v515 + 8504) + v537)) {
            v541 += 32;
          }
          if (v541 == 77) {
            char v541 = 46;
          }
          if (*(unsigned char *)(*(void *)(v515 + 8552) + v537)) {
            BOOL v542 = *(unsigned char *)(*(void *)(v515 + 8504) + v537) == 0;
          }
          else {
            BOOL v542 = 1;
          }
          if (!v542)
          {
            if (*v539 == 0xFFFFFF) {
              unint64_t v538 = v538 | (1 << v540);
            }
            else {
              unint64_t v538 = v538;
            }
          }
          *v463 = v518 + 1;
          char *v518 = v541;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          ++v537;
          --v540;
          v539 += 27;
        }
        while (v537 != 10);
        *v463 = v518 + 1;
        char *v518 = 32;
        v543 = *v463;
        if (*v463 >= v463[3])
        {
          v543 = v463[2];
          *v463 = v543;
        }
        for (kdouble k = 0; kk != 40; kk += 4)
        {
          char v545 = 120;
          switch(*(_DWORD *)(v516 + 5936 + kk))
          {
            case 0:
              char v545 = 77;
              break;
            case 1:
              char v545 = 86;
              break;
            case 2:
              char v545 = 110;
              break;
            case 3:
              break;
            default:
              EvCrt_Illegal_Default("print_line_NavM", 0x6A5u);
              v543 = *v463;
              char v545 = 120;
              break;
          }
          *v463 = v543 + 1;
          char *v543 = v545;
          v543 = *v463;
          if (*v463 >= v463[3])
          {
            v543 = v463[2];
            *v463 = v543;
          }
        }
        *v463 = v543 + 1;
        char *v543 = 32;
        if (*v463 >= v463[3]) {
          *v463 = v463[2];
        }
        sprintf_02x(v463, v538);
        v518 = *v463;
      }
      else
      {
        char v546 = 68;
        uint64_t v547 = 1u;
        do
        {
          *v463 = v518 + 1;
          char *v518 = v546;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          char v546 = aDisabled[v547++];
        }
        while (v547 != 11);
      }
      char v548 = 32;
      uint64_t v549 = 1u;
      do
      {
        *v463 = v518 + 1;
        char *v518 = v548;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        char v548 = aSbas[v549++];
      }
      while (v549 != 8);
      if (v517[34])
      {
        uint64_t v550 = 0;
        v464 = "setAssistanceMountState" + 17;
        do
        {
          unint64_t v551 = *(unsigned __int8 *)(v516 + 6316 + v550);
          if (v551 >= 3) {
            char v552 = 90;
          }
          else {
            char v552 = 0x41452Du >> (8 * v551);
          }
          *v463 = v518 + 1;
          char *v518 = v552;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          ++v550;
        }
        while (v550 != 39);
        sprintf_sp1d(v463, *(unsigned __int8 *)(v516 + 6355));
        sprintf_sp1d(v463, *(unsigned __int8 *)(v516 + 6356));
        v518 = *v463;
      }
      else
      {
        char v553 = 68;
        uint64_t v554 = 1u;
        v464 = "tState";
        do
        {
          *v463 = v518 + 1;
          char *v518 = v553;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          char v553 = aDisabled_0[v554++];
        }
        while (v554 != 10);
      }
      *v463 = v518 + 1;
      char *v518 = 10;
      if (*v463 >= v463[3]) {
        *v463 = v463[2];
      }
      GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
      v463 = (char **)a1[46];
      if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
      {
        uint64_t v555 = a1[9];
        uint64_t v556 = a1[7];
        char v557 = 71;
        uint64_t v558 = a1[5];
        uint64_t v559 = 1u;
        v560 = *v463;
        do
        {
          *v463 = v560 + 1;
          char *v560 = v557;
          v560 = *v463;
          if (*v463 >= v463[3])
          {
            v560 = v463[2];
            *v463 = v560;
          }
          char v557 = aGlom[v559++];
        }
        while (v559 != 7);
        if (*(unsigned char *)(v555 + 32))
        {
          uint64_t v561 = 0;
          unint64_t v562 = 0;
          v563 = (_WORD *)(v556 + 11284);
          char v564 = 23;
          do
          {
            if (*(unsigned char *)(*(void *)(v556 + 16288) + v561)) {
              char v565 = 65;
            }
            else {
              char v565 = 45;
            }
            if (*(unsigned char *)(*(void *)(v556 + 16272) + v561) || *(unsigned char *)(*(void *)(v556 + 16280) + v561)) {
              v565 += 24;
            }
            if (!*(unsigned char *)(*(void *)(v556 + 11208) + v561)) {
              v565 += 32;
            }
            if (v565 == 77) {
              char v565 = 46;
            }
            if (*(unsigned char *)(*(void *)(v556 + 16272) + v561)) {
              BOOL v566 = *(unsigned char *)(*(void *)(v556 + 11208) + v561) == 0;
            }
            else {
              BOOL v566 = 1;
            }
            if (!v566)
            {
              if (*v563 == 4095) {
                unint64_t v562 = v562 | (1 << v564);
              }
              else {
                unint64_t v562 = v562;
              }
            }
            *v463 = v560 + 1;
            char *v560 = v565;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~(_BYTE)v561 & 3) == 0)
            {
              *v463 = v560 + 1;
              char *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
            ++v561;
            --v564;
            v563 += 32;
          }
          while (v561 != 24);
          char v567 = 32;
          uint64_t v568 = 1u;
          do
          {
            *v463 = v560 + 1;
            char *v560 = v567;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            char v567 = asc_22BAAA4F7[v568++];
          }
          while (v568 != 18);
          for (mint m = 0; mm != 24; ++mm)
          {
            char v570 = 120;
            switch(*(_DWORD *)(v558 + 5548 + 4 * mm))
            {
              case 0:
                char v570 = 77;
                break;
              case 1:
                char v570 = 86;
                break;
              case 2:
                char v570 = 110;
                break;
              case 3:
                break;
              default:
                EvCrt_Illegal_Default("print_line_GloM", 0x70Eu);
                v560 = *v463;
                char v570 = 120;
                break;
            }
            *v463 = v560 + 1;
            char *v560 = v570;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~((_BYTE)mm + 32) & 3) == 0)
            {
              *v463 = v560 + 1;
              char *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
          }
          uint64_t v571 = 0;
          v464 = "setAssistanceMountState" + 17;
          do
          {
            char v572 = 120;
            switch(*(_DWORD *)(v558 + 6140 + 4 * v571))
            {
              case 0:
                char v572 = 77;
                break;
              case 1:
                char v572 = 86;
                break;
              case 2:
                char v572 = 110;
                break;
              case 3:
                break;
              default:
                EvCrt_Illegal_Default("print_line_GloM", 0x71Du);
                v560 = *v463;
                char v572 = 120;
                break;
            }
            *v463 = v560 + 1;
            char *v560 = v572;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~(_BYTE)v571 & 3) == 0)
            {
              *v463 = v560 + 1;
              char *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
            ++v571;
          }
          while (v571 != 14);
          *v463 = v560 + 1;
          char *v560 = 32;
          if (*v463 >= v463[3]) {
            *v463 = v463[2];
          }
          sprintf_06x(v463, v562);
          v573 = *v463;
          for (nint n = 9; nn > 1; --nn)
          {
            *v463 = v573 + 1;
            char *v573 = 32;
            v573 = *v463;
            if (*v463 >= v463[3])
            {
              v573 = v463[2];
              *v463 = v573;
            }
          }
          sprintf_sgR8(v463, (double)*(int *)(v556 + 16236) * 9.31322575e-10 * 299792458.0);
          v575 = (*v463)++;
          char *v575 = 10;
          if (*v463 >= v463[3]) {
            *v463 = v463[2];
          }
          GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
        }
        else
        {
          char v576 = 68;
          uint64_t v577 = 1u;
          do
          {
            *v463 = v560 + 1;
            char *v560 = v576;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            char v576 = aDisabled_0[v577++];
          }
          while (v577 != 10);
          *v463 = v560 + 1;
          char *v560 = 10;
          if (*v463 >= v463[3]) {
            *v463 = v463[2];
          }
        }
        v578 = (unsigned __int16 *)&unk_26AE65000;
        if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
        {
          v579 = (char **)a1[46];
          uint64_t v580 = a1[6];
          uint64_t v581 = a1[7];
          uint64_t v582 = a1[5];
          uint64_t v583 = a1[29];
          uint64_t v584 = a1[9];
          v585 = *v579;
          char v586 = 71;
          uint64_t v587 = 1u;
          do
          {
            *v579 = v585 + 1;
            char *v585 = v586;
            v585 = *v579;
            if (*v579 >= v579[3])
            {
              v585 = v579[2];
              *v579 = v585;
            }
            char v586 = aGalm[v587++];
          }
          while (v587 != 7);
          if (*(unsigned char *)(v584 + 36))
          {
            uint64_t v588 = 0;
            unint64_t v589 = 0;
            char v590 = 35;
            while (1)
            {
              if (*(unsigned char *)(*(void *)(v581 + 16624) + v588)) {
                char v591 = 65;
              }
              else {
                char v591 = 45;
              }
              if (*(unsigned char *)(*(void *)(v581 + 16608) + v588) || *(unsigned char *)(*(void *)(v581 + 16616) + v588)) {
                v591 += 24;
              }
              if (!*(unsigned char *)(*(void *)(v581 + 16560) + v588)) {
                v591 += 32;
              }
              if (v591 == 77)
              {
                char v591 = 46;
              }
              else if (*(unsigned char *)(v581 + 16700 + v588))
              {
                if (!*(unsigned char *)(*(void *)(v581 + 16608) + v588))
                {
                  if (*(unsigned char *)(*(void *)(v581 + 16616) + v588)) {
                    char v591 = 77;
                  }
                  else {
                    char v591 = 109;
                  }
                  goto LABEL_1083;
                }
                char v591 = 77;
LABEL_1080:
                if (*(unsigned char *)(*(void *)(v581 + 16560) + v588)) {
                  unint64_t v589 = v589 | (1 << v590);
                }
                else {
                  unint64_t v589 = v589;
                }
                goto LABEL_1083;
              }
              if (*(unsigned char *)(*(void *)(v581 + 16608) + v588)) {
                goto LABEL_1080;
              }
LABEL_1083:
              *v579 = v585 + 1;
              char *v585 = v591;
              v585 = *v579;
              if (*v579 >= v579[3])
              {
                v585 = v579[2];
                *v579 = v585;
              }
              if ((~(_BYTE)v588 & 3) == 0)
              {
                *v579 = v585 + 1;
                char *v585 = 32;
                v585 = *v579;
                if (*v579 >= v579[3])
                {
                  v585 = v579[2];
                  *v579 = v585;
                }
              }
              ++v588;
              --v590;
              if (v588 == 36)
              {
                uint64_t v592 = 0;
                char v593 = 32;
                do
                {
                  *v579 = v585 + 1;
                  char *v585 = v593;
                  v585 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v585 = v579[2];
                    *v579 = v585;
                  }
                  char v593 = asc_22BAAA2FA[++v592];
                }
                while (v592 != 2);
                uint64_t v594 = 0;
                uint64_t v595 = v582 + 5644;
                do
                {
                  char v596 = 120;
                  switch(*(_DWORD *)(v595 + 4 * v594))
                  {
                    case 0:
                      char v596 = 77;
                      break;
                    case 1:
                      char v596 = 86;
                      break;
                    case 2:
                      char v596 = 110;
                      break;
                    case 3:
                      break;
                    default:
                      EvCrt_Illegal_Default("print_line_GALM", 0x787u);
                      v585 = *v579;
                      char v596 = 120;
                      break;
                  }
                  *v579 = v585 + 1;
                  char *v585 = v596;
                  v585 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v585 = v579[2];
                    *v579 = v585;
                  }
                  if ((~((_BYTE)v594 + 56) & 3) == 0)
                  {
                    *v579 = v585 + 1;
                    char *v585 = 32;
                    v585 = *v579;
                    if (*v579 >= v579[3])
                    {
                      v585 = v579[2];
                      *v579 = v585;
                    }
                  }
                  ++v594;
                }
                while (v594 != 36);
                char v597 = 32;
                uint64_t v598 = 1u;
                v464 = "setAssistanceMountState" + 17;
                do
                {
                  *v579 = v585 + 1;
                  char *v585 = v597;
                  v585 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v585 = v579[2];
                    *v579 = v585;
                  }
                  char v597 = asc_22BAAA53F[v598++];
                }
                while (v598 != 4);
                LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v589 >> 28];
                BYTE1(v1571[0]) = hexTABLE[(v589 >> 24) & 0xF];
                hex6((uint64_t)v579, v589, v1571, 2);
                sprintf_sp1d(v579, *(_DWORD *)(v581 + 24372));
                double v599 = 0.0;
                if ((*(_DWORD *)(v581 + 24372) - 2) <= 4)
                {
                  double v599 = *(double *)(v581 + 24392);
                  if (*(int *)v580 >= 1)
                  {
                    if (*(unsigned char *)(v580 + 5)) {
                      double v599 = *(double *)(v583 + 608);
                    }
                  }
                }
                sprintf_sgR8(v579, v599 * 299792458.0);
                v600 = (*v579)++;
                char *v600 = 10;
                if (*v579 >= v579[3]) {
                  *v579 = v579[2];
                }
                GNSS_Nav_Debug_Flush_Check((uint64_t)v579);
                v578 = (_WORD *)&unk_26AE65000;
                goto LABEL_1125;
              }
            }
          }
          char v601 = 71;
          uint64_t v602 = 1u;
          do
          {
            *v579 = v585 + 1;
            char *v585 = v601;
            v585 = *v579;
            if (*v579 >= v579[3])
            {
              v585 = v579[2];
              *v579 = v585;
            }
            char v601 = aGalDisabled[v602++];
          }
          while (v602 != 15);
          *v579 = v585 + 1;
          char *v585 = 10;
          v578 = (unsigned __int16 *)&unk_26AE65000;
          if (*v579 >= v579[3]) {
            *v579 = v579[2];
          }
        }
LABEL_1125:
        if (v578[396] >= 2u)
        {
          v603 = (char **)a1[46];
          uint64_t v605 = a1[6];
          v604 = (void *)a1[7];
          v606 = (__int16 *)v604 + 16778;
          v607 = v604 + 3077;
          uint64_t v608 = a1[5];
          uint64_t v609 = a1[9];
          v610 = *v603;
          char v611 = 66;
          uint64_t v612 = 1u;
          do
          {
            *v603 = v610 + 1;
            char *v610 = v611;
            v610 = *v603;
            if (*v603 >= v603[3])
            {
              v610 = v603[2];
              *v603 = v610;
            }
            char v611 = aBdsm[v612++];
          }
          while (v612 != 7);
          if (*(unsigned char *)(v609 + 35))
          {
            unint64_t v613 = 0;
            unint64_t v614 = 0;
            char v615 = 36;
            v616 = v604 + 3077;
            do
            {
              if (v613 < 5) {
                int v617 = -1;
              }
              else {
                int v617 = 0x7FFFFFF;
              }
              if (*(unsigned char *)(v604[3060] + v613)) {
                char v618 = 65;
              }
              else {
                char v618 = 45;
              }
              if (*(unsigned char *)(v604[3058] + v613) || *(unsigned char *)(v604[3059] + v613)) {
                v618 += 24;
              }
              if (!*(unsigned char *)(v604[3052] + v613)) {
                v618 += 32;
              }
              if (v618 == 77) {
                char v618 = 46;
              }
              if (*(unsigned char *)(v604[3058] + v613)) {
                BOOL v619 = *(unsigned char *)(v604[3052] + v613) == 0;
              }
              else {
                BOOL v619 = 1;
              }
              if (!v619 && *v616 == v617) {
                unint64_t v614 = v614 | (1 << v615);
              }
              *v603 = v610 + 1;
              char *v610 = v618;
              v610 = *v603;
              if (*v603 >= v603[3])
              {
                v610 = v603[2];
                *v603 = v610;
              }
              if ((~(_BYTE)v613 & 3) == 0)
              {
                *v603 = v610 + 1;
                char *v610 = 32;
                v610 = *v603;
                if (*v603 >= v603[3])
                {
                  v610 = v603[2];
                  *v603 = v610;
                }
              }
              ++v613;
              --v615;
              v616 += 25;
            }
            while (v613 != 37);
            *v603 = v610 + 1;
            char *v610 = 32;
            v620 = *v603;
            if (*v603 >= v603[3])
            {
              v620 = v603[2];
              *v603 = v620;
            }
            uint64_t v621 = 0;
            uint64_t v622 = v608 + 5788;
            do
            {
              char v623 = 120;
              switch(*(_DWORD *)(v622 + 4 * v621))
              {
                case 0:
                  char v623 = 77;
                  break;
                case 1:
                  char v623 = 86;
                  break;
                case 2:
                  char v623 = 110;
                  break;
                case 3:
                  break;
                default:
                  EvCrt_Illegal_Default("print_line_BDSM", 0x7F3u);
                  v620 = *v603;
                  char v623 = 120;
                  break;
              }
              *v603 = v620 + 1;
              char *v620 = v623;
              v620 = *v603;
              if (*v603 >= v603[3])
              {
                v620 = v603[2];
                *v603 = v620;
              }
              if ((~((_BYTE)v621 + 92) & 3) == 0)
              {
                *v603 = v620 + 1;
                char *v620 = 32;
                v620 = *v603;
                if (*v603 >= v603[3])
                {
                  v620 = v603[2];
                  *v603 = v620;
                }
              }
              ++v621;
            }
            while (v621 != 37);
            *v603 = v620 + 1;
            char *v620 = 32;
            v624 = *v603;
            if (*v603 >= v603[3]) {
              v624 = v603[2];
            }
            *v603 = v624 + 1;
            char *v624 = 32;
            v464 = "setAssistanceMountState" + 17;
            if (*v603 >= v603[3]) {
              *v603 = v603[2];
            }
            LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v614 >> 28];
            BYTE1(v1571[0]) = hexTABLE[(v614 >> 24) & 0xF];
            hex6((uint64_t)v603, v614, v1571, 2);
            sprintf_sp1d(v603, *((_DWORD *)v607 + 2234));
            double v625 = 0.0;
            if ((*((_DWORD *)v607 + 2234) - 2) <= 4)
            {
              double v625 = (double)*v606 * 0.1;
              if (*(int *)v605 >= 1)
              {
                double v626 = *(double *)(v605 + 24) + -14.0;
                if (v626 < 0.0) {
                  double v626 = v626 + 604800.0;
                }
                double v625 = v625 + (double)v606[1] * 0.1 * v626;
              }
            }
            sprintf_sgR8(v603, v625 * 0.299792458);
            v627 = (*v603)++;
            char *v627 = 10;
            if (*v603 >= v603[3]) {
              *v603 = v603[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v603);
            v578 = (_WORD *)&unk_26AE65000;
          }
          else
          {
            char v628 = 66;
            uint64_t v629 = 1u;
            do
            {
              *v603 = v610 + 1;
              char *v610 = v628;
              v610 = *v603;
              if (*v603 >= v603[3])
              {
                v610 = v603[2];
                *v603 = v610;
              }
              char v628 = aBdsDisabled[v629++];
            }
            while (v629 != 15);
            *v603 = v610 + 1;
            char *v610 = 10;
            v578 = (unsigned __int16 *)&unk_26AE65000;
            if (*v603 >= v603[3]) {
              *v603 = v603[2];
            }
          }
        }
        v463 = (char **)a1[46];
        if (v578[396] >= 2u)
        {
          uint64_t v630 = a1[12];
          uint64_t v631 = a1[6];
          char v632 = 83;
          uint64_t v633 = 1u;
          v634 = *v463;
          do
          {
            *v463 = v634 + 1;
            char *v634 = v632;
            v634 = *v463;
            if (*v463 >= v463[3])
            {
              v634 = v463[2];
              *v463 = v634;
            }
            char v632 = aStage[v633++];
          }
          while (v633 != 7);
          uint64_t v635 = v630 + 160;
          uint64_t v636 = 149;
          do
          {
            if (*(_DWORD *)(v635 + 24))
            {
              int v637 = (int)*(double *)(v631 + 24)
                   - *(_DWORD *)v635
                   + 604800 * (*(__int16 *)(v631 + 16) - *(__int16 *)(v635 + 4));
              if (v637 >= 99) {
                int v637 = 99;
              }
              if (v637 <= -99) {
                int v638 = -99;
              }
              else {
                int v638 = v637;
              }
              sprintf_sp1d(v463, v638);
            }
            v635 += 192;
            --v636;
          }
          while (v636);
          v639 = (*v463)++;
          char *v639 = 10;
          if (*v463 >= v463[3]) {
            *v463 = v463[2];
          }
          GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
          v463 = (char **)a1[46];
        }
      }
    }
  }
  v640 = (unsigned __int8 *)a1[10];
  v641 = (double *)a1[29];
  char v642 = 65;
  uint64_t v643 = a1[40];
  uint64_t v644 = 1u;
  v645 = *v463;
  do
  {
    *v463 = v645 + 1;
    char *v645 = v642;
    v645 = *v463;
    if (*v463 >= v463[3])
    {
      v645 = v463[2];
      *v463 = v645;
    }
    char v642 = aAcc[v644++];
  }
  while (v644 != 6);
  sprintf_2d(v463, *((_DWORD *)v640 + 1));
  sprintf_2d(v463, *((_DWORD *)v640 + 2));
  sprintf_2d(v463, *v640);
  sprintf_2d(v463, v640[1]);
  v646 = (*v463)++;
  char *v646 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 102));
  v647 = (*v463)++;
  char *v647 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 103));
  v648 = (*v463)++;
  char *v648 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 104));
  v649 = (*v463)++;
  char *v649 = 32;
  v650 = *v463;
  if (*v463 >= v463[3])
  {
    v650 = v463[2];
    *v463 = v650;
  }
  double v651 = *((double *)v640 + 106);
  double v1531 = *((double *)v464 + 351);
  if (v651 <= v1531 || v651 >= 8999100.0)
  {
    sprintf_ACC(v463, v651);
  }
  else
  {
    double v652 = v651 / 299792.458;
    if (v652 <= 9999.0)
    {
      if (v652 <= 9.9)
      {
        double v889 = v652 * -100.0;
        double v890 = -0.5;
        if (v889 > 0.0) {
          double v890 = 0.5;
        }
        double v891 = v889 + v890;
        if (v891 <= 2147483650.0)
        {
          if (v891 >= -2147483650.0) {
            unsigned int v892 = (int)v891;
          }
          else {
            unsigned int v892 = 0x80000000;
          }
        }
        else
        {
          unsigned int v892 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v463, v892, 3);
      }
      else
      {
        double v886 = -0.5;
        if (v652 < 0.0) {
          double v886 = 0.5;
        }
        double v887 = v886 - v652;
        if (v887 <= 2147483650.0)
        {
          if (v887 >= -2147483650.0) {
            unsigned int v888 = (int)v887;
          }
          else {
            unsigned int v888 = 0x80000000;
          }
        }
        else
        {
          unsigned int v888 = 0x7FFFFFFF;
        }
        sprintf_5d(v463, v888);
      }
    }
    else
    {
      char v653 = 45;
      uint64_t v654 = 1u;
      do
      {
        *v463 = v650 + 1;
        char *v650 = v653;
        v650 = *v463;
        if (*v463 >= v463[3])
        {
          v650 = v463[2];
          *v463 = v650;
        }
        char v653 = a9999[v654++];
      }
      while (v654 != 6);
    }
  }
  v655 = (*v463)++;
  char *v655 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 105));
  v656 = (*v463)++;
  char *v656 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 109));
  v657 = (*v463)++;
  char *v657 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 111));
  v658 = (*v463)++;
  char *v658 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  double v659 = *((double *)v640 + 95) * 100.0;
  if (v659 <= 0.0) {
    double v660 = -0.5;
  }
  else {
    double v660 = 0.5;
  }
  double v661 = v659 + v660;
  if (v661 <= 2147483650.0)
  {
    if (v661 >= -2147483650.0) {
      unsigned int v662 = (int)v661;
    }
    else {
      unsigned int v662 = 0x80000000;
    }
  }
  else
  {
    unsigned int v662 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v662, 3);
  double v663 = *((double *)v640 + 96) * 100.0;
  if (v663 <= 0.0) {
    double v664 = -0.5;
  }
  else {
    double v664 = 0.5;
  }
  double v665 = v663 + v664;
  if (v665 <= 2147483650.0)
  {
    if (v665 >= -2147483650.0) {
      unsigned int v666 = (int)v665;
    }
    else {
      unsigned int v666 = 0x80000000;
    }
  }
  else
  {
    unsigned int v666 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v666, 3);
  double v667 = *((double *)v640 + 97) * 100.0;
  double v668 = -0.5;
  if (v667 > 0.0) {
    double v668 = 0.5;
  }
  double v669 = v667 + v668;
  if (v669 <= 2147483650.0)
  {
    if (v669 >= -2147483650.0) {
      unsigned int v670 = (int)v669;
    }
    else {
      unsigned int v670 = 0x80000000;
    }
  }
  else
  {
    unsigned int v670 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v670, 3);
  v671 = (*v463)++;
  char *v671 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 110));
  uint64_t v672 = 0;
  v673 = *v463;
  char v674 = 32;
  do
  {
    *v463 = v673 + 1;
    char *v673 = v674;
    v673 = *v463;
    if (*v463 >= v463[3])
    {
      v673 = v463[2];
      *v463 = v673;
    }
    char v674 = aEl[++v672];
  }
  while (v672 != 4);
  sprintf_ACC(v463, *((double *)v640 + 112));
  v675 = (*v463)++;
  char *v675 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 113));
  v676 = (*v463)++;
  char *v676 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 114));
  v677 = *v463;
  for (unsigned int i1 = 5; i1 > 1; --i1)
  {
    *v463 = v677 + 1;
    char *v677 = 32;
    v677 = *v463;
    if (*v463 >= v463[3])
    {
      v677 = v463[2];
      *v463 = v677;
    }
  }
  sprintf_ACC(v463, *((double *)v640 + 107));
  v679 = (*v463)++;
  char *v679 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, *((double *)v640 + 108));
  v680 = (*v463)++;
  char *v680 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3056]);
  v681 = (*v463)++;
  char *v681 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3057]);
  v682 = (*v463)++;
  char *v682 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3058]);
  v683 = (*v463)++;
  char *v683 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3059]);
  v684 = (*v463)++;
  char *v684 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3060]);
  v685 = (*v463)++;
  char *v685 = 32;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  sprintf_ACC(v463, v641[3061]);
  uint64_t v686 = 0;
  v687 = *v463;
  char v688 = 32;
  do
  {
    *v463 = v687 + 1;
    char *v687 = v688;
    v687 = *v463;
    if (*v463 >= v463[3])
    {
      v687 = v463[2];
      *v463 = v687;
    }
    char v688 = aNv[++v686];
  }
  while (v686 != 4);
  v689 = (unsigned int *)(v643 + 22132);
  uint64_t v690 = 10;
  do
  {
    if (*v689 && (int)*(v689 - 1) >= 1) {
      sprintf_4d(v463, *v689);
    }
    v689 += 8;
    --v690;
  }
  while (v690);
  v691 = (*v463)++;
  char *v691 = 10;
  if (*v463 >= v463[3]) {
    *v463 = v463[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
  v692 = (char **)a1[46];
  uint64_t v693 = a1[29];
  v694 = (unsigned __int8 *)(v693 + 25052);
  v695 = *v692;
  char v696 = 69;
  uint64_t v697 = 1u;
  do
  {
    *v692 = v695 + 1;
    char *v695 = v696;
    v695 = *v692;
    if (*v692 >= v692[3])
    {
      v695 = v692[2];
      *v692 = v695;
    }
    char v696 = aExtp[v697++];
  }
  while (v697 != 7);
  char Char_Ass_Status_Edit = Get_Char_Ass_Status_Edit(*(_DWORD *)(v693 + 25024));
  v699 = (*v692)++;
  char *v699 = Char_Ass_Status_Edit;
  if (*v692 >= v692[3]) {
    *v692 = v692[2];
  }
  char v700 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v693 + 25040));
  v701 = (*v692)++;
  char *v701 = v700;
  v702 = *v692;
  if (*v692 >= v692[3]) {
    v702 = v692[2];
  }
  *v692 = v702 + 1;
  char *v702 = 32;
  v703 = *v692;
  if (*v692 >= v692[3])
  {
    v703 = v692[2];
    *v692 = v703;
  }
  if (*(unsigned char *)(v693 + 22992) || *(unsigned char *)(v693 + 23008))
  {
    uint64_t v704 = 0;
    char v705 = 72;
    do
    {
      *v692 = v703 + 1;
      char *v703 = v705;
      v703 = *v692;
      if (*v692 >= v692[3])
      {
        v703 = v692[2];
        *v692 = v703;
      }
      char v705 = aHor[++v704];
    }
    while (v704 != 4);
    char v706 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v693 + 22996)];
    *v692 = v703 + 1;
    char *v703 = v706;
    v707 = *v692;
    if (*v692 >= v692[3]) {
      v707 = v692[2];
    }
    uint64_t v708 = 0;
    char v709 = 32;
    do
    {
      *v692 = v707 + 1;
      char *v707 = v709;
      v707 = *v692;
      if (*v692 >= v692[3])
      {
        v707 = v692[2];
        *v692 = v707;
      }
      char v709 = aT[++v708];
    }
    while (v708 != 4);
    char v710 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v693 + 23000)];
    *v692 = v707 + 1;
    char *v707 = v710;
    v711 = *v692;
    if (*v692 >= v692[3]) {
      v711 = v692[2];
    }
    uint64_t v712 = 0;
    char v713 = 32;
    do
    {
      *v692 = v711 + 1;
      char *v711 = v713;
      v711 = *v692;
      if (*v692 >= v692[3])
      {
        v711 = v692[2];
        *v692 = v711;
      }
      char v713 = aC[++v712];
    }
    while (v712 != 4);
    char v714 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v693 + 23004)];
    *v692 = v711 + 1;
    char *v711 = v714;
    v715 = *v692;
    if (*v692 >= v692[3]) {
      v715 = v692[2];
    }
    uint64_t v716 = 0;
    char v717 = 32;
    do
    {
      *v692 = v715 + 1;
      char *v715 = v717;
      v715 = *v692;
      if (*v692 >= v692[3])
      {
        v715 = v692[2];
        *v692 = v715;
      }
      char v717 = aE[++v716];
    }
    while (v716 != 4);
    if (*(unsigned char *)(v693 + 23008))
    {
      LOBYTE(v718) = 49;
      strcpy((char *)v1571, "1");
      uint64_t v719 = 1;
      do
      {
        *v692 = v715 + 1;
        char *v715 = v718;
        v715 = *v692;
        if (*v692 >= v692[3])
        {
          v715 = v692[2];
          *v692 = v715;
        }
        int v718 = *((unsigned __int8 *)v1571 + v719++);
      }
      while (v718);
    }
    else
    {
      *v692 = v715 + 1;
      char *v715 = 45;
      v715 = *v692;
      if (*v692 >= v692[3]) {
        v715 = v692[2];
      }
    }
    for (unsigned int i2 = 4; i2 > 1; --i2)
    {
      *v692 = v715 + 1;
      char *v715 = 32;
      v715 = *v692;
      if (*v692 >= v692[3])
      {
        v715 = v692[2];
        *v692 = v715;
      }
    }
    int v721 = *(_DWORD *)v693 - *(_DWORD *)(v693 + 23012);
    if (v721 >= -999999)
    {
      if (v721 <= 999999) {
        unsigned int v722 = v721 / 1000;
      }
      else {
        unsigned int v722 = 9999;
      }
    }
    else
    {
      unsigned int v722 = -9999;
    }
    sprintf_4d(v692, v722);
    v723 = (*v692)++;
    char *v723 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23040)));
    v724 = (*v692)++;
    char *v724 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23048)));
    v725 = (*v692)++;
    char *v725 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23064)));
    v726 = (*v692)++;
    char *v726 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23072)));
    v727 = (*v692)++;
    char *v727 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, *(double *)(v693 + 23080));
    v728 = (*v692)++;
    char *v728 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, *(double *)(v693 + 23088));
    v729 = (*v692)++;
    char *v729 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, sqrt(fabs(*(double *)(v693 + 23104))));
    v730 = (*v692)++;
    char *v730 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, sqrt(fabs(*(double *)(v693 + 23112))));
    v694 = (unsigned __int8 *)(v693 + 25052);
  }
  if (*(unsigned char *)(v693 + 23120) || *(unsigned char *)(v693 + 23136))
  {
    v731 = *v692;
    char v732 = 32;
    uint64_t v733 = 1u;
    do
    {
      *v692 = v731 + 1;
      char *v731 = v732;
      v731 = *v692;
      if (*v692 >= v692[3])
      {
        v731 = v692[2];
        *v692 = v731;
      }
      char v732 = aVer_0[v733++];
    }
    while (v733 != 7);
    char v734 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v693 + 23124)];
    *v692 = v731 + 1;
    char *v731 = v734;
    v735 = *v692;
    if (*v692 >= v692[3]) {
      v735 = v692[2];
    }
    uint64_t v736 = 0;
    char v737 = 32;
    do
    {
      *v692 = v735 + 1;
      char *v735 = v737;
      v735 = *v692;
      if (*v692 >= v692[3])
      {
        v735 = v692[2];
        *v692 = v735;
      }
      char v737 = aT[++v736];
    }
    while (v736 != 4);
    char v738 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v693 + 23128)];
    *v692 = v735 + 1;
    char *v735 = v738;
    v739 = *v692;
    if (*v692 >= v692[3]) {
      v739 = v692[2];
    }
    uint64_t v740 = 0;
    char v741 = 32;
    do
    {
      *v692 = v739 + 1;
      char *v739 = v741;
      v739 = *v692;
      if (*v692 >= v692[3])
      {
        v739 = v692[2];
        *v692 = v739;
      }
      char v741 = aC[++v740];
    }
    while (v740 != 4);
    char v742 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v693 + 23132)];
    *v692 = v739 + 1;
    char *v739 = v742;
    v743 = *v692;
    if (*v692 >= v692[3]) {
      v743 = v692[2];
    }
    uint64_t v744 = 0;
    char v745 = 32;
    do
    {
      *v692 = v743 + 1;
      char *v743 = v745;
      v743 = *v692;
      if (*v692 >= v692[3])
      {
        v743 = v692[2];
        *v692 = v743;
      }
      char v745 = aE[++v744];
    }
    while (v744 != 4);
    if (*(unsigned char *)(v693 + 23136))
    {
      LOBYTE(v746) = 49;
      strcpy((char *)v1571, "1");
      uint64_t v747 = 1;
      do
      {
        *v692 = v743 + 1;
        char *v743 = v746;
        v743 = *v692;
        if (*v692 >= v692[3])
        {
          v743 = v692[2];
          *v692 = v743;
        }
        int v746 = *((unsigned __int8 *)v1571 + v747++);
      }
      while (v746);
    }
    else
    {
      *v692 = v743 + 1;
      char *v743 = 45;
      v743 = *v692;
      if (*v692 >= v692[3]) {
        v743 = v692[2];
      }
    }
    for (unsigned int i3 = 4; i3 > 1; --i3)
    {
      *v692 = v743 + 1;
      char *v743 = 32;
      v743 = *v692;
      if (*v692 >= v692[3])
      {
        v743 = v692[2];
        *v692 = v743;
      }
    }
    int v749 = *(_DWORD *)v693 - *(_DWORD *)(v693 + 23140);
    if (v749 >= -999999)
    {
      if (v749 <= 999999) {
        unsigned int v750 = v749 / 1000;
      }
      else {
        unsigned int v750 = 9999;
      }
    }
    else
    {
      unsigned int v750 = -9999;
    }
    sprintf_4d(v692, v750);
    v751 = (*v692)++;
    char *v751 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23152)));
    v752 = (*v692)++;
    char *v752 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_ACC(v692, sqrt(*(double *)(v693 + 23160)));
    v753 = (*v692)++;
    char *v753 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, *(double *)(v693 + 23168));
    v754 = (*v692)++;
    char *v754 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    sprintf_sgR8(v692, sqrt(fabs(*(double *)(v693 + 23184))));
  }
  v755 = *v692;
  if (*v694)
  {
    uint64_t v756 = 0;
    char v757 = 32;
    v758 = a1;
    do
    {
      *v692 = v755 + 1;
      char *v755 = v757;
      v755 = *v692;
      if (*v692 >= v692[3])
      {
        v755 = v692[2];
        *v692 = v755;
      }
      char v757 = aTepa[++v756];
    }
    while (v756 != 8);
    sprintf1da(v692, *v694, v1571, 0, 0);
    v759 = (*v692)++;
    char *v759 = 32;
    if (*v692 >= v692[3]) {
      *v692 = v692[2];
    }
    char v760 = Get_Char_Ass_Status_Edit(*((_DWORD *)v694 + 1));
    v761 = (*v692)++;
    char *v761 = v760;
    v762 = *v692;
    if (*v692 >= v692[3]) {
      v762 = v692[2];
    }
    for (unsigned int i4 = 3; i4 > 1; --i4)
    {
      *v692 = v762 + 1;
      char *v762 = 32;
      v762 = *v692;
      if (*v692 >= v692[3])
      {
        v762 = v692[2];
        *v692 = v762;
      }
    }
    sprintf_4d(v692, *((_DWORD *)v694 + 3));
    v755 = *v692;
  }
  else
  {
    v758 = a1;
  }
  *v692 = v755 + 1;
  char *v755 = 10;
  if (*v692 >= v692[3]) {
    *v692 = v692[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v692);
  v764 = (char **)v758[46];
  uint64_t v765 = v758[29];
  v766 = (unsigned __int8 *)(v765 + 24924);
  v767 = (unsigned int *)(v765 + 22720);
  v768 = *v764;
  char v769 = 67;
  uint64_t v770 = 1u;
  do
  {
    *v764 = v768 + 1;
    char *v768 = v769;
    v768 = *v764;
    if (*v764 >= v764[3])
    {
      v768 = v764[2];
      *v764 = v768;
    }
    char v769 = aCtxt[v770++];
  }
  while (v770 != 7);
  uint64_t v771 = 0;
  char v772 = 85;
  do
  {
    *v764 = v768 + 1;
    char *v768 = v772;
    v768 = *v764;
    if (*v764 >= v764[3])
    {
      v768 = v764[2];
      *v764 = v768;
    }
    char v772 = aUac[++v771];
  }
  while (v771 != 4);
  sprintf_2d(v764, v766[16]);
  sprintf_2d(v764, v766[24]);
  v773 = (*v764)++;
  char *v773 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  char v774 = Get_Char_Ass_Status_Edit(*((_DWORD *)v766 + 5));
  v775 = (*v764)++;
  char *v775 = v774;
  v776 = *v764;
  if (*v764 >= v764[3]) {
    v776 = v764[2];
  }
  *v764 = v776 + 1;
  char *v776 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_3f((uint64_t)v764, *((_DWORD *)v766 + 7) / 10, 3);
  v777 = (*v764)++;
  char *v777 = 32;
  v778 = *v764;
  if (*v764 >= v764[3]) {
    v778 = v764[2];
  }
  char v779 = print_line_CTXT(s_GN_Ptrs *)::ch_UAC_TXT[v767[3]];
  *v764 = v778 + 1;
  char *v778 = v779;
  v780 = *v764;
  if (*v764 >= v764[3]) {
    v780 = v764[2];
  }
  *v764 = v780 + 1;
  char *v780 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_1x(v764, v767[5]);
  v781 = (*v764)++;
  char *v781 = 32;
  v782 = *v764;
  if (*v764 >= v764[3]) {
    v782 = v764[2];
  }
  char v783 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v767[4]];
  *v764 = v782 + 1;
  char *v782 = v783;
  v784 = *v764;
  if (*v764 >= v764[3]) {
    v784 = v764[2];
  }
  char v785 = 32;
  uint64_t v786 = 1u;
  do
  {
    *v764 = v784 + 1;
    char *v784 = v785;
    v784 = *v764;
    if (*v764 >= v764[3])
    {
      v784 = v764[2];
      *v764 = v784;
    }
    char v785 = aDms[v786++];
  }
  while (v786 != 8);
  sprintf_2d(v764, *v766);
  sprintf_2d(v764, v766[8]);
  v787 = (*v764)++;
  char *v787 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  char v788 = Get_Char_Ass_Status_Edit(*((_DWORD *)v766 + 1));
  v789 = (*v764)++;
  char *v789 = v788;
  v790 = *v764;
  if (*v764 >= v764[3]) {
    v790 = v764[2];
  }
  *v764 = v790 + 1;
  char *v790 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_3f((uint64_t)v764, *((_DWORD *)v766 + 3) / 10, 3);
  v791 = (*v764)++;
  char *v791 = 32;
  v792 = *v764;
  if (*v764 >= v764[3]) {
    v792 = v764[2];
  }
  char v793 = print_line_CTXT(s_GN_Ptrs *)::ch_DMS_STE[*v767];
  *v764 = v792 + 1;
  char *v792 = v793;
  v794 = *v764;
  if (*v764 >= v764[3]) {
    v794 = v764[2];
  }
  *v764 = v794 + 1;
  char *v794 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_1x(v764, v767[2]);
  v795 = (*v764)++;
  char *v795 = 32;
  v796 = *v764;
  if (*v764 >= v764[3]) {
    v796 = v764[2];
  }
  char v797 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v767[1]];
  *v764 = v796 + 1;
  char *v796 = v797;
  v798 = *v764;
  if (*v764 >= v764[3]) {
    v798 = v764[2];
  }
  char v799 = 32;
  uint64_t v800 = 1u;
  do
  {
    *v764 = v798 + 1;
    char *v798 = v799;
    v798 = *v764;
    if (*v764 >= v764[3])
    {
      v798 = v764[2];
      *v764 = v798;
    }
    char v799 = aFiv[v800++];
  }
  while (v800 != 8);
  sprintf_2d(v764, v766[32]);
  sprintf_2d(v764, v766[40]);
  v801 = (*v764)++;
  char *v801 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  char v802 = Get_Char_Ass_Status_Edit(*((_DWORD *)v766 + 9));
  v803 = (*v764)++;
  char *v803 = v802;
  v804 = *v764;
  if (*v764 >= v764[3]) {
    v804 = v764[2];
  }
  *v764 = v804 + 1;
  char *v804 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_3f((uint64_t)v764, *((_DWORD *)v766 + 11) / 10, 3);
  v805 = (*v764)++;
  char *v805 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_1x(v764, v767[6]);
  v806 = (*v764)++;
  char *v806 = 32;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  sprintf_1x(v764, v767[8]);
  v807 = (*v764)++;
  char *v807 = 32;
  v808 = *v764;
  if (*v764 >= v764[3]) {
    v808 = v764[2];
  }
  char v809 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v767[7]];
  *v764 = v808 + 1;
  char *v808 = v809;
  v810 = *v764;
  if (*v764 >= v764[3]) {
    v810 = v764[2];
  }
  *v764 = v810 + 1;
  char *v810 = 10;
  if (*v764 >= v764[3]) {
    *v764 = v764[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v764);
  v811 = (char **)v758[46];
  uint64_t v812 = v758[29];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    if (!*(unsigned char *)(v812 + 24988)) {
      goto LABEL_1585;
    }
    v813 = *v811;
    char v814 = 77;
    uint64_t v815 = 1u;
    do
    {
      *v811 = v813 + 1;
      char *v813 = v814;
      v813 = *v811;
      if (*v811 >= v811[3])
      {
        v813 = v811[2];
        *v811 = v813;
      }
      char v814 = aMapv[v815++];
    }
    while (v815 != 7);
    char v816 = 83;
    uint64_t v817 = 1u;
    do
    {
      *v811 = v813 + 1;
      char *v813 = v816;
      v813 = *v811;
      if (*v811 >= v811[3])
      {
        v813 = v811[2];
        *v811 = v813;
      }
      char v816 = aStat[v817++];
    }
    while (v817 != 6);
    sprintf_2d(v811, *(unsigned __int8 *)(v812 + 24988));
    sprintf_2d(v811, *(unsigned __int8 *)(v812 + 24996));
    v818 = (*v811)++;
    char *v818 = 32;
    v819 = *v811;
    if (*v811 >= v811[3]) {
      v819 = v811[2];
    }
    *v811 = v819 + 1;
    char *v819 = 101;
    if (*v811 >= v811[3]) {
      *v811 = v811[2];
    }
    char v820 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v812 + 24992));
    v821 = (*v811)++;
    char *v821 = v820;
    v822 = *v811;
    if (*v811 >= v811[3]) {
      v822 = v811[2];
    }
    char v823 = 32;
    uint64_t v824 = 1u;
    do
    {
      *v811 = v822 + 1;
      char *v822 = v823;
      v822 = *v811;
      if (*v811 >= v811[3])
      {
        v822 = v811[2];
        *v811 = v822;
      }
      char v823 = aAge[v824++];
    }
    while (v824 != 6);
    sprintf_6d(v811, *(_DWORD *)(v812 + 25000));
    uint64_t v825 = 0;
    v826 = *v811;
    char v827 = 32;
    do
    {
      *v811 = v826 + 1;
      char *v826 = v827;
      v826 = *v811;
      if (*v811 >= v811[3])
      {
        v826 = v811[2];
        *v811 = v826;
      }
      char v827 = aAt[++v825];
    }
    while (v825 != 4);
    sprintf_sgR8(v811, *(double *)(v812 + 24056));
    uint64_t v828 = 0;
    v829 = *v811;
    char v830 = 32;
    do
    {
      *v811 = v829 + 1;
      char *v829 = v830;
      v829 = *v811;
      if (*v811 >= v811[3])
      {
        v829 = v811[2];
        *v811 = v829;
      }
      char v830 = aCt[++v828];
    }
    while (v828 != 4);
    sprintf_sgR8(v811, *(double *)(v812 + 24064));
    uint64_t v831 = 0;
    v832 = *v811;
    char v833 = 32;
    do
    {
      *v811 = v832 + 1;
      char *v832 = v833;
      v832 = *v811;
      if (*v811 >= v811[3])
      {
        v832 = v811[2];
        *v811 = v832;
      }
      char v833 = aHd[++v831];
    }
    while (v831 != 4);
    sprintf_sgR8(v811, *(double *)(v812 + 24072));
    uint64_t v834 = 0;
    v835 = *v811;
    char v836 = 32;
    do
    {
      *v811 = v835 + 1;
      char *v835 = v836;
      v835 = *v811;
      if (*v811 >= v811[3])
      {
        v835 = v811[2];
        *v811 = v835;
      }
      char v836 = aGs[++v834];
    }
    while (v834 != 4);
    sprintf_sgR8(v811, *(double *)(v812 + 24048));
    v837 = *v811;
    char v838 = 32;
    uint64_t v839 = 1u;
    do
    {
      *v811 = v837 + 1;
      char *v837 = v838;
      v837 = *v811;
      if (*v811 >= v811[3])
      {
        v837 = v811[2];
        *v811 = v837;
      }
      char v838 = aEpa[v839++];
    }
    while (v839 != 6);
    sprintf_sgR8(v811, *(double *)(v812 + 24080));
    v840 = *v811;
    char v841 = 32;
    uint64_t v842 = 1u;
    do
    {
      *v811 = v840 + 1;
      char *v840 = v841;
      v840 = *v811;
      if (*v811 >= v811[3])
      {
        v840 = v811[2];
        *v811 = v840;
      }
      char v841 = aEpc[v842++];
    }
    while (v842 != 6);
    sprintf_sgR8(v811, *(double *)(v812 + 24088));
    v843 = *v811;
    char v844 = 77;
    uint64_t v845 = 1u;
    do
    {
      *v811 = v843 + 1;
      char *v843 = v844;
      v843 = *v811;
      if (*v811 >= v811[3])
      {
        v843 = v811[2];
        *v811 = v843;
      }
      char v844 = aMv[v845++];
    }
    while (v845 != 4);
    sprintf_sgR8(v811, *(double *)(v812 + 23816));
    sprintf_sgR8(v811, *(double *)(v812 + 23824));
    sprintf_sgR8(v811, *(double *)(v812 + 23832));
    v846 = (*v811)++;
    char *v846 = 32;
    if (*v811 >= v811[3]) {
      *v811 = v811[2];
    }
    sprintf1da(v811, *(unsigned __int8 *)(v812 + 23840), v1571, 0, 0);
    sprintf1da(v811, *(unsigned __int8 *)(v812 + 23841), v1571, 0, 0);
    sprintf1da(v811, *(unsigned __int8 *)(v812 + 23842), v1571, 0, 0);
    sprintf1da(v811, *(unsigned __int8 *)(v812 + 23843), v1571, 0, 0);
    sprintf1da(v811, *(unsigned __int8 *)(v812 + 23844), v1571, 0, 0);
    v847 = (*v811)++;
    char *v847 = 32;
    v848 = *v811;
    if (*v811 >= v811[3]) {
      v848 = v811[2];
    }
    if (!*(_DWORD *)(v812 + 24992))
    {
      char v849 = 72;
      uint64_t v850 = 1u;
      do
      {
        *v811 = v848 + 1;
        char *v848 = v849;
        v848 = *v811;
        if (*v811 >= v811[3])
        {
          v848 = v811[2];
          *v811 = v848;
        }
        char v849 = aHpos[v850++];
      }
      while (v850 != 6);
      sprintf1da(v811, *(unsigned __int8 *)(v812 + 24868), v1571, 0, 0);
      v851 = (*v811)++;
      char *v851 = 32;
      v852 = *v811;
      if (*v811 >= v811[3]) {
        v852 = v811[2];
      }
      char v853 = 32;
      uint64_t v854 = 1u;
      do
      {
        *v811 = v852 + 1;
        char *v852 = v853;
        v852 = *v811;
        if (*v811 >= v811[3])
        {
          v852 = v811[2];
          *v811 = v852;
        }
        char v853 = aHpre[v854++];
      }
      while (v854 != 7);
      sprintf_ACC(v811, sqrt(*(double *)(v812 + 23896)));
      v855 = (*v811)++;
      char *v855 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_ACC(v811, sqrt(*(double *)(v812 + 23904)));
      v856 = (*v811)++;
      char *v856 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_ACC(v811, sqrt(*(double *)(v812 + 23920)));
      v857 = (*v811)++;
      char *v857 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_ACC(v811, sqrt(*(double *)(v812 + 23928)));
      v858 = (*v811)++;
      char *v858 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_sgR8(v811, *(double *)(v812 + 23936));
      v859 = (*v811)++;
      char *v859 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_sgR8(v811, *(double *)(v812 + 23944));
      v860 = *v811;
      char v861 = 84;
      uint64_t v862 = 1u;
      do
      {
        *v811 = v860 + 1;
        char *v860 = v861;
        v860 = *v811;
        if (*v811 >= v811[3])
        {
          v860 = v811[2];
          *v811 = v860;
        }
        char v861 = aTrck[v862++];
      }
      while (v862 != 6);
      sprintf1da(v811, *(unsigned __int8 *)(v812 + 24869), v1571, 0, 0);
      v863 = (*v811)++;
      char *v863 = 32;
      v864 = *v811;
      if (*v811 >= v811[3]) {
        v864 = v811[2];
      }
      uint64_t v865 = 0;
      char v866 = 32;
      do
      {
        *v811 = v864 + 1;
        char *v864 = v866;
        v864 = *v811;
        if (*v811 >= v811[3])
        {
          v864 = v811[2];
          *v811 = v864;
        }
        char v866 = aTpre[++v865];
      }
      while (v865 != 8);
      sprintf_ACC(v811, sqrt(*(double *)(v812 + 24008)));
      v867 = (*v811)++;
      char *v867 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      sprintf_sgR8(v811, *(double *)(v812 + 24024));
      v848 = *v811;
    }
    *v811 = v848 + 1;
    char *v848 = 10;
    if (*v811 >= v811[3]) {
      *v811 = v811[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
    v811 = (char **)v758[46];
    uint64_t v812 = v758[29];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
LABEL_1585:
      v868 = (unsigned char *)(v812 + 25084);
      if (!*(unsigned char *)(v812 + 25084) && !*(unsigned char *)(v812 + 25116) && !*(unsigned char *)(v812 + 25100)) {
        goto LABEL_1685;
      }
      v869 = *v811;
      char v870 = 86;
      uint64_t v871 = 1u;
      do
      {
        *v811 = v869 + 1;
        char *v869 = v870;
        v869 = *v811;
        if (*v811 >= v811[3])
        {
          v869 = v811[2];
          *v811 = v869;
        }
        char v870 = aVela[v871++];
      }
      while (v871 != 7);
      uint64_t v872 = 0;
      char v873 = 65;
      do
      {
        *v811 = v869 + 1;
        char *v869 = v873;
        v869 = *v811;
        if (*v811 >= v811[3])
        {
          v869 = v811[2];
          *v811 = v869;
        }
        char v873 = aAtv[++v872];
      }
      while (v872 != 4);
      sprintf_2d(v811, *v868);
      sprintf_2d(v811, *(unsigned __int8 *)(v812 + 25092));
      v874 = (*v811)++;
      char *v874 = 32;
      v875 = *v811;
      if (*v811 >= v811[3]) {
        v875 = v811[2];
      }
      *v811 = v875 + 1;
      char *v875 = 101;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      char v876 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v812 + 25088));
      v877 = (*v811)++;
      char *v877 = v876;
      v878 = *v811;
      if (*v811 >= v811[3]) {
        v878 = v811[2];
      }
      char v879 = 32;
      uint64_t v880 = 1u;
      do
      {
        *v811 = v878 + 1;
        char *v878 = v879;
        v878 = *v811;
        if (*v811 >= v811[3])
        {
          v878 = v811[2];
          *v811 = v878;
        }
        char v879 = aAge[v880++];
      }
      while (v880 != 6);
      sprintf_6d(v811, *(_DWORD *)(v812 + 25096));
      v881 = (*v811)++;
      char *v881 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      if (*v868)
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_AT_Vel(120000, (uint64_t)v1571);
        sprintf_sgR8(v811, *((double *)v1571 + 1));
        v882 = *v811;
        char v883 = 32;
        uint64_t v884 = 1u;
        do
        {
          *v811 = v882 + 1;
          char *v882 = v883;
          v882 = *v811;
          if (*v811 >= v811[3])
          {
            v882 = v811[2];
            *v811 = v882;
          }
          char v883 = aRms[v884++];
        }
        while (v884 != 6);
        double v885 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v811, 0.0);
        v893 = *v811;
        char v894 = 32;
        uint64_t v895 = 1u;
        do
        {
          *v811 = v893 + 1;
          char *v893 = v894;
          v893 = *v811;
          if (*v811 >= v811[3])
          {
            v893 = v811[2];
            *v811 = v893;
          }
          char v894 = aRms[v895++];
        }
        while (v895 != 6);
        double v885 = 0.0;
      }
      sprintf_sgR8(v811, v885);
      v896 = *v811;
      char v897 = 32;
      uint64_t v898 = 1u;
      do
      {
        *v811 = v896 + 1;
        char *v896 = v897;
        v896 = *v811;
        if (*v811 >= v811[3])
        {
          v896 = v811[2];
          *v811 = v896;
        }
        char v897 = aHed[v898++];
      }
      while (v898 != 6);
      sprintf_2d(v811, *(unsigned __int8 *)(v812 + 25116));
      sprintf_2d(v811, *(unsigned __int8 *)(v812 + 25124));
      v899 = (*v811)++;
      char *v899 = 32;
      v900 = *v811;
      if (*v811 >= v811[3]) {
        v900 = v811[2];
      }
      *v811 = v900 + 1;
      char *v900 = 101;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      char v901 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v812 + 25120));
      v902 = (*v811)++;
      char *v902 = v901;
      v903 = *v811;
      if (*v811 >= v811[3]) {
        v903 = v811[2];
      }
      char v904 = 32;
      uint64_t v905 = 1u;
      do
      {
        *v811 = v903 + 1;
        char *v903 = v904;
        v903 = *v811;
        if (*v811 >= v811[3])
        {
          v903 = v811[2];
          *v811 = v903;
        }
        char v904 = aAge[v905++];
      }
      while (v905 != 6);
      sprintf_6d(v811, *(_DWORD *)(v812 + 25128));
      v906 = (*v811)++;
      char *v906 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      if (*(unsigned char *)(v812 + 25116))
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_Heading(120000, (uint64_t)v1571);
        sprintf_sgR8(v811, *((double *)v1571 + 1));
        v907 = *v811;
        char v908 = 32;
        uint64_t v909 = 1u;
        do
        {
          *v811 = v907 + 1;
          char *v907 = v908;
          v907 = *v811;
          if (*v811 >= v811[3])
          {
            v907 = v811[2];
            *v811 = v907;
          }
          char v908 = aRms[v909++];
        }
        while (v909 != 6);
        double v910 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v811, 0.0);
        v911 = *v811;
        char v912 = 32;
        uint64_t v913 = 1u;
        do
        {
          *v811 = v911 + 1;
          char *v911 = v912;
          v911 = *v811;
          if (*v811 >= v811[3])
          {
            v911 = v811[2];
            *v811 = v911;
          }
          char v912 = aRms[v913++];
        }
        while (v913 != 6);
        double v910 = 0.0;
      }
      sprintf_sgR8(v811, v910);
      v914 = *v811;
      char v915 = 32;
      uint64_t v916 = 1u;
      do
      {
        *v811 = v914 + 1;
        char *v914 = v915;
        v914 = *v811;
        if (*v811 >= v811[3])
        {
          v914 = v811[2];
          *v811 = v914;
        }
        char v915 = aVvl[v916++];
      }
      while (v916 != 6);
      sprintf_2d(v811, *(unsigned __int8 *)(v812 + 25100));
      sprintf_2d(v811, *(unsigned __int8 *)(v812 + 25108));
      v917 = (*v811)++;
      char *v917 = 32;
      v918 = *v811;
      if (*v811 >= v811[3]) {
        v918 = v811[2];
      }
      *v811 = v918 + 1;
      char *v918 = 101;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      char v919 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v812 + 25104));
      v920 = (*v811)++;
      char *v920 = v919;
      v921 = *v811;
      if (*v811 >= v811[3]) {
        v921 = v811[2];
      }
      char v922 = 32;
      uint64_t v923 = 1u;
      do
      {
        *v811 = v921 + 1;
        char *v921 = v922;
        v921 = *v811;
        if (*v811 >= v811[3])
        {
          v921 = v811[2];
          *v811 = v921;
        }
        char v922 = aAge[v923++];
      }
      while (v923 != 6);
      sprintf_6d(v811, *(_DWORD *)(v812 + 25112));
      v924 = (*v811)++;
      char *v924 = 32;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      if (*(unsigned char *)(v812 + 25100))
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_V_Vel(120000, (uint64_t)v1571);
        sprintf_sgR8(v811, *((double *)v1571 + 1));
        v925 = *v811;
        char v926 = 32;
        uint64_t v927 = 1u;
        do
        {
          *v811 = v925 + 1;
          char *v925 = v926;
          v925 = *v811;
          if (*v811 >= v811[3])
          {
            v925 = v811[2];
            *v811 = v925;
          }
          char v926 = aRms[v927++];
        }
        while (v927 != 6);
        double v928 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v811, 0.0);
        v929 = *v811;
        char v930 = 32;
        uint64_t v931 = 1u;
        do
        {
          *v811 = v929 + 1;
          char *v929 = v930;
          v929 = *v811;
          if (*v811 >= v811[3])
          {
            v929 = v811[2];
            *v811 = v929;
          }
          char v930 = aRms[v931++];
        }
        while (v931 != 6);
        double v928 = 0.0;
      }
      sprintf_sgR8(v811, v928);
      v932 = (*v811)++;
      char *v932 = 10;
      if (*v811 >= v811[3]) {
        *v811 = v811[2];
      }
      GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
      v811 = (char **)v758[46];
      uint64_t v812 = v758[29];
      if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
      {
LABEL_1685:
        uint64_t v933 = v758[22];
        v934 = *v811;
        char v935 = 65;
        uint64_t v936 = 1u;
        do
        {
          *v811 = v934 + 1;
          char *v934 = v935;
          v934 = *v811;
          if (*v811 >= v811[3])
          {
            v934 = v811[2];
            *v811 = v934;
          }
          char v935 = aApa[v936++];
        }
        while (v936 != 6);
        if (*(unsigned char *)(v812 + 23616) || !*(unsigned char *)(v812 + 23120))
        {
          sprintf_2d(v811, *(unsigned __int8 *)(v812 + 23616));
          sprintf_sgR8(v811, *(double *)(v812 + 23640));
          sprintf_sgR8(v811, sqrt(*(double *)(v812 + 23648)));
          uint64_t v937 = 23664;
        }
        else
        {
          sprintf_2d(v811, *(_DWORD *)(v812 + 23124) + 1);
          sprintf_sgR8(v811, *(double *)(v812 + 23144));
          sprintf_sgR8(v811, sqrt(*(double *)(v812 + 23152)));
          uint64_t v937 = 23168;
        }
        sprintf_sgR8(v811, *(double *)(v812 + v937));
        v938 = *v811;
        char v939 = 32;
        uint64_t v940 = 1u;
        do
        {
          *v811 = v938 + 1;
          char *v938 = v939;
          v938 = *v811;
          if (*v811 >= v811[3])
          {
            v938 = v811[2];
            *v811 = v938;
          }
          char v939 = aVva[v940++];
        }
        while (v940 != 7);
        sprintf_2d(v811, *(unsigned __int8 *)(v812 + 23544));
        sprintf_sgR8(v811, *(double *)(v812 + 23568));
        sprintf_sgR8(v811, sqrt(*(double *)(v812 + 23576)));
        sprintf_sgR8(v811, *(double *)(v812 + 23592));
        uint64_t v941 = 0;
        v942 = *v811;
        char v943 = 32;
        do
        {
          *v811 = v942 + 1;
          char *v942 = v943;
          v942 = *v811;
          if (*v811 >= v811[3])
          {
            v942 = v811[2];
            *v811 = v942;
          }
          char v943 = aDy[++v941];
        }
        while (v941 != 4);
        int v944 = *(_DWORD *)(v933 + 20);
        if (v944 >= 0) {
          unsigned int v945 = *(_DWORD *)(v933 + 20);
        }
        else {
          unsigned int v945 = -v944;
        }
        sprintf1da(v811, v945, v1571, 0, v944 >> 31);
        uint64_t v946 = 0;
        v947 = *v811;
        char v948 = 32;
        do
        {
          *v811 = v947 + 1;
          char *v947 = v948;
          v947 = *v811;
          if (*v811 >= v811[3])
          {
            v947 = v811[2];
            *v811 = v947;
          }
          char v948 = aT0[++v946];
        }
        while (v946 != 4);
        sprintf_1u(v811, *(_DWORD *)(v933 + 26996));
        LODWORD(v949) = *(_DWORD *)(v812 + 25364);
        sprintf_sgR8(v811, (double)v949);
        v950 = (*v811)++;
        char *v950 = 10;
        if (*v811 >= v811[3]) {
          *v811 = v811[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
        v811 = (char **)v758[46];
        uint64_t v812 = v758[29];
        if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
        {
          uint64_t v951 = 0;
          v952 = (unsigned __int16 *)(v758[22] + 10998);
          uint64_t v953 = v758[9];
          uint64_t v954 = v758[10];
          v955 = *v811;
          char v956 = 83;
          do
          {
            *v811 = v955 + 1;
            char *v955 = v956;
            v955 = *v811;
            if (*v811 >= v811[3])
            {
              v955 = v811[2];
              *v811 = v955;
            }
            char v956 = aSigs[++v951];
          }
          while (v951 != 4);
          sprintf_sgR8(v811, *(double *)(v954 + 1976));
          sprintf_sgR8(v811, *(double *)(v954 + 1984));
          sprintf_sgR8(v811, *(double *)(v954 + 2000));
          sprintf_sgR8(v811, *(double *)(v954 + 2008));
          sprintf_sgR8(v811, *(double *)(v954 + 2024));
          sprintf_sgR8(v811, *(double *)(v954 + 2032));
          v957 = *v811;
          char v958 = 32;
          uint64_t v959 = 1u;
          do
          {
            *v811 = v957 + 1;
            char *v957 = v958;
            v957 = *v811;
            if (*v811 >= v811[3])
            {
              v957 = v811[2];
              *v811 = v957;
            }
            char v958 = aEc[v959++];
          }
          while (v959 != 4);
          if (*(unsigned __int16 *)(v954 + 1992) >= 0x270Fu) {
            unsigned int v960 = 9999;
          }
          else {
            unsigned int v960 = *(unsigned __int16 *)(v954 + 1992);
          }
          sprintf_5d(v811, v960);
          if (*(unsigned __int16 *)(v954 + 2016) >= 0x270Fu) {
            unsigned int v961 = 9999;
          }
          else {
            unsigned int v961 = *(unsigned __int16 *)(v954 + 2016);
          }
          sprintf_5d(v811, v961);
          if (*(unsigned __int16 *)(v954 + 2040) >= 0x270Fu) {
            unsigned int v962 = 9999;
          }
          else {
            unsigned int v962 = *(unsigned __int16 *)(v954 + 2040);
          }
          sprintf_5d(v811, v962);
          uint64_t v963 = 0;
          v964 = *v811;
          char v965 = 32;
          do
          {
            *v811 = v964 + 1;
            char *v964 = v965;
            v964 = *v811;
            if (*v811 >= v811[3])
            {
              v964 = v811[2];
              *v811 = v964;
            }
            char v965 = aJn0[++v963];
          }
          while (v963 != 8);
          uint64_t v966 = 0;
          char v967 = 32;
          do
          {
            *v811 = v964 + 1;
            char *v964 = v967;
            v964 = *v811;
            if (*v811 >= v811[3])
            {
              v964 = v811[2];
              *v811 = v964;
            }
            char v967 = aNaEc[++v966];
          }
          while (v966 != 8);
          sprintf1da(v811, v952[1], v1571, 0, 0);
          v968 = (*v811)++;
          char *v968 = 32;
          if (*v811 >= v811[3]) {
            *v811 = v811[2];
          }
          sprintf1da(v811, v952[2], v1571, 0, 0);
          v969 = (*v811)++;
          char *v969 = 32;
          if (*v811 >= v811[3]) {
            *v811 = v811[2];
          }
          sprintf1da(v811, *v952, v1571, 0, 0);
          v970 = (*v811)++;
          char *v970 = 32;
          v971 = *v811;
          if (*v811 >= v811[3])
          {
            v971 = v811[2];
            *v811 = v971;
          }
          if (*(int *)(v812 + 24824) <= 0)
          {
            char v976 = 32;
            uint64_t v977 = 1u;
            do
            {
              *v811 = v971 + 1;
              char *v971 = v976;
              v971 = *v811;
              if (*v811 >= v811[3])
              {
                v971 = v811[2];
                *v811 = v971;
              }
              char v976 = aXXXX[v977++];
            }
            while (v977 != 10);
          }
          else
          {
            sprintf_2d(v811, (int)*(double *)(v812 + 23080));
            v972 = (*v811)++;
            char *v972 = 32;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            sprintf_2d(v811, (int)*(double *)(v812 + 23088));
            v973 = (*v811)++;
            char *v973 = 32;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            sprintf_2d(v811, (int)sqrt(*(double *)(v812 + 23040)));
            v974 = (*v811)++;
            char *v974 = 32;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            sprintf_2d(v811, (int)sqrt(*(double *)(v812 + 23048)));
            v975 = (*v811)++;
            char *v975 = 32;
            v971 = *v811;
            if (*v811 >= v811[3])
            {
              v971 = v811[2];
              *v811 = v971;
            }
          }
          if (*(int *)(v812 + 24828) <= 0)
          {
            char v980 = 32;
            uint64_t v981 = 1u;
            do
            {
              *v811 = v971 + 1;
              char *v971 = v980;
              v971 = *v811;
              if (*v811 >= v811[3])
              {
                v971 = v811[2];
                *v811 = v971;
              }
              char v980 = aXX[v981++];
            }
            while (v981 != 6);
          }
          else
          {
            sprintf_2d(v811, (int)*(double *)(v812 + 23168));
            v978 = (*v811)++;
            char *v978 = 32;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            sprintf_2d(v811, (int)sqrt(*(double *)(v812 + 23152)));
            v979 = (*v811)++;
            char *v979 = 32;
            v971 = *v811;
            if (*v811 >= v811[3])
            {
              v971 = v811[2];
              *v811 = v971;
            }
          }
          if (*(int *)(v812 + 24816) <= 0)
          {
            char v984 = 32;
            uint64_t v985 = 1u;
            do
            {
              *v811 = v971 + 1;
              char *v971 = v984;
              v971 = *v811;
              if (*v811 >= v811[3])
              {
                v971 = v811[2];
                *v811 = v971;
              }
              char v984 = aXX[v985++];
            }
            while (v985 != 6);
          }
          else
          {
            sprintf_sgR8(v811, *(double *)(v812 + 22968));
            v982 = (*v811)++;
            char *v982 = 32;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            sprintf_2d(v811, (int)sqrt(*(double *)(v812 + 22952)));
            v983 = (*v811)++;
            char *v983 = 32;
            v971 = *v811;
            if (*v811 >= v811[3]) {
              v971 = v811[2];
            }
          }
          uint64_t v986 = 0;
          char v987 = 32;
          do
          {
            *v811 = v971 + 1;
            char *v971 = v987;
            v971 = *v811;
            if (*v811 >= v811[3])
            {
              v971 = v811[2];
              *v811 = v971;
            }
            char v987 = aEs_0[++v986];
          }
          while (v986 != 4);
          char v988 = 48;
          switch(*(_DWORD *)(v953 + 60))
          {
            case 0:
              break;
            case 1:
              char v988 = 49;
              break;
            case 2:
              char v988 = 50;
              break;
            case 3:
              char v988 = 51;
              break;
            case 4:
              char v988 = 52;
              break;
            case 5:
              char v988 = 53;
              break;
            case 6:
              char v988 = 54;
              break;
            case 7:
              char v988 = 55;
              break;
            default:
              EvCrt_Illegal_Default("Get_Char_CTXT_SES", 0x11ACu);
              v971 = *v811;
              char v988 = 45;
              break;
          }
          *v811 = v971 + 1;
          char *v971 = v988;
          v989 = *v811;
          if (*v811 >= v811[3]) {
            v989 = v811[2];
          }
          *v811 = v989 + 1;
          char *v989 = 10;
          if (*v811 >= v811[3]) {
            *v811 = v811[2];
          }
          GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
          v811 = (char **)v758[46];
          uint64_t v812 = v758[29];
          if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
          {
            uint64_t v990 = 0;
            v991 = (unsigned __int8 *)v758[13];
            v992 = (double *)v758[22];
            unsigned int v993 = *(_DWORD *)v758;
            char v994 = 86;
            v995 = *v811;
            do
            {
              *v811 = v995 + 1;
              char *v995 = v994;
              v995 = *v811;
              if (*v811 >= v811[3])
              {
                v995 = v811[2];
                *v811 = v995;
              }
              char v994 = aVarf[++v990];
            }
            while (v990 != 4);
            sprintf_sgR8(v811, *(double *)(v812 + 2840));
            sprintf_sgR8(v811, v992[1361]);
            sprintf_sgR8(v811, *(double *)(v812 + 8416));
            sprintf_sgR8(v811, v992[1364]);
            sprintf_sgR8(v811, *(double *)(v812 + 13992));
            sprintf_sgR8(v811, v992[1367]);
            uint64_t v996 = 0;
            v997 = *v811;
            char v998 = 32;
            do
            {
              *v811 = v997 + 1;
              char *v997 = v998;
              v997 = *v811;
              if (*v811 >= v811[3])
              {
                v997 = v811[2];
                *v811 = v997;
              }
              char v998 = aS[++v996];
            }
            while (v996 != 2);
            sprintf_3d(v811, v993);
            v999 = *v811;
            char v1000 = 32;
            uint64_t v1001 = 1u;
            do
            {
              *v811 = v999 + 1;
              char *v999 = v1000;
              v999 = *v811;
              if (*v811 >= v811[3])
              {
                v999 = v811[2];
                *v811 = v999;
              }
              char v1000 = aI[v1001++];
            }
            while (v1001 != 4);
            double v1002 = *(double *)(v812 + 656) * 10.0;
            double v1003 = -0.5;
            if (v1002 > 0.0) {
              double v1003 = 0.5;
            }
            double v1004 = v1002 + v1003;
            if (v1004 <= 2147483650.0)
            {
              if (v1004 >= -2147483650.0) {
                unsigned int v1005 = (int)v1004;
              }
              else {
                unsigned int v1005 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1005 = 0x7FFFFFFF;
            }
            sprintf_2f((uint64_t)v811, v1005);
            int v1006 = *(_DWORD *)(v812 + 44);
            if (v1006 > -10)
            {
              v1007 = *v811;
              char v1010 = 32;
              if (v1006 <= 99)
              {
                uint64_t v1012 = 1u;
                do
                {
                  *v811 = v1007 + 1;
                  char *v1007 = v1010;
                  v1007 = *v811;
                  if (*v811 >= v811[3])
                  {
                    v1007 = v811[2];
                    *v811 = v1007;
                  }
                  char v1010 = aTs[v1012++];
                }
                while (v1012 != 4);
                sprintf_sp1d(v811, *(_DWORD *)(v812 + 44));
                v1007 = *v811;
              }
              else
              {
                uint64_t v1011 = 1u;
                do
                {
                  *v811 = v1007 + 1;
                  char *v1007 = v1010;
                  v1007 = *v811;
                  if (*v811 >= v811[3])
                  {
                    v1007 = v811[2];
                    *v811 = v1007;
                  }
                  char v1010 = aTs99[v1011++];
                }
                while (v1011 != 7);
              }
            }
            else
            {
              v1007 = *v811;
              char v1008 = 32;
              uint64_t v1009 = 1u;
              do
              {
                *v811 = v1007 + 1;
                char *v1007 = v1008;
                v1007 = *v811;
                if (*v811 >= v811[3])
                {
                  v1007 = v811[2];
                  *v811 = v1007;
                }
                char v1008 = aTs9[v1009++];
              }
              while (v1009 != 7);
            }
            uint64_t v1013 = 0;
            char v1014 = 32;
            do
            {
              *v811 = v1007 + 1;
              char *v1007 = v1014;
              v1007 = *v811;
              if (*v811 >= v811[3])
              {
                v1007 = v811[2];
                *v811 = v1007;
              }
              char v1014 = aNf_0[++v1013];
            }
            while (v1013 != 4);
            sprintf_sp1d(v811, v991[72]);
            sprintf_sp1d(v811, v991[73]);
            sprintf_sp1d(v811, v991[74]);
            v1015 = (*v811)++;
            char *v1015 = 10;
            if (*v811 >= v811[3]) {
              *v811 = v811[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
            v811 = (char **)v758[46];
            uint64_t v812 = v758[29];
            if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
            {
              v1016 = *v811;
              char v1017 = 79;
              uint64_t v1018 = 1u;
              do
              {
                *v811 = v1016 + 1;
                char *v1016 = v1017;
                v1016 = *v811;
                if (*v811 >= v811[3])
                {
                  v1016 = v811[2];
                  *v811 = v1016;
                }
                char v1017 = aOrigSig[v1018++];
              }
              while (v1018 != 10);
              uint64_t v1019 = 0;
              uint64_t v1020 = v812 + 24496;
              do
              {
                sprintf_sgR8F(v811, sqrt(*(double *)(v1020 + v1019)));
                v1019 += 8;
              }
              while (v1019 != 88);
              v1021 = (*v811)++;
              char *v1021 = 10;
              if (*v811 >= v811[3]) {
                *v811 = v811[2];
              }
              GNSS_Nav_Debug_Flush_Check((uint64_t)v811);
              v811 = (char **)v758[46];
              uint64_t v812 = v758[29];
            }
          }
        }
      }
    }
  }
  v1022 = *v811;
  char v1023 = 83;
  uint64_t v1024 = 1u;
  do
  {
    *v811 = v1022 + 1;
    char *v1022 = v1023;
    v1022 = *v811;
    if (*v811 >= v811[3])
    {
      v1022 = v811[2];
      *v811 = v1022;
    }
    char v1023 = aSvecCor[v1024++];
  }
  while (v1024 != 10);
  for (uint64_t i5 = 0; i5 != 88; i5 += 8)
    sprintf_sgR8F(v811, *(double *)(v812 + 25272 + i5));
  v1026 = *v811;
  for (unsigned int i6 = 3; i6 > 1; --i6)
  {
    *v811 = v1026 + 1;
    char *v1026 = 32;
    v1026 = *v811;
    if (*v811 >= v811[3])
    {
      v1026 = v811[2];
      *v811 = v1026;
    }
  }
  uint64_t v1028 = 0;
  uint64_t v1029 = v812 + 25166;
  do
    sprintf1da(v811, *(unsigned __int8 *)(v1029 + v1028++), v1571, 0, 0);
  while (v1028 != 11);
  v1030 = (*v811)++;
  char *v1030 = 10;
  if (*v811 >= v811[3]) {
    *v811 = v811[2];
  }
  v1031 = (char **)v758[46];
  uint64_t v1032 = v758[29];
  v1033 = *v1031;
  char v1034 = 83;
  uint64_t v1035 = 1u;
  do
  {
    *v1031 = v1033 + 1;
    char *v1033 = v1034;
    v1033 = *v1031;
    if (*v1031 >= v1031[3])
    {
      v1033 = v1031[2];
      *v1031 = v1033;
    }
    char v1034 = aSvecSig[v1035++];
  }
  while (v1035 != 10);
  uint64_t v1036 = 0;
  uint64_t v1037 = v1032 + 24136;
  do
  {
    sprintf_sgR8F(v1031, sqrt(*(double *)(v1037 + v1036)));
    v1036 += 8;
  }
  while (v1036 != 88);
  v1038 = (*v1031)++;
  char *v1038 = 10;
  if (*v1031 >= v1031[3]) {
    *v1031 = v1031[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1031);
  v1039 = (char **)v758[46];
  uint64_t v1040 = v758[29];
  if ((unsigned __int16)g_Enable_Nav_Debug < 2u) {
    goto LABEL_1916;
  }
  uint64_t v1041 = v758[22];
  if (*(_DWORD *)(v1041 + 144))
  {
LABEL_1885:
    uint64_t v1048 = v758[10];
    v1049 = *v1039;
    char v1050 = 119;
    uint64_t v1051 = 1u;
    do
    {
      *v1039 = v1049 + 1;
      char *v1049 = v1050;
      v1049 = *v1039;
      if (*v1039 >= v1039[3])
      {
        v1049 = v1039[2];
        *v1039 = v1049;
      }
      char v1050 = aWrdop[v1051++];
    }
    while (v1051 != 10);
    sprintf_sgR8F(v1039, sqrt(*(double *)(v1041 + 7248)));
    for (uint64_t i7 = 0; i7 != 24; i7 += 8)
      sprintf_sgR8(v1039, sqrt(*(double *)(v1041 + 7256 + i7)));
    sprintf_sgR8(v1039, *(double *)(v1041 + 7280));
    v1053 = *v1039;
    char v1054 = 32;
    uint64_t v1055 = 1u;
    do
    {
      *v1039 = v1053 + 1;
      char *v1053 = v1054;
      v1053 = *v1039;
      if (*v1039 >= v1039[3])
      {
        v1053 = v1039[2];
        *v1039 = v1053;
      }
      char v1054 = aPrefc[v1055++];
    }
    while (v1055 != 8);
    sprintf_LaLo(v1039, v1040 + 31296);
    sprintf_sgR8(v1039, *(double *)(v1040 + 31312));
    sprintf_sgR8(v1039, *(double *)(v1040 + 31312) - *(double *)(v1048 + 232));
    v1056 = (*v1039)++;
    char *v1056 = 32;
    if (*v1039 >= v1039[3]) {
      *v1039 = v1039[2];
    }
    v1057 = (double *)(v1041 + 27072);
    uint64_t v1058 = 3912;
    while (1)
    {
      double v1059 = *(double *)(v1040 + 8 * v1058) - *(v1057 - 5);
      if (v1058 == 3912) {
        goto LABEL_1903;
      }
      if (v1058 == 3913) {
        break;
      }
LABEL_1904:
      sprintf_6d(v1039, (int)v1059);
      v1061 = (*v1039)++;
      char *v1061 = 32;
      v1062 = *v1039;
      if (*v1039 >= v1039[3])
      {
        v1062 = v1039[2];
        *v1039 = v1062;
      }
      ++v1058;
      ++v1057;
      if (v1058 == 3915)
      {
        char v1063 = 32;
        uint64_t v1064 = 1u;
        do
        {
          *v1039 = v1062 + 1;
          char *v1062 = v1063;
          v1062 = *v1039;
          if (*v1039 >= v1039[3])
          {
            v1062 = v1039[2];
            *v1039 = v1062;
          }
          char v1063 = aVel[v1064++];
        }
        while (v1064 != 6);
        uint64_t v1065 = 0;
        uint64_t v1066 = v1040 + 31320;
        do
        {
          sprintf_sgR8(v1039, *(double *)(v1066 + v1065));
          v1065 += 8;
        }
        while (v1065 != 24);
        v1067 = (*v1039)++;
        char *v1067 = 10;
        if (*v1039 >= v1039[3]) {
          *v1039 = v1039[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1039);
        v1039 = (char **)v758[46];
        uint64_t v1040 = v758[29];
        goto LABEL_1916;
      }
    }
    double v1060 = -6.28318531;
    if (v1059 >= 3.14159265 || (double v1060 = 6.28318531, v1059 < -3.14159265)) {
      double v1059 = v1059 + v1060;
    }
LABEL_1903:
    double v1059 = v1059 * *v1057;
    goto LABEL_1904;
  }
  v1042 = *v1039;
  char v1043 = 81;
  uint64_t v1044 = 1u;
  do
  {
    *v1039 = v1042 + 1;
    char *v1042 = v1043;
    v1042 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1042 = v1039[2];
      *v1039 = v1042;
    }
    char v1043 = aQBSize[v1044++];
  }
  while (v1044 != 10);
  uint64_t v1045 = 0;
  uint64_t v1046 = v1041 + 184;
  do
  {
    sprintf_sgR8F(v1039, sqrt(*(double *)(v1046 + v1045)));
    v1045 += 8;
  }
  while (v1045 != 48);
  sprintf_sgR8F(v1039, *(double *)(v1040 + 20016));
  sprintf_sgR8F(v1039, *(double *)(v1040 + 20024));
  v1047 = (*v1039)++;
  char *v1047 = 10;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1039);
  v1039 = (char **)v758[46];
  uint64_t v1040 = v758[29];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    uint64_t v1041 = v758[22];
    goto LABEL_1885;
  }
LABEL_1916:
  uint64_t v1068 = v758[9];
  v1069 = *v1039;
  char v1070 = 67;
  uint64_t v1071 = 1u;
  do
  {
    *v1039 = v1069 + 1;
    char *v1069 = v1070;
    v1069 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1069 = v1039[2];
      *v1039 = v1069;
    }
    char v1070 = aClkbias[v1071++];
  }
  while (v1071 != 10);
  unsigned int v1072 = (int)(*(double *)(v1040 + 736) * 2997924580.0);
  sprintf_5f((uint64_t)v1039, v1072, 2);
  v1073 = (*v1039)++;
  char *v1073 = 32;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  unsigned int v1074 = (int)(*(double *)(v1040 + 744) * 2997924580.0);
  sprintf_5f((uint64_t)v1039, v1074, 2);
  v1075 = (*v1039)++;
  char *v1075 = 32;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  unsigned int v1076 = (int)(*(double *)(v1040 + 752) * 2997924580.0);
  sprintf_5f((uint64_t)v1039, v1076, 2);
  v1077 = (*v1039)++;
  char *v1077 = 32;
  v1078 = *v1039;
  if (*v1039 >= v1039[3]) {
    v1078 = v1039[2];
  }
  char v1079 = 32;
  uint64_t v1080 = 1u;
  do
  {
    *v1039 = v1078 + 1;
    char *v1078 = v1079;
    v1078 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1078 = v1039[2];
      *v1039 = v1078;
    }
    char v1079 = aDclk[v1080++];
  }
  while (v1080 != 7);
  if (v1074) {
    BOOL v1081 = v1072 == 0;
  }
  else {
    BOOL v1081 = 1;
  }
  if (v1081) {
    unsigned int v1082 = 0;
  }
  else {
    unsigned int v1082 = v1074 - v1072;
  }
  *v1039 = v1078 + 1;
  char *v1078 = 32;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  sprintf_5f((uint64_t)v1039, v1082, 2);
  if (v1076) {
    BOOL v1083 = v1072 == 0;
  }
  else {
    BOOL v1083 = 1;
  }
  if (v1083) {
    unsigned int v1084 = 0;
  }
  else {
    unsigned int v1084 = v1076 - v1072;
  }
  v1085 = (*v1039)++;
  char *v1085 = 32;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  sprintf_5f((uint64_t)v1039, v1084, 2);
  v1086 = *v1039;
  char v1087 = 32;
  uint64_t v1088 = 1u;
  do
  {
    *v1039 = v1086 + 1;
    char *v1086 = v1087;
    v1086 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1086 = v1039[2];
      *v1039 = v1086;
    }
    char v1087 = aIni[v1088++];
  }
  while (v1088 != 7);
  sprintf_2d(v1039, *(unsigned __int8 *)(v1040 + 768));
  sprintf_2d(v1039, *(unsigned __int8 *)(v1040 + 769));
  sprintf_2d(v1039, *(unsigned __int8 *)(v1040 + 770));
  uint64_t v1089 = 0;
  v1090 = *v1039;
  char v1091 = 32;
  do
  {
    *v1039 = v1090 + 1;
    char *v1090 = v1091;
    v1090 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1090 = v1039[2];
      *v1039 = v1090;
    }
    char v1091 = aLsKf[++v1089];
  }
  while (v1089 != 8);
  sprintf_2d(v1039, *(unsigned __int8 *)(v1040 + 31344));
  v1092 = *v1039;
  char v1093 = 32;
  uint64_t v1094 = 1u;
  do
  {
    *v1039 = v1092 + 1;
    char *v1092 = v1093;
    v1092 = *v1039;
    if (*v1039 >= v1039[3])
    {
      v1092 = v1039[2];
      *v1039 = v1092;
    }
    char v1093 = aJit[v1094++];
  }
  while (v1094 != 7);
  sprintf_4f((uint64_t)v1039, (int)((double)*(char *)(v1068 + 250) * 2.99792458), 2);
  LOBYTE(v1095) = *(unsigned char *)(v1068 + 251);
  sprintf_4f((uint64_t)v1039, (int)((double)v1095 * 2.99792458), 2);
  v1096 = (*v1039)++;
  char *v1096 = 10;
  if (*v1039 >= v1039[3]) {
    *v1039 = v1039[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1039);
  v1097 = (char **)v758[46];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    uint64_t v1098 = v758[7];
    v1099 = *v1097;
    char v1100 = 71;
    uint64_t v1101 = 1u;
    do
    {
      *v1097 = v1099 + 1;
      char *v1099 = v1100;
      v1099 = *v1097;
      if (*v1097 >= v1097[3])
      {
        v1099 = v1097[2];
        *v1097 = v1099;
      }
      char v1100 = aGlofrq[v1101++];
    }
    while (v1101 != 8);
    uint64_t v1102 = 0;
    uint64_t v1103 = v1098 + 16336;
    do
    {
      if (*(_DWORD *)(v1103 + 4 * v1102) != 2139062143)
      {
        sprintf_3d(v1097, v1102 + 1);
        sprintf_3d(v1097, *(_DWORD *)(v1103 + 4 * v1102));
        v1104 = (*v1097)++;
        char *v1104 = 59;
        v1099 = *v1097;
        if (*v1097 >= v1097[3])
        {
          v1099 = v1097[2];
          *v1097 = v1099;
        }
      }
      ++v1102;
    }
    while (v1102 != 24);
    *v1097 = v1099 + 1;
    char *v1099 = 10;
    if (*v1097 >= v1097[3]) {
      *v1097 = v1097[2];
    }
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1097);
    v1097 = (char **)v758[46];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
      uint64_t v1105 = 0;
      uint64_t v1106 = v758[7];
      v1107 = *v1097;
      char v1108 = 71;
      do
      {
        *v1097 = v1107 + 1;
        char *v1107 = v1108;
        v1107 = *v1097;
        if (*v1097 >= v1097[3])
        {
          v1107 = v1097[2];
          *v1097 = v1107;
        }
        char v1108 = aGloslot[++v1105];
      }
      while (v1105 != 8);
      uint64_t v1109 = 0;
      uint64_t v1110 = v1106 + 16432;
      do
      {
        if (*(_DWORD *)(v1110 + 4 * v1109) != 2139062143)
        {
          sprintf_3d(v1097, v1109 - 7);
          sprintf_3d(v1097, *(_DWORD *)(v1110 + 4 * v1109));
          v1111 = (*v1097)++;
          char *v1111 = 59;
          v1107 = *v1097;
          if (*v1097 >= v1097[3])
          {
            v1107 = v1097[2];
            *v1097 = v1107;
          }
        }
        ++v1109;
      }
      while (v1109 != 14);
      *v1097 = v1107 + 1;
      char *v1107 = 10;
      if (*v1097 >= v1097[3]) {
        *v1097 = v1097[2];
      }
      GNSS_Nav_Debug_Flush_Check((uint64_t)v1097);
      v1097 = (char **)v758[46];
    }
  }
  uint64_t v1112 = v758[10];
  uint64_t v1113 = v758[22];
  uint64_t v1114 = v758[29];
  char v1115 = 82;
  v1116 = (unsigned int *)v758[6];
  uint64_t v1117 = 1u;
  v1118 = *v1097;
  do
  {
    *v1097 = v1118 + 1;
    char *v1118 = v1115;
    v1118 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1118 = v1097[2];
      *v1097 = v1118;
    }
    char v1115 = aReset[v1117++];
  }
  while (v1117 != 8);
  sprintf1da(v1097, *(unsigned __int8 *)(v1113 + 128), v1571, 0, 0);
  sprintf_3d(v1097, *(_DWORD *)(v1113 + 132));
  sprintf_5d(v1097, *(_DWORD *)(v1113 + 136));
  sprintf_6d(v1097, *(_DWORD *)(v1113 + 140));
  sprintf_2d(v1097, *(unsigned __int8 *)(v1113 + 168));
  uint64_t v1119 = 0;
  v1120 = *v1097;
  char v1121 = 32;
  do
  {
    *v1097 = v1120 + 1;
    char *v1120 = v1121;
    v1120 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1120 = v1097[2];
      *v1097 = v1120;
    }
    char v1121 = aQb[++v1119];
  }
  while (v1119 != 4);
  if (*(unsigned char *)(v1113 + 175)) {
    char v1122 = 49;
  }
  else {
    char v1122 = 48;
  }
  *v1097 = v1120 + 1;
  char *v1120 = v1122;
  if (*v1097 >= v1097[3]) {
    *v1097 = v1097[2];
  }
  unsigned int v1123 = *(unsigned __int8 *)(v1113 + 176);
  if (*(unsigned char *)(v1113 + 178)) {
    v1123 |= 2u;
  }
  if (*(unsigned char *)(v1113 + 180)) {
    unsigned int v1124 = v1123 | 4;
  }
  else {
    unsigned int v1124 = v1123;
  }
  sprintf1da(v1097, v1124, v1571, 0, 0);
  if (*(unsigned char *)(v1113 + 179)) {
    unsigned int v1125 = *(unsigned __int8 *)(v1113 + 177) | 2;
  }
  else {
    unsigned int v1125 = *(unsigned __int8 *)(v1113 + 177);
  }
  sprintf1da(v1097, v1125, v1571, 0, 0);
  sprintf_6d(v1097, *(_DWORD *)(v1113 + 144));
  uint64_t v1126 = 0;
  v1127 = *v1097;
  char v1128 = 32;
  do
  {
    *v1097 = v1127 + 1;
    char *v1127 = v1128;
    v1127 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1127 = v1097[2];
      *v1097 = v1127;
    }
    char v1128 = aSt_0[++v1126];
  }
  while (v1126 != 4);
  sprintf1da(v1097, *((unsigned __int8 *)v1116 + 5), v1571, 0, 0);
  v1129 = *v1097;
  v1130 = &g_TOW_Stat_As_String[10 * *v1116 + 1];
  char v1131 = 32;
  do
  {
    *v1097 = v1129 + 1;
    char *v1129 = v1131;
    v1129 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1129 = v1097[2];
      *v1097 = v1129;
    }
    int v1132 = *v1130++;
    char v1131 = v1132;
  }
  while (v1132);
  uint64_t v1133 = 0;
  char v1134 = 32;
  do
  {
    *v1097 = v1129 + 1;
    char *v1129 = v1134;
    v1129 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1129 = v1097[2];
      *v1097 = v1129;
    }
    char v1134 = aSp[++v1133];
  }
  while (v1133 != 4);
  sprintf1da(v1097, *(unsigned __int8 *)(v1112 + 19), v1571, 0, 0);
  sprintf1da(v1097, *(unsigned __int8 *)(v1113 + 232), v1571, 0, 0);
  sprintf1da(v1097, *(unsigned __int8 *)(v1113 + 233), v1571, 0, 0);
  sprintf1da(v1097, *(unsigned __int8 *)(v1114 + 25165), v1571, 0, 0);
  v1135 = *v1097;
  char v1136 = 32;
  uint64_t v1137 = 1u;
  do
  {
    *v1097 = v1135 + 1;
    char *v1135 = v1136;
    v1135 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1135 = v1097[2];
      *v1097 = v1135;
    }
    char v1136 = aFf[v1137++];
  }
  while (v1137 != 6);
  sprintf_3f((uint64_t)v1097, 10 * *(_DWORD *)(v1113 + 11048) / 0x3E8u, 2);
  sprintf_sp1d(v1097, *(_DWORD *)(v1114 + 40));
  v1138 = *v1097;
  char v1139 = 32;
  uint64_t v1140 = 1u;
  do
  {
    *v1097 = v1138 + 1;
    char *v1138 = v1139;
    v1138 = *v1097;
    if (*v1097 >= v1097[3])
    {
      v1138 = v1097[2];
      *v1097 = v1138;
    }
    char v1139 = aOr[v1140++];
  }
  while (v1140 != 6);
  sprintf1da(v1097, *(unsigned __int8 *)(v1114 + 976), v1571, 0, 0);
  v1141 = (*v1097)++;
  char *v1141 = 10;
  if (*v1097 >= v1097[3]) {
    *v1097 = v1097[2];
  }
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1097);
  v1142 = (char **)v758[46];
  uint64_t v1533 = v758[5];
  uint64_t v1529 = v758[4];
  uint64_t v1524 = v758[7];
  uint64_t v1534 = v758[22];
  uint64_t v1143 = v758[29];
  double v1144 = k * 1000.0;
  if (!*(unsigned char *)(v1143 + 25170)) {
    double v1144 = v1144 - *(double *)(v1143 + 25216);
  }
  uint64_t v1532 = v758[33];
  uint64_t v1145 = 0;
  uint64_t v1537 = v758[13];
  uint64_t v1538 = v758[10];
  uint64_t v1528 = v758[8];
  uint64_t v1525 = v758[12];
  uint64_t v1535 = v758[35];
  uint64_t v1146 = v1537 + 76;
  *(_OWORD *)v1572 = *(_OWORD *)(v1143 + 688);
  uint64_t v1573 = *(void *)(v1143 + 704);
  do
  {
    *(double *)&v1574[v1145] = *(double *)(v1143 + v1145 * 4 + 664) - *(double *)(v1534 + 27008 + v1145 * 4);
    v1145 += 2;
  }
  while (v1145 != 6);
  uint64_t v1147 = 0;
  memset(v1571, 0, sizeof(v1571));
  long long v1569 = 0u;
  long long v1570 = 0u;
  long long v1567 = 0u;
  long long v1568 = 0u;
  long long v1565 = 0u;
  long long v1566 = 0u;
  long long v1563 = 0u;
  long long v1564 = 0u;
  long long v1561 = 0u;
  long long v1562 = 0u;
  long long v1559 = 0u;
  long long v1560 = 0u;
  long long v1557 = 0u;
  long long v1558 = 0u;
  long long v1556 = 0u;
  double v1148 = fabs(v1144);
  uint64_t v1149 = v1143 + 20032;
  double v1150 = 0.0;
  long long v1554 = 0u;
  long long v1555 = 0u;
  long long v1552 = 0u;
  long long v1553 = 0u;
  long long v1550 = 0u;
  long long v1551 = 0u;
  uint64_t v1151 = v1143 + 8384;
  long long v1548 = 0u;
  long long v1549 = 0u;
  double v1152 = 0.0;
  double v1153 = 0.0;
  *(_OWORD *)v1547 = 0u;
  double v1154 = 0.0;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1146 + 4 * v1147)))
    {
      if (*(unsigned char *)(v1143 + v1147 + 2960) || (double v1546 = 0.0, !R8_EQ((const double *)(v1143 + 8 * v1147 + 7616), &v1546)))
      {
        uint64_t v1155 = 0;
        double v1156 = 0.0;
        do
        {
          double v1156 = v1156 + *(double *)&v1574[v1155] * *(double *)(v1149 + v1155 * 4);
          v1155 += 2;
        }
        while (v1155 != 6);
        if (v1148 > 0.5) {
          double v1156 = v1156 - *(double *)(v1143 + 56 * v1147 + 20080) * v1144;
        }
        double v1157 = v1156 + *(double *)(v1143 + 2808 + 8 * v1147 + 4808);
        *((double *)v1571 + v1147) = v1157;
        int v1158 = *(_DWORD *)(v1143 + 2808 + 4 * v1147 + 248);
        if ((v1158 - 1) >= 0x1D)
        {
          if (v1158)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else
          {
            double v1163 = 1.0 / *(double *)(v1143 + 8 * v1147 + 6848);
            double v1154 = v1154 + v1163 * v1157;
            double v1153 = v1153 + v1163;
          }
        }
      }
      if (*(unsigned char *)(v1143 + v1147 + 8536)
        || (double v1546 = 0.0, !R8_EQ((const double *)(v1143 + 8 * v1147 + 13192), &v1546)))
      {
        uint64_t v1159 = 0;
        double v1160 = 0.0;
        do
        {
          double v1160 = v1160 + *(double *)&v1572[v1159] * *(double *)(v1149 + v1159 * 4);
          v1159 += 2;
        }
        while (v1159 != 6);
        double v1161 = v1160 + *(double *)(v1151 + 8 * v1147 + 4808);
        *(double *)&v1547[2 * v1147] = v1161;
        int v1162 = *(_DWORD *)(v1151 + 4 * v1147 + 248);
        if ((v1162 - 1) >= 0x1D)
        {
          if (v1162)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else
          {
            double v1164 = 1.0 / *(double *)(v1143 + 8 * v1147 + 12424);
            double v1152 = v1152 + v1164 * v1161;
            double v1150 = v1150 + v1164;
          }
        }
      }
    }
    ++v1147;
    v1149 += 56;
  }
  while (v1147 != 48);
  uint64_t v1165 = 0;
  uint64_t v1166 = 0;
  if (v1153 <= 0.0 || v1154 == 0.0) {
    double v1169 = 0.0;
  }
  else {
    double v1169 = v1154 / v1153;
  }
  if (v1150 <= 0.0 || v1152 == 0.0) {
    double v1172 = 0.0;
  }
  else {
    double v1172 = v1152 / v1150;
  }
  uint64_t v1173 = v1143 + 7616;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1146 + 4 * v1166)))
    {
      if (*(unsigned char *)(v1143 + v1166 + 2960) || (double v1546 = 0.0, !R8_EQ((const double *)(v1173 + v1165), &v1546))) {
        *((double *)v1571 + v1166) = *((double *)v1571 + v1166) - v1169;
      }
      if (*(unsigned char *)(v1173 + v1166 + 920) || (double v1546 = 0.0, !R8_EQ((const double *)(v1143 + 13192 + v1165), &v1546))) {
        *(double *)&v1547[2 * v1166] = (*(double *)&v1547[2 * v1166] - v1172) * 5.25503547;
      }
    }
    ++v1166;
    v1165 += 8;
  }
  while (v1166 != 48);
  uint64_t v1174 = 0;
  v1527 = (_DWORD *)(v1532 + 17512);
  uint64_t v1523 = v1143 + 8384;
  v1175 = (unsigned __int16 *)&unk_26AE65000;
  uint64_t v1176 = v1537;
  while (2)
  {
    uint64_t v1177 = v1176 + 4 * v1174;
    int v1179 = *(unsigned __int8 *)(v1177 + 76);
    v1178 = (unsigned __int8 *)(v1177 + 76);
    if (v1179)
    {
      if (v1175[396] > 2u || *(_DWORD *)(v1538 + 4 * v1174 + 1160) >= 4)
      {
        int v1539 = *(_DWORD *)(v1538 + 4 * v1174 + 1160);
        unsigned int v1181 = v1178[2];
        if (v1178[2]) {
          int v1536 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1178);
        }
        else {
          int v1536 = 0;
        }
        v1182 = *v1142;
        char v1183 = 83;
        uint64_t v1184 = 1u;
        do
        {
          *v1142 = v1182 + 1;
          char *v1182 = v1183;
          v1182 = *v1142;
          if (*v1142 >= v1142[3])
          {
            v1182 = v1142[2];
            *v1142 = v1182;
          }
          char v1183 = aSv[v1184++];
        }
        while (v1184 != 4);
        char v1185 = ch_CONSTELL_ID[*v1178];
        *v1142 = v1182 + 1;
        char *v1182 = v1185;
        v1186 = *v1142;
        if (*v1142 >= v1142[3])
        {
          v1186 = v1142[2];
          *v1142 = v1186;
        }
        char v1187 = ch_GNSS_SIGID[v1178[1]];
        *v1142 = v1186 + 1;
        char *v1186 = v1187;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        sprintf_4d(v1142, v1181);
        sprintf_3d(v1142, (char)v1178[3]);
        if (*v1178 == 2) {
          unsigned int v1188 = (char)v1178[3] + 8;
        }
        else {
          unsigned int v1188 = 0;
        }
        sprintf_3d(v1142, v1188);
        uint64_t v1541 = v1176 + v1174;
        sprintf_3d(v1142, *(unsigned __int8 *)(v1176 + v1174 + 268));
        v1189 = (*v1142)++;
        char *v1189 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        uint64_t v1190 = v1176 + 2 * v1174;
        sprintf_04x(v1142, *(unsigned __int16 *)(v1190 + 316));
        sprintf_3d(v1142, *(_DWORD *)(v1176 + 4 * v1174 + 412));
        LOBYTE(v1191) = *(unsigned char *)(v1541 + 604);
        LOBYTE(v1192) = *(unsigned char *)(v1541 + 652);
        double v1193 = ((double)v1191 + (double)v1192 * 0.0625) * 10.0;
        if (v1193 <= 0.0) {
          double v1194 = -0.5;
        }
        else {
          double v1194 = 0.5;
        }
        double v1195 = v1193 + v1194;
        if (v1195 <= 2147483650.0)
        {
          if (v1195 >= -2147483650.0) {
            unsigned int v1196 = (int)v1195;
          }
          else {
            unsigned int v1196 = 0x80000000;
          }
        }
        else
        {
          unsigned int v1196 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1142, v1196, 2);
        LOBYTE(v1197) = *(unsigned char *)(v1176 + v1174 + 700);
        LOBYTE(v1198) = *(unsigned char *)(v1176 + v1174 + 748);
        double v1199 = ((double)v1197 + (double)v1198 * 0.0625) * 10.0;
        if (v1199 <= 0.0) {
          double v1200 = -0.5;
        }
        else {
          double v1200 = 0.5;
        }
        double v1201 = v1199 + v1200;
        if (v1201 <= 2147483650.0)
        {
          if (v1201 >= -2147483650.0) {
            unsigned int v1202 = (int)v1201;
          }
          else {
            unsigned int v1202 = 0x80000000;
          }
        }
        else
        {
          unsigned int v1202 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1142, v1202, 2);
        __int16 v1203 = *(_WORD *)(v1190 + 316);
        if ((v1203 & 8) != 0)
        {
          if ((v1203 & 0xC0) != 0)
          {
            v1204 = (unsigned __int16 *)(v1176 + 2 * v1174 + 1036);
          }
          else if ((v1203 & 0x30) != 0)
          {
            v1204 = (unsigned __int16 *)(v1176 + 2 * v1174 + 940);
          }
          else
          {
            v1204 = (unsigned __int16 *)(v1176 + 2 * v1174 + 844);
          }
        }
        else
        {
          v1204 = (unsigned __int16 *)(v1176 + 2 * v1174 + 844);
        }
        sprintf_6d(v1142, *v1204);
        if (!v1181 || v1539 == 3)
        {
          strcpy((char *)v1574, "    0");
          v1206 = *v1142;
          LOBYTE(v1207) = 32;
          uint64_t v1208 = 1;
          do
          {
            *v1142 = v1206 + 1;
            char *v1206 = v1207;
            v1206 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1206 = v1142[2];
              *v1142 = v1206;
            }
            int v1207 = *((unsigned __int8 *)v1574 + v1208++);
          }
          while (v1207);
          strcpy((char *)v1574, "  0");
          v1209 = *v1142;
          LOBYTE(v1210) = 32;
          uint64_t v1211 = 1;
          do
          {
            *v1142 = v1209 + 1;
            char *v1209 = v1210;
            v1209 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1209 = v1142[2];
              *v1142 = v1209;
            }
            int v1210 = *((unsigned __int8 *)v1574 + v1211++);
          }
          while (v1210);
          strcpy((char *)v1574, "   0");
          v1212 = *v1142;
          LOBYTE(v1213) = 32;
          uint64_t v1214 = 1;
          do
          {
            *v1142 = v1212 + 1;
            char *v1212 = v1213;
            v1212 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1212 = v1142[2];
              *v1142 = v1212;
            }
            int v1213 = *((unsigned __int8 *)v1574 + v1214++);
          }
          while (v1213);
        }
        else
        {
          if (*(unsigned char *)(v1143 + v1174 + 49) && (uint64_t v1205 = v1534 + 2 * v1174, *(_WORD *)(v1205 + 7744)))
          {
            sprintf_5d(v1142, *(unsigned __int16 *)(v1205 + 7744));
          }
          else
          {
            v1215 = *v1142;
            for (unsigned int i8 = 5; i8 > 1; --i8)
            {
              *v1142 = v1215 + 1;
              char *v1215 = 32;
              v1215 = *v1142;
              if (*v1142 >= v1142[3])
              {
                v1215 = v1142[2];
                *v1142 = v1215;
              }
            }
            if (*(__int16 *)(v1143 + 2 * v1174 + 25476) < 0)
            {
              *v1142 = v1215 + 1;
              char v1218 = 120;
            }
            else if (*v1178 == 3 {
                   && (uint64_t v1217 = v1181 - 1, *(unsigned char *)(v1524 + v1217 + 16700))
            }
                   && !*(unsigned char *)(*(void *)(v1524 + 16608) + v1217))
            {
              *v1142 = v1215 + 1;
              char v1218 = 109;
            }
            else
            {
              char v1218 = ch_EPH_ALM[*(unsigned int *)(v1525 + 192 * *(unsigned __int16 *)(v1143 + 2 * v1174 + 25476) + 184)];
              *v1142 = v1215 + 1;
            }
            char *v1215 = v1218;
            if (*v1142 >= v1142[3]) {
              *v1142 = v1142[2];
            }
          }
          int v1219 = *(char *)(v1529 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1178));
          if (v1219 <= -9) {
            unsigned int v1220 = -9;
          }
          else {
            unsigned int v1220 = v1219;
          }
          sprintf_3d(v1142, v1220);
          unsigned int v1221 = *(unsigned __int16 *)(v1529 + 2 * (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1178) + 178);
          if ((v1221 & 0x8000) != 0)
          {
            uint64_t v1222 = 0;
            v1223 = *v1142;
            char v1224 = 32;
            do
            {
              *v1142 = v1223 + 1;
              char *v1223 = v1224;
              v1223 = *v1142;
              if (*v1142 >= v1142[3])
              {
                v1223 = v1142[2];
                *v1142 = v1223;
              }
              char v1224 = a0[++v1222];
            }
            while (v1222 != 4);
          }
          else
          {
            sprintf_4d(v1142, v1221);
          }
        }
        v1225 = (*v1142)++;
        char *v1225 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        sprintf_sgR8(v1142, *(double *)(v1143 + 2808 + 8 * v1174 + 2408));
        v1226 = (unsigned char *)(v1143 + 2808 + v1174 + 152);
        if (*v1226)
        {
          if (*(unsigned char *)(v1143 + v1174 + 6368)) {
            int v1227 = 3;
          }
          else {
            int v1227 = 1;
          }
          if (*(unsigned char *)(v1143 + v1174 + 6800)) {
            unsigned int v1228 = v1227 | 4;
          }
          else {
            unsigned int v1228 = v1227;
          }
        }
        else
        {
          unsigned int v1228 = 0;
        }
        sprintf_2d(v1142, v1228);
        uint64_t v1229 = *(int *)(v1143 + 4 * v1174 + 3056);
        if (v1229 >= 0x1D)
        {
          gn_report_assertion_failure("SV_Meas_Edit_Char");
          char v1230 = 120;
        }
        else
        {
          char v1230 = aGhkmnpqrstvyac[v1229];
        }
        v1231 = (*v1142)++;
        char *v1231 = v1230;
        v1232 = *v1142;
        if (*v1142 >= v1142[3]) {
          v1232 = v1142[2];
        }
        *v1142 = v1232 + 1;
        char *v1232 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        v1233 = (unsigned char *)(v1143 + v1174 + 14112);
        if (*v1233 || (int v1234 = *(_DWORD *)(v1143 + 4 * v1174 + 14208), (v1234 - 1) < 0x1D))
        {
LABEL_2184:
          sprintf_sgR8(v1142, *(double *)(v1143 + 8 * v1174 + 16752));
          if (*v1233)
          {
            if (*(unsigned char *)(v1143 + v1174 + 17520)) {
              int v1235 = 3;
            }
            else {
              int v1235 = 1;
            }
            if (*(unsigned char *)(v1143 + v1174 + 17952)) {
              unsigned int v1236 = v1235 | 4;
            }
            else {
              unsigned int v1236 = v1235;
            }
          }
          else
          {
            unsigned int v1236 = 0;
          }
          sprintf_2d(v1142, v1236);
          uint64_t v1237 = *(int *)(v1143 + 4 * v1174 + 14208);
          if (v1237 >= 0x1D)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            char v1238 = 120;
          }
          else
          {
            char v1238 = aGhkmnpqrstvyac[v1237];
          }
          v1239 = (*v1142)++;
          char *v1239 = v1238;
          v1240 = *v1142;
          if (*v1142 >= v1142[3])
          {
            v1240 = v1142[2];
            *v1142 = v1240;
          }
          v1241 = " 1 ";
        }
        else
        {
          if (v1234)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            goto LABEL_2184;
          }
          sprintf_sgR8(v1142, *(double *)(v1523 + 8 * v1174 + 2792));
          if (*(unsigned char *)(v1523 + v1174 + 152))
          {
            if (*(unsigned char *)(v1143 + v1174 + 11944)) {
              int v1365 = 3;
            }
            else {
              int v1365 = 1;
            }
            if (*(unsigned char *)(v1143 + v1174 + 12376)) {
              unsigned int v1366 = v1365 | 4;
            }
            else {
              unsigned int v1366 = v1365;
            }
          }
          else
          {
            unsigned int v1366 = 0;
          }
          sprintf_2d(v1142, v1366);
          uint64_t v1384 = *(int *)(v1143 + 4 * v1174 + 8632);
          v1233 = (unsigned char *)(v1143 + v1174 + 14112);
          if (v1384 >= 0x1D)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            char v1385 = 120;
          }
          else
          {
            char v1385 = aGhkmnpqrstvyac[v1384];
          }
          v1386 = (*v1142)++;
          char *v1386 = v1385;
          v1240 = *v1142;
          if (*v1142 >= v1142[3])
          {
            v1240 = v1142[2];
            *v1142 = v1240;
          }
          v1241 = " 2 ";
          if (!*(unsigned char *)(v1143 + v1174 + 19536)) {
            v1241 = " 0 ";
          }
        }
        char v1242 = *v1241;
        if (*v1241)
        {
          v1243 = (unsigned __int8 *)(v1241 + 1);
          do
          {
            *v1142 = v1240 + 1;
            char *v1240 = v1242;
            v1240 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1240 = v1142[2];
              *v1142 = v1240;
            }
            int v1244 = *v1243++;
            char v1242 = v1244;
          }
          while (v1244);
        }
        if (v1181 && v1539 == 1)
        {
          int v1245 = *(char *)(v1533 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1178) + 3996);
          if (v1245 < 0 || !*(unsigned char *)(v1533 + 48 * v1245 + 64))
          {
            if (v1181 <= 0x20) {
              unsigned int v1246 = (int)((double)-*(__int16 *)(v1533 + 24) * 1.57542);
            }
            else {
              unsigned int v1246 = -9999;
            }
          }
          else
          {
            unsigned int v1246 = *(__int16 *)(v1533 + 48 * v1245 + 82);
          }
        }
        else
        {
          unsigned int v1246 = (int)*(double *)(v1537 + 8 * v1174 + 1616);
        }
        sprintf_6d(v1142, v1246);
        v1247 = (*v1142)++;
        char *v1247 = 32;
        v1248 = *v1142;
        if (*v1142 >= v1142[3])
        {
          v1248 = v1142[2];
          *v1142 = v1248;
        }
        if (Is_Legal(*(_DWORD *)v1178))
        {
          int v1249 = *(_DWORD *)v1143 - *(_DWORD *)(v1528 + 4 * v1174 + 416);
          if (v1249 >= -999)
          {
            int v1255 = v1249 / 1000;
            if (v1255 >= 9) {
              unsigned int v1250 = 9;
            }
            else {
              unsigned int v1250 = v1255;
            }
          }
          else
          {
            unsigned int v1250 = 0;
          }
          sprintf_2d(v1142, v1250);
          if (!v1181) {
            goto LABEL_2228;
          }
LABEL_2222:
          if (*(char *)(v1533 + v1536 + 3996) < 0)
          {
            unsigned int v1254 = (int)((double)-*(__int16 *)(v1533 + 24) * 1.57542) / 10;
            unsigned int v1181 = (5381 * *(unsigned __int16 *)(v1533 + 4)) >> 10;
          }
          else
          {
            uint64_t v1253 = v1533 + 48 * *(unsigned __int8 *)(v1533 + v1536 + 3996);
            unsigned int v1254 = *(unsigned __int16 *)(v1253 + 86);
            unsigned int v1181 = *(unsigned __int16 *)(v1253 + 78);
          }
        }
        else
        {
          uint64_t v1251 = 0;
          char v1252 = 32;
          do
          {
            *v1142 = v1248 + 1;
            char *v1248 = v1252;
            v1248 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1248 = v1142[2];
              *v1142 = v1248;
            }
            char v1252 = aX[++v1251];
          }
          while (v1251 != 2);
          if (v1181) {
            goto LABEL_2222;
          }
LABEL_2228:
          unsigned int v1254 = 0;
        }
        sprintf_5d(v1142, v1254);
        sprintf_6d(v1142, v1181);
        if (Is_Legal(*(_DWORD *)v1178))
        {
          v1256 = (__int16 *)(v1535 + 2 * v1174);
          sprintf_5d(v1142, *v1256);
          sprintf_6d(v1142, v1256[48]);
        }
        else
        {
          v1257 = *v1142;
          char v1258 = 32;
          uint64_t v1259 = 1u;
          do
          {
            *v1142 = v1257 + 1;
            char *v1257 = v1258;
            v1257 = *v1142;
            if (*v1142 >= v1142[3])
            {
              v1257 = v1142[2];
              *v1142 = v1257;
            }
            char v1258 = a00_0[v1259++];
          }
          while (v1259 != 12);
        }
        int v1260 = *v1226;
        uint64_t v1176 = v1537;
        if (v1260 || (int v1261 = *(_DWORD *)(v1143 + 4 * v1174 + 3056), (v1261 - 1) < 0x1D))
        {
LABEL_2238:
          uint64_t v1262 = v1143 + 8 * v1174;
          sprintf_sgR8(v1142, *(double *)(v1262 + 7616));
          double v1263 = sqrt(*(double *)(v1262 + 6848));
          if (v1263 <= v1531)
          {
            if (v1263 <= 999.9)
            {
              double v1270 = v1263 * 10.0;
              if (v1270 <= 0.0) {
                double v1271 = -0.5;
              }
              else {
                double v1271 = 0.5;
              }
              double v1272 = v1270 + v1271;
              if (v1272 <= 2147483650.0)
              {
                if (v1272 >= -2147483650.0) {
                  unsigned int v1273 = (int)v1272;
                }
                else {
                  unsigned int v1273 = 0x80000000;
                }
              }
              else
              {
                unsigned int v1273 = 0x7FFFFFFF;
              }
              sprintf_5f((uint64_t)v1142, v1273, 2);
            }
            else
            {
              if (v1263 <= 0.0) {
                double v1267 = -0.5;
              }
              else {
                double v1267 = 0.5;
              }
              double v1268 = v1263 + v1267;
              if (v1268 <= 2147483650.0)
              {
                if (v1268 >= -2147483650.0) {
                  unsigned int v1269 = (int)v1268;
                }
                else {
                  unsigned int v1269 = 0x80000000;
                }
              }
              else
              {
                unsigned int v1269 = 0x7FFFFFFF;
              }
              sprintf_6d(v1142, v1269);
            }
          }
          else
          {
            v1264 = *v1142;
            char v1265 = 32;
            uint64_t v1266 = 1u;
            do
            {
              *v1142 = v1264 + 1;
              char *v1264 = v1265;
              v1264 = *v1142;
              if (*v1142 >= v1142[3])
              {
                v1264 = v1142[2];
                *v1142 = v1264;
              }
              char v1265 = a99999[v1266++];
            }
            while (v1266 != 7);
          }
          if (*v1233 || (int v1274 = *(_DWORD *)(v1143 + 4 * v1174 + 14208), (v1274 - 1) < 0x1D))
          {
LABEL_2265:
            uint64_t v1275 = v1143 + 8 * v1174;
            sprintf_sgR8(v1142, *(double *)(v1275 + 18768));
            double v1276 = sqrt(*(double *)(v1275 + 18000));
            double v1277 = v1276 * 1000.0;
            BOOL v1278 = v1276 < 9.89999962;
            double v1279 = 9899.99962;
            if (v1278) {
              double v1279 = v1277;
            }
            if (v1279 <= 0.0) {
              double v1280 = -0.5;
            }
            else {
              double v1280 = 0.5;
            }
            double v1281 = v1279 + v1280;
            if (v1281 <= 2147483650.0)
            {
              if (v1281 >= -2147483650.0) {
                unsigned int v1282 = (int)v1281;
              }
              else {
                unsigned int v1282 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1282 = 0x7FFFFFFF;
            }
            uint64_t v1283 = (uint64_t)v1142;
            int v1284 = 4;
          }
          else
          {
            if (v1274)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2265;
            }
            uint64_t v1369 = v1143 + 8 * v1174;
            sprintf_sgR8(v1142, *(double *)(v1369 + 13192));
            double v1370 = sqrt(*(double *)(v1369 + 12424));
            double v1371 = v1370 * 100.0;
            BOOL v1278 = v1370 < 99.9000015;
            double v1372 = 9990.00015;
            if (v1278) {
              double v1372 = v1371;
            }
            if (v1372 <= 0.0) {
              double v1373 = -0.5;
            }
            else {
              double v1373 = 0.5;
            }
            double v1374 = v1372 + v1373;
            if (v1374 <= 2147483650.0)
            {
              if (v1374 >= -2147483650.0) {
                unsigned int v1282 = (int)v1374;
              }
              else {
                unsigned int v1282 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1282 = 0x7FFFFFFF;
            }
            uint64_t v1283 = (uint64_t)v1142;
            int v1284 = 3;
          }
          sprintf_5f(v1283, v1282, v1284);
          sprintf_4d(v1142, *(unsigned __int8 *)(v1541 + 604) - *(unsigned __int8 *)(v1143 + v1174 + 978));
          v1285 = (*v1142)++;
          char *v1285 = 32;
          if (*v1142 >= v1142[3]) {
            *v1142 = v1142[2];
          }
          uint64_t v1286 = v1535 + 8 * v1174;
          sprintf_sgR8(v1142, *(double *)(v1286 + 2432));
          v1287 = (gnss::GnssAdaptDevice *)sprintf_sgR8(v1142, *(double *)(v1286 + 2816));
          if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v1287))
          {
            uint64_t v1288 = (*v1527 - 1);
            if (*v1527 - 1 < 0)
            {
              v1294 = " |    0.000 0~   0.0    0.000 0~   0.0    0.000    0.000    0.000    0.000 |";
            }
            else
            {
              v1530 = v1233;
              uint64_t v1289 = 4 * (*v1527 - 1);
              uint64_t v1290 = v1288 + 1652;
              uint64_t v1291 = 144 * v1288 + 17552;
              uint64_t v1292 = 8 * (*v1527 - 1);
              while (*(_DWORD *)(v1532 + v1289 + 400) != v1178[2] || *(_DWORD *)(v1532 + v1289 + 592) != *v1178)
              {
                uint64_t v1293 = v1290 - 1652;
                --v1290;
                v1291 -= 144;
                v1292 -= 8;
                v1289 -= 4;
                if (v1293 <= 0)
                {
                  v1294 = " |    0.000 0~   0.0    0.000 0~   0.0    0.000    0.000    0.000    0.000 |";
                  uint64_t v1176 = v1537;
                  v1233 = v1530;
                  goto LABEL_2319;
                }
              }
              v1295 = *v1142;
              char v1296 = 32;
              uint64_t v1297 = 1u;
              do
              {
                *v1142 = v1295 + 1;
                char *v1295 = v1296;
                v1295 = *v1142;
                if (*v1142 >= v1142[3])
                {
                  v1295 = v1142[2];
                  *v1142 = v1295;
                }
                char v1296 = asc_22BAAA791[v1297++];
              }
              while (v1297 != 4);
              sprintf_sgR8(v1142, *(double *)(v1532 + v1292 + 2808));
              v1298 = (*v1142)++;
              char *v1298 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf1da(v1142, *(_DWORD *)(v1532 + v1289 + 1032) == 0, v1574, 0, 0);
              uint64_t v1299 = *(int *)(v1532 + v1289 + 1032);
              if (v1299 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                char v1300 = 120;
              }
              else
              {
                char v1300 = aGhkmnpqrstvyac[v1299];
              }
              v1233 = v1530;
              v1301 = (*v1142)++;
              char *v1301 = v1300;
              v1302 = *v1142;
              if (*v1142 >= v1142[3]) {
                v1302 = v1142[2];
              }
              *v1142 = v1302 + 1;
              char *v1302 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_ACC(v1142, sqrt(*(double *)(v1532 + v1292 + 4824)));
              v1303 = (*v1142)++;
              char *v1303 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_sgR8(v1142, *(double *)(v1532 + v1292 + 8384));
              v1304 = (*v1142)++;
              char *v1304 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf1da(v1142, *(_DWORD *)(v1532 + 4 * v1290) == 0, v1574, 0, 0);
              uint64_t v1305 = *(int *)(v1532 + 4 * v1290);
              if (v1305 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                uint64_t v1306 = v1532;
                char v1307 = 120;
              }
              else
              {
                uint64_t v1306 = v1532;
                char v1307 = aGhkmnpqrstvyac[v1305];
              }
              v1308 = (*v1142)++;
              char *v1308 = v1307;
              v1309 = *v1142;
              if (*v1142 >= v1142[3]) {
                v1309 = v1142[2];
              }
              *v1142 = v1309 + 1;
              char *v1309 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_ACC(v1142, sqrt(*(double *)(v1306 + v1292 + 10400)));
              v1310 = (*v1142)++;
              char *v1310 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_sgR8(v1142, *(double *)(v1532 + v1291));
              v1311 = (*v1142)++;
              char *v1311 = 32;
              uint64_t v1176 = v1537;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_sgR8(v1142, *(double *)(v1532 + v1291 + 96));
              v1312 = (*v1142)++;
              char *v1312 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_sgR8(v1142, *(double *)(v1532 + v1291 + 8));
              v1313 = (*v1142)++;
              char *v1313 = 32;
              if (*v1142 >= v1142[3]) {
                *v1142 = v1142[2];
              }
              sprintf_sgR8(v1142, *(double *)(v1532 + v1291 + 104));
              v1294 = " |";
            }
LABEL_2319:
            char v1314 = *v1294;
            if (*v1294)
            {
              v1315 = *v1142;
              v1316 = (unsigned __int8 *)(v1294 + 1);
              do
              {
                *v1142 = v1315 + 1;
                char *v1315 = v1314;
                v1315 = *v1142;
                if (*v1142 >= v1142[3])
                {
                  v1315 = v1142[2];
                  *v1142 = v1315;
                }
                int v1317 = *v1316++;
                char v1314 = v1317;
              }
              while (v1317);
            }
          }
          sprintf_3d(v1142, *(unsigned __int8 *)(v1534 + v1174 + 6696));
          sprintf_sgR8(v1142, sqrt(*(double *)(v1534 + 8 * v1174 + 6312)));
          double v1318 = sqrt(*(double *)(v1143 + 24 * v1174 + 3296)) * 10.0;
          if (v1318 <= 0.0) {
            double v1319 = -0.5;
          }
          else {
            double v1319 = 0.5;
          }
          double v1320 = v1318 + v1319;
          if (v1320 <= 2147483650.0)
          {
            if (v1320 >= -2147483650.0) {
              unsigned int v1321 = (int)v1320;
            }
            else {
              unsigned int v1321 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1321 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1142, v1321, 2);
          double v1322 = sqrt(*(double *)(v1143 + 24 * v1174 + 3304)) * 10.0;
          if (v1322 <= 0.0) {
            double v1323 = -0.5;
          }
          else {
            double v1323 = 0.5;
          }
          double v1324 = v1322 + v1323;
          if (v1324 <= 2147483650.0)
          {
            if (v1324 >= -2147483650.0) {
              unsigned int v1325 = (int)v1324;
            }
            else {
              unsigned int v1325 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1325 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1142, v1325, 2);
          if (*v1233 || (int v1326 = *(_DWORD *)(v1143 + 4 * v1174 + 14208), (v1326 - 1) < 0x1D))
          {
LABEL_2342:
            double v1327 = sqrt(*(double *)(v1143 + 24 * v1174 + 14448)) * 10.0;
            if (v1327 <= 0.0) {
              double v1328 = -0.5;
            }
            else {
              double v1328 = 0.5;
            }
            double v1329 = v1327 + v1328;
            if (v1329 <= 2147483650.0)
            {
              if (v1329 >= -2147483650.0) {
                unsigned int v1330 = (int)v1329;
              }
              else {
                unsigned int v1330 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1330 = 0x7FFFFFFF;
            }
            sprintf_4f((uint64_t)v1142, v1330, 2);
            uint64_t v1331 = v1143 + 24 * v1174;
            uint64_t v1332 = 14456;
          }
          else
          {
            if (v1326)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2342;
            }
            double v1375 = sqrt(*(double *)(v1143 + 24 * v1174 + 8872)) * 10.0;
            if (v1375 <= 0.0) {
              double v1376 = -0.5;
            }
            else {
              double v1376 = 0.5;
            }
            double v1377 = v1375 + v1376;
            if (v1377 <= 2147483650.0)
            {
              if (v1377 >= -2147483650.0) {
                unsigned int v1378 = (int)v1377;
              }
              else {
                unsigned int v1378 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1378 = 0x7FFFFFFF;
            }
            sprintf_4f((uint64_t)v1142, v1378, 2);
            uint64_t v1331 = v1143 + 24 * v1174;
            uint64_t v1332 = 8880;
          }
          double v1333 = sqrt(*(double *)(v1331 + v1332)) * 10.0;
          if (v1333 <= 0.0) {
            double v1334 = -0.5;
          }
          else {
            double v1334 = 0.5;
          }
          double v1335 = v1333 + v1334;
          if (v1335 <= 2147483650.0)
          {
            if (v1335 >= -2147483650.0) {
              unsigned int v1336 = (int)v1335;
            }
            else {
              unsigned int v1336 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1336 = 0x7FFFFFFF;
          }
          sprintf_4f((uint64_t)v1142, v1336, 2);
          uint64_t v1337 = v1143 + 8 * v1174;
          double v1338 = fmin(*(double *)(v1337 + 4832), 999.900024);
          if (v1338 <= -999.900024) {
            double v1339 = -9999.00024;
          }
          else {
            double v1339 = v1338 * 10.0;
          }
          if (v1339 <= 0.0) {
            double v1340 = -0.5;
          }
          else {
            double v1340 = 0.5;
          }
          double v1341 = v1339 + v1340;
          if (v1341 <= 2147483650.0)
          {
            if (v1341 >= -2147483650.0) {
              unsigned int v1342 = (int)v1341;
            }
            else {
              unsigned int v1342 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1342 = 0x7FFFFFFF;
          }
          sprintf_6f((uint64_t)v1142, v1342, 2);
          double v1343 = sqrt(*(double *)(v1337 + 5984)) * 10.0;
          if (v1343 <= 0.0) {
            double v1344 = -0.5;
          }
          else {
            double v1344 = 0.5;
          }
          double v1345 = v1343 + v1344;
          if (v1345 <= 2147483650.0)
          {
            if (v1345 >= -2147483650.0) {
              unsigned int v1346 = (int)v1345;
            }
            else {
              unsigned int v1346 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1346 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1142, v1346, 2);
          if (*v1233 || (int v1347 = *(_DWORD *)(v1143 + 4 * v1174 + 14208), (v1347 - 1) < 0x1D))
          {
LABEL_2380:
            uint64_t v1348 = v1143 + 8 * v1174;
            double v1349 = fmin(*(double *)(v1348 + 15984), 99.9000015);
            if (v1349 <= -99.9000015) {
              double v1350 = -999.000015;
            }
            else {
              double v1350 = v1349 * 10.0;
            }
            if (v1350 <= 0.0) {
              double v1351 = -0.5;
            }
            else {
              double v1351 = 0.5;
            }
            double v1352 = v1350 + v1351;
            if (v1352 <= 2147483650.0)
            {
              if (v1352 >= -2147483650.0) {
                unsigned int v1353 = (int)v1352;
              }
              else {
                unsigned int v1353 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1353 = 0x7FFFFFFF;
            }
            sprintf_5f((uint64_t)v1142, v1353, 2);
            uint64_t v1354 = 17136;
          }
          else
          {
            if (v1347)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2380;
            }
            uint64_t v1348 = v1143 + 8 * v1174;
            double v1379 = fmin(*(double *)(v1348 + 10408), 99.9000015);
            if (v1379 <= -99.9000015) {
              double v1380 = -999.000015;
            }
            else {
              double v1380 = v1379 * 10.0;
            }
            if (v1380 <= 0.0) {
              double v1381 = -0.5;
            }
            else {
              double v1381 = 0.5;
            }
            double v1382 = v1380 + v1381;
            if (v1382 <= 2147483650.0)
            {
              if (v1382 >= -2147483650.0) {
                unsigned int v1383 = (int)v1382;
              }
              else {
                unsigned int v1383 = 0x80000000;
              }
            }
            else
            {
              unsigned int v1383 = 0x7FFFFFFF;
            }
            sprintf_5f((uint64_t)v1142, v1383, 2);
            uint64_t v1354 = 11560;
          }
          double v1355 = sqrt(*(double *)(v1348 + v1354)) * 10.0;
          if (v1355 <= 0.0) {
            double v1356 = -0.5;
          }
          else {
            double v1356 = 0.5;
          }
          double v1357 = v1355 + v1356;
          if (v1357 <= 2147483650.0)
          {
            if (v1357 >= -2147483650.0) {
              unsigned int v1358 = (int)v1357;
            }
            else {
              unsigned int v1358 = 0x80000000;
            }
          }
          else
          {
            unsigned int v1358 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1142, v1358, 2);
        }
        else
        {
          if (v1261) {
            goto LABEL_2429;
          }
          if (*(unsigned char *)(v1143 + v1174 + 8536)) {
            goto LABEL_2238;
          }
          int v1367 = *(_DWORD *)(v1143 + 4 * v1174 + 8632);
          if ((v1367 - 1) < 0x1D) {
            goto LABEL_2238;
          }
          if (v1367) {
            goto LABEL_2429;
          }
          if (*v1233) {
            goto LABEL_2238;
          }
          int v1368 = *(_DWORD *)(v1143 + 4 * v1174 + 14208);
          if ((v1368 - 1) < 0x1D) {
            goto LABEL_2238;
          }
          if (v1368)
          {
LABEL_2429:
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            goto LABEL_2238;
          }
        }
        v1359 = (*v1142)++;
        char *v1359 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        sprintf_2d(v1142, *(unsigned __int8 *)(v1176 + v1174 + 2912));
        v1360 = (*v1142)++;
        char *v1360 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        sprintf_2d(v1142, *(unsigned __int8 *)(v1176 + v1174 + 2960));
        v1361 = (*v1142)++;
        char *v1361 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        uint64_t v1362 = v1176 + 2 * v1174;
        sprintf_2d(v1142, *(unsigned __int16 *)(v1362 + 3008));
        v1363 = (*v1142)++;
        char *v1363 = 32;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        sprintf_4d(v1142, *(unsigned __int16 *)(v1362 + 1132));
        v1364 = (*v1142)++;
        char *v1364 = 10;
        if (*v1142 >= v1142[3]) {
          *v1142 = v1142[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1142);
        v1175 = (_WORD *)&unk_26AE65000;
      }
    }
    if (++v1174 != 48) {
      continue;
    }
    break;
  }
  uint64_t v1387 = 0;
  v1388 = (char **)v1526[46];
  uint64_t v1389 = v1526[5];
  uint64_t v1390 = v1526[10];
  v1391 = (unsigned __int8 *)v1526[8];
  uint64_t v1392 = v1526[22];
  uint64_t v1393 = v1526[29];
  v1394 = *v1388;
  char v1395 = 84;
  do
  {
    *v1388 = v1394 + 1;
    char *v1394 = v1395;
    v1394 = *v1388;
    if (*v1388 >= v1388[3])
    {
      v1394 = v1388[2];
      *v1388 = v1394;
    }
    char v1395 = aTheEnd[++v1387];
  }
  while (v1387 != 8);
  v1396 = &ch_Pos_Confid[5 * *(unsigned int *)(v1390 + 12) + 1];
  char v1397 = 32;
  do
  {
    *v1388 = v1394 + 1;
    char *v1394 = v1397;
    v1394 = *v1388;
    if (*v1388 >= v1388[3])
    {
      v1394 = v1388[2];
      *v1388 = v1394;
    }
    int v1398 = *v1396++;
    char v1397 = v1398;
  }
  while (v1398);
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1392 + 235));
  sprintf_sp1d(v1388, *(_DWORD *)(v1393 + 972));
  sprintf_sp1d(v1388, *v1391);
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1392 + 234));
  uint64_t v1399 = 0;
  v1400 = *v1388;
  char v1401 = 32;
  do
  {
    *v1388 = v1400 + 1;
    char *v1400 = v1401;
    v1400 = *v1388;
    if (*v1388 >= v1388[3])
    {
      v1400 = v1388[2];
      *v1388 = v1400;
    }
    char v1401 = aVis[++v1399];
  }
  while (v1399 != 4);
  sprintf_3d(v1388, *(unsigned __int8 *)(v1389 + 6132));
  if (*(unsigned char *)(v1389 + 6132))
  {
    unint64_t v1402 = 0;
    do
    {
      v1547[0] = 0;
      uint64_t v1403 = v1389 + 2 * v1402;
      int v1404 = *(unsigned __int16 *)(v1403 + 4174);
      if ((__int16)v1404 < 1)
      {
        uint64_t v1409 = 0;
        v1410 = (__int16 *)(v1403 + 4174);
        v1411 = *v1388;
        char v1412 = 32;
        do
        {
          *v1388 = v1411 + 1;
          char *v1411 = v1412;
          v1411 = *v1388;
          if (*v1388 >= v1388[3])
          {
            v1411 = v1388[2];
            *v1388 = v1411;
          }
          char v1412 = aX[++v1409];
        }
        while (v1409 != 2);
        int v1405 = *v1410;
      }
      else
      {
        int v1405 = LongPrnIdx_To_Prn(v1404 - 1, (int *)v1547);
        v1406 = (*v1388)++;
        char *v1406 = 32;
        v1407 = *v1388;
        if (*v1388 >= v1388[3]) {
          v1407 = v1388[2];
        }
        char v1408 = ch_CONSTELL_ID[v1547[0]];
        *v1388 = v1407 + 1;
        char *v1407 = v1408;
        if (*v1388 >= v1388[3]) {
          *v1388 = v1388[2];
        }
      }
      if (v1405 >= 0) {
        unsigned int v1413 = v1405;
      }
      else {
        unsigned int v1413 = -v1405;
      }
      sprintf1da(v1388, v1413, v1571, 0, v1405 >> 31);
      ++v1402;
    }
    while (v1402 < *(unsigned __int8 *)(v1389 + 6132));
  }
  v1414 = *v1388;
  for (unsigned int i9 = 3; i9 > 1; --i9)
  {
    *v1388 = v1414 + 1;
    char *v1414 = 32;
    v1414 = *v1388;
    if (*v1388 >= v1388[3])
    {
      v1414 = v1388[2];
      *v1388 = v1414;
    }
  }
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1392 + 7172));
  sprintf_sgR8(v1388, *(double *)(v1393 + 2848));
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1393 + 2811));
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1393 + 24777));
  sprintf_sgR8(v1388, *(double *)(v1393 + 8424));
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1393 + 8387));
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1393 + 24779));
  sprintf_sp1d(v1388, *(unsigned __int16 *)(v1392 + 236));
  sprintf_sp1d(v1388, *(unsigned __int8 *)(v1393 + 24778));
  v1416 = (*v1388)++;
  char *v1416 = 10;
  if (*v1388 >= v1388[3]) {
    *v1388 = v1388[2];
  }
  uint64_t result = GNSS_Nav_Debug_Flush_Check((uint64_t)v1388);
  if ((unsigned __int16)g_Enable_Nav_Debug >= 4u)
  {
    v1418 = (char **)v1526[46];
    uint64_t v1420 = v1526[4];
    v1419 = (unsigned char *)v1526[5];
    v1421 = v1419 + 6132;
    double v1422 = *(double *)(v1526[10] + 40);
    double v1423 = -0.5;
    if (v1422 > 0.0) {
      double v1423 = 0.5;
    }
    double v1424 = v1422 + v1423;
    if (v1424 <= 2147483650.0)
    {
      if (v1424 >= -2147483650.0) {
        int v1425 = (int)v1424;
      }
      else {
        int v1425 = 0x80000000;
      }
    }
    else
    {
      int v1425 = 0x7FFFFFFF;
    }
    v1426 = *v1418;
    char v1427 = 69;
    uint64_t v1428 = 1u;
    do
    {
      *v1418 = v1426 + 1;
      char *v1426 = v1427;
      v1426 = *v1418;
      if (*v1418 >= v1418[3])
      {
        v1426 = v1418[2];
        *v1418 = v1426;
      }
      char v1427 = aElev[v1428++];
    }
    while (v1428 != 6);
    unsigned int v1429 = v1425 % 86400;
    sprintf_8d(v1418, v1425 % 86400);
    v1430 = *v1418;
    char v1431 = 32;
    uint64_t v1432 = 1u;
    do
    {
      *v1418 = v1430 + 1;
      char *v1430 = v1431;
      v1430 = *v1418;
      if (*v1418 >= v1418[3])
      {
        v1430 = v1418[2];
        *v1418 = v1430;
      }
      char v1431 = asc_22BAAA81C[v1432++];
    }
    while (v1432 != 6);
    uint64_t v1433 = 0;
    while (1)
    {
      if (v1433 > 138)
      {
        if (v1433 == 0xFFFFFFFFLL || v1433 == 139)
        {
LABEL_2535:
          v1434 = *v1418;
          char v1435 = 32;
          uint64_t v1436 = 1u;
          do
          {
            *v1418 = v1434 + 1;
            char *v1434 = v1435;
            v1434 = *v1418;
            if (*v1418 >= v1418[3])
            {
              v1434 = v1418[2];
              *v1418 = v1434;
            }
            char v1435 = asc_22BAAA791[v1436++];
          }
          while (v1436 != 4);
        }
      }
      else if (v1433 == 32 || v1433 == 129)
      {
        goto LABEL_2535;
      }
      sprintf_4d(v1418, *(char *)(v1420 + v1433++));
      if (v1433 == 178)
      {
        v1437 = (*v1418)++;
        char *v1437 = 10;
        if (*v1418 >= v1418[3]) {
          *v1418 = v1418[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
        v1438 = *v1418;
        char v1439 = 65;
        uint64_t v1440 = 1u;
        do
        {
          *v1418 = v1438 + 1;
          char *v1438 = v1439;
          v1438 = *v1418;
          if (*v1418 >= v1418[3])
          {
            v1438 = v1418[2];
            *v1418 = v1438;
          }
          char v1439 = aAzim[v1440++];
        }
        while (v1440 != 6);
        sprintf_8d(v1418, v1429);
        v1441 = *v1418;
        char v1442 = 32;
        uint64_t v1443 = 1u;
        do
        {
          *v1418 = v1441 + 1;
          char *v1441 = v1442;
          v1441 = *v1418;
          if (*v1418 >= v1418[3])
          {
            v1441 = v1418[2];
            *v1418 = v1441;
          }
          char v1442 = asc_22BAAA81C[v1443++];
        }
        while (v1443 != 6);
        uint64_t v1444 = 0;
        while (2)
        {
          if (v1444 > 138)
          {
            if (v1444 == 0xFFFFFFFFLL || v1444 == 139) {
              goto LABEL_2557;
            }
          }
          else
          {
            if (v1444 != 32 && v1444 != 129) {
              goto LABEL_2561;
            }
LABEL_2557:
            v1445 = *v1418;
            char v1446 = 32;
            uint64_t v1447 = 1u;
            do
            {
              *v1418 = v1445 + 1;
              char *v1445 = v1446;
              v1445 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1445 = v1418[2];
                *v1418 = v1445;
              }
              char v1446 = asc_22BAAA791[v1447++];
            }
            while (v1447 != 4);
          }
LABEL_2561:
          sprintf_4d(v1418, *(__int16 *)(v1420 + 2 * v1444++ + 178));
          if (v1444 != 178) {
            continue;
          }
          break;
        }
        v1448 = (*v1418)++;
        char *v1448 = 10;
        if (*v1418 >= v1418[3]) {
          *v1418 = v1418[2];
        }
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
        v1449 = *v1418;
        char v1450 = 83;
        uint64_t v1451 = 1u;
        do
        {
          *v1418 = v1449 + 1;
          char *v1449 = v1450;
          v1449 = *v1418;
          if (*v1418 >= v1418[3])
          {
            v1449 = v1418[2];
            *v1418 = v1449;
          }
          char v1450 = aSidx[v1451++];
        }
        while (v1451 != 6);
        sprintf_8d(v1418, v1429);
        v1452 = *v1418;
        char v1453 = 32;
        uint64_t v1454 = 1u;
        do
        {
          *v1418 = v1452 + 1;
          char *v1452 = v1453;
          v1452 = *v1418;
          if (*v1418 >= v1418[3])
          {
            v1452 = v1418[2];
            *v1418 = v1452;
          }
          char v1453 = asc_22BAAA81C[v1454++];
        }
        while (v1454 != 6);
        uint64_t v1455 = 0;
        while (2)
        {
          if (v1455 > 138)
          {
            if (v1455 == 0xFFFFFFFFLL || v1455 == 139) {
              goto LABEL_2579;
            }
          }
          else
          {
            if (v1455 != 32 && v1455 != 129) {
              goto LABEL_2583;
            }
LABEL_2579:
            v1456 = *v1418;
            char v1457 = 32;
            uint64_t v1458 = 1u;
            do
            {
              *v1418 = v1456 + 1;
              char *v1456 = v1457;
              v1456 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1456 = v1418[2];
                *v1418 = v1456;
              }
              char v1457 = asc_22BAAA791[v1458++];
            }
            while (v1458 != 4);
          }
LABEL_2583:
          sprintf_4d(v1418, (char)v1419[v1455++ + 3996]);
          if (v1455 == 178)
          {
            v1459 = (*v1418)++;
            char *v1459 = 10;
            if (*v1418 >= v1418[3]) {
              *v1418 = v1418[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
            v1460 = *v1418;
            char v1461 = 75;
            uint64_t v1462 = 1u;
            do
            {
              *v1418 = v1460 + 1;
              char *v1460 = v1461;
              v1460 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1460 = v1418[2];
                *v1418 = v1460;
              }
              char v1461 = aKvis[v1462++];
            }
            while (v1462 != 6);
            sprintf_8d(v1418, v1429);
            v1463 = *v1418;
            char v1464 = 32;
            uint64_t v1465 = 1u;
            do
            {
              *v1418 = v1463 + 1;
              char *v1463 = v1464;
              v1463 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1463 = v1418[2];
                *v1418 = v1463;
              }
              char v1464 = asc_22BAAA81C[v1465++];
            }
            while (v1465 != 6);
            uint64_t v1466 = 0;
            uint64_t v1467 = *v1421;
            if (v1467 >= 0xAA) {
              uint64_t v1468 = 178;
            }
            else {
              uint64_t v1468 = v1467 + 8;
            }
            do
            {
              if (v1466 == *v1421)
              {
                uint64_t v1469 = 0;
                v1470 = *v1418;
                char v1471 = 32;
                do
                {
                  *v1418 = v1470 + 1;
                  char *v1470 = v1471;
                  v1470 = *v1418;
                  if (*v1418 >= v1418[3])
                  {
                    v1470 = v1418[2];
                    *v1418 = v1470;
                  }
                  char v1471 = asc_22BAAA834[++v1469];
                }
                while (v1469 != 4);
              }
              sprintf_4d(v1418, *(__int16 *)&v1419[2 * v1466++ + 4174]);
            }
            while (v1466 != v1468);
            v1472 = (*v1418)++;
            char *v1472 = 10;
            if (*v1418 >= v1418[3]) {
              *v1418 = v1418[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
            v1473 = *v1418;
            char v1474 = 77;
            uint64_t v1475 = 1u;
            do
            {
              *v1418 = v1473 + 1;
              char *v1473 = v1474;
              v1473 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1473 = v1418[2];
                *v1418 = v1473;
              }
              char v1474 = aMvis[v1475++];
            }
            while (v1475 != 6);
            sprintf_8d(v1418, v1429);
            v1476 = *v1418;
            char v1477 = 32;
            uint64_t v1478 = 1u;
            do
            {
              *v1418 = v1476 + 1;
              char *v1476 = v1477;
              v1476 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1476 = v1418[2];
                *v1418 = v1476;
              }
              char v1477 = asc_22BAAA81C[v1478++];
            }
            while (v1478 != 6);
            uint64_t v1479 = 0;
            uint64_t v1480 = v1419[6133];
            if (v1480 >= 0xAA) {
              uint64_t v1481 = 178;
            }
            else {
              uint64_t v1481 = v1480 + 8;
            }
            do
            {
              if (v1479 == v1419[6133])
              {
                uint64_t v1482 = 0;
                v1483 = *v1418;
                char v1484 = 32;
                do
                {
                  *v1418 = v1483 + 1;
                  char *v1483 = v1484;
                  v1483 = *v1418;
                  if (*v1418 >= v1418[3])
                  {
                    v1483 = v1418[2];
                    *v1418 = v1483;
                  }
                  char v1484 = asc_22BAAA834[++v1482];
                }
                while (v1482 != 4);
              }
              sprintf_4d(v1418, *(__int16 *)&v1419[2 * v1479++ + 4530]);
            }
            while (v1479 != v1481);
            v1485 = (*v1418)++;
            char *v1485 = 10;
            if (*v1418 >= v1418[3]) {
              *v1418 = v1418[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
            v1486 = *v1418;
            char v1487 = 65;
            uint64_t v1488 = 1u;
            do
            {
              *v1418 = v1486 + 1;
              char *v1486 = v1487;
              v1486 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1486 = v1418[2];
                *v1418 = v1486;
              }
              char v1487 = aAaok[v1488++];
            }
            while (v1488 != 6);
            sprintf_8d(v1418, v1429);
            v1489 = *v1418;
            char v1490 = 32;
            uint64_t v1491 = 1u;
            do
            {
              *v1418 = v1489 + 1;
              char *v1489 = v1490;
              v1489 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1489 = v1418[2];
                *v1418 = v1489;
              }
              char v1490 = asc_22BAAA81C[v1491++];
            }
            while (v1491 != 6);
            uint64_t v1492 = 0;
            uint64_t v1493 = v1419[6136];
            if (v1493 >= 0x4A) {
              uint64_t v1494 = 82;
            }
            else {
              uint64_t v1494 = v1493 + 8;
            }
            do
            {
              if (v1492 == v1419[6136])
              {
                uint64_t v1495 = 0;
                v1496 = *v1418;
                char v1497 = 32;
                do
                {
                  *v1418 = v1496 + 1;
                  char *v1496 = v1497;
                  v1496 = *v1418;
                  if (*v1418 >= v1418[3])
                  {
                    v1496 = v1418[2];
                    *v1418 = v1496;
                  }
                  char v1497 = asc_22BAAA834[++v1495];
                }
                while (v1495 != 4);
              }
              sprintf_4d(v1418, v1419[48 * v1492++ + 64]);
            }
            while (v1492 != v1494);
            v1498 = (*v1418)++;
            char *v1498 = 10;
            if (*v1418 >= v1418[3]) {
              *v1418 = v1418[2];
            }
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
            v1499 = *v1418;
            char v1500 = 86;
            uint64_t v1501 = 1u;
            do
            {
              *v1418 = v1499 + 1;
              char *v1499 = v1500;
              v1499 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1499 = v1418[2];
                *v1418 = v1499;
              }
              char v1500 = aViz[v1501++];
            }
            while (v1501 != 6);
            sprintf_8d(v1418, v1429);
            sprintf_5d(v1418, *v1421);
            sprintf_4d(v1418, v1419[6133]);
            sprintf_4d(v1418, v1419[6134]);
            sprintf_4d(v1418, v1419[6135]);
            sprintf_4d(v1418, v1419[6136]);
            if (*v1421)
            {
              unint64_t v1502 = 0;
              do
              {
                v1547[0] = 0;
                v1503 = &v1419[2 * v1502];
                int v1504 = *((unsigned __int16 *)v1503 + 2087);
                if ((__int16)v1504 < 1)
                {
                  uint64_t v1509 = 0;
                  v1510 = (__int16 *)(v1503 + 4174);
                  v1511 = *v1418;
                  char v1512 = 32;
                  do
                  {
                    *v1418 = v1511 + 1;
                    char *v1511 = v1512;
                    v1511 = *v1418;
                    if (*v1418 >= v1418[3])
                    {
                      v1511 = v1418[2];
                      *v1418 = v1511;
                    }
                    char v1512 = aX[++v1509];
                  }
                  while (v1509 != 2);
                  int v1505 = *v1510;
                }
                else
                {
                  int v1505 = LongPrnIdx_To_Prn(v1504 - 1, (int *)v1547);
                  v1506 = (*v1418)++;
                  char *v1506 = 32;
                  v1507 = *v1418;
                  if (*v1418 >= v1418[3]) {
                    v1507 = v1418[2];
                  }
                  char v1508 = ch_CONSTELL_ID[v1547[0]];
                  *v1418 = v1507 + 1;
                  char *v1507 = v1508;
                  if (*v1418 >= v1418[3]) {
                    *v1418 = v1418[2];
                  }
                }
                if (v1505 >= 0) {
                  unsigned int v1513 = v1505;
                }
                else {
                  unsigned int v1513 = -v1505;
                }
                sprintf1da(v1418, v1513, v1571, 0, v1505 >> 31);
                ++v1502;
              }
              while (v1502 < *v1421);
            }
            uint64_t v1514 = 0;
            v1515 = *v1418;
            char v1516 = 32;
            do
            {
              *v1418 = v1515 + 1;
              char *v1515 = v1516;
              v1515 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1515 = v1418[2];
                *v1418 = v1515;
              }
              char v1516 = aGfvz[++v1514];
            }
            while (v1514 != 8);
            sprintf_4d(v1418, (char)v1419[6211]);
            sprintf_3d(v1418, (char)v1419[6210]);
            uint64_t v1517 = 0;
            v1518 = *v1418;
            char v1519 = 32;
            do
            {
              *v1418 = v1518 + 1;
              char *v1518 = v1519;
              v1518 = *v1418;
              if (*v1418 >= v1418[3])
              {
                v1518 = v1418[2];
                *v1418 = v1518;
              }
              char v1519 = asc_22BAAA2FA[++v1517];
            }
            while (v1517 != 2);
            uint64_t v1520 = 0;
            v1521 = v1419 + 6196;
            do
              sprintf_3d(v1418, (char)v1521[v1520++]);
            while (v1520 != 14);
            v1522 = (*v1418)++;
            char *v1522 = 10;
            if (*v1418 >= v1418[3]) {
              *v1418 = v1418[2];
            }
            return GNSS_Nav_Debug_Flush_Check((uint64_t)v1418);
          }
          continue;
        }
      }
    }
  }
  return result;
}

void *print_line_LS(void *result, int a2)
{
  uint64_t v2 = result[46];
  uint64_t v3 = result[10];
  uint64_t v4 = result[22];
  uint64_t v5 = (double *)result[35];
  switch(a2)
  {
    case 1:
      uint64_t v6 = result[29];
      unsigned int v7 = *(char *)(v6 + 26144);
      unsigned int v8 = *(char *)(v6 + 26145);
      double v9 = 0.0;
      if (*(char *)(v6 + 26143) < 0)
      {
        double v10 = 9999000.0;
      }
      else
      {
        double v10 = 9999000.0;
        if (*(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 26143) + 25848) <= 9999000.0)
        {
          double v9 = *(double *)(v6 + 25664);
          double v10 = *(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 26143) + 25848);
        }
      }
      char v11 = (double *)(v6 + 25616);
      if ((v7 & 0x80000000) == 0 && v10 >= *(double *)(v6 + 8 * v7 + 25848))
      {
        double v9 = *(double *)(v6 + 25680);
        double v10 = *(double *)(v6 + 8 * v7 + 25848);
      }
      if ((v8 & 0x80000000) != 0 || v10 < *(double *)(v6 + 8 * v8 + 25848))
      {
        int v13 = "LS_All ";
        goto LABEL_23;
      }
      __int16 v12 = (double *)(v6 + 25696);
      int v13 = "LS_All ";
      break;
    case 2:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u) {
        return result;
      }
      char v11 = v5 + 36;
      __int16 v12 = v5 + 42;
      int v13 = "LS_GPS ";
      break;
    case 3:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u) {
        return result;
      }
      char v11 = v5 + 103;
      __int16 v12 = v5 + 111;
      int v13 = "LS_Glo ";
      break;
    case 4:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u) {
        return result;
      }
      char v11 = v5 + 170;
      __int16 v12 = v5 + 176;
      int v13 = "LS_GAL ";
      break;
    default:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u) {
        return result;
      }
      char v11 = v5 + 237;
      __int16 v12 = v5 + 247;
      int v13 = "LS_BDS ";
      break;
  }
  double v9 = *v12;
LABEL_23:
  char v14 = *v13;
  if (*v13)
  {
    unsigned __int16 v15 = *(char **)v2;
    char v16 = (unsigned __int8 *)(v13 + 1);
    do
    {
      *(void *)uint64_t v2 = v15 + 1;
      char *v15 = v14;
      unsigned __int16 v15 = *(char **)v2;
      if (*(void *)v2 >= *(void *)(v2 + 24))
      {
        unsigned __int16 v15 = *(char **)(v2 + 16);
        *(void *)uint64_t v2 = v15;
      }
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  uint64_t v18 = 0;
  uint64_t v19 = v4 + 27072;
  uint64_t v20 = v3 + 208;
  do
  {
    if ((char)v11[51] < 0)
    {
      double v21 = 0.0;
      if (!v18) {
        goto LABEL_37;
      }
    }
    else
    {
      double v21 = v11[v18 + 16] - *(double *)(v20 + 8 * v18);
      if (!v18) {
        goto LABEL_37;
      }
    }
    if (v18 != 1) {
      goto LABEL_38;
    }
    double v22 = -6.28318531;
    if (v21 >= 3.14159265 || (double v22 = 6.28318531, v21 < -3.14159265)) {
      double v21 = v21 + v22;
    }
LABEL_37:
    double v21 = v21 * *(double *)(v19 + 8 * v18);
LABEL_38:
    unsigned __int16 v23 = (unsigned char *)(*(void *)v2)++;
    *unsigned __int16 v23 = 32;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_12f3((char **)v2, v21);
    ++v18;
  }
  while (v18 != 3);
  char v24 = (unsigned char *)(*(void *)v2)++;
  *char v24 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_sgR8((void *)v2, v11[24]);
  sprintf_sgR8((void *)v2, -v11[23]);
  sprintf_6d((void *)v2, (int)v11[25]);
  int v25 = *(char **)v2;
  char v26 = 32;
  uint64_t v27 = 1u;
  do
  {
    *(void *)uint64_t v2 = v25 + 1;
    *int v25 = v26;
    int v25 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      int v25 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v25;
    }
    char v26 = aClk[v27++];
  }
  while (v27 != 6);
  sprintf_8d((void *)v2, (int)v9);
  sprintf_sgR8((void *)v2, v11[20]);
  sprintf_sgR8((void *)v2, v11[12]);
  uint64_t v28 = (unsigned char *)(*(void *)v2)++;
  *uint64_t v28 = 32;
  char v29 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    char v29 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v29 + 1;
  *char v29 = 80;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_2d((void *)v2, *((unsigned __int8 *)v11 + 392));
  sprintf_3d((void *)v2, *((char *)v11 + 408));
  double v30 = v11[50];
  double v31 = v30 * 10.0;
  BOOL v32 = v30 < 9.89999962;
  double v33 = 98.9999962;
  if (v32) {
    double v33 = v31;
  }
  double v34 = -0.5;
  if (v33 > 0.0) {
    double v34 = 0.5;
  }
  double v35 = v33 + v34;
  if (v35 <= 2147483650.0)
  {
    if (v35 >= -2147483650.0) {
      unsigned int v36 = (int)v35;
    }
    else {
      unsigned int v36 = 0x80000000;
    }
  }
  else
  {
    unsigned int v36 = 0x7FFFFFFF;
  }
  sprintf_3f(v2, v36, 2);
  uint64_t v37 = 0;
  __int16 v38 = *(char **)v2;
  char v39 = 32;
  do
  {
    *(void *)uint64_t v2 = v38 + 1;
    *__int16 v38 = v39;
    __int16 v38 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      __int16 v38 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v38;
    }
    char v39 = aEl[++v37];
  }
  while (v37 != 4);
  sprintf_ACC((char **)v2, v11[26]);
  BOOL v40 = (unsigned char *)(*(void *)v2)++;
  *BOOL v40 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_ACC((char **)v2, v11[27]);
  double v41 = (unsigned char *)(*(void *)v2)++;
  *double v41 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_ACC((char **)v2, v11[28]);
  uint64_t v42 = 0;
  unsigned __int16 v43 = *(char **)v2;
  char v44 = 32;
  do
  {
    *(void *)uint64_t v2 = v43 + 1;
    *unsigned __int16 v43 = v44;
    unsigned __int16 v43 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24))
    {
      unsigned __int16 v43 = *(char **)(v2 + 16);
      *(void *)uint64_t v2 = v43;
    }
    char v44 = aVf[++v42];
  }
  while (v42 != 4);
  sprintf_sgR8((void *)v2, v11[2]);
  unsigned int v45 = (unsigned char *)(*(void *)v2)++;
  *unsigned int v45 = 32;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_sgR8((void *)v2, v11[4]);
  v46 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v46 = 32;
  v47 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v47 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v47 + 1;
  char *v47 = 72;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[45], 99999.0));
  v48 = (unsigned char *)(*(void *)v2)++;
  unsigned char *v48 = 32;
  char v49 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    char v49 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v49 + 1;
  *char v49 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[46], 99999.0));
  int v50 = (unsigned char *)(*(void *)v2)++;
  *int v50 = 32;
  v51 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v51 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v51 + 1;
  char *v51 = 66;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[47], 99999.0));
  double v52 = (unsigned char *)(*(void *)v2)++;
  *double v52 = 32;
  double v53 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    double v53 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v53 + 1;
  *double v53 = 83;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_6d((void *)v2, (int)fmin(v11[48], 99999.0));
  double v54 = (unsigned char *)(*(void *)v2)++;
  *double v54 = 32;
  int v55 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v55 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v55 + 1;
  *int v55 = 72;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 320));
  uint64_t v56 = (unsigned char *)(*(void *)v2)++;
  *uint64_t v56 = 32;
  v57 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    v57 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v57 + 1;
  char *v57 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 321));
  char v58 = (unsigned char *)(*(void *)v2)++;
  *char v58 = 32;
  int v59 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v59 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v59 + 1;
  *int v59 = 66;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 322));
  int v60 = (unsigned char *)(*(void *)v2)++;
  *int v60 = 32;
  int v61 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v61 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v61 + 1;
  *int v61 = 83;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_3d((void *)v2, *((char *)v11 + 323));
  int v62 = (unsigned char *)(*(void *)v2)++;
  *int v62 = 32;
  int v63 = *(char **)v2;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    int v63 = *(char **)(v2 + 16);
  }
  *(void *)uint64_t v2 = v63 + 1;
  *int v63 = 86;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }
  sprintf_2d((void *)v2, *((unsigned __int8 *)v11 + 488));
  sprintf_3d((void *)v2, *((char *)v11 + 504));
  double v64 = v11[62];
  double v65 = v64 * 100.0;
  BOOL v32 = v64 < 9.98999977;
  double v66 = 998.999977;
  if (v32) {
    double v66 = v65;
  }
  double v67 = -0.5;
  if (v66 > 0.0) {
    double v67 = 0.5;
  }
  double v68 = v66 + v67;
  if (v68 <= 2147483650.0)
  {
    if (v68 >= -2147483650.0) {
      unsigned int v69 = (int)v68;
    }
    else {
      unsigned int v69 = 0x80000000;
    }
  }
  else
  {
    unsigned int v69 = 0x7FFFFFFF;
  }
  sprintf_4f(v2, v69, 3);
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    v70 = (unsigned char *)(*(void *)v2)++;
    unsigned char *v70 = 32;
    unint64_t v71 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      unint64_t v71 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v71 + 1;
    *unint64_t v71 = 72;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[57], 99.0));
    double v72 = (unsigned char *)(*(void *)v2)++;
    *double v72 = 32;
    v73 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      v73 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v73 + 1;
    char *v73 = 86;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[58], 99.0));
    v74 = (unsigned char *)(*(void *)v2)++;
    unsigned char *v74 = 32;
    char v75 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      char v75 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v75 + 1;
    *char v75 = 66;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[59], 99.0));
    uint64_t v76 = (unsigned char *)(*(void *)v2)++;
    *uint64_t v76 = 32;
    uint64_t v77 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      uint64_t v77 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v77 + 1;
    *uint64_t v77 = 83;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, (int)fmin(v11[60], 99.0));
    v78 = (unsigned char *)(*(void *)v2)++;
    unsigned char *v78 = 32;
    char v79 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      char v79 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v79 + 1;
    *char v79 = 72;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, *((char *)v11 + 416));
    double v80 = (unsigned char *)(*(void *)v2)++;
    *double v80 = 32;
    double v81 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      double v81 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v81 + 1;
    *double v81 = 86;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, *((char *)v11 + 417));
    unsigned int v82 = (unsigned char *)(*(void *)v2)++;
    *unsigned int v82 = 32;
    double v83 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      double v83 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v83 + 1;
    *double v83 = 66;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, *((char *)v11 + 418));
    double v84 = (unsigned char *)(*(void *)v2)++;
    *double v84 = 32;
    double v85 = *(char **)v2;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      double v85 = *(char **)(v2 + 16);
    }
    *(void *)uint64_t v2 = v85 + 1;
    *double v85 = 83;
    if (*(void *)v2 >= *(void *)(v2 + 24)) {
      *(void *)uint64_t v2 = *(void *)(v2 + 16);
    }
    sprintf_3d((void *)v2, *((char *)v11 + 419));
  }
  int v86 = (unsigned char *)(*(void *)v2)++;
  *int v86 = 10;
  if (*(void *)v2 >= *(void *)(v2 + 24)) {
    *(void *)uint64_t v2 = *(void *)(v2 + 16);
  }

  return (void *)GNSS_Nav_Debug_Flush_Check(v2);
}

const char *Get_Str_FIX_TYPE(unsigned int a1)
{
  if (a1 < 6) {
    return off_2648B13B8[a1];
  }
  EvCrt_Illegal_Default("Get_Str_FIX_TYPE", 0x10DAu);
  return "xx";
}

uint64_t sprintf_LaLo(char **a1, uint64_t a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    double v6 = *(double *)(a2 + 8 * v4) * 57.2957795;
    double v7 = -v6;
    if (v6 >= 0.0) {
      double v7 = *(double *)(a2 + 8 * v4) * 57.2957795;
    }
    unsigned int v8 = (int)v7;
    char v9 = v5;
    double v10 = (v7 - (double)(int)v7) * 60.0;
    unsigned int v11 = (int)v10;
    double v12 = (v10 - (double)(int)v10) * 60.0;
    sprintf_4d(a1, v8);
    sprintf_3d(a1, v11);
    if (v12 * 100000.0 <= 0.0) {
      double v13 = -0.5;
    }
    else {
      double v13 = 0.5;
    }
    double v14 = v12 * 100000.0 + v13;
    if (v14 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0) {
        unsigned int v15 = (int)v14;
      }
      else {
        unsigned int v15 = 0x80000000;
      }
    }
    else
    {
      unsigned int v15 = 0x7FFFFFFF;
    }
    uint64_t result = sprintf_8f((uint64_t)a1, v15, 6);
    int v17 = &ch_NSEW[8 * v4];
    if (*(double *)(a2 + 8 * v4) < 0.0) {
      v17 += 4;
    }
    char v18 = *v17;
    if (*v17)
    {
      uint64_t v19 = *a1;
      uint64_t v20 = (unsigned __int8 *)(v17 + 1);
      do
      {
        *a1 = v19 + 1;
        *uint64_t v19 = v18;
        uint64_t v19 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v19 = a1[2];
          *a1 = v19;
        }
        int v21 = *v20++;
        char v18 = v21;
      }
      while (v21);
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t Get_Char_Ass_Status_Edit(int a1)
{
  uint64_t result = 45;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 82;
      break;
    case 2:
    case 16:
    case 38:
      uint64_t result = 65;
      break;
    case 3:
      uint64_t result = 73;
      break;
    case 4:
      uint64_t result = 83;
      break;
    case 5:
    case 39:
      uint64_t result = 77;
      break;
    case 6:
    case 27:
    case 31:
      uint64_t result = 68;
      break;
    case 7:
      uint64_t result = 84;
      break;
    case 8:
    case 17:
      uint64_t result = 66;
      break;
    case 9:
      uint64_t result = 85;
      break;
    case 10:
    case 37:
      uint64_t result = 80;
      break;
    case 11:
      uint64_t result = 67;
      break;
    case 12:
      uint64_t result = 86;
      break;
    case 13:
      goto LABEL_4;
    case 14:
      uint64_t result = 88;
      break;
    case 15:
    case 30:
    case 34:
    case 36:
      uint64_t result = 78;
      break;
    case 18:
      uint64_t result = 72;
      break;
    case 19:
      uint64_t result = 104;
      break;
    case 20:
      uint64_t result = 54;
      break;
    case 21:
      uint64_t result = 51;
      break;
    case 22:
      uint64_t result = 55;
      break;
    case 23:
      uint64_t result = 49;
      break;
    case 24:
      uint64_t result = 50;
      break;
    case 25:
      uint64_t result = 52;
      break;
    case 26:
      uint64_t result = 79;
      break;
    case 28:
    case 32:
      uint64_t result = 75;
      break;
    case 29:
    case 33:
    case 35:
      uint64_t result = 69;
      break;
    default:
      if ((a1 - 1000) >= 0xE)
      {
        gn_report_assertion_failure("Ass_Status_Edit_Char");
        uint64_t result = 120;
      }
      else
      {
LABEL_4:
        uint64_t result = 76;
      }
      break;
  }
  return result;
}

size_t LOGASN1Error(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (a2)
  {
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ErrorStr,%s, path,%s\n", v4, "PSP");
  }
  else
  {
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ErrorStr,%s\n", v6);
  }
  return LbsOsaTrace_WriteLog(0x13u, __str, v5, 0, 1);
}

uint64_t GN_AGLON_Set_Alm_El(unsigned __int16 *a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm_El");
  if (result)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 5u) {
      EvLog_v("GN_AGLON_Set_Alm_El: %4d %2d %2d %8d %7d %7d %8d %3d %5d %4d %d %d %d %d", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((_DWORD *)a1 + 1), *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((char *)a1 + 20), a1[11], (__int16)a1[12], (__int16)a1[13], *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30));
    }
    int v3 = *((unsigned __int8 *)a1 + 2);
    if ((v3 - 25) <= 0xFFFFFFE7)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: Sat_ID = %d <%d or >%d, Out of range!");
      return 0;
    }
    int v4 = *a1;
    if ((v4 - 1462) <= 0xFFFFFA4A)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmNA = %d <1 or >%d, Out of range!");
      return 0;
    }
    unsigned int v5 = *((unsigned __int8 *)a1 + 3);
    if (v5 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmHA = %d >31, Out of range!");
      return 0;
    }
    int v6 = *((_DWORD *)a1 + 1);
    if ((v6 - 0x100000) >> 21 != 2047)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmLambdaA = %d <-2^20 or >=2^20, Out of range!");
      return 0;
    }
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (v7 >= 0x200000)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmtlambdaA = %d >=2^21, Out of range!");
      return 0;
    }
    int v8 = *((_DWORD *)a1 + 3);
    if ((v8 - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaIa = %d <-2^17 or >=2^17, Out of range!");
      return 0;
    }
    int v9 = *((_DWORD *)a1 + 4);
    if ((v9 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTA = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    int v10 = *((char *)a1 + 20);
    if (((v10 - 64) & 0x80) == 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTdotA = %d <-2^6 or >=2^6, Out of range!");
      return 0;
    }
    int v11 = (__int16)a1[11];
    if (v11 < 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmEpsilonA = %d >=2^15, Out of range!");
      return 0;
    }
    unsigned __int16 v12 = a1[13];
    if ((unsigned __int16)((unsigned __int16)(v12 - 512) >> 10) <= 0x3Eu)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmTauA = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
    unsigned int v13 = *((unsigned __int8 *)a1 + 28);
    if (v13 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmCA = %d >1, Out of range!");
      return 0;
    }
    unsigned int v14 = *((unsigned __int8 *)a1 + 29);
    if (v14 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmMA = %d >3, Out of range!");
      return 0;
    }
    if (*((unsigned char *)a1 + 30)) {
      int v15 = 5;
    }
    else {
      int v15 = 3;
    }
    v16[0] = 0;
    v16[1] = v15;
    __int16 v17 = v4;
    char v18 = v3;
    char v19 = v5;
    int v20 = v6;
    unsigned int v21 = v7;
    int v22 = v8;
    int v23 = v9;
    char v24 = v10;
    __int16 v25 = v11;
    unsigned __int16 v26 = a1[12];
    unsigned __int16 v27 = v12;
    char v30 = 1;
    BOOL v28 = v13 != 0;
    char v29 = v14;
    uint64_t v35 = 0;
    __int16 v36 = 0;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    GLON_AlmInt2Bin((uint64_t)v16, (uint64_t)&v35);
    uint64_t v31 = 0;
    long long v32 = v37;
    uint64_t v33 = v38;
    BOOL v34 = HIDWORD(v35) == 5;
    WORD2(v31) = v36;
    return GN_AGLON_Set_Alm(*((unsigned __int8 *)a1 + 2), (uint64_t)&v31);
  }
  return result;
}

uint64_t lsim17_04SiCbInit(void (*a1)(void))
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1)
  {
    g_SimInfoCallbacdouble k = (uint64_t (*)(void))a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "LSM", 73, "GNS_ExecuteSimInfoCallback");
      LbsOsaTrace_WriteLog(0xCu, __str, v2, 4, 1);
    }
    if (g_SimInfoCallback)
    {
      size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SIMS_INFO_REQ =>SiCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_ExecuteSimInfoCallback");
        size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
      }
      g_SimInfoCallback(IsLoggingAllowed);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "GNS_ExecuteSimInfoCallback", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_ExecuteSimInfoCallback");
      int v13 = 4;
      return LbsOsaTrace_WriteLog(0xCu, __str, v12, v13, 1);
    }
  }
  else if (g_SimInfoCallback)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim17_04SiCbInit", 513);
      uint64_t result = LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    g_SimInfoCallbacdouble k = 0;
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim17_04SiCbInit", 513);
      int v13 = 2;
      return LbsOsaTrace_WriteLog(0xCu, __str, v12, v13, 1);
    }
  }
  return result;
}

uint64_t lsim17_05SimInfoUpdateInd(unsigned char *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim17_05SimInfoUpdateInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  int v4 = byte_26AE53231;
  int v5 = a1[15];
  byte_26AE5322E = a1[12];
  byte_26AE53231 = v5;
  byte_26AE53232 = a1[16];
  memcpy_s("lsim17_05SimInfoUpdateInd", 113, &unk_26AE5322F, 2u, a1 + 13, 2uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SIMINFO_UPDATE_IND,NumActiveSim,%u,DataSim,%u,CpSim,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim17_05SimInfoUpdateInd", byte_26AE5322E, byte_26AE53231, byte_26AE53232);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  byte_26AE5322D = 1;
  if (v4 != v5)
  {
    lsim05_42CloseSuplSessions(255, 0);
    lsim09_34SendClientSlpInfo();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim17_05SimInfoUpdateInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

BOOL GNS_SimsInfoInitialize(void (*a1)(void))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SimsInfoInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  int v4 = gnssOsa_Calloc("GNS_SimsInfoInitialize", 184, 1, 0x18uLL);
  int v5 = v4;
  if (v4)
  {
    v4[3] = 9;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_SimsInfoInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

size_t GNS_SimsInfoInd(int *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SimsInfoInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = gnssOsa_Calloc("GNS_SimsInfoInd", 223, 1, 0x14uLL);
    int v5 = (int)v4;
    if (!v4) {
      goto LABEL_9;
    }
    int v6 = *a1;
    v4[16] = *((unsigned char *)a1 + 4);
    *((_DWORD *)v4 + 3) = v6;
    AgpsSendFsmMsg(131, 131, 8634627, v4);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 69, "GNS_SimsInfoInd", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 0, 1);
  }
  int v5 = 0;
LABEL_9:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v5);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_SimsInfoInd");
    return LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return result;
}

void GncP07_06SendPENVRestoreResp(int a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v4 = gnssOsa_Calloc("GncP07_06SendPENVRestoreResp", 47, 1, 0x10uLL);
  if (v4)
  {
    int v5 = v4;
    v4[12] = a1;
    v4[13] = a2;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP =>GNM Code,%hhu,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP07_06SendPENVRestoreResp", a1, a2);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8787460, v5);
  }
}

uint64_t GncP07_07HandlePENVRestore(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ NVSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP07_07HandlePENVRestore", *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    size_t v4 = *(unsigned __int16 *)(a1 + 12);
    if (*(_WORD *)(a1 + 12) && (int v5 = *(const void **)(a1 + 16)) != 0)
    {
      if (v4 == 22944)
      {
        if ((void)xmmword_26AE66D28)
        {
          memcpy_s("GncP07_07HandlePENVRestore", 107, (void *)xmmword_26AE66D28, 0x59A0u, v5, v4);
          uint64_t v6 = *(void **)(a1 + 16);
          if (v6) {
            free(v6);
          }
          int v7 = 0;
          *(void *)(a1 + 16) = 0;
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v16 = mach_continuous_time();
            unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP07_07HandlePENVRestore", 769);
            LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
          }
          int v7 = 3;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NVSize Mismatch PESize,%u,GNMSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP07_07HandlePENVRestore", 22944, *(unsigned __int16 *)(a1 + 12));
        int v7 = 1;
        LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
      }
      else
      {
        int v7 = 1;
      }
      int v10 = *(unsigned __int8 *)(a1 + 24);
      int v11 = v7;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP07_07HandlePENVRestore", 513);
        LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
      }
      int v10 = *(unsigned __int8 *)(a1 + 24);
      int v11 = 2;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP07_07HandlePENVRestore", 517);
      LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
    }
    int v11 = 2;
    int v10 = 255;
  }
  GncP07_06SendPENVRestoreResp(v11, v10);
  return 0;
}

void GncP07_08WriteNVStore(size_t a1, unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NVStore\n");
LABEL_12:
    LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
    return;
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NVSize,0\n");
    goto LABEL_12;
  }
  size_t v4 = gnssOsa_Calloc("GncP07_08WriteNVStore", 134, 1, 0x18uLL);
  if (v4)
  {
    int v5 = v4;
    uint64_t v6 = gnssOsa_Calloc("GncP07_08WriteNVStore", 140, a1, 1uLL);
    v5[2] = v6;
    if (v6)
    {
      *((_WORD *)v5 + 6) = a1;
      memcpy_s("GncP07_08WriteNVStore", 148, v6, a1, a2, a1);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND =>GNM NVSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP07_08WriteNVStore", a1);
        LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8787203, v5);
    }
    else
    {
      free(v5);
    }
  }
}

size_t lsim15_02SendMobileInfoReq(int a1, char a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim15_02SendMobileInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_GnsCellInfoCallback)
  {
    memset_s(&__s, 8uLL, 0, 8uLL);
    int __s = a1;
    char v12 = a2;
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (a1)
    {
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:INFO_REQ => CiCB,ReqMask,%X\n");
LABEL_9:
        LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
      }
    }
    else if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeReg MobInfo\n");
      goto LABEL_9;
    }
    GNS_ExecuteCiCb(0, 8, (uint64_t)&__s);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim15_02SendMobileInfoReq");
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  return result;
}

size_t GNS_ExecuteCiCb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_ExecuteCiCb");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsCellInfoCallback)
  {
    g_GnsCellInfoCallback(a1, a2, a3);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "GNS_ExecuteCiCb", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_ExecuteCiCb");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

uint64_t lsim15_12HandleMobileInfo()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  *(void *)&v103[6212] = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "LSM", 73, "lsim15_12HandleMobileInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v2, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_MOBILE_INFO_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 73, "lsim15_12HandleMobileInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 4, 1);
  }
  if (!v0) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(v0 + 6232) == 1)
  {
    int v5 = *(unsigned __int8 *)(v0 + 12);
    if (v5 != 255)
    {
      uint64_t v6 = 0;
      uint64_t v7 = qword_26AE6D3E8;
      unsigned __int8 v8 = -1;
      char v9 = 1;
      while (1)
      {
        char v10 = v9;
        int v11 = *(unsigned __int8 *)(qword_26AE6D3E8 + 6220 * v6);
        if (v5 == v11) {
          break;
        }
        char v9 = 0;
        if (v8 < v6) {
          LOBYTE(v6) = v8;
        }
        if (v11 == 255) {
          unsigned __int8 v8 = v6;
        }
        uint64_t v6 = 1;
        if ((v10 & 1) == 0)
        {
          if (v8 >= 2u)
          {
            if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
              goto LABEL_25;
            }
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimIndex\n");
LABEL_24:
            LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
            goto LABEL_25;
          }
LABEL_29:
          unsigned int v18 = v8;
          char v19 = (_DWORD *)(qword_26AE6D3E8 + 6220 * v8);
          memcpy_s("lsim15_12HandleMobileInfo", 220, v19, 0x184Cu, (const void *)(v0 + 12), 0x184CuLL);
          int v21 = v19[1];
          int v20 = v19[2];
          int v22 = v19 + 1;
          g_LsimMobInfo = g_LsimMobInfo & 0xFE | (v20 == 2);
          switch(v21)
          {
            case 0:
              int v23 = *(_DWORD *)(v0 + 6232);
              int v24 = 1;
              goto LABEL_87;
            case 1:
              int v96 = v5;
              uint64_t v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v27 = mach_continuous_time();
                uint64_t v28 = v7 + 6220 * v18;
                unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIGSM,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,Ta,%u,NumNmr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v28 + 12), *(unsigned __int16 *)(v28 + 14), *(_DWORD *)(v28 + 16), *(_DWORD *)(v28 + 20), *(unsigned __int16 *)(v28 + 24), *(unsigned __int8 *)(v28 + 26));
                LbsOsaTrace_WriteLog(0xCu, __str, v29, 5, 1);
              }
              uint64_t v30 = v7 + 6220 * v18;
              if (*(unsigned char *)(v30 + 26))
              {
                unint64_t v31 = 0;
                uint64_t v32 = v30 + 12;
                uint64_t v33 = (unsigned __int8 *)(v7 + 6220 * v18 + 31);
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v34 = mach_continuous_time();
                    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIGSM NMR,Arfcn,%u,Bsic,%u,RxLev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v33 - 3), *(v33 - 1), *v33);
                    LbsOsaTrace_WriteLog(0xCu, __str, v35, 5, 1);
                  }
                  ++v31;
                  v33 += 4;
                }
                while (v31 < *(unsigned __int8 *)(v32 + 14));
              }
              goto LABEL_79;
            case 2:
              int v96 = v5;
              uint64_t v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v36 = mach_continuous_time();
                uint64_t v37 = v7 + 6220 * v18;
                unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,UarfcnDl,%u,UarfcnUl,%u,Psc,%u,NumMeasRes,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v37 + 12), *(unsigned __int16 *)(v37 + 14), *(_DWORD *)(v37 + 16), *(_DWORD *)(v37 + 20), *(unsigned __int16 *)(v37 + 24), *(unsigned __int16 *)(v37 + 26), *(unsigned __int16 *)(v37 + 28), *(unsigned __int8 *)(v37 + 30));
                LbsOsaTrace_WriteLog(0xCu, __str, v38, 5, 1);
              }
              uint64_t v39 = v7 + 6220 * v18;
              if (*(unsigned char *)(v39 + 30))
              {
                unint64_t v40 = 0;
                uint64_t v41 = v39 + 12;
                uint64_t v42 = v7 + 6220 * v18 + 48;
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    uint64_t v43 = v41;
                    unint64_t v44 = v41 + 392 * v40;
                    bzero(__str, 0x410uLL);
                    uint64_t v45 = mach_continuous_time();
                    int v46 = *(unsigned __int16 *)(v44 + 20);
                    int v47 = *(unsigned __int16 *)(v44 + 22);
                    int v48 = *(unsigned __int8 *)(v44 + 24);
                    int v49 = *(unsigned __int8 *)(v44 + 25);
                    uint64_t v41 = v43;
                    unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF MEASLIST,UarfcnDl,%u,UarfcnUl,%u,Rssi,%u,NumMeas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "LSM", 68, "lsim15_12HandleMobileInfo", v46, v47, v48, v49);
                    LbsOsaTrace_WriteLog(0xCu, __str, v50, 5, 1);
                  }
                  unint64_t v51 = v41 + 392 * v40;
                  int v53 = *(unsigned __int8 *)(v51 + 25);
                  double v52 = (unsigned __int8 *)(v51 + 25);
                  if (v53)
                  {
                    unint64_t v54 = 0;
                    int v55 = (unsigned __int8 *)v42;
                    do
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v56 = mach_continuous_time();
                        unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF MEAS,Ci,%u,Psc,%u,EcNo,%u,Rscp,%u,PathLoss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "LSM", 68, "lsim15_12HandleMobileInfo", *((_DWORD *)v55 - 2), *((unsigned __int16 *)v55 - 2), *(v55 - 2), *(v55 - 1), *v55);
                        LbsOsaTrace_WriteLog(0xCu, __str, v57, 5, 1);
                      }
                      ++v54;
                      v55 += 12;
                    }
                    while (v54 < *v52);
                  }
                  ++v40;
                  v42 += 392;
                }
                while (v40 < *(unsigned __int8 *)(v41 + 18));
              }
              goto LABEL_79;
            case 3:
              int v96 = v5;
              uint64_t v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v58 = mach_continuous_time();
                uint64_t v59 = v7 + 6220 * v18;
                unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,UarfcnNt,%u,CparamId,%u,NumMeasRes,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v59 + 12), *(unsigned __int16 *)(v59 + 14), *(_DWORD *)(v59 + 16), *(_DWORD *)(v59 + 20), *(unsigned __int16 *)(v59 + 24), *(unsigned __int16 *)(v59 + 26), *(unsigned __int8 *)(v59 + 28));
                LbsOsaTrace_WriteLog(0xCu, __str, v60, 5, 1);
              }
              uint64_t v61 = v7 + 6220 * v18;
              if (*(unsigned char *)(v61 + 28))
              {
                unint64_t v62 = 0;
                uint64_t v98 = v7 + 6220 * v18 + 45;
                uint64_t v99 = v61 + 12;
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v63 = mach_continuous_time();
                    unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT MEASLIST,UarfcnNt,%u,Rssi,%u,NumMeas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v99 + 772 * v62 + 20), *(unsigned __int8 *)(v99 + 772 * v62 + 22), *(unsigned __int8 *)(v99 + 772 * v62 + 23));
                    LbsOsaTrace_WriteLog(0xCu, __str, v64, 5, 1);
                  }
                  unint64_t v65 = v99 + 772 * v62;
                  int v67 = *(unsigned __int8 *)(v65 + 23);
                  double v66 = (unsigned __int8 *)(v65 + 23);
                  if (v67)
                  {
                    unint64_t v68 = 0;
                    uint64_t v69 = v98;
                    do
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v70 = mach_continuous_time();
                        uint64_t v71 = v99 + 772 * v62 + 24 * v68;
                        unsigned __int16 v72 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT MEAS,Ci,%u,CparamId,%u,Tgsn,%u,Rscp,%u,PathLoss,%u,NumIscp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "LSM", 68, "lsim15_12HandleMobileInfo", *(_DWORD *)(v71 + 24), *(unsigned __int8 *)(v71 + 28), *(unsigned __int8 *)(v71 + 29), *(unsigned __int8 *)(v71 + 30), *(unsigned __int8 *)(v71 + 31), *(unsigned __int8 *)(v71 + 32));
                        LbsOsaTrace_WriteLog(0xCu, __str, v72, 5, 1);
                      }
                      uint64_t v73 = v99 + 772 * v62 + 24 * v68;
                      int v75 = *(unsigned __int8 *)(v73 + 32);
                      v74 = (unsigned __int8 *)(v73 + 32);
                      if (v75)
                      {
                        unint64_t v76 = 0;
                        do
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v77 = mach_continuous_time();
                            unsigned __int16 v78 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT ISCP,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int8 *)(v69 + v76));
                            LbsOsaTrace_WriteLog(0xCu, __str, v78, 5, 1);
                          }
                          ++v76;
                        }
                        while (v76 < *v74);
                      }
                      ++v68;
                      v69 += 24;
                    }
                    while (v68 < *v66);
                  }
                  ++v62;
                  v98 += 772;
                }
                while (v62 < *(unsigned __int8 *)(v99 + 16));
              }
              goto LABEL_79;
            case 4:
              int v96 = v5;
              uint64_t v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v79 = mach_continuous_time();
                uint64_t v80 = v7 + 6220 * v18;
                unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CILTE,Mcc,%u,Mnc,%u,Ci,%u,Pci,%u,Tac,%u,Rsrp,%u,Rsrq,%u,Earfcn,%u,Ta,%u,NumNmr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v80 + 12), *(unsigned __int16 *)(v80 + 14), *(_DWORD *)(v80 + 16), *(unsigned __int16 *)(v80 + 20), *(_DWORD *)(v80 + 24), *(unsigned __int8 *)(v80 + 28), *(unsigned __int8 *)(v80 + 29), *(_DWORD *)(v80 + 32), *(unsigned __int16 *)(v80 + 36), *(unsigned __int8 *)(v80 + 38));
                LbsOsaTrace_WriteLog(0xCu, __str, v81, 5, 1);
              }
              uint64_t v82 = v7 + 6220 * v18;
              if (*(unsigned char *)(v82 + 38))
              {
                unint64_t v83 = 0;
                uint64_t v84 = v82 + 12;
                double v85 = (_DWORD *)(v7 + 6220 * v18 + 56);
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v86 = mach_continuous_time();
                    unsigned __int16 v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CILTE NMR,Mcc,%u,Mnc,%u,Ci,%u,Pci,%u,Rsrp,%u,Rsrq,%u,Tac,%u,Earfcn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "LSM", 68, "lsim15_12HandleMobileInfo", *((unsigned __int16 *)v85 - 8), *((unsigned __int16 *)v85 - 7), *(v85 - 3), *((unsigned __int16 *)v85 - 4), *((unsigned __int8 *)v85 - 6), *((unsigned __int8 *)v85 - 5), *(v85 - 1), *v85);
                    LbsOsaTrace_WriteLog(0xCu, __str, v87, 5, 1);
                  }
                  ++v83;
                  v85 += 5;
                }
                while (v83 < *(unsigned __int8 *)(v84 + 26));
              }
              goto LABEL_79;
            default:
              int v96 = v5;
              uint64_t v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v25 = mach_continuous_time();
                unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 73, "lsim15_12HandleMobileInfo", 515, *v22);
                LbsOsaTrace_WriteLog(0xCu, __str, v26, 4, 1);
              }
LABEL_79:
              *(void *)__str = 0;
              char v102 = -1;
              memset_s(v103, 0x1840uLL, 0, 0x1840uLL);
              int v88 = lsim05_37FillSuplLocIdFromLsimLocId(__str, v96, *(_DWORD *)(v97 + 6232));
              int v24 = 0;
              if (v88)
              {
                if (GN_SUPL_Mobile_Info_Ind_In((uint64_t)__str))
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(v100, 0x410uLL);
                    uint64_t v89 = mach_continuous_time();
                    unsigned __int16 v90 = snprintf(v100, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Mobile_Info_Ind_In successful\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "LSM", 68, "lsim15_12HandleMobileInfo");
                    LbsOsaTrace_WriteLog(0xCu, v100, v90, 5, 1);
                  }
                  GN_SUPL_Handler();
                  int v24 = 1;
                }
                else
                {
                  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
                  int v24 = 0;
                  if (IsLoggingAllowed)
                  {
                    bzero(v100, 0x410uLL);
                    uint64_t v92 = mach_continuous_time();
                    unsigned __int16 v93 = snprintf(v100, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Mobile_Info_Ind_In failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "LSM", 87, "lsim15_12HandleMobileInfo");
                    LbsOsaTrace_WriteLog(0xCu, v100, v93, 2, 1);
                    int v24 = 0;
                  }
                }
              }
              int v23 = *(_DWORD *)(v97 + 6232);
LABEL_87:
              lsim15_06SendMobInfoApiStatus(v23, v24, 0);
              if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
                return 0;
              }
              bzero(__str, 0x410uLL);
              unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              break;
          }
          goto LABEL_89;
        }
      }
      unsigned __int8 v8 = v6;
      goto LABEL_29;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v95 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimId,%u\n", v95);
      goto LABEL_24;
    }
LABEL_25:
    lsim15_06SendMobInfoApiStatus(*(_DWORD *)(v0 + 6232), 2, 0);
LABEL_26:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
LABEL_89:
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "lsim15_12HandleMobileInfo");
      goto LABEL_90;
    }
    return 0;
  }
  memset_s(&g_LsimMobInfo, 0x10uLL, 0, 0x10uLL);
  g_LsimMobInfo = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MobInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "lsim15_12HandleMobileInfo", 515, *(_DWORD *)(v0 + 6232));
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "LSM", 73, "lsim15_12HandleMobileInfo");
LABEL_90:
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  return 0;
}

void lsim15_06SendMobInfoApiStatus(int a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1 == 1)
  {
    int v5 = gnssOsa_Calloc("lsim15_06SendMobInfoApiStatus", 116, 1, 8uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      *int v5 = a3;
      v5[1] = a2;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>CiCB,Api,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim15_06SendMobInfoApiStatus", a3, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
      }
      GNS_ExecuteCiCb(1, 8, (uint64_t)v6);
      free(v6);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 87, "lsim15_06SendMobInfoApiStatus", 515, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
  }
}

uint64_t lsim15_13HandleImsiInfo(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim15_13HandleImsiInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_IMSI_INFO_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim15_13HandleImsiInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 40) == 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "lsim15_13HandleImsiInfo", 515, *(unsigned __int8 *)(a1 + 40));
        LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
      }
      lsim15_06SendMobInfoApiStatus(1, 2, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_34;
      }
    }
    else if (*(char *)(a1 + 39) < 0 && *(void *)(a1 + 24) >= 0x100uLL)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (*(char *)(a1 + 39) < 0) {
          uint64_t v7 = *(void *)(a1 + 24);
        }
        else {
          uint64_t v7 = *(unsigned __int8 *)(a1 + 39);
        }
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ImsiLength,%lu\n", (unint64_t)v6, "LSM", 87, "lsim15_13HandleImsiInfo", 514, v7);
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
      }
      lsim15_06SendMobInfoApiStatus(1, 2, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
LABEL_34:
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "lsim15_13HandleImsiInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
      }
    }
    else
    {
      memset(&v23, 0, sizeof(v23));
      std::string::operator=(&v23, (const std::string *)(a1 + 16));
      if (GN_SUPL_Set_SetIdParams((uint64_t)&v23, *(unsigned __int8 *)(a1 + 40)))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Set_SetIdParams Imsi Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim15_13HandleImsiInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
        }
        int v12 = 1;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Set_SetIdParams Imsi Rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim15_13HandleImsiInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
        }
        int v12 = 0;
      }
      lsim15_06SendMobInfoApiStatus(1, v12, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim15_13HandleImsiInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Imsi\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 69, "lsim15_13HandleImsiInfo", 517);
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 0, 1);
    }
    lsim15_06SendMobInfoApiStatus(1, 2, 1);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_34;
    }
  }
  return 0;
}

void sub_22B859350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *lsim15_21InitMobileInfo(void)
{
  g_LsimMobInfo = 0;
  size_t result = gnssOsa_Calloc("lsim15_21InitMobileInfo", 477, 2, 0x184CuLL);
  qword_26AE6D3E8 = (uint64_t)result;
  if (result)
  {
    *size_t result = -1;
    result[6220] = -1;
  }
  return result;
}

size_t lsim15_23CiCbInit(size_t result)
{
  uint64_t v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsCellInfoCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim15_23CiCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsCellInfoCallbacdouble k = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim15_23CiCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

BOOL GNS_CellInfoInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_CellInfoInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("GNS_CellInfoInitialize", 526, 1, 0x18uLL);
  unsigned __int16 v5 = v4;
  if (v4)
  {
    v4[3] = 10;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_CellInfoInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

uint64_t GNS_CellInfo(const void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_CellInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1)
  {
    uint64_t v6 = 1;
    unsigned __int16 v7 = (char *)gnssOsa_Calloc("GNS_CellInfo", 587, 1, 0x185CuLL);
    if (v7)
    {
      uint64_t v8 = v7;
      *((_DWORD *)v7 + 1558) = 1;
      v7[12] = a2;
      unsigned __int16 v9 = v7 + 12;
      memcpy_s("GNS_CellInfo", 599, v7 + 12, 0x184Cu, a1, 0x184CuLL);
      *unsigned __int16 v9 = a2;
      AgpsSendFsmMsg(131, 131, 8621571, v8);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_CellInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_CellInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
      }
      return 6;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MobileInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "GNS_CellInfo", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GNS_CellInfo");
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    return 2;
  }
  return v6;
}

uint64_t GNS_SetImsi(uint64_t a1, char a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_SetImsi");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_5:
      uint64_t v6 = (char *)gnssOsa_Calloc("GNS_SetImsi", 628, 1, 0x30uLL);
      if (v6)
      {
        unsigned __int16 v7 = v6;
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)a1);
        v7[40] = a2;
        AgpsSendFsmMsg(131, 131, 8636675, v7);
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_SetImsi");
          uint64_t v10 = 1;
          LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_SetImsi");
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
        }
        return 6;
      }
      return v10;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_5;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Imsi\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "GNS_SetImsi", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "GNS_SetImsi");
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
  }
  return 2;
}

uint64_t asn1PD_PosMethod(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned __int8 v7 = 0;
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (BitFromBuffer)
    {
      uint64_t v5 = Asn1Coder::DecodeEnumerationExtension(a1, &v7);
      v7 += 10;
      if (v5) {
        return v5;
      }
    }
    else
    {
      uint64_t v5 = Asn1Coder::DecodeInteger(a1, 0, 9u, &v7);
      if (v5) {
        return v5;
      }
    }
    if (v7 > 0x10u)
    {
      uint64_t v5 = 4;
      *(unsigned char *)(a1 + 16) = 4;
      SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    }
    else
    {
      uint64_t v5 = 0;
      *a2 = v7;
    }
  }
  return v5;
}

uint64_t asn1PD_QoP(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  *(unsigned char *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (unsigned char *)(a2 + 3));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (unsigned char *)(a2 + 4));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0xFFFFu, (_DWORD *)(a2 + 8));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 7u, (unsigned char *)(a2 + 12));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PE_UTCTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Asn1Coder::EncodeVisibleString7(a1, 0, 255, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (void *)a2, 0);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_UTCTime(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  Asn1Coder::DecodeInteger(a1, 0, 0xFFu, &v6);
  Asn1Coder::GetVisibleStringFromBuffer(a1, 7 * v6, 7, a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_PositionEstimate_uncertainty(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 127, *a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 127, a2[1]);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  int v9 = a2[2];

  return Asn1Coder::EncodeInteger(a1, 0, 180, v9);
}

uint64_t asn1PD_PositionEstimate_uncertainty(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, a2 + 1);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }

  return Asn1Coder::DecodeInteger(a1, 0, 0xB4u, a2 + 2);
}

uint64_t asn1PE_AltitudeInfo(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_12:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  unsigned int v8 = *a2;
  if (v8 >= 2)
  {
    if (v8 == 255)
    {
      uint64_t v4 = 1;
      *(unsigned char *)(a1 + 16) = 1;
      int v9 = *(_DWORD *)(a1 + 8);
      int v10 = *(_DWORD *)(a1 + 12);
      unsigned int v11 = 1;
    }
    else
    {
      uint64_t v4 = 4;
      *(unsigned char *)(a1 + 16) = 4;
      int v9 = *(_DWORD *)(a1 + 8);
      int v10 = *(_DWORD *)(a1 + 12);
      unsigned int v11 = 4;
    }
    SuplAsn1Logger::TraceError(v11, v9, v10);
    goto LABEL_11;
  }
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 1, v8);
  if (v4)
  {
LABEL_11:
    SuplAsn1Logger::TraceError(v4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = v4;
    goto LABEL_12;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 0x7FFF, *((unsigned __int16 *)a2 + 1));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_12;
  }
  int v13 = a2[4];

  return Asn1Coder::EncodeInteger(a1, 0, 127, v13);
}

uint64_t asn1PD_AltitudeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_10:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  unsigned __int8 v14 = 0;
  uint64_t v10 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v14);
  if (v10)
  {
    uint64_t v5 = v10;
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
LABEL_9:
    SuplAsn1Logger::TraceError(v10, v11, v12);
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_10;
  }
  if (v14 >= 2u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    LODWORD(v10) = 4;
    goto LABEL_9;
  }
  *(unsigned char *)a2 = v14;
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7FFFu, (_WORD *)(a2 + 2));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_10;
  }
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (unsigned char *)(a2 + 4));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_10;
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PE_PositionEstimate_latitudeSign(uint64_t a1, unsigned __int8 a2)
{
  if (a2 >= 2u)
  {
    if (a2 == 255)
    {
      uint64_t v3 = 1;
      *(unsigned char *)(a1 + 16) = 1;
      int v4 = *(_DWORD *)(a1 + 8);
      int v5 = *(_DWORD *)(a1 + 12);
      unsigned int v6 = 1;
    }
    else
    {
      uint64_t v3 = 4;
      *(unsigned char *)(a1 + 16) = 4;
      int v4 = *(_DWORD *)(a1 + 8);
      int v5 = *(_DWORD *)(a1 + 12);
      unsigned int v6 = 4;
    }
    SuplAsn1Logger::TraceError(v6, v4, v5);
  }
  else
  {
    uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 1, a2);
    if (!v3) {
      return v3;
    }
  }
  SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_PositionEstimate_latitudeSign(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned __int8 v9 = 0;
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v9);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_6:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  if (v9 > 1u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = 4;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
  *a2 = v9;
  return v5;
}

uint64_t asn1PE_PositionEstimate(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v7 = asn1PE_PositionEstimate_latitudeSign(a1, a2[3]);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 0x7FFFFF, *((_DWORD *)a2 + 1));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, -8388608, 0x7FFFFF, *((_DWORD *)a2 + 2));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_PositionEstimate_uncertainty(a1, a2 + 12);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (a2[1])
  {
    uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 100, a2[15]);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!a2[2]) {
    return 0;
  }

  return asn1PE_AltitudeInfo(a1, a2 + 16);
}

uint64_t asn1PD_PositionEstimate(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v8 = asn1PD_PositionEstimate_latitudeSign(a1, (unsigned __int8 *)(a2 + 3));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7FFFFFu, (_DWORD *)(a2 + 4));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v8 = Asn1Coder::DecodeInteger(a1, -8388608, 0x7FFFFF, (_DWORD *)(a2 + 8));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v8 = asn1PD_PositionEstimate_uncertainty(a1, (unsigned char *)(a2 + 12));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 0x64u, (unsigned char *)(a2 + 15));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    uint64_t v8 = asn1PD_AltitudeInfo(a1, a2 + 16);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horvel_bearing(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horvel_horspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horvel(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  uint64_t v8 = asn1PD_Horvel_bearing(a1, a2);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  uint64_t v8 = asn1PD_Horvel_horspeed(a1, a2 + 3);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horandvervel_verdirect(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 1u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandvervel_bearing(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandvervel_horspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandvervel_verspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandvervel(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  uint64_t v8 = asn1PD_Horandvervel_verdirect(a1, a2);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  uint64_t v8 = asn1PD_Horandvervel_bearing(a1, a2 + 3);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  uint64_t v8 = asn1PD_Horandvervel_horspeed(a1, a2 + 6);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  uint64_t v8 = asn1PD_Horandvervel_verspeed(a1, a2 + 9);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horveluncert_bearing(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horveluncert_horspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horveluncert_uncertspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horveluncert(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  uint64_t v8 = asn1PD_Horveluncert_bearing(a1, a2);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  uint64_t v8 = asn1PD_Horveluncert_horspeed(a1, a2 + 3);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  uint64_t v8 = asn1PD_Horveluncert_uncertspeed(a1, a2 + 6);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horandveruncert_verspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandveruncert_horuncertspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandveruncert_veruncertspeed(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Horandveruncert(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_14:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  Asn1Coder::GetBitStringFromBuffer(a1, 1u, a2, 0);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)
    || (Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2 + 3, 0), uint64_t v5 = *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 16))
    || (Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2 + 6, 0),
        uint64_t v5 = *(unsigned __int8 *)(a1 + 16),
        *(unsigned char *)(a1 + 16)))
  {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_14;
  }
  uint64_t v8 = asn1PD_Horandveruncert_verspeed(a1, a2 + 9);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  uint64_t v8 = asn1PD_Horandveruncert_horuncertspeed(a1, a2 + 12);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  uint64_t v8 = asn1PD_Horandveruncert_veruncertspeed(a1, a2 + 15);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

void asn1PD_Velocity(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_3:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return;
  }
  if (!BitFromBuffer)
  {
    __int16 v14 = 0;
    unsigned int v7 = Asn1Coder::DecodeInteger(a1, 0, 3u, &v14);
    if (v7)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int v8 = v14;
      *(unsigned char *)a2 = v14;
      switch(v8)
      {
        case 0:
          int v9 = asn1PD_Horvel(a1, (unint64_t *)(a2 + 8));
          goto LABEL_20;
        case 1:
          int v9 = asn1PD_Horandvervel(a1, (unint64_t *)(a2 + 56));
          goto LABEL_20;
        case 2:
          int v9 = asn1PD_Horveluncert(a1, (unint64_t *)(a2 + 152));
          goto LABEL_20;
        case 3:
          int v9 = asn1PD_Horandveruncert(a1, (unint64_t *)(a2 + 224));
LABEL_20:
          int v10 = v9;
          if (v9) {
            goto LABEL_21;
          }
          return;
        default:
          if (v8 == 255)
          {
            int v10 = 1;
            *(unsigned char *)(a1 + 16) = 1;
            int v11 = *(_DWORD *)(a1 + 8);
            int v12 = *(_DWORD *)(a1 + 12);
            unsigned int v13 = 1;
          }
          else
          {
            int v10 = 4;
            *(unsigned char *)(a1 + 16) = 4;
            int v11 = *(_DWORD *)(a1 + 8);
            int v12 = *(_DWORD *)(a1 + 12);
            unsigned int v13 = 4;
          }
          SuplAsn1Logger::TraceError(v13, v11, v12);
LABEL_21:
          int v5 = *(_DWORD *)(a1 + 8);
          int v6 = *(_DWORD *)(a1 + 12);
          unsigned int v7 = v10;
          break;
      }
    }
    goto LABEL_3;
  }

  Asn1Coder::SkipChoiceExtension(a1);
}

uint64_t asn1PE_Position(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  uint64_t v7 = asn1PE_UTCTime(a1, (uint64_t)(a2 + 8));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }

  return asn1PE_PositionEstimate(a1, a2 + 32);
}

uint64_t asn1PD_Position(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  uint64_t v8 = asn1PD_UTCTime(a1, (unint64_t *)(a2 + 8));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  uint64_t v8 = asn1PD_PositionEstimate(a1, a2 + 32);
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  if (*(unsigned char *)a2)
  {
    asn1PD_Velocity(a1, a2 + 56);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (!v9) {
    return 0;
  }

  return Asn1Coder::SkipSequenceExtension(a1);
}

_LPP_TRANSACTION *lpp_transaction_start(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v7 = 2;
    int v8 = 16426;
    int v9 = 445;
LABEL_12:
    ms_report_exception(v7, v8, v9, "lpp_transaction_start");
    return 0;
  }
  if (!a2)
  {
    int v7 = 2;
    int v8 = 16427;
    int v9 = 451;
    goto LABEL_12;
  }
  if (*a2 != 1)
  {
    if (!*a2)
    {
      uint64_t v5 = 0;
      char v6 = a3;
      switch(a3)
      {
        case 0:
          goto LABEL_21;
        case 1:
          goto LABEL_17;
        case 2:
          char v6 = 4;
          int v12 = lpp_transaction_location_information_abort;
          goto LABEL_20;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          int v7 = 2;
          int v8 = 16390;
          int v9 = 483;
          goto LABEL_12;
        default:
          goto LABEL_14;
      }
    }
    int v7 = 1;
    int v8 = 16436;
    int v9 = 524;
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  char v6 = 1;
  switch(a3)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 8:
      int v7 = 2;
      int v8 = 16390;
      int v9 = 518;
      goto LABEL_12;
    case 1:
      ++*(unsigned char *)(a1 + 24);
LABEL_17:
      char v6 = 3;
      goto LABEL_19;
    case 5:
      goto LABEL_21;
    case 6:
      char v6 = 2;
LABEL_19:
      int v12 = lpp_transaction_assistance_data_abort;
LABEL_20:
      uint64_t v5 = v12;
      goto LABEL_21;
    case 7:
      uint64_t v5 = 0;
      char v6 = 5;
LABEL_21:
      unsigned int v13 = (_LPP_TRANSACTION *)operator new(0x1E8uLL, MEMORY[0x263F8C180]);
      int v10 = v13;
      if (v13)
      {
        _LPP_TRANSACTION::_LPP_TRANSACTION(v13);
        uint64_t v14 = *(void *)a2;
        *((void *)v10 + 2) = *(void *)a2;
        if (v14 == 1)
        {
          int v15 = *(unsigned __int8 *)(a1 + 24);
          *((_DWORD *)v10 + 5) = v15;
          *(unsigned char *)(a1 + 24) = v15 + 1;
        }
        *((unsigned char *)v10 + 24) = v6;
        *(void *)((char *)v10 + 28) = *(void *)(a1 + 16);
        *((unsigned char *)v10 + 25) = 0;
        *((void *)v10 + 60) = v5;
        unsigned __int16 v16 = *(_LPP_TRANSACTION ***)(a1 + 40);
        if (v16)
        {
          unsigned __int16 v17 = (_LPP_TRANSACTION **)*v16;
          *unsigned __int16 v16 = v10;
          *(void *)int v10 = v17;
          *((void *)v10 + 1) = 0;
          if (v17) {
            unsigned __int16 v16 = v17;
          }
          v16[1] = v10;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Initial\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 68, "lpp_transaction_start", *((unsigned __int8 *)v10 + 24), *((_DWORD *)v10 + 8), *((unsigned __int8 *)v10 + 25));
          LbsOsaTrace_WriteLog(0x13u, __str, v19, 5, 1);
        }
      }
      else
      {
        ms_report_exception(2, 12288, 538, "lpp_transaction_start");
      }
      break;
    default:
LABEL_14:
      int v10 = 0;
      break;
  }
  return v10;
}

void sub_22B85C264(_Unwind_Exception *exception_object)
{
}

void lpp_transaction_assistance_data_abort(unsigned __int8 *a1)
{
  unsigned int v1 = a1[24];
  if (v1 <= 6)
  {
    if (((1 << v1) & 0x73) != 0)
    {
      int v2 = 16409;
      int v3 = 2107;
    }
    else
    {
      if (lpp_session_detect(a1 + 28))
      {
        a1[25] = 2;
        return;
      }
      int v2 = 16388;
      int v3 = 2097;
    }
    ms_report_exception(2, v2, v3, "lpp_transaction_assistance_data_abort");
  }
}

void lpp_transaction_location_information_abort(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 > 6) {
    return;
  }
  if (v3 != 4)
  {
    int v4 = 16409;
    int v5 = 2010;
LABEL_4:
    ms_report_exception(2, v4, v5, "lpp_transaction_location_information_abort");
    return;
  }
  int v8 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (!v8)
  {
    int v4 = 16388;
    int v5 = 1996;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    int v9 = v8;
    if (a3 == 1)
    {
      uint64_t v10 = 0;
      v14[0] = 0;
      do
      {
        int v11 = &v14[v10];
        *((void *)v11 + 5) = 0;
        *((_DWORD *)v11 + 12) = 0;
        *((void *)v11 + 2) = 0;
        *((void *)v11 + 3) = 0;
        *((void *)v11 + 1) = 0;
        v10 += 48;
        *((_DWORD *)v11 + 8) = 0;
      }
      while (v10 != 288);
      int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
      unsigned __int16 v16 = v12;
      v12[12] = 6;
      v12[14] = 0;
      v12[16] = 0;
      *((unsigned char *)v12 + 76) = 1;
      v12[18] = 2;
      v14[0] = 1;
      *(void *)int v12 = *(void *)(a1 + 16);
      unsigned int v13 = v16;
      *((_WORD *)v16 + 4) = 257;
      *((unsigned char *)v13 + 1392) = 1;
      lpp_transaction_send_uplink_message(a1, (uint64_t)&v15);
    }
    *(unsigned char *)(a1 + 48) = 4;
    *(uint64_t *)((char *)v9 + 68) = 0x10000000000;
  }
  *(unsigned char *)(a1 + 25) = 2;
  lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
}

uint64_t *lpp_lazy_transaction_detect(uint64_t a1, _DWORD *a2, int a3)
{
  for (unsigned int i = **(uint64_t ***)(a1 + 40); i; unsigned int i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 4) == *a2)
    {
      int v6 = *((unsigned __int8 *)i + 24);
      if (v6 == lpp_transaction_get_transaction_type(a3) && *((unsigned char *)i + 25) == 2) {
        break;
      }
    }
  }
  return i;
}

uint64_t lpp_transaction_get_transaction_type(int a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      uint64_t result = 3;
      break;
    case 2:
      uint64_t result = 4;
      break;
    case 3:
    case 4:
    case 8:
      ms_report_exception(2, 16390, 689, "lpp_transaction_get_transaction_type");
      goto LABEL_3;
    case 5:
      uint64_t result = 1;
      break;
    case 6:
      uint64_t result = 2;
      break;
    case 7:
      uint64_t result = 5;
      break;
    default:
LABEL_3:
      uint64_t result = 6;
      break;
  }
  return result;
}

size_t lpp_transaction_abort(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = *(unsigned __int8 *)(a1 + 25);
  if (v2 == 1)
  {
    unsigned int v3 = *(void (**)(uint64_t))(a1 + 480);
    if (v3)
    {
      v3(a1);
      *(void *)(a1 + 480) = 0;
      SendStatusReport(*(_DWORD *)(a1 + 32), 4, 0, 0, 0, 255);
    }
  }
  *(unsigned char *)(a1 + 25) = 2;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 68, "lpp_transaction_abort", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), v2, *(unsigned __int8 *)(a1 + 25));
    return LbsOsaTrace_WriteLog(0x13u, __str, v6, 5, 1);
  }
  return result;
}

uint64_t lpp_transaction_process_downlink_message(uint64_t a1, uint64_t a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v10 = 16426;
    int v11 = 762;
    goto LABEL_23;
  }
  if (!a2 || (uint64_t v3 = *(void *)(a2 + 16)) == 0)
  {
    int v10 = 16444;
    int v11 = 768;
LABEL_23:
    ms_report_exception(2, v10, v11, "lpp_transaction_process_downlink_message");
    return 0;
  }
  unsigned int v5 = lpp_transaction_convert_air_msg_to_event_type(*(_DWORD *)(v3 + 48));
  unsigned __int16 v6 = *(_DWORD **)(a2 + 16);
  int v7 = **(_DWORD ***)(a1 + 40);
  if (v7)
  {
    while (v7[4] != *v6 || v7[5] != v6[1])
    {
      int v7 = *(_DWORD **)v7;
      if (!v7) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v7 = lpp_lazy_transaction_detect(a1, v6, v5);
    if (!v7) {
      goto LABEL_11;
    }
  }
  if (*((unsigned char *)v7 + 25) != 2)
  {
LABEL_12:
    int v8 = *((unsigned __int8 *)v7 + 24);
    if (*((unsigned char *)v7 + 24))
    {
      if (!*(unsigned char *)(a1 + 84) && *(unsigned char *)(a1 + 16) != 1)
      {
        v13[0] = 0x10000000001;
        int v9 = lpp_transaction_start(a1, v13, 5);
        if (v9)
        {
          lpp_transaction_act((uint64_t)v9, 5u, 0);
          *(unsigned char *)(a1 + 84) = 1;
        }
        int v8 = *((unsigned __int8 *)v7 + 24);
      }
      if (v8 == 3)
      {
        *((unsigned char *)v7 + 40) = *(unsigned char *)(*(void *)(a2 + 16) + 9);
      }
      else if (v8 == 2)
      {
        *((unsigned char *)v7 + 41) = *(unsigned char *)(*(void *)(a2 + 16) + 9);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 84) = 1;
    }
    lpp_transaction_act((uint64_t)v7, v5, (unsigned char *)(*(void *)(a2 + 16) + 48));
    return 5;
  }
  lpp_transaction_delete((uint64_t)v7);
LABEL_11:
  int v7 = lpp_transaction_start(a1, *(_DWORD **)(a2 + 16), v5);
  if (v7) {
    goto LABEL_12;
  }
  return 5;
}

uint64_t lpp_transaction_convert_air_msg_to_event_type(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      int v3 = 2;
      int v4 = 16390;
      int v5 = 1012;
      goto LABEL_3;
    case 3:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 2;
      break;
    case 6:
      uint64_t result = 4;
      break;
    case 7:
      uint64_t result = 3;
      break;
    default:
      int v3 = 1;
      int v4 = 16436;
      int v5 = 1015;
LABEL_3:
      ms_report_exception(v3, v4, v5, "lpp_transaction_convert_air_msg_to_event_type");
      uint64_t result = 8;
      break;
  }
  return result;
}

uint64_t lpp_transaction_delete(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (uint64_t *)result;
    int v2 = lpp_session_detect((unsigned __int8 *)(result + 28));
    lpp_transaction_abort((uint64_t)v1);
    if (v2)
    {
      uint64_t v3 = v2[5];
      if (v3)
      {
        uint64_t v5 = *v1;
        uint64_t v4 = v1[1];
        if (v4) {
          unsigned __int16 v6 = (uint64_t *)v1[1];
        }
        else {
          unsigned __int16 v6 = (uint64_t *)v2[5];
        }
        *unsigned __int16 v6 = v5;
        if (v5) {
          uint64_t v3 = v5;
        }
        *(void *)(v3 + 8) = v4;
        *unsigned int v1 = 0;
        v1[1] = 0;
      }
    }
    memset_s(v1, 0x1E8uLL, 0, 0x1E8uLL);
    JUMPOUT(0x230F4E5D0);
  }
  return result;
}

void lpp_transaction_act(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v5 = 16425;
    int v6 = 884;
    goto LABEL_5;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 6)
  {
    int v5 = 16390;
    int v6 = 890;
LABEL_5:
    ms_report_exception(2, v5, v6, "lpp_transaction_act");
    return;
  }
  uint64_t v7 = 0;
  v26[0] = 0;
  do
  {
    int v8 = &v26[v7];
    *((void *)v8 + 5) = 0;
    *((_DWORD *)v8 + 12) = 0;
    *((void *)v8 + 2) = 0;
    *((void *)v8 + 3) = 0;
    *((void *)v8 + 1) = 0;
    v7 += 48;
    *((_DWORD *)v8 + 8) = 0;
  }
  while (v7 != 288);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 25);
  int v10 = *((unsigned __int8 *)*(&LPP_EVENT_TABLE + v4) + 8 * v9 + a2);
  if (v10 == 2)
  {
    ms_report_exception(2, 16432, 935, "lpp_transaction_act");
LABEL_20:
    int v11 = 0;
    goto LABEL_21;
  }
  if (v10 != 1)
  {
    if (!v10)
    {
      if (!*(unsigned char *)(a1 + 25)) {
        *(unsigned char *)(a1 + 25) = 1;
      }
      if (a2 <= 7)
      {
        switch(a2)
        {
          case 0u:
            int v11 = 1;
            v26[0] = 1;
            lpp_transaction_process_request_capabilities(a1, (uint64_t)a3, (uint64_t)v27);
            goto LABEL_21;
          case 1u:
            v26[0] = 1;
            lpp_transaction_process_provide_assistance_data((unsigned __int8 *)a1, (uint64_t)a3);
            goto LABEL_20;
          case 2u:
            v26[0] = 1;
            int v24 = lpp_transaction_process_request_location_information(a1, (uint64_t)a3, (uint64_t)v27);
            goto LABEL_44;
          case 3u:
          case 4u:
            lpp_transaction_abort(a1);
            goto LABEL_20;
          case 5u:
            int v11 = 1;
            v26[0] = 1;
            lpp_transaction_process_provide_capabilities(a1, (uint64_t)v27);
            goto LABEL_21;
          case 6u:
            int v11 = 1;
            v26[0] = 1;
            lpp_transaction_process_request_assistance_data(a1, (uint64_t)a3, (uint64_t)v27);
            goto LABEL_21;
          case 7u:
            int v24 = lpp_transaction_process_provide_location_information(a1, a3, v26);
LABEL_44:
            int v11 = v24;
            break;
          default:
            goto LABEL_20;
        }
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  int v11 = 1;
  lpp_transaction_abort(a1);
  int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  uint64_t v28 = v12;
  v12[8] = 1;
  *(void *)int v12 = *(void *)(a1 + 16);
  unsigned int v13 = v28;
  v28[32] = 0;
  v13[9] = 0;
  v13[1392] = 1;
  *((_DWORD *)v13 + 10) = 0;
  *((_DWORD *)v13 + 12) = 7;
  *((_DWORD *)v13 + 14) = 0;
  v13[68] = 1;
  *((_DWORD *)v13 + 16) = 0;
  v26[0] = 1;
LABEL_21:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 68, "lpp_transaction_act", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), v9, *(unsigned __int8 *)(a1 + 25));
    LbsOsaTrace_WriteLog(0x13u, __str, v15, 5, 1);
  }
  unsigned int v16 = v26[0];
  if (v11 == 1)
  {
    if (v26[0])
    {
      unint64_t v17 = 0;
      uint64_t v18 = (unsigned __int8 *)(a1 + 28);
      unsigned __int16 v19 = v27;
      do
      {
        uint64_t v20 = lpp_session_detect(v18);
        if (v20) {
          ((void (*)(uint64_t *, unsigned char *))v20[7])(v20, v19);
        }
        ++v17;
        v19 += 48;
      }
      while (v17 < v26[0]);
    }
  }
  else
  {
    if (v26[0])
    {
      unint64_t v21 = 0;
      uint64_t v22 = 24;
      do
      {
        std::string v23 = *(void **)&v26[v22];
        if (v23)
        {
          free(v23);
          *(void *)&v26[v22] = 0;
          unsigned int v16 = v26[0];
        }
        ++v21;
        v22 += 48;
      }
      while (v21 < v16);
    }
    if (*(unsigned char *)(a1 + 25) == 2) {
      lpp_transaction_delete(a1);
    }
  }
}

void lpp_transaction_send_uplink_message(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      int v2 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
      if (v2)
      {
        uint64_t v3 = (void (*)(void))v2[7];
        v3();
      }
      return;
    }
    int v4 = 16442;
    int v5 = 863;
  }
  else
  {
    int v4 = 16425;
    int v5 = 857;
  }

  ms_report_exception(2, v4, v5, "lpp_transaction_send_uplink_message");
}

size_t lpp_transaction_process_request_capabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v6 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(void *)(a3 + 16) = v6;
  v6[1392] = 1;
  *((_DWORD *)v6 + 10) = 0;
  *((_DWORD *)v6 + 12) = 1;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unsigned char *)(v7 + 8) = 1;
  *(void *)uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a3 + 16);
  *(unsigned char *)(v8 + 9) = 1;
  *(unsigned char *)(v8 + 32) = 1;
  *(unsigned char *)(v8 + 20) = 1;
  *(unsigned char *)(v8 + 28) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    *(_DWORD *)(v8 + 56) = 1;
  }
  else
  {
    *(_DWORD *)(v8 + 56) = 0;
    if (*(_DWORD *)(a2 + 16))
    {
      *(_DWORD *)(v8 + 64) = 1;
    }
    else
    {
      *(_DWORD *)(v8 + 64) = 0;
      *(unsigned char *)(v8 + 76) = 0;
      if (*((unsigned char *)GetStaticLppPrivate() + 2) == 1 && *(unsigned char *)(a2 + 32) == 1)
      {
        *(unsigned char *)(v8 + 240) = 1;
        *(unsigned char *)(v8 + 224) = *(unsigned char *)(a2 + 30);
        *(unsigned char *)(v8 + 104) = *(unsigned char *)(a2 + 29);
        if ((*((unsigned char *)GetStaticLppPrivate() + 3) & 6) != 0 && *(unsigned char *)(a2 + 31) == 1)
        {
          *(unsigned char *)(v8 + 232) = 1;
          *(unsigned char *)(v8 + 237) = 1;
        }
        else
        {
          *(unsigned char *)(v8 + 232) = 0;
          *(unsigned char *)(v8 + 237) = 0;
        }
      }
      else
      {
        *(unsigned char *)(v8 + 240) = 0;
      }
      *(unsigned char *)(v8 + 408) = 0;
      lpp_transaction_add_provideCapabilities_r9((unsigned char *)(v8 + 72));
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "lpp_transaction_process_request_capabilities", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
    size_t result = LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  *(unsigned char *)(a1 + 25) = 2;
  return result;
}

unsigned char *lpp_transaction_add_provideCapabilities_r9(unsigned char *result)
{
  unsigned int v1 = result;
  if (result[168] == 1) {
    size_t result = lpp_transaction_add_provideCapabilities_a_gnss((uint64_t)(result + 8));
  }
  if (v1[424] == 1)
  {
    return (unsigned char *)lpp_transaction_add_provideCapabilities_wlan(v1 + 392);
  }
  return result;
}

uint64_t lpp_transaction_process_provide_capabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(void *)(a2 + 16) = v4;
  v4[1392] = 1;
  *((_DWORD *)v4 + 12) = 1;
  uint64_t v5 = *(void *)(a2 + 16);
  *(unsigned char *)(v5 + 8) = 1;
  *(void *)uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(v6 + 9) = 1;
  *(unsigned char *)(v6 + 32) = 1;
  *(unsigned char *)(v6 + 20) = 1;
  *(unsigned char *)(v6 + 28) = 0;
  *(_DWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 1;
  *(_DWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = 0;
  *(unsigned char *)(v6 + 76) = 0;
  if (*((unsigned char *)GetStaticLppPrivate() + 2) == 1)
  {
    *(unsigned char *)(v6 + 240) = 1;
    *(unsigned char *)(v6 + 224) = 1;
    *(unsigned char *)(v6 + 104) = 1;
    if ((*((unsigned char *)GetStaticLppPrivate() + 3) & 6) != 0)
    {
      *(unsigned char *)(v6 + 232) = 1;
      *(unsigned char *)(v6 + 237) = 1;
    }
    else
    {
      *(unsigned char *)(v6 + 232) = 0;
      *(unsigned char *)(v6 + 237) = 0;
    }
  }
  else
  {
    *(unsigned char *)(v6 + 240) = 0;
  }
  *(unsigned char *)(v6 + 408) = 0;
  *(unsigned char *)(v6 + 496) = *((unsigned char *)GetStaticLppPrivate() + 4) == 1;
  lpp_transaction_add_provideCapabilities_r9((unsigned char *)(v6 + 72));
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "lpp_transaction_process_provide_capabilities", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  *(unsigned char *)(a1 + 25) = 2;
  return 1;
}

uint64_t lpp_transaction_process_request_assistance_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = v6;
  if (*(_DWORD *)(a1 + 20) == 256)
  {
LABEL_4:
    v7[1392] = 1;
    *((_DWORD *)v7 + 10) = 0;
    uint64_t v8 = 2;
    *((_DWORD *)v7 + 12) = 2;
    uint64_t v9 = *(void *)(a3 + 16);
    *(unsigned char *)(v9 + 8) = 1;
    *(void *)uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a3 + 16);
    if (*(_DWORD *)(a1 + 20) == 256) {
      *(_DWORD *)(v10 + 4) = 0;
    }
    *(unsigned char *)(v10 + 9) = 0;
    *((_DWORD *)v6 + 10) = 0;
    *((_DWORD *)v6 + 12) = 2;
    *((_DWORD *)v6 + 14) = 0;
    *((_DWORD *)v6 + 16) = 0;
    v6[144] = 1;
    v6[136] = 1;
    StaticLppPrivate = GetStaticLppPrivate();
    lpp_fill_in_bitstr_from_ulong(StaticLppPrivate[6], 0x1CuLL, (uint64_t)(v6 + 120));
    *((void *)v6 + 11) = 0x100000003;
    int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
    *int v12 = 0;
    *((void *)v6 + 9) = v12;
    *((void *)v6 + 10) = v12;
    do
    {
      uint64_t v13 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      **((void **)v6 + 10) = v13;
      *((void *)v6 + 10) = v13;
      --v8;
    }
    while (v8);
    uint64_t v14 = GetStaticLppPrivate();
    BOOL v15 = v14[22] == 1;
    if (v14[22] == 1) {
      int v16 = 3;
    }
    else {
      int v16 = 2;
    }
    *((_DWORD *)v6 + 28) = v16;
    *((_DWORD *)v6 + 29) = 1;
    if (v15) {
      uint64_t v17 = 3;
    }
    else {
      uint64_t v17 = 2;
    }
    uint64_t v18 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
    *uint64_t v18 = 0;
    *((void *)v6 + 12) = v18;
    *((void *)v6 + 13) = v18;
    uint64_t v19 = v17 - 1;
    do
    {
      uint64_t v20 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      **((void **)v6 + 13) = v20;
      *((void *)v6 + 13) = v20;
      --v19;
    }
    while (v19);
    unint64_t v21 = (char *)GetStaticLppPrivate();
    unint64_t v22 = *(unsigned int *)(v21 + 18) | ((unint64_t)*((unsigned __int16 *)v21 + 11) << 32);
    uint64_t v23 = *((void *)v6 + 9);
    int v24 = (_DWORD *)*((void *)v6 + 12);
    unsigned int v25 = (unsigned __int16)*(_DWORD *)(v21 + 18) / 0x64u;
    *(_DWORD *)(v23 + 8) = v25;
    LOBYTE(v25) = v22 - 100 * v25;
    unsigned __int16 v26 = *(_DWORD **)v23;
    v26[2] = v25 / 0xAu;
    *(_DWORD *)(*(void *)v26 + 8) = v25 % 0xAu;
    if ((v22 & 0xFF00000000) == 0x100000000)
    {
      unint64_t v27 = (v22 & 0xFFFFFFFFFFFFLL) >> 16;
      v24[2] = (unsigned __int16)v27 / 0x64u;
      LOWORD(v27) = (unsigned __int16)v27 % 0x64u;
      int v24 = *(_DWORD **)v24;
    }
    else
    {
      unint64_t v27 = v22 >> 16;
    }
    v24[2] = (unsigned __int16)v27 / 0xAu;
    *(_DWORD *)(*(void *)v24 + 8) = (unsigned __int16)v27 % 0xAu;
    if (*(unsigned char *)a2) {
      goto LABEL_20;
    }
    char v29 = *(unsigned char *)(a2 + 64);
    if (*((unsigned char *)GetStaticLppPrivate() + 2) && (v29 & 1) != 0)
    {
      *(unsigned char *)(a1 + 40) |= 1u;
      v6[288] = 1;
      __int16 v30 = *(_WORD *)(a2 + 16);
      if ((v30 & 0x64) != 0)
      {
        v6[248] = 1;
        v6[184] = 0;
        if ((v30 & 0x40) != 0)
        {
          *((void *)v6 + 21) = 0x100000001;
          unint64_t v31 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
          *(void *)unint64_t v31 = 0;
          *((void *)v6 + 19) = v31;
          *((void *)v6 + 20) = v31;
          __int16 v30 = *(_WORD *)(a2 + 16);
          if ((v30 & 0x40) != 0)
          {
            v6[184] = 1;
            v31[2] = 0;
            *((_WORD *)v6 + 88) = 257;
            v6[179] = 0;
          }
        }
        v6[192] = (v30 & 0x20) != 0;
        if ((v30 & 4) != 0)
        {
          v6[224] = 0;
          v6[216] = 0;
          char v32 = 1;
        }
        else
        {
          char v32 = 0;
        }
        v6[232] = v32;
        v6[240] = 0;
        __int16 v30 = *(_WORD *)(a2 + 16);
      }
      else
      {
        v6[248] = 0;
      }
      if ((v30 & 0x19B) != 0)
      {
        v6[280] = 1;
        *((void *)v6 + 34) = 0x100000001;
        uint64_t v33 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x150uLL);
        uint64_t v34 = v33;
        *(void *)uint64_t v33 = 0;
        *((void *)v6 + 32) = v33;
        *((void *)v6 + 33) = v33;
        *((_DWORD *)v33 + 2) = 0;
        v33[16] = 0;
        v33[48] = 0;
        v33[80] = 0;
        if ((*(unsigned char *)(a2 + 16) & 8) != 0)
        {
          v33[176] = 1;
          *((_DWORD *)v33 + 22) = 0;
          *((_DWORD *)v33 + 24) = *(unsigned __int16 *)(a2 + 18);
          *((_DWORD *)v33 + 25) = *(unsigned __int8 *)(a2 + 20);
          *((_DWORD *)v33 + 26) = *(unsigned __int8 *)(a2 + 22);
          unsigned __int16 v35 = v33 + 136;
          if (*(unsigned char *)(a2 + 21))
          {
            *unsigned __int16 v35 = 1;
            if (*(unsigned char *)(a2 + 21))
            {
              *((_DWORD *)v33 + 33) = 1;
              *((_DWORD *)v33 + 32) = *(unsigned __int8 *)(a2 + 21);
              uint64_t v36 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x30uLL);
              *((void *)v34 + 14) = v36;
              uint64_t v37 = v34 + 112;
              *uint64_t v36 = 0;
              *((void *)v34 + 15) = *((void *)v34 + 14);
              LODWORD(v38) = *(unsigned __int8 *)(a2 + 21);
              if (v38 >= 2)
              {
                unint64_t v39 = 1;
                do
                {
                  **((void **)v34 + 15) = gnssOsa_Calloc("posp_alloc", 18, 1, 0x30uLL);
                  *((void *)v34 + 15) = **((void **)v34 + 15);
                  ++v39;
                  unint64_t v38 = *(unsigned __int8 *)(a2 + 21);
                }
                while (v39 < v38);
              }
              if (v38)
              {
                unint64_t v40 = 0;
                do
                {
                  uint64_t v37 = *(char **)v37;
                  *((_DWORD *)v37 + 2) = *(unsigned __int8 *)(a2 + v40 + 31);
                  lpp_fill_in_bitstr_from_byte(v37 + 16, 0xBuLL, *(unsigned __int8 *)(a2 + v40 + 47));
                  v37[36] = 1;
                  *((_DWORD *)v37 + 8) = 2;
                  v37[44] = 1;
                  *((_DWORD *)v37 + 10) = 2;
                  ++v40;
                }
                while (v40 < *(unsigned __int8 *)(a2 + 21));
              }
            }
            goto LABEL_50;
          }
        }
        else
        {
          unsigned __int16 v35 = v33 + 176;
        }
        *unsigned __int16 v35 = 0;
LABEL_50:
        char v41 = 0;
        __int16 v42 = *(_WORD *)(a2 + 16);
        v34[184] = HIBYTE(v42) & 1;
        v34[256] = 0;
        if ((v42 & 0x80) != 0)
        {
          *((_DWORD *)v34 + 65) = 0;
          char v41 = 1;
        }
        v34[264] = v41;
        if (v42)
        {
          char v43 = 1;
          v34[272] = 1;
          *((_DWORD *)v34 + 67) = 2;
        }
        else
        {
          char v43 = 0;
        }
        v34[276] = v43;
        if ((v42 & 2) != 0)
        {
          char v44 = 1;
          *((_DWORD *)v34 + 70) = 1;
          v34[284] = 1;
        }
        else
        {
          char v44 = 0;
        }
        v34[288] = v44;
        uint64_t v28 = v34 + 296;
        goto LABEL_59;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 40))
      {
LABEL_20:
        uint64_t v28 = v6 + 288;
LABEL_59:
        *uint64_t v28 = 0;
        v6[328] = 0;
        return 1;
      }
      v6[288] = 1;
      v6[248] = 0;
    }
    uint64_t v28 = v6 + 280;
    goto LABEL_59;
  }
  if (lpp_session_detect((unsigned __int8 *)(a1 + 28)))
  {
    uint64_t v7 = *(char **)(a3 + 16);
    goto LABEL_4;
  }
  ms_report_exception(2, 16388, 1209, "lpp_transaction_process_request_assistance_data");
  if (v6) {
    free(v6);
  }
  return 1;
}

void lpp_transaction_process_provide_assistance_data(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = a1[24];
  if (v4 == 3)
  {
    int v5 = a1[40];
  }
  else if (v4 == 2)
  {
    int v5 = a1[41];
  }
  else
  {
    int v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx transaction type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_process_provide_assistance_data", 770, a1[24]);
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      int v5 = 0;
    }
  }
  if (*(_DWORD *)a2 == 3
    && !*(_DWORD *)(a2 + 8)
    && !*(_DWORD *)(a2 + 16)
    && *((unsigned char *)GetStaticLppPrivate() + 2) == 1
    && *(unsigned char *)(a2 + 424) == 1)
  {
    if (*(unsigned char *)(a2 + 352) == 1) {
      lpp_transaction_process_provide_assistance_data_a_gnss_common(a2 + 32, (uint64_t)a1);
    }
    if (*(unsigned char *)(a2 + 384) == 1) {
      lpp_transaction_process_provide_assistance_data_a_gnss_generic((uint64_t *)(a2 + 360), (uint64_t)a1);
    }
    int v8 = a1[24];
    if (v8 == 3)
    {
      int v5 = a1[40];
    }
    else if (v8 == 2)
    {
      int v5 = a1[41];
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx transaction type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "lpp_transaction_process_provide_assistance_data", 770, a1[24]);
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    }
    if (*(unsigned char *)(a2 + 420) == 1 && v5 == 1) {
      lpp_transaction_process_provide_assistance_data_a_gnss_error((_DWORD *)(a2 + 388), (uint64_t)a1);
    }
  }
  if (a1[25] == 1 && v5 == 1) {
    a1[25] = 2;
  }
}

void lpp_transaction_process_provide_assistance_data_a_gnss_common(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  unsigned __int8 v117 = *(unsigned char *)(a2 + 28);
  int v118 = *(_DWORD *)(a2 + 32);
  if (*(unsigned char *)(a1 + 120) != 1) {
    goto LABEL_105;
  }
  for (uint64_t i = 0; i != 128; i += 8)
  {
    int v5 = (char *)&__s + i;
    *int v5 = -1;
    *(_DWORD *)(v5 + 2) = -1;
    v5[6] = -1;
  }
  memset_s(&__s, 0x80uLL, 0, 0x80uLL);
  if (*(_DWORD *)a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_process_provide_assistance_data_a_gnss_common", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
    }
    goto LABEL_105;
  }
  if (*((unsigned char *)GetStaticLppPrivate() + 2) != 1) {
    goto LABEL_105;
  }
  LOWORD(v122[0]) = -1;
  BYTE2(v122[0]) = -1;
  v122[1] = -1;
  LOWORD(v122[2]) = 255;
  T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s((T_UTRAN_GPS_TIME_s *)&v122[3]);
  uint64_t v8 = 0;
  DWORD2(v124) = 2;
  WORD6(v124) = 32512;
  BYTE14(v124) = 0;
  LOWORD(v125) = -1;
  BYTE2(v125) = -1;
  DWORD1(v125) = -1;
  WORD4(v125) = -1;
  BYTE12(v125) = 0;
  do
  {
    uint64_t v9 = &v122[v8];
    *((unsigned char *)v9 + 62) = -1;
    v9[16] = -1;
    *((unsigned char *)v9 + 68) = -1;
    v8 += 2;
  }
  while (v8 != 32);
  char v128 = -1;
  unsigned int v129 = 0;
  char v130 = -1;
  memset_s(v122, 0xD0uLL, 0, 0xD0uLL);
  int v10 = *(_DWORD *)(a1 + 4);
  int v11 = *(_DWORD *)(a1 + 8);
  int v12 = (v10 / 7) & 0x3FF;
  if (v10 / -7 >= 0) {
    int v12 = -((v10 / -7) & 0x3FF);
  }
  LOWORD(v122[0]) = v12;
  v122[1] = 86400000 * (v10 % 7) + 1000 * v11;
  if (*(unsigned char *)(a1 + 16) == 1) {
    v122[1] = *(_DWORD *)(a1 + 12) + 86400000 * (v10 % 7) + 1000 * v11;
  }
  memset_s((char *)&v125 + 14, 0x80uLL, 0, 0x80uLL);
  if (*(unsigned char *)(a1 + 72) == 1 && (*(_DWORD *)(a1 + 64) - 1) <= 0x3F)
  {
    unint64_t v13 = 0;
    uint64_t v14 = (uint64_t *)(a1 + 48);
    BOOL v15 = (char *)v126 + 4;
    do
    {
      uint64_t v14 = (uint64_t *)*v14;
      unsigned int v16 = *((_DWORD *)v14 + 2);
      if (v16 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 2));
          LbsOsaTrace_WriteLog(0x13u, __str, v18, 0, 1);
        }
      }
      else
      {
        *(v15 - 6) = v16 - 1;
      }
      unsigned int v19 = *((_DWORD *)v14 + 3);
      if (HIWORD(v19))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmWord,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 3));
          LbsOsaTrace_WriteLog(0x13u, __str, v21, 0, 1);
        }
      }
      else
      {
        *((_WORD *)v15 - 2) = v19;
      }
      unsigned int v22 = *((_DWORD *)v14 + 4);
      if (v22 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx antiSpoof,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 4));
          LbsOsaTrace_WriteLog(0x13u, __str, v24, 0, 1);
        }
      }
      else
      {
        *(v15 - 2) = v22;
      }
      unsigned int v25 = *((_DWORD *)v14 + 5);
      if (v25 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v26 = mach_continuous_time();
          unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alert,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 5));
          LbsOsaTrace_WriteLog(0x13u, __str, v27, 0, 1);
        }
      }
      else
      {
        *(v15 - 1) = v25;
      }
      unsigned int v28 = *((_DWORD *)v14 + 6);
      if (v28 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmRsvdBits,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 6));
          LbsOsaTrace_WriteLog(0x13u, __str, v30, 0, 1);
        }
      }
      else
      {
        unsigned char *v15 = v28;
      }
      unint64_t v31 = v13 + 1;
      if (v13 > 0xE) {
        break;
      }
      v15 += 8;
      ++v13;
    }
    while (v31 < *(int *)(a1 + 64));
  }
  else
  {
    LOBYTE(v31) = 0;
  }
  BYTE12(v125) = v31;
  if (*(unsigned char *)(a1 + 84) == 1)
  {
    unsigned int v32 = *(_DWORD *)(a1 + 80);
    if (v32 > 0xFF)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v33 = mach_continuous_time();
        unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx referenceTimeUnc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *(_DWORD *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x13u, __str, v34, 0, 1);
      }
      goto LABEL_47;
    }
  }
  else
  {
    LOBYTE(v32) = -1;
  }
  LOBYTE(v122[2]) = v32;
LABEL_47:
  BYTE2(v122[0]) = -1;
  if (*(unsigned char *)(a1 + 112) == 1)
  {
    uint64_t v35 = *(unsigned int *)(a1 + 104);
    if ((v35 - 1) <= 0xE)
    {
      uint64_t v36 = *(uint64_t **)(a1 + 88);
      uint64_t v37 = (char *)operator new[](32 * v35, MEMORY[0x263F8C180]);
      if (v37)
      {
        unint64_t v38 = v37;
        unint64_t v39 = v37;
        unint64_t v40 = &v37[32 * v35];
        do
        {
          *(_WORD *)unint64_t v39 = -1;
          *((_DWORD *)v39 + 1) = -1;
          *((_WORD *)v39 + 4) = -129;
          char v41 = v39 + 12;
          v39[10] = 0;
          memset_s(v39 + 12, 0x14uLL, 0, 0x14uLL);
          unint64_t v39 = v41 + 20;
        }
        while (v41 + 20 != v40);
        int v42 = *(_DWORD *)(a1 + 104);
        if (v42)
        {
          unint64_t v43 = 0;
          unsigned __int8 v44 = 0;
          do
          {
            if (!*((_DWORD *)v36 + 6))
            {
              unsigned int v45 = *((_DWORD *)v36 + 2);
              if (HIWORD(v45))
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v46 = mach_continuous_time();
                  unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx secondsFromFrameStructureStart,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 2));
                  LbsOsaTrace_WriteLog(0x13u, __str, v47, 0, 1);
                }
              }
              else
              {
                *(_WORD *)&v38[32 * v44] = v45;
              }
              int v48 = &v38[32 * v44];
              *((_DWORD *)v48 + 1) = *((_DWORD *)v36 + 3);
              int v49 = *((_DWORD *)v36 + 4);
              if (v49 == (char)v49)
              {
                v48[8] = v49;
              }
              else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v50 = mach_continuous_time();
                unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx frameDrift,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 4));
                LbsOsaTrace_WriteLog(0x13u, __str, v51, 0, 1);
              }
              unsigned int v52 = *((_DWORD *)v36 + 32);
              if (v52 > 0xFF)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v53 = mach_continuous_time();
                  unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx referenceTimeUnc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 32));
                  LbsOsaTrace_WriteLog(0x13u, __str, v54, 0, 1);
                }
              }
              else
              {
                v48[9] = v52;
              }
              BOOL v55 = *((unsigned char *)v36 + 136) == 1 && !*((_DWORD *)v36 + 33);
              v48[10] = v55;
              unsigned int v56 = *((_DWORD *)v36 + 8);
              if (HIWORD(v56))
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v57 = mach_continuous_time();
                  unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx physCellId,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 8));
                  LbsOsaTrace_WriteLog(0x13u, __str, v58, 0, 1);
                }
              }
              else
              {
                *(_WORD *)&v38[32 * v44 + 12] = v56;
              }
              uint64_t v59 = 120;
              if (*((unsigned char *)v36 + 124) != 1) {
                uint64_t v59 = 116;
              }
              int v60 = *(_DWORD *)((char *)v36 + v59);
              uint64_t v61 = &v38[32 * v44];
              *((_DWORD *)v61 + 4) = v60;
              if (*((unsigned char *)v36 + 112) == 1 && !*((_DWORD *)v36 + 22))
              {
                unint64_t v62 = &v38[32 * v44];
                v62[20] = 1;
                if (*((unsigned char *)v36 + 100))
                {
                  int v63 = 0;
                  *((_DWORD *)v62 + 7) = 0;
                  unsigned __int16 v64 = (unsigned __int8 *)v36[13];
                  uint64_t v65 = 28;
                  do
                  {
                    int v66 = *v64++;
                    v63 |= v66 << --v65;
                    *((_DWORD *)v62 + 7) = v63;
                  }
                  while (v65);
                }
                *((_WORD *)v62 + 11) = 0;
                int v67 = v62 + 22;
                if (*((_DWORD *)v36 + 14))
                {
                  int v68 = 0;
                  unint64_t v69 = 0;
                  uint64_t v70 = v36 + 5;
                  unsigned __int8 v71 = 100;
                  do
                  {
                    uint64_t v70 = (uint64_t *)*v70;
                    v68 += *((_DWORD *)v70 + 2) * v71;
                    *int v67 = v68;
                    v71 /= 0xAu;
                    ++v69;
                  }
                  while (v69 < *((int *)v36 + 14));
                }
                else
                {
                  unsigned __int8 v71 = 100;
                }
                int v72 = *((_DWORD *)v36 + 20);
                uint64_t v73 = &v38[32 * v44];
                v73[26] = v72 != 2;
                if (*((_DWORD *)v36 + 20))
                {
                  unint64_t v74 = 0;
                  if (v72 == 2) {
                    unsigned __int8 v75 = 10;
                  }
                  else {
                    unsigned __int8 v75 = v71;
                  }
                  unint64_t v76 = v36 + 8;
                  int v79 = *((unsigned __int16 *)v73 + 12);
                  uint64_t v77 = v73 + 24;
                  int v78 = v79;
                  do
                  {
                    unint64_t v76 = (uint64_t *)*v76;
                    v78 += *((_DWORD *)v76 + 2) * v75;
                    *uint64_t v77 = v78;
                    v75 /= 0xAu;
                    ++v74;
                  }
                  while (v74 < *((int *)v36 + 20));
                }
              }
              else
              {
                v61[20] = 0;
              }
              ++v44;
              int v42 = *(_DWORD *)(a1 + 104);
            }
            uint64_t v36 = (uint64_t *)*v36;
            ++v43;
          }
          while (v43 < v42);
        }
        else
        {
          unsigned __int8 v44 = 0;
        }
        char v128 = v44;
        unsigned int v129 = v38;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v80 = mach_continuous_time();
          unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss ref time allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 1537);
          LbsOsaTrace_WriteLog(0x13u, __str, v81, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v82 = mach_continuous_time();
          unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "PSP", 68, "lpp_transaction_add_ProvideGnssReferenceTime");
          LbsOsaTrace_WriteLog(0x13u, __str, v83, 5, 1);
        }
      }
    }
  }
  char v130 = v117;
  unint64_t v119 = ((unint64_t)v117 << 32) | 2;
  int v120 = v118;
  lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, __str);
  gps_set_gps_time((uint64_t)v122, 0, (uint64_t)&v119);
LABEL_105:
  if (*(unsigned char *)(a1 + 164) == 1)
  {
    T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v122);
    memset_s(v122, 0x70uLL, 0, 0x70uLL);
    uint64_t ref_loc_bitmap = lpp_transaction_get_ref_loc_bitmap((_LPP_TRANSACTION *)a2);
    LOWORD(v122[0]) = 0;
    *(void *)&v122[2] = 0;
    DWORD1(v126[0]) = 0;
    LODWORD(v123) = 590335;
    if (*(_DWORD *)(a1 + 124) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v85 = mach_continuous_time();
        unsigned __int16 v86 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx latitudeSign,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 124));
        LbsOsaTrace_WriteLog(0x13u, __str, v86, 0, 1);
      }
    }
    else
    {
      BYTE4(v123) = *(_DWORD *)(a1 + 124);
    }
    int v87 = *(_DWORD *)(a1 + 132);
    *((void *)&v123 + 1) = *(int *)(a1 + 128);
    LODWORD(v124) = v87;
    if (*(_DWORD *)(a1 + 144) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v88 = mach_continuous_time();
        unsigned __int16 v89 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintySemiMajor,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v88), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 144));
        LbsOsaTrace_WriteLog(0x13u, __str, v89, 0, 1);
      }
    }
    else
    {
      BYTE4(v124) = *(_DWORD *)(a1 + 144);
    }
    if (*(_DWORD *)(a1 + 148) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v90 = mach_continuous_time();
        unsigned __int16 v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintySemiMinor,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 148));
        LbsOsaTrace_WriteLog(0x13u, __str, v91, 0, 1);
      }
    }
    else
    {
      BYTE5(v124) = *(_DWORD *)(a1 + 148);
    }
    if (*(_DWORD *)(a1 + 152) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v92 = mach_continuous_time();
        unsigned __int16 v93 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx orientationMajorAxis,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 152));
        LbsOsaTrace_WriteLog(0x13u, __str, v93, 0, 1);
      }
    }
    else
    {
      BYTE6(v124) = *(_DWORD *)(a1 + 152);
    }
    if (*(_DWORD *)(a1 + 136) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v94 = mach_continuous_time();
        unsigned __int16 v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx altitudeDirection,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 136));
        LbsOsaTrace_WriteLog(0x13u, __str, v95, 0, 1);
      }
    }
    else
    {
      BYTE7(v124) = *(_DWORD *)(a1 + 136);
    }
    *((void *)&v124 + 1) = *(int *)(a1 + 140);
    if (*(_DWORD *)(a1 + 156) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v96 = mach_continuous_time();
        unsigned __int16 v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintyAltitude,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 156));
        LbsOsaTrace_WriteLog(0x13u, __str, v97, 0, 1);
      }
    }
    else
    {
      LOBYTE(v125) = *(_DWORD *)(a1 + 156);
    }
    if (*(_DWORD *)(a1 + 160) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v98 = mach_continuous_time();
        unsigned __int16 v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 160));
        LbsOsaTrace_WriteLog(0x13u, __str, v99, 0, 1);
      }
    }
    else
    {
      BYTE1(v125) = *(_DWORD *)(a1 + 160);
    }
    BYTE2(v125) = 0;
    BYTE13(v127) = v117;
    v121[4] = v126[0];
    v121[5] = v126[1];
    v121[0] = *(_OWORD *)v122;
    v121[1] = v123;
    v121[2] = v124;
    v121[3] = v125;
    v121[6] = v127;
    unint64_t __s = ((unint64_t)v117 << 32) | 2;
    int v132 = v118;
    lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, __str);
    gps_set_gnss_ref_loc((uint64_t)v121, ref_loc_bitmap, 0, (uint64_t)&__s);
  }
  if (*(unsigned char *)(a1 + 280) == 1 && *(unsigned char *)(a1 + 216) == 1)
  {
    LOWORD(v122[0]) = -256;
    *(void *)((char *)v122 + 2) = 0x7F7F7F7F7F7F7F7FLL;
    BYTE2(v122[2]) = -1;
    memset_s(v122, 0xBuLL, 0, 0xBuLL);
    uint64_t v100 = lpp_transaction_get_ref_loc_bitmap((_LPP_TRANSACTION *)a2);
    LOBYTE(v122[0]) = 1;
    BYTE1(v122[0]) = **(unsigned char **)(a1 + 176);
    if (*(_DWORD *)(a1 + 184) == (char)*(_DWORD *)(a1 + 184))
    {
      BYTE2(v122[0]) = *(_DWORD *)(a1 + 184);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v101 = mach_continuous_time();
      unsigned __int16 v102 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v101), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 184));
      LbsOsaTrace_WriteLog(0x13u, __str, v102, 0, 1);
    }
    if (*(_DWORD *)(a1 + 188) == (char)*(_DWORD *)(a1 + 188))
    {
      HIBYTE(v122[0]) = *(_DWORD *)(a1 + 188);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v103 = mach_continuous_time();
      unsigned __int16 v104 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 188));
      LbsOsaTrace_WriteLog(0x13u, __str, v104, 0, 1);
    }
    if (*(_DWORD *)(a1 + 192) == (char)*(_DWORD *)(a1 + 192))
    {
      LOBYTE(v122[1]) = *(_DWORD *)(a1 + 192);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v105 = mach_continuous_time();
      unsigned __int16 v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 192));
      LbsOsaTrace_WriteLog(0x13u, __str, v106, 0, 1);
    }
    if (*(_DWORD *)(a1 + 196) == (char)*(_DWORD *)(a1 + 196))
    {
      BYTE1(v122[1]) = *(_DWORD *)(a1 + 196);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v107 = mach_continuous_time();
      unsigned __int16 v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 196));
      LbsOsaTrace_WriteLog(0x13u, __str, v108, 0, 1);
    }
    if (*(_DWORD *)(a1 + 200) == (char)*(_DWORD *)(a1 + 200))
    {
      BYTE2(v122[1]) = *(_DWORD *)(a1 + 200);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v109 = mach_continuous_time();
      unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 200));
      LbsOsaTrace_WriteLog(0x13u, __str, v110, 0, 1);
    }
    if (*(_DWORD *)(a1 + 204) == (char)*(_DWORD *)(a1 + 204))
    {
      HIBYTE(v122[1]) = *(_DWORD *)(a1 + 204);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v111 = mach_continuous_time();
      unsigned __int16 v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 204));
      LbsOsaTrace_WriteLog(0x13u, __str, v112, 0, 1);
    }
    if (*(_DWORD *)(a1 + 208) == (char)*(_DWORD *)(a1 + 208))
    {
      LOBYTE(v122[2]) = *(_DWORD *)(a1 + 208);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v113 = mach_continuous_time();
      unsigned __int16 v114 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v113), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 208));
      LbsOsaTrace_WriteLog(0x13u, __str, v114, 0, 1);
    }
    if (*(_DWORD *)(a1 + 212) == (char)*(_DWORD *)(a1 + 212))
    {
      BYTE1(v122[2]) = *(_DWORD *)(a1 + 212);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v115 = mach_continuous_time();
      unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 212));
      LbsOsaTrace_WriteLog(0x13u, __str, v116, 0, 1);
    }
    BYTE2(v122[2]) = v117;
    send_to_lpi_gnss_iono_model_req(*(uint64_t *)v122, LOWORD(v122[2]) | (v117 << 16), v100, ((unint64_t)v117 << 32) | 2, v118, (_LPP_TRANSACTION *)a2);
  }
}

void sub_22B85F5C4(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E590](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void lpp_transaction_process_provide_assistance_data_a_gnss_generic(uint64_t *a1, uint64_t a2)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  if ((*((_DWORD *)a1 + 4) - 1) > 0xF) {
    return;
  }
  unint64_t v3 = 0;
  uint64_t v137 = *(unsigned __int8 *)(a2 + 28);
  uint64_t v139 = (v137 << 32) | 2;
  int v4 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  int v138 = *(_DWORD *)(a2 + 32);
  int v5 = a1;
  do
  {
    int v5 = (uint64_t *)*v5;
    if (*((unsigned char *)v5 + 328) != 1) {
      goto LABEL_13;
    }
    if (*((_DWORD *)v5 + 2) || *((unsigned char *)GetStaticLppPrivate() + 2) != 1)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        goto LABEL_13;
      }
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "lpp_transaction_provide_almanac_assistance", 770, *((_DWORD *)v5 + 2));
      int v11 = 0;
      goto LABEL_12;
    }
    uint64_t v6 = operator new(0x18uLL, v4);
    if (!v6)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionList allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 1537);
        LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
LABEL_18:
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 68, "lpp_transaction_provide_gps_almanac_assistance");
        int v11 = 5;
LABEL_12:
        LbsOsaTrace_WriteLog(0x13u, __str, v10, v11, 1);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    unsigned __int16 v7 = v6;
    *(_WORD *)uint64_t v6 = 255;
    v6[2] = 0;
    *((void *)v6 + 1) = 0;
    v6[16] = -1;
    if (*((unsigned char *)v5 + 268) == 1)
    {
      unsigned int v8 = *((_DWORD *)v5 + 66);
      if (v8 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx weekNumber,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 772, *((_DWORD *)v5 + 66));
          LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
        }
      }
      else
      {
        *uint64_t v6 = v8;
      }
    }
    if (*((unsigned char *)v5 + 276) == 1)
    {
      unsigned int v18 = *((_DWORD *)v5 + 68);
      if (v18 <= 0xFF) {
        goto LABEL_26;
      }
      LOBYTE(v18) = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
        goto LABEL_26;
      }
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx toa,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 772, *((_DWORD *)v5 + 68));
      LbsOsaTrace_WriteLog(0x13u, __str, v20, 0, 1);
    }
    LOBYTE(v18) = 0;
LABEL_26:
    v7[1] = *((unsigned char *)v5 + 285);
    v7[2] = 0;
    *((void *)v7 + 1) = 0;
    uint64_t v21 = *((unsigned int *)v5 + 76);
    if ((v21 - 1) > 0x3F)
    {
      ms_report_exception(2, 16399, 3118, "lpp_transaction_provide_gps_almanac_assistance");
      goto LABEL_53;
    }
    char v22 = 0;
    uint64_t v23 = *((unsigned int *)v5 + 76);
    unsigned __int16 v24 = v5 + 36;
    do
    {
      unsigned __int16 v24 = (uint64_t *)*v24;
      if (*((_DWORD *)v24 + 2) == 1) {
        ++v22;
      }
      --v23;
    }
    while (v23);
    if (!v22) {
      goto LABEL_52;
    }
    if ((int)v21 < 0) {
      size_t v25 = -1;
    }
    else {
      size_t v25 = 32 * v21;
    }
    uint64_t v26 = (char *)operator new[](v25, v4);
    if (v26)
    {
      unsigned __int16 v27 = v26;
      unsigned int v28 = v26;
      do
      {
        *unsigned int v28 = -1;
        *((_WORD *)v28 + 1) = -1;
        v28[4] = -1;
        *(_DWORD *)(v28 + 6) = 2147450879;
        v28[10] = -1;
        *(_OWORD *)(v28 + 12) = xmmword_22BB0BDA0;
        *((_DWORD *)v28 + 7) = 2147450879;
        v28 += 32;
      }
      while (v28 != &v26[32 * v21]);
      unint64_t v29 = 0;
      *((void *)v7 + 1) = v26;
      unsigned __int16 v30 = v5 + 36;
      do
      {
        unsigned __int16 v30 = (uint64_t *)*v30;
        if (*(_DWORD *)(v5[36] + 8) == 1)
        {
          *unsigned __int16 v27 = *((_DWORD *)v30 + 4);
          *((_WORD *)v27 + 1) = *((_DWORD *)v30 + 5);
          v27[4] = v18;
          *((_WORD *)v27 + 3) = *((_DWORD *)v30 + 6);
          *((_WORD *)v27 + 4) = *((_DWORD *)v30 + 7);
          v27[10] = *((_DWORD *)v30 + 8);
          *(_OWORD *)(v27 + 12) = *(_OWORD *)((char *)v30 + 36);
          *((_WORD *)v27 + 14) = *((_DWORD *)v30 + 13);
          *((_WORD *)v27 + 15) = *((_DWORD *)v30 + 14);
          ++v7[2];
          v27 += 32;
        }
        else
        {
          ms_report_exception(2, 16398, 3101, "lpp_transaction_provide_gps_almanac_assistance");
          LODWORD(v21) = *((_DWORD *)v5 + 76);
        }
        ++v29;
      }
      while (v29 < (int)v21);
      if (v7[2])
      {
        *(_OWORD *)__str = *(_OWORD *)v7;
        uint64_t v148 = *((void *)v7 + 2);
        uint64_t v141 = (v137 << 32) | 2;
        int v142 = v138;
        lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, &__s);
        gps_set_almanac_aid((uint64_t)__str, 0, (uint64_t)&v141);
        int v4 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      }
      else
      {
        uint64_t v33 = *((void *)v7 + 1);
        int v4 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        if (v33) {
          MEMORY[0x230F4E5A0](v33, 0x1000C800FACD818);
        }
LABEL_52:
        *((void *)v7 + 1) = 0;
      }
LABEL_53:
      MEMORY[0x230F4E5D0](v7, 0x1020C40D0709D06);
      goto LABEL_13;
    }
    *((void *)v7 + 1) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v31 = mach_continuous_time();
      unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Almanac list allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v32, 0, 1);
    }
    MEMORY[0x230F4E5D0](v7, 0x1020C40D0709D06);
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      goto LABEL_18;
    }
LABEL_13:
    ++v3;
    unint64_t v12 = *((int *)a1 + 4);
  }
  while (v3 < v12);
  if (v12)
  {
    unint64_t v34 = 0;
    uint64_t v35 = a1;
    do
    {
      uint64_t v35 = (uint64_t *)*v35;
      if (*((unsigned char *)v35 + 128) == 1 && !*((_DWORD *)v35 + 2) && *((unsigned char *)GetStaticLppPrivate() + 2) == 1)
      {
        if (*((int *)v35 + 30) < 1)
        {
          ms_report_exception(2, 16401, 3455, "lpp_transaction_provide_gps_navigation_assistance");
        }
        else
        {
          LOBYTE(__s) = 0;
          *((void *)&__s + 1) = 0;
          LOBYTE(v146) = -1;
          memset_s(&__s, 0x18uLL, 0, 0x18uLL);
          LOBYTE(__s) = 0;
          int v36 = *((_DWORD *)v35 + 30);
          if (v36 >= 16) {
            LOBYTE(v36) = 16;
          }
          uint64_t v37 = v36;
          unint64_t v38 = (char *)operator new[](100 * v36, MEMORY[0x263F8C180]);
          if (v38)
          {
            if (v37)
            {
              unint64_t v39 = v38;
              unint64_t v40 = v35 + 13;
              char v41 = v38;
              do
              {
                *(_WORD *)char v41 = 255;
                *((_WORD *)v41 + 4) = -1;
                v41[10] = -1;
                *(_DWORD *)(v41 + 2) = -1;
                v41[6] = -1;
                *(void *)(v41 + 12) = -1;
                *(void *)(v41 + 20) = -1;
                *(void *)(v41 + 28) = 0x7FFF7FFFFFFF7FFFLL;
                *(void *)(v41 + 36) = 0x7FFF7FFF7FFFFFFFLL;
                *((_DWORD *)v41 + 11) = 0x7FFFFFFF;
                *((_WORD *)v41 + 24) = 0x7FFF;
                *((_DWORD *)v41 + 13) = -1;
                *((_WORD *)v41 + 28) = 0x7FFF;
                *(void *)(v41 + 60) = -1;
                *((_WORD *)v41 + 34) = 0x7FFF;
                *((_DWORD *)v41 + 18) = 0x7FFFFFFF;
                *((_WORD *)v41 + 38) = 0x7FFF;
                *((_DWORD *)v41 + 20) = 0x7FFFFFFF;
                *((_WORD *)v41 + 42) = 0x7FFF;
                *((void *)v41 + 11) = 0x8000000080000000;
                *((_WORD *)v41 + 48) = 0x7FFF;
                v41 += 100;
              }
              while (v41 != &v38[100 * v37]);
              uint64_t v42 = 0;
              *((void *)&__s + 1) = v38;
              do
              {
                unint64_t v40 = (uint64_t *)*v40;
                unsigned int v43 = *((_DWORD *)v40 + 2);
                if (v43 > 0xFF)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v44 = mach_continuous_time();
                    unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 2));
                    LbsOsaTrace_WriteLog(0x13u, __str, v45, 0, 1);
                  }
                }
                else
                {
                  *unint64_t v39 = v43;
                }
                *((_WORD *)v39 + 1) = 0;
                v39[1] = 0;
                if (*((unsigned char *)v40 + 20))
                {
                  int v46 = 0;
                  uint64_t v47 = 0;
                  v39[6] = 0;
                  int v48 = 7;
                  do
                  {
                    v46 |= *(unsigned __int8 *)(v40[3] + v47) << v48;
                    v39[6] = v46;
                    ++v47;
                    --v48;
                  }
                  while (v47 != 8);
                }
                else
                {
                  LOBYTE(v46) = v39[6];
                }
                v39[6] = v46 >> 2;
                if (*((unsigned char *)v40 + 36))
                {
                  int v49 = 0;
                  *((_WORD *)v39 + 4) = 0;
                  uint64_t v50 = (unsigned __int8 *)v40[5];
                  uint64_t v51 = 11;
                  do
                  {
                    int v52 = *v50++;
                    v49 |= v52 << --v51;
                    *((_WORD *)v39 + 4) = v49;
                  }
                  while (v51);
                }
                if (*((_DWORD *)v40 + 12) == 1 && *((_DWORD *)v40 + 36) == 1)
                {
                  unsigned int v53 = *((_DWORD *)v40 + 14);
                  if (HIWORD(v53))
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v54 = mach_continuous_time();
                      unsigned __int16 v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navToc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 14));
                      LbsOsaTrace_WriteLog(0x13u, __str, v55, 0, 1);
                    }
                  }
                  else
                  {
                    *((_WORD *)v39 + 15) = v53;
                  }
                  int v56 = *((_DWORD *)v40 + 15);
                  if (v56 == (__int16)v56)
                  {
                    *((_WORD *)v39 + 16) = v56;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v57 = mach_continuous_time();
                    unsigned __int16 v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navaf2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 15));
                    LbsOsaTrace_WriteLog(0x13u, __str, v58, 0, 1);
                  }
                  int v59 = *((_DWORD *)v40 + 16);
                  if (v59 == (__int16)v59)
                  {
                    *((_WORD *)v39 + 17) = v59;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v60 = mach_continuous_time();
                    unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navaf1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 16));
                    LbsOsaTrace_WriteLog(0x13u, __str, v61, 0, 1);
                  }
                  *((_DWORD *)v39 + 9) = *((_DWORD *)v40 + 17);
                  int v62 = *((_DWORD *)v40 + 18);
                  if (v62 == (__int16)v62)
                  {
                    *((_WORD *)v39 + 14) = v62;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v63 = mach_continuous_time();
                    unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navTgd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 18));
                    LbsOsaTrace_WriteLog(0x13u, __str, v64, 0, 1);
                  }
                  unsigned int v65 = *((_DWORD *)v40 + 38);
                  if (v65 > 0xFF)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v66 = mach_continuous_time();
                      unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navURA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 38));
                      LbsOsaTrace_WriteLog(0x13u, __str, v67, 0, 1);
                    }
                  }
                  else
                  {
                    v39[5] = v65;
                  }
                  unsigned int v68 = *((_DWORD *)v40 + 39);
                  if (v68 > 0xFF)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v69 = mach_continuous_time();
                      unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navFitFlag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v69), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 39));
                      LbsOsaTrace_WriteLog(0x13u, __str, v70, 0, 1);
                    }
                  }
                  else
                  {
                    v39[66] = v68;
                  }
                  unsigned int v71 = *((_DWORD *)v40 + 40);
                  if (HIWORD(v71))
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v72 = mach_continuous_time();
                      unsigned __int16 v73 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navToe,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 40));
                      LbsOsaTrace_WriteLog(0x13u, __str, v73, 0, 1);
                    }
                  }
                  else
                  {
                    *((_WORD *)v39 + 32) = v71;
                  }
                  *((_DWORD *)v39 + 22) = *((_DWORD *)v40 + 41);
                  int v74 = *((_DWORD *)v40 + 42);
                  if (v74 == (__int16)v74)
                  {
                    *((_WORD *)v39 + 21) = v74;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v75 = mach_continuous_time();
                    unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navDeltaN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 42));
                    LbsOsaTrace_WriteLog(0x13u, __str, v76, 0, 1);
                  }
                  *((_DWORD *)v39 + 11) = *((_DWORD *)v40 + 43);
                  *((_DWORD *)v39 + 23) = *((_DWORD *)v40 + 44);
                  *((_DWORD *)v39 + 13) = *((_DWORD *)v40 + 45);
                  int v77 = *((_DWORD *)v40 + 46);
                  if (v77 == (__int16)v77)
                  {
                    *((_WORD *)v39 + 48) = v77;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v78 = mach_continuous_time();
                    unsigned __int16 v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navIDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 46));
                    LbsOsaTrace_WriteLog(0x13u, __str, v79, 0, 1);
                  }
                  *((_DWORD *)v39 + 15) = *((_DWORD *)v40 + 47);
                  *((_DWORD *)v39 + 20) = *((_DWORD *)v40 + 48);
                  *((_DWORD *)v39 + 18) = *((_DWORD *)v40 + 49);
                  int v80 = *((_DWORD *)v40 + 50);
                  if (v80 == (__int16)v80)
                  {
                    *((_WORD *)v39 + 20) = v80;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v81 = mach_continuous_time();
                    unsigned __int16 v82 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCrs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 50));
                    LbsOsaTrace_WriteLog(0x13u, __str, v82, 0, 1);
                  }
                  int v83 = *((_DWORD *)v40 + 51);
                  if (v83 == (__int16)v83)
                  {
                    *((_WORD *)v39 + 38) = v83;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v84 = mach_continuous_time();
                    unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCis,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 51));
                    LbsOsaTrace_WriteLog(0x13u, __str, v85, 0, 1);
                  }
                  int v86 = *((_DWORD *)v40 + 52);
                  if (v86 == (__int16)v86)
                  {
                    *((_WORD *)v39 + 28) = v86;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v87 = mach_continuous_time();
                    unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCus,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 52));
                    LbsOsaTrace_WriteLog(0x13u, __str, v88, 0, 1);
                  }
                  int v89 = *((_DWORD *)v40 + 53);
                  if (v89 == (__int16)v89)
                  {
                    *((_WORD *)v39 + 42) = v89;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v90 = mach_continuous_time();
                    unsigned __int16 v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCrc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 53));
                    LbsOsaTrace_WriteLog(0x13u, __str, v91, 0, 1);
                  }
                  int v92 = *((_DWORD *)v40 + 54);
                  if (v92 == (__int16)v92)
                  {
                    *((_WORD *)v39 + 34) = v92;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v93 = mach_continuous_time();
                    unsigned __int16 v94 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCic,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 54));
                    LbsOsaTrace_WriteLog(0x13u, __str, v94, 0, 1);
                  }
                  int v95 = *((_DWORD *)v40 + 55);
                  if (v95 == (__int16)v95)
                  {
                    *((_WORD *)v39 + 24) = v95;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v96 = mach_continuous_time();
                    unsigned __int16 v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 55));
                    LbsOsaTrace_WriteLog(0x13u, __str, v97, 0, 1);
                  }
                  if (*((unsigned char *)v40 + 252) == 1)
                  {
                    unsigned int v98 = *((_DWORD *)v40 + 56);
                    if (v98 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v99 = mach_continuous_time();
                        unsigned __int16 v100 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCodeOnL2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v99), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 56));
                        LbsOsaTrace_WriteLog(0x13u, __str, v100, 0, 1);
                      }
                    }
                    else
                    {
                      v39[4] = v98;
                    }
                    unsigned int v101 = *((_DWORD *)v40 + 57);
                    if (v101 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v102 = mach_continuous_time();
                        unsigned __int16 v103 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemL2Pflag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v102), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 57));
                        LbsOsaTrace_WriteLog(0x13u, __str, v103, 0, 1);
                      }
                    }
                    else
                    {
                      v39[10] = v101;
                    }
                    unsigned int v104 = *((_DWORD *)v40 + 62);
                    if (v104 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v105 = mach_continuous_time();
                        unsigned __int16 v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemAODA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 62));
                        LbsOsaTrace_WriteLog(0x13u, __str, v106, 0, 1);
                      }
                    }
                    else
                    {
                      v39[67] = v104;
                    }
                    *(_OWORD *)(v39 + 12) = *(_OWORD *)(v40 + 29);
                  }
                  else
                  {
                    v39[4] = 0;
                    v39[10] = 0;
                    v39[67] = 0;
                    *(void *)(v39 + 20) = 0;
                    *(void *)(v39 + 12) = 0;
                  }
                  LOBYTE(__s) = __s + 1;
                  v39 += 100;
                }
                else
                {
                  ms_report_exception(2, 16400, 3441, "lpp_transaction_provide_gps_navigation_assistance");
                }
                ++v42;
              }
              while (v42 != v37);
              if ((_BYTE)__s)
              {
                LOBYTE(v146) = v137;
                *(_OWORD *)__str = __s;
                uint64_t v148 = v146;
                uint64_t v143 = (v137 << 32) | 2;
                int v144 = v138;
                lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, &v141);
                gps_set_based_aid((unsigned __int8 *)__str, 0, (uint64_t)&v143);
              }
            }
          }
          else
          {
            *((void *)&__s + 1) = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v107 = mach_continuous_time();
              unsigned __int16 v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NAvData allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 1537);
              LbsOsaTrace_WriteLog(0x13u, __str, v108, 0, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v109 = mach_continuous_time();
              unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "PSP", 68, "lpp_transaction_provide_gps_navigation_assistance");
              LbsOsaTrace_WriteLog(0x13u, __str, v110, 5, 1);
            }
          }
        }
      }
      ++v34;
    }
    while (v34 < *((int *)a1 + 4));
  }
  *(void *)&long long __s = 0x8000000080000000;
  DWORD2(__s) = 0x800000;
  WORD6(__s) = 32639;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  if (*((_DWORD *)a1 + 4))
  {
    int v111 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = a1;
    while (1)
    {
      uint64_t v113 = (uint64_t *)*v113;
      if (*((unsigned char *)v113 + 400) == 1)
      {
        if (*((_DWORD *)v113 + 2) || *((unsigned char *)GetStaticLppPrivate() + 2) != 1)
        {
          int v114 = 3684;
LABEL_176:
          ms_report_exception(2, 16404, v114, "lpp_transaction_provide_utc_model_assistance");
          goto LABEL_177;
        }
        if (*((_DWORD *)v113 + 84) | v111)
        {
          int v114 = 3679;
          goto LABEL_176;
        }
        *(void *)&long long __s = v113[43];
        if (*((_DWORD *)v113 + 88) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v115 = mach_continuous_time();
            unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_Tot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 88));
            LbsOsaTrace_WriteLog(0x13u, __str, v116, 0, 1);
          }
        }
        else
        {
          BYTE8(__s) = *((_DWORD *)v113 + 88);
        }
        if (*((_DWORD *)v113 + 89) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v117 = mach_continuous_time();
            unsigned __int16 v118 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_WNt,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v117), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 89));
            LbsOsaTrace_WriteLog(0x13u, __str, v118, 0, 1);
          }
        }
        else
        {
          BYTE9(__s) = *((_DWORD *)v113 + 89);
        }
        if (*((_DWORD *)v113 + 90) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v119 = mach_continuous_time();
            unsigned __int16 v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DeltaTls,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v119), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 90));
            LbsOsaTrace_WriteLog(0x13u, __str, v120, 0, 1);
          }
        }
        else
        {
          BYTE10(__s) = *((_DWORD *)v113 + 90);
        }
        if (*((_DWORD *)v113 + 91) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v121 = mach_continuous_time();
            unsigned __int16 v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_WNlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v121), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 91));
            LbsOsaTrace_WriteLog(0x13u, __str, v122, 0, 1);
          }
        }
        else
        {
          BYTE11(__s) = *((_DWORD *)v113 + 91);
        }
        if (*((_DWORD *)v113 + 92) == (char)*((_DWORD *)v113 + 92))
        {
          BYTE12(__s) = *((_DWORD *)v113 + 92);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v123 = mach_continuous_time();
          unsigned __int16 v124 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v123), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 92));
          LbsOsaTrace_WriteLog(0x13u, __str, v124, 0, 1);
        }
        if (*((_DWORD *)v113 + 93) == (char)*((_DWORD *)v113 + 93))
        {
          BYTE13(__s) = *((_DWORD *)v113 + 93);
LABEL_202:
          int v111 = 1;
          goto LABEL_177;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
          goto LABEL_202;
        }
        bzero(__str, 0x410uLL);
        uint64_t v125 = mach_continuous_time();
        unsigned __int16 v126 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DeltaTlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 93));
        int v111 = 1;
        LbsOsaTrace_WriteLog(0x13u, __str, v126, 0, 1);
      }
LABEL_177:
      if (++v112 >= (unint64_t)*((int *)a1 + 4))
      {
        if (v111) {
          send_to_lpi_gps_utc_model_req(__s, *((uint64_t *)&__s + 1), v139, v138, (_LPP_TRANSACTION *)a2);
        }
        break;
      }
    }
  }
  LOBYTE(__s) = 0;
  *((void *)&__s + 1) = 0;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  if (*((_DWORD *)a1 + 4))
  {
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    unint64_t v129 = 0;
    char v130 = a1;
    do
    {
      char v130 = (uint64_t *)*v130;
      if (*((unsigned char *)v130 + 160) == 1)
      {
        if (!*((_DWORD *)v130 + 2)
          && (*((unsigned char *)GetStaticLppPrivate() + 2) == 1 ? (BOOL v131 = v128 == 0) : (BOOL v131 = 0), v131))
        {
          if (*((int *)v130 + 38) > 255)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v132 = mach_continuous_time();
              unsigned __int16 v133 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "PSP", 69, "lpp_transaction_provide_realtime_integrity_assistance", 772, *((_DWORD *)v130 + 38));
              LbsOsaTrace_WriteLog(0x13u, __str, v133, 0, 1);
            }
          }
          else
          {
            LOBYTE(__s) = *((_DWORD *)v130 + 38);
          }
          uint64_t v134 = gnssOsa_Calloc("posp_alloc", 18, 1, __s);
          uint64_t v127 = (uint64_t)v134;
          if ((_BYTE)__s)
          {
            unint64_t v135 = 0;
            v136 = v130 + 17;
            do
            {
              v136 = (uint64_t *)*v136;
              v134[v135++] = *((_DWORD *)v136 + 2);
            }
            while (v135 < __s);
          }
          uint64_t v128 = 1;
        }
        else
        {
          ms_report_exception(2, 16402, 3553, "lpp_transaction_provide_realtime_integrity_assistance");
        }
      }
      ++v129;
    }
    while (v129 < *((int *)a1 + 4));
  }
  else
  {
    uint64_t v127 = 0;
  }
  if ((_BYTE)__s)
  {
    *((void *)&__s + 1) = v127;
    send_to_lpi_gps_real_time_integrity_req(__s, v127, v139, v138, (_LPP_TRANSACTION *)a2);
  }
}

uint64_t lpp_transaction_process_provide_assistance_data_a_gnss_error(_DWORD *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 28);
  int v4 = *(_DWORD *)(a2 + 32);
  if (*a1)
  {
    unsigned int v5 = 1;
  }
  else
  {
    int v6 = a1[1];
    if ((v6 - 1) >= 3)
    {
      unsigned int v5 = 1;
      ms_report_exception(1, 16436, 5886, "lpp_transaction_map_location_server_error_cause");
    }
    else
    {
      unsigned int v5 = v6 + 1;
    }
  }
  uint64_t v9 = (v3 << 32) | 2;
  int v10 = v4;
  lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, v8);
  return gps_set_gnss_assist_data_error_req(v5, (uint64_t)&v9);
}

uint64_t lpp_transaction_handle_request_location_error(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, int a5, int a6, unsigned int *a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*a3 == 1 || a3[1] == 1)
  {
    if (a6 == 1) {
      send_to_lpi_pos_loc_info_req(a7, a9, a10, (_LPP_TRANSACTION *)a1);
    }
    return 0;
  }
  else
  {
    uint64_t v15 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
    *(void *)(a2 + 16) = v15;
    v15[8] = 1;
    *(void *)uint64_t v15 = *(void *)(a1 + 16);
    v15[1392] = 1;
    *((_DWORD *)v15 + 10) = 0;
    *((_DWORD *)v15 + 12) = 5;
    uint64_t v16 = *(void *)(a2 + 16);
    *(unsigned char *)(v16 + 9) = 1;
    *(unsigned char *)(v16 + 32) = 1;
    *(unsigned char *)(v16 + 28) = 0;
    *(unsigned char *)(v16 + 20) = 1;
    *(_DWORD *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 64) = 0;
    *(unsigned char *)(v16 + 216) = 1;
    *(unsigned char *)(v16 + 160) = 1;
    *(_DWORD *)(v16 + 156) = a5;
    if (a5 != 1) {
      SendStatusReport(*(_DWORD *)(a4 + 20), 31, 0, 0, 0, 255);
    }
    if (*(unsigned char *)(a1 + 25) == 1 && LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "lpp_transaction_handle_request_location_error", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
      LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
    }
    *(unsigned char *)(a1 + 25) = 2;
    lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
    return 1;
  }
}

void lpp_transaction_location_information_cleanup(_LPP_TRANSACTION *a1)
{
  if (!a1) {
    return;
  }
  unsigned int v2 = *((unsigned __int8 *)a1 + 24);
  if (v2 > 6) {
    return;
  }
  if (v2 != 4)
  {
    int v3 = 16409;
    int v4 = 2069;
LABEL_5:
    ms_report_exception(2, v3, v4, "lpp_transaction_location_information_cleanup");
    return;
  }
  if (*((unsigned char *)a1 + 25) != 2)
  {
    int v3 = 16414;
    int v4 = 2055;
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)a1 + 12);
  if (v5) {
    MEMORY[0x230F4E5D0](v5, 0x1000C40605036ACLL);
  }
  *((void *)a1 + 12) = 0;
  int v6 = (void *)*((void *)a1 + 8);
  if (v6)
  {
    free(v6);
    *((void *)a1 + 8) = 0;
  }
  unsigned __int16 v7 = (void *)*((void *)a1 + 9);
  if (v7)
  {
    GenericFreeSort(v7, (uint64_t)&ySDL_T_LASN_A_GNSS_ProvideLocationInformation);
    unsigned int v8 = (void *)*((void *)a1 + 9);
    if (v8) {
      free(v8);
    }
    *((void *)a1 + 9) = 0;
  }
  uint64_t v9 = (void *)*((void *)a1 + 11);
  if (v9)
  {
    GenericFreeSort(v9, (uint64_t)&ySDL_T_LASN_A_GNSS_ProvideLocationInformation);
    int v10 = (void *)*((void *)a1 + 11);
    if (v10) {
      free(v10);
    }
    *((void *)a1 + 11) = 0;
  }
  uint64_t v11 = (void *)*((void *)a1 + 10);
  if (v11)
  {
    GenericFreeSort(v11, (uint64_t)&ySDL_T_LASN_WLAN_ProvideLocationInformation_r13);
    unint64_t v12 = (void *)*((void *)a1 + 10);
    if (v12) {
      free(v12);
    }
    *((void *)a1 + 10) = 0;
  }
  *((unsigned char *)a1 + 40) = 0;
}

uint64_t lpp_transaction_process_request_location_information(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 24) != 4)
  {
    int v13 = 16409;
    int v14 = 1471;
LABEL_17:
    ms_report_exception(2, v13, v14, "lpp_transaction_process_request_location_information");
    return 0;
  }
  if (*(_DWORD *)a2 != 4)
  {
    int v13 = 16390;
    int v14 = 1479;
    goto LABEL_17;
  }
  *(unsigned char *)(a1 + 112) = 0;
  int v6 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (!v6)
  {
    int v13 = 16388;
    int v14 = 1491;
    goto LABEL_17;
  }
  unsigned int v8 = v6;
  unsigned int __src = 0x7FFF;
  uint64_t v9 = (unsigned char *)(a1 + 48);
  char v40 = -1;
  int v41 = 255;
  __int16 v42 = -256;
  char v43 = 0;
  int v44 = 255;
  char v45 = -1;
  uint64_t v46 = 0x200000003;
  int v10 = -1;
  int v47 = -1;
  int v49 = 0;
  v48[0] = 0;
  *(void *)((char *)v48 + 6) = 0;
  char v50 = -1;
  if (*(_DWORD *)a2 != 4)
  {
    int v11 = 0;
    int v12 = 0;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) || *(unsigned char *)(a2 + 128) != 1)
  {
LABEL_13:
    int v11 = 0;
    int v12 = 0;
    int v10 = -1;
LABEL_21:
    unint64_t v16 = 0xFF000000FFLL;
LABEL_22:
    uint64_t v37 = v16;
    int v38 = v10;
    uint64_t v17 = a1;
    uint64_t v18 = a3;
    uint64_t v19 = (unsigned char *)(a1 + 48);
    uint64_t v20 = (uint64_t)v8;
    int v21 = v12;
    return lpp_transaction_handle_request_location_error(v17, v18, v19, v20, v21, v11, &__src, v7, v37, v38);
  }
  if (*(unsigned char *)(a2 + 160) == 1)
  {
    *uint64_t v9 = 1;
    if (!*((unsigned char *)GetStaticLppPrivate() + 2)) {
      *uint64_t v9 = 2;
    }
  }
  else if (!*(unsigned char *)(a2 + 160) && !*(unsigned char *)(a2 + 162) && !*(unsigned char *)(a2 + 184) && !*(unsigned char *)(a2 + 240))
  {
    goto LABEL_13;
  }
  if (*(unsigned char *)(a2 + 240) == 1)
  {
    *(unsigned char *)(a1 + 49) = 1;
    if (!*((unsigned char *)GetStaticLppPrivate() + 4)) {
      *(unsigned char *)(a1 + 49) = 2;
    }
  }
  if (*v9 != 1 && *(unsigned char *)(a1 + 49) != 1)
  {
    SendStatusReport(*((_DWORD *)v8 + 5), 22, 0, 0, 0, 255);
    uint64_t v37 = 0xFF000000FFLL;
    int v38 = -1;
    uint64_t v17 = a1;
    uint64_t v18 = a3;
    uint64_t v19 = (unsigned char *)(a1 + 48);
    uint64_t v20 = (uint64_t)v8;
    int v21 = 1;
LABEL_55:
    int v11 = 0;
    return lpp_transaction_handle_request_location_error(v17, v18, v19, v20, v21, v11, &__src, v7, v37, v38);
  }
  int v22 = lpp_transaction_process_request_location_information_a_pos(a2 + 24, a1 + 48, (uint64_t)&__src, *((_DWORD *)v8 + 5));
  int v21 = v22;
  int v23 = *v9;
  if (v23 != 1)
  {
    int v12 = 0;
    size_t v25 = (unsigned char *)(a1 + 49);
    if (*(unsigned char *)(a1 + 49) == 1) {
      goto LABEL_41;
    }
LABEL_50:
    if (!v22)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Req Loc Info location failure cause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "PSP", 73, "lpp_transaction_process_request_location_information", v12);
        LbsOsaTrace_WriteLog(0x13u, __str, v31, 4, 1);
      }
      int v21 = v12;
    }
    uint64_t v37 = 0xFF000000FFLL;
    int v38 = -1;
    uint64_t v17 = a1;
    uint64_t v18 = a3;
    uint64_t v19 = (unsigned char *)(a1 + 48);
    uint64_t v20 = (uint64_t)v8;
    goto LABEL_55;
  }
  int v24 = *((_DWORD *)v8 + 18);
  if (v24 != 256 && v24 != *(_DWORD *)(a1 + 20))
  {
    size_t v25 = (unsigned char *)(a1 + 49);
    int v26 = *(unsigned __int8 *)(a1 + 49);
    int v12 = 2;
    *(unsigned char *)(a1 + 48) = 2;
    if (v26 == 1)
    {
      int v23 = 2;
      goto LABEL_41;
    }
    goto LABEL_50;
  }
  int v12 = 0;
  size_t v25 = (unsigned char *)(a1 + 49);
  if (*(unsigned char *)(a1 + 49) != 1)
  {
LABEL_47:
    if (*(_DWORD *)(a1 + 56) != 2)
    {
      BOOL v28 = 1;
      goto LABEL_57;
    }
    goto LABEL_48;
  }
LABEL_41:
  int v27 = *((_DWORD *)v8 + 20);
  if (v27 != 256 && v27 != *(_DWORD *)(a1 + 20))
  {
    int v12 = 2;
    *size_t v25 = 2;
    if (v23 == 1) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }
  if (v23 == 1) {
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 56) != 2)
  {
    BOOL v28 = 0;
LABEL_57:
    int v10 = *((_DWORD *)v8 + 5);
    unint64_t v16 = ((unint64_t)*((unsigned __int8 *)v8 + 16) << 32) | 2;
    __src *= 1000;
    if (v28) {
      *(uint64_t *)((char *)v8 + 68) = *(void *)(a1 + 16);
    }
    if (*v25 == 1) {
      *(uint64_t *)((char *)v8 + 76) = *(void *)(a1 + 16);
    }
    int v11 = 1;
    goto LABEL_22;
  }
LABEL_48:
  *(unsigned char *)(a1 + 104) = 1;
  unint64_t v29 = (char *)operator new(0x3CuLL, MEMORY[0x263F8C180]);
  if (v29)
  {
    *(_DWORD *)unint64_t v29 = 0x7FFF;
    v29[4] = -1;
    *((_DWORD *)v29 + 2) = 255;
    *((_WORD *)v29 + 6) = -256;
    v29[14] = 0;
    *((_DWORD *)v29 + 4) = 255;
    v29[20] = -1;
    *((void *)v29 + 3) = 0x200000003;
    *((_DWORD *)v29 + 8) = -1;
    *((_DWORD *)v29 + 13) = 0;
    *(void *)(v29 + 36) = 0;
    *(void *)(v29 + 42) = 0;
    v29[56] = -1;
    *(void *)(a1 + 96) = v29;
    memcpy_s("lpp_transaction_process_request_location_information", 1611, v29, 0x3Cu, &__src, 0x3CuLL);
    char v40 = __src;
    unsigned int __src = 0;
    BOOL v28 = *(unsigned __int8 *)(a1 + 48) == 1;
    goto LABEL_57;
  }
  *(void *)(a1 + 96) = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location request allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "PSP", 69, "lpp_transaction_process_request_location_information", 1537);
    LbsOsaTrace_WriteLog(0x13u, __str, v33, 0, 1);
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v35 = mach_continuous_time();
    unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "PSP", 68, "lpp_transaction_process_request_location_information");
    LbsOsaTrace_WriteLog(0x13u, __str, v36, 5, 1);
    return 0;
  }
  return result;
}

uint64_t lpp_transaction_process_request_location_information_a_pos(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)a1)
  {
    case 0:
    case 2:
      if (*(unsigned char *)(a1 + 136) != 1) {
        goto LABEL_55;
      }
      char v8 = 1;
      *(unsigned char *)(a3 + 56) = 1;
      if (*(unsigned char *)(a1 + 216) == 1)
      {
        *(unsigned char *)(a1 + 216) = 0;
        *(unsigned char *)(a2 + 1) = 0;
      }
      int v9 = 2;
      goto LABEL_12;
    case 1:
    case 3:
      *(unsigned char *)(a3 + 56) = 0;
      if (*(unsigned char *)(a1 + 136) == 1)
      {
        if (*(unsigned char *)(a1 + 216) == 1)
        {
          SendStatusReport(a4, 22, 0, 0, 0, 255);
LABEL_9:
          *(_WORD *)a2 = 514;
          return 1;
        }
        char v8 = 0;
        int v9 = 1;
LABEL_12:
        *(_DWORD *)(a3 + 40) = 0;
        int v10 = (_DWORD *)(a3 + 40);
        *(_DWORD *)(a3 + 36) = v9;
        if (*(_DWORD *)(a1 + 112))
        {
          if (**(unsigned char **)(a1 + 120))
          {
            *(unsigned char *)(a2 + 3) = 1;
            if (*((unsigned char *)GetStaticLppPrivate() + 2) == 1
              && ((*((unsigned __int8 *)GetStaticLppPrivate() + 3) >> v8) & 1) != 0)
            {
              *(unsigned char *)(a2 + 5) = 1;
              *(_WORD *)(a3 + 44) |= 1u;
              *(_DWORD *)(a3 + 40) |= 1u;
            }
          }
        }
      }
      else
      {
        char v8 = 0;
        int v10 = (_DWORD *)(a3 + 40);
        *(void *)(a3 + 36) = 1;
      }
      if (*(unsigned char *)(a1 + 216))
      {
        *(unsigned char *)(a2 + 4) = 1;
        if (*((unsigned char *)GetStaticLppPrivate() + 4) == 1
          && ((*((unsigned __int8 *)GetStaticLppPrivate() + 5) >> v8) & 1) != 0)
        {
          *(unsigned char *)(a2 + 6) = 1;
          *v10 |= 2u;
        }
      }
      int v11 = *(unsigned __int8 *)(a2 + 5);
      if (*(unsigned char *)(a2 + 5))
      {
        int v12 = (unsigned char *)(a2 + 6);
        if (*(unsigned char *)(a2 + 6))
        {
          LOBYTE(v13) = *(unsigned char *)(a3 + 56);
          goto LABEL_31;
        }
      }
      else
      {
        if (*(unsigned char *)(a2 + 3) == 1) {
          *(unsigned char *)a2 = 2;
        }
        int v12 = (unsigned char *)(a2 + 6);
        if (*(unsigned char *)(a2 + 6))
        {
          *(unsigned char *)(a2 + 2) = *(unsigned char *)(a3 + 56);
          goto LABEL_33;
        }
      }
      if (*(unsigned char *)(a2 + 4) == 1) {
        *(unsigned char *)(a2 + 1) = 2;
      }
      int v13 = *(unsigned __int8 *)(a3 + 56);
      if (!v11)
      {
        *(unsigned char *)a2 = 2;
        if (v13 == 1)
        {
LABEL_55:
          int v20 = a4;
          int v21 = 23;
        }
        else
        {
          if (v13) {
            return 1;
          }
          int v20 = a4;
          int v21 = 22;
        }
        SendStatusReport(v20, v21, 0, 0, 0, 255);
        return 1;
      }
LABEL_31:
      *(unsigned char *)(a2 + 2) = v13;
      if (v11 == 1)
      {
        *(unsigned char *)(a3 + 49) = *(unsigned char *)(a1 + 131);
        *(_WORD *)(a3 + 46) = 0;
      }
LABEL_33:
      if (*(unsigned char *)(a1 + 80) == 1 && *(unsigned char *)(a1 + 76) == 1)
      {
        int v14 = *(unsigned __int8 *)(a1 + 28);
        *(_DWORD *)a3 = 0;
        *(unsigned char *)(a3 + 34) = 0;
        if (v14 != 1)
        {
          *(_DWORD *)(a2 + 8) = 0;
          unsigned int v15 = *(_DWORD *)(a1 + 64);
          if (v15 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v22 = mach_continuous_time();
              unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx time,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 64));
              LbsOsaTrace_WriteLog(0x13u, __str, v23, 0, 1);
            }
          }
          else
          {
            *(unsigned char *)(a3 + 4) = v15;
          }
          if (*(unsigned char *)(a1 + 72) == 1 && (unsigned int v24 = *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 64) > (signed int)v24))
          {
            if (v24 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v25 = mach_continuous_time();
                unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx responseTimeEarlyFix_r12,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 68));
                LbsOsaTrace_WriteLog(0x13u, __str, v26, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(a3 + 35) = v24;
            }
            *(_WORD *)(a2 + 64) = 1025;
          }
          else
          {
            *(unsigned char *)(a3 + 35) = -1;
            *(unsigned char *)(a2 + 64) = 0;
          }
LABEL_70:
          *(_DWORD *)(a3 + 28) = 0;
          if (*(unsigned char *)(a1 + 36) == 1) {
            *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 32);
          }
          if (*(unsigned char *)(a1 + 48) == 1)
          {
            *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 40);
            unsigned int v27 = *(_DWORD *)(a1 + 44);
            if (v27 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v28 = mach_continuous_time();
                unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 44));
                LbsOsaTrace_WriteLog(0x13u, __str, v29, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(a3 + 13) = v27;
            }
          }
          int v30 = *(unsigned __int8 *)(a1 + 49);
          *(unsigned char *)(a3 + 14) = v30;
          if (v30 == 1 && *(unsigned char *)(a1 + 60) == 1)
          {
            *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 52);
            unsigned int v31 = *(_DWORD *)(a1 + 56);
            if (v31 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v32 = mach_continuous_time();
                unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 56));
                LbsOsaTrace_WriteLog(0x13u, __str, v33, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(a3 + 20) = v31;
            }
          }
          *(unsigned char *)(a3 + 12) = *(unsigned char *)(a1 + 77);
          *(unsigned char *)(a3 + 48) = 0;
          *(_DWORD *)(a3 + 24) = 2;
          if (*(unsigned char *)(a1 + 88) == 1) {
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 84);
          }
          *(unsigned char *)(a3 + 32) = -1;
          if (*(unsigned char *)(a1 + 96) == 1)
          {
            char v34 = *(unsigned char *)(a1 + 89) == 1;
            *(unsigned char *)(a3 + 32) = v34;
            if (*(unsigned char *)(a1 + 90) == 1)
            {
              v34 |= 2u;
              *(unsigned char *)(a3 + 32) = v34;
            }
            if (*(unsigned char *)(a1 + 91) == 1)
            {
              v34 |= 4u;
              *(unsigned char *)(a3 + 32) = v34;
            }
            if (*(unsigned char *)(a1 + 92) == 1)
            {
              v34 |= 8u;
              *(unsigned char *)(a3 + 32) = v34;
            }
            if (*(unsigned char *)(a1 + 93) == 1)
            {
              v34 |= 0x10u;
              *(unsigned char *)(a3 + 32) = v34;
            }
            if (*(unsigned char *)(a1 + 94) == 1)
            {
              v34 |= 0x20u;
              *(unsigned char *)(a3 + 32) = v34;
            }
            if (*(unsigned char *)(a1 + 95) == 1) {
              *(unsigned char *)(a3 + 32) = v34 | 0x40;
            }
          }
          *(unsigned char *)(a3 + 33) = -1;
          if (*(unsigned char *)(a1 + 101) == 1)
          {
            char v35 = *(unsigned char *)(a1 + 97) == 1;
            *(unsigned char *)(a3 + 33) = v35;
            if (*(unsigned char *)(a1 + 98) == 1)
            {
              v35 |= 2u;
              *(unsigned char *)(a3 + 33) = v35;
            }
            if (*(unsigned char *)(a1 + 99) == 1)
            {
              v35 |= 4u;
              *(unsigned char *)(a3 + 33) = v35;
            }
            if (*(unsigned char *)(a1 + 100) == 1) {
              *(unsigned char *)(a3 + 33) = v35 | 8;
            }
          }
          if (*v12 != 1) {
            return 0;
          }
          *(_DWORD *)(a3 + 52) = 0;
          uint64_t v36 = *(unsigned int *)(a1 + 200);
          if (!v36) {
            return 0;
          }
          int v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = *(void *)(a1 + 208);
          do
          {
            v37 |= (*(unsigned char *)(v39 + v38) & 1) << v38;
            *(_DWORD *)(a3 + 52) = v37;
            ++v38;
          }
          while (v36 != v38);
          if ((v37 & 2) == 0
            && ((v37 & 1) == 0 || ((*((unsigned __int8 *)GetStaticLppPrivate() + 6) >> *(_DWORD *)(a3 + 52)) & 1) != 0))
          {
            return 0;
          }
          *(unsigned char *)(a2 + 1) = 2;
          return 1;
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 28) != 1)
        {
          uint64_t result = 0;
          *(_WORD *)a2 = 514;
          return result;
        }
        *(_DWORD *)a3 = 0;
        *(unsigned char *)(a3 + 34) = 0;
      }
      unsigned int v16 = *(_DWORD *)(a1 + 24);
      if (v16)
      {
        int v17 = *(_DWORD *)(a1 + 16);
        if (v17)
        {
          if (v16 >= 0xA)
          {
            ms_report_exception(1, 16436, 256, "lpp_convert_reporting_interval");
            *(_DWORD *)a3 = 0;
          }
          else
          {
            *(_DWORD *)a3 = dword_22BB0BE40[v16 - 1];
            *(_DWORD *)(a2 + 8) = 2;
            if (v17 == 7) {
              LOBYTE(v18) = -1;
            }
            else {
              int v18 = 1 << v17;
            }
            if (*(unsigned char *)(a1 + 20) != 1) {
              LOBYTE(v18) = -1;
            }
            *(unsigned char *)(a2 + 57) = v18;
            *(unsigned char *)(a2 + 58) = 0;
            *(unsigned char *)(a3 + 34) = v18;
          }
          goto LABEL_70;
        }
      }
      uint64_t result = 2;
      if (*(unsigned char *)a2 == 1) {
        *(unsigned char *)a2 = 2;
      }
      return result;
    default:
      goto LABEL_9;
  }
}

uint64_t lpp_transaction_process_provide_location_information(uint64_t a1, unsigned char *a2, unsigned __int8 *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  *a3 = 0;
  if (*(unsigned char *)(a1 + 24) != 4)
  {
    int v11 = 16409;
    int v12 = 1759;
LABEL_13:
    ms_report_exception(2, v11, v12, "lpp_transaction_process_provide_location_information");
    return 0;
  }
  int v6 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (!v6)
  {
    int v11 = 16388;
    int v12 = 1769;
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  char v8 = (unsigned char *)(a1 + 48);
  if (*a2 != 1) {
    goto LABEL_22;
  }
  if (*v8 != 1 && *(unsigned char *)(a1 + 49) != 1)
  {
    int v15 = 16413;
    int v16 = 1831;
LABEL_17:
    ms_report_exception(2, v15, v16, "lpp_transaction_process_provide_location_information");
    goto LABEL_22;
  }
  int v9 = a2[8];
  int v10 = *(unsigned __int8 *)(a1 + 50);
  if (v9 != v10 && ((v10 - 1) | (v9 - 1)) > 1u)
  {
    int v15 = 16412;
    int v16 = 1825;
    goto LABEL_17;
  }
  if (*(unsigned char *)(a1 + 112) == 1)
  {
    if (a2[280] == 1)
    {
      *(unsigned char *)(a1 + 113) = 2;
    }
    else
    {
      *(unsigned char *)(a1 + 113) = 3;
      lpp_transaction_add_provide_location_information_a_pos(a1 + 48, (uint64_t)a2, 1);
    }
  }
  if (!*(unsigned char *)(a1 + 40)) {
    *(unsigned char *)(a1 + 40) = 1;
  }
  lpp_transaction_add_provide_location_information_a_pos(a1 + 48, (uint64_t)a2, 0);
LABEL_22:
  if (*(_DWORD *)(a1 + 56))
  {
    ms_report_exception(1, 16436, 1744, "lpp_transaction_process_provide_location_information_trigger_type");
LABEL_24:
    unsigned __int8 v17 = 1;
    int v18 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
    *((void *)a3 + 3) = v18;
    int v19 = 6;
    v18[12] = 6;
    v18[14] = 0;
    v18[16] = 0;
    *((unsigned char *)v18 + 76) = 1;
    v18[18] = 2;
    *a3 = 1;
    goto LABEL_25;
  }
  uint64_t v25 = *(void *)(a1 + 72);
  if (v25 && (!*(unsigned char *)(a1 + 112) || *(unsigned char *)(a1 + 112) == 1 && *(unsigned char *)(a1 + 113) == 3) && *v8 == 1) {
    *char v8 = 5;
  }
  uint64_t v26 = *(void *)(a1 + 80);
  if (v26 && *(unsigned char *)(a1 + 49) == 1) {
    *(unsigned char *)(a1 + 49) = 5;
  }
  if (*v8 != 1 && *(unsigned char *)(a1 + 49) != 1)
  {
    if (*(unsigned char *)(a1 + 112) == 1)
    {
LABEL_62:
      unsigned int v31 = *(unsigned char **)(a1 + 64);
      if (!v31)
      {
        unsigned int v31 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
        *(void *)(a1 + 64) = v31;
      }
      int v32 = *(unsigned __int8 *)(a1 + 113);
      if (v32 == 3)
      {
        v31[96] = 1;
        *((_DWORD *)v31 + 23) = 0;
      }
      else if (v32 == 2)
      {
        v31[96] = 1;
        *((_DWORD *)v31 + 23) = 1;
        if (*(unsigned char *)(a1 + 112) == 1) {
          *(unsigned char *)(a1 + 113) = 4;
        }
      }
      else
      {
        v31[96] = 1;
      }
      goto LABEL_76;
    }
    if (!*(void *)(a1 + 64))
    {
      if (v25)
      {
        if (*(unsigned char *)(v25 + 352) == 1 || *(unsigned char *)(v25 + 176) == 1) {
          goto LABEL_76;
        }
        if (!v26) {
          goto LABEL_105;
        }
      }
      else if (!v26)
      {
        goto LABEL_24;
      }
      if (*(unsigned char *)(v26 + 48) != 1)
      {
LABEL_105:
        uint64_t v51 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
        *(void *)(a1 + 64) = v51;
        v51[48] = 0;
        v51[80] = 0;
        v51[88] = 1;
        *((_DWORD *)v51 + 21) = 2;
      }
    }
LABEL_76:
    if (*(unsigned char *)(a1 + 40))
    {
      unint64_t v33 = 0;
      char v34 = (void **)(a1 + 64);
      uint64_t v35 = 24;
      do
      {
        uint64_t v36 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
        *(void *)&a3[v35] = v36;
        memset_s(v36 + 48, 0x540uLL, 0, 0x540uLL);
        *((_DWORD *)v36 + 12) = 5;
        *((_DWORD *)v36 + 14) = 0;
        *((_DWORD *)v36 + 16) = 0;
        if (*v34)
        {
          v36[216] = 1;
          int v37 = *v34;
          *(_OWORD *)(v36 + 72) = *(_OWORD *)*v34;
          long long v38 = v37[1];
          long long v39 = v37[2];
          long long v40 = v37[3];
          *(_OWORD *)(v36 + 136) = v37[4];
          *(_OWORD *)(v36 + 120) = v40;
          *(_OWORD *)(v36 + 104) = v39;
          *(_OWORD *)(v36 + 88) = v38;
          long long v41 = v37[5];
          long long v42 = v37[6];
          long long v43 = v37[7];
          *(_OWORD *)(v36 + 200) = v37[8];
          *(_OWORD *)(v36 + 184) = v43;
          *(_OWORD *)(v36 + 168) = v42;
          *(_OWORD *)(v36 + 152) = v41;
          if (*v34) {
            free(*v34);
          }
          *char v34 = 0;
        }
        if (v34[1])
        {
          v36[616] = 1;
          memcpy(v36 + 224, v34[1], 0x188uLL);
          int v44 = v34[1];
          if (v44) {
            free(v44);
          }
          v34[1] = 0;
        }
        else if (v34[3] && *((unsigned char *)v34 + 49) == 3)
        {
          v36[616] = 1;
          memcpy(v36 + 224, v34[3], 0x188uLL);
          char v50 = v34[3];
          if (v50) {
            free(v50);
          }
          v34[3] = 0;
        }
        else if (*((unsigned char *)v34 - 16) == 2)
        {
          v36[616] = 1;
          v36[612] = 1;
          *(void *)(v36 + 580) = 1;
        }
        if (v34[2])
        {
          v36[1304] = 1;
          char v45 = v34[2];
          *(_OWORD *)(v36 + 1224) = *v45;
          long long v46 = v45[1];
          long long v47 = v45[2];
          long long v48 = v45[3];
          *(_OWORD *)(v36 + 1288) = v45[4];
          *(_OWORD *)(v36 + 1272) = v48;
          *(_OWORD *)(v36 + 1256) = v47;
          *(_OWORD *)(v36 + 1240) = v46;
          int v49 = v34[2];
          if (v49)
          {
            free(v49);
            v34[2] = 0;
          }
        }
        else if (*((unsigned char *)v34 - 15) == 2)
        {
          v36[1304] = 1;
          v36[1300] = 1;
          *(void *)(v36 + 1276) = 1;
        }
        unsigned __int8 v17 = *a3 + 1;
        *a3 = v17;
        ++v33;
        v34 += 9;
        v35 += 48;
      }
      while (v33 < *(unsigned __int8 *)(a1 + 40));
      char v8 = (unsigned char *)(a1 + 48);
    }
    else
    {
      unsigned __int8 v17 = *a3;
    }
    if (!v17) {
      goto LABEL_32;
    }
    int v19 = 5;
LABEL_25:
    unint64_t v20 = 0;
    unint64_t v21 = v17;
    uint64_t v22 = 24;
    do
    {
      uint64_t v23 = *(void *)&a3[v22];
      *(_WORD *)(v23 + 8) = 1;
      *(void *)uint64_t v23 = *(void *)(a1 + 16);
      if (*(unsigned char *)(a1 + 48) != 1 && *(unsigned char *)(a1 + 49) != 1) {
        *(unsigned char *)(v23 + 9) = v20 == v21 - 1;
      }
      *(unsigned char *)(v23 + 1392) = 1;
      *(_DWORD *)(v23 + 40) = 0;
      *(_DWORD *)(v23 + 48) = v19;
      uint64_t v24 = *(void *)&a3[v22];
      if ((*(_DWORD *)(v24 + 48) - 5) <= 1)
      {
        *(unsigned char *)(v24 + 32) = 1;
        *(unsigned char *)(v24 + 28) = 0;
        *(unsigned char *)(v24 + 20) = 1;
      }
      ++v20;
      unint64_t v21 = *a3;
      v22 += 48;
    }
    while (v20 < v21);
LABEL_32:
    uint64_t v13 = 1;
    goto LABEL_47;
  }
  if (*(unsigned char *)(a1 + 112) == 1 && *(unsigned char *)(a1 + 113) != 4) {
    goto LABEL_62;
  }
  ms_report_exception(2, 16433, 1917, "lpp_transaction_process_provide_location_information");
  uint64_t v13 = 0;
LABEL_47:
  int v27 = *v8;
  if (v27 == 1)
  {
    if (*(unsigned char *)(a1 + 49) == 1) {
      return v13;
    }
    int v28 = *(_DWORD *)(a1 + 16);
    goto LABEL_54;
  }
  int v28 = *(_DWORD *)(a1 + 16);
  if (*((_DWORD *)v7 + 17) == v28 && *((_DWORD *)v7 + 18) == *(_DWORD *)(a1 + 20)) {
    *(uint64_t *)((char *)v7 + 68) = 0x10000000000;
  }
  if (*(unsigned char *)(a1 + 49) != 1)
  {
LABEL_54:
    if (*((_DWORD *)v7 + 19) == v28 && *((_DWORD *)v7 + 20) == *(_DWORD *)(a1 + 20)) {
      *(uint64_t *)((char *)v7 + 76) = 0x10000000000;
    }
    if (v27 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "PSP", 68, "lpp_transaction_process_provide_location_information", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
        LbsOsaTrace_WriteLog(0x13u, __str, v30, 5, 1);
      }
      *(unsigned char *)(a1 + 25) = 2;
      lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
    }
  }
  return v13;
}

void lpp_transaction_add_provide_location_information_a_pos(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!a1 || !a2) {
    return;
  }
  int v6 = *(void **)(a1 + 16);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 16) = 0;
  }
  if (a3 == 1) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = 24;
  }
  char v8 = *(void **)(a1 + v7);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + v7) = 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 8);
  if (v9 > 1)
  {
    if (v9 != 255)
    {
      if (v9 != 2) {
        return;
      }
      ms_report_exception(2, 16407, 5203, "lpp_transaction_add_provide_location_information_a_pos");
      goto LABEL_17;
    }
    int v10 = "lpp_transaction_add_provide_location_information_a_pos";
    int v11 = 2;
    int v12 = 16417;
    int v13 = 5215;
    goto LABEL_23;
  }
  if (*(unsigned char *)(a2 + 8))
  {
    if (v9 != 1) {
      return;
    }
LABEL_17:
    lpp_transaction_add_provide_location_information_a_gnss_ue_based((char *)a1, a2 + 8, a3);
    return;
  }
  if (*(_DWORD *)(a2 + 284))
  {
    *(_WORD *)a1 = 1028;
    return;
  }
  if ((*(unsigned char *)(a2 + 128) & 2) != 0)
  {
    int v14 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x50uLL);
    *(void *)(a1 + 32) = v14;
    memset_s(v14, 0x50uLL, 0, 0x50uLL);
    if (*(unsigned char *)(a2 + 276))
    {
      int v15 = *(unsigned __int8 *)(a2 + 269);
      int v16 = *(_DWORD *)(a2 + 272);
      int v17 = *(unsigned __int8 *)(a2 + 268);
      *((unsigned char *)v14 + 76) = 1;
      *((_DWORD *)v14 + 13) = 1;
      if (v17 == 1) {
        *((unsigned char *)v14 + 64) = 1;
      }
      if (v15 == 1) {
        *((unsigned char *)v14 + 72) = 1;
      }
      if (v16 == 2 || v16 == 1)
      {
        *((_DWORD *)v14 + 14) = v16;
        return;
      }
      if (!v16)
      {
        *((_DWORD *)v14 + 14) = 0;
        return;
      }
      int v10 = "lpp_transaction_add_provide_location_information_a_wlan_ue_assisted";
      int v11 = 1;
      int v12 = 16436;
      int v13 = 3897;
LABEL_23:
      ms_report_exception(v11, v12, v13, v10);
      return;
    }
    unint64_t v18 = *(unsigned __int8 *)(a2 + 226);
    uint64_t v19 = *(void *)(a2 + 232);
    int v20 = *(unsigned __int16 *)(a2 + 240);
    int v21 = *(unsigned __int16 *)(a2 + 242);
    int v22 = *(unsigned __int16 *)(a2 + 244);
    int v23 = *(unsigned __int16 *)(a2 + 246);
    int v24 = *(unsigned __int16 *)(a2 + 248);
    int v25 = *(unsigned __int16 *)(a2 + 250);
    int v26 = *(unsigned __int8 *)(a2 + 264);
    *((unsigned char *)v14 + 48) = 1;
    if (v26 == 1)
    {
      *((unsigned char *)v14 + 8) = 1;
      int v35 = v24;
      int v36 = v25;
      int v34 = v23;
      int v27 = gnssOsa_Calloc("posp_alloc", 18, 1, 0xEuLL);
      *(_DWORD *)__str = 0;
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v20 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v20 / 0xAu - 10 * ((6554 * ((52429 * v20) >> 19)) >> 16)));
      *int v27 = __str[2];
      v27[1] = __str[0];
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v21 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v21 / 0xAu - 10 * ((6554 * ((52429 * v21) >> 19)) >> 16)));
      v27[2] = __str[2];
      v27[3] = __str[0];
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v22 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v22 / 0xAu - 10 * ((6554 * ((52429 * v22) >> 19)) >> 16)));
      v27[4] = __str[2];
      v27[5] = __str[0];
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v34 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v34 / 0xAu - 10 * ((6554 * ((52429 * v34) >> 19)) >> 16)));
      v27[6] = __str[2];
      v27[7] = __str[0];
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v35 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v35 / 0xAu - 10 * ((6554 * ((52429 * v35) >> 19)) >> 16)));
      v27[8] = __str[2];
      v27[9] = __str[0];
      snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v36 % 0xAu);
      snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v36 / 0xAu - 10 * ((6554 * ((52429 * v36) >> 19)) >> 16)));
      v27[10] = __str[2];
      v27[11] = __str[0];
      *((_WORD *)v27 + 6) = 90;
      *int v14 = v27;
    }
    if (v18)
    {
      *((unsigned char *)v14 + 40) = 1;
      *((_DWORD *)v14 + 8) = v18;
      *((_DWORD *)v14 + 9) = 1;
      int v28 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x58uLL);
      v14[2] = v28;
      uint64_t v29 = v14 + 2;
      *int v28 = 0;
      v14[3] = v28;
      if (v18 != 1)
      {
        unint64_t v30 = v18 - 1;
        do
        {
          unsigned int v31 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x58uLL);
          *(void *)v14[3] = v31;
          v14[3] = v31;
          --v30;
        }
        while (v30);
      }
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      do
      {
        uint64_t v29 = (void *)*v29;
        *((unsigned char *)v29 + 12) = 1;
        *((_DWORD *)v29 + 2) = 6;
        int v32 = gnssOsa_Calloc("posp_alloc", 18, 1, 6uLL);
        v29[2] = v32;
        memcpy_s("lpp_transaction_add_provide_location_information_a_wlan_ue_assisted", 3819, v32, *((_DWORD *)v29 + 2), (const void *)v19, 6uLL);
        if (*(unsigned char *)(v19 + 6) == 1)
        {
          *((unsigned char *)v29 + 52) = 1;
          *((_DWORD *)v29 + 12) = *(__int16 *)(v19 + 8);
        }
        if (*(unsigned char *)(v19 + 10) == 1)
        {
          *((unsigned char *)v29 + 72) = 1;
          int v33 = *(_DWORD *)(v19 + 24);
          *((_DWORD *)v29 + 14) = *(void *)(v19 + 16);
          *((_DWORD *)v29 + 15) = v33;
          if (*(unsigned char *)(v19 + 29) == 1)
          {
            *((unsigned char *)v29 + 68) = 1;
            *((_DWORD *)v29 + 16) = *(unsigned __int8 *)(v19 + 28);
          }
        }
        if (*(unsigned char *)(v19 + 32) == 1)
        {
          *((unsigned char *)v29 + 80) = 1;
          *((_DWORD *)v29 + 19) = *(unsigned __int16 *)(v19 + 34);
        }
        if (*(unsigned char *)(v19 + 36) == 1)
        {
          *((unsigned char *)v29 + 82) = 1;
          *((unsigned char *)v29 + 81) = *(unsigned char *)(v19 + 37);
        }
        v19 += 40;
        --v18;
      }
      while (v18);
    }
  }
}

uint64_t lpp_transaction_get_ref_loc_bitmap(_LPP_TRANSACTION *a1)
{
  int v1 = *((unsigned __int8 *)a1 + 24);
  if (v1 == 2) {
    return *((unsigned __int8 *)a1 + 40);
  }
  if (v1 == 3) {
    return *((unsigned __int8 *)GetStaticLppPrivate() + 2) == 1;
  }
  ms_report_exception(2, 16409, 2979, "lpp_transaction_get_ref_loc_bitmap");
  return 0;
}

void *lpp_fill_location_source(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = 5;
  *(unsigned char *)(a1 + 4) = 1;
  uint64_t result = gnssOsa_Calloc("posp_alloc", 18, 1, 5uLL);
  uint64_t v5 = 0;
  *(void *)(a1 + 8) = result;
  do
  {
    *(unsigned char *)(*(void *)(a1 + 8) + v5) = (a2 >> v5) & 1;
    ++v5;
  }
  while (v5 != 5);
  return result;
}

char *lpp_transaction_add_provide_location_information_a_gnss_ue_based(char *result, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = result;
  switch(*(_WORD *)(a2 + 8))
  {
    case 0:
      uint64_t result = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x188uLL);
      char v8 = result;
      uint64_t v9 = 24;
      if (a3 == 1) {
        uint64_t v9 = 40;
      }
      *(void *)&v5[v9] = result;
      if (v5[5] != 1 || (*(unsigned char *)(a2 + 116) & 1) == 0)
      {
        if (!*(unsigned char *)(a2 + 118))
        {
          result[388] = 1;
          result[352] = 0;
          result[176] = 0;
          *(void *)(result + 356) = 1;
        }
LABEL_53:
        *(unsigned char *)(*((void *)v5 + 2) + 120) = 0;
        return result;
      }
      int v11 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
      *((void *)v5 + 2) = v11;
      int v12 = *(unsigned __int8 *)(a2 + 58);
      v11[80] = v12;
      if (v12 != 1) {
        goto LABEL_24;
      }
      if (*(unsigned char *)(a2 + 66) == 1)
      {
        if (*(unsigned char *)(a2 + 73) == 1)
        {
          *((_DWORD *)v11 + 13) = 3;
          *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
          *(_DWORD *)(*((void *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
          *(_DWORD *)(*((void *)v5 + 2) + 68) = *(unsigned __int8 *)(a2 + 72);
          *(_DWORD *)(*((void *)v5 + 2) + 64) = *(_DWORD *)(a2 + 68);
          *(_DWORD *)(*((void *)v5 + 2) + 72) = *(unsigned __int8 *)(a2 + 65);
          *(_DWORD *)(*((void *)v5 + 2) + 76) = *(unsigned __int8 *)(a2 + 74);
          goto LABEL_24;
        }
        *((_DWORD *)v11 + 13) = 1;
        *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
        *(_DWORD *)(*((void *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
        *(_DWORD *)(*((void *)v5 + 2) + 68) = *(unsigned __int8 *)(a2 + 72);
        int v13 = *(_DWORD *)(a2 + 68);
        goto LABEL_22;
      }
      if (*(unsigned char *)(a2 + 64) == 1)
      {
        *((_DWORD *)v11 + 13) = 2;
        *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
        *(_DWORD *)(*((void *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
        int v13 = *(unsigned __int8 *)(a2 + 65);
LABEL_22:
        *(_DWORD *)(*((void *)v5 + 2) + 64) = v13;
        goto LABEL_24;
      }
      *((_DWORD *)v11 + 13) = 0;
      *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
      *(_DWORD *)(*((void *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
LABEL_24:
      uint64_t v14 = *((void *)v5 + 2);
      if (v14)
      {
        *(unsigned char *)(v14 + 88) = 0;
        *(unsigned char *)(v14 + 48) = 1;
        switch(*(_WORD *)(a2 + 26))
        {
          case 0:
            *(_DWORD *)uint64_t v14 = 0;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((void *)v5 + 2) + 12) = *(void *)(a2 + 32);
            *(_DWORD *)(*((void *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            break;
          case 1:
            *(_DWORD *)uint64_t v14 = 1;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((void *)v5 + 2) + 12) = *(void *)(a2 + 32);
            *(_DWORD *)(*((void *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((void *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 56);
            break;
          case 3:
            *(_DWORD *)uint64_t v14 = 2;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((void *)v5 + 2) + 12) = *(void *)(a2 + 32);
            *(_DWORD *)(*((void *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((void *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 44);
            *(_DWORD *)(*((void *)v5 + 2) + 24) = *(unsigned __int8 *)(a2 + 45);
            *(_DWORD *)(*((void *)v5 + 2) + 28) = *(unsigned __int8 *)(a2 + 46);
            *(_DWORD *)(*((void *)v5 + 2) + 32) = *(unsigned __int8 *)(a2 + 57);
            break;
          case 5:
            int v15 = 3;
            goto LABEL_34;
          case 8:
            *(_DWORD *)uint64_t v14 = 4;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((void *)v5 + 2) + 12) = *(void *)(a2 + 32);
            *(_DWORD *)(*((void *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((void *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 47);
            *(_DWORD *)(*((void *)v5 + 2) + 24) = *(void *)(a2 + 48);
            break;
          case 9:
            *(_DWORD *)uint64_t v14 = 5;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((void *)v5 + 2) + 12) = *(void *)(a2 + 32);
            *(_DWORD *)(*((void *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((void *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 47);
            *(_DWORD *)(*((void *)v5 + 2) + 24) = *(void *)(a2 + 48);
            *(_DWORD *)(*((void *)v5 + 2) + 28) = *(unsigned __int8 *)(a2 + 44);
            *(_DWORD *)(*((void *)v5 + 2) + 32) = *(unsigned __int8 *)(a2 + 45);
            *(_DWORD *)(*((void *)v5 + 2) + 36) = *(unsigned __int8 *)(a2 + 46);
            *(_DWORD *)(*((void *)v5 + 2) + 40) = *(unsigned __int8 *)(a2 + 56);
            *(_DWORD *)(*((void *)v5 + 2) + 44) = *(unsigned __int8 *)(a2 + 57);
            break;
          case 0xA:
            int v15 = 6;
LABEL_34:
            *(_DWORD *)uint64_t v14 = v15;
            break;
          default:
            ms_report_exception(1, 16436, 5693, "lpp_map_gnss_location_estimate");
            break;
        }
      }
      v8[388] = 0;
      v8[176] = 0;
      v8[352] = 1;
      if (v5[5] == 1 && (*(unsigned char *)(a2 + 116) & 1) != 0)
      {
        v8[340] = 1;
        *((_DWORD *)v8 + 84) = 1;
        int v16 = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
        *((void *)v8 + 43) = v16;
        if (*(unsigned char *)(a2 + 116)) {
          *int v16 = 1;
        }
      }
      if (*(_DWORD *)(a2 + 112) == 5)
      {
        char v17 = 0;
        *((_DWORD *)v8 + 46) = *(void *)(a2 + 16) % 0x36EE80uLL;
        v8[192] = 0;
        int v18 = *(unsigned __int8 *)(a2 + 24);
        if (v18 == 255) {
          goto LABEL_48;
        }
      }
      else
      {
        *((_DWORD *)v8 + 46) = *(_DWORD *)(a2 + 104);
        int v19 = *(unsigned __int16 *)(a2 + 108);
        if (v19 == 0xFFFF)
        {
          char v20 = 0;
        }
        else
        {
          *((_DWORD *)v8 + 47) = v19;
          char v20 = 1;
        }
        v8[192] = v20;
        int v18 = *(unsigned __int8 *)(a2 + 110);
        if (v18 == 255)
        {
          char v17 = 0;
          goto LABEL_48;
        }
      }
      *((_DWORD *)v8 + 49) = v18;
      char v17 = 1;
LABEL_48:
      v8[200] = v17;
      *((_DWORD *)v8 + 51) = 0;
      v8[328] = 0;
      uint64_t result = (char *)GetStaticLppPrivate();
      if (result[7] != 1) {
        goto LABEL_53;
      }
      unsigned int v21 = *(unsigned __int8 *)(a2 + 280);
      if (!*(unsigned char *)(a2 + 280)) {
        goto LABEL_53;
      }
      uint64_t v22 = *((void *)v5 + 2);
      *(unsigned char *)(v22 + 120) = 1;
      return (char *)lpp_fill_location_source(v22 + 104, v21);
    case 1:
    case 5:
      if (*(unsigned char *)(a2 + 118)) {
        goto LABEL_3;
      }
      uint64_t result = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x188uLL);
      uint64_t v10 = 24;
      if (a3 == 1) {
        uint64_t v10 = 40;
      }
      *(void *)&v5[v10] = result;
      result[388] = 1;
      result[352] = 0;
      result[176] = 0;
      *((_DWORD *)result + 89) = 1;
      *((_DWORD *)result + 90) = 1;
      return result;
    case 4:
      *uint64_t result = 4;
      return result;
    default:
LABEL_3:
      uint64_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location Info Response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_add_provide_location_information_a_gnss_ue_based", 770);
        return (char *)LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      }
      return result;
  }
}

unsigned char *lpp_transaction_add_provideCapabilities_a_gnss(uint64_t a1)
{
  uint64_t result = GetStaticLppPrivate();
  int v3 = result[2];
  if (v3 == 1 && *(unsigned char *)(a1 + 24) == 1)
  {
    *(void *)(a1 + 16) = 0x100000001;
    uint64_t v5 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x70uLL);
    *(void *)uint64_t v5 = 0;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v5;
    uint64_t result = GetStaticLppPrivate();
    if (result[2] == 1)
    {
      v5[2] = 0;
      *((unsigned char *)v5 + 32) = 0;
      StaticLppPrivate = (unsigned __int8 *)GetStaticLppPrivate();
      lpp_fill_in_bitstr_from_byte((unsigned char *)v5 + 40, 3uLL, StaticLppPrivate[3]);
      uint64_t result = (unsigned char *)lpp_fill_in_bitstr_from_byte((unsigned char *)v5 + 56, 8uLL, 0x80u);
      *((_WORD *)v5 + 52) = 0;
      *((unsigned char *)v5 + 106) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 144) == 1)
  {
    *(unsigned char *)(a1 + 72) = 1;
    uint64_t result = GetStaticLppPrivate();
    if (v3 == 1 && result[2] == 1)
    {
      *(unsigned char *)(a1 + 36) = 1;
      *(_DWORD *)(a1 + 32) = 1;
      *(void *)(a1 + 40) = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
      if (*((unsigned char *)GetStaticLppPrivate() + 2) == 1) {
        **(unsigned char **)(a1 + 40) = 1;
      }
      *(unsigned char *)(a1 + 64) = 0;
      lpp_fill_in_bitstr_from_byte((unsigned char *)(a1 + 48), 1uLL, 1u);
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      lpp_fill_in_bitstr_from_byte((unsigned char *)(a1 + 88), 1uLL, 1u);
      *(unsigned char *)(a1 + 112) = 0;
      *(void *)(a1 + 136) = 0x100000001;
      char v8 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x100uLL);
      *(void *)char v8 = 0;
      *(void *)(a1 + 120) = v8;
      *(void *)(a1 + 128) = v8;
      uint64_t result = GetStaticLppPrivate();
      if (result[2] == 1)
      {
        v8[2] = 0;
        *((unsigned char *)v8 + 16) = 0;
        *((unsigned char *)v8 + 24) = 0;
        *((unsigned char *)v8 + 56) = 0;
        *((unsigned char *)v8 + 112) = 1;
        *((unsigned char *)v8 + 80) = 1;
        uint64_t v9 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((void *)v8 + 9) = v9;
        *((unsigned char *)v8 + 68) = 1;
        v8[16] = 2;
        v9[1] |= 1u;
        *((unsigned char *)v8 + 104) = 1;
        uint64_t v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((void *)v8 + 12) = v10;
        *((unsigned char *)v8 + 92) = 1;
        v8[22] = 2;
        v10[1] |= 1u;
        *((unsigned char *)v8 + 128) = 0;
        int v11 = GetStaticLppPrivate();
        char v12 = 0;
        if (v11[3])
        {
          char v12 = 1;
          *((unsigned char *)v8 + 136) = 1;
          *((unsigned char *)v8 + 144) = 1;
        }
        *((unsigned char *)v8 + 148) = v12;
        *((unsigned char *)v8 + 176) = 1;
        *((unsigned char *)v8 + 168) = 1;
        int v13 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((void *)v8 + 20) = v13;
        *((unsigned char *)v8 + 156) = 1;
        v8[38] = 2;
        v13[1] |= 1u;
        *((unsigned char *)v8 + 208) = 1;
        *((unsigned char *)v8 + 200) = 1;
        uint64_t result = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
        *((void *)v8 + 24) = result;
        *((unsigned char *)v8 + 188) = 1;
        v8[46] = 1;
        *result |= 1u;
        *((unsigned char *)v8 + 120) = 1;
        *((unsigned char *)v8 + 216) = 0;
      }
      if (*(unsigned char *)(a1 + 152) == 1)
      {
        *(_DWORD *)(a1 + 145) = 0;
        *(_WORD *)(a1 + 149) = 256;
        *(unsigned char *)(a1 + 151) = 0;
      }
      if (*(unsigned char *)(a1 + 157) == 1) {
        *(_DWORD *)(a1 + 153) = 0;
      }
    }
  }
  return result;
}

uint64_t lpp_transaction_add_provideCapabilities_wlan(unsigned char *a1)
{
  StaticLppPrivate = (unsigned __int8 *)GetStaticLppPrivate();
  lpp_fill_in_bitstr_from_byte(a1, 2uLL, StaticLppPrivate[5]);
  unsigned int v3 = *((unsigned __int8 *)GetStaticLppPrivate() + 6);

  return lpp_fill_in_bitstr_from_byte(a1 + 16, 2uLL, v3);
}

void lpp_transaction_pos_aid_req(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v3 = lpp_session_detect(a2);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    memset_s(&v6, 8uLL, 0, 8uLL);
    int v6 = 1;
    uint64_t v5 = lpp_transaction_start(v4, &v6, 6);
    if (v5) {
      lpp_transaction_act((uint64_t)v5, 6u, a1);
    }
    else {
      ms_report_exception(2, 16425, 5850, "lpp_transaction_pos_aid_req");
    }
  }
  else
  {
    ms_report_exception(2, 16426, 5837, "lpp_transaction_pos_aid_req");
  }
}

void _LPP_TRANSACTION::_LPP_TRANSACTION(_LPP_TRANSACTION *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 6;
  *((unsigned char *)this + 28) = -1;
  *((_DWORD *)this + 8) = -1;
  *((void *)this + 60) = 0;
  memset_s((char *)this + 40, 0x1B8uLL, 0, 0x1B8uLL);
  memset_s((char *)this + 16, 8uLL, 0, 8uLL);
}

void T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s(T_UTRAN_GPS_TIME_s *this)
{
  *((_DWORD *)this + 2) = -1;
  *((unsigned char *)this + 12) = 0;
  memset_s((char *)this + 16, 0xCuLL, 0, 0xCuLL);
  memset_s(this, 8uLL, 0, 8uLL);
}

void T_GNSS_POSITION_s::T_GNSS_POSITION_s(T_GNSS_POSITION_s *this)
{
  *(_DWORD *)this = -1;
  *((void *)this + 1) = -1;
  *(void *)((char *)this + 13) = -1;
  *((void *)this + 3) = -1;
  *((void *)this + 4) = -1;
  *((void *)this + 5) = -1;
  *((_WORD *)this + 24) = -1;
  *((unsigned char *)this + 50) = 0;
  *((_DWORD *)this + 13) = -1;
  *((_WORD *)this + 28) = -256;
  *((unsigned char *)this + 58) = 0;
  *((_DWORD *)this + 15) = 255;
  *((_WORD *)this + 32) = 255;
  *((unsigned char *)this + 66) = -1;
  *((_DWORD *)this + 17) = 4;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 5;
  *((_WORD *)this + 54) = -1;
  *((unsigned char *)this + 110) = 0;
  memset_s((char *)this + 72, 0x18uLL, 0, 0x18uLL);
}

BOOL Is_BDS_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)
      && *(unsigned __int8 *)(a1 + 19) == *(unsigned __int8 *)(a2 + 19)
      && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21)
      && *(unsigned __int8 *)(a1 + 22) == *(unsigned __int8 *)(a2 + 22)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48)
      && *(unsigned __int16 *)(a1 + 50) == *(unsigned __int16 *)(a2 + 50)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
      && *(unsigned __int16 *)(a1 + 88) == *(unsigned __int16 *)(a2 + 88)
      && *(unsigned __int16 *)(a1 + 90) == *(unsigned __int16 *)(a2 + 90)
      && *(unsigned __int16 *)(a1 + 92) == *(unsigned __int16 *)(a2 + 92);
}

uint64_t GN_AGAL_Set_Eph_El(uint64_t a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Eph")) {
    return 0;
  }
  if (*(_DWORD *)a1 > 0x93A7Fu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: TOW = %d >604800, Out of range!");
    return 0;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 4);
  if (v2 >= 0x1000)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Weedouble k = %d >=4096, Out of range!");
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 6);
  if (v3 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v3 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  if (v4 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IODnav = %d >=1024, Out of range!");
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 10);
  if (v5 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toe = %d >=10080, Out of range!");
    return 0;
  }
  double v6 = 0.25;
  if (((v3 - 14) & 0xFB) != 0) {
    double v6 = 0.03;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  double v8 = (double)v7 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  double v10 = (double)v9 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > 5800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  __int16 v11 = *(_WORD *)(a1 + 40);
  if ((unsigned __int16)((unsigned __int16)(v11 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  int v12 = *(_DWORD *)(a1 + 36);
  if ((v12 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  double v13 = (double)v12 * 3.57157734e-13;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %g < %g, Unrealistic value!");
    return 0;
  }
  uint64_t v37 = *(unsigned __int8 *)(a1 + 6);
  if (v13 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %g > %g, Unrealistic value!");
    return 0;
  }
  int v14 = *(_DWORD *)(a1 + 56);
  if (v14 - 0x40000000 >= 0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af0 = %d <-2^30 or >=2^30, Out of range!");
    return 0;
  }
  int v15 = *(_DWORD *)(a1 + 60);
  if ((v15 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af1 = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  __int16 v16 = *(_WORD *)(a1 + 64);
  if ((unsigned __int16)((unsigned __int16)(v16 - 32) >> 6) <= 0x3FEu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af2 = %d <-2^5 or >=2^5, Out of range!");
    return 0;
  }
  unsigned int v17 = *(unsigned __int16 *)(a1 + 66);
  if (v17 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toc = %d >=10080, Out of range!");
    return 0;
  }
  __int16 v18 = *(_WORD *)(a1 + 68);
  if ((unsigned __int16)((unsigned __int16)(v18 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5b = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  __int16 v19 = *(_WORD *)(a1 + 70);
  if ((unsigned __int16)((unsigned __int16)(v19 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5a = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  unsigned int v20 = *(unsigned __int8 *)(a1 + 72);
  if (v20 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Model_ID = %d >1, Out of range!");
    return 0;
  }
  unsigned int v21 = *(unsigned __int8 *)(a1 + 73);
  if (v21 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v22 = *(unsigned __int8 *)(a1 + 74);
  if (v22 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v23 = *(unsigned __int8 *)(a1 + 75);
  if (v23 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  unsigned int v24 = *(unsigned __int8 *)(a1 + 76);
  if (v24 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v25 = *(unsigned __int8 *)(a1 + 77);
  if (v25 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v26 = *(unsigned __int8 *)(a1 + 78);
  if (v26 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  uint64_t v27 = (v37 - 1);
  if (v27 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  uint64_t v28 = p_NA;
  uint64_t v29 = p_NA + 88 * v27;
  *(_DWORD *)(v29 + 5408) = *(_DWORD *)a1;
  *(_WORD *)(v29 + 5412) = v2;
  *(unsigned char *)(v29 + 5414) = v37;
  *(unsigned char *)(v29 + 5415) = *(unsigned char *)(a1 + 7);
  *(_WORD *)(v29 + 5416) = v4;
  *(_WORD *)(v29 + 5418) = v5;
  *(_DWORD *)(v29 + 5420) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v29 + 5424) = v7;
  *(_DWORD *)(v29 + 5428) = v9;
  *(void *)(v29 + 5432) = *(void *)(a1 + 24);
  *(_DWORD *)(v29 + 5440) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v29 + 5444) = v12;
  *(_WORD *)(v29 + 5448) = v11;
  *(void *)(v29 + 5450) = *(void *)(a1 + 42);
  *(_WORD *)(v29 + 5458) = *(_WORD *)(a1 + 50);
  *(_DWORD *)(v29 + 5460) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v29 + 5464) = v14;
  *(_DWORD *)(v29 + 5468) = v15;
  *(_WORD *)(v29 + 5472) = v16;
  *(_WORD *)(v29 + 5474) = v17;
  *(_WORD *)(v29 + 5476) = v18;
  *(_WORD *)(v29 + 5478) = v19;
  *(unsigned char *)(v29 + 5480) = v20;
  *(unsigned char *)(v29 + 5481) = v21;
  *(unsigned char *)(v29 + 5482) = v22;
  *(unsigned char *)(v29 + 5483) = v23;
  *(unsigned char *)(v29 + 5484) = v24;
  *(unsigned char *)(v29 + 5485) = v25;
  *(unsigned char *)(v29 + 5486) = v26;
  if (*(unsigned char *)(a1 + 79)) {
    int v30 = 5;
  }
  else {
    int v30 = 3;
  }
  *(_DWORD *)(v29 + 5404) = v30;
  *(unsigned char *)(v28 + v27 + 150) = 1;
  uint64_t v31 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v31 + 5) && *(int *)v31 >= 3) {
    int v32 = 604800 * *(__int16 *)(v31 + 16) + (int)*(double *)(v31 + 24);
  }
  else {
    int v32 = 0;
  }
  int v35 = (int *)(p_NA + 88 * v27 + 5400);
  *int v35 = v32;
  uint64_t v33 = 1;
  Debug_Log_GAL_Eph(1, (uint64_t)v35);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGAL_Set_Eph: ", 2, v36, v37, *(unsigned int *)(p_NA + 88 * v27 + 5400));
  }
  return v33;
}

uint64_t GN_AGAL_Set_Alm_El(unsigned __int8 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Alm")) {
    return 0;
  }
  unsigned int v2 = *a1;
  if (v2 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v2 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 >= 0x10)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: IODa = %d > 15, Out of range!");
    return 0;
  }
  unsigned int v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: WNa = %d > 3, Out of range!");
    return 0;
  }
  unsigned int v5 = *((unsigned __int16 *)a1 + 2);
  if (v5 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: toa = %d > 1023, Out of range!");
    return 0;
  }
  __int16 v6 = *((_WORD *)a1 + 3);
  if ((unsigned __int16)(v6 - 4097) <= 0xDFFEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  double v7 = (double)v6 * 0.001953125;
  if (v7 < -640.588203)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v7 > 359.411797)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  unsigned int v8 = *((unsigned __int16 *)a1 + 4);
  if (v8 >= 0x800)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %d >= 2^11, Out of range!");
    return 0;
  }
  double v9 = 0.25;
  if (((v2 - 14) & 0xFB) != 0) {
    double v9 = 0.03;
  }
  double v10 = (double)v8 * 0.0000152587891;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  if ((unsigned __int16)(*((_WORD *)a1 + 5) - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: di0 = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  uint64_t v28 = *a1;
  __int16 v11 = *((_WORD *)a1 + 7);
  if ((unsigned __int16)(v11 - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  double v12 = (double)v11 * 3.6572952e-10;
  if (v12 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v12 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  __int16 v13 = *((_WORD *)a1 + 11);
  if ((unsigned __int16)((unsigned __int16)(v13 - 4096) >> 13) <= 6u)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: af1 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  unsigned int v14 = a1[24];
  if (v14 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v15 = a1[25];
  if (v15 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  unsigned int v16 = a1[26];
  if (v16 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  uint64_t v17 = (v28 - 1);
  if (v17 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  __int16 v18 = *((_WORD *)a1 + 5);
  uint64_t v19 = p_NA;
  uint64_t v20 = p_NA + 36 * v17;
  *(unsigned char *)(v20 + 8576) = v28;
  *(unsigned char *)(v20 + 8577) = v3;
  *(_WORD *)(v20 + 8578) = v4;
  *(_WORD *)(v20 + 8580) = v5;
  *(_WORD *)(v20 + 8582) = v6;
  *(_WORD *)(v20 + 8584) = v8;
  *(_WORD *)(v20 + 8586) = v18;
  *(_WORD *)(v20 + 8588) = *((_WORD *)a1 + 6);
  *(_WORD *)(v20 + 8590) = v11;
  *(_WORD *)(v20 + 8592) = *((_WORD *)a1 + 8);
  *(_DWORD *)(v20 + 8594) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(v20 + 8598) = v13;
  *(unsigned char *)(v20 + 8600) = v14;
  *(unsigned char *)(v20 + 8601) = v15;
  *(unsigned char *)(v20 + 8602) = v16;
  if (a1[27]) {
    int v21 = 5;
  }
  else {
    int v21 = 3;
  }
  *(_DWORD *)(v20 + 8572) = v21;
  *(unsigned char *)(v19 + v17 + 186) = 1;
  uint64_t v22 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v22 + 5) && *(int *)v22 >= 3) {
    int v23 = (int)*(double *)(v22 + 24) + 604800 * *(__int16 *)(v22 + 16);
  }
  else {
    int v23 = 0;
  }
  unsigned int v26 = (int *)(p_NA + 36 * v17 + 8568);
  int *v26 = v23;
  uint64_t v24 = 1;
  Debug_Log_GAL_Alm(1, (uint64_t)v26);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGAL_Set_Alm: ", 2, v27, v28, *(unsigned int *)(p_NA + 36 * v17 + 8568));
  }
  return v24;
}

uint64_t GN_AGAL_Set_GGTO(__int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_GGTO")) {
    return 0;
  }
  if ((unsigned __int16)(a1[1] - 2049) <= 0xEFFEu)
  {
    EvCrt_v("GN_AGAL_Set_BGTO: FAILED: A1G = %d < -2^11 or >= 2^11, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 5) >= 0x40u)
  {
    EvCrt_v("GN_AGAL_Set_BGTO: FAILED: WNoG = %d > 63, Out of range!");
    return 0;
  }
  uint64_t v5 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v5 + 5) && *(int *)v5 >= 3) {
    int v6 = (int)*(double *)(v5 + 24) + 604800 * *(__int16 *)(v5 + 16);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = p_NA;
  unsigned int v8 = (unsigned char *)(p_NA + 5396);
  *(_DWORD *)(p_NA + 5384) = v6;
  if (*((unsigned char *)a1 + 6)) {
    int v9 = 5;
  }
  else {
    int v9 = 3;
  }
  *(_DWORD *)(v7 + 5388) = v9;
  uint64_t v10 = *a1;
  *(_WORD *)(v7 + 5392) = v10;
  uint64_t v11 = a1[1];
  *(_WORD *)(v7 + 5394) = v11;
  uint64_t v12 = *((unsigned __int8 *)a1 + 4);
  *unsigned int v8 = v12;
  uint64_t v13 = *((unsigned __int8 *)a1 + 5);
  v8[1] = v13;
  uint64_t v3 = 1;
  *(unsigned char *)(v7 + 149) = 1;
  EvLog_nd("GN_AGAL_Set_GGTO: ", 4, v2, v10, v11, v12, v13);
  return v3;
}

void Gnm32_10SendPltCfgGnc(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)gnssOsa_Calloc("Gnm32_10SendPltCfgGnc", 108, 1, 0x50uLL);
  if (!v0) {
    return;
  }
  int v1 = v0;
  *((_DWORD *)v0 + 3) = 4;
  *(_DWORD *)(v0 + 26) = -65281;
  v0[30] = -1;
  __int16 v2 = dword_26AE54044;
  if ((dword_26AE54044 & 0x100) == 0)
  {
    if ((dword_26AE54044 & 0x400) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    *((_WORD *)v0 + 14) = word_26AE5415C;
    if ((v2 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = dword_26AE54158;
  if (dword_26AE54158 > 0xFF) {
    char v6 = 0;
  }
  v0[30] = v6;
  if ((v2 & 0x400) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 0x1000) != 0)
  {
LABEL_5:
    *((_DWORD *)v0 + 3) = 260;
    long long v3 = xmmword_26AE54170;
    *(_OWORD *)(v0 + 56) = *(_OWORD *)&qword_26AE54180;
    *(_OWORD *)(v0 + 40) = v3;
  }
LABEL_6:
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND =>GNCP CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_10SendPltCfgGnc", *((_DWORD *)v1 + 3));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  AgpsSendFsmMsg(128, 134, 8394499, v1);
}

void Gnm32_11SendPltCfgLsim(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("Gnm32_11SendPltCfgLsim", 156, 1, 0x20uLL);
  if (v0)
  {
    int v1 = v0;
    v0[2] = 0;
    __int16 v2 = (char *)gnssOsa_Calloc("Gnm32_11SendPltCfgLsim", 164, 1, 0x1CuLL);
    v1[3] = v2;
    if (v2)
    {
      *__int16 v2 = dword_26AE54060;
      *(_DWORD *)(v2 + 2) = qword_26AE54048;
      *(int16x4_t *)(v2 + 6) = vuzp1_s16(*(int16x4_t *)((char *)&qword_26AE54048 + 4), (int16x4_t)vext_s8(*(int8x8_t *)((char *)&qword_26AE54048 + 4), *(int8x8_t *)((char *)&qword_26AE54048 + 4), 6uLL));
      v2[14] = BYTE1(dword_26AE54060);
      *((_DWORD *)v2 + 4) = qword_26AE54054;
      *(int16x4_t *)(v2 + 20) = vuzp1_s16(*(int16x4_t *)((char *)&qword_26AE54054 + 4), (int16x4_t)vext_s8(*(int8x8_t *)((char *)&qword_26AE54054 + 4), *(int8x8_t *)((char *)&qword_26AE54054 + 4), 6uLL));
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v3 = mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_LSIM_CONFIG_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm32_11SendPltCfgLsim");
        LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8594435, v1);
    }
    else
    {
      free(v1);
    }
  }
}

size_t Gnm32_00PrintPltfmCfg(const char *a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if ((int)strnlen((const char *)&g_PltfmConfig, 0xCuLL) <= 11
    && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:%s Version,%s \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm32_00PrintPltfmCfg", a1, (const char *)&g_PltfmConfig);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:ConfigMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_26AE54044);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:CommonMSAMask,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_26AE54060);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:CommonMSBMask,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm32_00PrintPltfmCfg", BYTE1(dword_26AE54060));
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GPS  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)qword_26AE54048, (unsigned __int16)qword_26AE54054);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GLON MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm32_00PrintPltfmCfg", WORD1(qword_26AE54048), WORD1(qword_26AE54054));
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:BDS  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm32_00PrintPltfmCfg", WORD2(qword_26AE54048), WORD2(qword_26AE54054));
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GAL  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(qword_26AE54048), HIWORD(qword_26AE54054));
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:SBAS MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)dword_26AE54050, (unsigned __int16)dword_26AE5405C);
    LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:QZSS MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(dword_26AE54050), HIWORD(dword_26AE5405C));
    LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
  }
  if ((int)strnlen(byte_26AE54068, 0xF0uLL) <= 239 && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:DeviceName,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm32_00PrintPltfmCfg", byte_26AE54068);
    LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v25 = 89;
    if ((dword_26AE54044 & 0x80) == 0) {
      uint64_t v25 = 78;
    }
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:DynamicSSF,%c\n", (unint64_t)v24, "GNM", 73, "Gnm32_00PrintPltfmCfg", v25);
    LbsOsaTrace_WriteLog(0xBu, __str, v26, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v27 = mach_continuous_time();
    unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:SleepTO,%us\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_26AE54158);
    LbsOsaTrace_WriteLog(0xBu, __str, v28, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v29 = mach_continuous_time();
    unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GuardTimeVal,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(dword_26AE54060));
    LbsOsaTrace_WriteLog(0xBu, __str, v30, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:MeasDelay,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)word_26AE5415C);
    LbsOsaTrace_WriteLog(0xBu, __str, v32, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR SigThreshold,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&xmmword_26AE54170);
    LbsOsaTrace_WriteLog(0xBu, __str, v34, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v35 = mach_continuous_time();
    unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginL1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNM", 73, "Gnm32_00PrintPltfmCfg", *((double *)&xmmword_26AE54170 + 1));
    LbsOsaTrace_WriteLog(0xBu, __str, v36, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v37 = mach_continuous_time();
    unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginE1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&qword_26AE54180);
    LbsOsaTrace_WriteLog(0xBu, __str, v38, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v40 = mach_continuous_time();
    unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginB1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&qword_26AE54188);
    return LbsOsaTrace_WriteLog(0xBu, __str, v41, 4, 1);
  }
  return result;
}

uint64_t Gnm32_13UpdatePltfmCfg(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_PLTFM_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm32_13UpdatePltfmCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 28);
    dword_26AE54044 |= v4;
    int v5 = v4 & 1;
    if (v4)
    {
      LOBYTE(dword_26AE54060) = *(unsigned char *)(a1 + 56);
      qword_26AE54048 = *(void *)(a1 + 32);
      dword_26AE54050 = *(_DWORD *)(a1 + 40);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 0x40) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_6;
    }
    BYTE1(dword_26AE54060) = *(unsigned char *)(a1 + 57);
    qword_26AE54054 = *(void *)(a1 + 44);
    dword_26AE5405C = *(_DWORD *)(a1 + 52);
    int v4 = *(_DWORD *)(a1 + 28);
    int v5 = 1;
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
LABEL_19:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HWCfg changed BaudRate,%u,DeviceName,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm32_13UpdatePltfmCfg", *(_DWORD *)(a1 + 60), (const char *)(a1 + 64));
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    dword_26AE54064 = *(_DWORD *)(a1 + 60);
    memcpy_s("Gnm32_13UpdatePltfmCfg", 314, byte_26AE54068, 0xF0u, (const void *)(a1 + 64), 0xF0uLL);
    int v4 = *(_DWORD *)(a1 + 28);
    if ((v4 & 0x100) == 0)
    {
LABEL_8:
      if ((v4 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
LABEL_22:
    dword_26AE54158 = *(_DWORD *)(a1 + 304);
    if ((v4 & 0x400) == 0)
    {
LABEL_9:
      if ((v4 & 0x200) == 0) {
        goto LABEL_10;
      }
      goto LABEL_24;
    }
LABEL_23:
    word_26AE5415C = *(_WORD *)(a1 + 308);
    if ((v4 & 0x200) == 0)
    {
LABEL_10:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
LABEL_24:
    HIWORD(dword_26AE54060) = *(_WORD *)(a1 + 58);
    if ((v4 & 0x1000) == 0)
    {
LABEL_11:
      if (!v5)
      {
LABEL_13:
        Gnm32_10SendPltCfgGnc();
        Gnm32_00PrintPltfmCfg("UPDATED");
        return 0;
      }
LABEL_12:
      Gnm32_11SendPltCfgLsim();
      goto LABEL_13;
    }
LABEL_25:
    long long v11 = *(_OWORD *)(a1 + 344);
    xmmword_26AE54170 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)&qword_26AE54180 = v11;
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm32_13UpdatePltfmCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Gnm32_14GetPltfmCfg(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *))
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset_s(&__s, 0x270uLL, 0, 0x270uLL);
  int __s = dword_26AE54044;
  uint64_t v11 = qword_26AE54054;
  int v12 = dword_26AE5405C;
  int v13 = dword_26AE54060;
  uint64_t v9 = qword_26AE54048;
  int v10 = dword_26AE54050;
  int v16 = dword_26AE54158;
  __int16 v17 = word_26AE5415C;
  long long v19 = *(_OWORD *)&qword_26AE54180;
  long long v18 = xmmword_26AE54170;
  if ((dword_26AE54044 & 0x40) != 0)
  {
    int v14 = dword_26AE54064;
    strncpy(v15, byte_26AE54068, 0xF0uLL);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetCfgCB returned PltfmCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_14GetPltfmCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  return a2(a1, 2, &__s);
}

_DWORD *Gnm32_21GetHwConfig(_DWORD *result)
{
  int v1 = result;
  if ((dword_26AE54044 & 0x40) != 0
    && ((v2 = dword_26AE54064) != 0 || (size_t result = (_DWORD *)strnlen(byte_26AE54068, 0xF0uLL), result)))
  {
    *(unsigned char *)int v1 = 1;
    v1[2] = v2;
    return memcpy_s("Gnm32_21GetHwConfig", 424, v1 + 3, 0xF0u, byte_26AE54068, 0xF0uLL);
  }
  else
  {
    *(unsigned char *)int v1 = 0;
  }
  return result;
}

void INS_CalcGlobalParameters(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  double v2 = *(double *)(a1 + 528);
  if (*(unsigned char *)(a1 + 552) || v2 - *(double *)(a1 + 544) > *(double *)(a1 + 536))
  {
    long long v10 = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    memset(v9, 0, sizeof(v9));
    *(unsigned char *)(a1 + 552) = 0;
    *(double *)(a1 + 544) = v2;
    double v3 = InsUtil_ECEF2Geo_Iterative((double *)(a1 + 376), (uint64_t)&v10, *(double *)(a1 + 408));
    *(double *)(a1 + 408) = v3;
    __double2 v4 = __sincos_stret(v11[0]);
    double v5 = v4.__cosval * v4.__cosval + v4.__sinval * v4.__sinval * 0.986656055;
    if (v5 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v7 = *(double *)(g_TCU + 8);
        }
        else {
          double v7 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "INS_CalcGlobalParameters", 90, v6, v7, v5);
        double v3 = *(double *)(a1 + 408);
      }
      g_FPE_AssertFlag = 1;
      double v5 = 1.0;
    }
    *(double *)(a1 + 488) = v3 * sqrt(v5);
    double G_0 = CreateG_0((uint64_t)&v10);
    *(double *)(a1 + 480) = G_0;
    VecSet_3x1((const char *)3, (uint64_t)v9, 0.0, 0.0, G_0 * (v11[1] * v11[1] * 3.0 / 4.06806316e13 + (v11[1] + v11[1]) * -1.0068026 / 6378137.0 + 1.0));
    CreateC_e_n((uint64_t)&v10, (int *)(a1 + 168));
    Mult_MatT_Mat(9, a1 + 168, 3, (uint64_t)v9, 3, a1 + 248);
  }
}

const char *LC_LOG_SEVERITY_GENERIC(const char *__format, ...)
{
  va_start(va, __format);
  *(void *)&v11[1999] = *MEMORY[0x263EF8340];
  if (g_p_CB_LCD_SA_Dbg)
  {
    int v1 = vsnprintf(&__str, 0x7D0uLL, __format, va);
    strcpy(&v11[v1 - 1], "\r\n");
    double v2 = (char **)g_p_CB_LCD_SA_Dbg;
    char v3 = __str;
    if (__str)
    {
      __double2 v4 = *(char **)g_p_CB_LCD_SA_Dbg;
      double v5 = v11;
      do
      {
        *double v2 = v4 + 1;
        *__double2 v4 = v3;
        __double2 v4 = *v2;
        if (*v2 >= v2[3])
        {
          __double2 v4 = v2[2];
          *double v2 = v4;
        }
        int v6 = *v5++;
        char v3 = v6;
      }
      while (v6);
      double v2 = (char **)g_p_CB_LCD_SA_Dbg;
    }
    if (v1 == 2000)
    {
      double v7 = *v2;
      char v8 = 114;
      uint64_t v9 = 1u;
      do
      {
        *double v2 = v7 + 1;
        *double v7 = v8;
        double v7 = *v2;
        if (*v2 >= v2[3])
        {
          double v7 = v2[2];
          *double v2 = v7;
        }
        char v8 = str_3_0[v9++];
      }
      while (v9 != 29);
      double v2 = (char **)g_p_CB_LCD_SA_Dbg;
    }
    return (const char *)LCD_SA_Debug_Flush_Check((uint64_t)v2);
  }
  return __format;
}

const char *INS_Init(uint64_t a1, char a2, int a3, double *a4, double a5)
{
  if (!*(unsigned char *)(a1 + 1048))
  {
    *(unsigned char *)(a1 + 1048) = 1;
    *(void *)(a1 + 408) = 0xC0C3878000000000;
    *(int64x2_t *)(a1 + 480) = vdupq_n_s64(0xC0C3878000000000);
    *(_DWORD *)(a1 + 784) = 2;
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 8), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 88), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 168), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 248), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 280), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 312), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 344), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 376), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 496), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 560), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 592), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 624), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 704), 0.0);
    VecSet_3x1((const char *)3, a1 + 792, a4[1], a4[2], a4[3]);
    VecSet_3x1((const char *)3, a1 + 824, a4[4], a4[5], a4[6]);
    VecSet_3x1((const char *)3, a1 + 856, a4[7], a4[8], a4[9]);
    VecSet_3x1((const char *)3, a1 + 888, a4[10], a4[11], a4[12]);
    VecSet_3x1((const char *)3, a1 + 920, a4[13], a4[14], a4[15]);
    VecSet_3x1((const char *)3, a1 + 952, a4[16], a4[17], a4[18]);
    VecSet_3x1((const char *)3, a1 + 984, a4[19], a4[20], a4[21]);
    VecSet_3x1((const char *)3, a1 + 1016, a4[22], a4[23], a4[24]);
    *(unsigned char *)a1 = a2;
    if (a3) {
      double v10 = 0.0;
    }
    else {
      double v10 = a5;
    }
    *(double *)(a1 + 536) = v10;
  }
  *(void *)(a1 + 528) = 0xC0C3878000000000;
  *(void *)(a1 + 544) = 0xC0C3878000000000;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 416), 0.0);
  size_t result = Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 448), 0.0);
  *(unsigned char *)(a1 + 552) = 1;
  return result;
}

void INS_InitAfterLeveling(uint64_t a1, double *a2, int *a3, double *a4, int *a5, _DWORD *a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(__x, 0, sizeof(__x));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  VecSet_3x1((const char *)3, (uint64_t)v16, 0.0, 0.0, 0.0000729211515);
  skewSimMat((double *)v16, (int *)(a1 + 704));
  *(double *)(a1 + 408) = InsUtil_ECEF2Geo_Iterative(a4, (uint64_t)v17, 6378137.0);
  CreateC_e_n((uint64_t)v17, (int *)(a1 + 168));
  CreateC_b_n(a2, (int *)__x);
  Mult_MatT_Mat(9, a1 + 168, 9, (uint64_t)__x, 9, a1 + 8);
  VecSet_3x1((const char *)3, a1 + 1064, 0.0, 0.0, 0.0);
  uint64_t v10 = DWORD1(__x[0]);
  unsigned int v11 = DWORD1(__x[0]);
  *(long double *)(a1 + 1072) = atan2(*((long double *)__x + ((2 * DWORD1(__x[0])) | 1u) + 1), *((long double *)__x + (2 * DWORD1(__x[0]) + 2) + 1))* 57.2957795;
  *(long double *)(a1 + 1080) = asin(*((long double *)&__x[v11] + 1)) * 57.2957795;
  *(long double *)(a1 + 1088) = atan2(*((long double *)__x + v10 + 1), *((long double *)__x + 1)) * 57.2957795;
  VecSet_3x1((const char *)3, a1 + 1096, 0.0, 0.0, 0.0);
  VecSet_3x1((const char *)3, (uint64_t)v18, 0.0, 0.0, 0.0);
  Mult_Mat_Mat(9, a1 + 8, 3, (uint64_t)v18, 3, a1 + 280);
  Copy_Mat(3, (int *)a4, (const char *)3, (int *)(a1 + 344));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  int v14 = (int *)(a1 + 376);
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 376));
  Copy_Mat(3, (int *)a4, (const char *)3, (int *)(a1 + 560));
  uint64_t v12 = (int *)(a1 + 592);
  Set_Mat_Const((const char *)2, 1u, (const char *)3, (int *)(a1 + 592), 0.0);
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 624));
  *(void *)(a1 + 1056) = 0x4010000000000000;
  Sub_Mat(3, (int *)(a1 + 448), 3, a3, (const char *)3, (int *)(a1 + 448));
  if (*(double *)&a6[2 * (a6[1] * *a6 - 1) + 2] != 0.0)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    Copy_SubMat_from_Mat(1.0, 6, a6, 0, 0, 3, 1u, 3, (int *)&v22);
    INS_CalcGlobalParameters(a1);
    long long v20 = 0u;
    long long v21 = 0u;
    Mult_MatT_Mat(9, a1 + 8, 3, a1 + 248, 3, (uint64_t)&v20);
    Add_Mat(3, (int *)&v22, 3, (int *)&v20, (const char *)3, (int *)&v20);
    Mult_Mat_scalar(-1.0, 3, (int *)&v20, (const char *)3, (int *)(a1 + 416));
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  Mult_Mat_scalar(-1.0, 3, (int *)(a1 + 792), (const char *)3, (int *)&v20);
  CreateC_b_n((double *)&v20, (int *)&v22);
  Mult_Mat_Mat(9, (uint64_t)&v22, 9, a1 + 8, 9, a1 + 8);
  Sub_Mat(3, (int *)(a1 + 280), 3, (int *)(a1 + 824), (const char *)3, (int *)(a1 + 280));
  Sub_Mat(3, (int *)(a1 + 344), 3, (int *)(a1 + 856), (const char *)3, (int *)(a1 + 344));
  Sub_Mat(3, (int *)(a1 + 416), 3, (int *)(a1 + 888), (const char *)3, (int *)(a1 + 416));
  Sub_Mat(3, (int *)(a1 + 448), 3, (int *)(a1 + 920), (const char *)3, (int *)(a1 + 448));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 560));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 624));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, v14);
  Copy_Mat(3, a5, (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, a5, (const char *)3, (int *)(a1 + 280));
  Copy_Mat(3, a5, (const char *)3, v12);
  Set_Mat_Size((const char *)3, v12, 2, 1);
  Add_Mat_ScalarMult(-0.4, 3, v14, 3, a5, (const char *)3, (int *)(a1 + 560));
}

void INS_IntegrationStep(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  memset(v17, 0, sizeof(v17));
  skewSimMat(a3, (int *)v17);
  if (*(unsigned char *)a1)
  {
    double v7 = (int *)(a1 + 88);
    char v8 = (int *)(a1 + 8);
    Copy_Mat(9, (int *)(a1 + 88), (const char *)9, (int *)(a1 + 8));
    uint64_t v9 = (int *)(a1 + 312);
    uint64_t v10 = (int *)(a1 + 280);
    Copy_Mat(3, (int *)(a1 + 312), (const char *)3, (int *)(a1 + 280));
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    Copy_Mat(9, (int *)v17, (const char *)9, (int *)v16);
    Mult_Mat_Mat(9, (uint64_t)v16, 9, (uint64_t)v16, 9, (uint64_t)v16);
    memset(v15, 0, sizeof(v15));
    Set_Mat_I((const char *)3, (const char *)9, (int *)v15, 1.0);
    Add_Mat_ScalarMult(a4, 9, (int *)v15, 9, (int *)v17, (const char *)9, (int *)v15);
    Add_Mat_ScalarMult(a4 * a4 * 0.5, 9, (int *)v15, 9, (int *)v16, (const char *)9, (int *)v15);
    double v7 = (int *)(a1 + 88);
    Mult_Mat_Mat(9, a1 + 88, 9, (uint64_t)v15, 9, (uint64_t)v15);
    Mult_Mat_Mat(9, a1 + 704, 9, a1 + 88, 9, (uint64_t)v16);
    char v8 = (int *)(a1 + 8);
    Add_Mat_ScalarMult(-a4, 9, (int *)v15, 9, (int *)v16, (const char *)9, (int *)(a1 + 8));
    memset(v14, 0, sizeof(v14));
    Add_Mat(9, (int *)(a1 + 88), 9, (int *)(a1 + 8), (const char *)9, (int *)v16);
    Mult_Mat_Mat(9, (uint64_t)v16, 3, a2, 3, (uint64_t)v14);
    Mult_Mat_scalar(0.5, 3, (int *)v14, (const char *)3, (int *)v14);
    memset(v13, 0, sizeof(v13));
    uint64_t v9 = (int *)(a1 + 312);
    Mult_Mat_Mat(9, a1 + 704, 3, a1 + 312, 3, (uint64_t)v13);
    Mult_Mat_scalar(-2.0, 3, (int *)v13, (const char *)3, (int *)v13);
    Add_Mat(3, (int *)v13, 3, (int *)(a1 + 248), (const char *)3, (int *)v13);
    Add_Mat(3, (int *)v13, 3, (int *)v14, (const char *)3, (int *)v13);
    Mult_Mat_scalar(a4, 3, (int *)v13, (const char *)3, (int *)v13);
    uint64_t v10 = (int *)(a1 + 280);
    Add_Mat(3, (int *)(a1 + 312), 3, (int *)v13, (const char *)3, (int *)(a1 + 280));
  }
  unsigned int v11 = (int *)(a1 + 344);
  Add_Mat(3, v9, 3, v10, (const char *)3, (int *)(a1 + 344));
  Mult_Mat_scalar(a4 * 0.5, 3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 344));
  uint64_t v12 = (int *)(a1 + 376);
  Add_Mat(3, v12, 3, v11, (const char *)3, v11);
  Copy_Mat(9, v8, (const char *)9, v7);
  Copy_Mat(3, v10, (const char *)3, v9);
  Copy_Mat(3, v11, (const char *)3, v12);
}

void INS_ApplyImuSample(uint64_t a1, int *a2, double a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  Add_Mat(3, a2, 3, (int *)(a1 + 416), (const char *)3, (int *)v8);
  Copy_Mat(3, (int *)v8, (const char *)3, (int *)(a1 + 496));
  memset(v7, 0, sizeof(v7));
  Add_Mat(3, a2 + 8, 3, (int *)(a1 + 448), (const char *)3, (int *)v7);
  double v6 = a3 - *(double *)(a1 + 528);
  *(double *)(a1 + 528) = a3;
  INS_CalcGlobalParameters(a1);
  INS_IntegrationStep(a1, (uint64_t)v8, (double *)v7, v6);
}

void INS_ApplyCorrectionsFromKalman(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  Copy_SubMat_from_Mat(-1.0, 32, (_DWORD *)a2, 0, 0, 3, 1u, 3, (int *)v15);
  CreateC_b_n((double *)v15, (int *)v16);
  Mult_Mat_Mat(9, (uint64_t)v16, 9, a1 + 8, 9, a1 + 8);
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  int v4 = *(_DWORD *)(a1 + 784);
  if (v4)
  {
    if (v4 == 2)
    {
      InsUtil_mat2quat(a1 + 8, (uint64_t)v13);
      double v5 = Norma_Vec(6, (int *)v13);
      Mult_Mat_scalar(1.0 / v5, 6, (int *)v13, (const char *)6, (int *)v13);
      InsUtil_quat2mat((double *)v13, (int *)(a1 + 8));
    }
    else if (v4 == 1)
    {
      long long v8 = 0uLL;
      long long v9 = 0uLL;
      extractOfromC_b_n(a1 + 8, (uint64_t)&v8);
      CreateC_b_n((double *)&v8, (int *)(a1 + 8));
    }
    else
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v7 = *(double *)(g_TCU + 8);
        }
        else {
          double v7 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f not a valid eulerCorretion parameter", "INS_ApplyCorrectionsFromKalman", 765, v6, v7);
      }
      g_FPE_AssertFlag = 1;
    }
  }
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 3, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 280), 3, (int *)v15, (const char *)3, (int *)(a1 + 280));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 6, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 344), 3, (int *)v15, (const char *)3, (int *)(a1 + 344));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 9, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 416), 3, (int *)v15, (const char *)3, (int *)(a1 + 416));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 12, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 448), 3, (int *)v15, (const char *)3, (int *)(a1 + 448));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 15, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 560), 3, (int *)v15, (const char *)3, (int *)(a1 + 560));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 21, 0, 2, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 592), 3, (int *)v15, (const char *)3, (int *)(a1 + 592));
  *(double *)(a1 + 1056) = *(double *)(a1 + 1056) - *(double *)(a2 + 192);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  Copy_SubMat_from_Mat(-1.0, 32, (_DWORD *)a2, 18, 0, 3, 1u, 3, (int *)v15);
  CreateC_b_n((double *)v15, (int *)&v8);
  Mult_Mat_Mat(9, (uint64_t)&v8, 9, a1 + 624, 9, a1 + 624);
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 376));
}

uint64_t lsim00_01IgnoreMessage(unsigned __int8 *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:Msg,%u,Src,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 65, "lsim00_01IgnoreMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 1, 1);
  }
  return 0;
}

uint64_t Gnm51_01EarlyStartStartInd(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm51_01EarlyStartStartInd");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
LABEL_11:
      int v6 = 0;
LABEL_12:
      Gnm51_07SendEarlyStartStartRsp(v6);
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm51_01EarlyStartStartInd", 517);
    int v9 = 0;
LABEL_10:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    goto LABEL_11;
  }
  if (Gnm02_39GetEarlyStartInstn())
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:Session Ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm51_01EarlyStartStartInd", 1028);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
    }
    int v6 = 13;
    goto LABEL_12;
  }
  if (Gnm02_54IsEmerSessionOngoing())
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:EmerSession Ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm51_01EarlyStartStartInd", 1028);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    }
    int v6 = 10;
    goto LABEL_12;
  }
  int v13 = Gnm02_11ReqNewInstn();
  if (!v13)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_11;
    }
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNM", 87, "Gnm51_01EarlyStartStartInd", 2049);
    int v9 = 2;
    goto LABEL_10;
  }
  uint64_t v14 = v13;
  if ((Gnm02_15AddEarlyStartParams(v13) & 1) == 0
    || (uint64_t v15 = *((void *)v14 + 1),
        unsigned __int16 v16 = *v14,
        (uint64_t v17 = gnssOsa_Calloc("Gnm51_03EarlyStartSendPosStart", 136, 1, 0x38uLL)) == 0))
  {
    Gnm02_21DeleteInstn(v14);
    goto LABEL_11;
  }
  uint64_t v18 = v17;
  v17[6] = v16;
  v17[7] = 0;
  *((_DWORD *)v17 + 5) = 0;
  *((_DWORD *)v17 + 6) = *(unsigned __int8 *)(v15 + 4);
  v17[14] = 0;
  *((unsigned char *)v17 + 48) = 2;
  *((unsigned char *)v17 + 50) = 1;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:SessId,%u,StartTime,%u,StopTime,%u,PosOutput,%u,ConstRep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm51_03EarlyStartSendPosStart", *((unsigned __int16 *)v18 + 6), v18[5], v18[6], *((unsigned __int8 *)v18 + 48), *((unsigned __int8 *)v18 + 50));
    LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_REQ =>GNCS Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm51_03EarlyStartSendPosStart", *((unsigned __int16 *)v18 + 6));
    LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
  }
  AgpsSendFsmMsg(128, 130, 8519680, v18);
  Gnm02_24AbortAllNafSessions(8);
  return 0;
}

void Gnm51_07SendEarlyStartStartRsp(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm51_07SendEarlyStartStartRsp", 264, 1, 0x10uLL);
  if (v2)
  {
    unsigned __int16 v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_RSP =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm51_07SendEarlyStartStartRsp");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8603908, v3);
  }
}

uint64_t Gnm51_02EarlyStartStopInd(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm51_02EarlyStartStopInd");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm51_02EarlyStartStopInd", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 0, 1);
    }
    int v12 = 0;
    char v13 = 0;
    goto LABEL_20;
  }
  int v4 = *(unsigned __int8 *)(a1 + 12);
  EarlyStartInstint n = Gnm02_39GetEarlyStartInstn();
  if (!EarlyStartInstn)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:Session not active\n");
LABEL_18:
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
    goto LABEL_19;
  }
  int v6 = (unsigned __int16 *)EarlyStartInstn;
  uint64_t v7 = *(void *)(EarlyStartInstn + 8);
  if (!v7)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:InstnInfo\n");
    goto LABEL_18;
  }
  *(unsigned char *)(v7 + 5) = v4;
  if (!Gnm10_28StopPositioning((unsigned __int16 *)EarlyStartInstn))
  {
    Gnm02_21DeleteInstn(v6);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Stop Send Failure\n");
      goto LABEL_18;
    }
LABEL_19:
    char v13 = v4 != 0;
    int v12 = 4;
LABEL_20:
    Gnm51_08SendEarlyStartStopRsp(v12, v13);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Session Stop sent\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm51_04EarlyStartSessionStop");
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  return 0;
}

void Gnm51_08SendEarlyStartStopRsp(int a1, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = gnssOsa_Calloc("Gnm51_08SendEarlyStartStopRsp", 289, 1, 0x14uLL);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    v4[3] = a1;
    *((unsigned char *)v4 + 16) = a2;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v7 = 84;
      if (!*((unsigned char *)v5 + 16)) {
        uint64_t v7 = 70;
      }
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_RSP =>LSIM Result,%u,ApiStatus,%c\n", (unint64_t)v6, "GNM", 73, "Gnm51_08SendEarlyStartStopRsp", v5[3], v7);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8604164, v5);
  }
}

void Gnm51_05StartPosResp(unsigned __int16 *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm51_05StartPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    Gnm51_07SendEarlyStartStartRsp(1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm51_05StartPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
    }
    Gnm51_07SendEarlyStartStartRsp(0);
    if (a1)
    {
      Gnm02_21DeleteInstn(a1);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm51_05StartPosResp", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    }
  }
}

BOOL Gnm51_06StopPosResp(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm51_06StopPosResp");
      int v5 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
    }
    else
    {
      int v5 = 1;
    }
  }
  else
  {
    int v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm51_06StopPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      int v5 = 0;
    }
  }
  Gnm51_08SendEarlyStartStopRsp(v5, *(unsigned char *)(*(void *)(a1 + 8) + 5));
  return Gnm02_21DeleteInstn((unsigned __int16 *)a1);
}

uint64_t decode_asn1_message(int a1, uint64_t a2, uint64_t a3, int a4, void *a5, _DWORD *a6)
{
  v15[3] = *MEMORY[0x263EF8340];
  v15[0] = a3;
  v15[1] = a4;
  _OWORD v15[2] = a4;
  uint64_t v14 = 0;
  BaseBufInitBufWithMemory((uint64_t)&v14, 0, (uint64_t)v15);
  uint64_t v9 = v14;
  v15[0] = v14;
  (*(void (**)(uint64_t))(v14 + 920))(v14);
  *(void *)(v9 + 1056) = 2064;
  if (a1 == 1)
  {
    memset_s(a5, 0x528uLL, 0, 0x528uLL);
    uint64_t v10 = (unsigned __int8 *)&yASN1_T_RASN_PDU;
LABEL_5:
    uint64_t v11 = PERDecode((unsigned int *)v9, v10, (int *)a5);
    if (a6)
    {
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 840))(v9, 3);
LABEL_9:
      *a6 = v12;
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  if (!a1)
  {
    memset_s(a5, 0x578uLL, 0, 0x578uLL);
    uint64_t v10 = (unsigned __int8 *)&yASN1_T_LASN_LPP_Message;
    goto LABEL_5;
  }
  uint64_t v11 = 15;
  if (a6)
  {
    int v12 = 0;
    goto LABEL_9;
  }
LABEL_10:
  (*(void (**)(uint64_t))(v9 + 928))(v9);
  (*(void (**)(void *))(v9 + 816))(v15);
  return v11;
}

uint64_t encode_asn1_message(int a1, uint64_t a2, uint64_t *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a6) {
    return 15;
  }
  *a3 = 0;
  if (a5) {
    *a5 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a1 != 1)
  {
    if (!a1)
    {
      unsigned __int16 v16 = 0;
      uint64_t v17 = (unsigned int *)&asn1_encoded_data_small;
      int64x2_t v18 = vdupq_n_s64(0x1000uLL);
      BaseBufInitBufWithMemory((uint64_t)&v16, 0, (uint64_t)&v17);
      uint64_t v10 = v16;
      uint64_t v17 = v16;
      (*((void (**)(unsigned int *))v16 + 113))(v16);
      uint64_t v11 = (unsigned __int8 *)&yASN1_T_LASN_LPP_Message;
      goto LABEL_11;
    }
    return 15;
  }
  unsigned __int16 v16 = 0;
  uint64_t v17 = (unsigned int *)&asn1_encoded_data_small;
  int64x2_t v18 = vdupq_n_s64(0x1000uLL);
  BaseBufInitBufWithMemory((uint64_t)&v16, 0, (uint64_t)&v17);
  uint64_t v10 = v16;
  uint64_t v17 = v16;
  (*((void (**)(unsigned int *))v16 + 113))(v16);
  uint64_t v11 = (unsigned __int8 *)&yASN1_T_RASN_PDU;
LABEL_11:
  uint64_t v12 = PEREncode(v10, v11, a6);
  (*((void (**)(unsigned int *))v10 + 114))(v10);
  if (a5 && !v12)
  {
    (*((void (**)(unsigned int *))v10 + 115))(v10);
    if (a4) {
      *a4 = (*((uint64_t (**)(unsigned int *, uint64_t))v10 + 105))(v10, 1);
    }
    int v13 = (*((uint64_t (**)(unsigned int *, void))v10 + 105))(v10, 0);
    *a5 = v13;
    uint64_t v14 = (*((uint64_t (**)(unsigned int *, void))v10 + 121))(v10, v13);
    if (*a5 && v14) {
      *a3 = v14;
    }
    (*((void (**)(unsigned int *))v10 + 116))(v10);
  }
  (*((void (**)(unsigned int **))v10 + 102))(&v17);
  return v12;
}

BOOL umeas(BOOL result, unsigned int a2, double a3, double *a4, double *a5, double *a6, double *a7, double a8)
{
  v64[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v10 = result - 8;
  uint64_t v11 = a4 - 1;
  unsigned int v12 = a2 + 1;
  unsigned int v63 = ((a2 + 1) * a2) >> 1;
  if (a2)
  {
    int v13 = a6;
    uint64_t v14 = a5;
    uint64_t v17 = (double *)result;
    uint64_t v61 = a2 + 1;
    int v62 = a7;
    int64x2_t v18 = a6 - 1;
    uint64_t v19 = a5 - 1;
    unsigned int v20 = 1;
    while (1)
    {
      v64[0] = 0.0;
      size_t result = R8_EQ(&v11[v20], v64);
      if (!result) {
        break;
      }
      if (++v20 > a2) {
        goto LABEL_18;
      }
    }
    if (!v20)
    {
LABEL_18:
      unsigned int v12 = v61;
      a7 = v62;
      if (v61 <= 2) {
        uint64_t v31 = 2;
      }
      else {
        uint64_t v31 = v61;
      }
      uint64_t v32 = v31 - 1;
      do
      {
        *v13++ = 0.0;
        *v14++ = 0.0;
        --v32;
      }
      while (v32);
      goto LABEL_23;
    }
    if (a2 < 2)
    {
      unsigned int v21 = 0;
    }
    else
    {
      if (v20 <= 2) {
        unsigned int v21 = 2;
      }
      else {
        unsigned int v21 = v20;
      }
      if (v21 <= a2)
      {
        uint64_t v22 = a2;
        unsigned int v23 = v63;
        int v24 = v63 - a2 + 1;
        uint64_t v25 = 1 - a2;
        do
        {
          double v26 = v11[v22];
          unsigned int v27 = v22 - 1;
          if (v22 != 1)
          {
            uint64_t v28 = 0;
            do
            {
              double v26 = v26 + *(double *)(v10 + 8 * (v24 + v28)) * a4[v28];
              uint64_t v29 = (v28++ + 2);
            }
            while (v29 != v22);
          }
          v19[v22] = v26;
          double v30 = *(double *)(v10 + 8 * v23);
          v23 -= v22;
          v18[v22] = v26 * v30;
          v24 += v25++;
          --v22;
        }
        while (v21 <= v27);
      }
    }
    if (v20 == 1)
    {
      double v33 = *a4;
      *uint64_t v14 = *a4;
      *int v13 = v33 * *v17;
      unsigned int v34 = v63;
    }
    else
    {
      uint64_t v35 = v20;
      if (v20 <= 2uLL) {
        uint64_t v35 = 2;
      }
      uint64_t v36 = v35 - 1;
      uint64_t v37 = v14;
      unsigned __int16 v38 = v13;
      unsigned int v34 = v63;
      do
      {
        *v37++ = 0.0;
        *v38++ = 0.0;
        --v36;
      }
      while (v36);
    }
    if (a8 >= 0.0)
    {
      double v39 = 0.0;
      double v40 = a3;
      if (v20 <= a2)
      {
        unsigned int v41 = v20;
        double v40 = a3;
        do
        {
          double v40 = v40 + v19[v41] * v18[v41];
          double v39 = v39 + v11[v41] * *(double *)(v10 + 8 * (v34 + v41));
          ++v41;
        }
        while (v41 <= a2);
      }
      double v42 = v11[v61] - v39;
      *(double *)(v10 + 8 * (v34 + v61)) = v42;
      if (a3 >= 0.0 && v42 * v42 > v40 * a8)
      {
        a3 = -v40;
        a7 = v62;
        goto LABEL_26;
      }
    }
    if (v20 == 1)
    {
      double v43 = a3 + *v13 * *v14;
      if (fabs(v43) <= 6.0e-38) {
        double v44 = 0.0;
      }
      else {
        double v44 = 1.0 / v43;
      }
      *uint64_t v17 = *v17 * (v44 * a3);
      char v45 = v62;
      if (a2 == 1)
      {
LABEL_63:
        *char v45 = v43;
        if (a8 > 0.0)
        {
          double v57 = v44 * *(double *)(v10 + 8 * (v63 + v61));
          v19[v61] = v57;
          uint64_t v58 = v61 - 1;
          unsigned int v59 = v63 + 1;
          do
          {
            double v60 = *v13++;
            *(double *)(v10 + 8 * v59) = *(double *)(v10 + 8 * v59) + v60 * v57;
            ++v59;
            --v58;
          }
          while (v58);
        }
        return result;
      }
      unsigned int v46 = 2;
    }
    else
    {
      unsigned int v46 = (((v20 - 1) * v20) >> 1) + 1;
      double v44 = 0.0;
      double v43 = a3;
      if (fabs(a3) > 6.0e-38) {
        double v44 = 1.0 / a3;
      }
      char v45 = v62;
    }
    if (v21 <= a2)
    {
      do
      {
        double v47 = v43;
        double v48 = v18[v21];
        double v49 = v19[v21];
        uint64_t v50 = v21;
        if (v21 >= 2)
        {
          uint64_t v51 = v21 - 1;
          double v52 = -(v49 * v44);
          uint64_t v53 = v13;
          do
          {
            double v54 = *(double *)(v10 + 8 * v46);
            *(double *)(v10 + 8 * v46) = v54 + v52 * *v53;
            *uint64_t v53 = *v53 + v48 * v54;
            ++v53;
            ++v46;
            --v51;
          }
          while (v51);
          double v49 = v19[v50];
        }
        double v43 = v43 + v48 * v49;
        if (fabs(v43) > 6.0e-38)
        {
          double v44 = 1.0 / v43;
          *(double *)(v10 + 8 * v46) = v47 * (1.0 / v43) * *(double *)(v10 + 8 * v46);
        }
        v64[0] = 0.0;
        size_t result = R8_EQ((const double *)(v10 + 8 * v46), v64);
        if (v50 && result)
        {
          unsigned int v55 = v46;
          uint64_t v56 = v50;
          do
          {
            *(void *)(v10 + 8 * v55--) = 0;
            --v56;
          }
          while (v56);
        }
        ++v46;
        unsigned int v21 = v50 + 1;
      }
      while ((int)v50 + 1 <= a2);
    }
    goto LABEL_63;
  }
LABEL_23:
  if (fabs(a3) > 6.0e-38 && a8 >= 0.0) {
    *(double *)(v10 + 8 * (v63 + v12)) = v11[v12] / a3;
  }
LABEL_26:
  *a7 = a3;
  return result;
}

uint64_t GN_AGPS_Qual_Pos(_DWORD *a1, unsigned __int8 *a2)
{
  if (a1)
  {
    int v3 = *(_DWORD *)(*(void *)(p_api + 88) + 36);
    if (*a1) {
      BOOL v4 = *a1 == v3;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return 0;
    }
    *a1 = v3;
  }
  if (!a2)
  {
    EvCrt_v("GN_AGPS_Qual_Pos: Implementation error - the p_GAD_QoP structure is NULL which is not valid");
    return 0;
  }
  if (!*a2)
  {
    if (*((_DWORD *)a2 + 1))
    {
      unint64_t v5 = 0xFFFFFFFFLL;
      goto LABEL_20;
    }
LABEL_15:
    unsigned int v7 = (((pow(1.1, (double)*a2) + -1.0) * 10.0 + 0.5) * 0.671591672);
    if (v7 <= 4) {
      unsigned int v7 = 4;
    }
    if (v7 >= 0x21) {
      unint64_t v5 = 33;
    }
    else {
      unint64_t v5 = v7;
    }
    goto LABEL_20;
  }
  if (((char)*a2 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  unint64_t v5 = 33;
LABEL_20:
  unsigned int v8 = 100;
  if (((char)a2[1] & 0x80000000) == 0)
  {
    unsigned int v9 = (((pow(1.025, (double)a2[1]) + -1.0) * 45.0 + 0.5) * 1.02669405);
    if (v9 <= 8) {
      unsigned int v9 = 8;
    }
    if (v9 >= 0x64) {
      unsigned int v8 = 100;
    }
    else {
      unsigned int v8 = v9;
    }
  }
  uint64_t v10 = *((unsigned int *)a2 + 1);

  return API_Qual_Pos("GN_AGPS", 1, v5, v8, v10);
}

uint64_t Get_GPS_secs(unsigned int a1)
{
  uint64_t v1 = *(void *)(p_api + 48);
  if (!*(unsigned char *)(v1 + 5) || *(int *)v1 < 3) {
    return 0;
  }
  uint64_t result = ((int)*(double *)(v1 + 24) + 604800 * *(__int16 *)(v1 + 16));
  if (result && a1)
  {
    uint64_t v4 = 604800 * ((a1 >> 19) & 0x3FF) + ((3 * (a1 & 0x7FFFF)) >> 1);
    if ((int)result - (int)v4 < 1) {
      return v4;
    }
    else {
      return (v4 + 604800 * (((int)result - (int)v4 + 302400) / 604800));
    }
  }
  return result;
}

uint64_t GN_AGPS_Set_Eph_El(unsigned __int8 *a1)
{
  v23[15] = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Eph_El")) {
    return 0;
  }
  uint64_t v2 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v2 + 5) && *(int *)v2 >= 3) {
    int v3 = (int)*(double *)(v2 + 24) + 604800 * *(__int16 *)(v2 + 16);
  }
  else {
    int v3 = 0;
  }
  __int16 v16 = *((_WORD *)a1 + 17);
  if (a1[68]) {
    int v4 = 5;
  }
  else {
    int v4 = 3;
  }
  uint64_t v13 = *(void *)(a1 + 1);
  long long v14 = *(_OWORD *)(a1 + 10);
  uint64_t v15 = *(void *)(a1 + 26);
  long long v17 = *(_OWORD *)(a1 + 36);
  long long v18 = *(_OWORD *)(a1 + 52);
  v12[0] = v3;
  v12[1] = v4;
  if ((unsigned __int16)g_Enable_Event_Log >= 5u) {
    EvLog_GPS_IntEph("GN_AGPS_Set_Eph_El: ", *a1, (uint64_t)v12);
  }
  uint64_t v5 = *a1;
  if (!Is_GPS_IntEph_Valid((uint64_t)"GN_AGPS_Set_Eph_El: ", v5, (uint64_t)v12)) {
    return 0;
  }
  memset(v23, 0, 108);
  GPS_EphInt2Bin((uint64_t)v12, (uint64_t)v23);
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v22, 0, sizeof(v22));
  uint64_t v19 = v23[0];
  LOBYTE(v20) = v23[1];
  *(_WORD *)((char *)&v20 + 1) = *(_WORD *)((char *)&v23[1] + 1);
  unsigned int v6 = 21;
  uint64_t v7 = 11;
  uint64_t v8 = 24;
  do
  {
    unsigned int v9 = (char *)&v19 + v7;
    *unsigned int v9 = *((unsigned char *)v23 + v8);
    *(_WORD *)(v9 + 1) = *(_WORD *)((char *)v23 + v8 + 1);
    --v6;
    v7 += 3;
    v8 += 4;
  }
  while (v6 > 1);
  uint64_t v10 = API_Set_GPS_CBinEph("GN_AGPS_Set_Eph_El: ", v5, (unsigned int *)&v19);
  if (v10) {
    Debug_Log_GPS_Eph(1, v5, (uint64_t)&v19);
  }
  return v10;
}

uint64_t GN_AGPS_Set_Alm(uint64_t a1, uint64_t a2)
{
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm");
  if (!result) {
    return result;
  }
  if (((a1 - 1) & 0xE0) != 0) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = a1 - 1;
  }
  if ((a1 + 63) >= 0xAu) {
    int v6 = (a1 - 1) < 0x20;
  }
  else {
    int v6 = 5;
  }
  if ((a1 + 63) >= 0xAu) {
    unsigned __int8 v7 = v5;
  }
  else {
    unsigned __int8 v7 = a1 + 63;
  }
  if (!v6)
  {
    EvCrt_v("GN_AGPS_Set_Alm:  FAILED:  SV = %d, Out of range !", a1);
    return 0;
  }
  if (v6 != 1)
  {
    uint64_t v8 = p_NA;
    uint64_t v9 = v7;
LABEL_31:
    uint64_t v22 = v8 + 36 * v9;
    long long v23 = *(_OWORD *)(a2 + 6);
    *(void *)(v22 + 5050) = *(void *)(a2 + 22);
    *(_OWORD *)(v22 + 5034) = v23;
    *(_DWORD *)(v22 + 5024) = Get_GPS_secs(*(_DWORD *)a2);
    *(_WORD *)(v22 + 5032) = *(_WORD *)(a2 + 4);
    if (*(unsigned char *)(a2 + 30)) {
      int v24 = 5;
    }
    else {
      int v24 = 3;
    }
    *(_DWORD *)(v22 + 5028) = v24;
    Debug_Log_GPS_Alm(1, a1, v22 + 5024);
    if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
      EvLog_nd("GN_AGPS_Set_Alm: ", 2, v25, a1, *(unsigned int *)(p_NA + 36 * v9 + 5024));
    }
    unsigned int v26 = *(unsigned __int16 *)(a2 + 4);
    if (v26 <= 0x3FF)
    {
      if (v26 < 0x100)
      {
        unsigned int v27 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
        uint64_t v28 = *(void *)(p_api + 48);
        if (*(unsigned char *)(v28 + 5)
          && *(int *)v28 >= 3
          && (int v29 = (int)*(double *)(v28 + 24) + 604800 * *(__int16 *)(v28 + 16), v29 > 619315199))
        {
          unsigned int v30 = v29 / 0x93A80u;
        }
        else
        {
          unsigned int v30 = v27 + 128;
        }
        __int16 v31 = (v27 + (v27 >> 23)) & 0xFF00;
        signed int v32 = v26 + v31;
        signed int v33 = v30 - 128;
        if (v32 > v33) {
          LOWORD(v33) = v26 + v31;
        }
        LOWORD(v26) = v31 + v26 + ((v33 - v32 + 255) & 0xFF00);
      }
      else
      {
        LOWORD(v26) = Complete_WeekNo(v26);
      }
    }
    uint64_t v34 = p_NA;
    *(_WORD *)(p_NA + 36 * v9 + 5032) = v26;
    uint64_t result = 1;
    *(unsigned char *)(v34 + v9 + 89) = 1;
    return result;
  }
  uint64_t v9 = v7;
  uint64_t v10 = p_NA + 36 * v7;
  uint64_t v11 = *(void *)(a2 + 22);
  *(_OWORD *)(v10 + 3162) = *(_OWORD *)(a2 + 6);
  *(void *)(v10 + 3178) = v11;
  *(_DWORD *)(v10 + 3152) = Get_GPS_secs(*(_DWORD *)a2);
  *(_WORD *)(v10 + 3160) = *(_WORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 30)) {
    int v12 = 5;
  }
  else {
    int v12 = 3;
  }
  *(_DWORD *)(v10 + 3156) = v12;
  Debug_Log_GPS_Alm(1, a1, v10 + 3152);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_AGPS_Set_Alm: ", 2, v13, a1, *(unsigned int *)(p_NA + 36 * v9 + 3152));
  }
  unsigned int v14 = *(unsigned __int16 *)(a2 + 4);
  if (v14 <= 0x3FF)
  {
    if (v14 < 0x100)
    {
      unsigned int v15 = *(__int16 *)(*(void *)(p_api + 72) + 1026);
      uint64_t v16 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v16 + 5)
        && *(int *)v16 >= 3
        && (int v17 = (int)*(double *)(v16 + 24) + 604800 * *(__int16 *)(v16 + 16), v17 > 619315199))
      {
        unsigned int v18 = v17 / 0x93A80u;
      }
      else
      {
        unsigned int v18 = v15 + 128;
      }
      __int16 v19 = (v15 + (v15 >> 23)) & 0xFF00;
      signed int v20 = v14 + v19;
      signed int v21 = v18 - 128;
      if (v20 > v21) {
        LOWORD(v21) = v14 + v19;
      }
      LOWORD(v14) = v19 + v14 + ((v21 - v20 + 255) & 0xFF00);
    }
    else
    {
      LOWORD(v14) = Complete_WeekNo(v14);
    }
  }
  uint64_t v8 = p_NA;
  *(_WORD *)(p_NA + 36 * v9 + 3160) = v14;
  uint64_t result = 1;
  *(unsigned char *)(v8 + v9 + 47) = 1;
  if ((a1 + 63) <= 9u) {
    goto LABEL_31;
  }
  return result;
}

uint64_t Complete_WeekNo(unsigned int a1)
{
  if (a1 > 0x3FF)
  {
    unsigned __int16 v5 = a1;
  }
  else
  {
    uint64_t v1 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v1 + 5)
      && *(int *)v1 >= 3
      && (int v2 = (int)*(double *)(v1 + 24) + 604800 * *(__int16 *)(v1 + 16), v2 > 619315199))
    {
      unsigned int v3 = v2 / 0x93A80u;
    }
    else
    {
      unsigned int v3 = *(__int16 *)(*(void *)(p_api + 72) + 1026) + 512;
    }
    int v4 = v3 - 512;
    do
    {
      unsigned __int16 v5 = a1;
      a1 += 1024;
    }
    while (v4 > v5);
  }
  return (__int16)v5;
}

uint64_t GN_AGPS_Set_Ion(unsigned int *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Ion")) {
    return 0;
  }
  uint64_t v3 = *((char *)a1 + 4);
  uint64_t v4 = *((char *)a1 + 5);
  char v5 = *((unsigned char *)a1 + 6);
  if (!(v3 | v4))
  {
    if (!*((unsigned char *)a1 + 6))
    {
      if (!*((unsigned char *)a1 + 7)
        && !*((unsigned char *)a1 + 8)
        && !*((unsigned char *)a1 + 9)
        && !*((unsigned char *)a1 + 10)
        && !*((unsigned char *)a1 + 11))
      {
        uint64_t v9 = "GN_AGPS_Set_Ion: Rejected: ALL ZERO";
        goto LABEL_14;
      }
      char v5 = 0;
    }
    uint64_t v4 = 0;
  }
  EvLog_nd("GN_AGPS_Set_Ion: ", 10, v2, *a1, v3, v4, v5, *((char *)a1 + 7), *((char *)a1 + 8), *((char *)a1 + 9), *((char *)a1 + 10), *((char *)a1 + 11), *((unsigned __int8 *)a1 + 12));
  int GPS_secs = Get_GPS_secs(*a1);
  uint64_t v7 = p_NA;
  *(_DWORD *)(p_NA + 808) = GPS_secs;
  *(void *)(v7 + 816) = *(void *)(a1 + 1);
  if (!*((unsigned char *)a1 + 12))
  {
    uint64_t v9 = "GN_AGPS_Set_Ion: Rejected: Assisted source not allowed";
LABEL_14:
    EvLog(v9);
    return 0;
  }
  *(_DWORD *)(v7 + 812) = 5;
  uint64_t v8 = 1;
  Debug_Log_GPS_Klob(1, v7 + 808);
  *(unsigned char *)(p_NA + 13) = 1;
  return v8;
}

uint64_t GN_AGPS_Set_UTC(unsigned int *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_UTC")) {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a1 + 12);
  if (v3 < 0x94)
  {
    uint64_t v4 = *((char *)a1 + 14);
    if (v4 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLS = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    uint64_t v5 = *((unsigned __int8 *)a1 + 16);
    if (v5 >= 8)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: DN = %d >7, Out of range!");
      return 0;
    }
    uint64_t v6 = *((char *)a1 + 17);
    if (v6 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLSF = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    if ((int)v6 - (int)v4 >= 0) {
      unsigned int v7 = v6 - v4;
    }
    else {
      unsigned int v7 = v4 - v6;
    }
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: (dtLSF-dtLS) = %d <-1 or >+1, Unrealistic difference!");
      return 0;
    }
    if (v6 != v4)
    {
      uint64_t v8 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v8 + 5) && *(int *)v8 >= 3)
      {
        uint64_t v9 = 1861606989 * ((int)*(double *)(v8 + 24) + 604800 * *(__int16 *)(v8 + 16));
        int v10 = (v9 >> 50) + ((unint64_t)v9 >> 63);
      }
      else
      {
        int v10 = 0;
      }
      if (Is_Future_Leap_Sec_Date_Not_Valid(v10, 1, *((unsigned __int8 *)a1 + 15), *((unsigned char *)a1 + 16)))
      {
        EvCrt_v("GN_AGPS_Set_UTC: FAILED: Invalid UTC Future Leap Second date %d  %d %d %d");
        return 0;
      }
    }
    uint64_t v13 = a1[2];
    if (!*(void *)(a1 + 1))
    {
      if (!((v4 | v3) | v6)
        && !*((unsigned char *)a1 + 13)
        && !(*((unsigned __int8 *)a1 + 15) | v5))
      {
        uint64_t v16 = "GN_AGPS_Set_UTC: Rejected: ALL ZERO";
LABEL_32:
        EvLog(v16);
        return 0;
      }
      uint64_t v13 = 0;
    }
    EvLog_nd("GN_AGPS_Set_UTC: ", 10, v2, *a1, a1[1], v13, v3, *((unsigned __int8 *)a1 + 13), v4, *((unsigned __int8 *)a1 + 15), v5, v6, *((unsigned __int8 *)a1 + 18));
    int GPS_secs = Get_GPS_secs(*a1);
    uint64_t v15 = p_NA;
    *(_DWORD *)(p_NA + 824) = GPS_secs;
    *(void *)(v15 + 832) = *(void *)(a1 + 1);
    *(_DWORD *)(v15 + 840) = a1[3];
    *(_WORD *)(v15 + 844) = *((_WORD *)a1 + 8);
    if (*((unsigned char *)a1 + 18))
    {
      *(_DWORD *)(v15 + 828) = 5;
      uint64_t v11 = 1;
      Debug_Log_GPS_UTC(1, v15 + 824);
      *(unsigned char *)(p_NA + 14) = 1;
      return v11;
    }
    uint64_t v16 = "GN_AGPS_Set_UTC: Rejected: Assisted source not allowed";
    goto LABEL_32;
  }
  EvCrt_v("GN_AGPS_Set_UTC: FAILED: Tot = %d >=148, >604800s, Out of range!");
  return 0;
}

BOOL GN_AGPS_Get_UTC(uint64_t a1)
{
  uint64_t v1 = *(void *)(p_api + 56);
  int v2 = *(_DWORD *)(v1 + 8444);
  if (v2)
  {
    int v3 = *(_DWORD *)(v1 + 8440);
    __int16 v4 = *(_WORD *)(v1 + 8460);
    uint64_t v5 = *(void *)(v1 + 8448);
    int v6 = *(_DWORD *)(v1 + 8456);
    *(_DWORD *)a1 = (2 * (v3 % 604800) / 3) | ((v3 / 604800) << 19);
    *(void *)(a1 + 4) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = v2 == 5;
  }
  return v2 != 0;
}

uint64_t GN_AGPS_Set_Ref_Time(uint64_t a1)
{
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Time");
  if (result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Time:  %u  %u  %d  %d", *(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(unsigned __int16 *)(a1 + 8), *(unsigned __int16 *)(a1 + 10));
    int v3 = *(_DWORD *)a1;
    uint64_t v4 = p_NA;
    *(_DWORD *)(p_NA + 412) = *(_DWORD *)a1;
    int v5 = Complete_WeekNo(*(unsigned __int16 *)(a1 + 8));
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    *(_WORD *)(v4 + 424) = v5;
    *(double *)(v4 + 416) = (double)v6 * 0.001;
    unsigned int v7 = *(unsigned __int16 *)(a1 + 10);
    *(double *)(v4 + 432) = (double)v7 * 0.001;
    *(unsigned char *)(v4 + 2) = 1;
    if (v3)
    {
      if (v6 <= 0x240C83FF)
      {
        if (v5 > 1023)
        {
          if (v7)
          {
            if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v3) < 180001)
            {
              API_Set_Ref_Time(*(_DWORD *)(p_NA + 412), *(double *)(p_NA + 416), *(_WORD *)(p_NA + 424), *(double *)(p_NA + 432));
              Debug_Log_AGPS_Ref_Time(a1);
              return 1;
            }
            *(unsigned char *)(p_NA + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u, too old by %d ms");
          }
          else
          {
            *(unsigned char *)(v4 + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: RMS_ms = %d ==0, Out of range!");
          }
        }
        else
        {
          *(unsigned char *)(v4 + 2) = 0;
          EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: WeekNo = %d <1024, Out of range!");
        }
      }
      else
      {
        *(unsigned char *)(v4 + 2) = 0;
        EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: TOW_ms = %d >%d, Out of range!");
      }
    }
    else
    {
      *(unsigned char *)(v4 + 2) = 0;
      EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u ==0, Out of range!");
    }
    return 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_EFSP_Time(uint64_t a1)
{
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_EFSP_Time");
  if (!result) {
    return result;
  }
  EvLog_v("GN_AGPS_Set_EFSP_Time:  %g  %d  %d  %d  %u  %d", *(double *)a1, *(unsigned __int16 *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 20);
  if (!v3)
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  OS_Time_ms = %u  ==0, Out of range !");
    return 0;
  }
  if (!*(_DWORD *)(a1 + 12))
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  Abs_RMS_us = %d  ==0, Out of range !");
    return 0;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  Rel_RMS_ns = %d  ==0, Out of range !");
    return 0;
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 < 0.0 || v4 >= 604800.0)
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  TOW = %g  <0.0 or >=604800.0, Out of range !");
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = p_NA;
  *(unsigned char *)(p_NA + 7) = v5;
  if (v5)
  {
    *(unsigned char *)(v6 + 6) = *(unsigned char *)(v6 + 5);
    *(_DWORD *)(v6 + 556) = *(_DWORD *)(v6 + 552);
    *(void *)(v6 + 504) = *(void *)(v6 + 496);
    *(_WORD *)(v6 + 514) = *(_WORD *)(v6 + 512);
    *(void *)(v6 + 528) = *(void *)(v6 + 520);
    *(void *)(v6 + 544) = *(void *)(v6 + 536);
    int v3 = *(_DWORD *)(a1 + 20);
    double v4 = *(double *)a1;
  }
  *(_DWORD *)(v6 + 552) = v3;
  *(double *)(v6 + 496) = v4;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  if (v7 <= 0x3FF)
  {
    EvLog_v("GN_AGPS_Set_EFSP_Time:  WARNING:  WeekNo = %d  <1024", *(unsigned __int16 *)(a1 + 8));
    unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
    uint64_t v6 = p_NA;
  }
  int v8 = Complete_WeekNo(v7);
  *(_WORD *)(v6 + 512) = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  double v10 = (double)v9 * 0.000001;
  if (v9 == -1) {
    double v10 = 0.0;
  }
  *(double *)(v6 + 520) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  double v12 = (double)v11 * 0.000000001;
  if (v11 == -1) {
    double v12 = 0.0;
  }
  *(double *)(v6 + 536) = v12;
  *(unsigned char *)(v6 + 5) = 1;
  if (v8 > 1023)
  {
    uint64_t v13 = *(void *)(p_api + 48);
    if (!*(unsigned char *)(v13 + 5) || *(int *)v13 < 3 || !(604800 * *(__int16 *)(v13 + 16) + (int)*(double *)(v13 + 24)))
    {
      API_Set_Ref_Time(*(_DWORD *)(v6 + 552), *(double *)(v6 + 496), v8, 0.9);
      uint64_t v14 = p_NA;
      *(_DWORD *)(p_NA + 412) = *(_DWORD *)(p_NA + 552);
      *(_WORD *)(v14 + 424) = *(_WORD *)(v14 + 512);
      *(void *)(v14 + 416) = *(void *)(v14 + 496);
      *(void *)(v14 + 432) = 0x3FECCCCCCCCCCCCDLL;
      *(unsigned char *)(v14 + 2) = 1;
    }
    Debug_Log_AGPS_EFSP_Time(a1);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(v6 + 5) = 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_TOW_Assist(unsigned int *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_TOW_Assist")) {
    return 0;
  }
  EvLog_nd("GN_AGPS_Set_TOW_Assist: ", 2, v2, *a1, *((unsigned __int8 *)a1 + 4));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *((unsigned char *)a1 + 4))
  {
    unint64_t v4 = 0;
    int v5 = (unsigned __int8 *)a1 + 11;
    do
    {
      uint64_t v6 = *(v5 - 5);
      uint64_t v7 = *(v5 - 4);
      uint64_t v8 = *(unsigned __int16 *)(v5 - 3);
      uint64_t v9 = *(v5 - 1);
      unsigned int v10 = *v5;
      v5 += 6;
      EvLog_nd("GN_AGPS_TOW_Assist: ", 6, v3, v4++, v6, v7, v8, v9, v10);
    }
    while (v4 < *((unsigned __int8 *)a1 + 4));
  }
  if (*a1 >= 0x240C8400)
  {
    EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TOW_ms = %d >=604800000, Out of range!");
    return 0;
  }
  uint64_t v11 = *((unsigned __int8 *)a1 + 4);
  if (!*((unsigned char *)a1 + 4) || v11 >= 0x19 && v11 != 32)
  {
    EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Num_TOWA = %d ==0 or >24, Out of range!");
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (unsigned __int8 *)a1 + 11;
  do
  {
    if (*(v15 - 5) - 33 <= 0xFFFFFFDF)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: SatID[%d] = %d ==0 or >32, Out of range!");
      return 0;
    }
    if (*(v15 - 4) >= 4u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TLM_Reserved[%d] = %d >3, Out of range!");
      return 0;
    }
    if (*(unsigned __int16 *)(v15 - 3) >= 0x4000u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TLM_Word[%d] = %d >16383, Out of range!");
      return 0;
    }
    if (*(v15 - 1) >= 2u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Anti_Spoof_flag[%d] = %d >1, Out of range!");
      return 0;
    }
    if (*v15 >= 2u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Alert_flag[%d] = %d >1, Out of range!");
      return 0;
    }
    v15 += 6;
    ++v14;
  }
  while (v11 != v14);
  uint64_t v16 = p_NA;
  *(_DWORD *)(p_NA + 19020) = *a1;
  *(_OWORD *)(v16 + 19024) = 0u;
  *(_OWORD *)(v16 + 19040) = 0u;
  *(_OWORD *)(v16 + 19056) = 0u;
  *(_OWORD *)(v16 + 19072) = 0u;
  *(_OWORD *)(v16 + 19088) = 0u;
  *(_OWORD *)(v16 + 19104) = 0u;
  *(_OWORD *)(v16 + 19120) = 0u;
  *(_OWORD *)(v16 + 19136) = 0u;
  uint64_t v17 = *((unsigned __int8 *)a1 + 4);
  if (*((unsigned char *)a1 + 4))
  {
    unsigned int v18 = (unsigned __int8 *)a1 + 11;
    do
    {
      *(_DWORD *)(v16 + 4 * *(v18 - 5) + 19020) = DW_Parity_Encode((*(unsigned __int16 *)(v18 - 3) << 8) | (*(v18 - 4) << 6) | 0x22C00000u, 0) & 0x3FFFFF | (*v18 << 23) | (*(v18 - 1) << 22);
      v18 += 6;
      --v17;
    }
    while (v17);
  }
  uint64_t v12 = 1;
  *(unsigned char *)(v16 + 298) = 1;
  Debug_Log_AGPS_TOW_Assist((uint64_t)a1);
  return v12;
}

uint64_t GN_AGPS_Set_Ref_Pos(uint64_t a1)
{
  v53[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Pos");
  if (!result) {
    return result;
  }
  EvLog_v("GN_AGPS_Set_Ref_Pos: %u LL %g %g Sigma %d %d %d Ht %d %g %d C %d  S %d 0x%X", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), (int)*(double *)(a1 + 24), (int)*(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), (int)*(double *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(void *)(a1 + 72));
  double v3 = *(double *)(a1 + 8);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  double v4 = *(double *)(a1 + 16);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  v53[0] = 0.0;
  if (R8_EQ((const double *)(a1 + 24), v53))
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMadouble j = %g ==0, Out of range!");
    return 0;
  }
  v53[0] = 0.0;
  if (R8_EQ((const double *)(a1 + 32), v53))
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMiint n = %g ==0, Out of range!");
    return 0;
  }
  if ((unsigned __int16)(*(_WORD *)(a1 + 40) - 361) <= 0xFDE2u)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMajBrg = %d <-180 or >+360, Out of range!");
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 42);
  if (*(unsigned char *)(a1 + 42))
  {
    double v6 = *(double *)(a1 + 48);
    if (v6 < -500.0 || v6 > 6000.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Height = %g <%d or >%d, Out of range!");
      return 0;
    }
    if (*(double *)(a1 + 56) <= 0.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_Height = %g <=0, Invalid value!");
      return 0;
    }
  }
  unsigned int v7 = *(_DWORD *)(a1 + 64);
  if (v7 >= 5)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Trust = %d <GN_AGPS_TRUST_UNKNOWN or >GN_AGPS_TRUST_HIGH, Out of range!");
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 68);
  if (v8 >= 9)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Source = %d <GN_AGPS_SRC_UNKNOWN or >GN_AGPS_SRC_EXT, Out of range!");
    return 0;
  }
  double v9 = v3 * 0.0174532925;
  double v10 = v4 * 0.0174532925;
  double v11 = *(double *)(a1 + 24);
  double v12 = v11 * v11;
  uint64_t v13 = p_NA;
  LODWORD(v14) = *(_DWORD *)a1;
  if (!*(unsigned char *)(p_NA + 10)) {
    goto LABEL_50;
  }
  long double v15 = *(double *)(p_NA + 616);
  long double v16 = (v9 - v15) * 6378137.0;
  double v17 = (v10 - *(double *)(p_NA + 624)) * 6378137.0;
  long double v18 = cos(v15);
  double v19 = v18 * v17 * (v18 * v17) + v16 * v16;
  int v20 = v14 - *(_DWORD *)(v13 + 608);
  double v21 = *(double *)(v13 + 664);
  double v22 = v21 + (double)v20 * 0.015 * ((double)v20 * 0.015);
  double v23 = (v12 + v22) * 9.0;
  if (v7 <= 2)
  {
    signed int v24 = *(_DWORD *)(v13 + 700);
    if ((int)v7 < v24)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Trust %d worse than existing, %d dAge %d dPos %f Sig %f %f %f", v7, v24, v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
      BOOL v25 = v19 < 160000.0 && v19 < v23;
      if (!v25 || *(int *)(a1 + 64) <= 1 || !*(unsigned char *)(a1 + 42)) {
        goto LABEL_64;
      }
      goto LABEL_41;
    }
  }
  if (v12 <= v22)
  {
LABEL_50:
    *(unsigned char *)(v13 + 10) = 1;
    if (!v14)
    {
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v13 = p_NA;
    }
    *(_DWORD *)(v13 + 608) = v14;
    *(double *)(v13 + 616) = v9;
    *(double *)(v13 + 624) = v10;
    *(double *)(v13 + 640) = v12;
    double v37 = *(double *)(a1 + 32) * *(double *)(a1 + 32);
    *(double *)(v13 + 648) = v37;
    double v38 = (double)*(__int16 *)(a1 + 40) * 0.0174532925;
    *(double *)(v13 + 656) = v38;
    *(double *)(v13 + 664) = v12;
    *(double *)(v13 + 672) = v37;
    *(double *)(v13 + 680) = v38;
    if (*(unsigned char *)(a1 + 42))
    {
      *(unsigned char *)(v13 + 11) = 1;
      *(void *)(v13 + 632) = *(void *)(a1 + 48);
      *(double *)(v13 + 688) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
    }
    int v39 = *(_DWORD *)(a1 + 64);
    if (!**((_DWORD **)&xmmword_26AE66C28 + 1))
    {
      unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v41 = v40 - *(_DWORD *)a1;
      uint64_t v13 = p_NA;
      *(_DWORD *)(p_NA + 608) = v40;
      *(float64x2_t *)(v13 + 640) = vaddq_f64(*(float64x2_t *)(v13 + 640), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41 * 0.015 * ((double)v41 * 0.015)), 0));
      *(double *)(v13 + 688) = (double)v41 * 0.0005 * ((double)v41 * 0.0005) + *(double *)(v13 + 688);
      unsigned int v42 = v41 >= 0 ? v41 : -v41;
      if (v42 >= 0x249F1 && v39 >= 2)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: Very old Reference Position demoted to Very Low Trust, Age_ms %d", v41);
        uint64_t v13 = p_NA;
        int v39 = 1;
      }
    }
    *(_DWORD *)(v13 + 696) = v39;
    *(_DWORD *)(v13 + 700) = v39;
    int v43 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(v13 + 704) = v43;
    *(void *)(v13 + 712) = *(void *)(a1 + 72);
    if (v43 == 7) {
      *(unsigned char *)(v13 + 720) = 0;
    }
    else {
      *(unsigned char *)(v13 + 720) = 2;
    }
    goto LABEL_64;
  }
  if (v19 >= v23)
  {
    if ((v8 == 4 || v8 == 2) && *(_DWORD *)(v13 + 704) == 7)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: E911 Ref Pos replacing inconsistent OS Ref Pos, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
      uint64_t v13 = p_NA;
      LODWORD(v14) = *(_DWORD *)a1;
    }
    goto LABEL_50;
  }
  EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Worse but consistent, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
  if (!v5 || v19 >= 160000.0) {
    goto LABEL_64;
  }
LABEL_41:
  if (!*(unsigned char *)(p_NA + 11)) {
    goto LABEL_73;
  }
  int v26 = *(_DWORD *)(a1 + 68);
  if (v26 != 7) {
    goto LABEL_65;
  }
  int v27 = *(_DWORD *)a1 - *(_DWORD *)(p_NA + 608);
  double v28 = *(double *)(p_NA + 688);
  double v29 = v28 + (double)v27 * 0.0005 * ((double)v27 * 0.0005);
  double v30 = *(double *)(a1 + 56);
  if (v30 * v30 <= v29) {
    goto LABEL_72;
  }
  double v31 = *(double *)(a1 + 48) - *(double *)(p_NA + 632);
  double v32 = v31 * v31;
  double v33 = (v30 * v30 + v29) * 9.0;
  double v34 = sqrt(v32);
  double v35 = sqrt(v28);
  double v36 = sqrt(v29);
  if (v32 >= v33)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing inconsistent Prev Altitude, dAge %d dAlt %f Sig %f %f %f", v27, v34, v30, v35, v36);
    if (*(unsigned char *)(p_NA + 11))
    {
LABEL_72:
      EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previous one, PrevAlt %f Sig %f CurrentAlt %f Sig %f");
LABEL_74:
      uint64_t v52 = p_NA;
      *(unsigned char *)(p_NA + 11) = 1;
      *(void *)(v52 + 632) = *(void *)(a1 + 48);
      *(double *)(v52 + 688) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
      goto LABEL_64;
    }
LABEL_73:
    EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previously missing one, CurrentAlt %f Sig %f");
    goto LABEL_74;
  }
  EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude Ignored: Worse but consistent, dAge %d dAlt %f Sig %f %f %f", v27, v34, v30, v35, v36);
LABEL_64:
  int v26 = *(_DWORD *)(a1 + 68);
LABEL_65:
  if (v26 == 4 || v26 == 2)
  {
    uint64_t v44 = p_NA;
    *(_OWORD *)(p_NA + 728) = *(_OWORD *)a1;
    long long v45 = *(_OWORD *)(a1 + 16);
    long long v46 = *(_OWORD *)(a1 + 32);
    long long v47 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v44 + 776) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v44 + 792) = v47;
    *(_OWORD *)(v44 + 744) = v45;
    *(_OWORD *)(v44 + 760) = v46;
    *(unsigned char *)(v44 + 12) = 1;
    int v26 = *(_DWORD *)(a1 + 68);
  }
  if (v26 == 7)
  {
    uint64_t v48 = p_NA;
    *(unsigned char *)(p_NA + 372) = *(unsigned char *)(p_NA + 371);
    *(_DWORD *)(v48 + 368) = *(_DWORD *)(v48 + 367);
    memmove((void *)(v48 + 21080), (const void *)(v48 + 21000), 0x190uLL);
    *(unsigned char *)(v48 + 367) = 1;
    ++*(_WORD *)(v48 + 376);
    *(_OWORD *)(v48 + 21000) = *(_OWORD *)a1;
    long long v49 = *(_OWORD *)(a1 + 64);
    long long v51 = *(_OWORD *)(a1 + 16);
    long long v50 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v48 + 21048) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v48 + 21064) = v49;
    *(_OWORD *)(v48 + 21016) = v51;
    *(_OWORD *)(v48 + 21032) = v50;
  }
  Debug_Log_AGPS_Ref_Pos(a1);
  return 1;
}

uint64_t GN_AGPS_Set_GAD_Ref_Pos(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_GAD_Ref_Pos");
  if (!result) {
    return result;
  }
  EvLog_nd("GN_AGPS_Set_GAD_Ref_Pos: ", 19, *((unsigned __int8 *)a1 + 31), *a1, *((unsigned __int8 *)a1 + 4), a1[2], a1[3], *((char *)a1 + 16), *((unsigned __int16 *)a1 + 9), *((unsigned __int8 *)a1 + 20), *((unsigned __int8 *)a1 + 21), *((unsigned __int8 *)a1 + 22), *((unsigned __int8 *)a1 + 23), *((unsigned __int8 *)a1 + 24), *((char *)a1 + 25), *((__int16 *)a1 + 13), *((__int16 *)a1 + 14), *((char *)a1 + 30), *((unsigned __int8 *)a1 + 31),
    *((unsigned __int8 *)a1 + 32),
    a2,
    a3);
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  LODWORD(v7) = *a1;
  if (!*a1) {
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  LODWORD(v33[0]) = v7;
  if (!*((unsigned char *)a1 + 20))
  {
    *((unsigned char *)a1 + 20) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: suncertaintySemiMajor = 0, Treated as not set!");
  }
  if (!*((unsigned char *)a1 + 21))
  {
    *((unsigned char *)a1 + 21) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: suncertaintySemiMinor = 0, Treated as not set!");
  }
  if (!*((unsigned char *)a1 + 24) || (*((unsigned char *)a1 + 24) + 1) >= 0x66u)
  {
    *((unsigned char *)a1 + 24) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: confidence = 0 or > 100, Treated as not set!");
  }
  if (!*((unsigned char *)a1 + 23))
  {
    *((unsigned char *)a1 + 23) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: uncertaintyAltitude = 0, Treated as not set!");
    if (!*((_WORD *)a1 + 9))
    {
      *((unsigned char *)a1 + 16) = -1;
      EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: altitude = 0 when uncertaintyAltitude = 0, Treated as not set!");
    }
  }
  unsigned int v8 = *((unsigned __int8 *)a1 + 20);
  unsigned int v9 = *((unsigned __int8 *)a1 + 21);
  if (v8 < v9)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: semi-major < semi-minor %d %d");
    return 0;
  }
  unsigned int v10 = a1[2];
  if (v10 >= 0x800000)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: latitude = %d >8388607, Out of range!");
    return 0;
  }
  double v11 = (double)v10 * 0.0000107288373;
  *((double *)v33 + 1) = v11;
  unsigned int v12 = *((unsigned __int8 *)a1 + 4);
  if (v12 >= 2)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: latitudeSigint n = %d >1, Out of range!");
    return 0;
  }
  if (v12 == 1) {
    *((double *)v33 + 1) = -v11;
  }
  int v13 = a1[3];
  if ((v13 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: longitude = %d <-8388608 or >8388607, Out of range!");
    return 0;
  }
  *(double *)&v33[1] = (double)v13 * 0.0000214576721;
  unsigned int v14 = *((unsigned __int16 *)a1 + 9);
  if ((v14 & 0x8000) != 0)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: altitude = %d >32767, Out of range!");
    return 0;
  }
  int v15 = *((unsigned __int8 *)a1 + 16);
  if (v15 == 255)
  {
    BYTE10(v33[2]) = 0;
    char v16 = 1;
    double v17 = 0.0;
  }
  else if (v15 == 1)
  {
    char v16 = 0;
    BYTE10(v33[2]) = 1;
    double v17 = (double)-v14;
  }
  else
  {
    if (*((unsigned char *)a1 + 16))
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: altitudeDirectioint n = %d <-1 or >1, Out of range!");
      return 0;
    }
    char v16 = 0;
    BYTE10(v33[2]) = 1;
    double v17 = (double)v14;
  }
  *(double *)&long long v34 = v17;
  if ((v8 & 0x80) != 0)
  {
    if (v8 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintySemiMajor = %d >127 && !=255, Out of range!");
      return 0;
    }
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: WARNING: Unknown uncertaintySemiMajor replaced with default = %f m", 15000.0);
    unsigned int v9 = *((unsigned __int8 *)a1 + 21);
    double v18 = 15000.0;
    if ((v9 & 0x80) == 0) {
      goto LABEL_34;
    }
LABEL_51:
    double v19 = v18;
    if (v9 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintySemiMinor = %d >127 && !=255, Out of range!");
      return 0;
    }
    goto LABEL_35;
  }
  double v18 = (pow(1.1, (double)v8) + -1.0) * 10.0;
  if ((v9 & 0x80) != 0) {
    goto LABEL_51;
  }
LABEL_34:
  double v19 = (pow(1.1, (double)v9) + -1.0) * 10.0;
LABEL_35:
  unsigned int v20 = *((unsigned __int8 *)a1 + 22);
  if (v20 > 0x59)
  {
    if (v20 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: orientationMajorAxis = %d >=90 && !=255, Out of range!");
      return 0;
    }
    __int16 v21 = 0;
  }
  else
  {
    __int16 v21 = 2 * v20;
  }
  WORD4(v33[2]) = v21;
  double v22 = 0.0;
  if ((v16 & 1) == 0)
  {
    unsigned int v23 = *((unsigned __int8 *)a1 + 23);
    if (*((char *)a1 + 23) < 0)
    {
      if (v23 != 255)
      {
        EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintyAltitude = %d >127 && !=255, Out of range!");
        return 0;
      }
      double v22 = dbl_22BB0C060[*(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 52) < 5u];
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: WARNING: Unknown uncertaintyAltitude replaced with default = %f m", v22);
    }
    else
    {
      double v22 = (pow(1.025, (double)v23) + -1.0) * 45.0;
    }
  }
  if ((int)a2 >= 5)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: Trust = %d > GN_AGPS_TRUST_HIGH, Out of range!");
    return 0;
  }
  if ((int)a3 >= 9)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: Source = %d > GN_AGPS_SRC_EXT, Out of range!");
    return 0;
  }
  long long v35 = __PAIR64__(a3, a2);
  unsigned int v24 = *((unsigned __int8 *)a1 + 24);
  if (v24 > 0x64) {
    unsigned int v24 = 39;
  }
  if (v19 < 500.0 || v24 < 0x33)
  {
    char v28 = v24 - 97;
    if ((v24 - 97) >= 4u)
    {
      if (v24 <= 0x5E)
      {
        if (v24 <= 0x59)
        {
          if (v24 <= 0x54)
          {
            if (v24 <= 0x4F)
            {
              if (v24 <= 0x4A)
              {
                if (v24 <= 0x45)
                {
                  if (v24 <= 0x42)
                  {
                    if (v24 <= 0x40)
                    {
                      if (v24 <= 0x3B)
                      {
                        if (v24 <= 0x31)
                        {
                          if (v24 <= 0x26)
                          {
                            if (v24 <= 0x1D)
                            {
                              if (v24 <= 0x13)
                              {
                                double v26 = dbl_22BB0C070[v24 > 9];
                                double v27 = 2.17864924;
                                if (v24 <= 9) {
                                  double v27 = 3.125;
                                }
                              }
                              else
                              {
                                double v27 = 1.49700599;
                                double v26 = 3.95256917;
                              }
                            }
                            else
                            {
                              double v27 = 1.18343195;
                              double v26 = 2.5974026;
                            }
                          }
                          else
                          {
                            double v27 = 1.0;
                            double v26 = 1.90839695;
                          }
                        }
                        else
                        {
                          double v27 = 0.849617672;
                          double v26 = 1.48367953;
                        }
                      }
                      else
                      {
                        double v27 = 0.738552437;
                        double v26 = 1.18764846;
                      }
                    }
                    else
                    {
                      double v27 = 0.690131125;
                      double v26 = 1.06951872;
                    }
                  }
                  else
                  {
                    double v27 = 0.671591672;
                    double v26 = 1.02669405;
                  }
                }
                else
                {
                  double v27 = 0.644329897;
                  double v26 = 0.965250965;
                }
              }
              else
              {
                double v27 = 0.600600601;
                double v26 = 0.869565217;
              }
            }
            else
            {
              double v27 = 0.557413601;
              double v26 = 0.780640125;
            }
          }
          else
          {
            double v27 = 0.513347023;
            double v26 = 0.694927033;
          }
        }
        else
        {
          double v27 = 0.465983225;
          double v26 = 0.607902736;
        }
      }
      else
      {
        double v27 = 0.408496732;
        double v26 = 0.510204082;
      }
    }
    else
    {
      double v26 = dbl_22BB0C0C0[v28];
      double v27 = dbl_22BB0C0E0[v28];
    }
  }
  else
  {
    if (v24 >= 0x5A) {
      unsigned int v24 = 90;
    }
    double v25 = 90.0 / (double)v24;
    double v26 = v25 * 0.333333333;
    double v27 = sqrt(v25) * 0.333333333;
  }
  double v29 = v18 * v27;
  double v30 = v19 * v27;
  *((double *)&v33[1] + 1) = v29;
  *(double *)&v33[2] = v30;
  double v31 = v22 * v26;
  *((double *)&v34 + 1) = v31;
  if (a3 >= 7)
  {
    if ((a3 - 7) >= 2) {
      EvCrt_Illegal_Default("GN_AGPS_Set_GAD_Ref_Pos", 0x9C9u);
    }
  }
  else
  {
    double v32 = 1000.0;
    if (v31 > 1000.0 || (double v32 = 10.0, v31 < 10.0)) {
      *((double *)&v34 + 1) = v32;
    }
    if (v30 < 500.0)
    {
      *(double *)&v33[2] = v29;
      if (v29 < 500.0) {
        *(int64x2_t *)((char *)&v33[1] + 8) = vdupq_n_s64(0x407F400000000000uLL);
      }
      WORD4(v33[2]) = 0;
    }
  }
  return GN_AGPS_Set_Ref_Pos((uint64_t)v33);
}

uint64_t GN_AGPS_Set_Acq_Ass(unsigned int *a1)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Acq_Ass")) {
    return 0;
  }
  EvLog_nd("GN_AGPS_Set_Acq_Ass: ", 2, v2, *a1, *((unsigned __int8 *)a1 + 4));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *((unsigned char *)a1 + 4))
  {
    unint64_t v3 = 0;
    double v4 = (unsigned __int8 *)a1 + 18;
    do
    {
      int v5 = *(v4 - 12);
      int v6 = *((__int16 *)v4 - 5);
      int v7 = *(v4 - 8);
      int v8 = *(v4 - 7);
      int v9 = *((unsigned __int16 *)v4 - 3);
      int v10 = *(v4 - 4);
      int v11 = *(v4 - 3);
      int v12 = *(v4 - 2);
      int v13 = *(v4 - 1);
      int v14 = *v4;
      v4 += 14;
      EvLog_v("GN_AGPS_AA_El: %2d %2d   %5d %5d %2d %d   %4d %2d %d %2d   %2d %d", v3++, v5, v6, 5 * v6 / 2, v7, v8, v9, v10, v11, v12, v13, v14);
    }
    while (v3 < *((unsigned __int8 *)a1 + 4));
  }
  if (*a1 > 0x240C83FF)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Ref_GPS_TOW = %d >=604800000, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 4) - 17 < 0xFFFFFFF0)
  {
    *(unsigned char *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Num_AA = %d ==0 or >16, Out of range!");
    return 0;
  }
  unint64_t v17 = 0;
  double v18 = (unsigned __int8 *)a1 + 18;
  do
  {
    unsigned int v19 = *(v18 - 12);
    if (v19 - 65 <= 0xFFFFFFBF)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Sat_ID[%d] = %d ==0 or >64, Out of range!");
      return 0;
    }
    if (v19 >= 0x21)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: WARNING: Sat_ID[%d] = %d >32, Modernized GPS, Ignored!", v17, v19);
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)v18 - 5) - 2048) >> 12) <= 0xEu)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_0[%d] = %d <-2048 or >2047, Out of range!");
      return 0;
    }
    if (*(v18 - 8) >= 0x40u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_1[%d] = %d >63, Out of range!");
      return 0;
    }
    if (*(v18 - 7) >= 5u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_Unc[%d] = %d >4, Out of range!");
      return 0;
    }
    if (*((unsigned __int16 *)v18 - 3) >= 0x3FFu)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Code_Phase[%d] = %d >1022, Out of range!");
      return 0;
    }
    if (*(v18 - 4) >= 0x14u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Int_Code_Phase[%d] = %d >19, Out of range!");
      return 0;
    }
    if (*(v18 - 3) >= 4u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: GPS_Bit_Num[%d] = %d >3, Out of range!");
      return 0;
    }
    if (*(v18 - 2) >= 0x10u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Code_Window[%d] = %d >15, Out of range!");
      return 0;
    }
    if (*(v18 - 1) >= 0x20u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Azimuth[%d] = %d >31, Out of range!");
      return 0;
    }
    if (*v18 >= 8u)
    {
      *(unsigned char *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Elevation[%d] = %d >7, Out of range!");
      return 0;
    }
    ++v17;
    v18 += 14;
  }
  while (v17 < *((unsigned __int8 *)a1 + 4));
  long long v20 = *((_OWORD *)a1 + 13);
  v119[11] = *((_OWORD *)a1 + 12);
  v119[12] = v20;
  uint64_t v120 = *((void *)a1 + 28);
  long long v21 = *((_OWORD *)a1 + 9);
  v119[7] = *((_OWORD *)a1 + 8);
  v119[8] = v21;
  long long v22 = *((_OWORD *)a1 + 11);
  v119[9] = *((_OWORD *)a1 + 10);
  v119[10] = v22;
  long long v23 = *((_OWORD *)a1 + 5);
  v119[3] = *((_OWORD *)a1 + 4);
  v119[4] = v23;
  long long v24 = *((_OWORD *)a1 + 7);
  v119[5] = *((_OWORD *)a1 + 6);
  v119[6] = v24;
  long long v25 = *((_OWORD *)a1 + 1);
  long long v118 = *(_OWORD *)a1;
  v119[0] = v25;
  long long v26 = *((_OWORD *)a1 + 3);
  v119[1] = *((_OWORD *)a1 + 2);
  v119[2] = v26;
  uint64_t v27 = p_NA;
  LODWORD(v28) = v118;
  if (*(unsigned char *)(p_NA + 297))
  {
    int v29 = v118 - *(_DWORD *)(p_NA + 17664);
    if (v29 <= 4999)
    {
      uint64_t v110 = v118;
      LODWORD(v115) = 0;
      BYTE4(v115) = 0;
      long long v116 = 0u;
      memset(v117, 0, 21);
      LODWORD(v112) = 0;
      BYTE4(v112) = 0;
      long long v113 = 0u;
      memset(v114, 0, 21);
      EvLog_v("GN_AGPS_Set_Acq_Ass: %d records from only %d ms ago, merging.", *(unsigned __int8 *)(p_NA + 17672), v29);
      uint64_t v31 = p_NA;
      if (*(unsigned char *)(p_NA + 17672))
      {
        unint64_t v32 = 0;
        uint64_t v33 = v118;
        int v109 = v118 + 79;
        unsigned __int8 v34 = BYTE4(v118);
        do
        {
          if (*((unsigned __int8 *)&v119[-1] + 14 * v32 + 6) <= 0x20u)
          {
            uint64_t v35 = v34 + 1;
            uint64_t v36 = (char *)&v118 + 6;
            while (1)
            {
              int v37 = *v36;
              v36 += 14;
              if (*(unsigned __int8 *)(v31 + 28 * v32 + 17678) == v37) {
                break;
              }
              if (!--v35)
              {
                LODWORD(v115) = *(_DWORD *)(v31 + 17664);
                BYTE4(v115) = 1;
                LODWORD(v116) = *(_DWORD *)(v31 + 28 * v32 + 17676);
                unint64_t v38 = v31 + 28 * v32;
                WORD5(v116) = *(_WORD *)(v38 + 17686);
                HIDWORD(v116) = *(_DWORD *)(v38 + 17688);
                v117[1] = *(_WORD *)(v38 + 17692);
                *(void *)&v117[2] = *(void *)(v38 + 17696);
                LODWORD(v112) = v33;
                Comp_Cur_Acq_Aid((uint64_t)&v115, (uint64_t)&v112);
                int v39 = v34++;
                char v40 = BYTE2(v113);
                int v41 = (char *)&v119[-1] + 14 * v39;
                v41[11] = 0;
                unsigned int v42 = v41 + 11;
                *(v42 - 5) = v40;
                int v43 = 42000 * SWORD6(v113);
                if (v43 < 0) {
                  BYTE2(v43) = (v43 + 0xFFFF) >> 16;
                }
                *(v42 - 1) = BYTE2(v43) + 42;
                if (SHIWORD(v113) >= 1) {
                  __int16 v44 = HIWORD(v113) + 1;
                }
                else {
                  __int16 v44 = HIWORD(v113) - 1;
                }
                HIWORD(v113) = v44;
                *(_WORD *)(v42 - 3) = ((unint64_t)(3435973838 * v44) >> 33)
                                    + ((unint64_t)(3435973838 * v44) >> 63);
                unsigned int v45 = 4u;
                while (WORD5(v113) > Acq_Ass_Table_Doppler_Unc[v45])
                {
                  if (--v45 == -1) {
                    goto LABEL_44;
                  }
                }
                *unsigned int v42 = v45;
LABEL_44:
                int v47 = v114[1];
                int v46 = v114[2];
                __int16 v48 = 1023 * (v114[2] / 1023) - LOWORD(v114[2]) + 1023;
                long long v49 = (char *)&v119[-1] + 14 * v39;
                v49[16] = 0;
                long long v50 = v49 + 16;
                *((_WORD *)v50 - 2) = v48;
                unsigned int v51 = ((int)(((unint64_t)(2145384445 * v46) >> 32) - v46) >> 9)
                    + ((((unint64_t)(2145384445 * v46) >> 32) - v46) >> 31);
                uint64_t v33 = v110;
                unsigned int v52 = 5
                    * ((((v51 + v110 - 1500 * v47) & ~((int)(v51 + v110 - 1500 * v47) >> 31))
                      - (v51
                       + v110
                       - 1500 * v47)
                      + ((int)(v51 + v110 - 1500 * v47) >> 31))
                     / 0x50
                     + ((v51 + v110 - 1500 * v47) >> 31));
                int v53 = 1500 * v47;
                int v54 = v51 + v110 + 16 * v52;
                int v55 = v54 - v53;
                if (v54 - v53 >= 79) {
                  int v55 = 79;
                }
                unsigned __int8 v56 = v53 - v54 - -80 * ((v109 + v51 + 16 * v52 - v53 - v55) / 0x50) + 80;
                *(v50 - 1) = v56 / 0x14u;
                *(v50 - 2) = v56 % 0x14u;
                uint64_t v57 = 1;
                while (HIWORD(v114[0]) > Acq_Ass_Table_Code_Window[v57])
                {
                  if (++v57 == 16) {
                    goto LABEL_51;
                  }
                }
                *long long v50 = v57;
LABEL_51:
                uint64_t v31 = p_NA;
                uint64_t v58 = p_NA + 28 * v32 + 17676;
                unsigned int v59 = (char *)&v119[-1] + 14 * v39;
                v59[17] = (char)(4 * *(_WORD *)(p_NA + 28 * v32 + 17682) + 24) / 45;
                LODWORD(v58) = (unint64_t)(3054198967 * (4 * *(char *)(v58 + 5) + 24)) >> 32;
                v59[18] = (v58 >> 5) + ((int)v58 < 0);
                break;
              }
            }
          }
          ++v32;
        }
        while (v32 < *(unsigned __int8 *)(v31 + 17672));
        uint64_t v28 = v33;
        BYTE4(v118) = v34;
      }
      else
      {
        uint64_t v28 = v118;
        unsigned __int8 v34 = BYTE4(v118);
      }
      EvLog_nd("GN_AGPS_Set_Acq_Ass: (merged) ", 2, v30, v28, v34);
      if (v34 && (unsigned __int16)g_Enable_Event_Log >= 4u)
      {
        uint64_t v61 = 0;
        int v62 = (unsigned __int8 *)v119 + 2;
        do
        {
          uint64_t v63 = *(v62 - 12);
          uint64_t v64 = *((__int16 *)v62 - 5);
          uint64_t v65 = *(v62 - 8);
          uint64_t v66 = *(v62 - 7);
          uint64_t v67 = *((unsigned __int16 *)v62 - 3);
          uint64_t v68 = *(v62 - 4);
          uint64_t v69 = *(v62 - 3);
          uint64_t v70 = *(v62 - 2);
          uint64_t v71 = *(v62 - 1);
          unsigned int v72 = *v62;
          v62 += 14;
          EvLog_nd("GN_AGPS_AA_El: (merged) ", 12, v60, v61++, v63, v64, (5 * (int)v64 / 2), v65, v66, v67, v68, v69, v70, v71, v72);
        }
        while (v34 != v61);
      }
      uint64_t v27 = p_NA;
    }
  }
  *(_DWORD *)(v27 + 17664) = v28;
  *(_DWORD *)(v27 + 17668) = 0;
  uint64_t v73 = BYTE4(v118);
  *(unsigned char *)(v27 + 17672) = BYTE4(v118);
  uint64_t v115 = 0;
  *(void *)&long long v116 = 0;
  uint64_t v112 = 0;
  *(void *)&long long v113 = 0;
  if (v73)
  {
    uint64_t v74 = 0;
    uint64_t v75 = (char *)v119 + 2;
    do
    {
      char v76 = *v75;
      v75 += 14;
      *((unsigned char *)&v112 + v74++) = v76;
    }
    while (v73 != v74);
    for (uint64_t i = 0; i != v73; ++i)
    {
      uint64_t v78 = 0;
      char v79 = -1;
      int v80 = -1;
      do
      {
        if (*((char *)&v112 + v78) > v79)
        {
          char v79 = *((unsigned char *)&v112 + v78);
          int v80 = v78;
        }
        ++v78;
      }
      while (v73 != v78);
      *((unsigned char *)&v115 + i) = v80;
      if (v80 != -1) {
        *((unsigned char *)&v112 + v80) = -99;
      }
    }
    unsigned int v81 = 0;
    unsigned __int16 v82 = (unsigned __int8 *)v119;
    uint64_t v83 = v73;
    do
    {
      int v84 = *v82;
      v82 += 14;
      v81 += Acq_Ass_Table_Code_Window[v84];
      --v83;
    }
    while (v83);
    unsigned int v111 = (v81 / v73 + 2) / 3 + 4;
    bzero((void *)(v27 + 17676), 0x540uLL);
    unsigned __int16 v85 = (unsigned __int8 *)&v115;
    uint64_t v86 = 17700;
    while (1)
    {
      unsigned int v88 = *v85++;
      unsigned int v87 = v88;
      int v89 = (char *)&v119[-1] + 14 * v88;
      uint64_t v90 = v27 + v86;
      *(unsigned char *)(v90 - 22) = v89[6];
      *(unsigned char *)(v90 - 24) = 1;
      *(_WORD *)(v90 - 10) = 5 * *((__int16 *)v89 + 4) / 2;
      int v91 = v89[10];
      if (v91)
      {
        *(_WORD *)(v90 - 12) = v91 - 42;
        int v92 = *((unsigned __int8 *)&v119[-1] + 14 * v87 + 11);
      }
      else
      {
        uint64_t v93 = (char *)&v119[-1] + 14 * v87;
        if (v93[11]) {
          __int16 v94 = -42;
        }
        else {
          __int16 v94 = -16;
        }
        *(_WORD *)(v90 - 12) = v94;
        int v92 = v93[11];
        __int16 v95 = v111;
        if (!v92) {
          goto LABEL_91;
        }
      }
      __int16 v95 = Acq_Ass_Table_Doppler_Unc[v92];
LABEL_91:
      uint64_t v96 = (_DWORD *)(v27 + v86);
      *(_WORD *)(v27 + v86 - 14) = v95;
      unsigned __int16 v97 = (char *)&v119[-1] + 14 * v87;
      unsigned int v98 = v97[14] + 20 * v97[15];
      if (v98 <= 0x28) {
        int v99 = -80;
      }
      else {
        int v99 = -160;
      }
      int v100 = v98 + *(_DWORD *)(v27 + 17664) + v99;
      int v101 = v100 - 604800000;
      if (v100 <= 604800000) {
        int v101 = v100;
      }
      if (v100 >= 0) {
        int v102 = v101;
      }
      else {
        int v102 = v100 + 604800000;
      }
      *(v96 - 1) = v102 / 1500;
      *uint64_t v96 = 1023 * (v102 % 1500);
      int v103 = *((unsigned __int16 *)v97 + 6);
      if (v103)
      {
        Inc_CA_Chips((1023 - v103), (int *)(v27 + v86), v96 - 1);
        uint64_t v27 = p_NA;
      }
      unsigned int v104 = (unsigned __int8 *)&v119[-1] + 14 * v87;
      unsigned __int16 v105 = Acq_Ass_Table_Code_Window[v104[16]];
      *((_WORD *)v96 - 4) = v105;
      *((_WORD *)v96 - 8) = 16 * v105;
      unsigned int v106 = v104[17];
      if (v106 <= 0x1F) {
        __int16 v107 = (45 * v106) >> 2;
      }
      else {
        __int16 v107 = 0;
      }
      *((_WORD *)v96 - 9) = v107;
      unsigned int v108 = (45 * v104[18]) >> 2;
      if (v108 >= 0x5A) {
        LOBYTE(v108) = 90;
      }
      *((unsigned char *)v96 - 19) = v108;
      v86 += 28;
      if (!--v73) {
        goto LABEL_109;
      }
    }
  }
  bzero((void *)(v27 + 17676), 0x540uLL);
LABEL_109:
  uint64_t v15 = 1;
  *(unsigned char *)(v27 + 297) = 1;
  Debug_Log_AGPS_Acq_Ass((uint64_t)a1);
  return v15;
}

unint64_t GN_AGPS_Mark_Response_Sent(unsigned int a1, unsigned int a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
  GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
  double v4 = __src;
  uint64_t v33 = __src;
  unsigned __int8 v34 = v36;
  unint64_t v32 = __src;
  char v5 = 10;
  uint64_t v6 = 1u;
  do
  {
    uint64_t v31 = v4 + 1;
    *double v4 = v5;
    double v4 = v31;
    if (v31 >= v34)
    {
      double v4 = v33;
      uint64_t v31 = v33;
    }
    char v5 = str_117[v6++];
  }
  while (v6 != 35);
  sprintf_10u(&v31, a1);
  int v7 = v31++;
  *int v7 = 32;
  if (v31 >= v34) {
    uint64_t v31 = v33;
  }
  sprintf_10u(&v31, a2);
  uint64_t v8 = 0;
  char v9 = 32;
  int v10 = v31;
  do
  {
    uint64_t v31 = v10 + 1;
    *int v10 = v9;
    int v10 = v31;
    if (v31 >= v34)
    {
      int v10 = v33;
      uint64_t v31 = v33;
    }
    char v9 = str_118[++v8];
  }
  while (v8 != 8);
  unint64_t result = API_Query_Config((uint64_t)v36);
  if (v38)
  {
    int v12 = (unint64_t *)xmmword_26AE66D68;
    int v13 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    unint64_t v14 = *(void *)(xmmword_26AE66D68 + 24);
    unint64_t result = *(void *)xmmword_26AE66D68;
    uint64_t v15 = __src;
    do
    {
      int v16 = v14 - result;
      if (v13 >= v16) {
        int v17 = v16;
      }
      else {
        int v17 = v13;
      }
      memcpy((void *)result, v15, v17);
      unint64_t result = *v12 + v17;
      *int v12 = result;
      unint64_t v14 = v12[3];
      if (result >= v14)
      {
        unint64_t result = v12[2];
        *int v12 = result;
      }
      v15 += v17;
      BOOL v18 = __OFSUB__(v13, v17);
      v13 -= v17;
    }
    while (!((v13 < 0) ^ v18 | (v13 == 0)));
  }
  if (v39)
  {
    unsigned int v19 = (unint64_t *)*((void *)&xmmword_26AE66D58 + 1);
    int v20 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    unint64_t v21 = *(void *)(*((void *)&xmmword_26AE66D58 + 1) + 24);
    unint64_t result = **((void **)&xmmword_26AE66D58 + 1);
    long long v22 = __src;
    do
    {
      int v23 = v21 - result;
      if (v20 >= v23) {
        int v24 = v23;
      }
      else {
        int v24 = v20;
      }
      memcpy((void *)result, v22, v24);
      unint64_t result = *v19 + v24;
      *unsigned int v19 = result;
      unint64_t v21 = v19[3];
      if (result >= v21)
      {
        unint64_t result = v19[2];
        *unsigned int v19 = result;
      }
      v22 += v24;
      BOOL v18 = __OFSUB__(v20, v24);
      v20 -= v24;
    }
    while (!((v20 < 0) ^ v18 | (v20 == 0)));
  }
  if (v37)
  {
    long long v25 = (unint64_t *)xmmword_26AE66D58;
    int v26 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    unint64_t v27 = *(void *)(xmmword_26AE66D58 + 24);
    unint64_t result = *(void *)xmmword_26AE66D58;
    uint64_t v28 = __src;
    do
    {
      int v29 = v27 - result;
      if (v26 >= v29) {
        int v30 = v29;
      }
      else {
        int v30 = v26;
      }
      memcpy((void *)result, v28, v30);
      unint64_t result = *v25 + v30;
      *long long v25 = result;
      unint64_t v27 = v25[3];
      if (result >= v27)
      {
        unint64_t result = v25[2];
        *long long v25 = result;
      }
      v28 += v30;
      BOOL v18 = __OFSUB__(v26, v30);
      v26 -= v30;
    }
    while (!((v26 < 0) ^ v18 | (v26 == 0)));
  }
  return result;
}

double Register_PatchFunc(uint64_t a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 65, "Register_PatchFunc", "8cd9669 CP 0.0.20 b673 3f12 ME 0.0.76 0882 106e CFG 0c27");
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 1, 1);
  }
  if (a2 != 2 || a3 != 1)
  {
    snprintf(v11, 0x400uLL, "ASSERT: %s %d Hardware version Not Supported %d,%d", "Register_PatchFunc", 40, a2, a3);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "Register_PatchFunc", v11);
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Register_PatchFunc", "gnssPatchesMain.cpp", 41, "false && \"HW version Not Supported\"");
  }
  return Register_PatchFunc_2_1(a1);
}

uint64_t gnss::GnssAdaptDevice::decodeSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "decodeSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  if (gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit((char **)a2))
  {
    gnss::GnssAdaptDevice::Ga11_09TraceBuffer((void *)a2);
    char v46 = 0;
    int v47 = 0;
    __int16 v48 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    memset(v44, 0, 261);
    memset(v45, 0, sizeof(v45));
    __int16 v49 = -1;
    int v50 = -1;
    char v51 = -1;
    unsigned __int16 v7 = *(unsigned __int8 **)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 8) - *(void *)a2;
    int v52 = 0;
    BOOL v9 = GNS_SuplDecodeInit(0, v7, v8, &v26) != 1 || BYTE4(v26) == 0;
    uint64_t v10 = !v9;
    if (v9)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
        goto LABEL_39;
      }
      bzero(__str, 0x410uLL);
      unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplDecodeInit,%u\n", v24);
      goto LABEL_20;
    }
    gnss::GnssAdaptDevice::Ga11_10ConvertGNSPosMethodToE911PosMethod(v28, (int *)a3);
    if (HIBYTE(v48))
    {
      *(unsigned char *)(a3 + 4) = 1;
      *(_WORD *)(a3 + 5) = v49;
      *(_WORD *)(a3 + 8) = v50;
      *(unsigned char *)(a3 + 10) = v51;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAcc,%u,VAcc,%u,LocAge,%u,Delay,%u\n", v11, "ADP");
LABEL_23:
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No Qop vals\n");
      goto LABEL_23;
    }
    if (*(_DWORD *)&v45[256]) {
      gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress((uint64_t)v45, a3 + 16);
    }
    if (v46)
    {
      *(_WORD *)(a3 + 72) = 257;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Not an emergency session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "decodeSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
    }
    if (v44[64]) {
      gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress((uint64_t)v44, a3 + 80);
    }
    switch(v52)
    {
      case 0:
        *(_DWORD *)(a3 + 136) = 0;
        goto LABEL_39;
      case 1:
        int v20 = 2;
        goto LABEL_38;
      case 2:
        int v20 = 1;
LABEL_38:
        *(_DWORD *)(a3 + 136) = v20;
        goto LABEL_39;
    }
    *(_DWORD *)(a3 + 136) = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
LABEL_39:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "decodeSuplInit");
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
      return v10;
    }
    bzero(__str, 0x410uLL);
    unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Trigger type,%u\n", v25);
LABEL_20:
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    goto LABEL_39;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "decodeSuplInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
  }
  uint64_t v10 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "decodeSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
    return 0;
  }
  return v10;
}

uint64_t gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit(char **a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga11_16ValidateSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  int64_t v4 = a1[1] - *a1;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL INIT len,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga11_16ValidateSuplInit", v4);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  if ((unint64_t)(v4 - 0x10000) > 0xFFFFFFFFFFFF0004)
  {
    uint64_t v10 = __rev16(*(unsigned __int16 *)*a1);
    if (v4 == v10)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga11_16ValidateSuplInit");
        uint64_t v9 = 1;
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInit Len,%zd mismatches SuplInitHadrLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga11_16ValidateSuplInit", 770, v4, v10);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
      }
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_16ValidateSuplInit", 514);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
    uint64_t v9 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_16:
      bzero(__str, 0x410uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "ADP", 68, "Ga11_16ValidateSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
      return 0;
    }
  }
  return v9;
}

void gnss::GnssAdaptDevice::Ga11_09TraceBuffer(void *a1)
{
  v44[114] = *MEMORY[0x263EF8340];
  if (a1[1] != *a1)
  {
    unint64_t v2 = 0;
    __p = 0;
    long long v31 = 0uLL;
    std::string::size_type v27 = *MEMORY[0x263F8C2B8];
    std::string::size_type v28 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    std::string::size_type v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      if (a1[1] - *a1 <= v2) {
        break;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      std::string::size_type v3 = __str.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v42 + *(void *)(__str.__r_.__value_.__r.__words[2] - 24)) = *(_DWORD *)((unsigned char *)v42
                                                                                                  + *(void *)(__str.__r_.__value_.__r.__words[2] - 24)) & 0xFFFFFFB5 | 8;
      *(void *)((char *)&v42[2] + *(void *)(v3 - 24)) = 2;
      v32.__r_.__value_.__s.__data_[0] = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (char *)&v32);
      std::ostream::operator<<();
      std::stringbuf::str();
      if (v31 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v31 >= 0) {
        std::string::size_type v5 = HIBYTE(v31);
      }
      else {
        std::string::size_type v5 = v31;
      }
      unsigned __int16 v6 = std::string::insert(&v32, 0, p_p, v5);
      uint64_t v7 = (void *)v6->__r_.__value_.__r.__words[0];
      *(void *)&long long v38 = v6->__r_.__value_.__l.__size_;
      *(void *)((char *)&v38 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
      char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v31) < 0) {
        operator delete(__p);
      }
      __p = v7;
      *(void *)&long long v31 = v38;
      *(void *)((char *)&v31 + 7) = *(void *)((char *)&v38 + 7);
      HIBYTE(v31) = v8;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v27;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(void *)(v27 - 24)) = v28;
      __str.__r_.__value_.__r.__words[2] = v29;
      v42[0] = MEMORY[0x263F8C318] + 16;
      if (v43 < 0) {
        operator delete((void *)v42[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x230F4E540](v44);
      ++v2;
    }
    while (v2 != 5);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
    std::string::size_type v9 = v32.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v32.__r_.__value_.__r + *(void *)(v32.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v32.__r_.__value_.__r + *(void *)(v32.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
    *(void *)&v34[*(void *)(v9 - 24)] = 2;
    __str.__r_.__value_.__s.__data_[0] = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v32.__r_.__value_.__r.__words[2], (char *)&__str);
    std::ostream::operator<<();
    int v10 = SHIBYTE(v31);
    if (v31 >= 0) {
      size_t v11 = HIBYTE(v31);
    }
    else {
      size_t v11 = v31;
    }
    unint64_t v12 = v11 + 3;
    if (v11 + 3 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 >= 0x17)
    {
      uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v16 = v12 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_str = (std::string *)operator new(v16 + 1);
      __str.__r_.__value_.__l.__size_ = v11 + 3;
      __str.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
      p_str = &__str;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v11 + 3;
      if (!v11)
      {
LABEL_33:
        *(_DWORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v11) = 3026478;
        std::stringbuf::str();
        if ((v39 & 0x80u) == 0) {
          uint64_t v19 = (const std::string::value_type *)&v38;
        }
        else {
          uint64_t v19 = (const std::string::value_type *)v38;
        }
        if ((v39 & 0x80u) == 0) {
          std::string::size_type v20 = v39;
        }
        else {
          std::string::size_type v20 = *((void *)&v38 + 1);
        }
        uint64_t v21 = std::string::append(&__str, v19, v20);
        unsigned __int16 v22 = (void *)v21->__r_.__value_.__r.__words[0];
        v40[0] = v21->__r_.__value_.__l.__size_;
        *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
        char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v31) < 0) {
          operator delete(__p);
        }
        __p = v22;
        *(void *)&long long v31 = v40[0];
        *(void *)((char *)&v31 + 7) = *(void *)((char *)v40 + 7);
        HIBYTE(v31) = v23;
        if ((char)v39 < 0) {
          operator delete((void *)v38);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          double v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          unint64_t v25 = (const char *)&__p;
          if (v31 < 0) {
            unint64_t v25 = (const char *)__p;
          }
          unsigned __int16 v26 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Len,%lu,bufContents,%s\n", (unint64_t)v24, "ADP", 68, "Ga11_09TraceBuffer", a1[1] - *a1, v25);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v26, 5, 1);
        }
        v32.__r_.__value_.__r.__words[0] = v27;
        *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(void *)(v27 - 24)) = v28;
        v32.__r_.__value_.__r.__words[2] = v29;
        uint64_t v33 = MEMORY[0x263F8C318] + 16;
        if (v36 < 0) {
          operator delete(v35);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x230F4E540](&v37);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p);
        }
        return;
      }
    }
    if (v10 >= 0) {
      uint64_t v18 = &__p;
    }
    else {
      uint64_t v18 = __p;
    }
    memmove(p_str, v18, v11);
    goto LABEL_33;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx buffer is empty\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_09TraceBuffer", 513);
    LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v15, 0, 1);
  }
}

void sub_22B86D264(_Unwind_Exception *a1)
{
}

size_t gnss::GnssAdaptDevice::Ga11_10ConvertGNSPosMethodToE911PosMethod(int a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_10ConvertGNSPosMethodToE911PosMethod");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  switch(a1)
  {
    case 0:
      break;
    case 1:
      *a2 = 0;
      break;
    case 2:
      int v8 = 1;
      goto LABEL_23;
    case 3:
      int v8 = 2;
      goto LABEL_23;
    case 4:
      int v8 = 3;
      goto LABEL_23;
    case 5:
      int v8 = 4;
      goto LABEL_23;
    case 6:
      int v8 = 9;
      goto LABEL_23;
    case 7:
      int v8 = 11;
      goto LABEL_23;
    case 8:
      int v8 = 12;
      goto LABEL_23;
    case 9:
      int v8 = 13;
      goto LABEL_23;
    case 10:
      int v8 = 14;
      goto LABEL_23;
    case 11:
      int v8 = 15;
      goto LABEL_23;
    case 12:
      int v8 = 5;
      goto LABEL_23;
    case 13:
      int v8 = 6;
      goto LABEL_23;
    case 14:
      int v8 = 7;
      goto LABEL_23;
    case 15:
      int v8 = 8;
      goto LABEL_23;
    case 16:
      int v8 = 10;
      goto LABEL_23;
    case 17:
      int v8 = 16;
LABEL_23:
      *a2 = v8;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Method,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga11_10ConvertGNSPosMethodToE911PosMethod", 515, a1);
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: E911PosMethod,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_10ConvertGNSPosMethodToE911PosMethod", *a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga11_10ConvertGNSPosMethodToE911PosMethod");
    return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if (a1)
  {
    int v6 = strnlen((const char *)a1, 0x100uLL);
    if ((v6 & 0xFFFFFEFF) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GSM serving cell info,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", 772, v6);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_21;
      }
      return result;
    }
    switch(*(_DWORD *)(a1 + 256))
    {
      case 0:
        break;
      case 1:
        *(_DWORD *)(a2 + 4) = 1;
        gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect((const char *)a1, (unint64_t *)(a2 + 32));
        *(unsigned char *)a2 = 1;
        break;
      case 2:
        *(_DWORD *)(a2 + 4) = 2;
        gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect((const char *)a1, (unint64_t *)(a2 + 32));
        goto LABEL_17;
      case 3:
        *(_DWORD *)(a2 + 4) = 3;
        std::string::basic_string[abi:ne180100]<0>(__str, (char *)a1);
        uint64_t v12 = (void **)(a2 + 8);
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v12);
        }
        *(_OWORD *)uint64_t v12 = *(_OWORD *)__str;
        *(void *)(a2 + 24) = v18;
LABEL_17:
        *(unsigned char *)a2 = 1;
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Addresstype not set,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", *(_DWORD *)(a1 + 256));
          LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
        }
        break;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SLPType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", *(_DWORD *)(a2 + 4));
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_21:
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress");
    return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
  }
  return result;
}

void gnss::GnssAdaptDevice::setSuplInit(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  if (*(void *)(a4 + 24))
  {
    uint64_t v21 = 0;
    unsigned __int16 v22 = 0;
    uint64_t v23 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v21, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    __int16 v15 = *a3;
    if (*((char *)a3 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)a3 + 1), *((void *)a3 + 2));
    }
    else {
      std::string v16 = *(std::string *)(a3 + 4);
    }
    char v17 = *((unsigned char *)a3 + 32);
    if (*((char *)a3 + 63) < 0) {
      std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)a3 + 5), *((void *)a3 + 6));
    }
    else {
      std::string v18 = *(std::string *)(a3 + 20);
    }
    long long v19 = *((_OWORD *)a3 + 4);
    uint64_t v20 = *((void *)a3 + 10);
    uint64_t v12 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice11setSuplInitERKNSt3__16vectorIhNS1_9allocatorIhEEEERKNS_9Emergency4Supl7ContextENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_14;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, a4);
    __int16 v26 = v15;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v27, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else {
      std::string v27 = v16;
    }
    char v28 = v17;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v29, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else {
      std::string v29 = v18;
    }
    long long v30 = v19;
    uint64_t v31 = v20;
    __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v21, (uint64_t)v22, v22 - (unsigned char *)v21);
    dispatch_async(v12, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      unsigned __int16 v22 = v21;
      operator delete(v21);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setSuplInit", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
  }
}

void sub_22B86DED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v56);
  gnss::Emergency::Supl::Context::~Context(&a15);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice11setSuplInitERKNSt3__16vectorIhNS1_9allocatorIhEEEERKNS_9Emergency4Supl7ContextENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v110[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v110, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v110, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v110);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setSuplInit_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
    return result;
  }
  if (*(unsigned char *)(v2 + 89) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM req active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 87, "setSuplInit_block_invoke", 2056);
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 2, 1);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 103)) {
      goto LABEL_7;
    }
LABEL_20:
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v108, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v108, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v108);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP Address not provisioned\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "setSuplInit_block_invoke", 515);
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
    }
    return result;
  }
  if (!*(void *)(a1 + 88)) {
    goto LABEL_20;
  }
LABEL_7:
  unint64_t v5 = *(unsigned __int8 *)(a1 + 135);
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      goto LABEL_9;
    }
LABEL_32:
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v107, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v107, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v107);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI not provisioned\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setSuplInit_block_invoke", 515);
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 135)) {
    goto LABEL_32;
  }
LABEL_9:
  if ((*(unsigned char *)(a1 + 103) & 0x80) != 0 && *(void *)(a1 + 88) >= 0x100uLL)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v106, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v106, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v106);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP AddLen,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplInit_block_invoke", 515, 256);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
    return result;
  }
  if ((v5 & 0x80) != 0) {
    unint64_t v5 = *(void *)(a1 + 120);
  }
  if (v5 >= 0x10)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v105, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v105, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v105);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI Len,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setSuplInit_block_invoke", 515, 16);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
    return result;
  }
  if (gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit((char **)(a1 + 160)))
  {
    uint64_t v28 = *(void *)(a1 + 160);
    uint64_t v27 = *(void *)(a1 + 168);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL INIT Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "setSuplInit_block_invoke", v27 - v28);
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
    }
    gnss::GnssAdaptDevice::Ga11_09TraceBuffer((void *)(a1 + 160));
    if (*(unsigned char *)(a1 + 136))
    {
      if (*(unsigned char *)(a1 + 137)) {
        uint64_t v31 = 0x100000003;
      }
      else {
        uint64_t v31 = 3;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    char v36 = *(unsigned char *)(a1 + 138);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v37 = mach_continuous_time();
      unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WLAN PosMode(1,SA,2,Assisted),%u,MeasMask(1,RSSI),%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 73, "setSuplInit_block_invoke", v31, HIDWORD(v31));
      LbsOsaTrace_WriteLog(0x18u, __str, v38, 4, 1);
    }
    if (GNS_WlCapabilities(v31, v36) != 1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN CAPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 87, "setSuplInit_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v40, 2, 1);
    }
    long long v41 = (const char *)(a1 + 80);
    long long v42 = (const char **)(a1 + 112);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(__str, 0x410uLL);
      double v43 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      __int16 v44 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        __int16 v44 = *(const char **)v41;
      }
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t v45 = 84;
      }
      else {
        uint64_t v45 = 70;
      }
      char v46 = (const char *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0) {
        char v46 = *v42;
      }
      uint64_t v47 = 84;
      if (!*(unsigned char *)(a1 + 144)) {
        uint64_t v47 = 70;
      }
      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SLP,%s,%u,MSA,%c,IMSI,%s,HeloEnabled,%c\n", (unint64_t)v43, "ADP", 68, "setSuplInit_block_invoke", v44, *(unsigned __int16 *)(a1 + 72), v45, v46, v47);
      LbsOsaTrace_WriteLog(0x18u, __str, v48, 5, 1);
    }
    bzero(v93, 0x270uLL);
    char v95 = 2;
    uint64_t v96 = 0;
    *(void *)unsigned int v98 = 0;
    uint64_t v97 = 0;
    *(void *)&v98[7] = 0;
    memset(&v98[17], 0, 13);
    uint64_t v49 = 62;
    do
    {
      int v50 = &v93[v49];
      *int v50 = 0;
      *(_WORD *)&v99[v49 + 194] = 0;
      *((_WORD *)v50 + 130) = -1;
      v49 += 262;
    }
    while (v50 + 262 != (unsigned char *)&v101);
    int v101 = 0;
    double v103 = 0.0;
    *(void *)((char *)v102 + 7) = 0;
    v102[0] = 0;
    int v94 = 32;
    *(_DWORD *)&v98[25] = 4;
    int v51 = *(char *)(a1 + 103);
    if (v51 < 0)
    {
      LOBYTE(v51) = *(unsigned char *)(a1 + 88);
      long long v41 = *(const char **)(a1 + 80);
    }
    v99[257] = v51;
    v98[31] = 0;
    v99[256] = 1;
    strncpy_s(v99, 0x100u, v41, v51);
    unsigned __int16 v100 = *(_WORD *)(a1 + 72);
    if (v100 - 7275 >= 2 && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v52 = mach_continuous_time();
      unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Non Standard Port, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 87, "setSuplInit_block_invoke", 770, v100);
      LbsOsaTrace_WriteLog(0x18u, __str, v53, 2, 1);
    }
    *(_DWORD *)&v98[21] = *(_DWORD *)&v98[21] & 0xFFFFFFBF | ((*(unsigned char *)(a1 + 104) == 0) << 6);
    *(_DWORD *)&v98[17] |= 0x40u;
    v94 |= 0x1000u;
    double v54 = *(double *)(a1 + 152);
    if (v54 == -1.0) {
      double v54 = 0.0;
    }
    double v103 = v54;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v55 = mach_continuous_time();
      unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: targetE911VerticalAccM,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "ADP", 73, "setSuplInit_block_invoke", v103);
      LbsOsaTrace_WriteLog(0x18u, __str, v56, 4, 1);
    }
    unsigned int v57 = Gnm_SetUserConfig((uint64_t)v93);
    if (v57)
    {
      int v58 = gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(v2, v57);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v59 = mach_continuous_time();
        unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUsrCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "ADP", 69, "setSuplInit_block_invoke", 257, v58);
        LbsOsaTrace_WriteLog(0x18u, __str, v60, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v92, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v58, (uint64_t)v92, (uint64_t)"setSuplInit_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v92);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v61 = mach_continuous_time();
        unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "ADP", 68, "setSuplInit_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v62, 5, 1);
      }
      return result;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v63 = mach_continuous_time();
      unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetUsrCfg success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "ADP", 73, "setSuplInit_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v64, 4, 1);
    }
    if (!gnss::GnssAdaptDevice::Ga10_11SetGuardTimeOut((gnss::GnssAdaptDevice *)v2)
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v65 = mach_continuous_time();
      unsigned __int16 v66 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetGuardTimeOut\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "ADP", 69, "setSuplInit_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v66, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v67 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(a1 + 144)) {
        uint64_t v68 = 84;
      }
      else {
        uint64_t v68 = 70;
      }
      if (*(unsigned char *)(a1 + 145)) {
        uint64_t v69 = 84;
      }
      else {
        uint64_t v69 = 70;
      }
      unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EarlyReturnEanbled,%c,HELO-Enabled,%c\n", (unint64_t)v67, "ADP", 73, "setSuplInit_block_invoke", v69, v68);
      LbsOsaTrace_WriteLog(0x18u, __str, v70, 4, 1);
    }
    if (!gnss::GnssAdaptDevice::Ga10_12SetEarlyReturn((gnss::GnssAdaptDevice *)v2, *(unsigned __int8 *)(a1 + 145))
      && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v71 = mach_continuous_time();
      unsigned __int16 v72 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetEarlyReturn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 69, "setSuplInit_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v72, 0, 1);
    }
    if (*(char *)(a1 + 135) < 0)
    {
      std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
    }
    else
    {
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)v42;
      v89.__r_.__value_.__r.__words[2] = *(void *)(a1 + 128);
    }
    unsigned int v73 = GNS_SetImsi((uint64_t)&v89, 0);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (v73 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v74 = mach_continuous_time();
        unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CellInfo success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 73, "setSuplInit_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v75, 4, 1);
      }
      std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 536), a1 + 40);
      unsigned int v76 = GNS_DcSuplInit(*(unsigned __int8 **)(a1 + 160), *(_DWORD *)(a1 + 168) - *(void *)(a1 + 160), 0);
      if (v76 == 1)
      {
        uint64_t v77 = *(void *)(v2 + 152);
        uint64_t v78 = *(void *)(v2 + 160);
        char v79 = (unint64_t *)(v2 + 152);
        if ((unint64_t)(v78 - v77) <= 3) {
          std::vector<gnss::AgnssSuplCfg>::push_back[abi:ne180100](v79, *(unsigned char *)(a1 + 144));
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v80 = mach_continuous_time();
          unsigned __int16 v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DcSuplInit success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "ADP", 73, "setSuplInit_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v81, 4, 1);
        }
        return result;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v84 = mach_continuous_time();
        unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcSuplInit,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "ADP", 69, "setSuplInit_block_invoke", 257, v76);
        LbsOsaTrace_WriteLog(0x18u, __str, v85, 0, 1);
      }
      int v86 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v76);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v90, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v86, (uint64_t)v90, (uint64_t)"setSuplInit_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v90);
      std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 536));
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
LABEL_116:
        bzero(__str, 0x410uLL);
        uint64_t v87 = mach_continuous_time();
        unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "ADP", 68, "setSuplInit_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v88, 5, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v82 = mach_continuous_time();
        unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI push failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 69, "setSuplInit_block_invoke", 257, v73);
        LbsOsaTrace_WriteLog(0x18u, __str, v83, 0, 1);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v91, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v73, (uint64_t)v91, "setSuplInit_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v91);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_116;
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v104, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v104, (uint64_t)"setSuplInit_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v104);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 69, "setSuplInit_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v33, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v34 = mach_continuous_time();
      unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "setSuplInit_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v35, 5, 1);
    }
  }
  return result;
}

void sub_22B86F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(gnss::Result)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void std::vector<gnss::AgnssSuplCfg>::push_back[abi:ne180100](unint64_t *a1, char a2)
{
  unint64_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    uint64_t v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unsigned __int16 v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v7) {
      operator delete((void *)v7);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c34_ZTSN4gnss9Emergency4Supl7ContextE160c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v4;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  unint64_t v5 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = 0;
  unint64_t v9 = (void *)(a1 + 160);
  *(v9 - 1) = v8;
  *(_OWORD *)(v9 - 3) = v7;
  v9[1] = 0;
  _OWORD v9[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v9, *(const void **)(a2 + 160), *(void *)(a2 + 168), *(void *)(a2 + 168) - *(void *)(a2 + 160));
}

void sub_22B86F870(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v3);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void gnss::Emergency::Supl::Context::~Context(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c34_ZTSN4gnss9Emergency4Supl7ContextE160c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setSuplLocationIdNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    long long v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice29setSuplLocationIdNeededReportENSt3__18functionIFNS_6ResultEvEEENS2_IFvS3_EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_31_0;
    block[4] = a1;
    std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplLocationIdNeededReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B86FB3C(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

size_t ___ZN4gnss15GnssAdaptDevice29setSuplLocationIdNeededReportENSt3__18functionIFNS_6ResultEvEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v14[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplLocationIdNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
  uint64_t v5 = v2 + 920;
  if (__str != (char *)(v2 + 920))
  {
    uint64_t v6 = v13;
    uint64_t v7 = *(void *)(v2 + 944);
    if (v13 == __str)
    {
      if (v7 == v5)
      {
        (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v14);
        (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        uint64_t v13 = 0;
        (*(void (**)(void, char *))(**(void **)(v2 + 944) + 24))(*(void *)(v2 + 944), __str);
        (*(void (**)(void))(**(void **)(v2 + 944) + 32))(*(void *)(v2 + 944));
        *(void *)(v2 + 944) = 0;
        uint64_t v13 = __str;
        (*(void (**)(void *, uint64_t))(v14[0] + 24))(v14, v2 + 920);
        (*(void (**)(void *))(v14[0] + 32))(v14);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 920);
        (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        uint64_t v13 = *(char **)(v2 + 944);
      }
      *(void *)(v2 + 944) = v5;
    }
    else if (v7 == v5)
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 920, __str);
      (*(void (**)(void))(**(void **)(v2 + 944) + 32))(*(void *)(v2 + 944));
      *(void *)(v2 + 944) = v13;
      uint64_t v13 = __str;
    }
    else
    {
      uint64_t v13 = *(char **)(v2 + 944);
      *(void *)(v2 + 944) = v6;
    }
  }
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](__str);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v11, (uint64_t)"setSuplLocationIdNeededReport_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setSuplLocationIdNeededReport_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
  }
  return result;
}

void sub_22B86FF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B86FFD0(_Unwind_Exception *a1)
{
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::setSuplLocationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)std::string __str = *(_DWORD *)a2;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(&v25, *(const void **)(a2 + 8), *(void *)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(&v28, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(&v31, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 5);
    uint64_t v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17setSuplLocationIdERKNS_9Emergency4Supl10LocationIdENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_41;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
    int v14 = *(_DWORD *)__str;
    unsigned __int16 v16 = 0;
    uint64_t v17 = 0;
    char v15 = 0;
    uint64_t v7 = v25;
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(&v15, v25, v26, 0x6DB6DB6DB6DB6DB7 * ((v26 - (uint64_t)v25) >> 2));
    unsigned __int16 v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v8 = v28;
    std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(&v18, v28, v29, (v29 - (uint64_t)v28) >> 4);
    __p = 0;
    unsigned __int16 v22 = 0;
    uint64_t v23 = 0;
    uint64_t v9 = v31;
    std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(&__p, v31, v32, (v32 - (uint64_t)v31) >> 5);
    dispatch_async(v6, block);
    if (__p)
    {
      unsigned __int16 v22 = __p;
      operator delete(__p);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    if (v15)
    {
      unsigned __int16 v16 = v15;
      operator delete(v15);
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    if (v9) {
      operator delete(v9);
    }
    if (v8) {
      operator delete(v8);
    }
    if (v7) {
      operator delete(v7);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setSuplLocationId", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
  }
}

void sub_22B870318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
  gnss::Emergency::Supl::LocationId::~LocationId((gnss::Emergency::Supl::LocationId *)&a34);
  _Unwind_Resume(a1);
}

void *___ZN4gnss15GnssAdaptDevice17setSuplLocationIdERKNS_9Emergency4Supl10LocationIdENSt3__18functionIFvNS_6ResultEEEE_block_invoke()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "setSuplLocationId_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v4 = v0 + 40;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v129, v0 + 40);
    __str[0] = 0;
    uint64_t v122 = 0;
    memset_s(v123, 0x1840uLL, 0, 0x1840uLL);
    __str[0] = 0;
    HIDWORD(v122) = 2;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
    {
      bzero(v131, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: LocId type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "setSuplLocationId_block_invoke", *(_DWORD *)(v0 + 72));
      LbsOsaTrace_WriteLog(0x18u, v131, v6, 5, 1);
    }
    switch(*(_DWORD *)(v0 + 72))
    {
      case 0:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v115, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v115, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v115);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx CellType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v8, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v10, 5, 1);
        }
        break;
      case 1:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "Ga11_12FillGsmCellInfo");
          LbsOsaTrace_WriteLog(0x18u, v131, v36, 5, 1);
        }
        memset(v123, 255, sizeof(v123));
        uint64_t v37 = *(void *)(v0 + 104);
        uint64_t v38 = *(void *)(v0 + 112) - v37;
        if (v38)
        {
          unint64_t v39 = v38 >> 4;
          if (v39 <= 1) {
            unint64_t v39 = 1;
          }
          uint64_t v40 = v37 + 4;
          while (!*(unsigned char *)(v40 - 4))
          {
            v40 += 16;
            if (!--v39) {
              goto LABEL_91;
            }
          }
          BYTE2(v124) = 0;
          LOWORD(v124) = -1;
          v123[0] = *(_DWORD *)(v40 - 2);
          *(void *)&v123[1] = *(void *)(v40 + 4);
        }
LABEL_91:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v131, 0x410uLL);
          uint64_t v73 = mach_continuous_time();
          unsigned __int16 v74 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: GSM Serving,%u,%u,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "ADP", 68, "Ga11_12FillGsmCellInfo", LOWORD(v123[0]), HIWORD(v123[0]), v123[1], v123[2]);
          LbsOsaTrace_WriteLog(0x18u, v131, v74, 5, 1);
        }
        if (LOWORD(v123[0]) <= 0x3E7u && HIWORD(v123[0]) <= 0x3E7u && !HIWORD(v123[1]) && v123[2] < 0x10000u)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v75 = mach_continuous_time();
            unsigned __int16 v76 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "ADP", 68, "Ga11_12FillGsmCellInfo");
            LbsOsaTrace_WriteLog(0x18u, v131, v76, 5, 1);
          }
          int v64 = 1;
          goto LABEL_124;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v77 = mach_continuous_time();
          unsigned __int16 v78 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx GSM Serving Cell Info\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "ADP", 69, "Ga11_12FillGsmCellInfo", 772);
          LbsOsaTrace_WriteLog(0x18u, v131, v78, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v79 = mach_continuous_time();
          unsigned __int16 v80 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), "ADP", 68, "Ga11_12FillGsmCellInfo");
          LbsOsaTrace_WriteLog(0x18u, v131, v80, 5, 1);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v120, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v120, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v120);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v81 = mach_continuous_time();
          unsigned __int16 v82 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v82, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v83 = mach_continuous_time();
          unsigned __int16 v84 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v83), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v84, 5, 1);
        }
        break;
      case 2:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga11_13FillWCDMACellInfo");
          LbsOsaTrace_WriteLog(0x18u, v131, v17, 5, 1);
        }
        memset(v123, 255, sizeof(v123));
        uint64_t v18 = *(void *)(v0 + 128);
        uint64_t v19 = *(void *)(v0 + 136) - v18;
        if (v19)
        {
          unint64_t v20 = v19 >> 5;
          if (v20 <= 1) {
            unint64_t v20 = 1;
          }
          uint64_t v21 = 16;
          while (1)
          {
            unsigned __int16 v22 = (unsigned __int16 *)(v18 + v21);
            if (*(unsigned char *)(v18 + v21 - 16)) {
              break;
            }
            v21 += 32;
            if (!--v20) {
              goto LABEL_115;
            }
          }
          v123[0] = *(_DWORD *)(v22 - 7);
          *(void *)&v123[1] = *((void *)v22 - 1);
          __int16 v125 = -1;
          if (*v22 > 0x1FFu)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(v131, 0x410uLL);
              uint64_t v85 = mach_continuous_time();
              unsigned __int16 v86 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Invalid PSC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "ADP", 68, "Ga11_13FillWCDMACellInfo", *(unsigned __int16 *)(*(void *)(v0 + 128) + v21));
              LbsOsaTrace_WriteLog(0x18u, v131, v86, 5, 1);
            }
          }
          else
          {
            __int16 v125 = *v22;
          }
          unsigned int v124 = -1;
          uint64_t v87 = *(void *)(v0 + 128) + v21;
          if (*(_DWORD *)(v87 + 8) != 1 || (unsigned int v88 = *(_DWORD *)(v87 + 12), v88 >> 14))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(v131, 0x410uLL);
              uint64_t v89 = mach_continuous_time();
              unsigned __int16 v90 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Invalid,%u DlArfcn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "ADP", 68, "Ga11_13FillWCDMACellInfo", *(_DWORD *)(*(void *)(v0 + 128) + v21 + 12));
              LbsOsaTrace_WriteLog(0x18u, v131, v90, 5, 1);
            }
          }
          else
          {
            LOWORD(v124) = v88;
          }
        }
LABEL_115:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v131, 0x410uLL);
          uint64_t v91 = mach_continuous_time();
          unsigned __int16 v92 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: WCDMA Serving,%u,%u,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v91), "ADP", 68, "Ga11_13FillWCDMACellInfo", LOWORD(v123[0]), HIWORD(v123[0]), v123[1], v123[2]);
          LbsOsaTrace_WriteLog(0x18u, v131, v92, 5, 1);
        }
        if (LOWORD(v123[0]) <= 0x3E7u && HIWORD(v123[0]) <= 0x3E7u && !HIWORD(v123[1]) && !(v123[2] >> 28))
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v93 = mach_continuous_time();
            unsigned __int16 v94 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "ADP", 68, "Ga11_13FillWCDMACellInfo");
            LbsOsaTrace_WriteLog(0x18u, v131, v94, 5, 1);
          }
          int v64 = 2;
          goto LABEL_124;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v105 = mach_continuous_time();
          unsigned __int16 v106 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx WCDMA Serving Cell Info\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "ADP", 69, "Ga11_13FillWCDMACellInfo", 772);
          LbsOsaTrace_WriteLog(0x18u, v131, v106, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v107 = mach_continuous_time();
          unsigned __int16 v108 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "ADP", 68, "Ga11_13FillWCDMACellInfo");
          LbsOsaTrace_WriteLog(0x18u, v131, v108, 5, 1);
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v119, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v119, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v119);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v109 = mach_continuous_time();
          unsigned __int16 v110 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx WCDMA CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v110, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v111 = mach_continuous_time();
          unsigned __int16 v112 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v112, 5, 1);
        }
        break;
      case 3:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v117, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v117, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v117);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx CDMA CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v24, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v25 = mach_continuous_time();
          unsigned __int16 v26 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v26, 5, 1);
        }
        break;
      case 4:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v116, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v116, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v116);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx HRPD CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v28, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v30, 5, 1);
        }
        break;
      case 5:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v41 = mach_continuous_time();
          unsigned __int16 v42 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 68, "Ga11_14FillLTECellInfo");
          LbsOsaTrace_WriteLog(0x18u, v131, v42, 5, 1);
        }
        unsigned int v124 = -1;
        *(void *)((char *)v123 + 2) = -1;
        uint64_t v43 = *(void *)(v0 + 80);
        if (*(void *)(v0 + 88) != v43)
        {
          unint64_t v44 = 0;
          uint64_t v45 = 24;
          do
          {
            uint64_t v46 = v43 + v45;
            if (*(unsigned char *)(v43 + v45 - 24))
            {
              v123[0] = *(_DWORD *)(v46 - 22);
              v123[1] = *(_DWORD *)(v46 - 12);
              LOWORD(v123[2]) = *(_WORD *)(v46 - 8);
              unsigned int v124 = *(_DWORD *)(v46 - 16);
              LOBYTE(v125) = -1;
              if (*(unsigned __int8 *)(v46 - 6) > 0x61u)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
                {
                  bzero(v131, 0x410uLL);
                  uint64_t v52 = mach_continuous_time();
                  unsigned __int16 v53 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Invalid Rsrp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "ADP", 68, "Ga11_14FillLTECellInfo", *(unsigned __int8 *)(*(void *)(v0 + 80) + v45 - 6));
                  LbsOsaTrace_WriteLog(0x18u, v131, v53, 5, 1);
                }
              }
              else
              {
                LOBYTE(v125) = *(unsigned char *)(v46 - 6);
              }
              HIBYTE(v125) = -1;
              if (*(unsigned __int8 *)(*(void *)(v0 + 80) + v45 - 5) > 0x22u)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
                {
                  bzero(v131, 0x410uLL);
                  uint64_t v54 = mach_continuous_time();
                  unsigned __int16 v55 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Invalid Rsrq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "ADP", 68, "Ga11_14FillLTECellInfo", *(unsigned __int8 *)(*(void *)(v0 + 80) + v45 - 5));
                  LbsOsaTrace_WriteLog(0x18u, v131, v55, 5, 1);
                }
              }
              else
              {
                HIBYTE(v125) = *(unsigned char *)(*(void *)(v0 + 80) + v45 - 5);
              }
              __int16 v126 = -1;
              if (*(int *)(*(void *)(v0 + 80) + v45 - 4) > 1282)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
                {
                  bzero(v131, 0x410uLL);
                  uint64_t v56 = mach_continuous_time();
                  unsigned __int16 v57 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Invalid TA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "ADP", 68, "Ga11_14FillLTECellInfo", *(_DWORD *)(*(void *)(v0 + 80) + v45 - 4));
                  LbsOsaTrace_WriteLog(0x18u, v131, v57, 5, 1);
                }
              }
              else
              {
                __int16 v126 = *(_DWORD *)(*(void *)(v0 + 80) + v45 - 4);
              }
            }
            else if (v127 <= 7uLL)
            {
              uint64_t v47 = (_DWORD *)(v43 + v45);
              unsigned __int16 v48 = &v123[5 * v127];
              v48[7] = *(_DWORD *)((char *)v47 - 22);
              *((void *)v48 + 4) = *(void *)(v47 - 3);
              v48[10] = *(v47 - 4);
              v48[11] = *v47;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
              {
                bzero(v131, 0x410uLL);
                uint64_t v49 = mach_continuous_time();
                int v50 = (_DWORD *)(*(void *)(v0 + 80) + v45);
                unsigned __int16 v51 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: LTE neighbor,%zd,MCC %u,MNC %u,CI %u,PCI %u,RSRP %u,RSRQ %u,TAC %u,DLFREQ %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 68, "Ga11_14FillLTECellInfo", v44, *((unsigned __int16 *)v50 - 11), *((unsigned __int16 *)v50 - 10), *(v50 - 3), *((unsigned __int16 *)v50 - 4), *((unsigned __int8 *)v50 - 6), *((unsigned __int8 *)v50 - 5), *(v50 - 4), *v50);
                LbsOsaTrace_WriteLog(0x18u, v131, v51, 5, 1);
              }
              if (LOWORD(v128[5 * v127]) <= 0x1F7u) {
                ++v127;
              }
            }
            ++v44;
            uint64_t v43 = *(void *)(v0 + 80);
            v45 += 28;
          }
          while (v44 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v0 + 88) - v43) >> 2));
        }
        uint64_t v4 = v0 + 40;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
        {
          bzero(v131, 0x410uLL);
          uint64_t v58 = mach_continuous_time();
          unsigned __int16 v59 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: LTE Serving,%u,%u,%u,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "ADP", 68, "Ga11_14FillLTECellInfo", HIWORD(v123[0]), v123[1], LOWORD(v123[2]), v124);
          LbsOsaTrace_WriteLog(0x18u, v131, v59, 5, 1);
        }
        if (LOWORD(v123[0]) >= 0x3E8u && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v60 = mach_continuous_time();
          unsigned __int16 v61 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx LTE MCC, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 87, "Ga11_14FillLTECellInfo", 770, LOWORD(v123[0]));
          LbsOsaTrace_WriteLog(0x18u, v131, v61, 2, 1);
        }
        if (HIWORD(v123[0]) > 0x3E7u || v123[1] >> 28 || LOWORD(v123[2]) > 0x1F7u || v124 >= 0x10000)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v65 = mach_continuous_time();
            unsigned __int16 v66 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx LTE Serving Cell Info\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "ADP", 69, "Ga11_14FillLTECellInfo", 772);
            LbsOsaTrace_WriteLog(0x18u, v131, v66, 0, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v67 = mach_continuous_time();
            unsigned __int16 v68 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "ADP", 68, "Ga11_14FillLTECellInfo");
            LbsOsaTrace_WriteLog(0x18u, v131, v68, 5, 1);
          }
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v118, v0 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v118, (uint64_t)"setSuplLocationId_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v118);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v69 = mach_continuous_time();
            unsigned __int16 v70 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx LTE CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v69), "ADP", 69, "setSuplLocationId_block_invoke", 770);
            LbsOsaTrace_WriteLog(0x18u, v131, v70, 0, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v71 = mach_continuous_time();
            unsigned __int16 v72 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 68, "setSuplLocationId_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, v131, v72, 5, 1);
          }
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(v131, 0x410uLL);
            uint64_t v62 = mach_continuous_time();
            unsigned __int16 v63 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "ADP", 68, "Ga11_14FillLTECellInfo");
            LbsOsaTrace_WriteLog(0x18u, v131, v63, 5, 1);
          }
          int v64 = 4;
LABEL_124:
          LODWORD(v122) = v64;
          std::function<void ()(gnss::Result)>::operator=((void *)(v1 + 504), v4);
          unsigned int v95 = GNS_CellInfo(__str, 0);
          if (v95 == 1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(v131, 0x410uLL);
              uint64_t v96 = mach_continuous_time();
              unsigned __int16 v97 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: CellInfo success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "ADP", 73, "setSuplLocationId_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, v131, v97, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(v131, 0x410uLL);
              uint64_t v98 = mach_continuous_time();
              unsigned __int16 v99 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "ADP", 68, "setSuplLocationId_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, v131, v99, 5, 1);
            }
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(v131, 0x410uLL);
              uint64_t v100 = mach_continuous_time();
              unsigned __int16 v101 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v100), "ADP", 69, "setSuplLocationId_block_invoke", 770, v95);
              LbsOsaTrace_WriteLog(0x18u, v131, v101, 0, 1);
            }
            int v102 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v1, v95);
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v113, v4);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, v102, (uint64_t)v113, (uint64_t)"setSuplLocationId_block_invoke");
            std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v113);
            std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v1 + 504));
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(v131, 0x410uLL);
              uint64_t v103 = mach_continuous_time();
              unsigned __int16 v104 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "ADP", 68, "setSuplLocationId_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, v131, v104, 5, 1);
            }
          }
        }
        break;
      default:
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v114, v0 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 4, (uint64_t)v114, (uint64_t)"setSuplLocationId_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v114);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: #%04hx cellType is not specified in Emergency::Supl::CellType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "setSuplLocationId_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, v131, v32, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(v131, 0x410uLL);
          uint64_t v33 = mach_continuous_time();
          unsigned __int16 v34 = snprintf(v131, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "setSuplLocationId_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, v131, v34, 5, 1);
        }
        break;
    }
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v129);
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v130, v0 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v1, 7, (uint64_t)v130, (uint64_t)"setSuplLocationId_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v130);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "setSuplLocationId_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setSuplLocationId_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
  }
  return result;
}

void sub_22B872314(_Unwind_Exception *a1)
{
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c38_ZTSN4gnss9Emergency4Supl10LocationIdE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  int v4 = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 5);
}

void sub_22B872504(_Unwind_Exception *a1)
{
  unsigned __int16 v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 112) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v7;
    operator delete(v7);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c38_ZTSN4gnss9Emergency4Supl10LocationIdE(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  unsigned __int16 v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

void gnss::Emergency::Supl::LocationId::~LocationId(gnss::Emergency::Supl::LocationId *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unsigned __int16 v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void *gnss::GnssAdaptDevice::abortSuplSession(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice16abortSuplSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_44;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "abortSuplSession", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice16abortSuplSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "abortSuplSession_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::function<void ()(gnss::Result)>::operator=((void *)(v2 + 568), a1 + 40);
  unsigned int v5 = GNS_SuplAbortSession(*(_DWORD *)(v2 + 1016));
  if (v5 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplAbortSession success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "abortSuplSession_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "abortSuplSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplAbortSession,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "abortSuplSession_block_invoke", 257, v5);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    int v13 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v5);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v13, (uint64_t)v16, (uint64_t)"abortSuplSession_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v2 + 568));
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "abortSuplSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
  }
  return result;
}

void sub_22B872B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
}

void *gnss::GnssAdaptDevice::setSuplSessionStatusReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26setSuplSessionStatusReportENSt3__18functionIFvRKNS_9Emergency4Supl13SessionStatusEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_46;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setSuplSessionStatusReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B872D90(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

size_t ___ZN4gnss15GnssAdaptDevice26setSuplSessionStatusReportENSt3__18functionIFvRKNS_9Emergency4Supl13SessionStatusEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplSessionStatusReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(void *)(a1 + 64) && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StatusRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplSessionStatusReport_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
  uint64_t v7 = v2 + 984;
  if (__str != (char *)(v2 + 984))
  {
    unsigned __int16 v8 = v15;
    uint64_t v9 = *(void *)(v2 + 1008);
    if (v15 == __str)
    {
      if (v9 == v7)
      {
        (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v16);
        (*(void (**)(char *))(*(void *)v15 + 32))(v15);
        unsigned __int16 v15 = 0;
        (*(void (**)(void, char *))(**(void **)(v2 + 1008) + 24))(*(void *)(v2 + 1008), __str);
        (*(void (**)(void))(**(void **)(v2 + 1008) + 32))(*(void *)(v2 + 1008));
        *(void *)(v2 + 1008) = 0;
        unsigned __int16 v15 = __str;
        (*(void (**)(void *, uint64_t))(v16[0] + 24))(v16, v2 + 984);
        (*(void (**)(void *))(v16[0] + 32))(v16);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 984);
        (*(void (**)(char *))(*(void *)v15 + 32))(v15);
        unsigned __int16 v15 = *(char **)(v2 + 1008);
      }
      *(void *)(v2 + 1008) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, char *))(*(void *)v7 + 24))(v2 + 984, __str);
      (*(void (**)(void))(**(void **)(v2 + 1008) + 32))(*(void *)(v2 + 1008));
      *(void *)(v2 + 1008) = v15;
      unsigned __int16 v15 = __str;
    }
    else
    {
      unsigned __int16 v15 = *(char **)(v2 + 1008);
      *(void *)(v2 + 1008) = v8;
    }
  }
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](__str);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v13, (uint64_t)"setSuplSessionStatusReport_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setSuplSessionStatusReport_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
  }
  return result;
}

void sub_22B873208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B8732B0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setSuplWlanMeasurementNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  unsigned __int16 v4 = *(NSObject **)(a1 + 288);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  v6[2] = ___ZN4gnss15GnssAdaptDevice34setSuplWlanMeasurementNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency4Supl22WlanMeasurementRequestEEEENS2_IFvS3_EEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_47_0;
  v6[4] = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  dispatch_async(v4, v6);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
}

void sub_22B873418(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice34setSuplWlanMeasurementNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency4Supl22WlanMeasurementRequestEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplWlanMeasurementNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(void *)(a1 + 64))
  {
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    uint64_t v5 = v2 + 952;
    if (__str != (char *)(v2 + 952))
    {
      unsigned __int16 v6 = v15;
      uint64_t v7 = *(void *)(v2 + 976);
      if (v15 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v16);
          (*(void (**)(char *))(*(void *)v15 + 32))(v15);
          unsigned __int16 v15 = 0;
          (*(void (**)(void, char *))(**(void **)(v2 + 976) + 24))(*(void *)(v2 + 976), __str);
          (*(void (**)(void))(**(void **)(v2 + 976) + 32))(*(void *)(v2 + 976));
          *(void *)(v2 + 976) = 0;
          unsigned __int16 v15 = __str;
          (*(void (**)(void *, uint64_t))(v16[0] + 24))(v16, v2 + 952);
          (*(void (**)(void *))(v16[0] + 32))(v16);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 952);
          (*(void (**)(char *))(*(void *)v15 + 32))(v15);
          unsigned __int16 v15 = *(char **)(v2 + 976);
        }
        *(void *)(v2 + 976) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 24))(v2 + 952, __str);
        (*(void (**)(void))(**(void **)(v2 + 976) + 32))(*(void *)(v2 + 976));
        *(void *)(v2 + 976) = v15;
        unsigned __int16 v15 = __str;
      }
      else
      {
        unsigned __int16 v15 = *(char **)(v2 + 976);
        *(void *)(v2 + 976) = v6;
      }
    }
    std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](__str);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v13, (uint64_t)"setSuplWlanMeasurementNeededReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setSuplWlanMeasurementNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setSuplWlanMeasurementNeededReport_block_invoke", 513);
      return LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    }
  }
  return result;
}

void sub_22B873898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c85_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B873940(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c85_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)std::string __str = *(_DWORD *)a2;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(&v16, *(const void **)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
    uint64_t v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23setSuplWlanMeasurementsERKNS_9Emergency4Supl19WlanMeasurementListENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_53;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    int v11 = *(_DWORD *)__str;
    int v13 = 0;
    uint64_t v14 = 0;
    __p = 0;
    unsigned __int16 v6 = v16;
    std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(&__p, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v16) >> 2));
    dispatch_async(v5, block);
    if (__p)
    {
      int v13 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    if (v6) {
      operator delete(v6);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplWlanMeasurements", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
}

void sub_22B873BBC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice23setSuplWlanMeasurementsERKNS_9Emergency4Supl19WlanMeasurementListENSt3__18functionIFvNS_6ResultEEEE_block_invoke()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  v52[4] = *MEMORY[0x263EF8340];
  uint64_t v43 = *(void *)(v0 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  if (!*(unsigned char *)(v43 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v52, v0 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v43, 7, (uint64_t)v52, (uint64_t)"setSuplWlanMeasurements_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v52);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    }
    return result;
  }
  __str[0] = 0;
  v48[0] = 0;
  *(void *)((char *)v48 + 6) = 0;
  uint64_t v49 = 0;
  uint64_t v3 = 32;
  unsigned __int8 v50 = 0;
  do
  {
    unsigned __int16 v4 = &__str[v3];
    *(void *)(v4 + 31) = 0;
    *(_OWORD *)unsigned __int16 v4 = 0uLL;
    *((_OWORD *)v4 + 1) = 0uLL;
    *((void *)v4 + 5) = 4294934527;
    v3 += 48;
  }
  while (v4 + 48 != (char *)v52);
  switch(*(_DWORD *)(v0 + 72))
  {
    case 0:
      BOOL v5 = 0;
      int v6 = 14;
      goto LABEL_20;
    case 1:
      HIDWORD(v49) = 1;
      uint64_t v14 = (void *)(v0 + 88);
      unsigned __int16 v15 = (uint64_t *)(v0 + 80);
      if (*(void *)(v0 + 88) == *(void *)(v0 + 80)) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      BOOL v5 = 0;
      int v6 = 2;
      goto LABEL_20;
    case 3:
      BOOL v5 = 0;
      int v6 = 11;
      goto LABEL_20;
    case 4:
      BOOL v5 = 0;
      int v6 = 7;
LABEL_20:
      HIDWORD(v49) = v6;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(v46, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: #%04hx result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 515, *(_DWORD *)(v0 + 72));
        LbsOsaTrace_WriteLog(0x18u, v46, v13, 0, 1);
      }
      BOOL v5 = *(_DWORD *)(v0 + 72) == 1;
      break;
  }
  uint64_t v14 = (void *)(v0 + 88);
  unsigned __int16 v15 = (uint64_t *)(v0 + 80);
  if (*(void *)(v0 + 88) == *(void *)(v0 + 80))
  {
    if (!v5) {
      goto LABEL_28;
    }
LABEL_25:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(v46, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurements\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 87, "setSuplWlanMeasurements_block_invoke", 515);
      LbsOsaTrace_WriteLog(0x18u, v46, v17, 2, 1);
    }
    HIDWORD(v49) = 2;
    goto LABEL_28;
  }
  if (!v5) {
    goto LABEL_25;
  }
LABEL_28:
  if (HIDWORD(v49) == 1 && *v14 != *v15)
  {
    uint64_t v18 = 0;
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*v14 - *v15) >> 2); ++i)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(v46, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: result,%u,apChFreqNum,%hu,rssiDbm,%hi,srvFlag,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "setSuplWlanMeasurements_block_invoke", *(_DWORD *)(v0 + 72), *(unsigned __int16 *)(*(void *)(v0 + 80) + 12 * i + 8), *(__int16 *)(*(void *)(v0 + 80) + 12 * i + 10), *(unsigned __int8 *)(*(void *)(v0 + 80) + 12 * i + 7));
        LbsOsaTrace_WriteLog(0x18u, v46, v21, 4, 1);
      }
      uint64_t v22 = *v15;
      uint64_t v23 = *v15 + 12 * i;
      unsigned int v25 = *(unsigned __int16 *)(v23 + 8);
      unsigned __int16 v24 = (_WORD *)(v23 + 8);
      if (v25 <= 0x100
        && ((uint64_t v26 = v22 + 12 * i,
             int v29 = *(unsigned __int16 *)(v26 + 10),
             unsigned __int16 v28 = (_WORD *)(v26 + 10),
             int v27 = v29,
             v29 == 0x7FFF)
         || (v27 - 128) >> 8 >= 0xFF))
      {
        uint64_t v32 = 0;
        unsigned int v33 = v50;
        unsigned __int16 v34 = &v51[3 * v50];
        do
        {
          *((unsigned char *)v34 + v32) = *(unsigned char *)(v22 + v18 + v32);
          ++v32;
        }
        while (v32 != 6);
        uint64_t v35 = &__str[48 * v33];
        *((_WORD *)v35 + 36) = *v28;
        *((_WORD *)v35 + 37) = *v24;
        if (*(unsigned char *)(v22 + 12 * i + 6))
        {
          if (*(unsigned char *)(v22 + 12 * i + 7)) {
            int v36 = 1;
          }
          else {
            int v36 = 2;
          }
          HIDWORD(v51[3 * v33 + 2]) = v36;
        }
        unsigned __int8 v50 = v33 + 1;
        if ((v33 + 1) > 0x3Fu) {
          break;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(v46, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurement\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 87, "setSuplWlanMeasurements_block_invoke", 772);
        LbsOsaTrace_WriteLog(0x18u, v46, v31, 2, 1);
      }
      v18 += 12;
    }
  }
  if (GNS_WlMeas(0, __str) == 1)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v44, v0 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v43, 1, (uint64_t)v44, (uint64_t)"setSuplWlanMeasurements_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v44);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(v46, 0x410uLL);
      uint64_t v37 = mach_continuous_time();
      unsigned __int16 v38 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, v46, v38, 5, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(v46, 0x410uLL);
      uint64_t v39 = mach_continuous_time();
      unsigned __int16 v40 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurements not Set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, v46, v40, 0, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, v0 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v43, 8, (uint64_t)v45, (uint64_t)"setSuplWlanMeasurements_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v45);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(v46, 0x410uLL);
      uint64_t v41 = mach_continuous_time();
      unsigned __int16 v42 = snprintf(v46, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, v46, v42, 5, 1);
    }
  }
  return result;
}

void sub_22B8744A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c47_ZTSN4gnss9Emergency4Supl19WlanMeasurementListE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), a2 + 40);
  int v4 = *(_DWORD *)(a2 + 72);
  v3[10] = 0;
  v3 += 10;
  *((_DWORD *)v3 - 2) = v4;
  v3[1] = 0;
  v3[2] = 0;
  return std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(v3, *(const void **)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
}

void sub_22B874590(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c47_ZTSN4gnss9Emergency4Supl19WlanMeasurementListE(void *a1)
{
  unsigned __int16 v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 5);
}

uint64_t gnss::GnssAdaptDevice::Ga11_00InitializeSUPL_GNS_CBs(gnss::GnssAdaptDevice *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  if (!GNS_CellInfoInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_01GnsCellInfoCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfoInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_DcInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_02DataClientCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_SimsInfoInitialize((void (*)(void))gnss::GnssAdaptDevice::Ga11_03SimInfoCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfoInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_SuplInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_17SuplAsyncEventCB))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInitialize\n");
    goto LABEL_20;
  }
  BOOL v3 = GNS_WlInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_21GnsWlanInfoCB);
  if (v3)
  {
    gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo((gnss::GnssAdaptDevice *)v3);
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    uint64_t v6 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
    return v6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WlanMeasReq\n");
LABEL_20:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
LABEL_21:
  uint64_t v6 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    return 0;
  }
  return v6;
}

size_t gnss::GnssAdaptDevice::Ga11_01GnsCellInfoCallback(int a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_01GnsCellInfoCallback");
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v9 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback", a1);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 4, 1);
    }
    if (a1 != 1)
    {
      if (a1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v19 = mach_continuous_time();
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS SUPL MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback", 770, a1);
          LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
        }
      }
      else
      {
        std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100]((uint64_t)__str, v9 + 920);
        uint64_t v14 = *(NSObject **)(v9 + 296);
        blocdouble k = MEMORY[0x263EF8330];
        uint64_t v31 = 1174405120;
        uint64_t v32 = ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke;
        unsigned int v33 = &__block_descriptor_tmp_62_0;
        std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)__str);
        dispatch_async(v14, &block);
        std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v34);
        std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](__str);
      }
LABEL_17:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
      goto LABEL_19;
    }
    if (a3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: API,%u,status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback", *a3, a3[1]);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
      }
      uint64_t v17 = *(void *)a3;
      uint64_t v18 = *(NSObject **)(v9 + 288);
      blocdouble k = MEMORY[0x263EF8330];
      uint64_t v31 = 0x40000000;
      uint64_t v32 = ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_65;
      unsigned int v33 = &__block_descriptor_tmp_71;
      v34[0] = v9;
      v34[1] = v17;
      dispatch_async(v18, &block);
      goto LABEL_17;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
    }
  }
LABEL_19:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga11_01GnsCellInfoCallback");
    return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
  }
  return result;
}

void sub_22B875074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t gnss::GnssAdaptDevice::Ga11_02DataClientCallback(int a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_02DataClientCallback");
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, (char *)__str, v7, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v9 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_06HandleDataClientCallback");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v11, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "Ga11_06HandleDataClientCallback", a1);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v13, 4, 1);
    }
    if (a3)
    {
      if (a1 != 3)
      {
        if (a1 == 1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
          {
            bzero(__str, 0x410uLL);
            uint64_t v25 = mach_continuous_time();
            unsigned __int16 v26 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Send Data req,%u,size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "Ga11_06HandleDataClientCallback", *a3, a3[4]);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v26, 5, 1);
          }
          unsigned __int16 v27 = (const void *)*((void *)a3 + 1);
          size_t v28 = a3[4];
          memset(__str, 0, 24);
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, v27, (uint64_t)v27 + v28, v28);
          gnss::GnssAdaptDevice::Ga11_09TraceBuffer(__str);
          std::vector<unsigned char>::vector(&__dst, a3[4]);
          size_t v29 = a3[4];
          if (v29) {
            memmove(__dst, *((const void **)a3 + 1), v29);
          }
          int v30 = *a3;
          uint64_t v31 = *(NSObject **)(v9 + 288);
          blocdouble k = MEMORY[0x263EF8330];
          uint64_t v50 = 1174405120;
          unsigned __int16 v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_86;
          uint64_t v52 = &__block_descriptor_tmp_90;
          uint64_t v53 = v9;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, __dst, (uint64_t)v48, v48 - (unsigned char *)__dst);
          int v55 = v30;
          dispatch_async(v31, &block);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (__dst)
          {
            unsigned __int16 v48 = __dst;
            operator delete(__dst);
          }
          uint64_t v32 = (void *)__str[0].__r_.__value_.__r.__words[0];
          if (!__str[0].__r_.__value_.__r.__words[0]) {
            goto LABEL_48;
          }
          __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
        }
        else
        {
          if (a1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v35 = mach_continuous_time();
              unsigned __int16 v36 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS DC Msg Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 69, "Ga11_06HandleDataClientCallback", 770, a1);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v36, 0, 1);
            }
            goto LABEL_48;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v14 = mach_continuous_time();
            unsigned __int16 v15 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: LinkReq Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "Ga11_06HandleDataClientCallback", *a3);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v15, 4, 1);
          }
          if (*a3 == 1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v37 = mach_continuous_time();
              unsigned __int16 v38 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Link Close Hdl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga11_06HandleDataClientCallback", a3[1]);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v38, 5, 1);
            }
            *(_DWORD *)(v9 + 1020) = a3[1];
            uint64_t v39 = *(NSObject **)(v9 + 96);
            if (v39)
            {
              dispatch_source_cancel(v39);
              *(void *)(v9 + 96) = 0;
            }
            goto LABEL_48;
          }
          if (*a3)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v40 = mach_continuous_time();
              unsigned __int16 v41 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Link req Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "Ga11_06HandleDataClientCallback", 257, *a3);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v41, 0, 1);
            }
            goto LABEL_48;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v16 = mach_continuous_time();
            unsigned __int16 v17 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Open Link Req hdl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "Ga11_06HandleDataClientCallback", a3[1]);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v17, 4, 1);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, (char *)a3 + 13);
          __int16 v18 = *((_WORD *)a3 + 139);
          int v19 = a3[1];
          unsigned __int16 v20 = *(NSObject **)(v9 + 288);
          blocdouble k = MEMORY[0x263EF8330];
          uint64_t v50 = 1174405120;
          unsigned __int16 v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke;
          uint64_t v52 = &__block_descriptor_tmp_82_0;
          uint64_t v53 = v9;
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = __str[0];
          }
          __int16 v56 = v18;
          int v55 = v19;
          dispatch_async(v20, &block);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_48:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v42 = mach_continuous_time();
              unsigned __int16 v43 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "Ga11_06HandleDataClientCallback");
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v43, 5, 1);
            }
            goto LABEL_50;
          }
          uint64_t v32 = (void *)__str[0].__r_.__value_.__r.__words[0];
        }
        operator delete(v32);
        goto LABEL_48;
      }
      std::string::size_type v33 = *(void *)a3;
      uint64_t v53 = v9;
      __p.__r_.__value_.__r.__words[0] = v33;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a3[2];
      unsigned __int16 v34 = *(NSObject **)(v9 + 288);
      blocdouble k = MEMORY[0x263EF8330];
      uint64_t v50 = 0x40000000;
      unsigned __int16 v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_91;
      uint64_t v52 = &__block_descriptor_tmp_98;
      dispatch_async(v34, &block);
      goto LABEL_48;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS DC Response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "Ga11_06HandleDataClientCallback", 770);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v22, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "Ga11_06HandleDataClientCallback");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v24, 5, 1);
    }
  }
LABEL_50:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v45 = mach_continuous_time();
    unsigned __int16 v46 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 68, "Ga11_02DataClientCallback");
    return LbsOsaTrace_WriteLog(0x18u, (char *)__str, v46, 5, 1);
  }
  return result;
}

void sub_22B875A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t gnss::GnssAdaptDevice::Ga11_03SimInfoCallback(gnss::GnssAdaptDevice *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga11_03SimInfoCallback");
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v5 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_07HandleSimInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
    }
    uint64_t v8 = *(NSObject **)(v5 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice28Ga11_07HandleSimInfoCallbackEv_block_invoke;
    block[3] = &__block_descriptor_tmp_100;
    block[4] = v5;
    dispatch_async(v8, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "Ga11_07HandleSimInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga11_03SimInfoCallback");
    return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga11_17SuplAsyncEventCB(int a1, uint64_t a2, long long *a3)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(&__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_17SuplAsyncEventCB");
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v7, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v9 = DeviceInstance;
    switch(a1)
    {
      case 0:
      case 2:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx Supl Msg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 770, a1);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v11, 0, 1);
        }
        break;
      case 1:
        if (a3)
        {
          *(void *)uint64_t v93 = 0;
          *(void *)&unsigned char v93[8] = 0;
          *(void *)&v93[14] = 0;
          uint64_t v12 = -1;
          *(void *)&v92[1] = -1;
          *(_DWORD *)&v92[8] = -1;
          uint64_t v13 = *((void *)a3 + 1);
          if (v13)
          {
            int v14 = *(_DWORD *)v13;
            char v15 = *(unsigned char *)(v13 + 4);
            char v16 = *(unsigned char *)(v13 + 5);
            __int16 v80 = *(_WORD *)(v13 + 6);
            long long v17 = *(_OWORD *)(v13 + 8);
            *(_OWORD *)uint64_t v93 = *(_OWORD *)(v13 + 24);
            *(void *)&v93[14] = *(void *)(v13 + 38);
            char v18 = *(unsigned char *)(v13 + 46);
            char v19 = *(unsigned char *)(v13 + 47);
            char v20 = *(unsigned char *)(v13 + 48);
            __int16 v85 = *(_WORD *)(v13 + 49);
            char v86 = *(unsigned char *)(v13 + 51);
            int v21 = *(_DWORD *)(v13 + 52);
            uint64_t v22 = *(void *)(v13 + 56);
            uint64_t v23 = *(void *)(v13 + 64);
            __int16 v24 = *(_WORD *)(v13 + 72);
            __int16 v25 = *(_WORD *)(v13 + 74);
            char v26 = *(unsigned char *)(v13 + 76);
            *(_DWORD *)&v92[8] = *(_DWORD *)(v13 + 85);
            *(void *)unsigned __int16 v92 = *(void *)(v13 + 77);
            char v84 = *(unsigned char *)(v13 + 91);
            __int16 v83 = *(_WORD *)(v13 + 89);
            uint64_t v12 = *(void *)(v13 + 92);
            uint64_t v27 = *(void *)(v13 + 100);
            char v28 = *(unsigned char *)(v13 + 108);
            char v79 = *(unsigned char *)(v13 + 109);
            __int16 v29 = *(_WORD *)(v13 + 110);
            unint64_t v30 = *(void *)(v13 + 112);
          }
          else
          {
            char v28 = 0;
            int v21 = 0;
            char v20 = 0;
            char v16 = 0;
            char v15 = 0;
            unint64_t v30 = 0xFFFFFFFF7FFFFFFFLL;
            uint64_t v27 = 0x7FFFFFFFLL;
            uint64_t v23 = 0;
            long long v17 = xmmword_22BB0C140;
            int v14 = -1;
            char v26 = -1;
            __int16 v29 = -1;
            __int16 v25 = -1;
            __int16 v24 = -1;
            uint64_t v22 = -1;
            char v19 = -1;
            char v18 = -1;
          }
          memset(&v91[32], 0, 22);
          uint64_t v53 = *((void *)a3 + 3);
          if (v53)
          {
            uint64_t v54 = *(void *)v53;
            *(_OWORD *)&v91[32] = *(_OWORD *)(v53 + 8);
            *(void *)&v91[46] = *(void *)(v53 + 22);
            char v55 = *(unsigned char *)(v53 + 30);
            char v56 = *(unsigned char *)(v53 + 31);
            char v57 = *(unsigned char *)(v53 + 32);
            __int16 v81 = *(_WORD *)(v53 + 33);
            char v82 = *(unsigned char *)(v53 + 35);
            int v58 = *(_DWORD *)(v53 + 36);
            uint64_t v59 = *(void *)(v53 + 40);
            int v60 = *(_DWORD *)(v53 + 48);
          }
          else
          {
            int v60 = 0;
            int v58 = 0;
            char v57 = 0;
            uint64_t v54 = 0x700000000;
            uint64_t v59 = -1;
            char v56 = -1;
            char v55 = -1;
          }
          LODWORD(v87) = 0;
          WORD2(v87) = -1;
          DWORD2(v87) = 0x7FFFFFFF;
          WORD6(v87) = 0;
          LODWORD(v88) = -1;
          uint64_t v61 = 22;
          BYTE4(v88) = 0;
          do
          {
            uint64_t v62 = (char *)&v87 + v61;
            *uint64_t v62 = -1;
            *(_DWORD *)(v62 + 1) = 0;
            v62[5] = 0;
            v61 += 6;
          }
          while (v62 + 6 != &v91[22]);
          *(_DWORD *)&v91[24] = 0;
          unsigned __int16 v63 = (long long *)*((void *)a3 + 2);
          if (v63)
          {
            long long v64 = *v63;
            long long v65 = v63[1];
            long long v66 = v63[3];
            *(_OWORD *)uint64_t v89 = v63[2];
            *(_OWORD *)&v89[16] = v66;
            long long v87 = v64;
            long long v88 = v65;
            long long v67 = v63[4];
            long long v68 = v63[5];
            long long v69 = v63[6];
            *(_OWORD *)&v91[12] = *(long long *)((char *)v63 + 108);
            long long v90 = v68;
            *(_OWORD *)uint64_t v91 = v69;
            *(_OWORD *)&v89[32] = v67;
          }
          unsigned __int16 v34 = *(NSObject **)(v9 + 288);
          uint64_t __str = MEMORY[0x263EF8330];
          uint64_t v95 = 0x40000000;
          uint64_t v96 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2_155;
          unsigned __int16 v97 = &__block_descriptor_tmp_156;
          uint64_t v98 = (long long *)v9;
          long long v70 = a3[1];
          long long v99 = *a3;
          long long v100 = v70;
          long long v101 = a3[2];
          uint64_t v102 = *((void *)a3 + 6);
          int v103 = v14;
          char v104 = v15;
          char v105 = v16;
          __int16 v106 = v80;
          *(void *)&v108[14] = *(void *)&v93[14];
          long long v107 = v17;
          *(_OWORD *)unsigned __int16 v108 = *(_OWORD *)v93;
          char v109 = v18;
          char v110 = v19;
          char v111 = v20;
          char v113 = v86;
          __int16 v112 = v85;
          int v114 = v21;
          uint64_t v115 = v22;
          uint64_t v116 = v23;
          __int16 v117 = v24;
          __int16 v118 = v25;
          char v119 = v26;
          int v121 = *(_DWORD *)&v92[8];
          uint64_t v120 = *(void *)v92;
          char v123 = v84;
          __int16 v122 = v83;
          uint64_t v124 = v12;
          uint64_t v125 = v27;
          char v126 = v28;
          char v127 = v79;
          __int16 v128 = v29;
          unint64_t v129 = v30;
          uint64_t v130 = v54;
          *(void *)&v131[14] = *(void *)&v91[46];
          *(_OWORD *)BOOL v131 = *(_OWORD *)&v91[32];
          char v132 = v55;
          char v133 = v56;
          char v134 = v57;
          char v136 = v82;
          __int16 v135 = v81;
          uint64_t v138 = v59;
          int v137 = v58;
          int v139 = v60;
          long long v142 = *(_OWORD *)v89;
          long long v143 = *(_OWORD *)&v89[16];
          long long v140 = v87;
          long long v141 = v88;
          *(_OWORD *)((char *)v146 + 12) = *(_OWORD *)&v91[12];
          long long v145 = v90;
          v146[0] = *(_OWORD *)v91;
          long long v144 = *(_OWORD *)&v89[32];
          goto LABEL_40;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
          goto LABEL_30;
        }
        break;
      case 3:
        if (a3)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(&__str, 0x410uLL);
            uint64_t v31 = mach_continuous_time();
            unsigned __int16 v32 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: API,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 73, "Ga11_18HandleSuplAsyncEventCB", *((_DWORD *)a3 + 1), *(_DWORD *)a3, *((_DWORD *)a3 + 2));
            LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v32, 4, 1);
          }
          uint64_t v33 = *(void *)a3;
          uint64_t v98 = (long long *)v9;
          *(void *)&long long v99 = v33;
          DWORD2(v99) = *((_DWORD *)a3 + 2);
          unsigned __int16 v34 = *(NSObject **)(v9 + 288);
          uint64_t __str = MEMORY[0x263EF8330];
          uint64_t v95 = 0x40000000;
          uint64_t v96 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke;
          unsigned __int16 v97 = &__block_descriptor_tmp_149;
LABEL_40:
          dispatch_async(v34, &__str);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          goto LABEL_30;
        }
        break;
      case 4:
        if (a3)
        {
          *(void *)&long long v87 = 0;
          *((void *)&v87 + 1) = &v87;
          *(void *)&long long v88 = 0x5002000000;
          *((void *)&v88 + 1) = __Block_byref_object_copy_;
          *(void *)uint64_t v89 = __Block_byref_object_dispose_;
          *(_OWORD *)&v89[8] = *a3;
          *(_OWORD *)&v89[24] = a3[1];
          *(void *)&v89[40] = *((void *)a3 + 4);
          if (*((void *)a3 + 1))
          {
            uint64_t v35 = (char *)gnssOsa_Calloc("Ga11_18HandleSuplAsyncEventCB", 1667, 1, 0x28uLL);
            *(void *)(*((void *)&v87 + 1) + 48) = v35;
            if (!v35)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(&__str, 0x410uLL);
                uint64_t v74 = mach_continuous_time();
                unsigned __int16 v75 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_SummaryReport.p_PosReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 1537);
                LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v75, 0, 1);
              }
              goto LABEL_22;
            }
            unsigned __int16 v36 = (long long *)*((void *)a3 + 1);
            long long v37 = *v36;
            long long v38 = v36[1];
            *(void *)(v35 + 31) = *(void *)((char *)v36 + 31);
            *(_OWORD *)uint64_t v35 = v37;
            *((_OWORD *)v35 + 1) = v38;
          }
          if (*((void *)a3 + 2))
          {
            uint64_t v39 = gnssOsa_Calloc("Ga11_18HandleSuplAsyncEventCB", 1677, 1, 0x78uLL);
            uint64_t v40 = *((void *)&v87 + 1);
            *(void *)(*((void *)&v87 + 1) + 56) = v39;
            if (!v39)
            {
              unsigned __int16 v76 = *(void **)(v40 + 48);
              if (v76)
              {
                free(v76);
                uint64_t v40 = *((void *)&v87 + 1);
              }
              *(void *)(v40 + 48) = 0;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(&__str, 0x410uLL);
                uint64_t v77 = mach_continuous_time();
                unsigned __int16 v78 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_SummaryReport.p_PosResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 1537);
                LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v78, 0, 1);
              }
              goto LABEL_22;
            }
            unsigned __int16 v41 = (long long *)*((void *)a3 + 2);
            long long v42 = *v41;
            long long v43 = v41[1];
            long long v44 = v41[3];
            v39[2] = v41[2];
            v39[3] = v44;
            *uint64_t v39 = v42;
            v39[1] = v43;
            long long v45 = v41[4];
            long long v46 = v41[5];
            long long v47 = v41[6];
            *((void *)v39 + 14) = *((void *)v41 + 14);
            v39[5] = v46;
            v39[6] = v47;
            v39[4] = v45;
          }
          unsigned __int16 v48 = *(NSObject **)(v9 + 288);
          uint64_t __str = MEMORY[0x263EF8330];
          uint64_t v95 = 0x40000000;
          uint64_t v96 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_152;
          unsigned __int16 v97 = &unk_2648B1500;
          uint64_t v98 = &v87;
          *(void *)&long long v99 = v9;
          dispatch_async(v48, &__str);
LABEL_22:
          _Block_object_dispose(&v87, 8);
          break;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
LABEL_30:
          bzero(&__str, 0x410uLL);
          uint64_t v51 = mach_continuous_time();
          unsigned __int16 v52 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v52, 0, 1);
        }
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          uint64_t v49 = mach_continuous_time();
          unsigned __int16 v50 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 515, a1);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v50, 0, 1);
        }
        break;
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(&__str, 0x410uLL);
    uint64_t v72 = mach_continuous_time();
    unsigned __int16 v73 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "ADP", 68, "Ga11_17SuplAsyncEventCB");
    return LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v73, 5, 1);
  }
  return result;
}

void sub_22B8768BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::Ga11_21GnsWlanInfoCB(gnss::GnssAdaptDevice *a1, uint64_t a2, int *a3)
{
  int v4 = (int)a1;
  uint64_t v36 = *MEMORY[0x263EF8340];
  size_t result = (void *)gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (result)
  {
    uint64_t v6 = result;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType(0,CapReq,1,MeasReq),%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga11_22HandleGnsWlanInfoCB", v4);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
    }
    if (v4 == 1)
    {
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)(v6 + 119));
      __int16 v29 = 0;
      uint64_t v9 = v27;
      if (v27)
      {
        uint64_t v10 = operator new(0x28uLL);
        unsigned __int16 v11 = v10;
        *uint64_t v10 = &unk_26DF18000;
        if (v9 == v26)
        {
          void v10[4] = v10 + 1;
          (*(void (**)(void *))(v26[0] + 24))(v26);
        }
        else
        {
          void v10[4] = v9;
          uint64_t v27 = 0;
        }
        __int16 v29 = v11;
      }
      std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](v26);
      if (v29)
      {
        if (a3)
        {
          int v14 = *a3;
          unsigned int v15 = a3[2] / 0x3E8u;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            uint64_t v17 = 84;
            if ((v14 & 1) == 0) {
              uint64_t v17 = 70;
            }
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WLAN MEAS REQ RspTime,%u,isRssiRequested,%c\n", (unint64_t)v16, "ADP", 73, "Ga11_22HandleGnsWlanInfoCB", (unsigned __int16)v15, v17);
            LbsOsaTrace_WriteLog(0x18u, __str, v18, 4, 1);
          }
          char v19 = v6[37];
          *(void *)uint64_t __str = MEMORY[0x263EF8330];
          uint64_t v31 = 1174405120;
          unsigned __int16 v32 = ___ZN4gnss15GnssAdaptDevice26Ga11_22HandleGnsWlanInfoCBE11e_gnsWL_MsgP15u_gnsWL_MsgData_block_invoke;
          uint64_t v33 = &__block_descriptor_tmp_175;
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)v28);
          int v35 = (unsigned __int16)v15 | ((v14 & 1) << 16);
          dispatch_async(v19, __str);
          std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v34);
          return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v28);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx p_MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 513);
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v28);
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Meas ReqCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 258);
          LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v28);
        }
      }
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga11_22HandleGnsWlanInfoCB");
      LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
      return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v28);
    }
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS WLAN MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 770, v4);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
  }
  return result;
}

void sub_22B876E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo(gnss::GnssAdaptDevice *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga11_08ProvideDefaultSimInfo");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  int v6 = 16711681;
  char v7 = 0;
  GNS_SimsInfoInd(&v6);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_08ProvideDefaultSimInfo");
    return LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  return result;
}

size_t ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 56))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Requesting LOCID from FW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v3, 4, 1);
    }
    uint64_t v4 = *(void *)(a1 + 56);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocationIdCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v1);
}

void *___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_65(void *result)
{
  uint64_t v1 = result;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)result + 10);
  if (v2 == 1)
  {
    if (*((_DWORD *)result + 11) != 1)
    {
      size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI is not accepted by stack,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback_block_invoke", 257, *((_DWORD *)v1 + 11));
        return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
    }
  }
  else
  {
    uint64_t v3 = result[4];
    if (v2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS SUPL API,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback_block_invoke", 770, *((_DWORD *)v1 + 10));
        LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
      }
      int v6 = 7;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LocId status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback_block_invoke", *((_DWORD *)v1 + 11));
        LbsOsaTrace_WriteLog(0x18u, __str, v5, 4, 1);
      }
      int v6 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v3, *((_DWORD *)v1 + 11));
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, v3 + 504);
    if (v17[3])
    {
      uint64_t v11 = *(NSObject **)(v3 + 296);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_2;
      block[3] = &__block_descriptor_tmp_69;
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v17);
      int v16 = v6;
      dispatch_async(v11, block);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocID RspCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback_block_invoke", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
  }
  return result;
}

void sub_22B87767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_2(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

uint64_t std::function<void ()(gnss::Result)>::operator()(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  int v1 = (void *)(a1 + 32);

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
}

size_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(uint64_t (****)(void, std::string *, void))(v2 + 48);
  int v4 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v28.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
  }
  int v5 = (**v3)(v3, &v28, *(unsigned __int16 *)(a1 + 68));
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (*(char *)(a1 + 63) < 0) {
      int v4 = *(const char **)v4;
    }
    uint64_t v7 = "FAILURE";
    if (v5 == -2) {
      uint64_t v7 = "SUCCESS";
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connection fqdn,%s,%u,status,%s\n", (unint64_t)v6, "ADP", 68, "Ga11_06HandleDataClientCallback_block_invoke", v4, *(unsigned __int16 *)(a1 + 68), v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connection status,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_06HandleDataClientCallback_block_invoke", v5);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  int v11 = 1;
  int v12 = 4;
  switch(v5)
  {
    case -5:
      break;
    case -4:
      int v12 = 6;
      break;
    case -3:
      goto LABEL_26;
    case -2:
      *(_DWORD *)(v2 + 1016) = *(_DWORD *)(a1 + 64);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "Ga11_04ReadSocketData");
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
      }
      int v15 = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48));
      int v16 = dispatch_source_create(MEMORY[0x263EF83E8], v15, 0, *(dispatch_queue_t *)(v2 + 304));
      if (!v16)
      {
        snprintf((char *)handler, 0x400uLL, "ASSERT,%s,%d,%s", "Ga11_04ReadSocketData", 1037, "DISPC SUPL Socket read failed");
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v26 = mach_continuous_time();
          unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "OSA", 69, "Ga11_04ReadSocketData", (const char *)handler);
          LbsOsaTrace_WriteLog(0xEu, __str, v27, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("Ga11_04ReadSocketData", "ga11AgnssSuplPos.cpp", 1037, "false && \"DISPC SUPL Socket read failed\"");
      }
      uint64_t v17 = v16;
      *(void *)(v2 + 96) = v16;
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 0x40000000;
      handler[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_112;
      handler[4] = v2;
      handler[5] = v16;
      dispatch_source_set_event_handler(v16, handler);
      v29[0] = MEMORY[0x263EF8330];
      v29[1] = 0x40000000;
      v29[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_2;
      v29[3] = &__block_descriptor_tmp_115;
      v29[4] = v2;
      v29[5] = v17;
      dispatch_source_set_cancel_handler(v17, v29);
      dispatch_resume(v17);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga11_04ReadSocketData");
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
      int v11 = 0;
      int v12 = 14;
      break;
    case -1:
      int v12 = 0;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConnStatus,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 87, "Ga11_06HandleDataClientCallback_block_invoke", 770, v5);
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 2, 1);
      }
      int v11 = 1;
LABEL_26:
      int v12 = 2;
      break;
  }
  size_t result = GNS_DcLinkRsp(v11, *(_DWORD *)(a1 + 64), v12);
  int v23 = result;
  if (result != 1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 257, v23);
      return LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
    }
  }
  return result;
}

void sub_22B877EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::size_type v4 = *(void *)(a2 + 48);
    int v5 = *(const std::string::value_type **)(a2 + 40);
    std::string::__init_copy_ctor_external(v2, v5, v4);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    int v1 = *(void **)(a1 + 40);
    operator delete(v1);
  }
}

uint64_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_86(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(void))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48)) == -3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Socket during Write\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 2055);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 0, 1);
    }
    int v5 = *(_DWORD *)(v2 + 1016);
    int v6 = 11;
  }
  else
  {
    int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48), a1 + 40);
    if (v7 == -3)
    {
      int v9 = 9;
    }
    else
    {
      int v8 = v7;
      if (v7 != -4)
      {
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Byte written,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga11_06HandleDataClientCallback_block_invoke", v8);
        int v16 = 5;
        return LbsOsaTrace_WriteLog(0x18u, __str, v15, v16, 1);
      }
      int v9 = 10;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Socket write,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 1796, v9);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    int v5 = *(_DWORD *)(a1 + 64);
    int v6 = v9;
  }
  uint64_t result = GNS_DcLinkRsp(4, v5, v6);
  if (result != 1)
  {
    int v13 = result;
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 257, v13);
      int v16 = 0;
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, v16, 1);
    }
  }
  return result;
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  v3[2] = 0;
  unsigned __int16 v4 = *(const void **)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);

  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v3, v4, v5, v5 - (void)v4);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_91(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DCApiStatus Api,%u,id,%u,Stat,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 73, "Ga11_06HandleDataClientCallback_block_invoke", *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
    uint64_t result = (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 4, 1);
  }
  int v6 = *(_DWORD *)(a1 + 44);
  if ((v6 - 1) >= 2)
  {
    if (v6)
    {
      uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS DC API\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 770);
        return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
      }
    }
    else
    {
      int v10 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, *(_DWORD *)(a1 + 48));
      if (v10 == 1) {
        *(_DWORD *)(v2 + 1016) = *(_DWORD *)(a1 + 40);
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v19, v2 + 536);
      if (v19[3])
      {
        unsigned __int16 v11 = *(NSObject **)(v2 + 296);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 1174405120;
        block[2] = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_2;
        block[3] = &__block_descriptor_tmp_95;
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v19);
        int v18 = v10;
        dispatch_async(v11, block);
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v17);
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT Rsp Cb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v19);
    }
  }
  else if (*(_DWORD *)(a1 + 48) != 1)
  {
    uint64_t result = (void *)GNS_SuplAbortSession(*(_DWORD *)(v2 + 1016));
    int v7 = (int)result;
    if (result != 1)
    {
      uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplAbortSession,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 770, v7);
        uint64_t result = (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
      }
    }
    *(_DWORD *)(v2 + 1016) = 0;
  }
  return result;
}

void sub_22B8787AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_2(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

size_t ___ZN4gnss15GnssAdaptDevice28Ga11_07HandleSimInfoCallbackEv_block_invoke(gnss::GnssAdaptDevice *this)
{
  return gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo(this);
}

void ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uintptr_t data = dispatch_source_get_data(*(dispatch_source_t *)(a1 + 40));
  if (!data) {
    return;
  }
  uintptr_t v3 = data;
  if ((*(unsigned int (**)(void))(**(void **)(v1 + 48) + 32))(*(void *)(v1 + 48)) == -3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Session while Reading\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 2055);
      LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
    int v6 = GNS_DcLinkRsp(4, *(_DWORD *)(v1 + 1016), 11);
    if (v6 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v6);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
    }
    return;
  }
  std::string __p = 0;
  unsigned __int16 v27 = 0;
  uint64_t v28 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bytes on Sock,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_04ReadSocketData_block_invoke", v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  int v11 = (*(uint64_t (**)(void, void **))(**(void **)(v1 + 48) + 8))(*(void *)(v1 + 48), &__p);
  int v12 = v11;
  if (v11 == -4)
  {
    int v13 = 8;
  }
  else
  {
    if (v11 != -3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bytes read,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga11_04ReadSocketData_block_invoke", v12);
        LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Socket read buf size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "Ga11_04ReadSocketData_block_invoke", v27 - __p);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 4, 1);
      }
      gnss::GnssAdaptDevice::Ga11_09TraceBuffer(&__p);
      int v23 = GNS_DcSuplPdu(*(_DWORD *)(v1 + 1016), (unsigned __int8 *)__p, (v27 - __p));
      if (v23 != 1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcSuplPdu,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v23);
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
      }
      goto LABEL_26;
    }
    int v13 = 7;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Socket read,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 1797, v13);
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
  }
  int v16 = GNS_DcLinkRsp(4, *(_DWORD *)(v1 + 1016), v13);
  if (v16 != 1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v16);
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
  }
LABEL_26:
  if (__p)
  {
    unsigned __int16 v27 = __p;
    operator delete(__p);
  }
}

void sub_22B878E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_2(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: dispatch_source_set_cancel_handler\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga11_04ReadSocketData_block_invoke_2");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  unsigned __int16 v5 = *(NSObject **)(v2 + 288);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_3;
  block[3] = &__block_descriptor_tmp_114;
  void block[4] = v2;
  dispatch_async(v5, block);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

size_t ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_3(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 1016) = 0;
  unsigned int v2 = (*(uint64_t (**)(void))(**(void **)(v1 + 48) + 24))(*(void *)(v1 + 48));
  if (v2 <= 0xFFFFFFFD) {
    int v3 = 13;
  }
  else {
    int v3 = 15;
  }
  if (v2 <= 0xFFFFFFFD) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  size_t result = GNS_DcLinkRsp(v4, *(_DWORD *)(v1 + 1020), v3);
  *(_DWORD *)(v1 + 1020) = -1;
  if (result != 1)
  {
    int v6 = result;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_04ReadSocketData_block_invoke_3", 257, v6);
      return LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  unsigned __int16 v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  unsigned __int16 v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22B879400(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x230F4E540](v1);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  v8[1] = *(std::locale *)MEMORY[0x263EF8340];
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unsigned __int16 v5 = std::locale::use_facet(v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_22B879508(_Unwind_Exception *exception_object)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x230F4E540](a1 + 128);
  return a1;
}

uint64_t gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect(const char *a1, unint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if (a1 && (int v6 = strnlen(a1, 0x100uLL), (v6 & 0xFFFFFEFF) == 0))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Wrong IP address len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "Ga11_15ConvertStringIPtoVect", 257, v6);
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
      return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
    }
  }
  else
  {
    uint64_t v7 = (unsigned char *)a2[1];
    do
    {
      unint64_t v8 = a2[2];
      if ((unint64_t)v7 >= v8)
      {
        unint64_t v10 = *a2;
        uint64_t v11 = &v7[-*a2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          unsigned __int16 v15 = (char *)operator new(v14);
        }
        else {
          unsigned __int16 v15 = 0;
        }
        int v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        *uint64_t v17 = 0;
        uint64_t v9 = v17 + 1;
        if (v7 != (unsigned char *)v10)
        {
          unsigned __int16 v18 = &v7[~v10];
          do
          {
            char v19 = *--v7;
            (v18--)[(void)v15] = v19;
          }
          while (v7 != (unsigned char *)v10);
          uint64_t v7 = (unsigned char *)*a2;
          int v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v7 = 0;
        uint64_t v9 = v7 + 1;
      }
      a2[1] = (unint64_t)v9;
      int v20 = *(unsigned __int8 *)a1++;
      uint64_t v7 = v9;
    }
    while (v20);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPVectorSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga11_15ConvertStringIPtoVect", *((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
      return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 44) == 1)
  {
    if (*(_DWORD *)(v2 + 1016) == *(_DWORD *)(a1 + 40))
    {
      int v3 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(*(void *)(a1 + 32), *(_DWORD *)(a1 + 48));
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionId mismatch GL,%u,GNS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB_block_invoke", 770, *(_DWORD *)(v2 + 1016), *(_DWORD *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Api,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB_block_invoke", 770, *(_DWORD *)(a1 + 44));
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  int v3 = 8;
LABEL_9:
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, v2 + 568);
  if (v15[3])
  {
    unint64_t v8 = *(NSObject **)(v2 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2;
    block[3] = &__block_descriptor_tmp_147;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v15);
    int v14 = v3;
    dispatch_async(v8, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplAbortRspCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v15);
}

void sub_22B879D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_152(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  int v4 = *(_DWORD *)(v3 + 68);
  if (v4 == 2)
  {
    uint64_t v5 = *(void *)(v3 + 56);
    if (!v5) {
      goto LABEL_20;
    }
    int v6 = *(_DWORD *)(v5 + 20);
    if (v6 == 1) {
      goto LABEL_20;
    }
    if (v6 == 9)
    {
      int v4 = 3;
      goto LABEL_21;
    }
    unsigned __int16 v7 = *(int **)(v3 + 48);
    if (!v7) {
      goto LABEL_20;
    }
    int v8 = *v7;
    if ((*v7 - 2) < 2)
    {
      BOOL v9 = (v7[9] & 1) == 0;
      int v10 = 19;
LABEL_12:
      if (v9) {
        int v4 = 2;
      }
      else {
        int v4 = v10;
      }
      goto LABEL_21;
    }
    if (v8)
    {
      if (v8 == 1)
      {
        BOOL v9 = (v7[9] & 1) == 0;
        int v10 = 18;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v12 = **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
        int v13 = 515;
        goto LABEL_19;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v12 = **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
      int v13 = 770;
LABEL_19:
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoType,%u\n", v11, "ADP", 69, "Ga11_18HandleSuplAsyncEventCB_block_invoke", v13, v12);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
LABEL_20:
    int v4 = 2;
  }
LABEL_21:
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  int v16 = *(_DWORD *)(v15 + 40);
  uint64_t v17 = *(void *)(v2 + 128);
  uint64_t v18 = *(void *)(v2 + 136) - v17;
  if (v18)
  {
    uint64_t v19 = (unsigned __int128)(v18 * (__int128)0x5397829CBC14E5E1) >> 64;
    unint64_t v20 = (v19 >> 6) + ((unint64_t)v19 >> 63);
    if (v20 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = (v19 >> 6) + ((unint64_t)v19 >> 63);
    }
    if (*(_DWORD *)(v17 + 56) == v16)
    {
      unint64_t v22 = 0;
LABEL_27:
      if (v22 < v20)
      {
        int v23 = *(long long **)(v15 + 48);
        if (v23)
        {
          uint64_t v24 = v17 + 196 * v22;
          long long v25 = *v23;
          long long v26 = v23[1];
          *(void *)(v24 + 31) = *(void *)((char *)v23 + 31);
          *(_OWORD *)uint64_t v24 = v25;
          *(_OWORD *)(v24 + 16) = v26;
          uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v17 = *(void *)(v2 + 128);
        }
        unsigned __int16 v27 = *(long long **)(v15 + 56);
        if (v27)
        {
          uint64_t v28 = v17 + 196 * v22;
          long long v29 = *v27;
          long long v30 = v27[1];
          long long v31 = v27[3];
          *(_OWORD *)(v28 + 96) = v27[2];
          *(_OWORD *)(v28 + 112) = v31;
          *(_OWORD *)(v28 + 64) = v29;
          *(_OWORD *)(v28 + 80) = v30;
          long long v32 = v27[4];
          long long v33 = v27[5];
          long long v34 = v27[6];
          *(void *)(v28 + 176) = *((void *)v27 + 14);
          *(_OWORD *)(v28 + 144) = v33;
          *(_OWORD *)(v28 + 160) = v34;
          *(_OWORD *)(v28 + 128) = v32;
          uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v17 = *(void *)(v2 + 128);
        }
        *(_DWORD *)(v17 + 196 * v22 + 184) = *(_DWORD *)(v15 + 64);
        uint64_t v35 = *(void *)(*(void *)(a1 + 32) + 8);
        if (*(_DWORD *)(v35 + 68) == 2)
        {
          int v36 = *(_DWORD *)(v17 + 196 * v22 + 188);
          if (v36 == 22) {
            int v37 = 23;
          }
          else {
            int v37 = v4;
          }
          if (v36 == 28) {
            int v4 = 22;
          }
          else {
            int v4 = v37;
          }
        }
        unsigned int v38 = *(_DWORD *)(v35 + 72) - 1;
        if (v38 >= 3) {
          unsigned int v38 = -1;
        }
        *(_DWORD *)(v17 + 196 * v22 + 44) = v38;
        int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v39 = (int *)(v17 + 252);
      uint64_t v40 = v21 - 1;
      while (v40 != v22)
      {
        int v41 = *v39;
        v39 += 49;
        ++v22;
        if (v41 == v16)
        {
          if (v22 < v20) {
            goto LABEL_27;
          }
          break;
        }
      }
    }
  }
  gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v2, v16, 1, v4);
  uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v43 = *(void **)(v42 + 48);
  if (v43)
  {
    free(v43);
    uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v42 + 48) = 0;
  uint64_t v44 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v45 = *(void **)(v44 + 56);
  if (v45)
  {
    free(v45);
    uint64_t v44 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v44 + 56) = 0;
}

void *___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2_155(void *result)
{
  uint64_t v166 = *MEMORY[0x263EF8340];
  int v1 = (void *)result[4];
  unsigned int v2 = *((_DWORD *)result + 10);
  int v3 = *((_DWORD *)result + 18);
  int v4 = *((_DWORD *)result + 19);
  int v6 = *((_DWORD *)result + 20);
  int v5 = *((_DWORD *)result + 21);
  unsigned int v7 = *((unsigned __int8 *)result + 88);
  long long v8 = *((_OWORD *)result + 11);
  long long v140 = *((_OWORD *)result + 10);
  long long v141 = v8;
  long long v142 = *((_OWORD *)result + 12);
  uint64_t v143 = result[26];
  long long v9 = *((_OWORD *)result + 7);
  long long v136 = *((_OWORD *)result + 6);
  long long v137 = v9;
  long long v10 = *((_OWORD *)result + 9);
  long long v138 = *((_OWORD *)result + 8);
  long long v139 = v10;
  signed int v11 = *((_DWORD *)result + 60);
  int v132 = *((__int16 *)result + 122);
  unsigned int v133 = *((unsigned __int8 *)result + 246);
  unsigned int v134 = *((unsigned __int8 *)result + 256);
  unsigned int v135 = *((_DWORD *)result + 59);
  int v12 = *((unsigned __int8 *)result + 257);
  unsigned int v129 = *((_DWORD *)result + 67);
  unsigned int v130 = *((unsigned __int16 *)result + 136);
  int v131 = *((_DWORD *)result + 63);
  int v127 = *((_DWORD *)result + 58);
  unsigned int v128 = *((unsigned __int16 *)result + 140);
  if (v3 != 30) {
    goto LABEL_5;
  }
  if (DWORD1(v137) == 1) {
    __n128 result = gnss::GnssAdaptDevice::Ga10_17InvokePVTMCbForE911((uint64_t)v1, (int *)&v136);
  }
  if (BYTE4(v136))
  {
LABEL_5:
    long long v145 = xmmword_22BB0C150;
    int64x2_t v146 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    __asm { FMOV            V0.2D, #-1.0 }
    long long v147 = _Q0;
    *(void *)&long long v148 = 0xBFF0000000000000;
    WORD4(v148) = 0;
    BYTE10(v148) = 0;
    HIDWORD(v148) = 0;
    int64x2_t v149 = v146;
    long long v150 = xmmword_22BB0C160;
    *(void *)&long long v151 = 0xBFF0000000000000;
    WORD4(v151) = -1;
    LODWORD(v152) = -1;
    WORD2(v152) = -1;
    *((void *)&v152 + 1) = 0xBFF0000000000000;
    long long v144 = v2;
    gnss::GnssAdaptDevice::Ga11_10ConvertGNSPosMethodToE911PosMethod(v6, (int *)&v144 + 1);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL Event,%u,SessionStatus,%u,SuplEndCause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "Ga11_20SendStatusReport", v4, v3, v5);
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
    }
    switch(v4)
    {
      case 0:
      case 4:
      case 5:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        goto LABEL_8;
      case 1:
        DWORD2(v144) = 1;
        long long v26 = (char *)v1[19];
        long long v25 = (char *)v1[20];
        if (v25 != v26)
        {
          char v27 = *v26;
          memset(&__str[2], 0, 27);
          *(void *)&v153[1] = -1;
          *(_DWORD *)&v153[8] = -1;
          uint64_t v28 = v25 - (v26 + 1);
          if (v25 != v26 + 1)
          {
            char v29 = v27;
            memmove(v26, v26 + 1, v25 - (v26 + 1));
            char v27 = v29;
          }
          v1[20] = &v26[v28];
          uint64_t v31 = v1[16];
          unint64_t v30 = v1[17];
          unint64_t v32 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v30 - v31) >> 2);
          if (v32 <= 3)
          {
            char v33 = v27 & 1;
            int v34 = v144;
            unint64_t v35 = v1[18];
            if (v30 >= v35)
            {
              unint64_t v91 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v35 - v31) >> 2);
              if (2 * v91 <= v32 + 1) {
                uint64_t v92 = v32 + 1;
              }
              else {
                uint64_t v92 = 2 * v91;
              }
              if (v91 >= 0xA72F05397829CBLL) {
                unint64_t v93 = 0x14E5E0A72F05397;
              }
              else {
                unint64_t v93 = v92;
              }
              unsigned __int16 v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>((uint64_t)(v1 + 18), v93);
              uint64_t v95 = &v94[196 * v32];
              unsigned __int16 v97 = &v94[196 * v96];
              *(void *)uint64_t v95 = 0xFFFFFFFF00000000;
              *((_WORD *)v95 + 4) = -1;
              *(_OWORD *)(v95 + 10) = *(_OWORD *)__str;
              *(_OWORD *)(v95 + 23) = *(_OWORD *)&__str[13];
              *((void *)v95 + 5) = 0xFFFFFFFF00000000;
              v95[48] = v33;
              *((_DWORD *)v95 + 13) = -1;
              *((_DWORD *)v95 + 14) = v34;
              v95[60] = 0;
              *((_DWORD *)v95 + 16) = -1;
              *((_WORD *)v95 + 34) = 0;
              *(_OWORD *)(v95 + 72) = xmmword_22BB0C140;
              *(void *)(v95 + 102) = 0;
              *((void *)v95 + 11) = 0;
              *((void *)v95 + 12) = 0;
              *((_WORD *)v95 + 55) = -1;
              v95[112] = 0;
              *((_DWORD *)v95 + 29) = 0;
              *((void *)v95 + 15) = -1;
              *((void *)v95 + 16) = 0;
              *((_DWORD *)v95 + 34) = -1;
              v95[140] = -1;
              *(void *)(v95 + 141) = *(void *)v153;
              *(_DWORD *)(v95 + 149) = *(_DWORD *)&v153[8];
              *(void *)(v95 + 156) = -1;
              *(void *)(v95 + 164) = 0x7FFFFFFFLL;
              v95[172] = 0;
              *((_WORD *)v95 + 87) = -1;
              *((void *)v95 + 22) = 0xFFFFFFFF7FFFFFFFLL;
              *((_WORD *)v95 + 96) = 0;
              *((void *)v95 + 23) = 0;
              int v36 = v95 + 196;
              long long v99 = (char *)v1[16];
              uint64_t v98 = (char *)v1[17];
              if (v98 != v99)
              {
                do
                {
                  *(_OWORD *)(v95 - 196) = *(_OWORD *)(v98 - 196);
                  long long v100 = *(_OWORD *)(v98 - 180);
                  long long v101 = *(_OWORD *)(v98 - 164);
                  long long v102 = *(_OWORD *)(v98 - 148);
                  *(_OWORD *)(v95 - 132) = *(_OWORD *)(v98 - 132);
                  *(_OWORD *)(v95 - 148) = v102;
                  *(_OWORD *)(v95 - 164) = v101;
                  *(_OWORD *)(v95 - 180) = v100;
                  long long v103 = *(_OWORD *)(v98 - 116);
                  long long v104 = *(_OWORD *)(v98 - 100);
                  long long v105 = *(_OWORD *)(v98 - 84);
                  *(_OWORD *)(v95 - 68) = *(_OWORD *)(v98 - 68);
                  *(_OWORD *)(v95 - 84) = v105;
                  *(_OWORD *)(v95 - 100) = v104;
                  *(_OWORD *)(v95 - 116) = v103;
                  long long v106 = *(_OWORD *)(v98 - 52);
                  long long v107 = *(_OWORD *)(v98 - 36);
                  long long v108 = *(_OWORD *)(v98 - 20);
                  *((_WORD *)v95 - 2) = *((_WORD *)v98 - 2);
                  *(_OWORD *)(v95 - 20) = v108;
                  *(_OWORD *)(v95 - 36) = v107;
                  *(_OWORD *)(v95 - 52) = v106;
                  v95 -= 196;
                  v98 -= 196;
                }
                while (v98 != v99);
                uint64_t v98 = (char *)v1[16];
              }
              v1[16] = v95;
              v1[17] = v36;
              v1[18] = v97;
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)unint64_t v30 = 0xFFFFFFFF00000000;
              *(_WORD *)(v30 + 8) = -1;
              *(_OWORD *)(v30 + 10) = *(_OWORD *)__str;
              *(_OWORD *)(v30 + 23) = *(_OWORD *)&__str[13];
              *(void *)(v30 + 40) = 0xFFFFFFFF00000000;
              *(unsigned char *)(v30 + 48) = v33;
              *(_DWORD *)(v30 + 52) = -1;
              *(_DWORD *)(v30 + 56) = v34;
              *(unsigned char *)(v30 + 60) = 0;
              *(_DWORD *)(v30 + 64) = -1;
              *(_WORD *)(v30 + 68) = 0;
              *(_OWORD *)(v30 + 72) = xmmword_22BB0C140;
              *(void *)(v30 + 102) = 0;
              *(void *)(v30 + 88) = 0;
              *(void *)(v30 + 96) = 0;
              *(_WORD *)(v30 + 110) = -1;
              *(unsigned char *)(v30 + 112) = 0;
              *(_DWORD *)(v30 + 116) = 0;
              *(void *)(v30 + 120) = -1;
              *(void *)(v30 + 128) = 0;
              *(_DWORD *)(v30 + 136) = -1;
              *(unsigned char *)(v30 + 140) = -1;
              *(void *)(v30 + 141) = *(void *)v153;
              *(_DWORD *)(v30 + 149) = *(_DWORD *)&v153[8];
              *(void *)(v30 + 156) = -1;
              *(void *)(v30 + 164) = 0x7FFFFFFFLL;
              *(unsigned char *)(v30 + 172) = 0;
              *(_WORD *)(v30 + 174) = -1;
              *(void *)(v30 + 176) = 0xFFFFFFFF7FFFFFFFLL;
              *(_WORD *)(v30 + 192) = 0;
              int v36 = (char *)(v30 + 196);
              *(void *)(v30 + 184) = 0;
            }
            v1[17] = v36;
          }
        }
        goto LABEL_8;
      case 2:
        unsigned int v38 = (char *)v1[19];
        int v37 = (char *)v1[20];
        if (v37 != v38)
        {
          char v39 = *v38;
          memset(&__str[2], 0, 27);
          *(void *)&v153[1] = -1;
          *(_DWORD *)&v153[8] = -1;
          uint64_t v40 = v37 - (v38 + 1);
          if (v37 != v38 + 1)
          {
            char v41 = v39;
            memmove(v38, v38 + 1, v37 - (v38 + 1));
            char v39 = v41;
          }
          v1[20] = &v38[v40];
          uint64_t v43 = v1[16];
          unint64_t v42 = v1[17];
          unint64_t v44 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v42 - v43) >> 2);
          if (v44 <= 3)
          {
            char v45 = v39 & 1;
            int v46 = v144;
            unint64_t v47 = v1[18];
            if (v42 >= v47)
            {
              unint64_t v109 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v47 - v43) >> 2);
              if (2 * v109 <= v44 + 1) {
                uint64_t v110 = v44 + 1;
              }
              else {
                uint64_t v110 = 2 * v109;
              }
              if (v109 >= 0xA72F05397829CBLL) {
                unint64_t v111 = 0x14E5E0A72F05397;
              }
              else {
                unint64_t v111 = v110;
              }
              __int16 v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>((uint64_t)(v1 + 18), v111);
              char v113 = &v112[196 * v44];
              uint64_t v115 = &v112[196 * v114];
              *(void *)char v113 = 0xFFFFFFFF00000000;
              *((_WORD *)v113 + 4) = -1;
              *(_OWORD *)(v113 + 10) = *(_OWORD *)__str;
              *(_OWORD *)(v113 + 23) = *(_OWORD *)&__str[13];
              *((void *)v113 + 5) = 0xFFFFFFFF00000000;
              v113[48] = v45;
              *((_DWORD *)v113 + 13) = -1;
              *((_DWORD *)v113 + 14) = v46;
              v113[60] = 0;
              *((_DWORD *)v113 + 16) = -1;
              *((_WORD *)v113 + 34) = 0;
              *(_OWORD *)(v113 + 72) = xmmword_22BB0C140;
              *(void *)(v113 + 102) = 0;
              *((void *)v113 + 11) = 0;
              *((void *)v113 + 12) = 0;
              *((_WORD *)v113 + 55) = -1;
              v113[112] = 0;
              *((_DWORD *)v113 + 29) = 0;
              *((void *)v113 + 15) = -1;
              *((void *)v113 + 16) = 0;
              *((_DWORD *)v113 + 34) = -1;
              v113[140] = -1;
              *(void *)(v113 + 141) = *(void *)v153;
              *(_DWORD *)(v113 + 149) = *(_DWORD *)&v153[8];
              *(void *)(v113 + 156) = -1;
              *(void *)(v113 + 164) = 0x7FFFFFFFLL;
              v113[172] = 0;
              *((_WORD *)v113 + 87) = -1;
              *((void *)v113 + 22) = 0xFFFFFFFF7FFFFFFFLL;
              *((_WORD *)v113 + 96) = 0;
              *((void *)v113 + 23) = 0;
              unsigned __int16 v48 = v113 + 196;
              __int16 v117 = (char *)v1[16];
              uint64_t v116 = (char *)v1[17];
              if (v116 != v117)
              {
                do
                {
                  *(_OWORD *)(v113 - 196) = *(_OWORD *)(v116 - 196);
                  long long v118 = *(_OWORD *)(v116 - 180);
                  long long v119 = *(_OWORD *)(v116 - 164);
                  long long v120 = *(_OWORD *)(v116 - 148);
                  *(_OWORD *)(v113 - 132) = *(_OWORD *)(v116 - 132);
                  *(_OWORD *)(v113 - 148) = v120;
                  *(_OWORD *)(v113 - 164) = v119;
                  *(_OWORD *)(v113 - 180) = v118;
                  long long v121 = *(_OWORD *)(v116 - 116);
                  long long v122 = *(_OWORD *)(v116 - 100);
                  long long v123 = *(_OWORD *)(v116 - 84);
                  *(_OWORD *)(v113 - 68) = *(_OWORD *)(v116 - 68);
                  *(_OWORD *)(v113 - 84) = v123;
                  *(_OWORD *)(v113 - 100) = v122;
                  *(_OWORD *)(v113 - 116) = v121;
                  long long v124 = *(_OWORD *)(v116 - 52);
                  long long v125 = *(_OWORD *)(v116 - 36);
                  long long v126 = *(_OWORD *)(v116 - 20);
                  *((_WORD *)v113 - 2) = *((_WORD *)v116 - 2);
                  *(_OWORD *)(v113 - 20) = v126;
                  *(_OWORD *)(v113 - 36) = v125;
                  *(_OWORD *)(v113 - 52) = v124;
                  v113 -= 196;
                  v116 -= 196;
                }
                while (v116 != v117);
                uint64_t v116 = (char *)v1[16];
              }
              v1[16] = v113;
              v1[17] = v48;
              v1[18] = v115;
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v42 = 0xFFFFFFFF00000000;
              *(_WORD *)(v42 + 8) = -1;
              *(_OWORD *)(v42 + 10) = *(_OWORD *)__str;
              *(_OWORD *)(v42 + 23) = *(_OWORD *)&__str[13];
              *(void *)(v42 + 40) = 0xFFFFFFFF00000000;
              *(unsigned char *)(v42 + 48) = v45;
              *(_DWORD *)(v42 + 52) = -1;
              *(_DWORD *)(v42 + 56) = v46;
              *(unsigned char *)(v42 + 60) = 0;
              *(_DWORD *)(v42 + 64) = -1;
              *(_WORD *)(v42 + 68) = 0;
              *(_OWORD *)(v42 + 72) = xmmword_22BB0C140;
              *(void *)(v42 + 102) = 0;
              *(void *)(v42 + 88) = 0;
              *(void *)(v42 + 96) = 0;
              *(_WORD *)(v42 + 110) = -1;
              *(unsigned char *)(v42 + 112) = 0;
              *(_DWORD *)(v42 + 116) = 0;
              *(void *)(v42 + 120) = -1;
              *(void *)(v42 + 128) = 0;
              *(_DWORD *)(v42 + 136) = -1;
              *(unsigned char *)(v42 + 140) = -1;
              *(void *)(v42 + 141) = *(void *)v153;
              *(_DWORD *)(v42 + 149) = *(_DWORD *)&v153[8];
              *(void *)(v42 + 156) = -1;
              *(void *)(v42 + 164) = 0x7FFFFFFFLL;
              *(unsigned char *)(v42 + 172) = 0;
              *(_WORD *)(v42 + 174) = -1;
              *(void *)(v42 + 176) = 0xFFFFFFFF7FFFFFFFLL;
              *(_WORD *)(v42 + 192) = 0;
              unsigned __int16 v48 = (char *)(v42 + 196);
              *(void *)(v42 + 184) = 0;
            }
            v1[17] = v48;
          }
        }
        gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport((uint64_t)v1, v144, 1, 3);
        goto LABEL_8;
      case 3:
        int v49 = 13;
        goto LABEL_28;
      case 6:
        int v49 = 30;
        goto LABEL_28;
      case 7:
        int v49 = 29;
LABEL_28:
        DWORD2(v144) = v49;
LABEL_29:
        int v20 = DWORD2(v144);
        goto LABEL_30;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL Event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga11_20SendStatusReport", 515, v4);
          LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
        }
LABEL_8:
        int v20 = DWORD2(v144);
        if (!DWORD2(v144))
        {
          int v21 = 22;
          int v20 = 21;
          switch(v3)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 17:
            case 24:
            case 38:
              break;
            case 5:
            case 8:
              int v22 = 3;
              goto LABEL_83;
            case 6:
              int v22 = 2;
              goto LABEL_83;
            case 7:
              int v22 = 5;
              goto LABEL_83;
            case 9:
              int v22 = 4;
              goto LABEL_83;
            case 10:
              int v22 = 6;
              goto LABEL_83;
            case 11:
              int v22 = 7;
              goto LABEL_83;
            case 12:
              int v22 = 8;
              goto LABEL_83;
            case 13:
              int v22 = 9;
              goto LABEL_83;
            case 14:
              int v22 = 12;
              goto LABEL_83;
            case 15:
              int v22 = 11;
              goto LABEL_83;
            case 16:
              int v22 = 10;
              goto LABEL_83;
            case 18:
            case 25:
              int v22 = 26;
              goto LABEL_83;
            case 19:
            case 26:
              int v22 = 20;
              goto LABEL_83;
            case 20:
            case 27:
              int v20 = 27;
              goto LABEL_62;
            case 21:
            case 28:
LABEL_62:
              DWORD2(v144) = v20;
              goto LABEL_32;
            case 22:
              int v21 = 28;
              goto LABEL_76;
            case 23:
LABEL_76:
              DWORD2(v144) = v21;
              int v20 = v21;
              goto LABEL_46;
            case 29:
              int v22 = 17;
              goto LABEL_83;
            case 30:
              int v22 = 18;
              goto LABEL_83;
            case 31:
              int v22 = 19;
              goto LABEL_83;
            case 32:
              int v22 = 23;
              goto LABEL_83;
            case 33:
              int v22 = 24;
              goto LABEL_83;
            case 34:
              int v22 = 25;
LABEL_83:
              DWORD2(v144) = v22;
              break;
            case 35:
              DWORD2(v144) = 14;
              BYTE9(v148) = 1;
              break;
            case 36:
              DWORD2(v144) = 15;
              BYTE10(v148) = 1;
              break;
            case 37:
              DWORD2(v144) = 16;
              BYTE8(v148) = 1;
              break;
            default:
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v66 = mach_continuous_time();
                unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU Sess Code,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "ADP", 69, "Ga11_20SendStatusReport", 515, v3);
                LbsOsaTrace_WriteLog(0x18u, __str, v67, 0, 1);
              }
              goto LABEL_29;
          }
LABEL_84:
          switch(v5)
          {
            case 0:
              HIDWORD(v144) = 0;
              break;
            case 1:
              int v70 = 1;
              goto LABEL_110;
            case 2:
              int v70 = 2;
              goto LABEL_110;
            case 3:
              int v70 = 3;
              goto LABEL_110;
            case 4:
              int v70 = 4;
              goto LABEL_110;
            case 5:
              int v70 = 5;
              goto LABEL_110;
            case 6:
              int v70 = 6;
              goto LABEL_110;
            case 7:
              int v70 = 7;
              goto LABEL_110;
            case 8:
              int v70 = 8;
              goto LABEL_110;
            case 9:
              int v70 = 9;
              goto LABEL_110;
            case 10:
              int v70 = 10;
              goto LABEL_110;
            case 11:
              int v70 = 11;
              goto LABEL_110;
            case 12:
              int v70 = 12;
              goto LABEL_110;
            case 13:
              int v70 = 13;
              goto LABEL_110;
            case 14:
              int v70 = 14;
              goto LABEL_110;
            case 15:
              int v70 = 15;
              goto LABEL_110;
            case 16:
              int v70 = 16;
              goto LABEL_110;
            case 17:
              int v70 = 17;
              goto LABEL_110;
            case 18:
              int v70 = 18;
              goto LABEL_110;
            case 19:
              int v70 = 19;
              goto LABEL_110;
            case 20:
              int v70 = 20;
              goto LABEL_110;
            case 21:
              int v70 = 21;
              goto LABEL_110;
            case 22:
              int v70 = 22;
LABEL_110:
              HIDWORD(v144) = v70;
              break;
            default:
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v68 = mach_continuous_time();
                unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL End Cause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "ADP", 69, "Ga11_20SendStatusReport", 515, v5);
                LbsOsaTrace_WriteLog(0x18u, __str, v69, 0, 1);
              }
              break;
          }
          if (v7 == 255) {
            double v71 = -1.0;
          }
          else {
            double v71 = (pow(1.1, (double)v7) + -1.0) * 10.0;
          }
          *(double *)&long long v145 = v71;
          if (DWORD1(v137) == 1)
          {
            if (DWORD1(v138) >> 23)
            {
              double v72 = 1.79769313e308;
            }
            else
            {
              double v72 = -((double)DWORD1(v138) * 90.0 * 0.00000011920929);
              if (v138 != 2) {
                double v72 = (double)DWORD1(v138) * 90.0 * 0.00000011920929;
              }
            }
            *((double *)&v145 + 1) = v72;
            signed int v73 = DWORD2(v138);
            if ((DWORD2(v138) + 0x800000) >> 24)
            {
              double v74 = 1.79769313e308;
            }
            else
            {
              if ((DWORD2(v138) & 0x800000) != 0) {
                signed int v73 = DWORD2(v138) | 0xFF000000;
              }
              double v74 = (double)v73 * 360.0 * 0.0000000596046448;
            }
            double v75 = (double)WORD6(v138);
            if (DWORD1(v139) == 2) {
              double v75 = -v75;
            }
            if (SWORD6(v138) < 0) {
              double v75 = 1.79769313e308;
            }
            *(double *)v146.i64 = v74;
            *(double *)&v146.i64[1] = v75;
            if (BYTE14(v138) != 255) {
              *(double *)&long long v147 = (double)BYTE14(v138);
            }
            if (HIBYTE(v138) != 255) {
              *((double *)&v147 + 1) = (double)HIBYTE(v138);
            }
            if (BYTE8(v139) != 255) {
              *(double *)&long long v148 = (double)BYTE8(v139);
            }
          }
          if (BYTE10(v148))
          {
            if (v135 >> 23)
            {
              double v76 = 1.79769313e308;
            }
            else
            {
              double v76 = -((double)v135 * 90.0 * 0.00000011920929);
              if (v127 != 2) {
                double v76 = (double)v135 * 90.0 * 0.00000011920929;
              }
            }
            *(double *)v149.i64 = v76;
            if ((v11 + 0x800000) >> 24)
            {
              double v78 = 1.79769313e308;
            }
            else
            {
              signed int v77 = v11 | 0xFF000000;
              if ((v11 & 0x800000) == 0) {
                signed int v77 = v11;
              }
              double v78 = (double)v77 * 360.0 * 0.0000000596046448;
            }
            double v79 = (double)(unsigned __int16)v132;
            if (v131 == 2) {
              double v79 = -v79;
            }
            if (v132 < 0) {
              double v79 = 1.79769313e308;
            }
            *(double *)&v149.i64[1] = v78;
            *(double *)&long long v150 = v79;
            double v80 = -1.0;
            double v81 = -1.0;
            if (v133 != 255) {
              double v81 = (pow(1.1, (double)v133) + -1.0) * 10.0;
            }
            *(double *)&long long v151 = v81;
            if (v134 != 255) {
              double v80 = (pow(1.025, (double)v134) + -1.0) * 45.0;
            }
            *((double *)&v150 + 1) = v80;
            if (v12 != 255)
            {
              BYTE8(v151) = v12;
              BYTE9(v151) = v12;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(__str, 0x410uLL);
              uint64_t v82 = mach_continuous_time();
              unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RefLocLat,%.7lf,Long,%.7lf,Alt,%.2lf,HorUnc,%f,VerUnc,%f,conf,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 68, "Ga11_20SendStatusReport", *(double *)v149.i64, *(double *)&v149.i64[1], *(double *)&v150, *(double *)&v151, *((double *)&v150 + 1), BYTE8(v151));
              LbsOsaTrace_WriteLog(0x18u, __str, v83, 5, 1);
            }
          }
          if (BYTE9(v148))
          {
            if (v128 <= 0x3FF) {
              WORD2(v152) = v128;
            }
            if (v129 <= 0x240C83FF) {
              LODWORD(v152) = v129 / 0x3E8;
            }
            if (v129 != -1 && WORD2(v152) != 0xFFFF && v130 != 0xFFFF) {
              *((double *)&v152 + 1) = (double)((8389 * (v130 >> 3)) >> 20);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v84 = mach_continuous_time();
              unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Week,%u,TowSec,%u,TowUnc,%.3lf\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "ADP", 73, "Ga11_20SendStatusReport", WORD2(v152), v152, *((double *)&v152 + 1));
              LbsOsaTrace_WriteLog(0x18u, __str, v85, 4, 1);
            }
          }
          if (*(void *)((char *)&v144 + 4)
            || HIDWORD(v144)
            || fabs(*(double *)&v145 + 1.0) >= 2.22044605e-16
            || fabs(*((double *)&v145 + 1) + -1.79769313e308) >= 2.22044605e-16
            || fabs(*(double *)v146.i64 + -1.79769313e308) >= 2.22044605e-16
            || fabs(*(double *)&v146.i64[1] + -1.79769313e308) >= 2.22044605e-16
            || fabs(*(double *)&v147 + 1.0) >= 2.22044605e-16
            || fabs(*((double *)&v147 + 1) + 1.0) >= 2.22044605e-16
            || fabs(*(double *)&v148 + 1.0) >= 2.22044605e-16)
          {
            std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100]((uint64_t)v153, (uint64_t)(v1 + 123));
            if (v154)
            {
              long long v88 = v1[37];
              *(void *)uint64_t __str = MEMORY[0x263EF8330];
              *(void *)&char __str[8] = 1174405120;
              *(void *)&char __str[16] = ___ZN4gnss15GnssAdaptDevice23Ga11_20SendStatusReportERK19s_gnsSUPL_StatusRep_block_invoke;
              *(void *)&char __str[24] = &__block_descriptor_tmp_169;
              std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100]((uint64_t)v156, (uint64_t)v153);
              long long v163 = v150;
              long long v164 = v151;
              long long v165 = v152;
              int64x2_t v159 = v146;
              long long v160 = v147;
              long long v161 = v148;
              int64x2_t v162 = v149;
              long long v157 = v144;
              long long v158 = v145;
              dispatch_async(v88, __str);
              std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v156);
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v89 = mach_continuous_time();
              unsigned __int16 v90 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplStatusReportCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "ADP", 69, "Ga11_20SendStatusReport", 258);
              LbsOsaTrace_WriteLog(0x18u, __str, v90, 0, 1);
            }
            return std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v153);
          }
          else
          {
            __n128 result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v86 = mach_continuous_time();
              unsigned __int16 v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status report\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "ADP", 87, "Ga11_20SendStatusReport", 770);
              return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v87, 2, 1);
            }
          }
          return result;
        }
LABEL_30:
        if (v20 == 21 || v20 == 27)
        {
LABEL_32:
          uint64_t v50 = v1[16];
          uint64_t v51 = v1[17] - v50;
          if (v51)
          {
            unint64_t v52 = v51 / 196;
            if (v52 <= 1) {
              uint64_t v53 = 1;
            }
            else {
              uint64_t v53 = v52;
            }
            if (*(_DWORD *)(v50 + 56) == v144)
            {
              unint64_t v54 = 0;
LABEL_38:
              if (v54 < v52)
              {
                *(unsigned char *)(v50 + 196 * v54 + 60) = 1;
                int v20 = DWORD2(v144);
              }
            }
            else
            {
              unint64_t v54 = 0;
              char v55 = (int *)(v50 + 252);
              uint64_t v56 = v53 - 1;
              while (v56 != v54)
              {
                int v57 = *v55;
                v55 += 49;
                ++v54;
                if (v57 == v144)
                {
                  if (v54 < v52) {
                    goto LABEL_38;
                  }
                  break;
                }
              }
            }
          }
        }
        if (v20 != 22 && v20 != 28) {
          goto LABEL_84;
        }
LABEL_46:
        uint64_t v58 = v1[16];
        uint64_t v59 = v1[17] - v58;
        if (!v59) {
          goto LABEL_84;
        }
        unint64_t v60 = v59 / 196;
        if (v60 <= 1) {
          uint64_t v61 = 1;
        }
        else {
          uint64_t v61 = v60;
        }
        if (*(_DWORD *)(v58 + 56) == v144)
        {
          unint64_t v62 = 0;
        }
        else
        {
          unint64_t v62 = 0;
          unsigned __int16 v63 = (int *)(v58 + 252);
          uint64_t v64 = v61 - 1;
          do
          {
            if (v64 == v62) {
              goto LABEL_84;
            }
            int v65 = *v63;
            v63 += 49;
            ++v62;
          }
          while (v65 != v144);
          if (v62 >= v60) {
            goto LABEL_84;
          }
        }
        if (v62 < v60) {
          *(_DWORD *)(v58 + 196 * v62 + 188) = v20;
        }
        goto LABEL_84;
    }
  }
  return result;
}

void sub_22B87B690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void std::vector<gnss::AgnssSummaryReport>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    uint64_t v18 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v7 - (void)*a1) >> 2);
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x14E5E0A72F05397) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0x7D6343EB1A1F58D1 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0xA72F05397829CBLL) {
      unint64_t v21 = 0x14E5E0A72F05397;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>(v4, v21);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = &v22[196 * v18];
    unsigned __int16 v24 = &v22[196 * v21];
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a2;
    long long v25 = *(_OWORD *)(a2 + 16);
    long long v26 = *(_OWORD *)(a2 + 32);
    long long v27 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v23 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v23 + 4) = v27;
    *((_OWORD *)v23 + 1) = v25;
    *((_OWORD *)v23 + 2) = v26;
    long long v28 = *(_OWORD *)(a2 + 80);
    long long v29 = *(_OWORD *)(a2 + 96);
    long long v30 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v23 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v23 + 8) = v30;
    *((_OWORD *)v23 + 5) = v28;
    *((_OWORD *)v23 + 6) = v29;
    long long v31 = *(_OWORD *)(a2 + 144);
    long long v32 = *(_OWORD *)(a2 + 160);
    long long v33 = *(_OWORD *)(a2 + 176);
    *((_DWORD *)v23 + 48) = *(_DWORD *)(a2 + 192);
    *((_OWORD *)v23 + 10) = v32;
    *((_OWORD *)v23 + 11) = v33;
    *((_OWORD *)v23 + 9) = v31;
    uint64_t v17 = v23 + 196;
    unint64_t v35 = (char *)*a1;
    int v34 = (char *)a1[1];
    if (v34 != *a1)
    {
      do
      {
        *(_OWORD *)(v23 - 196) = *(_OWORD *)(v34 - 196);
        long long v36 = *(_OWORD *)(v34 - 180);
        long long v37 = *(_OWORD *)(v34 - 164);
        long long v38 = *(_OWORD *)(v34 - 148);
        *(_OWORD *)(v23 - 132) = *(_OWORD *)(v34 - 132);
        *(_OWORD *)(v23 - 148) = v38;
        *(_OWORD *)(v23 - 164) = v37;
        *(_OWORD *)(v23 - 180) = v36;
        long long v39 = *(_OWORD *)(v34 - 116);
        long long v40 = *(_OWORD *)(v34 - 100);
        long long v41 = *(_OWORD *)(v34 - 84);
        *(_OWORD *)(v23 - 68) = *(_OWORD *)(v34 - 68);
        *(_OWORD *)(v23 - 84) = v41;
        *(_OWORD *)(v23 - 100) = v40;
        *(_OWORD *)(v23 - 116) = v39;
        long long v42 = *(_OWORD *)(v34 - 52);
        long long v43 = *(_OWORD *)(v34 - 36);
        long long v44 = *(_OWORD *)(v34 - 20);
        *((_WORD *)v23 - 2) = *((_WORD *)v34 - 2);
        *(_OWORD *)(v23 - 20) = v44;
        *(_OWORD *)(v23 - 36) = v43;
        *(_OWORD *)(v23 - 52) = v42;
        v23 -= 196;
        v34 -= 196;
      }
      while (v34 != v35);
      int v34 = (char *)*a1;
    }
    *a1 = v23;
    a1[1] = v17;
    a1[2] = v24;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 64) = v10;
    *(_OWORD *)(v7 + 16) = v8;
    *(_OWORD *)(v7 + 32) = v9;
    long long v11 = *(_OWORD *)(a2 + 80);
    long long v12 = *(_OWORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v7 + 128) = v13;
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 96) = v12;
    long long v14 = *(_OWORD *)(a2 + 144);
    long long v15 = *(_OWORD *)(a2 + 160);
    long long v16 = *(_OWORD *)(a2 + 176);
    *(_DWORD *)(v7 + 192) = *(_DWORD *)(a2 + 192);
    *(_OWORD *)(v7 + 160) = v15;
    *(_OWORD *)(v7 + 176) = v16;
    *(_OWORD *)(v7 + 144) = v14;
    uint64_t v17 = (char *)(v7 + 196);
  }
  a1[1] = v17;
}

size_t ___ZN4gnss15GnssAdaptDevice23Ga11_20SendStatusReportERK19s_gnsSUPL_StatusRep_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 64);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%.7lf,Long,%.7lf,Alt,%.2lf,SemMaj,%f,SemMin,%f,UncAlt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga11_20SendStatusReport_block_invoke", *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 128));
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (*(unsigned char *)(a1 + 138)) {
      uint64_t v7 = 84;
    }
    else {
      uint64_t v7 = 70;
    }
    if (*(unsigned char *)(a1 + 137)) {
      uint64_t v8 = 84;
    }
    else {
      uint64_t v8 = 70;
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v9 = 84;
    }
    else {
      uint64_t v9 = 70;
    }
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplStatusReport PosMethod,%u,Status,%u,SessionId,%u,endCause,%u,HACC,%f,ephProvided,%c,refTimeProvided,%c,refLocProvided,%c\n", v6, "ADP", 73, "Ga11_20SendStatusReport_block_invoke", *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 76), *(double *)(a1 + 80), v9, v8, v7);
    return LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE(uint64_t a1)
{
  int v1 = (void *)(a1 + 32);

  return std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga11_22HandleGnsWlanInfoCBE11e_gnsWL_MsgP15u_gnsWL_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Requesting WLAN Measurements from FW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "Ga11_22HandleGnsWlanInfoCB_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 4, 1);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(_DWORD *)uint64_t __str = *(_DWORD *)(a1 + 64);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 48))(v4, __str);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__18functionIFN4gnss6ResultENS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 32;
  uint64_t v3 = a1 + 32;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_32c83_ZTSNSt3__18functionIFN4gnss6ResultENS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1)
{
  int v1 = (void *)(a1 + 32);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](v1);
}

void *std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >= 0x924924924924925) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(28 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 28 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22B87BF6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]()
{
}

void __clang_call_terminate(void *a1)
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptioint n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >> 60) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(16 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22B87C0CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >> 59) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(32 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22B87C1A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >= 0x1555555555555556) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    size_t result = operator new(12 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 12 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      size_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22B87C290(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  std::exception::~exception(this);

  JUMPOUT(0x230F4E5D0);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    size_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      size_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22B87C464(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    size_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        size_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        size_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      size_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22B87C964(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    size_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_22B87D02C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x14E5E0A72F05398) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(196 * a2);
}

void *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__func(void *a1)
{
  *a1 = &unk_26DF18000;
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__func(void *a1)
{
  *a1 = &unk_26DF18000;
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x230F4E5D0);
}

void *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26DF18000;
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22B87D260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26DF18000;

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);

  return std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t NK_Check_Num_SV_Res(uint64_t result, _DWORD *a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v10 = 0;
  long long v11 = (_OWORD *)(a7 + 152);
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = 0uLL;
  do
  {
    uint8x16_t v16 = (uint8x16_t)v11[v10];
    uint16x8_t v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
    uint16x8_t v18 = vmovl_high_u8(v16);
    int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v18);
    int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v18.i8);
    int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v17);
    int32x4_t v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v17.i8);
    ++v10;
  }
  while (v10 != 3);
  uint64_t v19 = 0;
  *(unsigned char *)(a7 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v13, v15)));
  unint64_t v20 = (_OWORD *)(a10 + 152);
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = 0uLL;
  int32x4_t v24 = 0uLL;
  do
  {
    uint8x16_t v25 = (uint8x16_t)v20[v19];
    uint16x8_t v26 = vmovl_u8(*(uint8x8_t *)v25.i8);
    uint16x8_t v27 = vmovl_high_u8(v25);
    int32x4_t v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v27);
    int32x4_t v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v27.i8);
    int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v26.i8);
    ++v19;
  }
  while (v19 != 3);
  uint64_t v28 = 0;
  *(unsigned char *)(a10 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v21, v23), vaddq_s32(v22, v24)));
  long long v29 = (_OWORD *)(a8 + 152);
  int32x4_t v30 = 0uLL;
  int32x4_t v31 = 0uLL;
  int32x4_t v32 = 0uLL;
  int32x4_t v33 = 0uLL;
  do
  {
    uint8x16_t v34 = (uint8x16_t)v29[v28];
    uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
    uint16x8_t v36 = vmovl_high_u8(v34);
    int32x4_t v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
    int32x4_t v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v36.i8);
    int32x4_t v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v35);
    int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v35.i8);
    ++v28;
  }
  while (v28 != 3);
  LOBYTE(v37) = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v32), vaddq_s32(v31, v33)));
  *(unsigned char *)(a8 + 3) = v37;
  unsigned int v38 = *(unsigned __int8 *)(a7 + 3);
  if (v38 < a3 || v38 <= 2 && (a4 & 1) == 0 && (!result || !a6 && *a2))
  {
    *(unsigned char *)(a7 + 3) = 0;
    *long long v11 = 0u;
    *(_OWORD *)(a7 + 168) = 0u;
    *(_OWORD *)(a7 + 184) = 0u;
    int v37 = *(unsigned __int8 *)(a8 + 3);
    if (v37 + *(unsigned __int8 *)(a10 + 3) < 3
      || (a9 <= 100000000.0 ? (BOOL v39 = a4 == 0) : (BOOL v39 = 1), !v39 ? (v40 = a5 <= 2) : (v40 = 1), v40))
    {
      LOBYTE(v37) = 0;
      *(unsigned char *)(a10 + 3) = 0;
      *unint64_t v20 = 0uLL;
      *(_OWORD *)(a10 + 168) = 0uLL;
      *(_OWORD *)(a10 + 184) = 0uLL;
      *(unsigned char *)(a8 + 3) = 0;
      *long long v29 = 0uLL;
      *(_OWORD *)(a8 + 168) = 0uLL;
      *(_OWORD *)(a8 + 184) = 0uLL;
    }
  }
  if (a3 > (*(unsigned char *)(a10 + 3) + v37))
  {
    *(unsigned char *)(a10 + 3) = 0;
    *unint64_t v20 = 0u;
    *(_OWORD *)(a10 + 168) = 0u;
    *(_OWORD *)(a10 + 184) = 0u;
    *(unsigned char *)(a8 + 3) = 0;
    *long long v29 = 0u;
    *(_OWORD *)(a8 + 168) = 0u;
    *(_OWORD *)(a8 + 184) = 0u;
  }
  return result;
}

uint64_t ARP_Calc(uint64_t result)
{
  if (*(char *)(result + 88) < 1)
  {
    float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
    float64x2_t v4 = v3;
  }
  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 88) - 1;
    if (v1 >= 9) {
      unsigned int v1 = 9;
    }
    double v2 = g_ARP_cBiasP_Table[v1 + 10];
    float64x2_t v3 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 8)), v2);
    float64x2_t v4 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 24)), v2);
  }
  *(float64x2_t *)(result + 40) = v3;
  *(float64x2_t *)(result + 56) = v4;
  return result;
}

void Gnm31_05SendUserCfgGnc(void)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v30 = BYTE1(xmmword_26AE53260);
  int v31 = xmmword_26AE53260;
  int v28 = BYTE5(xmmword_26AE53260);
  int v29 = BYTE2(xmmword_26AE53260);
  int v26 = BYTE7(xmmword_26AE53260);
  int v27 = BYTE6(xmmword_26AE53260);
  int v24 = BYTE11(xmmword_26AE53260);
  int v25 = BYTE10(xmmword_26AE53260);
  int v23 = BYTE12(xmmword_26AE53260);
  int v0 = HIBYTE(xmmword_26AE53260);
  int v1 = byte_26AE53270;
  int v2 = byte_26AE53271;
  int v3 = dword_26AE53274;
  int v4 = BYTE1(dword_26AE53274);
  int v5 = BYTE2(dword_26AE53274);
  int v6 = byte_26AE53279;
  int v7 = byte_26AE5327A;
  int v8 = byte_26AE5327B;
  size_t v9 = gnssOsa_Calloc("Gnm31_05SendUserCfgGnc", 507, 1, 0x50uLL);
  if (!v9) {
    return;
  }
  uint64_t v10 = v9;
  if (v28 | v27 | v26) {
    __int16 v11 = ((v31 | v30 | v29) != 0) | 0x20;
  }
  else {
    __int16 v11 = (v31 | v30 | v29) != 0;
  }
  if (v25 | v24 | v23) {
    __int16 v12 = v11 | 4;
  }
  else {
    __int16 v12 = v11;
  }
  if (v0 | v1 | v2) {
    __int16 v13 = v12 | 0x10;
  }
  else {
    __int16 v13 = v12;
  }
  if (v3 | v4 | v5) {
    __int16 v14 = v13 | 2;
  }
  else {
    __int16 v14 = v13;
  }
  if (v6 | v7 | v8) {
    __int16 v15 = v14 | 0x40;
  }
  else {
    __int16 v15 = v14;
  }
  v9[16] = v15;
  *((unsigned char *)v9 + 16) = BYTE1(dword_26AE5324C);
  *((unsigned char *)v9 + 17) = dword_26AE5324C;
  *((unsigned char *)v9 + 18) = BYTE2(dword_26AE5324C);
  v9[10] = 1;
  __int16 v16 = dword_26AE53248;
  if ((dword_26AE53248 & 0x200) == 0)
  {
    int v17 = 19;
    if ((dword_26AE53248 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *((unsigned char *)v9 + 23) = dword_26AE53250;
  v9[12] = HIWORD(dword_26AE53250);
  int v17 = 51;
  if ((v16 & 0x800) != 0)
  {
LABEL_21:
    v17 |= 0x80u;
    v9[17] = word_26AE53254;
  }
LABEL_22:
  *((_DWORD *)v9 + 3) = v17 | 0x200;
  *((unsigned char *)v9 + 72) = (dword_26AE53244 & 0x40000) != 0;
  char v18 = HIBYTE(dword_26AE5324C);
  switch(HIBYTE(dword_26AE5324C))
  {
    case 0:
    case 2:
    case 3:
      goto LABEL_30;
    case 1:
      Gnm17_12SendClearNv(0x10000);
      break;
    case 4:
      char v18 = 5;
      goto LABEL_30;
    case 5:
      char v18 = 1;
      goto LABEL_30;
    case 6:
      char v18 = 4;
      goto LABEL_30;
    case 7:
      char v18 = 6;
LABEL_30:
      *((unsigned char *)v9 + 22) = v18;
      *((_DWORD *)v9 + 3) = v17 | 0x208;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 87, "Gnm31_05SendUserCfgGnc", 515, HIBYTE(dword_26AE5324C));
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND =>GNCP CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm31_05SendUserCfgGnc", v10[3]);
    LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
  }
  AgpsSendFsmMsg(128, 134, 8394499, v10);
}

void Gnm31_06SendUserCfgLsim(void)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v0 = gnssOsa_Calloc("Gnm31_06SendUserCfgLsim", 601, 1, 0x20uLL);
  if (v0)
  {
    int v1 = v0;
    v0[3] = 0;
    int v2 = gnssOsa_Calloc("Gnm31_06SendUserCfgLsim", 609, 1, 0x244uLL);
    v1[2] = v2;
    if (v2)
    {
      uint64_t v3 = 0;
      char v4 = 1;
      do
      {
        char v5 = v4;
        int v6 = (char *)&g_UsrConfig + 262 * v3;
        uint64_t v7 = v1[2];
        *(unsigned char *)(v7 + 268 * v3) = v6[82];
        int v8 = v6[339];
        switch(v6[339])
        {
          case 0:
            uint64_t v9 = v7 + 268 * v3;
            goto LABEL_12;
          case 1:
            goto LABEL_8;
          case 2:
            int v8 = 2;
            goto LABEL_8;
          case 3:
            int v8 = 3;
LABEL_8:
            uint64_t v10 = v7 + 268 * v3;
            *(_DWORD *)(v10 + 4) = v8;
            __int16 v11 = (char *)&g_UsrConfig + 262 * v3;
            *(_WORD *)(v10 + 264) = *((_WORD *)v11 + 171);
            strncpy_s((char *)(v10 + 8), 0x100u, v11 + 83, v11[340]);
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v12 = mach_continuous_time();
              unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AddrType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm31_06SendUserCfgLsim", 770, v6[339]);
              LbsOsaTrace_WriteLog(0xBu, __str, v13, 2, 1);
            }
            uint64_t v9 = v1[2] + 268 * v3;
LABEL_12:
            *(_DWORD *)(v9 + 4) = 0;
            break;
        }
        char v4 = 0;
        uint64_t v3 = 1;
      }
      while ((v5 & 1) != 0);
      uint64_t v14 = v1[2];
      *(_DWORD *)(v14 + 536) = 0;
      int v15 = byte_26AE53288;
      if (byte_26AE53288 && byte_26AE53288 != 1 && byte_26AE53288 != 2)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PrefPosMethod,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 87, "Gnm31_06SendUserCfgLsim", 770, byte_26AE53288);
          LbsOsaTrace_WriteLog(0xBu, __str, v17, 2, 1);
        }
        uint64_t v14 = v1[2];
        int v15 = 3;
      }
      *(_DWORD *)(v14 + 556) = v15;
      unsigned int v18 = (dword_26AE53244 << 10) & 0x30000 | (8 * (dword_26AE53244 & 0xF)) & 0x7E | (((dword_26AE53244 >> 5) & 1) << 14) & 0xFFFBFFFF | (dword_26AE53244 >> 11) & 1 | (((dword_26AE53244 >> 4) & 1) << 7) & 0xFFFBFFFF | (((dword_26AE53244 >> 14) & 1) << 18);
      if (dword_26AE53244)
      {
        uint64_t v19 = (const float *)&dword_26AE53280;
        uint32x4_t v20 = (uint32x4_t)vld1q_dup_f32(v19);
        int8x16_t v21 = vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_22BB0C6D0), (int8x16_t)xmmword_22BB0C6E0);
        int8x8_t v22 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        v18 |= v22.i32[0] | v22.i32[1];
      }
      int v23 = (unsigned __int16)((_WORD)dword_26AE53248 << 9) & (unsigned __int16)((_WORD)dword_26AE5349C << 15) & 0x8000 | v18;
      if ((dword_26AE53248 & 0x20) != 0)
      {
        __int16 v24 = dword_26AE53284;
        if ((dword_26AE53284 & 0x40) != 0) {
          *(_WORD *)(v14 + 560) = dword_26AE53496;
        }
        if ((v24 & 0x100) != 0) {
          *(_WORD *)(v14 + 562) = HIWORD(dword_26AE53496);
        }
      }
      *(unsigned char *)(v14 + 568) = xmmword_26AE53260;
      *(int32x2_t *)(v14 + 569) = vzip1_s32(*(int32x2_t *)((char *)&xmmword_26AE53260 + 1), *(int32x2_t *)&byte_26AE53279);
      *(unsigned char *)(v14 + 577) = byte_26AE5327D;
      *(_DWORD *)(v14 + 564) = v23;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_LSIM_CONFIG_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNM", 73, "Gnm31_06SendUserCfgLsim");
        LbsOsaTrace_WriteLog(0xBu, __str, v26, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8594435, v1);
    }
    else
    {
      free(v1);
    }
  }
}

size_t Gnm31_10InitUserCfg(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  bzero(__src, 0x270uLL);
  BYTE5(__src[1]) = 2;
  BYTE14(__src[1]) = 30;
  memset(&__src[2], 0, 38);
  LOBYTE(__src[5]) = 2;
  uint64_t v0 = 82;
  do
  {
    int v1 = (char *)__src + v0;
    *int v1 = -1;
    *(_OWORD *)(v1 + 17) = 0uLL;
    *(_OWORD *)(v1 + 33) = 0uLL;
    *(_OWORD *)(v1 + 49) = 0uLL;
    *(_OWORD *)(v1 + 65) = 0uLL;
    *(_OWORD *)(v1 + 81) = 0uLL;
    *(_OWORD *)(v1 + 97) = 0uLL;
    *(_OWORD *)(v1 + 113) = 0uLL;
    *(_OWORD *)(v1 + 129) = 0uLL;
    *(_OWORD *)(v1 + 145) = 0uLL;
    *(_OWORD *)(v1 + 161) = 0uLL;
    *(_OWORD *)(v1 + 177) = 0uLL;
    *(_OWORD *)(v1 + 193) = 0uLL;
    *(_OWORD *)(v1 + 209) = 0uLL;
    *(_OWORD *)(v1 + 225) = 0uLL;
    *(_OWORD *)(v1 + 241) = 0uLL;
    *((_WORD *)v1 + 130) = -1;
    int v2 = (_OWORD *)((char *)&__src[16] + v0 + 6);
    *(_OWORD *)(v1 + 1) = 0uLL;
    uint64_t v3 = (char *)__src + v0 + 1;
    v0 += 262;
    *((_WORD *)v3 + 128) = 0;
  }
  while (v2 != (_OWORD *)((char *)&__src[37] + 14));
  *(_DWORD *)((char *)&__src[37] + 14) = 0;
  *(void *)((char *)&__src[38] + 4) = 0;
  memcpy(&g_UsrConfig, __src, 0x26CuLL);
  g_UsrConfig = 0x332E352E322E76;
  *(void *)&dword_26AE53244 = 0x47F0000181FLL;
  dword_26AE5324C = 512;
  byte_26AE53256 = 30;
  LODWORD(xmmword_26AE53260) = 16843009;
  *(long long *)((char *)&xmmword_26AE53260 + 4) = xmmword_22BB0C6F0;
  dword_26AE53274 = 16777217;
  byte_26AE53278 = 0;
  *(_DWORD *)&byte_26AE53279 = 16843009;
  byte_26AE5327D = 0;
  *(void *)&dword_26AE53280 = 0x10000001ELL;
  byte_26AE53288 = 2;
  dword_26AE5349C = 1;
  return Gnm31_00PrintUsrCfg("INITIALIZED DEFAULT VALUE");
}

size_t Gnm31_00PrintUsrCfg(const char *a1)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  if ((int)strnlen((const char *)&g_UsrConfig, 0xCuLL) <= 11
    && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:%s Version,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm31_00PrintUsrCfg", a1, (const char *)&g_UsrConfig);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:ConfigMask,0x%X,Config2Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_26AE53244, dword_26AE53248);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v7 = 89;
    if ((dword_26AE53244 & 1) == 0) {
      uint64_t v7 = 78;
    }
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UPAllowed,%c\n", (unint64_t)v6, "GNM", 68, "Gnm31_00PrintUsrCfg", v7);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v10 = 89;
    if ((dword_26AE53244 & 2) == 0) {
      uint64_t v10 = 78;
    }
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CPAllowed,%c\n", (unint64_t)v9, "GNM", 68, "Gnm31_00PrintUsrCfg", v10);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v13 = 89;
    if ((dword_26AE53244 & 4) == 0) {
      uint64_t v13 = 78;
    }
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UPoverCP,%c\n", (unint64_t)v12, "GNM", 68, "Gnm31_00PrintUsrCfg", v13);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v16 = 89;
    if ((dword_26AE53244 & 8) == 0) {
      uint64_t v16 = 78;
    }
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:MoAllowed,%c\n", (unint64_t)v15, "GNM", 68, "Gnm31_00PrintUsrCfg", v16);
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v18 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v19 = 89;
    if ((dword_26AE53244 & 0x10) == 0) {
      uint64_t v19 = 78;
    }
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:NIAllowed,%c\n", (unint64_t)v18, "GNM", 68, "Gnm31_00PrintUsrCfg", v19);
    LbsOsaTrace_WriteLog(0xBu, __str, v20, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v22 = 89;
    if ((dword_26AE53244 & 0x20) == 0) {
      uint64_t v22 = 78;
    }
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:FAAllowed,%c\n", (unint64_t)v21, "GNM", 68, "Gnm31_00PrintUsrCfg", v22);
    LbsOsaTrace_WriteLog(0xBu, __str, v23, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v25 = 89;
    if ((dword_26AE53244 & 0x40) == 0) {
      uint64_t v25 = 78;
    }
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:Wi-FiAid,%c\n", (unint64_t)v24, "GNM", 68, "Gnm31_00PrintUsrCfg", v25);
    LbsOsaTrace_WriteLog(0xBu, __str, v26, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v27 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v28 = 89;
    if ((dword_26AE53244 & 0x80) == 0) {
      uint64_t v28 = 78;
    }
    unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SNTPRefTime,%c\n", (unint64_t)v27, "GNM", 68, "Gnm31_00PrintUsrCfg", v28);
    LbsOsaTrace_WriteLog(0xBu, __str, v29, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v30 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v31 = 89;
    if ((dword_26AE53244 & 0x100) == 0) {
      uint64_t v31 = 78;
    }
    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SensorAid,%c\n", (unint64_t)v30, "GNM", 68, "Gnm31_00PrintUsrCfg", v31);
    LbsOsaTrace_WriteLog(0xBu, __str, v32, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v33 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v34 = 89;
    if ((dword_26AE53244 & 0x200) == 0) {
      uint64_t v34 = 78;
    }
    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:HotStartReady,%c\n", (unint64_t)v33, "GNM", 68, "Gnm31_00PrintUsrCfg", v34);
    LbsOsaTrace_WriteLog(0xBu, __str, v35, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v36 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v37 = 89;
    if ((dword_26AE53244 & 0x400) == 0) {
      uint64_t v37 = 78;
    }
    unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:PositionReady,%c\n", (unint64_t)v36, "GNM", 68, "Gnm31_00PrintUsrCfg", v37);
    LbsOsaTrace_WriteLog(0xBu, __str, v38, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v39 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v40 = 89;
    if ((dword_26AE53244 & 0x800) == 0) {
      uint64_t v40 = 78;
    }
    unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GNSSEnabled,%c\n", (unint64_t)v39, "GNM", 68, "Gnm31_00PrintUsrCfg", v40);
    LbsOsaTrace_WriteLog(0xBu, __str, v41, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v42 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v43 = 89;
    if ((dword_26AE53244 & 0x8000) == 0) {
      uint64_t v43 = 78;
    }
    unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:LTLAgeingEnabled,%c\n", (unint64_t)v42, "GNM", 68, "Gnm31_00PrintUsrCfg", v43);
    LbsOsaTrace_WriteLog(0xBu, __str, v44, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v45 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v46 = 89;
    if ((dword_26AE53244 & 0x10000) == 0) {
      uint64_t v46 = 78;
    }
    unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:STLDivIgnore,%c\n", (unint64_t)v45, "GNM", 68, "Gnm31_00PrintUsrCfg", v46);
    LbsOsaTrace_WriteLog(0xBu, __str, v47, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v48 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v49 = 89;
    if ((dword_26AE53244 & 0x20000) == 0) {
      uint64_t v49 = 78;
    }
    unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CLTLearningsEnabled,%c\n", (unint64_t)v48, "GNM", 68, "Gnm31_00PrintUsrCfg", v49);
    LbsOsaTrace_WriteLog(0xBu, __str, v50, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v51 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v52 = 89;
    if ((dword_26AE53244 & 0x1000) == 0) {
      uint64_t v52 = 78;
    }
    unsigned __int16 v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarlyReturn,%c\n", (unint64_t)v51, "GNM", 68, "Gnm31_00PrintUsrCfg", v52);
    LbsOsaTrace_WriteLog(0xBu, __str, v53, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v54 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v55 = 89;
    if ((dword_26AE53244 & 0x4000) == 0) {
      uint64_t v55 = 78;
    }
    unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:NwPeriodicOverride,%c\n", (unint64_t)v54, "GNM", 68, "Gnm31_00PrintUsrCfg", v55);
    LbsOsaTrace_WriteLog(0xBu, __str, v56, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v57 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v58 = 89;
    if ((dword_26AE53244 & 0x40000) == 0) {
      uint64_t v58 = 78;
    }
    unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UseBrdNavMsgDisbld,%c\n", (unint64_t)v57, "GNM", 68, "Gnm31_00PrintUsrCfg", v58);
    LbsOsaTrace_WriteLog(0xBu, __str, v59, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v60 = mach_continuous_time();
    unsigned __int16 v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SensitivityTTFF,%hhu,SensitivityMode,%hhu,PowerPref,%hhu,ColdStartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_26AE5324C, BYTE1(dword_26AE5324C), BYTE2(dword_26AE5324C), HIBYTE(dword_26AE5324C));
    LbsOsaTrace_WriteLog(0xBu, __str, v61, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v62 = mach_continuous_time();
    unsigned __int16 v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:Constel Auto Msb Msa PredEph SaEph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "GNM", 73, "Gnm31_00PrintUsrCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v63, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v64 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v65 = 89;
    if (BYTE4(xmmword_26AE53260)) {
      uint64_t v66 = 89;
    }
    else {
      uint64_t v66 = 78;
    }
    if (BYTE3(xmmword_26AE53260)) {
      uint64_t v67 = 89;
    }
    else {
      uint64_t v67 = 78;
    }
    if (BYTE2(xmmword_26AE53260)) {
      uint64_t v68 = 89;
    }
    else {
      uint64_t v68 = 78;
    }
    if (BYTE1(xmmword_26AE53260)) {
      uint64_t v69 = 89;
    }
    else {
      uint64_t v69 = 78;
    }
    if (!(_BYTE)xmmword_26AE53260) {
      uint64_t v65 = 78;
    }
    unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GPS  %c %c %c %c %c\n", (unint64_t)v64, "GNM", 73, "Gnm31_00PrintUsrCfg", v65, v69, v68, v67, v66);
    LbsOsaTrace_WriteLog(0xBu, __str, v70, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v71 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v72 = 89;
    if (BYTE9(xmmword_26AE53260)) {
      uint64_t v73 = 89;
    }
    else {
      uint64_t v73 = 78;
    }
    if (BYTE8(xmmword_26AE53260)) {
      uint64_t v74 = 89;
    }
    else {
      uint64_t v74 = 78;
    }
    if (BYTE7(xmmword_26AE53260)) {
      uint64_t v75 = 89;
    }
    else {
      uint64_t v75 = 78;
    }
    if (BYTE6(xmmword_26AE53260)) {
      uint64_t v76 = 89;
    }
    else {
      uint64_t v76 = 78;
    }
    if (!BYTE5(xmmword_26AE53260)) {
      uint64_t v72 = 78;
    }
    unsigned __int16 v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GLON %c %c %c %c %c\n", (unint64_t)v71, "GNM", 73, "Gnm31_00PrintUsrCfg", v72, v76, v75, v74, v73);
    LbsOsaTrace_WriteLog(0xBu, __str, v77, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v78 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v79 = 89;
    if (BYTE14(xmmword_26AE53260)) {
      uint64_t v80 = 89;
    }
    else {
      uint64_t v80 = 78;
    }
    if (BYTE13(xmmword_26AE53260)) {
      uint64_t v81 = 89;
    }
    else {
      uint64_t v81 = 78;
    }
    if (BYTE12(xmmword_26AE53260)) {
      uint64_t v82 = 89;
    }
    else {
      uint64_t v82 = 78;
    }
    if (BYTE11(xmmword_26AE53260)) {
      uint64_t v83 = 89;
    }
    else {
      uint64_t v83 = 78;
    }
    if (!BYTE10(xmmword_26AE53260)) {
      uint64_t v79 = 78;
    }
    unsigned __int16 v84 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SBAS %c %c %c %c %c\n", (unint64_t)v78, "GNM", 73, "Gnm31_00PrintUsrCfg", v79, v83, v82, v81, v80);
    LbsOsaTrace_WriteLog(0xBu, __str, v84, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v85 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v86 = 89;
    if (byte_26AE53273) {
      uint64_t v87 = 89;
    }
    else {
      uint64_t v87 = 78;
    }
    if (byte_26AE53272) {
      uint64_t v88 = 89;
    }
    else {
      uint64_t v88 = 78;
    }
    if (byte_26AE53271) {
      uint64_t v89 = 89;
    }
    else {
      uint64_t v89 = 78;
    }
    if (byte_26AE53270) {
      uint64_t v90 = 89;
    }
    else {
      uint64_t v90 = 78;
    }
    if (!HIBYTE(xmmword_26AE53260)) {
      uint64_t v86 = 78;
    }
    unsigned __int16 v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:QZSS %c %c %c %c %c\n", (unint64_t)v85, "GNM", 73, "Gnm31_00PrintUsrCfg", v86, v90, v89, v88, v87);
    LbsOsaTrace_WriteLog(0xBu, __str, v91, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v92 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v93 = 89;
    if (byte_26AE53278) {
      uint64_t v94 = 89;
    }
    else {
      uint64_t v94 = 78;
    }
    if (HIBYTE(dword_26AE53274)) {
      uint64_t v95 = 89;
    }
    else {
      uint64_t v95 = 78;
    }
    if (BYTE2(dword_26AE53274)) {
      uint64_t v96 = 89;
    }
    else {
      uint64_t v96 = 78;
    }
    if (BYTE1(dword_26AE53274)) {
      uint64_t v97 = 89;
    }
    else {
      uint64_t v97 = 78;
    }
    if (!(_BYTE)dword_26AE53274) {
      uint64_t v93 = 78;
    }
    unsigned __int16 v98 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GAL  %c %c %c %c %c\n", (unint64_t)v92, "GNM", 73, "Gnm31_00PrintUsrCfg", v93, v97, v96, v95, v94);
    LbsOsaTrace_WriteLog(0xBu, __str, v98, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v99 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v100 = 89;
    if (byte_26AE5327D) {
      uint64_t v101 = 89;
    }
    else {
      uint64_t v101 = 78;
    }
    if (byte_26AE5327C) {
      uint64_t v102 = 89;
    }
    else {
      uint64_t v102 = 78;
    }
    if (byte_26AE5327B) {
      uint64_t v103 = 89;
    }
    else {
      uint64_t v103 = 78;
    }
    if (byte_26AE5327A) {
      uint64_t v104 = 89;
    }
    else {
      uint64_t v104 = 78;
    }
    if (!byte_26AE53279) {
      uint64_t v100 = 78;
    }
    unsigned __int16 v105 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:BDS  %c %c %c %c %c\n", (unint64_t)v99, "GNM", 73, "Gnm31_00PrintUsrCfg", v100, v104, v103, v102, v101);
    LbsOsaTrace_WriteLog(0xBu, __str, v105, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v106 = mach_continuous_time();
    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL ConfigMask,0x%X,Config2Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_26AE53280, dword_26AE53284);
    LbsOsaTrace_WriteLog(0xBu, __str, v107, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v108 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v109 = 89;
    if ((dword_26AE53280 & 1) == 0) {
      uint64_t v109 = 78;
    }
    unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL MultiSessn,%c\n", (unint64_t)v108, "GNM", 68, "Gnm31_00PrintUsrCfg", v109);
    LbsOsaTrace_WriteLog(0xBu, __str, v110, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v111 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v112 = 89;
    if ((dword_26AE53280 & 2) == 0) {
      uint64_t v112 = 78;
    }
    unsigned __int16 v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SecureTLS,%c\n", (unint64_t)v111, "GNM", 68, "Gnm31_00PrintUsrCfg", v112);
    LbsOsaTrace_WriteLog(0xBu, __str, v113, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v114 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v115 = 89;
    if ((dword_26AE53280 & 4) == 0) {
      uint64_t v115 = 78;
    }
    unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL PosTechECID,%c\n", (unint64_t)v114, "GNM", 68, "Gnm31_00PrintUsrCfg", v115);
    LbsOsaTrace_WriteLog(0xBu, __str, v116, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v117 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v118 = 89;
    if ((dword_26AE53280 & 8) == 0) {
      uint64_t v118 = 78;
    }
    unsigned __int16 v119 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL Ver2Support,%c\n", (unint64_t)v117, "GNM", 68, "Gnm31_00PrintUsrCfg", v118);
    LbsOsaTrace_WriteLog(0xBu, __str, v119, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v120 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v121 = 89;
    if ((dword_26AE53280 & 0x10) == 0) {
      uint64_t v121 = 78;
    }
    unsigned __int16 v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL LPPPDUs,%c\n", (unint64_t)v120, "GNM", 68, "Gnm31_00PrintUsrCfg", v121);
    LbsOsaTrace_WriteLog(0xBu, __str, v122, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v123 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v124 = 89;
    if ((dword_26AE53280 & 0x20) == 0) {
      uint64_t v124 = 78;
    }
    unsigned __int16 v125 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL Ver2SHA1,%c\n", (unint64_t)v123, "GNM", 68, "Gnm31_00PrintUsrCfg", v124);
    LbsOsaTrace_WriteLog(0xBu, __str, v125, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v126 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v127 = 89;
    if ((dword_26AE53280 & 0x40) == 0) {
      uint64_t v127 = 78;
    }
    unsigned __int16 v128 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL MSAdisabl,%c\n", (unint64_t)v126, "GNM", 68, "Gnm31_00PrintUsrCfg", v127);
    LbsOsaTrace_WriteLog(0xBu, __str, v128, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v129 = mach_continuous_time();
    unsigned __int16 v130 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL PrefPosMeth,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "GNM", 73, "Gnm31_00PrintUsrCfg", byte_26AE53288);
    LbsOsaTrace_WriteLog(0xBu, __str, v130, 4, 1);
  }
  uint64_t v131 = 0;
  char v132 = 1;
  int v133 = 1;
  do
  {
    char v134 = v132;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v135 = mach_continuous_time();
      unsigned __int16 v136 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SIMNo,%u,SIMId,%u,SLPAddrType,%hhu,PortNum,%u,SLPAddrLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNM", 73, "Gnm31_00PrintUsrCfg", v133, *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 82), *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 339), *((unsigned __int16 *)&g_UsrConfig + 131 * v131 + 171), *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 340));
      LbsOsaTrace_WriteLog(0xBu, __str, v136, 4, 1);
    }
    long long v137 = (char *)&g_UsrConfig + 262 * v131;
    int v139 = v137[83];
    long long v138 = v137 + 83;
    if (v139 && (int)strnlen(v138, 0x100uLL) <= 255 && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v140 = mach_continuous_time();
      unsigned __int16 v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SIMNo,%u,SLPAddress,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "GNM", 73, "Gnm31_00PrintUsrCfg", v133, v138);
      LbsOsaTrace_WriteLog(0xBu, __str, v141, 4, 1);
    }
    char v132 = 0;
    int v133 = 2;
    uint64_t v131 = 1;
  }
  while ((v134 & 1) != 0);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v142 = mach_continuous_time();
    unsigned __int16 v143 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL UT2Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v142), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_26AE53496);
    LbsOsaTrace_WriteLog(0xBu, __str, v143, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v144 = mach_continuous_time();
    unsigned __int16 v145 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL UT3Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v144), "GNM", 73, "Gnm31_00PrintUsrCfg", BYTE1(dword_26AE53496));
    LbsOsaTrace_WriteLog(0xBu, __str, v145, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v146 = mach_continuous_time();
    unsigned __int16 v147 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SessinTO,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v146), "GNM", 73, "Gnm31_00PrintUsrCfg", HIWORD(dword_26AE53496));
    LbsOsaTrace_WriteLog(0xBu, __str, v147, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v148 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v149 = 89;
    if ((dword_26AE5349C & 1) == 0) {
      uint64_t v149 = 78;
    }
    unsigned __int16 v150 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CP SemiAutoPos,%c\n", (unint64_t)v148, "GNM", 73, "Gnm31_00PrintUsrCfg", v149);
    LbsOsaTrace_WriteLog(0xBu, __str, v150, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v151 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v152 = 89;
    if (!(_BYTE)dword_26AE53250) {
      uint64_t v152 = 78;
    }
    unsigned __int16 v153 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SimulatedMode,%c\n", (unint64_t)v151, "GNM", 68, "Gnm31_00PrintUsrCfg", v152);
    LbsOsaTrace_WriteLog(0xBu, __str, v153, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v154 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v155 = 89;
    if (!BYTE1(dword_26AE53250)) {
      uint64_t v155 = 78;
    }
    unsigned __int16 v156 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:ExternalClock,%c\n", (unint64_t)v154, "GNM", 68, "Gnm31_00PrintUsrCfg", v155);
    LbsOsaTrace_WriteLog(0xBu, __str, v156, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v157 = mach_continuous_time();
    unsigned __int16 v158 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v157), "GNM", 73, "Gnm31_00PrintUsrCfg", HIWORD(dword_26AE53250));
    LbsOsaTrace_WriteLog(0xBu, __str, v158, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v159 = mach_continuous_time();
    unsigned __int16 v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarlyStartTO,%us\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "GNM", 73, "Gnm31_00PrintUsrCfg", byte_26AE53256);
    LbsOsaTrace_WriteLog(0xBu, __str, v160, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v162 = mach_continuous_time();
    unsigned __int16 v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:E911TargetVertAccM,%fm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "GNM", 73, "Gnm31_00PrintUsrCfg", *(double *)&qword_26AE53258);
    return LbsOsaTrace_WriteLog(0xBu, __str, v163, 4, 1);
  }
  return result;
}

uint64_t Gnm31_12UpdateUserCfg(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_USER_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm31_12UpdateUserCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Update received\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_03HandleUserCfg");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    int v6 = *(_DWORD *)(a1 + 12);
    if (v6)
    {
      dword_26AE53244 = dword_26AE53244 & 0xFFFFFFFE | *(_DWORD *)(a1 + 28) & 1;
      if ((v6 & 2) == 0)
      {
LABEL_8:
        if ((v6 & 4) == 0) {
          goto LABEL_9;
        }
        goto LABEL_37;
      }
    }
    else if ((v6 & 2) == 0)
    {
      goto LABEL_8;
    }
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a1 + 28) >> 1) & 1));
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_38;
    }
LABEL_37:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 28) >> 2) & 1));
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_39;
    }
LABEL_38:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a1 + 28) >> 3) & 1));
    if ((v6 & 0x20) == 0)
    {
LABEL_11:
      if ((v6 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_40;
    }
LABEL_39:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a1 + 28) >> 5) & 1));
    if ((v6 & 0x40) == 0)
    {
LABEL_12:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_41;
    }
LABEL_40:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFFBF | (((*(_DWORD *)(a1 + 28) >> 6) & 1) << 6);
    if ((v6 & 0x80) == 0)
    {
LABEL_13:
      if ((v6 & 0x100) == 0) {
        goto LABEL_14;
      }
      goto LABEL_42;
    }
LABEL_41:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFF7F | (((*(_DWORD *)(a1 + 28) >> 7) & 1) << 7);
    if ((v6 & 0x100) == 0)
    {
LABEL_14:
      if ((v6 & 0x800) == 0) {
        goto LABEL_15;
      }
      goto LABEL_43;
    }
LABEL_42:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFFEFF | (((*(_DWORD *)(a1 + 28) >> 8) & 1) << 8);
    if ((v6 & 0x800) == 0)
    {
LABEL_15:
      if ((v6 & 0x8000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_44;
    }
LABEL_43:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFF7FF | (((*(_DWORD *)(a1 + 28) >> 11) & 1) << 11);
    if ((v6 & 0x8000) == 0)
    {
LABEL_16:
      if ((v6 & 0x10000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_45;
    }
LABEL_44:
    dword_26AE53244 = dword_26AE53244 & 0xFFFF7FFF | (((*(_DWORD *)(a1 + 28) >> 15) & 1) << 15);
    if ((v6 & 0x10000) == 0)
    {
LABEL_17:
      if ((v6 & 0x20000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_46;
    }
LABEL_45:
    dword_26AE53244 = dword_26AE53244 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(a1 + 28)) & 1) << 16);
    if ((v6 & 0x20000) == 0)
    {
LABEL_18:
      if ((v6 & 0x1000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_47;
    }
LABEL_46:
    dword_26AE53244 = dword_26AE53244 & 0xFFFDFFFF | (((*(_DWORD *)(a1 + 28) >> 17) & 1) << 17);
    if ((v6 & 0x1000) == 0)
    {
LABEL_19:
      if ((v6 & 0x40000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_47:
    dword_26AE53244 = dword_26AE53244 & 0xFFFFEFFF | (((*(_DWORD *)(a1 + 28) >> 12) & 1) << 12);
    if ((v6 & 0x40000) == 0)
    {
LABEL_21:
      int v7 = *(_DWORD *)(a1 + 32);
      if ((v7 & 0x200) != 0)
      {
        LOBYTE(dword_26AE53250) = *(unsigned char *)(a1 + 40);
        __int16 v10 = dword_26AE53250;
        BYTE1(dword_26AE53250) = *(unsigned char *)(a1 + 41);
        if ((_BYTE)dword_26AE53250) {
          __int16 v10 = *(_WORD *)(a1 + 42);
        }
        HIWORD(dword_26AE53250) = v10;
        dword_26AE53248 |= 0x200u;
        if ((v6 & 0x4000) == 0)
        {
LABEL_23:
          if ((v7 & 1) == 0) {
            goto LABEL_24;
          }
          goto LABEL_53;
        }
      }
      else if ((v6 & 0x4000) == 0)
      {
        goto LABEL_23;
      }
      dword_26AE53244 = dword_26AE53244 & 0xFFFFBFFF | (((*(_DWORD *)(a1 + 28) >> 14) & 1) << 14);
      if ((v7 & 1) == 0)
      {
LABEL_24:
        if ((v7 & 2) == 0) {
          goto LABEL_25;
        }
        goto LABEL_54;
      }
LABEL_53:
      dword_26AE53248 |= 1u;
      LOBYTE(dword_26AE5324C) = *(unsigned char *)(a1 + 36);
      if ((v7 & 2) == 0)
      {
LABEL_25:
        if ((v7 & 4) == 0) {
          goto LABEL_26;
        }
        goto LABEL_55;
      }
LABEL_54:
      dword_26AE53248 |= 2u;
      BYTE2(dword_26AE5324C) = *(unsigned char *)(a1 + 38);
      if ((v7 & 4) == 0)
      {
LABEL_26:
        if ((v7 & 8) == 0) {
          goto LABEL_27;
        }
        goto LABEL_56;
      }
LABEL_55:
      dword_26AE53248 |= 4u;
      BYTE1(dword_26AE5324C) = *(unsigned char *)(a1 + 37);
      if ((v7 & 8) == 0)
      {
LABEL_27:
        if ((v7 & 0x400) == 0) {
          goto LABEL_28;
        }
        goto LABEL_59;
      }
LABEL_56:
      dword_26AE53248 |= 8u;
      unsigned int v11 = *(unsigned __int8 *)(a1 + 39);
      if (v11 > 7) {
        LOBYTE(v11) = 0;
      }
      HIBYTE(dword_26AE5324C) = v11;
      if ((v7 & 0x400) == 0)
      {
LABEL_28:
        if ((v7 & 0x1000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_60;
      }
LABEL_59:
      dword_26AE53248 |= 0x400u;
      byte_26AE53256 = *(unsigned char *)(a1 + 46);
      if ((v7 & 0x1000) == 0)
      {
LABEL_29:
        if ((v7 & 0x800) == 0) {
          goto LABEL_30;
        }
        goto LABEL_61;
      }
LABEL_60:
      dword_26AE53248 |= 0x1000u;
      qword_26AE53258 = *(void *)(a1 + 48);
      if ((v7 & 0x800) == 0)
      {
LABEL_30:
        if ((v7 & 0x10) == 0) {
          goto LABEL_31;
        }
        goto LABEL_62;
      }
LABEL_61:
      dword_26AE53248 |= 0x800u;
      word_26AE53254 = *(_WORD *)(a1 + 44);
      if ((v7 & 0x10) == 0)
      {
LABEL_31:
        if ((v7 & 0x20) == 0) {
          goto LABEL_98;
        }
LABEL_63:
        dword_26AE53248 |= 0x20u;
        int v12 = *(_DWORD *)(a1 + 640);
        if (v12)
        {
          dword_26AE53280 = dword_26AE53280 & 0xFFFFFFFE | *(_DWORD *)(a1 + 88) & 1;
          if ((v12 & 2) == 0)
          {
LABEL_65:
            if ((v12 & 4) == 0) {
              goto LABEL_66;
            }
            goto LABEL_85;
          }
        }
        else if ((v12 & 2) == 0)
        {
          goto LABEL_65;
        }
        dword_26AE53280 = dword_26AE53280 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a1 + 88) >> 1) & 1));
        if ((v12 & 4) == 0)
        {
LABEL_66:
          if ((v12 & 8) == 0) {
            goto LABEL_67;
          }
          goto LABEL_86;
        }
LABEL_85:
        dword_26AE53280 = dword_26AE53280 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 88) >> 2) & 1));
        if ((v12 & 8) == 0)
        {
LABEL_67:
          if ((v12 & 0x10) == 0) {
            goto LABEL_68;
          }
          goto LABEL_87;
        }
LABEL_86:
        dword_26AE53280 = dword_26AE53280 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a1 + 88) >> 3) & 1));
        if ((v12 & 0x10) == 0)
        {
LABEL_68:
          if ((v12 & 0x20) == 0) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }
LABEL_87:
        dword_26AE53280 = dword_26AE53280 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(a1 + 88) >> 4) & 1));
        if ((v12 & 0x20) == 0)
        {
LABEL_70:
          int v13 = *(_DWORD *)(a1 + 92);
          if (v13)
          {
            dword_26AE53284 |= 1u;
            byte_26AE53288 = *(unsigned char *)(a1 + 96);
          }
          if ((v12 & 0x40) != 0) {
            dword_26AE53280 = dword_26AE53280 & 0xFFFFFFBF | (((*(_DWORD *)(a1 + 88) >> 6) & 1) << 6);
          }
          if (byte_26AE53288 == 1 && (dword_26AE53280 & 0x40) != 0)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v14 = mach_continuous_time();
              unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DisableMSA,true,PrefPosMeth,eMSA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm31_03HandleUserCfg", 770);
              LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
            }
            byte_26AE53288 = 2;
            int v13 = *(_DWORD *)(a1 + 92);
          }
          if ((v13 & 0x40) != 0)
          {
            dword_26AE53284 |= 0x40u;
            LOWORD(dword_26AE53496) = *(_WORD *)(a1 + 622);
            if ((v13 & 0x100) == 0)
            {
LABEL_81:
              if ((v13 & 4) == 0)
              {
LABEL_98:
                __int16 v24 = dword_26AE53248;
                if ((*(unsigned char *)(a1 + 32) & 0x40) != 0)
                {
                  __int16 v24 = dword_26AE53248 | 0x40;
                  dword_26AE53248 |= 0x40u;
                  if (*(unsigned char *)(a1 + 644)) {
                    dword_26AE5349C = dword_26AE5349C & 0xFFFFFFFE | *(_DWORD *)(a1 + 628) & 1;
                  }
                }
                if ((v24 & 0x800) != 0)
                {
                  Gnm53_15InitLtlRefTime(604800 * (unsigned __int16)word_26AE53254);
                  __int16 v24 = dword_26AE53248;
                }
                if ((v24 & 0x200) != 0 && BYTE1(dword_26AE53250)) {
                  Gnm53_58SetLtlExtHWClk();
                }
                Gnm31_05SendUserCfgGnc();
                Gnm31_06SendUserCfgLsim();
                Gnm31_00PrintUsrCfg("UPDATED");
                return 0;
              }
LABEL_91:
              uint64_t v16 = 0;
              dword_26AE53284 |= 4u;
              char v17 = 1;
              do
              {
                char v18 = v17;
                uint64_t v19 = a1 + 262 * v16;
                if (*(unsigned char *)(v19 + 355))
                {
                  uint64_t v20 = a1 + 262 * v16;
                  size_t v21 = *(unsigned __int8 *)(v20 + 356);
                  if (*(unsigned char *)(v20 + 356))
                  {
                    uint64_t v22 = (char *)&g_UsrConfig + 262 * v16;
                    v22[339] = *(unsigned char *)(v19 + 355);
                    v22[340] = v21;
                    v22[82] = *(unsigned char *)(v19 + 98);
                    memcpy_s("Gnm31_03HandleUserCfg", 442, v22 + 83, 0x100u, (const void *)(a1 + 262 * v16 + 99), v21);
                    v22[v22[340] + 83] = 0;
                  }
                }
                char v17 = 0;
                __int16 v23 = *(_WORD *)(a1 + 262 * v16 + 358);
                if (!v23) {
                  __int16 v23 = 7275;
                }
                *((_WORD *)&g_UsrConfig + 131 * v16 + 171) = v23;
                uint64_t v16 = 1;
              }
              while ((v18 & 1) != 0);
              goto LABEL_98;
            }
          }
          else if ((v13 & 0x100) == 0)
          {
            goto LABEL_81;
          }
          dword_26AE53284 |= 0x100u;
          HIWORD(dword_26AE53496) = *(_WORD *)(a1 + 624);
          if ((v13 & 4) == 0) {
            goto LABEL_98;
          }
          goto LABEL_91;
        }
LABEL_69:
        dword_26AE53280 = dword_26AE53280 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a1 + 88) >> 5) & 1));
        goto LABEL_70;
      }
LABEL_62:
      dword_26AE53248 |= 0x10u;
      xmmword_26AE53260 = *(_OWORD *)(a1 + 56);
      *(long long *)((char *)&xmmword_26AE53260 + 14) = *(_OWORD *)(a1 + 70);
      if ((*(_DWORD *)(a1 + 32) & 0x20) == 0) {
        goto LABEL_98;
      }
      goto LABEL_63;
    }
LABEL_20:
    dword_26AE53244 = dword_26AE53244 & 0xFFFBFFFF | (((*(_DWORD *)(a1 + 28) >> 18) & 1) << 18);
    goto LABEL_21;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm31_12UpdateUserCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 0, 1);
  }
  return 0;
}

uint64_t Gnm31_14GetUserCfg(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _DWORD *))
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x270uLL, 0, 0x270uLL);
  char v4 = dword_26AE53248;
  __s[0] = -1;
  __s[1] = dword_26AE53244;
  int v20 = dword_26AE53248;
  v5.i32[0] = dword_26AE5324C;
  int16x8_t v6 = (int16x8_t)vmovl_u8(v5);
  *(int16x4_t *)v6.unsigned int i8 = vuzp1_s16(*(int16x4_t *)v6.i8, vrev32_s16(*(int16x4_t *)v6.i8));
  unsigned __int32 v21 = vmovn_s16(v6).u32[0];
  char v32 = byte_26AE53256;
  uint64_t v33 = qword_26AE53258;
  __int16 v31 = word_26AE53254;
  int v30 = dword_26AE53250;
  if ((dword_26AE53248 & 0x10) != 0)
  {
    v22[0] = xmmword_26AE53260;
    *(_OWORD *)((char *)v22 + 14) = *(long long *)((char *)&xmmword_26AE53260 + 14);
  }
  if ((dword_26AE53248 & 0x20) != 0)
  {
    int v24 = dword_26AE53280;
    int v23 = -1;
    int v25 = dword_26AE53284;
    char v26 = byte_26AE53288;
    int v27 = dword_26AE53496;
    if ((dword_26AE53284 & 4) != 0)
    {
      uint64_t v7 = 0;
      char v8 = 1;
      do
      {
        char v9 = v8;
        uint64_t v10 = 262 * v7;
        unsigned int v11 = (char *)&g_UsrConfig + v10;
        char v12 = *((unsigned char *)&g_UsrConfig + v10 + 82);
        int v13 = (char *)__s + v10;
        v13[62] = v12;
        size_t v14 = v11[340];
        v13[320] = v14;
        v13[319] = v11[339];
        *((_WORD *)v13 + 161) = *((_WORD *)v11 + 171);
        strncpy_s(v13 + 63, 0x100u, v11 + 83, v14);
        char v8 = 0;
        uint64_t v7 = 1;
      }
      while ((v9 & 1) != 0);
      char v4 = v20;
    }
  }
  if ((v4 & 0x40) != 0)
  {
    int v28 = -1;
    int v29 = dword_26AE5349C;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetCfgCB returned UserCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 73, "Gnm31_14GetUserCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v16, 4, 1);
  }
  return a2(a1, 1, __s);
}

uint64_t gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(uint64_t a1, void *a2, std::string *a3)
{
  v27[19] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v5 = MEMORY[0x263F8C328] + 104;
  v27[0] = MEMORY[0x263F8C328] + 104;
  uint64_t v6 = MEMORY[0x263F8C328] + 64;
  uint64_t v24 = MEMORY[0x263F8C328] + 64;
  uint64_t v7 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  v23[0] = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = v8;
  v23[1] = 0;
  char v9 = (std::ios_base *)((char *)v23 + *(void *)(v23[0] - 24));
  std::ios_base::init(v9, v25);
  uint64_t v10 = MEMORY[0x263F8C328] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v11 = v7[5];
  uint64_t v24 = v7[4];
  *(void *)((char *)&v25[-1] + *(void *)(v24 - 24)) = v11;
  v23[0] = v7[1];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = v7[6];
  v27[0] = v5;
  v23[0] = v10;
  uint64_t v24 = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v25, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2[1] != *a2)
  {
    unsigned int v12 = 1;
    do
    {
      int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"0x", 2);
      __p.__r_.__value_.__s.__data_[0] = 48;
      size_t v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&__p);
      uint64_t v15 = *v14;
      *(uint64_t *)((char *)v14 + *(void *)(*v14 - 24) + 24) = 2;
      *(_DWORD *)((char *)v14 + *(void *)(v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(v15 - 24) + 8) & 0xFFFFFFB5 | 8;
      unsigned __int16 v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      std::stringbuf::str();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v26, &__p);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    while (a2[1] - *a2 > (unint64_t)v12++);
  }
  v23[0] = *MEMORY[0x263F8C2B8];
  uint64_t v20 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v24 = v20;
  v25[0] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x230F4E540](v27);
}

void sub_22B880EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_01GetZxTestType(uint64_t a1, unsigned __int8 **a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v4 = *a2;
  int v5 = (*a2)[8];
  if (v5 != 32 && v5 != 83)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Test status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga23_01GetZxTestType", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    }
    uint64_t v7 = 0;
    char v8 = -1;
    goto LABEL_11;
  }
  int v6 = v4[2];
  if (v6 == 84)
  {
    int v11 = v4[3];
    if (v11 == 71)
    {
      if (v4[4] == 77)
      {
        uint64_t v7 = 0;
        char v8 = 21;
        goto LABEL_11;
      }
    }
    else if (v11 == 76)
    {
      int v12 = v4[4];
      if (v12 == 77 || v12 == 32)
      {
        uint64_t v7 = 0;
        char v8 = 22;
        goto LABEL_11;
      }
    }
    else if (v11 == 80 && v4[4] == 77)
    {
      uint64_t v7 = 0;
      char v8 = v4[9];
      goto LABEL_11;
    }
  }
  else if (v6 == 88 && v4[3] == 86 && v4[4] == 77)
  {
    uint64_t v7 = 0;
    char v8 = 5;
LABEL_11:
    *a3 = v8;
    return v7;
  }
  *(_DWORD *)a3 = 1024;
  int v13 = *a2;
  if ((*a2)[8] == 32)
  {
    if (v13[2] == 84)
    {
      HIDWORD(v14) = v13[3];
      LODWORD(v14) = (HIDWORD(v14) << 24) - 1107296256;
      uint64_t v7 = 3;
      switch((v14 >> 25))
      {
        case 0u:
          if (v13[4] == 32)
          {
            *a3 = 0;
            goto LABEL_37;
          }
          break;
        case 2u:
          if (v13[4] == 32)
          {
            *a3 = 3;
            goto LABEL_37;
          }
          break;
        case 3u:
          if (v13[4] == 32)
          {
            uint64_t v7 = 2;
            *a3 = 2;
          }
          break;
        case 4u:
          int v17 = v13[4];
          if (v17 == 80 || v17 == 77)
          {
            *a3 = 1;
LABEL_37:
            uint64_t v7 = 2;
          }
          break;
        case 7u:
          if (v13[4] == 80)
          {
            *(_DWORD *)a3 = v13[9];
            return 1;
          }
          break;
        default:
          return v7;
      }
    }
    else
    {
      return 3;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Test status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga23_01GetZxTestType", 257);
    uint64_t v7 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
  }
  else
  {
    return 1;
  }
  return v7;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_03BuildZxCpRomCSProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  int v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    uint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    uint64_t v7 = &v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      int v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = 122;
    uint64_t v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  unint64_t v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *uint64_t v7 = 120;
    char v18 = v7 + 1;
    goto LABEL_39;
  }
  unint64_t v19 = *a2;
  uint64_t v20 = &v7[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  int v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  char v18 = &v20[v24 + 1];
  if (v7 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  std::string v26 = &v7[~v19];
  do
  {
    char v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (unsigned char *)v19);
  uint64_t v7 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *char v18 = 84;
    int v29 = v18 + 1;
    goto LABEL_57;
  }
  unint64_t v30 = *a2;
  __int16 v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  double v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  int v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  uint64_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  char v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *int v29 = 112;
    uint64_t v40 = v29 + 1;
    goto LABEL_75;
  }
  unint64_t v41 = *a2;
  double v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unsigned __int16 v47 = (char *)(v46 + v45);
  v42[v46] = 112;
  uint64_t v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  double v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  int v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *uint64_t v40 = 80;
    double v51 = v40 + 1;
    goto LABEL_93;
  }
  unint64_t v52 = *a2;
  unsigned __int16 v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  uint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 80;
  double v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  unsigned __int16 v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  uint64_t v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 0;
    uint64_t v62 = v51 + 1;
    goto LABEL_111;
  }
  unint64_t v63 = *a2;
  double v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  uint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  uint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  unsigned __int16 v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  double v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *uint64_t v62 = 0;
    uint64_t v73 = v62 + 1;
    goto LABEL_129;
  }
  unint64_t v74 = *a2;
  uint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  uint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  uint64_t v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  uint64_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  uint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    unsigned __int16 v84 = v73 + 1;
    goto LABEL_147;
  }
  unint64_t v85 = *a2;
  uint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unsigned __int16 v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  unsigned __int16 v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  double v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  uint64_t v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *unsigned __int16 v84 = 2;
    uint64_t v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  unint64_t v96 = *a2;
  uint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  uint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 2;
  uint64_t v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  uint64_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  unsigned __int16 v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = v95;
  long long v161 = 0;
  uint64_t v162 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  unint64_t v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v161 - (unsigned char *)__p <= v105)
  {
    if (__p)
    {
      long long v161 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v111 = 0;
    uint64_t v112 = 8;
    int v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      uint64_t v112 = ++v113;
    }
    while (v105 >= v113);
    long long v161 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      unsigned __int16 v116 = (unsigned char *)a2[1];
      unint64_t v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        unint64_t v118 = *a2;
        unsigned __int16 v119 = &v116[-*a2];
        unint64_t v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v121 = v115 - v118;
        if (2 * v121 > v120) {
          unint64_t v120 = 2 * v121;
        }
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v122 = v120;
        }
        if (v122) {
          unint64_t v123 = (unint64_t)operator new(v122);
        }
        else {
          unint64_t v123 = 0;
        }
        uint64_t v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        double v117 = &v119[v123 + 1];
        if (v116 == (unsigned char *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          unsigned __int16 v125 = &v116[~v118];
          do
          {
            char v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (unsigned char *)v118);
          unsigned __int16 v116 = (unsigned char *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        unsigned char *v116 = v111;
        double v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      unint64_t v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        unsigned char *v117 = HIBYTE(v111);
        uint64_t v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      unint64_t v129 = *a2;
      unsigned __int16 v130 = &v117[-*a2];
      unint64_t v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v132 = v127 - v129;
      if (2 * v132 > v131) {
        unint64_t v131 = 2 * v132;
      }
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v133 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v133 = v131;
      }
      if (v133) {
        unint64_t v134 = (unint64_t)operator new(v133);
      }
      else {
        unint64_t v134 = 0;
      }
      uint64_t v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      uint64_t v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (unsigned char *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        unsigned __int16 v136 = &v117[~v129];
        do
        {
          char v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (unsigned char *)v129);
        double v117 = (unsigned char *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          unint64_t v138 = v128 - *a2;
          if (v138 < 0x10000)
          {
            *(_WORD *)(*a2 + 5) = v138 - 8;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            char v141 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(unsigned char *)(*a2 + 6);
            if (v141)
            {
              *(unsigned char *)(*a2 + 7) = v141;
              unsigned __int16 v143 = (unsigned char *)a2[1];
              unint64_t v142 = a2[2];
              if ((unint64_t)v143 >= v142)
              {
                unint64_t v149 = *a2;
                unsigned __int16 v150 = &v143[-*a2];
                unint64_t v151 = (unint64_t)(v150 + 1);
                if ((uint64_t)(v150 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v152 = v142 - v149;
                if (2 * v152 > v151) {
                  unint64_t v151 = 2 * v152;
                }
                if (v152 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v153 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v153 = v151;
                }
                if (v153) {
                  unint64_t v154 = (unint64_t)operator new(v153);
                }
                else {
                  unint64_t v154 = 0;
                }
                uint64_t v155 = (char *)(v154 + v153);
                v150[v154] = 10;
                uint64_t v144 = (uint64_t)&v150[v154 + 1];
                if (v143 == (unsigned char *)v149)
                {
                  v154 += (unint64_t)v150;
                }
                else
                {
                  unsigned __int16 v156 = &v143[~v149];
                  do
                  {
                    char v157 = *--v143;
                    (v156--)[v154] = v157;
                  }
                  while (v143 != (unsigned char *)v149);
                  unsigned __int16 v143 = (unsigned char *)*a2;
                }
                *a2 = v154;
                a2[1] = v144;
                a2[2] = (unint64_t)v155;
                if (v143) {
                  operator delete(v143);
                }
              }
              else
              {
                *unsigned __int16 v143 = 10;
                uint64_t v144 = (uint64_t)(v143 + 1);
              }
              a2[1] = v144;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v158 = mach_continuous_time();
                unsigned __int16 v159 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v158), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v159, 5, 1);
              }
              return 1;
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v145 = mach_continuous_time();
                unsigned __int16 v146 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v145), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v146, 0, 1);
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v147 = mach_continuous_time();
                unsigned __int16 v148 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v147), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v148, 5, 1);
              }
              uint64_t result = 0;
              a2[1] = *a2;
            }
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v139 = mach_continuous_time();
              unsigned __int16 v140 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v139), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v140, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_171;
            }
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v106 = mach_continuous_time();
    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomCs\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 781);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    uint64_t v109 = mach_continuous_time();
    unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_04ParseZxCpRomCSProdMsg(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  unint64_t v5 = (unsigned char *)*a2;
  unint64_t v6 = a2[1] - *a2;
  if (v6 <= 8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_10;
    }
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    goto LABEL_10;
  }
  if (v5[2] != 84 || v5[3] != 80 || v5[4] != 80)
  {
    uint64_t v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_04ParseZxCpRomCSProdMsg", 770);
      int v12 = 0;
      goto LABEL_22;
    }
    return v8;
  }
  if (v5[8] != 32)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom status\n");
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (v6 <= 0xA)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomCS\n");
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v9, "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
LABEL_12:
      size_t v11 = v10;
      int v12 = 5;
LABEL_22:
      LbsOsaTrace_WriteLog(0x18u, __str, v11, v12, 1);
      return 0;
    }
    return v8;
  }
  unsigned __int8 __dst = 0;
  memcpy_s("Ga23_04ParseZxCpRomCSProdMsg", 398, &__dst, 1u, v5 + 10, 1uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CpStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga23_04ParseZxCpRomCSProdMsg", __dst);
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
  }
  if (__dst != 112)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v19, "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
    goto LABEL_12;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v17 = mach_continuous_time();
  unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
  uint64_t v8 = 1;
  LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
  return v8;
}

uint64_t gnssTest::ZxHandler::Ga23_03IsCheckSumValid(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  unsigned __int16 v18 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v18, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  if ((unint64_t)(v19 - v18) >= 7)
  {
    __int16 v2 = 0;
    for (uint64_t i = 2; i != 7; ++i)
      v2 += v18[i];
  }
  else
  {
    if (!v18)
    {
LABEL_17:
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid CS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga23_03IsCheckSumValid", 784);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
      return 0;
    }
    __int16 v2 = -1;
  }
  unint64_t v19 = v18;
  operator delete(v18);
  if (v2 == -1) {
    goto LABEL_17;
  }
  unsigned __int16 v4 = *(const void **)a1;
  if (*(unsigned __int8 *)(*(void *)a1 + 7) != v2) {
    goto LABEL_17;
  }
  std::string __p = 0;
  unsigned __int16 v16 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v4, *(void *)(a1 + 8), *(void *)(a1 + 8) - (void)v4);
  unint64_t v5 = *(void *)(a1 + 8) - *(void *)a1 - 4;
  if (v5 >= 8 && (v5 <= 0x7FF ? (BOOL v6 = v16 - (unsigned char *)__p > v5) : (BOOL v6 = 0), v6))
  {
    unsigned __int16 v12 = 0;
    uint64_t v13 = 8;
    int v14 = 8;
    do
    {
      v12 += *((unsigned __int8 *)__p + v13);
      uint64_t v13 = ++v14;
    }
    while (v5 >= v14);
    unsigned __int16 v16 = __p;
    operator delete(__p);
    if (v12 != 0xFFFF && *(unsigned __int16 *)(*(void *)(a1 + 8) - 3) == v12) {
      return 1;
    }
  }
  else if (__p)
  {
    unsigned __int16 v16 = __p;
    operator delete(__p);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CS Comp. err\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga23_03IsCheckSumValid", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_05BuildZxMeRomCSProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  BOOL v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    unsigned __int16 v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    unsigned __int16 v7 = &v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      BOOL v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *BOOL v6 = 122;
    unsigned __int16 v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  unint64_t v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *unsigned __int16 v7 = 120;
    unsigned __int16 v18 = v7 + 1;
    goto LABEL_39;
  }
  unint64_t v19 = *a2;
  uint64_t v20 = &v7[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  int v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  unsigned __int16 v18 = &v20[v24 + 1];
  if (v7 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  std::string v26 = &v7[~v19];
  do
  {
    char v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (unsigned char *)v19);
  unsigned __int16 v7 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *unsigned __int16 v18 = 84;
    int v29 = v18 + 1;
    goto LABEL_57;
  }
  unint64_t v30 = *a2;
  __int16 v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  double v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  int v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  uint64_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  unsigned __int16 v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *int v29 = 112;
    uint64_t v40 = v29 + 1;
    goto LABEL_75;
  }
  unint64_t v41 = *a2;
  double v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unsigned __int16 v47 = (char *)(v46 + v45);
  v42[v46] = 112;
  uint64_t v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  double v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  int v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *uint64_t v40 = 77;
    double v51 = v40 + 1;
    goto LABEL_93;
  }
  unint64_t v52 = *a2;
  unsigned __int16 v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  uint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 77;
  double v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  unsigned __int16 v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  uint64_t v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 0;
    uint64_t v62 = v51 + 1;
    goto LABEL_111;
  }
  unint64_t v63 = *a2;
  double v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  uint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  uint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  unsigned __int16 v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  double v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *uint64_t v62 = 0;
    uint64_t v73 = v62 + 1;
    goto LABEL_129;
  }
  unint64_t v74 = *a2;
  uint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  uint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  uint64_t v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  uint64_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  uint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    unsigned __int16 v84 = v73 + 1;
    goto LABEL_147;
  }
  unint64_t v85 = *a2;
  uint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unsigned __int16 v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  unsigned __int16 v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  double v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  uint64_t v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *unsigned __int16 v84 = 2;
    uint64_t v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  unint64_t v96 = *a2;
  uint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  uint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 2;
  uint64_t v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  uint64_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  unsigned __int16 v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = v95;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  unint64_t v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v162 - (unsigned char *)__p <= v105)
  {
    if (__p)
    {
      uint64_t v162 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v111 = 0;
    uint64_t v112 = 8;
    int v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      uint64_t v112 = ++v113;
    }
    while (v105 >= v113);
    uint64_t v162 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      unsigned __int16 v116 = (unsigned char *)a2[1];
      unint64_t v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        unint64_t v118 = *a2;
        unsigned __int16 v119 = &v116[-*a2];
        unint64_t v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v121 = v115 - v118;
        if (2 * v121 > v120) {
          unint64_t v120 = 2 * v121;
        }
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v122 = v120;
        }
        if (v122) {
          unint64_t v123 = (unint64_t)operator new(v122);
        }
        else {
          unint64_t v123 = 0;
        }
        uint64_t v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        double v117 = &v119[v123 + 1];
        if (v116 == (unsigned char *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          unsigned __int16 v125 = &v116[~v118];
          do
          {
            char v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (unsigned char *)v118);
          unsigned __int16 v116 = (unsigned char *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        unsigned char *v116 = v111;
        double v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      unint64_t v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        unsigned char *v117 = HIBYTE(v111);
        uint64_t v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      unint64_t v129 = *a2;
      unsigned __int16 v130 = &v117[-*a2];
      unint64_t v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v132 = v127 - v129;
      if (2 * v132 > v131) {
        unint64_t v131 = 2 * v132;
      }
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v133 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v133 = v131;
      }
      if (v133) {
        unint64_t v134 = (unint64_t)operator new(v133);
      }
      else {
        unint64_t v134 = 0;
      }
      uint64_t v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      uint64_t v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (unsigned char *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        unsigned __int16 v136 = &v117[~v129];
        do
        {
          char v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (unsigned char *)v129);
        double v117 = (unsigned char *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          unint64_t v138 = (unsigned char *)*a2;
          unint64_t v139 = v128 - *a2;
          if (v139 < 0x10000)
          {
            __int16 v142 = v139 - 8;
            v138[5] = v142;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v142);
            unsigned __int16 v143 = (unsigned char *)*a2;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            char v144 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(unsigned char *)(*a2 + 6);
            if (v144)
            {
              v143[7] = v144;
              unsigned __int16 v146 = (unsigned char *)a2[1];
              unint64_t v145 = a2[2];
              if ((unint64_t)v146 >= v145)
              {
                unint64_t v150 = *a2;
                unint64_t v151 = &v146[-*a2];
                unint64_t v152 = (unint64_t)(v151 + 1);
                if ((uint64_t)(v151 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v153 = v145 - v150;
                if (2 * v153 > v152) {
                  unint64_t v152 = 2 * v153;
                }
                if (v153 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v154 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v154 = v152;
                }
                if (v154) {
                  unint64_t v155 = (unint64_t)operator new(v154);
                }
                else {
                  unint64_t v155 = 0;
                }
                unsigned __int16 v156 = (char *)(v155 + v154);
                v151[v155] = 10;
                uint64_t v147 = (uint64_t)&v151[v155 + 1];
                if (v146 == (unsigned char *)v150)
                {
                  v155 += (unint64_t)v151;
                }
                else
                {
                  char v157 = &v146[~v150];
                  do
                  {
                    char v158 = *--v146;
                    (v157--)[v155] = v158;
                  }
                  while (v146 != (unsigned char *)v150);
                  unsigned __int16 v146 = (unsigned char *)*a2;
                }
                *a2 = v155;
                a2[1] = v147;
                a2[2] = (unint64_t)v156;
                if (v146) {
                  operator delete(v146);
                }
              }
              else
              {
                *unsigned __int16 v146 = 10;
                uint64_t v147 = (uint64_t)(v146 + 1);
              }
              a2[1] = v147;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v159 = mach_continuous_time();
                unsigned __int16 v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v160, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v143;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v148 = mach_continuous_time();
                unsigned __int16 v149 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v149, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_171;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v138;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v140 = mach_continuous_time();
              unsigned __int16 v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRomRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v141, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_171;
            }
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v106 = mach_continuous_time();
    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    uint64_t v109 = mach_continuous_time();
    unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_06ParseZxMeRomCSProdMsg(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    goto LABEL_15;
  }
  uint64_t v3 = (unsigned char *)*a2;
  unint64_t v4 = a2[1] - *a2;
  if (v4 <= 8)
  {
    int v5 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!v5) {
      return result;
    }
LABEL_15:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n");
LABEL_16:
    LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    return 0;
  }
  if (v3[2] != 84 || v3[3] != 80 || v3[4] != 77)
  {
    int v12 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!v12) {
      return result;
    }
    goto LABEL_15;
  }
  if (v3[8] == 32)
  {
    if (v4 > 0x10)
    {
      *(_DWORD *)&__dst[3] = 0;
      *(_DWORD *)unsigned __int8 __dst = 0;
      memcpy_s("Ga23_06ParseZxMeRomCSProdMsg", 525, __dst, 7u, v3 + 10, 7uLL);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeStatus,%u,MeResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga23_06ParseZxMeRomCSProdMsg", __dst[0], __dst[1]);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
      }
      int v10 = 0;
      if (__dst[0] != 99 || __dst[1] == 112) {
        return v10 == 0;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeRom Resp Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "Ga23_06ParseZxMeRomCSProdMsg");
        int v10 = 1;
        int v11 = 4;
        goto LABEL_26;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga23_06ParseZxMeRomCSProdMsg", 770);
      int v10 = 1;
      int v11 = 0;
LABEL_26:
      LbsOsaTrace_WriteLog(0x18u, __str, v9, v11, 1);
      return v10 == 0;
    }
    int v10 = 1;
    return v10 == 0;
  }
  int v14 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  BOOL result = 0;
  if (v14)
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom status\n");
    goto LABEL_16;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_07BuildZxMeCwModProdMsg(uint64_t a1, unint64_t *a2, int a3, int a4, int a5, unsigned __int16 a6, double a7)
{
  uint64_t v326 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
  }
  uint64_t v17 = (unsigned char *)a2[1];
  unint64_t v16 = a2[2];
  if ((unint64_t)v17 >= v16)
  {
    unint64_t v19 = *a2;
    uint64_t v20 = &v17[-*a2];
    unint64_t v21 = (unint64_t)(v20 + 1);
    if ((uint64_t)(v20 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v22 = v16 - v19;
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v23 = v21;
    }
    if (v23) {
      unint64_t v24 = (unint64_t)operator new(v23);
    }
    else {
      unint64_t v24 = 0;
    }
    int v25 = (char *)(v24 + v23);
    v20[v24] = 122;
    unsigned __int16 v18 = &v20[v24 + 1];
    if (v17 == (unsigned char *)v19)
    {
      v24 += (unint64_t)v20;
    }
    else
    {
      std::string v26 = &v17[~v19];
      do
      {
        char v27 = *--v17;
        (v26--)[v24] = v27;
      }
      while (v17 != (unsigned char *)v19);
      uint64_t v17 = (unsigned char *)*a2;
    }
    *a2 = v24;
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v17 = 122;
    unsigned __int16 v18 = v17 + 1;
  }
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *unsigned __int16 v18 = 120;
    int v29 = v18 + 1;
    goto LABEL_39;
  }
  unint64_t v30 = *a2;
  __int16 v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  double v36 = (char *)(v35 + v34);
  v31[v35] = 120;
  int v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_38:
    operator delete(v18);
    goto LABEL_39;
  }
  uint64_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  unsigned __int16 v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *int v29 = 84;
    uint64_t v40 = v29 + 1;
    goto LABEL_57;
  }
  unint64_t v41 = *a2;
  double v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unsigned __int16 v47 = (char *)(v46 + v45);
  v42[v46] = 84;
  uint64_t v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_56:
    operator delete(v29);
    goto LABEL_57;
  }
  double v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  int v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *uint64_t v40 = 112;
    double v51 = v40 + 1;
    goto LABEL_75;
  }
  unint64_t v52 = *a2;
  unsigned __int16 v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  uint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 112;
  double v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_74:
    operator delete(v40);
    goto LABEL_75;
  }
  unsigned __int16 v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  uint64_t v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 77;
    uint64_t v62 = v51 + 1;
    goto LABEL_93;
  }
  unint64_t v63 = *a2;
  double v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  uint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 77;
  uint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_92:
    operator delete(v51);
    goto LABEL_93;
  }
  unsigned __int16 v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  double v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *uint64_t v62 = 0;
    uint64_t v73 = v62 + 1;
    goto LABEL_111;
  }
  unint64_t v74 = *a2;
  uint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  uint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  uint64_t v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_110:
    operator delete(v62);
    goto LABEL_111;
  }
  uint64_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  uint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    unsigned __int16 v84 = v73 + 1;
    goto LABEL_129;
  }
  unint64_t v85 = *a2;
  uint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unsigned __int16 v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  unsigned __int16 v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_128:
    operator delete(v73);
    goto LABEL_129;
  }
  double v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  uint64_t v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *unsigned __int16 v84 = 0;
    uint64_t v95 = (uint64_t)(v84 + 1);
    goto LABEL_147;
  }
  unint64_t v96 = *a2;
  uint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  uint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 0;
  uint64_t v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_146:
    operator delete(v84);
    goto LABEL_147;
  }
  uint64_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  unsigned __int16 v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = v95;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v105 = mach_continuous_time();
    unsigned __int16 v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v106, 5, 1);
  }
  char v107 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_155;
    case 1:
    case 2:
    case 3:
      a3 = 0;
      char v107 = 1;
      if (!a5) {
        goto LABEL_175;
      }
      goto LABEL_156;
    case 4:
      *(_DWORD *)(a1 + 4) = a4;
      LOBYTE(a3) = 3;
      if (a5) {
        unsigned __int8 v109 = a4 + 8;
      }
      else {
        unsigned __int8 v109 = 0;
      }
      if (a5) {
        int v108 = 0;
      }
      else {
        int v108 = a4 + 8;
      }
      char v107 = 1;
      goto LABEL_176;
    case 5:
    case 7:
      char v107 = 1;
      a3 = 5;
      if (!a5) {
        goto LABEL_175;
      }
      goto LABEL_156;
    case 8:
    case 9:
      char v107 = 1;
      a3 = 4;
LABEL_155:
      if (a5) {
        goto LABEL_156;
      }
      goto LABEL_175;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v112 = mach_continuous_time();
        unsigned __int16 v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 87, "Ga23_09MapFramCwModParamToCoreParams", 770, a3);
        LbsOsaTrace_WriteLog(0x18u, __str, v113, 2, 1);
      }
      a3 = 0;
      char v107 = 0;
      if (a5)
      {
LABEL_156:
        if (a3 == 5)
        {
          int v108 = 0;
          unsigned __int8 v109 = a4 ^ 0x80;
        }
        else if (a3 == 4)
        {
          int v108 = 0;
          unsigned __int8 v109 = a4 + 64;
        }
        else if (a3)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v110 = mach_continuous_time();
            unsigned __int16 v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v110), "ADP", 69, "Ga23_09MapFramCwModParamToCoreParams", 770, a3);
            LbsOsaTrace_WriteLog(0x18u, __str, v111, 0, 1);
          }
          unsigned __int8 v109 = 0;
          int v108 = 0;
          char v107 = 0;
        }
        else
        {
          int v108 = 0;
          unsigned __int8 v109 = a4;
        }
      }
      else
      {
LABEL_175:
        unsigned __int8 v109 = 0;
        int v108 = 0;
      }
LABEL_176:
      unsigned int v114 = vcvtpd_s64_f64(a7);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v115 = mach_continuous_time();
        unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SvId,%u,TimeForTestMs,%u,Bw,%u,NumOfChannels,%u,Signalsource,%u,CenterDopplerFreq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams", v109, a6, v114, 1, 0, v108);
        LbsOsaTrace_WriteLog(0x18u, __str, v116, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v117 = mach_continuous_time();
        unsigned __int16 v118 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v117), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams");
        LbsOsaTrace_WriteLog(0x18u, __str, v118, 5, 1);
      }
      if ((v107 & 1) == 0)
      {
        a2[1] = *a2;
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v123 = mach_continuous_time();
        unsigned __int16 v124 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v123), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
        LbsOsaTrace_WriteLog(0x18u, __str, v124, 5, 1);
        return 0;
      }
      unint64_t v120 = (unsigned char *)a2[1];
      unint64_t v119 = a2[2];
      if ((unint64_t)v120 >= v119)
      {
        unint64_t v125 = *a2;
        char v126 = &v120[-*a2];
        unint64_t v127 = (unint64_t)(v126 + 1);
        if ((uint64_t)(v126 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v128 = v119 - v125;
        if (2 * v128 > v127) {
          unint64_t v127 = 2 * v128;
        }
        if (v128 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v129 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v129 = v127;
        }
        if (v129) {
          unint64_t v130 = (unint64_t)operator new(v129);
        }
        else {
          unint64_t v130 = 0;
        }
        unint64_t v131 = (char *)(v130 + v129);
        v126[v130] = 1;
        unint64_t v121 = &v126[v130 + 1];
        if (v120 == (unsigned char *)v125)
        {
          v130 += (unint64_t)v126;
        }
        else
        {
          unint64_t v132 = &v120[~v125];
          do
          {
            char v133 = *--v120;
            (v132--)[v130] = v133;
          }
          while (v120 != (unsigned char *)v125);
          unint64_t v120 = (unsigned char *)*a2;
        }
        *a2 = v130;
        a2[1] = (unint64_t)v121;
        a2[2] = (unint64_t)v131;
        if (v120) {
          operator delete(v120);
        }
      }
      else
      {
        *unint64_t v120 = 1;
        unint64_t v121 = v120 + 1;
      }
      a2[1] = (unint64_t)v121;
      unint64_t v134 = a2[2];
      if ((unint64_t)v121 < v134)
      {
        *unint64_t v121 = a3;
        uint64_t v135 = v121 + 1;
        goto LABEL_219;
      }
      unint64_t v136 = *a2;
      char v137 = &v121[-*a2];
      unint64_t v138 = (unint64_t)(v137 + 1);
      if ((uint64_t)(v137 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v139 = v134 - v136;
      if (2 * v139 > v138) {
        unint64_t v138 = 2 * v139;
      }
      if (v139 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v140 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v140 = v138;
      }
      if (v140) {
        unint64_t v141 = (unint64_t)operator new(v140);
      }
      else {
        unint64_t v141 = 0;
      }
      __int16 v142 = (char *)(v141 + v140);
      v137[v141] = a3;
      uint64_t v135 = &v137[v141 + 1];
      if (v121 == (unsigned char *)v136)
      {
        *a2 = (unint64_t)&v137[v141];
        a2[1] = (unint64_t)v135;
        a2[2] = (unint64_t)v142;
LABEL_218:
        operator delete(v121);
        goto LABEL_219;
      }
      unsigned __int16 v143 = &v121[~v136];
      do
      {
        char v144 = *--v121;
        (v143--)[v141] = v144;
      }
      while (v121 != (unsigned char *)v136);
      unint64_t v121 = (unsigned char *)*a2;
      *a2 = v141;
      a2[1] = (unint64_t)v135;
      a2[2] = (unint64_t)v142;
      if (v121) {
        goto LABEL_218;
      }
LABEL_219:
      a2[1] = (unint64_t)v135;
      unint64_t v145 = a2[2];
      if ((unint64_t)v135 < v145)
      {
        unsigned char *v135 = 0;
        unsigned __int16 v146 = v135 + 1;
        goto LABEL_237;
      }
      unint64_t v147 = *a2;
      uint64_t v148 = &v135[-*a2];
      unint64_t v149 = (unint64_t)(v148 + 1);
      if ((uint64_t)(v148 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v150 = v145 - v147;
      if (2 * v150 > v149) {
        unint64_t v149 = 2 * v150;
      }
      if (v150 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v151 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v151 = v149;
      }
      if (v151) {
        unint64_t v152 = (unint64_t)operator new(v151);
      }
      else {
        unint64_t v152 = 0;
      }
      unint64_t v153 = (char *)(v152 + v151);
      v148[v152] = 0;
      unsigned __int16 v146 = &v148[v152 + 1];
      if (v135 == (unsigned char *)v147)
      {
        *a2 = (unint64_t)&v148[v152];
        a2[1] = (unint64_t)v146;
        a2[2] = (unint64_t)v153;
LABEL_236:
        operator delete(v135);
        goto LABEL_237;
      }
      size_t v154 = &v135[~v147];
      do
      {
        char v155 = *--v135;
        (v154--)[v152] = v155;
      }
      while (v135 != (unsigned char *)v147);
      uint64_t v135 = (unsigned char *)*a2;
      *a2 = v152;
      a2[1] = (unint64_t)v146;
      a2[2] = (unint64_t)v153;
      if (v135) {
        goto LABEL_236;
      }
LABEL_237:
      a2[1] = (unint64_t)v146;
      unint64_t v156 = a2[2];
      if ((unint64_t)v146 < v156)
      {
        *unsigned __int16 v146 = 0;
        uint64_t v157 = (uint64_t)(v146 + 1);
        goto LABEL_255;
      }
      unint64_t v158 = *a2;
      uint64_t v159 = &v146[-*a2];
      unint64_t v160 = (unint64_t)(v159 + 1);
      if ((uint64_t)(v159 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v161 = v156 - v158;
      if (2 * v161 > v160) {
        unint64_t v160 = 2 * v161;
      }
      if (v161 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v162 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v162 = v160;
      }
      if (v162) {
        unint64_t v163 = (unint64_t)operator new(v162);
      }
      else {
        unint64_t v163 = 0;
      }
      uint64_t v164 = (char *)(v163 + v162);
      v159[v163] = 0;
      uint64_t v157 = (uint64_t)&v159[v163 + 1];
      if (v146 == (unsigned char *)v158)
      {
        *a2 = (unint64_t)&v159[v163];
        a2[1] = v157;
        a2[2] = (unint64_t)v164;
LABEL_254:
        operator delete(v146);
        goto LABEL_255;
      }
      uint64_t v165 = &v146[~v158];
      do
      {
        char v166 = *--v146;
        (v165--)[v163] = v166;
      }
      while (v146 != (unsigned char *)v158);
      unsigned __int16 v146 = (unsigned char *)*a2;
      *a2 = v163;
      a2[1] = v157;
      a2[2] = (unint64_t)v164;
      if (v146) {
        goto LABEL_254;
      }
LABEL_255:
      a2[1] = v157;
      *(_WORD *)(*a2 + 10) = a6;
      v168 = (unsigned char *)a2[1];
      unint64_t v167 = a2[2];
      if ((unint64_t)v168 >= v167)
      {
        unint64_t v170 = *a2;
        unsigned int v171 = &v168[-*a2];
        unint64_t v172 = (unint64_t)(v171 + 1);
        if ((uint64_t)(v171 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v173 = v167 - v170;
        if (2 * v173 > v172) {
          unint64_t v172 = 2 * v173;
        }
        if (v173 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v174 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v174 = v172;
        }
        if (v174) {
          unint64_t v175 = (unint64_t)operator new(v174);
        }
        else {
          unint64_t v175 = 0;
        }
        uint64_t v176 = (char *)(v175 + v174);
        v171[v175] = v109;
        char v169 = &v171[v175 + 1];
        if (v168 == (unsigned char *)v170)
        {
          v175 += (unint64_t)v171;
        }
        else
        {
          v177 = &v168[~v170];
          do
          {
            char v178 = *--v168;
            (v177--)[v175] = v178;
          }
          while (v168 != (unsigned char *)v170);
          v168 = (unsigned char *)*a2;
        }
        *a2 = v175;
        a2[1] = (unint64_t)v169;
        a2[2] = (unint64_t)v176;
        if (v168) {
          operator delete(v168);
        }
      }
      else
      {
        unsigned char *v168 = v109;
        char v169 = v168 + 1;
      }
      a2[1] = (unint64_t)v169;
      unint64_t v179 = a2[2];
      if ((unint64_t)v169 < v179)
      {
        *char v169 = v108;
        v180 = v169 + 1;
        goto LABEL_291;
      }
      unint64_t v181 = *a2;
      v182 = &v169[-*a2];
      unint64_t v183 = (unint64_t)(v182 + 1);
      if ((uint64_t)(v182 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v184 = v179 - v181;
      if (2 * v184 > v183) {
        unint64_t v183 = 2 * v184;
      }
      if (v184 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v185 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v185 = v183;
      }
      if (v185) {
        unint64_t v186 = (unint64_t)operator new(v185);
      }
      else {
        unint64_t v186 = 0;
      }
      v187 = (char *)(v186 + v185);
      v182[v186] = v108;
      v180 = &v182[v186 + 1];
      if (v169 == (unsigned char *)v181)
      {
        *a2 = (unint64_t)&v182[v186];
        a2[1] = (unint64_t)v180;
        a2[2] = (unint64_t)v187;
LABEL_290:
        operator delete(v169);
        goto LABEL_291;
      }
      uint64_t v188 = &v169[~v181];
      do
      {
        char v189 = *--v169;
        (v188--)[v186] = v189;
      }
      while (v169 != (unsigned char *)v181);
      char v169 = (unsigned char *)*a2;
      *a2 = v186;
      a2[1] = (unint64_t)v180;
      a2[2] = (unint64_t)v187;
      if (v169) {
        goto LABEL_290;
      }
LABEL_291:
      a2[1] = (unint64_t)v180;
      unint64_t v190 = a2[2];
      if ((unint64_t)v180 < v190)
      {
        unsigned char *v180 = BYTE1(v108);
        uint64_t v191 = v180 + 1;
        goto LABEL_309;
      }
      unint64_t v192 = *a2;
      double v193 = &v180[-*a2];
      unint64_t v194 = (unint64_t)(v193 + 1);
      if ((uint64_t)(v193 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v195 = v190 - v192;
      if (2 * v195 > v194) {
        unint64_t v194 = 2 * v195;
      }
      if (v195 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v196 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v196 = v194;
      }
      if (v196) {
        unint64_t v197 = (unint64_t)operator new(v196);
      }
      else {
        unint64_t v197 = 0;
      }
      char v198 = (char *)(v197 + v196);
      v193[v197] = BYTE1(v108);
      uint64_t v191 = &v193[v197 + 1];
      if (v180 == (unsigned char *)v192)
      {
        *a2 = (unint64_t)&v193[v197];
        a2[1] = (unint64_t)v191;
        a2[2] = (unint64_t)v198;
LABEL_308:
        operator delete(v180);
        goto LABEL_309;
      }
      uint64_t v199 = &v180[~v192];
      do
      {
        char v200 = *--v180;
        (v199--)[v197] = v200;
      }
      while (v180 != (unsigned char *)v192);
      v180 = (unsigned char *)*a2;
      *a2 = v197;
      a2[1] = (unint64_t)v191;
      a2[2] = (unint64_t)v198;
      if (v180) {
        goto LABEL_308;
      }
LABEL_309:
      a2[1] = (unint64_t)v191;
      unint64_t v201 = a2[2];
      if ((unint64_t)v191 < v201)
      {
        *uint64_t v191 = BYTE2(v108);
        char v202 = v191 + 1;
        goto LABEL_327;
      }
      unint64_t v203 = *a2;
      v204 = &v191[-*a2];
      unint64_t v205 = (unint64_t)(v204 + 1);
      if ((uint64_t)(v204 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v206 = v201 - v203;
      if (2 * v206 > v205) {
        unint64_t v205 = 2 * v206;
      }
      if (v206 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v207 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v207 = v205;
      }
      if (v207) {
        unint64_t v208 = (unint64_t)operator new(v207);
      }
      else {
        unint64_t v208 = 0;
      }
      v209 = (char *)(v208 + v207);
      v204[v208] = BYTE2(v108);
      char v202 = &v204[v208 + 1];
      if (v191 == (unsigned char *)v203)
      {
        *a2 = (unint64_t)&v204[v208];
        a2[1] = (unint64_t)v202;
        a2[2] = (unint64_t)v209;
LABEL_326:
        operator delete(v191);
        goto LABEL_327;
      }
      v210 = &v191[~v203];
      do
      {
        char v211 = *--v191;
        (v210--)[v208] = v211;
      }
      while (v191 != (unsigned char *)v203);
      uint64_t v191 = (unsigned char *)*a2;
      *a2 = v208;
      a2[1] = (unint64_t)v202;
      a2[2] = (unint64_t)v209;
      if (v191) {
        goto LABEL_326;
      }
LABEL_327:
      a2[1] = (unint64_t)v202;
      unint64_t v212 = a2[2];
      if ((unint64_t)v202 < v212)
      {
        *char v202 = HIBYTE(v108);
        int v213 = v202 + 1;
        goto LABEL_345;
      }
      unint64_t v214 = *a2;
      char v215 = &v202[-*a2];
      unint64_t v216 = (unint64_t)(v215 + 1);
      if ((uint64_t)(v215 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v217 = v212 - v214;
      if (2 * v217 > v216) {
        unint64_t v216 = 2 * v217;
      }
      if (v217 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v218 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v218 = v216;
      }
      if (v218) {
        unint64_t v219 = (unint64_t)operator new(v218);
      }
      else {
        unint64_t v219 = 0;
      }
      uint64_t v220 = (char *)(v219 + v218);
      v215[v219] = HIBYTE(v108);
      int v213 = &v215[v219 + 1];
      if (v202 == (unsigned char *)v214)
      {
        *a2 = (unint64_t)&v215[v219];
        a2[1] = (unint64_t)v213;
        a2[2] = (unint64_t)v220;
LABEL_344:
        operator delete(v202);
        goto LABEL_345;
      }
      v221 = &v202[~v214];
      do
      {
        char v222 = *--v202;
        (v221--)[v219] = v222;
      }
      while (v202 != (unsigned char *)v214);
      char v202 = (unsigned char *)*a2;
      *a2 = v219;
      a2[1] = (unint64_t)v213;
      a2[2] = (unint64_t)v220;
      if (v202) {
        goto LABEL_344;
      }
LABEL_345:
      a2[1] = (unint64_t)v213;
      unint64_t v223 = a2[2];
      if ((unint64_t)v213 < v223)
      {
        *int v213 = v114;
        char v224 = v213 + 1;
        goto LABEL_363;
      }
      unint64_t v225 = *a2;
      v226 = &v213[-*a2];
      unint64_t v227 = (unint64_t)(v226 + 1);
      if ((uint64_t)(v226 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v228 = v223 - v225;
      if (2 * v228 > v227) {
        unint64_t v227 = 2 * v228;
      }
      if (v228 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v229 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v229 = v227;
      }
      if (v229) {
        unint64_t v230 = (unint64_t)operator new(v229);
      }
      else {
        unint64_t v230 = 0;
      }
      uint64_t v231 = (char *)(v230 + v229);
      v226[v230] = v114;
      char v224 = &v226[v230 + 1];
      if (v213 == (unsigned char *)v225)
      {
        *a2 = (unint64_t)&v226[v230];
        a2[1] = (unint64_t)v224;
        a2[2] = (unint64_t)v231;
LABEL_362:
        operator delete(v213);
        goto LABEL_363;
      }
      v232 = &v213[~v225];
      do
      {
        char v233 = *--v213;
        (v232--)[v230] = v233;
      }
      while (v213 != (unsigned char *)v225);
      int v213 = (unsigned char *)*a2;
      *a2 = v230;
      a2[1] = (unint64_t)v224;
      a2[2] = (unint64_t)v231;
      if (v213) {
        goto LABEL_362;
      }
LABEL_363:
      a2[1] = (unint64_t)v224;
      unint64_t v234 = a2[2];
      if ((unint64_t)v224 < v234)
      {
        *char v224 = BYTE1(v114);
        char v235 = v224 + 1;
        goto LABEL_381;
      }
      unint64_t v236 = *a2;
      v237 = &v224[-*a2];
      unint64_t v238 = (unint64_t)(v237 + 1);
      if ((uint64_t)(v237 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v239 = v234 - v236;
      if (2 * v239 > v238) {
        unint64_t v238 = 2 * v239;
      }
      if (v239 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v240 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v240 = v238;
      }
      if (v240) {
        unint64_t v241 = (unint64_t)operator new(v240);
      }
      else {
        unint64_t v241 = 0;
      }
      int v242 = (char *)(v241 + v240);
      v237[v241] = BYTE1(v114);
      char v235 = &v237[v241 + 1];
      if (v224 == (unsigned char *)v236)
      {
        *a2 = (unint64_t)&v237[v241];
        a2[1] = (unint64_t)v235;
        a2[2] = (unint64_t)v242;
LABEL_380:
        operator delete(v224);
        goto LABEL_381;
      }
      unsigned int v243 = &v224[~v236];
      do
      {
        char v244 = *--v224;
        (v243--)[v241] = v244;
      }
      while (v224 != (unsigned char *)v236);
      char v224 = (unsigned char *)*a2;
      *a2 = v241;
      a2[1] = (unint64_t)v235;
      a2[2] = (unint64_t)v242;
      if (v224) {
        goto LABEL_380;
      }
LABEL_381:
      a2[1] = (unint64_t)v235;
      unint64_t v245 = a2[2];
      if ((unint64_t)v235 < v245)
      {
        *char v235 = 1;
        int v246 = v235 + 1;
        goto LABEL_399;
      }
      unint64_t v247 = *a2;
      uint64_t v248 = &v235[-*a2];
      unint64_t v249 = (unint64_t)(v248 + 1);
      if ((uint64_t)(v248 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v250 = v245 - v247;
      if (2 * v250 > v249) {
        unint64_t v249 = 2 * v250;
      }
      if (v250 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v251 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v251 = v249;
      }
      if (v251) {
        unint64_t v252 = (unint64_t)operator new(v251);
      }
      else {
        unint64_t v252 = 0;
      }
      v253 = (char *)(v252 + v251);
      v248[v252] = 1;
      int v246 = &v248[v252 + 1];
      if (v235 == (unsigned char *)v247)
      {
        *a2 = (unint64_t)&v248[v252];
        a2[1] = (unint64_t)v246;
        a2[2] = (unint64_t)v253;
LABEL_398:
        operator delete(v235);
        goto LABEL_399;
      }
      double v254 = &v235[~v247];
      do
      {
        char v255 = *--v235;
        (v254--)[v252] = v255;
      }
      while (v235 != (unsigned char *)v247);
      char v235 = (unsigned char *)*a2;
      *a2 = v252;
      a2[1] = (unint64_t)v246;
      a2[2] = (unint64_t)v253;
      if (v235) {
        goto LABEL_398;
      }
LABEL_399:
      a2[1] = (unint64_t)v246;
      unint64_t v256 = a2[2];
      if ((unint64_t)v246 < v256)
      {
        *int v246 = 0;
        uint64_t v257 = (uint64_t)(v246 + 1);
        goto LABEL_417;
      }
      unint64_t v258 = *a2;
      char v259 = &v246[-*a2];
      unint64_t v260 = (unint64_t)(v259 + 1);
      if ((uint64_t)(v259 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v261 = v256 - v258;
      if (2 * v261 > v260) {
        unint64_t v260 = 2 * v261;
      }
      if (v261 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v262 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v262 = v260;
      }
      if (v262) {
        unint64_t v263 = (unint64_t)operator new(v262);
      }
      else {
        unint64_t v263 = 0;
      }
      v264 = (char *)(v263 + v262);
      v259[v263] = 0;
      uint64_t v257 = (uint64_t)&v259[v263 + 1];
      if (v246 == (unsigned char *)v258)
      {
        *a2 = (unint64_t)&v259[v263];
        a2[1] = v257;
        a2[2] = (unint64_t)v264;
LABEL_416:
        operator delete(v246);
        goto LABEL_417;
      }
      char v265 = &v246[~v258];
      do
      {
        char v266 = *--v246;
        (v265--)[v263] = v266;
      }
      while (v246 != (unsigned char *)v258);
      int v246 = (unsigned char *)*a2;
      *a2 = v263;
      a2[1] = v257;
      a2[2] = (unint64_t)v264;
      if (v246) {
        goto LABEL_416;
      }
LABEL_417:
      a2[1] = v257;
      v323 = 0;
      uint64_t v324 = 0;
      std::string __p = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v257, v257 - *a2);
      unint64_t v267 = ~*a2 + a2[1];
      if (v267 < 8 || v267 > 0x7FF || v323 - (unsigned char *)__p <= v267)
      {
        if (__p)
        {
          v323 = __p;
          operator delete(__p);
        }
      }
      else
      {
        __int16 v272 = 0;
        uint64_t v273 = 8;
        int v274 = 8;
        do
        {
          v272 += *((unsigned __int8 *)__p + v273);
          uint64_t v273 = ++v274;
        }
        while (v267 >= v274);
        v323 = __p;
        operator delete(__p);
        if (v272 != -1)
        {
          char v277 = (unsigned char *)a2[1];
          unint64_t v276 = a2[2];
          if ((unint64_t)v277 >= v276)
          {
            unint64_t v279 = *a2;
            int32x4_t v280 = &v277[-*a2];
            unint64_t v281 = (unint64_t)(v280 + 1);
            if ((uint64_t)(v280 + 1) < 0) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v282 = v276 - v279;
            if (2 * v282 > v281) {
              unint64_t v281 = 2 * v282;
            }
            if (v282 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v283 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v283 = v281;
            }
            if (v283) {
              unint64_t v284 = (unint64_t)operator new(v283);
            }
            else {
              unint64_t v284 = 0;
            }
            uint16x8_t v285 = (char *)(v284 + v283);
            v280[v284] = v272;
            uint64_t v278 = &v280[v284 + 1];
            if (v277 == (unsigned char *)v279)
            {
              v284 += (unint64_t)v280;
            }
            else
            {
              v286 = &v277[~v279];
              do
              {
                char v287 = *--v277;
                (v286--)[v284] = v287;
              }
              while (v277 != (unsigned char *)v279);
              char v277 = (unsigned char *)*a2;
            }
            *a2 = v284;
            a2[1] = (unint64_t)v278;
            a2[2] = (unint64_t)v285;
            if (v277) {
              operator delete(v277);
            }
          }
          else
          {
            *char v277 = v272;
            uint64_t v278 = v277 + 1;
          }
          a2[1] = (unint64_t)v278;
          unint64_t v288 = a2[2];
          if ((unint64_t)v278 < v288)
          {
            *uint64_t v278 = HIBYTE(v272);
            uint64_t v289 = (uint64_t)(v278 + 1);
            goto LABEL_467;
          }
          unint64_t v290 = *a2;
          v291 = &v278[-*a2];
          unint64_t v292 = (unint64_t)(v291 + 1);
          if ((uint64_t)(v291 + 1) < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v293 = v288 - v290;
          if (2 * v293 > v292) {
            unint64_t v292 = 2 * v293;
          }
          if (v293 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v294 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v294 = v292;
          }
          if (v294) {
            unint64_t v295 = (unint64_t)operator new(v294);
          }
          else {
            unint64_t v295 = 0;
          }
          v296 = (char *)(v295 + v294);
          v291[v295] = HIBYTE(v272);
          uint64_t v289 = (uint64_t)&v291[v295 + 1];
          if (v278 == (unsigned char *)v290)
          {
            *a2 = (unint64_t)&v291[v295];
            a2[1] = v289;
            a2[2] = (unint64_t)v296;
          }
          else
          {
            char v297 = &v278[~v290];
            do
            {
              char v298 = *--v278;
              (v297--)[v295] = v298;
            }
            while (v278 != (unsigned char *)v290);
            uint64_t v278 = (unsigned char *)*a2;
            *a2 = v295;
            a2[1] = v289;
            a2[2] = (unint64_t)v296;
            if (!v278)
            {
LABEL_467:
              a2[1] = v289;
              v299 = (unsigned char *)*a2;
              unint64_t v300 = v289 - *a2;
              if (v300 < 0x10000)
              {
                __int16 v303 = v300 - 8;
                v299[5] = v303;
                *(unsigned char *)(*a2 + 6) = HIBYTE(v303);
                v304 = (unsigned char *)*a2;
                v275.i32[0] = *(_DWORD *)(*a2 + 2);
                char v305 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v275)) + *(unsigned char *)(*a2 + 6);
                if (v305)
                {
                  v304[7] = v305;
                  v307 = (unsigned char *)a2[1];
                  unint64_t v306 = a2[2];
                  if ((unint64_t)v307 >= v306)
                  {
                    unint64_t v311 = *a2;
                    v312 = &v307[-*a2];
                    unint64_t v313 = (unint64_t)(v312 + 1);
                    if ((uint64_t)(v312 + 1) < 0) {
                      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v314 = v306 - v311;
                    if (2 * v314 > v313) {
                      unint64_t v313 = 2 * v314;
                    }
                    if (v314 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v315 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v315 = v313;
                    }
                    if (v315) {
                      unint64_t v316 = (unint64_t)operator new(v315);
                    }
                    else {
                      unint64_t v316 = 0;
                    }
                    v317 = (char *)(v316 + v315);
                    v312[v316] = 10;
                    uint64_t v308 = (uint64_t)&v312[v316 + 1];
                    if (v307 == (unsigned char *)v311)
                    {
                      v316 += (unint64_t)v312;
                    }
                    else
                    {
                      v318 = &v307[~v311];
                      do
                      {
                        char v319 = *--v307;
                        (v318--)[v316] = v319;
                      }
                      while (v307 != (unsigned char *)v311);
                      v307 = (unsigned char *)*a2;
                    }
                    *a2 = v316;
                    a2[1] = v308;
                    a2[2] = (unint64_t)v317;
                    if (v307) {
                      operator delete(v307);
                    }
                  }
                  else
                  {
                    unsigned char *v307 = 10;
                    uint64_t v308 = (uint64_t)(v307 + 1);
                  }
                  a2[1] = v308;
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v320 = mach_continuous_time();
                    unsigned __int16 v321 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v320), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
                    LbsOsaTrace_WriteLog(0x18u, __str, v321, 5, 1);
                  }
                  return 1;
                }
                else
                {
                  a2[1] = (unint64_t)v304;
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v309 = mach_continuous_time();
                    unsigned __int16 v310 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeCw or Mod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v309), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 781);
                    LbsOsaTrace_WriteLog(0x18u, __str, v310, 0, 1);
                  }
                  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                  if (result) {
                    goto LABEL_423;
                  }
                }
              }
              else
              {
                a2[1] = (unint64_t)v299;
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v301 = mach_continuous_time();
                  unsigned __int16 v302 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CwModRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v301), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 772);
                  LbsOsaTrace_WriteLog(0x18u, __str, v302, 0, 1);
                }
                uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if (result) {
                  goto LABEL_423;
                }
              }
              return result;
            }
          }
          operator delete(v278);
          goto LABEL_467;
        }
      }
      a2[1] = *a2;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v268 = mach_continuous_time();
        unsigned __int16 v269 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CwMod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v268), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 784);
        LbsOsaTrace_WriteLog(0x18u, __str, v269, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
LABEL_423:
        bzero(__str, 0x410uLL);
        uint64_t v270 = mach_continuous_time();
        unsigned __int16 v271 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v270), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
        LbsOsaTrace_WriteLog(0x18u, __str, v271, 5, 1);
        return 0;
      }
      return result;
  }
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_08ParseZxMeCwModProdMsg(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  int v10 = (unsigned char *)*a2;
  if (*(unsigned char *)(*a2 + 2) != 84 || v10[3] != 80 || v10[4] != 77)
  {
    a2[1] = v10;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Msg Type\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (!result) {
      return result;
    }
LABEL_15:
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    return 0;
  }
  if (v10[8] != 32)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW or Mod status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_15;
  }
  memset(__dst, 0, 17);
  if (a2[1] - (void)v10 <= 0x1AuLL)
  {
    a2[1] = v10;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ZxMsg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      return 0;
    }
    goto LABEL_15;
  }
  memcpy_s("Ga23_08ParseZxMeCwModProdMsg", 686, __dst, 0x11u, v10 + 10, 0x11uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga23_10MapCoreParamsToFramCwModParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
  }
  switch(BYTE1(__dst[0]))
  {
    case 0:
      char v22 = 1;
      *(unsigned char *)a3 = 1;
      break;
    case 3:
      *(unsigned char *)a3 = 4;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
      goto LABEL_33;
    case 4:
      char v25 = 8;
      goto LABEL_32;
    case 5:
      char v25 = 5;
LABEL_32:
      *(unsigned char *)a3 = v25;
LABEL_33:
      char v22 = 1;
      break;
    default:
      *(unsigned char *)a3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Defalt CW Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga23_10MapCoreParamsToFramCwModParams", 515, BYTE1(__dst[0]));
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
      }
      char v22 = 0;
      break;
  }
  if (a4 == 1)
  {
    switch(BYTE1(__dst[0]))
    {
      case 0:
        int v26 = BYTE4(__dst[0]);
        goto LABEL_43;
      case 3:
        int v26 = BYTE4(__dst[0]) - 8;
        goto LABEL_43;
      case 4:
        int v26 = BYTE4(__dst[0]) - 64;
        goto LABEL_43;
      case 5:
        int v26 = BYTE4(__dst[0]) - 128;
LABEL_43:
        *(_DWORD *)(a3 + 4) = v26;
        break;
      default:
        *(_DWORD *)(a3 + 4) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Default Mod Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "Ga23_10MapCoreParamsToFramCwModParams", 515, BYTE1(__dst[0]));
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
        }
        char v22 = 0;
        break;
    }
  }
  double v29 = (double)*(__int16 *)((char *)&__dst[1] + 7) * 0.0625;
  *(double *)(a3 + 8) = (double)*(__int16 *)((char *)__dst + 7) * 0.00390625;
  *(double *)(a3 + 16) = v29;
  *(double *)(a3 + 24) = (double)*(__int16 *)((char *)__dst + 5);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "Ga23_10MapCoreParamsToFramCwModParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
  }
  if ((v22 & 1) == 0)
  {
    a2[1] = *a2;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v36 = mach_continuous_time();
      unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Const,%u,Jnr,%d,KVal,%d,MeasState,%d,NoOfTrack,%u,ResStatus,%u,Cn0,%d,TrackChannelId,%u,Rssi,%d,BasebandFreqOffset,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg", BYTE1(__dst[0]), SBYTE1(__dst[1]), SBYTE2(__dst[1]), *(__int16 *)((char *)&__dst[1] + 3), BYTE2(__dst[0]), LOBYTE(__dst[0]), *(__int16 *)((char *)__dst + 7), BYTE3(__dst[0]), *(__int16 *)((char *)&__dst[1] + 7), *(__int16 *)((char *)&__dst[1] + 5));
    LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v35, 5, 1);
  }
  return 1;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_11BuildZxMePowerProdMsg(uint64_t a1, unint64_t *a2, unsigned int a3, int a4)
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  int v10 = (unsigned char *)a2[1];
  unint64_t v9 = a2[2];
  if ((unint64_t)v10 >= v9)
  {
    unint64_t v12 = *a2;
    uint64_t v13 = &v10[-*a2];
    unint64_t v14 = (unint64_t)(v13 + 1);
    if ((uint64_t)(v13 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = v9 - v12;
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v16 = v14;
    }
    if (v16) {
      unint64_t v17 = (unint64_t)operator new(v16);
    }
    else {
      unint64_t v17 = 0;
    }
    uint64_t v18 = (char *)(v17 + v16);
    v13[v17] = 122;
    uint64_t v11 = &v13[v17 + 1];
    if (v10 == (unsigned char *)v12)
    {
      v17 += (unint64_t)v13;
    }
    else
    {
      unsigned __int16 v19 = &v10[~v12];
      do
      {
        char v20 = *--v10;
        (v19--)[v17] = v20;
      }
      while (v10 != (unsigned char *)v12);
      int v10 = (unsigned char *)*a2;
    }
    *a2 = v17;
    a2[1] = (unint64_t)v11;
    a2[2] = (unint64_t)v18;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *int v10 = 122;
    uint64_t v11 = v10 + 1;
  }
  a2[1] = (unint64_t)v11;
  unint64_t v21 = a2[2];
  if ((unint64_t)v11 < v21)
  {
    *uint64_t v11 = 120;
    char v22 = v11 + 1;
    goto LABEL_39;
  }
  unint64_t v23 = *a2;
  unsigned __int16 v24 = &v11[-*a2];
  unint64_t v25 = (unint64_t)(v24 + 1);
  if ((uint64_t)(v24 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v26 = v21 - v23;
  if (2 * v26 > v25) {
    unint64_t v25 = 2 * v26;
  }
  if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v27 = v25;
  }
  if (v27) {
    unint64_t v28 = (unint64_t)operator new(v27);
  }
  else {
    unint64_t v28 = 0;
  }
  double v29 = (char *)(v28 + v27);
  v24[v28] = 120;
  char v22 = &v24[v28 + 1];
  if (v11 == (unsigned char *)v23)
  {
    *a2 = (unint64_t)&v24[v28];
    a2[1] = (unint64_t)v22;
    a2[2] = (unint64_t)v29;
LABEL_38:
    operator delete(v11);
    goto LABEL_39;
  }
  uint64_t v30 = &v11[~v23];
  do
  {
    char v31 = *--v11;
    (v30--)[v28] = v31;
  }
  while (v11 != (unsigned char *)v23);
  uint64_t v11 = (unsigned char *)*a2;
  *a2 = v28;
  a2[1] = (unint64_t)v22;
  a2[2] = (unint64_t)v29;
  if (v11) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v22;
  unint64_t v32 = a2[2];
  if ((unint64_t)v22 < v32)
  {
    *char v22 = 84;
    unsigned __int16 v33 = v22 + 1;
    goto LABEL_57;
  }
  unint64_t v34 = *a2;
  unsigned __int16 v35 = &v22[-*a2];
  unint64_t v36 = (unint64_t)(v35 + 1);
  if ((uint64_t)(v35 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v37 = v32 - v34;
  if (2 * v37 > v36) {
    unint64_t v36 = 2 * v37;
  }
  if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v38 = v36;
  }
  if (v38) {
    unint64_t v39 = (unint64_t)operator new(v38);
  }
  else {
    unint64_t v39 = 0;
  }
  uint64_t v40 = (char *)(v39 + v38);
  v35[v39] = 84;
  unsigned __int16 v33 = &v35[v39 + 1];
  if (v22 == (unsigned char *)v34)
  {
    *a2 = (unint64_t)&v35[v39];
    a2[1] = (unint64_t)v33;
    a2[2] = (unint64_t)v40;
LABEL_56:
    operator delete(v22);
    goto LABEL_57;
  }
  unint64_t v41 = &v22[~v34];
  do
  {
    char v42 = *--v22;
    (v41--)[v39] = v42;
  }
  while (v22 != (unsigned char *)v34);
  char v22 = (unsigned char *)*a2;
  *a2 = v39;
  a2[1] = (unint64_t)v33;
  a2[2] = (unint64_t)v40;
  if (v22) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v33;
  unint64_t v43 = a2[2];
  if ((unint64_t)v33 < v43)
  {
    *unsigned __int16 v33 = 103;
    unint64_t v44 = v33 + 1;
    goto LABEL_75;
  }
  unint64_t v45 = *a2;
  unint64_t v46 = &v33[-*a2];
  unint64_t v47 = (unint64_t)(v46 + 1);
  if ((uint64_t)(v46 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v48 = v43 - v45;
  if (2 * v48 > v47) {
    unint64_t v47 = 2 * v48;
  }
  if (v48 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v49 = v47;
  }
  if (v49) {
    unint64_t v50 = (unint64_t)operator new(v49);
  }
  else {
    unint64_t v50 = 0;
  }
  double v51 = (char *)(v50 + v49);
  v46[v50] = 103;
  unint64_t v44 = &v46[v50 + 1];
  if (v33 == (unsigned char *)v45)
  {
    *a2 = (unint64_t)&v46[v50];
    a2[1] = (unint64_t)v44;
    a2[2] = (unint64_t)v51;
LABEL_74:
    operator delete(v33);
    goto LABEL_75;
  }
  unint64_t v52 = &v33[~v45];
  do
  {
    char v53 = *--v33;
    (v52--)[v50] = v53;
  }
  while (v33 != (unsigned char *)v45);
  unsigned __int16 v33 = (unsigned char *)*a2;
  *a2 = v50;
  a2[1] = (unint64_t)v44;
  a2[2] = (unint64_t)v51;
  if (v33) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v44;
  unint64_t v54 = a2[2];
  if ((unint64_t)v44 < v54)
  {
    unsigned char *v44 = 77;
    unint64_t v55 = v44 + 1;
    goto LABEL_93;
  }
  unint64_t v56 = *a2;
  unint64_t v57 = &v44[-*a2];
  unint64_t v58 = (unint64_t)(v57 + 1);
  if ((uint64_t)(v57 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v59 = v54 - v56;
  if (2 * v59 > v58) {
    unint64_t v58 = 2 * v59;
  }
  if (v59 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v60 = v58;
  }
  if (v60) {
    unint64_t v61 = (unint64_t)operator new(v60);
  }
  else {
    unint64_t v61 = 0;
  }
  uint64_t v62 = (char *)(v61 + v60);
  v57[v61] = 77;
  unint64_t v55 = &v57[v61 + 1];
  if (v44 == (unsigned char *)v56)
  {
    *a2 = (unint64_t)&v57[v61];
    a2[1] = (unint64_t)v55;
    a2[2] = (unint64_t)v62;
LABEL_92:
    operator delete(v44);
    goto LABEL_93;
  }
  unint64_t v63 = &v44[~v56];
  do
  {
    char v64 = *--v44;
    (v63--)[v61] = v64;
  }
  while (v44 != (unsigned char *)v56);
  unint64_t v44 = (unsigned char *)*a2;
  *a2 = v61;
  a2[1] = (unint64_t)v55;
  a2[2] = (unint64_t)v62;
  if (v44) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v55;
  unint64_t v65 = a2[2];
  if ((unint64_t)v55 < v65)
  {
    *unint64_t v55 = 0;
    unint64_t v66 = v55 + 1;
    goto LABEL_111;
  }
  unint64_t v67 = *a2;
  unint64_t v68 = &v55[-*a2];
  unint64_t v69 = (unint64_t)(v68 + 1);
  if ((uint64_t)(v68 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v70 = v65 - v67;
  if (2 * v70 > v69) {
    unint64_t v69 = 2 * v70;
  }
  if (v70 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v71 = v69;
  }
  if (v71) {
    unint64_t v72 = (unint64_t)operator new(v71);
  }
  else {
    unint64_t v72 = 0;
  }
  uint64_t v73 = (char *)(v72 + v71);
  v68[v72] = 0;
  unint64_t v66 = &v68[v72 + 1];
  if (v55 == (unsigned char *)v67)
  {
    *a2 = (unint64_t)&v68[v72];
    a2[1] = (unint64_t)v66;
    a2[2] = (unint64_t)v73;
LABEL_110:
    operator delete(v55);
    goto LABEL_111;
  }
  unint64_t v74 = &v55[~v67];
  do
  {
    char v75 = *--v55;
    (v74--)[v72] = v75;
  }
  while (v55 != (unsigned char *)v67);
  unint64_t v55 = (unsigned char *)*a2;
  *a2 = v72;
  a2[1] = (unint64_t)v66;
  a2[2] = (unint64_t)v73;
  if (v55) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v66;
  unint64_t v76 = a2[2];
  if ((unint64_t)v66 < v76)
  {
    *unint64_t v66 = 0;
    unint64_t v77 = v66 + 1;
    goto LABEL_129;
  }
  unint64_t v78 = *a2;
  unint64_t v79 = &v66[-*a2];
  unint64_t v80 = (unint64_t)(v79 + 1);
  if ((uint64_t)(v79 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v81 = v76 - v78;
  if (2 * v81 > v80) {
    unint64_t v80 = 2 * v81;
  }
  if (v81 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v82 = v80;
  }
  if (v82) {
    unint64_t v83 = (unint64_t)operator new(v82);
  }
  else {
    unint64_t v83 = 0;
  }
  unsigned __int16 v84 = (char *)(v83 + v82);
  v79[v83] = 0;
  unint64_t v77 = &v79[v83 + 1];
  if (v66 == (unsigned char *)v78)
  {
    *a2 = (unint64_t)&v79[v83];
    a2[1] = (unint64_t)v77;
    a2[2] = (unint64_t)v84;
LABEL_128:
    operator delete(v66);
    goto LABEL_129;
  }
  unint64_t v85 = &v66[~v78];
  do
  {
    char v86 = *--v66;
    (v85--)[v83] = v86;
  }
  while (v66 != (unsigned char *)v78);
  unint64_t v66 = (unsigned char *)*a2;
  *a2 = v83;
  a2[1] = (unint64_t)v77;
  a2[2] = (unint64_t)v84;
  if (v66) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v77;
  unint64_t v87 = a2[2];
  if ((unint64_t)v77 < v87)
  {
    *unint64_t v77 = 0;
    uint64_t v88 = (uint64_t)(v77 + 1);
    goto LABEL_147;
  }
  unint64_t v89 = *a2;
  unint64_t v90 = &v77[-*a2];
  unint64_t v91 = (unint64_t)(v90 + 1);
  if ((uint64_t)(v90 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v92 = v87 - v89;
  if (2 * v92 > v91) {
    unint64_t v91 = 2 * v92;
  }
  if (v92 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v93 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v93 = v91;
  }
  if (v93) {
    unint64_t v94 = (unint64_t)operator new(v93);
  }
  else {
    unint64_t v94 = 0;
  }
  uint64_t v95 = (char *)(v94 + v93);
  v90[v94] = 0;
  uint64_t v88 = (uint64_t)&v90[v94 + 1];
  if (v77 == (unsigned char *)v89)
  {
    *a2 = (unint64_t)&v90[v94];
    a2[1] = v88;
    a2[2] = (unint64_t)v95;
LABEL_146:
    operator delete(v77);
    goto LABEL_147;
  }
  unint64_t v96 = &v77[~v89];
  do
  {
    char v97 = *--v77;
    (v96--)[v94] = v97;
  }
  while (v77 != (unsigned char *)v89);
  unint64_t v77 = (unsigned char *)*a2;
  *a2 = v94;
  a2[1] = v88;
  a2[2] = (unint64_t)v95;
  if (v77) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = v88;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v98 = mach_continuous_time();
    unsigned __int16 v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "ADP", 68, "Ga23_13MapFramPowerParamToCorePowerParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v99, 5, 1);
  }
  if (a3 >= 5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v102 = mach_continuous_time();
      unsigned __int16 v103 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v102), "ADP", 87, "Ga23_13MapFramPowerParamToCorePowerParams", 770, a3);
      LbsOsaTrace_WriteLog(0x18u, __str, v103, 2, 1);
    }
    BOOL v100 = 0;
    int v101 = 0;
  }
  else
  {
    BOOL v100 = (a3 & 0x1F) == 4;
    int v101 = (0x4FFFFFF00uLL >> (8 * a3));
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v104 = mach_continuous_time();
    unsigned __int16 v105 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MePwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v104), "ADP", 73, "Ga23_13MapFramPowerParamToCorePowerParams", v101);
    LbsOsaTrace_WriteLog(0x18u, __str, v105, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v106 = mach_continuous_time();
    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 68, "Ga23_13MapFramPowerParamToCorePowerParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 5, 1);
  }
  unsigned __int8 v109 = (unsigned char *)a2[1];
  unint64_t v108 = a2[2];
  if ((unint64_t)v109 >= v108)
  {
    unint64_t v111 = *a2;
    uint64_t v112 = &v109[-*a2];
    unint64_t v113 = (unint64_t)(v112 + 1);
    if ((uint64_t)(v112 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v114 = v108 - v111;
    if (2 * v114 > v113) {
      unint64_t v113 = 2 * v114;
    }
    if (v114 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v115 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v115 = v113;
    }
    if (v115) {
      unint64_t v116 = (unint64_t)operator new(v115);
    }
    else {
      unint64_t v116 = 0;
    }
    uint64_t v117 = (char *)(v116 + v115);
    v112[v116] = v101;
    uint64_t v110 = (uint64_t)&v112[v116 + 1];
    if (v109 == (unsigned char *)v111)
    {
      v116 += (unint64_t)v112;
    }
    else
    {
      unsigned __int16 v118 = &v109[~v111];
      do
      {
        char v119 = *--v109;
        (v118--)[v116] = v119;
      }
      while (v109 != (unsigned char *)v111);
      unsigned __int8 v109 = (unsigned char *)*a2;
    }
    *a2 = v116;
    a2[1] = v110;
    a2[2] = (unint64_t)v117;
    if (v109) {
      operator delete(v109);
    }
  }
  else
  {
    *unsigned __int8 v109 = v101;
    uint64_t v110 = (uint64_t)(v109 + 1);
  }
  a2[1] = v110;
  if ((v101 & 0xFE) == 2) {
    int v120 = 5;
  }
  else {
    int v120 = 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v121 = mach_continuous_time();
    unsigned __int16 v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrTimeOut,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v121), "ADP", 73, "Ga23_11BuildZxMePowerProdMsg", v120);
    LbsOsaTrace_WriteLog(0x18u, __str, v122, 4, 1);
  }
  unsigned __int16 v124 = (unsigned char *)a2[1];
  unint64_t v123 = a2[2];
  if ((unint64_t)v124 >= v123)
  {
    unint64_t v126 = *a2;
    unint64_t v127 = &v124[-*a2];
    unint64_t v128 = (unint64_t)(v127 + 1);
    if ((uint64_t)(v127 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v129 = v123 - v126;
    if (2 * v129 > v128) {
      unint64_t v128 = 2 * v129;
    }
    if (v129 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v130 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v130 = v128;
    }
    if (v130) {
      unint64_t v131 = (unint64_t)operator new(v130);
    }
    else {
      unint64_t v131 = 0;
    }
    unint64_t v132 = (char *)(v131 + v130);
    v127[v131] = v120;
    unint64_t v125 = &v127[v131 + 1];
    if (v124 == (unsigned char *)v126)
    {
      v131 += (unint64_t)v127;
    }
    else
    {
      char v133 = &v124[~v126];
      do
      {
        char v134 = *--v124;
        (v133--)[v131] = v134;
      }
      while (v124 != (unsigned char *)v126);
      unsigned __int16 v124 = (unsigned char *)*a2;
    }
    *a2 = v131;
    a2[1] = (unint64_t)v125;
    a2[2] = (unint64_t)v132;
    if (v124) {
      operator delete(v124);
    }
  }
  else
  {
    *unsigned __int16 v124 = v120;
    unint64_t v125 = v124 + 1;
  }
  a2[1] = (unint64_t)v125;
  unint64_t v135 = a2[2];
  if ((unint64_t)v125 < v135)
  {
    *unint64_t v125 = 0;
    unint64_t v136 = v125 + 1;
    goto LABEL_217;
  }
  unint64_t v137 = *a2;
  unint64_t v138 = &v125[-*a2];
  unint64_t v139 = (unint64_t)(v138 + 1);
  if ((uint64_t)(v138 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v140 = v135 - v137;
  if (2 * v140 > v139) {
    unint64_t v139 = 2 * v140;
  }
  if (v140 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v141 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v141 = v139;
  }
  if (v141) {
    unint64_t v142 = (unint64_t)operator new(v141);
  }
  else {
    unint64_t v142 = 0;
  }
  unsigned __int16 v143 = (char *)(v142 + v141);
  v138[v142] = 0;
  unint64_t v136 = &v138[v142 + 1];
  if (v125 == (unsigned char *)v137)
  {
    *a2 = (unint64_t)&v138[v142];
    a2[1] = (unint64_t)v136;
    a2[2] = (unint64_t)v143;
LABEL_216:
    operator delete(v125);
    goto LABEL_217;
  }
  char v144 = &v125[~v137];
  do
  {
    char v145 = *--v125;
    (v144--)[v142] = v145;
  }
  while (v125 != (unsigned char *)v137);
  unint64_t v125 = (unsigned char *)*a2;
  *a2 = v142;
  a2[1] = (unint64_t)v136;
  a2[2] = (unint64_t)v143;
  if (v125) {
    goto LABEL_216;
  }
LABEL_217:
  a2[1] = (unint64_t)v136;
  unint64_t v146 = a2[2];
  if (a4)
  {
    if ((unint64_t)v136 >= v146)
    {
      unint64_t v147 = *a2;
      uint64_t v148 = &v136[-*a2];
      unint64_t v149 = (unint64_t)(v148 + 1);
      if ((uint64_t)(v148 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v150 = v146 - v147;
      if (2 * v150 > v149) {
        unint64_t v149 = 2 * v150;
      }
      if (v150 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v151 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v151 = v149;
      }
      if (v151) {
        unint64_t v152 = (unint64_t)operator new(v151);
      }
      else {
        unint64_t v152 = 0;
      }
      char v155 = &v148[v152];
      unint64_t v156 = (char *)(v152 + v151);
      v148[v152] = 1;
      size_t v154 = &v148[v152 + 1];
      if (v136 != (unsigned char *)v147)
      {
        uint64_t v157 = &v136[~v147];
        do
        {
          char v158 = *--v136;
          (v157--)[v152] = v158;
        }
        while (v136 != (unsigned char *)v147);
        goto LABEL_263;
      }
LABEL_265:
      *a2 = (unint64_t)v155;
      a2[1] = (unint64_t)v154;
      a2[2] = (unint64_t)v156;
      goto LABEL_266;
    }
    goto LABEL_231;
  }
  if (v100)
  {
    if ((unint64_t)v136 < v146)
    {
      unsigned char *v136 = 0;
      unint64_t v153 = v136 + 1;
LABEL_232:
      size_t v154 = v153;
      goto LABEL_267;
    }
    unint64_t v159 = *a2;
    unint64_t v160 = &v136[-*a2];
    unint64_t v161 = (unint64_t)(v160 + 1);
    if ((uint64_t)(v160 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v162 = v146 - v159;
    if (2 * v162 > v161) {
      unint64_t v161 = 2 * v162;
    }
    if (v162 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v163 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v163 = v161;
    }
    if (v163) {
      unint64_t v152 = (unint64_t)operator new(v163);
    }
    else {
      unint64_t v152 = 0;
    }
    char v155 = &v160[v152];
    unint64_t v156 = (char *)(v152 + v163);
    v160[v152] = 0;
    size_t v154 = &v160[v152 + 1];
    if (v136 == (unsigned char *)v159) {
      goto LABEL_265;
    }
    char v169 = &v136[~v159];
    do
    {
      char v170 = *--v136;
      (v169--)[v152] = v170;
    }
    while (v136 != (unsigned char *)v159);
  }
  else
  {
    if ((unint64_t)v136 < v146)
    {
LABEL_231:
      unsigned char *v136 = 1;
      unint64_t v153 = v136 + 1;
      goto LABEL_232;
    }
    unint64_t v164 = *a2;
    uint64_t v165 = &v136[-*a2];
    unint64_t v166 = (unint64_t)(v165 + 1);
    if ((uint64_t)(v165 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v167 = v146 - v164;
    if (2 * v167 > v166) {
      unint64_t v166 = 2 * v167;
    }
    if (v167 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v168 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v168 = v166;
    }
    if (v168) {
      unint64_t v152 = (unint64_t)operator new(v168);
    }
    else {
      unint64_t v152 = 0;
    }
    char v155 = &v165[v152];
    unint64_t v156 = (char *)(v152 + v168);
    v165[v152] = 1;
    size_t v154 = &v165[v152 + 1];
    if (v136 == (unsigned char *)v164) {
      goto LABEL_265;
    }
    unsigned int v171 = &v136[~v164];
    do
    {
      char v172 = *--v136;
      (v171--)[v152] = v172;
    }
    while (v136 != (unsigned char *)v164);
  }
LABEL_263:
  unint64_t v136 = (unsigned char *)*a2;
  *a2 = v152;
  a2[1] = (unint64_t)v154;
  a2[2] = (unint64_t)v156;
  if (v136) {
LABEL_266:
  }
    operator delete(v136);
LABEL_267:
  a2[1] = (unint64_t)v154;
  unint64_t v173 = a2[2];
  if ((unint64_t)v154 < v173)
  {
    *size_t v154 = 0;
    size_t v174 = v154 + 1;
    goto LABEL_285;
  }
  unint64_t v175 = *a2;
  uint64_t v176 = &v154[-*a2];
  unint64_t v177 = (unint64_t)(v176 + 1);
  if ((uint64_t)(v176 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v178 = v173 - v175;
  if (2 * v178 > v177) {
    unint64_t v177 = 2 * v178;
  }
  if (v178 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v179 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v179 = v177;
  }
  if (v179) {
    unint64_t v180 = (unint64_t)operator new(v179);
  }
  else {
    unint64_t v180 = 0;
  }
  unint64_t v181 = (char *)(v180 + v179);
  v176[v180] = 0;
  size_t v174 = &v176[v180 + 1];
  if (v154 == (unsigned char *)v175)
  {
    *a2 = (unint64_t)&v176[v180];
    a2[1] = (unint64_t)v174;
    a2[2] = (unint64_t)v181;
LABEL_284:
    operator delete(v154);
    goto LABEL_285;
  }
  v182 = &v154[~v175];
  do
  {
    char v183 = *--v154;
    (v182--)[v180] = v183;
  }
  while (v154 != (unsigned char *)v175);
  size_t v154 = (unsigned char *)*a2;
  *a2 = v180;
  a2[1] = (unint64_t)v174;
  a2[2] = (unint64_t)v181;
  if (v154) {
    goto LABEL_284;
  }
LABEL_285:
  a2[1] = (unint64_t)v174;
  unint64_t v184 = a2[2];
  if ((unint64_t)v174 < v184)
  {
    *size_t v174 = 0;
    size_t v185 = v174 + 1;
    goto LABEL_303;
  }
  unint64_t v186 = *a2;
  v187 = &v174[-*a2];
  unint64_t v188 = (unint64_t)(v187 + 1);
  if ((uint64_t)(v187 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v189 = v184 - v186;
  if (2 * v189 > v188) {
    unint64_t v188 = 2 * v189;
  }
  if (v189 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v190 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v190 = v188;
  }
  if (v190) {
    unint64_t v191 = (unint64_t)operator new(v190);
  }
  else {
    unint64_t v191 = 0;
  }
  unint64_t v192 = (char *)(v191 + v190);
  v187[v191] = 0;
  size_t v185 = &v187[v191 + 1];
  if (v174 == (unsigned char *)v186)
  {
    *a2 = (unint64_t)&v187[v191];
    a2[1] = (unint64_t)v185;
    a2[2] = (unint64_t)v192;
LABEL_302:
    operator delete(v174);
    goto LABEL_303;
  }
  double v193 = &v174[~v186];
  do
  {
    char v194 = *--v174;
    (v193--)[v191] = v194;
  }
  while (v174 != (unsigned char *)v186);
  size_t v174 = (unsigned char *)*a2;
  *a2 = v191;
  a2[1] = (unint64_t)v185;
  a2[2] = (unint64_t)v192;
  if (v174) {
    goto LABEL_302;
  }
LABEL_303:
  a2[1] = (unint64_t)v185;
  unint64_t v195 = a2[2];
  if ((unint64_t)v185 < v195)
  {
    *size_t v185 = 0;
    uint64_t v196 = (uint64_t)(v185 + 1);
    goto LABEL_321;
  }
  unint64_t v197 = *a2;
  char v198 = &v185[-*a2];
  unint64_t v199 = (unint64_t)(v198 + 1);
  if ((uint64_t)(v198 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v200 = v195 - v197;
  if (2 * v200 > v199) {
    unint64_t v199 = 2 * v200;
  }
  if (v200 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v201 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v201 = v199;
  }
  if (v201) {
    unint64_t v202 = (unint64_t)operator new(v201);
  }
  else {
    unint64_t v202 = 0;
  }
  unint64_t v203 = (char *)(v202 + v201);
  v198[v202] = 0;
  uint64_t v196 = (uint64_t)&v198[v202 + 1];
  if (v185 == (unsigned char *)v197)
  {
    *a2 = (unint64_t)&v198[v202];
    a2[1] = v196;
    a2[2] = (unint64_t)v203;
LABEL_320:
    operator delete(v185);
    goto LABEL_321;
  }
  v204 = &v185[~v197];
  do
  {
    char v205 = *--v185;
    (v204--)[v202] = v205;
  }
  while (v185 != (unsigned char *)v197);
  size_t v185 = (unsigned char *)*a2;
  *a2 = v202;
  a2[1] = v196;
  a2[2] = (unint64_t)v203;
  if (v185) {
    goto LABEL_320;
  }
LABEL_321:
  a2[1] = v196;
  unint64_t v263 = 0;
  uint64_t v264 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v196, v196 - *a2);
  unint64_t v206 = ~*a2 + a2[1];
  if (v206 < 8 || v206 > 0x7FF || v263 - (unsigned char *)__p <= v206)
  {
    if (__p)
    {
      unint64_t v263 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v212 = 0;
    uint64_t v213 = 8;
    int v214 = 8;
    do
    {
      v212 += *((unsigned __int8 *)__p + v213);
      uint64_t v213 = ++v214;
    }
    while (v206 >= v214);
    unint64_t v263 = __p;
    operator delete(__p);
    if (v212 != -1)
    {
      unint64_t v217 = (unsigned char *)a2[1];
      unint64_t v216 = a2[2];
      if ((unint64_t)v217 >= v216)
      {
        unint64_t v219 = *a2;
        uint64_t v220 = &v217[-*a2];
        unint64_t v221 = (unint64_t)(v220 + 1);
        if ((uint64_t)(v220 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v222 = v216 - v219;
        if (2 * v222 > v221) {
          unint64_t v221 = 2 * v222;
        }
        if (v222 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v223 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v223 = v221;
        }
        if (v223) {
          unint64_t v224 = (unint64_t)operator new(v223);
        }
        else {
          unint64_t v224 = 0;
        }
        unint64_t v225 = (char *)(v224 + v223);
        v220[v224] = v212;
        size_t v218 = &v220[v224 + 1];
        if (v217 == (unsigned char *)v219)
        {
          v224 += (unint64_t)v220;
        }
        else
        {
          v226 = &v217[~v219];
          do
          {
            char v227 = *--v217;
            (v226--)[v224] = v227;
          }
          while (v217 != (unsigned char *)v219);
          unint64_t v217 = (unsigned char *)*a2;
        }
        *a2 = v224;
        a2[1] = (unint64_t)v218;
        a2[2] = (unint64_t)v225;
        if (v217) {
          operator delete(v217);
        }
      }
      else
      {
        *unint64_t v217 = v212;
        size_t v218 = v217 + 1;
      }
      a2[1] = (unint64_t)v218;
      unint64_t v228 = a2[2];
      if ((unint64_t)v218 < v228)
      {
        *size_t v218 = HIBYTE(v212);
        uint64_t v229 = (uint64_t)(v218 + 1);
        goto LABEL_370;
      }
      unint64_t v230 = *a2;
      uint64_t v231 = &v218[-*a2];
      unint64_t v232 = (unint64_t)(v231 + 1);
      if ((uint64_t)(v231 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v233 = v228 - v230;
      if (2 * v233 > v232) {
        unint64_t v232 = 2 * v233;
      }
      if (v233 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v234 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v234 = v232;
      }
      if (v234) {
        unint64_t v235 = (unint64_t)operator new(v234);
      }
      else {
        unint64_t v235 = 0;
      }
      unint64_t v236 = (char *)(v235 + v234);
      v231[v235] = HIBYTE(v212);
      uint64_t v229 = (uint64_t)&v231[v235 + 1];
      if (v218 == (unsigned char *)v230)
      {
        *a2 = (unint64_t)&v231[v235];
        a2[1] = v229;
        a2[2] = (unint64_t)v236;
      }
      else
      {
        v237 = &v218[~v230];
        do
        {
          char v238 = *--v218;
          (v237--)[v235] = v238;
        }
        while (v218 != (unsigned char *)v230);
        size_t v218 = (unsigned char *)*a2;
        *a2 = v235;
        a2[1] = v229;
        a2[2] = (unint64_t)v236;
        if (!v218)
        {
LABEL_370:
          a2[1] = v229;
          unint64_t v239 = (unsigned char *)*a2;
          unint64_t v240 = v229 - *a2;
          if (v240 < 0x10000)
          {
            __int16 v243 = v240 - 8;
            v239[5] = v243;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v243);
            char v244 = (unsigned char *)*a2;
            v215.i32[0] = *(_DWORD *)(*a2 + 2);
            char v245 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v215)) + *(unsigned char *)(*a2 + 6);
            if (v245)
            {
              v244[7] = v245;
              unint64_t v247 = (unsigned char *)a2[1];
              unint64_t v246 = a2[2];
              if ((unint64_t)v247 >= v246)
              {
                unint64_t v251 = *a2;
                unint64_t v252 = &v247[-*a2];
                unint64_t v253 = (unint64_t)(v252 + 1);
                if ((uint64_t)(v252 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v254 = v246 - v251;
                if (2 * v254 > v253) {
                  unint64_t v253 = 2 * v254;
                }
                if (v254 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v255 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v255 = v253;
                }
                if (v255) {
                  unint64_t v256 = (unint64_t)operator new(v255);
                }
                else {
                  unint64_t v256 = 0;
                }
                uint64_t v257 = (char *)(v256 + v255);
                v252[v256] = 10;
                uint64_t v248 = (uint64_t)&v252[v256 + 1];
                if (v247 == (unsigned char *)v251)
                {
                  v256 += (unint64_t)v252;
                }
                else
                {
                  unint64_t v258 = &v247[~v251];
                  do
                  {
                    char v259 = *--v247;
                    (v258--)[v256] = v259;
                  }
                  while (v247 != (unsigned char *)v251);
                  unint64_t v247 = (unsigned char *)*a2;
                }
                *a2 = v256;
                a2[1] = v248;
                a2[2] = (unint64_t)v257;
                if (v247) {
                  operator delete(v247);
                }
              }
              else
              {
                *unint64_t v247 = 10;
                uint64_t v248 = (uint64_t)(v247 + 1);
              }
              a2[1] = v248;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v260 = mach_continuous_time();
                unsigned __int16 v261 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v260), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v261, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v244;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v249 = mach_continuous_time();
                unsigned __int16 v250 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v249), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v250, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_327;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v239;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v241 = mach_continuous_time();
              unsigned __int16 v242 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v241), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v242, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_327;
            }
          }
          return result;
        }
      }
      operator delete(v218);
      goto LABEL_370;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v207 = mach_continuous_time();
    unsigned __int16 v208 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Power\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v207), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v208, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_327:
    bzero(__str, 0x410uLL);
    uint64_t v210 = mach_continuous_time();
    unsigned __int16 v211 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v210), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v211, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_12ParseZxMePowerProdMsg(uint64_t a1, void *a2, _DWORD *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr Resp\n");
    goto LABEL_18;
  }
  unint64_t v9 = (unsigned char *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr\n");
    goto LABEL_18;
  }
  if (v9[2] != 84 || v9[3] != 71 || v9[4] != 77)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_19;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MesgType\n");
    goto LABEL_18;
  }
  if (v9[8] == 32)
  {
    *a3 = gnssTest::ZxFactoryHandler::Ga23_14MapCorePowerParamsToFramPowerParam(v9[9]);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (a4)
    {
      if (!IsLoggingAllowed) {
        goto LABEL_27;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode PCIe,0x%x\n");
    }
    else
    {
      if (!IsLoggingAllowed) {
        goto LABEL_27;
      }
      bzero(__str, 0x410uLL);
      unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode,0x%x,UART LP,0x%x\n", v19);
    }
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
LABEL_27:
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    uint64_t v13 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
    return v13;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr status\n");
LABEL_18:
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
LABEL_19:
  uint64_t v13 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    return 0;
  }
  return v13;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_14MapCorePowerParamsToFramPowerParam(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga23_14MapCorePowerParamsToFramPowerParam");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  uint64_t v4 = 0;
  if ((int)a1 <= 3)
  {
    if ((a1 - 1) >= 3)
    {
      if (!a1) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a1 == 255)
  {
LABEL_10:
    uint64_t v4 = 4;
    goto LABEL_11;
  }
  if (a1 == 4)
  {
    a1 = 4;
    goto LABEL_14;
  }
LABEL_11:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 87, "Ga23_14MapCorePowerParamsToFramPowerParam", 770, a1);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 2, 1);
  }
  a1 = v4;
LABEL_14:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga23_14MapCorePowerParamsToFramPowerParam", a1);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "Ga23_14MapCorePowerParamsToFramPowerParam");
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
  }
  return a1;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_15ParseZxProdModeIndProdMsg(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    goto LABEL_6;
  }
  unsigned __int16 v3 = (unsigned char *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    int v4 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!v4) {
      return result;
    }
LABEL_6:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdInd\n");
LABEL_16:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    return 0;
  }
  if (v3[2] != 84 || v3[3] != 66 || v3[4] != 32)
  {
    int v11 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (!v11) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MesgType\n");
    goto LABEL_16;
  }
  if (v3[8] == 32)
  {
    int v8 = v3[9];
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ProdInd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga23_15ParseZxProdModeIndProdMsg", v8);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
    }
    return v8 == 1;
  }
  else
  {
    int v12 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdInd status err\n");
      goto LABEL_16;
    }
  }
  return result;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_16BuildZxPingProdMsg(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga23_16BuildZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  uint64_t v9 = (unsigned char *)a2[1];
  unint64_t v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *a2;
    int v12 = &v9[-*a2];
    unint64_t v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = v8 - v11;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (unint64_t)operator new(v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = (char *)(v16 + v15);
    v12[v16] = 122;
    unsigned __int16 v10 = &v12[v16 + 1];
    if (v9 == (unsigned char *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      unsigned __int16 v18 = &v9[~v11];
      do
      {
        char v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (unsigned char *)v11);
      uint64_t v9 = (unsigned char *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v9 = 122;
    unsigned __int16 v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  unint64_t v20 = a2[2];
  if ((unint64_t)v10 < v20)
  {
    *unsigned __int16 v10 = 120;
    uint64_t v21 = v10 + 1;
    goto LABEL_39;
  }
  unint64_t v22 = *a2;
  unint64_t v23 = &v10[-*a2];
  unint64_t v24 = (unint64_t)(v23 + 1);
  if ((uint64_t)(v23 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v25 = v20 - v22;
  if (2 * v25 > v24) {
    unint64_t v24 = 2 * v25;
  }
  if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v26 = v24;
  }
  if (v26) {
    unint64_t v27 = (unint64_t)operator new(v26);
  }
  else {
    unint64_t v27 = 0;
  }
  unint64_t v28 = (char *)(v27 + v26);
  v23[v27] = 120;
  uint64_t v21 = &v23[v27 + 1];
  if (v10 == (unsigned char *)v22)
  {
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_38:
    operator delete(v10);
    goto LABEL_39;
  }
  double v29 = &v10[~v22];
  do
  {
    char v30 = *--v10;
    (v29--)[v27] = v30;
  }
  while (v10 != (unsigned char *)v22);
  unsigned __int16 v10 = (unsigned char *)*a2;
  *a2 = v27;
  a2[1] = (unint64_t)v21;
  a2[2] = (unint64_t)v28;
  if (v10) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v21;
  unint64_t v31 = a2[2];
  if ((unint64_t)v21 < v31)
  {
    *uint64_t v21 = 84;
    unint64_t v32 = v21 + 1;
    goto LABEL_57;
  }
  unint64_t v33 = *a2;
  unint64_t v34 = &v21[-*a2];
  unint64_t v35 = (unint64_t)(v34 + 1);
  if ((uint64_t)(v34 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v36 = v31 - v33;
  if (2 * v36 > v35) {
    unint64_t v35 = 2 * v36;
  }
  if (v36 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v37 = v35;
  }
  if (v37) {
    unint64_t v38 = (unint64_t)operator new(v37);
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = (char *)(v38 + v37);
  v34[v38] = 84;
  unint64_t v32 = &v34[v38 + 1];
  if (v21 == (unsigned char *)v33)
  {
    *a2 = (unint64_t)&v34[v38];
    a2[1] = (unint64_t)v32;
    a2[2] = (unint64_t)v39;
LABEL_56:
    operator delete(v21);
    goto LABEL_57;
  }
  uint64_t v40 = &v21[~v33];
  do
  {
    char v41 = *--v21;
    (v40--)[v38] = v41;
  }
  while (v21 != (unsigned char *)v33);
  uint64_t v21 = (unsigned char *)*a2;
  *a2 = v38;
  a2[1] = (unint64_t)v32;
  a2[2] = (unint64_t)v39;
  if (v21) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v32;
  unint64_t v42 = a2[2];
  if ((unint64_t)v32 < v42)
  {
    *unint64_t v32 = 106;
    unint64_t v43 = v32 + 1;
    goto LABEL_75;
  }
  unint64_t v44 = *a2;
  unint64_t v45 = &v32[-*a2];
  unint64_t v46 = (unint64_t)(v45 + 1);
  if ((uint64_t)(v45 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v47 = v42 - v44;
  if (2 * v47 > v46) {
    unint64_t v46 = 2 * v47;
  }
  if (v47 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v48 = v46;
  }
  if (v48) {
    unint64_t v49 = (unint64_t)operator new(v48);
  }
  else {
    unint64_t v49 = 0;
  }
  unint64_t v50 = (char *)(v49 + v48);
  v45[v49] = 106;
  unint64_t v43 = &v45[v49 + 1];
  if (v32 == (unsigned char *)v44)
  {
    *a2 = (unint64_t)&v45[v49];
    a2[1] = (unint64_t)v43;
    a2[2] = (unint64_t)v50;
LABEL_74:
    operator delete(v32);
    goto LABEL_75;
  }
  double v51 = &v32[~v44];
  do
  {
    char v52 = *--v32;
    (v51--)[v49] = v52;
  }
  while (v32 != (unsigned char *)v44);
  unint64_t v32 = (unsigned char *)*a2;
  *a2 = v49;
  a2[1] = (unint64_t)v43;
  a2[2] = (unint64_t)v50;
  if (v32) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v43;
  if (a3 == 1)
  {
    unint64_t v55 = a2[2];
    if ((unint64_t)v43 < v55)
    {
      char v54 = 77;
      goto LABEL_81;
    }
    unint64_t v63 = *a2;
    char v64 = &v43[-*a2];
    unint64_t v65 = (unint64_t)(v64 + 1);
    if ((uint64_t)(v64 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v66 = v55 - v63;
    if (2 * v66 > v65) {
      unint64_t v65 = 2 * v66;
    }
    if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v67 = v65;
    }
    if (v67) {
      unint64_t v62 = (unint64_t)operator new(v67);
    }
    else {
      unint64_t v62 = 0;
    }
    unint64_t v68 = &v64[v62];
    unint64_t v69 = (char *)(v62 + v67);
    v64[v62] = 77;
    uint64_t v56 = (uint64_t)&v64[v62 + 1];
    if (v43 != (unsigned char *)v63)
    {
      unint64_t v72 = &v43[~v63];
      do
      {
        char v73 = *--v43;
        (v72--)[v62] = v73;
      }
      while (v43 != (unsigned char *)v63);
LABEL_107:
      unint64_t v43 = (unsigned char *)*a2;
      *a2 = v62;
      a2[1] = v56;
      a2[2] = (unint64_t)v69;
      if (!v43) {
        goto LABEL_111;
      }
      goto LABEL_110;
    }
LABEL_109:
    *a2 = (unint64_t)v68;
    a2[1] = v56;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v43);
    goto LABEL_111;
  }
  if (a3) {
    goto LABEL_112;
  }
  unint64_t v53 = a2[2];
  if ((unint64_t)v43 >= v53)
  {
    unint64_t v57 = *a2;
    unint64_t v58 = &v43[-*a2];
    unint64_t v59 = (unint64_t)(v58 + 1);
    if ((uint64_t)(v58 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v60 = v53 - v57;
    if (2 * v60 > v59) {
      unint64_t v59 = 2 * v60;
    }
    if (v60 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v61 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v61 = v59;
    }
    if (v61) {
      unint64_t v62 = (unint64_t)operator new(v61);
    }
    else {
      unint64_t v62 = 0;
    }
    unint64_t v68 = &v58[v62];
    unint64_t v69 = (char *)(v62 + v61);
    v58[v62] = 80;
    uint64_t v56 = (uint64_t)&v58[v62 + 1];
    if (v43 != (unsigned char *)v57)
    {
      unint64_t v70 = &v43[~v57];
      do
      {
        char v71 = *--v43;
        (v70--)[v62] = v71;
      }
      while (v43 != (unsigned char *)v57);
      goto LABEL_107;
    }
    goto LABEL_109;
  }
  char v54 = 80;
LABEL_81:
  *unint64_t v43 = v54;
  uint64_t v56 = (uint64_t)(v43 + 1);
LABEL_111:
  a2[1] = v56;
  unint64_t v43 = (unsigned char *)v56;
LABEL_112:
  unint64_t v74 = a2[2];
  if ((unint64_t)v43 < v74)
  {
    *unint64_t v43 = 0;
    char v75 = v43 + 1;
    goto LABEL_130;
  }
  unint64_t v76 = *a2;
  unint64_t v77 = &v43[-*a2];
  unint64_t v78 = (unint64_t)(v77 + 1);
  if ((uint64_t)(v77 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v79 = v74 - v76;
  if (2 * v79 > v78) {
    unint64_t v78 = 2 * v79;
  }
  if (v79 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v80 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v80 = v78;
  }
  if (v80) {
    unint64_t v81 = (unint64_t)operator new(v80);
  }
  else {
    unint64_t v81 = 0;
  }
  size_t v82 = (char *)(v81 + v80);
  v77[v81] = 0;
  char v75 = &v77[v81 + 1];
  if (v43 == (unsigned char *)v76)
  {
    *a2 = (unint64_t)&v77[v81];
    a2[1] = (unint64_t)v75;
    a2[2] = (unint64_t)v82;
LABEL_129:
    operator delete(v43);
    goto LABEL_130;
  }
  unint64_t v83 = &v43[~v76];
  do
  {
    char v84 = *--v43;
    (v83--)[v81] = v84;
  }
  while (v43 != (unsigned char *)v76);
  unint64_t v43 = (unsigned char *)*a2;
  *a2 = v81;
  a2[1] = (unint64_t)v75;
  a2[2] = (unint64_t)v82;
  if (v43) {
    goto LABEL_129;
  }
LABEL_130:
  a2[1] = (unint64_t)v75;
  unint64_t v85 = a2[2];
  if ((unint64_t)v75 < v85)
  {
    *char v75 = 0;
    char v86 = v75 + 1;
    goto LABEL_148;
  }
  unint64_t v87 = *a2;
  uint64_t v88 = &v75[-*a2];
  unint64_t v89 = (unint64_t)(v88 + 1);
  if ((uint64_t)(v88 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v90 = v85 - v87;
  if (2 * v90 > v89) {
    unint64_t v89 = 2 * v90;
  }
  if (v90 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v91 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v91 = v89;
  }
  if (v91) {
    unint64_t v92 = (unint64_t)operator new(v91);
  }
  else {
    unint64_t v92 = 0;
  }
  size_t v93 = (char *)(v92 + v91);
  v88[v92] = 0;
  char v86 = &v88[v92 + 1];
  if (v75 == (unsigned char *)v87)
  {
    *a2 = (unint64_t)&v88[v92];
    a2[1] = (unint64_t)v86;
    a2[2] = (unint64_t)v93;
LABEL_147:
    operator delete(v75);
    goto LABEL_148;
  }
  unint64_t v94 = &v75[~v87];
  do
  {
    char v95 = *--v75;
    (v94--)[v92] = v95;
  }
  while (v75 != (unsigned char *)v87);
  char v75 = (unsigned char *)*a2;
  *a2 = v92;
  a2[1] = (unint64_t)v86;
  a2[2] = (unint64_t)v93;
  if (v75) {
    goto LABEL_147;
  }
LABEL_148:
  a2[1] = (unint64_t)v86;
  unint64_t v96 = a2[2];
  if ((unint64_t)v86 < v96)
  {
    *char v86 = 0;
    uint64_t v97 = (uint64_t)(v86 + 1);
    goto LABEL_166;
  }
  unint64_t v98 = *a2;
  unsigned __int16 v99 = &v86[-*a2];
  unint64_t v100 = (unint64_t)(v99 + 1);
  if ((uint64_t)(v99 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v101 = v96 - v98;
  if (2 * v101 > v100) {
    unint64_t v100 = 2 * v101;
  }
  if (v101 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v102 = v100;
  }
  if (v102) {
    unint64_t v103 = (unint64_t)operator new(v102);
  }
  else {
    unint64_t v103 = 0;
  }
  uint64_t v104 = (char *)(v103 + v102);
  v99[v103] = 0;
  uint64_t v97 = (uint64_t)&v99[v103 + 1];
  if (v86 == (unsigned char *)v98)
  {
    *a2 = (unint64_t)&v99[v103];
    a2[1] = v97;
    a2[2] = (unint64_t)v104;
LABEL_165:
    operator delete(v86);
    goto LABEL_166;
  }
  unsigned __int16 v105 = &v86[~v98];
  do
  {
    char v106 = *--v86;
    (v105--)[v103] = v106;
  }
  while (v86 != (unsigned char *)v98);
  char v86 = (unsigned char *)*a2;
  *a2 = v103;
  a2[1] = v97;
  a2[2] = (unint64_t)v104;
  if (v86) {
    goto LABEL_165;
  }
LABEL_166:
  a2[1] = v97;
  *(unsigned char *)(*a2 + 5) = 0;
  *(unsigned char *)(*a2 + 6) = 0;
  v5.i32[0] = *(_DWORD *)(*a2 + 2);
  char v107 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v5)) + *(unsigned char *)(*a2 + 6);
  if (v107)
  {
    *(unsigned char *)(*a2 + 7) = v107;
    unsigned __int8 v109 = (unsigned char *)a2[1];
    unint64_t v108 = a2[2];
    if ((unint64_t)v109 >= v108)
    {
      unint64_t v113 = *a2;
      unint64_t v114 = &v109[-*a2];
      unint64_t v115 = (unint64_t)(v114 + 1);
      if ((uint64_t)(v114 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v116 = v108 - v113;
      if (2 * v116 > v115) {
        unint64_t v115 = 2 * v116;
      }
      if (v116 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v117 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v117 = v115;
      }
      if (v117) {
        unint64_t v118 = (unint64_t)operator new(v117);
      }
      else {
        unint64_t v118 = 0;
      }
      char v119 = (char *)(v118 + v117);
      v114[v118] = 10;
      uint64_t v110 = (uint64_t)&v114[v118 + 1];
      if (v109 == (unsigned char *)v113)
      {
        v118 += (unint64_t)v114;
      }
      else
      {
        int v120 = &v109[~v113];
        do
        {
          char v121 = *--v109;
          (v120--)[v118] = v121;
        }
        while (v109 != (unsigned char *)v113);
        unsigned __int8 v109 = (unsigned char *)*a2;
      }
      *a2 = v118;
      a2[1] = v110;
      a2[2] = (unint64_t)v119;
      if (v109) {
        operator delete(v109);
      }
    }
    else
    {
      *unsigned __int8 v109 = 10;
      uint64_t v110 = (uint64_t)(v109 + 1);
    }
    a2[1] = v110;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_190:
      bzero(__str, 0x410uLL);
      uint64_t v122 = mach_continuous_time();
      unsigned __int16 v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "ADP", 68, "Ga23_16BuildZxPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v123, 5, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v111 = mach_continuous_time();
      unsigned __int16 v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "ADP", 69, "Ga23_16BuildZxPingProdMsg", 781);
      LbsOsaTrace_WriteLog(0x18u, __str, v112, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      goto LABEL_190;
    }
  }
  return v107 != 0;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_21ParseZxPingProdMsg(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v8, 5, 1);
  }
  uint64_t v9 = *a2;
  if (*(unsigned char *)(*a2 + 2) != 84 || *(unsigned char *)(v9 + 3) != 74)
  {
LABEL_14:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping Parse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga23_21ParseZxPingProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v18, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result) {
      goto LABEL_17;
    }
    return result;
  }
  int v10 = *(unsigned __int8 *)(v9 + 4);
  if (v10 == 80)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v23, 5, 1);
    }
    unint64_t v25 = a2;
    uint64_t v24 = *a2;
    unint64_t v26 = v25[1] - v24;
    if (v26 > 8)
    {
      if (*(unsigned char *)(v24 + 8) == 32)
      {
        memset(__s, 0, 58);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v74 = mach_continuous_time();
          unsigned __int16 v75 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 68, "Ga23_18ProcessCpPingRsp");
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v75, 5, 1);
        }
        if ((unsigned __int16)v26 > 0x2Du)
        {
          unsigned int v76 = *(unsigned __int8 *)(v24 + 9);
          LOBYTE(__s[0]) = v76 & 3;
          BYTE1(__s[0]) = (v76 >> 2) & 3;
          BYTE2(__s[0]) = v76 & 0x10;
          unsigned int v77 = *(unsigned __int8 *)(v24 + 12);
          BYTE3(__s[0]) = *(unsigned char *)(v24 + 11);
          BYTE4(__s[0]) = v77 & 0xF;
          BYTE5(__s[0]) = v77 & 0x10;
          BYTE6(__s[0]) = v77 >> 7;
          unsigned int v78 = *(unsigned __int8 *)(v24 + 13);
          BYTE7(__s[0]) = v78 & 0xF;
          BYTE8(__s[0]) = v78 >> 4;
          int v79 = *(_DWORD *)(v24 + 14);
          HIDWORD(__s[0]) = *(_DWORD *)(v24 + 17);
          *(_DWORD *)((char *)__s + 9) = v79;
          LOBYTE(__s[1]) = 0;
          *(_DWORD *)((char *)&__s[1] + 1) = *(_DWORD *)(v24 + 21);
          DWORD1(__s[1]) = *(_DWORD *)(v24 + 24);
          BYTE8(__s[1]) = 0;
          uint64_t v80 = *(void *)(v24 + 28);
          *(_WORD *)((char *)&__s[2] + 1) = *(unsigned __int8 *)(v24 + 36);
          *(void *)((char *)&__s[1] + 9) = v80;
          uint64_t v81 = *(void *)(v24 + 37);
          *(_WORD *)((char *)&__s[2] + 11) = *(unsigned __int8 *)(v24 + 45);
          *(void *)((char *)&__s[2] + 3) = v81;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v82 = mach_continuous_time();
            unsigned __int16 v83 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 68, "Ga23_18ProcessCpPingRsp");
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v83, 5, 1);
          }
          std::string::append((std::string *)a3, "CP,");
          std::to_string(__str, BYTE1(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v84 = __str;
          }
          else {
            char v84 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)a3, (const std::string::value_type *)v84, size);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append((std::string *)a3, ".");
          std::to_string(__str, LOBYTE(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v86 = __str;
          }
          else {
            char v86 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v87 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v87 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)a3, (const std::string::value_type *)v86, v87);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "FW,");
          std::string::append((std::string *)a3, (const std::string::value_type *)((unint64_t)__s | 9));
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "CPPatch,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 1);
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "SW_Build_Date,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 9);
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "SW_Build_Time,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[2] + 3);
          std::string::append((std::string *)a3, ",");
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v88 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if (*(char *)(a3 + 23) >= 0) {
              unint64_t v89 = (const char *)a3;
            }
            else {
              unint64_t v89 = *(const char **)a3;
            }
            unsigned __int16 v90 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Version,%s\n", (unint64_t)v88, "ADP", 73, "Ga23_17ParseZxCpPingProdMsg", v89);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v90, 4, 1);
          }
          memset(&v134, 0, sizeof(v134));
          std::string::append(&v134, "FW,");
          std::string::append(&v134, (const std::string::value_type *)((unint64_t)__s | 9));
          std::string::append(&v134, ",");
          std::string::append(&v134, "CP,");
          std::to_string(__str, BYTE1(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v91 = __str;
          }
          else {
            size_t v91 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v92 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v91, v92);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ".");
          std::to_string(__str, LOBYTE(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v93 = __str;
          }
          else {
            size_t v93 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v94 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v94 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v93, v94);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "Patch,");
          std::string::append(&v134, (const std::string::value_type *)&__s[1] + 1);
          std::string::append(&v134, ",");
          std::string::append(&v134, "SW_Build_Date,");
          std::string::append(&v134, (const std::string::value_type *)&__s[1] + 9);
          std::string::append(&v134, ",");
          std::string::append(&v134, "SW_Build_Time,");
          std::string::append(&v134, (const std::string::value_type *)&__s[2] + 3);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ChipDash,");
          std::to_string(__str, BYTE8(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v95 = __str;
          }
          else {
            char v95 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v96 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v96 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v95, v96);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ChipStep,");
          std::to_string(__str, BYTE7(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v97 = __str;
          }
          else {
            uint64_t v97 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v98 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v98 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v97, v98);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ExtProdId,");
          std::to_string(__str, BYTE2(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned __int16 v99 = __str;
          }
          else {
            unsigned __int16 v99 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v100 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v100 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v99, v100);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_IsOTPProg,");
          std::to_string(__str, SBYTE6(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v101 = __str;
          }
          else {
            unint64_t v101 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v102 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v102 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v101, v102);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_KeyType,");
          std::to_string(__str, BYTE5(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v103 = __str;
          }
          else {
            unint64_t v103 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v104 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v104 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v103, v104);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ProdType,");
          std::to_string(__str, *(unsigned __int16 *)((char *)__s + 3));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned __int16 v105 = __str;
          }
          else {
            unsigned __int16 v105 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          }
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v106 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v106 = __str[0].__r_.__value_.__l.__size_;
          }
          std::string::append(&v134, (const std::string::value_type *)v105, v106);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          std::string::append(&v134, ",");
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v107 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v108 = &v134;
            }
            else {
              unint64_t v108 = (std::string *)v134.__r_.__value_.__r.__words[0];
            }
            unsigned __int16 v109 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: TestOutput,%s\n", (unint64_t)v107, "ADP", 68, "Ga23_17ParseZxCpPingProdMsg", (const char *)v108);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v109, 5, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v110 = mach_continuous_time();
            unsigned __int16 v111 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v110), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v111, 5, 1);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          char v73 = 0;
          goto LABEL_252;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v126 = mach_continuous_time();
          unsigned __int16 v127 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPingResponse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "ADP", 69, "Ga23_18ProcessCpPingRsp", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v127, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v128 = mach_continuous_time();
          unsigned __int16 v129 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 68, "Ga23_18ProcessCpPingRsp");
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v129, 5, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v130 = mach_continuous_time();
          unsigned __int16 v131 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPing Resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v130), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 257);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v131, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          goto LABEL_280;
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v116 = mach_continuous_time();
          unsigned __int16 v117 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping CP Status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v116), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v117, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          goto LABEL_280;
        }
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v27 = mach_continuous_time();
        unsigned __int16 v28 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse Ping CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 783);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v28, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
LABEL_280:
        bzero(__str, 0x410uLL);
        uint64_t v132 = mach_continuous_time();
        unsigned __int16 v133 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v133, 5, 1);
      }
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result) {
      goto LABEL_17;
    }
    return result;
  }
  if (v10 != 77) {
    goto LABEL_14;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v12, 5, 1);
  }
  uint64_t v13 = *a2;
  unint64_t v14 = a2[1] - *a2;
  if (v14 > 8)
  {
    if (*(unsigned char *)(v13 + 8) != 32)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v114 = mach_continuous_time();
        unsigned __int16 v115 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing Status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v114), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 770);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v115, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_270;
      }
      goto LABEL_271;
    }
    memset(__s, 0, 62);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga23_20ProcessMePingRsp");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v30, 5, 1);
    }
    if ((unsigned __int16)v14 <= 0x2Du)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v118 = mach_continuous_time();
        unsigned __int16 v119 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPingResponse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v118), "ADP", 69, "Ga23_20ProcessMePingRsp", 770);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v119, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v120 = mach_continuous_time();
        unsigned __int16 v121 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v120), "ADP", 68, "Ga23_20ProcessMePingRsp");
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v121, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v122 = mach_continuous_time();
        unsigned __int16 v123 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing Resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 257);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v123, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
        goto LABEL_270;
      }
      goto LABEL_271;
    }
    memset_s(__s, 0x3EuLL, 0, 0x3EuLL);
    unsigned int v31 = *(unsigned __int8 *)(v13 + 9);
    LOBYTE(__s[0]) = v31 & 3;
    BYTE1(__s[0]) = (v31 >> 2) & 3;
    unsigned int v32 = *(unsigned __int8 *)(v13 + 10);
    BYTE2(__s[0]) = v32 & 0xF;
    BYTE3(__s[0]) = v32 >> 4;
    BYTE11(__s[0]) = *(unsigned char *)(v13 + 11);
    BYTE12(__s[0]) = *(unsigned char *)(v13 + 13);
    int v33 = *(_DWORD *)(v13 + 17);
    *(_DWORD *)((char *)__s + 13) = *(_DWORD *)(v13 + 14);
    LODWORD(__s[1]) = v33;
    BYTE4(__s[1]) = 0;
    int v34 = *(_DWORD *)(v13 + 21);
    DWORD2(__s[1]) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)((char *)&__s[1] + 5) = v34;
    BYTE12(__s[1]) = 0;
    uint64_t v35 = *(void *)(v13 + 28);
    *(_WORD *)((char *)&__s[2] + 5) = *(unsigned __int8 *)(v13 + 36);
    *(void *)((char *)&__s[1] + 13) = v35;
    uint64_t v36 = *(void *)(v13 + 37);
    *(_WORD *)((char *)&__s[2] + 15) = *(unsigned __int8 *)(v13 + 45);
    *(void *)((char *)&__s[2] + 7) = v36;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v37 = mach_continuous_time();
      unsigned __int16 v38 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga23_20ProcessMePingRsp");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v38, 5, 1);
    }
    std::string::append((std::string *)a3, "ME,");
    std::to_string(__str, BYTE1(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v39 = __str;
    }
    else {
      unint64_t v39 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)v39, v40);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a3, ".");
    std::to_string(__str, LOBYTE(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v41 = __str;
    }
    else {
      char v41 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)v41, v42);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a3, ",");
    std::string::append((std::string *)a3, "BB,");
    std::to_string(__str, BYTE3(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v43 = __str;
    }
    else {
      unint64_t v43 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)v43, v44);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a3, ".");
    std::to_string(__str, BYTE2(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v45 = __str;
    }
    else {
      unint64_t v45 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a3, ",");
    std::string::append((std::string *)a3, "MEPatch,");
    std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 5);
    std::string::append((std::string *)a3, ",");
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v47 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(char *)(a3 + 23) >= 0) {
        size_t v48 = (const char *)a3;
      }
      else {
        size_t v48 = *(const char **)a3;
      }
      unsigned __int16 v49 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Version,%s\n", (unint64_t)v47, "ADP", 73, "Ga23_19ParseZxMePingProdMsg", v48);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v49, 4, 1);
    }
    memset(&v134, 0, sizeof(v134));
    std::string::append(&v134, "ME,");
    std::to_string(__str, BYTE1(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v50 = __str;
    }
    else {
      unint64_t v50 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v50, v51);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ".");
    std::to_string(__str, LOBYTE(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v52 = __str;
    }
    else {
      char v52 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v53 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v52, v53);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "BB,");
    std::to_string(__str, BYTE3(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v54 = __str;
    }
    else {
      char v54 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v54, v55);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ".");
    std::to_string(__str, BYTE2(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v56 = __str;
    }
    else {
      uint64_t v56 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v57 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v57 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v56, v57);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "MMCU,");
    std::to_string(__str, BYTE11(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v58 = __str;
    }
    else {
      unint64_t v58 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v59 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v59 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v58, v59);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "RF,");
    std::to_string(__str, BYTE12(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v60 = __str;
    }
    else {
      unint64_t v60 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v61 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v60, v61);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_IsRemovable,");
    std::to_string(__str, SBYTE7(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v62 = __str;
    }
    else {
      unint64_t v62 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v63 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v63 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v62, v63);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_LnaType,");
    std::to_string(__str, BYTE5(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v64 = __str;
    }
    else {
      char v64 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v64, v65);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_XOType,");
    std::to_string(__str, BYTE6(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v66 = __str;
    }
    else {
      unint64_t v66 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v67 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v67 = __str[0].__r_.__value_.__l.__size_;
    }
    std::string::append(&v134, (const std::string::value_type *)v66, v67);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v68 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v69 = &v134;
      }
      else {
        unint64_t v69 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      unsigned __int16 v70 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: TestOutput,%s\n", (unint64_t)v68, "ADP", 68, "Ga23_19ParseZxMePingProdMsg", (const char *)v69);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v70, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v71 = mach_continuous_time();
      unsigned __int16 v72 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v72, 5, 1);
    }
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v134.__r_.__value_.__l.__data_);
    }
    char v73 = 1;
LABEL_252:
    *a4 = v73;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v112 = mach_continuous_time();
      unsigned __int16 v113 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v113, 5, 1);
    }
    return 1;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 783);
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v16, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
LABEL_270:
    bzero(__str, 0x410uLL);
    uint64_t v124 = mach_continuous_time();
    unsigned __int16 v125 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v124), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v125, 5, 1);
  }
LABEL_271:
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_17:
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v21, 5, 1);
    return 0;
  }
  return result;
}

void sub_22B88AEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_22BuildZxApSignalGpioProdMsg(unsigned char *a1, unint64_t *a2, char a3)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  uint64_t v9 = (unsigned char *)a2[1];
  unint64_t v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *a2;
    unsigned __int16 v12 = &v9[-*a2];
    unint64_t v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = v8 - v11;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (unint64_t)operator new(v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = (char *)(v16 + v15);
    v12[v16] = 122;
    int v10 = &v12[v16 + 1];
    if (v9 == (unsigned char *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      unsigned __int16 v18 = &v9[~v11];
      do
      {
        char v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (unsigned char *)v11);
      uint64_t v9 = (unsigned char *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v9 = 122;
    int v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  unint64_t v20 = a2[2];
  if ((unint64_t)v10 < v20)
  {
    *int v10 = 120;
    unsigned __int16 v21 = v10 + 1;
    goto LABEL_39;
  }
  unint64_t v22 = *a2;
  unsigned __int16 v23 = &v10[-*a2];
  unint64_t v24 = (unint64_t)(v23 + 1);
  if ((uint64_t)(v23 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v25 = v20 - v22;
  if (2 * v25 > v24) {
    unint64_t v24 = 2 * v25;
  }
  if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v26 = v24;
  }
  if (v26) {
    unint64_t v27 = (unint64_t)operator new(v26);
  }
  else {
    unint64_t v27 = 0;
  }
  unsigned __int16 v28 = (char *)(v27 + v26);
  v23[v27] = 120;
  unsigned __int16 v21 = &v23[v27 + 1];
  if (v10 == (unsigned char *)v22)
  {
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_38:
    operator delete(v10);
    goto LABEL_39;
  }
  uint64_t v29 = &v10[~v22];
  do
  {
    char v30 = *--v10;
    (v29--)[v27] = v30;
  }
  while (v10 != (unsigned char *)v22);
  int v10 = (unsigned char *)*a2;
  *a2 = v27;
  a2[1] = (unint64_t)v21;
  a2[2] = (unint64_t)v28;
  if (v10) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v21;
  unint64_t v31 = a2[2];
  if ((unint64_t)v21 < v31)
  {
    *unsigned __int16 v21 = 84;
    unsigned int v32 = v21 + 1;
    goto LABEL_57;
  }
  unint64_t v33 = *a2;
  int v34 = &v21[-*a2];
  unint64_t v35 = (unint64_t)(v34 + 1);
  if ((uint64_t)(v34 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v36 = v31 - v33;
  if (2 * v36 > v35) {
    unint64_t v35 = 2 * v36;
  }
  if (v36 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v37 = v35;
  }
  if (v37) {
    unint64_t v38 = (unint64_t)operator new(v37);
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = (char *)(v38 + v37);
  v34[v38] = 84;
  unsigned int v32 = &v34[v38 + 1];
  if (v21 == (unsigned char *)v33)
  {
    *a2 = (unint64_t)&v34[v38];
    a2[1] = (unint64_t)v32;
    a2[2] = (unint64_t)v39;
LABEL_56:
    operator delete(v21);
    goto LABEL_57;
  }
  std::string::size_type v40 = &v21[~v33];
  do
  {
    char v41 = *--v21;
    (v40--)[v38] = v41;
  }
  while (v21 != (unsigned char *)v33);
  unsigned __int16 v21 = (unsigned char *)*a2;
  *a2 = v38;
  a2[1] = (unint64_t)v32;
  a2[2] = (unint64_t)v39;
  if (v21) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v32;
  unint64_t v42 = a2[2];
  if ((unint64_t)v32 < v42)
  {
    *unsigned int v32 = 104;
    unint64_t v43 = v32 + 1;
    goto LABEL_75;
  }
  unint64_t v44 = *a2;
  unint64_t v45 = &v32[-*a2];
  unint64_t v46 = (unint64_t)(v45 + 1);
  if ((uint64_t)(v45 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v47 = v42 - v44;
  if (2 * v47 > v46) {
    unint64_t v46 = 2 * v47;
  }
  if (v47 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v48 = v46;
  }
  if (v48) {
    unint64_t v49 = (unint64_t)operator new(v48);
  }
  else {
    unint64_t v49 = 0;
  }
  unint64_t v50 = (char *)(v49 + v48);
  v45[v49] = 104;
  unint64_t v43 = &v45[v49 + 1];
  if (v32 == (unsigned char *)v44)
  {
    *a2 = (unint64_t)&v45[v49];
    a2[1] = (unint64_t)v43;
    a2[2] = (unint64_t)v50;
LABEL_74:
    operator delete(v32);
    goto LABEL_75;
  }
  std::string::size_type v51 = &v32[~v44];
  do
  {
    char v52 = *--v32;
    (v51--)[v49] = v52;
  }
  while (v32 != (unsigned char *)v44);
  unsigned int v32 = (unsigned char *)*a2;
  *a2 = v49;
  a2[1] = (unint64_t)v43;
  a2[2] = (unint64_t)v50;
  if (v32) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v43;
  unint64_t v53 = a2[2];
  if ((unint64_t)v43 < v53)
  {
    *unint64_t v43 = 32;
    char v54 = v43 + 1;
    goto LABEL_93;
  }
  unint64_t v55 = *a2;
  uint64_t v56 = &v43[-*a2];
  unint64_t v57 = (unint64_t)(v56 + 1);
  if ((uint64_t)(v56 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v58 = v53 - v55;
  if (2 * v58 > v57) {
    unint64_t v57 = 2 * v58;
  }
  if (v58 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v59 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v59 = v57;
  }
  if (v59) {
    unint64_t v60 = (unint64_t)operator new(v59);
  }
  else {
    unint64_t v60 = 0;
  }
  std::string::size_type v61 = (char *)(v60 + v59);
  v56[v60] = 32;
  char v54 = &v56[v60 + 1];
  if (v43 == (unsigned char *)v55)
  {
    *a2 = (unint64_t)&v56[v60];
    a2[1] = (unint64_t)v54;
    a2[2] = (unint64_t)v61;
LABEL_92:
    operator delete(v43);
    goto LABEL_93;
  }
  unint64_t v62 = &v43[~v55];
  do
  {
    char v63 = *--v43;
    (v62--)[v60] = v63;
  }
  while (v43 != (unsigned char *)v55);
  unint64_t v43 = (unsigned char *)*a2;
  *a2 = v60;
  a2[1] = (unint64_t)v54;
  a2[2] = (unint64_t)v61;
  if (v43) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v54;
  unint64_t v64 = a2[2];
  if ((unint64_t)v54 < v64)
  {
    *char v54 = 0;
    std::string::size_type v65 = v54 + 1;
    goto LABEL_111;
  }
  unint64_t v66 = *a2;
  std::string::size_type v67 = &v54[-*a2];
  unint64_t v68 = (unint64_t)(v67 + 1);
  if ((uint64_t)(v67 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v69 = v64 - v66;
  if (2 * v69 > v68) {
    unint64_t v68 = 2 * v69;
  }
  if (v69 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v70 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v70 = v68;
  }
  if (v70) {
    unint64_t v71 = (unint64_t)operator new(v70);
  }
  else {
    unint64_t v71 = 0;
  }
  unsigned __int16 v72 = (char *)(v71 + v70);
  v67[v71] = 0;
  std::string::size_type v65 = &v67[v71 + 1];
  if (v54 == (unsigned char *)v66)
  {
    *a2 = (unint64_t)&v67[v71];
    a2[1] = (unint64_t)v65;
    a2[2] = (unint64_t)v72;
LABEL_110:
    operator delete(v54);
    goto LABEL_111;
  }
  char v73 = &v54[~v66];
  do
  {
    char v74 = *--v54;
    (v73--)[v71] = v74;
  }
  while (v54 != (unsigned char *)v66);
  char v54 = (unsigned char *)*a2;
  *a2 = v71;
  a2[1] = (unint64_t)v65;
  a2[2] = (unint64_t)v72;
  if (v54) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v65;
  unint64_t v75 = a2[2];
  if ((unint64_t)v65 < v75)
  {
    *std::string::size_type v65 = 0;
    unsigned int v76 = v65 + 1;
    goto LABEL_129;
  }
  unint64_t v77 = *a2;
  unsigned int v78 = &v65[-*a2];
  unint64_t v79 = (unint64_t)(v78 + 1);
  if ((uint64_t)(v78 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v80 = v75 - v77;
  if (2 * v80 > v79) {
    unint64_t v79 = 2 * v80;
  }
  if (v80 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v81 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v81 = v79;
  }
  if (v81) {
    unint64_t v82 = (unint64_t)operator new(v81);
  }
  else {
    unint64_t v82 = 0;
  }
  unsigned __int16 v83 = (char *)(v82 + v81);
  v78[v82] = 0;
  unsigned int v76 = &v78[v82 + 1];
  if (v65 == (unsigned char *)v77)
  {
    *a2 = (unint64_t)&v78[v82];
    a2[1] = (unint64_t)v76;
    a2[2] = (unint64_t)v83;
LABEL_128:
    operator delete(v65);
    goto LABEL_129;
  }
  char v84 = &v65[~v77];
  do
  {
    char v85 = *--v65;
    (v84--)[v82] = v85;
  }
  while (v65 != (unsigned char *)v77);
  std::string::size_type v65 = (unsigned char *)*a2;
  *a2 = v82;
  a2[1] = (unint64_t)v76;
  a2[2] = (unint64_t)v83;
  if (v65) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v76;
  unint64_t v86 = a2[2];
  if ((unint64_t)v76 < v86)
  {
    *unsigned int v76 = 0;
    std::string::size_type v87 = v76 + 1;
    goto LABEL_147;
  }
  unint64_t v88 = *a2;
  unint64_t v89 = &v76[-*a2];
  unint64_t v90 = (unint64_t)(v89 + 1);
  if ((uint64_t)(v89 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v91 = v86 - v88;
  if (2 * v91 > v90) {
    unint64_t v90 = 2 * v91;
  }
  if (v91 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v92 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v92 = v90;
  }
  if (v92) {
    unint64_t v93 = (unint64_t)operator new(v92);
  }
  else {
    unint64_t v93 = 0;
  }
  std::string::size_type v94 = (char *)(v93 + v92);
  v89[v93] = 0;
  std::string::size_type v87 = &v89[v93 + 1];
  if (v76 == (unsigned char *)v88)
  {
    *a2 = (unint64_t)&v89[v93];
    a2[1] = (unint64_t)v87;
    a2[2] = (unint64_t)v94;
LABEL_146:
    operator delete(v76);
    goto LABEL_147;
  }
  char v95 = &v76[~v88];
  do
  {
    char v96 = *--v76;
    (v95--)[v93] = v96;
  }
  while (v76 != (unsigned char *)v88);
  unsigned int v76 = (unsigned char *)*a2;
  *a2 = v93;
  a2[1] = (unint64_t)v87;
  a2[2] = (unint64_t)v94;
  if (v76) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v87;
  unint64_t v97 = a2[2];
  if ((unint64_t)v87 < v97)
  {
    *std::string::size_type v87 = a3;
    uint64_t v98 = (uint64_t)(v87 + 1);
    goto LABEL_165;
  }
  unint64_t v99 = *a2;
  std::string::size_type v100 = &v87[-*a2];
  unint64_t v101 = (unint64_t)(v100 + 1);
  if ((uint64_t)(v100 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v102 = v97 - v99;
  if (2 * v102 > v101) {
    unint64_t v101 = 2 * v102;
  }
  if (v102 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v103 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v103 = v101;
  }
  if (v103) {
    unint64_t v104 = (unint64_t)operator new(v103);
  }
  else {
    unint64_t v104 = 0;
  }
  unsigned __int16 v105 = (char *)(v104 + v103);
  v100[v104] = a3;
  uint64_t v98 = (uint64_t)&v100[v104 + 1];
  if (v87 == (unsigned char *)v99)
  {
    *a2 = (unint64_t)&v100[v104];
    a2[1] = v98;
    a2[2] = (unint64_t)v105;
LABEL_164:
    operator delete(v87);
    goto LABEL_165;
  }
  std::string::size_type v106 = &v87[~v99];
  do
  {
    char v107 = *--v87;
    (v106--)[v104] = v107;
  }
  while (v87 != (unsigned char *)v99);
  std::string::size_type v87 = (unsigned char *)*a2;
  *a2 = v104;
  a2[1] = v98;
  a2[2] = (unint64_t)v105;
  if (v87) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = v98;
  *a1 = a3;
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v98, v98 - *a2);
  unint64_t v108 = ~*a2 + a2[1];
  if (v108 < 8 || v108 > 0x7FF || v165 - (unsigned char *)__p <= v108)
  {
    if (__p)
    {
      uint64_t v165 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v114 = 0;
    uint64_t v115 = 8;
    int v116 = 8;
    do
    {
      v114 += *((unsigned __int8 *)__p + v115);
      uint64_t v115 = ++v116;
    }
    while (v108 >= v116);
    uint64_t v165 = __p;
    operator delete(__p);
    if (v114 != -1)
    {
      unsigned __int16 v119 = (unsigned char *)a2[1];
      unint64_t v118 = a2[2];
      if ((unint64_t)v119 >= v118)
      {
        unint64_t v121 = *a2;
        uint64_t v122 = &v119[-*a2];
        unint64_t v123 = (unint64_t)(v122 + 1);
        if ((uint64_t)(v122 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v124 = v118 - v121;
        if (2 * v124 > v123) {
          unint64_t v123 = 2 * v124;
        }
        if (v124 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v125 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v125 = v123;
        }
        if (v125) {
          unint64_t v126 = (unint64_t)operator new(v125);
        }
        else {
          unint64_t v126 = 0;
        }
        unsigned __int16 v127 = (char *)(v126 + v125);
        v122[v126] = v114;
        uint64_t v120 = &v122[v126 + 1];
        if (v119 == (unsigned char *)v121)
        {
          v126 += (unint64_t)v122;
        }
        else
        {
          uint64_t v128 = &v119[~v121];
          do
          {
            char v129 = *--v119;
            (v128--)[v126] = v129;
          }
          while (v119 != (unsigned char *)v121);
          unsigned __int16 v119 = (unsigned char *)*a2;
        }
        *a2 = v126;
        a2[1] = (unint64_t)v120;
        a2[2] = (unint64_t)v127;
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        unsigned char *v119 = v114;
        uint64_t v120 = v119 + 1;
      }
      a2[1] = (unint64_t)v120;
      unint64_t v130 = a2[2];
      if ((unint64_t)v120 < v130)
      {
        *uint64_t v120 = HIBYTE(v114);
        uint64_t v131 = (uint64_t)(v120 + 1);
        goto LABEL_214;
      }
      unint64_t v132 = *a2;
      unsigned __int16 v133 = &v120[-*a2];
      unint64_t v134 = (unint64_t)(v133 + 1);
      if ((uint64_t)(v133 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v135 = v130 - v132;
      if (2 * v135 > v134) {
        unint64_t v134 = 2 * v135;
      }
      if (v135 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v136 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v136 = v134;
      }
      if (v136) {
        unint64_t v137 = (unint64_t)operator new(v136);
      }
      else {
        unint64_t v137 = 0;
      }
      unint64_t v138 = (char *)(v137 + v136);
      v133[v137] = HIBYTE(v114);
      uint64_t v131 = (uint64_t)&v133[v137 + 1];
      if (v120 == (unsigned char *)v132)
      {
        *a2 = (unint64_t)&v133[v137];
        a2[1] = v131;
        a2[2] = (unint64_t)v138;
      }
      else
      {
        unint64_t v139 = &v120[~v132];
        do
        {
          char v140 = *--v120;
          (v139--)[v137] = v140;
        }
        while (v120 != (unsigned char *)v132);
        uint64_t v120 = (unsigned char *)*a2;
        *a2 = v137;
        a2[1] = v131;
        a2[2] = (unint64_t)v138;
        if (!v120)
        {
LABEL_214:
          a2[1] = v131;
          size_t v141 = (unsigned char *)*a2;
          unint64_t v142 = v131 - *a2;
          if (v142 < 0x10000)
          {
            __int16 v145 = v142 - 8;
            v141[5] = v145;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v145);
            unint64_t v146 = (unsigned char *)*a2;
            v117.i32[0] = *(_DWORD *)(*a2 + 2);
            char v147 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v117)) + *(unsigned char *)(*a2 + 6);
            if (v147)
            {
              v146[7] = v147;
              unint64_t v149 = (unsigned char *)a2[1];
              unint64_t v148 = a2[2];
              if ((unint64_t)v149 >= v148)
              {
                unint64_t v153 = *a2;
                size_t v154 = &v149[-*a2];
                unint64_t v155 = (unint64_t)(v154 + 1);
                if ((uint64_t)(v154 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v156 = v148 - v153;
                if (2 * v156 > v155) {
                  unint64_t v155 = 2 * v156;
                }
                if (v156 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v157 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v157 = v155;
                }
                if (v157) {
                  unint64_t v158 = (unint64_t)operator new(v157);
                }
                else {
                  unint64_t v158 = 0;
                }
                unint64_t v159 = (char *)(v158 + v157);
                v154[v158] = 10;
                uint64_t v150 = (uint64_t)&v154[v158 + 1];
                if (v149 == (unsigned char *)v153)
                {
                  v158 += (unint64_t)v154;
                }
                else
                {
                  unint64_t v160 = &v149[~v153];
                  do
                  {
                    char v161 = *--v149;
                    (v160--)[v158] = v161;
                  }
                  while (v149 != (unsigned char *)v153);
                  unint64_t v149 = (unsigned char *)*a2;
                }
                *a2 = v158;
                a2[1] = v150;
                a2[2] = (unint64_t)v159;
                if (v149) {
                  operator delete(v149);
                }
              }
              else
              {
                unsigned char *v149 = 10;
                uint64_t v150 = (uint64_t)(v149 + 1);
              }
              a2[1] = v150;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v162 = mach_continuous_time();
                unsigned __int16 v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v163, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v146;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v151 = mach_continuous_time();
                unsigned __int16 v152 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v151), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v152, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_171;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v141;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v143 = mach_continuous_time();
              unsigned __int16 v144 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v143), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v144, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_171;
            }
          }
          return result;
        }
      }
      operator delete(v120);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v109 = mach_continuous_time();
    unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    uint64_t v112 = mach_continuous_time();
    unsigned __int16 v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v113, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_23ParseZxApSignalGpioProdMsg(unsigned __int8 *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  uint64_t v6 = (unsigned char *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_21;
    }
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    goto LABEL_21;
  }
  if (v6[2] == 84 && v6[3] == 72 && v6[4] == 32)
  {
    if (v6[8] == 32)
    {
      if (v6[9] == *a1)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
        uint64_t v10 = 1;
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
        return v10;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time mismatch\n");
        goto LABEL_9;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd status\n");
      goto LABEL_9;
    }
  }
LABEL_21:
  uint64_t v10 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    return 0;
  }
  return v10;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_24BuildZxTimeMarkProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  uint64_t v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    unsigned __int16 v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    unsigned __int16 v7 = &v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = 122;
    unsigned __int16 v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  unint64_t v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *unsigned __int16 v7 = 120;
    unsigned __int16 v18 = v7 + 1;
    goto LABEL_39;
  }
  unint64_t v19 = *a2;
  unint64_t v20 = &v7[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  unint64_t v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  unsigned __int16 v18 = &v20[v24 + 1];
  if (v7 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  size_t v26 = &v7[~v19];
  do
  {
    char v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (unsigned char *)v19);
  unsigned __int16 v7 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *unsigned __int16 v18 = 84;
    uint64_t v29 = v18 + 1;
    goto LABEL_57;
  }
  unint64_t v30 = *a2;
  unint64_t v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  uint64_t v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  size_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  unsigned __int16 v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *uint64_t v29 = 108;
    std::string::size_type v40 = v29 + 1;
    goto LABEL_75;
  }
  unint64_t v41 = *a2;
  unint64_t v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unint64_t v47 = (char *)(v46 + v45);
  v42[v46] = 108;
  std::string::size_type v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  size_t v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  uint64_t v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *std::string::size_type v40 = 77;
    std::string::size_type v51 = v40 + 1;
    goto LABEL_93;
  }
  unint64_t v52 = *a2;
  unint64_t v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  unint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 77;
  std::string::size_type v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  size_t v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  std::string::size_type v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 0;
    unint64_t v62 = v51 + 1;
    goto LABEL_111;
  }
  unint64_t v63 = *a2;
  unint64_t v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  unint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  unint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  size_t v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  std::string::size_type v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *unint64_t v62 = 0;
    char v73 = v62 + 1;
    goto LABEL_129;
  }
  unint64_t v74 = *a2;
  unint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  unint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  char v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  size_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  unint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    char v84 = v73 + 1;
    goto LABEL_147;
  }
  unint64_t v85 = *a2;
  unint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unint64_t v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  char v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  size_t v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  char v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *char v84 = 0;
    char v95 = v84 + 1;
    goto LABEL_165;
  }
  unint64_t v96 = *a2;
  unint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  unint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 0;
  char v95 = &v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = (unint64_t)v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  size_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  char v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = (unint64_t)v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = (unint64_t)v95;
  unint64_t v105 = a2[2];
  if ((unint64_t)v95 < v105)
  {
    *char v95 = 0;
    std::string::size_type v106 = v95 + 1;
    goto LABEL_183;
  }
  unint64_t v107 = *a2;
  unint64_t v108 = &v95[-*a2];
  unint64_t v109 = (unint64_t)(v108 + 1);
  if ((uint64_t)(v108 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v110 = v105 - v107;
  if (2 * v110 > v109) {
    unint64_t v109 = 2 * v110;
  }
  if (v110 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v111 = v109;
  }
  if (v111) {
    unint64_t v112 = (unint64_t)operator new(v111);
  }
  else {
    unint64_t v112 = 0;
  }
  unsigned __int16 v113 = (char *)(v112 + v111);
  v108[v112] = 0;
  std::string::size_type v106 = &v108[v112 + 1];
  if (v95 == (unsigned char *)v107)
  {
    *a2 = (unint64_t)&v108[v112];
    a2[1] = (unint64_t)v106;
    a2[2] = (unint64_t)v113;
LABEL_182:
    operator delete(v95);
    goto LABEL_183;
  }
  __int16 v114 = &v95[~v107];
  do
  {
    char v115 = *--v95;
    (v114--)[v112] = v115;
  }
  while (v95 != (unsigned char *)v107);
  char v95 = (unsigned char *)*a2;
  *a2 = v112;
  a2[1] = (unint64_t)v106;
  a2[2] = (unint64_t)v113;
  if (v95) {
    goto LABEL_182;
  }
LABEL_183:
  a2[1] = (unint64_t)v106;
  unint64_t v116 = a2[2];
  if ((unint64_t)v106 < v116)
  {
    *std::string::size_type v106 = 0;
    uint64_t v117 = (uint64_t)(v106 + 1);
    goto LABEL_201;
  }
  unint64_t v118 = *a2;
  unsigned __int16 v119 = &v106[-*a2];
  unint64_t v120 = (unint64_t)(v119 + 1);
  if ((uint64_t)(v119 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v121 = v116 - v118;
  if (2 * v121 > v120) {
    unint64_t v120 = 2 * v121;
  }
  if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v122 = v120;
  }
  if (v122) {
    unint64_t v123 = (unint64_t)operator new(v122);
  }
  else {
    unint64_t v123 = 0;
  }
  unint64_t v124 = (char *)(v123 + v122);
  v119[v123] = 0;
  uint64_t v117 = (uint64_t)&v119[v123 + 1];
  if (v106 == (unsigned char *)v118)
  {
    *a2 = (unint64_t)&v119[v123];
    a2[1] = v117;
    a2[2] = (unint64_t)v124;
LABEL_200:
    operator delete(v106);
    goto LABEL_201;
  }
  size_t v125 = &v106[~v118];
  do
  {
    char v126 = *--v106;
    (v125--)[v123] = v126;
  }
  while (v106 != (unsigned char *)v118);
  std::string::size_type v106 = (unsigned char *)*a2;
  *a2 = v123;
  a2[1] = v117;
  a2[2] = (unint64_t)v124;
  if (v106) {
    goto LABEL_200;
  }
LABEL_201:
  a2[1] = v117;
  unint64_t v184 = 0;
  uint64_t v185 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v117, v117 - *a2);
  unint64_t v127 = ~*a2 + a2[1];
  if (v127 < 8 || v127 > 0x7FF || v184 - (unsigned char *)__p <= v127)
  {
    if (__p)
    {
      unint64_t v184 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v133 = 0;
    uint64_t v134 = 8;
    int v135 = 8;
    do
    {
      v133 += *((unsigned __int8 *)__p + v134);
      uint64_t v134 = ++v135;
    }
    while (v127 >= v135);
    unint64_t v184 = __p;
    operator delete(__p);
    if (v133 != -1)
    {
      unint64_t v138 = (unsigned char *)a2[1];
      unint64_t v137 = a2[2];
      if ((unint64_t)v138 >= v137)
      {
        unint64_t v140 = *a2;
        size_t v141 = &v138[-*a2];
        unint64_t v142 = (unint64_t)(v141 + 1);
        if ((uint64_t)(v141 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v143 = v137 - v140;
        if (2 * v143 > v142) {
          unint64_t v142 = 2 * v143;
        }
        if (v143 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v144 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v144 = v142;
        }
        if (v144) {
          unint64_t v145 = (unint64_t)operator new(v144);
        }
        else {
          unint64_t v145 = 0;
        }
        unint64_t v146 = (char *)(v145 + v144);
        v141[v145] = v133;
        unint64_t v139 = &v141[v145 + 1];
        if (v138 == (unsigned char *)v140)
        {
          v145 += (unint64_t)v141;
        }
        else
        {
          char v147 = &v138[~v140];
          do
          {
            char v148 = *--v138;
            (v147--)[v145] = v148;
          }
          while (v138 != (unsigned char *)v140);
          unint64_t v138 = (unsigned char *)*a2;
        }
        *a2 = v145;
        a2[1] = (unint64_t)v139;
        a2[2] = (unint64_t)v146;
        if (v138) {
          operator delete(v138);
        }
      }
      else
      {
        *unint64_t v138 = v133;
        unint64_t v139 = v138 + 1;
      }
      a2[1] = (unint64_t)v139;
      unint64_t v149 = a2[2];
      if ((unint64_t)v139 < v149)
      {
        unsigned char *v139 = HIBYTE(v133);
        uint64_t v150 = (uint64_t)(v139 + 1);
        goto LABEL_250;
      }
      unint64_t v151 = *a2;
      unsigned __int16 v152 = &v139[-*a2];
      unint64_t v153 = (unint64_t)(v152 + 1);
      if ((uint64_t)(v152 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v154 = v149 - v151;
      if (2 * v154 > v153) {
        unint64_t v153 = 2 * v154;
      }
      if (v154 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v155 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v155 = v153;
      }
      if (v155) {
        unint64_t v156 = (unint64_t)operator new(v155);
      }
      else {
        unint64_t v156 = 0;
      }
      size_t v157 = (char *)(v156 + v155);
      v152[v156] = HIBYTE(v133);
      uint64_t v150 = (uint64_t)&v152[v156 + 1];
      if (v139 == (unsigned char *)v151)
      {
        *a2 = (unint64_t)&v152[v156];
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
      }
      else
      {
        unint64_t v158 = &v139[~v151];
        do
        {
          char v159 = *--v139;
          (v158--)[v156] = v159;
        }
        while (v139 != (unsigned char *)v151);
        unint64_t v139 = (unsigned char *)*a2;
        *a2 = v156;
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
        if (!v139)
        {
LABEL_250:
          a2[1] = v150;
          unint64_t v160 = (unsigned char *)*a2;
          unint64_t v161 = v150 - *a2;
          if (v161 < 0x10000)
          {
            __int16 v164 = v161 - 8;
            v160[5] = v164;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v164);
            uint64_t v165 = (unsigned char *)*a2;
            v136.i32[0] = *(_DWORD *)(*a2 + 2);
            char v166 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v136)) + *(unsigned char *)(*a2 + 6);
            if (v166)
            {
              v165[7] = v166;
              uint64_t v168 = (unsigned char *)a2[1];
              unint64_t v167 = a2[2];
              if ((unint64_t)v168 >= v167)
              {
                unint64_t v172 = *a2;
                unint64_t v173 = &v168[-*a2];
                unint64_t v174 = (unint64_t)(v173 + 1);
                if ((uint64_t)(v173 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v175 = v167 - v172;
                if (2 * v175 > v174) {
                  unint64_t v174 = 2 * v175;
                }
                if (v175 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v176 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v176 = v174;
                }
                if (v176) {
                  unint64_t v177 = (unint64_t)operator new(v176);
                }
                else {
                  unint64_t v177 = 0;
                }
                unint64_t v178 = (char *)(v177 + v176);
                v173[v177] = 10;
                uint64_t v169 = (uint64_t)&v173[v177 + 1];
                if (v168 == (unsigned char *)v172)
                {
                  v177 += (unint64_t)v173;
                }
                else
                {
                  size_t v179 = &v168[~v172];
                  do
                  {
                    char v180 = *--v168;
                    (v179--)[v177] = v180;
                  }
                  while (v168 != (unsigned char *)v172);
                  uint64_t v168 = (unsigned char *)*a2;
                }
                *a2 = v177;
                a2[1] = v169;
                a2[2] = (unint64_t)v178;
                if (v168) {
                  operator delete(v168);
                }
              }
              else
              {
                unsigned char *v168 = 10;
                uint64_t v169 = (uint64_t)(v168 + 1);
              }
              a2[1] = v169;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v181 = mach_continuous_time();
                unsigned __int16 v182 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v181), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v182, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v165;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v170 = mach_continuous_time();
                unsigned __int16 v171 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v170), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v171, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v160;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v162 = mach_continuous_time();
              unsigned __int16 v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimemarkRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v163, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_207;
            }
          }
          return result;
        }
      }
      operator delete(v139);
      goto LABEL_250;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v128 = mach_continuous_time();
    unsigned __int16 v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v129, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_207:
    bzero(__str, 0x410uLL);
    uint64_t v131 = mach_continuous_time();
    unsigned __int16 v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v132, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_25ParseZxTimeMarkProdMsg(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned __int16 *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  uint64_t v9 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_24;
    }
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n");
LABEL_23:
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    goto LABEL_24;
  }
  if (*(unsigned char *)(v9 + 2) != 84
    || *(unsigned char *)(v9 + 3) != 76
    || (int v11 = *(unsigned __int8 *)(v9 + 4), v11 != 77) && v11 != 32)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_24;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid zx resp\n");
    goto LABEL_23;
  }
  int v12 = *(unsigned __int8 *)(v9 + 8);
  if (v12 != 32 && v12 != 83)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark status\n");
      goto LABEL_23;
    }
LABEL_24:
    uint64_t v17 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      return 0;
    }
    return v17;
  }
  if (!a3 || !a4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TTick\n");
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  *a3 = *(_DWORD *)(v9 + 9);
  *a4 = (4 * *(unsigned __int8 *)(v9 + 13)) | (*(unsigned __int8 *)(v9 + 14) << 10);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TTick,%u,TTickMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "Ga23_25ParseZxTimeMarkProdMsg", *a3, *a4);
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v15 = mach_continuous_time();
  unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
  uint64_t v17 = 1;
  LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
  return v17;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_24BuildZxStopProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  uint64_t v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    uint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unsigned __int16 v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    uint64_t v7 = &v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = 122;
    uint64_t v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  unint64_t v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *uint64_t v7 = 120;
    uint64_t v18 = v7 + 1;
    goto LABEL_39;
  }
  unint64_t v19 = *a2;
  unint64_t v20 = &v7[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  unint64_t v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  uint64_t v18 = &v20[v24 + 1];
  if (v7 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  size_t v26 = &v7[~v19];
  do
  {
    char v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (unsigned char *)v19);
  uint64_t v7 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *uint64_t v18 = 84;
    uint64_t v29 = v18 + 1;
    goto LABEL_57;
  }
  unint64_t v30 = *a2;
  unint64_t v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  uint64_t v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  size_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  uint64_t v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *uint64_t v29 = 102;
    std::string::size_type v40 = v29 + 1;
    goto LABEL_75;
  }
  unint64_t v41 = *a2;
  unint64_t v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unint64_t v47 = (char *)(v46 + v45);
  v42[v46] = 102;
  std::string::size_type v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  size_t v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  uint64_t v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *std::string::size_type v40 = 32;
    std::string::size_type v51 = v40 + 1;
    goto LABEL_93;
  }
  unint64_t v52 = *a2;
  unint64_t v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  unint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 32;
  std::string::size_type v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  size_t v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  std::string::size_type v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 0;
    unint64_t v62 = v51 + 1;
    goto LABEL_111;
  }
  unint64_t v63 = *a2;
  unint64_t v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  unint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  unint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  size_t v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  std::string::size_type v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *unint64_t v62 = 0;
    char v73 = v62 + 1;
    goto LABEL_129;
  }
  unint64_t v74 = *a2;
  unint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  unint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  char v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  size_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  unint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    char v84 = v73 + 1;
    goto LABEL_147;
  }
  unint64_t v85 = *a2;
  unint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unint64_t v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  char v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  size_t v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  char v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *char v84 = 1;
    char v95 = v84 + 1;
    goto LABEL_165;
  }
  unint64_t v96 = *a2;
  unint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  unint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 1;
  char v95 = &v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = (unint64_t)v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  size_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  char v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = (unint64_t)v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = (unint64_t)v95;
  unint64_t v105 = a2[2];
  if ((unint64_t)v95 < v105)
  {
    *char v95 = 0;
    std::string::size_type v106 = v95 + 1;
    goto LABEL_183;
  }
  unint64_t v107 = *a2;
  unint64_t v108 = &v95[-*a2];
  unint64_t v109 = (unint64_t)(v108 + 1);
  if ((uint64_t)(v108 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v110 = v105 - v107;
  if (2 * v110 > v109) {
    unint64_t v109 = 2 * v110;
  }
  if (v110 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v111 = v109;
  }
  if (v111) {
    unint64_t v112 = (unint64_t)operator new(v111);
  }
  else {
    unint64_t v112 = 0;
  }
  unsigned __int16 v113 = (char *)(v112 + v111);
  v108[v112] = 0;
  std::string::size_type v106 = &v108[v112 + 1];
  if (v95 == (unsigned char *)v107)
  {
    *a2 = (unint64_t)&v108[v112];
    a2[1] = (unint64_t)v106;
    a2[2] = (unint64_t)v113;
LABEL_182:
    operator delete(v95);
    goto LABEL_183;
  }
  __int16 v114 = &v95[~v107];
  do
  {
    char v115 = *--v95;
    (v114--)[v112] = v115;
  }
  while (v95 != (unsigned char *)v107);
  char v95 = (unsigned char *)*a2;
  *a2 = v112;
  a2[1] = (unint64_t)v106;
  a2[2] = (unint64_t)v113;
  if (v95) {
    goto LABEL_182;
  }
LABEL_183:
  a2[1] = (unint64_t)v106;
  unint64_t v116 = a2[2];
  if ((unint64_t)v106 < v116)
  {
    *std::string::size_type v106 = 0;
    uint64_t v117 = (uint64_t)(v106 + 1);
    goto LABEL_201;
  }
  unint64_t v118 = *a2;
  unsigned __int16 v119 = &v106[-*a2];
  unint64_t v120 = (unint64_t)(v119 + 1);
  if ((uint64_t)(v119 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v121 = v116 - v118;
  if (2 * v121 > v120) {
    unint64_t v120 = 2 * v121;
  }
  if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v122 = v120;
  }
  if (v122) {
    unint64_t v123 = (unint64_t)operator new(v122);
  }
  else {
    unint64_t v123 = 0;
  }
  unint64_t v124 = (char *)(v123 + v122);
  v119[v123] = 0;
  uint64_t v117 = (uint64_t)&v119[v123 + 1];
  if (v106 == (unsigned char *)v118)
  {
    *a2 = (unint64_t)&v119[v123];
    a2[1] = v117;
    a2[2] = (unint64_t)v124;
LABEL_200:
    operator delete(v106);
    goto LABEL_201;
  }
  size_t v125 = &v106[~v118];
  do
  {
    char v126 = *--v106;
    (v125--)[v123] = v126;
  }
  while (v106 != (unsigned char *)v118);
  std::string::size_type v106 = (unsigned char *)*a2;
  *a2 = v123;
  a2[1] = v117;
  a2[2] = (unint64_t)v124;
  if (v106) {
    goto LABEL_200;
  }
LABEL_201:
  a2[1] = v117;
  unint64_t v184 = 0;
  uint64_t v185 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v117, v117 - *a2);
  unint64_t v127 = ~*a2 + a2[1];
  if (v127 < 8 || v127 > 0x7FF || v184 - (unsigned char *)__p <= v127)
  {
    if (__p)
    {
      unint64_t v184 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v133 = 0;
    uint64_t v134 = 8;
    int v135 = 8;
    do
    {
      v133 += *((unsigned __int8 *)__p + v134);
      uint64_t v134 = ++v135;
    }
    while (v127 >= v135);
    unint64_t v184 = __p;
    operator delete(__p);
    if (v133 != -1)
    {
      unint64_t v138 = (unsigned char *)a2[1];
      unint64_t v137 = a2[2];
      if ((unint64_t)v138 >= v137)
      {
        unint64_t v140 = *a2;
        size_t v141 = &v138[-*a2];
        unint64_t v142 = (unint64_t)(v141 + 1);
        if ((uint64_t)(v141 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v143 = v137 - v140;
        if (2 * v143 > v142) {
          unint64_t v142 = 2 * v143;
        }
        if (v143 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v144 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v144 = v142;
        }
        if (v144) {
          unint64_t v145 = (unint64_t)operator new(v144);
        }
        else {
          unint64_t v145 = 0;
        }
        unint64_t v146 = (char *)(v145 + v144);
        v141[v145] = v133;
        unint64_t v139 = &v141[v145 + 1];
        if (v138 == (unsigned char *)v140)
        {
          v145 += (unint64_t)v141;
        }
        else
        {
          char v147 = &v138[~v140];
          do
          {
            char v148 = *--v138;
            (v147--)[v145] = v148;
          }
          while (v138 != (unsigned char *)v140);
          unint64_t v138 = (unsigned char *)*a2;
        }
        *a2 = v145;
        a2[1] = (unint64_t)v139;
        a2[2] = (unint64_t)v146;
        if (v138) {
          operator delete(v138);
        }
      }
      else
      {
        *unint64_t v138 = v133;
        unint64_t v139 = v138 + 1;
      }
      a2[1] = (unint64_t)v139;
      unint64_t v149 = a2[2];
      if ((unint64_t)v139 < v149)
      {
        unsigned char *v139 = HIBYTE(v133);
        uint64_t v150 = (uint64_t)(v139 + 1);
        goto LABEL_250;
      }
      unint64_t v151 = *a2;
      unsigned __int16 v152 = &v139[-*a2];
      unint64_t v153 = (unint64_t)(v152 + 1);
      if ((uint64_t)(v152 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v154 = v149 - v151;
      if (2 * v154 > v153) {
        unint64_t v153 = 2 * v154;
      }
      if (v154 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v155 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v155 = v153;
      }
      if (v155) {
        unint64_t v156 = (unint64_t)operator new(v155);
      }
      else {
        unint64_t v156 = 0;
      }
      size_t v157 = (char *)(v156 + v155);
      v152[v156] = HIBYTE(v133);
      uint64_t v150 = (uint64_t)&v152[v156 + 1];
      if (v139 == (unsigned char *)v151)
      {
        *a2 = (unint64_t)&v152[v156];
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
      }
      else
      {
        unint64_t v158 = &v139[~v151];
        do
        {
          char v159 = *--v139;
          (v158--)[v156] = v159;
        }
        while (v139 != (unsigned char *)v151);
        unint64_t v139 = (unsigned char *)*a2;
        *a2 = v156;
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
        if (!v139)
        {
LABEL_250:
          a2[1] = v150;
          unint64_t v160 = (unsigned char *)*a2;
          unint64_t v161 = v150 - *a2;
          if (v161 < 0x10000)
          {
            __int16 v164 = v161 - 8;
            v160[5] = v164;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v164);
            uint64_t v165 = (unsigned char *)*a2;
            v136.i32[0] = *(_DWORD *)(*a2 + 2);
            char v166 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v136)) + *(unsigned char *)(*a2 + 6);
            if (v166)
            {
              v165[7] = v166;
              uint64_t v168 = (unsigned char *)a2[1];
              unint64_t v167 = a2[2];
              if ((unint64_t)v168 >= v167)
              {
                unint64_t v172 = *a2;
                unint64_t v173 = &v168[-*a2];
                unint64_t v174 = (unint64_t)(v173 + 1);
                if ((uint64_t)(v173 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v175 = v167 - v172;
                if (2 * v175 > v174) {
                  unint64_t v174 = 2 * v175;
                }
                if (v175 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v176 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v176 = v174;
                }
                if (v176) {
                  unint64_t v177 = (unint64_t)operator new(v176);
                }
                else {
                  unint64_t v177 = 0;
                }
                unint64_t v178 = (char *)(v177 + v176);
                v173[v177] = 10;
                uint64_t v169 = (uint64_t)&v173[v177 + 1];
                if (v168 == (unsigned char *)v172)
                {
                  v177 += (unint64_t)v173;
                }
                else
                {
                  size_t v179 = &v168[~v172];
                  do
                  {
                    char v180 = *--v168;
                    (v179--)[v177] = v180;
                  }
                  while (v168 != (unsigned char *)v172);
                  uint64_t v168 = (unsigned char *)*a2;
                }
                *a2 = v177;
                a2[1] = v169;
                a2[2] = (unint64_t)v178;
                if (v168) {
                  operator delete(v168);
                }
              }
              else
              {
                unsigned char *v168 = 10;
                uint64_t v169 = (uint64_t)(v168 + 1);
              }
              a2[1] = v169;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v181 = mach_continuous_time();
                unsigned __int16 v182 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v181), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v182, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v165;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v170 = mach_continuous_time();
                unsigned __int16 v171 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopPod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v170), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v171, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v160;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v162 = mach_continuous_time();
              unsigned __int16 v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v163, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_207;
            }
          }
          return result;
        }
      }
      operator delete(v139);
      goto LABEL_250;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v128 = mach_continuous_time();
    unsigned __int16 v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 781);
    LbsOsaTrace_WriteLog(0x18u, __str, v129, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_207:
    bzero(__str, 0x410uLL);
    uint64_t v131 = mach_continuous_time();
    unsigned __int16 v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v132, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_33CalcIntegrationTime(double a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga23_33CalcIntegrationTime");
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      uint64_t v7 = 5 * (a1 / 0x3E8) + 1985;
      break;
    case 5:
    case 7:
      unsigned int v8 = a1 / 0x3E8;
      int v9 = 10;
      goto LABEL_7;
    case 8:
    case 9:
      unsigned int v8 = a1 / 0x3E8;
      int v9 = 340;
LABEL_7:
      uint64_t v7 = v8 * v9 + 1985;
      break;
    default:
      uint64_t v7 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_33CalcIntegrationTime", 770, a3);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
        uint64_t v7 = 0;
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga23_33CalcIntegrationTime");
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
  }
  return v7;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_34BuildZxProdIndProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  unsigned __int16 v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    int v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unsigned __int16 v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    uint64_t v7 = &v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      unsigned __int16 v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unsigned __int16 v6 = 122;
    uint64_t v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  unint64_t v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *uint64_t v7 = 120;
    uint64_t v18 = v7 + 1;
    goto LABEL_39;
  }
  unint64_t v19 = *a2;
  unint64_t v20 = &v7[-*a2];
  unint64_t v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v22 = v17 - v19;
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v23 = v21;
  }
  if (v23) {
    unint64_t v24 = (unint64_t)operator new(v23);
  }
  else {
    unint64_t v24 = 0;
  }
  unint64_t v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  uint64_t v18 = &v20[v24 + 1];
  if (v7 == (unsigned char *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  size_t v26 = &v7[~v19];
  do
  {
    char v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (unsigned char *)v19);
  uint64_t v7 = (unsigned char *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v18;
  unint64_t v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *uint64_t v18 = 84;
    uint64_t v29 = v18 + 1;
    goto LABEL_57;
  }
  unint64_t v30 = *a2;
  unint64_t v31 = &v18[-*a2];
  unint64_t v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = v28 - v30;
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    unint64_t v35 = (unint64_t)operator new(v34);
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  uint64_t v29 = &v31[v35 + 1];
  if (v18 == (unsigned char *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  size_t v37 = &v18[~v30];
  do
  {
    char v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (unsigned char *)v30);
  uint64_t v18 = (unsigned char *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v29;
  unint64_t v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *uint64_t v29 = 98;
    std::string::size_type v40 = v29 + 1;
    goto LABEL_75;
  }
  unint64_t v41 = *a2;
  unint64_t v42 = &v29[-*a2];
  unint64_t v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = v39 - v41;
  if (2 * v44 > v43) {
    unint64_t v43 = 2 * v44;
  }
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v43;
  }
  if (v45) {
    unint64_t v46 = (unint64_t)operator new(v45);
  }
  else {
    unint64_t v46 = 0;
  }
  unint64_t v47 = (char *)(v46 + v45);
  v42[v46] = 98;
  std::string::size_type v40 = &v42[v46 + 1];
  if (v29 == (unsigned char *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  size_t v48 = &v29[~v41];
  do
  {
    char v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (unsigned char *)v41);
  uint64_t v29 = (unsigned char *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v40;
  unint64_t v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *std::string::size_type v40 = 32;
    std::string::size_type v51 = v40 + 1;
    goto LABEL_93;
  }
  unint64_t v52 = *a2;
  unint64_t v53 = &v40[-*a2];
  unint64_t v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v55 = v50 - v52;
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v56 = v54;
  }
  if (v56) {
    unint64_t v57 = (unint64_t)operator new(v56);
  }
  else {
    unint64_t v57 = 0;
  }
  unint64_t v58 = (char *)(v57 + v56);
  v53[v57] = 32;
  std::string::size_type v51 = &v53[v57 + 1];
  if (v40 == (unsigned char *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  size_t v59 = &v40[~v52];
  do
  {
    char v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (unsigned char *)v52);
  std::string::size_type v40 = (unsigned char *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v51;
  unint64_t v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    unsigned char *v51 = 0;
    unint64_t v62 = v51 + 1;
    goto LABEL_111;
  }
  unint64_t v63 = *a2;
  unint64_t v64 = &v51[-*a2];
  unint64_t v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v66 = v61 - v63;
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v67 = v65;
  }
  if (v67) {
    unint64_t v68 = (unint64_t)operator new(v67);
  }
  else {
    unint64_t v68 = 0;
  }
  unint64_t v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  unint64_t v62 = &v64[v68 + 1];
  if (v51 == (unsigned char *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  size_t v70 = &v51[~v63];
  do
  {
    char v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (unsigned char *)v63);
  std::string::size_type v51 = (unsigned char *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v62;
  unint64_t v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *unint64_t v62 = 0;
    char v73 = v62 + 1;
    goto LABEL_129;
  }
  unint64_t v74 = *a2;
  unint64_t v75 = &v62[-*a2];
  unint64_t v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v77 = v72 - v74;
  if (2 * v77 > v76) {
    unint64_t v76 = 2 * v77;
  }
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v78 = v76;
  }
  if (v78) {
    unint64_t v79 = (unint64_t)operator new(v78);
  }
  else {
    unint64_t v79 = 0;
  }
  unint64_t v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  char v73 = &v75[v79 + 1];
  if (v62 == (unsigned char *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  size_t v81 = &v62[~v74];
  do
  {
    char v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (unsigned char *)v74);
  unint64_t v62 = (unsigned char *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v73;
  unint64_t v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    unsigned char *v73 = 0;
    char v84 = v73 + 1;
    goto LABEL_147;
  }
  unint64_t v85 = *a2;
  unint64_t v86 = &v73[-*a2];
  unint64_t v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v88 = v83 - v85;
  if (2 * v88 > v87) {
    unint64_t v87 = 2 * v88;
  }
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v89 = v87;
  }
  if (v89) {
    unint64_t v90 = (unint64_t)operator new(v89);
  }
  else {
    unint64_t v90 = 0;
  }
  unint64_t v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  char v84 = &v86[v90 + 1];
  if (v73 == (unsigned char *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  size_t v92 = &v73[~v85];
  do
  {
    char v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (unsigned char *)v85);
  char v73 = (unsigned char *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = (unint64_t)v84;
  unint64_t v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *char v84 = 1;
    uint64_t v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  unint64_t v96 = *a2;
  unint64_t v97 = &v84[-*a2];
  unint64_t v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v99 = v94 - v96;
  if (2 * v99 > v98) {
    unint64_t v98 = 2 * v99;
  }
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v100 = v98;
  }
  if (v100) {
    unint64_t v101 = (unint64_t)operator new(v100);
  }
  else {
    unint64_t v101 = 0;
  }
  unint64_t v102 = (char *)(v101 + v100);
  v97[v101] = 1;
  uint64_t v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (unsigned char *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  size_t v103 = &v84[~v96];
  do
  {
    char v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (unsigned char *)v96);
  char v84 = (unsigned char *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84) {
    goto LABEL_164;
  }
LABEL_165:
  a2[1] = v95;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  std::string __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  unint64_t v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v162 - (unsigned char *)__p <= v105)
  {
    if (__p)
    {
      uint64_t v162 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __int16 v111 = 0;
    uint64_t v112 = 8;
    int v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      uint64_t v112 = ++v113;
    }
    while (v105 >= v113);
    uint64_t v162 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      unint64_t v116 = (unsigned char *)a2[1];
      unint64_t v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        unint64_t v118 = *a2;
        unsigned __int16 v119 = &v116[-*a2];
        unint64_t v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v121 = v115 - v118;
        if (2 * v121 > v120) {
          unint64_t v120 = 2 * v121;
        }
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v122 = v120;
        }
        if (v122) {
          unint64_t v123 = (unint64_t)operator new(v122);
        }
        else {
          unint64_t v123 = 0;
        }
        unint64_t v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        uint64_t v117 = &v119[v123 + 1];
        if (v116 == (unsigned char *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          size_t v125 = &v116[~v118];
          do
          {
            char v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (unsigned char *)v118);
          unint64_t v116 = (unsigned char *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        unsigned char *v116 = v111;
        uint64_t v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      unint64_t v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        unsigned char *v117 = HIBYTE(v111);
        uint64_t v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      unint64_t v129 = *a2;
      unint64_t v130 = &v117[-*a2];
      unint64_t v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v132 = v127 - v129;
      if (2 * v132 > v131) {
        unint64_t v131 = 2 * v132;
      }
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v133 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v133 = v131;
      }
      if (v133) {
        unint64_t v134 = (unint64_t)operator new(v133);
      }
      else {
        unint64_t v134 = 0;
      }
      int v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      uint64_t v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (unsigned char *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        uint8x8_t v136 = &v117[~v129];
        do
        {
          char v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (unsigned char *)v129);
        uint64_t v117 = (unsigned char *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          unint64_t v138 = (unsigned char *)*a2;
          unint64_t v139 = v128 - *a2;
          if (v139 < 0x10000)
          {
            __int16 v142 = v139 - 8;
            v138[5] = v142;
            *(unsigned char *)(*a2 + 6) = HIBYTE(v142);
            unint64_t v143 = (unsigned char *)*a2;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            char v144 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(unsigned char *)(*a2 + 6);
            if (v144)
            {
              v143[7] = v144;
              unint64_t v146 = (unsigned char *)a2[1];
              unint64_t v145 = a2[2];
              if ((unint64_t)v146 >= v145)
              {
                unint64_t v150 = *a2;
                unint64_t v151 = &v146[-*a2];
                unint64_t v152 = (unint64_t)(v151 + 1);
                if ((uint64_t)(v151 + 1) < 0) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v153 = v145 - v150;
                if (2 * v153 > v152) {
                  unint64_t v152 = 2 * v153;
                }
                if (v153 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v154 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v154 = v152;
                }
                if (v154) {
                  unint64_t v155 = (unint64_t)operator new(v154);
                }
                else {
                  unint64_t v155 = 0;
                }
                unint64_t v156 = (char *)(v155 + v154);
                v151[v155] = 10;
                uint64_t v147 = (uint64_t)&v151[v155 + 1];
                if (v146 == (unsigned char *)v150)
                {
                  v155 += (unint64_t)v151;
                }
                else
                {
                  size_t v157 = &v146[~v150];
                  do
                  {
                    char v158 = *--v146;
                    (v157--)[v155] = v158;
                  }
                  while (v146 != (unsigned char *)v150);
                  unint64_t v146 = (unsigned char *)*a2;
                }
                *a2 = v155;
                a2[1] = v147;
                a2[2] = (unint64_t)v156;
                if (v146) {
                  operator delete(v146);
                }
              }
              else
              {
                *unint64_t v146 = 10;
                uint64_t v147 = (uint64_t)(v146 + 1);
              }
              a2[1] = v147;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v159 = mach_continuous_time();
                unsigned __int16 v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v160, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v143;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v148 = mach_continuous_time();
                unsigned __int16 v149 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v149, 0, 1);
              }
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (result) {
                goto LABEL_171;
              }
            }
          }
          else
          {
            a2[1] = (unint64_t)v138;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v140 = mach_continuous_time();
              unsigned __int16 v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v141, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (result) {
              goto LABEL_171;
            }
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v106 = mach_continuous_time();
    unsigned __int16 v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    uint64_t v109 = mach_continuous_time();
    unsigned __int16 v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_35ParseLtlRespMsg(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  unint64_t v5 = (unsigned char *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      goto LABEL_10;
    }
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Resp\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    goto LABEL_10;
  }
  if (v5[2] != 88 || v5[3] != 86 || v5[4] != 77 || v5[8] == 32)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    uint64_t v7 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    return v7;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Resp status\n");
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v7 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    return 0;
  }
  return v7;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22B88FE4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    unsigned __int16 v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    unsigned __int16 v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        unsigned __int16 v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  MEMORY[0x230F4E460](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x230F4E470](v13);
  return a1;
}

void sub_22B890120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    MEMORY[0x230F4E470](&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x22B8900E4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_22B890344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t GM_Get_Best_ASSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  size_t v7 = (_WORD *)(a1 + 36 * v4 + 8);
  size_t v8 = (unsigned char *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 0x308) == 0x208)
      {
        if (*(v8 - 8))
        {
          if (*v8) {
            int v11 = 70;
          }
          else {
            int v11 = 64;
          }
          v10 += v11;
          if (v8[3]) {
            v10 += 128;
          }
        }
        if ((int)v10 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v10;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

void *SV_Gen_Meas(int *a1, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int64_t v12 = (int *)__dst;
  unint64_t v13 = a1;
  uint64_t v341 = *MEMORY[0x263EF8340];
  uint64_t v14 = __dst + 4420;
  uint64_t v15 = (unsigned char *)(a5 + 7456);
  uint64_t v326 = 0;
  int v325 = 0;
  __int16 v303 = __dst + 4420;
  if (!*(unsigned char *)(a5 + 7456))
  {
    *(void *)&long long __dsta = 0;
    int UTC_Cor = API_Get_UTC_Cor(1, (double *)&__dsta);
    double v17 = -0.5;
    if (*(double *)&__dsta > 0.0) {
      double v17 = 0.5;
    }
    double v18 = *(double *)&__dsta + v17;
    if (v18 <= 2147483650.0)
    {
      if (v18 >= -2147483650.0) {
        int v19 = (int)v18;
      }
      else {
        LOBYTE(v19) = 0;
      }
    }
    else
    {
      LOBYTE(v19) = -1;
    }
    int64_t v12 = (int *)__dst;
    if (UTC_Cor)
    {
      int v20 = (char)v15[1];
      int v21 = (char)v19 - v20;
      if ((char)v19 != v20)
      {
        double v22 = (double)v21 * 1023000.0;
        double v23 = -0.5;
        if (v22 > 0.0) {
          double v23 = 0.5;
        }
        double v24 = v22 + v23;
        char v309 = v19;
        if (v24 <= 2147483650.0)
        {
          if (v24 >= -2147483650.0) {
            uint64_t v25 = (int)v24;
          }
          else {
            uint64_t v25 = 0x80000000;
          }
        }
        else
        {
          uint64_t v25 = 0x7FFFFFFFLL;
        }
        uint64_t v26 = a5 + 32;
        for (uint64_t i = 2722; i != 4450; i += 36)
        {
          if (*(unsigned char *)(a5 + i - 2) == 2 && (*(_DWORD *)v26 || *(_DWORD *)(v26 + 4) || *(_WORD *)(v26 + 8)))
          {
            Inc_CA_Chips(v25, (int *)(v26 + 4), (int *)v26);
            EvLog_v("SV_Gen_Meas: Adj GLO ZC&CP  Con %d  SV %2d  dUTC %3d  Chip_Inc %6d", *(unsigned __int8 *)(a5 + i - 2), *(unsigned __int8 *)(a5 + i), v21, (int)v25 / 1000);
            int64_t v12 = (int *)__dst;
          }
          v26 += 56;
        }
        v15[1] = v309;
        unint64_t v13 = a1;
        uint64_t v14 = v303;
      }
      unsigned char *v15 = 1;
    }
  }
  int v307 = *(_DWORD *)a5;
  int v299 = *(_DWORD *)(a5 + 4);
  unint64_t v28 = v12;
  memcpy(v12, (const void *)(a5 + 2720), 0x6C0uLL);
  uint64_t v286 = (uint64_t)(v28 + 432);
  memcpy(v28 + 432, (const void *)(a5 + 32), 0xA80uLL);
  uint64_t v29 = 0;
  *uint64_t v14 = *v15;
  v28[1104] = *(_DWORD *)(a5 + 17);
  memset(v340, 0, 48);
  unint64_t v30 = v28;
  do
  {
    int v31 = *v30;
    if (Is_Legal(*v30)) {
      BOOL v34 = v31 == 3;
    }
    else {
      BOOL v34 = 0;
    }
    if (!v34 || (v30[2] & 8) == 0) {
      goto LABEL_45;
    }
    LOBYTE(v32) = *((unsigned char *)v30 + 4);
    LOBYTE(v33) = *((unsigned char *)v30 + 18);
    double v35 = (double)v32 + (double)v33 * 0.0625;
    int v36 = BYTE2(v31) - 1;
    size_t v37 = &v13[14 * v36];
    char v38 = v37 + 64;
    int v39 = *(_DWORD *)a5;
    std::string::size_type v40 = v37 + 75;
    int v41 = v37[75];
    if (v41) {
      BOOL v42 = *(_DWORD *)a5 - v41 < 60001;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42)
    {
      *(_OWORD *)((char *)v38 + 40) = 0u;
      *(_OWORD *)((char *)v38 + 24) = 0u;
      *(_OWORD *)((char *)v38 + 8) = 0u;
      unint64_t v44 = &v13[14 * v36 + 74];
LABEL_41:
      *std::string::size_type v40 = v39;
      *(double *)char v38 = v35;
      LODWORD(v45) = 1;
      int *v44 = 1;
      size_t v46 = 8;
      size_t v47 = 32;
      goto LABEL_42;
    }
    unint64_t v44 = &v13[14 * v36 + 74];
    uint64_t v43 = *v44;
    if (v43 >= 6)
    {
      *(_OWORD *)((char *)v38 + 40) = 0u;
      *(_OWORD *)((char *)v38 + 24) = 0u;
      *(_OWORD *)((char *)v38 + 8) = 0u;
      goto LABEL_41;
    }
    *std::string::size_type v40 = v39;
    if (v43 == 5)
    {
      long long v50 = *(_OWORD *)((char *)v38 + 24);
      *char v38 = *(_OWORD *)((char *)v38 + 8);
      v38[1] = v50;
      *((double *)v38 + 4) = v35;
      size_t v46 = 40;
    }
    else
    {
      *((double *)v38 + v43) = v35;
      uint64_t v45 = v43 + 1;
      int *v44 = v43 + 1;
      size_t v46 = 8 * (v43 + 1);
      if (v43 < 4)
      {
        size_t v47 = 40 - 8 * v45;
        goto LABEL_42;
      }
    }
    size_t v47 = 0;
    LODWORD(v45) = 5;
LABEL_42:
    bzero((char *)&__dsta + v46, v47);
    memcpy(&__dsta, v38, v46);
    VecMedian8((double *)&__dsta, v45);
    unint64_t v13 = a1;
    *(void *)&a1[14 * v36 + 76] = v48;
    int v49 = *((unsigned __int8 *)v30 + 2) - 1;
    if (!a1[14 * v49 + 74] || *(double *)&a1[14 * v49 + 76] < 14.0)
    {
      *((_WORD *)v30 + 4) &= ~8u;
      v340[v29] = 1;
    }
LABEL_45:
    ++v29;
    v30 += 9;
  }
  while (v29 != 48);
  uint64_t v51 = 0;
  unint64_t v52 = __dst + 8;
  do
  {
    int v53 = *((_DWORD *)v52 - 2);
    if (Is_Legal(v53)) {
      BOOL v54 = v53 == 4;
    }
    else {
      BOOL v54 = 0;
    }
    if (v54)
    {
      BOOL v55 = *(_DWORD *)a6 && BYTE2(v53) - 1 > 4;
      if (!v55 && (*v52 & 8) != 0)
      {
        *v52 &= ~8u;
        v340[v51] = 1;
      }
    }
    ++v51;
    v52 += 18;
  }
  while (v51 != 48);
  uint64_t v56 = 0;
  unsigned __int8 v57 = 0;
  unint64_t v58 = __dst;
  do
  {
    size_t v59 = v58;
    if (Is_Legal(*(_DWORD *)&v58[v56]))
    {
      unint64_t v58 = v59;
      if ((*(_WORD *)&v59[v56 + 8] & 8) != 0 && v59[v56 + 4] > v57) {
        unsigned __int8 v57 = v59[v56 + 4];
      }
    }
    else
    {
      unint64_t v58 = v59;
    }
    v56 += 36;
  }
  while (v56 != 1728);
  if (v57 >= 0x1Eu)
  {
    uint64_t v60 = 0;
    unsigned __int8 v61 = v57 - 21;
    unsigned __int8 v62 = v57 - 24;
    uint64_t v63 = a5 + 32;
    unint64_t v64 = v340;
    while (1)
    {
      uint64_t v65 = (uint64_t)&v58[v60];
      int v66 = *(_DWORD *)&v58[v60];
      int v67 = Is_Legal(v66);
      unint64_t v58 = __dst;
      if (!v67 || (*(_WORD *)(v65 + 8) & 8) == 0 || *v64 || __dst[v60 + 4] >= v61) {
        goto LABEL_86;
      }
      if (v66 == 5) {
        break;
      }
      if (v66 == 4)
      {
        if (BYTE2(v66) < 6u) {
          goto LABEL_86;
        }
        int v69 = GM_CrossCorr_Protection(4, v62, v65, v63, a7);
        unint64_t v58 = __dst;
        if (!v69) {
          goto LABEL_86;
        }
LABEL_85:
        *unint64_t v64 = 1;
        goto LABEL_86;
      }
      if (v66 == 1) {
        break;
      }
LABEL_86:
      v60 += 36;
      ++v64;
      v63 += 56;
      if (v60 == 1728) {
        goto LABEL_87;
      }
    }
    char v68 = GM_CrossCorr_Protection(6, v62, v65, v63, a7);
    unint64_t v58 = __dst;
    if ((v68 & 1) == 0) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
LABEL_87:
  *((_DWORD *)v58 + 1682) = *(_DWORD *)a9;
  v303[2356] = *(unsigned char *)(a9 + 4);
  v303[2312] = *(unsigned char *)(a9 + 5);
  uint64_t v70 = *(void *)(a9 + 8);
  *((void *)v58 + 846) = v70;
  unint64_t v292 = (__int16 *)(v58 + 6734);
  *((_WORD *)v58 + 3367) = *(_WORD *)(a9 + 16);
  unint64_t v306 = (double *)(v58 + 6736);
  *((void *)v58 + 842) = *(void *)(a9 + 24);
  double v71 = *(double *)(a9 + 32);
  unint64_t v284 = (double *)(v58 + 6784);
  *((_DWORD *)v58 + 1686) = *(_DWORD *)(a9 + 60);
  *((_WORD *)v58 + 3374) = *(_WORD *)(a9 + 66);
  v303[2330] = *(unsigned char *)(a9 + 64);
  unint64_t v290 = (__int16 *)(v58 + 6752);
  *((_WORD *)v58 + 3376) = *(_WORD *)(a9 + 68);
  v296 = (double *)(v58 + 6760);
  *((void *)v58 + 845) = *(void *)(a9 + 72);
  *((double *)v58 + 848) = v71 + *(double *)(a9 + 40) * ((double)(v307 - (int)v70) * 0.001);
  uint64_t v72 = -2304;
  do
  {
    char v73 = &v58[v72 + 6728];
    *(_OWORD *)(v73 + 29) = 0uLL;
    *(_OWORD *)char v73 = 0uLL;
    *((_OWORD *)v73 + 1) = 0uLL;
    v72 += 48;
  }
  while (v72);
  unsigned __int8 v310 = 0;
  int v74 = 47;
  uint64_t v75 = 1728;
  uint64_t v76 = 6695;
  uint64_t v77 = 6680;
  while (2)
  {
    size_t v78 = &v58[v75];
    unsigned int v79 = v58[v75 - 36];
    if (v79 <= 6 && v79 != 0)
    {
      if (v79 == 2)
      {
        size_t v81 = &v58[v75];
        int v82 = *(_DWORD *)(a8 + 4 * v58[v75 - 33] + 16460);
        if (v82 != 2139062143)
        {
          *(v81 - 34) = v82;
          if (!(_BYTE)v82) {
            goto LABEL_108;
          }
          goto LABEL_105;
        }
        *(v81 - 34) = 0;
        if ((*((_WORD *)v81 - 14) & 0x200) != 0) {
          *((_WORD *)v81 - 14) &= 0xFCFFu;
        }
LABEL_108:
        if (*(v78 - 36) != 2 && (unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_d("SV_Gen_Meas: index fail", v74);
          unint64_t v58 = __dst;
        }
      }
      else if (v79 != 6)
      {
        if (!v58[v75 - 34]) {
          goto LABEL_108;
        }
LABEL_105:
        int v83 = GNSS_Id_To_Num_Prn_Idx(*((_DWORD *)v78 - 9));
        if (*(char *)(a7 + v83 + 3996) < 0)
        {
          unint64_t v58 = __dst;
        }
        else
        {
          unint64_t v58 = __dst;
          char v84 = &__dst[v77];
          uint64_t v85 = a7 + 48 * *(unsigned __int8 *)(a7 + v83 + 3996);
          long long v86 = *(_OWORD *)(v85 + 60);
          long long v87 = *(_OWORD *)(v85 + 92);
          *((_OWORD *)v84 + 1) = *(_OWORD *)(v85 + 76);
          *((_OWORD *)v84 + 2) = v87;
          *(_OWORD *)char v84 = v86;
          if (__dst[v76 - 11]) {
            v310 |= __dst[v76] != 0;
          }
        }
        if ((*(_WORD *)&v58[v75 - 28] & 0x200) != 0 && (!*(unsigned char *)(a8 + v83 + 33605) || *(unsigned char *)(a6 + v83 + 253))) {
          *(_WORD *)&v58[v75 - 28] &= 0xFCFFu;
        }
      }
    }
    --v74;
    v76 -= 48;
    v77 -= 48;
    v75 -= 36;
    if (v75) {
      continue;
    }
    break;
  }
  unint64_t v88 = v58 + 6796;
  *(_OWORD *)(v58 + 6956) = 0u;
  *(_OWORD *)(v58 + 6972) = 0u;
  *(_OWORD *)(v58 + 6924) = 0u;
  *(_OWORD *)(v58 + 6940) = 0u;
  *(_OWORD *)(v58 + 6892) = 0u;
  *(_OWORD *)(v58 + 6908) = 0u;
  *(_OWORD *)(v58 + 6860) = 0u;
  *(_OWORD *)(v58 + 6876) = 0u;
  *(_OWORD *)(v58 + 6828) = 0u;
  *(_OWORD *)(v58 + 6844) = 0u;
  *(_OWORD *)(v58 + 6796) = 0u;
  *(_OWORD *)(v58 + 6812) = 0u;
  unsigned int __src = v58 + 6992;
  bzero(v58 + 6992, 0x600uLL);
  GM_Inc_Local_Time(v307, (uint64_t)__dst);
  uint64_t v89 = (uint64_t)__dst;
  *((_DWORD *)__dst + 1693) = v299;
  double v90 = *((double *)__dst + 848);
  if (fabs(v90) > 0.00055) {
    *((unsigned char *)a1 + 4) = 1;
  }
  if (v303[2312] && *((unsigned char *)a1 + 4))
  {
    double v91 = v90 * 1000.0;
    double v92 = -0.5;
    if (v91 > 0.0) {
      double v92 = 0.5;
    }
    double v93 = v91 + v92;
    if (v93 <= 2147483650.0)
    {
      if (v93 >= -2147483650.0) {
        int v94 = (int)v93;
      }
      else {
        int v94 = 0x80000000;
      }
    }
    else
    {
      int v94 = 0x7FFFFFFF;
    }
    Inc_Local_Time(-v94, 86400, v296, v290);
    signed int v95 = *((__int16 *)__dst + 3376);
    int v96 = *((unsigned __int16 *)__dst + 3374);
    if (v95 >= 1462)
    {
      if (v95 >= 2922) {
        __int16 v97 = 2922;
      }
      else {
        __int16 v97 = *((_WORD *)__dst + 3376);
      }
      unsigned __int16 v98 = v95 - v97 + 1460;
      signed int v95 = v95 - 1461 * (v98 / 0x5B5u) - 1461;
      v96 += v98 / 0x5B5u + 1;
      *((_WORD *)__dst + 3376) = v95;
      *((_WORD *)__dst + 3374) = v96;
    }
    if ((__int16)v95 <= 0)
    {
      if ((__int16)v95 <= -1460) {
        __int16 v142 = -1460;
      }
      else {
        __int16 v142 = v95;
      }
      __int16 v143 = (unsigned __int16)(v142 - v95 - ((__int16)v95 < -1460)) / 0x5B5u;
      if ((__int16)v95 < -1460) {
        ++v143;
      }
      __int16 v144 = v96 + ~v143;
      *((_WORD *)__dst + 3376) = v95 + 1461 * v143 + 1461;
      *((_WORD *)__dst + 3374) = v144;
      if (v144 < 0) {
        goto LABEL_202;
      }
    }
    else
    {
      if ((v96 & 0x8000) == 0) {
        goto LABEL_135;
      }
LABEL_202:
      *((_WORD *)__dst + 3374) = 0;
    }
LABEL_135:
    GM_Apply_LT_Slew(v284, v292, v306, (_WORD *)a1 + 2);
    uint64_t v89 = (uint64_t)__dst;
    if (*((unsigned char *)a1 + 5) && *((_WORD *)a1 + 3))
    {
      uint64_t v99 = 0;
      int v100 = -1575420 * *((__int16 *)a1 + 3);
      uint64_t v101 = (uint64_t)a1 + 255;
      do
      {
        if (*(unsigned char *)(v101 + v99)) {
          *(_DWORD *)(v101 + 4 * v99 - 51) += v100;
        }
        --v99;
      }
      while (v99 != -48);
    }
  }
  else
  {
    *((_WORD *)a1 + 3) = 0;
    *((unsigned char *)a1 + 5) = 0;
  }
  unint64_t v282 = v88;
  unsigned int Min_SNR = GM_Get_Min_SNR(v89, 48);
  size_t v103 = __dst + 4424;
  GM_Prop_AAD(*((unsigned int *)__dst + 1692), 48, (uint64_t)(__dst + 4424));
  uint64_t v104 = (uint64_t)__dst;
  if (v303[2312] && *((int *)__dst + 1682) >= 7 && *(unsigned char *)(a4 + 1) && *(_DWORD *)(a4 + 12) == 3)
  {
    for (uint64_t j = 0; j != 48; ++j)
    {
      uint64_t v106 = v104 + 36 * j;
      int v107 = GM_Gen_SV_Meas_QI(v106);
      unint64_t v108 = (_WORD *)(v106 + 8);
      __int16 v109 = *(_WORD *)(v106 + 8);
      int v110 = *(_DWORD *)v106;
      int v111 = Is_Legal(v110);
      uint64_t v104 = (uint64_t)__dst;
      if (v111) {
        BOOL v112 = v107 < 8;
      }
      else {
        BOOL v112 = 1;
      }
      if (!v112 && (v109 & 0x300u) >= 0x200 && __dst[48 * j + 4428] && __dst[48 * j + 4439])
      {
        int v113 = &__dst[56 * j];
        int v114 = *((_DWORD *)v113 + 432);
        LODWORD(v113) = (unint64_t)(2149582851 * *((int *)v113 + 433)) >> 32;
        double v115 = (double)(int)(((int)v113 >> 9) + (v113 >> 31) + 1500 * v114) * 0.001;
        double v116 = *((double *)__dst + 842);
        double v117 = v116 - v115;
        if (v110 == 2)
        {
          while (v117 >= 43200.0)
          {
            double v115 = v115 + 86400.0;
            double v117 = v116 - v115;
          }
          while (v117 < -43200.0)
          {
            double v115 = v115 + -86400.0;
            double v117 = v116 - v115;
          }
        }
        if (v117 >= 302400.0)
        {
          double v117 = v117 + -604800.0;
        }
        else if (v117 < -302400.0)
        {
          double v117 = v117 + 604800.0;
        }
        if (fabs(v117) > 3.0)
        {
          *unint64_t v108 = v109 & 0xFCFF;
          EvLog_v("SV_Gen_Meas: SF Sync Rej ! Ch %d, SF Sync %d, d_TOW %g", j, (unsigned __int16)(v109 & 0x300) >> 8, v117);
          uint64_t v104 = (uint64_t)__dst;
        }
      }
    }
  }
  GM_Cross_Constell(v104, a8);
  GM_Get_Best_SyncSV(v286, (uint64_t)__dst, (uint64_t)v103, Min_SNR, 48, (_DWORD *)&v326 + 1, &v326);
  unsigned int Best_NSSS = GM_Get_Best_NSSS((uint64_t)__dst, (uint64_t)v103, Min_SNR, 48);
  int v118 = GM_Adjust_AAD(v326, Best_NSSS, v286, 48, (uint64_t)v103);
  unsigned __int16 v119 = __dst;
  uint64_t v120 = 0;
  *((_DWORD *)__dst + 1698) = v118;
  unint64_t v121 = (_WORD *)(a3 + 96);
  uint64_t v122 = -2304;
  uint64_t v123 = 1732;
  do
  {
    int v124 = Is_Legal(*(_DWORD *)&v119[v120]);
    unsigned __int16 v119 = __dst;
    if (v124)
    {
      char v126 = &__dst[v123];
      int v127 = *(_DWORD *)&__dst[v123];
      int v128 = *(_DWORD *)&__dst[v122 + 6760];
      BOOL v129 = __OFSUB__(v127, v128);
      int v130 = v127 - v128;
      if (v130 < 0 != v129) {
        v130 += 1534500;
      }
      int v131 = v130 % 1023;
      if (v131 > 512) {
        LOWORD(v131) = v131 - 1023;
      }
      *(v121 - 48) = v131;
      *unint64_t v121 = *((_DWORD *)v126 + 2) / 256 - *(_WORD *)&__dst[v122 + 6750];
      v121[48] = *((_DWORD *)v126 + 3) / 256 - *(_WORD *)&__dst[v122 + 6750];
    }
    v120 += 36;
    v123 += 56;
    v122 += 48;
    ++v121;
  }
  while (v120 != 1728);
  int v325 = 0;
  unint64_t v132 = a1;
  int v133 = a1[3];
  int v134 = *((_DWORD *)__dst + 1682);
  if (v133 <= 4) {
    int v135 = v133 > 2;
  }
  else {
    int v135 = 2;
  }
  int v283 = v135;
  if (v133 <= 4)
  {
    uint8x8_t v136 = v303;
    if (v133 >= 3 && v134 < 9) {
      goto LABEL_181;
    }
LABEL_184:
    if (v134 == 11)
    {
      BOOL v280 = 0;
      v136[2356] = 1;
      a1[3] = 6;
    }
    else
    {
      if (v133 <= 4 && (v326 & 0x8000000000000000) == 0) {
        goto LABEL_188;
      }
      int v137 = v326;
      if (v133 <= 2 && (v326 & 0x80000000) == 0) {
        goto LABEL_190;
      }
      if ((Best_NSSS & 0x80000000) == 0 && !v133) {
        goto LABEL_189;
      }
      BOOL v280 = *((__int16 *)__dst + 3367) > *(__int16 *)(a9 + 16);
    }
  }
  else
  {
    uint8x8_t v136 = v303;
    if (v134 >= 9) {
      goto LABEL_184;
    }
LABEL_181:
    v136[2356] = 0;
    a1[3] = 2;
    if (v326 < 0)
    {
      int v137 = v326;
      if ((v326 & 0x80000000) != 0) {
        goto LABEL_268;
      }
      goto LABEL_190;
    }
LABEL_188:
    int v137 = v326;
LABEL_189:
    if (v137 < 0)
    {
      if ((Best_NSSS & 0x80000000) != 0) {
        goto LABEL_268;
      }
      GM_Set_MSec_TOW_NSSS((uint64_t)&__dst[56 * Best_NSSS + 1728], (uint64_t)&__dst[48 * Best_NSSS + 4424], v306, &v325, 604800.0);
      unsigned __int16 v119 = __dst;
      v136[2356] = 0;
      BOOL v280 = 1;
      a1[3] = 1;
    }
    else
    {
LABEL_190:
      int v138 = v137;
      if (__dst[48 * v137 + 4428])
      {
        LOWORD(v125) = *(_WORD *)&__dst[48 * v137 + 4440];
        double v139 = (double)v125 * 0.5;
      }
      else
      {
        int v140 = *(_DWORD *)&__dst[36 * v137];
        switch(*(_DWORD *)&__dst[36 * v138])
        {
          case 2u:
            unsigned int v141 = 73;
            break;
          case 3u:
            unsigned int v141 = 87;
            break;
          case 4u:
            if ((v140 & 0xFF0000u) <= 0xA0000) {
              unsigned int v141 = 129;
            }
            else {
              unsigned int v141 = 81;
            }
            break;
          case 5u:
          case 6u:
            unsigned int v141 = 129;
            break;
          default:
            unsigned int v141 = 77;
            break;
        }
        double v139 = (double)v141;
      }
      GM_Set_MSec_TOT_SSS((uint64_t)&__dst[56 * v138 + 1728], v139, 604800.0, *((double *)__dst + 842));
      unsigned __int16 v119 = __dst;
      int v146 = *((_DWORD *)__dst + 1682);
      if (!v146)
      {
        if (v145 >= 0.0)
        {
          if (v145 >= 604800.0) {
            double v145 = v145 + -604800.0;
          }
        }
        else
        {
          double v145 = v145 + 604800.0;
        }
      }
      double v147 = (v145 - *v306) * 1000.0;
      double v148 = -0.5;
      if (v147 > 0.0) {
        double v148 = 0.5;
      }
      double v149 = v147 + v148;
      if (v149 <= 2147483650.0)
      {
        if (v149 >= -2147483650.0) {
          int v150 = (int)v149;
        }
        else {
          int v150 = 0x80000000;
        }
      }
      else
      {
        int v150 = 0x7FFFFFFF;
      }
      int v325 = v150;
      double *v306 = v145;
      if (v150 >= 0) {
        unsigned int v151 = v150;
      }
      else {
        unsigned int v151 = -v150;
      }
      BOOL v153 = v146 > 1 && v151 > 0xEA60;
      if (v153)
      {
        uint64_t v154 = 0;
        *((_DWORD *)__dst + 1686) = 0;
        do
        {
          unint64_t v155 = &__dst[v154 + 4424];
          *(_OWORD *)(v155 + 29) = 0uLL;
          *(_OWORD *)unint64_t v155 = 0uLL;
          *((_OWORD *)v155 + 1) = 0uLL;
          v154 += 48;
        }
        while (v154 != 2304);
        for (uint64_t k = 60; k != 3996; k += 48)
        {
          size_t v157 = (_OWORD *)(a7 + k);
          *(_OWORD *)((char *)v157 + 29) = 0uLL;
          _OWORD *v157 = 0uLL;
          v157[1] = 0uLL;
        }
        unsigned __int8 v310 = 0;
      }
      unsigned int v158 = (unsigned __int16)g_Enable_Event_Log;
      if ((unsigned __int16)g_Enable_Event_Log >= 3u)
      {
        EvLog_v("GLO_TIM: SV_Gen_Meas GPS set %g   TOW_adjust %d ms", *v306, v150);
        unsigned __int16 v119 = __dst;
        unsigned int v158 = (unsigned __int16)g_Enable_Event_Log;
      }
      int v159 = v326;
      if (v158 >= 2 && (v326 & 0x80000000) == 0)
      {
        unsigned __int16 v160 = &v119[36 * v326];
        if (*v160 == 4)
        {
          unsigned int v161 = v160[2];
          if (v161 >= 0x1F)
          {
            EvLog_v("SV_Gen_Meas: Warning, BestASSS  BDS SV%d", v161);
            unsigned __int16 v119 = __dst;
            int v159 = v326;
          }
        }
      }
      if (((v119[48 * v159 + 4428] == 0) & v310) != 0) {
        int v162 = 8;
      }
      else {
        int v162 = 9;
      }
      *((_DWORD *)v119 + 1682) = v162;
      if (v119[36 * v159] == 2)
      {
        *(void *)&long long __dsta = 0;
        API_Get_UTC_Cor(1, (double *)&__dsta);
        double v163 = -86400.0;
        double v164 = *v306 + floor(*v306 / 86400.0) * -86400.0 + 10800.0 - *(double *)&__dsta;
        double *v296 = v164;
        if (v164 >= 86400.0 || (double v163 = 86400.0, v164 < 0.0))
        {
          double v164 = v164 + v163;
          double *v296 = v164;
        }
        unsigned __int16 v119 = __dst;
        int v162 = *((_DWORD *)__dst + 1682);
        if (*((_DWORD *)__dst + 1686) < v162 && (*(_DWORD *)(a8 + 8444) - 2) <= 4) {
          *((_DWORD *)__dst + 1686) = v162;
        }
        if ((unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_v("GLO_TIM: SV_Gen_Meas GPS-Glon set %g", v164);
          unsigned __int16 v119 = __dst;
          int v162 = *((_DWORD *)__dst + 1682);
        }
      }
      if (v162 == 9)
      {
        if (v326 < 0 || HIDWORD(v326) != v326)
        {
          a1[3] = 3;
          v136[2356] = 0;
          int v283 = 1;
          goto LABEL_268;
        }
        a1[3] = 5;
        BOOL v280 = 1;
        v136[2356] = 1;
        int v283 = 2;
      }
      else
      {
        if (!v153)
        {
          GM_Prop_AAD((*((_DWORD *)v119 + 1692) + v150), 48, (uint64_t)v103);
          unsigned __int16 v119 = __dst;
          int v325 = 0;
        }
LABEL_268:
        BOOL v280 = 1;
      }
    }
  }
  if (v136[2312])
  {
    int v165 = *((_DWORD *)v119 + 1682);
    if (v165 >= 1 && v165 >= *((_DWORD *)v119 + 1686))
    {
      LODWORD(v339[0]) = 0;
      LODWORD(v322) = 0;
      *(void *)&long long __dsta = 0;
      API_Get_UTC_Cor(1, (double *)&__dsta);
      GPS_To_Glon_Time(0, *v292, *v306, *(double *)&__dsta, (int *)&v322, (int *)v339, v296);
      unsigned __int16 v119 = __dst;
      __int16 v166 = LOWORD(v339[0]);
      if (!v136[2330] || LODWORD(v339[0]) != *v290)
      {
        if ((unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_v("SV_Gen_Meas: GPS_GLO %d %d ", *v290, LODWORD(v339[0]));
          unsigned __int16 v119 = __dst;
        }
        *((_WORD *)v119 + 3374) = LOWORD(v322);
        *((_WORD *)v119 + 3376) = v166;
        v136[2330] = 1;
      }
      int v167 = *((_DWORD *)v119 + 1682);
      if (*((_DWORD *)v119 + 1686) < v167 && (*(_DWORD *)(a8 + 8444) - 2) <= 4) {
        *((_DWORD *)v119 + 1686) = v167;
      }
    }
  }
  *(unsigned char *)(a6 + 47) = 0;
  int v168 = *a1;
  __int16 v324 = 0;
  unsigned int v323 = 0;
  *(void *)unsigned __int16 v321 = 0;
  double v322 = 0.0;
  char Pos_LLH = Core_Get_Pos_LLH(*((_DWORD *)v119 + 1692), 150000, 0, (int *)&v323, (uint64_t)&__dsta, (uint64_t)v339, (uint64_t *)&v322, (unsigned char *)&v324 + 1, &v324, (int *)v321, (int *)&v321[4]);
  if ((*(_DWORD *)&v321[4] - 3) < 2) {
    char v170 = Pos_LLH;
  }
  else {
    char v170 = 0;
  }
  char v285 = v170;
  BOOL v171 = 1;
  if (!*(_DWORD *)(a7 + 48))
  {
    if (*(_DWORD *)(a6 + 52) <= 4u)
    {
      uint64_t v172 = 0;
      long long v337 = 0u;
      long long v338 = 0u;
      long long v335 = 0u;
      long long v336 = 0u;
      long long v333 = 0u;
      long long v334 = 0u;
      long long v331 = 0u;
      long long v332 = 0u;
      long long v329 = 0u;
      long long v330 = 0u;
      unint64_t v173 = (int *)__dst;
      long long __dsta = 0u;
      long long v328 = 0u;
      do
      {
        if (Is_Legal(*v173)) {
          *(_DWORD *)((char *)&__dsta + v172) = GM_Gen_SV_Meas_QI((uint64_t)v173);
        }
        v172 += 4;
        v173 += 9;
      }
      while (v172 != 192);
      GM_Reject_Rep_SV((uint64_t)__dst, 0x30u, (uint64_t)&__dsta);
      unint64_t v174 = __dst;
      uint64_t v175 = 0;
      uint64_t v176 = 0;
      unsigned __int8 v177 = 0;
      int v178 = 0;
      int v179 = 0;
      LOWORD(v180) = *(_WORD *)(a7 + 26);
      int v181 = (int)((double)v180 * 1.57542);
      if (v181 <= 50) {
        int v181 = 50;
      }
      unsigned int v317 = v181;
      uint64_t v182 = 4446;
      uint64_t v183 = 1740;
      uint64_t v184 = 4428;
      do
      {
        if (Is_Legal(*(_DWORD *)&v174[v175]) && *(int *)((char *)&__dsta + v176) >= 10)
        {
          unint64_t v174 = __dst;
          if (*(unsigned __int16 *)&__dst[v175 + 12] >= 0x3E8u && __dst[v184])
          {
            int v185 = *(_DWORD *)&__dst[v183] / 256 - *(__int16 *)&__dst[v182];
            if (v185 < 0) {
              int v185 = *(__int16 *)&__dst[v182] - *(_DWORD *)&__dst[v183] / 256;
            }
            if (v185 > v317) {
              ++v179;
            }
            ++v178;
            if (__dst[v175 + 4] > v177) {
              unsigned __int8 v177 = __dst[v175 + 4];
            }
          }
        }
        else
        {
          unint64_t v174 = __dst;
        }
        v176 += 4;
        v175 += 36;
        v182 += 48;
        v183 += 56;
        v184 += 48;
      }
      while (v176 != 192);
      BOOL v171 = v179 < 1;
      if (v179 <= 0)
      {
        if (v178 < 1) {
          goto LABEL_317;
        }
        v339[0] = 0.0;
        double v322 = 0.0;
        if ((Core_Get_Clk_Drift(*((_DWORD *)v174 + 1692), 300, &v323, v339, &v322, &v321[4]) & 1) == 0) {
          goto LABEL_317;
        }
        unint64_t v186 = 0x43ABC16D674EC800;
        int v187 = (int)(v339[0] * 1000000000.0) - *(__int16 *)(a7 + 24);
        LOWORD(v186) = *(_WORD *)(a7 + 26);
        int v188 = (int)sqrt(v322 * 1.0e18 + (double)v186 * 0.333333333 * ((double)v186 * 0.333333333));
        if (v187 < 0) {
          int v187 = *(__int16 *)(a7 + 24) - (int)(v339[0] * 1000000000.0);
        }
        if (v187 <= 3 * v188) {
          goto LABEL_317;
        }
LABEL_314:
        *(unsigned char *)(p_NA + 8) = 0;
        unsigned int v189 = *(unsigned __int16 *)(a6 + 248);
        if (*(_WORD *)(a6 + 248))
        {
          *(void *)(a6 + 992) = 0;
          *(double *)(a6 + 1000) = (double)v189 * 0.000000001;
        }
        EvCrt_v("SV_Gen_Meas: eFA GOH Triggered: #Dopp %d #DoppDiscrp %d loud_SNR %d oscFrqUnc %d ", v178, v179, v177, v317);
      }
      else
      {
        if (v177 > 0x18u || v179 != 1) {
          goto LABEL_314;
        }
LABEL_317:
        BOOL v171 = 1;
      }
    }
    unint64_t v132 = a1;
  }
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  unsigned int v291 = 0;
  int v305 = v307 - v168;
  long long v328 = 0u;
  long long v329 = 0u;
  double v193 = v132 + 52;
  uint64_t v278 = a11 + 416;
  long long __dsta = 0u;
  uint64_t v194 = 1748;
  uint64_t v195 = 1699;
  uint64_t v196 = 4424;
  uint64_t v197 = 4446;
  char v311 = !v171;
  uint64_t v198 = 4428;
  unint64_t v199 = (int *)__dst;
  unint64_t v314 = v193;
  while (2)
  {
    unint64_t v200 = &v199[v190];
    int v201 = v340[v192];
    if (v340[v192])
    {
      int v202 = 8;
      goto LABEL_346;
    }
    int v318 = v340[v192];
    uint64_t v203 = v196;
    v204 = &v199[v190];
    int v202 = GM_Gen_SV_Meas_QI((uint64_t)v200);
    char v205 = v311;
    if (v202 < 11) {
      char v205 = 1;
    }
    if (v205) {
      goto LABEL_344;
    }
    double v193 = v314;
    unint64_t v199 = (int *)__dst;
    uint64_t v196 = v203;
    int v201 = v318;
    unint64_t v200 = v204;
    if (*(_DWORD *)(a6 + 52) <= 4u && __dst[v198] && ((v285 & 1) != 0 || *(_DWORD *)a6 == 1))
    {
      int v206 = *(_DWORD *)&__dst[v191 * 4 + 1740] / 256;
      unsigned int v207 = *(unsigned __int16 *)&__dst[v197 - 4];
      unsigned int v208 = 3 * v207;
      if (v207 < 0xB8) {
        unsigned int v208 = 550;
      }
      if (*(unsigned char *)(a6 + 1132) && (int v209 = *(_DWORD *)&__dst[v191 * 4 + 1744]) != 0)
      {
        int v210 = *(_DWORD *)&__dst[v191 * 4 + 1744] / 256;
        int v211 = v206 - v210;
      }
      else
      {
        int v210 = 0;
        int v211 = 0;
      }
      unsigned int v212 = v211 >= 0 ? v211 : -v211;
      if (v212 > v208 || (int v213 = *(__int16 *)&__dst[v197], v206 > (int)(v208 + v213)) || v206 < (int)(v213 - v208))
      {
        int v288 = v211;
        int v293 = v210;
        unsigned int v297 = v208;
        int v300 = *(_DWORD *)&__dst[v191 * 4 + 1740] / 256;
        if (Is_Legal(*v204))
        {
          *(unsigned char *)(a11 + v192 + 365) |= 1u;
          *(_DWORD *)(v278 + 4 * v192) = *((_DWORD *)__dst + 1692);
          EvCrt_v("ChanReset %d : SVGM %d %d   Dopp %d %d %d AA %d %d", v192, __dst[v190 * 4 + 2], __dst[v190 * 4], v300, v293, v288, *(__int16 *)&__dst[v197], v297);
          unint64_t v199 = (int *)__dst;
          int v202 = 4;
LABEL_345:
          double v193 = v314;
          uint64_t v196 = v203;
          int v201 = v318;
          unint64_t v200 = v204;
          goto LABEL_346;
        }
        int v202 = 4;
LABEL_344:
        unint64_t v199 = (int *)__dst;
        goto LABEL_345;
      }
    }
LABEL_346:
    if (v202 >= 4 && *(unsigned char *)v200 == 6) {
      ++*(unsigned char *)(a6 + 47);
    }
    int v214 = (char *)&v199[v190];
    int v215 = v199[v190 + 2] & 0x308;
    BOOL v216 = v215 == 776;
    *((unsigned char *)&__dsta + v192) = v216;
    double v217 = 0.00390625;
    size_t v218 = (double *)&v199[v194];
    v218[48] = (double)v199[v191 + 435] * 0.00390625;
    double v219 = (double)v199[v191 + 436];
    v339[0] = 0.0;
    v218[96] = v219 * 0.00390625;
    unsigned int v220 = LOBYTE(v199[v190]);
    double v221 = 0.0;
    if (v220 <= 6 && LOBYTE(v199[v190]) && v220 != 6)
    {
      uint64_t v308 = v196;
      if (v202 < 11) {
        goto LABEL_412;
      }
      char v298 = v200;
      int v319 = v201;
      unint64_t v222 = &v199[v191 + 432];
      double v223 = *v306;
      if (v215 == 776)
      {
        char v294 = 0;
        int v301 = 1;
      }
      else
      {
        uint64_t v302 = (uint64_t)v199 + v196;
        uint64_t v289 = &v199[v191 + 432];
        if (GM_Aid_NSSS_Meas((uint64_t)v199 + v196, 3u, v222))
        {
          char v294 = 0;
          int v301 = 1;
          unint64_t v199 = (int *)__dst;
          unint64_t v222 = v289;
        }
        else
        {
          unint64_t v222 = v289;
          if ((Best_NSSS & 0x80000000) != 0
            || a1[3] < 1
            || (v225 = GM_Aid_NSSS_Meas(v302, 0, v289), unint64_t v222 = v289, (v225 & 1) == 0))
          {
            if ((*((_WORD *)v214 + 4) & 0x308) != 0x208)
            {
              BOOL v216 = 0;
              unint64_t v199 = (int *)__dst;
              LOWORD(v224) = *(_WORD *)&__dst[v191 * 4 + 1736];
              double v244 = (double)(1023 * (*(_DWORD *)&__dst[v191 * 4 + 1732] / 1023)
                            - *(_DWORD *)&__dst[v191 * 4 + 1732]
                            + 1023)
                   + (double)v224 * -0.0000152587891;
              double v217 = 293.052256;
              double v221 = v244 * 293.052256;
              v339[0] = v244 * 293.052256;
              *((unsigned char *)&__dsta + v192) = 0;
              goto LABEL_372;
            }
            int v301 = 0;
            char v294 = 1;
          }
          else
          {
            char v294 = 0;
            int v301 = 1;
          }
          unint64_t v199 = (int *)__dst;
        }
      }
      double v226 = Comp_Sig_TOT(*v222, v199[v191 + 433], LOWORD(v199[v191 + 434]), v223, 604800.0);
      BOOL v216 = v301;
      *((unsigned char *)&__dsta + v192) = v301;
      double v217 = -1.0;
      if (v226 < -1.0)
      {
        unint64_t v199 = (int *)__dst;
LABEL_372:
        double v193 = v314;
        uint64_t v196 = v308;
        int v201 = v319;
        goto LABEL_412;
      }
      double v217 = *v306;
      double v221 = (*v306 - v226) * 299792458.0;
      v339[0] = v221;
      if (fabs(v221) >= 2130706430.0) {
        int v227 = 2130706432;
      }
      else {
        int v227 = (int)v221;
      }
      unint64_t v228 = v298;
      int v229 = *(unsigned __int8 *)v298;
      double v193 = v314;
      int v201 = v319;
      if (v229 == 5)
      {
        int v230 = 60000000;
        unint64_t v199 = (int *)__dst;
        uint64_t v196 = v308;
        if (v294) {
          goto LABEL_393;
        }
      }
      else
      {
        unint64_t v199 = (int *)__dst;
        uint64_t v196 = v308;
        if (v229 != 4 || (int v230 = 50000000, __dst[v190 * 4 + 2] >= 0xBu)) {
          int v230 = 40000000;
        }
        if (v294) {
          goto LABEL_393;
        }
      }
      if (v283 && v303[2312] && (v227 < 5000000 || v227 > v230))
      {
        ++v291;
        v339[0] = 0.0;
        int v232 = v326;
        double v221 = 0.0;
        if ((v326 & 0x80000000) != 0 || !LOBYTE(v199[12 * v326 + 1107]))
        {
          int v202 = 6;
        }
        else
        {
          int v295 = v227;
          if (Is_Legal(*v298))
          {
            *(unsigned char *)(a11 + v192 + 365) |= 1u;
            *(_DWORD *)(v278 + 4 * v192) = *((_DWORD *)__dst + 1692);
            int v277 = v232;
            int v202 = 6;
            EvCrt_v("ChanReset %d : SVGM %d %d   PR %d %d %d %d  iBest %d %d %d", v192, __dst[v190 * 4 + 2], __dst[v190 * 4], 6, v301, v283, v295, HIDWORD(v326), v277, Best_NSSS);
            int v227 = v295;
            unint64_t v228 = v298;
            BOOL v216 = v301;
            unint64_t v199 = (int *)__dst;
            double v193 = v314;
            uint64_t v196 = v308;
            int v201 = v319;
          }
          else
          {
            int v202 = 6;
            unint64_t v199 = (int *)__dst;
            double v193 = v314;
            uint64_t v196 = v308;
            int v201 = v319;
            int v227 = v295;
            unint64_t v228 = v298;
            BOOL v216 = v301;
          }
        }
        goto LABEL_398;
      }
LABEL_393:
      if (v227 < 5000000 || v227 > v230)
      {
        ++v291;
        v339[0] = 0.0;
        int v202 = 7;
        double v221 = 0.0;
      }
LABEL_398:
      int v234 = *(unsigned __int8 *)v228;
      if (v234 == 5)
      {
        int v235 = 20000000;
      }
      else
      {
        if (v234 != 4 || BYTE2(v199[v190]) >= 0xBu)
        {
          int v236 = 27000000;
          int v235 = 18000000;
          goto LABEL_405;
        }
        int v235 = 30000000;
      }
      int v236 = 50000000;
LABEL_405:
      if (v303[2312] && v199[1682] >= 9 && (v227 < v235 || v227 > v236)) {
        *((unsigned char *)a1 + 4) = 1;
      }
LABEL_412:
      if (v305 > HIWORD(v199[v190 + 3])) {
        *((unsigned char *)v193 + v192) = 0;
      }
      if (v202 < 15)
      {
        if (v202 < 11) {
          goto LABEL_352;
        }
        if (!v216) {
          goto LABEL_426;
        }
      }
      else
      {
        LOWORD(v217) = v199[v191 + 437];
        double v238 = (double)v199[v191 + 438] + (double)*(unint64_t *)&v217 * 0.0000152587891;
        if (*((unsigned char *)v193 + v192))
        {
          int v239 = a1[v192 + 4];
        }
        else
        {
          double v243 = v221 + 8993773.74;
          if (v221 > 329771.704) {
            double v243 = v221;
          }
          int v239 = (int)-(v238 - v243 * 5.25503547);
          a1[v192 + 4] = v239;
          *((unsigned char *)v193 + v192) = 1;
        }
        *(double *)&v199[v194 + 288] = v238 + (double)v239;
        if (!v216)
        {
LABEL_426:
          int v242 = 10;
          goto LABEL_427;
        }
      }
      double v322 = 0.0;
      int v240 = v201;
      BOOL v241 = R8_EQ(v339, &v322);
      int v201 = v240;
      uint64_t v196 = v308;
      double v193 = v314;
      unint64_t v199 = (int *)__dst;
      if (v241) {
        int v242 = 8;
      }
      else {
        int v242 = v202;
      }
LABEL_427:
      v199[v195] = v242;
      *(double *)&v199[v194] = v221;
      if (v201) {
        goto LABEL_355;
      }
      goto LABEL_356;
    }
LABEL_352:
    v199[v195] = v202;
    *(double *)&v199[v194] = v221;
    if (v202 <= 1)
    {
      v218[48] = 0.0;
      v218[96] = 0.0;
    }
    if (v201) {
LABEL_355:
    }
      *((_WORD *)v214 + 4) |= 8u;
LABEL_356:
    ++v192;
    v194 += 2;
    ++v195;
    v191 += 14;
    v196 += 48;
    v190 += 9;
    v197 += 48;
    v198 += 48;
    if (v192 != 48) {
      continue;
    }
    break;
  }
  GM_Reject_Rep_SV((uint64_t)v199, 0x30u, (uint64_t)v282);
  GM_Conv_Lock_Units(48, (uint64_t)__dst, v286);
  GM_Cross_Check_Meas_Aiding(__dst);
  char v245 = __dst;
  uint64_t v246 = 1746;
  uint64_t v247 = 51;
  int v248 = v280;
  do
  {
    if (*(int *)&__dst[4 * v246] > 14)
    {
      if (!*((unsigned char *)&__dsta + v246 - 1699))
      {
        a1[v247] = 0;
        *((unsigned char *)a1 + v246 - 1491) = 0;
        *(_DWORD *)&__dst[4 * v246] = 15;
      }
    }
    else
    {
      a1[v247] = 0;
      *((unsigned char *)a1 + v246 - 1491) = 0;
    }
    --v246;
    --v247;
  }
  while (v246 != 1698);
  int v249 = *((_DWORD *)__dst + 1682);
  if (v291 >= 3)
  {
    if (v249 >= 4)
    {
      int v249 = 3;
      *((_DWORD *)__dst + 1682) = 3;
      int v248 = 1;
    }
    a1[3] = 0;
    *((unsigned char *)a1 + 4) = 1;
  }
  int v250 = *((_DWORD *)__dst + 1692);
  *(_DWORD *)(a9 + 8) = v250;
  int v251 = *((_DWORD *)__dst + 1693);
  *(_DWORD *)(a9 + 12) = v251;
  __int16 v252 = *((_WORD *)__dst + 3367);
  *(_WORD *)(a9 + 16) = v252;
  double v253 = *((double *)__dst + 842);
  *(double *)(a9 + 24) = v253;
  uint64_t v254 = *((void *)__dst + 848);
  *(void *)(a9 + 32) = v254;
  *(_DWORD *)a9 = v249;
  char v255 = v303[2356];
  *(unsigned char *)(a9 + 4) = v255;
  int v256 = v303[2312];
  *(unsigned char *)(a9 + 5) = v256;
  *(_DWORD *)(a9 + 60) = *((_DWORD *)__dst + 1686);
  *(unsigned char *)(a9 + 64) = v303[2330];
  *(_WORD *)(a9 + 66) = *((_WORD *)__dst + 3374);
  *(_WORD *)(a9 + 68) = *((_WORD *)__dst + 3376);
  *(void *)(a9 + 72) = *((void *)__dst + 845);
  if (v248 && v249 >= 7)
  {
    Core_Save_ApxTime(v256 != 0, v249, v252, v251, v253);
    char v245 = __dst;
    int v250 = *((_DWORD *)__dst + 1692);
    int v251 = *((_DWORD *)__dst + 1693);
    int v249 = *((_DWORD *)__dst + 1682);
    LOBYTE(v256) = v303[2312];
    __int16 v252 = *((_WORD *)__dst + 3367);
    char v255 = v303[2356];
    double v253 = *((double *)__dst + 842);
    uint64_t v254 = *((void *)__dst + 848);
  }
  *(_DWORD *)a10 = v250;
  *(_DWORD *)(a10 + 4) = v251;
  *(_DWORD *)(a10 + 8) = v249;
  *(unsigned char *)(a10 + 14) = v256;
  *(_WORD *)(a10 + 16) = v252;
  *(unsigned char *)(a10 + 12) = v255;
  *(double *)(a10 + 24) = v253;
  *(void *)(a10 + 32) = v254;
  if (v325) {
    *(_DWORD *)(a10 + 40) += v325;
  }
  if (*((unsigned char *)a1 + 5)) {
    *(_DWORD *)(a10 + 44) = *((__int16 *)a1 + 3);
  }
  uint64_t v257 = 0;
  *(unsigned char *)(a10 + 13) = v283;
  *(_DWORD *)(a10 + 48) = *((_DWORD *)v245 + 1686);
  *(unsigned char *)(a10 + 52) = v303[2330];
  *(_WORD *)(a10 + 54) = *((_WORD *)v245 + 3374);
  *(_WORD *)(a10 + 56) = *((_WORD *)v245 + 3376);
  *(void *)(a10 + 64) = *((void *)v245 + 845);
  *(_DWORD *)(a10 + 72) = *((_DWORD *)v245 + 1104);
  unint64_t v258 = v245 + 10;
  char v259 = (unsigned __int8 *)(v245 + 1769);
  uint64_t v260 = 3008;
  do
  {
    *(_DWORD *)(a10 + 4 * v257 + 76) = *(_DWORD *)(v258 - 10);
    unsigned __int16 v261 = (unsigned char *)(a10 + v257);
    v261[604] = *(v258 - 6);
    v261[652] = v258[8];
    v261[700] = *(v258 - 5);
    v261[748] = v258[9];
    size_t v262 = (_WORD *)(a10 + 2 * v257);
    v262[518] = *((_WORD *)v258 + 2);
    v262[422] = *(_WORD *)v258;
    v262[470] = *((_WORD *)v258 + 1);
    v261[2864] = *(v258 - 3);
    v261[268] = *(v258 - 4);
    v262[158] = *((_WORD *)v258 - 1);
    v261[796] = *(v259 - 3);
    v262[566] = *(_WORD *)(v259 - 7);
    v261[2912] = *(v259 - 2);
    v261[2960] = *(v259 - 1);
    *(_WORD *)(a10 + v260) = *v259;
    if (*(_WORD *)(v259 - 5)) {
      *(_WORD *)(a10 + v260 - 240) = *(_WORD *)(v259 - 5);
    }
    v258 += 36;
    v259 += 56;
    ++v257;
    v260 += 2;
  }
  while (v257 != 48);
  unint64_t v263 = v245 + 8144;
  uint64_t v264 = v245 + 7760;
  char v265 = v245 + 7376;
  long long v266 = *(_OWORD *)v282;
  long long v267 = *((_OWORD *)v282 + 1);
  long long v268 = *((_OWORD *)v282 + 3);
  *(_OWORD *)(a10 + 444) = *((_OWORD *)v282 + 2);
  *(_OWORD *)(a10 + 460) = v268;
  *(_OWORD *)(a10 + 412) = v266;
  *(_OWORD *)(a10 + 428) = v267;
  long long v269 = *((_OWORD *)v282 + 4);
  long long v270 = *((_OWORD *)v282 + 5);
  long long v271 = *((_OWORD *)v282 + 7);
  *(_OWORD *)(a10 + 508) = *((_OWORD *)v282 + 6);
  *(_OWORD *)(a10 + 524) = v271;
  *(_OWORD *)(a10 + 476) = v269;
  *(_OWORD *)(a10 + 492) = v270;
  long long v272 = *((_OWORD *)v282 + 8);
  long long v273 = *((_OWORD *)v282 + 9);
  long long v274 = *((_OWORD *)v282 + 11);
  *(_OWORD *)(a10 + 572) = *((_OWORD *)v282 + 10);
  *(_OWORD *)(a10 + 588) = v274;
  *(_OWORD *)(a10 + 540) = v272;
  *(_OWORD *)(a10 + 556) = v273;
  uint8x8_t v275 = v245;
  memcpy((void *)(a10 + 1232), __src, 0x180uLL);
  memcpy((void *)(a10 + 1616), v265, 0x180uLL);
  memcpy((void *)(a10 + 2000), v264, 0x180uLL);
  uint64_t result = memcpy((void *)(a10 + 2384), v263, 0x180uLL);
  *a1 = *((_DWORD *)v275 + 1692);
  return result;
}

uint64_t GM_CrossCorr_Protection(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a1 - 1;
  uint64_t result = 0;
  uint64_t v7 = 39;
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      return result;
    case 3:
      uint64_t v7 = 5;
      goto LABEL_3;
    case 5:
LABEL_3:
      size_t v8 = (char *)((int)Num_Prn[v5] + a5 + 3996);
      break;
    default:
      EvCrt_Illegal_Default("GM_CrossCorr_Protection", 0x83Du);
      return 0;
  }
  while (1)
  {
    int v10 = *v8++;
    unsigned __int8 v9 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      int v11 = (*(__int16 *)(a5 + 48 * v9 + 82) - *(_DWORD *)(a4 + 12) / 256) % 1000;
      int v12 = v11 + 1000;
      if (v11 >= -500) {
        int v12 = v11;
      }
      int v13 = v11 <= 499 ? v12 : v11 - 1000;
      if (v13 < 0) {
        int v13 = -v13;
      }
      if (v13 < 0xF || v13 <= 0x18 && *(unsigned __int8 *)(a3 + 4) < a2) {
        break;
      }
    }
    if (!--v7) {
      return 0;
    }
  }
  *(_WORD *)(a3 + 8) &= ~8u;
  return 1;
}

size_t Gnm34_00PrintTaTraceCfg(const char *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v17 = 0;
  uint64_t v16 = 0x332E352E322E76;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:%s Version,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm34_00PrintTaTraceCfg", a1, (const char *)&v16);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuSys Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm34_00PrintTaTraceCfg", dword_26AE53A2C);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuHostIf Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm34_00PrintTaTraceCfg", BYTE1(dword_26AE53A2C));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuDspi Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm34_00PrintTaTraceCfg", BYTE2(dword_26AE53A2C));
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:MEExDLog Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm34_00PrintTaTraceCfg", HIBYTE(dword_26AE53A2C));
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:MECpuInfra Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm34_00PrintTaTraceCfg", qword_26AE53A30);
    return LbsOsaTrace_WriteLog(0xBu, __str, v14, 4, 1);
  }
  return result;
}

uint64_t Gnm34_12UpdateTaTraceCfg(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_TA_TRACE_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm34_12UpdateTaTraceCfg");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    long long v4 = *(_OWORD *)(a1 + 12);
    qword_26AE53A30 = *(void *)(a1 + 28);
    g_TaLogConfig = v4;
    Gnm34_00PrintTaTraceCfg("UPDATED");
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm34_12UpdateTaTraceCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
  }
  return 0;
}

uint64_t Gnm34_15GetTaTraceCfg(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 1:
      uint64_t result = dword_26AE53A2C;
      break;
    case 2:
      uint64_t result = BYTE1(dword_26AE53A2C);
      break;
    case 3:
      uint64_t result = BYTE2(dword_26AE53A2C);
      break;
    case 4:
      uint64_t result = HIBYTE(dword_26AE53A2C);
      break;
    case 5:
      uint64_t result = qword_26AE53A30;
      break;
    default:
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Module,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm34_15GetTaTraceCfg", 770, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t GnssDbgMgr_DebugClassInd(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2 || *(unsigned __int16 *)(v2 + 5) > 0x7F7u) {
    return 0;
  }
  if ((g_CurrentPlatform - 1) >= 4)
  {
    if (!g_CurrentPlatform)
    {
      uint64_t v9 = *(unsigned __int16 *)(a1 + 24);
      *(unsigned char *)(v9 + v2 - 1) = 0;
      unsigned int v10 = *(unsigned __int8 *)(v2 + 3) - 66;
      if (v10 <= 0x18)
      {
        if (((1 << v10) & 0x1004042) != 0)
        {
          if ((v9 - 9) >= 0x11 && *(unsigned __int8 *)(v2 + 8) == 228)
          {
            unint64_t v11 = *(char *)(v2 + 9);
            *(unsigned char *)(v2 + 8 + (*(unsigned char *)(v2 + 11) + 2) + 3) = 0;
            int v12 = v11 > 3 ? 4 : dword_22BB0C7A0[v11];
            if (LbsOsaTrace_IsLoggingAllowed(5u, v12, 1, 0))
            {
              bzero(__str, 0x410uLL);
              double v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              if (v11 > 3)
              {
                int v15 = 4;
                uint64_t v14 = 73;
              }
              else
              {
                uint64_t v14 = dword_22BB0C780[v11];
                int v15 = dword_22BB0C7A0[v11];
              }
              unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)v13, "GZR", v14, (const char *)(v2 + 13));
              LbsOsaTrace_WriteLog(5u, __str, v16, v15, 1);
            }
          }
          goto LABEL_23;
        }
        if (*(unsigned char *)(v2 + 3) == 66)
        {
          size_t v6 = v2 + 8;
          unsigned int v8 = (unsigned __int16)(v9 - 9);
          uint64_t v5 = 4;
          int v7 = 227;
          goto LABEL_7;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 24);
    *(unsigned char *)(v3 + v2 - 1) = 0;
    unsigned __int8 v4 = *(unsigned char *)(v2 + 3) - 65;
    if (v4 <= 3u)
    {
      uint64_t v5 = dword_22BB0C790[(char)v4];
      size_t v6 = v2 + 8;
      int v7 = (0xE4E4E3E3 >> (8 * v4));
      unsigned int v8 = (unsigned __int16)(v3 + (0xFFF9FFFBFFF9FFFBLL >> (16 * v4)));
LABEL_7:
      GnssDbgMgr_HandleBinaryLogs(v6, v8, v5, v7);
    }
  }
LABEL_23:
  int v17 = *(void **)(a1 + 16);
  if (v17) {
    free(v17);
  }
  *(void *)(a1 + 16) = 0;
  return 0;
}

uint64_t GnssDbgMgr_SetPlatformHandler(uint64_t a1)
{
  if (a1) {
    g_CurrentPlatforint m = *(_DWORD *)(a1 + 12);
  }
  return 0;
}

uint64_t GnssDbgMgr_DefaultMsgHandler()
{
  return 0;
}

size_t GnssDbgMgr_HandleBinaryLogs(size_t result, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (result)
  {
    unsigned int v4 = a2;
    if (a2 >= 8)
    {
      uint64_t v6 = a3;
      size_t v7 = result;
      unsigned __int16 v8 = 0;
      uint64_t v45 = *MEMORY[0x263F8C2B8];
      uint64_t v43 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      uint64_t v44 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      size_t v42 = result;
      unsigned int v41 = a3;
      while (1)
      {
        uint64_t v9 = (unsigned __int8 *)(v7 + v8);
        if (*v9 != a4) {
          goto LABEL_10;
        }
        uint64_t v10 = v9[3];
        LODWORD(v11) = v4;
        if ((int)v10 + 6 <= (unsigned __int16)v4) {
          break;
        }
LABEL_11:
        v4 -= v11;
        v8 += v11;
        if ((unsigned __int16)v4 <= 7u) {
          return result;
        }
      }
      if (v9[v10 + 5] - 48 <= 0x4A)
      {
        int v12 = *(unsigned __int16 *)(v9 + 1);
        if (a4 == 227)
        {
          unsigned __int8 v13 = gnssdbg_GetLogSeverityME(v12, g_CurrentPlatform) - 1;
          if (v13 < 6u)
          {
            uint64_t v14 = (int *)((char *)&unk_22BB0C7B0 + 4 * (char)v13);
            goto LABEL_15;
          }
LABEL_16:
          int v16 = 4;
        }
        else
        {
          unsigned __int8 LogSeverityCP = gnssdbg_GetLogSeverityCP(v12, g_CurrentPlatform);
          if (LogSeverityCP >= 4u) {
            goto LABEL_16;
          }
          uint64_t v14 = (int *)((char *)&unk_22BB0C7A0 + 4 * (char)LogSeverityCP);
LABEL_15:
          int v16 = *v14;
        }
        uint64_t v11 = (v10 + 7);
        if (LbsOsaTrace_IsLoggingAllowed(v6, v16, 0, 0))
        {
          uint64_t result = LbsOsaTrace_PrintBinaryBuf(v6, v16, 0, (const void *)(v7 + v8), (v10 + 7));
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v48);
          int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"DisAllow Severity TAGID ", 24);
          uint64_t v18 = *v17;
          *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) |= 0x4000u;
          __str[0] = 48;
          int v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, __str);
          int v20 = v16;
          *(void *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 4;
          int v21 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          double v23 = *(double *)&g_MacClockTicksToMsRelation;
          double v24 = LbsOsaTrace_ModuleString(v6);
          if (v20 > 5) {
            uint64_t v25 = 32;
          }
          else {
            uint64_t v25 = dword_22BB0C7C8[v20];
          }
          std::stringbuf::str();
          uint64_t v26 = __p;
          if (v47 < 0) {
            uint64_t v26 = (void **)__p[0];
          }
          unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v23 * (double)v22), v24, v25, (const char *)v26);
          if (v47 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v6 = v41;
          LbsOsaTrace_WriteLog(v41, __str, v27, v20, 1);
          v48[0] = v45;
          *(void *)((char *)v48 + *(void *)(v45 - 24)) = v44;
          uint64_t v49 = v43;
          uint64_t v50 = MEMORY[0x263F8C318] + 16;
          if (v53 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          uint64_t result = MEMORY[0x230F4E540](v54);
          int v16 = v20;
          size_t v7 = v42;
        }
        if ((v16 & 5) == 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v48);
          unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"TAGID ", 6);
          uint64_t v29 = *v28;
          *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) = *(_DWORD *)((unsigned char *)v28 + *(void *)(*v28 - 24) + 8) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)v28 + *(void *)(v29 - 24) + 8) |= 0x4000u;
          __str[0] = 48;
          unint64_t v30 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, __str);
          *(void *)((char *)v30 + *(void *)(*v30 - 24) + 24) = 4;
          int v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
          if (v11)
          {
            uint64_t v32 = v11;
            do
            {
              *(void *)&v51[*(void *)(v49 - 24)] = 2;
              ++v9;
              std::ostream::operator<<();
              --v32;
            }
            while (v32);
          }
          if (LbsOsaTrace_IsLoggingAllowed(v6, v16, 0, 0))
          {
            int v33 = v16;
            bzero(__str, 0x410uLL);
            uint64_t v34 = mach_continuous_time();
            double v35 = *(double *)&g_MacClockTicksToMsRelation;
            int v36 = LbsOsaTrace_ModuleString(v6);
            uint64_t v37 = v6;
            uint64_t v38 = dword_22BB0C7C8[v33];
            std::stringbuf::str();
            int v39 = __p;
            if (v47 < 0) {
              int v39 = (void **)__p[0];
            }
            unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v35 * (double)v34), v36, v38, (const char *)v39);
            if (v47 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v6 = v37;
            LbsOsaTrace_WriteLog(v37, __str, v40, v33, 1);
            size_t v7 = v42;
          }
          v48[0] = v45;
          *(void *)((char *)v48 + *(void *)(v45 - 24)) = v44;
          uint64_t v49 = v43;
          uint64_t v50 = MEMORY[0x263F8C318] + 16;
          if (v53 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          uint64_t result = MEMORY[0x230F4E540](v54);
        }
        goto LABEL_11;
      }
LABEL_10:
      LODWORD(v11) = 1;
      goto LABEL_11;
    }
  }
  return result;
}

void sub_22B8939C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void GnssDbgMgr_DestMissingHandler(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 8650752)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2) {
      free(v2);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void GnssDbgMgr_SetPlatform(int a1)
{
  uint64_t v2 = gnssOsa_Calloc("GnssDbgMgr_SetPlatform", 402, 1, 0x10uLL);
  if (v2)
  {
    v2[3] = a1;
    AgpsSendFsmMsg(132, 132, 8651008, v2);
  }
}

void GnssDbgMgr_WriteLog(size_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    if (a1 >= 0xA)
    {
      unsigned int v4 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 440, 1, 0x20uLL);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 447, 1, a1);
        v5[2] = v6;
        if (v6)
        {
          *((_WORD *)v5 + 12) = a1;
          memcpy_s("GnssDbgMgr_WriteLog", 457, v6, a1, a2, a1);
          AgpsSendFsmMsg(132, 132, 8650752, v5);
        }
        else
        {
          free(v5);
        }
      }
    }
  }
}

void *gnss::Device::Device(void *result)
{
  *uint64_t result = &unk_26DF18190;
  return result;
}

void *gnss::GnssAdaptDevice::getHalExtensions(gnss::GnssAdaptDevice *this)
{
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (!v1
  {
    gnssOsa_FlushLog();
    __assert_rtn("getHalExtensions", "gaGnssAdaptDevice.h", 341, "false && \"Failed to dynamic cast HalExtensions\"");
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t result)
{
  gp_GnssAdaptuint64_t DeviceInstance = *(void *)(result + 32);
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  std::function<void ()(gnss::Result)>::operator=((void *)v1 + 7, a1 + 40);
  unsigned __int8 v8 = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType(v1, &v8);
  uint64_t v2 = *((void *)v1 + 1);
  if (v8 - 4 <= 0xFFFFFFFC && v2 == 0)
  {
    gnssOsa_FlushLog();
    __assert_rtn("GnssAdaptDevice_block_invoke_2", "ga00GnssDevice.cpp", 92, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comint m = gnss::GnssAdaptDevice::getComm(*((void *)v1 + 2));
  gp_Gpio = v2;
  g_GpioNotifCB = 0;
  uint64_t v4 = *((void *)v1 + 3);
  gnss::GnssAdaptDevice::getLogger(v4);
  unsigned __int8 v9 = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType(v1, &v9);
  BOOL v5 = v9 == 0;
  gp_Logger = v4;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  gnssOsaSetConfigLogLevel(v6, v5);
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((void *)v1 + 4));

  return gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit((uint64_t)v1, 0);
}

uint64_t gnss::GnssAdaptDevice::getComm(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getComm", "gaGnssAdaptDevice.h", 335, "false && \"Comm null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getLogger(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getLogger", "gaGnssAdaptDevice.h", 336, "false && \"Logger null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getNvStore(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getNvStore", "gaGnssAdaptDevice.h", 337, "false && \"NvStorage null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(unsigned char *)(a1 + 88) = 0;
    uint64_t result = gnss::GnssAdaptDevice::Ga00_01GnssInit((gnss::GnssAdaptDevice *)a1);
    if (result) {
      return result;
    }
    goto LABEL_15;
  }
  if (a2 != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 87, "Ga00_04HandleDeviceInit", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 2, 1);
    }
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 90) = 1;
  if ((gnss::GnssAdaptDevice::Ga00_02GnssDeInit((NSObject **)a1) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga00_03GnssReset", 1296);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  gnss::GnssAdaptDevice::getLogger(v3);
  __str[0] = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType((gnss::GnssAdaptDevice *)a1, (unsigned __int8 *)__str);
  BOOL v4 = __str[0] == 0;
  gp_Logger = v3;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  gnssOsaSetConfigLogLevel(v5, v4);
  __str[0] = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType((gnss::GnssAdaptDevice *)a1, (unsigned __int8 *)__str);
  uint64_t v6 = *(void *)(a1 + 8);
  if (__str[0] - 4 <= 0xFFFFFFFC && !v6)
  {
    gnssOsa_FlushLog();
    __assert_rtn("Ga00_03GnssReset", "ga00GnssDevice.cpp", 619, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comint m = gnss::GnssAdaptDevice::getComm(*(void *)(a1 + 16));
  gp_Gpio = v6;
  g_GpioNotifCB = 0;
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*(void *)(a1 + 32));
  uint64_t result = gnss::GnssAdaptDevice::Ga00_01GnssInit((gnss::GnssAdaptDevice *)a1);
  if ((result & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga00_03GnssReset", 1293);
      LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
LABEL_15:
    gnss::GnssAdaptDevice::Ga07_06SetDefaultState((gnss::GnssAdaptDevice *)a1, 0);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 56);
    uint64_t v14 = *(NSObject **)(a1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke;
    block[3] = &__block_descriptor_tmp_75;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)__str);
    dispatch_async(v14, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v16);
    return (uint64_t)std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](__str);
  }
  return result;
}

void sub_22B8944F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::~GnssAdaptDevice(gnss::GnssAdaptDevice *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26DF18378;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 65, "~GnssAdaptDevice");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 1, 1);
  }
  BOOL v4 = *((void *)this + 36);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  void block[4] = this;
  dispatch_sync(v4, block);
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, &__block_literal_global);
  int v5 = *((void *)this + 37);
  if (v5)
  {
    dispatch_release(v5);
    *((void *)this + 37) = 0;
  }
  if (g_GnssGlobalStaticQueue)
  {
    dispatch_release((dispatch_object_t)g_GnssGlobalStaticQueue);
    g_GnssGlobalStaticQueue = 0;
  }
  uint64_t v6 = *((void *)this + 36);
  if (v6)
  {
    dispatch_release(v6);
    *((void *)this + 36) = 0;
  }
  size_t v7 = *((void *)this + 38);
  if (v7)
  {
    dispatch_release(v7);
    *((void *)this + 38) = 0;
  }
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100]((void *)this + 123);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100]((void *)this + 119);
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100]((void *)this + 115);
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100]((void *)this + 111);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100]((void *)this + 107);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100]((void *)this + 103);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100]((void *)this + 99);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100]((void *)this + 95);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100]((void *)this + 91);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 87);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 83);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 79);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 75);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 71);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 67);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 63);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 59);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100]((void *)this + 55);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)this + 51);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100]((void *)this + 47);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100]((void *)this + 43);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)this + 39);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 256, *((void **)this + 33));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  uint64_t v8 = (void *)*((void *)this + 19);
  if (v8)
  {
    *((void *)this + 20) = v8;
    operator delete(v8);
  }
  unsigned __int16 v9 = (void *)*((void *)this + 16);
  if (v9)
  {
    *((void *)this + 17) = v9;
    operator delete(v9);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 7);
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  }
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
}

{
  uint64_t vars8;

  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
}

{
  uint64_t vars8;

  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);

  JUMPOUT(0x230F4E5D0);
}

void sub_22B8948E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);

  return gnss::GnssAdaptDevice::Ga00_02GnssDeInit(v1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_02GnssDeInit(NSObject **this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(this, 0);
  gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning((uint64_t)this, 1);
  GNS_EaInitialize(0);
  GNS_SenInitialize(0);
  GNS_EeInitialize(0);
  Gnm_RegisterApiStatusCb(0);
  Gnm_RegisterPowerReportCb(0);
  GNS_XOSetCallback(0);
  if (!gnssOsa_DeinitCountingSem(this + 129) && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_02GnssDeInit", 1540);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  if (g_GnsInit && (g_GnsInit = 0, (AgpsShutdownAllFsm() & 1) != 0))
  {
    *(void *)uint64_t __str = this + 35;
    int v8 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
    return 1;
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga00_02GnssDeInit", 1296);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      return 0;
    }
  }
  return result;
}

void sub_22B894B44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke_2()
{
  gp_GnssAdaptuint64_t DeviceInstance = 0;
}

void *gnss::GnssAdaptDevice::reset(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_12;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "reset", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 90))
  {
    uint64_t v2 = *(NSObject **)(v1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_8;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a1 + 40);
    dispatch_async(v2, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  }
  else
  {
    std::function<void ()(gnss::Result)>::operator=((void *)(v1 + 56), a1 + 40);
    gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(v1, 1);
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Reset Triggered\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 65, "reset_block_invoke");
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 1, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 0);
}

void *gnss::GnssAdaptDevice::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    dispatch_async(v2, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "clear", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "clear_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    uint64_t v5 = a1 + 40;
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, v5);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v26, (uint64_t)"clear_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "clear_block_invoke", 2056);
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "clear_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
      }
      return result;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, v5);
    v25[3] = 0;
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v24);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
    unsigned int v15 = Gnm_ClearGNSSCache(0x10000);
    if (v15)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "clear_block_invoke", 257, v15);
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
      }
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v15, 0x10u);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
LABEL_26:
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "clear_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
      }
    }
    else if (gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 1032), 0x1F4u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "clear_block_invoke", 257);
        LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
      }
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_26;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: COLD\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "clear_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v21, 4, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v27, (uint64_t)"clear_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "clear_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "clear_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  return result;
}

void sub_22B8957F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a4 + 24))
  {
    uint64_t v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_25_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    dispatch_async(v5, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "start", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
  }
  return result;
}

void sub_22B895A48(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "start_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v34, (uint64_t)"start_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "start_block_invoke", 2056);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "start_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
      return result;
    }
    uint64_t v14 = *(void *)(v2 + 280);
    if ((v14 & 0x40) == 0)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v33, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 8, (uint64_t)v33, (uint64_t)"start_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid PVTM Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 87, "start_block_invoke", 258);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 2, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "start_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
      return result;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v31, a1 + 40);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 2, (uint64_t)v31);
    uint64_t v19 = (2 * (v14 & 1)) | (4 * ((v14 & 0x3A) != 0));
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
    uint64_t v27 = 0;
    int v28 = 1000;
    uint64_t v30 = 0;
    uint64_t v29 = 0;
    unsigned int v20 = Gnm_RegisterPeriodicFix(0, 0, (uint64_t)gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB, v19, (unsigned int *)&v27);
    if (v20)
    {
      gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v20, 2u);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RegPeriodicFix,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "start_block_invoke", 257, v20);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
LABEL_26:
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "start_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
      }
    }
    else
    {
      *(unsigned char *)(v2 + 89) = 1;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        snprintf(getVersionString::a_Version, 0x200uLL, "host,%s,FW,%s", "1e996c9bd release/1942", ga_HwVersion);
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNSS Version,%s ReportType,%u,Resp,%u\n", v23, "ADP", 77, "start_block_invoke", getVersionString::a_Version, v19, 0);
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 3, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v35, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v35, (uint64_t)"start_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v35);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "start_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "start_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22B896208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

char *getVersionString()
{
  return getVersionString::a_Version;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B896358(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::stop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 24))
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
    block[3] = &__block_descriptor_tmp_30_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if (result)
  {
LABEL_7:
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "stop", 513);
    return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
  return result;
}

void sub_22B8965F4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "stop_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    uint64_t v5 = a1 + 40;
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, v5);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 1, (uint64_t)v20);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v20);
      int v6 = gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(v2, 0);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StopResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 77, "stop_block_invoke", v6);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 3, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "stop_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, v5);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v23, (uint64_t)"stop_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v22, (uint64_t)"stop_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Stop Rcvd,session inactive\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "stop_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "stop_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v24, (uint64_t)"stop_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "stop_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "stop_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
  }
  return result;
}

void sub_22B896AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 89)) {
    return 14;
  }
  if (a2 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Internal Stop Request\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga00_08GnssStopPositioning");
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 91));
  }
  uint64_t v5 = Gnm_StopPosnReq(0);
  if (v5)
  {
    uint64_t v6 = v5;
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(a1, v5, 1u);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopPosReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga00_08GnssStopPositioning", 257, v6);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga00_08GnssStopPositioning");
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(a1 + 1032), 0x1F4u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga00_08GnssStopPositioning", 257);
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
      }
      uint64_t v6 = 11;
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(unsigned char *)(a1 + 89) = 0;
  }
  return v6;
}

void *gnss::GnssAdaptDevice::deleteGnssData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_50;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    void v9[4] = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "deleteGnssData", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "deleteGnssData_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v58, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v58, (uint64_t)"deleteGnssData_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v58);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "deleteGnssData_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "deleteGnssData_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Flags,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 77, "deleteGnssData_block_invoke", v5);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 3, 1);
  }
  if ((v5 & 1) == 0)
  {
    int v8 = 0;
    if ((v5 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Eph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "deleteGnssData_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 4, 1);
  }
  int v8 = 1;
  if ((v5 & 2) != 0)
  {
LABEL_16:
    v8 |= 2u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Alm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
    }
  }
LABEL_18:
  if ((v5 & 4) != 0)
  {
    v8 |= 4u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Pos\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
    }
  }
  if ((v5 & 8) != 0)
  {
    v8 |= 8u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 4, 1);
    }
  }
  if ((v5 & 0x10) != 0)
  {
    v8 |= 0x10u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v23, 4, 1);
    }
  }
  if ((v5 & 0x20) != 0)
  {
    v8 |= 0x20u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UTC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
    }
  }
  if ((v5 & 0x40) != 0)
  {
    v8 |= 0x40u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SvHealth\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
    }
  }
  if ((v5 & 0x80) != 0)
  {
    v8 |= 0x100u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TsxCurve\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v29, 4, 1);
    }
  }
  if ((v5 & 0x400) != 0)
  {
    v8 |= 0x10000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Cold\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v31, 4, 1);
    }
  }
  if ((v5 & 0x800) != 0)
  {
    v8 |= 0x20000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Warm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v33, 4, 1);
    }
  }
  if ((v5 & 0x1000) != 0)
  {
    v8 |= 0x40000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v34 = mach_continuous_time();
      unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Factory\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v35, 4, 1);
    }
  }
  if ((v5 & 0x100) != 0)
  {
    v8 |= 0x200u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v36 = mach_continuous_time();
      unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v37, 4, 1);
    }
  }
  if ((v5 & 0x200) != 0)
  {
    v8 |= 0x400u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v38 = mach_continuous_time();
      unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ORB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v39, 4, 1);
    }
  }
  if ((v5 & 0x2000) != 0)
  {
    v8 |= 0x800u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v44 = mach_continuous_time();
      unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME_TTICK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v45, 4, 1);
    }
  }
  else if (!v8)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v57, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v57, (uint64_t)"deleteGnssData_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v57);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v40 = mach_continuous_time();
      unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx field 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 87, "deleteGnssData_block_invoke", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v41, 2, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v42 = mach_continuous_time();
      unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "deleteGnssData_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v43, 5, 1);
    }
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v46 = mach_continuous_time();
    unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fields,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "ADP", 73, "deleteGnssData_block_invoke", v8);
    LbsOsaTrace_WriteLog(0x18u, __str, v47, 4, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v55, a1 + 40);
  v56[3] = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v55);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v56);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v55);
  unsigned int v48 = Gnm_ClearGNSSCache(v8);
  if (v48)
  {
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v48, 0x10u);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v49 = mach_continuous_time();
      unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 69, "deleteGnssData_block_invoke", 257, v48);
      LbsOsaTrace_WriteLog(0x18u, __str, v50, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result) {
      goto LABEL_72;
    }
  }
  else
  {
    if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 1032), 0x1F4u))
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (!result) {
        return result;
      }
      goto LABEL_72;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v51 = mach_continuous_time();
      unsigned __int16 v52 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "deleteGnssData_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v52, 0, 1);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
LABEL_72:
      bzero(__str, 0x410uLL);
      uint64_t v53 = mach_continuous_time();
      unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "ADP", 68, "deleteGnssData_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v54, 5, 1);
    }
  }
  return result;
}

void sub_22B897EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(gnss::GnssAdaptDevice *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke;
  v3[3] = &unk_2648B15A8;
  v3[4] = &v4;
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = gp_GnssAdaptDeviceInstance;
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_01GnssInit(gnss::GnssAdaptDevice *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!GNS_Initialize()) {
    return 0;
  }
  if (!gnss::GnssAdaptDevice::Ga01_00SetMSBMandatoryMask(this)
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetMSBMandatoryMask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_01GnssInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  if (!gnss::GnssAdaptDevice::Ga01_01SetMSAMandatoryMask(this)
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetMSAMandatoryMask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_01GnssInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  if (GNS_EaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga03_00RegisterGnsEaStatusResponse) == 1)
  {
    if (GNS_SenInitialize((uint64_t)gnss::GnssAdaptDevice::Ga02_00RegisterGnsSensStatusResponse) == 1)
    {
      if (GNS_EeInitialize((uint64_t)gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse) == 1)
      {
        char v24 = 0;
        if (gnss::GnssAdaptDevice::Ga05_04GetPlatformType(this, (unsigned __int8 *)&v24))
        {
          if (Gnm_HwInitialize(v24, 1, (uint64_t)gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd, (uint64_t)gnss::GnssAdaptDevice::Ga05_06RegBbResetCallback))
          {
            uint64_t v6 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitStatusCb Resp,%u\n", v15);
LABEL_23:
              LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
              return 0;
            }
          }
          else
          {
            if (Gnm_RegisterApiStatusCb((uint64_t)gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse))
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ApiStatusCb Resp,%u\n", v19);
              goto LABEL_23;
            }
            if (Gnm_RegisterPowerReportCb((uint64_t)gnss::GnssAdaptDevice::Ga01_02PowerReportCB))
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerRepCb Resp,%u\n", v20);
              goto LABEL_23;
            }
            if (!gnssOsa_SemInit((dispatch_semaphore_s **)this + 129, 0))
            {
              snprintf(v25, 0x400uLL, "ASSERT,%s,%d,%s", "Ga00_01GnssInit", 521, "Semaphore creation failed");
              if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v13 = mach_continuous_time();
                unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 69, "Ga00_01GnssInit", v25);
                LbsOsaTrace_WriteLog(0xEu, __str, v14, 0, 1);
              }
              gnssOsa_FlushLog();
              __assert_rtn("Ga00_01GnssInit", "ga00GnssDevice.cpp", 521, "false && \"Semaphore creation failed\"");
            }
            if (gnss::GnssAdaptDevice::getHalExtensions(this)
              && GNS_XOSetCallback((uint64_t)gnss::GnssAdaptDevice::Ga05_00RegisterGnsXoCallback) != 1)
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XoInit Resp,%u\n", v22);
              goto LABEL_23;
            }
            if (GNS_CpInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_13RegisterGnsCpStatusResponse) != 1)
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpInit,%u\n", v21);
              goto LABEL_23;
            }
            if (GNS_FtaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_14RegisterGnsFtaStatusResponse) != 1)
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FtaInit Resp,%u\n", v23);
              goto LABEL_23;
            }
            if (GNS_EcallInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_05CPECallAsyncEventCB) != 1)
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EcallInit\n");
              goto LABEL_23;
            }
            if ((gnss::GnssAdaptDevice::Ga11_00InitializeSUPL_GNS_CBs(this) & 1) == 0)
            {
              uint64_t v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
                return v6;
              }
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInit\n");
              goto LABEL_23;
            }
            uint64_t Logger = gnss::GnssAdaptDevice::getLogger(*((void *)this + 3));
            int v10 = (*(uint64_t (**)(uint64_t))(*(void *)Logger + 64))(Logger);
            gnss::GnssAdaptDevice::Ga01_07SetSecondaryLogConfig((uint64_t)this, v10);
            uint64_t v6 = 1;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(getVersionString::a_Version, 0x200uLL, "host,%s,FW,%s", "1e996c9bd release/1942", ga_HwVersion);
              unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNSS Version,%s,Init Success\n", v11, "ADP", 65, "Ga00_01GnssInit", getVersionString::a_Version);
              uint64_t v6 = 1;
              LbsOsaTrace_WriteLog(0x18u, __str, v12, 1, 1);
            }
          }
        }
        else
        {
          uint64_t v6 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm Type\n");
            goto LABEL_23;
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EeInit Resp,%u\n", v18);
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SensInit Resp,%u\n", v17);
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaInit Resp,%u\n", v16);
      goto LABEL_23;
    }
  }
  return v6;
}

void gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd(gnss::GnssAdaptDevice *a1, int a2, char *a3)
{
  char v5 = (char)a1;
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
  {
    gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(DeviceInstance, v5, a2, a3);
  }
}

uint64_t ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v1, 8);
}

size_t gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo(gnss::GnssAdaptDevice *a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned __int8 v6 = 0;
  size_t result = gnss::GnssAdaptDevice::Ga05_04GetPlatformType(a1, &v6);
  if (v6 == 1) {
    return snprintf(ga_HwVersion, 0x200uLL, "CP Fw,%s,Patch,%s,date,%s,time,%s ME Fw,%s,Patch,%s,date,%s,time,%s", a2 + 6, a2 + 26, a2 + 46, a2 + 66, a2 + 86, a2 + 106, a2 + 126, a2 + 146);
  }
  if (v6)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_10GnssSetHwVersionInfo", 770, v6);
      return LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  else
  {
    strcpy(ga_HwVersion, "8cd9669 CP 0.0.20 b673 3f12 ME 0.0.76 0882 106e CFG 0c27");
  }
  return result;
}

uint64_t newGnssDevice(void *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (*a1) {
    operator new();
  }
  return 0;
}

void sub_22B899128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_object,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::__function::__value_func<void ()(gnss::Emergency::Supl::SessionStatus const&)>::~__value_func[abi:ne180100](v33 + 100);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>::~__value_func[abi:ne180100](v33 + 96);
  std::__function::__value_func<gnss::Result ()(void)>::~__value_func[abi:ne180100](v33 + 92);
  std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](v33 + 88);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](v33 + 84);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](v33 + 80);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](v33 + 76);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](v33 + 72);
  std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](v33 + 68);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v32 + 696));
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 + 60);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v32 + 632));
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 + 52);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 + 48);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 + 44);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 + 40);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v33 + 36);
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v33 + 32);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v33 + 28);
  std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](v33 + 24);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v33 + 20);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v33 + 16);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v36, *(void **)(v32 + 264));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(v35, *(void **)(v32 + 240));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v34, *(void **)(v32 + 216));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)v33, *(void **)(v32 + 192));
  uint64_t v38 = *(void **)(v32 + 152);
  if (v38)
  {
    *(void *)(v32 + 160) = v38;
    operator delete(v38);
  }
  unsigned __int16 v39 = *v37;
  if (*v37)
  {
    *(void *)(v32 + 136) = v39;
    operator delete(v39);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v33 - 16);
  uint64_t v40 = *(void *)(v32 + 48);
  *(void *)(v32 + 48) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 48))(v40);
  }
  uint64_t v41 = *(void *)(v32 + 40);
  *(void *)(v32 + 40) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(v32 + 32);
  *(void *)(v32 + 32) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *(void *)(v32 + 24);
  *(void *)(v32 + 24) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(v32 + 16);
  *(void *)(v32 + 16) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *(void *)(v32 + 8);
  *(void *)(v32 + 8) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](&a32);
  MEMORY[0x230F4E5D0](v32, 0x10A1C40F7A34654);
  _Unwind_Resume(a1);
}

uint64_t getGnssDeviceVersion()
{
  return 2502;
}

uint64_t gnss::Device::getObjectVersionNumber(gnss::Device *this)
{
  return 2502;
}

uint64_t gnss::Device::setEmergencyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::Device::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::Device::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

void std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, a2[1]);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, a2[1]);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 9);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::DecodedRti &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::SummaryReport const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::PositionReport const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::AssistanceNeededReport const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReport const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<gnss::Result ()(gnss::Emergency::Cplane::MeasurementReportWithEstimate const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Emergency::Cplane::CellFTAssistanceRequest const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned __int16 v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL KFSt_Meas_Update(unsigned int a1, unsigned int a2, unsigned __int8 *a3, double *a4, _WORD *a5, double a6)
{
  v18[33] = *(double *)MEMORY[0x263EF8340];
  if (*((int *)a3 + 1) < 1) {
    return 0;
  }
  a3[16] = 0;
  if (*a3)
  {
    double v9 = *((double *)a3 + 4);
    double v10 = a6 - *((double *)a3 + 3);
    memset(v15, 0, sizeof(v15));
    double v14 = 0.0;
    *((double *)a3 + 6) = v10;
    uint64_t v16 = 0;
    *((void *)v15 + a1) = 0x3FF0000000000000;
    *((double *)v15 + a2) = v10;
    umeas((BOOL)a4, a2, v9, (double *)v15, v18, v17, &v14, *((double *)a3 + 7));
    double v11 = v14;
    if (v14 <= 0.0)
    {
      int v12 = 0;
      *a3 = 0;
      a3[16] = 1;
      ++*a5;
    }
    else
    {
      double v11 = *((double *)a3 + 4) * (v14 * (v18[a2] * v18[a2]));
      int v12 = *a3;
    }
    *((double *)a3 + 8) = v11;
  }
  else
  {
    int v12 = 0;
  }
  return v12 != 0;
}

uint64_t Taylor_sin_cos(uint64_t result, int *a2, int *a3)
{
  if ((int)result < 1)
  {
    if ((int)result >= -51472)
    {
      unsigned int v11 = (unsigned __int16)(1029 - result) / 0x80Bu;
      int v12 = g_Table_sinQ15[v11];
      int v9 = g_Table_sinQ15[25 - v11];
      int v6 = result + ((16471 * v11) >> 3);
      int v4 = -v12;
      goto LABEL_9;
    }
    int v7 = ((int)result + 103973) / 2059;
    int v8 = g_Table_sinQ15[v7];
    int v5 = g_Table_sinQ15[25 - v7];
    int v6 = result + 103973 - ((16471 * v7) >> 3) - 1029;
    int v4 = -v8;
  }
  else
  {
    if (result <= 0xC910)
    {
      unint64_t v10 = (result + 1029) / 0x80BuLL;
      int v4 = g_Table_sinQ15[v10];
      int v9 = g_Table_sinQ15[(25 - v10)];
      int v6 = result - ((16471 * v10) >> 3);
      goto LABEL_9;
    }
    int v3 = (103973 - (int)result) / 2059;
    int v4 = g_Table_sinQ15[v3];
    int v5 = g_Table_sinQ15[25 - v3];
    int v6 = result + ((16471 * v3) >> 3) - 102944;
  }
  int v9 = -v5;
LABEL_9:
  unsigned int v13 = (v6 * v6) >> 16;
  *a2 = v4 + ((int)(v6 * v9 - v13 * v4) >> 15);
  *a3 = v9 - ((int)(v6 * v4 + v13 * v9) >> 15);
  return result;
}

const char *formatAndWriteData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  TCU_UpdateTime((const char *)a4, *(_DWORD *)a1, *(_DWORD *)(a1 + 16), *(unsigned char *)(a1 + 20), *(__int16 *)(a1 + 22), *(_DWORD *)(a1 + 4), *(double *)(a1 + 8));
  *(_DWORD *)(a3 + 16) = 2;
  double v7 = *(double *)(a4 + 40);
  *(double *)(a3 + 8) = v7;
  Set_Mat_Size((const char *)3, (int *)(a3 + 152), 3, 1);
  *(void *)(a3 + 160) = *(void *)(a1 + 832);
  *(void *)(a3 + 168) = *(void *)(a1 + 840);
  *(void *)(a3 + 176) = *(void *)(a1 + 848);
  Set_Mat_Size((const char *)3, (int *)(a3 + 24), 3, 1);
  *(void *)(a3 + 32) = *(void *)(a1 + 128);
  *(void *)(a3 + 40) = *(void *)(a1 + 136);
  *(void *)(a3 + 48) = *(void *)(a1 + 144);
  Set_Mat_Size((const char *)3, (int *)(a3 + 56), 3, 1);
  *(void *)(a3 + 64) = *(void *)(a1 + 152);
  *(void *)(a3 + 72) = *(void *)(a1 + 160);
  *(void *)(a3 + 80) = *(void *)(a1 + 168);
  Set_Mat_Size((const char *)3, (int *)(a3 + 184), 3, 1);
  *(void *)(a3 + 192) = *(void *)(a1 + 856);
  *(void *)(a3 + 200) = *(void *)(a1 + 864);
  *(void *)(a3 + 208) = *(void *)(a1 + 872);
  char v8 = *(unsigned char *)(a1 + 784);
  if (v8) {
    char v8 = *(double *)(a1 + 200) < 200.0;
  }
  *(unsigned char *)(a3 + 216) = v8;
  *(void *)(a3 + 88) = *(void *)(a1 + 96);
  *(void *)(a3 + 96) = *(void *)(a1 + 104);
  *(void *)(a3 + 104) = *(void *)(a1 + 112);
  *(void *)(a3 + 136) = *(void *)(a1 + 120);
  *(double *)(a3 + 144) = (double)*(int *)(a1 + 24) * 0.001 * 299792458.0;
  memset(v55, 0, sizeof(v55));
  ud2var(a1 + 256, 0xBu, 1, 3u, (double *)v55);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)v55;
  *(void *)(a3 + 128) = *(void *)&v55[16];
  *(unsigned char *)(a3 + 217) = *(unsigned char *)(a1 + 1080);
  *(unsigned char *)(a3 + 219) = *(unsigned char *)(a1 + 1096);
  *(unsigned char *)(a3 + 218) = *(unsigned char *)(a1 + 1176);
  BOOL v49 = MeasSyncher_applyNewRecord(1, (_DWORD *)(a3 + 8), a2);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  if (*(unsigned char *)(a3 + 4))
  {
    int v9 = *(_DWORD *)(a1 + 4) - *(_DWORD *)a3;
    double v10 = 1.0;
    if (v9 != 1000)
    {
      int v11 = v9 - 1000;
      if (v9 < 1000) {
        int v11 = 1000 - v9;
      }
      if (v11 > 500)
      {
        double v10 = -1.0;
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v15 = *(double *)(g_TCU + 8);
          }
          else {
            double v15 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f ttick_diff=%d very far from 1000ms, ignoring DR", "DR_norm_factor", 309, v14, v15, v9);
        }
      }
      else
      {
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v13 = *(double *)(g_TCU + 8);
          }
          else {
            double v13 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f ttick_diff=%d close to 1000ms, normalizing DR", "DR_norm_factor", 303, v12, v13, v9);
        }
        double v10 = 1000.0 / (double)v9;
      }
    }
  }
  else
  {
    *(unsigned char *)(a3 + 4) = 1;
    double v10 = 1.0;
  }
  uint64_t v16 = 0;
  int v17 = 0;
  *(_DWORD *)a3 = *(_DWORD *)(a1 + 4);
  uint64_t v18 = *(void *)(a4 + 40);
  uint64_t v19 = 48;
  int v51 = 1;
  do
  {
    uint64_t v20 = a1 + v16;
    int v21 = *(_DWORD *)(a1 + v16 + 1208);
    if (((Is_Legal(v21) ^ (v21 == 0)) & 1) == 0 && (g_FPE_LogSeverity & 2) != 0)
    {
      uint64_t v22 = mach_continuous_time();
      if (g_TCU) {
        double v23 = *(double *)(g_TCU + 8);
      }
      else {
        double v23 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "constructSvMeasurements", 348, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), v23, "c legality check is different than matlab legality check!");
      int v21 = *(_DWORD *)(v20 + 1208);
    }
    if (!Is_Legal(v21)) {
      goto LABEL_78;
    }
    ++*((_DWORD *)&v52 + v21 - 1);
    uint64_t v24 = a1 + v16;
    if (*(double *)(a1 + v16 + 1288) <= 0.0) {
      goto LABEL_78;
    }
    unsigned int v25 = (v21 < 6u) & (0x2Eu >> v21);
    if (*(double *)(v24 + 1304) <= 0.0)
    {
      if (*(double *)(a1 + v16 + 1296) <= 0.0) {
        LOBYTE(v25) = 0;
      }
      if ((v25 & 1) == 0) {
        goto LABEL_78;
      }
    }
    else if (!v25)
    {
      goto LABEL_78;
    }
    long long v65 = 0u;
    memset(v64, 0, sizeof(v64));
    long long v62 = 0u;
    memset(v63, 0, sizeof(v63));
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    *(_OWORD *)&v55[8] = 0u;
    *(void *)BOOL v55 = v18;
    unsigned int v26 = *(_DWORD *)(a3 + 224);
    *(_DWORD *)&v55[8] = 1;
    DWORD2(v62) = BYTE2(v21);
    Set_Mat_Size((const char *)3, (int *)v63, 3, 1);
    *(_OWORD *)&v63[1] = *(_OWORD *)(a1 + v16 + 1216);
    v63[3] = *(void *)(a1 + v16 + 1232);
    Set_Mat_Size((const char *)3, (int *)v64, 3, 1);
    *(_OWORD *)&v64[1] = *(_OWORD *)(a1 + v16 + 1240);
    v64[3] = *(void *)(a1 + v16 + 1256);
    Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)&v55[16], 0.0);
    *(void *)&long long v56 = *(void *)(a1 + v16 + 1264);
    Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)&v59, 0.0);
    double v27 = *(double *)(v24 + 1288);
    if (v27 < 0.0)
    {
      if (g_FPE_LogSeverity)
      {
        uint64_t v28 = mach_continuous_time();
        if (g_TCU) {
          double v29 = *(double *)(g_TCU + 8);
        }
        else {
          double v29 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "svMeasSetData", 236, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), v29, v27);
      }
      g_FPE_AssertFlag = 1;
      double v27 = 1.0;
    }
    *((void *)&v59 + 1) = sqrt(v27);
    if (v10 > 0.0 && *(unsigned char *)(a1 + v16 + 1314))
    {
      double v30 = -(*(double *)(a1 + v16 + 1280) * v10);
      double v31 = v10 * (v10 * *(double *)(v24 + 1304));
      goto LABEL_48;
    }
    double v30 = *(double *)(a1 + v16 + 1272);
    if (*(unsigned char *)(a1 + v16 + 1313))
    {
      double v31 = *(double *)(a1 + v16 + 1296);
LABEL_48:
      if (v31 < 0.0)
      {
        if (g_FPE_LogSeverity)
        {
          uint64_t v32 = mach_continuous_time();
          if (g_TCU) {
            double v33 = *(double *)(g_TCU + 8);
          }
          else {
            double v33 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "svMeasSetData", 260, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), v33, v31);
        }
        g_FPE_AssertFlag = 1;
        double v31 = 1.0;
      }
      goto LABEL_61;
    }
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      uint64_t v34 = mach_continuous_time();
      if (g_TCU) {
        double v35 = *(double *)(g_TCU + 8);
      }
      else {
        double v35 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f %s", "svMeasSetData", 255, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), v35, "DO and DR are not valid");
    }
    double v31 = 100000000.0;
LABEL_61:
    if (v26 <= 7 && ((1 << v26) & 0xC1) != 0) {
      double v36 = sqrt(v31) * 10.0;
    }
    else {
      double v36 = sqrt(v31) * 5.0;
    }
    double v37 = 1.0;
    if (v36 > 1.0) {
      double v37 = v36;
    }
    *((double *)&v56 + 1) = -v30;
    *(double *)&long long v60 = v37;
    switch(*(unsigned char *)(v20 + 1208))
    {
      case 1:
        HIDWORD(v62) = 0;
        goto LABEL_76;
      case 2:
        int v38 = 1;
        goto LABEL_75;
      case 3:
        int v38 = 2;
        goto LABEL_75;
      case 4:
        HIDWORD(v62) = 3;
        goto LABEL_76;
      case 5:
        int v38 = 4;
LABEL_75:
        HIDWORD(v62) = v38;
        goto LABEL_76;
      case 6:
        goto LABEL_77;
      default:
        HIDWORD(v62) = 7;
        if ((g_FPE_LogSeverity & 1) == 0)
        {
          g_FPE_AssertFlag = 1;
LABEL_76:
          BOOL v39 = MeasSyncher_applyNewRecord(1, v55, a2);
          v51 &= v39;
          goto LABEL_77;
        }
        uint64_t v40 = mach_continuous_time();
        if (g_TCU) {
          double v41 = *(double *)(g_TCU + 8);
        }
        else {
          double v41 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unknown constellation %d", "svMeasSetConstellation", 200, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), v41, *(unsigned __int8 *)(v20 + 1208));
        g_FPE_AssertFlag = 1;
        if (HIDWORD(v62) != 5) {
          goto LABEL_76;
        }
LABEL_77:
        ++v17;
        break;
    }
LABEL_78:
    v16 += 144;
    --v19;
  }
  while (v19);
  *(_OWORD *)&v55[8] = 0u;
  long long v65 = 0u;
  memset(v64, 0, sizeof(v64));
  memset(v63, 0, sizeof(v63));
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  *(void *)BOOL v55 = v18;
  *(_DWORD *)&v55[8] = 3;
  *(_DWORD *)&v55[16] = v17;
  BOOL v42 = MeasSyncher_applyNewRecord(1, v55, a2);
  int v45 = v51 & v42;
  if ((g_FPE_LogSeverity & 0x200) != 0)
  {
    LODWORD(v44) = *(_DWORD *)a1;
    LODWORD(v43) = *(_DWORD *)(a1 + 4);
    LC_LOG_NMEA_GENERIC("%s,EPOCH,%.3f,%.3f,%d,%10.3f,%d,%d,%d,%d,%d,%d", "$PFPEX", (double)v43 * 0.001, (double)v44 * 0.001, *(__int16 *)(a1 + 22), *(double *)(a1 + 8), *(_DWORD *)(a1 + 16), v52, HIDWORD(v52), v53, HIDWORD(v53), 3);
  }
  *(_OWORD *)&v55[8] = 0u;
  long long v65 = 0u;
  memset(v64, 0, sizeof(v64));
  memset(v63, 0, sizeof(v63));
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  *(_DWORD *)&v55[8] = 4;
  *(double *)BOOL v55 = v7 + 0.6;
  size_t result = (const char *)MeasSyncher_applyNewRecord(1, v55, a2);
  if (((v49 & v45) != 1 || (result & 1) == 0) && (g_FPE_LogSeverity & 2) != 0)
  {
    unint64_t v47 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v48 = *(double *)(g_TCU + 8);
    }
    else {
      double v48 = 0.0;
    }
    return LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "formatAndWriteData", 440, v47, v48, "GnssGen formatAndWriteData: error in applying measurements to syncher!");
  }
  return result;
}

const char *LC_LOG_NMEA_GENERIC(const char *__format, ...)
{
  va_start(va, __format);
  if (g_DBfd)
  {
    uint64_t v1 = *(unsigned int *)g_DBfd;
    unint64_t v2 = (char *)(g_DBfd + v1 + 4);
    __format = (const char *)vsnprintf(v2, (10240 - v1), __format, va);
    if ((int)__format < 1
      || ((int v3 = __format + 4, __format != 300)
        ? (BOOL v4 = (__format + 4 + v1) > 0x27FE)
        : (BOOL v4 = 1),
          v4))
    {
      if (v1 >> 4 > 0x27E) {
        return __format;
      }
      strcpy(v2, "$PFPEX,ERR1*03\n");
      int v5 = (_DWORD *)g_DBfd;
      int v3 = *(_DWORD *)g_DBfd;
      int v6 = 15;
    }
    else
    {
      uint64_t v7 = (__format - 1);
      if (__format != 1)
      {
        unsigned __int8 v8 = 0;
        int v9 = v2 + 1;
        do
        {
          char v10 = *v9++;
          v8 ^= v10;
          --v7;
        }
        while (v7);
        LODWORD(v7) = v8;
      }
      __format = (const char *)sprintf(&v2[__format], "*%02X\n", v7);
      int v5 = (_DWORD *)g_DBfd;
      int v6 = *(_DWORD *)g_DBfd;
    }
    *int v5 = v3 + v6;
  }
  return __format;
}

uint64_t numOfMeasInNextEpoch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = (uint64_t)v7;
  unsigned int v9 = v6;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (Cyc_Record_IsEmpty(v7, v6)) {
    return 3;
  }
  uint64_t v28 = 0;
  char v29 = 0;
  memset(&v27[128], 0, 65);
  uint64_t v36 = 0;
  char v37 = 0;
  int v30 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v35 = 0;
  __int16 v38 = 0;
  int v39 = 0;
  memset(__dst, 0, 21);
  memset((char *)&__dst[2] + 6, 0, 11);
  __dst[5] = 0;
  __dst[6] = 0;
  char v20 = 0;
  bzero(v21, 0x2D1uLL);
  long long v26 = 0u;
  memset(v27, 0, 26);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)&v21[728] = 0u;
  memset(&v27[32], 0, 92);
  uint64_t v11 = 151;
  do
  {
    unint64_t v12 = &__dst[v11];
    *(_DWORD *)unint64_t v12 = 0;
    *((unsigned char *)v12 + 4) = 0;
    *(_OWORD *)(v12 + 1) = 0uLL;
    *(_OWORD *)(v12 + 3) = 0uLL;
    *(_OWORD *)(v12 + 5) = 0uLL;
    *(_OWORD *)(v12 + 7) = 0uLL;
    *(_OWORD *)(v12 + 9) = 0uLL;
    *(_OWORD *)(v12 + 11) = 0uLL;
    *(_OWORD *)((char *)v12 + 97) = 0uLL;
    v11 += 18;
    v12[15] = 0;
    v12[16] = 0;
    *(_DWORD *)((char *)v12 + 135) = 0;
  }
  while (v12 + 18 != (void *)v40);
  memset(v40, 0, 172);
  Cyc_Record_Peek(v8, v9, 0, __dst);
  int v13 = 0;
  uint64_t v14 = -6912;
  do
  {
    int v15 = *(_DWORD *)&v40[v14];
    int v16 = Is_Legal(v15);
    if (((v16 ^ (v15 == 0)) & 1) == 0 && (g_FPE_LogSeverity & 2) != 0)
    {
      uint64_t v17 = mach_continuous_time();
      if (g_TCU) {
        double v18 = *(double *)(g_TCU + 8);
      }
      else {
        double v18 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "numOfMeasInNextEpoch", 478, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), v18, "c legality check is different than matlab legality check!");
      int v16 = Is_Legal(*(_DWORD *)&v40[v14]);
    }
    v13 += v16;
    v14 += 144;
  }
  while (v14);
  return (v13 + 3);
}

uint64_t GnssGen_run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v9 = v8;
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v11 = (_DWORD *)(v10 + 52688);
  uint64_t result = numOfMeasInNextEpoch(v8, v10 + 52688, v10, v7, v6, v12);
  if (result)
  {
    unsigned int v14 = result;
    do
    {
      uint64_t result = Cyc_Record_Count_Free(*(_DWORD **)(v23 + 128024), 1u);
      if (result <= v14) {
        break;
      }
      uint64_t result = Cyc_Record_Count_Occupied(v11, v9);
      if (!result) {
        break;
      }
      uint64_t v34 = 0;
      char v35 = 0;
      memset(&v33[128], 0, 65);
      uint64_t v42 = 0;
      char v43 = 0;
      int v36 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      char v41 = 0;
      __int16 v44 = 0;
      int v45 = 0;
      memset(__dst, 0, sizeof(__dst));
      *(_DWORD *)((char *)&v25[3] + 1) = 0;
      *(void *)long long v25 = 0;
      *(void *)&v25[9] = 0;
      *(void *)&v25[13] = 0;
      char v26 = 0;
      bzero(v27, 0x2D1uLL);
      long long v32 = 0u;
      memset(v33, 0, 26);
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(_OWORD *)&v27[728] = 0u;
      memset(&v33[32], 0, 92);
      uint64_t v15 = 1208;
      do
      {
        int v16 = &__dst[v15];
        *(_DWORD *)int v16 = 0;
        void v16[4] = 0;
        *(_OWORD *)(v16 + 8) = 0uLL;
        *(_OWORD *)(v16 + 24) = 0uLL;
        *(_OWORD *)(v16 + 40) = 0uLL;
        *(_OWORD *)(v16 + 56) = 0uLL;
        *(_OWORD *)(v16 + 72) = 0uLL;
        *(_OWORD *)(v16 + 88) = 0uLL;
        *(_OWORD *)(v16 + 97) = 0uLL;
        v15 += 144;
        *((void *)v16 + 15) = 0;
        *((void *)v16 + 16) = 0;
        *(_DWORD *)(v16 + 135) = 0;
      }
      while (v16 + 144 != v46);
      memset(v46, 0, sizeof(v46));
      Cyc_Record_Read((uint64_t)v11, v9, __dst);
      formatAndWriteData((uint64_t)__dst, v23, v21, v22);
      uint64_t result = numOfMeasInNextEpoch(v9, (uint64_t)v11, v17, v18, v19, v20);
      unsigned int v14 = result;
    }
    while (result);
  }
  return result;
}

BOOL HswUtil_AddNmeaCS(char *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v4 = *a3;
  unsigned int v5 = v4 + 4;
  if ((int)v4 + 4 <= a2)
  {
    if (v4 < 2)
    {
      int v7 = 0;
    }
    else
    {
      LOBYTE(v7) = 0;
      uint64_t v8 = v4 - 1;
      uint64_t v9 = a1 + 1;
      do
      {
        char v10 = *v9++;
        LOBYTE(v7) = v10 ^ v7;
        --v8;
      }
      while (v8);
      int v7 = v7;
    }
    snprintf(&a1[v4], a2 - v4, "*%02x\n", v7);
    *a3 += 4;
  }
  return v5 <= a2;
}

void Pre_Positioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned int *a8, unsigned int *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a4;
  uint64_t v13 = a2;
  uint64_t v401 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a2 + 292) = 0;
  int __dst = *(__int16 *)(a1 + 6);
  double v15 = *(double *)(a1 + 16);
  long long v368 = *(_OWORD *)(a1 + 24);
  v369[0] = *(double *)(a1 + 40);
  int v16 = *a5;
  *(unsigned char *)a1 = *(unsigned char *)(a4 + 19);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a4 + 54);
  *(_DWORD *)(a2 + 284) = *(_DWORD *)(a4 + 48);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a4 + 32);
  *(void *)(a2 + 96) = *(void *)(a4 + 40);
  *(_DWORD *)(a2 + 288) = *(_DWORD *)(a4 + 180);
  long long v17 = *(_OWORD *)(a4 + 208);
  uint64_t v18 = *(void *)(a4 + 224);
  long long v19 = *(_OWORD *)(a4 + 72);
  *(void *)(a1 + 40) = *(void *)(a4 + 88);
  *(_OWORD *)(a1 + 24) = v19;
  uint64_t v20 = *(void *)(a4 + 112);
  *(_OWORD *)a2 = *(_OWORD *)(a4 + 96);
  *(void *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a4 + 240);
  long long v22 = *(_OWORD *)(a4 + 272);
  long long v21 = *(_OWORD *)(a4 + 288);
  uint64_t v23 = *(void *)(a4 + 304);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a4 + 256);
  *(void *)(a2 + 168) = v23;
  *(_OWORD *)(a2 + 152) = v21;
  *(_OWORD *)(a2 + 136) = v22;
  long long v24 = *(_OWORD *)(a4 + 320);
  *(void *)(a2 + 40) = *(void *)(a4 + 336);
  *(_OWORD *)(a2 + 24) = v24;
  double v25 = *(double *)(a4 + 160);
  *(double *)(a2 + 88) = v25;
  char v26 = (double *)(a2 + 88);
  *(void *)uint64_t v373 = 0;
  __b[0] = v17;
  *(void *)&__b[1] = v18;
  double v27 = *(double *)(a4 + 344);
  *(double *)(a2 + 48) = v27;
  *(void *)(a2 + 56) = *(void *)(a4 + 960);
  double v28 = *(double *)(a4 + 144);
  *(double *)(a2 + 64) = v28;
  long long v29 = (double *)(a2 + 64);
  double v30 = *(double *)(a4 + 152);
  *(double *)(a2 + 80) = v30;
  long long v31 = (double *)(a2 + 80);
  *(void *)(a2 + 72) = *(void *)(a4 + 168);
  __src[0] = 0.0;
  if (R8_EQ((const double *)(a2 + 64), __src))
  {
    __src[0] = 0.0;
    if (R8_EQ(v31, __src))
    {
      __src[0] = 0.0;
      double v30 = 0.0;
      if (!R8_EQ(v26, __src))
      {
        *(double *)uint64_t v373 = v25;
        double v30 = v25;
      }
    }
    else
    {
      *(double *)uint64_t v373 = v30;
    }
  }
  else
  {
    *(double *)uint64_t v373 = v28;
    double v30 = v28;
  }
  __src[0] = 0.0;
  if (!R8_EQ((const double *)v373, __src))
  {
    __src[0] = 0.0;
    if (R8_EQ(v29, __src))
    {
      *long long v29 = v30;
      double v28 = v30;
    }
    __src[0] = 0.0;
    if (R8_EQ(v31, __src)) {
      *long long v31 = v30;
    }
    __src[0] = 0.0;
    if (R8_EQ(v26, __src)) {
      double *v26 = v30;
    }
  }
  long long v32 = *(_OWORD *)(v11 + 840);
  *(_OWORD *)(v13 + 184) = v32;
  double v33 = *(double *)(v11 + 896);
  *(double *)(v13 + 200) = v33;
  *(void *)(v13 + 208) = *(void *)(v11 + 824);
  double v34 = *(double *)(v11 + 888);
  double v35 = *(double *)(v11 + 872);
  v36.f64[0] = *(float64_t *)(v11 + 856);
  float64_t v37 = *(double *)(v11 + 864);
  *(void *)(v13 + 248) = *(void *)(v11 + 880);
  int v38 = *(_DWORD *)(v11 + 12);
  *(_DWORD *)(v13 + 264) = v38;
  uint64_t v39 = *(void *)(v11 + 20);
  *(void *)(v13 + 272) = v39;
  if (*(unsigned char *)(v11 + 372))
  {
    double v40 = 0.0;
    uint64_t v41 = 17;
    do
    {
      double v40 = v40 + *(double *)(v11 + 8 * v41) * *(double *)(v11 + 8 * v41);
      unint64_t v42 = v41 - 14;
      --v41;
    }
    while (v42 > 1);
    double v43 = sqrt(v40) * *(double *)(v11 + 64);
    double v35 = v35 + v43;
    v36.f64[0] = v36.f64[0] + v43;
  }
  *(unsigned char *)(v13 + 293) = *(unsigned char *)(v11 + 18);
  int v44 = *(_DWORD *)(a1 + 8);
  if (!v44)
  {
    int v44 = *(_DWORD *)(v13 + 176);
    *(_DWORD *)(a1 + 8) = v44;
  }
  *(_DWORD *)(v13 + 296) = v44;
  *(double *)(a1 + 16) = *(double *)(v13 + 96) - v28;
  double v45 = *(double *)(a3 + 1000) * 99930819.3;
  if (*(_DWORD *)a3 || *(_DWORD *)(a3 + 8))
  {
    float64x2_t v46 = (float64x2_t)xmmword_22BB0C930;
    double v47 = 10.0;
    double v48 = 5.0;
    switch((int)v39)
    {
      case 0:
      case 1:
        goto LABEL_31;
      case 2:
        break;
      case 3:
        float64x2_t v46 = (float64x2_t)xmmword_22BB0C980;
        double v47 = 15.0;
        break;
      case 4:
        float64x2_t v46 = (float64x2_t)xmmword_22BB0C970;
        double v47 = 25.0;
        break;
      case 5:
        float64x2_t v46 = (float64x2_t)xmmword_22BB0C960;
        *(double *)&uint64_t v49 = 50.0;
        goto LABEL_28;
      case 6:
        float64x2_t v46 = (float64x2_t)xmmword_22BB0C950;
        *(double *)&uint64_t v49 = 200.0;
LABEL_28:
        double v47 = *(double *)&v49;
        break;
      case 7:
        float64x2_t v46 = (float64x2_t)xmmword_22BB0C940;
        double v47 = 350.0;
        break;
      case 8:
        float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
        double v47 = 1000000.0;
        break;
      default:
        double v48 = 1000000.0;
LABEL_31:
        int32x2_t v50 = vdup_n_s32(v39 < 2);
        v51.i64[0] = v50.u32[0];
        v51.i64[1] = v50.u32[1];
        float64x2_t v46 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v51, 0x3FuLL)), (int8x16_t)xmmword_22BB0C920, (int8x16_t)vdupq_n_s64(0x412E848000000000uLL));
        double v47 = v48;
        break;
    }
  }
  else
  {
    float64x2_t v46 = (float64x2_t)xmmword_22BB0C920;
    double v47 = 5.0;
  }
  long long v329 = v26;
  uint64_t v52 = v26 + 613;
  if (v34 > v45)
  {
    *(void *)(v13 + 72) = *(void *)(a3 + 992);
    double v34 = v45;
  }
  long long v334 = (float64x2_t *)(a1 + 24);
  *(double *)(v13 + 224) = v34 * 5.25503547;
  if (v35 > v47)
  {
    if (v39 < 4 || v27 < v47 + v47)
    {
      *(void *)(v13 + 48) = 0;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)uint64_t v13 = 0u;
    }
    double v35 = v47;
  }
  double v53 = sqrt(v35 * v35 + 0.0 + v34 * v34) * 5.25503547;
  if (v53 <= 1.0) {
    double v53 = 1.0;
  }
  *(double *)(v13 + 216) = v53;
  v36.f64[1] = v37;
  *(float64x2_t *)(v13 + 232) = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v36, v46), (int8x16_t)v46, (int8x16_t)v36), (float64x2_t)vdupq_n_s64(0x4015052804935343uLL));
  if (v53 < 21840.0) {
    __int16 v54 = (int)(v53 * 3.0) + 1;
  }
  else {
    __int16 v54 = -1;
  }
  *(_WORD *)(v13 + 256) = v54;
  if (v34 < 4156.01381) {
    __int16 v55 = (int)(v34 * 15.7651064) + 1;
  }
  else {
    __int16 v55 = -1;
  }
  *(_WORD *)(v13 + 258) = v55;
  if (v35 < 4156.01381) {
    __int16 v56 = (int)(v35 * 15.7651064) + 1;
  }
  else {
    __int16 v56 = -1;
  }
  *(_WORD *)(v13 + 260) = v56;
  *(unsigned char *)(v13 + 268) = 0;
  *(int64x2_t *)(v13 + 4976) = vdupq_n_s64(0xC023CCCCCCCCCCCDLL);
  *(void *)(v13 + 4960) = v32;
  *(double *)(v13 + 4968) = v33;
  *(_WORD *)uint64_t v52 = 0;
  uint64_t v350 = a3;
  if (v33 > 1000.0 || *(double *)&v32 > 1000.0 || v16 || (BOOL v332 = 0, v38 <= 2))
  {
    __int16 v354 = 0;
    int v353 = 0;
    char v352 = 0;
    *(void *)&v397[0] = 0;
    *(void *)uint64_t v385 = 0;
    *(void *)&v383[0] = 0;
    *(void *)&long long v356 = 0;
    BOOL v332 = 0;
    if (Core_Get_GPS_TimePos(*(_DWORD *)(v13 + 176), (unsigned char *)&v354 + 1, &v354, &v353, &v352, (double *)v397, (double *)v385, (uint64_t)__src, (double *)v383, (double *)&v356))
    {
      uint64_t v57 = v11;
      *(void *)&v370[0] = 0;
      double v355 = 0.0;
      unsigned int v58 = v353 - 3;
      BOOL v332 = (v353 - 3) < 2;
      double v59 = *(double *)v385;
      if (*(double *)v385 <= 0.0005 || HIBYTE(v354) == 0) {
        int v61 = HIBYTE(v354);
      }
      else {
        int v61 = 0;
      }
      double v62 = *(double *)v383;
      if (*(double *)v383 <= 150000.0 || v354 == 0) {
        int v64 = v354;
      }
      else {
        int v64 = 0;
      }
      if (*(int *)(v13 + 264) <= 2 && *(unsigned __int8 *)(a1 + 4) <= 0x63u && v64 && *(double *)(v13 + 200) < 1000.0)
      {
        if (v16)
        {
          *(unsigned char *)(v13 + 292) = 1;
LABEL_81:
          *(void *)(v13 + 200) = 0x4163125300000000;
          *(void *)(v13 + 184) = 0x4163125300000000;
          goto LABEL_82;
        }
        if (v58 <= 1)
        {
          double v65 = Horiz_Diff_Sqd((double *)__b, __src);
          if (v65 > 193229.156)
          {
            double v66 = v62 * (v62 * 4.0);
            if (v66 <= *(double *)(v13 + 200) * (*(double *)(v13 + 200) * 9.0)) {
              double v66 = *(double *)(v13 + 200) * (*(double *)(v13 + 200) * 9.0);
            }
            if (v65 > v66)
            {
              *(unsigned char *)(v13 + 292) = 1;
              EvCrt_v("PrePos:  PosDisc = TRUE    Between Nav Pos and Ref Pos");
            }
          }
        }
        if (*(unsigned char *)(v13 + 292)) {
          goto LABEL_81;
        }
      }
LABEL_82:
      if (v352 && v59 < 0.001 && v61 && v64)
      {
        double v67 = v59 * 99930819.3;
        *(double *)v370 = v59 * 99930819.3;
        double v68 = v62 / 3.0;
        double v355 = v62 / 3.0;
        *(double *)(v13 + 4976) = v59 * 99930819.3;
        *(double *)(v13 + 4984) = v62 / 3.0;
        if (v59 * 99930819.3 + v62 / 3.0 >= (*(double *)(v13 + 184) + *(double *)(v13 + 200)) * 1.5)
        {
          *(void *)&v370[0] = 0;
          double v355 = 0.0;
          double v68 = 0.0;
          double v67 = 0.0;
        }
        else
        {
          *(unsigned char *)(v13 + 268) = 1;
        }
      }
      else
      {
        double v69 = *(double *)(v13 + 184);
        double v68 = 0.0;
        double v67 = 0.0;
        if (v69 > 1000.0)
        {
          if (v61)
          {
            if (v59 < 0.001)
            {
              double v67 = v59 * 99930819.3;
              *(double *)v370 = v59 * 99930819.3;
              *(double *)(v13 + 4976) = v59 * 99930819.3;
              *(void *)(v13 + 4984) = 0xBFF199999999999ALL;
              if (v59 * 99930819.3 >= v69 * 1.5)
              {
                *(void *)&v370[0] = 0;
                double v67 = 0.0;
              }
            }
          }
        }
        if (v58 <= 1)
        {
          double v70 = *(double *)(v13 + 200);
          if (v70 > 1000.0)
          {
            if (v64)
            {
              double v355 = v62 / 3.0;
              *(void *)(v13 + 4976) = 0xBFF199999999999ALL;
              *(double *)(v13 + 4984) = v62 / 3.0;
              if (v62 / 3.0 >= v70 * 1.5) {
                double v355 = 0.0;
              }
              else {
                double v68 = v62 / 3.0;
              }
            }
          }
        }
      }
      uint64_t v11 = v57;
      double v351 = 0.0;
      if (R8_EQ((const double *)v370, &v351)) {
        goto LABEL_111;
      }
      double v71 = *(double *)(v13 + 96);
      double v72 = (*(double *)v397 - v71) * 1000.0;
      double v73 = -0.5;
      if (v72 > 0.0) {
        double v73 = 0.5;
      }
      double v74 = v72 + v73;
      double v75 = 2147483650.0;
      if (v74 <= 2147483650.0)
      {
        double v75 = -2147483650.0;
        if (v74 >= -2147483650.0) {
          double v75 = (double)(int)v74;
        }
      }
      double v76 = v71 + v75 / 1000.0 - *(double *)v397;
      double v77 = *v29 - v76;
      if (v77 <= 0.0005)
      {
        if (v77 >= -0.0005)
        {
LABEL_110:
          *(double *)(v13 + 64) = v76;
          *(double *)(v13 + 184) = v67;
          *(unsigned char *)uint64_t v52 = 1;
LABEL_111:
          double v351 = 0.0;
          if (!R8_EQ(&v355, &v351))
          {
            Geo2ECEF((uint64_t)__src, (uint64_t)&WGS84_Datum, v334->f64);
            double v79 = *(double *)&v356 / 3.0;
            *(double *)(v13 + 200) = v68;
            *(double *)(v13 + 208) = v79;
            *((unsigned char *)v52 + 1) = 1;
          }
          goto LABEL_113;
        }
        double v78 = -0.001;
      }
      else
      {
        double v78 = 0.001;
      }
      double v76 = v76 + v78;
      goto LABEL_110;
    }
  }
LABEL_113:
  int v80 = *(_DWORD *)(v13 + 284);
  BOOL v81 = v80 >= 1 && *(__int16 *)(a1 + 6) >= 1024 && *(unsigned char *)a1 != 0;
  *(_DWORD *)a10 = *(_DWORD *)(v13 + 176);
  double v82 = *(double *)(a1 + 16) * 1000.0;
  double v83 = -0.5;
  if (v82 <= 0.0) {
    double v84 = -0.5;
  }
  else {
    double v84 = 0.5;
  }
  double v85 = v82 + v84;
  if (v85 >= -2147483650.0) {
    int v86 = (int)v85;
  }
  else {
    int v86 = 0x80000000;
  }
  if (v85 <= 2147483650.0) {
    int v87 = v86;
  }
  else {
    int v87 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a10 + 32) = v87;
  *(_DWORD *)(a10 + 36) = v80;
  double v88 = (*(double *)(v11 + 192) - *(double *)(v11 + 152)) * 1000.0;
  if (v88 > 0.0) {
    double v83 = 0.5;
  }
  double v89 = v88 + v83;
  if (v89 <= 2147483650.0)
  {
    if (v89 >= -2147483650.0) {
      int v90 = (int)v89;
    }
    else {
      int v90 = 0x80000000;
    }
  }
  else
  {
    int v90 = 0x7FFFFFFF;
  }
  uint64_t v91 = a1;
  *(_DWORD *)(a10 + 40) = v90;
  *(void *)&__b[0] = 0;
  API_Get_UTC_Cor(1, (double *)__b);
  *(unsigned char *)(a10 + 44) = (int)*(double *)__b;
  double v92 = *(double *)(v13 + 72);
  if (fabs(v92) >= 0.0000207995328) {
    LOWORD(v93) = 0;
  }
  else {
    LOWORD(v93) = (int)(v92 * 1575420000.0);
  }
  *(_WORD *)(v13 + 280) = v93;
  double v94 = *(double *)(v13 + 216);
  uint64_t v331 = v11;
  if (v94 >= 20500.0)
  {
    *(_WORD *)(v13 + 282) = -536;
  }
  else
  {
    unsigned int v95 = *(_DWORD *)(v13 + 176);
    int v96 = *(_DWORD *)(v13 + 296);
    if (v95 <= v96 + 60000 && v95 >= v96 + 3000) {
      __int16 v98 = 1600;
    }
    else {
      __int16 v98 = 3941;
    }
    unsigned int v99 = (unsigned __int16)(v98 + (int)(v94 * 3.0));
    if (v99 <= 0xDAC) {
      unsigned int v100 = 3500;
    }
    else {
      unsigned int v100 = v99;
    }
    *(_WORD *)(v13 + 282) = v100;
    if (v100 <= 0xFA0)
    {
      unsigned __int16 v101 = *(_WORD *)(v13 + 258);
      uint64_t v102 = v350;
      goto LABEL_177;
    }
  }
  BOOL v103 = v81;
  uint64_t v104 = 0;
  unint64_t v105 = a8 + 404;
  int v106 = 999999;
  int v107 = -999999;
  do
  {
    unint64_t v108 = &v105[v104];
    int v109 = *(v108 - 385);
    if (Is_Legal(v109)
      && (int)*(v108 - 301) >= 10
      && (v109 != 4 || *(_DWORD *)v350)
      && !*(unsigned char *)(v350 + (int)GNSS_Id_To_Num_Prn_Idx(v109) + 253))
    {
      int v110 = (int)*(double *)&v105[2 * v104];
      if (v106 >= v110) {
        int v106 = (int)*(double *)&v105[2 * v104];
      }
      if (v107 <= v110) {
        int v107 = (int)*(double *)&v105[2 * v104];
      }
    }
    ++v104;
  }
  while (v104 != 48);
  int v111 = *(__int16 *)(v13 + 280);
  LOWORD(v93) = *(_WORD *)(v13 + 280);
  unsigned int v100 = *(unsigned __int16 *)(v13 + 282);
  unsigned __int16 v101 = *(_WORD *)(v13 + 258);
  uint64_t v91 = a1;
  if (v106 == 999999)
  {
    uint64_t v102 = v350;
    BOOL v81 = v103;
  }
  else
  {
    uint64_t v102 = v350;
    BOOL v81 = v103;
    if (v107 != -999999)
    {
      if (v107 - 8000 <= (signed int)-(v111 + v100)) {
        int v112 = -(v111 + v100);
      }
      else {
        int v112 = v107 - 8000;
      }
      int v113 = v100 - v111;
      int v114 = v106 + 8000;
      if (v113 < v106 + 8000) {
        int v114 = v113;
      }
      if (v114 - v112 + 1 >= 0) {
        int v115 = v114 - v112 + 1;
      }
      else {
        int v115 = v114 - v112 + 2;
      }
      unsigned int v100 = v115 >> 1;
      *(_WORD *)(v13 + 282) = v100;
      int v116 = v112 + v114;
      if (v116 < 0) {
        int v117 = ~v116;
      }
      else {
        int v117 = -v116;
      }
      int v93 = v117 >> 1;
      int v118 = v93 - v111;
      *(_WORD *)(v13 + 280) = v93;
      if (v118 < 0) {
        int v118 = -v118;
      }
      v101 += v118;
      *(_WORD *)(v13 + 258) = v101;
    }
  }
LABEL_177:
  *(_WORD *)(a10 + 24) = (int)((double)(__int16)v93 * 0.634751368);
  *(_WORD *)(a10 + 4) = (int)((double)(unsigned __int16)v100 * 0.190293673);
  *(_DWORD *)(a10 + 48) = *(_DWORD *)v102;
  *(void *)(a10 + 52) = *(void *)(v13 + 272);
  *(double *)&unint64_t v119 = (double)v101 * 0.634751368;
  *(_WORD *)(a10 + 26) = (int)*(double *)&v119;
  LOWORD(v119) = *(_WORD *)(v13 + 260);
  *(_WORD *)(a10 + 14) = (int)((double)v119 * 19.0293673);
  double v120 = *(double *)(v13 + 192) * 0.0100069229;
  double v121 = -0.5;
  if (v120 <= 0.0) {
    double v122 = -0.5;
  }
  else {
    double v122 = 0.5;
  }
  double v123 = v120 + v122;
  if (v123 <= 2147483650.0)
  {
    if (v123 < -2147483650.0 || ((int)v123 >= 0xFFFF ? (__int16 v124 = -1) : (__int16 v124 = (int)v123), (int)v123 <= 0)) {
      __int16 v124 = 1;
    }
  }
  else
  {
    __int16 v124 = -1;
  }
  *(_WORD *)(a10 + 6) = v124;
  int v125 = 3 * (int)*(double *)(v13 + 200) / 5;
  if (v125 >= 65534) {
    LOWORD(v125) = -2;
  }
  *(_WORD *)(a10 + 8) = v125 + 1;
  int v126 = 3 * (int)*(double *)(v13 + 208);
  if (v126 >= 65534) {
    LOWORD(v126) = -2;
  }
  *(_WORD *)(a10 + 10) = v126 + 1;
  double v127 = *(double *)(v13 + 48) * 100.0;
  if (v127 > 0.0) {
    double v121 = 0.5;
  }
  double v128 = v127 + v121;
  if (v128 <= 2147483650.0)
  {
    if (v128 < -2147483650.0)
    {
      int v129 = 0x80000000;
      goto LABEL_199;
    }
    int v129 = (int)v128;
    if ((int)v128 < 0xFFFF)
    {
LABEL_199:
      if (v129 <= 1) {
        LOWORD(v129) = 1;
      }
      goto LABEL_201;
    }
  }
  LOWORD(v129) = -1;
  *(_WORD *)(a10 + 14) = -1;
LABEL_201:
  uint64_t v130 = a10 + 6132;
  *(_WORD *)(a10 + 12) = v129;
  double v131 = *(double *)(v13 + 24) * 100.0;
  double v132 = -0.5;
  if (v131 <= 0.0) {
    double v133 = -0.5;
  }
  else {
    double v133 = 0.5;
  }
  double v134 = v131 + v133;
  if (v134 >= -2147483650.0) {
    __int16 v135 = (int)v134;
  }
  else {
    __int16 v135 = 0;
  }
  if (v134 <= 2147483650.0) {
    __int16 v136 = v135;
  }
  else {
    __int16 v136 = -1;
  }
  *(_WORD *)(a10 + 18) = v136;
  double v137 = *(double *)(v13 + 32) * 100.0;
  if (v137 <= 0.0) {
    double v138 = -0.5;
  }
  else {
    double v138 = 0.5;
  }
  double v139 = v137 + v138;
  if (v139 >= -2147483650.0) {
    __int16 v140 = (int)v139;
  }
  else {
    __int16 v140 = 0;
  }
  if (v139 <= 2147483650.0) {
    __int16 v141 = v140;
  }
  else {
    __int16 v141 = -1;
  }
  *(_WORD *)(a10 + 16) = v141;
  double v142 = *(double *)(v13 + 40) * 100.0;
  if (v142 > 0.0) {
    double v132 = 0.5;
  }
  double v143 = v142 + v132;
  if (v143 <= 2147483650.0)
  {
    if (v143 >= -2147483650.0) {
      int v144 = (int)v143;
    }
    else {
      LOWORD(v144) = 0;
    }
  }
  else
  {
    LOWORD(v144) = -1;
  }
  *(_WORD *)(a10 + 20) = v144;
  *(unsigned char *)(a10 + 22) = *(double *)(v13 + 56) >> 1;
  int v145 = 3 * (int)*(double *)(v13 + 248);
  if (v145 >= 254) {
    LOBYTE(v145) = -2;
  }
  *(unsigned char *)(a10 + 23) = v145 + 1;
  PP_Acq_Ass_Update_AA(v91, v13, a8, a9);
  int v348 = (unsigned __int8 *)(a10 + 6132);
  if (!v81)
  {
    for (uint64_t i = 60; i != 3996; i += 48)
    {
      unint64_t v199 = (_OWORD *)(a10 + i);
      *(_OWORD *)((char *)v199 + 29) = 0uLL;
      *unint64_t v199 = 0uLL;
      v199[1] = 0uLL;
    }
    *(_OWORD *)(a10 + 5386) = 0u;
    *(_OWORD *)(a10 + 5402) = 0u;
    *(_OWORD *)(a10 + 5354) = 0u;
    *(_OWORD *)(a10 + 5370) = 0u;
    *(_OWORD *)(a10 + 5322) = 0u;
    *(_OWORD *)(a10 + 5338) = 0u;
    *(_OWORD *)(a10 + 5290) = 0u;
    *(_OWORD *)(a10 + 5306) = 0u;
    *(_OWORD *)(a10 + 5258) = 0u;
    *(_OWORD *)(a10 + 5274) = 0u;
    *(_OWORD *)(a10 + 5242) = 0u;
    *(_WORD *)(a10 + 5418) = 0;
    memset((void *)(a10 + 3996), 255, 0x4DEuLL);
    *(_DWORD *)(a10 + 6132) = 0;
    *(unsigned char *)(a10 + 6136) = 0;
    Get_SS_Order((uint64_t)__b);
    uint64_t v200 = 0;
    while (1)
    {
      Constell_Pruint64_t n = Get_Constell_Prn(v200);
      switch(Constell_Prn)
      {
        case 1:
          int v202 = *(unsigned __int8 *)(v102 + 31);
          goto LABEL_334;
        case 2:
          if (!*(unsigned char *)(v102 + 32))
          {
            unsigned int v203 = v200;
LABEL_344:
            ++*(unsigned char *)(a10 + 6134);
            uint64_t v205 = v203;
            goto LABEL_345;
          }
          int v204 = 1;
          unsigned int v203 = v200;
LABEL_336:
          uint64_t v205 = v203;
          if (!*(unsigned char *)(a6 + v203 + 33605) || *(unsigned char *)(v102 + v203 + 253))
          {
            if (((*(unsigned char *)(v102 + v203 + 480) == 0) & ~v204) != 0)
            {
              uint64_t v206 = *(unsigned __int8 *)(a10 + 6135);
              *(_WORD *)(a10 + 2 * v206 + 4886) = v203 + 1;
              *(unsigned char *)(a10 + 6135) = v206 + 1;
              int v207 = 3;
              goto LABEL_346;
            }
            goto LABEL_344;
          }
          if (Constell_Prn != 4 || *(_DWORD *)v102)
          {
            int v207 = 0;
            uint64_t v208 = *(unsigned __int8 *)(a10 + 6133);
            *(_WORD *)(a10 + 2 * v208 + 4530) = v203 + 1;
            *(unsigned char *)(a10 + 6133) = v208 + 1;
            goto LABEL_346;
          }
          ++*(unsigned char *)(a10 + 6134);
LABEL_345:
          int v207 = 2;
LABEL_346:
          *(_DWORD *)(a10 + 4 * v205 + 5420) = v207;
LABEL_347:
          if (++v200 == 178)
          {
            *(_WORD *)(a11 + 176) = -25187;
            *(void *)&long long v246 = 0x9D9D9D9D9D9D9D9DLL;
            *((void *)&v246 + 1) = 0x9D9D9D9D9D9D9D9DLL;
            *(_OWORD *)(a11 + 144) = v246;
            *(_OWORD *)(a11 + 160) = v246;
            *(_OWORD *)(a11 + 112) = v246;
            *(_OWORD *)(a11 + 128) = v246;
            *(_OWORD *)(a11 + 80) = v246;
            *(_OWORD *)(a11 + 96) = v246;
            *(_OWORD *)(a11 + 48) = v246;
            *(_OWORD *)(a11 + 64) = v246;
            *(_OWORD *)(a11 + 16) = v246;
            *(_OWORD *)(a11 + 32) = v246;
            *(_OWORD *)a11 = v246;
            memset_pattern16((void *)(a11 + 178), &unk_22BB0C9B0, 0x164uLL);
            *(unsigned char *)(a11 + 534) = 0;
            *(_WORD *)(v91 + 2) = -1;
            *(unsigned char *)uint64_t v91 = 0;
            goto LABEL_442;
          }
          break;
        case 3:
          int v202 = *(unsigned __int8 *)(v102 + 36);
          goto LABEL_334;
        case 4:
          int v202 = *(unsigned __int8 *)(v102 + 35);
          goto LABEL_334;
        case 5:
          int v202 = *(unsigned __int8 *)(v102 + 33);
LABEL_334:
          unsigned int v203 = *((unsigned __int8 *)__b + v200) - 1;
          if (!v202) {
            goto LABEL_344;
          }
          int v204 = 0;
          goto LABEL_336;
        case 6:
          goto LABEL_347;
        default:
          unsigned int v203 = *((unsigned __int8 *)__b + v200) - 1;
          goto LABEL_344;
      }
    }
  }
  __int16 v367 = 0;
  long long v365 = 0u;
  long long v366 = 0u;
  long long v363 = 0u;
  long long v364 = 0u;
  long long v361 = 0u;
  long long v362 = 0u;
  long long v359 = 0u;
  long long v360 = 0u;
  long long v357 = 0u;
  long long v358 = 0u;
  long long v356 = 0u;
  if (!*(unsigned char *)v130 && !*(unsigned char *)(a10 + 6134) || *(unsigned char *)(a11 + 535) || *(__int16 *)(v91 + 2) == -1) {
    goto LABEL_232;
  }
  int v247 = (int)v15 - (int)*(double *)(v91 + 16) + 604800 * (__dst - *(__int16 *)(v91 + 6));
  if (v247 < 0) {
    int v247 = -v247;
  }
  if (v247 > 4) {
    goto LABEL_232;
  }
  uint64_t v248 = 0;
  double v249 = 0.0;
  do
  {
    double v249 = v249 + (v369[v248] - *(double *)(v91 + 40 + 8 * v248)) * (v369[v248] - *(double *)(v91 + 40 + 8 * v248));
    unint64_t v250 = v248 + 3;
    --v248;
  }
  while (v250 > 1);
  if (v249 > 1.0e10)
  {
LABEL_232:
    *(unsigned char *)(a11 + 535) = 0;
    *(void *)&long long v146 = 0x101010101010101;
    *((void *)&v146 + 1) = 0x101010101010101;
    long long v356 = v146;
    long long v357 = v146;
    long long v358 = v146;
    long long v359 = v146;
    long long v360 = v146;
    long long v361 = v146;
    long long v362 = v146;
    long long v363 = v146;
    long long v364 = v146;
    long long v365 = v146;
    long long v366 = v146;
    __int16 v367 = 257;
    *(_WORD *)(v91 + 2) = 178;
  }
  else
  {
    uint64_t v251 = 0;
    __int16 v252 = (_DWORD *)(a7 + 184);
    do
    {
      if ((*(_DWORD *)(a10 + 5420 + 4 * v251) - 1) >= 2
        && *v252
        && *(unsigned char *)(a6 + 33605 + v251)
        && !*(unsigned char *)(v350 + v251 + 253))
      {
        *((unsigned char *)&v356 + v251) = 1;
      }
      ++v251;
      v252 += 48;
    }
    while (v251 != 139);
    int v253 = 48;
    do
    {
      __int16 v254 = *(_WORD *)(a1 + 2);
      if ((__int16)(v254 + 1) <= 177) {
        __int16 v255 = v254 + 1;
      }
      else {
        __int16 v255 = 0;
      }
      *(_WORD *)(a1 + 2) = v255;
      int v256 = Get_Constell_Prn(v255);
      if (*(unsigned char *)(v350 + 31)) {
        BOOL v257 = 0;
      }
      else {
        BOOL v257 = v256 == 1;
      }
      if (v257)
      {
        *(_WORD *)(a1 + 2) = 31;
      }
      else
      {
        if (*(unsigned char *)(v350 + 32)) {
          BOOL v258 = 0;
        }
        else {
          BOOL v258 = v256 == 2;
        }
        if (v258)
        {
          *(_WORD *)(a1 + 2) = 55;
        }
        else if (*(unsigned char *)(v350 + 36) || v256 != 3)
        {
          if (*(unsigned char *)(v350 + 35) || v256 != 4)
          {
            if (*(unsigned char *)(v350 + 33) || v256 != 5)
            {
              if (*(unsigned char *)(v350 + 34) || v256 != 6)
              {
                if (v256 != 4 || *(_DWORD *)v350) {
                  *((unsigned char *)&v356 + *(__int16 *)(a1 + 2)) = 1;
                }
              }
              else
              {
                *(_WORD *)(a1 + 2) = 177;
              }
            }
            else
            {
              *(_WORD *)(a1 + 2) = 138;
            }
          }
          else
          {
            *(_WORD *)(a1 + 2) = 128;
          }
        }
        else
        {
          *(_WORD *)(a1 + 2) = 91;
        }
      }
      --v253;
    }
    while (v253);
  }
  LODWORD(v355) = 0;
  memset(__b, 255, sizeof(__b));
  memset_pattern16(__src, &unk_22BB0C990, 0x2C8uLL);
  __int16 v398 = 0;
  memset(v397, 0, sizeof(v397));
  __int16 v396 = 0;
  long long v395 = 0u;
  long long v394 = 0u;
  long long v393 = 0u;
  long long v392 = 0u;
  long long v391 = 0u;
  long long v390 = 0u;
  long long v389 = 0u;
  long long v388 = 0u;
  long long v387 = 0u;
  *(_OWORD *)uint64_t v385 = 0u;
  long long v386 = 0u;
  Get_SS_Order((uint64_t)v385);
  uint64_t v102 = v350;
  if (!*(unsigned char *)(v350 + 31))
  {
    *(void *)&long long v147 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v147 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)a11 = v147;
    *(_OWORD *)(a11 + 16) = v147;
    memset_pattern16((void *)(a11 + 178), &unk_22BB0C9B0, 0x40uLL);
  }
  if (!*(unsigned char *)(v350 + 32))
  {
    memset((void *)(a11 + 32), 157, 24);
    memset_pattern16((void *)(a11 + 242), &unk_22BB0C9B0, 0x30uLL);
  }
  if (!*(unsigned char *)(v350 + 36))
  {
    *(_DWORD *)(a11 + 88) = -1650614883;
    *(void *)&long long v148 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v148 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 72) = v148;
    *(_OWORD *)(a11 + 56) = v148;
    memset_pattern16((void *)(a11 + 290), &unk_22BB0C9B0, 0x48uLL);
  }
  uint64_t v130 = a10 + 6132;
  if (!*(unsigned char *)(v350 + 35))
  {
    *(void *)(a11 + 121) = 0x9D9D9D9D9D9D9D9DLL;
    *(void *)&long long v149 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v149 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 108) = v149;
    *(_OWORD *)(a11 + 92) = v149;
    memset_pattern16((void *)(a11 + 362), &unk_22BB0C9B0, 0x4AuLL);
  }
  if (!*(unsigned char *)(v350 + 33))
  {
    *(void *)(a11 + 129) = 0x9D9D9D9D9D9D9D9DLL;
    *(_WORD *)(a11 + 137) = -25187;
    memset_pattern16((void *)(a11 + 436), &unk_22BB0C9B0, 0x14uLL);
  }
  long long v330 = (_DWORD *)(a6 + 24372);
  if (!*(unsigned char *)(v350 + 34))
  {
    *(void *)(a11 + 170) = 0x9D9D9D9D9D9D9D9DLL;
    *(void *)&long long v150 = 0x9D9D9D9D9D9D9D9DLL;
    *((void *)&v150 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 155) = v150;
    *(_OWORD *)(a11 + 139) = v150;
    memset_pattern16((void *)(a11 + 456), &unk_22BB0C9B0, 0x4EuLL);
  }
  uint64_t v151 = 0;
  int v339 = 0;
  unsigned __int8 v152 = 0;
  unsigned __int8 v336 = 0;
  long long v153 = *(_OWORD *)(a11 + 144);
  v383[8] = *(_OWORD *)(a11 + 128);
  v383[9] = v153;
  v383[10] = *(_OWORD *)(a11 + 160);
  __int16 v384 = *(_WORD *)(a11 + 176);
  long long v154 = *(_OWORD *)(a11 + 80);
  v383[4] = *(_OWORD *)(a11 + 64);
  v383[5] = v154;
  long long v155 = *(_OWORD *)(a11 + 112);
  v383[6] = *(_OWORD *)(a11 + 96);
  v383[7] = v155;
  long long v156 = *(_OWORD *)(a11 + 16);
  v383[0] = *(_OWORD *)a11;
  v383[1] = v156;
  long long v157 = *(_OWORD *)(a11 + 48);
  v383[2] = *(_OWORD *)(a11 + 32);
  v383[3] = v157;
  while (2)
  {
    int v158 = Get_Constell_Prn(v152);
    switch(v158)
    {
      case 1:
        if (*(unsigned char *)(v102 + 31)) {
          goto LABEL_257;
        }
        goto LABEL_309;
      case 2:
        if (*(unsigned char *)(v102 + 32))
        {
          LongPrnIdx_To_ShortPrnIdx(v151, 0);
          unsigned int v159 = v151;
          goto LABEL_258;
        }
        goto LABEL_309;
      case 3:
        if (*(unsigned char *)(v102 + 36))
        {
          unsigned int v159 = v385[v151] - 1;
          LongPrnIdx_To_ShortPrnIdx(v159, 0);
          goto LABEL_258;
        }
        goto LABEL_309;
      case 4:
        if (*(unsigned char *)(v102 + 35))
        {
          int v160 = v385[v151];
          unsigned int v159 = v160 - 1;
          if (*(_DWORD *)v102) {
            goto LABEL_258;
          }
          *(unsigned char *)(a11 + v159) = -99;
          *(_WORD *)(a11 + 2 * v159 + 178) = -400;
          char v161 = BYTE2(v355);
          *((_WORD *)&__b[44] + BYTE2(v355) + 4) = v160;
          BYTE2(v355) = v161 + 1;
          *((_DWORD *)__src + v159) = 2;
        }
        goto LABEL_309;
      case 5:
        if (!*(unsigned char *)(v102 + 33)) {
          goto LABEL_309;
        }
LABEL_257:
        unsigned int v159 = v385[v151] - 1;
LABEL_258:
        int v162 = *(unsigned __int8 *)(a6 + v159 + 33605);
        int v163 = *(unsigned __int8 *)(v102 + v159 + 253);
        uint64_t v164 = v159;
        if (*((unsigned char *)&v356 + v159))
        {
          int v165 = (unsigned char *)(a11 + v159);
          unsigned char *v165 = -99;
          uint64_t v166 = a11 + 2 * v159;
          *(_WORD *)(v166 + 178) = -400;
          int v167 = (_WORD *)(v166 + 178);
          if (v162)
          {
            if (!v163)
            {
              if (*(_DWORD *)(a7 + 192 * v164 + 184))
              {
                int v371 = 0;
                char v372 = 0;
                int v168 = (_OWORD *)(a7 + 192 * v164);
                memset(v370, 0, 126);
                long long v169 = v168[9];
                long long v379 = v168[8];
                long long v380 = v169;
                long long v170 = v168[11];
                long long v381 = v168[10];
                long long v382 = v170;
                long long v171 = v168[5];
                long long v375 = v168[4];
                long long v376 = v171;
                long long v172 = v168[7];
                long long v377 = v168[6];
                long long v378 = v172;
                long long v173 = v168[1];
                *(_OWORD *)uint64_t v373 = *v168;
                *(_OWORD *)&v373[16] = v173;
                long long v174 = v168[3];
                *(_OWORD *)&v373[32] = v168[2];
                long long v374 = v174;
                if (Comp_CurrState(0x258u, *(__int16 *)(a1 + 6), (uint64_t)v373, (uint64_t)v370, *(double *)(a1 + 16), 22000000.0))
                {
                  Comp_AzEl((uint64_t)v334, v13 + 104, (uint64_t)v370, v165, v167, (void *)(a11 + 8 * v164 + 536), (void *)(a11 + 8 * v164 + 1960));
                  goto LABEL_266;
                }
              }
            }
          }
LABEL_265:
          if (!v162) {
            goto LABEL_284;
          }
          goto LABEL_266;
        }
        if (*(_DWORD *)(a7 + 192 * v159 + 184)) {
          goto LABEL_265;
        }
        *(unsigned char *)(a11 + v159) = -99;
        if (!v162)
        {
LABEL_284:
          __int16 v183 = v164 + 1;
          uint64_t v102 = v350;
          uint64_t v130 = a10 + 6132;
          if (v158 == 2 || *(unsigned char *)(v350 + v164 + 480))
          {
            char v186 = BYTE2(v355);
            *((_WORD *)&__b[44] + BYTE2(v355) + 4) = v183;
            BYTE2(v355) = v186 + 1;
            int v185 = 2;
          }
          else
          {
            char v184 = BYTE3(v355);
            *((_WORD *)&__b[66] + BYTE3(v355) + 6) = v183;
            BYTE3(v355) = v184 + 1;
            int v185 = 3;
          }
          *((_DWORD *)__src + v164) = v185;
          goto LABEL_309;
        }
LABEL_266:
        if (v163) {
          goto LABEL_284;
        }
        int v175 = *(char *)(a11 + v164);
        uint64_t v130 = a10 + 6132;
        if (v175 < -90)
        {
          *((_WORD *)__b + v336++) = v164 + 1;
          *((_DWORD *)__src + v164) = 0;
          uint64_t v102 = v350;
        }
        else
        {
          unsigned int v176 = *(unsigned __int8 *)(a11 + v164);
          int v177 = (char)v175;
          int v178 = v339;
          if (v177 > 1) {
            int v178 = v339 + 1;
          }
          int v339 = v178;
          if (v177 > 1) {
            unsigned int v179 = 1;
          }
          else {
            unsigned int v179 = 2;
          }
          uint64_t v102 = v350;
          if (v177 >= 2)
          {
            int v180 = *(_DWORD *)(a7 + 192 * v164 + 184);
            if (v158 == 2) {
              unsigned int v181 = 15;
            }
            else {
              unsigned int v181 = 10;
            }
            if (v180 == 2)
            {
              if (*(unsigned char *)(a10 + v164 + 5242)) {
                BOOL v187 = v181 > v176;
              }
              else {
                BOOL v187 = 0;
              }
              if (v187) {
                unsigned __int8 v182 = *(unsigned char *)(a11 + v164);
              }
              else {
                unsigned __int8 v182 = v176 + 9;
              }
            }
            else if (v180 == 1)
            {
              if (v181 > v176 && *(unsigned char *)(a10 + v164 + 5242)) {
                unsigned __int8 v182 = v176 + 9;
              }
              else {
                unsigned __int8 v182 = v176 + 100;
              }
            }
            else
            {
              unsigned __int8 v182 = 0;
            }
            *((unsigned char *)v397 + v164) = v182;
            unsigned int v188 = BYTE1(v355);
            if (BYTE1(v355))
            {
              uint64_t v189 = 0;
              while (*((unsigned __int8 *)v397 + *((__int16 *)&__b[22] + v189 + 2) - 1) >= v182)
              {
                if (BYTE1(v355) == ++v189) {
                  goto LABEL_307;
                }
              }
            }
            else
            {
              LODWORD(v189) = 0;
            }
            if (v189 < BYTE1(v355))
            {
              uint64_t v190 = (_WORD *)&__b[22] + BYTE1(v355) + 2;
              uint64_t v191 = (__int16 *)&__b[22] + BYTE1(v355) + 1;
              do
              {
                __int16 v192 = *v191--;
                *v190-- = v192;
                --v188;
              }
              while (v189 < v188);
              unsigned int v188 = v189;
            }
LABEL_307:
            *((_WORD *)&__b[22] + v188 + 2) = v164 + 1;
          }
          ++*((unsigned char *)&v355 + v179);
          *((_DWORD *)__src + v164) = v179;
        }
LABEL_309:
        ++v151;
        ++v152;
        if (v151 != 178) {
          continue;
        }
        uint64_t v193 = 0;
        while (2)
        {
          int v194 = *((char *)v383 + v193);
          if (v194 < -90 || ((int v195 = *(char *)(a11 + v193), v195 >= -90) ? (v196 = v194 < v195) : (v196 = 1), v196))
          {
            char v197 = 0;
            goto LABEL_318;
          }
          if (v194 > v195)
          {
            char v197 = 1;
LABEL_318:
            *(unsigned char *)(a10 + 5242 + v193) = v197;
          }
          if (++v193 != 178) {
            continue;
          }
          break;
        }
        memcpy((void *)(a10 + 5420), __src, 0x2C8uLL);
        memcpy((void *)(a10 + 4886), (char *)&__b[66] + 12, 0x164uLL);
        memcpy((void *)(a10 + 4530), __b, 0x164uLL);
        memcpy((void *)(a10 + 4174), (char *)&__b[22] + 4, 0x164uLL);
        int v214 = BYTE1(v355);
        *(unsigned char *)uint64_t v130 = BYTE1(v355);
        *(_WORD *)(v130 + 2) = WORD1(v355);
        int v215 = (unsigned char *)(v130 + 2);
        *(unsigned char *)(v130 + 1) = v336;
        *(unsigned char *)(a11 + 534) = v339;
        if (!v214 && !*(unsigned char *)(v130 + 4))
        {
          *(_WORD *)(a10 + 4172) = -1;
          *(void *)&long long v328 = -1;
          *((void *)&v328 + 1) = -1;
          *(_OWORD *)(a10 + 4140) = v328;
          *(_OWORD *)(a10 + 4156) = v328;
          *(_OWORD *)(a10 + 4108) = v328;
          *(_OWORD *)(a10 + 4124) = v328;
          *(_OWORD *)(a10 + 4076) = v328;
          *(_OWORD *)(a10 + 4092) = v328;
          *(_OWORD *)(a10 + 4044) = v328;
          *(_OWORD *)(a10 + 4060) = v328;
          *(_OWORD *)(a10 + 4012) = v328;
          *(_OWORD *)(a10 + 4028) = v328;
          *(_OWORD *)(a10 + 3996) = v328;
          goto LABEL_441;
        }
        long long v337 = (unsigned char *)(v130 + 3);
        LOBYTE(__src[0]) = 0;
        __src[3] = 0.0;
        LODWORD(__src[4]) = 0;
        *(double *)((char *)&__src[1] + 4) = 0.0;
        *(double *)((char *)__src + 4) = 0.0;
        memset(&__src[5], 0, 20);
        DWORD2(__b[11]) = 0;
        memset(__b, 0, 176);
        *(void *)&long long v216 = -1;
        *((void *)&v216 + 1) = -1;
        *(_OWORD *)(a10 + 3996) = v216;
        *(_OWORD *)(a10 + 4012) = v216;
        *(_OWORD *)(a10 + 4028) = v216;
        *(_OWORD *)(a10 + 4044) = v216;
        *(_OWORD *)(a10 + 4060) = v216;
        *(_OWORD *)(a10 + 4076) = v216;
        *(_OWORD *)(a10 + 4092) = v216;
        *(_OWORD *)(a10 + 4108) = v216;
        *(_OWORD *)(a10 + 4124) = v216;
        *(_OWORD *)(a10 + 4140) = v216;
        *(_OWORD *)(a10 + 4156) = v216;
        *(_WORD *)(a10 + 4172) = -1;
        uint64_t v217 = 60;
        *(void *)((char *)&__b[10] + 13) = 0;
        do
        {
          size_t v218 = (_OWORD *)(a10 + v217);
          *(_OWORD *)((char *)v218 + 29) = 0uLL;
          *size_t v218 = 0uLL;
          v218[1] = 0uLL;
          v217 += 48;
        }
        while (v217 != 3996);
        *(unsigned char *)(v130 + 4) = 0;
        double v219 = 0.0;
        long long __dsta = (void *)(a10 + 5420);
        if ((*v330 - 2) <= 4 && *(unsigned char *)(v13 + 293))
        {
          if (*(unsigned __int16 *)(a6 + 24412) - *(__int16 *)(a1 + 6) >= 0) {
            int v220 = -((*(unsigned __int16 *)(a6 + 24412) - *(__int16 *)(a1 + 6)) & 0x3F);
          }
          else {
            int v220 = (*(_WORD *)(a1 + 6) - *(_WORD *)(a6 + 24412)) & 0x3F;
          }
          if (v220 > 31) {
            v220 -= 64;
          }
          double v219 = *(double *)(a6 + 24392)
               + *(double *)(a6 + 24400) * (double)((int)*(double *)(a1 + 16) - *(_DWORD *)(a6 + 24408) + 604800 * v220);
        }
        int v340 = (unsigned char *)(v130 + 1);
        uint64_t v221 = 0;
        uint64_t v222 = a6 + 37344;
        double v223 = (_OWORD *)a7;
        while (2)
        {
          LODWORD(v397[0]) = 0;
          int v224 = Get_Constell_Prn(v221);
          LODWORD(v397[0]) = v224;
          if (v224 == 6 || (int v225 = v224, v224 == 4) && !*(_DWORD *)(a10 + 48))
          {
LABEL_392:
            ++v221;
            v223 += 12;
            if (v221 == 139) {
              goto LABEL_440;
            }
            continue;
          }
          break;
        }
        if (*(unsigned __int8 *)(a10 + 6136) <= 0x51u)
        {
          int v226 = *(char *)(a11 + v221);
          if (v226 >= 2)
          {
            long long v227 = v223[9];
            __b[8] = v223[8];
            __b[9] = v227;
            long long v228 = v223[11];
            __b[10] = v223[10];
            __b[11] = v228;
            long long v229 = v223[5];
            __b[4] = v223[4];
            __b[5] = v229;
            long long v230 = v223[7];
            __b[6] = v223[6];
            __b[7] = v230;
            long long v231 = v223[1];
            __b[0] = *v223;
            __b[1] = v231;
            long long v232 = v223[3];
            __b[2] = v223[2];
            __b[3] = v232;
            if (DWORD2(__b[11]))
            {
              uint64_t v233 = *(unsigned int *)(v13 + 284);
              double v234 = *(double *)(v13 + 192);
              if (v225 == 4)
              {
                double v235 = *v329;
              }
              else
              {
                double v235 = *(double *)(v13 + 64);
                if (v225 == 3)
                {
                  if ((*v330 - 2) <= 4)
                  {
                    double v237 = -0.0;
                    if (*(unsigned char *)(v13 + 293)) {
                      double v237 = v219;
                    }
                    double v235 = v235 + v237;
                  }
                }
                else if (v225 == 2)
                {
                  double v235 = *(double *)(v13 + 80);
                  uint64_t v236 = *(unsigned int *)(v13 + 288);
                  if ((int)v236 < (int)v233)
                  {
                    double v234 = sqrt((g_TOW_Stat_Var99_Table[v233] * -299792458.0 + g_TOW_Stat_Var99_Table[v236] * 299792458.0)* 299792458.0+ v234 * v234);
                    LODWORD(v233) = *(_DWORD *)(v13 + 288);
                  }
                }
              }
              int v238 = Comp_PrePos(v233, *(__int16 *)(a1 + 6), (uint64_t)__b, v334, v13, v226, *(unsigned __int8 *)(v13 + 268), (uint64_t)__src, v235, *(double *)(v13 + 72), *(double *)(v13 + 184), v234, *(double *)(v13 + 200), *(double *)(v13 + 208), *(double *)(v13 + 224), *(double *)(v13 + 232), *(double *)(v13 + 240), *(double *)(a1 + 16));
              LOBYTE(__src[0]) = v238;
              if (v238)
              {
                *(_DWORD *)uint64_t v373 = 0;
                v373[4] = 0;
                memset(&v373[8], 0, 37);
                unsigned __int8 v239 = LongPrnIdx_To_Prn(v221, (int *)v397);
                v373[10] = v239;
                v373[8] = v397[0];
                if (LODWORD(v397[0]) == 2)
                {
                  v373[11] = *(_DWORD *)(*(void *)(a10 + 6216) + 4 * v239 - 4);
                  v373[10] = v373[11];
                }
                v373[42] = -1;
                v373[44] = -1;
                v373[43] = *(unsigned char *)(a11 + v221);
                unsigned int v240 = *(unsigned __int16 *)(a11 + 2 * v221 + 178);
                if (v240 <= 0x168) {
                  v373[44] = v240 >> 1;
                }
                BOOL v241 = Comp_AcqAid(*(_DWORD *)(v13 + 176), *(_WORD *)(v13 + 280), *(unsigned __int16 *)(v13 + 282), (unsigned __int8 *)__src, (uint64_t)v373, *(double *)(v13 + 96));
                v373[4] = v241;
                if (*(unsigned char *)(v222 + v221)) {
                  BOOL v242 = 1;
                }
                else {
                  BOOL v242 = *(unsigned char *)(v222 + v221 + 178) != 0;
                }
                v373[12] = v242;
                v373[13] = *(unsigned char *)(v222 + v221 + 356);
                if (*(int *)(v13 + 264) <= 1 && v373[14] >= 2u) {
                  v373[14] = 1;
                }
                if (v241)
                {
                  unsigned __int8 v243 = *(unsigned char *)(a10 + 6136);
                  uint64_t v244 = a10 + 48 * v243;
                  long long v245 = *(_OWORD *)&v373[16];
                  *(_OWORD *)(v244 + 60) = *(_OWORD *)v373;
                  *(_OWORD *)(v244 + 76) = v245;
                  *(_OWORD *)(v244 + 92) = *(_OWORD *)&v373[32];
                  *(unsigned char *)(a10 + 3996 + v221) = v243;
                  ++*(unsigned char *)(a10 + 6136);
                }
              }
            }
          }
          goto LABEL_392;
        }
        gn_report_assertion_failure("PP_Update_AcqAid: num_AA overflow caught");
LABEL_440:
        uint64_t v130 = a10 + 6132;
        PP_BDS_D2_Set_Not_Visible(v348, v215, a10 + 4174, (uint64_t)__dsta);
        PP_BDS_D2_Set_Not_Visible(v340, v215, a10 + 4530, (uint64_t)__dsta);
        PP_BDS_D2_Set_Not_Visible(v337, v215, a10 + 4886, (uint64_t)__dsta);
LABEL_441:
        uint64_t v91 = a1;
LABEL_442:
        if (*(unsigned char *)(v13 + 292))
        {
          unsigned int v259 = *(unsigned __int8 *)(v91 + 4);
          if (v259 <= 0xC7) {
            *(unsigned char *)(v91 + 4) = v259 + 1;
          }
          if (*a5)
          {
            *(unsigned char *)(v13 + 292) = 0;
            goto LABEL_447;
          }
          char v262 = 0;
          unsigned __int16 v261 = a5 + 4;
          int v260 = *((_DWORD *)a5 + 1);
LABEL_450:
          if (*(unsigned char *)v130 || *(unsigned char *)(v130 + 4))
          {
            if (!v332) {
              char v262 = 1;
            }
            if (v260 == 2 || (v262 & 1) == 0)
            {
              a5[412] = 1;
              *(void *)&long long v263 = 0x101010101010101;
              *((void *)&v263 + 1) = 0x101010101010101;
              *(_OWORD *)(a5 + 380) = v263;
              *(_OWORD *)(a5 + 396) = v263;
              *(_OWORD *)(a5 + 364) = v263;
              uint64_t v264 = (const float *)(v13 + 176);
              float32x4_t v265 = vld1q_dup_f32(v264);
              for (uint64_t j = 592; j != 400; j -= 16)
                *(float32x4_t *)&a5[j] = v265;
              EvCrt_v("ChanReset ALL : PrePos2 BN %d PD %d NP %d ND %d ", v260, *(unsigned __int8 *)(v13 + 292), *(unsigned __int8 *)(v91 + 4), *a5);
              int v260 = *((_DWORD *)a5 + 1);
            }
            if (v260 && *(unsigned char *)(v13 + 292) && !v332)
            {
              for (uint64_t k = 0; k != 48; ++k)
              {
                long long v268 = &a8[k];
                int v270 = v268[19];
                long long v269 = (unsigned __int8 *)(v268 + 19);
                if (Is_Legal(v270) && *((unsigned __int8 *)a8 + k + 604) <= 0x18u)
                {
                  a5[k + 365] |= 1u;
                  long long v271 = (const float *)(v13 + 176);
                  float32x4_t v272 = vld1q_dup_f32(v271);
                  for (uint64_t m = 592; m != 400; m -= 16)
                    *(float32x4_t *)&a5[m] = v272;
                  EvCrt_v("ChanReset %d : PrePos3 %d %d %d   NP %d ND %d ", k, v269[2], *v269, *((unsigned __int8 *)a8 + k + 604), *(unsigned __int8 *)(v91 + 4), *a5);
                }
              }
            }
LABEL_496:
            if (*(_DWORD *)v261)
            {
              *((void *)v261 + 44) = 0;
              *((_OWORD *)v261 + 20) = 0u;
              *((_OWORD *)v261 + 21) = 0u;
              *((_OWORD *)v261 + 18) = 0u;
              *((_OWORD *)v261 + 19) = 0u;
              *((_OWORD *)v261 + 16) = 0u;
              *((_OWORD *)v261 + 17) = 0u;
              *((_OWORD *)v261 + 14) = 0u;
              *((_OWORD *)v261 + 15) = 0u;
              *((_OWORD *)v261 + 12) = 0u;
              *((_OWORD *)v261 + 13) = 0u;
              *((_OWORD *)v261 + 10) = 0u;
              *((_OWORD *)v261 + 11) = 0u;
              *((_OWORD *)v261 + 8) = 0u;
              *((_OWORD *)v261 + 9) = 0u;
              *((_OWORD *)v261 + 6) = 0u;
              *((_OWORD *)v261 + 7) = 0u;
              *((_OWORD *)v261 + 4) = 0u;
              *((_OWORD *)v261 + 5) = 0u;
              *((_OWORD *)v261 + 2) = 0u;
              *((_OWORD *)v261 + 3) = 0u;
              *(_OWORD *)unsigned __int16 v261 = 0u;
              *((_OWORD *)v261 + 1) = 0u;
            }
            if (*(unsigned char *)(v13 + 292)) {
              *a5 = 1;
            }
            goto LABEL_500;
          }
          memcpy(__b, (const void *)(a10 + 4530), 0x164uLL);
          long long v274 = a5;
          uint64_t v275 = 0;
          __int16 v276 = 0;
          unsigned int v277 = 0;
          int v341 = *(_DWORD *)(v13 + 176);
          int v338 = -*(unsigned __int16 *)(v13 + 280);
          __int16 v335 = *(_WORD *)(v13 + 282);
          uint64_t v333 = v13;
          while (2)
          {
            uint64_t v278 = &v274[v275 + 8];
            if (*v278)
            {
              uint64_t v279 = a10 + 4 * v275;
              if (*(_DWORD *)(v279 + 5420) || v277 > 0x2F)
              {
                uint64_t v102 = v350;
                goto LABEL_493;
              }
              LODWORD(__src[0]) = 0;
              int v280 = LongPrnIdx_To_Prn(v275, (int *)__src);
              unsigned __int8 v281 = LOBYTE(__src[0]);
              if (LODWORD(__src[0]) == 2) {
                int v280 = *(_DWORD *)(*(void *)(a10 + 6216) + 4 * (v280 - 1));
              }
              unint64_t v282 = 0;
              int v283 = (_DWORD *)(v279 + 5420);
              uint64_t v102 = v350;
              do
              {
                if ((__int16)(v275 + 1) == *((__int16 *)__b + v282))
                {
                  if (v282 <= 0xB0)
                  {
                    unint64_t v284 = v282;
                    do
                    {
                      char v285 = (_WORD *)__b + v284++;
                      *char v285 = v285[1];
                    }
                    while (v284 != 177);
                  }
                  WORD1(__b[22]) = -1;
                }
                ++v282;
              }
              while (v282 != 178);
              char v347 = v283;
              switch(v281)
              {
                case 2u:
                  __int16 v286 = 146;
                  break;
                case 3u:
                  __int16 v286 = 174;
                  break;
                case 4u:
                  if (v280 <= 0xAu) {
                    __int16 v286 = 258;
                  }
                  else {
                    __int16 v286 = 162;
                  }
                  break;
                case 5u:
                case 6u:
                  __int16 v286 = 258;
                  break;
                default:
                  __int16 v286 = 154;
                  break;
              }
              uint64_t v287 = a10 + 48 * v277;
              *(_DWORD *)(v287 + 60) = v341;
              *(unsigned char *)(v287 + 64) = 1;
              *(_DWORD *)(v287 + 68) = v281 | (v280 << 16);
              *(_DWORD *)(v287 + 72) = 0;
              *(_WORD *)(v287 + 76) = v286;
              *(_WORD *)(v287 + 78) = v335;
              *(_WORD *)(v287 + 80) = 0;
              *(_WORD *)(v287 + 82) = v338;
              *(_DWORD *)(v287 + 84) = 33562616;
              *(void *)(v287 + 88) = 0;
              *(void *)(v287 + 94) = 0;
              *(_WORD *)(v287 + 102) = -25089;
              *(unsigned char *)(v287 + 104) = 0;
              memcpy((void *)(a10 + 4530), __b, 0x164uLL);
              *(unsigned char *)(a10 + v275 + 3996) = v277;
              *(_WORD *)(a10 + 2 * v277 + 4174) = v276 + 1;
              *char v347 = 1;
              *(unsigned char *)(a10 + 6136) = ++v277;
              *int v348 = v277;
              --*(unsigned char *)(a10 + 6133);
              long long v274 = a5;
              uint64_t v13 = v333;
              if (*v278)
              {
LABEL_493:
                int v288 = &v274[v274[v275 + 186]];
                v288[365] |= 1u;
                *(_DWORD *)&v274[4 * v274[v275 + 186] + 416] = *(_DWORD *)(v13 + 176);
                EvCrt_v("ChanReset %d : PrePos1 BN %d PD %d NP %d ND %d", v274[v275 + 186], *((_DWORD *)v274 + 1), *(unsigned __int8 *)(v13 + 292), *(unsigned __int8 *)(a1 + 4), *v274);
                long long v274 = a5;
              }
            }
            ++v275;
            ++v276;
            if (v275 == 178)
            {
              uint64_t v91 = a1;
              uint64_t v130 = a10 + 6132;
              goto LABEL_496;
            }
            continue;
          }
        }
LABEL_447:
        unsigned __int16 v261 = a5 + 4;
        int v260 = *((_DWORD *)a5 + 1);
        if (v260)
        {
          char v262 = 1;
          goto LABEL_450;
        }
LABEL_500:
        *(void *)(a10 + 6360) = 0;
        if ((*(_DWORD *)(v13 + 300) & 0x80000000) == 0)
        {
          if (*(unsigned char *)v130) {
            PP_Acq_Ass_Merge_AA(v13, a10, a11, v209, v210, v211, v212, v213);
          }
          else {
            PP_Acq_Ass_Replace_AA(v13, (unsigned char *)v102, a10, a11);
          }
        }
        if (*(unsigned char *)(v102 + 32))
        {
          uint64_t v289 = 0;
          *(unsigned char *)(a10 + 6212) = 0;
          *(_OWORD *)(a10 + 6196) = 0u;
          do
          {
            if (!*(unsigned char *)(*(void *)(v102 + 440) + v289))
            {
              int v290 = 0;
              *(unsigned char *)(v130 + 79) = 14;
              goto LABEL_511;
            }
            ++v289;
          }
          while (v289 != 24);
          int v290 = 2;
LABEL_511:
          for (uint64_t n = 0; n != 56; n += 4)
            *(_DWORD *)(a10 + 6140 + n) = v290;
          uint64_t v292 = 0;
          while (2)
          {
            LODWORD(__b[0]) = 0;
            int v293 = *(__int16 *)(a10 + 2 * v292 + 4174);
            uint64_t v294 = (v293 - 1);
            if (v293 >= 1)
            {
              int v295 = LongPrnIdx_To_ShortPrnIdx((v293 - 1), __b);
              if (LODWORD(__b[0]) == 2)
              {
                int v297 = v295;
                int v298 = *(_DWORD *)(*(void *)(a10 + 6216) + 4 * v295);
                if (v298 != 2139062143)
                {
                  int v299 = v298 + 7;
                  uint64_t v300 = a10 + 4 * v294;
                  int v301 = *(_DWORD *)(v300 + 5420);
                  if (v301 == 3)
                  {
                    uint64_t v306 = a10 + 4 * v299;
                    if (!*(_DWORD *)(v306 + 6140)) {
                      --*(unsigned char *)(a10 + 6211);
                    }
                    ++*(unsigned char *)(a10 + 6212);
                    *(_DWORD *)(v306 + 6140) = 3;
                    *(_DWORD *)(*(void *)(a10 + 6224) + 4 * v299) = v295 + 1;
                    uint64_t v305 = a6 + 4 * v299;
LABEL_527:
                    *(_DWORD *)(v305 + 16488) = 3;
                  }
                  else if (v301 == 1)
                  {
                    uint64_t v302 = a10 + 4 * v299;
                    int v303 = *(_DWORD *)(v302 + 6140);
                    if (v303 != 1)
                    {
                      uint64_t v304 = *(char *)(a10 + 6210);
                      if (v304 <= 13)
                      {
                        if (!v303) {
                          --*(unsigned char *)(a10 + 6211);
                        }
                        *(unsigned char *)(a10 + v304 + 6196) = v298;
                        ++*(unsigned char *)(a10 + 6210);
                        *(_DWORD *)(v302 + 6140) = 1;
                        *(_DWORD *)(*(void *)(a10 + 6224) + 4 * v299) = v295 + 1;
                        uint64_t v305 = a6 + 4 * v299;
                        goto LABEL_527;
                      }
                    }
                    *(_DWORD *)(v300 + 5420) = 2;
                    uint64_t v307 = *v348;
                    if (v307 == *(unsigned __int8 *)(a10 + 6136))
                    {
                      EvLog_v("PP_Update_Glonass: num_viz & num_AA miss-match,  %d  %d   FrqId %d   Slot %d", *v348, v307, v299, v295 + 1);
                      uint64_t v307 = *v348;
                    }
                    uint64_t v308 = 0;
                    if (v307)
                    {
                      uint64_t v309 = v307;
                      unsigned __int8 v310 = (unsigned __int16 *)(a10 + 4174);
                      do
                      {
                        int v312 = *v310++;
                        __int16 v311 = v312;
                        if (v312 != (unsigned __int16)v293)
                        {
                          *(_WORD *)(a10 + 2 * v308 + 4174) = v311;
                          uint64_t v308 = (v308 + 1);
                        }
                        --v309;
                      }
                      while (v309);
                    }
                    if (v308 != (v307 - 1)) {
                      EvLog_nd("PP_Update_Glonass: num_vis not decremented", 2, v296, v308, v307);
                    }
                    *(_WORD *)(a10 + 2 * v308 + 4174) = -1;
                    *int v348 = v308;
                    int v313 = *(unsigned __int8 *)(a10 + 6136) - 1;
                    if (v313 == v308)
                    {
                      int v314 = *(char *)(a10 + v294 + 3996);
                      *(unsigned char *)(a10 + 6136) = v313;
                      if ((v314 & 0x80000000) == 0)
                      {
                        uint64_t v315 = a10 + 48 * v314;
                        *(_OWORD *)(v315 + 89) = 0u;
                        *(_OWORD *)(v315 + 76) = 0u;
                        *(_OWORD *)(v315 + 60) = 0u;
                        *(unsigned char *)(a10 + v294 + 3996) = -1;
                      }
                      EvCrt_v("PP_Update_Glonass:  Error:  Two Glonass SVs visible on same freq,  FrqId %d  Slot %d", v299, v297 + 1);
                    }
                  }
                }
              }
            }
            if (++v292 != 178) {
              continue;
            }
            break;
          }
          uint64_t v316 = 0;
          uint64_t v317 = a10 + 5548;
          uint64_t v102 = v350;
          uint64_t v91 = a1;
          while (2)
          {
            uint64_t v318 = a10 + 4 * v316;
            if (!*(_DWORD *)(v318 + 6140))
            {
              unint64_t v319 = 0;
              uint64_t v320 = 0;
              unsigned __int16 v321 = (_DWORD *)(v318 + 6140);
              uint64_t v322 = *(void *)(a10 + 6216);
              char v323 = 1;
              do
              {
                int v324 = *(_DWORD *)(v322 + 4 * v319);
                if (v324 == v316 - 7) {
                  *((_DWORD *)__b + v320++) = v319;
                }
                else {
                  v323 &= v324 != 2139062143;
                }
                if (v319 > 0x16) {
                  break;
                }
                ++v319;
              }
              while ((int)v320 < 2);
              if (v320 == 2 && *(int *)(v317 + 4 * SLODWORD(__b[0])) >= 2)
              {
                BOOL v325 = *(_DWORD *)(v317 + 4 * SDWORD1(__b[0])) > 1;
                if ((v323 & 1) == 0)
                {
LABEL_558:
                  BOOL v326 = 0;
                  goto LABEL_560;
                }
              }
              else
              {
                BOOL v325 = 0;
                if ((v323 & 1) == 0) {
                  goto LABEL_558;
                }
              }
              if (v320 == 1)
              {
                BOOL v326 = *(_DWORD *)(v317 + 4 * SLODWORD(__b[0])) > 1;
LABEL_560:
                if (v325 || v326)
                {
                  _DWORD *v321 = 2;
                  --*(unsigned char *)(a10 + 6211);
                  if (v320 == 2 && (v323 & 1) != 0)
                  {
                    int v327 = __b[0];
                    if (*(char *)(SLODWORD(__b[0]) + a11 + 32) < *(char *)(SDWORD1(__b[0]) + a11 + 32)) {
                      int v327 = DWORD1(__b[0]);
                    }
                    *(_DWORD *)(*(void *)(a10 + 6224) + 4 * v316) = v327 + 1;
                    *(_DWORD *)(a6 + 4 * v316 + 16488) = 3;
                  }
                }
              }
              else
              {
                if (v320) {
                  goto LABEL_558;
                }
                _DWORD *v321 = 2;
                --*(unsigned char *)(a10 + 6211);
              }
            }
            if (++v316 == 14) {
              goto LABEL_566;
            }
            continue;
          }
        }
        *(_WORD *)(v130 + 78) = 0;
        memset_pattern16((void *)(a10 + 6140), &unk_22BB0C9A0, 0x38uLL);
LABEL_566:
        SB_SBAS_PrePos(v91, v13, v102, v331, a7, a10, a11, (uint64_t)a9, a6);
        return;
      default:
        goto LABEL_309;
    }
  }
}

unsigned char *PP_BDS_D2_Set_Not_Visible(unsigned char *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          int v7 = result;
          if (*result)
          {
            unint64_t v8 = 0;
            char v9 = 0;
            do
            {
              int v18 = 0;
              int v10 = *(unsigned __int16 *)(a3 + 2 * v8);
              if ((__int16)v10 >= 1)
              {
                unsigned int v11 = v10 - 1;
                uint64_t result = (unsigned char *)LongPrnIdx_To_Prn(v10 - 1, &v18);
                BOOL v12 = v18 != 4 || result == 0;
                if (!v12 && (int)result <= 5)
                {
                  *(_WORD *)(a3 + 2 * v8) = -1;
                  *(_DWORD *)(a4 + 4 * v11) = 2;
                  ++v9;
                }
              }
              ++v8;
              unint64_t v14 = *v7;
            }
            while (v8 < v14);
            if (v9)
            {
              if (*v7)
              {
                unint64_t v15 = 0;
                LODWORD(v16) = 0;
                do
                {
                  int v17 = *(__int16 *)(a3 + 2 * v15);
                  if (v17 >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v16) = v17;
                    LODWORD(v16) = v16 + 1;
                    LOBYTE(v14) = *v7;
                  }
                  ++v15;
                }
                while (v15 < v14);
              }
              else
              {
                LODWORD(v16) = 0;
              }
              if (v16 < v14)
              {
                unint64_t v16 = v16;
                do
                {
                  if (*(__int16 *)(a3 + 2 * v16) >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v16) = -1;
                    LOBYTE(v14) = *v7;
                  }
                  ++v16;
                }
                while (v16 < v14);
              }
              *int v7 = v14 - v9;
              *a2 += v9;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t NK_VVel_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 23192;
  if ((!*(_DWORD *)(a1 + 11048) || *(int *)(a2 + 12) < 8 || *(unsigned char *)(a1 + 233)) && *(unsigned char *)v6
    || (int v7 = *(_DWORD *)(a1 + 20), (v7 - 5) < 4)
    || v7 == 4 && *(double *)(a2 + 936) > 50.0)
  {
    uint64_t result = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }
  v23[0] = 0.0;
  v23[1] = 0.0;
  double v24 = 0.0;
  Comp_NEDvar_UDU(a1 + 872, 0xBu, 8, (double (*)[3])(a2 + 832), v23);
  int v9 = *(_DWORD *)(a1 + 11048);
  BOOL v10 = v9 && !*(unsigned char *)(a1 + 233) && (*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 2 && *(double *)(a2 + 944) < 2.0;
  if (*(int *)(a2 + 12) > 8) {
    unsigned __int8 v11 = 4;
  }
  else {
    unsigned __int8 v11 = 5;
  }
  if (*(_DWORD *)(v6 + 1640) == 1 && *(double *)(a2 + 23224) < 4.0)
  {
    unsigned __int8 v11 = 0;
  }
  else if (v10 && *(unsigned __int8 *)(v6 + 1588) < 4u)
  {
    unsigned __int8 v11 = 48;
  }
  else if (*(_DWORD *)(v6 + 1624) == 1 && *(double *)(a2 + 22952) < 1.0e-16)
  {
    --v11;
  }
  double v12 = v24;
  if ((*(unsigned __int8 *)(v6 + 1589) < v11
     || *(double *)(a2 + 8424) + *(double *)(a2 + 14000) < 1.5
     || ((uint64_t v13 = *(int *)(a1 + 20), v13 > 8) ? (v14 = 1000000.0) : (v14 = dbl_22BB0CA90[v13]), v24 > v14))
    && (*(unsigned char *)(v6 + 1589)
     || *(_DWORD *)(v6 + 1644)
     || *(_DWORD *)(v6 + 1652)
     || *(_DWORD *)(v6 + 1668)
     || *(_DWORD *)(v6 + 1672)))
  {
    *(unsigned char *)a3 = 1;
  }
  else if (!*(unsigned char *)a3)
  {
    return 0;
  }
  if (v9 && !*(unsigned char *)(a1 + 233))
  {
    double v17 = *(double *)(a2 + 928);
    *(double *)(a3 + 24) = -v17;
    if (v10
      && ((v18 = *(double *)(a2 + 944), v18 < 1.0) ? (BOOL v19 = *(unsigned __int8 *)(v6 + 1588) >= 3u) : (BOOL v19 = 1),
          !v19 || v18 < 0.2)
      || v17 * v17 > v12 * 9.0)
    {
      *(void *)(a3 + 24) = 0;
    }
    uint64_t v20 = *(int *)(a1 + 20);
    if (v20 > 8) {
      double v21 = 9000000.0;
    }
    else {
      double v21 = dbl_22BB0CA00[v20];
    }
    if (v12 <= v21)
    {
      if (v20 > 8) {
        double v21 = 250000.0;
      }
      else {
        double v21 = dbl_22BB0CA48[v20];
      }
      if (v12 >= v21) {
        goto LABEL_64;
      }
    }
    else
    {
      *(void *)(a3 + 24) = 0;
    }
    double v12 = v21;
LABEL_64:
    if (v20 > 8) {
      double v22 = 1000000.0;
    }
    else {
      double v22 = dbl_22BB0CA90[v20];
    }
    double v16 = v12 + v22;
    goto LABEL_68;
  }
  *(void *)(a3 + 24) = 0;
  uint64_t v15 = *(int *)(a1 + 20);
  if (v15 >= 9) {
    double v16 = 1000000.0;
  }
  else {
    double v16 = dbl_22BB0CA90[v15];
  }
LABEL_68:
  *(double *)(a3 + 32) = v16;
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(unsigned char *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_22BB0C9F0;
  *(void *)(a3 + 64) = 0;
  return 1;
}

uint64_t Extract_GAL_INAV_ALM(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v3 = *a1;
  unsigned int v4 = *a2;
  if ((((unsigned __int16)v4 ^ (unsigned __int16)v3) & 0x3C0) != 0) {
    return 0;
  }
  unsigned int v6 = v3 >> 10;
  unsigned int v7 = v4 >> 10;
  if (v3 >> 10 != 9)
  {
    if (v6 == 8)
    {
      if (v7 == 9)
      {
        *(_WORD *)(a3 + 8) = v4;
        unsigned __int16 v12 = a2[1];
        *(_WORD *)(a3 + 10) = v12;
        *(_WORD *)(a3 + 10) = v12 & 0xFC00 | (32 * (a1[2] & 0x1F)) | (a1[3] >> 11);
        HIDWORD(v13) = a1[3];
        LODWORD(v13) = a1[4] << 16;
        *(_WORD *)(a3 + 12) = v13 >> 27;
        HIDWORD(v13) = a1[4];
        LODWORD(v13) = a1[5] << 16;
        *(_WORD *)(a3 + 14) = v13 >> 27;
        HIDWORD(v13) = a1[5];
        LODWORD(v13) = a1[6] << 16;
        *(_WORD *)(a3 + 16) = v13 >> 27;
        HIDWORD(v13) = a1[6];
        LODWORD(v13) = a1[7] << 16;
        *(_WORD *)(a3 + 18) = v13 >> 27;
        *(_WORD *)(a3 + 20) = (32 * a1[7]) & 0xFFC0 | (a2[1] >> 4) & 0x3F;
        HIDWORD(v13) = a2[1];
        LODWORD(v13) = a2[2] << 16;
        *(_WORD *)(a3 + 22) = v13 >> 20;
        HIDWORD(v13) = a2[2];
        LODWORD(v13) = a2[3] << 16;
        *(_WORD *)(a3 + 24) = v13 >> 20;
        HIDWORD(v13) = a2[3];
        LODWORD(v13) = a2[4] << 16;
        unsigned __int16 v8 = v13 >> 20;
        goto LABEL_12;
      }
    }
    else if (v6 == 7 && v7 == 8)
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
      *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 22) & 0xFFC0 | *a2 & 0x3F;
      *(_WORD *)(a3 + 24) = a2[1];
      unsigned __int16 v8 = a2[2];
LABEL_12:
      LOWORD(v11) = v8 & 0xFFE0;
      goto LABEL_13;
    }
    return 0;
  }
  if (v7 != 10) {
    return 0;
  }
  *(_WORD *)(a3 + 8) = v3;
  unsigned __int16 v9 = a1[1];
  *(_WORD *)(a3 + 10) = v9;
  *(_WORD *)(a3 + 10) = v9 & 0xFC00 | (2 * (a1[4] & 0x1FF)) | (a1[5] >> 15);
  HIDWORD(v10) = a1[5];
  LODWORD(v10) = a1[6] << 16;
  *(_WORD *)(a3 + 12) = v10 >> 31;
  HIDWORD(v10) = a1[6];
  LODWORD(v10) = a1[7] << 16;
  *(_WORD *)(a3 + 14) = v10 >> 31;
  *(_WORD *)(a3 + 16) = (2 * a1[7]) | (*a2 >> 5) & 1;
  HIDWORD(v10) = *a2;
  LODWORD(v10) = a2[1] << 16;
  *(_WORD *)(a3 + 18) = v10 >> 21;
  HIDWORD(v10) = a2[1];
  LODWORD(v10) = a2[2] << 16;
  *(_WORD *)(a3 + 20) = v10 >> 21;
  HIDWORD(v10) = a2[2];
  LODWORD(v10) = a2[3] << 16;
  *(_WORD *)(a3 + 22) = v10 >> 21;
  HIDWORD(v10) = a2[3];
  LODWORD(v10) = a2[4] << 16;
  *(_WORD *)(a3 + 24) = v10 >> 21;
  int v11 = (a2[5] >> 5) & 0x7E0 | (a2[4] << 11);
LABEL_13:
  *(_WORD *)(a3 + 26) = v11;
  *(_DWORD *)(a3 + 28) = 0;
  return 1;
}

uint64_t Gnm37_03HandleSbConfigTimeout(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SB_CONFIG_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm37_03HandleSbConfigTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ActiveReqId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm37_03HandleSbConfigTimeout", g_SbState);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
    }
    Gnm10_29SendFwActivity(3, 0);
    HIWORD(g_SbState) = 2817;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm37_03HandleSbConfigTimeout", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Gnm37_11HandleSbCfgReq(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_SB_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm37_11HandleSbCfgReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    BOOL v4 = qword_26AE53174 == 848;
    if (!g_HWStatus) {
      BOOL v4 = g_GnssHw == 4;
    }
    if (v4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm37_11HandleSbCfgReq", 264);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
      uint64_t v7 = *(unsigned __int8 *)(a1 + 12);
      uint64_t v8 = 2;
LABEL_18:
      Gnm11_00ApiStatusCB(v8, 1, v7, 14);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReqId,%u,CfgValidityMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm37_11HandleSbCfgReq", *(unsigned __int8 *)(a1 + 12), *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (g_SbState != 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Request OnGoing ReqId:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm37_11HandleSbCfgReq", g_SbState);
        LbsOsaTrace_WriteLog(0xBu, __str, v14, 0, 1);
      }
      uint64_t v7 = *(unsigned __int8 *)(a1 + 12);
      uint64_t v8 = 11;
      goto LABEL_18;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 16);
    uint64_t v17 = *(unsigned int *)(a1 + 28);
    unint64_t v18 = v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 32) << 32);
    if ((v16 & 0x200) != 0 && BYTE1(v17))
    {
      if (g_HWStatus)
      {
        if (qword_26AE53174 == 0x200000D67 && dword_26AE5317C == 1) {
          goto LABEL_25;
        }
      }
      else if (!g_GnssHw)
      {
LABEL_25:
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
LABEL_28:
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v21 = mach_continuous_time();
            unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 87, "Gnm37_11HandleSbCfgReq", 514);
            LbsOsaTrace_WriteLog(0xBu, __str, v22, 2, 1);
          }
          uint64_t v7 = *(unsigned __int8 *)(a1 + 12);
          uint64_t v8 = 1;
          goto LABEL_18;
        }
        bzero(__str, 0x410uLL);
        unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW,Bright,CfgValMask,0x%X,ForceFilter,%u\n", v19);
LABEL_27:
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
        goto LABEL_28;
      }
      int v33 = (BYTE2(v17) != 0) & (v16 >> 10);
      if (v33 == 1 && (BYTE2(v17) > 8u || ((1 << SBYTE2(v17)) & 0x116) == 0))
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
          goto LABEL_28;
        }
        bzero(__str, 0x410uLL);
        unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GpsGalBds3FiltMsk,%u\n", v39);
        goto LABEL_27;
      }
      if ((v16 & 0x800) != 0)
      {
        unsigned int v34 = BYTE3(v17);
        if (v34)
        {
          int v33 = 1;
          if (v34 != 2 && v34 != 8)
          {
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
              goto LABEL_28;
            }
            bzero(__str, 0x410uLL);
            unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GloFiltMsk,%u\n", v38);
            goto LABEL_27;
          }
        }
      }
      if ((v16 & 0x1000) != 0 && *(unsigned char *)(a1 + 32))
      {
        if (HIDWORD(v18) > 8 || ((1 << SBYTE4(v18)) & 0x114) == 0)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
            goto LABEL_28;
          }
          bzero(__str, 0x410uLL);
          unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,Bds2FiltMsk,%u\n", v35);
          goto LABEL_27;
        }
      }
      else if (!v33)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
          goto LABEL_28;
        }
        bzero(__str, 0x410uLL);
        unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GpsGalBds3FiltMsk,%u,GloFiltMsk,%u,Bds2FiltMsk,%u\n", v37, "GNM");
        goto LABEL_27;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CfgValMask,0x%X,GpsGalBds3FiltMsk,%u,GloFiltMsk,%u,Bds2FiltMsk,%u\n", v36, "GNM");
        goto LABEL_33;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Mask,%u,ForceFilter,%u\n", v40);
LABEL_33:
      LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
    }
    *(void *)uint64_t v41 = qword_26AE5415E;
    *(void *)&v41[5] = *(uint64_t *)((char *)&qword_26AE5415E + 5);
    int v24 = *(_DWORD *)(a1 + 16);
    if ((v24 & 1) != 0 && v41[0] != *(unsigned __int8 *)(a1 + 20))
    {
      v41[0] = *(unsigned char *)(a1 + 20);
      char v25 = 1;
      if ((v24 & 2) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      char v25 = 0;
      if ((v24 & 2) == 0) {
        goto LABEL_41;
      }
    }
    if (v41[1] != *(unsigned __int8 *)(a1 + 21))
    {
      v41[1] = *(unsigned char *)(a1 + 21);
      char v25 = 1;
    }
LABEL_41:
    if ((v24 & 4) != 0 && v41[2] != *(unsigned __int8 *)(a1 + 22))
    {
      v41[2] = *(unsigned char *)(a1 + 22);
      char v25 = 1;
    }
    if ((v24 & 8) != 0 && v41[3] != *(unsigned __int8 *)(a1 + 23))
    {
      v41[3] = *(unsigned char *)(a1 + 23);
      char v25 = 1;
    }
    if ((v24 & 0x10) != 0 && v41[4] != *(unsigned __int8 *)(a1 + 24))
    {
      v41[4] = *(unsigned char *)(a1 + 24);
      char v25 = 1;
    }
    if ((v24 & 0x20) != 0 && v41[5] != *(unsigned __int8 *)(a1 + 25))
    {
      v41[5] = *(unsigned char *)(a1 + 25);
      char v25 = 1;
    }
    if ((v24 & 0x40) != 0 && v41[6] != *(unsigned __int8 *)(a1 + 26))
    {
      v41[6] = *(unsigned char *)(a1 + 26);
      char v25 = 1;
    }
    if ((v24 & 0x80) != 0 && v41[7] != *(unsigned __int8 *)(a1 + 27))
    {
      v41[7] = *(unsigned char *)(a1 + 27);
      char v25 = 1;
    }
    if ((v24 & 0x100) != 0 && v41[8] != *(unsigned __int8 *)(a1 + 28))
    {
      v41[8] = *(unsigned char *)(a1 + 28);
      char v25 = 1;
    }
    if ((v24 & 0x200) != 0 && v41[9] != *(unsigned __int8 *)(a1 + 29))
    {
      v41[9] = *(unsigned char *)(a1 + 29);
      char v25 = 1;
    }
    if ((v24 & 0x400) != 0 && v41[10] != *(unsigned __int8 *)(a1 + 30))
    {
      v41[10] = *(unsigned char *)(a1 + 30);
      char v25 = 1;
    }
    if ((v24 & 0x800) != 0 && v41[11] != *(unsigned __int8 *)(a1 + 31))
    {
      v41[11] = *(unsigned char *)(a1 + 31);
      char v25 = 1;
    }
    if ((v24 & 0x1000) != 0 && v41[12] != *(unsigned __int8 *)(a1 + 32))
    {
      v41[12] = *(unsigned char *)(a1 + 32);
    }
    else if ((v25 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Chip Config matches Requested Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm37_11HandleSbCfgReq");
        LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
      }
      uint64_t v28 = *(unsigned __int8 *)(a1 + 12);
      uint64_t v29 = 0;
LABEL_82:
      Gnm11_00ApiStatusCB(v29, 1, v28, 14);
      g_SbState = 234881279;
      return 0;
    }
    size_t v30 = *(unsigned __int8 *)(a1 + 12);
    if (!AgpsFsmStartTimer(0x802C06u, 0xFAu))
    {
      Gnm10_29SendFwActivity(3, 1);
      Gnm38_12SendSBCfg(v30, 0x53u, (uint64_t)v41);
      qword_26AE5415E = *(void *)v41;
      *(uint64_t *)((char *)&qword_26AE5415E + 5) = *(void *)&v41[5];
      LOBYTE(g_SbState) = *(unsigned char *)(a1 + 12);
      BYTE1(g_SbState) = 1;
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v31 = mach_continuous_time();
      unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 69, "Gnm37_04ChkSendSbRequest", 1544);
      LbsOsaTrace_WriteLog(0xBu, __str, v32, 0, 1);
    }
    uint64_t v29 = 11;
    uint64_t v28 = v30;
    goto LABEL_82;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm37_11HandleSbCfgReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

size_t Gnm37_12HandleSbConfigRsp(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SbCfgRsp SeqNum,%u,Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm37_12HandleSbConfigRsp", a2, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    if (a2 == 239)
    {
      if (a1 != 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetStatusError,%c\n");
          goto LABEL_19;
        }
LABEL_20:
        size_t result = Gnm10_29SendFwActivity(3, 0);
        BYTE2(g_SbState) = 1;
        return result;
      }
LABEL_12:
      Gnm37_01UpdateSbCfgFromChip(a3);
      goto LABEL_20;
    }
    if (a2 == 236)
    {
      if (a1 != 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBDfltCfg SeqNo,%X,Status,%c\n", v8, "GNM");
LABEL_19:
          LbsOsaTrace_WriteLog(0xBu, __str, v9, 0, 1);
          goto LABEL_20;
        }
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    int v13 = g_SbState;
    if (g_SbState == a2)
    {
      if (!AgpsFsmStopTimer(8399878) || !LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
LABEL_24:
        if (a1 == 32)
        {
          Gnm37_01UpdateSbCfgFromChip(a3);
          HIBYTE(g_SbState) = 0;
          size_t result = Gnm10_29SendFwActivity(3, 0);
          BYTE2(g_SbState) = 1;
        }
        else
        {
          size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v16 = mach_continuous_time();
            unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBDReqErr SeqNo,%X,Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm37_12HandleSbConfigRsp", 770, a2, a1);
            size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v17, 0, 1);
          }
          HIBYTE(g_SbState) = 11;
          if (v13 == a2) {
            return Gnm38_12SendSBCfg(0xEFuLL, 0x47u, 0);
          }
        }
        return result;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_24;
      }
      bzero(__str, 0x410uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ActiveId,%u,ReqId,%u\n", v15);
    }
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
    goto LABEL_24;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SbCfgRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm37_12HandleSbConfigRsp", 513);
    return LbsOsaTrace_WriteLog(0xBu, __str, v12, 0, 1);
  }
  return result;
}

unsigned __int8 *Gnm37_01UpdateSbCfgFromChip(unsigned __int8 *result)
{
  uint64_t v1 = result;
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v2 = qword_26AE5415E;
  int v3 = BYTE1(qword_26AE5415E);
  int v4 = BYTE2(qword_26AE5415E);
  int v5 = BYTE3(qword_26AE5415E);
  int v6 = BYTE4(qword_26AE5415E);
  int v7 = BYTE5(qword_26AE5415E);
  int v8 = BYTE6(qword_26AE5415E);
  int v9 = HIBYTE(qword_26AE5415E);
  int v41 = byte_26AE54166;
  int v40 = byte_26AE54167;
  int v39 = byte_26AE54168;
  int v38 = byte_26AE54169;
  int v37 = byte_26AE5416A;
  if (qword_26AE5415E != *result)
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LegacyFta Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v2, *v1);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    LOBYTE(v2) = *v1;
  }
  if (v3 != v1[1])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EFA Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v3, v1[1]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
    }
    LOBYTE(v3) = v1[1];
  }
  if (v4 != v1[2])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StatSpurCanclCfg Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v4, v1[2]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
    }
    LOBYTE(v4) = v1[2];
  }
  if (v5 != v1[3])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DynSpurCanclCfg Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v5, v1[3]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
    }
    LOBYTE(v5) = v1[3];
  }
  if (v6 != v1[4])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: JammerDetect Host,%u,Chip,%u \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v6, v1[4]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
    }
    LOBYTE(v6) = v1[4];
  }
  if (v7 != v1[5])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LegacyBlanking Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v7, v1[5]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
    }
    LOBYTE(v7) = v1[5];
  }
  if (v8 != v1[6])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankGpsGalBds3 Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v8, v1[6]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
    }
    LOBYTE(v8) = v1[6];
  }
  if (v9 != v1[7])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankGlo Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v9, v1[7]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
    }
    LOBYTE(v9) = v1[7];
  }
  if (v41 != v1[8])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankBds2 Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v41, v1[8]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
    }
    LOBYTE(v41) = v1[8];
  }
  if (v40 != v1[9])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ForceFilter Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v40, v1[9]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v29, 4, 1);
    }
    LOBYTE(v40) = v1[9];
  }
  if (v39 != v1[10])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsGalBds3FiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v39, v1[10]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v31, 4, 1);
    }
    LOBYTE(v39) = v1[10];
  }
  if (v38 != v1[11])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GloFiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v38, v1[11]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v33, 4, 1);
    }
    LOBYTE(v38) = v1[11];
  }
  char v34 = v37;
  if (v37 != v1[12])
  {
    size_t result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v35 = mach_continuous_time();
      unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bds2FiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v37, v1[12]);
      size_t result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v36, 4, 1);
    }
    char v34 = v1[12];
  }
  LOBYTE(qword_26AE5415E) = v2;
  BYTE1(qword_26AE5415E) = v3;
  BYTE2(qword_26AE5415E) = v4;
  BYTE3(qword_26AE5415E) = v5;
  BYTE4(qword_26AE5415E) = v6;
  BYTE5(qword_26AE5415E) = v7;
  BYTE6(qword_26AE5415E) = v8;
  HIBYTE(qword_26AE5415E) = v9;
  byte_26AE54166 = v41;
  byte_26AE54167 = v40;
  byte_26AE54168 = v39;
  byte_26AE54169 = v38;
  byte_26AE5416A = v34;
  return result;
}

uint64_t Gnm37_13HandleSbStopFwActResp(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (BYTE2(g_SbState))
  {
    char v1 = result;
    if (BYTE1(g_SbState)) {
      size_t result = Gnm11_00ApiStatusCB(HIBYTE(g_SbState), 1, g_SbState, 14);
    }
    if ((v1 & 1) == 0)
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FW activity Stop Failure Id,%u,AsyncRsp,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm37_13HandleSbStopFwActResp", g_SbState, HIBYTE(g_SbState));
        size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
      }
    }
    g_SbState = 234881279;
  }
  return result;
}

BOOL Gnm37_25MapSbCfgGnmToPlcBright(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 5);
  int v4 = *(unsigned __int8 *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = v4;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 10);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 11);
  BOOL result = Gnm37_20GetPlcEBlankingCfg((unsigned char *)a2);
  *(unsigned char *)(a1 + 3) = result;
  char v6 = *(unsigned char *)(a2 + 6) != 0;
  if (*(unsigned char *)(a2 + 7)) {
    v6 |= 2u;
  }
  if (*(unsigned char *)(a2 + 8)) {
    v6 |= 4u;
  }
  *(unsigned char *)(a1 + 11) = v6;
  char v7 = *(unsigned char *)(a2 + 2) != 0;
  if (v4) {
    v7 |= 2u;
  }
  *(unsigned char *)(a1 + 15) = v7;
  *(unsigned char *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 6) = 0;
  return result;
}

BOOL Gnm37_20GetPlcEBlankingCfg(unsigned char *a1)
{
  return a1[6] || a1[7] || a1[8] || a1[10] || a1[11] || a1[12];
}

BOOL Gnm37_26MapSbCfgGnmToPlcSunshine(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 3) = *(_WORD *)(a2 + 4);
  a3.i32[0] = *(_DWORD *)(a2 + 9);
  int16x8_t v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.unsigned int i8 = vext_s8(*(int8x8_t *)v5.i8, *(int8x8_t *)v5.i8, 2uLL);
  *(_DWORD *)(a1 + 6) = vmovn_s16(v5).u32[0];
  BOOL result = Gnm37_20GetPlcEBlankingCfg((unsigned char *)a2);
  *(unsigned char *)(a1 + 10) = result;
  char v7 = *(unsigned char *)(a2 + 6) != 0;
  if (*(unsigned char *)(a2 + 7)) {
    v7 |= 2u;
  }
  if (*(unsigned char *)(a2 + 8)) {
    v7 |= 4u;
  }
  *(unsigned char *)(a1 + 5) = v7;
  char v8 = *(unsigned char *)(a2 + 2) != 0;
  if (*(unsigned char *)(a2 + 3)) {
    v8 |= 2u;
  }
  *(unsigned char *)(a1 + 2) = v8;
  *(unsigned char *)(a1 + 11) = 0;
  return result;
}

uint64_t Gnm37_27MapSbCfgPlcToGnmBright(uint64_t result, uint64_t a2)
{
  *(unsigned char *)BOOL result = *(unsigned char *)a2;
  *(unsigned char *)(result + 1) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(result + 5) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 12);
  *(_WORD *)(result + 11) = *(_WORD *)(a2 + 13);
  char v2 = *(unsigned char *)(a2 + 15);
  if (v2) {
    *(unsigned char *)(result + 2) = 1;
  }
  if ((v2 & 2) != 0) {
    *(unsigned char *)(result + 3) = 1;
  }
  char v3 = *(unsigned char *)(a2 + 11);
  if ((v3 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 11) & 2) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    *(unsigned char *)(result + 7) = 1;
    if ((v3 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *(unsigned char *)(result + 6) = 1;
  if ((v3 & 2) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v3 & 4) != 0) {
LABEL_8:
  }
    *(unsigned char *)(result + 8) = 1;
LABEL_9:
  *(unsigned char *)(result + 9) = 0;
  return result;
}

uint64_t Gnm37_28MapSbCfgPlcToGnmSunshine(uint64_t result, uint64_t a2, uint8x8_t a3)
{
  *(_WORD *)BOOL result = *(_WORD *)a2;
  *(_WORD *)(result + 4) = *(_WORD *)(a2 + 3);
  a3.i32[0] = *(_DWORD *)(a2 + 6);
  int16x8_t v3 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v3.unsigned int i8 = vext_s8(*(int8x8_t *)v3.i8, *(int8x8_t *)v3.i8, 6uLL);
  *(_DWORD *)(result + 9) = vmovn_s16(v3).u32[0];
  char v4 = *(unsigned char *)(a2 + 2);
  if (v4) {
    *(unsigned char *)(result + 2) = 1;
  }
  if ((v4 & 2) != 0) {
    *(unsigned char *)(result + 3) = 1;
  }
  char v5 = *(unsigned char *)(a2 + 5);
  if (v5)
  {
    *(unsigned char *)(result + 6) = 1;
    if ((v5 & 2) == 0)
    {
LABEL_7:
      if ((v5 & 4) == 0) {
        return result;
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a2 + 5) & 2) == 0)
  {
    goto LABEL_7;
  }
  *(unsigned char *)(result + 7) = 1;
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_8:
  *(unsigned char *)(result + 8) = 1;
  return result;
}

__n128 GN_GPS_Get_LibVersion(char *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(unsigned __int16 *)(xmmword_26AE66C88 + 472);
  unsigned int v3 = *(_DWORD *)(xmmword_26AE66C88 + 476);
  char v4 = *(unsigned char *)(xmmword_26AE66C88 + 480);
  char v5 = *(unsigned char *)(xmmword_26AE66C88 + 481);
  char v6 = (uint64_t *)xmmword_26AE66D08;
  if (__PAIR64__(*(_DWORD *)(xmmword_26AE66D08 + 12), *(unsigned __int16 *)(xmmword_26AE66D08 + 8)) != __PAIR64__(v3, v2))
  {
    *(_WORD *)(xmmword_26AE66D08 + 8) = v2;
    *((_DWORD *)v6 + 3) = v3;
    *((unsigned char *)v6 + 16) = v4;
    *((unsigned char *)v6 + 17) = v5;
    uint64_t v7 = *v6 + 18;
    uint64_t v18 = *v6;
    unint64_t v19 = v7;
    v17[0] = v18;
    v17[1] = v18;
    sprintf_03d((uint64_t)v17, v2);
    char v8 = (unsigned char *)v17[0]++;
    *char v8 = 45;
    if (v17[0] >= v19) {
      v17[0] = v18;
    }
    unint64_t v9 = *((unsigned int *)v6 + 3);
    v20[0] = hexTABLE[v9 >> 28];
    v20[1] = hexTABLE[(v9 >> 24) & 0xF];
    hex6((uint64_t)v17, v9, v20, 2);
    uint64_t v10 = (unsigned char *)v17[0]++;
    *uint64_t v10 = 45;
    if (v17[0] >= v19) {
      v17[0] = v18;
    }
    sprintf_02d(v17, *((unsigned __int8 *)v6 + 16));
    unsigned __int16 v11 = (unsigned char *)v17[0]++;
    *unsigned __int16 v11 = 46;
    if (v17[0] >= v19) {
      v17[0] = v18;
    }
    sprintf_02d(v17, *((unsigned __int8 *)v6 + 17));
  }
  long long v12 = *(_OWORD *)((char *)v6 + 18);
  long long v13 = *(_OWORD *)((char *)v6 + 50);
  *((_OWORD *)a1 + 1) = *(_OWORD *)((char *)v6 + 34);
  *((_OWORD *)a1 + 2) = v13;
  *(_OWORD *)a1 = v12;
  __n128 result = *(__n128 *)((char *)v6 + 66);
  long long v15 = *(_OWORD *)((char *)v6 + 82);
  long long v16 = *(_OWORD *)((char *)v6 + 98);
  *((_DWORD *)a1 + 24) = *(_DWORD *)((char *)v6 + 114);
  *((_OWORD *)a1 + 4) = v15;
  *((_OWORD *)a1 + 5) = v16;
  *((__n128 *)a1 + 3) = result;
  return result;
}

uint64_t GN_GPS_Initialise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v76 = *MEMORY[0x263EF8340];
  char v6 = (gnss::GnssAdaptDevice *)mach_continuous_time();
  unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)v6);
  uint64_t v8 = 10;
  do
  {
    *(_DWORD *)&v74[4 * v8 - 16] = v7;
    unint64_t v9 = v8-- + 1;
  }
  while (v9 > 1);
  Last_Published_Nav_Data_TTag = 0;
  Last_Published_Raw_Meas_TTag = 0;
  _MergedGlobals_1 = 0;
  inited = GNSS_Init_p_list(v6);
  GNSS_Clear_DataAreas((uint64_t)inited, v11, v12, v13, v14, v15);
  uint64_t v16 = *((void *)&g_GN_GPS_Data_p_list + 1);
  **((void **)&g_GN_GPS_Data_p_list + 1) = 0;
  *(void *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 16) = 0;
  GNSS_HL_Data_Bases_Clear();
  EvCrt_v("GN_GPS_Initialise: ");
  g_Enable_Nav_Debug = 4;
  uint64_t v17 = 1;
  g_Enable_GNB_Debug = 1;
  g_Enable_Event_Log = 2;
  g_Enable_LCD_Debug = 515;
  uint64_t v18 = xmmword_26AE66D08;
  *(_WORD *)(xmmword_26AE66D08 + 8) = 0;
  *(_DWORD *)(v18 + 12) = 0;
  *(_DWORD *)(v18 + 21) = 1717660783;
  *(_DWORD *)(v18 + 18) = 1868720492;
  *((void *)&__src[1] + 1) = v18 + 34;
  LOBYTE(v19) = 32;
  *(unsigned char *)(v18 + 25) = 32;
  uint64_t v20 = (unsigned char *)(v18 + 25);
  *(void *)&__src[1] = v18 + 25;
  *((void *)&__src[0] + 1) = v18 + 25;
  if ((unint64_t)(v18 + 26) < *((void *)&__src[1] + 1)) {
    uint64_t v20 = (unsigned char *)(v18 + 26);
  }
  strcpy(v75, " 2");
  do
  {
    *(void *)&__src[0] = v20 + 1;
    *uint64_t v20 = v19;
    uint64_t v20 = *(unsigned char **)&__src[0];
    if (*(void *)&__src[0] >= *((void *)&__src[1] + 1))
    {
      uint64_t v20 = *(unsigned char **)&__src[1];
      *(void *)&__src[0] = *(void *)&__src[1];
    }
    int v19 = v75[v17++];
  }
  while (v19);
  *(void *)&__src[0] = v20 + 1;
  *uint64_t v20 = 46;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    *(void *)&__src[0] = *(void *)&__src[1];
  }
  digit2((uint64_t)__src, 4u, v75, 0, 0);
  uint64_t v21 = (unsigned char *)(*(void *)&__src[0])++;
  *uint64_t v21 = 46;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    uint64_t v22 = *(unsigned char **)&__src[1];
  }
  else {
    uint64_t v22 = *(unsigned char **)&__src[0];
  }
  *(void *)&__src[0] = v22 + 1;
  *uint64_t v22 = 73;
  if (*(void *)&__src[0] >= *((void *)&__src[1] + 1)) {
    unsigned __int16 v23 = *(unsigned char **)&__src[1];
  }
  else {
    unsigned __int16 v23 = *(unsigned char **)&__src[0];
  }
  *(void *)&__src[0] = v23 + 1;
  *unsigned __int16 v23 = 45;
  strcpy((char *)(v18 + 34), "230302-000-00000000-00.00 Nov 10 2024 01:22:30");
  *(void *)uint64_t v18 = v18 + 41;
  *(unsigned char *)(v18 + 118) = 0;
  *(_DWORD *)&word_26AE77066 = 0;
  if (byte_26AE77064 == 1)
  {
    __int16 v24 = word_26AE7706A + 1;
  }
  else
  {
    __int16 v24 = 1;
    byte_26AE77064 = 1;
  }
  word_26AE7706A = v24;
  GNSS_Mark_Restart(0);
  DWORD1(v73) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog("GN_GPS_Initialise:  Read NV_Store NO Data");
  bzero(__src, 0x59A0uLL);
  for (uint64_t i = 184; i != 1976; i += 56)
  {
    uint64_t v26 = (char *)__src + i;
    *((_DWORD *)v26 + 12) = 0;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_OWORD *)v26 + 2) = 0uLL;
    *(_OWORD *)uint64_t v26 = 0uLL;
  }
  for (uint64_t j = 1976; j != 5816; j += 120)
  {
    uint64_t v28 = (char *)__src + j;
    *((_DWORD *)v28 + 28) = 0;
    *((_OWORD *)v28 + 5) = 0uLL;
    *((_OWORD *)v28 + 6) = 0uLL;
    *((_OWORD *)v28 + 3) = 0uLL;
    *((_OWORD *)v28 + 4) = 0uLL;
    *((_OWORD *)v28 + 1) = 0uLL;
    *((_OWORD *)v28 + 2) = 0uLL;
    *(_OWORD *)uint64_t v28 = 0uLL;
  }
  *((void *)&__src[363] + 1) = 0;
  *(void *)&__src[364] = 0;
  uint64_t v29 = -560;
  *(void *)((char *)&__src[364] + 6) = 0;
  do
  {
    uint64_t v30 = (char *)__src + v29;
    *((_DWORD *)v30 + 1612) = 0;
    *((_OWORD *)v30 + 402) = 0uLL;
    *((_OWORD *)v30 + 401) = 0uLL;
    *((_OWORD *)v30 + 400) = 0uLL;
    v29 += 56;
  }
  while (v29);
  uint64_t v31 = -1200;
  do
  {
    uint64_t v32 = (char *)__src + v31;
    *((_DWORD *)v32 + 1928) = 0;
    *((_OWORD *)v32 + 481) = 0uLL;
    *((_OWORD *)v32 + 480) = 0uLL;
    *((_OWORD *)v32 + 479) = 0uLL;
    *((_OWORD *)v32 + 478) = 0uLL;
    *((_OWORD *)v32 + 477) = 0uLL;
    *((_OWORD *)v32 + 476) = 0uLL;
    *((_OWORD *)v32 + 475) = 0uLL;
    v31 += 120;
  }
  while (v31);
  memset(&__src[475], 0, 70);
  uint64_t v33 = 0xFFFFFFFFFFFFF94;
  do
  {
    char v34 = (_OWORD *)((char *)&__src[v33 + 587] + 8);
    *(_OWORD *)((char *)v34 + 27) = 0uLL;
    *char v34 = 0uLL;
    v34[1] = 0uLL;
    v33 += 3;
  }
  while (v33 * 16);
  uint64_t v35 = 0xFFFFFFFFFFFFF28;
  do
  {
    unsigned __int16 v36 = (_OWORD *)((char *)&__src[v35 + 803] + 8);
    *(_OWORD *)((char *)v36 + 79) = 0uLL;
    v36[3] = 0uLL;
    v36[4] = 0uLL;
    v36[1] = 0uLL;
    v36[2] = 0uLL;
    *unsigned __int16 v36 = 0uLL;
    v35 += 6;
  }
  while (v35 * 16);
  BYTE8(__src[806]) = 0;
  *(_OWORD *)((char *)&__src[804] + 8) = 0u;
  *(_OWORD *)((char *)&__src[805] + 8) = 0u;
  *(_OWORD *)((char *)&__src[803] + 8) = 0u;
  memset(&__src[807], 0, 28);
  uint64_t v37 = -2072;
  do
  {
    *(_DWORD *)((char *)&__src[941] + v37 + 8) = 0;
    int v38 = (_OWORD *)((char *)&__src[938] + v37 + 8);
    v38[1] = 0uLL;
    v38[2] = 0uLL;
    *int v38 = 0uLL;
    v37 += 56;
  }
  while (v37);
  do
  {
    int v39 = (char *)__src + v37;
    *((_DWORD *)v39 + 3780) = 0;
    int v40 = (char *)&__src[938] + v37 + 8;
    int v41 = (char *)&__src[940] + v37 + 8;
    *(_OWORD *)int v41 = 0uLL;
    *((_OWORD *)v41 + 1) = 0uLL;
    *((_OWORD *)v41 + 2) = 0uLL;
    *((_OWORD *)v41 + 3) = 0uLL;
    *(void *)(v41 + 62) = 0;
    *((void *)v39 + 1877) = 0;
    *((void *)v39 + 1879) = 0;
    *((void *)v39 + 1878) = 0;
    v37 += 112;
    *(void *)(v40 + 23) = 0;
  }
  while (v37 != 4144);
  uint64_t v42 = 0;
  DWORD2(__src[1199]) = 0;
  *(_OWORD *)((char *)&__src[1197] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1198] + 8) = 0u;
  DWORD1(__src[1201]) = 0;
  BYTE8(__src[1201]) = 0;
  HIDWORD(__src[1201]) = 0;
  LOBYTE(__src[1202]) = 0;
  memset(&__src[1200], 0, 18);
  do
  {
    uint64_t v43 = (char *)&__src[v42 + 1202] + 8;
    int v44 = (char *)&__src[v42 + 1203] + 12;
    *((void *)v44 + 2) = 0;
    *(_OWORD *)int v44 = 0uLL;
    *(_OWORD *)uint64_t v43 = 0uLL;
    *((_WORD *)v43 + 8) = 0;
    v42 += 3;
  }
  while (v42 != 72);
  uint64_t v45 = -1728;
  do
  {
    float64x2_t v46 = (char *)&__src[1382] + v45 + 8;
    *(void *)(v46 + 62) = 0;
    *((_OWORD *)v46 + 2) = 0uLL;
    *((_OWORD *)v46 + 3) = 0uLL;
    *(_OWORD *)float64x2_t v46 = 0uLL;
    *((_OWORD *)v46 + 1) = 0uLL;
    v45 += 72;
  }
  while (v45);
  uint64_t v47 = 0xFFFFFFFFFFFFFECLL;
  do
  {
    *((void *)&__src[v47 + 1403] + 1) = 0;
    double v48 = (char *)&__src[v47 + 1402] + 8;
    *((_DWORD *)v48 + 6) = 0;
    *(_OWORD *)double v48 = 0uLL;
    v47 += 2;
  }
  while (v47 * 16);
  *(void *)((char *)&__src[1403] + 14) = 0;
  *(void *)((char *)&__src[1427] + 6) = 0;
  *((void *)&__src[1403] + 1) = 0;
  *(_OWORD *)((char *)&__src[1402] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1404] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1405] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1406] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1407] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1408] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1409] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1410] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1411] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1412] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1413] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1414] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1415] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1416] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1417] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1418] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1419] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1420] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1421] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1422] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1423] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1424] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1425] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1426] + 8) = 0u;
  memset(&__src[1428], 0, 20);
  *(_OWORD *)((char *)&__src[1429] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1430] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1431] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1432] + 8) = 0u;
  DWORD2(__src[1433]) = 0;
  uint64_t v49 = xmmword_26AE66D28;
  memcpy((void *)xmmword_26AE66D28, __src, 0x599CuLL);
  NV_Ram_Init(v49, xmmword_26AE66D38, v50);
  Debug_Log_NonVol(0, xmmword_26AE66D28);
  unint64_t v71 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  DWORD2(v73) = v71;
  NA_Ram_Init(*((uint64_t *)&xmmword_26AE66D28 + 1), v51, v52, v53, v54, v55);
  GNSS_HL_Data_Bases_Init();
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 944) = -1169279272;
  Nav_Kalman_Update_Init();
  unint64_t v70 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  HIDWORD(v73) = v70;
  API_Query_Config(*((uint64_t *)&xmmword_26AE66D08 + 1));
  g_GN_GNSS_Nav_Debug_Port = 1;
  unint64_t v69 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)double v74 = v69;
  uint64_t v56 = xmmword_26AE66C88;
  int v57 = *(_DWORD *)(xmmword_26AE66C88 + 448);
  *(_DWORD *)(xmmword_26AE66C88 + 504) = v57;
  *(_DWORD *)(v56 + 496) = 0;
  EvLog_v("GN_GPS_Initialise:  GNB ROM %d 0x%x %u", *(unsigned __int16 *)(v56 + 472), *(_DWORD *)(v56 + 476), v57);
  uint64_t v58 = *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1019);
  uint64_t v67 = *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1133);
  uint64_t v68 = *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1134);
  uint64_t v65 = *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1124);
  uint64_t v66 = *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1132);
  uint64_t v64 = *(__int16 *)(*((void *)&xmmword_26AE66C28 + 1) + 1028);
  EvLog_nd("GN_GPS_Initialise: ", 47, v58, *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 4), *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 68), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 73), *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 24), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 28), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 72), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 31), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 32), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 33), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 34), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 35), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 36), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 37), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 38), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 39), *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 40),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 41),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 42),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 43),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 46),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 66),
    *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 948),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1012),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1013),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1014),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1015),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1016),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1017),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1018),
    v58,
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1020),
    *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1021),
    *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1060),
    *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1052),
    *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 16),
    (int)*(double *)(*((void *)&xmmword_26AE66C28 + 1) + 960),
    (int)*(double *)(*((void *)&xmmword_26AE66C28 + 1) + 968),
    (int)*(double *)(*((void *)&xmmword_26AE66C28 + 1) + 976),
    (int)*(double *)(*((void *)&xmmword_26AE66C28 + 1) + 984),
    *(__int16 *)(*((void *)&xmmword_26AE66C28 + 1) + 1024),
    *(__int16 *)(*((void *)&xmmword_26AE66C28 + 1) + 1026),
    v64,
    *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1120),
    v65,
    v66,
    v67,
    v68);
  unint64_t v59 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)&v74[4] = v59;
  *(_DWORD *)&v74[8] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog_v("GN_GPS_Initialise: OS Time Waypoints: %u %d %d %d %d %d %d", v73, DWORD1(v73) - v73, v71 - v73, v70 - v73, v69 - v73, v59 - v73, *(_DWORD *)&v74[8] - v73);
  uint64_t v60 = *((void *)&xmmword_26AE66C28 + 1);
  uint64_t v61 = *((void *)&xmmword_26AE66C28 + 1) + 1072;
  long long v62 = *(_OWORD *)v74;
  *(_OWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1072) = v73;
  *(_OWORD *)(v60 + 1088) = v62;
  *(_OWORD *)(v61 + 28) = *(_OWORD *)&v74[12];
  return GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
}

void GNSS_Mark_Restart(int a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  GNSS_Write_NMEA(*((void **)&xmmword_26AE66D48 + 1));
  GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
  GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
  LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_26AE66D68 + 1));
  API_Query_Config((uint64_t)v45);
  BOOL v2 = 1;
  if (!v46 && !v47) {
    BOOL v2 = v48 != 0;
  }
  unsigned int v3 = (char **)xmmword_26AE66D48;
  char v4 = *(char **)(xmmword_26AE66D48 + 16);
  *(void *)xmmword_26AE66D48 = v4;
  v3[1] = v4;
  if (a1 == 2)
  {
    GN_GPS_Get_LibVersion(&v43);
    uint64_t v5 = 0;
    char v6 = *v3;
    char v7 = 10;
    do
    {
      *unsigned int v3 = v6 + 1;
      *char v6 = v7;
      char v6 = *v3;
      if (*v3 >= v3[3])
      {
        char v6 = v3[2];
        *unsigned int v3 = v6;
      }
      char v7 = aPeGnLibVer[++v5];
    }
    while (v5 != 16);
    char v8 = v43;
    if (v43)
    {
      unint64_t v9 = v44;
      do
      {
        *unsigned int v3 = v6 + 1;
        *char v6 = v8;
        char v6 = *v3;
        if (*v3 >= v3[3])
        {
          char v6 = v3[2];
          *unsigned int v3 = v6;
        }
        int v10 = *v9++;
        char v8 = v10;
      }
      while (v10);
    }
    char v11 = 32;
    uint64_t v12 = 1u;
    do
    {
      *unsigned int v3 = v6 + 1;
      *char v6 = v11;
      char v6 = *v3;
      if (*v3 >= v3[3])
      {
        char v6 = v3[2];
        *unsigned int v3 = v6;
      }
      char v11 = aOsms[v12++];
    }
    while (v12 != 7);
    uint64_t v13 = mach_continuous_time();
    sprintf_10u(v3, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13));
    uint64_t v14 = *v3;
    goto LABEL_58;
  }
  char v15 = 10;
  uint64_t v16 = 1u;
  do
  {
    *unsigned int v3 = v4 + 1;
    *char v4 = v15;
    char v4 = *v3;
    if (*v3 >= v3[3])
    {
      char v4 = v3[2];
      *unsigned int v3 = v4;
    }
    char v15 = asc_22BAB5C8F[v16++];
  }
  while (v16 != 46);
  switch(a1)
  {
    case 0:
      char v20 = 71;
      uint64_t v21 = 1u;
      do
      {
        *unsigned int v3 = v4 + 1;
        *char v4 = v20;
        char v4 = *v3;
        if (*v3 >= v3[3])
        {
          char v4 = v3[2];
          *unsigned int v3 = v4;
        }
        char v20 = aGnGpsInitialis_3[v21++];
      }
      while (v21 != 19);
      unsigned int v19 = (unsigned __int16)word_26AE7706A;
      goto LABEL_41;
    case 1:
      uint64_t v22 = 0;
      char v23 = 82;
      do
      {
        *unsigned int v3 = v4 + 1;
        *char v4 = v23;
        char v4 = *v3;
        if (*v3 >= v3[3])
        {
          char v4 = v3[2];
          *unsigned int v3 = v4;
        }
        char v23 = aRestart[++v22];
      }
      while (v22 != 8);
      unsigned int v19 = (unsigned __int16)word_26AE77066;
      goto LABEL_41;
    case 3:
      char v17 = 87;
      uint64_t v18 = 1u;
      do
      {
        *unsigned int v3 = v4 + 1;
        *char v4 = v17;
        char v4 = *v3;
        if (*v3 >= v3[3])
        {
          char v4 = v3[2];
          *unsigned int v3 = v4;
        }
        char v17 = aWake[v18++];
      }
      while (v18 != 6);
      unsigned int v19 = (unsigned __int16)word_26AE77068;
LABEL_41:
      sprintf1da(v3, v19, &v43, 0, 0);
      goto LABEL_43;
  }
  EvCrt_Illegal_Default("GNSS_Mark_Restart", 0xC12u);
LABEL_43:
  __int16 v24 = *v3;
  char v25 = 32;
  uint64_t v26 = 1u;
  do
  {
    *unsigned int v3 = v24 + 1;
    *__int16 v24 = v25;
    __int16 v24 = *v3;
    if (*v3 >= v3[3])
    {
      __int16 v24 = v3[2];
      *unsigned int v3 = v24;
    }
    char v25 = asc_22BAB5CF1[v26++];
  }
  while (v26 != 45);
  uint64_t v27 = mach_continuous_time();
  sprintf_10u(v3, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27));
  uint64_t v28 = (*v3)++;
  *uint64_t v28 = 10;
  if (*v3 >= v3[3]) {
    *unsigned int v3 = v3[2];
  }
  GN_GPS_Get_LibVersion(&v43);
  uint64_t v29 = 0;
  uint64_t v14 = *v3;
  char v30 = 10;
  do
  {
    *unsigned int v3 = v14 + 1;
    *uint64_t v14 = v30;
    uint64_t v14 = *v3;
    if (*v3 >= v3[3])
    {
      uint64_t v14 = v3[2];
      *unsigned int v3 = v14;
    }
    char v30 = aPeGnLibVer[++v29];
  }
  while (v29 != 16);
  char v31 = v43;
  if (v43)
  {
    uint64_t v32 = v44;
    do
    {
      *unsigned int v3 = v14 + 1;
      *uint64_t v14 = v31;
      uint64_t v14 = *v3;
      if (*v3 >= v3[3])
      {
        uint64_t v14 = v3[2];
        *unsigned int v3 = v14;
      }
      int v33 = *v32++;
      char v31 = v33;
    }
    while (v33);
  }
LABEL_58:
  if (*(unsigned char *)(xmmword_26AE66D08 + 118))
  {
    char v34 = 10;
    uint64_t v35 = 1u;
    do
    {
      *unsigned int v3 = v14 + 1;
      *uint64_t v14 = v34;
      uint64_t v14 = *v3;
      if (*v3 >= v3[3])
      {
        uint64_t v14 = v3[2];
        *unsigned int v3 = v14;
      }
      char v34 = aHostversion[v35++];
    }
    while (v35 != 15);
    char v36 = *(unsigned char *)(xmmword_26AE66D08 + 118);
    if (v36)
    {
      uint64_t v37 = (unsigned __int8 *)(xmmword_26AE66D08 + 119);
      do
      {
        *unsigned int v3 = v14 + 1;
        *uint64_t v14 = v36;
        uint64_t v14 = *v3;
        if (*v3 >= v3[3])
        {
          uint64_t v14 = v3[2];
          *unsigned int v3 = v14;
        }
        int v38 = *v37++;
        char v36 = v38;
      }
      while (v38);
    }
  }
  uint64_t v39 = 0;
  char v40 = 10;
  do
  {
    *unsigned int v3 = v14 + 1;
    *uint64_t v14 = v40;
    uint64_t v14 = *v3;
    if (*v3 >= v3[3])
    {
      uint64_t v14 = v3[2];
      *unsigned int v3 = v14;
    }
    char v40 = asc_22BAB5D45[++v39];
  }
  while (v39 != 2);
  int v41 = *((_DWORD *)v3 + 2);
  if (v2) {
    GNSS_Write_NMEA(v3);
  }
  uint64_t v42 = v3[2];
  if (v50)
  {
    GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    uint64_t v42 = v3[2];
  }
  if (v51)
  {
    GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v14 - v41), v42);
    uint64_t v42 = v3[2];
  }
  if (v49)
  {
    GN_GPS_Write_Nav_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    uint64_t v42 = v3[2];
  }
  if (v52)
  {
    GN_GPS_Write_LCD_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    uint64_t v42 = v3[2];
  }
  *unsigned int v3 = v42;
  v3[1] = v42;
  if (a1) {
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
  }
}

char *GN_GPS_Update(void)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v0 = *((void *)&xmmword_26AE66C28 + 1);
  unint64_t v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  uint64_t v2 = 278;
  do
  {
    *(_DWORD *)(v0 + 4 * v2) = v1;
    unint64_t v3 = v2 - 267;
    --v2;
  }
  while (v3 > 1);
  if (g_GN_GPS_Data_p_list == 1)
  {
    char v4 = "GN_GPS_Update:  ERROR:  Called while in PowerOff !";
LABEL_5:
    return EvCrt_v(v4);
  }
  if (*(unsigned char *)(*((void *)&xmmword_26AE66C28 + 1) + 46))
  {
    if (g_GN_GPS_Data_p_list)
    {
      if (g_GN_GPS_Data_p_list == 7 || g_GN_GPS_Data_p_list == 4)
      {
        *(_DWORD *)(v0 + 1076) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
        GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
        LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_26AE66D68 + 1));
        *(_DWORD *)(v0 + 1080) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        return EvLog_v("Sensor in Sleep or Coma Mode: OS Time Waypoints, %u %d %d");
      }
      goto LABEL_25;
    }
LABEL_23:
    if (*(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 944) != -1169279272) {
      EvCrt_v("GN_GPS_Update:  WARNING:  Called with unexpected GNSS_INVALID_EXE_STATE");
    }
    goto LABEL_25;
  }
  if (!g_GN_GPS_Data_p_list) {
    goto LABEL_23;
  }
  if (g_GN_GPS_Data_p_list == 7 || g_GN_GPS_Data_p_list == 4)
  {
    char v4 = "GN_GPS_Update:  ERROR:  Called while in Sleep/Coma !";
    goto LABEL_5;
  }
LABEL_25:
  G5K_Read_GNB_Meas(*((char ***)&xmmword_26AE66D38 + 1));
  *(_DWORD *)(v0 + 1084) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  G5K_ME_Decode_Meas(*((unsigned __int8 ***)&xmmword_26AE66D38 + 1), (char *)xmmword_26AE66C88);
  char v8 = (_DWORD *)xmmword_26AE66C88;
  *(_DWORD *)(xmmword_26AE66C88 + 508) = 0;
  if (g_GN_GPS_Data_p_list == 5 || g_GN_GPS_Data_p_list == 8)
  {
    int v9 = v8[126];
    uint64_t v10 = *((void *)&xmmword_26AE66C28 + 1);
    if (v9) {
      v8[127] = *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 948) + v9;
    }
    v8[134] = 0;
    if (!*(_DWORD *)(v10 + 1144))
    {
      if (*(unsigned char *)(v10 + 1135))
      {
        *(unsigned char *)(v10 + 1135) = 0;
        *(_DWORD *)(v10 + 1144) = *(_DWORD *)(v10 + 1148);
      }
      else
      {
        uint64_t v11 = mach_continuous_time();
        uint64_t v10 = *((void *)&xmmword_26AE66C28 + 1);
        *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1144) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                                     * (double)v11);
        char v8 = (_DWORD *)xmmword_26AE66C88;
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)&xmmword_26AE66C28 + 1);
  }
  char v61 = 0;
  if (!G5K_ME_Poll_New_Meas((uint64_t)v8, v10, *((_DWORD **)&g_GN_GPS_Data_p_list + 1), qword_26AE66BF8, (_DWORD *)qword_26AE66C00, &v61))
  {
    if (*(void *)(xmmword_26AE66D48 + 8) != *(void *)xmmword_26AE66D48) {
      GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
    }
    if (*(void *)(*((void *)&xmmword_26AE66D48 + 1) + 8) != **((void **)&xmmword_26AE66D48 + 1)) {
      GNSS_Write_NMEA(*((void **)&xmmword_26AE66D48 + 1));
    }
    if (*(void *)(xmmword_26AE66D58 + 8) != *(void *)xmmword_26AE66D58) {
      GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
    }
    if (*(void *)(*((void *)&xmmword_26AE66D58 + 1) + 8) != **((void **)&xmmword_26AE66D58 + 1)) {
      GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
    }
    if (*(void *)(*((void *)&xmmword_26AE66D68 + 1) + 8) != **((void **)&xmmword_26AE66D68 + 1)) {
      LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_26AE66D68 + 1));
    }
    ++_MergedGlobals_1;
    double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    unint64_t v17 = (unint64_t)v16;
    int v18 = *(_DWORD *)(qword_26AE66BF8 + 4);
    int v19 = (unint64_t)v16 - v18;
    _MergedGlobals_1 = 0;
    int v20 = *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 948);
    if (g_GN_GPS_Data_p_list <= 8 && ((1 << g_GN_GPS_Data_p_list) & 0x124) != 0)
    {
      int v21 = *(_DWORD *)(xmmword_26AE66C88 + 496);
      if (v21 && (int)v17 - v21 < 501) {
        goto LABEL_72;
      }
      if (v19 >= 5 * v20)
      {
        EvLog_v("GN_GPS_Hard_Reset_GNB:  %d > 5*Fix_Int gap!, >>>POWEROFF_WAKE_UP  (%u)", (unint64_t)v16 - v18, v18);
        LODWORD(g_GN_GPS_Data_p_list) = 2;
        GN_GPS_Hard_Reset_GNB();
        *(_DWORD *)(qword_26AE66BF8 + 4) = v17;
        uint64_t v38 = xmmword_26AE66C88;
        *(_DWORD *)(xmmword_26AE66C88 + 476) = 0;
        *(_WORD *)(v38 + 482) = 0;
        goto LABEL_72;
      }
      EvLog_v("No valid comms :  %u  %d", v18, (unint64_t)v16 - v18);
      uint64_t v22 = (char **)xmmword_26AE66D48;
    }
    else
    {
      if (v19 < 3 * v20)
      {
LABEL_72:
        GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
        return (char *)GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
      }
      EvLog_v("GN_GPS_Update:  Lost BB Coms for %d > 3*Fix_Int, >>>SLEEP_WAKE_UP  (%u)", (unint64_t)v16 - v18, v18);
      LODWORD(g_GN_GPS_Data_p_list) = 8;
      uint64_t v22 = (char **)xmmword_26AE66D48;
    }
    G5K_ME_Send_WakeUp(v22);
    goto LABEL_72;
  }
  uint64_t v12 = *((void *)&xmmword_26AE66D28 + 1);
  uint64_t v13 = xmmword_26AE66C28;
  *(unsigned char *)(xmmword_26AE66C28 + 412) = 0;
  *(_OWORD *)(v13 + 364) = 0u;
  *(_OWORD *)(v13 + 380) = 0u;
  *(_OWORD *)(v13 + 396) = 0u;
  GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
  if (g_GN_GPS_Data_p_list != 11) {
    EvCrt_d("GN_GPS_Update: GNSS_Exe_State = ", g_GN_GPS_Data_p_list);
  }
  if (v61)
  {
    *(unsigned char *)(v12 + 8) = 0;
    *(_WORD *)(v12 + 10) = 0;
    *(_DWORD *)(v12 + 2) = 0;
    *(unsigned char *)(v12 + 6) = 0;
    EvLog("GN_GPS_Update:  Cleared NA data because ME_Reset_Detected");
    uint64_t v14 = xmmword_26AE66C88;
    if (v61)
    {
      char v15 = 1;
LABEL_61:
      LODWORD(g_GN_GPS_Data_p_list) = 3;
      *(_WORD *)(v14 + 394) = 0;
      *(_DWORD *)(v14 + 536) = 0;
      uint64_t v26 = *((void *)&xmmword_26AE66C28 + 1);
      *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1284) = 3;
      *(unsigned char *)(v26 + 1280) = v15;
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v14 = xmmword_26AE66C88;
    int v23 = *(_DWORD *)(xmmword_26AE66C88 + 512);
    unsigned int v24 = *(_DWORD *)(xmmword_26AE66C88 + 536);
    if (v23 + 10 < v24 && v23 + 10000 < v24) {
      return EvLog_v("GN_GPS_Update:  Warning - possible throughput problem  %u  %u  %u  %u");
    }
  }
  int v25 = g_GN_GPS_Data_p_list;
  if (g_GN_GPS_Data_p_list == 2)
  {
    char v15 = 0;
    goto LABEL_61;
  }
  int v37 = *(_DWORD *)(v14 + 460);
  if (g_GN_GPS_Data_p_list == 5 || v37)
  {
    if (g_GN_GPS_Data_p_list != 5)
    {
      EvLog_v("GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", v37, g_GN_GPS_Data_p_list);
      DbgLog_v(1, "GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", *(_DWORD *)(xmmword_26AE66C88 + 460), g_GN_GPS_Data_p_list);
      int v37 = *(_DWORD *)(xmmword_26AE66C88 + 460);
    }
    if (!v37)
    {
      EvCrt_v("GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", g_GN_GPS_Data_p_list);
      DbgLog_v(1, "GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", g_GN_GPS_Data_p_list);
    }
    int v25 = 6;
    goto LABEL_78;
  }
  if (g_GN_GPS_Data_p_list == 8)
  {
    int v25 = 9;
LABEL_78:
    LODWORD(g_GN_GPS_Data_p_list) = v25;
    uint64_t v39 = *((void *)&xmmword_26AE66C28 + 1);
    *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1284) = v25;
    *(unsigned char *)(v39 + 1280) = v61;
    goto LABEL_79;
  }
  uint64_t v26 = *((void *)&xmmword_26AE66C28 + 1);
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1284) = g_GN_GPS_Data_p_list;
  *(unsigned char *)(v26 + 1280) = 0;
  if (v25 == 3)
  {
LABEL_62:
    if (*(_DWORD *)(v26 + 944) == -1169279272)
    {
      EvLog("GN_GPS_Update: Starting after initialisation");
      GNSS_Mark_Restart(2);
      __int16 v27 = *(_WORD *)(xmmword_26AE66C88 + 472);
      int v28 = *(_DWORD *)(xmmword_26AE66C88 + 476);
      int v29 = *(_DWORD *)(xmmword_26AE66C88 + 448);
      *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1064) = v29;
      double v30 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v31 = *((void *)&xmmword_26AE66C28 + 1);
      *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1068) = (unint64_t)v30;
      *(_DWORD *)(v31 + 1116) = (unint64_t)v30;
      *(_DWORD *)(qword_26AE66C18 + 100) = v29;
      GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list, 0, v32, v33, v34, v35);
      uint64_t v36 = xmmword_26AE66C88;
      *(_WORD *)(xmmword_26AE66C88 + 472) = v27;
      *(_DWORD *)(v36 + 476) = v28;
      API_Set_Config(*((uint64_t *)&xmmword_26AE66D08 + 1));
      LODWORD(g_GN_GPS_Data_p_list) = 11;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_79:
  if (v25 == 6 || v25 == 9)
  {
    API_Set_Config(*((uint64_t *)&xmmword_26AE66D08 + 1));
    GNSS_HL_System_Re_Start((uint64_t)&g_GN_GPS_Data_p_list);
    g_GN_GNSS_Nav_Debug_Port = 1;
    ++word_26AE77068;
    GNSS_Mark_Restart(3);
    unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v41 = *((void *)&xmmword_26AE66C28 + 1);
    *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1068) = v40;
    *(_DWORD *)(v41 + 1116) = v40;
    goto LABEL_88;
  }
  if (v25 == 11)
  {
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
    API_Set_Config(*((uint64_t *)&xmmword_26AE66D08 + 1));
    GNSS_HL_System_Run_Update((uint64_t)&g_GN_GPS_Data_p_list);
    goto LABEL_88;
  }
  EvLog_d("GN_GPS_Update: Unexpected GNSS_Exe_State state - restarting ", v25);
LABEL_87:
  GNSS_Starting_NotInitialised();
LABEL_88:
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 944) = 0;
  __n128 result = (char *)mach_continuous_time();
  *(_DWORD *)(v0 + 1096) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)result);
  if (g_GN_GPS_Data_p_list == 11)
  {
    G5K_ME_Send_Ctrl(xmmword_26AE66D48, xmmword_26AE66C88, *((uint64_t *)&xmmword_26AE66C28 + 1), qword_26AE66C10, xmmword_26AE66C28);
    if (!*(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1116)) {
      goto LABEL_99;
    }
    double v43 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    unint64_t v44 = (unint64_t)v43;
    uint64_t v45 = *(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1116);
    int v46 = (unint64_t)v43 - v45;
    if ((unint64_t)v43 < v45)
    {
      EvCrt_nd("GN_GPS_Update: Detected OS ms Time has gone backwards", 2, v42, (unint64_t)v43, v45);
      *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1116) = 0;
      goto LABEL_99;
    }
    int v47 = v46 / 1000;
    if (v46 / 1000 >= (uint64_t)*(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1120))
    {
      int v48 = *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1128);
      if (v48)
      {
        int v49 = ((int)v44 - v48) / 1000;
        if (v49 >= v47 && v49 < (uint64_t)*(unsigned int *)(*((void *)&xmmword_26AE66C28 + 1) + 1124)) {
          goto LABEL_99;
        }
      }
      else
      {
        int v49 = 0;
      }
      GncP16_34HandleRestartAcq();
      uint64_t v50 = *((void *)&xmmword_26AE66C28 + 1);
      *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1128) = v44;
      *(_DWORD *)(v50 + 1116) = 0;
      EvCrt_v("GN_GPS_Restart_Acquisition(): API call due to No Fix within %d s; Time since last call %d s", v47, v49);
    }
LABEL_99:
    __n128 result = (char *)mach_continuous_time();
    *(_DWORD *)(v0 + 1100) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                              * (double)(unint64_t)result);
    if (*(double *)(*(void *)(p_api + 88) + 344) <= 600.0)
    {
      if (API_Get_Nav_Data(xmmword_26AE66D18, *((uint64_t *)&xmmword_26AE66D18 + 1), v51, v52, v53, v54))
      {
        int8x16_t v58 = vqtbl1q_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)(v0 + 1012)), (int8x16_t)xmmword_22BB0CAF0);
        __int16 v59 = *(unsigned __int8 *)(v0 + 1020);
        __int16 v60 = *(unsigned __int8 *)(v0 + 1021);
        NMEA_Encode(*((char ***)&xmmword_26AE66D48 + 1), v58.i16, xmmword_26AE66D18, *((uint64_t *)&xmmword_26AE66D18 + 1));
        GNSS_Write_NMEA(*((void **)&xmmword_26AE66D48 + 1));
        *(_DWORD *)(v0 + 1104) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        unsigned int v55 = *(_DWORD *)(v0 + 1052);
        if (v55)
        {
          unsigned int v56 = *(_DWORD *)(v0 + 948) + *(_DWORD *)(v0 + 1056);
          *(_DWORD *)(v0 + 1056) = v56;
          if (v56 >= v55)
          {
            int v57 = (unsigned __int8 *)xmmword_26AE66D28;
            if (p_NV_Sect) {
              *(unsigned char *)(p_NV_Sect + 193) = -1;
            }
            if (g_GncPStateInfo != 8) {
              GncP07_08WriteNVStore(0x59A0uLL, v57);
            }
            EvLog("GN_GPS_Write_NV_Store:  1");
            *(_DWORD *)(v0 + 1056) = 0;
          }
        }
        *(_DWORD *)(v0 + 1108) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
      }
      GNSS_Nav_Debug_Screens(&g_GN_GPS_Data_p_list);
      GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
      GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
      __n128 result = (char *)mach_continuous_time();
      *(_DWORD *)(v0 + 1112) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)(unint64_t)result);
    }
  }
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)xmmword_26AE66D18, *(unsigned int *)(xmmword_26AE66C88 + 468), (*(_DWORD *)(v0 + 1072) - *(_DWORD *)(xmmword_26AE66C88 + 468)));
  }
  return result;
}

BOOL GNSS_Starting_NotInitialised(void)
{
  EvLog("GN_GPS_Update: Starting from Power Off but without having been initialised");
  g_GN_GNSS_Nav_Debug_Port = 1;
  ++word_26AE77066;
  word_26AE77068 = 0;
  GNSS_Mark_Restart(1);
  __int16 v0 = *(_WORD *)(xmmword_26AE66C88 + 472);
  int v1 = *(_DWORD *)(xmmword_26AE66C88 + 476);
  int v2 = *(_DWORD *)(xmmword_26AE66C88 + 448);
  __int16 v3 = *(_WORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1048);
  char v4 = *(unsigned char *)(*((void *)&xmmword_26AE66C28 + 1) + 1280);
  int v5 = *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1284);
  char v6 = *(unsigned char *)(qword_26AE66C20 + 39302);
  uint64_t v7 = *(void *)(*((void *)&xmmword_26AE66C28 + 1) + 1144);
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list, 1, v8, v9, v10, v11);
  uint64_t v12 = xmmword_26AE66C88;
  *(_WORD *)(xmmword_26AE66C88 + 472) = v0;
  *(_DWORD *)(v12 + 476) = v1;
  uint64_t v13 = *((void *)&xmmword_26AE66C28 + 1);
  *(_WORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1048) = v3;
  *(void *)(v13 + 1144) = v7;
  *(unsigned char *)(v13 + 1280) = v4;
  *(_DWORD *)(v13 + 1284) = v5;
  *(unsigned char *)(qword_26AE66C20 + 39302) = v6;
  *(_DWORD *)(v13 + 1064) = v2;
  double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v15 = *((void *)&xmmword_26AE66C28 + 1);
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1068) = (unint64_t)v14;
  *(_DWORD *)(v15 + 1116) = (unint64_t)v14;
  uint64_t v16 = *((void *)&xmmword_26AE66D08 + 1);

  return API_Set_Config(v16);
}

uint64_t GN_GPS_Shutdown(void)
{
  EvLog("GN_GPS_Shutdown: ");
  if (g_GN_GPS_Data_p_list > 0xB)
  {
    EvCrt_Illegal_Default("GN_GPS_Shutdown", 0x4C4u);
  }
  else if (((1 << g_GN_GPS_Data_p_list) & 0xF6D) == 0)
  {
    EvLog_d("GN_GPS_Shutdown: GNSS already Idle or Off ", g_GN_GPS_Data_p_list);
    goto LABEL_9;
  }
  G5K_ME_Send_Sleep((char **)xmmword_26AE66D48, (char **)xmmword_26AE66D68, 0, 0xFFFFu, *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1134));
  EvLog("GN_GPS_Shutdown: Send ME to Coma ");
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1056) = 0;
  *(_DWORD *)(xmmword_26AE66C88 + 496) = 0;
  LODWORD(g_GN_GPS_Data_p_list) = 4;
  __int16 v0 = (unsigned __int8 *)xmmword_26AE66D28;
  if (p_NV_Sect) {
    *(unsigned char *)(p_NV_Sect + 193) = -1;
  }
  if (g_GncPStateInfo != 8)
  {
    GncP07_08WriteNVStore(0x59A0uLL, v0);
    __int16 v0 = (unsigned __int8 *)xmmword_26AE66D28;
  }
  Debug_Log_NonVol(1, (uint64_t)v0);
  EvLog_nd("GN_GPS_Shutdown: GN_GPS_Write_NV_Store ", 4, v1, *(unsigned int *)(xmmword_26AE66D28 + 4), *(unsigned int *)(xmmword_26AE66D28 + 22936), 22944, 14);
LABEL_9:
  uint64_t v2 = *((void *)&xmmword_26AE66D58 + 1);

  return GNSS_Event_Log_Ctl(v2);
}

uint64_t GN_GPS_WakeUp(void)
{
  v10[3] = *MEMORY[0x263EF8340];
  EvCrt_v("GN_GPS_WakeUp: ");
  *(_DWORD *)(xmmword_26AE66C88 + 504) = *(_DWORD *)(xmmword_26AE66C88 + 448);
  G5K_ME_Flush_Data();
  if (g_GN_GPS_Data_p_list != 11)
  {
    *(_DWORD *)qword_26AE66BF8 = 0;
    *(_DWORD *)(qword_26AE66BF8 + 4) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                        * (double)mach_continuous_time());
    for (uint64_t i = 2720; i != 4448; i += 36)
    {
      uint64_t v1 = qword_26AE66BF8 + i;
      *(unsigned char *)(v1 + 32) = 0;
      *(_OWORD *)uint64_t v1 = 0uLL;
      *(_OWORD *)(v1 + 16) = 0uLL;
    }
    uint64_t v2 = *((void *)&xmmword_26AE66D38 + 1);
    uint64_t v3 = *(void *)(*((void *)&xmmword_26AE66D38 + 1) + 16);
    **((void **)&xmmword_26AE66D38 + 1) = v3;
    *(void *)(v2 + 8) = v3;
    G5K_Read_GNB_Meas((char **)v2);
    uint64_t v4 = **((void **)&xmmword_26AE66D38 + 1) - *(void *)(*((void *)&xmmword_26AE66D38 + 1) + 8);
    if (v4)
    {
      EvLog_v("%s: Flushed bytes  %d", "GN_GPS_WakeUp", v4);
      uint64_t v5 = *((void *)&xmmword_26AE66D38 + 1);
      uint64_t v6 = *(void *)(*((void *)&xmmword_26AE66D38 + 1) + 16);
      **((void **)&xmmword_26AE66D38 + 1) = v6;
      *(void *)(v5 + 8) = v6;
    }
  }
  G5K_ME_Send_WakeUp((char **)xmmword_26AE66D48);
  EvLog_v("%s:  Read NV_Store NO Data", "GN_GPS_WakeUp");
  Debug_Log_NonVol(1, xmmword_26AE66D28);
  memset(v10, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v10);
  _MergedGlobals_1 = 0;
  if ((g_GN_GPS_Data_p_list - 4) < 3)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 5;
    if (*(int *)qword_26AE66C18 >= 11) {
      *(_DWORD *)qword_26AE66C18 = 10;
    }
  }
  else if ((g_GN_GPS_Data_p_list - 7) > 2)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 2;
    uint64_t v7 = qword_26AE66C18;
    *(_DWORD *)qword_26AE66C18 = 0;
    *(unsigned char *)(v7 + 5) = 0;
  }
  else
  {
    LODWORD(g_GN_GPS_Data_p_list) = 8;
  }
  *(_WORD *)(*((void *)&xmmword_26AE66D28 + 1) + 5) = 0;
  uint64_t v8 = *((void *)&xmmword_26AE66D58 + 1);

  return GNSS_Event_Log_Ctl(v8);
}

uint64_t GN_GPS_Sleep(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = a1;
  EvCrt_nd("GN_GPS_Sleep: ", 2, a3, a1, a2);
  if (v4 >= 0x3D)
  {
    unsigned int v4 = 60;
    EvLog_v("GN_GPS_Sleep:  SleepModeTimeOut limited to %d s", 60);
  }
  if (g_GN_GPS_Data_p_list > 0xB)
  {
LABEL_14:
    LODWORD(g_GN_GPS_Data_p_list) = 1;
    EvCrt_Illegal_Default("GN_GPS_Sleep", 0x5F3u);
    goto LABEL_15;
  }
  if (((1 << g_GN_GPS_Data_p_list) & 0xF80) == 0)
  {
    if (((1 << g_GN_GPS_Data_p_list) & 0xE) != 0)
    {
      int v5 = 1;
      goto LABEL_11;
    }
    if (((1 << g_GN_GPS_Data_p_list) & 0x70) != 0)
    {
      int v5 = 4;
LABEL_11:
      LODWORD(g_GN_GPS_Data_p_list) = v5;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v4) {
    int v6 = 7;
  }
  else {
    int v6 = 4;
  }
  LODWORD(g_GN_GPS_Data_p_list) = v6;
  DWORD1(g_GN_GPS_Data_p_list) = DWORD1(g_GN_GPS_Data_p_list) != 0;
LABEL_15:
  G5K_ME_Send_Sleep((char **)xmmword_26AE66D48, (char **)xmmword_26AE66D68, v4, a2, *(unsigned __int8 *)(*((void *)&xmmword_26AE66C28 + 1) + 1134));
  uint64_t v8 = xmmword_26AE66D28;
  if (p_NV_Sect) {
    *(unsigned char *)(p_NV_Sect + 193) = -1;
  }
  if (g_GncPStateInfo != 8)
  {
    GncP07_08WriteNVStore(0x59A0uLL, (unsigned __int8 *)v8);
    uint64_t v8 = xmmword_26AE66D28;
  }
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1056) = 0;
  *(_DWORD *)(xmmword_26AE66C88 + 496) = 0;
  EvLog_nd("GN_GPS_Sleep:  GN_GPS_Write_NV_Store ", 4, v7, *(unsigned int *)(v8 + 4), *(unsigned int *)(v8 + 22936), 22944, 14);
  if (*(void *)(*((void *)&xmmword_26AE66D48 + 1) + 8) != **((void **)&xmmword_26AE66D48 + 1)) {
    GNSS_Write_NMEA(*((void **)&xmmword_26AE66D48 + 1));
  }
  if (*(void *)(*((void *)&xmmword_26AE66D58 + 1) + 8) != **((void **)&xmmword_26AE66D58 + 1)) {
    GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  }
  if (*(void *)(xmmword_26AE66D58 + 8) != *(void *)xmmword_26AE66D58) {
    GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
  }
  if (*(void *)(xmmword_26AE66D48 + 8) != *(void *)xmmword_26AE66D48) {
    GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
  }
  uint64_t result = *((void *)&xmmword_26AE66D68 + 1);
  if (*(void *)(*((void *)&xmmword_26AE66D68 + 1) + 8) != **((void **)&xmmword_26AE66D68 + 1))
  {
    return LCD_SA_Debug_Ctl(result);
  }
  return result;
}

void *EvLog_GN_GNSS_Config(void *a1, double *a2)
{
  double v2 = a2[8] * 1000000.0;
  double v3 = -0.5;
  if (v2 <= 0.0) {
    double v4 = -0.5;
  }
  else {
    double v4 = 0.5;
  }
  double v5 = v2 + v4;
  if (v5 <= 2147483650.0)
  {
    if (v5 >= -2147483650.0) {
      uint64_t v6 = (int)v5;
    }
    else {
      uint64_t v6 = 0x80000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFLL;
  }
  double v7 = a2[9] * 1000000.0;
  if (v7 > 0.0) {
    double v3 = 0.5;
  }
  double v8 = v7 + v3;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0) {
      uint64_t v9 = (int)v8;
    }
    else {
      uint64_t v9 = 0x80000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFLL;
  }
  double v11 = a2[10];
  double v12 = -0.5;
  if (v11 > 0.0) {
    double v12 = 0.5;
  }
  double v13 = v11 + v12;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0) {
      uint64_t v17 = (int)v13;
    }
    else {
      uint64_t v17 = 0x80000000;
    }
  }
  else
  {
    uint64_t v17 = 0x7FFFFFFFLL;
  }
  uint64_t v10 = *((unsigned __int8 *)a2 + 40);
  uint64_t v14 = *((unsigned __int16 *)a2 + 27);
  uint64_t v15 = *((unsigned __int16 *)a2 + 28);
  uint64_t v16 = *((__int16 *)a2 + 29);
  return EvLog_nd(a1, 49, v14, *(unsigned int *)a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), *((unsigned int *)a2 + 3), *((unsigned __int8 *)a2 + 16), *((unsigned __int8 *)a2 + 17), *((unsigned __int8 *)a2 + 18), *((unsigned __int8 *)a2 + 19), *((unsigned __int8 *)a2 + 20), *((unsigned __int8 *)a2 + 21), *((unsigned __int8 *)a2 + 22), *((unsigned __int8 *)a2 + 23), *((unsigned __int8 *)a2 + 24), *((unsigned __int8 *)a2 + 25), *((unsigned __int8 *)a2 + 26), *((unsigned __int8 *)a2 + 27),
           *((unsigned __int8 *)a2 + 28),
           *((unsigned __int8 *)a2 + 29),
           *((unsigned __int8 *)a2 + 30),
           *((unsigned __int8 *)a2 + 31),
           *((unsigned __int8 *)a2 + 32),
           *((unsigned __int16 *)a2 + 17),
           *((unsigned __int8 *)a2 + 36),
           *((unsigned __int8 *)a2 + 37),
           *((unsigned __int8 *)a2 + 38),
           *((unsigned __int8 *)a2 + 39),
           v10,
           *((unsigned __int8 *)a2 + 41),
           *((unsigned __int8 *)a2 + 42),
           *((unsigned __int8 *)a2 + 43),
           *((unsigned __int8 *)a2 + 44),
           *((unsigned __int8 *)a2 + 45),
           *((unsigned __int8 *)a2 + 46),
           *((unsigned __int16 *)a2 + 24),
           *((unsigned __int16 *)a2 + 25),
           *((unsigned __int16 *)a2 + 26),
           v14,
           v15,
           v16,
           *((unsigned __int16 *)a2 + 30),
           *((unsigned __int16 *)a2 + 31),
           v6,
           v9,
           v17,
           *((unsigned int *)a2 + 22),
           *((unsigned int *)a2 + 23),
           *((unsigned __int8 *)a2 + 96),
           *((unsigned __int8 *)a2 + 97),
           *((unsigned __int8 *)a2 + 98));
}

uint64_t GN_GPS_Set_Config(uint64_t a1)
{
  if (!a1)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: No changes applied");
    return 0;
  }
  __int16 v2 = g_Enable_Event_Log;
  g_Enable_Event_Log = -1;
  EvLog_GN_GNSS_Config("GN_GPS_Set_Config: ", (double *)a1);
  if (*(int *)a1 >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: SensMode = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 4) >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ColdTTFF = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 8) >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PowerPerf = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 12) > 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: AntSel = %d >%d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 62) > 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Birth_GPS_WeekNo = %d > %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 34) <= 0x63u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: FixInterval = %d <100, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 36) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGLL_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 37) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGGA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 38) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGSA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 39) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGST_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 40) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGSV_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 41) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPRMC_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 42) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPVTG_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 43) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPZCD_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 44) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPZDA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 45) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PDBG__Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 46) == 255)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ForceCold_Timeout = %d ==255, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 60) >= 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Earliest_GPS_WeekNo = %d > 8191, Out of range!");
    return 0;
  }
  double v3 = *(double *)(a1 + 64);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[0] = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  double v4 = *(double *)(a1 + 72);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[1] = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  double v5 = *(double *)(a1 + 80);
  if (v5 < -1000.0 || v5 > 20000.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[2] = %g <-1000.0 or >20000.0, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 88) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: NoFixTime_to_RestartAcq_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 92) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ReAcq_Call_Interval_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (!*(unsigned char *)(a1 + 18)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: GPS has been disabled");
  }
  if (!*(unsigned char *)(a1 + 19)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Glonass has been disabled");
  }
  if (!*(unsigned char *)(a1 + 22)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: BeiDou has been disabled");
  }
  if (!*(unsigned char *)(a1 + 23)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Galileo has been disabled");
  }
  if (!*(unsigned char *)(a1 + 20)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: QZSS has been disabled");
  }
  if (!*(unsigned char *)(a1 + 21)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: SBAS has been disabled");
  }
  if (!*(_WORD *)(a1 + 50)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Nav Debug has been disabled");
  }
  if (!*(_WORD *)(a1 + 52)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: GNB Debug has been disabled");
  }
  if (!*(_WORD *)(a1 + 54)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Event Log has been disabled");
  }
  if (!*(_WORD *)(a1 + 56)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: LCD Debug Log has been disabled");
  }
  if (!*(unsigned char *)(a1 + 96)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Avg Doppler Usage has been disabled");
  }
  if (*(unsigned char *)(a1 + 97)) {
    EvCrt_v("GN_GPS_Set_Config: WARNING: Broadcast Navigation Message Data Use disabled to test XOF Data");
  }
  if (!*(unsigned char *)(a1 + 98)) {
    EvLog_v("GN_GPS_Set_Config: INFO: Sending {cS message to ME on Sleep has been disabled");
  }
  g_Enable_Event_Log = v2;
  if (API_Set_Config(a1)) {
    API_Query_Config(*((uint64_t *)&xmmword_26AE66D08 + 1));
  }
  else {
    EvCrt_v("GN_GPS_Set_Config: API_Set_Config() FAILED");
  }
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  return 1;
}

uint64_t GN_GPS_Set_FixInterval(unsigned int a1)
{
  if (a1 > 0x63)
  {
    uint64_t result = API_Set_FixInterval(a1);
    if (result)
    {
      uint64_t v2 = *(void *)(p_api + 72);
      int v3 = *(_DWORD *)(v2 + 952);
      if (!v3) {
        int v3 = *(_DWORD *)(v2 + 948);
      }
      *(_WORD *)(*((void *)&xmmword_26AE66D08 + 1) + 34) = v3;
      return 1;
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_FixInterval:  FAILED:  FixInterval = %d  < 100, Out of range !", a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_CrossCorr_Params(double *a1)
{
  v13[1] = *(double *)MEMORY[0x263EF8340];
  BOOL v2 = *a1 >= 6.0 && *a1 <= 60.0;
  if (v2 || (v13[0] = 0.0, R8_EQ(a1, v13)))
  {
    double v3 = a1[1];
    BOOL v4 = v3 >= 6.0 && v3 <= 60.0;
    if (v4 || (v13[0] = 0.0, R8_EQ(a1 + 1, v13)))
    {
      double v5 = a1[2];
      BOOL v6 = v5 >= 6.0 && v5 <= 60.0;
      if (v6 || (v13[0] = 0.0, R8_EQ(a1 + 2, v13)))
      {
        double v7 = a1[3];
        BOOL v8 = v7 >= 6.0 && v7 <= 60.0;
        if (v8 || (v13[0] = 0.0, R8_EQ(a1 + 3, v13)))
        {
          uint64_t v9 = *((void *)&xmmword_26AE66C28 + 1);
          uint64_t v10 = *((void *)&xmmword_26AE66C28 + 1) + 1352;
          long long v11 = *((_OWORD *)a1 + 1);
          *(_OWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1352) = *(_OWORD *)a1;
          *(_OWORD *)(v10 + 16) = v11;
          uint64_t result = 1;
          *(unsigned char *)(v9 + 1384) = 1;
          return result;
        }
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_BDS_B1 = %f [0, 6..60 dB], Out of range!");
      }
      else
      {
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GAL_E1 = %f [0, 6..60 dB], Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GPS_L1 = %f [0, 6..60 dB], Out of range!");
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: Strong_Signal_Threshold = %f [0, 6..60 dBHz], Out of range!");
  }
  return 0;
}

uint64_t GN_GPS_Set_XOF_Time(unsigned int a1, unsigned int a2)
{
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1032) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_RTI_Time(unsigned int a1, unsigned int a2)
{
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((void *)&xmmword_26AE66C28 + 1) + 1036) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_EE_Start_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_EE_Start_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 >= 0x93A80)
  {
    EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  uint64_t v5 = *((void *)&xmmword_26AE66C28 + 1);
  uint64_t v6 = a2 + 604800 * a1;
  Debug_Log_GPS_EE_Start_Time(a1, a2);
  if (v6 != *(void *)(v5 + 1040))
  {
    long long v7 = *(_OWORD *)(v5 + 397);
    long long v8 = *(_OWORD *)(v5 + 413);
    long long v9 = *(_OWORD *)(v5 + 365);
    *(_OWORD *)(v5 + 840) = *(_OWORD *)(v5 + 381);
    *(_OWORD *)(v5 + 856) = v7;
    *(_OWORD *)(v5 + 872) = v8;
    long long v10 = *(_OWORD *)(v5 + 333);
    long long v11 = *(_OWORD *)(v5 + 349);
    long long v12 = *(_OWORD *)(v5 + 301);
    *(_OWORD *)(v5 + 776) = *(_OWORD *)(v5 + 317);
    *(_OWORD *)(v5 + 792) = v10;
    long long v13 = *(_OWORD *)(v5 + 253);
    *(_OWORD *)(v5 + 808) = v11;
    *(_OWORD *)(v5 + 824) = v9;
    long long v14 = *(_OWORD *)(v5 + 269);
    long long v15 = *(_OWORD *)(v5 + 285);
    *(_OWORD *)(v5 + 712) = v13;
    *(_OWORD *)(v5 + 728) = v14;
    *(void *)(v5 + 1040) = v6;
    *(_WORD *)(v5 + 888) = *(_WORD *)(v5 + 429);
    *(_OWORD *)(v5 + 744) = v15;
    *(_OWORD *)(v5 + 760) = v12;
    Core_Save_Inhib_EE((BOOL *)(v5 + 712), v6);
  }
  return 1;
}

uint64_t GN_GPS_Encode_NMEA(unsigned int a1, char *a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned __int16 v5 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1 >= 4 && a2)
  {
    if (a5 && (*a5 != *a4 || a5[1] != a4[1]))
    {
      EvCrt_v("GN_GPS_Encode_NMEA:  FAILED:  Incompatible Nav & Debug Data Local_TTag or OS_Time_ms");
      return 0;
    }
    if (!a3)
    {
      unsigned __int16 v5 = 0;
      *a2 = 0;
      return v5;
    }
    long long v13 = a2;
    long long v14 = &a2[a1];
    long long v11 = a2;
    long long v12 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    if (a3)
    {
      WORD1(v8) = 1;
      if ((a3 & 2) == 0)
      {
LABEL_9:
        if ((a3 & 4) == 0) {
          goto LABEL_10;
        }
        goto LABEL_24;
      }
    }
    else if ((a3 & 2) == 0)
    {
      goto LABEL_9;
    }
    LOWORD(v8) = 1;
    if ((a3 & 4) == 0)
    {
LABEL_10:
      if ((a3 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
LABEL_24:
    WORD2(v8) = 1;
    if ((a3 & 8) == 0)
    {
LABEL_11:
      if ((a3 & 0x10) == 0) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_25:
    HIWORD(v8) = 1;
    if ((a3 & 0x10) == 0)
    {
LABEL_12:
      if ((a3 & 0x20) == 0) {
        goto LABEL_13;
      }
      goto LABEL_27;
    }
LABEL_26:
    LOWORD(v9) = 1;
    if ((a3 & 0x20) == 0)
    {
LABEL_13:
      if ((a3 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
LABEL_27:
    WORD1(v9) = 1;
    if ((a3 & 0x40) == 0)
    {
LABEL_14:
      if ((a3 & 0x80) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
LABEL_28:
    WORD2(v9) = 1;
    if ((a3 & 0x80) == 0)
    {
LABEL_15:
      if ((a3 & 0x100) == 0) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
LABEL_29:
    HIWORD(v9) = 1;
    if ((a3 & 0x100) == 0)
    {
LABEL_16:
      if ((a3 & 0x200) == 0)
      {
LABEL_18:
        NMEA_Encode(&v11, (__int16 *)&v8, (uint64_t)a4, (uint64_t)a5);
        uint64_t v6 = v11;
        unsigned __int16 v5 = (_WORD)v11++ - (_WORD)v12;
        *uint64_t v6 = 0;
        return v5;
      }
LABEL_17:
      HIWORD(v10) = 1;
      goto LABEL_18;
    }
LABEL_30:
    LOWORD(v10) = 1;
    if ((a3 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  return v5;
}

void *GN_GPS_Mark_Single_Pos_Used(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl((char **)xmmword_26AE66D48);
  GNSS_GNB_Debug_Ctl(xmmword_26AE66D68);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_26AE66D58);
  LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_26AE66D68 + 1));
  uint64_t v8 = __src;
  double v43 = __src;
  unint64_t v44 = v46;
  uint64_t v42 = __src;
  char v9 = 10;
  uint64_t v10 = 1u;
  do
  {
    uint64_t v41 = v8 + 1;
    *uint64_t v8 = v9;
    uint64_t v8 = v41;
    unint64_t v11 = (unint64_t)v44;
    if (v41 >= v44)
    {
      uint64_t v8 = v43;
      uint64_t v41 = v43;
    }
    char v9 = str_100[v10++];
  }
  while (v10 != 36);
  if (a1) {
    char v12 = 70;
  }
  else {
    char v12 = 66;
  }
  *uint64_t v8 = v12;
  long long v13 = v8 + 1;
  if ((unint64_t)v13 >= v11) {
    long long v13 = v43;
  }
  uint64_t v41 = v13 + 1;
  *long long v13 = 32;
  if ((unint64_t)(v13 + 1) >= v11) {
    uint64_t v41 = v43;
  }
  sprintf_2d(&v41, a2);
  long long v14 = v41++;
  *long long v14 = 32;
  if (v41 >= v44) {
    uint64_t v41 = v43;
  }
  sprintf_10u(&v41, a3);
  uint64_t v15 = v41++;
  char *v15 = 32;
  if (v41 >= v44) {
    uint64_t v41 = v43;
  }
  sprintf_10u(&v41, a4);
  uint64_t v16 = 0;
  char v17 = 32;
  int v18 = v41;
  do
  {
    uint64_t v41 = v18 + 1;
    *int v18 = v17;
    int v18 = v41;
    if (v41 >= v44)
    {
      int v18 = v43;
      uint64_t v41 = v43;
    }
    char v17 = str_101[++v16];
  }
  while (v16 != 8);
  API_Query_Config((uint64_t)v46);
  int v19 = (void *)xmmword_26AE66D68;
  int v20 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v21 = *(void *)(xmmword_26AE66D68 + 24);
  uint64_t v22 = *(void **)xmmword_26AE66D68;
  int v23 = __src;
  do
  {
    int v24 = v21 - v22;
    if (v20 >= v24) {
      int v25 = v24;
    }
    else {
      int v25 = v20;
    }
    memcpy(v22, v23, v25);
    uint64_t v22 = (void *)(*v19 + v25);
    *int v19 = v22;
    unint64_t v21 = v19[3];
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v22 = (void *)v19[2];
      *int v19 = v22;
    }
    v23 += v25;
    BOOL v26 = __OFSUB__(v20, v25);
    v20 -= v25;
  }
  while (!((v20 < 0) ^ v26 | (v20 == 0)));
  __int16 v27 = (void *)*((void *)&xmmword_26AE66D58 + 1);
  int v28 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v29 = *(void *)(*((void *)&xmmword_26AE66D58 + 1) + 24);
  double v30 = (void *)**((void **)&xmmword_26AE66D58 + 1);
  uint64_t v31 = __src;
  do
  {
    int v32 = v29 - v30;
    if (v28 >= v32) {
      int v33 = v32;
    }
    else {
      int v33 = v28;
    }
    memcpy(v30, v31, v33);
    double v30 = (void *)(*v27 + v33);
    *__int16 v27 = v30;
    unint64_t v29 = v27[3];
    if ((unint64_t)v30 >= v29)
    {
      double v30 = (void *)v27[2];
      *__int16 v27 = v30;
    }
    v31 += v33;
    BOOL v26 = __OFSUB__(v28, v33);
    v28 -= v33;
  }
  while (!((v28 < 0) ^ v26 | (v28 == 0)));
  uint64_t v34 = (void *)xmmword_26AE66D58;
  int v35 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  unint64_t v36 = *(void *)(xmmword_26AE66D58 + 24);
  uint64_t result = *(void **)xmmword_26AE66D58;
  uint64_t v38 = __src;
  do
  {
    int v39 = v36 - result;
    if (v35 >= v39) {
      int v40 = v39;
    }
    else {
      int v40 = v35;
    }
    memcpy(result, v38, v40);
    uint64_t result = (void *)(*v34 + v40);
    *uint64_t v34 = result;
    unint64_t v36 = v34[3];
    if ((unint64_t)result >= v36)
    {
      uint64_t result = (void *)v34[2];
      *uint64_t v34 = result;
    }
    v38 += v40;
    BOOL v26 = __OFSUB__(v35, v40);
    v35 -= v40;
  }
  while (!((v35 < 0) ^ v26 | (v35 == 0)));
  return result;
}

uint64_t GN_GPS_Set_TM_FSP_OS_Time_ms(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: %u %u %d", a1, a2, a1 - a2);
  Debug_Log_TM_FCP_OS_Time_ms(a1, a2);
  double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if ((int)((unint64_t)v4 - a1) >= 0) {
    unsigned int v5 = (unint64_t)v4 - a1;
  }
  else {
    unsigned int v5 = a1 - (unint64_t)v4;
  }
  if (v5 < 0x1389)
  {
    uint64_t result = Is_GN_API_Set_Allowed("API_Set_TM_FSP_OS_Time_ms");
    if (result)
    {
      uint64_t v7 = *(void *)(p_api + 328);
      uint64_t result = 1;
      *(unsigned char *)uint64_t v7 = 1;
      *(_DWORD *)(v7 + 400) = a1;
      *(_DWORD *)(v7 + 404) = a2;
    }
  }
  else
  {
    EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: REJECTED: OS_Time too different %d", (unint64_t)v4 - a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_RTI_Bad_SV_List(unsigned int a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __int16 v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  int v6 = Is_GN_API_Set_Allowed("GN_GPS_Set_RTI_Bad_SV_List");
  uint64_t result = 0;
  if (!v6) {
    return result;
  }
  Debug_Log_GPS_RTI_Bad_SV_List(a1, a2, a3);
  if (a1 > 0xB2)
  {
    EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Num_Bad_SV = %d >%d, Out of range!");
    return 0;
  }
  if (!a1)
  {
    int v19 = 0;
    int v18 = 0;
    int v17 = 0;
    int v16 = 0;
    int v15 = 0;
LABEL_36:
    EvLog_v("GN_GPS_Set_RTI_Bad_SV_List: G %d R %d Q %d S %d B %d E %d", a1, v19, v17, v18, v15, v16);
    return API_Set_RTI_Bad_SV_List(v22);
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1;
  while (2)
  {
    unsigned int v10 = a2[v8];
    uint64_t v11 = 0;
    unsigned int v12 = 32;
    switch(v10)
    {
      case 1u:
        goto LABEL_15;
      case 2u:
        unsigned int v12 = 24;
        uint64_t v11 = 1;
        unsigned int v10 = 1;
        goto LABEL_15;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
        goto LABEL_11;
      case 4u:
        unsigned int v12 = 202;
        unsigned int v10 = 193;
        uint64_t v11 = 4;
        goto LABEL_15;
      case 8u:
        unsigned int v12 = 158;
        unsigned int v10 = 120;
        uint64_t v11 = 5;
        goto LABEL_15;
      default:
        if (v10 != 32)
        {
          if (v10 == 16)
          {
            unsigned int v12 = 36;
            unsigned int v10 = 1;
            uint64_t v11 = 2;
            goto LABEL_15;
          }
LABEL_11:
          EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Bad_SV_Type_List[%d] = 0x%x, Out of range!", v8, v10);
LABEL_21:
          if (a1 == ++v8)
          {
            int v15 = 0;
            int v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 0;
            a1 = 0;
            do
            {
              int v21 = *a2++;
              int v20 = v21;
              switch(v21)
              {
                case 1:
                  ++a1;
                  break;
                case 2:
                  ++v19;
                  break;
                case 3:
                case 5:
                case 6:
                case 7:
                  goto LABEL_28;
                case 4:
                  ++v17;
                  break;
                case 8:
                  ++v18;
                  break;
                default:
                  if (v20 == 16)
                  {
                    ++v16;
                  }
                  else if (v20 == 32)
                  {
                    ++v15;
                  }
                  else
                  {
LABEL_28:
                    EvCrt_Illegal_Default("GN_GPS_Set_RTI_Bad_SV_List", 0xD84u);
                  }
                  break;
              }
              --v9;
            }
            while (v9);
            goto LABEL_36;
          }
          continue;
        }
        unsigned int v12 = 37;
        unsigned int v10 = 1;
        uint64_t v11 = 3;
LABEL_15:
        unsigned int v13 = a3[v8];
        if (v13 >= v10 && v12 >= v13)
        {
          v22[v13 - v10 + Num_Prn[v11]] = 1;
          goto LABEL_21;
        }
        EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Bad_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
        return 0;
    }
  }
}

void GncP25_02StopTimemarkSessTimer(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_TimemarkTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8790278))
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v0 = mach_continuous_time();
        unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP25_02StopTimemarkSessTimer", 1545);
        LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
      }
    }
    else
    {
      g_TimemarkTimerStatus = 0;
    }
  }
}

unint64_t GncP25_04HandleTimeMarkEvent(unsigned __int8 *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (g_TimeMarkState == 1)
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pulse not processed\n");
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  if (a2 != 18)
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
    goto LABEL_41;
  }
  if (a1[8] != 83)
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v34 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%u\n", v34);
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  if (g_GncP_PEUpdate[0]) {
    unsigned int v5 = g_GncP_PEUpdate;
  }
  else {
    unsigned int v5 = 0;
  }
  if (!g_GncP_PEUpdate[0])
  {
    unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!result) {
      return result;
    }
LABEL_41:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  unint64_t result = (unint64_t)gnssOsa_Calloc("GncP25_04HandleTimeMarkEvent", 188, 1, 0x40uLL);
  if (result)
  {
    uint64_t v6 = result;
    unsigned int v7 = *(_DWORD *)(a1 + 9);
    unsigned int v8 = a1[14];
    unsigned int v9 = a1[13] | (v8 << 8);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v7, v9);
      LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
    }
    if (byte_26AE003A1)
    {
      *(double *)&unint64_t v12 = (double)v9;
      LODWORD(v12) = dword_26AE00398;
      double v13 = (double)v7 + (double)v9 * 0.0000152587891 - (double)v12;
      double v14 = v13 * (*(double *)&qword_26AE003D0 + 1.0);
      double v15 = v14 + *(double *)&qword_26AE003B8 * 1000.0;
      double v16 = sqrt(*(double *)&qword_26AE00440 * (v14 * (v14 * *(double *)&qword_26AE00440))+ *(double *)&qword_26AE00430 * 1000.0 * (*(double *)&qword_26AE00430 * 1000.0));
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeltaToW,%.12f,DeltaTick,%.12f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP25_06CalculateTOW", v14, v13);
        LbsOsaTrace_WriteLog(8u, __str, v18, 5, 1);
      }
      uint64_t v19 = 0;
      int v20 = 0;
      __int16 v21 = word_26AE003B0;
      double v22 = v15 + -604800000.0;
      if (v15 < 604800000.0) {
        double v22 = v15;
      }
      else {
        __int16 v21 = word_26AE003B0 + 1;
      }
      *(_WORD *)(v6 + 18) = v21;
      *(unsigned char *)(v6 + 16) = 1;
      *(double *)(v6 + 24) = v22;
      *(double *)(v6 + 32) = v16;
      double v23 = *(double *)&qword_26AE003D8;
      if (!byte_26AE00391) {
        double v23 = 0.0;
      }
      *(unsigned char *)(v6 + 40) = byte_26AE00391;
      *(double *)(v6 + 48) = v23;
      if (dword_26AE004C0 == 4) {
        char v24 = 5;
      }
      else {
        char v24 = 0;
      }
      if (dword_26AE004C0 == 2) {
        char v25 = 3;
      }
      else {
        char v25 = v24;
      }
      long long v26 = v5 + 332;
      long long v27 = v5 + 6096;
      *(unsigned char *)(v6 + 60) = v25;
      do
      {
        if (v27[v19])
        {
          switch(*(_DWORD *)&v26[4 * v19])
          {
            case 1:
              v20 |= 1u;
              break;
            case 2:
              v20 |= 0x20u;
              break;
            case 3:
              v20 |= 0x10u;
              break;
            case 4:
              v20 |= 4u;
              break;
            case 5:
              v20 |= 0x40u;
              break;
            case 6:
              v20 |= 2u;
              break;
            default:
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v28 = mach_continuous_time();
                unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Const,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 87, "GncP25_05GetConstellationUsed", 770, *(_DWORD *)&v26[4 * v19], v19);
                LbsOsaTrace_WriteLog(8u, __str, v29, 2, 1);
              }
              break;
          }
        }
        ++v19;
      }
      while (v19 != 128);
      *(_WORD *)(v6 + 62) = v20;
    }
    else
    {
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v30 = mach_continuous_time();
        unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
        LbsOsaTrace_WriteLog(8u, __str, v31, 4, 1);
      }
    }
    *(_DWORD *)(v6 + 56) = v7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
      LbsOsaTrace_WriteLog(8u, __str, v33, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8784643, (unsigned char *)v6);
    return GncP25_09UpdateTimeMarkInfo(0, 1, 0, v7 + (v8 >> 7));
  }
  return result;
}

unint64_t GncP25_09UpdateTimeMarkInfo(unint64_t result, int a2, int a3, int a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (result)
  {
    _MergedGlobals_2 = a3;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 1;
  }
  if (a2)
  {
    dword_26AE77070 = a4;
    unint64_t result = mach_continuous_time();
    dword_26AE77074 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 1;
  }
  else if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick != 1)
  {
    return result;
  }
  if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime == 1)
  {
    GncP25_02StopTimemarkSessTimer();
    int v4 = _MergedGlobals_2;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v4 > 0x1F3
      || (int v5 = dword_26AE77074,
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v5 > 0x1F3))
    {
      unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      if (!result)
      {
LABEL_17:
        GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
        GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 0;
        g_TimeMarkState = 1;
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid OStime %u,BBtick,%u,BBTickRx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_26AE77070, dword_26AE77074);
      int v10 = 2;
    }
    else
    {
      if ((GN_GPS_Set_TM_FSP_OS_Time_ms(_MergedGlobals_2, dword_26AE77070) & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v6 = mach_continuous_time();
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GN_GPS_Set_TM_FSP_OS_Time_ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", 257);
          LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
        }
      }
      unint64_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (!result) {
        goto LABEL_17;
      }
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: TMInfo OStime %u,BBtick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_26AE77070);
      int v10 = 4;
    }
    unint64_t result = LbsOsaTrace_WriteLog(8u, __str, v9, v10, 1);
    goto LABEL_17;
  }
  return result;
}

uint64_t GncP25_01HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP25_01HandleStartTimeMarkReq");
      LbsOsaTrace_WriteLog(8u, __str, v2, 4, 1);
    }
    unsigned __int16 v3 = gnssOsa_Calloc("GncP25_01HandleStartTimeMarkReq", 326, 1, 0x10uLL);
    if (v3)
    {
      int v4 = v3;
      if ((g_TimeMarkState & 1) == 0)
      {
        v3[12] = 0;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP25_01HandleStartTimeMarkReq", 2056);
          LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
        }
        goto LABEL_20;
      }
      int v5 = g_GncPStateInfo;
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (v5 == 7)
      {
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TM started ME ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP25_03HandleStartTimeMark");
          LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
        }
        int v9 = byte_26ADFF923;
        int v10 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
        if (!v9)
        {
          if (v10)
          {
            bzero(__str, 0x410uLL);
            uint64_t v19 = mach_continuous_time();
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME duty cycle disabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "GncP25_03HandleStartTimeMark");
            LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
          }
          g_TimeMarkState = 0;
          GncP25_02StopTimemarkSessTimer();
          if (AgpsFsmStartTimer(0x862106u, 0x3E8u))
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v21 = mach_continuous_time();
              unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GncP25_03StartTimemarkSessTimer", 1544, 1000);
              LbsOsaTrace_WriteLog(8u, __str, v22, 2, 1);
            }
          }
          else
          {
            g_TimemarkTimerStatus = 1;
          }
          Hal_TriggerTimeMarkPulse((void (*)(unsigned int, BOOL))GncP25_07TimeMarkPulseCb);
          v4[12] = 1;
          goto LABEL_20;
        }
        if (v10)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME duty cycle allowed\n");
LABEL_18:
          LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
        }
      }
      else if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TM ReqRejected MEState,%hhu\n", v23);
        goto LABEL_18;
      }
      g_TimeMarkState = 1;
      v4[12] = 0;
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GncP25_01HandleStartTimeMarkReq", v4[12]);
        LbsOsaTrace_WriteLog(8u, __str, v17, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8390916, v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP25_01HandleStartTimeMarkReq", 517);
    LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
  }
  return 0;
}

void GncP25_07TimeMarkPulseCb(int a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned __int16 v3 = gnssOsa_Calloc("GncP25_07TimeMarkPulseCb", 369, 1, 0x10uLL);
    if (v3)
    {
      int v4 = v3;
      *((_DWORD *)v3 + 3) = a1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_07TimeMarkPulseCb");
        LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
      }
      AgpsSendFsmMsg(134, 134, 8791299, v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeMark Trig fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP25_07TimeMarkPulseCb");
    LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
  }
}

uint64_t GncP25_08HandleTimeMarkPulseInd(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_08HandleTimeMarkPulseInd");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if ((g_TimeMarkState & 1) == 0)
    {
      GncP25_09UpdateTimeMarkInfo(1uLL, 0, *(_DWORD *)(a1 + 12), 0);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Session Stopped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP25_08HandleTimeMarkPulseInd", 262);
      int v6 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v6, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP25_08HandleTimeMarkPulseInd", 517);
    int v6 = 0;
    goto LABEL_9;
  }
  return 0;
}

void GncP25_10TimemarkSessTimerExpiry(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  g_TimemarkTimerStatus = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTicuint64_t k = 0;
  g_TimeMarkState = 1;
  uint64_t v0 = gnssOsa_Calloc("GncP25_10TimemarkSessTimerExpiry", 473, 1, 0x40uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    v0[2] = 0u;
    v0[3] = 0u;
    v0[1] = 0u;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8784643, v1);
  }
}

uint64_t sprintf_eR8(void *a1, double a2)
{
  double v3 = -a2;
  if (a2 >= 0.0) {
    double v3 = a2;
  }
  if (v3 <= 0.0)
  {
    unsigned int i = 0;
    unsigned int v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.00001; double v3 = v3 * 10000.0)
      i -= 4;
    for (; v3 < 0.1; double v3 = v3 * 10.0)
      --i;
    for (; v3 > 10000.0; double v3 = v3 * 0.0001)
      i += 4;
    while (v3 > 10.0)
    {
      ++i;
      double v3 = v3 * 0.1;
    }
    double v6 = v3 * 10000000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        int v9 = (int)v8;
      }
      else {
        int v9 = 0x80000000;
      }
    }
    else
    {
      int v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0) {
      unsigned int v5 = v9;
    }
    else {
      unsigned int v5 = -v9;
    }
  }
  sprintf_9f((uint64_t)a1, v5, 8);
  uint64_t v10 = (unsigned char *)(*a1)++;
  *uint64_t v10 = 101;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return sprintf_03d((uint64_t)a1, i);
}

void *sprintf_gR8(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 7;
LABEL_67:
    return (void *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100000.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 6;
    goto LABEL_67;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10000.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 5;
    goto LABEL_67;
  }
  if (v2 < 99999.0)
  {
    double v15 = a2 * 1000.0;
    double v16 = -0.5;
    if (v15 > 0.0) {
      double v16 = 0.5;
    }
    double v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        unsigned int v7 = (int)v17;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
    goto LABEL_67;
  }
  if (v2 < 999999.0)
  {
    double v18 = a2 * 100.0;
    double v19 = -0.5;
    if (v18 > 0.0) {
      double v19 = 0.5;
    }
    double v20 = v18 + v19;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        unsigned int v7 = (int)v20;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_67;
  }
  if (v2 < 9999999.0)
  {
    double v21 = a2 * 10.0;
    double v22 = -0.5;
    if (v21 > 0.0) {
      double v22 = 0.5;
    }
    double v23 = v21 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0) {
        unsigned int v7 = (int)v23;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_67;
  }
  if (v2 >= 99999999.0)
  {
    return (void *)sprintf_eR8(a1, a2);
  }
  else
  {
    double v24 = -0.5;
    if (a2 > 0.0) {
      double v24 = 0.5;
    }
    double v25 = v24 + a2;
    if (v25 <= 2147483650.0)
    {
      if (v25 >= -2147483650.0) {
        unsigned int v26 = (int)v25;
      }
      else {
        unsigned int v26 = 0x80000000;
      }
    }
    else
    {
      unsigned int v26 = 0x7FFFFFFF;
    }
    return sprintf_10d(a1, v26);
  }
}

void *sprintf_seR8(void *a1, double a2)
{
  double v3 = -a2;
  if (a2 >= 0.0) {
    double v3 = a2;
  }
  if (v3 <= 0.0)
  {
    unsigned int i = 0;
    unsigned int v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.0001; double v3 = v3 * 1000.0)
      i -= 3;
    for (; v3 < 0.1; double v3 = v3 * 10.0)
      --i;
    for (; v3 > 1000.0; double v3 = v3 * 0.001)
      i += 3;
    while (v3 > 9.999)
    {
      ++i;
      double v3 = v3 * 0.1;
    }
    double v6 = v3 * 1000.0;
    double v7 = -0.5;
    if (v6 > 0.0) {
      double v7 = 0.5;
    }
    double v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0) {
        int v9 = (int)v8;
      }
      else {
        int v9 = 0x80000000;
      }
    }
    else
    {
      int v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0) {
      unsigned int v5 = v9;
    }
    else {
      unsigned int v5 = -v9;
    }
  }
  sprintf_5f((uint64_t)a1, v5, 4);
  double v10 = (unsigned char *)(*a1)++;
  *double v10 = 101;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  return sprintf_02d(a1, i);
}

void *sprintf_sgR8(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
LABEL_40:
    return (void *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_40;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_40;
  }
  if (v2 >= 99999.0)
  {
    return sprintf_seR8(a1, a2);
  }
  else
  {
    double v15 = -0.5;
    if (a2 > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v15 + a2;
    if (v16 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        unsigned int v17 = (int)v16;
      }
      else {
        unsigned int v17 = 0x80000000;
      }
    }
    else
    {
      unsigned int v17 = 0x7FFFFFFF;
    }
    return sprintf_7d(a1, v17);
  }
}

void *sprintf_sgR8F(void *a1, double a2)
{
  double v2 = fabs(a2);
  double v3 = (unsigned char *)(*a1)++;
  *double v3 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  if (v2 < 99.0)
  {
    double v4 = a2 * 1000.0;
    double v5 = -0.5;
    if (v4 > 0.0) {
      double v5 = 0.5;
    }
    double v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0) {
        unsigned int v7 = (int)v6;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 4;
LABEL_40:
    return (void *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    double v8 = a2 * 100.0;
    double v9 = -0.5;
    if (v8 > 0.0) {
      double v9 = 0.5;
    }
    double v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0) {
        unsigned int v7 = (int)v10;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 3;
    goto LABEL_40;
  }
  if (v2 < 9999.0)
  {
    double v11 = a2 * 10.0;
    double v12 = -0.5;
    if (v11 > 0.0) {
      double v12 = 0.5;
    }
    double v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0) {
        unsigned int v7 = (int)v13;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
    }
    else
    {
      unsigned int v7 = 0x7FFFFFFF;
    }
    int v14 = 2;
    goto LABEL_40;
  }
  if (v2 >= 99999.0)
  {
    return sprintf_seR8(a1, a2);
  }
  else
  {
    double v15 = -0.5;
    if (a2 > 0.0) {
      double v15 = 0.5;
    }
    double v16 = v15 + a2;
    if (v16 <= 2147483650.0)
    {
      if (v16 >= -2147483650.0) {
        unsigned int v17 = (int)v16;
      }
      else {
        unsigned int v17 = 0x80000000;
      }
    }
    else
    {
      unsigned int v17 = 0x7FFFFFFF;
    }
    return sprintf_9d(a1, v17);
  }
}

char **sprintf_ACC(char **result, double a2)
{
  if (a2 <= 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          double v15 = a2 * 1000.0;
          double v16 = -0.5;
          if (v15 > 0.0) {
            double v16 = 0.5;
          }
          double v17 = v15 + v16;
          if (v17 <= 2147483650.0)
          {
            if (v17 >= -2147483650.0) {
              unsigned int v11 = (int)v17;
            }
            else {
              unsigned int v11 = 0x80000000;
            }
          }
          else
          {
            unsigned int v11 = 0x7FFFFFFF;
          }
          int v18 = 4;
        }
        else
        {
          double v12 = a2 * 100.0;
          double v13 = -0.5;
          if (v12 > 0.0) {
            double v13 = 0.5;
          }
          double v14 = v12 + v13;
          if (v14 <= 2147483650.0)
          {
            if (v14 >= -2147483650.0) {
              unsigned int v11 = (int)v14;
            }
            else {
              unsigned int v11 = 0x80000000;
            }
          }
          else
          {
            unsigned int v11 = 0x7FFFFFFF;
          }
          int v18 = 3;
        }
      }
      else
      {
        double v8 = a2 * 10.0;
        double v9 = -0.5;
        if (v8 > 0.0) {
          double v9 = 0.5;
        }
        double v10 = v8 + v9;
        if (v10 <= 2147483650.0)
        {
          if (v10 >= -2147483650.0) {
            unsigned int v11 = (int)v10;
          }
          else {
            unsigned int v11 = 0x80000000;
          }
        }
        else
        {
          unsigned int v11 = 0x7FFFFFFF;
        }
        int v18 = 2;
      }
      return (char **)sprintf_4f((uint64_t)result, v11, v18);
    }
    else
    {
      double v5 = -0.5;
      if (a2 > 0.0) {
        double v5 = 0.5;
      }
      double v6 = v5 + a2;
      if (v6 <= 2147483650.0)
      {
        if (v6 >= -2147483650.0) {
          unsigned int v7 = (int)v6;
        }
        else {
          unsigned int v7 = 0x80000000;
        }
      }
      else
      {
        unsigned int v7 = 0x7FFFFFFF;
      }
      return (char **)sprintf_5d(result, v7);
    }
  }
  else
  {
    double v2 = *result;
    char v3 = 57;
    uint64_t v4 = 1u;
    do
    {
      *unint64_t result = v2 + 1;
      *double v2 = v3;
      double v2 = *result;
      if (*result >= result[3])
      {
        double v2 = result[2];
        *unint64_t result = v2;
      }
      char v3 = str_10[v4++];
    }
    while (v4 != 6);
  }
  return result;
}

uint64_t sprintf_v(uint64_t result, char *a2, _DWORD *a3)
{
  char v3 = (char **)result;
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = *a2;
  if (*a2)
  {
    double v5 = a2;
    char v6 = 0;
    do
    {
      if (v4 == 37 || (v6 & 1) != 0)
      {
        if ((v6 & 1) == 0)
        {
          int v8 = *++v5;
          unsigned __int8 v4 = v8;
          if (!v8) {
            return result;
          }
        }
        if ((char)v4 <= 114)
        {
          switch(v4)
          {
            case 'c':
              double v9 = a3;
              a3 += 2;
              LODWORD(v9) = *v9;
              double v10 = (*v3)++;
              *double v10 = (char)v9;
              goto LABEL_6;
            case 'd':
              double v14 = a3;
              a3 += 2;
              int v15 = *v14;
              if (v15 >= 0) {
                unsigned int v16 = v15;
              }
              else {
                unsigned int v16 = -v15;
              }
              unint64_t result = (uint64_t)sprintf1da(v3, v16, v32, 0, v15 >> 31);
              goto LABEL_7;
            case 'e':
              double v17 = (double *)a3;
              a3 += 2;
              unint64_t result = sprintf_eR8(v3, *v17);
              goto LABEL_7;
            case 'f':
              int v18 = (double *)a3;
              a3 += 2;
              unint64_t result = (uint64_t)sprintf_sgR8(v3, *v18);
              goto LABEL_7;
            case 'g':
              double v19 = (double *)a3;
              a3 += 2;
              unint64_t result = (uint64_t)sprintf_gR8(v3, *v19);
              goto LABEL_7;
            default:
              if (v4 != 88) {
                goto LABEL_36;
              }
              double v13 = (unint64_t *)a3;
              a3 += 2;
              unint64_t result = (uint64_t)sprintf_1X(v3, *v13);
              break;
          }
          goto LABEL_7;
        }
        switch(v4)
        {
          case 's':
            double v20 = (unsigned char **)a3;
            a3 += 2;
            double v21 = *v20;
            char v22 = *v21;
            if (*v21)
            {
              double v23 = *v3;
              double v24 = v21 + 1;
              do
              {
                *char v3 = v23 + 1;
                *double v23 = v22;
                double v23 = *v3;
                if (*v3 >= v3[3])
                {
                  double v23 = v3[2];
                  *char v3 = v23;
                }
                int v25 = *v24++;
                char v22 = v25;
              }
              while (v25);
            }
            goto LABEL_7;
          case 'u':
            unsigned int v26 = a3;
            a3 += 2;
            unint64_t result = (uint64_t)sprintf_1u(v3, *v26);
            goto LABEL_7;
          case 'x':
            double v12 = a3;
            a3 += 2;
            unint64_t result = (uint64_t)sprintf_1x(v3, *v12);
            goto LABEL_7;
        }
LABEL_36:
        if ((v4 - 48) < 0xAu || v4 <= 0x2Eu && ((1 << v4) & 0x680800000000) != 0)
        {
          char v6 = 1;
          goto LABEL_14;
        }
        long long v27 = (*v3)++;
        *long long v27 = 37;
        uint64_t v28 = *v3;
        if (*v3 >= v3[3])
        {
          uint64_t v28 = v3[2];
          *char v3 = v28;
        }
        char v29 = *v5;
        *char v3 = v28 + 1;
        *uint64_t v28 = v29;
      }
      else
      {
        unsigned int v7 = (*v3)++;
        *unsigned int v7 = v4;
      }
LABEL_6:
      if (*v3 >= v3[3])
      {
        char v6 = 0;
        *char v3 = v3[2];
        goto LABEL_14;
      }
LABEL_7:
      char v6 = 0;
LABEL_14:
      int v11 = *++v5;
      unsigned __int8 v4 = v11;
    }
    while (v11);
  }
  uint64_t v30 = (*v3)++;
  *uint64_t v30 = 10;
  if (*v3 >= v3[3]) {
    *char v3 = v3[2];
  }
  return result;
}

uint64_t GncP04_05HandlePosEventInd(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT SMClient,%hhu,Ses,%u,PosOp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP04_05HandlePosEventInd", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 16));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    int v4 = *(unsigned __int8 *)(a1 + 12);
    int v5 = *(unsigned __int16 *)(a1 + 14);
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v6 = 0;
      char v7 = 1;
      while (1)
      {
        char v8 = v7;
        if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 8) == 1
          && *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 4) == v4
          && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v6 + 3) == v5)
        {
          break;
        }
        char v7 = 0;
        uint64_t v6 = 1;
        if ((v8 & 1) == 0)
        {
          uint64_t v6 = 0;
          char v9 = 1;
          while (1)
          {
            char v10 = v9;
            if (!*((unsigned char *)&g_GncPCntxtInfo + 36 * v6 + 8)) {
              break;
            }
            char v9 = 0;
            uint64_t v6 = 1;
            if ((v10 & 1) == 0)
            {
              if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
                goto LABEL_47;
              }
              bzero(__str, 0x410uLL);
              unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              uint64_t v57 = *(unsigned __int16 *)(a1 + 14);
              uint64_t v58 = *(unsigned __int8 *)(a1 + 16);
              uint64_t v55 = 2054;
              uint64_t v56 = *(unsigned __int8 *)(a1 + 12);
              double v12 = "GncP04_07ProcessPosEvent";
              double v13 = "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,PosOp,%u\n";
LABEL_25:
              unsigned __int16 v23 = snprintf(__str, 0x40FuLL, v13, v11, "GNC", 87, v12, v55, v56, v57, v58);
LABEL_46:
              LbsOsaTrace_WriteLog(8u, __str, v23, 2, 1);
              goto LABEL_47;
            }
          }
          if (BYTE2(g_GncPCntxtInfo) < 2u)
          {
            ++BYTE2(g_GncPCntxtInfo);
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v27 = mach_continuous_time();
              size_t v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 73, "GncP04_03IncreaseInstnCount", BYTE2(g_GncPCntxtInfo));
              int v26 = 4;
LABEL_31:
              LbsOsaTrace_WriteLog(8u, __str, v25, v26, 1);
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v24 = mach_continuous_time();
            size_t v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 87, "GncP04_03IncreaseInstnCount", 770, BYTE2(g_GncPCntxtInfo));
            int v26 = 2;
            goto LABEL_31;
          }
          char v59 = 0;
          goto LABEL_34;
        }
      }
      char v59 = 1;
LABEL_34:
      uint64_t v28 = (char *)&g_GncPCntxtInfo + 36 * v6;
      v28[8] = 1;
      v28[4] = *(unsigned char *)(a1 + 12);
      __int16 v60 = (unsigned __int8 *)(v28 + 4);
      *((_WORD *)v28 + 3) = *(_WORD *)(a1 + 14);
      char v29 = (unsigned __int16 *)(v28 + 6);
      v28[9] = *(unsigned char *)(a1 + 16);
      uint64_t v30 = (unsigned __int8 *)(v28 + 9);
      *(_OWORD *)(v28 + 12) = *(_OWORD *)(a1 + 20);
      unsigned __int16 v31 = v28 + 12;
      *((_WORD *)v28 + 14) = *(_WORD *)(a1 + 36);
      uint64_t v32 = (unsigned __int16 *)(v28 + 28);
      *(_DWORD *)(v28 + 30) = *(_DWORD *)(a1 + 38);
      uint64_t v33 = (unsigned __int16 *)(v28 + 30);
      *(_DWORD *)(v28 + 34) = *(_DWORD *)(a1 + 42);
      unint64_t v34 = (unsigned __int8 *)(v28 + 34);
      v28[38] = *(unsigned char *)(a1 + 46);
      int v35 = (unsigned __int8 *)(v28 + 38);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v36 = mach_continuous_time();
        unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,Output,%u,ReqRcvd,%u,Deadline,%u,Emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 77, "GncP04_07ProcessPosEvent", 2057, *v60, *v29, *v30, *v31, *((_DWORD *)&g_GncPCntxtInfo + 9 * v6 + 4), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 37));
        LbsOsaTrace_WriteLog(8u, __str, v37, 3, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v38 = mach_continuous_time();
        unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartTime,%u,Int,%u,HAcc,%u,Vacc,%u,ConstMask,%u,PrefFtaMeasTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 77, "GncP04_07ProcessPosEvent", 2057, *(_DWORD *)(v35 - 18), *(_DWORD *)(v35 - 14), *v32, *v33, *v34, *v35);
        LbsOsaTrace_WriteLog(8u, __str, v39, 3, 1);
      }
      if (*v60 == 1)
      {
        GncP16_23UpdateStateFGSession(1);
        char v40 = v59;
        if ((*(unsigned char *)(a1 + 16) & 4) == 0) {
          char v40 = 1;
        }
        if ((v40 & 1) == 0) {
          GncP12_10ClearPeRtiInfo();
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid ClientID,%hhu\n");
        goto LABEL_46;
      }
LABEL_47:
      switch((char)g_GncPStateInfo)
      {
        case 0:
        case 5:
        case 10:
        case 11:
        case 16:
          return 0;
        case 1:
        case 3:
          char v41 = 2;
          goto LABEL_58;
        case 2:
        case 4:
          char v41 = 3;
          goto LABEL_58;
        case 6:
          char v41 = 7;
          goto LABEL_58;
        case 7:
        case 8:
        case 9:
        case 14:
        case 15:
          if (*(unsigned char *)(a1 + 16)) {
            char v41 = 6;
          }
          else {
            char v41 = 1;
          }
LABEL_58:
          GncP04_19SendPosEvntResp(v41);
          return 0;
        default:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            return 0;
          }
          bzero(__str, 0x410uLL);
          uint64_t v46 = mach_continuous_time();
          size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 87, "GncP04_05HandlePosEventInd", 770);
          int v16 = 2;
          break;
      }
      goto LABEL_17;
    }
    uint64_t v17 = 0;
    char v18 = 1;
    while (1)
    {
      char v19 = v18;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v17 + 8) == 1)
      {
        double v20 = (char *)&g_GncPCntxtInfo + 36 * v17;
        int v22 = v20[4];
        double v21 = v20 + 4;
        if (v22 == v4 && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v17 + 3) == v5) {
          break;
        }
      }
      char v18 = 0;
      uint64_t v17 = 1;
      if ((v19 & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v57 = *(unsigned __int16 *)(a1 + 14);
          uint64_t v58 = *(unsigned __int8 *)(a1 + 16);
          uint64_t v55 = 2050;
          uint64_t v56 = *(unsigned __int8 *)(a1 + 12);
          double v12 = "GncP04_06HandleStopPosEvent";
          double v13 = "%10u %s%c %s: #%04hx Client,%hhu,Ses,%u,PosOp,%u\n";
          goto LABEL_25;
        }
        goto LABEL_47;
      }
    }
    if (v4 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v54 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClientID,%hhu\n", v54);
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    *(_DWORD *)(v21 + 31) = 0;
    *(_OWORD *)double v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    if ((BYTE2(g_GncPCntxtInfo) - 3) > 0xFDu)
    {
      --BYTE2(g_GncPCntxtInfo);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
        goto LABEL_67;
      }
      bzero(__str, 0x410uLL);
      uint64_t v47 = mach_continuous_time();
      size_t v43 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "GNC", 73, "GncP04_04DecreaseInstnCount", BYTE2(g_GncPCntxtInfo));
      int v44 = 4;
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_67;
      }
      bzero(__str, 0x410uLL);
      uint64_t v42 = mach_continuous_time();
      size_t v43 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 87, "GncP04_04DecreaseInstnCount", 770, BYTE2(g_GncPCntxtInfo));
      int v44 = 2;
    }
    LbsOsaTrace_WriteLog(8u, __str, v43, v44, 1);
LABEL_67:
    uint64_t v48 = 0;
    char v49 = 1;
    while (1)
    {
      char v50 = v49;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v48 + 8) == 1 && !*((unsigned char *)&g_GncPCntxtInfo + 36 * v48 + 36)) {
        break;
      }
      char v49 = 0;
      uint64_t v48 = 1;
      if ((v50 & 1) == 0)
      {
        GncP16_23UpdateStateFGSession(0);
        break;
      }
    }
    uint64_t v51 = 0;
    char v52 = 1;
    do
    {
      char v53 = v52;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v51 + 8) == 1 && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v51 + 9) & 8) != 0) {
        goto LABEL_47;
      }
      char v52 = 0;
      uint64_t v51 = 1;
    }
    while ((v53 & 1) != 0);
    if (qword_26AE02328) {
      free((void *)qword_26AE02328);
    }
    qword_26AE02328 = 0;
    goto LABEL_47;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP04_05HandlePosEventInd", 517);
    int v16 = 0;
LABEL_17:
    LbsOsaTrace_WriteLog(8u, __str, v15, v16, 1);
  }
  return 0;
}

void GncP04_19SendPosEvntResp(char a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("GncP04_19SendPosEvntResp", 496, 1, 0x10uLL);
  if (v2)
  {
    unsigned __int16 v3 = v2;
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT_RSP =>GNCS Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP04_19SendPosEvntResp", v3[12]);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 130, 8784387, v3);
  }
}

uint64_t GncP04_08GetNextSessInstn(unsigned int a1, void *a2, unsigned __int8 a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    char v5 = 1;
    while (1)
    {
      char v6 = v5;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v3 + 8) == 1
        && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v3 + 9) & a3) != 0
        && a1 < ++v4)
      {
        break;
      }
      char v5 = 0;
      uint64_t v7 = 0;
      uint64_t v3 = 1;
      if ((v6 & 1) == 0) {
        return v7;
      }
    }
    memcpy_s("GncP04_08GetNextSessInstn", 391, a2, 0x24u, (char *)&g_GncPCntxtInfo + 36 * v3 + 4, 0x24uLL);
    return 1;
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t v7 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP04_08GetNextSessInstn", 513);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
      return 0;
    }
  }
  return v7;
}

uint64_t GncP04_18ChkAnyFGSessQualMet(void)
{
  uint64_t v0 = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v1 = 1;
  while (1)
  {
    char v2 = v1;
    uint64_t v3 = (unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0;
    if (v3[8] == 1 && v3[4] == 1 && GncP01_33CheckSessionQualMet(v3 + 4)) {
      break;
    }
    char v1 = 0;
    uint64_t v4 = 0;
    uint64_t v0 = 1;
    if ((v2 & 1) == 0) {
      return v4;
    }
  }
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v6 = mach_continuous_time();
  unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SesId,%u,Output,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP04_18ChkAnyFGSessQualMet", *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v0 + 3), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 9));
  uint64_t v4 = 1;
  LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  return v4;
}

void GncP04_21SendClearGnssAck(char a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v1 = g_GnssDataClrMask;
  if (g_GnssDataClrMask)
  {
    uint64_t v3 = gnssOsa_Calloc("GncP04_21SendClearGnssAck", 524, 1, 0x14uLL);
    if (v3)
    {
      uint64_t v4 = v3;
      v3[12] = a1;
      *((_DWORD *)v3 + 4) = v1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP04_21SendClearGnssAck", v4[12]);
        LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8786436, v4);
      g_GnssDataClrMasuint64_t k = 0;
    }
  }
}

BOOL GncP04_24Is3GPPMeasFTAPrefReq(void)
{
  uint64_t v0 = 0;
  int v1 = 1;
  do
  {
    while (1)
    {
      int v2 = v1;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 8) == 1 && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 9) & 4) != 0) {
        break;
      }
      int v1 = 0;
      BOOL result = 0;
      uint64_t v0 = 1;
      if ((v2 & 1) == 0) {
        return result;
      }
    }
    int v4 = *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 38);
    BOOL result = v4 != 0;
    if (v4) {
      break;
    }
    int v1 = 0;
    uint64_t v0 = 1;
  }
  while (((v2 ^ 1) & 1) == 0);
  return result;
}

BOOL GncP04_25Is3GPPMeasGPSPrefReq(void)
{
  uint64_t v0 = 0;
  int v1 = 1;
  do
  {
    while (1)
    {
      int v2 = v1;
      if (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 8) == 1 && (*((unsigned char *)&g_GncPCntxtInfo + 36 * v0 + 9) & 4) != 0) {
        break;
      }
      int v1 = 0;
      BOOL result = 0;
      uint64_t v0 = 1;
      if ((v2 & 1) == 0) {
        return result;
      }
    }
    int v4 = *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 38);
    BOOL result = v4 == 0;
    if (!v4) {
      break;
    }
    int v1 = 0;
    uint64_t v0 = 1;
  }
  while (((v2 ^ 1) & 1) == 0);
  return result;
}

uint64_t GncP04_30HandleNmeaDataReq(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP04_30HandleNmeaDataReq", 517);
    int v7 = 0;
LABEL_11:
    LbsOsaTrace_WriteLog(8u, __str, v6, v7, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_REQ Req,%u,Mask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP04_30HandleNmeaDataReq", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  __int16 v4 = *(unsigned __int8 *)(a1 + 12);
  if (*(unsigned char *)(a1 + 12))
  {
    __int16 v4 = *(_WORD *)(a1 + 14);
    if (!v4)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        return 0;
      }
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP04_30HandleNmeaDataReq", 515);
      int v7 = 2;
      goto LABEL_11;
    }
  }
  LOWORD(g_GncPCntxtInfo) = v4;
  GncP03_12SendUpdtCfg((unsigned __int16 *)&g_GncPCntxtInfo, 0);
  return 0;
}

char *NK_IntConstel_TO_IntMeas(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  __int16 v4 = (unsigned __int8 *)(a2 + 23264);
  uint64_t v22 = 0;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  int v5 = *(unsigned __int8 *)(a2 + 23264);
  if (v5 == 4)
  {
    if (*(int *)(a3 + 33548) >= 1 && *(_WORD *)(a3 + 33556) && *(_WORD *)(a3 + 33564))
    {
      int v8 = *(_DWORD *)(a2 + 23268);
      if (v8 == 5)
      {
        double v16 = *(double *)(a2 + 24) + -14.0;
        if (v16 < 0.0) {
          double v16 = v16 + 604800.0;
        }
        double v6 = ((double)*(__int16 *)(a3 + 33564) * 0.1 + (double)*(__int16 *)(a3 + 33566) * 0.1 * v16)
           * 0.000000001
           * 299792458.0;
        if ((int)v6 >= 0) {
          unsigned int v17 = (int)v6;
        }
        else {
          unsigned int v17 = -(int)v6;
        }
        if (v17 >= 0x12D) {
          return EvLog_v(" NK_IntConstel_TO_IntMeas: Large BDS-GLO Tim Off: %d");
        }
        double v13 = *(double *)(a2 + 752) - *(double *)(a2 + 744);
        uint64_t v14 = result + 10996;
        double v11 = 10.0;
        unsigned int v12 = 1;
        goto LABEL_35;
      }
      if (v8 != 4) {
        return result;
      }
      double v9 = *(double *)(a2 + 24) + -14.0;
      if (v9 < 0.0) {
        double v9 = v9 + 604800.0;
      }
      double v6 = ((double)*(__int16 *)(a3 + 33556) * 0.1 + (double)*(__int16 *)(a3 + 33558) * 0.1 * v9)
         * 0.000000001
         * 299792458.0;
      if ((int)v6 >= 0) {
        unsigned int v10 = (int)v6;
      }
      else {
        unsigned int v10 = -(int)v6;
      }
      if (v10 >= 0x1F) {
        return EvLog_v(" NK_IntConstel_TO_IntMeas: Large BDS-GPS Tim Off: %d");
      }
      *((double *)result + 915) = v6;
      *((void *)result + 916) = 0x4024000000000000;
      double v11 = 10.0;
    }
    else
    {
      if (*((_DWORD *)result + 2762) || *(_DWORD *)(a2 + 23268) != 4) {
        return result;
      }
      double v11 = 30.0;
      double v6 = 0.0;
    }
    unsigned int v12 = 0;
    double v13 = *(double *)(a2 + 752) - *(double *)(a2 + 736);
    uint64_t v14 = result + 10994;
LABEL_35:
    unsigned int v15 = 2;
LABEL_36:
    *((double *)&v20[1] + 1) = v6;
    *(double *)&v20[2] = v11 * v11;
    LOBYTE(v20[0]) = 1;
    DWORD1(v20[0]) = 2;
    *((void *)&v21 + 1) = 0x4415AF1D78B58C40;
    BOOL result = (char *)KFSt_DMeas_Update(v15, v12, 0xBu, (unsigned __int8 *)v20, (double *)result + 109, v14, v13 * 299792458.0);
    if (result)
    {
      int v18 = *v4;
      if (v18 == 4)
      {
        *((_DWORD *)v4 + 387) = DWORD1(v20[0]);
        int v19 = *((_DWORD *)v4 + 1);
        if (v19 == 5)
        {
          v4[1608] = 1;
        }
        else if (v19 == 4)
        {
          v4[1607] = 1;
          v4[32] = 1;
          *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)&v20[1] + 8);
        }
      }
      else if (v18 == 2)
      {
        *((_DWORD *)v4 + 386) = DWORD1(v20[0]);
        v4[1606] = 1;
        v4[8] = 1;
        *(_OWORD *)(a2 + 23280) = *(_OWORD *)((char *)&v20[1] + 8);
      }
      if ((unsigned __int16)g_Enable_Event_Log >= 6u) {
        return EvLog_v(" NK_IntConstel_TO_IntMeas: Time Offset applied: %d %d ");
      }
    }
    return result;
  }
  if (v5 == 2 && *(unsigned char *)(a3 + 16296))
  {
    double v6 = (double)*(int *)(a3 + 16236) * 9.31322575e-10 * 299792458.0;
    if ((int)v6 >= 0) {
      unsigned int v7 = (int)v6;
    }
    else {
      unsigned int v7 = -(int)v6;
    }
    if (v7 >= 0x12D) {
      return EvLog_v(" NK_IntConstel_TO_IntMeas: Large GGTO: %d");
    }
    *((double *)result + 911) = v6;
    *((void *)result + 912) = 0x4024000000000000;
    if (*(_DWORD *)(a2 + 23268) == 1)
    {
      unsigned int v12 = 0;
      double v13 = *(double *)(a2 + 744) - *(double *)(a2 + 736);
      uint64_t v14 = result + 10992;
      double v11 = 10.0;
      unsigned int v15 = 1;
      goto LABEL_36;
    }
  }
  return result;
}

unsigned __int16 *Gnm02_11ReqNewInstn(void)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v0 = 2u;
  while (*(void *)&g_GnmInstances[v0])
  {
    v0 += 2;
    if (v0 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v1 = mach_continuous_time();
        unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm02_11ReqNewInstn", 2054);
        LbsOsaTrace_WriteLog(0xBu, __str, v2, 2, 1);
      }
      return 0;
    }
  }
  __int16 v4 = (unsigned __int16 *)gnssOsa_Calloc("Gnm02_11ReqNewInstn", 186, 1, 0x10uLL);
  unsigned __int16 v3 = v4;
  *(void *)&g_GnmInstances[v0] = v4;
  if (v4)
  {
    unsigned __int16 v5 = g_GnmInstances[0];
    do
    {
      unint64_t v6 = 0;
      BOOL v7 = 0;
      if ((unsigned __int16)(v5 >> 2) < 0xFFFu) {
        ++v5;
      }
      else {
        unsigned __int16 v5 = 1;
      }
      do
      {
        int v8 = *(unsigned __int16 **)&g_GnmInstances[2 * v6 + 2];
        if (v8 && *v8 == v5) {
          break;
        }
        BOOL v7 = v6++ > 1;
      }
      while (v6 != 3);
    }
    while (!v7);
    g_GnmInstances[0] = __PAIR32__(HIWORD(g_GnmInstances[0]), v5) + 0x10000;
    *__int16 v4 = v5;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm02_11ReqNewInstn", 2057, *v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
  }
  return v3;
}

unsigned __int16 *Gnm02_12ReqAssistInstn(int a1, const char *a2, int a3, unsigned char *a4)
{
  char v5 = a3;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t InstnFromAssistId = Gnm02_33GetInstnFromAssistId(a1, a3);
  if (InstnFromAssistId)
  {
    uint64_t v9 = (unsigned __int16 *)InstnFromAssistId;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MODIFY %s GNMInstn,%u,AssistInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm02_12ReqAssistInstn", 2057, a2, *v9, **((_DWORD **)v9 + 1));
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    if (a4) {
      *a4 = 1;
    }
    return v9;
  }
  unsigned int v12 = Gnm02_11ReqNewInstn();
  if (v12)
  {
    uint64_t v9 = v12;
    uint64_t v13 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v13] != v12)
    {
      v13 += 2;
      if (v13 == 8)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
          goto LABEL_20;
        }
LABEL_21:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewAssistInstn %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm02_12ReqAssistInstn", 2049, a2);
          LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
        }
        Gnm02_21DeleteInstn(v9);
        return 0;
      }
    }
    if (*((unsigned char *)v12 + 2))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_21;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
LABEL_20:
      LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
      goto LABEL_21;
    }
    if (*((void *)v12 + 1))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
        goto LABEL_21;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_20;
    }
    double v20 = gnssOsa_Calloc("Gnm02_03AddAssistParams", 107, 1, 0x50uLL);
    *((void *)v9 + 1) = v20;
    if (!v20) {
      goto LABEL_21;
    }
    *((unsigned char *)v9 + 2) = 2;
    *double v20 = a1;
    *(unsigned char *)(*((void *)v9 + 1) + 5) = v5;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SETUP %s GNMInstn,%u,AssistInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm02_12ReqAssistInstn", 2057, a2, *v9, **((_DWORD **)v9 + 1));
      LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
    }
    if (a4) {
      *a4 = 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewInstn %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm02_12ReqAssistInstn", 2049, a2);
      LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
    }
    return 0;
  }
  return v9;
}

uint64_t Gnm02_33GetInstnFromAssistId(int a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2u;
  while (1)
  {
    uint64_t v4 = *(void *)&g_GnmInstances[v3];
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (*(unsigned char *)(v4 + 2) == 2 && *(unsigned __int8 *)(v5 + 5) == a2 && *(_DWORD *)v5 == a1) {
          break;
        }
      }
    }
    v3 += 2;
    if (v3 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AsstId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm02_33GetInstnFromAssistId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,AsstId,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm02_33GetInstnFromAssistId", **(unsigned __int16 **)&g_GnmInstances[v3], a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
  }
  return *(void *)&g_GnmInstances[v3];
}

BOOL Gnm02_21DeleteInstn(unsigned __int16 *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1)
  {
LABEL_5:
    BOOL v3 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
      return 0;
    }
    return v3;
  }
  uint64_t v2 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
  {
    v2 += 2;
    if (v2 == 8) {
      goto LABEL_5;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Deleted GNMInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_21DeleteInstn", *a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    int v9 = *((unsigned __int8 *)a1 + 2);
    if ((v9 - 2) >= 2)
    {
      if (v9 == 1)
      {
        uint64_t v12 = *(void **)(v8 + 72);
        if (v12) {
          free(v12);
        }
        *(void *)(v8 + 72) = 0;
        BOOL v3 = (*(unsigned char *)(v8 + 4) & 7) != 0;
      }
      else
      {
        BOOL v3 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm02_21DeleteInstn", 2050, *((unsigned __int8 *)a1 + 2));
          LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
          BOOL v3 = 0;
        }
      }
      uint64_t v8 = *((void *)a1 + 1);
      if (!v8) {
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v3 = 1;
    }
    free((void *)v8);
LABEL_22:
    *((void *)a1 + 1) = 0;
    *((unsigned char *)a1 + 2) = 0;
    goto LABEL_23;
  }
  BOOL v3 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
    BOOL v3 = 0;
  }
LABEL_23:
  uint64_t v15 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v15] != a1)
  {
    v15 += 2;
    if (v15 == 8) {
      return v3;
    }
  }
  free(a1);
  *(void *)&g_GnmInstances[v15] = 0;
  if (HIWORD(g_GnmInstances[0])) {
    --HIWORD(g_GnmInstances[0]);
  }
  return v3;
}

unsigned __int16 *Gnm02_13ReqNewNafInstn(int a1, const char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (Gnm02_32GetInstnFromNafId(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %s\n", v15);
LABEL_4:
    LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
    return 0;
  }
  unsigned __int16 v5 = Gnm02_11ReqNewInstn();
  if (!v5)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewInstn %s\n", v16);
    goto LABEL_4;
  }
  uint64_t v6 = v5;
  uint64_t v7 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v7] != v5)
  {
    v7 += 2;
    if (v7 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
        goto LABEL_19;
      }
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewNafInst %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_13ReqNewNafInstn", 2049, a2);
        LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
      }
      Gnm02_21DeleteInstn(v6);
      return 0;
    }
  }
  if (*((unsigned char *)v5 + 2))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
LABEL_19:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    goto LABEL_20;
  }
  if (*((void *)v5 + 1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_19;
  }
  uint64_t v12 = gnssOsa_Calloc("Gnm02_04AddNafParams", 147, 1, 0x50uLL);
  *((void *)v6 + 1) = v12;
  if (!v12) {
    goto LABEL_20;
  }
  *((unsigned char *)v6 + 2) = 1;
  *uint64_t v12 = a1;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %s GNMInstn,%u,NaftInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm02_13ReqNewNafInstn", 2057, a2, *v6, a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 4, 1);
  }
  return v6;
}

uint64_t Gnm02_32GetInstnFromNafId(int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = 2u;
  while (1)
  {
    uint64_t v3 = *(void *)&g_GnmInstances[v2];
    if (v3)
    {
      unsigned __int16 v4 = *(_DWORD **)(v3 + 8);
      if (v4)
      {
        if (*(unsigned char *)(v3 + 2) == 1 && *v4 == a1) {
          break;
        }
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 68, "Gnm02_32GetInstnFromNafId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 5, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm02_32GetInstnFromNafId", **(unsigned __int16 **)&g_GnmInstances[v2], a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  return *(void *)&g_GnmInstances[v2];
}

uint64_t Gnm02_15AddEarlyStartParams(unsigned __int16 *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
    {
      v2 += 2;
      if (v2 == 8) {
        goto LABEL_5;
      }
    }
    if (*((unsigned char *)a1 + 2))
    {
      uint64_t v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
        goto LABEL_13;
      }
    }
    else if (*((void *)a1 + 1))
    {
      uint64_t v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
        goto LABEL_13;
      }
    }
    else
    {
      unsigned __int16 v6 = gnssOsa_Calloc("Gnm02_15AddEarlyStartParams", 361, 1, 0x50uLL);
      *((void *)a1 + 1) = v6;
      if (!v6) {
        return 0;
      }
      *((unsigned char *)a1 + 2) = 3;
      *unsigned __int16 v6 = *a1;
      char v7 = byte_26AE53256;
      if ((dword_26AE53248 & 0x400) == 0) {
        char v7 = 30;
      }
      *(unsigned char *)(*((void *)a1 + 1) + 4) = v7;
      *(unsigned char *)(*((void *)a1 + 1) + 5) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,EarlyStartInstn,%u,Timeout,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm02_15AddEarlyStartParams", *a1, **((_DWORD **)a1 + 1), *(unsigned __int8 *)(*((void *)a1 + 1) + 4));
        uint64_t v3 = 1;
        LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v3 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
LABEL_13:
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
      return 0;
    }
  }
  return v3;
}

BOOL Gnm02_23StopNafSession(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Clearing Instance NafID,%u,PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm02_23StopNafSession", *(_DWORD *)v2, *(unsigned __int8 *)(v2 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
  }
  unsigned int v5 = *(unsigned __int8 *)(v2 + 4);
  BOOL v6 = v5 > 4;
  int v7 = (1 << v5) & 0x16;
  if (!v6 && v7 != 0) {
    return Gnm10_28StopPositioning((unsigned __int16 *)a1);
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  BOOL result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm02_23StopNafSession", 770, *(unsigned __int8 *)(v2 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    return 0;
  }
  return result;
}

uint64_t Gnm02_24AbortAllNafSessions(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aborting all NAF sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_24AbortAllNafSessions");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  uint64_t v4 = 2u;
  do
  {
    uint64_t result = *(void *)&g_GnmInstances[v4];
    if (result)
    {
      BOOL v6 = *(unsigned int **)(result + 8);
      if (v6)
      {
        if (*(unsigned char *)(result + 2) == 1)
        {
          if ((v6[1] & 7) != 0 && *((unsigned char *)v6 + 64) == 1)
          {
            int v7 = (void (*)(uint64_t, uint64_t, void *))*((void *)v6 + 7);
            uint64_t v8 = *v6;
            v9[0] = 0;
            v9[1] = 0;
            int v10 = 0;
            char v11 = 1;
            v7(a1, v8, v9);
            uint64_t result = *(void *)&g_GnmInstances[v4];
          }
          Gnm02_23StopNafSession(result);
          uint64_t result = Gnm02_21DeleteInstn(*(unsigned __int16 **)&g_GnmInstances[v4]);
        }
      }
    }
    v4 += 2;
  }
  while (v4 != 8);
  return result;
}

uint64_t Gnm02_26AbortAllAssistSessions(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aborting all assist sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm02_26AbortAllAssistSessions");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  uint64_t v2 = 2u;
  do
  {
    uint64_t result = *(void *)&g_GnmInstances[v2];
    if (result)
    {
      uint64_t v4 = *(void *)(result + 8);
      if (v4)
      {
        if (*(unsigned char *)(result + 2) == 2 && *(unsigned char *)(v4 + 5) == 1)
        {
          if ((*(unsigned char *)(v4 + 6) & 4) != 0)
          {
            uint64_t result = Gnm13_09SendAsstGadData(result, 0, 1);
          }
          else if ((*(unsigned char *)(v4 + 6) & 2) != 0)
          {
            uint64_t result = Gnm13_11SendAsstGnssMeas(result, 0, 1);
          }
          else
          {
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              uint64_t v5 = mach_continuous_time();
              unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm02_26AbortAllAssistSessions", 770, *(unsigned __int8 *)(v4 + 6));
              uint64_t result = LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
            }
          }
        }
      }
    }
    v2 += 2;
  }
  while (v2 != 8);
  return result;
}

unsigned __int16 *Gnm02_31GetInstnFromInstnId(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = 2u;
  while (1)
  {
    uint64_t result = *(unsigned __int16 **)&g_GnmInstances[v2];
    if (result)
    {
      if (*result == a1) {
        break;
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm02_31GetInstnFromInstnId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v5, 5, 1);
      }
      return 0;
    }
  }
  return result;
}

uint64_t Gnm02_37GetInstnAssistReq(void)
{
  uint64_t v0 = 2u;
  uint64_t v15 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v1 = *(void *)&g_GnmInstances[v0];
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 8);
      if (v2)
      {
        int v3 = *(unsigned __int8 *)(v1 + 2);
        if (v3 != 3)
        {
          if (v3 == 2)
          {
            if (*(unsigned char *)(v2 + 59))
            {
              if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
                return *(void *)&g_GnmInstances[v0];
              }
              bzero(__str, 0x410uLL);
              unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,AsstInstn,%u found requiring Asst\n", v13);
              goto LABEL_22;
            }
          }
          else if (v3 == 1)
          {
            if (*(unsigned char *)(v2 + 5))
            {
              if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
                return *(void *)&g_GnmInstances[v0];
              }
              bzero(__str, 0x410uLL);
              unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found requiring Asst\n", v12);
LABEL_22:
              LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
              return *(void *)&g_GnmInstances[v0];
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v4 = mach_continuous_time();
            unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm02_37GetInstnAssistReq", 770, *(unsigned __int8 *)(*(void *)&g_GnmInstances[v0] + 2));
            LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
          }
        }
      }
    }
    v0 += 2;
  }
  while (v0 != 8);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm02_37GetInstnAssistReq", 2052);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
  }
  return 0;
}

uint64_t Gnm02_39GetEarlyStartInstn(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = 2u;
  while (1)
  {
    uint64_t v1 = *(void *)&g_GnmInstances[v0];
    if (v1)
    {
      if (*(void *)(v1 + 8) && *(unsigned char *)(v1 + 2) == 3) {
        break;
      }
    }
    v0 += 2;
    if (v0 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_39GetEarlyStartInstn", 2052);
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ECALL:GNMInstn,%u,EarlyStartInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm02_39GetEarlyStartInstn", **(unsigned __int16 **)&g_GnmInstances[v0], **(_DWORD **)(*(void *)&g_GnmInstances[v0] + 8));
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
  }
  return *(void *)&g_GnmInstances[v0];
}

unsigned __int16 *Gnm02_52DeInitializeInstances(void)
{
  uint64_t v0 = 2u;
  do
  {
    uint64_t result = *(unsigned __int16 **)&g_GnmInstances[v0];
    if (result) {
      uint64_t result = (unsigned __int16 *)Gnm02_21DeleteInstn(result);
    }
    v0 += 2;
  }
  while (v0 != 8);
  g_GnmInstances[0] = 0;
  return result;
}

BOOL Gnm02_54IsEmerSessionOngoing(void)
{
  unint64_t v0 = 0;
  BOOL v1 = 1;
  do
  {
    uint64_t v2 = *(void *)&g_GnmInstances[2 * v0 + 2];
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v2 + 2) == 2 && *(unsigned char *)(v3 + 8)) {
          break;
        }
      }
    }
    BOOL v1 = v0++ < 2;
  }
  while (v0 != 3);
  return v1;
}

uint64_t BaseBufInitBufWithMemory(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3) {
    return 6;
  }
  unsigned __int16 v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x470uLL);
  *(void *)a1 = v6;
  if (!v6)
  {
    uint64_t v9 = 1;
    int v10 = 1;
LABEL_13:
    CUCFErrorHandler((uint64_t)v6, v10);
    return v9;
  }
  if (a2 == 1)
  {
    unsigned __int16 v7 = v6 + 752;
    uint64_t v8 = &UserBuffer;
    goto LABEL_9;
  }
  if (a2)
  {
    v6[196] = 0;
    uint64_t v9 = 3;
    int v10 = 3;
    goto LABEL_13;
  }
  unsigned __int16 v7 = v6 + 752;
  uint64_t v8 = &SmallBuffer;
LABEL_9:
  memcpy(v7, v8, 0x120uLL);
  char v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 824);

  return v11(a1, a3);
}

double GAL_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = 3;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 14);
  unsigned int v2 = *(unsigned __int8 *)(a1 + 15);
  if (v2 <= 0x31)
  {
    if (!*(unsigned char *)(a1 + 15))
    {
      char v3 = -14;
      goto LABEL_41;
    }
    if (v2 <= 4)
    {
      char v3 = v2 - 15;
LABEL_41:
      *(unsigned char *)(a2 + 15) = v3;
      goto LABEL_42;
    }
    if (v2 <= 6)
    {
      char v3 = -11;
      goto LABEL_41;
    }
    if (v2 <= 8)
    {
      char v3 = -10;
      goto LABEL_41;
    }
    if (v2 <= 0xB)
    {
      char v3 = -9;
      goto LABEL_41;
    }
    if (v2 <= 0xF)
    {
      char v3 = -8;
      goto LABEL_41;
    }
    if (v2 <= 0x15)
    {
      char v3 = -7;
      goto LABEL_41;
    }
    if (v2 <= 0x1E)
    {
      char v3 = -6;
      goto LABEL_41;
    }
    if (v2 <= 0x2B)
    {
      char v3 = -5;
      goto LABEL_41;
    }
LABEL_7:
    char v3 = -4;
    goto LABEL_41;
  }
  if (v2 <= 0x4A)
  {
    if (v2 <= 0x37) {
      goto LABEL_7;
    }
    if (v2 <= 0x43)
    {
      char v3 = -3;
      goto LABEL_41;
    }
LABEL_20:
    char v3 = -2;
    goto LABEL_41;
  }
  if (v2 > 0x63)
  {
    if (v2 > 0x7D)
    {
      if (v2 == 255) {
        char v3 = 15;
      }
      else {
        char v3 = 14;
      }
      goto LABEL_41;
    }
    if (v2 > 0x66)
    {
      if (v2 > 0x6C)
      {
        if (v2 > 0x75) {
          char v3 = 3;
        }
        else {
          char v3 = 2;
        }
      }
      else
      {
        char v3 = 1;
      }
      goto LABEL_41;
    }
  }
  else
  {
    if (v2 <= 0x50) {
      goto LABEL_20;
    }
    if (v2 <= 0x5C)
    {
      char v3 = -1;
      goto LABEL_41;
    }
  }
  *(unsigned char *)(a2 + 15) = 0;
LABEL_42:
  *(unsigned char *)(a2 + 14) = 0;
  char v4 = v2 == 255;
  *(unsigned char *)(a2 + 13) = v4 << 6;
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 201) | (4 * *(unsigned char *)(a1 + 198)) | (8 * *(unsigned char *)(a1 + 200)) | (32 * *(unsigned char *)(a1 + 197)) | (v4 << 6);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 194);
  *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 12) + 1024;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 168);
  *(void *)(a2 + 64) = *(void *)(a1 + 184);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 96) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a2 + 152) = *(void *)(a1 + 80);
  *(void *)(a2 + 160) = v6;
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 56);
  double result = *(double *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 72);
  *(double *)(a2 + 200) = result;
  *(void *)(a2 + 208) = v8;
  return result;
}

double *NK_Comp_DOPS(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  memset(v35, 0, sizeof(v35));
  uint64_t v5 = a1 + 7173;
  do
  {
    *(void *)((char *)v35 + v4) = 0x40D3880000000000;
    v4 += 40;
  }
  while (v4 != 160);
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  memset(&v28[1], 0, 32);
  double v6 = 1.99960002e14;
  if (*(unsigned char *)(a1 + 7174)) {
    double v6 = *(double *)(a1 + 7200) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7192)) * 0.001);
  }
  *(double *)&long long v29 = v6;
  v28[0] = v6;
  double v7 = 1.99960002e14;
  if (*(unsigned char *)(a1 + 7175)) {
    double v7 = *(double *)(a1 + 7216) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7208)) * 0.001);
  }
  *((double *)&v31 + 1) = v7;
  double v8 = 1.99960002e14;
  if (*(unsigned char *)v5) {
    double v8 = *(double *)(a1 + 7184) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7176)) * 0.001);
  }
  uint64_t v9 = 0;
  double v34 = v8;
  do
  {
    if (v28[v9] > 1.99960002e14) {
      v28[v9] = 1.99960002e14;
    }
    v9 += 5;
  }
  while (v9 != 20);
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  double v13 = 0.0;
  uint64_t v14 = 6696;
  uint64_t v15 = 6312;
  uint64_t v16 = 1656;
  uint64_t v17 = 1176;
  do
  {
    if (*(unsigned char *)(a1 + v14))
    {
      int8x16_t v18 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a1 + v10 + 4016), *(double *)(a1 + v10 + 2104));
      int8x16_t v36 = vextq_s8(v18, v18, 8uLL);
      uint64_t v37 = *(void *)(a1 + v10 + 2096);
      int v19 = (double *)(*(unsigned char *)(a2 + v17) ? a2 + v16 : a1 + v15);
      double v20 = *v19 >= 0.0001 ? *v19 : 0.0001;
      DOP4_Upd_W_Meas((double *)v36.i64, v20, (double (*)[4])v28);
      if (v20 < 800000.0)
      {
        ++v11;
        double v13 = v13 + v20;
        if (*(unsigned char *)(a2 + v14 - 3736))
        {
          DOP4_Upd_U_Meas((uint64_t)&v36, (double (*)[4])v35);
          ++v12;
        }
      }
    }
    v10 += 40;
    v15 += 8;
    v16 += 8;
    ++v17;
    ++v14;
  }
  while (v10 != 1920);
  if (v12 <= 3) {
    DOP4_Upd_U_Elem(2, (double (*)[4])v35);
  }
  double result = DOP4_Calc_U((double *)v35, (double *)(a2 + 24600));
  if (v11) {
    double v22 = v13 / (double)v11;
  }
  else {
    double v22 = 0.0;
  }
  *(double *)(a1 + 6744) = v22;
  double v23 = v34 * 8.0;
  *(double *)(a1 + 7248) = v34 * 8.0;
  double v24 = *(double *)&v29;
  double v25 = *((double *)&v31 + 1) * 8.0;
  *(double *)(a1 + 7272) = *((double *)&v31 + 1) * 8.0;
  double v26 = v28[1];
  double v27 = v28[0] + v28[0];
  *(double *)(a1 + 7256) = v28[0] + v28[0];
  *(double *)(a1 + 7264) = v24 + v24;
  *(double *)(a1 + 7280) = v26 + v26;
  if (v23 > 3600.0) {
    *(void *)(a1 + 7248) = 0x40AC200000000000;
  }
  if (v25 > 3600.0) {
    *(void *)(a1 + 7272) = 0x40AC200000000000;
  }
  if (v27 > 900.0 || v24 + v24 > 900.0)
  {
    *(int64x2_t *)(v5 + 83) = vdupq_n_s64(0x408C200000000000uLL);
    *(void *)(a1 + 7280) = 0;
  }
  return result;
}

uint64_t NK_Get_Ext_Time(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  char v3 = (__int16 *)(a2 + 22758);
  *(unsigned char *)(a2 + 22776) = 0;
  *(unsigned char *)(a2 + 22792) = 0;
  *(unsigned char *)(a2 + 22848) = 0;
  *(unsigned char *)(a2 + 22864) = 0;
  double v4 = *(double *)(a2 + 24);
  if (v4 > 3.0 && v4 < 604797.0)
  {
    int v7 = result;
    unsigned __int8 v23 = 0;
    double result = Get_FSP_Time(result, (__int16 *)(a2 + 22758), (double *)(a2 + 22760), (double *)(a2 + 22768), &v23);
    if (result)
    {
      double v8 = *(double *)(a2 + 22760);
      double v9 = *(double *)(a2 + 632);
      double v10 = v8 - (v9 - *(double *)(a2 + 736));
      *(double *)(a2 + 26152) = v10;
      double v11 = *(double *)(a2 + 22768);
      uint64_t v12 = *(unsigned int *)(a2 + 12);
      if (v11 < g_TOW_Stat_Var99_Table[v12])
      {
        double v13 = v10 * 1000.0;
        double v14 = -0.5;
        if (v13 > 0.0) {
          double v14 = 0.5;
        }
        double v15 = v13 + v14;
        double v16 = 2147483650.0;
        if (v15 <= 2147483650.0)
        {
          double v16 = -2147483650.0;
          if (v15 >= -2147483650.0) {
            double v16 = (double)(int)v15;
          }
        }
        *((unsigned char *)v3 + 18) = 1;
        *(_DWORD *)(v3 + 11) = 1;
        *(_DWORD *)(v3 + 19) = v7;
        *(double *)(a2 + 22800) = v16;
        *(double *)(a2 + 22808) = v11 * 1000000.0;
        int v17 = *(unsigned __int8 *)(a3 + 233);
        double v18 = 36.0;
        if (*(unsigned char *)(a3 + 233)) {
          double v18 = 1.0e20;
        }
        *(double *)(a2 + 22832) = v18;
        int v19 = v23;
        *(_DWORD *)(v3 + 15) = v23;
        if (v11 <= 0.00000025 || (int)v12 <= 8)
        {
          *((unsigned char *)v3 + 90) = 1;
          *(_DWORD *)(v3 + 47) = 1;
          *(_DWORD *)(v3 + 55) = v7;
          *(double *)(a2 + 22872) = (v9 + v16 * 0.001 - v8) * 299792458.0;
          *(double *)(a2 + 22880) = v11 * 8.98755179e16;
          double v20 = 16.0;
          if (v17) {
            double v20 = 1.0e20;
          }
          *(double *)(a2 + 22904) = v20;
          *(_DWORD *)(v3 + 51) = v19;
        }
        __int16 v21 = *v3;
        *(_WORD *)(a2 + 646) = *v3;
        *(_WORD *)(a2 + 18) = v21;
      }
    }
    if (*((unsigned char *)v3 + 90) && (double v22 = *(double *)(a2 + 22880), v22 < 2.25e10))
    {
      *(unsigned char *)(a3 + 7173) = 1;
      *(_DWORD *)(a3 + 7176) = *(_DWORD *)(v3 + 55);
      *(double *)(a3 + 7184) = v22;
    }
    else if (*(unsigned char *)(a3 + 7173))
    {
      if ((v7 - *(_DWORD *)(a3 + 7176)) >= 0x1D4C1) {
        *(unsigned char *)(a3 + 7173) = 0;
      }
    }
  }
  return result;
}

uint64_t NK_Prop_Cov_Mat(double a1, double *a2)
{
  v10[11] = *(double *)MEMORY[0x263EF8340];
  unsigned __int8 v3 = 1;
  v10[0] = a1;
  v10[1] = a1;
  int v4 = 16843009;
  char v5 = 1;
  v10[2] = a1;
  v10[3] = a1;
  *(_DWORD *)double v6 = 100860417;
  *(_DWORD *)double v8 = 151258116;
  __int16 v7 = 2055;
  __int16 v9 = 2826;
  void v10[4] = a1;
  v10[5] = a1;
  return stphiu((uint64_t)a2, 0xBu, v10, v8, 6, v6, &v3);
}

void *Cyc_Record_Write(uint64_t a1, const void *a2)
{
  double result = memcpy(*(void **)a1, a2, *(unsigned int *)(a1 + 72));
  unint64_t v4 = *(void *)a1 + *(unsigned int *)(a1 + 72);
  *(void *)a1 = v4;
  if (v4 >= *(void *)(a1 + 64))
  {
    unint64_t v4 = *(void *)(a1 + 56);
    *(void *)a1 = v4;
  }
  for (uint64_t i = 0; i != 6; ++i)
    *(unsigned char *)(a1 + 84 + i) = v4 == *(void *)(a1 + 84 + 8 * i - 76);
  return result;
}

void *Cyc_Record_Read(uint64_t a1, unsigned int a2, void *__dst)
{
  if (a2 >= 6) {
    __assert_rtn("Cyc_Record_Read", "cyc_record_buf.cpp", 144, "Consumer_Idx < MAX_READER_NUM");
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1 + 8 * a2;
  double v8 = *(const void **)(v5 + 8);
  __int16 v7 = (unint64_t *)(v5 + 8);
  double v6 = v8;
  if (v8 == *(const void **)a1 && !*(unsigned char *)(a1 + v4 + 84)) {
    __assert_rtn("Cyc_Record_Read", "cyc_record_buf.cpp", 148, "p_CRB->Next_Read[Consumer_Idx] != p_CRB->Next_Write || p_CRB->Full_Flag[Consumer_Idx]");
  }
  *(unsigned char *)(a1 + v4 + 84) = 0;
  double result = memcpy(__dst, v6, *(unsigned int *)(a1 + 72));
  unint64_t v10 = *v7 + *(unsigned int *)(a1 + 72);
  *__int16 v7 = v10;
  if (v10 >= *(void *)(a1 + 64)) {
    *__int16 v7 = *(void *)(a1 + 56);
  }
  return result;
}

void *Cyc_Record_Peek(uint64_t a1, unsigned int a2, int a3, void *__dst)
{
  if (a2 >= 6) {
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 182, "Consumer_Idx < MAX_READER_NUM");
  }
  uint64_t v5 = *(void *)(a1 + 8 * a2 + 8);
  if (v5 == *(void *)a1 && !*(unsigned char *)(a1 + a2 + 84)) {
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 186, "p_CRB->Next_Read[Consumer_Idx] != p_CRB->Next_Write || p_CRB->Full_Flag[Consumer_Idx]");
  }
  size_t v6 = *(unsigned int *)(a1 + 72);
  __int16 v7 = (char *)(v5 + (v6 * a3));
  unint64_t v8 = *(void *)(a1 + 56);
  if ((unint64_t)v7 < v8) {
    v7 += *(unsigned int *)(a1 + 80);
  }
  unint64_t v9 = *(void *)(a1 + 64);
  if ((unint64_t)v7 >= v9) {
    v7 -= *(unsigned int *)(a1 + 80);
  }
  if ((unint64_t)v7 < v8 || (unint64_t)v7 > v9) {
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 202, "p_Rec_Peek >= p_CRB->Start_Buf && p_Rec_Peek <= p_CRB->End_Buf");
  }

  return memcpy(__dst, v7, v6);
}

BOOL Cyc_Record_IsEmpty(void *a1, unsigned int a2)
{
  if (a2 >= 6) {
    __assert_rtn("Cyc_Record_IsEmpty", "cyc_record_buf.cpp", 225, "Consumer_Idx < MAX_READER_NUM");
  }
  uint64_t v2 = a1[a2 + 1];
  uint64_t v3 = *a1;
  if (*((unsigned char *)a1 + a2 + 84)) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    __assert_rtn("Cyc_Record_IsEmpty", "cyc_record_buf.cpp", 231, "p_CRB->Next_Read[Consumer_Idx] == p_CRB->Next_Write");
  }
  return !*((unsigned char *)a1 + a2 + 84) && v2 == v3;
}

uint64_t Cyc_Record_Count_Occupied(_DWORD *a1, unsigned int a2)
{
  if (a2 >= 6) {
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 270, "Consumer_Idx < MAX_READER_NUM");
  }
  int v2 = a1[2 * a2 + 2];
  int v3 = *a1 - v2;
  if (*a1 == v2)
  {
    if (!*((unsigned char *)a1 + a2 + 84)) {
      return 0;
    }
  }
  else if (v3 >= 1)
  {
    int v4 = a1[20];
    goto LABEL_7;
  }
  int v4 = a1[20];
  v3 += v4;
  if (v3 < 1) {
    goto LABEL_11;
  }
LABEL_7:
  if (v3 > v4) {
LABEL_11:
  }
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 290, "Diff > 0 && Diff <= (I4)p_CRB->Buf_Len");
  unsigned int v5 = a1[18];
  uint64_t result = v3 / v5;
  if (v3 % v5) {
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 293, "( Diff % p_CRB->Rec_Size) == 0");
  }
  return result;
}

uint64_t Cyc_Record_Count_Free(_DWORD *a1, unsigned int a2)
{
  if (a2 >= 6) {
    __assert_rtn("Cyc_Record_Count_Free", "cyc_record_buf.cpp", 311, "Consumer_Idx < MAX_READER_NUM");
  }
  unsigned int v3 = Cyc_Record_Count_Occupied(a1, a2);
  unsigned int v4 = a1[19];
  BOOL v5 = v4 >= v3;
  uint64_t result = v4 - v3;
  if (!v5) {
    __assert_rtn("Cyc_Record_Count_Free", "cyc_record_buf.cpp", 317, "Occupied_Records <= p_CRB->Rec_Num");
  }
  return result;
}

uint64_t ltl_least_squares_polynom(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6 = 0;
  uint64_t v128 = *MEMORY[0x263EF8340];
  memset(v127, 0, 100);
  v125[0] = 0;
  v125[1] = 0;
  int v126 = 0;
  *(_OWORD *)__int16 v124 = xmmword_22BB0CC00;
  *(_DWORD *)&v124[16] = 0;
  v122[0] = 0;
  v122[1] = 0;
  int v123 = 0;
  v118[0] = xmmword_22BB0CBC0;
  v118[1] = xmmword_22BB0CBD0;
  __int16 v120 = 14;
  uint64_t v119 = 0x2000000D3;
  do
  {
    *(float *)((char *)v122 + v6) = (float)*(int *)((char *)v118 + v6) * 0.000061035;
    v6 += 4;
  }
  while (v6 != 20);
  memset_pattern16(&v124[8], &unk_22BB0CBE0, 0xCuLL);
  if (a2)
  {
    uint64_t v7 = 0;
    float32x4_t v8 = vcvtq_f32_s32(*(int32x4_t *)&v124[4]);
    do
    {
      uint64_t v9 = a1 + 8 * v7;
      unsigned int v10 = *(unsigned __int16 *)(v9 + 4);
      int v11 = *(_DWORD *)v9;
      int __s = 1065353216;
      float v12 = 1.0;
      for (uint64_t i = 4; i != 20; i += 4)
      {
        float v12 = (float)((float)((float)((float)(int)v7 * 0.5) + -30.0) + -30.0) * v12;
        *(float *)((char *)&__s + i) = v12;
      }
      uint64_t v14 = 0;
      float v15 = (float)v11;
      float32x4_t v117 = vmulq_f32(v117, v8);
      float v16 = (float)v10 * 0.000005421;
      int v17 = v127;
      uint64_t v18 = 1;
      do
      {
        uint64_t v19 = 0;
        float v20 = *((float *)&__s + v14);
        do
        {
          *(float *)&v17[v19] = *(float *)&v17[v19] + (float)((float)(v20 * *((float *)&__s + v19)) * v16);
          ++v19;
        }
        while (v18 != v19);
        *((float *)v125 + v14) = *((float *)v125 + v14) + (float)((float)(v16 * v20) * v15);
        ++v14;
        ++v18;
        v17 += 5;
      }
      while (v14 != 5);
      ++v7;
    }
    while (v7 != a2);
  }
  uint64_t v21 = 0;
  double v22 = (float *)v127;
  do
  {
    float v23 = (float)*(unsigned int *)((char *)&v118[1] + v21 + 4) * 0.000061035;
    float v24 = 1.0 / (float)(v23 * v23);
    *double v22 = *v22 + v24;
    v22 += 6;
    *(float *)((char *)v125 + v21) = *(float *)((char *)v125 + v21) + (float)(v24 * *(float *)((char *)v122 + v21));
    v21 += 4;
  }
  while (v21 != 20);
  uint64_t v25 = 0;
  double v26 = (float *)v127;
  do
  {
    float v27 = *v26;
    v26 += 6;
    float v28 = 1.0 / sqrtf(v27);
    v121[v25] = v28;
    *(float *)((char *)v125 + v25 * 4) = *(float *)((char *)v125 + v25 * 4) * v28;
    ++v25;
  }
  while (v25 != 5);
  uint64_t v29 = 0;
  long long v30 = v127;
  uint64_t v31 = 1;
  do
  {
    uint64_t v32 = 0;
    float v33 = v121[v29];
    do
    {
      *(float *)&v30[v32] = *(float *)&v30[v32] * (float)(v33 * v121[v32]);
      ++v32;
    }
    while (v31 != v32);
    ++v29;
    ++v31;
    v30 += 5;
  }
  while (v29 != 5);
  unint64_t v34 = 0;
  int v35 = v127;
  do
  {
    if (v34 <= 3)
    {
      uint64_t v36 = 5;
      uint64_t v37 = 1;
      do
      {
        v35[v37++] = v35[v36];
        v36 += 5;
      }
      while (v34 + v37 != 5);
    }
    ++v34;
    v35 += 6;
  }
  while (v34 != 5);
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  for (uint64_t j = 0; j != 120; j += 24)
    *(int *)((char *)&__s + j) = 1065353216;
  for (int k = 1; k != 11; ++k)
  {
    unint64_t v40 = 0;
    uint64_t result = 0;
    uint64_t v42 = (float *)v127;
    p_s = &__s;
    int v44 = &v117;
    uint64_t v45 = (float *)&v127[2];
    uint64_t v47 = (float *)&v127[7];
    uint64_t v46 = (float *)&v127[6];
    uint64_t v48 = (float *)&v127[1];
    char v49 = (float *)&v127[1];
    unint64_t v50 = 1;
    do
    {
      uint64_t v51 = 0;
      char v52 = (float *)&v127[5 * v40 + v40];
      char v53 = v44;
      unint64_t v54 = v45;
      uint64_t v55 = v47;
      unint64_t v56 = v40;
      uint64_t v57 = v46;
      uint64_t v58 = v49;
      unint64_t v59 = v50;
      do
      {
        __int16 v60 = (float *)&v127[5 * v40 + v59];
        float v61 = *v60;
        if (*v60 != 0.0)
        {
          uint64_t v62 = &v127[5 * v59];
          float v63 = *(float *)&v62[v59];
          float v64 = *v52;
          float v65 = (float)(v63 - *v52) / (float)(v61 + v61);
          if (v65 <= 0.0) {
            float v66 = -1.0;
          }
          else {
            float v66 = 1.0;
          }
          float v67 = v66 / (float)(fabsf(v65) + sqrtf((float)(v65 * v65) + 1.0));
          float v68 = 1.0 / sqrtf((float)(v67 * v67) + 1.0);
          float v69 = v67 * v68;
          float v70 = (float)(v67 * v68) / (float)(v68 + 1.0);
          *char v52 = v64 - (float)(v67 * v61);
          float v71 = *(float *)&v62[v59] + (float)(v67 * v61);
          *(float *)&v62[v59] = v71;
          if (vabds_f32(*v52, v64) > 0.00000011921) {
            LODWORD(result) = result + 1;
          }
          *__int16 v60 = 0.0;
          v62[v40] = 0;
          if (vabds_f32(v71, v63) <= 0.00000011921) {
            uint64_t result = result;
          }
          else {
            uint64_t result = (result + 1);
          }
          float v72 = -(float)(v67 * v68);
          float v73 = -v70;
          double v74 = v42;
          double v75 = v58;
          for (unint64_t m = v40; m; --m)
          {
            float v77 = *v74;
            float v78 = *v75;
            float *v74 = *v74 + (float)(v72 * (float)(*v75 + (float)(v70 * *v74)));
            v74 += 5;
            *double v75 = *v75 + (float)(v69 * (float)(v77 + (float)(v73 * v78)));
            v75 += 5;
          }
          double v79 = v48;
          int v80 = v57;
          uint64_t v81 = v51;
          if (v50 < v59)
          {
            do
            {
              float v82 = *v79;
              float v83 = *v80;
              *double v79 = *v79 + (float)(v72 * (float)(*v80 + (float)(v70 * *v79)));
              ++v79;
              *int v80 = *v80 + (float)(v69 * (float)(v82 + (float)(v73 * v83)));
              v80 += 5;
              --v81;
            }
            while (v81);
          }
          double v84 = v54;
          double v85 = v55;
          unint64_t v86 = v56;
          if (v59 <= 3)
          {
            do
            {
              float v87 = *v84;
              float v88 = *v85;
              *double v84 = *v84 + (float)(v72 * (float)(*v85 + (float)(v70 * *v84)));
              ++v84;
              *double v85 = *v85 + (float)(v69 * (float)(v87 + (float)(v73 * v88)));
              ++v85;
              ++v86;
            }
            while (v86 < 3);
          }
          for (uint64_t n = 0; n != 25; n += 5)
          {
            float v90 = *(float *)&p_s[n];
            float v91 = v53->f32[n];
            *(float *)&p_s[n] = v90 + (float)(v72 * (float)(v91 + (float)(v70 * v90)));
            v53->f32[n] = v53->f32[n] + (float)(v69 * (float)(v90 + (float)(v73 * v91)));
          }
        }
        ++v59;
        ++v58;
        ++v51;
        ++v57;
        ++v56;
        v55 += 6;
        ++v54;
        char v53 = (float32x4_t *)((char *)v53 + 4);
      }
      while (v59 != 5);
      ++v40;
      ++v50;
      ++v49;
      ++v42;
      v46 += 6;
      v48 += 6;
      v47 += 6;
      v45 += 6;
      int v44 = (float32x4_t *)((char *)v44 + 4);
      ++p_s;
    }
    while (v40 != 4);
    if (!result) {
      break;
    }
  }
  uint64_t v92 = 0;
  float v93 = 0.0;
  double v94 = (float *)v127;
  do
  {
    float v95 = *v94;
    v94 += 6;
    *(float *)&v115[v92 + 20] = v95;
    float v96 = fabsf(v95);
    if (v96 > v93) {
      float v93 = v96;
    }
    v92 += 4;
  }
  while (v92 != 20);
  uint64_t v97 = 0;
  float v98 = v93 * 0.000001;
  do
  {
    float v99 = *(float *)&v115[v97 + 20];
    float v100 = fabsf(v99);
    float v101 = 1.0 / v99;
    if (v100 < v98) {
      float v101 = 0.0;
    }
    *(float *)&v115[v97 + 20] = v101;
    v97 += 4;
  }
  while (v97 != 20);
  uint64_t v102 = 0;
  BOOL v103 = &__s;
  do
  {
    uint64_t v104 = 0;
    float v105 = 0.0;
    int v106 = (float *)v103;
    do
    {
      float v107 = *v106;
      v106 += 5;
      float v105 = v105 + (float)(v107 * *(float *)((char *)v125 + v104));
      v104 += 4;
    }
    while (v104 != 20);
    *(float *)&v115[4 * v102++] = v105;
    ++v103;
  }
  while (v102 != 5);
  for (iuint64_t i = 0; ii != 20; ii += 4)
    *(float *)&v115[ii] = *(float *)&v115[ii + 20] * *(float *)&v115[ii];
  if (a4)
  {
    uint64_t v109 = 0;
    int v110 = &__s;
    do
    {
      uint64_t v111 = 0;
      float v112 = 0.0;
      do
      {
        float v112 = v112 + (float)(*(float *)&v110[v111] * *(float *)&v115[v111 * 4]);
        ++v111;
      }
      while (v111 != 5);
      *(_DWORD *)(a3 + 4 * v109) = vcvtms_s32_f32((float)((float)(v112 * v121[v109]) * 16384.0) + 0.5);
      ++v109;
      v110 += 5;
    }
    while (v109 != a4);
  }
  return result;
}

uint64_t ltl_least_squares_set(uint64_t result, int a2, int *a3, unsigned int a4)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; *(_DWORD *)(result + 8 * i++) = vcvtms_s32_f32((float)(v6 * 0.000061035) + 0.5))
    {
      float v5 = (float)((float)((float)(int)i * 0.5) + -30.0) + -30.0;
      float v6 = (float)*a3 + (float)(v5 * (float)a3[1]);
      uint64_t v7 = a3 + 2;
      uint64_t v8 = a4 - 2;
      float v9 = v5;
      if (a4 >= 3)
      {
        do
        {
          float v9 = v5 * v9;
          int v10 = *v7++;
          float v6 = v6 + (float)(v9 * (float)v10);
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void PEREncVal(size_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 1040);
    *(void *)(a1 + 1040) = a2;
    unsigned int v7 = *a2;
    if (v7 <= 0x3F)
    {
      switch(*a2)
      {
        case 1u:
          PERPutBit(a1, *(unsigned char *)a3 != 0);
          goto LABEL_349;
        case 2u:
          int v52 = *a3;
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
          {
            int v53 = *(unsigned __int8 *)(a1 + 1105);
            if (v53 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v53;
              *(unsigned char *)(a1 + 1105) = 7;
            }
          }
          *(void *)&v150[0] = 0;
          goto LABEL_192;
        case 3u:
          uint64_t v54 = *a3;
          if (!v54) {
            goto LABEL_140;
          }
          *(void *)&v150[0] = *((void *)a3 + 1);
          *((void *)&v150[0] + 1) = v54;
          goto LABEL_197;
        case 4u:
          uint64_t v55 = *a3;
          if (!v55) {
            goto LABEL_140;
          }
          *(void *)&v150[0] = *((void *)a3 + 1);
          *((void *)&v150[0] + 1) = v55;
          goto LABEL_208;
        case 5u:
          goto LABEL_349;
        case 6u:
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
          {
            int v56 = *(unsigned __int8 *)(a1 + 1105);
            if (v56 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v56;
              *(unsigned char *)(a1 + 1105) = 7;
            }
          }
          uint64_t v57 = *(void *)(a1 + 1096);
          uint64_t v58 = *(void *)(a1 + 1088);
          PERSkipBytes(a1, 1);
          uint64_t v59 = a3[4];
          __int16 v60 = *(const char **)a3;
          if (*(void *)a3) {
            __int16 v60 = (const char *)*((int *)v60 + 2);
          }
          char v61 = 0;
          uint64_t v62 = v57 - v58;
          uint64_t v63 = 40 * (void)v60;
          float v64 = a3;
          while (1)
          {
            float v64 = *(int **)v64;
            if (!v64) {
              break;
            }
            char v65 = v61;
            char v61 = 1;
            if (v65)
            {
              __int16 v60 = (const char *)v64[2];
              break;
            }
          }
          unint64_t v66 = (unint64_t)&v60[v63];
          if (((unint64_t)&v60[v63] & 0xFFFFFF80) != 0) {
            EPErrorHandler(a1, 28);
          }
          PERPutByte(a1, v66);
          if (v59 >= 3)
          {
            uint64_t v67 = 2;
            uint64_t v68 = 3;
            do
            {
              float v69 = *(const char **)a3;
              uint64_t v70 = v68;
              if (*(void *)a3)
              {
                while (--v70)
                {
                  float v69 = *(const char **)v69;
                  if (!v69) {
                    goto LABEL_118;
                  }
                }
                unint64_t v66 = *((int *)v69 + 2);
              }
LABEL_118:
              if (v66 >= 0x80)
              {
                uint64_t v72 = 0;
                unint64_t v73 = v66;
                do
                {
                  v72 += 7;
                  BOOL v74 = v73 >= 0x4000;
                  v73 >>= 7;
                }
                while (v74);
                for (; v72; v72 -= 7)
                  PERPutByte(a1, (v66 >> v72) | 0x80);
                unsigned __int8 v71 = v66 & 0x7F;
              }
              else
              {
                unsigned __int8 v71 = v66;
              }
              PERPutByte(a1, v71);
              ++v67;
              ++v68;
            }
            while (v67 != v59);
          }
          uint64_t v75 = *(void *)(a1 + 1088);
          unint64_t v76 = *(void *)(a1 + 1096) - v75 + ~v62;
          if (v76 > 0x7F)
          {
            if (*(unsigned char *)(a1 + 1105) == 7) {
              PEROctetsFragmentation(a1, v76);
            }
            else {
              PEROctetsFragmentationWithOffset(a1, v76);
            }
          }
          else
          {
            float v77 = (unsigned char *)(v75 + v62);
            uint64_t v78 = *(unsigned __int8 *)(a1 + 1105);
            if (v78 == 7)
            {
              *float v77 = v76;
            }
            else
            {
              *v77 |= v76 >> (7 - v78);
              v77[1] |= v76 << (*(unsigned char *)(a1 + 1105) + 1);
            }
          }
          goto LABEL_349;
        case 7u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x14u:
        case 0x15u:
        case 0x19u:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
          goto LABEL_90;
        case 0xAu:
          int v79 = *a3;
          if (*((void *)a2 + 5) <= (unint64_t)*a3) {
            EPErrorHandler(a1, 21);
          }
          unint64_t v80 = *((void *)a2 + 3);
          if (v80 == -1)
          {
            LODWORD(v146) = v79;
            int v81 = *((_DWORD *)a2 + 10);
            goto LABEL_183;
          }
          if (v80 > v79)
          {
            PERPutBit(a1, 0);
            LODWORD(v146) = v79;
            int v81 = *((_DWORD *)a2 + 6);
LABEL_183:
            LODWORD(v150[0]) = v81 - 1;
            uint64_t v92 = (unsigned int *)&v146;
            goto LABEL_290;
          }
          PERPutBit(a1, 1);
          PEREncodeNormallySmallNonNegativeWholeNumber(a1, v79 - *((void *)a2 + 3));
          goto LABEL_349;
        case 0x10u:
        case 0x11u:
          PEREncodeStruct(a1, (uint64_t)a2, (uint64_t)a3);
          goto LABEL_349;
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
          *((void *)&v150[1] + 1) = 0;
          if (v7 <= 0x1A && ((1 << v7) & 0x5CC0000) != 0)
          {
            float v9 = *(const char **)a3;
            if (*(void *)a3)
            {
              int v10 = strnlen(*(const char **)a3, 0x400uLL);
              uint64_t v11 = v10 - 1;
              if (v10 == 1)
              {
LABEL_140:
                if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
                {
                  int v86 = *(unsigned __int8 *)(a1 + 1105);
                  if (v86 != 7)
                  {
                    *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v86;
                    *(unsigned char *)(a1 + 1105) = 7;
                  }
                }
                PERPutByte(a1, 0);
                goto LABEL_349;
              }
            }
            else
            {
              uint64_t v11 = -2;
            }
            *(void *)&v150[0] = v9 + 1;
            *((void *)&v150[0] + 1) = v11;
            if (v7 == 18)
            {
              char v28 = 4;
              char v29 = 1;
              uint64_t v30 = 11;
              uint64_t v31 = " 0123456789";
            }
            else
            {
              char v29 = 0;
              uint64_t v31 = 0;
              uint64_t v30 = 0;
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0) {
                char v28 = 8;
              }
              else {
                char v28 = 7;
              }
            }
            BYTE9(v150[1]) = v29;
            *(void *)&v150[2] = v31;
            *((void *)&v150[2] + 1) = v30;
            BYTE8(v150[1]) = v28;
            uint64_t v32 = PEREncodePrimCHARACTER_STRING;
            goto LABEL_209;
          }
          CUCFErrorHandler(a1, 15);
          goto LABEL_140;
        case 0x20u:
          uint64_t v82 = *((void *)a2 + 1);
          switch(*(_DWORD *)(v82 + 40))
          {
            case 1:
              int v83 = *(unsigned __int8 *)a3;
              break;
            case 2:
              int v83 = *(__int16 *)a3;
              break;
            default:
              int v83 = *a3;
              break;
          }
          unint64_t v132 = *((void *)a2 + 5);
          if (v132)
          {
            uint64_t v133 = *((void *)a2 + 5);
            double v134 = (uint64_t *)*((void *)a2 + 4);
            while (*((unsigned char *)v134 + 16) == 5 || v134[3] != v83)
            {
              v134 += 4;
              if (!--v133)
              {
                double v134 = (uint64_t *)*((void *)a2 + 4);
                break;
              }
            }
            __int16 v135 = (char *)a3 + *(unsigned int *)(v82 + 36);
            uint64_t v136 = (uint64_t)v134 - *((void *)a2 + 4);
            double v138 = a2 + 24;
            unint64_t v137 = *((void *)a2 + 3);
            if (v137 == -1)
            {
              if (v132 >= 2)
              {
                LODWORD(v146) = (unint64_t)v136 >> 5;
                int v140 = v132 - 1;
                goto LABEL_326;
              }
LABEL_344:
              unint64_t v144 = *(void *)(a1 + 712);
              if (v144 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                unint64_t v144 = *(void *)(a1 + 712);
              }
              *(void *)(a1 + 200 + 8 * v144) = v134;
              *(void *)(a1 + 712) = v144 + 1;
              PEREncVal(a1, *v134, v135);
              goto LABEL_347;
            }
            unint64_t v139 = v136 >> 5;
          }
          else
          {
            __int16 v135 = (char *)a3 + *(unsigned int *)(v82 + 36);
            double v138 = a2 + 24;
            unint64_t v137 = *((void *)a2 + 3);
            if (v137 == -1)
            {
              double v134 = (uint64_t *)*((void *)a2 + 4);
              goto LABEL_344;
            }
            unint64_t v139 = 0;
            double v134 = (uint64_t *)*((void *)a2 + 4);
          }
          if (v139 < v137)
          {
            PERPutBit(a1, 0);
            if (*((void *)a2 + 5) >= 2uLL)
            {
              LODWORD(v146) = v139;
              int v140 = *v138 - 1;
LABEL_326:
              LODWORD(v150[0]) = v140;
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)v150, (unsigned int *)&v146);
              goto LABEL_344;
            }
            goto LABEL_344;
          }
          PERPutBit(a1, 1);
          if (*((void *)a2 + 5) >= 2uLL) {
            PEREncodeNormallySmallNonNegativeWholeNumber(a1, v139 - *(void *)v138);
          }
          unint64_t v141 = *(void *)(a1 + 712);
          if (v141 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v141 = *(void *)(a1 + 712);
          }
          *(void *)(a1 + 200 + 8 * v141) = v134;
          *(void *)(a1 + 712) = v141 + 1;
          uint64_t v128 = *v134;
          size_t v129 = a1;
          uint64_t v127 = (uint64_t)v135;
LABEL_323:
          PEREncodeOPENTypeField(v129, v128, v127);
          goto LABEL_347;
        default:
          if (v7 != 48)
          {
            if (v7 != 49) {
              goto LABEL_90;
            }
            v150[2] = (unint64_t)a2;
            uint64_t v26 = a3[4];
            *(void *)&v150[0] = a3;
            *((void *)&v150[0] + 1) = v26;
            *((void *)&v150[1] + 1) = 0;
            unint64_t v27 = *(void *)(a1 + 712);
            if (v27 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              unint64_t v27 = *(void *)(a1 + 712);
            }
            *(void *)(a1 + 8 * v27 + 200) = (char *)&v150[1] + 8;
            *(void *)(a1 + 712) = v27 + 1;
            goto LABEL_250;
          }
          memset((char *)v150 + 8, 0, 40);
          int v84 = **((_DWORD **)a2 + 1);
          if (v84 == 181)
          {
            uint64_t v85 = a3[4];
          }
          else
          {
            if (v84 != 182)
            {
              CUCFErrorHandler(a1, 15);
              goto LABEL_267;
            }
            uint64_t v85 = *a3;
          }
          *((void *)&v150[0] + 1) = v85;
LABEL_267:
          *(void *)&v150[0] = a3;
          *((void *)&v150[1] + 1) = 0;
          *(void *)&v150[2] = a2;
          unint64_t v123 = *(void *)(a1 + 712);
          if (v123 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v123 = *(void *)(a1 + 712);
          }
          *(void *)(a1 + 8 * v123 + 200) = (char *)&v150[1] + 8;
          *(void *)(a1 + 712) = v123 + 1;
          goto LABEL_270;
      }
    }
    if (*a2 <= 0x59u)
    {
      switch(*a2)
      {
        case '@':
          uint64_t v12 = *((void *)a2 + 1);
          uint64_t v14 = (uint64_t *)*((void *)a2 + 4);
          uint64_t v13 = *((void *)a2 + 5);
          switch(*(_DWORD *)(v12 + 40))
          {
            case 1:
              int v15 = *(unsigned __int8 *)a3;
              break;
            case 2:
              int v15 = *(__int16 *)a3;
              break;
            default:
              int v15 = *a3;
              break;
          }
          if (!v13) {
            goto LABEL_282;
          }
          while (v14[3] != v15)
          {
            v14 += 4;
            if (!--v13)
            {
LABEL_282:
              uint64_t v14 = 0;
              break;
            }
          }
          uint64_t v125 = *(unsigned int *)(v12 + 36);
          unint64_t v126 = *(void *)(a1 + 712);
          if (v126 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v126 = *(void *)(a1 + 712);
          }
          *(void *)(a1 + 200 + 8 * v126) = v14;
          *(void *)(a1 + 712) = v126 + 1;
          if (!v14) {
            goto LABEL_348;
          }
          uint64_t v127 = (uint64_t)a3 + v125;
          uint64_t v128 = *v14;
          size_t v129 = a1;
          goto LABEL_323;
        case 'A':
          goto LABEL_90;
        case 'B':
          unsigned __int8 v34 = a2[24];
          int v35 = *a3;
          LODWORD(v146) = *a3;
          if (a2[25] == 1)
          {
            if ((v34 & 0x20) != 0 && *((void *)a2 + 4) > v35 || (v34 & 8) != 0 && *((void *)a2 + 5) < v35)
            {
              PERPutBit(a1, 1);
              goto LABEL_188;
            }
            int v91 = v34 & 0x20;
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckINTEGERConstraint(a1, (uint64_t)a2, (int *)&v146);
            int v91 = v34 & 0x20;
          }
          if (v91)
          {
            if ((v34 & 0x80) != 0)
            {
              int v130 = *((_DWORD *)a2 + 8);
              unsigned int v149 = v146 - v130;
              LODWORD(v150[0]) = *((_DWORD *)a2 + 10) - v130;
              uint64_t v92 = &v149;
LABEL_290:
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)v150, v92);
            }
            else
            {
              LODWORD(v150[0]) = v146 - *((_DWORD *)a2 + 8);
              PEREncodeSemiConstrainedWholeNumberFunc(a1, (unsigned int *)v150);
            }
            goto LABEL_349;
          }
LABEL_188:
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
          {
            int v93 = *(unsigned __int8 *)(a1 + 1105);
            if (v93 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v93;
              *(unsigned char *)(a1 + 1105) = 7;
            }
          }
          *(void *)&v150[0] = 0;
          int v52 = (int)v146;
LABEL_192:
          LOBYTE(v150[0]) = v52 < 0;
          DWORD1(v150[0]) = v52 ^ (v52 >> 31);
          PEREncodeUnconstrainedWholeNumberFunc(a1, (uint64_t)v150);
          goto LABEL_349;
        case 'C':
          memset(v150, 0, 24);
          unsigned __int8 v36 = a2[24];
          uint64_t v37 = *((void *)a3 + 1);
          unint64_t v38 = *a3;
          if (a2[25] == 1)
          {
            if (*((void *)a2 + 4) > v38 || (a2[24] & 0x80) != 0 && *((void *)a2 + 5) < v38)
            {
              PERPutBit(a1, 1);
              *(void *)&v150[0] = v37;
              *((void *)&v150[0] + 1) = v38;
LABEL_197:
              uint64_t v32 = PEREncodePrimBIT_STRING;
              goto LABEL_209;
            }
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckStringConstraint(a1, (uint64_t)a2, *a3);
          }
          *(void *)&v150[0] = v37;
          *((void *)&v150[0] + 1) = v38;
          if ((v36 & 0x80) == 0) {
            goto LABEL_197;
          }
          if ((v36 & 2) == 0)
          {
            unint64_t v94 = *((void *)a2 + 5);
            if (v94 >> 16) {
              goto LABEL_197;
            }
            int v95 = *((_DWORD *)a2 + 8);
            unsigned int v149 = v38 - v95;
            LODWORD(v146) = v94 - v95;
            PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v146, &v149);
            if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
            {
              int v96 = *(unsigned __int8 *)(a1 + 1105);
              if (v96 != 7)
              {
                *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v96;
                *(unsigned char *)(a1 + 1105) = 7;
              }
            }
            size_t v97 = a1;
            unint64_t v98 = v38;
            goto LABEL_334;
          }
          unint64_t v98 = *((void *)a2 + 4);
          if (v98)
          {
            if (v98 > 0x10)
            {
              if (v98 >> 16) {
                goto LABEL_197;
              }
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v142 = *(unsigned __int8 *)(a1 + 1105);
                if (v142 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v142;
                  *(unsigned char *)(a1 + 1105) = 7;
                  unint64_t v98 = *((void *)a2 + 4);
                }
              }
            }
            size_t v97 = a1;
LABEL_334:
            PEREncodePrimBIT_STRING(v97, v98, (char **)v150);
            goto LABEL_349;
          }
          goto LABEL_349;
        case 'D':
          memset(v150, 0, 24);
          unsigned __int8 v39 = a2[24];
          unint64_t v40 = (unsigned __int8 *)*((void *)a3 + 1);
          unint64_t v41 = *a3;
          if (a2[25] == 1)
          {
            if (*((void *)a2 + 4) > v41 || (a2[24] & 0x80) != 0 && *((void *)a2 + 5) < v41)
            {
              PERPutBit(a1, 1);
              *(void *)&v150[0] = v40;
              *((void *)&v150[0] + 1) = v41;
              goto LABEL_208;
            }
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckStringConstraint(a1, (uint64_t)a2, *a3);
          }
          *(void *)&v150[0] = v40;
          *((void *)&v150[0] + 1) = v41;
          if ((v39 & 0x80) == 0) {
            goto LABEL_208;
          }
          if ((v39 & 2) == 0)
          {
            unint64_t v99 = *((void *)a2 + 5);
            if (!(v99 >> 16))
            {
              int v100 = *((_DWORD *)a2 + 8);
              unsigned int v149 = v41 - v100;
              LODWORD(v146) = v99 - v100;
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v146, &v149);
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v101 = *(unsigned __int8 *)(a1 + 1105);
                if (v101 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v101;
                  *(unsigned char *)(a1 + 1105) = 7;
                }
              }
              size_t v103 = *((void *)&v150[0] + 1);
              uint64_t v102 = *(unsigned __int8 **)&v150[0];
              uint64_t v104 = a1;
              goto LABEL_342;
            }
LABEL_208:
            uint64_t v32 = PEREncodePrimOCTET_STRING;
LABEL_209:
            *(void *)&v150[1] = v32;
            PERConstructedEncode(a1, (uint64_t)v150);
            goto LABEL_349;
          }
          size_t v103 = *((void *)a2 + 4);
          if (!v103) {
            goto LABEL_349;
          }
          if (v103 > 2)
          {
            if (v103 >> 16) {
              goto LABEL_208;
            }
            if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
            {
              int v143 = *(unsigned __int8 *)(a1 + 1105);
              if (v143 != 7)
              {
                *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v143;
                *(unsigned char *)(a1 + 1105) = 7;
                size_t v103 = *((void *)a2 + 4);
                unint64_t v40 = *(unsigned __int8 **)&v150[0];
              }
            }
          }
          uint64_t v104 = a1;
          uint64_t v102 = v40;
LABEL_342:
          PERPutSeg(v104, v102, v103);
          goto LABEL_349;
        default:
          if (v7 - 82 >= 2 && v7 != 86) {
            goto LABEL_90;
          }
          goto LABEL_29;
      }
    }
    if (*a2 > 0x70u)
    {
      if (*a2 <= 0x9Fu)
      {
        if (v7 != 113)
        {
          if (v7 != 128) {
            goto LABEL_90;
          }
LABEL_38:
          PEREncVal(a1, *((void *)a2 + 3), a3);
LABEL_349:
          *(void *)(a1 + 1040) = v6;
          return;
        }
        memset(&v150[1], 0, 32);
        unsigned __int8 v42 = a2[32];
        unint64_t v43 = a3[4];
        *(void *)&v150[0] = a3;
        *((void *)&v150[0] + 1) = v43;
        *(void *)&v150[2] = a2;
        if (a2[33] == 1)
        {
          if (*((void *)a2 + 5) > v43 || (v42 & 0x80) != 0 && *((void *)a2 + 6) < v43)
          {
            PERPutBit(a1, 1);
            unsigned __int8 v42 = 0;
          }
          else
          {
            PERPutBit(a1, 0);
          }
        }
        else
        {
          CUCFCheckStructOfConstraint(a1, (uint64_t)a2, v43);
        }
        unint64_t v114 = *(void *)(a1 + 712);
        if (v114 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          unint64_t v114 = *(void *)(a1 + 712);
        }
        *(void *)(a1 + 200 + 8 * v114) = (char *)&v150[1] + 8;
        *(void *)(a1 + 712) = v114 + 1;
        if ((v42 & 0x80) == 0) {
          goto LABEL_250;
        }
        if ((v42 & 2) != 0)
        {
          unint64_t v118 = *((void *)a2 + 5);
          if (!(v118 >> 16)) {
            goto LABEL_299;
          }
        }
        else
        {
          unint64_t v116 = *((void *)a2 + 6);
          if (!(v116 >> 16))
          {
            int v117 = *((_DWORD *)a2 + 10);
            unsigned int v149 = v43 - v117;
            LODWORD(v146) = v116 - v117;
            PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v146, &v149);
            unint64_t v118 = *((void *)&v150[0] + 1);
LABEL_299:
            PEREncodePrimSET_OF(a1, v118, (uint64_t)v150);
            goto LABEL_347;
          }
        }
LABEL_250:
        int v115 = PEREncodePrimSET_OF;
LABEL_271:
        *(void *)&v150[1] = v115;
        PERConstructedEncode(a1, (uint64_t)v150);
        goto LABEL_347;
      }
      if (v7 == 160) {
        goto LABEL_38;
      }
      if (v7 == 162)
      {
        unsigned int v24 = a2[24];
        if (v24 == 3)
        {
          float v105 = *(const char **)a3;
          if ((unint64_t)(*(void *)a3 - 0x100000000) < 0xFFFFFFFE00000000) {
            EPErrorHandler(a1, 18);
          }
          uint64_t v25 = (uint64_t)(v105 + 0x100000000);
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0) {
            goto LABEL_235;
          }
        }
        else
        {
          if (v24 == 2)
          {
            uint64_t v25 = *a3;
LABEL_221:
            if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0) {
              goto LABEL_234;
            }
LABEL_235:
            if (v24 < 3) {
              unsigned __int8 v110 = 2;
            }
            else {
              unsigned __int8 v110 = 3;
            }
            if (v25 < 1)
            {
              unsigned __int8 v111 = 0;
              unsigned __int8 v113 = 1;
            }
            else
            {
              unsigned __int8 v111 = 0;
              unint64_t v112 = v25;
              do
              {
                ++v111;
                BOOL v49 = v112 > 1;
                v112 >>= 1;
              }
              while (v49);
              if ((v111 & 7) != 0) {
                unsigned __int8 v113 = (v111 >> 3) + 1;
              }
              else {
                unsigned __int8 v113 = v111 >> 3;
              }
            }
            PERPutBits(a1, v113 - 1, v110);
            int v131 = *(unsigned __int8 *)(a1 + 1105);
            if (v131 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v131;
              *(unsigned char *)(a1 + 1105) = 7;
            }
            if (v111 >= 0x21u)
            {
              PERPutBits(a1, v25 >> 32, 8u);
              --v113;
            }
            unsigned int v109 = 8 * (v113 & 0x1F);
            size_t v107 = a1;
            unint64_t v108 = v25;
            goto LABEL_297;
          }
          if (v24 == 1)
          {
            uint64_t v25 = *a3 + 0x80000000;
            goto LABEL_221;
          }
          uint64_t v25 = *(void *)a3;
          if (v24 == 4 && (unint64_t)v25 >> 33 || v24 == 16 && (unint64_t)v25 >> 39) {
            EPErrorHandler(a1, 18);
          }
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0) {
            goto LABEL_235;
          }
          if (v24 < 3)
          {
LABEL_234:
            size_t v107 = a1;
            unint64_t v108 = v25;
            unsigned int v109 = 32;
LABEL_297:
            PERPutBits(v107, v108, v109);
            goto LABEL_349;
          }
        }
        if (v24 == 16) {
          unsigned int v106 = 7;
        }
        else {
          unsigned int v106 = 1;
        }
        PERPutBits(a1, v25 >> 32, v106);
        goto LABEL_234;
      }
LABEL_90:
      CUCFErrorHandler(a1, 16);
      goto LABEL_349;
    }
    if (v7 != 90)
    {
      if (v7 == 96) {
        goto LABEL_38;
      }
      if (v7 != 112) {
        goto LABEL_90;
      }
      memset((char *)v150 + 8, 0, 40);
      unsigned __int8 v16 = a2[32];
      int v17 = **((_DWORD **)a2 + 1);
      if (v17 == 181)
      {
        unint64_t v18 = a3[4];
      }
      else
      {
        if (v17 != 182)
        {
          CUCFErrorHandler(a1, 15);
          unint64_t v18 = 0;
LABEL_178:
          *(void *)&v150[0] = a3;
          *((void *)&v150[1] + 1) = 0;
          *(void *)&v150[2] = a2;
          if (a2[33] == 1)
          {
            if (v18 < *((void *)a2 + 5) || (char)a2[32] < 0 && *((void *)a2 + 6) < v18)
            {
              PERPutBit(a1, 1);
              unsigned __int8 v16 = 0;
            }
            else
            {
              PERPutBit(a1, 0);
            }
          }
          else
          {
            CUCFCheckStructOfConstraint(a1, (uint64_t)a2, v18);
          }
          unint64_t v119 = *(void *)(a1 + 712);
          if (v119 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v119 = *(void *)(a1 + 712);
          }
          *(void *)(a1 + 200 + 8 * v119) = (char *)&v150[1] + 8;
          *(void *)(a1 + 712) = v119 + 1;
          if ((v16 & 0x80) != 0)
          {
            if ((v16 & 2) != 0)
            {
              unint64_t v122 = *((void *)a2 + 5);
              if (!v122) {
                goto LABEL_347;
              }
              if (!(v122 >> 16))
              {
LABEL_302:
                PEREncodePrimSEQUENCE_OF(a1, v122, (uint64_t)v150);
LABEL_347:
                unint64_t v126 = *(void *)(a1 + 712) - 1;
LABEL_348:
                *(void *)(a1 + 712) = v126;
                goto LABEL_349;
              }
            }
            else
            {
              unint64_t v120 = *((void *)a2 + 6);
              if (!(v120 >> 16))
              {
                int v121 = *((_DWORD *)a2 + 10);
                unsigned int v149 = v18 - v121;
                LODWORD(v146) = v120 - v121;
                PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v146, &v149);
                unint64_t v122 = *((void *)&v150[0] + 1);
                goto LABEL_302;
              }
            }
          }
LABEL_270:
          int v115 = PEREncodePrimSEQUENCE_OF;
          goto LABEL_271;
        }
        unint64_t v18 = *a3;
      }
      *((void *)&v150[0] + 1) = v18;
      goto LABEL_178;
    }
LABEL_29:
    long long v146 = 0;
    unint64_t v147 = 0;
    uint64_t v148 = 0;
    memset(v150, 0, sizeof(v150));
    int v19 = (v7 & 0x1F) - 18;
    unsigned __int8 v20 = a2[40];
    switch(v19)
    {
      case 0:
      case 1:
      case 4:
      case 5:
      case 6:
      case 8:
        uint64_t v21 = *(const char **)a3;
        double v22 = (void *)(*(void *)a3 + 1);
        long long v146 = v22;
        if (v21) {
          int v23 = strnlen(v21, 0x400uLL);
        }
        else {
          int v23 = -1;
        }
        unint64_t v33 = v23 - 1;
        unint64_t v147 = v33;
        LOBYTE(v148) = 1;
        break;
      default:
        CUCFErrorHandler(a1, 15);
        double v22 = 0;
        unint64_t v33 = 0;
        break;
    }
    if (a2[41] == 1)
    {
      if (v33 < *((void *)a2 + 6) || (char)a2[40] < 0 && *((void *)a2 + 7) < v33)
      {
        PERPutBit(a1, 1);
        unsigned __int8 v20 = 0;
        *(void *)&v150[0] = v22;
        *((void *)&v150[0] + 1) = v33;
        goto LABEL_86;
      }
      PERPutBit(a1, 0);
    }
    else
    {
      CUCFCheckCHARACTER_STRINGConstraint(a1, (uint64_t)a2, &v146);
      double v22 = v146;
      unint64_t v33 = v147;
    }
    *(void *)&v150[0] = v22;
    *((void *)&v150[0] + 1) = v33;
    uint64_t v44 = *((void *)a2 + 4);
    if (v44)
    {
      uint64_t v45 = *((void *)a2 + 3);
      *(void *)&v150[2] = v45;
      *((void *)&v150[2] + 1) = v44;
      unint64_t v46 = v44 - 1;
      if (v44 == 1)
      {
        LOBYTE(v47) = 0;
        BYTE8(v150[1]) = 0;
        if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0) {
          goto LABEL_150;
        }
        unsigned int v47 = 0;
        unsigned int v51 = 1;
      }
      else
      {
        LOBYTE(v47) = 0;
        unint64_t v48 = v46;
        do
        {
          LOBYTE(v47) = v47 + 1;
          BOOL v49 = v48 > 1;
          v48 >>= 1;
        }
        while (v49);
        BYTE8(v150[1]) = v47;
        if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0) {
          goto LABEL_150;
        }
        unint64_t v50 = v47;
        LOBYTE(v51) = 1;
        do
        {
          LOBYTE(v51) = 2 * v51;
          BOOL v49 = v50 > 1;
          v50 >>= 1;
        }
        while (v49);
        unsigned int v51 = v51;
        unsigned int v47 = v47;
      }
      if (v51 >> 1 >= v47) {
        LOBYTE(v47) = v51 >> 1;
      }
      else {
        LOBYTE(v47) = v51;
      }
      BYTE8(v150[1]) = v47;
LABEL_150:
      if (*(unsigned __int8 *)(v45 + v46) > ~(-1 << v47))
      {
        BYTE9(v150[1]) = 1;
        goto LABEL_153;
      }
LABEL_152:
      BYTE9(v150[1]) = 0;
LABEL_153:
      if ((v20 & 0x80) == 0)
      {
LABEL_154:
        *(void *)&v150[1] = PEREncodePrimCHARACTER_STRING;
        PERConstructedEncode(a1, (uint64_t)v150);
LABEL_155:
        if (!(_BYTE)v148 && v147 && v146) {
          free(v146);
        }
        goto LABEL_349;
      }
      if ((v20 & 2) != 0)
      {
        unint64_t v90 = *((void *)a2 + 6);
        if (!v90) {
          goto LABEL_155;
        }
        if (v90 > 2)
        {
          if (v90 >> 16) {
            goto LABEL_154;
          }
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0 && v90 * v47 >= 0x11)
          {
            int v124 = *(unsigned __int8 *)(a1 + 1105);
            if (v124 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v124;
              *(unsigned char *)(a1 + 1105) = 7;
              unint64_t v90 = *((void *)a2 + 6);
            }
          }
        }
      }
      else
      {
        uint64_t v87 = *((void *)a2 + 6);
        uint64_t v88 = *((void *)a2 + 7) - v87;
        if ((unint64_t)(v88 + 1) >> 16) {
          goto LABEL_154;
        }
        unsigned int v145 = v33 - v87;
        unsigned int v149 = v88;
        PEREncodeConstrainedWholeNumberFunc(a1, &v149, &v145);
        if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
        {
          int v89 = *(unsigned __int8 *)(a1 + 1105);
          if (v89 != 7)
          {
            *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v89;
            *(unsigned char *)(a1 + 1105) = 7;
          }
        }
        unint64_t v90 = v147;
      }
      PEREncodePrimCHARACTER_STRING(a1, v90, (char **)v150);
      goto LABEL_155;
    }
    if ((*a2 & 0x1F) == 0x12)
    {
      *(void *)&v150[2] = " 0123456789";
      *((void *)&v150[2] + 1) = 11;
      WORD4(v150[1]) = 260;
      LOBYTE(v47) = 4;
      goto LABEL_153;
    }
LABEL_86:
    v150[2] = 0uLL;
    if ((*(void *)(a1 + 1056) & 0x40) != 0) {
      LOBYTE(v47) = 8;
    }
    else {
      LOBYTE(v47) = 7;
    }
    BYTE8(v150[1]) = v47;
    goto LABEL_152;
  }
}

void PEREncodeStruct(size_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (void *)a2;
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v7 = *(void *)(a1 + 1096);
    uint64_t v8 = *(void *)(a1 + 1088);
    char v9 = *(unsigned char *)(a1 + 1105);
    PERPutBit(a1, 0);
    unint64_t v10 = v4[10];
    if (v10)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      if (v10 >> 16) {
        PERSkipConsBitField(a1, (uint64_t)&v75, v10);
      }
      else {
        PERSkipPrimBitField(a1, (uint64_t)&v75, v10);
      }
      PEREncodeStructRootWithOptDef(a1, (uint64_t)&v75, v4, a3);
    }
    else
    {
      PEREncodeStructRoot(a1, v4, a3);
    }
    unint64_t v11 = v4[11];
    if (v11)
    {
      memset(v74, 0, sizeof(v74));
      uint64_t v62 = *(void *)(a1 + 1088);
      uint64_t v63 = *(void *)(a1 + 1096);
      char v64 = *(unsigned char *)(a1 + 1105);
      uint64_t v67 = v7;
      char v66 = v9;
      if (v11 < 0x41)
      {
        PERPutBits(a1, v11 - 1, 7u);
        PERSkipPrimBitField(a1, (uint64_t)v74, v4[11]);
      }
      else
      {
        PERPutBit(a1, 1);
        PERSkipConsBitField(a1, (uint64_t)v74, v4[11]);
      }
      uint64_t v65 = v8;
      uint64_t v12 = v4[8];
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        int v15 = (void *)v4[4];
        size_t v72 = a1 + 200;
        unint64_t v73 = v4;
        while (2)
        {
          switch(*((unsigned char *)v15 + 16))
          {
            case 0:
            case 1:
              uint64_t v16 = *(void *)(v4[1] + 24);
              uint64_t v17 = v15[3];
              if (*(unsigned char *)(a3 + **(unsigned int **)(v16 + 24 * v17 + 16)) != 1) {
                goto LABEL_36;
              }
              uint64_t v18 = *(unsigned int *)(v16 + 24 * v17 + 8);
              PERSetBitToBitField(a1, (uint64_t)v74, 1);
              unint64_t v19 = *(void *)(a1 + 712);
              if (v19 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                unint64_t v19 = *(void *)(a1 + 712);
              }
              *(void *)(v72 + 8 * v19) = v15;
              *(void *)(a1 + 712) = v19 + 1;
              PEREncodeOPENTypeField(a1, *v15, a3 + v18);
              --*(void *)(a1 + 712);
              ++v14;
              goto LABEL_35;
            case 2:
              uint64_t v20 = *(void *)(v4[1] + 24);
              uint64_t v21 = v15[3];
              if (*(unsigned char *)(a3 + **(unsigned int **)(v20 + 24 * v21 + 16)) != 1) {
                goto LABEL_36;
              }
              uint64_t v22 = *(unsigned int *)(v20 + 24 * v21 + 8);
              PERSetBitToBitField(a1, (uint64_t)v74, 1);
              unint64_t v23 = *(void *)(a1 + 712);
              if (v23 >= 0x40) {
                goto LABEL_33;
              }
              goto LABEL_34;
            case 3:
              uint64_t v24 = *(void *)(v4[1] + 24);
              uint64_t v25 = v15[3];
              if (*(unsigned char *)(a3 + **(unsigned int **)(v24 + 24 * v25 + 16)) != 1) {
                goto LABEL_36;
              }
              uint64_t v22 = *(unsigned int *)(v24 + 24 * v25 + 8);
              PERSetBitToBitField(a1, (uint64_t)v74, 1);
              unint64_t v23 = *(void *)(a1 + 712);
              if (v23 >= 0x40)
              {
LABEL_33:
                CUCFErrorHandler(a1, 15);
                unint64_t v23 = *(void *)(a1 + 712);
              }
LABEL_34:
              *(void *)(v72 + 8 * v23) = v15;
              *(void *)(a1 + 712) = v23 + 1;
              PEREncodeOPENTypeField(a1, *v15, a3 + v22);
              --*(void *)(a1 + 712);
              ++v13;
LABEL_35:
              unsigned int v4 = v73;
              goto LABEL_37;
            case 4:
              uint64_t v70 = v13;
              uint64_t v26 = v15[3];
              uint64_t v75 = 0;
              uint64_t v76 = 0;
              uint64_t v77 = 0;
              unint64_t v27 = 0;
              if (v26)
              {
                char v28 = (unsigned __int8 *)(v15 + 6);
                uint64_t v29 = v26;
                do
                {
                  int v30 = *v28;
                  v28 += 32;
                  if (v30) {
                    ++v27;
                  }
                  --v29;
                }
                while (v29);
              }
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v32 = *(unsigned __int8 *)(a1 + 1105);
                uint64_t v31 = *(unsigned char **)(a1 + 1096);
                int v71 = 7;
                if (v32 != 7)
                {
                  *v31 &= 510 << v32;
                  uint64_t v31 = (unsigned char *)(*(void *)(a1 + 1096) + 1);
                  *(void *)(a1 + 1096) = v31;
                  *(unsigned char *)(a1 + 1105) = 7;
                }
              }
              else
              {
                uint64_t v31 = *(unsigned char **)(a1 + 1096);
                int v71 = *(unsigned __int8 *)(a1 + 1105);
              }
              uint64_t v33 = *(void *)(a1 + 1088);
              PERSkipBytes(a1, 1);
              if (v27 >> 16) {
                PERSkipConsBitField(a1, (uint64_t)&v75, v27);
              }
              else {
                PERSkipPrimBitField(a1, (uint64_t)&v75, v27);
              }
              v12 -= v26;
              unint64_t v34 = (unint64_t)&v31[-v33];
              uint64_t v35 = v15[3];
              if (v35)
              {
                uint64_t v68 = (unsigned char *)v34;
                uint64_t v69 = v14;
                uint64_t v36 = 0;
                uint64_t v37 = 0;
                uint64_t v38 = 0;
                unint64_t v39 = 0;
                unint64_t v40 = v15 + 4;
                do
                {
                  switch(*((unsigned char *)v40 + 16))
                  {
                    case 0:
                    case 1:
                      uint64_t v41 = *(void *)(v4[1] + 24);
                      uint64_t v42 = v40[3];
                      if (*(unsigned char *)(a3 + **(unsigned int **)(v41 + 24 * v42 + 16)) == 1)
                      {
                        uint64_t v43 = *(unsigned int *)(v41 + 24 * v42 + 8);
                        unint64_t v44 = *(void *)(a1 + 712);
                        if (v44 >= 0x40)
                        {
                          CUCFErrorHandler(a1, 15);
                          unint64_t v44 = *(void *)(a1 + 712);
                        }
                        *(void *)(v72 + 8 * v44) = v40;
                        *(void *)(a1 + 712) = v44 + 1;
                        PEREncVal(a1, *v40, a3 + v43);
                        --*(void *)(a1 + 712);
                        if (*((unsigned char *)v40 + 16) == 1) {
                          PERSetBitToBitField(a1, (uint64_t)&v75, 1);
                        }
                        ++v37;
                        goto LABEL_67;
                      }
                      ++v38;
                      break;
                    case 2:
                      uint64_t v45 = *(void *)(v4[1] + 24);
                      uint64_t v46 = v40[3];
                      if (*(unsigned char *)(a3 + **(unsigned int **)(v45 + 24 * v46 + 16)) != 1) {
                        goto LABEL_68;
                      }
                      uint64_t v47 = *(unsigned int *)(v45 + 24 * v46 + 8);
                      PERSetBitToBitField(a1, (uint64_t)&v75, 1);
                      unint64_t v48 = *(void *)(a1 + 712);
                      if (v48 < 0x40) {
                        goto LABEL_66;
                      }
                      goto LABEL_65;
                    case 3:
                      uint64_t v49 = *(void *)(v4[1] + 24);
                      uint64_t v50 = v40[3];
                      if (*(unsigned char *)(a3 + **(unsigned int **)(v49 + 24 * v50 + 16)) != 1) {
                        goto LABEL_68;
                      }
                      uint64_t v47 = *(unsigned int *)(v49 + 24 * v50 + 8);
                      PERSetBitToBitField(a1, (uint64_t)&v75, 1);
                      unint64_t v48 = *(void *)(a1 + 712);
                      if (v48 >= 0x40)
                      {
LABEL_65:
                        CUCFErrorHandler(a1, 15);
                        unint64_t v48 = *(void *)(a1 + 712);
                      }
LABEL_66:
                      *(void *)(v72 + 8 * v48) = v40;
                      *(void *)(a1 + 712) = v48 + 1;
                      PEREncVal(a1, *v40, a3 + v47);
                      --*(void *)(a1 + 712);
                      ++v36;
LABEL_67:
                      unsigned int v4 = v73;
                      break;
                    case 5:
LABEL_68:
                      PERSetBitToBitField(a1, (uint64_t)&v75, 0);
                      break;
                    default:
                      CUCFErrorHandler(a1, 15);
                      break;
                  }
                  ++v39;
                  v40 += 4;
                }
                while (v39 < v15[3]);
                LODWORD(v35) = v36 != 0;
                int v15 = v40 - 4;
                if (v38)
                {
                  if (v36)
                  {
                    EPErrorHandler(a1, 33);
                    unint64_t v34 = (unint64_t)v68;
                    uint64_t v14 = v69;
                    unsigned int v51 = v71;
                    goto LABEL_82;
                  }
                  uint64_t v14 = v69;
                }
                else
                {
                  uint64_t v14 = v69;
                }
                unint64_t v34 = (unint64_t)v68;
              }
              else
              {
                uint64_t v37 = 0;
              }
              unsigned int v51 = v71;
              if (!v37 && !v35)
              {
                uint64_t v52 = *(void *)(a1 + 1088);
                *(void *)(a1 + 1096) = v52 + v34;
                *(unsigned char *)(a1 + 1105) = v71;
                *(unsigned char *)(v52 + v34) &= -2 << v71;
                PERSetBitToBitField(a1, (uint64_t)v74, 0);
                uint64_t v13 = v70;
                goto LABEL_37;
              }
LABEL_82:
              uint64_t v53 = *(void *)(a1 + 1096);
              uint64_t v54 = (unsigned char *)(v53 - *(void *)(a1 + 1088));
              unsigned int v55 = *(unsigned __int8 *)(a1 + 1105);
              BOOL v56 = v55 >= v51;
              unsigned __int8 v57 = v55 - v51;
              if (v56)
              {
                unint64_t v58 = (unint64_t)&v54[~v34];
                if (!v58) {
                  goto LABEL_90;
                }
                PERPutBits(a1, 0, v57);
              }
              else
              {
                PERPutBits(a1, 0, (v57 + 8));
                unint64_t v58 = (unint64_t)&v54[-v34];
                if (v54 == (unsigned char *)v34)
                {
                  uint64_t v53 = *(void *)(a1 + 1096);
LABEL_90:
                  unsigned int v4 = v73;
                  *(void *)(a1 + 1096) = v53 - 1;
                  PERPutBits(a1, 0x100uLL, 0x10u);
                  goto LABEL_95;
                }
              }
              unsigned int v4 = v73;
              if (v58 > 0x7F)
              {
                if (*(unsigned char *)(a1 + 1105) == 7) {
                  PEROctetsFragmentation(a1, v58);
                }
                else {
                  PEROctetsFragmentationWithOffset(a1, v58);
                }
              }
              else
              {
                uint64_t v59 = (unsigned char *)(*(void *)(a1 + 1088) + v34);
                uint64_t v60 = *(unsigned __int8 *)(a1 + 1105);
                if (v60 == 7)
                {
                  *uint64_t v59 = v58;
                }
                else
                {
                  *v59 |= v58 >> (7 - v60);
                  v59[1] |= v58 << (*(unsigned char *)(a1 + 1105) + 1);
                }
              }
LABEL_95:
              PERSetBitToBitField(a1, (uint64_t)v74, 1);
              uint64_t v13 = v70 + 1;
LABEL_37:
              v15 += 4;
              if (!--v12) {
                goto LABEL_97;
              }
              continue;
            case 5:
LABEL_36:
              PERSetBitToBitField(a1, (uint64_t)v74, 0);
              goto LABEL_37;
            default:
              CUCFErrorHandler(a1, 15);
              goto LABEL_37;
          }
        }
      }
      uint64_t v14 = 0;
      uint64_t v13 = 0;
LABEL_97:
      if (v14 | v13)
      {
        *(unsigned char *)(*(void *)(a1 + 1088) + v67 - v65) |= 1 << v66;
      }
      else
      {
        uint64_t v61 = *(void *)(a1 + 1088);
        *(void *)(a1 + 1096) = v61 + v63 - v62;
        *(unsigned char *)(a1 + 1105) = v64;
        *(unsigned char *)(v61 + v63 - v62) &= -2 << v64;
      }
    }
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 80);
    if (v6)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      if (v6 >> 16) {
        PERSkipConsBitField(a1, (uint64_t)&v75, v6);
      }
      else {
        PERSkipPrimBitField(a1, (uint64_t)&v75, v6);
      }
      PEREncodeStructRootWithOptDef(a1, (uint64_t)&v75, v4, a3);
    }
    else
    {
      PEREncodeStructRoot(a1, (void *)a2, a3);
    }
  }
}

void PERDecVal(size_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v8 = *(void *)(a1 + 1040);
    *(void *)(a1 + 1040) = a2;
    unsigned int v9 = *a2;
    if (v9 <= 0x3F)
    {
      switch(*a2)
      {
        case 1u:
          *(unsigned char *)a3 = PERGetBit(a1) != 0;
          goto LABEL_278;
        case 2u:
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
          {
            int v54 = *(unsigned __int8 *)(a1 + 1105);
            if (v54 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v54;
              *(unsigned char *)(a1 + 1105) = 7;
            }
          }
          *(void *)&long long v135 = 0;
          PERDecodeUnconstrainedWholeNumberFunc(a1, (uint64_t)&v135);
          if (*(_DWORD *)(*((void *)a2 + 1) + 8) == 4)
          {
            *(_DWORD *)a3 = DWORD1(v135);
          }
          else
          {
            uint64_t v34 = SDWORD1(v135);
LABEL_60:
            *(void *)a3 = v34;
          }
          goto LABEL_278;
        case 3u:
          long long v135 = 0uLL;
          unsigned int v55 = PERDecodePrimBIT_STRING;
          goto LABEL_118;
        case 4u:
          long long v135 = 0uLL;
          unsigned int v55 = PERDecodePrimOCTET_STRING;
LABEL_118:
          *(void *)&long long v136 = v55;
          PERConstructedDecode(a1, (uint64_t)&v135);
          long long v56 = v135;
          *(void *)(a1 + 1112) = 0;
          if (*((void *)&v56 + 1))
          {
            *(void *)(a3 + 8) = v56;
            *(_DWORD *)a3 = DWORD2(v56);
            *(unsigned char *)(a3 + 4) = 8;
          }
          else
          {
            memset_s((void *)a3, 0x10uLL, 0, 0x10uLL);
          }
          goto LABEL_278;
        case 5u:
          *(_DWORD *)a3 = 0;
          goto LABEL_278;
        case 6u:
          memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
          if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
          {
            int v57 = *(unsigned __int8 *)(a1 + 1105);
            if (v57 != 7)
            {
              *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v57;
              *(unsigned char *)(a1 + 1105) = 7;
            }
          }
          unsigned int v58 = PERGetByte(a1);
          if (v58 >= 0xC1)
          {
            --*(void *)(a1 + 1096);
            unsigned int v59 = *(unsigned __int8 *)(a1 + 1105);
            if (v59 == 7)
            {
              uint64_t v60 = PEROctetsDefragmentation(a1);
              PERDecodeOBJECT_IDENTIFIERComps(a1, v60, a3);
              if (*(unsigned __int8 *)(a1 + 1105) <= 6u)
              {
                ++*(void *)(a1 + 1096);
                *(unsigned char *)(a1 + 1105) = 7;
              }
              PEROctetsFragmentation(a1, v60);
            }
            else
            {
              uint64_t v115 = PEROctetsDefragmentationWithOffset(a1);
              PERDecodeOBJECT_IDENTIFIERComps(a1, v115, a3);
              if (*(unsigned __int8 *)(a1 + 1105) < v59) {
                ++*(void *)(a1 + 1096);
              }
              *(unsigned char *)(a1 + 1105) = v59;
              PEROctetsFragmentationWithOffset(a1, v115);
            }
            goto LABEL_278;
          }
          if ((v58 & 0xC0) == 0x80)
          {
            uint64_t v87 = PERGetByte(a1) & 0xFFFF80FF | ((v58 & 0x7F) << 8);
            uint64_t v88 = a1;
LABEL_245:
            PERDecodeOBJECT_IDENTIFIERComps(v88, v87, a3);
            goto LABEL_278;
          }
          if ((v58 & 0x80) == 0)
          {
            uint64_t v116 = v58 & 0x7F;
            if ((v58 & 0x7F) == 0) {
              EPErrorHandler(a1, 26);
            }
            uint64_t v88 = a1;
            uint64_t v87 = v116;
            goto LABEL_245;
          }
          uint64_t v92 = a1;
          int v93 = 26;
          goto LABEL_265;
        case 7u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x14u:
        case 0x15u:
        case 0x19u:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
          goto LABEL_109;
        case 0xAu:
          *(void *)&long long v133 = 0;
          if (*((void *)a2 + 3) == -1)
          {
            unsigned int v138 = 0;
            LODWORD(v135) = *((_DWORD *)a2 + 10) - 1;
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
            unsigned int v61 = v138;
            if (*((void *)a2 + 5) <= (unint64_t)v138) {
              EPErrorHandler(a1, 21);
            }
          }
          else if (PERGetBit(a1) == 1)
          {
            PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v133);
            unsigned int v61 = v133 + *((_DWORD *)a2 + 6);
          }
          else
          {
            unsigned int v138 = 0;
            LODWORD(v135) = *((_DWORD *)a2 + 6) - 1;
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
            unsigned int v61 = v138;
            if (*((void *)a2 + 5) <= (unint64_t)v138) {
              EPErrorHandler(a1, 21);
            }
          }
          *(_DWORD *)a3 = v61;
          goto LABEL_278;
        case 0x10u:
        case 0x11u:
          rsize_t v40 = *(unsigned int *)(*((void *)a2 + 1) + 8);
          memset_s((void *)a3, v40, 0, v40);
          PERDecodeStruct(a1, (uint64_t)a2, a3, (void **)a4);
          goto LABEL_278;
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
          long long v136 = 0u;
          long long v137 = 0u;
          long long v135 = 0u;
          if (v9 == 18)
          {
            BYTE8(v136) = 4;
            *(void *)&long long v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
            uint64_t v10 = *((void *)&v135 + 1);
            if (*((void *)&v135 + 1))
            {
              unint64_t v11 = (char *)v135;
              do
              {
                if (*v11) {
                  char v12 = *v11 + 47;
                }
                else {
                  char v12 = 32;
                }
                *v11++ = v12;
                --v10;
              }
              while (v10);
            }
          }
          else
          {
            if ((*(void *)(a1 + 1056) & 0x40) != 0) {
              char v32 = 8;
            }
            else {
              char v32 = 7;
            }
            BYTE8(v136) = v32;
            *(void *)&long long v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
          }
          long long v33 = v135;
          *(void *)(a1 + 1112) = 0;
          switch(*a2 & 0x1F)
          {
            case 0x12:
            case 0x13:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x1A:
              if (*((void *)&v33 + 1))
              {
                *(unsigned char *)(v33 + *((void *)&v33 + 1)) = 0;
                uint64_t v34 = v33 - 1;
                goto LABEL_60;
              }
              uint64_t v41 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
              *(void *)a3 = v41;
              *uint64_t v41 = 86;
              *(unsigned char *)(*(void *)a3 + 1) = 0;
              break;
            default:
              CUCFErrorHandler(a1, 15);
              if (*((void *)&v33 + 1) && (void)v33)
              {
                int v71 = (void *)v33;
                goto LABEL_179;
              }
              break;
          }
          goto LABEL_278;
        case 0x20u:
          uint64_t v62 = *((void *)a2 + 4);
          *(void *)&long long v135 = 0;
          rsize_t v63 = *(unsigned int *)(*((void *)a2 + 1) + 8);
          memset_s((void *)a3, v63, 0, v63);
          if (*((void *)a2 + 3) == -1)
          {
            unint64_t v94 = *((void *)a2 + 5);
            if (v94 >= 2)
            {
              unsigned int v138 = 0;
              int v95 = v94 - 1;
LABEL_248:
              LODWORD(v133) = v95;
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              unsigned int v117 = v138;
LABEL_250:
              uint64_t v118 = v117;
              if (*((void *)a2 + 5) <= (unint64_t)v117) {
                EPErrorHandler(a1, 37);
              }
              uint64_t v119 = v62 + 32 * v118;
              if (*(unsigned char *)(v119 + 16) == 5) {
                goto LABEL_264;
              }
              uint64_t v120 = *((void *)a2 + 1);
              GenericSetValue(*(unsigned int *)(v120 + 40), (unsigned char *)a3, *(_DWORD *)(v119 + 24));
              uint64_t v121 = a3 + *(unsigned int *)(v120 + 36);
              unint64_t v122 = *(void *)(a1 + 712);
              if (v122 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                unint64_t v122 = *(void *)(a1 + 712);
              }
              *(void *)(a1 + 200 + 8 * v122) = v119;
              *(void *)(a1 + 712) = v122 + 1;
              PERDecVal(a1, *(void *)v119, v121, a4);
LABEL_143:
              --*(void *)(a1 + 712);
              goto LABEL_278;
            }
          }
          else
          {
            int v64 = PERGetBit(a1);
            unint64_t v65 = *((void *)a2 + 5);
            if (v64)
            {
              if (v65 < 2)
              {
                uint64_t v66 = 0;
              }
              else
              {
                PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v135);
                unint64_t v65 = *((void *)a2 + 5);
                uint64_t v66 = v135;
              }
              unint64_t v124 = *((void *)a2 + 3) + v66;
              if (v124 >= v65)
              {
                if (v65 == 1) {
                  PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v135);
                }
LABEL_21:
                PERSkipOPENTypeField(a1);
                goto LABEL_278;
              }
              uint64_t v125 = v62 + 32 * v124;
              if (*(unsigned char *)(v125 + 16) == 5)
              {
LABEL_264:
                uint64_t v92 = a1;
                int v93 = 37;
                goto LABEL_265;
              }
              uint64_t v129 = *((void *)a2 + 1);
              GenericSetValue(*(unsigned int *)(v129 + 40), (unsigned char *)a3, *(_DWORD *)(v125 + 24));
              uint64_t v130 = a3 + *(unsigned int *)(v129 + 36);
              unint64_t v131 = *(void *)(a1 + 712);
              if (v131 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                unint64_t v131 = *(void *)(a1 + 712);
              }
              *(void *)(a1 + 200 + 8 * v131) = v125;
              *(void *)(a1 + 712) = v131 + 1;
              uint64_t v111 = *(void *)v125;
              uint64_t v112 = a1;
              uint64_t v113 = v130;
              uint64_t v114 = a4;
LABEL_303:
              PERDecodeOPENTypeField(v112, v111, v113, v114);
              goto LABEL_143;
            }
            if (v65 >= 2)
            {
              unsigned int v138 = 0;
              int v95 = *((_DWORD *)a2 + 6) - 1;
              goto LABEL_248;
            }
          }
          unsigned int v117 = 0;
          goto LABEL_250;
        default:
          if (v9 == 48)
          {
            rsize_t v67 = *(unsigned int *)(*((void *)a2 + 1) + 8);
            memset_s((void *)a3, v67, 0, v67);
            long long v135 = (unint64_t)a3;
            *((void *)&v136 + 1) = 0;
            *(void *)&long long v137 = a2;
            *((void *)&v137 + 1) = a4;
            unint64_t v68 = *(void *)(a1 + 712);
            if (v68 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              unint64_t v68 = *(void *)(a1 + 712);
            }
            *(void *)(a1 + 8 * v68 + 200) = (char *)&v136 + 8;
            *(void *)(a1 + 712) = v68 + 1;
            unint64_t v39 = PERDecodePrimSEQUENCE_OF;
          }
          else
          {
            if (v9 != 49) {
              goto LABEL_109;
            }
            memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
            long long v135 = (unint64_t)a3;
            *((void *)&v136 + 1) = 0;
            *(void *)&long long v137 = a2;
            *((void *)&v137 + 1) = a4;
            unint64_t v38 = *(void *)(a1 + 712);
            if (v38 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              unint64_t v38 = *(void *)(a1 + 712);
            }
            *(void *)(a1 + 8 * v38 + 200) = (char *)&v136 + 8;
            *(void *)(a1 + 712) = v38 + 1;
            unint64_t v39 = PERDecodePrimSET_OF;
          }
          *(void *)&long long v136 = v39;
          PERConstructedDecode(a1, (uint64_t)&v135);
          goto LABEL_143;
      }
    }
    if (*a2 <= 0x59u)
    {
      switch(*a2)
      {
        case '@':
          if (!a4) {
            goto LABEL_20;
          }
          uint64_t v13 = *(void **)a4;
          if (!*(void *)a4) {
            goto LABEL_20;
          }
          while (1)
          {
            uint64_t v14 = (unsigned __int8 **)(a2 + 24);
            do
            {
              int v15 = *v14;
              uint64_t v16 = *v14;
              int v17 = *v16;
              uint64_t v14 = (unsigned __int8 **)(v16 + 24);
            }
            while (v17 == 128);
            if (v15 == *(unsigned __int8 **)v13) {
              break;
            }
            uint64_t v13 = (void *)*((void *)v13 + 2);
            if (!v13)
            {
LABEL_20:
              uint64_t v18 = *(void *)(a1 + 1096);
              char v19 = *(unsigned char *)(a1 + 1105);
              uint64_t v20 = MMSAlloc(a1, 0x28uLL);
              *(void *)uint64_t v20 = v18;
              v20[8] = v19;
              *((void *)v20 + 2) = a2;
              *((void *)v20 + 3) = a3;
              *((void *)v20 + 4) = *(void *)(a4 + 8);
              *(void *)(a4 + 8) = v20;
              goto LABEL_21;
            }
          }
          *(void *)&long long v135 = 0;
          uint64_t v106 = CUCFGetOpenTypeObject(a1, (uint64_t)a2, *((unsigned __int8 **)v13 + 1), &v135);
          if (!v106)
          {
            uint64_t v92 = a1;
            int v93 = 39;
            goto LABEL_265;
          }
          size_t v107 = (uint64_t *)v106;
          uint64_t v108 = *((void *)a2 + 1);
          GenericSetValue(*(unsigned int *)(v108 + 40), (unsigned char *)a3, *(_DWORD *)(v106 + 24));
          uint64_t v109 = a3 + *(unsigned int *)(v108 + 36);
          unint64_t v110 = *(void *)(a1 + 712);
          if (v110 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v110 = *(void *)(a1 + 712);
          }
          *(void *)(a1 + 200 + 8 * v110) = v107;
          *(void *)(a1 + 712) = v110 + 1;
          uint64_t v111 = *v107;
          uint64_t v112 = a1;
          uint64_t v113 = v109;
          uint64_t v114 = 0;
          goto LABEL_303;
        case 'A':
          goto LABEL_109;
        case 'B':
          unsigned __int8 v42 = a2[24];
          unsigned __int8 v43 = v42;
          if (a2[25] != 1) {
            goto LABEL_83;
          }
          if (PERGetBit(a1) == 1) {
            goto LABEL_308;
          }
          unsigned __int8 v43 = a2[24];
LABEL_83:
          if ((v43 & 0x20) != 0)
          {
            if ((v43 & 0x80) != 0)
            {
              unsigned int v138 = 0;
              LODWORD(v135) = *((_DWORD *)a2 + 10) - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
              int v89 = *((_DWORD *)a2 + 8);
              unsigned int v90 = v138;
            }
            else
            {
              LODWORD(v135) = 0;
              PERDecodeSemiConstrainedWholeNumberFunc(a1, &v135);
              int v89 = *((_DWORD *)a2 + 8);
              unsigned int v90 = v135;
            }
            int v45 = v90 + v89;
          }
          else
          {
LABEL_308:
            if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
            {
              int v44 = *(unsigned __int8 *)(a1 + 1105);
              if (v44 != 7)
              {
                *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v44;
                *(unsigned char *)(a1 + 1105) = 7;
              }
            }
            *(void *)&long long v135 = 0;
            PERDecodeUnconstrainedWholeNumberFunc(a1, (uint64_t)&v135);
            int v45 = DWORD1(v135);
          }
          LODWORD(v133) = v45;
          int v126 = *(_DWORD *)(*((void *)a2 + 1) + 8);
          if (v42)
          {
            if (v126 != 4) {
              goto LABEL_275;
            }
          }
          else if (v126 != 4)
          {
LABEL_275:
            *(void *)a3 = v45;
LABEL_276:
            if (!a2[25]) {
              CUCFCheckINTEGERConstraint(a1, (uint64_t)a2, (int *)&v133);
            }
            goto LABEL_278;
          }
          *(_DWORD *)a3 = v45;
          goto LABEL_276;
        case 'C':
          long long v135 = 0uLL;
          *(void *)&long long v136 = 0;
          if (a2[25] == 1 && PERGetBit(a1) == 1) {
            goto LABEL_91;
          }
          int v46 = (char)a2[24];
          if ((v46 & 0x80000000) == 0) {
            goto LABEL_91;
          }
          if ((v46 & 2) != 0)
          {
            size_t v97 = *((void *)a2 + 4);
            if (!v97) {
              goto LABEL_97;
            }
            if (v97 <= 0x10)
            {
LABEL_286:
              PERDecodePrimBIT_STRING(a1, v97, (uint64_t)&v135);
LABEL_97:
              unint64_t v50 = *((void *)&v135 + 1);
              uint64_t v49 = v135;
              *(void *)(a1 + 1112) = 0;
              if (v50)
              {
                *(void *)(a3 + 8) = v49;
                *(_DWORD *)a3 = v50;
                *(unsigned char *)(a3 + 4) = 8;
              }
              else
              {
                memset_s((void *)a3, 0x10uLL, 0, 0x10uLL);
              }
              if (!a2[25]) {
                CUCFCheckStringConstraint(a1, (uint64_t)a2, v50);
              }
              goto LABEL_278;
            }
            if (!(v97 >> 16))
            {
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v127 = *(unsigned __int8 *)(a1 + 1105);
                if (v127 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v127;
                  *(unsigned char *)(a1 + 1105) = 7;
                  size_t v97 = *((void *)a2 + 4);
                }
              }
              goto LABEL_286;
            }
          }
          else
          {
            unint64_t v96 = *((void *)a2 + 5);
            if (!(v96 >> 16))
            {
              unsigned int v138 = 0;
              LODWORD(v133) = v96 - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              size_t v97 = v138 + *((_DWORD *)a2 + 8);
              *((void *)&v135 + 1) = v97;
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v98 = *(unsigned __int8 *)(a1 + 1105);
                if (v98 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v98;
                  *(unsigned char *)(a1 + 1105) = 7;
                  size_t v97 = *((void *)&v135 + 1);
                }
              }
              goto LABEL_286;
            }
          }
LABEL_91:
          uint64_t v47 = PERDecodePrimBIT_STRING;
          goto LABEL_96;
        case 'D':
          long long v135 = 0uLL;
          *(void *)&long long v136 = 0;
          if (a2[25] == 1 && PERGetBit(a1) == 1) {
            goto LABEL_95;
          }
          int v48 = (char)a2[24];
          if ((v48 & 0x80000000) == 0) {
            goto LABEL_95;
          }
          if ((v48 & 2) != 0)
          {
            size_t v100 = *((void *)a2 + 4);
            if (!v100) {
              goto LABEL_97;
            }
            if (v100 <= 2) {
              goto LABEL_293;
            }
            if (!(v100 >> 16))
            {
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v128 = *(unsigned __int8 *)(a1 + 1105);
                if (v128 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v128;
                  *(unsigned char *)(a1 + 1105) = 7;
                  size_t v100 = *((void *)a2 + 4);
                }
              }
              goto LABEL_293;
            }
          }
          else
          {
            unint64_t v99 = *((void *)a2 + 5);
            if (!(v99 >> 16))
            {
              unsigned int v138 = 0;
              LODWORD(v133) = v99 - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              size_t v100 = v138 + *((_DWORD *)a2 + 8);
              *((void *)&v135 + 1) = v100;
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
              {
                int v101 = *(unsigned __int8 *)(a1 + 1105);
                if (v101 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v101;
                  *(unsigned char *)(a1 + 1105) = 7;
                  size_t v100 = *((void *)&v135 + 1);
                }
              }
LABEL_293:
              PERDecodePrimOCTET_STRING(a1, v100, (uint64_t)&v135);
              goto LABEL_97;
            }
          }
LABEL_95:
          uint64_t v47 = PERDecodePrimOCTET_STRING;
LABEL_96:
          *(void *)&long long v136 = v47;
          PERConstructedDecode(a1, (uint64_t)&v135);
          goto LABEL_97;
        default:
          if (v9 - 82 >= 2 && v9 != 86) {
            goto LABEL_109;
          }
          goto LABEL_39;
      }
    }
    if (*a2 > 0x70u)
    {
      if (*a2 <= 0x9Fu)
      {
        if (v9 != 113)
        {
          if (v9 != 128) {
            goto LABEL_109;
          }
          goto LABEL_70;
        }
        long long v136 = 0uLL;
        memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
        long long v135 = (unint64_t)a3;
        *(void *)&long long v137 = a2;
        *((void *)&v137 + 1) = a4;
        unint64_t v51 = *(void *)(a1 + 712);
        if (v51 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          unint64_t v51 = *(void *)(a1 + 712);
        }
        *(void *)(a1 + 200 + 8 * v51) = (char *)&v136 + 8;
        *(void *)(a1 + 712) = v51 + 1;
        if (a2[33] == 1 && PERGetBit(a1) == 1) {
          goto LABEL_104;
        }
        int v52 = (char)a2[32];
        if ((v52 & 0x80000000) == 0) {
          goto LABEL_104;
        }
        if ((v52 & 2) != 0)
        {
          unint64_t v105 = *((void *)a2 + 5);
          if (!v105) {
            goto LABEL_106;
          }
          if (!(v105 >> 16))
          {
LABEL_299:
            PERDecodePrimSET_OF(a1, v105, (uint64_t)&v135);
LABEL_106:
            --*(void *)(a1 + 712);
            if (!a2[33]) {
              CUCFCheckStructOfConstraint(a1, (uint64_t)a2, *((unint64_t *)&v136 + 1));
            }
            goto LABEL_278;
          }
        }
        else
        {
          unint64_t v104 = *((void *)a2 + 6);
          if (!(v104 >> 16))
          {
            unsigned int v138 = 0;
            LODWORD(v133) = v104 - *((_DWORD *)a2 + 10);
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
            unint64_t v105 = v138 + *((_DWORD *)a2 + 10);
            *((void *)&v135 + 1) = v105;
            goto LABEL_299;
          }
        }
LABEL_104:
        uint64_t v24 = PERDecodePrimSET_OF;
        goto LABEL_105;
      }
      if (v9 == 160)
      {
LABEL_70:
        PERDecVal(a1, *((void *)a2 + 3), a3, a4);
        goto LABEL_278;
      }
      if (v9 == 162)
      {
        unsigned int v35 = a2[24];
        if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
        {
          if (v35 < 3) {
            unsigned int v82 = 2;
          }
          else {
            unsigned int v82 = 3;
          }
          uint64_t v83 = PERGetBits(a1, v82);
          int v84 = *(unsigned __int8 *)(a1 + 1105);
          if (v84 != 7)
          {
            *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v84;
            *(unsigned char *)(a1 + 1105) = 7;
          }
          if (v83 == 4)
          {
            PERGetByte(a1);
            LOBYTE(v83) = 3;
          }
          unsigned __int8 v37 = 8 * v83 + 8;
        }
        else
        {
          if (v35 >= 3)
          {
            if (v35 == 16) {
              unsigned int v36 = 7;
            }
            else {
              unsigned int v36 = 1;
            }
            PERGetBits(a1, v36);
          }
          unsigned __int8 v37 = 32;
        }
        unsigned int v85 = PERGetBits(a1, v37);
        if (v35 == 3)
        {
          unint64_t v86 = *(void *)&v85 | 0xFFFFFFFF00000000;
        }
        else
        {
          unint64_t v86 = v85;
          if (v35 == 1) {
            unint64_t v86 = v85 - 0x80000000;
          }
        }
        int v91 = a2[24];
        if (v91 != 3 && (v91 == 2 || v91 == 1)) {
          *(_DWORD *)a3 = v86;
        }
        else {
          *(void *)a3 = v86;
        }
        if ((v35 != 4 || !(v86 >> 33)) && (v35 != 16 || !(v86 >> 39))) {
          goto LABEL_278;
        }
        uint64_t v92 = a1;
        int v93 = 18;
LABEL_265:
        EPErrorHandler(v92, v93);
LABEL_278:
        *(void *)(a1 + 1040) = v8;
        return;
      }
LABEL_109:
      CUCFErrorHandler(a1, 16);
      goto LABEL_278;
    }
    if (v9 != 90)
    {
      if (v9 == 96)
      {
        PERDecVal(a1, *((void *)a2 + 3), a3, 0);
        uint64_t v53 = MMSAlloc(a1, 0x18uLL);
        *uint64_t v53 = a2;
        v53[1] = a3;
        double v53[2] = *(void *)a4;
        *(void *)a4 = v53;
        goto LABEL_278;
      }
      if (v9 != 112) {
        goto LABEL_109;
      }
      long long v136 = 0uLL;
      rsize_t v21 = *(unsigned int *)(*((void *)a2 + 1) + 8);
      memset_s((void *)a3, v21, 0, v21);
      long long v135 = (unint64_t)a3;
      *(void *)&long long v137 = a2;
      *((void *)&v137 + 1) = a4;
      unint64_t v22 = *(void *)(a1 + 712);
      if (v22 >= 0x40)
      {
        CUCFErrorHandler(a1, 15);
        unint64_t v22 = *(void *)(a1 + 712);
      }
      *(void *)(a1 + 200 + 8 * v22) = (char *)&v136 + 8;
      *(void *)(a1 + 712) = v22 + 1;
      if (a2[33] == 1 && PERGetBit(a1) == 1 || (int v23 = (char)a2[32], (v23 & 0x80000000) == 0))
      {
LABEL_38:
        uint64_t v24 = PERDecodePrimSEQUENCE_OF;
LABEL_105:
        *(void *)&long long v136 = v24;
        PERConstructedDecode(a1, (uint64_t)&v135);
        goto LABEL_106;
      }
      if ((v23 & 2) != 0)
      {
        unint64_t v103 = *((void *)a2 + 5);
        if (!v103) {
          goto LABEL_106;
        }
        if (v103 >> 16) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v102 = *((void *)a2 + 6);
        if (v102 >> 16) {
          goto LABEL_38;
        }
        unsigned int v138 = 0;
        LODWORD(v133) = v102 - *((_DWORD *)a2 + 10);
        PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
        unint64_t v103 = v138 + *((_DWORD *)a2 + 10);
        *((void *)&v135 + 1) = v103;
      }
      PERDecodePrimSEQUENCE_OF(a1, v103, (uint64_t)&v135);
      goto LABEL_106;
    }
LABEL_39:
    uint64_t v134 = 0;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
    if (a2[41] == 1 && PERGetBit(a1) == 1)
    {
      *((void *)&v137 + 1) = 0;
      if ((*(void *)(a1 + 1056) & 0x40) != 0) {
        char v25 = 8;
      }
      else {
        char v25 = 7;
      }
      BYTE8(v136) = v25;
      goto LABEL_158;
    }
    uint64_t v26 = *((void *)a2 + 4);
    if (v26)
    {
      *(void *)&long long v137 = *((void *)a2 + 3);
      *((void *)&v137 + 1) = v26;
      unint64_t v27 = v26 - 1;
      if (v26 == 1)
      {
        unsigned __int8 v28 = 0;
        BYTE8(v136) = 0;
        if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0) {
          goto LABEL_157;
        }
        unsigned __int8 v31 = 1;
      }
      else
      {
        unsigned __int8 v28 = 0;
        do
        {
          ++v28;
          BOOL v29 = v27 > 1;
          v27 >>= 1;
        }
        while (v29);
        BYTE8(v136) = v28;
        if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0)
        {
LABEL_157:
          int v72 = (char)a2[40];
          if ((v72 & 0x80000000) == 0)
          {
LABEL_158:
            *(void *)&long long v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
            goto LABEL_159;
          }
          if ((v72 & 2) != 0)
          {
            unint64_t v80 = *((void *)a2 + 6);
            if (!v80) {
              goto LABEL_159;
            }
            if (v80 > 2)
            {
              if (v80 >> 16) {
                goto LABEL_158;
              }
              if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0 && v80 * v28 >= 0x11)
              {
                int v123 = *(unsigned __int8 *)(a1 + 1105);
                if (v123 != 7)
                {
                  *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v123;
                  *(unsigned char *)(a1 + 1105) = 7;
                  unint64_t v80 = *((void *)a2 + 6);
                }
              }
            }
          }
          else
          {
            uint64_t v79 = *((void *)a2 + 7) - *((void *)a2 + 6);
            if ((unint64_t)(v79 + 1) >> 16) {
              goto LABEL_158;
            }
            int v132 = 0;
            unsigned int v138 = v79;
            PERDecodeConstrainedWholeNumberFunc(a1, &v138, &v132);
            unint64_t v80 = (v132 + *((_DWORD *)a2 + 12));
            *((void *)&v135 + 1) = v80;
            if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
            {
              int v81 = *(unsigned __int8 *)(a1 + 1105);
              if (v81 != 7)
              {
                *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v81;
                *(unsigned char *)(a1 + 1105) = 7;
                unint64_t v80 = *((void *)&v135 + 1);
              }
            }
          }
          PERDecodePrimCHARACTER_STRING(a1, v80, (uint64_t *)&v135);
LABEL_159:
          if (*((void *)&v137 + 1))
          {
            if (*(unsigned __int8 *)(*((void *)&v137 + 1) + v137 - 1) > ~(-1 << SBYTE8(v136)))
            {
              uint64_t v73 = *((void *)&v135 + 1);
              if (*((void *)&v135 + 1))
              {
                BOOL v74 = (unsigned char *)v135;
                do
                {
                  unsigned char *v74 = *(unsigned char *)(v137 + (char)*v74);
                  ++v74;
                  --v73;
                }
                while (v73);
              }
            }
          }
          uint64_t v76 = *((void *)&v135 + 1);
          uint64_t v75 = v135;
          long long v133 = v135;
          *(void *)(a1 + 1112) = 0;
          switch(*a2 & 0x1F)
          {
            case 0x12:
            case 0x13:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x1A:
              if (v76)
              {
                *(unsigned char *)(v75 + v76) = 0;
                *(void *)a3 = v75 - 1;
                int v77 = 1;
                LOBYTE(v134) = 1;
              }
              else
              {
                uint64_t v78 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
                int v77 = 0;
                *(void *)a3 = v78;
                unsigned char *v78 = 86;
                *(unsigned char *)(*(void *)a3 + 1) = 0;
                LOBYTE(v134) = 0;
              }
              break;
            default:
              CUCFErrorHandler(a1, 15);
              int v77 = 0;
              break;
          }
          if (!a2[41])
          {
            CUCFCheckCHARACTER_STRINGConstraint(a1, (uint64_t)a2, &v133);
            int v77 = v134;
            uint64_t v76 = *((void *)&v133 + 1);
          }
          if (!v77)
          {
            if (v76)
            {
              int v71 = (void *)v133;
              if ((void)v133) {
LABEL_179:
              }
                free(v71);
            }
          }
          goto LABEL_278;
        }
        unint64_t v30 = v28;
        unsigned __int8 v31 = 1;
        do
        {
          v31 *= 2;
          BOOL v29 = v30 > 1;
          v30 >>= 1;
        }
        while (v29);
      }
      unsigned __int8 v69 = v31;
      unsigned int v70 = v31 >> 1;
      if (v70 >= v28) {
        unsigned __int8 v28 = v70;
      }
      else {
        unsigned __int8 v28 = v69;
      }
    }
    else if ((*a2 & 0x1F) == 0x12)
    {
      *(void *)&long long v137 = " 0123456789";
      *((void *)&v137 + 1) = 11;
      unsigned __int8 v28 = 4;
    }
    else
    {
      *((void *)&v137 + 1) = 0;
      if ((*(void *)(a1 + 1056) & 0x40) != 0) {
        unsigned __int8 v28 = 8;
      }
      else {
        unsigned __int8 v28 = 7;
      }
    }
    BYTE8(v136) = v28;
    goto LABEL_157;
  }
}

void PERDecodeStruct(size_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  long long v173 = 0;
  long long v174 = 0;
  char v7 = *(unsigned char *)(a2 + 48);
  uint64_t v8 = a4;
  if ((v7 & 0x10) != 0)
  {
    if (a4) {
      long long v173 = *a4;
    }
    uint64_t v8 = &v173;
  }
  if (v7) {
    int v168 = PERGetBit(a1);
  }
  else {
    int v168 = 0;
  }
  unint64_t v9 = *(void *)(a2 + 80);
  if (v9)
  {
    int v175 = 0;
    uint64_t v176 = 0;
    unint64_t v177 = 0;
    if (v9 >> 16)
    {
      PERGetConsBitField(a1, (uint64_t)&v175);
    }
    else
    {
      int v175 = *(unsigned __int8 **)(a1 + 1096);
      LOWORD(v176) = *(unsigned __int8 *)(a1 + 1105);
      unint64_t v177 = v9 + 1;
      PERGetSkipBytes(a1, v9 >> 3);
      PERGetBits(a1, v9 & 7);
    }
    uint64_t v23 = *(void *)(a2 + 56);
    if (v23)
    {
      uint64_t v24 = *(void *)(a2 + 24);
      while (2)
      {
        switch(*(unsigned char *)(v24 + 16))
        {
          case 0:
            goto LABEL_41;
          case 1:
            if ((_BYTE)v176)
            {
              char v25 = v176 - 1;
            }
            else
            {
              ++v175;
              char v25 = 7;
            }
            LOBYTE(v176) = v25;
            --v177;
LABEL_41:
            uint64_t v36 = *(unsigned int *)(*(void *)(*(void *)(a2 + 8) + 24) + 24 * *(void *)(v24 + 24) + 8);
            unint64_t v37 = *(void *)(a1 + 712);
            if (v37 >= 0x40) {
              goto LABEL_46;
            }
            goto LABEL_47;
          case 2:
            unsigned int v26 = *v175;
            char v27 = v176;
            if ((_BYTE)v176)
            {
              char v28 = v176 - 1;
            }
            else
            {
              ++v175;
              char v28 = 7;
            }
            LOBYTE(v176) = v28;
            --v177;
            uint64_t v33 = *(void *)(*(void *)(a2 + 8) + 24);
            uint64_t v34 = *(void *)(v24 + 24);
            if (((v26 >> v27) & 1) == 0)
            {
              *(unsigned char *)(a3 + **(unsigned int **)(v33 + 24 * v34 + 16)) = 0;
              goto LABEL_51;
            }
            uint64_t v35 = v33 + 24 * v34;
            uint64_t v36 = *(unsigned int *)(v35 + 8);
            *(unsigned char *)(a3 + **(unsigned int **)(v35 + 16)) = 1;
            unint64_t v37 = *(void *)(a1 + 712);
            if (v37 < 0x40) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 3:
            unsigned int v29 = *v175;
            char v30 = v176;
            if ((_BYTE)v176)
            {
              char v31 = v176 - 1;
            }
            else
            {
              ++v175;
              char v31 = 7;
            }
            LOBYTE(v176) = v31;
            --v177;
            uint64_t v38 = *(void *)(a2 + 8);
            uint64_t v39 = *(void *)(v38 + 24);
            uint64_t v40 = *(void *)(v24 + 24);
            if ((v29 >> v30))
            {
              uint64_t v41 = v39 + 24 * v40;
              uint64_t v36 = *(unsigned int *)(v41 + 8);
              *(unsigned char *)(a3 + **(unsigned int **)(v41 + 16)) = 1;
              unint64_t v37 = *(void *)(a1 + 712);
              if (v37 >= 0x40)
              {
LABEL_46:
                CUCFErrorHandler(a1, 15);
                unint64_t v37 = *(void *)(a1 + 712);
              }
LABEL_47:
              *(void *)(a1 + 200 + 8 * v37) = v24;
              *(void *)(a1 + 712) = v37 + 1;
              PERDecVal(a1, *(void *)v24, a3 + v36, v8);
              --*(void *)(a1 + 712);
            }
            else
            {
              *(unsigned char *)(a3 + **(unsigned int **)(v39 + 24 * v40 + 16)) = 0;
              uint64_t v42 = *(void *)(v38 + 24) + 24 * *(void *)(v24 + 24);
              GenericAssignSort((int *)(a3 + *(unsigned int *)(v42 + 8)), *(int **)(*(void *)(v42 + 16) + 8), 10, *(void *)v42);
            }
LABEL_51:
            if (v177) {
              BOOL v43 = 0;
            }
            else {
              BOOL v43 = BYTE1(v176) == 1;
            }
            if (v43) {
              PERSetBitFieldLength(&v175);
            }
            v24 += 32;
            if (!--v23) {
              break;
            }
            continue;
          case 5:
            if ((_BYTE)v176)
            {
              char v32 = v176 - 1;
            }
            else
            {
              ++v175;
              char v32 = 7;
            }
            LOBYTE(v176) = v32;
            --v177;
            goto LABEL_51;
          default:
            goto LABEL_51;
        }
        break;
      }
    }
    uint64_t v44 = *(void *)(a2 + 72);
    if (v44)
    {
      uint64_t v45 = *(void *)(a2 + 40);
      while (2)
      {
        switch(*(unsigned char *)(v45 + 16))
        {
          case 0:
            goto LABEL_76;
          case 1:
            if ((_BYTE)v176)
            {
              char v46 = v176 - 1;
            }
            else
            {
              ++v175;
              char v46 = 7;
            }
            LOBYTE(v176) = v46;
            --v177;
LABEL_76:
            uint64_t v57 = *(unsigned int *)(*(void *)(*(void *)(a2 + 8) + 24) + 24 * *(void *)(v45 + 24) + 8);
            unint64_t v58 = *(void *)(a1 + 712);
            if (v58 >= 0x40) {
              goto LABEL_81;
            }
            goto LABEL_82;
          case 2:
            unsigned int v47 = *v175;
            char v48 = v176;
            if ((_BYTE)v176)
            {
              char v49 = v176 - 1;
            }
            else
            {
              ++v175;
              char v49 = 7;
            }
            LOBYTE(v176) = v49;
            --v177;
            uint64_t v54 = *(void *)(*(void *)(a2 + 8) + 24);
            uint64_t v55 = *(void *)(v45 + 24);
            if (((v47 >> v48) & 1) == 0)
            {
              *(unsigned char *)(a3 + **(unsigned int **)(v54 + 24 * v55 + 16)) = 0;
              goto LABEL_86;
            }
            uint64_t v56 = v54 + 24 * v55;
            uint64_t v57 = *(unsigned int *)(v56 + 8);
            *(unsigned char *)(a3 + **(unsigned int **)(v56 + 16)) = 1;
            unint64_t v58 = *(void *)(a1 + 712);
            if (v58 < 0x40) {
              goto LABEL_82;
            }
            goto LABEL_81;
          case 3:
            unsigned int v50 = *v175;
            char v51 = v176;
            if ((_BYTE)v176)
            {
              char v52 = v176 - 1;
            }
            else
            {
              ++v175;
              char v52 = 7;
            }
            LOBYTE(v176) = v52;
            --v177;
            uint64_t v59 = *(void *)(a2 + 8);
            uint64_t v60 = *(void *)(v59 + 24);
            uint64_t v61 = *(void *)(v45 + 24);
            if ((v50 >> v51))
            {
              uint64_t v62 = v60 + 24 * v61;
              uint64_t v57 = *(unsigned int *)(v62 + 8);
              *(unsigned char *)(a3 + **(unsigned int **)(v62 + 16)) = 1;
              unint64_t v58 = *(void *)(a1 + 712);
              if (v58 >= 0x40)
              {
LABEL_81:
                CUCFErrorHandler(a1, 15);
                unint64_t v58 = *(void *)(a1 + 712);
              }
LABEL_82:
              *(void *)(a1 + 200 + 8 * v58) = v45;
              *(void *)(a1 + 712) = v58 + 1;
              PERDecVal(a1, *(void *)v45, a3 + v57, v8);
              --*(void *)(a1 + 712);
            }
            else
            {
              *(unsigned char *)(a3 + **(unsigned int **)(v60 + 24 * v61 + 16)) = 0;
              uint64_t v63 = *(void *)(v59 + 24) + 24 * *(void *)(v45 + 24);
              GenericAssignSort((int *)(a3 + *(unsigned int *)(v63 + 8)), *(int **)(*(void *)(v63 + 16) + 8), 10, *(void *)v63);
            }
LABEL_86:
            if (v177) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = BYTE1(v176) == 1;
            }
            if (v64) {
              PERSetBitFieldLength(&v175);
            }
            v45 += 32;
            if (!--v44) {
              break;
            }
            continue;
          case 5:
            if ((_BYTE)v176)
            {
              char v53 = v176 - 1;
            }
            else
            {
              ++v175;
              char v53 = 7;
            }
            LOBYTE(v176) = v53;
            --v177;
            goto LABEL_86;
          default:
            goto LABEL_86;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 56);
    unint64_t v11 = v8;
    if (v10)
    {
      char v12 = *(uint64_t **)(a2 + 24);
      unint64_t v13 = *(void *)(a1 + 712);
      do
      {
        uint64_t v14 = *(unsigned int *)(*(void *)(*(void *)(a2 + 8) + 24) + 24 * v12[3] + 8);
        if (v13 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          unint64_t v13 = *(void *)(a1 + 712);
        }
        uint64_t v15 = a3 + v14;
        *(void *)(a1 + 200 + 8 * v13) = v12;
        *(void *)(a1 + 712) = v13 + 1;
        uint64_t v16 = *v12;
        v12 += 4;
        uint64_t v8 = v11;
        PERDecVal(a1, v16, v15, v11);
        unint64_t v13 = *(void *)(a1 + 712) - 1;
        *(void *)(a1 + 712) = v13;
        --v10;
      }
      while (v10);
    }
    uint64_t v17 = *(void *)(a2 + 72);
    if (v17)
    {
      uint64_t v18 = *(uint64_t **)(a2 + 40);
      unint64_t v19 = *(void *)(a1 + 712);
      do
      {
        uint64_t v20 = *(unsigned int *)(*(void *)(*(void *)(a2 + 8) + 24) + 24 * v18[3] + 8);
        if (v19 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          unint64_t v19 = *(void *)(a1 + 712);
        }
        uint64_t v21 = a3 + v20;
        *(void *)(a1 + 200 + 8 * v19) = v18;
        *(void *)(a1 + 712) = v19 + 1;
        uint64_t v22 = *v18;
        v18 += 4;
        uint64_t v8 = v11;
        PERDecVal(a1, v22, v21, v11);
        unint64_t v19 = *(void *)(a1 + 712) - 1;
        *(void *)(a1 + 712) = v19;
        --v17;
      }
      while (v17);
    }
  }
  if (v168 != 1)
  {
    uint64_t v65 = *(void *)(a2 + 64);
    uint64_t v66 = a4;
    if (v65) {
      PERInitAbsentStructExtAdd(a1, (void *)a2, v65, a3);
    }
    goto LABEL_231;
  }
  long long v170 = 0;
  uint64_t v171 = 0;
  unint64_t v172 = 0;
  if (PERGetBit(a1) == 1)
  {
    PERGetConsBitField(a1, (uint64_t)&v170);
  }
  else
  {
    unsigned int v67 = PERGetBits(a1, 6u);
    long long v170 = *(unsigned __int8 **)(a1 + 1096);
    LOWORD(v171) = *(unsigned __int8 *)(a1 + 1105);
    unint64_t v172 = v67 + 1;
    PERGetSkipBytes(a1, v172 >> 3);
    PERGetBits(a1, v172 & 7);
  }
  if (!*(void *)(a2 + 88)) {
    goto LABEL_217;
  }
  uint64_t v68 = *(void *)(a2 + 64);
  if (!v68) {
    goto LABEL_217;
  }
  uint64_t v165 = 0;
  uint64_t v69 = *(void *)(a2 + 32);
  uint64_t v167 = 0;
  size_t v169 = a1 + 200;
  while (2)
  {
    switch(*(unsigned char *)(v69 + 16))
    {
      case 0:
      case 1:
        unsigned int v70 = v170;
        char v71 = v171;
        if ((_BYTE)v171)
        {
          char v72 = v171 - 1;
        }
        else
        {
          ++v170;
          char v72 = 7;
        }
        unsigned int v84 = *v70;
        LOBYTE(v171) = v72;
        unint64_t v73 = --v172;
        uint64_t v85 = *(void *)(*(void *)(a2 + 8) + 24);
        uint64_t v86 = *(void *)(v69 + 24);
        if ((v84 >> v71))
        {
          uint64_t v87 = v85 + 24 * v86;
          uint64_t v88 = *(unsigned int *)(v87 + 8);
          *(unsigned char *)(a3 + **(unsigned int **)(v87 + 16)) = 1;
          unint64_t v89 = *(void *)(a1 + 712);
          if (v89 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            unint64_t v89 = *(void *)(a1 + 712);
          }
          *(void *)(v169 + 8 * v89) = v69;
          *(void *)(a1 + 712) = v89 + 1;
          PERDecodeOPENTypeField(a1, *(void *)v69, a3 + v88, (uint64_t)v8);
          --*(void *)(a1 + 712);
        }
        else
        {
          *(unsigned char *)(a3 + **(unsigned int **)(v85 + 24 * v86 + 16)) = 0;
          ++v165;
        }
        goto LABEL_206;
      case 2:
        BOOL v74 = v170;
        char v75 = v171;
        if ((_BYTE)v171)
        {
          char v76 = v171 - 1;
        }
        else
        {
          ++v170;
          char v76 = 7;
        }
        unsigned int v90 = *v74;
        LOBYTE(v171) = v76;
        unint64_t v73 = --v172;
        uint64_t v91 = *(void *)(*(void *)(a2 + 8) + 24);
        uint64_t v92 = *(void *)(v69 + 24);
        if ((v90 >> v75))
        {
          uint64_t v93 = v91 + 24 * v92;
          uint64_t v94 = *(unsigned int *)(v93 + 8);
          *(unsigned char *)(a3 + **(unsigned int **)(v93 + 16)) = 1;
          unint64_t v95 = *(void *)(a1 + 712);
          if (v95 < 0x40) {
            goto LABEL_128;
          }
          goto LABEL_127;
        }
        *(unsigned char *)(a3 + **(unsigned int **)(v91 + 24 * v92 + 16)) = 0;
        goto LABEL_206;
      case 3:
        int v77 = v170;
        char v78 = v171;
        if ((_BYTE)v171)
        {
          char v79 = v171 - 1;
        }
        else
        {
          ++v170;
          char v79 = 7;
        }
        unsigned int v96 = *v77;
        LOBYTE(v171) = v79;
        unint64_t v73 = --v172;
        uint64_t v97 = *(void *)(a2 + 8);
        uint64_t v98 = *(void *)(v97 + 24);
        uint64_t v99 = *(void *)(v69 + 24);
        if ((v96 >> v78))
        {
          uint64_t v100 = v98 + 24 * v99;
          uint64_t v94 = *(unsigned int *)(v100 + 8);
          *(unsigned char *)(a3 + **(unsigned int **)(v100 + 16)) = 1;
          unint64_t v95 = *(void *)(a1 + 712);
          if (v95 >= 0x40)
          {
LABEL_127:
            CUCFErrorHandler(a1, 15);
            unint64_t v95 = *(void *)(a1 + 712);
          }
LABEL_128:
          *(void *)(v169 + 8 * v95) = v69;
          *(void *)(a1 + 712) = v95 + 1;
          PERDecodeOPENTypeField(a1, *(void *)v69, a3 + v94, (uint64_t)v8);
          --*(void *)(a1 + 712);
          goto LABEL_205;
        }
        *(unsigned char *)(a3 + **(unsigned int **)(v98 + 24 * v99 + 16)) = 0;
        uint64_t v109 = *(void *)(v97 + 24) + 24 * *(void *)(v69 + 24);
        GenericAssignSort((int *)(a3 + *(unsigned int *)(v109 + 8)), *(int **)(*(void *)(v109 + 16) + 8), 10, *(void *)v109);
        goto LABEL_206;
      case 4:
        unint64_t v80 = v170;
        char v81 = v171;
        if ((_BYTE)v171)
        {
          char v82 = v171 - 1;
        }
        else
        {
          ++v170;
          char v82 = 7;
        }
        uint64_t v101 = *(void *)(v69 + 24);
        v68 -= v101;
        unsigned int v102 = *v80;
        LOBYTE(v171) = v82;
        unint64_t v73 = --v172;
        if (((v102 >> v81) & 1) == 0)
        {
          for (; v101; --v101)
          {
            unsigned int v110 = *(unsigned __int8 *)(v69 + 48);
            if (v110 >= 3)
            {
              if (v110 == 3)
              {
                uint64_t v111 = *(void *)(a2 + 8);
                *(unsigned char *)(a3 + **(unsigned int **)(*(void *)(v111 + 24) + 24 * *(void *)(v69 + 56) + 16)) = 0;
                uint64_t v112 = *(void *)(v111 + 24) + 24 * *(void *)(v69 + 56);
                GenericAssignSort((int *)(a3 + *(unsigned int *)(v112 + 8)), *(int **)(*(void *)(v112 + 16) + 8), 10, *(void *)v112);
              }
              else if (v110 != 5)
              {
                CUCFErrorHandler(a1, 15);
              }
            }
            else
            {
              *(unsigned char *)(a3
                       + **(unsigned int **)(*(void *)(*(void *)(a2 + 8) + 24) + 24 * *(void *)(v69 + 56) + 16)) = 0;
            }
            v69 += 32;
          }
          goto LABEL_206;
        }
        int v175 = 0;
        uint64_t v176 = 0;
        unint64_t v177 = 0;
        unint64_t v103 = 0;
        if (v101)
        {
          unint64_t v104 = (unsigned __int8 *)(v69 + 48);
          do
          {
            int v105 = *v104;
            v104 += 32;
            if (v105) {
              ++v103;
            }
            --v101;
          }
          while (v101);
        }
        if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
        {
          int v106 = *(unsigned __int8 *)(a1 + 1105);
          if (v106 != 7)
          {
            *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v106;
            *(unsigned char *)(a1 + 1105) = 7;
          }
        }
        unsigned int v107 = PERGetByte(a1);
        char v108 = v107;
        if (v107 >= 0xC1)
        {
          --*(void *)(a1 + 1096);
          char v163 = v107;
          unsigned int v164 = *(unsigned __int8 *)(a1 + 1105);
          if (v164 == 7)
          {
            unint64_t v161 = 0;
            unint64_t v162 = PEROctetsDefragmentation(a1);
            unsigned int v164 = 255;
          }
          else
          {
            unint64_t v161 = 0;
            unint64_t v162 = PEROctetsDefragmentationWithOffset(a1);
          }
          goto LABEL_161;
        }
        if ((v107 & 0xC0) == 0x80)
        {
          unsigned int v164 = 0;
          unint64_t v162 = PERGetByte(a1) & 0xFFFF80FF | ((v108 & 0x7F) << 8);
          unint64_t v113 = *(void *)(a1 + 1096) + v162;
LABEL_160:
          unint64_t v161 = v113;
          char v163 = *(unsigned char *)(a1 + 1105);
          goto LABEL_161;
        }
        if ((v107 & 0x80) == 0)
        {
          unsigned int v164 = 0;
          unint64_t v162 = v107 & 0x7F;
          unint64_t v113 = *(void *)(a1 + 1096) + v162;
          goto LABEL_160;
        }
        char v163 = v107;
        EPErrorHandler(a1, 26);
        unsigned int v164 = 0;
        unint64_t v161 = 0;
        unint64_t v162 = 0;
LABEL_161:
        if (v103 >> 16)
        {
          PERGetConsBitField(a1, (uint64_t)&v175);
        }
        else
        {
          int v175 = *(unsigned __int8 **)(a1 + 1096);
          LOWORD(v176) = *(unsigned __int8 *)(a1 + 1105);
          unint64_t v177 = v103 + 1;
          PERGetSkipBytes(a1, v103 >> 3);
          PERGetBits(a1, v103 & 7);
        }
        uint64_t v114 = *(void *)(v69 + 24);
        if (v114)
        {
          uint64_t v115 = v69 + 32;
          while (2)
          {
            switch(*(unsigned char *)(v115 + 16))
            {
              case 0:
                goto LABEL_177;
              case 1:
                if ((_BYTE)v176)
                {
                  char v116 = v176 - 1;
                }
                else
                {
                  ++v175;
                  char v116 = 7;
                }
                LOBYTE(v176) = v116;
                --v177;
LABEL_177:
                uint64_t v124 = *(void *)(*(void *)(a2 + 8) + 24) + 24 * *(void *)(v115 + 24);
                uint64_t v125 = *(unsigned int *)(v124 + 8);
                *(unsigned char *)(a3 + **(unsigned int **)(v124 + 16)) = 1;
                unint64_t v126 = *(void *)(a1 + 712);
                if (v126 >= 0x40) {
                  goto LABEL_186;
                }
                goto LABEL_187;
              case 2:
                unsigned int v117 = *v175;
                char v118 = v176;
                if ((_BYTE)v176)
                {
                  char v119 = v176 - 1;
                }
                else
                {
                  ++v175;
                  char v119 = 7;
                }
                LOBYTE(v176) = v119;
                --v177;
                uint64_t v127 = *(void *)(*(void *)(a2 + 8) + 24);
                uint64_t v128 = *(void *)(v115 + 24);
                if (((v117 >> v118) & 1) == 0)
                {
                  *(unsigned char *)(a3 + **(unsigned int **)(v127 + 24 * v128 + 16)) = 0;
                  goto LABEL_192;
                }
                uint64_t v129 = v127 + 24 * v128;
                uint64_t v125 = *(unsigned int *)(v129 + 8);
                *(unsigned char *)(a3 + **(unsigned int **)(v129 + 16)) = 1;
                unint64_t v126 = *(void *)(a1 + 712);
                if (v126 < 0x40) {
                  goto LABEL_187;
                }
                goto LABEL_186;
              case 3:
                unsigned int v120 = *v175;
                char v121 = v176;
                if ((_BYTE)v176)
                {
                  char v122 = v176 - 1;
                }
                else
                {
                  ++v175;
                  char v122 = 7;
                }
                LOBYTE(v176) = v122;
                --v177;
                uint64_t v130 = *(void *)(a2 + 8);
                uint64_t v131 = *(void *)(v130 + 24);
                uint64_t v132 = *(void *)(v115 + 24);
                if ((v120 >> v121))
                {
                  uint64_t v133 = v131 + 24 * v132;
                  uint64_t v125 = *(unsigned int *)(v133 + 8);
                  *(unsigned char *)(a3 + **(unsigned int **)(v133 + 16)) = 1;
                  unint64_t v126 = *(void *)(a1 + 712);
                  if (v126 >= 0x40)
                  {
LABEL_186:
                    CUCFErrorHandler(a1, 15);
                    unint64_t v126 = *(void *)(a1 + 712);
                  }
LABEL_187:
                  *(void *)(v169 + 8 * v126) = v115;
                  *(void *)(a1 + 712) = v126 + 1;
                  PERDecVal(a1, *(void *)v115, a3 + v125, v8);
                  --*(void *)(a1 + 712);
                }
                else
                {
                  *(unsigned char *)(a3 + **(unsigned int **)(v131 + 24 * v132 + 16)) = 0;
                  uint64_t v134 = *(void *)(v130 + 24) + 24 * *(void *)(v115 + 24);
                  GenericAssignSort((int *)(a3 + *(unsigned int *)(v134 + 8)), *(int **)(*(void *)(v134 + 16) + 8), 10, *(void *)v134);
                }
LABEL_192:
                if (v177) {
                  BOOL v135 = 0;
                }
                else {
                  BOOL v135 = BYTE1(v176) == 1;
                }
                if (v135) {
                  PERSetBitFieldLength(&v175);
                }
                v115 += 32;
                if (--v114) {
                  continue;
                }
                uint64_t v69 = v115 - 32;
                break;
              case 5:
                if ((_BYTE)v176)
                {
                  char v123 = v176 - 1;
                }
                else
                {
                  ++v175;
                  char v123 = 7;
                }
                LOBYTE(v176) = v123;
                --v177;
                goto LABEL_192;
              default:
                goto LABEL_192;
            }
            break;
          }
        }
        if (v164)
        {
          if (*(unsigned __int8 *)(a1 + 1105) < v164) {
            ++*(void *)(a1 + 1096);
          }
          *(unsigned char *)(a1 + 1105) = v164;
          PEROctetsFragmentationWithOffset(a1, v162);
        }
        else
        {
          *(void *)(a1 + 1096) = v161;
          *(unsigned char *)(a1 + 1105) = v163;
        }
LABEL_205:
        ++v167;
LABEL_206:
        --v68;
        if (!v73)
        {
          if (BYTE1(v171) != 1) {
            goto LABEL_212;
          }
          PERSetBitFieldLength(&v170);
        }
        v69 += 32;
        if (v68) {
          continue;
        }
LABEL_212:
        if (v165 && v167) {
          EPErrorHandler(a1, 33);
        }
        if (v68)
        {
          PERInitAbsentStructExtAdd(a1, (void *)a2, v68, a3);
          goto LABEL_230;
        }
LABEL_217:
        unint64_t v136 = v172;
        if (v172)
        {
          if (!BYTE1(v171))
          {
LABEL_219:
            long long v137 = v170;
            int v138 = v171;
            do
            {
              unsigned int v139 = *v137;
              if ((_BYTE)v138)
              {
                int v140 = v138 - 1;
              }
              else
              {
                ++v137;
                int v140 = 7;
              }
              if ((v139 >> v138)) {
                PERSkipOPENTypeField(a1);
              }
              int v138 = v140;
              --v136;
            }
            while (v136);
          }
        }
        else if (BYTE1(v171) == 1)
        {
          PERSetBitFieldLength(&v170);
          unint64_t v136 = v172;
          if (v172)
          {
            if (!BYTE1(v171)) {
              goto LABEL_219;
            }
          }
        }
LABEL_230:
        uint64_t v66 = a4;
LABEL_231:
        if ((*(unsigned char *)(a2 + 48) & 0x10) == 0) {
          return;
        }
        unint64_t v141 = (void **)v174;
        if (!v174)
        {
          if (v66) {
            goto LABEL_261;
          }
          goto LABEL_266;
        }
        int v142 = 0;
        int v143 = v174;
        do
        {
          do
          {
LABEL_234:
            unint64_t v144 = v173;
            unsigned int v145 = (unsigned __int8 **)((char *)v141[2] + 24);
            do
            {
              long long v146 = *v145;
              unint64_t v147 = *v145;
              int v148 = *v147;
              unsigned int v145 = (unsigned __int8 **)(v147 + 24);
            }
            while (v148 == 128);
            if (!v173) {
              goto LABEL_245;
            }
            while (v146 != *(unsigned __int8 **)v144)
            {
LABEL_240:
              unint64_t v144 = (void *)*((void *)v144 + 2);
              if (!v144) {
                goto LABEL_245;
              }
            }
            int v175 = 0;
            uint64_t v149 = CUCFGetOpenTypeObject(a1, (uint64_t)v141[2], *((unsigned __int8 **)v144 + 1), &v175);
            if (!v149)
            {
              EPErrorHandler(a1, 39);
              goto LABEL_240;
            }
            long long v150 = (uint64_t *)v149;
            uint64_t v151 = *(void *)(a1 + 1096);
            char v152 = *(unsigned char *)(a1 + 1105);
            *(void *)(a1 + 1096) = *v141;
            *(unsigned char *)(a1 + 1105) = *((unsigned char *)v141 + 8);
            uint64_t v153 = *((void *)v141[2] + 1);
            GenericSetValue(*(unsigned int *)(v153 + 40), v141[3], *(_DWORD *)(v149 + 24));
            long long v154 = v141[3];
            uint64_t v155 = *(unsigned int *)(v153 + 36);
            unint64_t v156 = *(void *)(a1 + 712);
            if (v156 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              unint64_t v156 = *(void *)(a1 + 712);
            }
            *(void *)(a1 + 200 + 8 * v156) = v150;
            *(void *)(a1 + 712) = v156 + 1;
            PERDecodeOPENTypeField(a1, *v150, (uint64_t)v154 + v155, 0);
            --*(void *)(a1 + 712);
            *(void *)(a1 + 1096) = v151;
            *(unsigned char *)(a1 + 1105) = v152;
            *unint64_t v141 = 0;
LABEL_245:
            if (*v141)
            {
              int v143 = v141;
              unint64_t v141 = (void **)v141[4];
              if (!v141) {
                break;
              }
              goto LABEL_234;
            }
            if (v141 != v174)
            {
              *((void *)v143 + 4) = v141[4];
              MMSFree(a1, v141, (void *)0x28);
              unint64_t v141 = (void **)*((void *)v143 + 4);
              int v142 = 1;
              if (!v141) {
                break;
              }
              goto LABEL_234;
            }
            long long v174 = v141[4];
            MMSFree(a1, v141, (void *)0x28);
            int v142 = 1;
            int v143 = v174;
            unint64_t v141 = (void **)v174;
          }
          while (v174);
          unint64_t v141 = (void **)v174;
          if (!v142) {
            break;
          }
          int v142 = 0;
          int v143 = v174;
        }
        while (v174);
        uint64_t v66 = a4;
        if (!a4)
        {
          if (v174) {
            EPErrorHandler(a1, 38);
          }
LABEL_266:
          while (1)
          {
            int v160 = v173;
            if (!v173) {
              break;
            }
            long long v173 = (void *)*((void *)v173 + 2);
            MMSFree(a1, v160, (void *)0x18);
          }
          return;
        }
        if (v174)
        {
          long long v157 = a4 + 1;
          int v158 = a4[1];
          if (v158)
          {
            do
            {
              unsigned int v159 = v158;
              int v158 = (void *)v158[4];
            }
            while (v158);
            long long v157 = (void **)(v159 + 4);
          }
          _OWORD *v157 = v174;
        }
LABEL_261:
        if (!*v66) {
          *uint64_t v66 = v173;
        }
        return;
      case 5:
        if ((_BYTE)v171)
        {
          char v83 = v171 - 1;
        }
        else
        {
          ++v170;
          char v83 = 7;
        }
        LOBYTE(v171) = v83;
        unint64_t v73 = --v172;
        goto LABEL_206;
      default:
        CUCFErrorHandler(a1, 15);
        unint64_t v73 = v172;
        goto LABEL_206;
    }
  }
}

size_t PEREncodeUnconstrainedWholeNumberFunc(size_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 >= 0x80)
  {
    if (v4 >= 0x8000)
    {
      if (v4 >= 0x800000)
      {
        PERPutByte(a1, 4u);
        unsigned int v5 = *(_DWORD *)(a2 + 4);
        if (*(unsigned char *)a2)
        {
          unsigned int v5 = ~v5;
          *(_DWORD *)(a2 + 4) = v5;
        }
      }
      else
      {
        if (*(unsigned char *)a2)
        {
          unsigned int v4 = 0xFFFFFF - v4;
          *(_DWORD *)(a2 + 4) = v4;
        }
        unsigned int v5 = v4 | 0x3000000;
      }
      unsigned int v6 = 32;
    }
    else
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v4 = 0xFFFF - v4;
        *(_DWORD *)(a2 + 4) = v4;
      }
      unsigned int v5 = v4 | 0x20000;
      unsigned int v6 = 24;
    }
  }
  else
  {
    if (*(unsigned char *)a2)
    {
      unsigned int v4 = 255 - v4;
      *(_DWORD *)(a2 + 4) = v4;
    }
    unsigned int v5 = v4 | 0x100;
    unsigned int v6 = 16;
  }

  return PERPutBits(a1, v5, v6);
}

unint64_t PERDecodeUnconstrainedWholeNumberFunc(uint64_t a1, uint64_t a2)
{
  int v4 = PERGetByte(a1);
  if ((v4 - 5) <= 0xFFFFFFFB) {
    EPErrorHandler(a1, 24);
  }
  char v5 = 8 * v4;
  unint64_t result = PERGetBits(a1, (8 * v4));
  *(_DWORD *)(a2 + 4) = result;
  if ((v4 - 1) <= 2 && ((result >> (v5 - 8)) & 0x80) != 0) {
    *(_DWORD *)(a2 + 4) = (-1 << v5) | result;
  }
  return result;
}

uint64_t PEREncodeConstrainedWholeNumberFunc(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  size_t v4 = result;
  unsigned int v5 = *a2;
  if ((*(unsigned char *)(result + 1056) & 0x40) != 0)
  {
    if (!v5) {
      return result;
    }
    if (v5 <= 0xFE)
    {
      unsigned __int8 v6 = 0;
      do
      {
        unsigned int v8 = v5;
        ++v6;
        v5 >>= 1;
      }
      while (v8 > 1);
      goto LABEL_9;
    }
    if (v5 == 255)
    {
      int v11 = *(unsigned __int8 *)(result + 1105);
      if (v11 == 7)
      {
        char v12 = *(unsigned char **)(result + 1096);
      }
      else
      {
        **(unsigned char **)(result + 1096) &= 510 << v11;
        char v12 = (unsigned char *)(*(void *)(result + 1096) + 1);
        *(void *)(result + 1096) = v12;
        *(unsigned char *)(result + 1105) = 7;
      }
      if (v12 == *(unsigned char **)(result + 1080))
      {
        uint64_t v15 = *(void *)(result + 1072);
        uint64_t v16 = *(void *)(result + 1088) - v15;
        uint64_t v17 = &v12[-v15];
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
        *(void *)(v4 + 1072) = result;
        char v12 = &v17[result];
        *(void *)(v4 + 1080) = &v17[result + 1];
        *(void *)(v4 + 1088) = result + v16;
        *(void *)(v4 + 1096) = &v17[result];
      }
      *char v12 = *a3;
LABEL_41:
      ++*(void *)(v4 + 1096);
      return result;
    }
    if (!HIWORD(v5))
    {
      int v13 = *(unsigned __int8 *)(result + 1105);
      if (v13 == 7)
      {
        uint64_t v14 = *(unsigned char **)(result + 1096);
      }
      else
      {
        **(unsigned char **)(result + 1096) &= 510 << v13;
        uint64_t v14 = (unsigned char *)(*(void *)(result + 1096) + 1);
        *(void *)(result + 1096) = v14;
        *(unsigned char *)(result + 1105) = 7;
      }
      uint64_t v28 = *(void *)(result + 1080);
      if (v28 - (uint64_t)v14 <= 1)
      {
        uint64_t v29 = 2 - (v28 - (void)v14);
        uint64_t v30 = *(void *)(result + 1072);
        uint64_t v31 = *(void *)(result + 1088) - v30;
        char v32 = &v14[-v30];
        uint64_t v33 = v28 - v30;
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, v29);
        *(void *)(v4 + 1072) = result;
        *(void *)(v4 + 1080) = result + v33 + v29;
        *(void *)(v4 + 1088) = result + v31;
        uint64_t v14 = &v32[result];
        *(void *)(v4 + 1096) = &v32[result];
      }
      *uint64_t v14 = BYTE1(*a3);
      uint64_t v34 = *(void *)(v4 + 1096);
      *(void *)(v4 + 1096) = v34 + 1;
      *(unsigned char *)(v34 + 1) = *a3;
      goto LABEL_41;
    }
    unsigned __int8 v18 = 0;
    unsigned int v19 = *a3;
    do
    {
      unsigned int v20 = v5;
      ++v18;
      v5 >>= 1;
    }
    while (v20 > 1);
    *a2 = v5;
    int v21 = v18 >> 3;
    if ((v18 & 7) != 0) {
      ++v21;
    }
    unsigned __int8 v22 = v21 - 1;
    if (v21 == 1)
    {
      unsigned __int8 v23 = 0;
      if (v19)
      {
LABEL_32:
        unsigned __int8 v25 = 0;
        do
        {
          ++v25;
          BOOL v26 = v19 > 1;
          v19 >>= 1;
        }
        while (v26);
        if ((v25 & 7) != 0) {
          int v27 = (v25 >> 3) + 1;
        }
        else {
          int v27 = v25 >> 3;
        }
        goto LABEL_45;
      }
    }
    else
    {
      unsigned __int8 v23 = 0;
      do
      {
        ++v23;
        unsigned int v24 = v22;
        v22 >>= 1;
      }
      while (v24 >= 2);
      if (v19) {
        goto LABEL_32;
      }
    }
    int v27 = 1;
LABEL_45:
    PERPutBits(result, v27 - 1, v23);
    int v35 = *(unsigned __int8 *)(v4 + 1105);
    if (v35 != 7)
    {
      *(unsigned char *)(*(void *)(v4 + 1096))++ &= 510 << v35;
      *(unsigned char *)(v4 + 1105) = 7;
    }
    unint64_t v9 = *a3;
    unsigned int v10 = 8 * (v27 & 0x1F);
    goto LABEL_11;
  }
  unsigned __int8 v6 = 0;
  if (v5)
  {
    do
    {
      unsigned int v7 = v5;
      ++v6;
      v5 >>= 1;
    }
    while (v7 > 1);
LABEL_9:
    *a2 = v5;
  }
  unint64_t v9 = *a3;
  unsigned int v10 = v6;
LABEL_11:

  return PERPutBits(v4, v9, v10);
}

size_t PEREncodeSemiConstrainedWholeNumberFunc(size_t a1, unsigned int *a2)
{
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v4;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  unsigned int v5 = *a2;
  if (*a2 >= 0x100)
  {
    if (v5 >= 0x10000)
    {
      if (HIBYTE(v5))
      {
        PERPutByte(a1, 4u);
        unsigned int v6 = *a2;
      }
      else
      {
        unsigned int v6 = v5 | 0x3000000;
      }
      unsigned int v7 = 32;
    }
    else
    {
      unsigned int v6 = v5 | 0x20000;
      unsigned int v7 = 24;
    }
  }
  else
  {
    unsigned int v6 = v5 | 0x100;
    unsigned int v7 = 16;
  }

  return PERPutBits(a1, v6, v7);
}

void PERDecodeConstrainedWholeNumberFunc(uint64_t a1, unsigned int *a2, int *a3)
{
  unsigned int v5 = *a2;
  if ((*(unsigned char *)(a1 + 1056) & 0x40) == 0)
  {
    unsigned __int8 v6 = 0;
    if (!v5)
    {
LABEL_10:
      unsigned int v9 = v6;
LABEL_11:
      *a3 = PERGetBits(a1, v9);
      return;
    }
    do
    {
      unsigned int v7 = v5;
      ++v6;
      v5 >>= 1;
    }
    while (v7 > 1);
LABEL_9:
    *a2 = v5;
    goto LABEL_10;
  }
  if (v5)
  {
    if (v5 <= 0xFE)
    {
      unsigned __int8 v6 = 0;
      do
      {
        unsigned int v8 = v5;
        ++v6;
        v5 >>= 1;
      }
      while (v8 > 1);
      goto LABEL_9;
    }
    if (v5 == 255)
    {
      int v10 = *(unsigned __int8 *)(a1 + 1105);
      if (v10 == 7)
      {
        int v11 = *(unsigned __int8 **)(a1 + 1096);
      }
      else
      {
        **(unsigned char **)(a1 + 1096) &= 510 << v10;
        int v11 = (unsigned __int8 *)(*(void *)(a1 + 1096) + 1);
        *(void *)(a1 + 1096) = v11;
        *(unsigned char *)(a1 + 1105) = 7;
      }
      if (v11 == *(unsigned __int8 **)(a1 + 1088))
      {
        PERAppendData(a1, 1uLL);
        int v11 = *(unsigned __int8 **)(a1 + 1096);
      }
      int v15 = *v11;
      uint64_t v14 = v11 + 1;
      *a3 = v15;
    }
    else
    {
      if (v5 >= 0x10000)
      {
        unsigned __int8 v16 = 0;
        do
        {
          unsigned int v17 = v5;
          ++v16;
          v5 >>= 1;
        }
        while (v17 > 1);
        *a2 = v5;
        int v18 = v16 >> 3;
        if ((v16 & 7) != 0) {
          ++v18;
        }
        unsigned __int8 v19 = v18 - 1;
        if (v18 == 1)
        {
          unsigned __int8 v20 = 0;
        }
        else
        {
          unsigned __int8 v20 = 0;
          do
          {
            ++v20;
            unsigned int v21 = v19;
            v19 >>= 1;
          }
          while (v21 > 1);
        }
        int v24 = PERGetBits(a1, v20);
        *a3 = v24;
        int v25 = *(unsigned __int8 *)(a1 + 1105);
        if (v25 != 7)
        {
          *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v25;
          *(unsigned char *)(a1 + 1105) = 7;
          int v24 = *a3;
        }
        unsigned int v9 = (8 * v24 + 8) & 0xF8;
        goto LABEL_11;
      }
      int v12 = *(unsigned __int8 *)(a1 + 1105);
      if (v12 == 7)
      {
        int v13 = *(unsigned __int8 **)(a1 + 1096);
      }
      else
      {
        **(unsigned char **)(a1 + 1096) &= 510 << v12;
        int v13 = (unsigned __int8 *)(*(void *)(a1 + 1096) + 1);
        *(void *)(a1 + 1096) = v13;
        *(unsigned char *)(a1 + 1105) = 7;
      }
      uint64_t v22 = *(void *)(a1 + 1088) - (void)v13;
      if (v22 <= 1)
      {
        PERAppendData(a1, 2 - v22);
        int v13 = *(unsigned __int8 **)(a1 + 1096);
      }
      int v23 = *v13;
      *a3 = v23 << 8;
      *(void *)(a1 + 1096) = v13 + 1;
      *a3 = v13[1] | (v23 << 8);
      uint64_t v14 = v13 + 2;
    }
    *(void *)(a1 + 1096) = v14;
  }
  else
  {
    *a3 = 0;
  }
}

unint64_t PERDecodeSemiConstrainedWholeNumberFunc(uint64_t a1, _DWORD *a2)
{
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v4;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  char v5 = PERGetByte(a1);
  if ((v5 - 5) <= 0xFBu) {
    EPErrorHandler(a1, 24);
  }
  unint64_t result = PERGetBits(a1, 8 * (v5 & 0x1Fu));
  *a2 = result;
  return result;
}

size_t PEREncodePrimBIT_STRING(size_t result, unint64_t a2, char **a3)
{
  size_t v4 = result;
  unsigned int v5 = a2 & 7;
  unsigned __int8 v6 = *a3;
  unsigned int v7 = *a3;
  if (a2 >= 8)
  {
    unint64_t v9 = a2 >> 3;
    unsigned int v10 = *(unsigned __int8 *)(result + 1105);
    int v11 = *(unsigned char **)(result + 1096);
    int v12 = &v11[a2 >> 3];
    if (v10 == 7)
    {
      unint64_t v13 = *(void *)(result + 1080);
      if ((unint64_t)v12 > v13)
      {
        uint64_t v14 = &v11[v9 - v13];
        uint64_t v15 = *(void *)(result + 1072);
        uint64_t v16 = *(void *)(result + 1088) - v15;
        unsigned int v17 = &v11[-v15];
        uint64_t v18 = v13 - v15;
        unint64_t result = (*(uint64_t (**)(size_t, unsigned char *))(result + 856))(result, v14);
        *(void *)(v4 + 1072) = result;
        *(void *)(v4 + 1080) = &v14[v18 + result];
        *(void *)(v4 + 1088) = result + v16;
        int v11 = &v17[result];
        *(void *)(v4 + 1096) = &v17[result];
      }
      uint64_t v19 = 0;
      if (v9 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = a2 >> 3;
      }
      do
      {
        *int v11 = 0;
        uint64_t v21 = 8;
        do
        {
          char v22 = *v7++;
          **(unsigned char **)(v4 + 1096) |= v22 << --v21;
        }
        while (v21);
        ++v19;
        int v11 = (unsigned char *)(*(void *)(v4 + 1096) + 1);
        *(void *)(v4 + 1096) = v11;
      }
      while (v19 != v20);
    }
    else
    {
      int v23 = v12 + 1;
      unint64_t v24 = *(void *)(result + 1080);
      if ((unint64_t)v23 > v24)
      {
        uint64_t v25 = (uint64_t)&v11[v9 - v24 + 1];
        uint64_t v26 = *(void *)(result + 1072);
        uint64_t v27 = *(void *)(result + 1088) - v26;
        uint64_t v42 = &v11[-v26];
        uint64_t v28 = v24 - v26;
        unint64_t result = (*(uint64_t (**)(size_t, uint64_t))(result + 856))(result, v25);
        *(void *)(v4 + 1072) = result;
        *(void *)(v4 + 1080) = result + v28 + v25;
        *(void *)(v4 + 1088) = result + v27;
        int v11 = &v42[result];
        *(void *)(v4 + 1096) = &v42[result];
        unsigned int v10 = *(unsigned __int8 *)(v4 + 1105);
      }
      int v29 = 0;
      uint64_t v30 = 1;
      do
      {
        int v31 = *v7++;
        v29 |= v31 << (v30-- + 6);
      }
      while (-(uint64_t)v10 != v30);
      unsigned int v7 = &v6[v10 + 1];
      *v11 |= v29 >> (7 - v10);
      char v32 = (unsigned char *)(*(void *)(v4 + 1096) + 1);
      *(void *)(v4 + 1096) = v32;
      if (v9 != 1)
      {
        uint64_t v33 = 0;
        do
        {
          *char v32 = 0;
          uint64_t v34 = 8;
          do
          {
            char v35 = *v7++;
            **(unsigned char **)(v4 + 1096) |= v35 << --v34;
          }
          while (v34);
          ++v33;
          char v32 = (unsigned char *)(*(void *)(v4 + 1096) + 1);
          *(void *)(v4 + 1096) = v32;
        }
        while (v33 != v9 - 1);
      }
      *char v32 = 0;
      if (*(unsigned char *)(v4 + 1105) != 7)
      {
        unint64_t v36 = 0;
        int v37 = 7;
        do
          **(unsigned char **)(v4 + 1096) |= v7[v36++] << v37--;
        while (v36 < 7 - (unint64_t)*(unsigned __int8 *)(v4 + 1105));
        v7 += v36;
      }
    }
    unint64_t v38 = (unint64_t)&a3[1][-a2];
    *a3 += a2;
    a3[1] = (char *)v38;
  }
  if (v5)
  {
    if ((a2 & 7) != 0)
    {
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      do
      {
        int v41 = *v7++;
        v40 |= (v41 << (v39-- + 7));
      }
      while (-(uint64_t)(a2 & 7) != v39);
    }
    else
    {
      unint64_t v40 = 0;
    }
    return PERPutBits(v4, v40 >> (8 - v5), v5);
  }
  return result;
}

uint64_t PERDecodePrimBIT_STRING(uint64_t result, size_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned __int8 *)(result + 1104);
    if (v6 == 7) {
      unint64_t v7 = *(unsigned __int8 *)(result + 1105) + 8 * (*(void *)(result + 1088) - *(void *)(result + 1096)) - 7;
    }
    else {
      unint64_t v7 = *(unsigned __int8 *)(result + 1105) - v6 + 8 * (~*(void *)(result + 1096) + *(void *)(result + 1088));
    }
    BOOL v8 = a2 >= v7;
    size_t v9 = a2 - v7;
    if (v9 != 0 && v8)
    {
      if ((v9 & 7) != 0) {
        unint64_t v10 = (v9 >> 3) + 1;
      }
      else {
        unint64_t v10 = v9 >> 3;
      }
      PERAppendData(result, v10);
    }
    int v11 = *(void **)a3;
    if (*(void *)a3)
    {
      int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, *(void *)(a3 + 8) + a2);
      *(void *)a3 = v12;
      memcpy_s("posp_memcpy", 29, v12, *(_DWORD *)(a3 + 8), v11, *(unsigned int *)(a3 + 8));
      free(v11);
      unint64_t result = *(void *)a3;
      uint64_t v13 = *(void *)(a3 + 8);
      uint64_t v14 = (unsigned char *)(*(void *)a3 + v13);
      size_t v15 = v13 + a2;
    }
    else
    {
      unint64_t result = (uint64_t)gnssOsa_Calloc("posp_alloc", 18, 1, a2);
      *(void *)a3 = result;
      size_t v15 = a2;
      uint64_t v14 = (unsigned char *)result;
    }
    *(void *)(a3 + 8) = v15;
    *(void *)(v5 + 1112) = result;
    if (a2 >= 8)
    {
      unint64_t v16 = a2 >> 3;
      int v17 = *(unsigned __int8 *)(v5 + 1105);
      if (v17 == 7)
      {
        do
        {
          uint64_t v18 = 8;
          do
            *v14++ = (**(unsigned __int8 **)(v5 + 1096) >> --v18) & 1;
          while (v18);
          ++*(void *)(v5 + 1096);
          --v16;
        }
        while (v16);
      }
      else
      {
        unint64_t v19 = 0;
        int v20 = 7;
        unsigned int v21 = (**(unsigned __int8 **)(v5 + 1096) << (7 - v17));
        do
        {
          v14[v19] = (v21 >> v20) & 1;
          unint64_t v22 = v19 + 1;
          unint64_t v23 = *(unsigned __int8 *)(v5 + 1105);
          --v20;
          BOOL v8 = v19++ >= v23;
        }
        while (!v8);
        ++*(void *)(v5 + 1096);
        v14 += v22;
        if (a2 >= 0x10)
        {
          do
          {
            uint64_t v24 = 8;
            do
              *v14++ = (**(unsigned __int8 **)(v5 + 1096) >> --v24) & 1;
            while (v24);
            --v16;
            ++*(void *)(v5 + 1096);
          }
          while (v16 > 1);
          LODWORD(v23) = *(unsigned __int8 *)(v5 + 1105);
        }
        if (v23 != 7)
        {
          unint64_t v25 = 0;
          int v26 = 7;
          do
            v14[v25++] = (**(unsigned __int8 **)(v5 + 1096) >> v26--) & 1;
          while (v25 < 7 - (unint64_t)*(unsigned __int8 *)(v5 + 1105));
          v14 += v25;
        }
      }
    }
    if ((a2 & 7) != 0)
    {
      unint64_t result = PERGetBits(v5, a2 & 7);
      size_t v27 = a2 & 7;
      uint64_t v28 = 0;
      unsigned int v29 = (result << (8 - (a2 & 7))) & 0xFE;
      char v30 = v27 + 1;
      uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(v27 - 1);
      char v32 = v14 + 1;
      uint64_t v33 = -(uint64_t)(v30 & 0xE);
      int64x2_t v34 = (int64x2_t)xmmword_22BB0CC20;
      int64x2_t v35 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v36 = vmovn_s64((int64x2_t)vcgeq_u64(v31, (uint64x2_t)v34));
        if (v36.i8[0]) {
          *(v32 - 1) = (v29 >> (v28 + 7)) & 1;
        }
        if (v36.i8[4]) {
          *char v32 = (v29 >> (v28 + 6)) & 1;
        }
        int64x2_t v34 = vaddq_s64(v34, v35);
        v32 += 2;
        v28 -= 2;
      }
      while (v33 != v28);
    }
  }
  return result;
}

uint64_t PEREncodePrimOCTET_STRING(uint64_t a1, size_t a2, uint64_t a3)
{
  uint64_t result = PERPutSeg(a1, *(unsigned __int8 **)a3, a2);
  size_t v6 = *(void *)(a3 + 8) - a2;
  *(void *)a3 += a2;
  *(void *)(a3 + 8) = v6;
  return result;
}

void PERDecodePrimOCTET_STRING(uint64_t a1, size_t a2, uint64_t a3)
{
  size_t v3 = a2;
  if (a2 - 1 > 0x1FFE)
  {
    if (a2 > 0x2000)
    {
      EPErrorHandler(a1, 28);
    }
  }
  else
  {
    if (*(void *)a3)
    {
      size_t v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, *(void *)(a3 + 8) + a2);
      memcpy_s("posp_memcpy", 29, v6, *(_DWORD *)(a3 + 8) + v3, *(const void **)a3, *(unsigned int *)(a3 + 8));
      if (*(void *)a3) {
        free(*(void **)a3);
      }
      uint64_t v7 = *(void *)(a3 + 8);
      BOOL v8 = &v6[v7];
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v7 + v3;
    }
    else
    {
      size_t v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, a2);
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v3;
      BOOL v8 = v6;
    }
    *(void *)(a1 + 1112) = v6;
    size_t v9 = *(const void **)(a1 + 1096);
    unint64_t v10 = *(void *)(a1 + 1088) - (void)v9;
    if (*(unsigned char *)(a1 + 1105) == 7)
    {
      if (v3 > v10)
      {
        PERAppendData(a1, v3 - v10);
        size_t v9 = *(const void **)(a1 + 1096);
      }
      memcpy_s("posp_memcpy", 29, v8, v3, v9, v3);
      *(void *)(a1 + 1096) += v3;
    }
    else
    {
      BOOL v11 = v3 >= v10;
      size_t v12 = v3 - v10;
      if (v11) {
        PERAppendData(a1, v12 + 1);
      }
      do
      {
        *BOOL v8 = **(unsigned __int8 **)(a1 + 1096) << (7 - *(unsigned char *)(a1 + 1105));
        uint64_t v13 = (unsigned __int8 *)(*(void *)(a1 + 1096) + 1);
        *(void *)(a1 + 1096) = v13;
        *v8++ |= *v13 >> (*(unsigned char *)(a1 + 1105) + 1);
        --v3;
      }
      while (v3);
    }
  }
}

_DWORD *PERDecodeOBJECT_IDENTIFIERComps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = PERGetByte(a1);
  if ((v6 & 0x80) != 0) {
    EPErrorHandler(a1, 28);
  }
  uint64_t v7 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
  _OWORD v7[2] = v6 / 0x28u;
  *(void *)uint64_t v7 = 0;
  if (*(void *)a3)
  {
    **(void **)(a3 + 8) = v7;
    ++*(_DWORD *)(a3 + 16);
  }
  else
  {
    *(void *)a3 = v7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  uint64_t v8 = a2 - 1;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 20) = 8;
  uint64_t result = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
  result[2] = v6 % 0x28u;
  *(void *)uint64_t result = 0;
  if (*(void *)a3)
  {
    **(void **)(a3 + 8) = result;
    ++*(_DWORD *)(a3 + 16);
  }
  else
  {
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 16) = 1;
  }
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 20) = 8;
  if (a2 != 1)
  {
    do
    {
      char v10 = PERGetByte(a1);
      int v11 = v10 & 0x7F;
      if (v10 < 0)
      {
        unint64_t v13 = 1;
        do
        {
          char v14 = PERGetByte(a1);
          int v11 = v14 & 0x7F | (v11 << 7);
          uint64_t v12 = v13 + 1;
          if ((v14 & 0x80) == 0) {
            break;
          }
        }
        while (v13++ < 5);
      }
      else
      {
        uint64_t v12 = 1;
      }
      uint64_t result = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      result[2] = v11;
      *(void *)uint64_t result = 0;
      if (*(void *)a3)
      {
        **(void **)(a3 + 8) = result;
        int v16 = *(_DWORD *)(a3 + 16) + 1;
      }
      else
      {
        *(void *)a3 = result;
        int v16 = 1;
      }
      *(_DWORD *)(a3 + 16) = v16;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 20) = 8;
      v8 -= v12;
    }
    while (v8);
  }
  return result;
}

size_t PEREncodePrimCHARACTER_STRING(size_t result, uint64_t a2, char **a3)
{
  uint64_t v4 = a2;
  size_t v5 = result;
  if (*((unsigned char *)a3 + 25) == 1)
  {
    if (a2)
    {
      unsigned __int8 v6 = *a3;
      do
      {
        uint64_t v7 = a3[4];
        int v8 = *v6;
        if (*v7 == v8)
        {
          unint64_t v9 = 0;
        }
        else
        {
          char v10 = 0;
          int v11 = (unsigned __int8 *)(v7 + 1);
          while (a3[5] != v10)
          {
            unint64_t v9 = (unint64_t)(v10 + 1);
            int v12 = (v10++)[(void)v11];
            if (v12 == v8) {
              goto LABEL_11;
            }
          }
          unint64_t v9 = (unint64_t)a3[5];
        }
LABEL_11:
        uint64_t result = PERPutBits(v5, v9, *((unsigned __int8 *)a3 + 24));
        unsigned __int8 v6 = *a3 + 1;
        *a3 = v6;
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    unint64_t v13 = *a3;
    do
    {
      uint64_t result = PERPutBits(v5, *v13, *((unsigned __int8 *)a3 + 24));
      unint64_t v13 = *a3 + 1;
      *a3 = v13;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t PERDecodePrimCHARACTER_STRING(unint64_t result, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    if (*a3)
    {
      unsigned __int8 v6 = (void *)(*a3 - 1);
      uint64_t v7 = gnssOsa_Calloc("posp_alloc", 18, 1, a2 + a3[1] + 2);
      *a3 = (uint64_t)v7;
      memcpy_s("posp_memcpy", 29, v7, *((_DWORD *)a3 + 2) + v4 + 2, v6, *((unsigned int *)a3 + 2));
      free(v6);
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      uint64_t v10 = *a3 + 1;
      int v11 = (unsigned char *)(v10 + v9);
      *a3 = v10;
      a3[1] = v9 + v4;
    }
    else
    {
      int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, a2 + 2);
      *a3 = (uint64_t)v12;
      *int v12 = 86;
      uint64_t v8 = *a3;
      int v11 = (unsigned char *)(*a3 + 1);
      *a3 = (uint64_t)v11;
      a3[1] = v4;
    }
    *(void *)(v5 + 1112) = v8;
    do
    {
      uint64_t result = PERGetBits(v5, *((unsigned __int8 *)a3 + 24));
      *v11++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

size_t PEREncodeNormallySmallNonNegativeWholeNumber(size_t a1, unint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 > 0x3E)
  {
    PERPutBit(a1, 1);
    unsigned int v5 = v2;
    return PEREncodeSemiConstrainedWholeNumberFunc(a1, &v5);
  }
  else
  {
    return PERPutBits(a1, a2, 7u);
  }
}

unint64_t PERDecodeNormallySmallNonNegativeWholeNumber(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (PERGetBit(a1))
  {
    unsigned int v6 = 0;
    unint64_t result = PERDecodeSemiConstrainedWholeNumberFunc(a1, &v6);
    uint64_t v5 = v6;
  }
  else
  {
    unint64_t result = PERGetBits(a1, 6u);
    uint64_t v5 = result;
  }
  *a2 = v5;
  return result;
}

size_t PERSkipPrimBitField(size_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = a3;
  *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
  *(void *)(a2 + 16) = a3 + 1;
  PERSkipBytes(a1, a3 >> 3);

  return PERPutBits(a1, 0, v3 & 7);
}

size_t PERSkipConsBitField(size_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v6 = *(unsigned __int8 *)(a1 + 1105);
    if (v6 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v6;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  *(void *)(a2 + 16) = 0;
  if (a3 >= 0x10000)
  {
    do
    {
      PERPutByte(a1, 0xC4u);
      if (!*(void *)(a2 + 16))
      {
        *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
        *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
        *(void *)(a2 + 16) = 0x10000;
      }
      PERSkipBytes(a1, 0x2000);
      v3 -= 0x10000;
    }
    while (v3 >> 16);
  }
  unint64_t v7 = v3 - 49152;
  if (v3 > 0xC000)
  {
    PERPutByte(a1, 0xC3u);
    if (!*(void *)(a2 + 16))
    {
      *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
      *(void *)(a2 + 16) = 49152;
    }
    uint64_t v8 = a1;
    uint64_t v9 = 6144;
LABEL_20:
    PERSkipBytes(v8, v9);
    unint64_t v3 = v7;
    goto LABEL_21;
  }
  if (v3 >= 0x8000)
  {
    PERPutByte(a1, 0xC2u);
    if (!*(void *)(a2 + 16))
    {
      *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
      *(void *)(a2 + 16) = 0x8000;
    }
    PERSkipBytes(a1, 4096);
    v3 -= 0x8000;
  }
  unint64_t v7 = v3 - 0x4000;
  if (v3 >= 0x4000)
  {
    PERPutByte(a1, 0xC1u);
    if (!*(void *)(a2 + 16))
    {
      *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
      *(void *)(a2 + 16) = 0x4000;
    }
    uint64_t v8 = a1;
    uint64_t v9 = 2048;
    goto LABEL_20;
  }
LABEL_21:
  if (v3 > 0x7F) {
    PERPutBits(a1, v3 | 0x8000, 0x10u);
  }
  else {
    PERPutByte(a1, v3);
  }
  if (!*(void *)(a2 + 16))
  {
    *(void *)a2 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
    *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
    *(void *)(a2 + 16) = v3;
  }
  PERSkipBytes(a1, v3 >> 3);

  return PERPutBits(a1, 0, v3 & 7);
}

void PEREncodeStructRootWithOptDef(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a3[7];
  if (v8)
  {
    uint64_t v9 = a3[3];
    do
    {
      switch(*(unsigned char *)(v9 + 16))
      {
        case 0:
          goto LABEL_5;
        case 1:
          PERSetBitToBitField(a1, a2, 1);
LABEL_5:
          uint64_t v10 = *(unsigned int *)(*(void *)(a3[1] + 24) + 24 * *(void *)(v9 + 24) + 8);
          unint64_t v11 = *(void *)(a1 + 712);
          if (v11 >= 0x40) {
            goto LABEL_6;
          }
          goto LABEL_7;
        case 2:
          uint64_t v12 = *(void *)(a3[1] + 24);
          uint64_t v13 = *(void *)(v9 + 24);
          if (*(unsigned char *)(a4 + **(unsigned int **)(v12 + 24 * v13 + 16)) != 1) {
            goto LABEL_14;
          }
          uint64_t v10 = *(unsigned int *)(v12 + 24 * v13 + 8);
          PERSetBitToBitField(a1, a2, 1);
          unint64_t v11 = *(void *)(a1 + 712);
          if (v11 >= 0x40) {
            goto LABEL_6;
          }
          goto LABEL_7;
        case 3:
          uint64_t v14 = *(void *)(a3[1] + 24);
          uint64_t v15 = *(void *)(v9 + 24);
          if (*(unsigned char *)(a4 + **(unsigned int **)(v14 + 24 * v15 + 16)) != 1) {
            goto LABEL_14;
          }
          uint64_t v10 = *(unsigned int *)(v14 + 24 * v15 + 8);
          PERSetBitToBitField(a1, a2, 1);
          unint64_t v11 = *(void *)(a1 + 712);
          if (v11 >= 0x40)
          {
LABEL_6:
            CUCFErrorHandler(a1, 15);
            unint64_t v11 = *(void *)(a1 + 712);
          }
LABEL_7:
          *(void *)(a1 + 200 + 8 * v11) = v9;
          *(void *)(a1 + 712) = v11 + 1;
          PEREncVal(a1, *(void *)v9, a4 + v10);
          --*(void *)(a1 + 712);
          break;
        case 5:
LABEL_14:
          PERSetBitToBitField(a1, a2, 0);
          break;
        default:
          break;
      }
      v9 += 32;
      --v8;
    }
    while (v8);
  }
  uint64_t v16 = a3[9];
  if (v16)
  {
    uint64_t v17 = a3[5];
    do
    {
      switch(*(unsigned char *)(v17 + 16))
      {
        case 0:
          goto LABEL_20;
        case 1:
          PERSetBitToBitField(a1, a2, 1);
LABEL_20:
          uint64_t v18 = *(unsigned int *)(*(void *)(a3[1] + 24) + 24 * *(void *)(v17 + 24) + 8);
          unint64_t v19 = *(void *)(a1 + 712);
          if (v19 >= 0x40) {
            goto LABEL_21;
          }
          goto LABEL_22;
        case 2:
          uint64_t v20 = *(void *)(a3[1] + 24);
          uint64_t v21 = *(void *)(v17 + 24);
          if (*(unsigned char *)(a4 + **(unsigned int **)(v20 + 24 * v21 + 16)) != 1) {
            goto LABEL_29;
          }
          uint64_t v18 = *(unsigned int *)(v20 + 24 * v21 + 8);
          PERSetBitToBitField(a1, a2, 1);
          unint64_t v19 = *(void *)(a1 + 712);
          if (v19 >= 0x40) {
            goto LABEL_21;
          }
          goto LABEL_22;
        case 3:
          uint64_t v22 = *(void *)(a3[1] + 24);
          uint64_t v23 = *(void *)(v17 + 24);
          if (*(unsigned char *)(a4 + **(unsigned int **)(v22 + 24 * v23 + 16)) != 1) {
            goto LABEL_29;
          }
          uint64_t v18 = *(unsigned int *)(v22 + 24 * v23 + 8);
          PERSetBitToBitField(a1, a2, 1);
          unint64_t v19 = *(void *)(a1 + 712);
          if (v19 >= 0x40)
          {
LABEL_21:
            CUCFErrorHandler(a1, 15);
            unint64_t v19 = *(void *)(a1 + 712);
          }
LABEL_22:
          *(void *)(a1 + 200 + 8 * v19) = v17;
          *(void *)(a1 + 712) = v19 + 1;
          PEREncVal(a1, *(void *)v17, a4 + v18);
          --*(void *)(a1 + 712);
          break;
        case 5:
LABEL_29:
          PERSetBitToBitField(a1, a2, 0);
          break;
        default:
          break;
      }
      v17 += 32;
      --v16;
    }
    while (v16);
  }
}

uint64_t PEREncodeStructRoot(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = a2[7];
  if (v6)
  {
    unint64_t v7 = (uint64_t *)a2[3];
    unint64_t v8 = *(void *)(result + 712);
    do
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(a2[1] + 24) + 24 * v7[3] + 8);
      if (v8 >= 0x40)
      {
        CUCFErrorHandler(v5, 15);
        unint64_t v8 = *(void *)(v5 + 712);
      }
      *(void *)(v5 + 200 + 8 * v8) = v7;
      *(void *)(v5 + 712) = v8 + 1;
      uint64_t v10 = *v7;
      v7 += 4;
      unint64_t result = PEREncVal(v5, v10, a3 + v9);
      unint64_t v8 = *(void *)(v5 + 712) - 1;
      *(void *)(v5 + 712) = v8;
      --v6;
    }
    while (v6);
  }
  uint64_t v11 = a2[9];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[5];
    unint64_t v13 = *(void *)(v5 + 712);
    do
    {
      uint64_t v14 = *(unsigned int *)(*(void *)(a2[1] + 24) + 24 * v12[3] + 8);
      if (v13 >= 0x40)
      {
        CUCFErrorHandler(v5, 15);
        unint64_t v13 = *(void *)(v5 + 712);
      }
      *(void *)(v5 + 200 + 8 * v13) = v12;
      *(void *)(v5 + 712) = v13 + 1;
      uint64_t v15 = *v12;
      v12 += 4;
      unint64_t result = PEREncVal(v5, v15, a3 + v14);
      unint64_t v13 = *(void *)(v5 + 712) - 1;
      *(void *)(v5 + 712) = v13;
      --v11;
    }
    while (v11);
  }
  return result;
}

void PERSetBitToBitField(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(*(void *)(a1 + 1088) + *(void *)a2) |= a3 << *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 16);
    *(unsigned char *)(a2 + 8) = v3 - 1;
    *(void *)(a2 + 16) = --v5;
    if (v5) {
      return;
    }
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)a2;
    if ((v3 - 1) != 7)
    {
      int v8 = 0;
      uint64_t v9 = *(void *)(a1 + 1088);
      int v10 = *(unsigned __int8 *)(v9 + v7) << (8 - v3);
      uint64_t v11 = v7 + 1;
      *(void *)a2 = v11;
      int v12 = (*(unsigned __int8 *)(v9 + v11) >> v3) | v10;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a2 + 1;
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = 7;
    uint64_t v4 = (uint64_t *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 16) - 1;
    *(void *)(a2 + 16) = v13;
    if (v13) {
      return;
    }
  }
  uint64_t v9 = *(void *)(a1 + 1088);
  LOBYTE(v12) = *(unsigned char *)(v9 + v7);
  uint64_t v11 = v7 + 1;
  *(void *)a2 = v11;
  LOBYTE(v6) = 7;
  int v8 = 1;
LABEL_7:
  switch((char)v12)
  {
    case -63:
      uint64_t v14 = 0x4000;
      goto LABEL_19;
    case -62:
      uint64_t v14 = 0x8000;
      goto LABEL_19;
    case -61:
      uint64_t v14 = 49152;
      goto LABEL_19;
    case -60:
      uint64_t v14 = 0x10000;
      goto LABEL_19;
    default:
      if ((v12 & 0xC0) == 0x80)
      {
        uint64_t v15 = (v12 & 0x7F) << 8;
        *uint64_t v4 = v15;
        int v16 = *(unsigned __int8 *)(v9 + v11);
        if (v8)
        {
          *(void *)a2 = v11 + 1;
        }
        else
        {
          uint64_t v17 = v11 + 1;
          *(void *)a2 = v17;
          int v16 = (*(unsigned __int8 *)(v9 + v17) >> (v6 + 1)) | (v16 << (7 - v6));
        }
        uint64_t v14 = v16 | (unint64_t)v15;
        goto LABEL_19;
      }
      if ((v12 & 0x80) == 0)
      {
        uint64_t v14 = v12 & 0x7F;
LABEL_19:
        *uint64_t v4 = v14;
        return;
      }
      EPErrorHandler(a1, 26);
      break;
  }
}

void *PEREncodeOPENTypeField(size_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a1 + 1105);
  unsigned int v7 = v6;
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    unsigned int v7 = 7;
    if (v6 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v6;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  uint64_t v8 = *(void *)(a1 + 1096) - *(void *)(a1 + 1088);
  PERSkipBytes(a1, 1);
  PEREncVal(a1, a2, a3);
  uint64_t v9 = *(void *)(a1 + 1096);
  uint64_t v10 = v9 - *(void *)(a1 + 1088);
  unsigned int v11 = *(unsigned __int8 *)(a1 + 1105);
  BOOL v12 = v11 >= v7;
  unsigned __int8 v13 = v11 - v7;
  if (v12)
  {
    unint64_t v15 = v10 + ~v8;
    if (!v15) {
      goto LABEL_12;
    }
    unint64_t result = (void *)PERPutBits(a1, 0, v13);
  }
  else
  {
    unint64_t result = (void *)PERPutBits(a1, 0, (v13 + 8));
    unint64_t v15 = v10 - v8;
    if (!v15)
    {
      uint64_t v9 = *(void *)(a1 + 1096);
LABEL_12:
      *(void *)(a1 + 1096) = v9 - 1;
      return (void *)PERPutBits(a1, 0x100uLL, 0x10u);
    }
  }
  if (v15 > 0x7F)
  {
    if (*(unsigned char *)(a1 + 1105) == 7)
    {
      return PEROctetsFragmentation(a1, v15);
    }
    else
    {
      return PEROctetsFragmentationWithOffset(a1, v15);
    }
  }
  else
  {
    int v16 = (unsigned char *)(*(void *)(a1 + 1088) + v8);
    uint64_t v17 = *(unsigned __int8 *)(a1 + 1105);
    if (v17 == 7)
    {
      *int v16 = v15;
    }
    else
    {
      *v16 |= v15 >> (7 - v17);
      v16[1] |= v15 << (*(unsigned char *)(a1 + 1105) + 1);
    }
  }
  return result;
}

void PERGetConsBitField(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v4;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  unint64_t v5 = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    char v6 = PERGetByte(a1);
    if ((v6 + 63) >= 4u)
    {
      char v7 = v6;
      if ((v6 & 0xC0) == 0x80)
      {
        int v8 = PERGetByte(a1);
        unint64_t v5 = v8 & 0xFFFF80FF | ((v7 & 0x7F) << 8);
        if (!*(void *)(a2 + 16))
        {
          *(void *)a2 = *(void *)(a1 + 1096);
          *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a1 + 1105);
          *(void *)(a2 + 16) = v5;
        }
        PERGetBits(a1, v8 & 7);
      }
      else if (v6 < 0)
      {
        EPErrorHandler(a1, 26);
      }
      else
      {
        unint64_t v9 = v6 & 0x7F;
        if (!*(void *)(a2 + 16))
        {
          *(void *)a2 = *(void *)(a1 + 1096);
          *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a1 + 1105);
          *(void *)(a2 + 16) = v9;
        }
        PERGetBits(a1, v6 & 7);
        unint64_t v5 = v9 >> 3;
      }
    }
    else
    {
      unint64_t v5 = ((unint64_t)(v6 + 63) << 11) + 2048;
    }
    if (!*(void *)(a2 + 16))
    {
      *(void *)a2 = *(void *)(a1 + 1096);
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 1105);
      *(unsigned char *)(a2 + 9) = 1;
      *(void *)(a2 + 16) = 8 * v5;
    }
    PERGetSkipBytes(a1, v5);
  }
  while (v5 > 0x7FF);
}

size_t PERInitAbsentStructExtAdd(size_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = result;
  int v8 = (void *)(a2[4] - 32 * a3 + 32 * a2[8] + 24);
  do
  {
    unsigned int v9 = *((unsigned __int8 *)v8 - 8);
    if (v9 < 3)
    {
      *(unsigned char *)(a4 + **(unsigned int **)(*(void *)(a2[1] + 24) + 24 * *v8 + 16)) = 0;
    }
    else if (v9 - 4 >= 2)
    {
      if (v9 == 3)
      {
        uint64_t v10 = a2[1];
        *(unsigned char *)(a4 + **(unsigned int **)(*(void *)(v10 + 24) + 24 * *v8 + 16)) = 0;
        uint64_t v11 = *(void *)(v10 + 24) + 24 * *v8;
        unint64_t result = GenericAssignSort((int *)(a4 + *(unsigned int *)(v11 + 8)), *(int **)(*(void *)(v11 + 16) + 8), 10, *(void *)v11);
      }
      else
      {
        unint64_t result = CUCFErrorHandler(v7, 15);
      }
    }
    v8 += 4;
    --v5;
  }
  while (v5);
  return result;
}

unsigned __int8 **PERSetBitFieldLength(unsigned __int8 **result)
{
  int v1 = *((unsigned __int8 *)result + 8);
  if (v1 == 7)
  {
    unsigned int v2 = *result + 1;
    LOBYTE(v3) = **result;
    *unint64_t result = v2;
  }
  else
  {
    int v4 = **result << (7 - v1);
    unsigned int v2 = *result + 1;
    *unint64_t result = v2;
    int v3 = (*v2 >> (v1 + 1)) | v4;
  }
  switch((char)v3)
  {
    case -63:
      uint64_t v5 = 0x4000;
      goto LABEL_12;
    case -62:
      uint64_t v5 = 0x8000;
      goto LABEL_12;
    case -61:
      uint64_t v5 = 49152;
      goto LABEL_12;
    case -60:
      uint64_t v5 = 0x10000;
LABEL_12:
      result[2] = (unsigned __int8 *)v5;
      break;
    default:
      if ((v3 & 0xC0) == 0x80)
      {
        unint64_t v6 = (v3 & 0x7F) << 8;
        result[2] = (unsigned __int8 *)v6;
        if (v1 == 7)
        {
          LOBYTE(v7) = *v2;
          *unint64_t result = v2 + 1;
        }
        else
        {
          int v9 = *v2 << (7 - v1);
          *unint64_t result = v2 + 1;
          int v7 = (v2[1] >> (v1 + 1)) | v9;
        }
        int v8 = (unsigned __int8 *)(v7 | v6);
      }
      else
      {
        int v8 = (unsigned __int8 *)(v3 & 0x7F);
      }
      result[2] = v8;
      *((unsigned char *)result + 9) = 0;
      break;
  }
  return result;
}

void PERDecodeOPENTypeField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
  {
    int v8 = *(unsigned __int8 *)(a1 + 1105);
    if (v8 != 7)
    {
      *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v8;
      *(unsigned char *)(a1 + 1105) = 7;
    }
  }
  unsigned int v9 = PERGetByte(a1);
  if (v9 >= 0xC1)
  {
    --*(void *)(a1 + 1096);
    unsigned int v10 = *(unsigned __int8 *)(a1 + 1105);
    if (v10 == 7)
    {
      unint64_t v11 = PEROctetsDefragmentation(a1);
      PERDecVal(a1, a2, a3, a4);
      if (*(unsigned __int8 *)(a1 + 1105) <= 6u)
      {
        ++*(void *)(a1 + 1096);
        *(unsigned char *)(a1 + 1105) = 7;
      }
      PEROctetsFragmentation(a1, v11);
    }
    else
    {
      unint64_t v13 = PEROctetsDefragmentationWithOffset(a1);
      PERDecVal(a1, a2, a3, a4);
      if (*(unsigned __int8 *)(a1 + 1105) < v10) {
        ++*(void *)(a1 + 1096);
      }
      *(unsigned char *)(a1 + 1105) = v10;
      PEROctetsFragmentationWithOffset(a1, v13);
    }
    return;
  }
  if ((v9 & 0xC0) == 0x80)
  {
    uint64_t v12 = *(void *)(a1 + 1096) + (PERGetByte(a1) & 0xFFFF80FF | ((v9 & 0x7F) << 8));
LABEL_20:
    char v14 = *(unsigned char *)(a1 + 1105);
    PERDecVal(a1, a2, a3, a4);
    *(void *)(a1 + 1096) = v12;
    *(unsigned char *)(a1 + 1105) = v14;
    return;
  }
  if ((v9 & 0x80) == 0)
  {
    uint64_t v12 = *(void *)(a1 + 1096) + (v9 & 0x7F);
    goto LABEL_20;
  }

  EPErrorHandler(a1, 26);
}

void PERSkipOPENTypeField(uint64_t a1)
{
  unint64_t v2 = 0;
  while (1)
  {
    if ((*(unsigned char *)(a1 + 1056) & 0x40) != 0)
    {
      int v3 = *(unsigned __int8 *)(a1 + 1105);
      if (v3 != 7)
      {
        *(unsigned char *)(*(void *)(a1 + 1096))++ &= 510 << v3;
        *(unsigned char *)(a1 + 1105) = 7;
      }
    }
    char v4 = PERGetByte(a1);
    if ((v4 + 63) >= 4u) {
      break;
    }
    unint64_t v2 = ((unint64_t)(v4 + 63) << 14) + 0x4000;
LABEL_11:
    PERGetSkipBytes(a1, v2);
    if (!(v2 >> 14)) {
      return;
    }
  }
  if ((v4 & 0xC0) == 0x80)
  {
    unint64_t v2 = PERGetByte(a1) & 0xFFFF80FF | ((v4 & 0x7F) << 8);
    goto LABEL_11;
  }
  if (v4 < 0)
  {
    EPErrorHandler(a1, 26);
    goto LABEL_11;
  }

  PERGetSkipBytes(a1, v4 & 0x7F);
}

uint64_t PEREncodePrimSEQUENCE_OF(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 24);
  unint64_t v6 = v5 + a2;
  if (v5 < v5 + a2)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = *(void *)(v8 + 8);
      if (*(_DWORD *)v9 == 181)
      {
        unint64_t v11 = **(void ***)a3;
        if (v11)
        {
          unint64_t v12 = v5 + 1;
          while (--v12)
          {
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_10;
            }
          }
          unsigned int v10 = (char *)v11 + *(unsigned int *)(v9 + 36);
        }
        else
        {
LABEL_10:
          unsigned int v10 = 0;
        }
      }
      else if (*(_DWORD *)v9 == 182)
      {
        unsigned int v10 = (char *)(*(void *)a3 + *(unsigned int *)(v9 + 36) + v5 * *(unsigned int *)(*(void *)(v9 + 24) + 8));
      }
      else
      {
        CUCFErrorHandler(v7, 15);
        unsigned int v10 = 0;
        uint64_t v8 = *(void *)(a3 + 32);
      }
      unint64_t result = PEREncVal(v7, *(void *)(v8 + 24), v10);
      unint64_t v5 = *(void *)(a3 + 24) + 1;
      *(void *)(a3 + 24) = v5;
    }
    while (v5 < v6);
  }
  *(void *)(a3 + 8) -= a2;
  return result;
}

void PERDecodePrimSEQUENCE_OF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a3 + 24);
  unint64_t v6 = v5 + a2;
  uint64_t v7 = *(void ***)(a3 + 40);
  if (v7)
  {
    uint64_t v27 = 0;
    int v26 = *v7;
    if (v5 < v6)
    {
      do
      {
        uint64_t v8 = *(void *)(*(void *)(a3 + 32) + 8);
        if (*(_DWORD *)v8 == 181)
        {
          unint64_t v11 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(v8 + 32));
          *unint64_t v11 = 0;
          rsize_t v12 = *(unsigned int *)(*(void *)(v8 + 24) + 8);
          memset_s((char *)v11 + *(unsigned int *)(v8 + 36), v12, 0, v12);
          unint64_t v13 = *(void **)a3;
          if (**(void **)a3)
          {
            *(void *)v13[1] = v11;
            ++*((_DWORD *)v13 + 4);
          }
          else
          {
            *unint64_t v13 = v11;
            *((_DWORD *)v13 + 4) = 1;
          }
          v13[1] = v11;
          unsigned int v10 = (char *)v11 + *(unsigned int *)(v8 + 36);
          *((unsigned char *)v13 + 20) = 8;
        }
        else if (*(_DWORD *)v8 == 182)
        {
          uint64_t v9 = *(_DWORD **)a3;
          *uint64_t v9 = **(_DWORD **)a3 + 1;
          unsigned int v10 = (char *)v9 + *(unsigned int *)(v8 + 36) + v5 * *(unsigned int *)(*(void *)(v8 + 24) + 8);
        }
        else
        {
          CUCFErrorHandler(a1, 15);
          unsigned int v10 = 0;
        }
        PERDecVal(a1, *(void *)(*(void *)(a3 + 32) + 24), v10, &v26);
        while (1)
        {
          char v14 = v26;
          uint64_t v15 = *(void *)(a3 + 40);
          if (v26 == *(void **)v15) {
            break;
          }
          int v26 = (void *)*((void *)v26 + 2);
          MMSFree(a1, v14, (void *)0x18);
        }
        unint64_t v5 = *(void *)(a3 + 24) + 1;
        *(void *)(a3 + 24) = v5;
      }
      while (v5 < v6);
      if (v27)
      {
        uint64_t v18 = *(void *)(v15 + 8);
        int v16 = (void *)(v15 + 8);
        uint64_t v17 = v18;
        if (v18)
        {
          do
          {
            uint64_t v19 = v17;
            uint64_t v17 = *(void *)(v17 + 32);
          }
          while (v17);
          int v16 = (void *)(v19 + 32);
        }
        *int v16 = v27;
      }
    }
  }
  else
  {
    for (; v5 < v6; *(void *)(a3 + 24) = v5)
    {
      uint64_t v20 = *(void *)(*(void *)(a3 + 32) + 8);
      if (*(_DWORD *)v20 == 181)
      {
        uint64_t v23 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(v20 + 32));
        *uint64_t v23 = 0;
        rsize_t v24 = *(unsigned int *)(*(void *)(v20 + 24) + 8);
        memset_s((char *)v23 + *(unsigned int *)(v20 + 36), v24, 0, v24);
        unint64_t v25 = *(void **)a3;
        if (**(void **)a3)
        {
          *(void *)v25[1] = v23;
          ++*((_DWORD *)v25 + 4);
        }
        else
        {
          *unint64_t v25 = v23;
          *((_DWORD *)v25 + 4) = 1;
        }
        v25[1] = v23;
        uint64_t v22 = (char *)v23 + *(unsigned int *)(v20 + 36);
        *((unsigned char *)v25 + 20) = 8;
      }
      else if (*(_DWORD *)v20 == 182)
      {
        uint64_t v21 = *(_DWORD **)a3;
        *uint64_t v21 = **(_DWORD **)a3 + 1;
        uint64_t v22 = (char *)v21 + *(unsigned int *)(v20 + 36) + v5 * *(unsigned int *)(*(void *)(v20 + 24) + 8);
      }
      else
      {
        CUCFErrorHandler(a1, 15);
        uint64_t v22 = 0;
      }
      PERDecVal(a1, *(void *)(*(void *)(a3 + 32) + 24), v22, 0);
      unint64_t v5 = *(void *)(a3 + 24) + 1;
    }
  }
}

uint64_t PEREncodePrimSET_OF(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 24);
  unint64_t v6 = v5 + a2;
  if (v5 < v5 + a2)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = **(void ***)a3;
      if (v9)
      {
        uint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = v9[1];
          if (v11 >= 1) {
            break;
          }
LABEL_10:
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            goto LABEL_11;
          }
        }
        uint64_t v12 = v11 + v10;
        uint64_t v13 = v5 - v10;
        while (v13)
        {
          --v13;
          if (!--v11)
          {
            uint64_t v10 = v12;
            goto LABEL_10;
          }
        }
        char v14 = (char *)v9 + *(unsigned int *)(*(void *)(v8 + 8) + 36);
      }
      else
      {
LABEL_11:
        char v14 = 0;
      }
      unint64_t result = PEREncVal(v7, *(void *)(v8 + 24), v14);
      unint64_t v5 = *(void *)(a3 + 24) + 1;
      *(void *)(a3 + 24) = v5;
    }
    while (v5 < v6);
  }
  *(void *)(a3 + 8) -= a2;
  return result;
}

void PERDecodePrimSET_OF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a3 + 24);
  unint64_t v6 = v5 + a2;
  uint64_t v7 = *(void ***)(a3 + 40);
  if (v7)
  {
    uint64_t v25 = 0;
    rsize_t v24 = *v7;
    if (v5 < v6)
    {
      do
      {
        uint64_t v8 = *(void *)(*(void *)(a3 + 32) + 8);
        uint64_t v9 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(void *)(v8 + 24) + 8) + 20);
        *uint64_t v9 = 0;
        v9[1] = 1;
        rsize_t v10 = *(unsigned int *)(*(void *)(v8 + 24) + 8);
        memset_s((char *)v9 + *(unsigned int *)(v8 + 36), v10, 0, v10);
        uint64_t v11 = *(void **)a3;
        if (**(void **)a3)
        {
          *(void *)v11[1] = v9;
          ++*((_DWORD *)v11 + 4);
        }
        else
        {
          *uint64_t v11 = v9;
          *((_DWORD *)v11 + 4) = 1;
        }
        v11[1] = v9;
        PERDecVal(a1, *(void *)(*(void *)(a3 + 32) + 24), (char *)v9 + *(unsigned int *)(v8 + 36), &v24);
        while (1)
        {
          uint64_t v12 = v24;
          uint64_t v13 = *(void *)(a3 + 40);
          if (v24 == *(void **)v13) {
            break;
          }
          rsize_t v24 = (void *)*((void *)v24 + 2);
          MMSFree(a1, v12, (void *)0x18);
        }
        unint64_t v14 = *(void *)(a3 + 24) + 1;
        *(void *)(a3 + 24) = v14;
      }
      while (v14 < v6);
      if (v25)
      {
        uint64_t v17 = *(void *)(v13 + 8);
        uint64_t v15 = (void *)(v13 + 8);
        uint64_t v16 = v17;
        if (v17)
        {
          do
          {
            uint64_t v18 = v16;
            uint64_t v16 = *(void *)(v16 + 32);
          }
          while (v16);
          uint64_t v15 = (void *)(v18 + 32);
        }
        void *v15 = v25;
      }
    }
  }
  else if (v5 < v6)
  {
    do
    {
      uint64_t v19 = *(void *)(*(void *)(a3 + 32) + 8);
      uint64_t v20 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(void *)(v19 + 24) + 8) + 20);
      *uint64_t v20 = 0;
      v20[1] = 1;
      rsize_t v21 = *(unsigned int *)(*(void *)(v19 + 24) + 8);
      memset_s((char *)v20 + *(unsigned int *)(v19 + 36), v21, 0, v21);
      uint64_t v22 = *(void **)a3;
      if (**(void **)a3)
      {
        *(void *)v22[1] = v20;
        ++*((_DWORD *)v22 + 4);
      }
      else
      {
        *uint64_t v22 = v20;
        *((_DWORD *)v22 + 4) = 1;
      }
      v22[1] = v20;
      PERDecVal(a1, *(void *)(*(void *)(a3 + 32) + 24), (char *)v20 + *(unsigned int *)(v19 + 36), 0);
      unint64_t v23 = *(void *)(a3 + 24) + 1;
      *(void *)(a3 + 24) = v23;
    }
    while (v23 < v6);
  }
}

void Gnm14_03SendPosEstimateReq(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v0 = gnssOsa_Calloc("Gnm14_03SendPosEstimateReq", 64, 1, 0xCuLL);
  if (v0)
  {
    int v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NO_COST_POS_REQ =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_03SendPosEstimateReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(128, 130, 8521216, v1);
  }
}

uint64_t Gnm14_11HandleStartPosResp(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_11HandleStartPosResp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm14_11HandleStartPosResp", 517);
    int v13 = 0;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a1 + 14);
  int v5 = *(unsigned __int16 *)(a1 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm14_11HandleStartPosResp", v5, *(unsigned __int8 *)(a1 + 14));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
  if (!InstnFromInstnId)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm14_11HandleStartPosResp", 2052, v5);
    int v13 = 2;
    goto LABEL_16;
  }
  uint64_t v9 = InstnFromInstnId;
  if (!*((void *)InstnFromInstnId + 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", v17);
LABEL_23:
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
    }
LABEL_24:
    Gnm02_21DeleteInstn(v9);
    return 0;
  }
  int v10 = *((unsigned __int8 *)InstnFromInstnId + 2);
  if (v10 == 1)
  {
    Gnm11_07StartPosResp((uint64_t)InstnFromInstnId, v4 == 255);
    return 0;
  }
  if (v10 == 3)
  {
    Gnm51_05StartPosResp(InstnFromInstnId, v4 == 255);
    return 0;
  }
  if (v10 != 2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v18);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  Gnm13_15StartPosResp(InstnFromInstnId, v4 == 255);
  return 0;
}

uint64_t Gnm14_12HandleStopPosResp(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_12HandleStopPosResp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm14_12HandleStopPosResp", 517);
    int v13 = 0;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a1 + 14);
  int v5 = *(unsigned __int16 *)(a1 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm14_12HandleStopPosResp", v5, *(unsigned __int8 *)(a1 + 14));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
  if (!InstnFromInstnId)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v5);
    int v13 = 2;
    goto LABEL_16;
  }
  uint64_t v9 = InstnFromInstnId;
  if (*((void *)InstnFromInstnId + 1))
  {
    int v10 = *((unsigned __int8 *)InstnFromInstnId + 2);
    switch(v10)
    {
      case 1:
        Gnm11_08StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      case 3:
        Gnm51_06StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      case 2:
        Gnm13_16StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm14_12HandleStopPosResp", 770, *((unsigned __int8 *)v9 + 2));
          LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
        }
        Gnm02_21DeleteInstn(v9);
        break;
    }
    gnssOsa_flushNv();
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v5);
      LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
    }
    Gnm02_21DeleteInstn(v9);
  }
  return 0;
}

uint64_t Gnm14_13HandleClearGNSSRsp(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_13HandleClearGNSSRsp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = *(unsigned __int8 *)(a1 + 12);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v6 = 89;
      if (!v4) {
        uint64_t v6 = 78;
      }
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%c,Mask0x%X\n", (unint64_t)v5, "GNM", 73, "Gnm14_13HandleClearGNSSRsp", v6, *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    if (v4
      && ((Gnm13_17SendClearCacheInd(*(_DWORD *)(a1 + 16)), (*(_DWORD *)(a1 + 16) & 0x40100) == 0)
       || (Gnm53_26ClearVarMENv() & 1) != 0))
    {
      if (byte_268466F4B)
      {
        byte_268466F4B = 0;
        uint64_t v8 = 0;
LABEL_17:
        Gnm11_00ApiStatusCB(v8, 0, 0, 16);
      }
    }
    else if (byte_268466F4B)
    {
      byte_268466F4B = 0;
      uint64_t v8 = 11;
      goto LABEL_17;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm14_13HandleClearGNSSRsp", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

uint64_t gnssdbg_GetLogSeverityCP(int a1, int a2)
{
  if (a2 != 1) {
    return 2;
  }
  uint64_t result = 0;
  if (a1 > 1791)
  {
    switch(a1)
    {
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1901:
      case 1918:
      case 1922:
      case 1923:
        return result;
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1919:
      case 1920:
      case 1921:
        return 2;
      default:
        if (a1 != 2048 && a1 != 2057) {
          return 2;
        }
        break;
    }
    return result;
  }
  if (a1 <= 1051)
  {
    if ((a1 - 768) <= 0x31)
    {
      if (((1 << a1) & 0x287A00404FFFFLL) != 0) {
        return result;
      }
      if (((1 << a1) & 0x404188000000) != 0) {
        return 1;
      }
    }
    uint64_t v5 = (a1 - 258);
    if (v5 <= 0x27)
    {
      if (((1 << (a1 - 2)) & 0x363FA6A8F7) != 0) {
        return result;
      }
      if (v5 == 39) {
        return 1;
      }
    }
    unsigned int v6 = a1 - 512;
    if (v6 <= 0xA)
    {
      int v7 = 1 << v6;
      if ((v7 & 0x7C6) != 0) {
        return result;
      }
      if ((v7 & 0x11) != 0) {
        return 1;
      }
    }
    return 2;
  }
  if ((a1 - 1280) <= 0x19)
  {
    if (((1 << a1) & 0x22C01F7) != 0) {
      return result;
    }
    if (a1 == 1283) {
      return 1;
    }
  }
  char v4 = a1 - 7;
  if ((a1 - 1543) > 0x34) {
    goto LABEL_24;
  }
  if (((1 << v4) & 0xCC0400000101) != 0) {
    return 1;
  }
  if (((1 << v4) & 0x18204000C00000) == 0)
  {
LABEL_24:
    unsigned int v8 = a1 - 1052;
    if (v8 <= 0x1E)
    {
      if (((1 << v8) & 0x70020081) != 0) {
        return result;
      }
      if (v8 == 19) {
        return 1;
      }
    }
    return 2;
  }
  return result;
}

double Comp_AzEl(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, _WORD *a5, void *a6, void *a7)
{
  v35[3] = *MEMORY[0x263EF8340];
  int v31 = 0;
  double result = 0.0;
  long long v32 = 0u;
  long long v33 = 0u;
  int v28 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  if (*(_DWORD *)(a3 + 120))
  {
    for (uint64_t i = 0; i != 3; ++i)
      *(double *)&v35[i] = *(double *)(a3 + 8 + i * 8) - *(double *)(a1 + i * 8);
    double v13 = 0.0;
    uint64_t v14 = 2;
    do
    {
      double v13 = v13 + *(double *)&v35[v14] * *(double *)&v35[v14];
      unint64_t v15 = v14-- + 1;
    }
    while (v15 > 1);
    uint64_t v16 = 0;
    double v17 = sqrt(v13);
    do
    {
      *(double *)&v35[v16] = *(double *)&v35[v16] / v17;
      ++v16;
    }
    while (v16 != 3);
    uint64_t v18 = 0;
    double v19 = *(double *)v35;
    double v20 = *(double *)&v35[1];
    uint64_t v21 = (double *)(a2 + 16);
    double v22 = *(double *)&v35[2];
    do
    {
      double v23 = *(v21 - 1) * v20 + *(v21 - 2) * v19;
      double v24 = *v21;
      v21 += 3;
      v34[v18++] = v23 + v24 * v22;
    }
    while (v18 != 3);
    AzEl_SinCos(v34, (uint64_t)&v28, (uint64_t)&v31);
    AzEl_RadDeg((uint64_t)&v28, (uint64_t)&v31);
    __int16 v25 = v28;
    if (v28 < 0)
    {
      if (v28 <= -360) {
        int v26 = -360;
      }
      else {
        int v26 = v28;
      }
      unsigned int v27 = (v26 - v28 - (v28 < 0xFFFFFE98)) / 0x168;
      if (v28 < 0xFFFFFE98) {
        LOWORD(v27) = v27 + 1;
      }
      __int16 v25 = v28 + 360 * v27 + 360;
    }
    *a4 = v31;
    *a5 = v25;
    *a6 = v33;
    double result = *(double *)&v30;
    *a7 = v30;
  }
  return result;
}

int8x8_t Decode_GPS_Health_From_AS_Subfr(const unsigned int *a1, int8x8_t *a2)
{
  unsigned int v2 = a1[8];
  unsigned int v3 = a1[9];
  v4.i8[0] = a1[7] & 0x1F;
  v4.i8[1] = (v2 >> 18) & 0x1F;
  v4.i8[2] = (v2 >> 12) & 0x1F;
  v4.i8[3] = (v2 >> 6) & 0x1F;
  v4.i8[4] = v2 & 0x1F;
  v4.i8[5] = (v3 >> 18) & 0x1F;
  v4.i8[6] = (v3 >> 12) & 0x1F;
  v4.i8[7] = (v3 >> 6) & 0x1F;
  uint16x8_t v5 = vmovl_u8(v4);
  uint32x4_t v6 = vmovl_high_u16(v5);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  int64x2_t v8 = v7;
  uint32x4_t v9 = vmovl_u16(*(uint16x4_t *)v5.i8);
  v7.i64[0] = v9.u32[0];
  v7.i64[1] = v9.u32[1];
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(0xE4FE7F3uLL);
  int8x8_t result = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v7)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v9))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v8)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v6))))), (int8x8_t)0x101010101010101);
  *a2 = result;
  return result;
}

uint64_t Comp_AGNSS_PR_Sigma(unsigned int a1)
{
  if (a1 <= 0x1116FF)
  {
    if (a1 >> 3 < 0x271)
    {
      LOBYTE(v1) = 0;
    }
    else
    {
      unsigned int v2 = 9375;
      if (a1 >= 0x249F)
      {
        int v3 = 0;
        do
        {
          v2 *= 2;
          ++v3;
        }
        while (v2 <= a1);
      }
      else
      {
        int v3 = 0;
      }
      return (8 * v3 - (v2 - a1) / (625 << v3) + 7);
    }
  }
  else
  {
    LOBYTE(v1) = 63;
  }
  return v1;
}

double *Comp_Track_velLOS(double a1, double a2, double *result, double *a4)
{
  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    double v10 = 57.2957795 / (a1 * a1 + a2 * a2);
    *a4 = v10 * (result[3] * a1 - *result * a2);
    a4[1] = v10 * (result[4] * a1 - result[1] * a2);
    double v9 = v10 * -(result[2] * a2);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    double v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

uint64_t GN_ABDS_Set_Eph_El(unsigned __int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_Eph_El")) {
    return 0;
  }
  if ((unsigned __int16)g_Enable_Event_Log >= 5u) {
    EvLog_ABDS_Eph_El(a1);
  }
  unsigned int v2 = *a1;
  if (v2 >= 0x2000)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: Weeint k = %d >=8191, Out of range!");
    return 0;
  }
  unsigned int v3 = *((_DWORD *)a1 + 1);
  if (v3 > 0x1274F)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: toc = %d > 75599, Out of range!");
    return 0;
  }
  unsigned int v4 = *((_DWORD *)a1 + 2);
  if (v4 > 0x1274F)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: toe = %d > 75599, Out of range!");
    return 0;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 12);
  if (v5 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: AODE = %d >31, Out of range!");
    return 0;
  }
  unsigned int v6 = *((unsigned __int8 *)a1 + 13);
  if (v6 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: AODC = %d >31, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 14) - 38 <= 0xFFFFFFDA)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: SVid = %d < 1 or >37, Out of range!");
    return 0;
  }
  unsigned int v7 = *((unsigned __int8 *)a1 + 15);
  if (v7 >= 0x10)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: URA = %d >15, Out of range!");
    return 0;
  }
  unsigned __int16 v8 = a1[22];
  if ((unsigned __int16)((unsigned __int16)(v8 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: IDot = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  int v9 = *((_DWORD *)a1 + 12);
  if ((v9 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v10 = *((_DWORD *)a1 + 19);
  if ((v10 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  int v11 = *((_DWORD *)a1 + 20);
  if ((v11 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af1 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  unsigned __int16 v12 = a1[42];
  if ((unsigned __int16)((unsigned __int16)(v12 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af2 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  unsigned __int16 v13 = a1[43];
  if ((unsigned __int16)((unsigned __int16)(v13 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: TGD1 = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  uint64_t v26 = *((unsigned __int8 *)a1 + 14);
  unsigned __int16 v14 = a1[44];
  if ((unsigned __int16)((unsigned __int16)(v14 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: TGD2 = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  uint64_t v17 = (v26 - 1);
  uint64_t v18 = p_NA;
  uint64_t v19 = p_NA + 100 * v17;
  *(_DWORD *)(v19 + 9892) = v3;
  *(_DWORD *)(v19 + 9896) = v4;
  *(_WORD *)(v19 + 9900) = v2;
  *(unsigned char *)(v19 + 9902) = v5;
  *(unsigned char *)(v19 + 9903) = v6;
  *(unsigned char *)(v19 + 9904) = v26;
  *(unsigned char *)(v19 + 9905) = v7;
  *(unsigned char *)(v19 + 9906) = *((unsigned char *)a1 + 16);
  *(_OWORD *)(v19 + 9908) = *(_OWORD *)(a1 + 10);
  *(void *)(v19 + 9924) = *(void *)(a1 + 18);
  *(_WORD *)(v19 + 9932) = v8;
  *(_WORD *)(v19 + 9934) = a1[23];
  *(_DWORD *)(v19 + 9936) = v9;
  *(_OWORD *)(v19 + 9940) = *(_OWORD *)(a1 + 26);
  *(void *)(v19 + 9956) = *(void *)(a1 + 34);
  *(_DWORD *)(v19 + 9964) = v10;
  *(_DWORD *)(v19 + 9968) = v11;
  *(_WORD *)(v19 + 9972) = v12;
  *(_WORD *)(v19 + 9974) = v13;
  *(_WORD *)(v19 + 9976) = v14;
  if (*((unsigned char *)a1 + 90)) {
    int v20 = 5;
  }
  else {
    int v20 = 3;
  }
  *(_DWORD *)(v19 + 9888) = v20;
  if (v26 <= 5) {
    int v21 = -1;
  }
  else {
    int v21 = 0x7FFFFFF;
  }
  *(_DWORD *)(v19 + 9980) = v21;
  *(unsigned char *)(v18 + v17 + 223) = 1;
  uint64_t v22 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v22 + 5) && *(int *)v22 >= 3) {
    int v23 = (int)*(double *)(v22 + 24) + 604800 * *(__int16 *)(v22 + 16);
  }
  else {
    int v23 = 0;
  }
  double v24 = (int *)(p_NA + 100 * v17 + 9884);
  *double v24 = v23;
  uint64_t v15 = 1;
  Debug_Log_BDS_Eph(1, (uint64_t)v24);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
    EvLog_nd("GN_ABDS_Set_Eph: ", 2, v25, v26, *(unsigned int *)(p_NA + 100 * v17 + 9884));
  }
  return v15;
}

uint64_t GN_ABDS_Set_BGTO(__int16 *a1)
{
  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_BGTO")) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (v3 != 0x7FFF && (unsigned __int16)((unsigned __int16)(*a1 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0G = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  int v5 = a1[4];
  if (v5 != 0x7FFF && (unsigned __int16)((unsigned __int16)(v5 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0R = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  int v6 = a1[2];
  if (v6 != 0x7FFF && (unsigned __int16)((unsigned __int16)(v6 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0E = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  int v9 = (unsigned __int16)*a1;
  uint64_t v10 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v10 + 5) && *(int *)v10 >= 3) {
    int v11 = (int)*(double *)(v10 + 24) + 604800 * *(__int16 *)(v10 + 16);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = p_NA;
  unsigned __int16 v13 = (_WORD *)(p_NA + 9872);
  *(_DWORD *)(p_NA + 9864) = v11;
  if (v9 == 0x7FFF || (int v14 = (unsigned __int16)a1[1], v14 == 0x7FFF))
  {
    if ((unsigned __int16)v6 == 0x7FFF || (int v15 = (unsigned __int16)a1[3], v15 == 0x7FFF))
    {
      if ((unsigned __int16)v5 != 0x7FFF)
      {
        int v16 = (unsigned __int16)a1[5];
        if (v16 != 0x7FFF)
        {
          void v13[4] = v5;
          v13[5] = v16;
        }
      }
    }
    else
    {
      double v13[2] = v6;
      _OWORD v13[3] = v15;
    }
  }
  else
  {
    *unsigned __int16 v13 = v3;
    v13[1] = v14;
  }
  if (*((unsigned char *)a1 + 12)) {
    int v17 = 5;
  }
  else {
    int v17 = 3;
  }
  *(_DWORD *)(v12 + 9868) = v17;
  uint64_t v7 = 1;
  *(unsigned char *)(v12 + 222) = 1;
  EvLog_nd("GN_ABDS_Set_BGTO: ", 6, v2, v3, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return v7;
}

uint64_t stphiu(uint64_t result, unsigned int a2, const double *a3, const unsigned __int8 *a4, int a5, const unsigned __int8 *a6, const unsigned __int8 *a7)
{
  if (a2 >= 2 && a5)
  {
    int v7 = 0;
    uint64_t v8 = result - 8;
    int v9 = a3 - 1;
    uint64_t v10 = a4 - 1;
    int v11 = a6 - 1;
    uint64_t v12 = a7 - 1;
    if ((a5 + 1) > 2) {
      uint64_t v13 = (a5 + 1);
    }
    else {
      uint64_t v13 = 2;
    }
    uint64_t v14 = 1;
    do
    {
      int v15 = v12[v14];
      if (v12[v14])
      {
        int8x8_t result = v11[v14];
        int v16 = 1;
        int v17 = v7;
        do
        {
          double v18 = v9[++v17];
          uint64_t v19 = v10[v17];
          unsigned int v20 = (v19 - 1) * v19;
          unsigned int v21 = result + (v20 >> 1);
          *(double *)(v8 + 8 * v21) = v18 + *(double *)(v8 + 8 * v21);
          if (v19 < a2)
          {
            unsigned int v22 = (v20 >> 1) + v19;
            do
            {
              v21 += v19;
              v22 += v19;
              *(double *)(v8 + 8 * v21) = *(double *)(v8 + 8 * v21) + v18 * *(double *)(v8 + 8 * v22);
              ++v19;
            }
            while (a2 != v19);
          }
        }
        while (v16++ != v15);
      }
      v7 += v15;
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t SuplProvider::GetInstance(SuplProvider *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SuplProvider::GetInstance(void)::pred_suplProvider != -1) {
    dispatch_once(&SuplProvider::GetInstance(void)::pred_suplProvider, &__block_literal_global_0);
  }
  uint64_t result = SuplProvider::m_supl_provider;
  if (!SuplProvider::m_supl_provider)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplProvider.cpp", 60, "false && \"Memory allocation failure\"");
  }
  return result;
}

char *___ZN12SuplProvider11GetInstanceEv_block_invoke()
{
  uint64_t result = (char *)operator new(0x40uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *(void *)uint64_t result = &unk_26DF18770;
    *((void *)result + 1) = &unk_26DF187B8;
    *((void *)result + 2) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *((void *)result + 7) = 0;
  }
  SuplProvider::m_supl_provider = (uint64_t)result;
  return result;
}

uint64_t SuplProvider::AbortLocationReq(SuplUtils *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 4);
  if (v5)
  {
    while (*(_DWORD *)v5 != *(_DWORD *)(a3 + 4))
    {
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        goto LABEL_4;
      }
    }
    SuplSession::ProcessAbortRequest((SuplSession *)(v5 - 8), a4);
  }
  else
  {
LABEL_4:
    uint64_t Instance = SuplUtils::GetInstance(a1);
    int v7 = (SuplPosPayloadHandler *)SuplUtils::DeleteSuplInitRecd(Instance, *(_DWORD *)(a3 + 4));
    uint64_t v8 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(v7);
    uint64_t v9 = *(unsigned int *)(a3 + 4);
    uint64_t v10 = LcsSuplGlueLayer::GetInstance(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 8))(v10, v9, 3, 0);
    int v11 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)v8);
    uint64_t v12 = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v11);
    if (v12) {
      uint64_t v13 = v12 + 8;
    }
    else {
      uint64_t v13 = 0;
    }
    (*(void (**)(uint64_t, void))(*(void *)v13 + 8))(v13, *(unsigned int *)(a3 + 4));
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "AbortLocationReq", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
    }
  }
  return 0;
}

uint64_t SuplProvider::InitSessionNode(uint64_t a1, int a2, int a3, uint64_t *a4, int a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = (SuplSession *)operator new(0x218uLL, MEMORY[0x263F8C180]);
  if (v10)
  {
    int v11 = v10;
    SuplSession::SuplSession((uint64_t)v10, a2, a3, a4);
    uint64_t v12 = (void *)((char *)v11 + 8);
    uint64_t v13 = *(void *)(a1 + 32);
    while (v13)
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13)
      {
        *(void *)(v14 + 8) = v12;
        *((void *)v11 + 2) = 0;
        if (!a5) {
          return 0;
        }
        goto LABEL_11;
      }
    }
    *((void *)v11 + 2) = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    if (!a5) {
      return 0;
    }
LABEL_11:
    SuplSession::InitializeResources(v11);
    SuplSession::ProcessSuplRequest(v11);
    return 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "InitSessionNode", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
    }
    return -2;
  }
}

void sub_22B8B5620(_Unwind_Exception *exception_object)
{
}

size_t SuplProvider::DeleteSessionInfo(SuplProvider *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    unsigned __int16 v3 = (char *)this + 16;
    uint64_t v4 = v2;
    while (*(_DWORD *)v4 != a2)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = v4 - 8;
    while (*(_DWORD *)v2 != a2)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        goto LABEL_13;
      }
    }
    LcsLinkedList::Remove((uint64_t)v3, v2);
LABEL_13:
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  else
  {
LABEL_5:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "DeleteSessionInfo", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t SuplProvider::ConnectInd(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    if (a3 == 6 && *(unsigned char *)(v3 + 48))
    {
      *(_DWORD *)(v3 + 520) = 6;
    }
    else
    {
      return SuplSession::ConnectInd((int *)(v3 - 8), a3);
    }
  }
  else
  {
LABEL_4:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "ConnectInd", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'SuplProvider::ConnectInd(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 - 8;

  return SuplProvider::ConnectInd(v3, a2, a3);
}

uint64_t SuplProvider::DisconnectInd(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    return SuplSession::DisconnectInd(v3 - 8, a3);
  }
  else
  {
LABEL_4:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "DisconnectInd", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'SuplProvider::DisconnectInd(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 - 8;

  return SuplProvider::DisconnectInd(v3, a2, a3);
}

void SuplProvider::ReceiveDataInd(uint64_t a1, int a2, char **a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = a3[1];
    if (*a3 == v7)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "ReceiveDataInd", 514);
        LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
      }
    }
    else
    {
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(a1 + 40, *(char **)(a1 + 48), *a3, v7, v7 - *a3);
      uint64_t v8 = *(const void **)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      if ((unint64_t)(v9 - (void)v8) >= 2)
      {
        unsigned __int16 v23 = 0;
        SuplProvider::DecodeMessageLength(v8, v9, &v23);
        uint64_t v10 = *(const void **)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        size_t v12 = v11 - (void)v10;
        if (v11 - (uint64_t)v10 >= (unint64_t)v23)
        {
          if (v12 < 0xBB9)
          {
            double v24 = 0;
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v24, v10, v11, v12);
            SuplProvider::DecodeMessageLength(v24, (uint64_t)v25, &v27);
            v28[0] = &v24;
            v28[1] = 5;
            char v29 = 0;
            ASN1T_SessionID::ASN1T_SessionID((ASN1T_SessionID *)__str);
            int v17 = asn1PD_SessionID((uint64_t)v28, (uint64_t)__str);
            int v18 = __str[0];
            if (v17) {
              int v19 = 0;
            }
            else {
              int v19 = v31;
            }
            if (v52)
            {
              char v53 = v52;
              operator delete(v52);
            }
            if (v50)
            {
              char v51 = v50;
              operator delete(v50);
            }
            if (v48)
            {
              char v49 = v48;
              operator delete(v48);
            }
            if (v46)
            {
              unsigned int v47 = v46;
              operator delete(v46);
            }
            if (v44)
            {
              uint64_t v45 = v44;
              operator delete(v44);
            }
            if (v42)
            {
              BOOL v43 = v42;
              operator delete(v42);
            }
            if (v40)
            {
              int v41 = v40;
              operator delete(v40);
            }
            if (v38)
            {
              uint64_t v39 = v38;
              operator delete(v38);
            }
            if (v36)
            {
              int v37 = v36;
              operator delete(v36);
            }
            if (__p)
            {
              int64x2_t v35 = __p;
              operator delete(__p);
            }
            if (v32)
            {
              long long v33 = v32;
              operator delete(v32);
            }
            if (v24)
            {
              uint64_t v25 = v24;
              operator delete(v24);
            }
            if (!v17 && v18)
            {
              uint64_t v20 = *(void *)(a1 + 32);
              if (v20)
              {
                while (*(_DWORD *)v20 != v19)
                {
                  uint64_t v20 = *(void *)(v20 + 8);
                  if (!v20) {
                    goto LABEL_46;
                  }
                }
                uint64_t v3 = v20;
              }
              else
              {
LABEL_46:
                if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v21 = mach_continuous_time();
                  unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "ReceiveDataInd", 513);
                  LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
                }
              }
            }
            SuplSession::ReceiveDataInd(v3 - 8, (void *)(a1 + 40));
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v13 = mach_continuous_time();
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "ReceiveDataInd", 514);
            LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
          }
          *(void *)(a1 + 48) = *(void *)(a1 + 40);
        }
      }
    }
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ReceiveDataInd", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
}

void sub_22B8B5F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SuplProvider::DecodeMessageLength(const void *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, a1, a2, a2 - (void)a1);
  v7[0] = &__p;
  v7[1] = 0;
  char v8 = 0;
  Asn1Coder::DecodeInteger((uint64_t)v7, 0, 0xFFFFu, a3);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_22B8B6060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SuplProvider::ReceiveDataInd(uint64_t a1, int a2, char **a3)
{
  uint64_t v3 = a1 - 8;

  SuplProvider::ReceiveDataInd(v3, a2, a3);
}

void SuplProvider::OnTimerEvent(SuplProvider *this, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  LcsUtils::GetInstance(this);
  if (a2 > 0xFFFE)
  {
    __str[0] = 0;
    unsigned int v8 = a2 - 0xFFFF;
    (**(void (***)(SuplProvider *, void, char *, uint64_t))this)(this, 0, __str, 1);
  }
  else
  {
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      while (*(_DWORD *)v4 != a2)
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          goto LABEL_5;
        }
      }
      SuplSession::OnTimerEvent((SuplSession *)(v4 - 8));
    }
    else
    {
LABEL_5:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "OnTimerEvent", 513);
        LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
      }
    }
  }
}

void non-virtual thunk to'SuplProvider::OnTimerEvent(SuplProvider *this, unsigned int a2)
{
  uint64_t v2 = (SuplProvider *)((char *)this - 8);

  SuplProvider::OnTimerEvent(v2, a2);
}

LcsSuplGlueLayer *SuplProvider::SuplEndIndication(LcsSuplGlueLayer *result, uint64_t a2, int a3)
{
  uint64_t v3 = *((void *)result + 4);
  if (v3)
  {
    uint64_t v4 = result;
    while (*(_DWORD *)v3 != a3)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        return result;
      }
    }
    uint64_t v5 = *(uint64_t (***)(void))LcsSuplGlueLayer::GetInstance(result);
    uint64_t result = (LcsSuplGlueLayer *)(*v5)();
    *((void *)v4 + 6) = *((void *)v4 + 5);
  }
  return result;
}

uint64_t SuplProvider::Connect(SuplProvider *this, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    while (*(_DWORD *)v4 != a2)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_4;
      }
    }
    v23[0] = 0;
    memset(&v24, 0, sizeof(v24));
    __int16 v25 = 7275;
    uint64_t Instance = SimUtils::GetInstance(this);
    SlpFqduint64_t n = SimUtils::GetSlpFqdn(Instance, (uint64_t)v23, a2, *(_DWORD *)(v4 + 524));
    if (SlpFqdn)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "SPL", 69, "Connect", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v11, 0, 1);
      }
      SuplProvider::SuplEndIndication(this, SlpFqdn, a2);
      SuplProvider::DeleteSessionInfo(this, a2);
      uint64_t v7 = 0;
    }
    else
    {
      v20[0] = 0;
      int v22 = 0;
      memset(__p, 0, sizeof(__p));
      unsigned int v12 = (v23[0] - 1);
      if (v12 >= 4)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "Connect", 515);
          LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
        }
        LOBYTE(v13) = 0;
      }
      else
      {
        unsigned int v13 = 0x2030301u >> (8 * v12);
      }
      v20[0] = v13;
      unsigned __int16 v16 = std::string::operator=((std::string *)__p, &v24);
      *(_WORD *)&__p[24] = v25;
      __p[26] = 0;
      int v22 = *(_DWORD *)(v4 + 524);
      uint64_t v17 = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v16);
      if (v17) {
        int v18 = (uint64_t (***)(void, uint64_t, unsigned char *))(v17 + 8);
      }
      else {
        int v18 = 0;
      }
      uint64_t v7 = (**v18)(v18, a2, v20);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "Connect", 2305);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    SuplProvider::SuplEndIndication(this, 4294967279, a2);
    SuplProvider::DeleteSessionInfo(this, a2);
    return 0;
  }
  return v7;
}

void sub_22B8B674C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t SuplProvider::Disconnect(SuplProvider *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    while (*(_DWORD *)v2 != a2)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        goto LABEL_4;
      }
    }
    unsigned __int16 v6 = (SuplVersionNegotiation::Instance *)SuplProvider::DeleteSessionInfo(this, *(_DWORD *)(v2 + 368));
    uint64_t v7 = SuplVersionNegotiation::Instance::Reset(v6);
    uint64_t Instance = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v7);
    if (Instance) {
      uint64_t v9 = Instance + 8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 8);
    return v10();
  }
  else
  {
LABEL_4:
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "Disconnect", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t SuplProvider::SendSuplPdu(LcsSuplGlueLayer *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 4);
  if (v2)
  {
    while (*(_DWORD *)v2 != a2)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        goto LABEL_4;
      }
    }
    uint64_t Instance = LcsSuplGlueLayer::GetInstance(a1);
    if (Instance) {
      uint64_t v7 = Instance + 8;
    }
    else {
      uint64_t v7 = 0;
    }
    unsigned int v8 = *(uint64_t (**)(void))(*(void *)v7 + 16);
    return v8();
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "SPL", 69, "SendSuplPdu", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v4, 0, 1);
    }
    return 0;
  }
}

void ASN1T_SessionID::~ASN1T_SessionID(ASN1T_SessionID *this)
{
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  unsigned __int16 v4 = (void *)*((void *)this + 30);
  if (v4)
  {
    *((void *)this + 31) = v4;
    operator delete(v4);
  }
  unsigned __int16 v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }
  ASN1T_SETId::U::~U((ASN1T_SessionID *)((char *)this + 24));
}

uint64_t SuplProvider::UpdateAidMask(SuplProvider *this, int a2, const SuplAsstDataNeededInfo *a3)
{
  __p[125] = *(void **)MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_4;
      }
    }
    long long v12 = 0u;
    memset(__p, 0, 25);
    *(_OWORD *)unsigned __int16 v11 = 0u;
    if (a3)
    {
      *(_WORD *)uint64_t __str = *(_WORD *)a3;
      unsigned int v8 = (void *)*((void *)a3 + 1);
      v11[0] = v8;
      if (__str != (char *)a3)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v11[1], *((char **)a3 + 2), *((char **)a3 + 3), *((void *)a3 + 3) - *((void *)a3 + 2));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__p, *((char **)a3 + 5), *((char **)a3 + 6), *((void *)a3 + 6) - *((void *)a3 + 5));
        LODWORD(v8) = v11[0];
      }
      LOBYTE(__p[3]) = *((unsigned char *)a3 + 64);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    *(_WORD *)uint64_t __str = 1;
    LODWORD(v11[0]) = v8 | 1;
    SuplSession::SetAidMask((SuplSession *)(v3 - 8), (SuplAsstDataNeededInfo *)__str);
    SuplSession::InitializeResources((SuplSession *)(v3 - 8));
    SuplSession::ProcessSuplRequest((SuplSession *)(v3 - 8));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v11[1])
    {
      *(void **)&long long v12 = v11[1];
      operator delete(v11[1]);
    }
    return 0;
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "UpdateAidMask", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    return -3;
  }
}

void sub_22B8B6CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void SuplAsstDataNeededInfo::~SuplAsstDataNeededInfo(SuplAsstDataNeededInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void SuplProvider::ProcessRRLPResponse(SuplPosPayloadHandler *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 515;
    goto LABEL_9;
  }
  uint64_t v2 = *((void *)a1 + 4);
  if (!v2)
  {
LABEL_5:
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v5 = 513;
LABEL_9:
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v4, "SPL", 69, "ProcessRRLPResponse", v5);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    return;
  }
  while (*(_DWORD *)v2 != *(_DWORD *)(a2 + 28))
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      goto LABEL_5;
    }
  }
  *(unsigned char *)(v2 + 400) = *(unsigned char *)(a2 + 32);
  uint64_t Instance = SuplPosPayloadHandler::GetInstance(a1);
  int v8 = *(unsigned __int8 *)(a2 + 24);

  SuplPosPayloadHandler::ProcessPosResponse(Instance, (char **)a2, v8, (SuplSession *)(v2 - 8));
}

LcsSuplGlueLayer *SuplProvider::AbortAllSessionsOnPriority(SuplProvider *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = this;
    do
    {
      uint64_t v3 = *(void *)(v1 + 8);
      v6[0] = 0;
      int v7 = *(_DWORD *)(v1 + 368);
      this = (SuplProvider *)(**(uint64_t (***)(SuplProvider *, void, unsigned char *, void))v2)(v2, 0, v6, 0);
      uint64_t v1 = v3;
    }
    while (v3);
  }
  uint64_t Instance = (LcsSuplGlueLayer *)SuplUtils::GetInstance(this);
  return SuplUtils::AbortAllStoredSuplInits(Instance);
}

void ASN1T_SETId::U::~U(ASN1T_SETId::U *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  unsigned __int16 v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  int v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    size_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      size_t result = memmove(v9, __src, v16);
    }
    unsigned __int16 v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    size_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    size_t result = memmove(v9, v14, a3 - v14);
  }
  unsigned __int16 v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  int v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      size_t v16 = operator new(v15);
    }
    else {
      size_t v16 = 0;
    }
    uint64_t v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    int v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    long long v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      long long v32 = v26;
    }
    else
    {
      unsigned __int16 v31 = v5;
      long long v32 = v26;
      do
      {
        char v33 = *--v31;
        *--long long v32 = v33;
      }
      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    int64x2_t v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    int64x2_t v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v21 = &v5[v6];
    int v22 = &v20[-v6];
    unsigned __int16 v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      unsigned __int16 v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  int v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void Debug_Log_ApxTime(unsigned __int16 *a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v2 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v3 = str_15[v4++];
    }
    while (v4 != 6);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *uint64_t v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    int v7 = (unsigned char *)g_CB_GDbg++;
    *int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = a1[3];
    size_t v11 = (unsigned char *)g_CB_GDbg++;
    *size_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = a1[4];
    size_t v13 = (unsigned char *)g_CB_GDbg++;
    *size_t v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = a1[5];
    size_t v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = a1[6];
    uint64_t v17 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *((_DWORD *)a1 + 4);
    int64_t v19 = (unsigned char *)g_CB_GDbg++;
    *int64_t v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v18);
    unsigned int v20 = *((_DWORD *)a1 + 5);
    uint64_t v21 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v21 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v20);
    int v22 = (unsigned char *)g_CB_GDbg++;
    *int v22 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_NonVol(int a1, uint64_t a2)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    uint64_t v3 = 0;
    unsigned int v4 = *(_DWORD *)(a2 + 4);
    unsigned int v5 = *(_DWORD *)(a2 + 22936);
    uint64_t v6 = *(void *)(a2 + 22848);
    unsigned int v8 = *(_DWORD *)(a2 + 22856);
    unsigned int v7 = *(_DWORD *)(a2 + 22860);
    unsigned int v9 = *(_DWORD *)(a2 + 22864);
    char v10 = 36;
    size_t v11 = (char *)g_CB_GDbg;
    do
    {
      g_CB_GDbg = (uint64_t)(v11 + 1);
      *size_t v11 = v10;
      size_t v11 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        size_t v11 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v10 = aNg[++v3];
    }
    while (v3 != 4);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    size_t v13 = (unsigned char *)g_CB_GDbg++;
    *size_t v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v4);
    size_t v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    uint64_t v17 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    int64_t v19 = (unsigned char *)g_CB_GDbg++;
    *int64_t v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
    if (a1)
    {
      memset(&v98[2], 0, 63);
      __int16 v97 = 0;
      *(_OWORD *)unint64_t v95 = 0u;
      long long v96 = 0u;
      memset(v94, 0, 108);
      *(_OWORD *)uint64_t v92 = 0u;
      memset(v93, 0, sizeof(v93));
      memset(v90, 0, sizeof(v90));
      signed int v21 = 1;
      long long v89 = 0uLL;
      do
      {
        if (Core_Load_GPS_Eph(v21, v94) && SLODWORD(v94[0]) >= 1)
        {
          *(void *)uint64_t v98 = *(void *)&v94[0];
          LOBYTE(v98[2]) = BYTE8(v94[0]);
          *(_WORD *)((char *)&v98[2] + 1) = *(_WORD *)((char *)v94 + 9);
          unsigned int v22 = 21;
          uint64_t v23 = 11;
          int64_t v24 = (char *)&v94[1] + 8;
          do
          {
            char v25 = (char *)v98 + v23;
            *char v25 = *v24;
            *(_WORD *)(v25 + 1) = *(_WORD *)(v24 + 1);
            v24 += 4;
            --v22;
            v23 += 3;
          }
          while (v22 > 1);
          Debug_Log_GPS_Eph(0, v21, (uint64_t)v98);
        }
        if (Core_Load_GPS_Alm(v21, v92) && *(int *)v92 >= 1)
        {
          *(_DWORD *)unint64_t v95 = *(_DWORD *)v92;
          *(_DWORD *)&v95[4] = *(_DWORD *)&v92[4];
          *(_WORD *)&v95[8] = *(_WORD *)&v92[10];
          unsigned int v26 = 9;
          uint64_t v27 = 10;
          unint64_t v28 = (unint64_t)v92 | 0xC;
          do
          {
            char v29 = &v95[v27];
            *char v29 = *(unsigned char *)v28;
            *(_WORD *)(v29 + 1) = *(_WORD *)(v28 + 1);
            v28 += 4;
            --v26;
            v27 += 3;
          }
          while (v26 > 1);
          Debug_Log_GPS_Alm(0, v21, (uint64_t)v95);
        }
        ++v21;
      }
      while (v21 != 33);
      if (Core_Load_GPS_Health(v91)) {
        Debug_Log_GNSS_Health(0, 1, (unsigned __int8 *)v91);
      }
      if (Core_Load_GPS_UTC((uint64_t)v90) && SLODWORD(v90[0]) >= 1) {
        Debug_Log_GPS_UTC(0, (uint64_t)v90);
      }
      if (Core_Load_GPS_Klob(&v89) && (int)v89 >= 1) {
        Debug_Log_GPS_Klob(0, (uint64_t)&v89);
      }
      memset(&v98[2], 0, 63);
      *(void *)&v95[8] = 0;
      long long v96 = 0uLL;
      __int16 v97 = 0;
      memset(v94, 0, 108);
      signed int v30 = 193;
      *(_OWORD *)uint64_t v92 = 0u;
      memset(v93, 0, sizeof(v93));
      do
      {
        if (Core_Load_QZSS_Eph(v30, v94) && SLODWORD(v94[0]) >= 1)
        {
          *(void *)uint64_t v98 = *(void *)&v94[0];
          LOBYTE(v98[2]) = BYTE8(v94[0]);
          *(_WORD *)((char *)&v98[2] + 1) = *(_WORD *)((char *)v94 + 9);
          unsigned int v31 = 21;
          uint64_t v32 = 11;
          char v33 = (char *)&v94[1] + 8;
          do
          {
            int64x2_t v34 = (char *)v98 + v32;
            *int64x2_t v34 = *v33;
            *(_WORD *)(v34 + 1) = *(_WORD *)(v33 + 1);
            v33 += 4;
            --v31;
            v32 += 3;
          }
          while (v31 > 1);
          Debug_Log_GPS_Eph(0, v30, (uint64_t)v98);
        }
        if (Core_Load_QZSS_Alm(v30, v92) && *(int *)v92 >= 1)
        {
          *(_DWORD *)unint64_t v95 = *(_DWORD *)v92;
          *(_DWORD *)&v95[4] = *(_DWORD *)&v92[4];
          *(_WORD *)&v95[8] = *(_WORD *)&v92[10];
          unsigned int v35 = 9;
          uint64_t v36 = 10;
          unint64_t v37 = (unint64_t)v92 | 0xC;
          do
          {
            unint64_t v38 = &v95[v36];
            *unint64_t v38 = *(unsigned char *)v37;
            *(_WORD *)(v38 + 1) = *(_WORD *)(v37 + 1);
            v37 += 4;
            --v35;
            v36 += 3;
          }
          while (v35 > 1);
          Debug_Log_GPS_Alm(0, v30, (uint64_t)v95);
        }
        ++v30;
      }
      while (v30 != 203);
      if (Core_Load_QZSS_Health(v91)) {
        Debug_Log_GNSS_Health(0, 3, (unsigned __int8 *)v91);
      }
      memset(v94, 0, 62);
      *(void *)uint64_t v98 = 0;
      LOWORD(v98[2]) = 0;
      memset(&v98[3], 0, 24);
      *(void *)uint64_t v92 = 0;
      *(_WORD *)&v92[8] = 0;
      *(_DWORD *)&unsigned char v92[12] = 0;
      LOBYTE(v93[0]) = 0;
      v93[1] = 0;
      unsigned int v39 = 1;
      LOBYTE(v93[2]) = 0;
      do
      {
        if (Core_Load_GLON_Eph(v39, v94) && SLODWORD(v94[0]) >= 1) {
          Debug_Log_GLO_Eph(0, v39, (uint64_t)v94);
        }
        if (Core_Load_GLON_Alm(v39, (uint64_t)v98) && v98[0] >= 1) {
          Debug_Log_GLO_Alm(0, v39, (uint64_t)v98);
        }
        ++v39;
      }
      while (v39 != 25);
      if (Core_Load_GLON_Health(v95)) {
        Debug_Log_GNSS_Health(0, 2, (unsigned __int8 *)v95);
      }
      if (Core_Load_GLON_Clk1(v92))
      {
        unsigned int v40 = *(_DWORD *)v92;
        if (*(int *)v92 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "C-");
            int v41 = (unsigned char *)g_CB_GDbg++;
            *int v41 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v40);
            unsigned int v42 = *(unsigned __int16 *)&v92[8];
            BOOL v43 = (unsigned char *)g_CB_GDbg++;
            *BOOL v43 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v42);
            unsigned int v44 = *(_DWORD *)&v92[12];
            uint64_t v45 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v45 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v44);
            unsigned int v46 = LOBYTE(v93[0]);
            unsigned int v47 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v47 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v46);
            unsigned int v48 = v93[1];
            char v49 = (unsigned char *)g_CB_GDbg++;
            *char v49 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v48);
            unsigned int v50 = LOBYTE(v93[2]);
            char v51 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v51 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v50);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v92[4]);
            char v52 = (unsigned char *)g_CB_GDbg++;
            *char v52 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      memset(v94, 0, 87);
      memset(v98, 0, 35);
      *(void *)&v95[6] = 0;
      int v53 = 1;
      *(void *)unint64_t v95 = 0;
      do
      {
        if (Core_Load_GAL_Eph(v53, (uint64_t)v94) && SLODWORD(v94[0]) >= 1) {
          Debug_Log_GAL_Eph(0, (uint64_t)v94);
        }
        if (Core_Load_GAL_Alm(v53, (uint64_t)v98) && v98[0] >= 1) {
          Debug_Log_GAL_Alm(0, (uint64_t)v98);
        }
        ++v53;
      }
      while (v53 != 37);
      if (Core_Load_GAL_Health(v92)) {
        Debug_Log_GNSS_Health(0, 6, (unsigned __int8 *)v92);
      }
      if (Core_Load_GAL_GGTO(v95))
      {
        unsigned int v54 = *(_DWORD *)v95;
        if (*(int *)v95 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "OE");
            uint64_t v55 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v55 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v54);
            unsigned int v56 = *(__int16 *)&v95[8];
            uint64_t v57 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v57 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v56);
            unsigned int v58 = *(__int16 *)&v95[10];
            uint64_t v59 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v59 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v58);
            unsigned int v60 = v95[12];
            uint64_t v61 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v61 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v60);
            unsigned int v62 = v95[13];
            uint64_t v63 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v63 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v62);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v95[4]);
            BOOL v64 = (unsigned char *)g_CB_GDbg++;
            *BOOL v64 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      LODWORD(v94[6]) = 0;
      memset(v94, 0, 23);
      memset((char *)&v94[1] + 8, 0, 64);
      *(void *)((char *)&v94[5] + 6) = 0;
      memset(v98, 0, 44);
      memset(v95, 0, sizeof(v95));
      int v65 = 1;
      LODWORD(v96) = 0;
      do
      {
        if (Core_Load_BDS_Eph(v65, (uint64_t)v94) && SLODWORD(v94[0]) >= 1) {
          Debug_Log_BDS_Eph(0, (uint64_t)v94);
        }
        if (Core_Load_BDS_Alm(v65, v98) && v98[0] >= 1) {
          Debug_Log_BDS_Alm(0, (uint64_t)v98);
        }
        ++v65;
      }
      while (v65 != 38);
      if (Core_Load_BDS_Health(v92)) {
        Debug_Log_GNSS_Health(0, 5, (unsigned __int8 *)v92);
      }
      if (Core_Load_BDS_BGTO((uint64_t)v95))
      {
        unsigned int v66 = *(_DWORD *)v95;
        if (*(int *)v95 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "OB");
            unsigned int v67 = (unsigned char *)g_CB_GDbg++;
            *unsigned int v67 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v66);
            unsigned int v68 = *(__int16 *)&v95[8];
            uint64_t v69 = (unsigned char *)g_CB_GDbg++;
            *uint64_t v69 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v68);
            unsigned int v70 = *(__int16 *)&v95[10];
            char v71 = (unsigned char *)g_CB_GDbg++;
            *char v71 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v70);
            unsigned int v72 = *(__int16 *)&v95[12];
            unint64_t v73 = (unsigned char *)g_CB_GDbg++;
            unsigned char *v73 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v72);
            unsigned int v74 = *(__int16 *)&v95[14];
            char v75 = (unsigned char *)g_CB_GDbg++;
            *char v75 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v74);
            unsigned int v76 = (__int16)v96;
            int v77 = (unsigned char *)g_CB_GDbg++;
            *int v77 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v76);
            unsigned int v78 = SWORD1(v96);
            char v79 = (unsigned char *)g_CB_GDbg++;
            *char v79 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            sprintf_2d(&g_CB_GDbg, v78);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v95[4]);
            unint64_t v80 = (unsigned char *)g_CB_GDbg++;
            *unint64_t v80 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
              g_CB_GDbg = qword_26AE54870;
            }
            GNB_Debug_Flush_Check();
          }
        }
      }
      DWORD2(v94[0]) = 0;
      *(void *)&v94[0] = 0;
      int v81 = 120;
      v98[0] = 0;
      do
      {
        if (Core_Load_SBAS_Apx(v81, v98, (int *)v94) && v98[0] >= 1) {
          Debug_Log_SBA_Alm(0, v81, v98[0], (unsigned int *)v94);
        }
        ++v81;
      }
      while (v81 != 159);
      v98[0] = 0;
      *(void *)&v94[0] = 0;
      if (Core_Load_Clk_Drift(v98, (double *)v94) && g_Enable_GNB_Debug)
      {
        uint64_t v82 = 0;
        double v83 = *(double *)v94;
        unsigned int v84 = v98[0];
        char v85 = 36;
        uint64_t v86 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v86 + 1);
          *uint64_t v86 = v85;
          uint64_t v86 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
          {
            uint64_t v86 = (char *)qword_26AE54870;
            g_CB_GDbg = qword_26AE54870;
          }
          char v85 = aNd[++v82];
        }
        while (v82 != 4);
        g_CB_GDbg = (uint64_t)(v86 + 1);
        *uint64_t v86 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        sprintf_2d(&g_CB_GDbg, v84);
        uint64_t v87 = (unsigned char *)g_CB_GDbg++;
        *uint64_t v87 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        sprintf_11f9(&g_CB_GDbg, v83 * 1000000.0);
        uint64_t v88 = (unsigned char *)g_CB_GDbg++;
        unsigned char *v88 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        GNB_Debug_Flush_Check();
      }
    }
    Debug_Log_NV_End();
  }
}

void Debug_Log_NV_End(void)
{
  if (g_Enable_GNB_Debug)
  {
    unint64_t v0 = (char *)g_CB_GDbg;
    char v1 = 36;
    uint64_t v2 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v0 + 1);
      *unint64_t v0 = v1;
      unint64_t v0 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        unint64_t v0 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v1 = aN[v2++];
    }
    while (v2 != 6);
    g_CB_GDbg = (uint64_t)(v0 + 1);
    *unint64_t v0 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Eph(uint64_t a1, signed int a2, uint64_t a3)
{
  if (g_Enable_GNB_Debug)
  {
    if (a2 <= 192) {
      char v5 = 71;
    }
    else {
      char v5 = 81;
    }
    sprintf_NA_E_header(a1, v5);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v7 = *(_DWORD *)a3;
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    for (uint64_t i = 0; i != 63; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 8 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    size_t v11 = (unsigned char *)g_CB_GDbg++;
    *size_t v11 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Alm(uint64_t a1, signed int a2, uint64_t a3)
{
  if (g_Enable_GNB_Debug)
  {
    if (a2 <= 192) {
      char v5 = 71;
    }
    else {
      char v5 = 81;
    }
    sprintf_NA_A_header(a1, v5);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v7 = *(_DWORD *)a3;
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(__int16 *)(a3 + 8);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    size_t v11 = (unsigned char *)g_CB_GDbg++;
    *size_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    for (uint64_t i = 0; i != 24; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 10 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    size_t v13 = (unsigned char *)g_CB_GDbg++;
    *size_t v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GNSS_Health(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(a1, "H");
    unsigned int v5 = 32;
    int v6 = 1;
    char v7 = 71;
    switch(a2)
    {
      case 1:
        break;
      case 2:
        unsigned int v5 = 24;
        char v7 = 82;
        break;
      case 3:
        unsigned int v5 = 10;
        char v7 = 81;
        break;
      case 5:
        unsigned int v5 = 37;
        char v7 = 66;
        break;
      case 6:
        unsigned int v5 = 36;
        char v7 = 69;
        break;
      default:
        int v6 = 0;
        unsigned int v5 = 0;
        char v7 = 88;
        break;
    }
    unsigned int v8 = (char *)g_CB_GDbg++;
    *unsigned int v8 = v7;
    unsigned int v9 = (unsigned char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      unsigned int v9 = (unsigned char *)qword_26AE54870;
    }
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *unsigned int v9 = 32;
    char v10 = (unsigned char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
    {
      char v10 = (unsigned char *)qword_26AE54870;
      g_CB_GDbg = qword_26AE54870;
    }
    if (v6)
    {
      if (v5 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v5;
      }
      do
      {
        unsigned int v12 = *a3++;
        sprintf1da(&g_CB_GDbg, v12, v13, 0, 0);
        --v11;
      }
      while (v11);
      char v10 = (unsigned char *)g_CB_GDbg;
    }
    g_CB_GDbg = (uint64_t)(v10 + 1);
    *char v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_UTC(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(a1, "UG");
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    int v6 = (unsigned char *)g_CB_GDbg++;
    *int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 17);
    unsigned int v12 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(char *)(a2 + 18);
    uint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 19);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(unsigned __int8 *)(a2 + 20);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(char *)(a2 + 21);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    signed int v21 = (unsigned char *)g_CB_GDbg++;
    *signed int v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_Klob(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(a1, "KG");
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(char *)(a2 + 8);
    int v6 = (unsigned char *)g_CB_GDbg++;
    *int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(char *)(a2 + 9);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(char *)(a2 + 10);
    char v10 = (unsigned char *)g_CB_GDbg++;
    *char v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(char *)(a2 + 11);
    unsigned int v12 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(char *)(a2 + 12);
    uint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(char *)(a2 + 13);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(char *)(a2 + 14);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(char *)(a2 + 15);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    signed int v21 = (unsigned char *)g_CB_GDbg++;
    *signed int v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GLO_Eph(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(a1, 82);
    unsigned int v5 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v6 = *(_DWORD *)a3;
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(_DWORD *)(a3 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int16 *)(a3 + 60);
    unsigned int v11 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    for (uint64_t i = 12; i != 60; i += 4)
    {
      unsigned int v13 = (unsigned char *)g_CB_GDbg++;
      *unsigned int v13 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
        g_CB_GDbg = qword_26AE54870;
      }
      unint64_t v14 = *(unsigned int *)(a3 + i);
      v16[0] = hexTABLE[v14 >> 28];
      v16[1] = hexTABLE[(v14 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v14, v16, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GLO_Alm(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(a1, 82);
    unsigned int v5 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v6 = *(_DWORD *)a3;
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a3 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    for (uint64_t i = 0; i != 24; i += 4)
    {
      unsigned int v11 = (unsigned char *)g_CB_GDbg++;
      *unsigned int v11 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
        g_CB_GDbg = qword_26AE54870;
      }
      unint64_t v12 = *(unsigned int *)(a3 + 12 + i);
      v14[0] = hexTABLE[v12 >> 28];
      v14[1] = hexTABLE[(v12 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v12, v14, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GAL_Eph(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(a1, 69);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(__int16 *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 14);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 15);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 18);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 20);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 24));
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 28));
    unsigned int v19 = *(_DWORD *)(a2 + 32);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 36);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v21);
    unsigned int v23 = *(_DWORD *)(a2 + 40);
    int64_t v24 = (unsigned char *)g_CB_GDbg++;
    *int64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v23);
    unsigned int v25 = *(_DWORD *)(a2 + 44);
    unsigned int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 48);
    unint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v27);
    unsigned int v29 = *(__int16 *)(a2 + 50);
    signed int v30 = (unsigned char *)g_CB_GDbg++;
    *signed int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v29);
    unsigned int v31 = *(__int16 *)(a2 + 52);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v31);
    unsigned int v33 = *(__int16 *)(a2 + 54);
    int64x2_t v34 = (unsigned char *)g_CB_GDbg++;
    *int64x2_t v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v33);
    unsigned int v35 = *(__int16 *)(a2 + 56);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v35);
    unsigned int v37 = *(__int16 *)(a2 + 58);
    unint64_t v38 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v37);
    unsigned int v39 = *(__int16 *)(a2 + 60);
    unsigned int v40 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v39);
    unsigned int v41 = *(__int16 *)(a2 + 62);
    unsigned int v42 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v41);
    unsigned int v43 = *(_DWORD *)(a2 + 64);
    unsigned int v44 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v43);
    unsigned int v45 = *(_DWORD *)(a2 + 68);
    unsigned int v46 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v45);
    unsigned int v47 = *(__int16 *)(a2 + 72);
    unsigned int v48 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v47);
    unsigned int v49 = *(unsigned __int16 *)(a2 + 74);
    unsigned int v50 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v49);
    unsigned int v51 = *(__int16 *)(a2 + 76);
    char v52 = (unsigned char *)g_CB_GDbg++;
    *char v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v51);
    unsigned int v53 = *(__int16 *)(a2 + 78);
    unsigned int v54 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v53);
    unsigned int v55 = *(unsigned __int8 *)(a2 + 80);
    unsigned int v56 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v55);
    unsigned int v57 = *(unsigned __int8 *)(a2 + 81);
    unsigned int v58 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v57);
    unsigned int v59 = *(unsigned __int8 *)(a2 + 82);
    unsigned int v60 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v60 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v59);
    unsigned int v61 = *(unsigned __int8 *)(a2 + 83);
    unsigned int v62 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v62 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v61);
    unsigned int v63 = *(unsigned __int8 *)(a2 + 84);
    BOOL v64 = (unsigned char *)g_CB_GDbg++;
    *BOOL v64 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v63);
    unsigned int v65 = *(unsigned __int8 *)(a2 + 85);
    unsigned int v66 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v66 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v65);
    unsigned int v67 = *(unsigned __int8 *)(a2 + 86);
    unsigned int v68 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v68 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v67);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    uint64_t v69 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v69 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GAL_Alm(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(a1, 69);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a2 + 9);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(__int16 *)(a2 + 10);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a2 + 12);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(__int16 *)(a2 + 14);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 16);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(__int16 *)(a2 + 18);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(__int16 *)(a2 + 20);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    unsigned int v21 = *(__int16 *)(a2 + 22);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v21);
    unsigned int v23 = *(__int16 *)(a2 + 24);
    int64_t v24 = (unsigned char *)g_CB_GDbg++;
    *int64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 26);
    unsigned int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 28);
    unint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v27);
    unsigned int v29 = *(__int16 *)(a2 + 30);
    signed int v30 = (unsigned char *)g_CB_GDbg++;
    *signed int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v29);
    unsigned int v31 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v31);
    unsigned int v33 = *(unsigned __int8 *)(a2 + 33);
    int64x2_t v34 = (unsigned char *)g_CB_GDbg++;
    *int64x2_t v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v33);
    unsigned int v35 = *(unsigned __int8 *)(a2 + 34);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v37 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_BDS_Eph(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(a1, 66);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(__int16 *)(a2 + 16);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 18);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int8 *)(a2 + 19);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 20);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(unsigned __int8 *)(a2 + 21);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(unsigned __int8 *)(a2 + 22);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 24);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v21);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 28));
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 32));
    unsigned int v23 = *(_DWORD *)(a2 + 36);
    int64_t v24 = (unsigned char *)g_CB_GDbg++;
    *int64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v23);
    unsigned int v25 = *(_DWORD *)(a2 + 40);
    unsigned int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v25);
    unsigned int v27 = *(_DWORD *)(a2 + 44);
    unint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v27);
    unsigned int v29 = *(__int16 *)(a2 + 48);
    signed int v30 = (unsigned char *)g_CB_GDbg++;
    *signed int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v29);
    unsigned int v31 = *(__int16 *)(a2 + 50);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v31);
    unsigned int v33 = *(_DWORD *)(a2 + 52);
    int64x2_t v34 = (unsigned char *)g_CB_GDbg++;
    *int64x2_t v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v33);
    unsigned int v35 = *(_DWORD *)(a2 + 56);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v35);
    unsigned int v37 = *(_DWORD *)(a2 + 60);
    unint64_t v38 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v37);
    unsigned int v39 = *(_DWORD *)(a2 + 64);
    unsigned int v40 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v39);
    unsigned int v41 = *(_DWORD *)(a2 + 68);
    unsigned int v42 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v41);
    unsigned int v43 = *(_DWORD *)(a2 + 72);
    unsigned int v44 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v43);
    unsigned int v45 = *(_DWORD *)(a2 + 76);
    unsigned int v46 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v45);
    unsigned int v47 = *(_DWORD *)(a2 + 80);
    unsigned int v48 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v47);
    unsigned int v49 = *(_DWORD *)(a2 + 84);
    unsigned int v50 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v49);
    unsigned int v51 = *(__int16 *)(a2 + 88);
    char v52 = (unsigned char *)g_CB_GDbg++;
    *char v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v51);
    unsigned int v53 = *(__int16 *)(a2 + 90);
    unsigned int v54 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v53);
    unsigned int v55 = *(__int16 *)(a2 + 92);
    unsigned int v56 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v55);
    unsigned int v57 = *(_DWORD *)(a2 + 96);
    unsigned int v58 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v57);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v59 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v59 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_BDS_Alm(uint64_t a1, uint64_t a2)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(a1, 66);
    unsigned int v3 = *(_DWORD *)a2;
    unsigned int v4 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v3);
    unsigned int v5 = *(__int16 *)(a2 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a2 + 10);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 11);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(_DWORD *)(a2 + 20);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a2 + 24);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a2 + 28);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a2 + 32);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v21);
    unsigned int v23 = *(__int16 *)(a2 + 36);
    int64_t v24 = (unsigned char *)g_CB_GDbg++;
    *int64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v23);
    unsigned int v25 = *(__int16 *)(a2 + 38);
    unsigned int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v25);
    unsigned int v27 = *(__int16 *)(a2 + 40);
    unint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v27);
    unsigned int v29 = *(unsigned __int8 *)(a2 + 42);
    signed int v30 = (unsigned char *)g_CB_GDbg++;
    *signed int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v29);
    unsigned int v31 = *(unsigned __int8 *)(a2 + 43);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v31);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    unsigned int v33 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v33 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_SBA_Alm(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(a1, 83);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a3);
    unsigned int v9 = *a4;
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = a4[1];
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = a4[2];
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

uint64_t sprintf_NA_x_header(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    unsigned int v3 = (char *)qword_26AE54870;
  }
  if (result) {
    char v4 = 65;
  }
  else {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  unsigned int v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
  {
    unsigned int v5 = (unsigned char *)qword_26AE54870;
    g_CB_GDbg = qword_26AE54870;
  }
  char v6 = *a2;
  if (*a2)
  {
    unsigned int v7 = a2 + 1;
    do
    {
      g_CB_GDbg = (uint64_t)(v5 + 1);
      *unsigned int v5 = v6;
      unsigned int v5 = (unsigned char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        unsigned int v5 = (unsigned char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      int v8 = *v7++;
      char v6 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sprintf_NA_E_header(uint64_t result, char a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    unsigned int v3 = (char *)qword_26AE54870;
  }
  if (result == 1) {
    char v4 = 65;
  }
  else {
    char v4 = 69;
  }
  if (!result) {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  unsigned int v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    unsigned int v5 = (unsigned char *)qword_26AE54870;
  }
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *unsigned int v5 = 69;
  char v6 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    char v6 = (unsigned char *)qword_26AE54870;
  }
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *char v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    g_CB_GDbg = qword_26AE54870;
  }
  return result;
}

void Debug_Log_SBA_Eph(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(a1, 83);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    int v8 = (unsigned char *)g_CB_GDbg++;
    *int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a3);
    unsigned int v9 = *(_DWORD *)a4;
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(unsigned __int16 *)(a4 + 8);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int8 *)(a4 + 10);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = *(_DWORD *)(a4 + 12);
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v15);
    unsigned int v17 = *(_DWORD *)(a4 + 16);
    unsigned int v18 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v17);
    unsigned int v19 = *(_DWORD *)(a4 + 20);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v19);
    unsigned int v21 = *(_DWORD *)(a4 + 24);
    unsigned int v22 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v21);
    unsigned int v23 = *(_DWORD *)(a4 + 28);
    int64_t v24 = (unsigned char *)g_CB_GDbg++;
    *int64_t v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v23);
    unsigned int v25 = *(_DWORD *)(a4 + 32);
    unsigned int v26 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v25);
    unsigned int v27 = *(_DWORD *)(a4 + 36);
    unint64_t v28 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v27);
    unsigned int v29 = *(_DWORD *)(a4 + 40);
    signed int v30 = (unsigned char *)g_CB_GDbg++;
    *signed int v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v29);
    unsigned int v31 = *(_DWORD *)(a4 + 44);
    uint64_t v32 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v31);
    unsigned int v33 = *(_DWORD *)(a4 + 48);
    int64x2_t v34 = (unsigned char *)g_CB_GDbg++;
    *int64x2_t v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v33);
    unsigned int v35 = *(_DWORD *)(a4 + 52);
    uint64_t v36 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a4 + 4));
    unsigned int v37 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

uint64_t sprintf_NA_A_header(uint64_t result, char a2)
{
  uint64_t v2 = (unsigned char *)g_CB_GDbg++;
  *uint64_t v2 = 36;
  unsigned int v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    unsigned int v3 = (char *)qword_26AE54870;
  }
  if (result) {
    char v4 = 65;
  }
  else {
    char v4 = 78;
  }
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *unsigned int v3 = v4;
  unsigned int v5 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    unsigned int v5 = (unsigned char *)qword_26AE54870;
  }
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *unsigned int v5 = 65;
  char v6 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    char v6 = (unsigned char *)qword_26AE54870;
  }
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *char v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    g_CB_GDbg = qword_26AE54870;
  }
  return result;
}

void Debug_Log_TM_FCP_OS_Time_ms(unsigned int a1, unsigned int a2)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v3 = 0;
    char v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *char v4 = v5;
      char v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v4 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v5 = str_8_1[++v3];
    }
    while (v3 != 4);
    sprintf_sp1u(&g_CB_GDbg, a1);
    sprintf_sp1u(&g_CB_GDbg, a2);
    char v6 = (unsigned char *)g_CB_GDbg++;
    *char v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_Ref_Time(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_9_5[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    unsigned int v7 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v9 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int16 *)(a1 + 10);
    unsigned int v11 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_EFSP_Time(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v2 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v3 = str_10_3[v4++];
    }
    while (v4 != 6);
    sprintf_11f9(&g_CB_GDbg, *(double *)a1);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    unsigned int v9 = *(_DWORD *)(a1 + 16);
    unsigned int v10 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v9);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
    unint64_t v12 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v11);
    unsigned int v13 = *(unsigned __int8 *)(a1 + 24);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v13);
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_TOW_Assist(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
    if (*(unsigned char *)(a1 + 4))
    {
      int v3 = 0;
      unsigned int v4 = 0;
      if (v2 >= 0xD) {
        unsigned int v5 = 12;
      }
      else {
        unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      }
      if (v2 < 0xD) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
      do
      {
        uint64_t v7 = 0;
        unsigned int v8 = (char *)g_CB_GDbg;
        char v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *unsigned int v8 = v9;
          unsigned int v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
          {
            unsigned int v8 = (char *)qword_26AE54870;
            g_CB_GDbg = qword_26AE54870;
          }
          char v9 = str_11_2[++v7];
        }
        while (v7 != 4);
        ++v3;
        sprintf_sp1d(&g_CB_GDbg, v6);
        sprintf_sp1d(&g_CB_GDbg, v3);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)a1);
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a1 + 4));
        unsigned int v10 = v5 - v4;
        if (v5 > v4)
        {
          unsigned int v11 = (unsigned __int8 *)(a1 + 11 + 6 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(unsigned __int16 *)(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf1da(&g_CB_GDbg, *(v11 - 1), v14, 0, 0);
            unsigned int v12 = *v11;
            v11 += 6;
            sprintf1da(&g_CB_GDbg, v12, v14, 0, 0);
            --v10;
          }
          while (v10);
          unsigned int v4 = v5;
        }
        unsigned int v13 = (unsigned char *)g_CB_GDbg++;
        *unsigned int v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        GNB_Debug_Flush_Check();
        unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      }
      while (v3 != v6);
    }
  }
}

void Debug_Log_AGPS_Ref_Pos(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    unsigned int v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    uint64_t v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *unsigned int v2 = v3;
      unsigned int v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        unsigned int v2 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v3 = str_13_1[v4++];
    }
    while (v4 != 6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 32));
    unsigned int v5 = *(__int16 *)(a1 + 40);
    int v6 = (unsigned char *)g_CB_GDbg++;
    *int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 42);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 64));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 68));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)a1);
    char v9 = (char *)g_CB_GDbg;
    char v10 = 32;
    uint64_t v11 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v9 + 1);
      *char v9 = v10;
      char v9 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v9 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v10 = str_14_1[v11++];
    }
    while (v11 != 4);
    sprintf_1X((char **)&g_CB_GDbg, *(void *)(a1 + 72));
    unsigned int v12 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGPS_Acq_Ass(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
    if (*(unsigned char *)(a1 + 4))
    {
      int v3 = 0;
      int v4 = 0;
      unsigned int v5 = (v2 - 1) >> 2;
      if (v2 >= 4) {
        int v6 = 4;
      }
      else {
        int v6 = *(unsigned __int8 *)(a1 + 4);
      }
      uint64_t v15 = a1 + 18;
      do
      {
        uint64_t v7 = 0;
        unsigned int v8 = (char *)g_CB_GDbg;
        char v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *unsigned int v8 = v9;
          unsigned int v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
          {
            unsigned int v8 = (char *)qword_26AE54870;
            g_CB_GDbg = qword_26AE54870;
          }
          char v9 = str_15_1[++v7];
        }
        while (v7 != 4);
        sprintf_sp1d(&g_CB_GDbg, v5 + 1);
        sprintf_sp1d(&g_CB_GDbg, v3 + 1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)a1);
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a1 + 4));
        int v10 = v6 - v4;
        if (v6 > v4)
        {
          uint64_t v11 = (unsigned __int8 *)(v15 + 14 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 12));
            sprintf_sp1d(&g_CB_GDbg, *((__int16 *)v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 8));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 7));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 2));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 1));
            int v12 = *v11;
            v11 += 14;
            sprintf_sp1d(&g_CB_GDbg, v12);
            --v10;
          }
          while (v10);
          int v4 = v6;
        }
        unsigned int v13 = (unsigned char *)g_CB_GDbg++;
        *unsigned int v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        GNB_Debug_Flush_Check();
        if (v6 + 4 >= *(unsigned __int8 *)(a1 + 4)) {
          int v6 = *(unsigned __int8 *)(a1 + 4);
        }
        else {
          v6 += 4;
        }
      }
      while (v3++ != v5);
    }
  }
}

void Debug_Log_AGNSS_Ref_Time(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    int v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *int v3 = v4;
      int v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        int v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_16_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *int v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    char v9 = (unsigned char *)g_CB_GDbg++;
    *char v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(_DWORD *)(a1 + 12);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = *(unsigned __int16 *)(a1 + 16);
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unint64_t v14 = (unsigned char *)g_CB_GDbg++;
    *unint64_t v14 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGNSS_Time_Model(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    int v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *int v3 = v4;
      int v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        int v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_18_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *int v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
    char v9 = (unsigned char *)g_CB_GDbg++;
    *char v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(_DWORD *)(a1 + 12);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = *(char *)(a1 + 20);
    uint64_t v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = *(char *)(a1 + 21);
    unsigned int v17 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *(_DWORD *)(a1 + 24);
    unsigned int v19 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v18);
    sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a1 + 28));
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGNSS_Acq_Ass(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 13);
    if (*(unsigned char *)(a1 + 13))
    {
      int v3 = 0;
      int v4 = 0;
      unsigned int v5 = (v2 - 1) >> 2;
      if (v2 >= 4) {
        int v6 = 4;
      }
      else {
        int v6 = *(unsigned __int8 *)(a1 + 13);
      }
      uint64_t v15 = a1 + 32;
      do
      {
        uint64_t v7 = 0;
        unsigned int v8 = (char *)g_CB_GDbg;
        char v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *unsigned int v8 = v9;
          unsigned int v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
          {
            unsigned int v8 = (char *)qword_26AE54870;
            g_CB_GDbg = qword_26AE54870;
          }
          char v9 = str_19_0[++v7];
        }
        while (v7 != 4);
        sprintf_sp1d(&g_CB_GDbg, v5 + 1);
        sprintf_sp1d(&g_CB_GDbg, v3 + 1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)a1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 4));
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a1 + 8));
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(a1 + 13));
        int v10 = v6 - v4;
        if (v6 > v4)
        {
          uint64_t v11 = (unsigned __int8 *)(v15 + 20 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *((_DWORD *)v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 12));
            sprintf_sp1d(&g_CB_GDbg, *((__int16 *)v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 8));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 7));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 1));
            int v12 = *v11;
            v11 += 20;
            sprintf_sp1d(&g_CB_GDbg, v12);
            --v10;
          }
          while (v10);
          int v4 = v6;
        }
        unsigned int v13 = (unsigned char *)g_CB_GDbg++;
        *unsigned int v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        GNB_Debug_Flush_Check();
        if (v6 + 4 >= *(unsigned __int8 *)(a1 + 13)) {
          int v6 = *(unsigned __int8 *)(a1 + 13);
        }
        else {
          v6 += 4;
        }
      }
      while (v3++ != v5);
    }
  }
}

void Debug_Log_AGNSS_Bad_SV_List(unsigned int a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)g_CB_GDbg;
    char v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *uint64_t v7 = v8;
      uint64_t v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v7 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v8 = str_20_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, a1);
    if (a1)
    {
      uint64_t v9 = a1;
      do
      {
        int v10 = (unsigned char *)g_CB_GDbg++;
        *int v10 = 32;
        uint64_t v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
        {
          uint64_t v11 = (char *)qword_26AE54870;
          g_CB_GDbg = qword_26AE54870;
        }
        int v12 = *a2;
        if (*a2 > 15)
        {
          switch(v12)
          {
            case 16:
              char v14 = 81;
              break;
            case 32:
              char v14 = 82;
              break;
            case 64:
              char v14 = 66;
              break;
            default:
LABEL_21:
              EvCrt_Illegal_Default("Debug_Log_AGNSS_Bad_SV_List", 0x6E8u);
              uint64_t v11 = (char *)g_CB_GDbg;
              char v14 = 88;
              break;
          }
        }
        else
        {
          int v13 = v12 - 1;
          char v14 = 71;
          switch(v13)
          {
            case 0:
              break;
            case 1:
              char v14 = 69;
              break;
            case 3:
              char v14 = 83;
              break;
            case 7:
              char v14 = 77;
              break;
            default:
              goto LABEL_21;
          }
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *uint64_t v11 = v14;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        unsigned int v15 = *a3++;
        sprintf1da(&g_CB_GDbg, v15, v17, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGNSS_Not_Brd_SV_List(unsigned int a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)g_CB_GDbg;
    char v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *uint64_t v7 = v8;
      uint64_t v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v7 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v8 = str_21_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, a1);
    if (a1)
    {
      uint64_t v9 = a1;
      do
      {
        int v10 = (unsigned char *)g_CB_GDbg++;
        *int v10 = 32;
        uint64_t v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
        {
          uint64_t v11 = (char *)qword_26AE54870;
          g_CB_GDbg = qword_26AE54870;
        }
        int v12 = *a2;
        if (*a2 > 15)
        {
          switch(v12)
          {
            case 16:
              char v14 = 81;
              break;
            case 32:
              char v14 = 82;
              break;
            case 64:
              char v14 = 66;
              break;
            default:
LABEL_21:
              EvCrt_Illegal_Default("Debug_Log_AGNSS_Not_Brd_SV_List", 0x71Au);
              uint64_t v11 = (char *)g_CB_GDbg;
              char v14 = 88;
              break;
          }
        }
        else
        {
          int v13 = v12 - 1;
          char v14 = 71;
          switch(v13)
          {
            case 0:
              break;
            case 1:
              char v14 = 69;
              break;
            case 3:
              char v14 = 83;
              break;
            case 7:
              char v14 = 77;
              break;
            default:
              goto LABEL_21;
          }
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *uint64_t v11 = v14;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        unsigned int v15 = *a3++;
        sprintf1da(&g_CB_GDbg, v15, v17, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    unsigned int v16 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v16 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_RTI_Bad_SV_List(unsigned int a1, _DWORD *a2, unsigned __int8 *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)g_CB_GDbg;
    char v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *uint64_t v7 = v8;
      uint64_t v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v7 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v8 = str_22_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, a1);
    if (a1)
    {
      uint64_t v9 = a1;
      do
      {
        int v10 = (unsigned char *)g_CB_GDbg++;
        *int v10 = 32;
        uint64_t v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
        {
          uint64_t v11 = (char *)qword_26AE54870;
          g_CB_GDbg = qword_26AE54870;
        }
        char v12 = 71;
        switch(*a2)
        {
          case 1:
            break;
          case 2:
            char v12 = 82;
            break;
          case 4:
            char v12 = 81;
            break;
          case 8:
            char v12 = 83;
            break;
          default:
            EvCrt_Illegal_Default("Debug_Log_GPS_RTI_Bad_SV_List", 0x74Bu);
            uint64_t v11 = (char *)g_CB_GDbg;
            char v12 = 88;
            break;
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *uint64_t v11 = v12;
        if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
          g_CB_GDbg = qword_26AE54870;
        }
        unsigned int v13 = *a3++;
        sprintf1da(&g_CB_GDbg, v13, v15, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    char v14 = (unsigned char *)g_CB_GDbg++;
    *char v14 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_GPS_EE_Start_Time(unsigned int a1, unsigned int a2)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v3 = 0;
    int v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *int v4 = v5;
      int v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        int v4 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v5 = str_23_1[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_AGLON_ChanNum(unsigned int a1, unsigned int a2)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v3 = 0;
    int v4 = (char *)g_CB_GDbg;
    char v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *int v4 = v5;
      int v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        int v4 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v5 = str_24[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *int v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    uint64_t v6 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a2);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_DMS(unsigned int *a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_25_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    int v10 = (unsigned char *)g_CB_GDbg++;
    *int v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_UAC(unsigned int *a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_26_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    int v10 = (unsigned char *)g_CB_GDbg++;
    *int v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_FIV(unsigned int *a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *uint64_t v3 = v4;
      uint64_t v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_27_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *uint64_t v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = a1[1];
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = a1[2];
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    int v10 = (unsigned char *)g_CB_GDbg++;
    *int v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_SES(unsigned int a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v1 = 0;
    uint64_t v2 = (char *)g_CB_GDbg;
    char v3 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *uint64_t v2 = v3;
      uint64_t v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        uint64_t v2 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v3 = str_28_1[++v1];
    }
    while (v1 != 4);
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *uint64_t v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, a1);
    char v4 = (unsigned char *)g_CB_GDbg++;
    *char v4 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Alt(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_29_2[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_MapV(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_30_2[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    for (uint64_t i = 8; i != 32; i += 8)
    {
      uint64_t v7 = (unsigned char *)g_CB_GDbg++;
      *uint64_t v7 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
        g_CB_GDbg = qword_26AE54870;
      }
      sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + i));
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 40));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    unsigned int v10 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    unsigned int v12 = *(unsigned __int8 *)(a1 + 65);
    unsigned int v13 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v12);
    unsigned int v14 = *(unsigned __int8 *)(a1 + 66);
    unsigned int v15 = (unsigned char *)g_CB_GDbg++;
    unsigned char *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v14);
    unsigned int v16 = *(unsigned __int8 *)(a1 + 67);
    unsigned int v17 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v16);
    unsigned int v18 = *(unsigned __int8 *)(a1 + 68);
    unsigned int v19 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v18);
    unsigned int v20 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_SpdC(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_31_1[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = *(_DWORD *)(a1 + 4);
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v8 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_AT_Vel(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_32_2[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_V_Vel(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_33_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Heading(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_34_0[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 16));
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void Debug_Log_ExtA_Tunnel_End_Point(uint64_t a1)
{
  if (g_Enable_GNB_Debug)
  {
    uint64_t v2 = 0;
    char v3 = (char *)g_CB_GDbg;
    char v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *char v3 = v4;
      char v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
      {
        char v3 = (char *)qword_26AE54870;
        g_CB_GDbg = qword_26AE54870;
      }
      char v4 = str_35_1[++v2];
    }
    while (v2 != 4);
    unsigned int v5 = *(_DWORD *)a1;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *char v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v5);
    unsigned int v6 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + 8));
    uint64_t v7 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_11f9(&g_CB_GDbg, *(double *)(a1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 32));
    unsigned int v8 = *(__int16 *)(a1 + 40);
    uint64_t v9 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v8);
    unsigned int v10 = *(unsigned __int8 *)(a1 + 42);
    uint64_t v11 = (unsigned char *)g_CB_GDbg++;
    *uint64_t v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    sprintf_2d(&g_CB_GDbg, v10);
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(a1 + 56));
    unsigned int v12 = (unsigned char *)g_CB_GDbg++;
    *unsigned int v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
      g_CB_GDbg = qword_26AE54870;
    }
    GNB_Debug_Flush_Check();
  }
}

void SB_SBAS_PrePos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a7;
  uint64_t v69 = *MEMORY[0x263EF8340];
  unsigned int v10 = (unsigned __int8 *)(a6 + 6355);
  if (*(unsigned char *)(a3 + 34))
  {
    uint64_t v11 = a1;
    if (*(_DWORD *)(a2 + 176) == *(_DWORD *)(a3 + 1064)) {
      *(unsigned char *)(a1 + 48) = 0;
    }
    int v56 = (int)*(double *)(a1 + 16) + 604800 * *(__int16 *)(a1 + 6);
    unsigned int v12 = (unsigned __int8 *)(a6 + 6232);
    *(_OWORD *)(a6 + 6232) = 0u;
    *(_OWORD *)(a6 + 6248) = 0u;
    *(_OWORD *)(a6 + 6264) = 0u;
    *(_OWORD *)(a6 + 6280) = 0u;
    *(_OWORD *)(a6 + 6296) = 0u;
    *(_OWORD *)(a6 + 6312) = 0u;
    *(_OWORD *)(a6 + 6328) = 0u;
    *(_OWORD *)(a6 + 6343) = 0u;
    memset(v68, 0, 39);
    memset(v67, 0, 39);
    memset(v66, 0, 39);
    int v13 = 6;
    do
    {
      *(_OWORD *)(a6 + 3737) = 0uLL;
      *(_OWORD *)(a6 + 3708) = 0uLL;
      *(_OWORD *)(a6 + 3724) = 0uLL;
      --v13;
    }
    while (v13);
    unsigned int v55 = (unsigned __int8 *)(a6 + 6356);
    unsigned int v14 = (unsigned __int8 *)(a6 + 6238);
    *(void *)(a6 + 4166) = -1;
    *(void *)&long long v15 = -1;
    *((void *)&v15 + 1) = -1;
    *(_OWORD *)(a6 + 4151) = v15;
    *(_OWORD *)(a6 + 4135) = v15;
    uint64_t v51 = a1 + 24;
    uint64_t v50 = a2 + 104;
    uint64_t v16 = a5 + 26688;
    int v17 = 10;
    do
    {
      if (*v10 > 5u) {
        break;
      }
      if (*(_DWORD *)(v16 + 184) == 1)
      {
        uint64_t v18 = *(unsigned __int8 *)(v16 + 180);
        uint64_t v19 = (v18 - 120);
        if (v19 <= 0x26)
        {
          int v63 = 0;
          char v64 = 0;
          memset(v57, 0, sizeof(v57));
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          memset(v62, 0, 30);
          if (Comp_CurrState(0x93A80u, *(__int16 *)(v11 + 6), v16, (uint64_t)v57, *(double *)(v11 + 16), 42290000.0))
          {
            uint64_t v20 = v9;
            uint64_t v21 = v18 + 19;
            DWORD2(v62[1]) = 1;
            uint64_t v22 = v20;
            unsigned int v23 = (unsigned char *)(v20 + v18 + 19);
            int v24 = *v23;
            if (v24 == 157 || v19 == *(unsigned __int8 *)(v11 + 48))
            {
              Comp_AzEl(v51, v50, (uint64_t)v57, v23, (_WORD *)(v22 + 2 * v21 + 178), (void *)(v22 + 8 * v21 + 536), (void *)(v22 + 8 * v21 + 1960));
              LOBYTE(v24) = *(unsigned char *)(v22 + v21);
              uint64_t v11 = a1;
            }
            char v25 = v24;
            if ((char)v24 < 1)
            {
              ++v10[3];
              v67[v19] = 1;
              uint64_t v9 = v22;
            }
            else
            {
              uint64_t v26 = v22 + 2 * v21;
              uint64_t v9 = v22;
              Comp_AA((uint64_t)v57, v25, *(__int16 *)(v26 + 178), v11, a2, a6, v18);
              v68[v19] = 1;
            }
          }
          else
          {
            EvLog_d("SBAS_PrePos: SBAS ephemeris timed-out: ", *(unsigned __int8 *)(v16 + 180));
            *(_DWORD *)(v16 + 184) = 0;
            *(unsigned char *)(v16 + 180) = 0;
            *(_DWORD *)(v16 + 176) = 0;
          }
        }
      }
      v16 += 192;
      --v17;
    }
    while (v17);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 456;
    do
    {
      if (*v10 > 5u) {
        break;
      }
      if (!v68[v28] && !v67[v28] && Core_Load_SBAS_Apx((v28 + 120), &v56, v65))
      {
        char v64 = 0;
        *(void *)&v57[0] = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        memset(v62, 0, 30);
        v30.i64[0] = v65[0];
        v30.i64[1] = v65[1];
        *(float64x2_t *)((char *)v57 + 8) = vcvtq_f64_s64(v30);
        int v63 = 0;
        DWORD2(v62[1]) = 2;
        *((double *)&v57[1] + 1) = (double)v65[2];
        int v31 = *(unsigned __int8 *)(v9 + v28 + 139);
        if (v31 == 157 || v28 == *(unsigned __int8 *)(a1 + 48))
        {
          Comp_AzEl(v51, v50, (uint64_t)v57, (unsigned char *)(v9 + v28 + 139), (_WORD *)(v9 + v29), (void *)(v9 + v27 + 1648), (void *)(v9 + v27 + 3072));
          LOBYTE(v31) = *(unsigned char *)(v9 + v28 + 139);
        }
        if ((char)v31 < 1)
        {
          v67[v28] = 1;
          ++v10[3];
        }
        else
        {
          Comp_AA((uint64_t)v57, v31, *(__int16 *)(v9 + 2 * v28 + 456), a1, a2, a6, (v28 + 120));
          v68[v28] = 1;
        }
      }
      ++v28;
      v27 += 8;
      v29 += 2;
    }
    while (v28 != 39);
    uint64_t v32 = 0;
    uint64_t v33 = a3 + 392;
    do
    {
      if (!*(unsigned char *)(a9 + 33744 + v32) || *(unsigned char *)(v33 + v32))
      {
        if (*(unsigned char *)(v33 + v32 + 227))
        {
          ++v10[3];
          int64x2_t v34 = v67;
        }
        else
        {
          *(unsigned char *)(a6 + v10[2]++ + 6277) = v32 + 120;
          int64x2_t v34 = v66;
        }
        v34[v32] = 1;
      }
      if (v67[v32] || v66[v32])
      {
        SB_SBAS_Remove_SV_in_List(v32 + 120, v10, v12, 6u);
        SB_SBAS_Remove_SV_in_List(v32 + 120, v55, v14, 0x27u);
      }
      ++v32;
    }
    while (v32 != 39);
    if (*(unsigned __int8 *)(a3 + 47) < 3u)
    {
      if ((*(_DWORD *)(a2 + 176) - *(_DWORD *)(a3 + 1064)) >> 6 >= 0x753)
      {
        for (uint64_t i = 0; i != 39; ++i)
        {
          if (!v68[i] && !v67[i] && !v66[i]) {
            *(unsigned char *)(a6 + (*v55)++ + 6238) = i + 120;
          }
        }
      }
      else
      {
        int v41 = *v10;
        int v42 = v10[1];
        if ((v42 + v41) <= 0x13)
        {
          unint64_t v43 = 0;
          do
          {
            if (v42 <= 0x26u)
            {
              int v44 = SBAS_PRIORITY[v43];
              uint64_t v45 = (v44 - 120);
              if (!v68[v45] && !v67[v45] && !v66[v45])
              {
                *(unsigned char *)(a6 + v42 + 6238) = v44;
                LOBYTE(v42) = v10[1] + 1;
                v10[1] = v42;
                int v41 = *v10;
              }
            }
            if (v43 > 0x12) {
              break;
            }
            ++v43;
          }
          while (v41 + v42 < 0x14);
        }
      }
    }
    else
    {
      uint64_t v35 = 0;
      unsigned __int8 v36 = 0;
      *unsigned int v55 = 0;
      uint64_t v37 = a8 + 2720;
      do
      {
        unint64_t v38 = (int *)(v37 + v35);
        if (*(unsigned char *)(v37 + v35) == 6)
        {
          int v39 = *v38;
          if (Is_Legal(*v38))
          {
            if ((int)GM_Gen_SV_Meas_QI(v37 + v35) >= 11)
            {
              uint64_t v40 = BYTE2(v39) - 120;
              if (BYTE2(v39) >= 0x78u && v36 <= 0x26u && !v68[v40] && !v67[v40] && !v66[v40])
              {
                *(unsigned char *)(a6 + v36 + 6238) = BYTE2(v39);
                unsigned __int8 v36 = *v55 + 1;
                *unsigned int v55 = v36;
              }
            }
          }
        }
        v35 += 36;
      }
      while (v35 != 1728);
    }
    unsigned int v47 = (*(unsigned char *)(a1 + 48) + 1);
    if (v47 >= 0x27) {
      LOBYTE(v47) = 39;
    }
    *(unsigned char *)(a1 + 48) = v47;
  }
  else
  {
    *(_DWORD *)unsigned int v10 = 0;
    *(_WORD *)(a7 + 147) = -25187;
    *(void *)(a7 + 139) = 0x9D9D9D9D9D9D9D9DLL;
    memset_pattern16((void *)(a7 + 456), &unk_22BB0C9B0, 0x14uLL);
  }
}

void Comp_AA(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v13 = *(_DWORD *)(a1 + 120);
  unsigned int v14 = (unsigned char *)(a6 + 6355);
  unsigned int v15 = *(unsigned __int8 *)(a6 + 6355) + 76;
  double v16 = Comp_SVrange_Sag_Corr(&v39, v38, (float64x2_t *)(a4 + 24), (float64x2_t *)(a1 + 8));
  uint64_t v17 = 0;
  int v18 = (int)((*(double *)(a5 + 64) - *(double *)(a1 + 56)) * 299792458.0);
  do
  {
    v38[v17 + 2] = *(double *)(a1 + 48 + 8 * v17) - *(double *)(a5 + 16 + 8 * v17);
    unint64_t v19 = v17 + 3;
    --v17;
  }
  while (v19 > 1);
  uint64_t v20 = 0;
  int v21 = (int)v16;
  double v22 = 0.0;
  do
  {
    double v22 = v22 + v39.f64[v20] * v38[v20];
    ++v20;
  }
  while (v20 != 3);
  uint64_t v23 = a6 + 48 * v15;
  double v24 = (v22 + (*(double *)(a5 + 72) - *(double *)(a1 + 64)) * 299792458.0) / -0.190293673;
  double v25 = (double)(v18 + v21) / 299792458.0;
  double v26 = *(double *)(a5 + 96) - v25;
  *(_DWORD *)(v23 + 60) = *(_DWORD *)(a5 + 176);
  *(unsigned char *)(v23 + 64) = 1;
  *(unsigned char *)(v23 + 70) = a7;
  *(unsigned char *)(v23 + 68) = 6;
  *(unsigned char *)(v23 + 72) = v13 == 1;
  *(unsigned char *)(v23 + 73) = v13 == 2;
  *(_WORD *)(v23 + 74) = 256;
  *(_WORD *)(v23 + 76) = (int)(v25 * 2000.0 + 0.5);
  *(_DWORD *)(v23 + 96) = (int)(v25 * 1000000000.0);
  *(_DWORD *)(v23 + 78) = 200;
  double v27 = -0.5;
  if (v24 > 0.0) {
    double v27 = 0.5;
  }
  double v28 = v24 + v27;
  int v29 = (int)v28;
  if (v28 < -2147483650.0) {
    LOWORD(v29) = 0;
  }
  if (v28 <= 2147483650.0) {
    __int16 v30 = v29;
  }
  else {
    __int16 v30 = -1;
  }
  uint64_t v31 = a6 + 48 * v15;
  double v32 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0) {
    double v32 = v26 / 1.5 + -1.0;
  }
  *(_DWORD *)(v31 + 88) = (int)v32;
  uint64_t v33 = (_DWORD *)(v31 + 88);
  *((_WORD *)v33 - 3) = v30;
  *(v33 - 1) = 33562616;
  v33[1] = (int)((v26 + (double)(int)v32 * -1.5) * 1023000.0);
  if ((int)v32 < 0) {
    *uint64_t v33 = (int)v32 + 403200;
  }
  uint64_t v34 = a6 + 48 * v15;
  *(_WORD *)(v34 + 100) = 0;
  *(unsigned char *)(v34 + 102) = -1;
  *(unsigned char *)(v34 + 103) = a2;
  unsigned int v35 = a3 >> 1;
  if (a3 >= 0x169) {
    LOBYTE(v35) = -1;
  }
  *(unsigned char *)(v34 + 104) = v35;
  if (a7 >= 0x78)
  {
    if (v13 == 1) {
      char v36 = 1;
    }
    else {
      char v36 = 2;
    }
    *(unsigned char *)(a6 + a7 - 120 + 6316) += v36;
    uint64_t v37 = *v14;
    *(unsigned char *)(a6 + a7 + 19 + 3996) = v37 + 76;
    *(unsigned char *)(a6 + v37 + 6232) = a7;
    ++*v14;
  }
}

uint64_t SB_SBAS_Remove_SV_in_List(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a2 && a3)
  {
    unsigned int v4 = *a2;
    if (*a2 && v4 <= a4)
    {
      unint64_t v6 = 0;
      char v7 = 0;
      do
      {
        while (a3[v6] == result)
        {
          a3[v6] = 0;
          unint64_t v8 = *a2;
          ++v6;
          char v7 = 1;
          LOBYTE(v4) = *a2;
          if (v6 >= v8) {
            goto LABEL_14;
          }
        }
        ++v6;
      }
      while (v6 < v4);
      LOBYTE(v8) = v4;
      if ((v7 & 1) == 0) {
        return result;
      }
LABEL_14:
      if ((_BYTE)v8)
      {
        unint64_t v9 = 0;
        LODWORD(v10) = 0;
        unsigned __int8 v11 = v8;
        do
        {
          if (a3[v9])
          {
            a3[v10] = a3[v9];
            LODWORD(v10) = v10 + 1;
            unsigned __int8 v11 = *a2;
          }
          ++v9;
        }
        while (v9 < v11);
      }
      else
      {
        unsigned __int8 v11 = 0;
        LODWORD(v10) = 0;
      }
      if (v10 < v11)
      {
        unint64_t v10 = v10;
        do
        {
          if (a3[v10])
          {
            a3[v10] = 0;
            unsigned __int8 v11 = *a2;
          }
          ++v10;
        }
        while (v10 < v11);
      }
      *a2 = v11 - 1;
    }
  }
  return result;
}

uint64_t asn1PE_Status(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    unsigned int v8 = *a2;
    if (v8 >= 3)
    {
      uint64_t v4 = 4;
      *(unsigned char *)(a1 + 16) = 4;
      SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    }
    else
    {
      uint64_t v4 = Asn1Coder::EncodeInteger(a1, 0, 2, v8);
      if (!v4) {
        return v4;
      }
    }
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = v4;
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_UARFCN(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 0x3FFF, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_FrequencyInfo(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v8 = *(_DWORD *)(a1 + 8);
      int v9 = *(_DWORD *)(a1 + 12);
      LODWORD(v10) = *(unsigned __int8 *)(a1 + 16);
    }
    else
    {
      uint64_t v10 = Asn1Coder::EncodeInteger(a1, 0, 1, *a2);
      if (v10)
      {
        uint64_t v4 = v10;
        int v8 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        if (*a2 == 1)
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
          uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(unsigned char *)(a1 + 16))
          {
            int v11 = *(_DWORD *)(a1 + 8);
            int v12 = *(_DWORD *)(a1 + 12);
            LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            uint64_t v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 4));
            uint64_t v4 = v13;
            if (!v13) {
              return v4;
            }
            int v11 = *(_DWORD *)(a1 + 8);
            int v12 = *(_DWORD *)(a1 + 12);
          }
        }
        else if (*a2)
        {
          uint64_t v4 = 4;
          *(unsigned char *)(a1 + 16) = 4;
          int v11 = *(_DWORD *)(a1 + 8);
          int v12 = *(_DWORD *)(a1 + 12);
          LODWORD(v13) = 4;
        }
        else
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
          uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(unsigned char *)(a1 + 16))
          {
            int v11 = *(_DWORD *)(a1 + 8);
            int v12 = *(_DWORD *)(a1 + 12);
            LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
            uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
            if (*(unsigned char *)(a1 + 16))
            {
              int v11 = *(_DWORD *)(a1 + 8);
              int v12 = *(_DWORD *)(a1 + 12);
              LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
            }
            else if (a2[2] && (uint64_t v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 2)), v13))
            {
              uint64_t v4 = v13;
              int v11 = *(_DWORD *)(a1 + 8);
              int v12 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              uint64_t v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 3));
              uint64_t v4 = v13;
              if (!v13) {
                return v4;
              }
              int v11 = *(_DWORD *)(a1 + 8);
              int v12 = *(_DWORD *)(a1 + 12);
            }
          }
        }
        SuplAsn1Logger::TraceError(v13, v11, v12);
        int v8 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a1 + 12);
        LODWORD(v10) = v4;
      }
    }
    SuplAsn1Logger::TraceError(v10, v8, v9);
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = v4;
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_CPICH_Ec_N0(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 63, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_CPICH_RSCP(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_Pathloss(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 46, 173, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_CellParametersID(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_TGSN(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 14, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_PrimaryCCPCH_RSCP(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_TimeslotISCP_List(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 1, 14, a2[2] - *a2);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    if (*((void *)a2 + 1) == *(void *)a2) {
      return 0;
    }
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = Asn1Coder::EncodeInteger(a1, 0, 127, *(unsigned __int8 *)(v8 + v9));
      if (v10) {
        break;
      }
      ++v9;
      uint64_t v8 = *(void *)a2;
      if (v9 >= *((void *)a2 + 1) - *(void *)a2) {
        return 0;
      }
    }
    uint64_t v5 = v10;
    SuplAsn1Logger::TraceError(v10, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
  }
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PE_MeasuredResultsList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 1, 8, -858993459 * ((unint64_t)(a2[1] - *a2) >> 3));
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_84;
  }
  uint64_t v8 = *a2;
  if (a2[1] == *a2) {
    return 0;
  }
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = (unsigned __int8 *)(v8 + 40 * v9);
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *v10);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v38 = *(_DWORD *)(a1 + 8);
      int v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, v10[1]);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v38 = *(_DWORD *)(a1 + 8);
      int v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, v10[2]);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v38 = *(_DWORD *)(a1 + 8);
      int v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    if (*v10)
    {
      uint64_t v11 = asn1PE_FrequencyInfo(a1, (unsigned __int8 *)(v8 + 40 * v9 + 4));
      if (v11)
      {
        uint64_t v5 = v11;
        int v38 = *(_DWORD *)(a1 + 8);
        int v39 = *(_DWORD *)(a1 + 12);
        goto LABEL_83;
      }
    }
    if (v10[1])
    {
      uint64_t v12 = Asn1Coder::EncodeInteger(a1, 0, 127, *(unsigned __int8 *)(v8 + 40 * v9 + 14));
      if (v12)
      {
        uint64_t v5 = v12;
        SuplAsn1Logger::TraceError(v12, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        int v38 = *(_DWORD *)(a1 + 8);
        int v39 = *(_DWORD *)(a1 + 12);
        LODWORD(v11) = v5;
        goto LABEL_83;
      }
    }
    if (v10[2])
    {
      uint64_t v13 = v8 + 40 * v9;
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v15 = *(void *)(v13 + 24);
      double v16 = (uint64_t *)(v13 + 16);
      uint64_t v17 = Asn1Coder::EncodeInteger(a1, 1, 32, 954437177 * ((unint64_t)(v15 - v14) >> 3));
      if (v17)
      {
        uint64_t v5 = v17;
        int v40 = *(_DWORD *)(a1 + 8);
        int v41 = *(_DWORD *)(a1 + 12);
        goto LABEL_82;
      }
      uint64_t v18 = *v16;
      if (v16[1] != *v16) {
        break;
      }
    }
LABEL_53:
    uint64_t v5 = 0;
    ++v9;
    uint64_t v8 = *a2;
    if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3)) {
      return v5;
    }
  }
  unint64_t v19 = 0;
  uint64_t v20 = 24;
  while (1)
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 24));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v34 = *(_DWORD *)(a1 + 8);
      int v35 = *(_DWORD *)(a1 + 12);
      LODWORD(v21) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_81;
    }
    if (*(unsigned char *)(v18 + v20 - 24))
    {
      uint64_t v21 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFFFFF, *(_DWORD *)(v18 + v20 - 20));
      if (v21)
      {
        uint64_t v5 = v21;
        int v34 = *(_DWORD *)(a1 + 8);
        int v35 = *(_DWORD *)(a1 + 12);
        goto LABEL_81;
      }
    }
    uint64_t v22 = v18 + v20;
    uint64_t v23 = Asn1Coder::EncodeInteger(a1, 0, 1, *(char *)(v18 + v20 - 16));
    if (v23)
    {
      uint64_t v5 = v23;
      int v36 = *(_DWORD *)(a1 + 8);
      int v37 = *(_DWORD *)(a1 + 12);
      goto LABEL_80;
    }
    int v24 = *(unsigned __int8 *)(v22 - 16);
    if (!*(unsigned char *)(v22 - 16))
    {
      uint64_t v29 = v18 + v20;
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 8));
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v43 = *(_DWORD *)(a1 + 8);
        int v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v29 - 7));
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v43 = *(_DWORD *)(a1 + 8);
        int v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      uint64_t v30 = v18 + v20;
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 6));
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v43 = *(_DWORD *)(a1 + 8);
        int v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      uint64_t v31 = Asn1Coder::EncodeInteger(a1, 0, 511, *(unsigned __int16 *)(v30 - 4));
      if (v31)
      {
        uint64_t v5 = v31;
        SuplAsn1Logger::TraceError(v31, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        int v43 = *(_DWORD *)(a1 + 8);
        int v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = v5;
        goto LABEL_78;
      }
      if (*(unsigned char *)(v29 - 8))
      {
        uint64_t v28 = asn1PE_CPICH_Ec_N0(a1, *(_WORD *)(v18 + v20 - 2));
        if (v28)
        {
          uint64_t v5 = v28;
          int v43 = *(_DWORD *)(a1 + 8);
          int v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      if (*(unsigned char *)(v29 - 7))
      {
        uint64_t v28 = asn1PE_CPICH_RSCP(a1, *(_WORD *)(v18 + v20));
        if (v28)
        {
          uint64_t v5 = v28;
          int v43 = *(_DWORD *)(a1 + 8);
          int v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      if (*(unsigned char *)(v30 - 6))
      {
        uint64_t v28 = asn1PE_Pathloss(a1, *(unsigned char *)(v18 + v20 + 2));
        if (v28)
        {
          uint64_t v5 = v28;
          int v43 = *(_DWORD *)(a1 + 8);
          int v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      goto LABEL_52;
    }
    if (v24 != 1) {
      break;
    }
    uint64_t v25 = v18 + v20;
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 + 8));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v43 = *(_DWORD *)(a1 + 8);
      int v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v25 + 9));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v43 = *(_DWORD *)(a1 + 8);
      int v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    uint64_t v26 = v18 + v20;
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 + 10));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v43 = *(_DWORD *)(a1 + 8);
      int v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v26 + 11));
    uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      int v43 = *(_DWORD *)(a1 + 8);
      int v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    uint64_t v27 = asn1PE_CellParametersID(a1, *(unsigned char *)(v18 + v20 + 12));
    uint64_t v5 = v27;
    if (v27 || !*(unsigned char *)(v25 + 8))
    {
      int v32 = *(_DWORD *)(a1 + 8);
      int v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    uint64_t v27 = asn1PE_TGSN(a1, *(unsigned char *)(v18 + v20 + 13));
    uint64_t v5 = v27;
    if (v27 || !*(unsigned char *)(v25 + 9))
    {
      int v32 = *(_DWORD *)(a1 + 8);
      int v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    uint64_t v27 = asn1PE_PrimaryCCPCH_RSCP(a1, *(_WORD *)(v18 + v20 + 14));
    uint64_t v5 = v27;
    if (v27 || !*(unsigned char *)(v26 + 10))
    {
      int v32 = *(_DWORD *)(a1 + 8);
      int v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    uint64_t v27 = asn1PE_Pathloss(a1, *(unsigned char *)(v18 + v20 + 16));
    uint64_t v5 = v27;
    if (v27 || !*(unsigned char *)(v26 + 11))
    {
      int v32 = *(_DWORD *)(a1 + 8);
      int v33 = *(_DWORD *)(a1 + 12);
LABEL_51:
      SuplAsn1Logger::TraceError(v27, v32, v33);
      if (v5) {
        goto LABEL_79;
      }
      goto LABEL_52;
    }
    uint64_t v28 = asn1PE_TimeslotISCP_List(a1, (_DWORD *)(v18 + v20 + 24));
    if (v28)
    {
      uint64_t v5 = v28;
      int v43 = *(_DWORD *)(a1 + 8);
      int v44 = *(_DWORD *)(a1 + 12);
      goto LABEL_78;
    }
LABEL_52:
    ++v19;
    uint64_t v18 = *v16;
    v20 += 72;
    if (v19 >= 0x8E38E38E38E38E39 * ((v16[1] - *v16) >> 3)) {
      goto LABEL_53;
    }
  }
  if (v24 == 255)
  {
    uint64_t v5 = 1;
    *(unsigned char *)(a1 + 16) = 1;
    int v43 = *(_DWORD *)(a1 + 8);
    int v44 = *(_DWORD *)(a1 + 12);
    LODWORD(v28) = 1;
  }
  else
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v43 = *(_DWORD *)(a1 + 8);
    int v44 = *(_DWORD *)(a1 + 12);
    LODWORD(v28) = 4;
  }
LABEL_78:
  SuplAsn1Logger::TraceError(v28, v43, v44);
LABEL_79:
  int v36 = *(_DWORD *)(a1 + 8);
  int v37 = *(_DWORD *)(a1 + 12);
  LODWORD(v23) = v5;
LABEL_80:
  SuplAsn1Logger::TraceError(v23, v36, v37);
  int v34 = *(_DWORD *)(a1 + 8);
  int v35 = *(_DWORD *)(a1 + 12);
  LODWORD(v21) = v5;
LABEL_81:
  SuplAsn1Logger::TraceError(v21, v34, v35);
  int v40 = *(_DWORD *)(a1 + 8);
  int v41 = *(_DWORD *)(a1 + 12);
  LODWORD(v17) = v5;
LABEL_82:
  SuplAsn1Logger::TraceError(v17, v40, v41);
  int v38 = *(_DWORD *)(a1 + 8);
  int v39 = *(_DWORD *)(a1 + 12);
  LODWORD(v11) = v5;
LABEL_83:
  SuplAsn1Logger::TraceError(v11, v38, v39);
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
  LODWORD(v4) = v5;
LABEL_84:
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PE_WcdmaCellInformation(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 2));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 3));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFFFFF, *((_DWORD *)a2 + 2));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*a2)
  {
    uint64_t v7 = asn1PE_FrequencyInfo(a1, a2 + 12);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (a2[1])
  {
    uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 511, *((unsigned __int16 *)a2 + 11));
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!a2[2]) {
    return 0;
  }
  uint64_t v7 = asn1PE_MeasuredResultsList(a1, (uint64_t *)a2 + 3);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v4;
}

uint64_t asn1PE_NMR(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = Asn1Coder::EncodeInteger(a1, 1, 15, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 2));
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
LABEL_16:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(unsigned char *)(a1 + 16))
      {
        int v13 = *(_DWORD *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_15;
      }
      uint64_t v11 = Asn1Coder::EncodeInteger(a1, 0, 1023, *(_DWORD *)(v8 + v9));
      if (v11)
      {
        uint64_t v5 = v11;
        int v13 = *(_DWORD *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        goto LABEL_15;
      }
      uint64_t v12 = v8 + v9;
      uint64_t v11 = Asn1Coder::EncodeInteger(a1, 0, 63, *(_DWORD *)(v12 + 4));
      if (v11)
      {
        uint64_t v5 = v11;
        int v13 = *(_DWORD *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 12);
        goto LABEL_15;
      }
      uint64_t v11 = Asn1Coder::EncodeInteger(a1, 0, 63, *(_DWORD *)(v12 + 8));
      if (v11) {
        break;
      }
      ++v10;
      uint64_t v8 = *a2;
      v9 += 12;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2)) {
        return 0;
      }
    }
    uint64_t v5 = v11;
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 12);
LABEL_15:
    SuplAsn1Logger::TraceError(v11, v13, v14);
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
    goto LABEL_16;
  }
  return 0;
}

uint64_t asn1PE_GsmCellInformation(uint64_t a1, uint64_t *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 1));
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 1));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 2));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFF, *((unsigned __int16 *)a2 + 3));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFF, *((unsigned __int16 *)a2 + 4));
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = asn1PE_NMR(a1, a2 + 2);
    if (v7)
    {
      uint64_t v4 = v7;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!*((unsigned char *)a2 + 1)) {
    return 0;
  }
  uint64_t v7 = Asn1Coder::EncodeInteger(a1, 0, 255, *((unsigned __int8 *)a2 + 40));
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v4;
}

void ASN1T_CellInfo::~ASN1T_CellInfo(ASN1T_CellInfo *this)
{
  v8[1] = *(void ***)MEMORY[0x263EF8340];
  if (*(unsigned char *)this == 4)
  {
    uint64_t v2 = *((void *)this + 16);
    if (v2)
    {
      v8[0] = (void **)(v2 + 136);
      std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100](v8);
      uint64_t v3 = *(void **)(v2 + 104);
      if (v3)
      {
        *(void *)(v2 + 112) = v3;
        operator delete(v3);
      }
      uint64_t v4 = *(void **)(v2 + 72);
      if (v4)
      {
        *(void *)(v2 + 80) = v4;
        operator delete(v4);
      }
      int v5 = *(void **)(v2 + 48);
      if (v5)
      {
        *(void *)(v2 + 56) = v5;
        operator delete(v5);
      }
      int v6 = *(void **)(v2 + 24);
      if (v6)
      {
        *(void *)(v2 + 32) = v6;
        operator delete(v6);
      }
      MEMORY[0x230F4E5D0](v2, 0x1030C40AD30468BLL);
      *((void *)this + 16) = 0;
    }
  }
  v8[0] = (void **)((char *)this + 80);
  std::vector<ASN1T_MeasuredResults>::__destroy_vector::operator()[abi:ne180100](v8);
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

uint64_t asn1PE_CellInfo(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, v4 == 4);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
  }
  else if (v4 == 4)
  {
    if (*((void *)a2 + 16))
    {
      uint64_t v8 = asn1PE_CellInfo_VER2(a1, (uint64_t)a2);
      uint64_t v5 = v8;
      if (!v8) {
        return v5;
      }
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      uint64_t v5 = 1;
      LODWORD(v8) = 1;
    }
  }
  else
  {
    uint64_t v8 = Asn1Coder::EncodeInteger(a1, 0, 2, *a2 - 1);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      uint64_t v5 = 0;
      switch(*a2)
      {
        case 0u:
          uint64_t v5 = 1;
          *(unsigned char *)(a1 + 16) = 1;
          int v10 = *(_DWORD *)(a1 + 8);
          int v11 = *(_DWORD *)(a1 + 12);
          unsigned int v12 = 1;
          goto LABEL_17;
        case 1u:
          uint64_t v13 = asn1PE_GsmCellInformation(a1, (uint64_t *)a2 + 1);
          goto LABEL_19;
        case 2u:
          uint64_t v13 = asn1PE_WcdmaCellInformation(a1, a2 + 56);
LABEL_19:
          uint64_t v5 = v13;
          if (v13) {
            goto LABEL_20;
          }
          return v5;
        case 3u:
          uint64_t v5 = 1;
          *(unsigned char *)(a1 + 16) = 1;
          int v10 = *(_DWORD *)(a1 + 8);
          int v11 = *(_DWORD *)(a1 + 12);
          unsigned int v12 = 1;
          goto LABEL_17;
        case 4u:
          return v5;
        default:
          uint64_t v5 = 4;
          *(unsigned char *)(a1 + 16) = 4;
          int v10 = *(_DWORD *)(a1 + 8);
          int v11 = *(_DWORD *)(a1 + 12);
          unsigned int v12 = 4;
LABEL_17:
          SuplAsn1Logger::TraceError(v12, v10, v11);
LABEL_20:
          int v6 = *(_DWORD *)(a1 + 8);
          int v7 = *(_DWORD *)(a1 + 12);
          LODWORD(v8) = v5;
          break;
      }
    }
  }
  SuplAsn1Logger::TraceError(v8, v6, v7);
  return v5;
}

uint64_t asn1PE_LocationId(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  uint64_t v7 = asn1PE_CellInfo(a1, a2);
  if (v7)
  {
    uint64_t v4 = v7;
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  uint64_t v7 = asn1PE_Status(a1, a2 + 136);
  uint64_t v4 = v7;
  if (v7)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return v4;
}

uint64_t ASN1T_LocationId::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1 == 4)
  {
    uint64_t v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)uint64_t __str = v4 + 17;
      std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      int v5 = (void *)v4[13];
      if (v5)
      {
        v4[14] = v5;
        operator delete(v5);
      }
      int v6 = (void *)v4[9];
      if (v6)
      {
        v4[10] = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)v4[6];
      if (v7)
      {
        v4[7] = v7;
        operator delete(v7);
      }
      uint64_t v8 = (void *)v4[3];
      if (v8)
      {
        v4[4] = v8;
        operator delete(v8);
      }
      MEMORY[0x230F4E5D0](v4, 0x1030C40AD30468BLL);
      *(void *)(a1 + 128) = 0;
    }
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  switch(*(unsigned char *)a2)
  {
    case 0:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
        goto LABEL_14;
      }
      return a1;
    case 1:
      uint64_t v35 = *(void *)(a2 + 8);
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(void *)(a1 + 8) = v35;
      if (a1 == a2) {
        goto LABEL_60;
      }
      uint64_t v36 = *(void *)(a1 + 40);
      int v37 = *(char **)(a1 + 24);
      int v38 = *(char **)(a2 + 24);
      int v39 = *(unsigned char **)(a2 + 32);
      size_t v40 = v39 - v38;
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v37) >> 2) < v41)
      {
        if (v37)
        {
          *(void *)(a1 + 32) = v37;
          operator delete(v37);
          uint64_t v36 = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
        }
        if (v41 > 0x1555555555555555) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 2);
        uint64_t v43 = 2 * v42;
        if (2 * v42 <= v41) {
          uint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2);
        }
        if (v42 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v44 = 0x1555555555555555;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44 > 0x1555555555555555) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_NMRelement>>(a1 + 40, v44);
        *(void *)(a1 + 32) = v37;
        uint64_t v45 = (void **)(a1 + 32);
        *(void *)(a1 + 24) = v37;
        *(void *)(a1 + 40) = &v37[12 * v46];
        goto LABEL_56;
      }
      uint64_t v45 = (void **)(a1 + 32);
      unsigned int v47 = *(unsigned char **)(a1 + 32);
      if (0xAAAAAAAAAAAAAAABLL * ((v47 - v37) >> 2) >= v41)
      {
LABEL_56:
        if (v39 == v38) {
          goto LABEL_59;
        }
        unsigned int v49 = v37;
        uint64_t v50 = v38;
        goto LABEL_58;
      }
      unsigned int v48 = &v38[4 * ((v47 - v37) >> 2)];
      if (v47 != v37)
      {
        memmove(*(void **)(a1 + 24), *(const void **)(a2 + 24), v47 - v37);
        int v37 = (char *)*v45;
      }
      size_t v40 = v39 - v48;
      if (v39 != v48)
      {
        unsigned int v49 = v37;
        uint64_t v50 = v48;
LABEL_58:
        memmove(v49, v50, v40);
      }
LABEL_59:
      *uint64_t v45 = &v37[v40];
LABEL_60:
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      return a1;
    case 2:
      __int16 v17 = *(_WORD *)(a2 + 56);
      int v18 = *(unsigned __int8 *)(a2 + 58);
      *(unsigned char *)(a1 + 58) = v18;
      *(_WORD *)(a1 + 56) = v17;
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      uint64_t v19 = *(void *)(a2 + 68);
      *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
      *(void *)(a1 + 68) = v19;
      *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
      if (a1 == a2 || v18 != 1) {
        return a1;
      }
      uint64_t v20 = *(void *)(a1 + 96);
      uint64_t v21 = (void **)(a1 + 80);
      uint64_t v22 = *(void *)(a1 + 80);
      int v24 = *(uint64_t **)(a2 + 80);
      uint64_t v23 = *(uint64_t **)(a2 + 88);
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v24);
      if (0xCCCCCCCCCCCCCCCDLL * ((v20 - v22) >> 3) < v25)
      {
        if (v22)
        {
          uint64_t v26 = *(void *)(a1 + 88);
          uint64_t v27 = *(void **)(a1 + 80);
          if (v26 != v22)
          {
            do
            {
              uint64_t v28 = v26 - 40;
              *(void *)uint64_t __str = v26 - 24;
              std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
              uint64_t v26 = v28;
            }
            while (v28 != v22);
            uint64_t v27 = *v21;
          }
          *(void *)(a1 + 88) = v22;
          operator delete(v27);
          uint64_t v20 = 0;
          *uint64_t v21 = 0;
          *(void *)(a1 + 88) = 0;
          *(void *)(a1 + 96) = 0;
        }
        if (v25 > 0x666666666666666) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 3);
        uint64_t v30 = 2 * v29;
        if (2 * v29 <= v25) {
          uint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v24);
        }
        if (v29 >= 0x333333333333333) {
          unint64_t v31 = 0x666666666666666;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31 > 0x666666666666666) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        int v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>>(a1 + 96, v31);
        *(void *)(a1 + 80) = v32;
        *(void *)(a1 + 88) = v32;
        *(void *)(a1 + 96) = &v32[5 * v33];
        int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(a1 + 96, v24, v23, v32);
        goto LABEL_63;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 88) - v22) >> 3) < v25)
      {
        uint64_t v51 = &v24[(*(void *)(a1 + 88) - v22) >> 3];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(v24, v51, *(uint64_t **)(a1 + 80));
        int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(a1 + 96, v51, v23, *(void **)(a1 + 88));
LABEL_63:
        *(void *)(a1 + 88) = v34;
        return a1;
      }
      char v52 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(v24, v23, *(uint64_t **)(a1 + 80));
      unsigned int v53 = *(uint64_t **)(a1 + 88);
      if (v53 != v52)
      {
        do
        {
          unsigned int v54 = v53 - 5;
          *(void *)uint64_t __str = v53 - 3;
          std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          unsigned int v53 = v54;
        }
        while (v54 != v52);
      }
      *(void *)(a1 + 88) = v52;
      return a1;
    case 3:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
LABEL_14:
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "operator=", 515);
        LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
      }
      return a1;
    case 4:
      int v11 = (char *)operator new(0xA0uLL, MEMORY[0x263F8C180]);
      if (!v11)
      {
        *(void *)(a1 + 128) = 0;
        return a1;
      }
      unsigned int v12 = v11;
      *((_DWORD *)v11 + 2) = 0;
      v11[16] = 0;
      *(_OWORD *)(v11 + 24) = 0u;
      uint64_t v13 = v11 + 24;
      *((void *)v12 + 18) = 0;
      *((void *)v12 + 19) = 0;
      *((void *)v12 + 17) = 0;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 82) = 0u;
      *((void *)v12 + 14) = 0;
      *((void *)v12 + 15) = 0;
      *((void *)v12 + 13) = 0;
      *((_DWORD *)v12 + 32) = 0;
      *(_WORD *)unsigned int v12 = -1;
      *(void *)(a1 + 128) = v12;
      uint64_t v14 = *(void *)(a2 + 128);
      if (!v14) {
        return a1;
      }
      *(_WORD *)unsigned int v12 = *(_WORD *)v14;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v14 + 8);
      v12[16] = *(unsigned char *)(v14 + 16);
      uint64_t v15 = v12;
      if (v12 != (char *)v14)
      {
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(v13, *(char **)(v14 + 24), *(char **)(v14 + 32), *(void *)(v14 + 32) - *(void *)(v14 + 24));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)v12 + 6, *(char **)(v14 + 48), *(char **)(v14 + 56), *(void *)(v14 + 56) - *(void *)(v14 + 48));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v12 + 9, *(char **)(v14 + 72), *(char **)(v14 + 80), *(void *)(v14 + 80) - *(void *)(v14 + 72));
        unsigned int v12 = *(char **)(a2 + 128);
        uint64_t v16 = *(void *)(a1 + 128);
        *(_WORD *)(v16 + 96) = *((_WORD *)v12 + 48);
        if ((char *)v16 == v12)
        {
          uint64_t v15 = v12;
        }
        else
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v16 + 104), *((char **)v12 + 13), *((char **)v12 + 14), *((void *)v12 + 14) - *((void *)v12 + 13));
          uint64_t v15 = *(char **)(a2 + 128);
          unsigned int v12 = *(char **)(a1 + 128);
        }
      }
      v12[128] = v15[128];
      uint64_t v55 = *(void *)(a2 + 128);
      uint64_t v56 = *(void *)(a1 + 128);
      *(_WORD *)(v56 + 130) = *(_WORD *)(v55 + 130);
      if (v56 == v55) {
        return a1;
      }
      uint64_t v57 = *(void *)(v56 + 152);
      long long v58 = (void **)(v56 + 136);
      long long v59 = *(void **)(v56 + 136);
      uint64_t v61 = *(void *)(v55 + 136);
      uint64_t v60 = *(void *)(v55 + 144);
      unint64_t v62 = 0xEEEEEEEEEEEEEEEFLL * ((v60 - v61) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((v57 - (uint64_t)v59) >> 3) < v62)
      {
        if (v59)
        {
          int v63 = *(void **)(v56 + 144);
          char v64 = *(void **)(v56 + 136);
          if (v63 != v59)
          {
            do
            {
              v63 -= 15;
              std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v56 + 152, v63);
            }
            while (v63 != v59);
            char v64 = *v58;
          }
          *(void *)(v56 + 144) = v59;
          operator delete(v64);
          uint64_t v57 = 0;
          *long long v58 = 0;
          *(void *)(v56 + 144) = 0;
          *(void *)(v56 + 152) = 0;
        }
        if (v62 > 0x222222222222222) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v65 = 0xEEEEEEEEEEEEEEEFLL * (v57 >> 3);
        uint64_t v66 = 2 * v65;
        if (2 * v65 <= v62) {
          uint64_t v66 = 0xEEEEEEEEEEEEEEEFLL * ((v60 - v61) >> 3);
        }
        if (v65 >= 0x111111111111111) {
          unint64_t v67 = 0x222222222222222;
        }
        else {
          unint64_t v67 = v66;
        }
        if (v67 > 0x222222222222222) {
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        }
        unsigned int v68 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>>(v56 + 152, v67);
        *(void *)(v56 + 136) = v68;
        *(void *)(v56 + 144) = v68;
        *(void *)(v56 + 152) = &v68[30 * v69];
        unsigned int v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(v56 + 152, v61, v60, v68);
        goto LABEL_85;
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(v56 + 144) - (void)v59) >> 3) < v62)
      {
        uint64_t v71 = v61 + 8 * ((uint64_t)(*(void *)(v56 + 144) - (void)v59) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(v61, v71, *(void *)(v56 + 136));
        unsigned int v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(v56 + 152, v71, v60, *(_DWORD **)(v56 + 144));
LABEL_85:
        *(void *)(v56 + 144) = v70;
        return a1;
      }
      uint64_t v72 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(v61, v60, *(void *)(v56 + 136));
      for (uint64_t i = *(void **)(v56 + 144);
            i != (void *)v72;
            std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v56 + 152, i))
      {
        i -= 15;
      }
      *(void *)(v56 + 144) = v72;
      return a1;
    default:
      return a1;
  }
}

void sub_22B8C1464(_Unwind_Exception *a1)
{
  *(void *)(v2 + 144) = v1;
  _Unwind_Resume(a1);
}

void sub_22B8C146C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 144) = v1;
  _Unwind_Resume(a1);
}

void sub_22B8C1474(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void sub_22B8C147C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[11];
  if (v3)
  {
    a2[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[8];
  if (v4)
  {
    a2[9] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a2[5];
  if (v5)
  {
    a2[6] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a2[2];
  if (v6)
  {
    a2[3] = v6;
    operator delete(v6);
  }
}

void std::vector<ASN1T_MeasuredResults>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v7[1] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        v7[0] = (void **)(v4 - 24);
        std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_NMRelement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void *std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    size_t result = std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  unsigned int v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      size_t result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    size_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    size_t result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  size_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  v10[0] = a4;
  v10[1] = a1;
  v10[2] = &v9;
  v10[3] = v10;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *uint64_t v4 = *(_DWORD *)(v6 - 8);
      ASN1T_cgi_Info::ASN1T_cgi_Info((uint64_t)(v4 + 2), (char *)v6);
      v4[28] = *(_DWORD *)(v6 + 104);
      uint64_t v4 = (_DWORD *)(v10[0] + 120);
      v10[0] += 120;
      v6 += 120;
    }
    while (v7 + 120 != a3);
  }
  return v4;
}

void sub_22B8C1B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ASN1T_cgi_Info::ASN1T_cgi_Info(uint64_t a1, char *a2)
{
  char v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(a1 + 8), *((const void **)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(a1 + 32), *((const void **)a2 + 4), *((void *)a2 + 5), *((void *)a2 + 5) - *((void *)a2 + 4));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 56), *((const void **)a2 + 7), *((void *)a2 + 8), *((void *)a2 + 8) - *((void *)a2 + 7));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 80), *((const void **)a2 + 10), *((void *)a2 + 11), *((void *)a2 + 11) - *((void *)a2 + 10));
  return a1;
}

void sub_22B8C1C04(_Unwind_Exception *a1)
{
  gnss::Emergency::Supl::LocationId::~LocationId(v1);
  _Unwind_Resume(a1);
}

void *std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    size_t result = std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      size_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22B8C1CDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    uint64_t v2 = *(void ***)(a1 + 16);
    char v4 = *v2;
    int v5 = (void *)*v3;
    if (*v2 != (void *)*v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 15;
        std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)(a1 + v6);
      *(unsigned char *)(v7 + 8) = *(unsigned char *)(a1 + v6 + 8);
      if (a3 != a1)
      {
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v7 + 16), *(char **)(v8 + 16), *(char **)(v8 + 24), *(void *)(v8 + 24) - *(void *)(v8 + 16));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((void *)(v7 + 40), *(char **)(v8 + 40), *(char **)(v8 + 48), *(void *)(v8 + 48) - *(void *)(v8 + 40));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v7 + 64), *(char **)(v8 + 64), *(char **)(v8 + 72), *(void *)(v8 + 72) - *(void *)(v8 + 64));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v7 + 88), *(char **)(v8 + 88), *(char **)(v8 + 96), *(void *)(v8 + 96) - *(void *)(v8 + 88));
      }
      *(_DWORD *)(v7 + 112) = *(_DWORD *)(v8 + 112);
      v6 += 120;
    }
    while (v8 + 120 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a2);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  char v4 = a4;
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  uint64_t v10 = a4;
  v11[0] = a1;
  v11[1] = &v9;
  v11[2] = &v10;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      *(void *)((char *)v4 + 7) = *(uint64_t *)((char *)v6 + 7);
      *char v4 = v7;
      v4[3] = 0;
      v4[4] = 0;
      v4[2] = 0;
      std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(v4 + 2, v6[2], v6[3], 0x8E38E38E38E38E39 * ((v6[3] - v6[2]) >> 3));
      char v4 = v10 + 5;
      v10 += 5;
      v6 += 5;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_22B8C1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](result, a4);
    size_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22B8C209C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  size_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      *(unsigned char *)(v4 + 8) = *(unsigned char *)(v6 + 8);
      uint64_t v7 = *(void *)(v6 + 16);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      *(void *)(v4 + 16) = v7;
      uint64_t v8 = *(void *)(v6 + 32);
      char v9 = *(unsigned char *)(v6 + 40);
      *(void *)(v4 + 48) = 0;
      uint64_t v10 = (void *)(v4 + 48);
      *((unsigned char *)v10 - 8) = v9;
      *(v10 - 2) = v8;
      v10[1] = 0;
      v10[2] = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v10, *(const void **)(v6 + 48), *(void *)(v6 + 56), *(void *)(v6 + 56) - *(void *)(v6 + 48));
      uint64_t v4 = v13 + 72;
      v13 += 72;
      v6 += 72;
    }
    while (v6 != a3);
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_22B8C22C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sub_22B8C233C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 72;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  v6[1] = *(void ***)MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v4 = v3 - 40;
        v6[0] = (void **)(v3 - 24);
        std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](v6);
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 5)
    {
      uint64_t v6 = *i;
      *(uint64_t *)((char *)a3 + 7) = *(uint64_t *)((char *)i + 7);
      *a3 = v6;
      if (a3 != i)
      {
        uint64_t v8 = (void **)(a3 + 2);
        uint64_t v7 = a3[2];
        uint64_t v10 = i[2];
        uint64_t v9 = i[3];
        unint64_t v11 = 0x8E38E38E38E38E39 * ((v9 - v10) >> 3);
        uint64_t v12 = a3[4];
        if (0x8E38E38E38E38E39 * ((v12 - v7) >> 3) >= v11)
        {
          if (0x8E38E38E38E38E39 * ((a3[3] - v7) >> 3) >= v11)
          {
            uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>((char **)i[2], (char **)i[3], v7);
            for (uint64_t j = a3[3]; j != v18; j -= 72)
            {
              uint64_t v20 = *(void **)(j - 24);
              if (v20)
              {
                *(void *)(j - 16) = v20;
                operator delete(v20);
              }
            }
            a3[3] = v18;
            goto LABEL_22;
          }
          __int16 v17 = (char **)(v10 + 8 * ((a3[3] - v7) >> 3));
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>((char **)i[2], v17, v7);
          uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(a3 + 4), (uint64_t)v17, v9, a3[3]);
        }
        else
        {
          if (v7)
          {
            std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100](a3 + 2);
            operator delete(*v8);
            uint64_t v12 = 0;
            *uint64_t v8 = 0;
            a3[3] = 0;
            a3[4] = 0;
          }
          if (v11 > 0x38E38E38E38E38ELL) {
            std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = 0x8E38E38E38E38E39 * (v12 >> 3);
          uint64_t v14 = 2 * v13;
          if (2 * v13 <= v11) {
            uint64_t v14 = 0x8E38E38E38E38E39 * ((v9 - v10) >> 3);
          }
          if (v13 >= 0x1C71C71C71C71C7) {
            unint64_t v15 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v15 = v14;
          }
          std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](a3 + 2, v15);
          uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(a3 + 4), v10, v9, a3[3]);
        }
        a3[3] = v16;
      }
LABEL_22:
      a3 += 5;
    }
  }
  return a3;
}

void sub_22B8C266C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_22B8C2674(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>(char **a1, char **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1 + 7;
    do
    {
      uint64_t v6 = v5 - 7;
      *(void *)a3 = *(v5 - 7);
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 - 48);
      uint64_t v7 = (uint64_t)*(v5 - 5);
      *(_DWORD *)(a3 + 23) = *(_DWORD *)((char *)v5 - 33);
      *(void *)(a3 + 16) = v7;
      uint64_t v8 = (uint64_t)*(v5 - 3);
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 - 16);
      *(void *)(a3 + 32) = v8;
      if ((char **)a3 != v5 - 7) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a3 + 48), *(v5 - 1), *v5, *v5 - *(v5 - 1));
      }
      a3 += 72;
      v5 += 9;
    }
    while (v6 + 9 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void GNSS_Write_GNB_Ctrl(char **a1)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    if (v2 != *a1)
    {
      if (v2 > *a1) {
        uint64_t v3 = a1[3];
      }
      unsigned __int16 v4 = (_WORD)v3 - (_WORD)v2;
      unsigned int v5 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
      GNB_Debug_BlockMove(a1[1], v5);
      uint64_t v6 = &a1[1][v5];
      a1[1] = v6;
      if (v6 >= a1[3])
      {
        uint64_t v6 = a1[2];
        a1[1] = v6;
        if (v5 == v4)
        {
          unsigned int v7 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(*(_WORD *)a1 - (_WORD)v6), v6);
          GNB_Debug_BlockMove(a1[1], v7);
          uint64_t v6 = &a1[1][v7];
          a1[1] = v6;
        }
      }
      if (v6 == *a1)
      {
        uint64_t v8 = a1[2];
        *a1 = v8;
        a1[1] = v8;
      }
    }
  }
}

void G5K_ME_Send_WakeUp(char **a1)
{
  uint64_t v2 = (*a1)++;
  *uint64_t v2 = 10;
  uint64_t v3 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v3 = a1[2];
  }
  *a1 = v3 + 1;
  *uint64_t v3 = 35;
  unsigned __int16 v4 = *a1;
  if (*a1 >= a1[3]) {
    unsigned __int16 v4 = a1[2];
  }
  uint64_t v5 = 0;
  char v6 = 87;
  unsigned int v7 = v4;
  do
  {
    *a1 = v7 + 1;
    *unsigned int v7 = v6;
    unsigned int v7 = *a1;
    if (*a1 >= a1[3])
    {
      unsigned int v7 = a1[2];
      *a1 = v7;
    }
    char v6 = str_16[++v5];
  }
  while (v5 != 4);
  uint64_t v8 = mach_continuous_time();
  sprintf_sp1u(a1, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8));
  uint64_t v9 = (*a1)++;
  *uint64_t v9 = 32;
  uint64_t v10 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v10 = a1[2];
  }
  for (int i = 0; i != 10; ++i)
  {
    char v12 = 91;
    uint64_t v13 = 1u;
    do
    {
      *a1 = v10 + 1;
      *uint64_t v10 = v12;
      uint64_t v10 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v10 = a1[2];
        *a1 = v10;
      }
      char v12 = str_1_7[v13++];
    }
    while (v13 != 10);
  }
  *a1 = v10 + 1;
  *uint64_t v10 = 32;
  uint64_t v14 = *a1;
  unint64_t v15 = (unint64_t)a1[3];
  if ((unint64_t)*a1 >= v15)
  {
    uint64_t v14 = a1[2];
    *a1 = v14;
  }
  if (v4 == v14)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unsigned __int8 v16 = 0;
    do
    {
      char v18 = *v4++;
      char v17 = v18;
      if ((unint64_t)v4 >= v15) {
        unsigned __int16 v4 = a1[2];
      }
      v16 += v17;
    }
    while (v4 != v14);
    unint64_t v19 = v16;
  }
  *a1 = v14 + 1;
  *uint64_t v14 = 38;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf_02x(a1, v19);
  uint64_t v20 = (*a1)++;
  *uint64_t v20 = 10;
  uint64_t v21 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v21 = a1[2];
  }
  *a1 = v21 + 1;
  *uint64_t v21 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }

  GNSS_Write_GNB_Ctrl(a1);
}

uint64_t G5K_ME_Send_Sleep(char **a1, char **a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  GNSS_Write_GNB_Ctrl(a1);
  GNSS_GNB_Debug_Ctl((uint64_t)a2);
  if (g_Enable_GNB_Debug)
  {
    uint64_t v10 = (*a2)++;
    *uint64_t v10 = 10;
    unint64_t v11 = *a2;
    if (*a2 >= a2[3]) {
      unint64_t v11 = a2[2];
    }
    char v12 = 35;
    uint64_t v13 = 1u;
    do
    {
      *a2 = v11 + 1;
      *unint64_t v11 = v12;
      unint64_t v11 = *a2;
      if (*a2 >= a2[3])
      {
        unint64_t v11 = a2[2];
        *a2 = v11;
      }
      char v12 = str_2_5[v13++];
    }
    while (v13 != 8);
    sprintf_sp1u(a2, a3);
    sprintf_sp1u(a2, a4);
    uint64_t v14 = (*a2)++;
    *uint64_t v14 = 10;
    if (*a2 >= a2[3]) {
      *a2 = a2[2];
    }
  }
  if (a5)
  {
    uint64_t v17 = 0;
    v16[0] = BYTE1(a3);
    v16[1] = a3;
    _OWORD v16[2] = BYTE1(a4);
    v16[3] = a4;
    STEU_Encode_c(a1, 83, 12, v16);
  }
  GNSS_Write_GNB_Ctrl(a1);
  return GNSS_GNB_Debug_Ctl((uint64_t)a2);
}

void G5K_ME_Send_Ctrl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v203[103] = *MEMORY[0x263EF8340];
  uint64_t v8 = (unsigned char *)(*(void *)a1)++;
  *uint64_t v8 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  uint64_t v9 = (char *)(a4 + 6132);
  uint64_t v10 = *(unsigned int *)(a3 + 952);
  unsigned int v11 = *(_DWORD *)(a3 + 948);
  if (v10)
  {
    EvLog_nd("G5K_ME_Send_Ctrl: Fix_Int Updated ", 2, a3, *(unsigned int *)(a3 + 948), v10);
    unsigned int v11 = *(_DWORD *)(a3 + 952);
    *(void *)(a3 + 948) = v11;
  }
  int v12 = *(_DWORD *)(*(void *)(p_api + 88) + 32);
  if (v11 >= 0x1F4) {
    int v13 = 100;
  }
  else {
    int v13 = 50;
  }
  int v14 = -(int)API_Get_Est_ME_TTick();
  do
    v12 += v11;
  while (v14 + v12 <= v13);
  int v15 = *(_DWORD *)(a3 + 948);
  HIDWORD(v16) = 652835029 * v15;
  LODWORD(v16) = 652835029 * v15;
  if ((v16 >> 3) <= 0x418937)
  {
    uint64_t v17 = *(void *)(p_api + 88);
    for (double i = *(double *)(v17 + 40) - *(double *)(v17 + 144); i >= 604800.0; double i = i + -604800.0)
      ;
    double v19 = *(double *)(v17 + 168);
    while (i < 0.0)
      double i = i + 604800.0;
    double v20 = *(double *)(v17 + 848) / 299792458.0;
    double v21 = i + (double)*(__int16 *)(a3 + 1024) * 0.000000001;
    double v22 = v21 - (double)(int)v21;
    int v23 = (int)v11 / 1000;
    if (v22 >= 0.7) {
      ++v23;
    }
    int v24 = *(_DWORD *)(v17 + 32);
    double v25 = (v19 + 1.0) * ((double)v23 - v22) * 1000.0;
    unsigned int v26 = vcvtd_n_u64_f64(v25 - (double)(int)v25, 0x10uLL);
    int v169 = v24 + (int)v25;
    __int16 v167 = v26;
    if (v20 < 0.004)
    {
      int v27 = v24 + (int)v25 - v12 + (v26 >> 15);
      int v28 = v12 - v11 - ((int)v25 + v24 + (v26 >> 15));
      do
      {
        int v29 = v27;
        v27 -= v11;
        v28 += v11;
      }
      while (v29 > 10);
      int v30 = 1 - v11;
      if (v29 > (int)(1 - v11)) {
        int v30 = v29;
      }
      int v31 = v30 + v28;
      if (v11 <= 1) {
        unsigned int v32 = 1;
      }
      else {
        unsigned int v32 = v11;
      }
      BOOL v56 = v31 == 0;
      unsigned int v33 = (v31 - (v31 != 0)) / v32;
      if (!v56) {
        ++v33;
      }
      int v34 = v29 + v33 * v11;
      if (v34 <= -50) {
        int v34 = -50;
      }
      if (v34 >= 0) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = -v34;
      }
      if (v35 <= 2 && v20 >= 0.0001) {
        int v34 = 0;
      }
      v12 += v34;
    }
  }
  else
  {
    int v169 = 0;
    __int16 v167 = 0;
  }
  *(_DWORD *)(a2 + 536) = v12;
  G5K_ME_enc_n((char **)a1, v12, v15);
  *(_DWORD *)uint64_t v190 = *(_DWORD *)a4;
  *(_WORD *)&v190[4] = *(_WORD *)(a4 + 4);
  *(void *)&v190[6] = *(void *)(a4 + 6);
  *(_DWORD *)uint64_t v191 = *(_DWORD *)(a4 + 16);
  *(_WORD *)&v191[4] = *(_WORD *)(a4 + 20);
  __int16 v192 = *(_WORD *)(a4 + 14);
  unsigned int v193 = *(_DWORD *)(a4 + 22);
  __int16 v194 = *(_WORD *)(a4 + 26);
  int v37 = *(_DWORD *)(a4 + 32);
  int v195 = *(_DWORD *)(a4 + 28);
  int v38 = *(_DWORD *)(a4 + 48);
  char v196 = *(_DWORD *)(a4 + 52);
  char v197 = v38;
  char v198 = *v9;
  int v199 = v37;
  int v39 = *(_DWORD *)(a4 + 40);
  char v200 = *(_DWORD *)(a4 + 36);
  int v201 = v39;
  char v202 = *(unsigned char *)(a4 + 44);
  *(void *)__b = v203;
  STEU_Encode((char **)a1, 97, v190, (unint64_t *)__b);
  if (*(void *)__b - (void)v190 != 45) {
    gn_report_assertion_failure("ME_enc_a: Wrong Length!");
  }
  uint64_t v171 = a3;
  unint64_t v177 = (char **)a1;
  unsigned __int8 v181 = 0;
  uint64_t v40 = *((void *)&xmmword_26AE66C28 + 1);
  if ((Core_Get_GPS_TOWAss(__b) & 1) == 0)
  {
    long long v188 = 0u;
    long long v189 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    *(_OWORD *)__b = 0u;
    long long v183 = 0u;
  }
  for (uint64_t j = 0; j != 178; ++j)
  {
    if (*(__int16 *)(a4 + 2 * j + 4174) >= 1
      && (*(char *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996) & 0x80000000) == 0)
    {
      unsigned int v42 = *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996);
      if (*(unsigned char *)(a4
                    + 48
                    * *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996)
                    + 64))
      {
        uint64_t v43 = a4 + 48 * *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996);
        unsigned int v46 = *(unsigned __int8 *)(v43 + 68);
        uint64_t v45 = (int *)(v43 + 68);
        uint64_t v44 = v46;
        unsigned __int8 v47 = *((unsigned char *)v45 + 6);
        if (*((unsigned char *)v45 + 4)) {
          v47 |= 0x10u;
        }
        if (*((unsigned char *)v45 + 5)) {
          char v48 = v47 | 0x20;
        }
        else {
          char v48 = v47;
        }
        double v49 = (double)v45[6] * 0.000000977517107 + (double)v45[5] * 1.5;
        if (v44 == 2)
        {
          uint64_t v50 = *((char *)v45 + 2);
          if ((*((unsigned char *)v45 + 2) - 7) < 0xF2u) {
            continue;
          }
          double v49 = v49
              + (double)(10800 - *(char *)(a4 + 44))
              + *(double *)(v40 + 8 * (v50 + 7) + 1152) * -0.00000000333564095;
          double v51 = 86400.0;
        }
        else
        {
          uint64_t v50 = *((unsigned __int8 *)v45 + 2);
          if (v44 == 4) {
            double v49 = v49 + -14.0 + *(double *)(v40 + 1264) * -0.00000000333564095;
          }
          double v51 = 604800.0;
        }
        double v52 = -0.0;
        if (v49 < 0.0) {
          double v52 = v51;
        }
        for (double k = v49 + v52; k > v51; double k = k - v51)
          ;
        unsigned __int8 v54 = Encode_SVid_STE(v44, v50, (char *)&v181);
        if (v181) {
          BOOL v56 = v54 == 0;
        }
        else {
          BOOL v56 = 1;
        }
        if (v56)
        {
          EvCrt_nd("ME_enc_s: Invalid Constel / SV ID ", 2, v55, v181, v54);
        }
        else
        {
          v190[0] = v181;
          v190[1] = v54;
          uint64_t v57 = (_WORD *)(a4 + 48 * v42);
          double v58 = (double)(__int16)v57[41];
          v190[2] = v48;
          *(_WORD *)&v190[3] = (int)(v58 * 48.7151802);
          v190[5] = (int)(v58 * 48.7151802) >> 16;
          unint64_t v180 = (unint64_t)&v190[6];
          *(_WORD *)&v190[6] = (k * 1000.0);
          v190[8] = (k * 1000.0) >> 16;
          double v59 = k * 1000.0 - (double)(k * 1000.0);
          v190[9] = (k * 1000.0) >> 24;
          *(_WORD *)&v190[10] = vcvtd_n_s64_f64(v59, 0x10uLL);
          LOWORD(v59) = v57[39];
          *(_WORD *)&v190[12] = (int)((double)*(unint64_t *)&v59 * 1.90293673);
          unsigned int v60 = (unsigned __int16)v57[43];
          if (v60 < 0x200)
          {
            unsigned int v63 = (v60 << 16) / 0x3FF;
            unsigned int v64 = (v60 << 16) / 0x3FF00;
            int v61 = *(unsigned __int8 *)v45;
          }
          else
          {
            int v61 = *(unsigned __int8 *)v45;
            if (v61 == 3) {
              unsigned int v62 = 65280;
            }
            else {
              unsigned int v62 = 0x8000;
            }
            if (v61 == 3) {
              LOBYTE(v63) = -1;
            }
            else {
              LOBYTE(v63) = 0;
            }
            unsigned int v64 = v62 >> 8;
          }
          unsigned int v65 = 0;
          v191[0] = v63;
          v191[1] = v64;
          v191[2] = 0;
          uint64_t v66 = a4 + 48 * v42;
          *(double *)&unint64_t v67 = (double)*(__int16 *)(v66 + 100) * 0.475734182;
          *(_WORD *)&v191[3] = (int)*(double *)&v67;
          LOBYTE(v67) = *(unsigned char *)(v66 + 102);
          unsigned int v68 = ((double)v67 * 1.90293673);
          if (v68 >= 0xFF) {
            LOBYTE(v68) = -1;
          }
          v191[5] = v68;
          __int16 v192 = *(_WORD *)(v66 + 103);
          if (v61 == 1) {
            unsigned int v65 = __b[*((unsigned __int8 *)v45 + 2) - 1];
          }
          unsigned int v193 = v65;
          LOBYTE(v194) = 0;
          unint64_t v180 = (unint64_t)&v194 + 1;
          STEU_Encode(v177, 115, v190, &v180);
          if (v180 - (void)v190 != 27) {
            gn_report_assertion_failure("ME_enc_s: Wrong Length!");
          }
        }
      }
    }
  }
  LODWORD(v180) = 0;
  if (*v9)
  {
    unint64_t v69 = 0;
    unsigned __int8 v70 = 0;
    unsigned __int8 v71 = 0;
    unsigned __int8 v72 = 0;
    unsigned __int8 v73 = 0;
    do
    {
      Constell_Pruint64_t n = Get_Constell_Prn((*(_WORD *)(a4 + 4174 + 2 * v69) - 1));
      switch(Constell_Prn)
      {
        case 1:
          ++v73;
          break;
        case 3:
          ++v72;
          break;
        case 4:
          ++v71;
          break;
        case 5:
          ++v70;
          break;
        default:
          break;
      }
      ++v69;
    }
    while (v69 < *v9);
    LODWORD(v180) = Constell_Prn;
  }
  else
  {
    unsigned __int8 v73 = 0;
    unsigned __int8 v72 = 0;
    unsigned __int8 v71 = 0;
    unsigned __int8 v70 = 0;
  }
  unsigned __int8 v173 = v72;
  unsigned __int8 v175 = v71;
  unsigned __int8 v168 = v70;
  if (v9[1])
  {
    unint64_t v75 = 0;
    unsigned __int8 v76 = 0;
    unsigned __int8 v77 = 0;
    unsigned __int8 v78 = 0;
    unsigned __int8 v79 = 0;
    do
    {
      int v80 = Get_Constell_Prn((*(_WORD *)(a4 + 4530 + 2 * v75) - 1));
      switch(v80)
      {
        case 1:
          ++v79;
          break;
        case 3:
          ++v78;
          break;
        case 4:
          ++v77;
          break;
        case 5:
          ++v76;
          break;
        default:
          break;
      }
      ++v75;
    }
    while (v75 < v9[1]);
    LODWORD(v180) = v80;
  }
  else
  {
    unsigned __int8 v79 = 0;
    unsigned __int8 v78 = 0;
    unsigned __int8 v77 = 0;
    unsigned __int8 v76 = 0;
  }
  unsigned __int8 v172 = v78;
  unsigned __int8 v174 = v77;
  unsigned __int8 v176 = v76;
  if (v9[3])
  {
    unint64_t v81 = 0;
    char v82 = 0;
    char v179 = 0;
    char v83 = 0;
    char v84 = 0;
    do
    {
      int v85 = Get_Constell_Prn((*(_WORD *)(a4 + 4886 + 2 * v81) - 1));
      switch(v85)
      {
        case 1:
          ++v84;
          break;
        case 3:
          ++v83;
          break;
        case 4:
          ++v179;
          break;
        case 5:
          ++v82;
          break;
        default:
          break;
      }
      ++v81;
    }
    while (v81 < v9[3]);
    char v166 = v82;
    LODWORD(v180) = v85;
  }
  else
  {
    char v84 = 0;
    char v83 = 0;
    char v179 = 0;
    char v166 = 0;
  }
  v190[0] = 1;
  v190[1] = v73;
  uint64_t v86 = &v190[2];
  *(void *)__b = &v190[2];
  uint64_t v87 = &v190[2];
  if (*v9)
  {
    unint64_t v88 = 0;
    uint64_t v87 = *(unsigned __int8 **)__b;
    do
    {
      char v89 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v88) - 1), &v180);
      if (v180 == 1) {
        *v87++ = v89 + 1;
      }
      ++v88;
    }
    while (v88 < *v9);
    *(void *)__b = v87;
  }
  *uint64_t v87 = v79;
  ++*(void *)__b;
  if (v9[1])
  {
    unint64_t v90 = 0;
    uint64_t v91 = *(unsigned char **)__b;
    do
    {
      char v92 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v90) - 1), &v180);
      if (v180 == 1) {
        *v91++ = v92 + 1;
      }
      ++v90;
    }
    while (v90 < v9[1]);
    *(void *)__b = v91;
  }
  if (v73 | v79)
  {
    **(unsigned char **)__b = v84;
    ++*(void *)__b;
    uint64_t v93 = v177;
    uint64_t v94 = v171;
    if (v9[3])
    {
      unint64_t v95 = 0;
      long long v96 = *(unsigned char **)__b;
      do
      {
        char v97 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v95) - 1), &v180);
        if (v180 == 1) {
          *v96++ = v97 + 1;
        }
        ++v95;
      }
      while (v95 < v9[3]);
      *(void *)__b = v96;
    }
  }
  else
  {
    **(unsigned char **)__b = 0;
    ++*(void *)__b;
    uint64_t v93 = v177;
    uint64_t v94 = v171;
  }
  STEU_Encode(v93, 118, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 70) {
    gn_report_assertion_failure("ME_enc_v: G Too Long!");
  }
  v190[0] = 4;
  v190[1] = v9[78];
  *(void *)__b = &v190[2];
  uint64_t v98 = &v190[2];
  if (v190[1] >= 1)
  {
    uint64_t v99 = 0;
    uint64_t v100 = *(void *)__b;
    uint64_t v101 = &v190[2];
    do
    {
      *uint64_t v101 = *(unsigned char *)(a4 + 6196 + v99++) + 8;
      uint64_t v101 = (unsigned char *)(v99 + v100);
    }
    while (v99 < v9[78]);
    uint64_t v98 = (unsigned char *)(v100 + v99);
    *(void *)__b = v98;
  }
  uint64_t v102 = 0;
  *uint64_t v98 = v9[79];
  unint64_t v103 = (unsigned char *)++*(void *)__b;
  do
  {
    if (!*(_DWORD *)(a4 + 6140 + 4 * v102))
    {
      *unint64_t v103 = v102 + 1;
      unint64_t v103 = (unsigned char *)++*(void *)__b;
    }
    ++v102;
  }
  while (v102 != 14);
  if (v9[78] || v9[79])
  {
    uint64_t v104 = 0;
    *unint64_t v103 = v9[80];
    int v105 = (unsigned char *)++*(void *)__b;
    do
    {
      if (*(_DWORD *)(a4 + 6140 + 4 * v104) == 3)
      {
        unsigned char *v105 = v104 + 1;
        int v105 = (unsigned char *)++*(void *)__b;
      }
      ++v104;
    }
    while (v104 != 14);
  }
  else
  {
    *unint64_t v103 = 0;
    ++*(void *)__b;
  }
  STEU_Encode(v93, 118, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 70) {
    gn_report_assertion_failure("ME_enc_v: R Too Long!");
  }
  v190[0] = 5;
  v190[1] = v173;
  *(void *)__b = &v190[2];
  int v106 = &v190[2];
  if (*v9)
  {
    unint64_t v107 = 0;
    int v106 = *(unsigned __int8 **)__b;
    do
    {
      char v108 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v107) - 1), &v180);
      if (v180 == 3) {
        *v106++ = v108 + 65;
      }
      ++v107;
    }
    while (v107 < *v9);
    *(void *)__b = v106;
  }
  *int v106 = v172;
  ++*(void *)__b;
  if (v9[1])
  {
    unint64_t v109 = 0;
    unsigned int v110 = *(unsigned char **)__b;
    do
    {
      char v111 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v109) - 1), &v180);
      if (v180 == 3) {
        *v110++ = v111 + 65;
      }
      ++v109;
    }
    while (v109 < v9[1]);
    *(void *)__b = v110;
  }
  if (v173 | v172)
  {
    **(unsigned char **)__b = v83;
    ++*(void *)__b;
    unsigned __int8 v112 = v168;
    if (v9[3])
    {
      unint64_t v113 = 0;
      uint64_t v114 = *(unsigned char **)__b;
      do
      {
        char v115 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v113) - 1), &v180);
        if (v180 == 3) {
          *v114++ = v115 + 65;
        }
        ++v113;
      }
      while (v113 < v9[3]);
      *(void *)__b = v114;
    }
  }
  else
  {
    **(unsigned char **)__b = 0;
    ++*(void *)__b;
    unsigned __int8 v112 = v168;
  }
  STEU_Encode(v93, 118, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 70) {
    gn_report_assertion_failure("ME_enc_v: E Too Long!");
  }
  v190[0] = 6;
  v190[1] = v175;
  *(void *)__b = &v190[2];
  char v116 = &v190[2];
  if (*v9)
  {
    unint64_t v117 = 0;
    char v116 = *(unsigned __int8 **)__b;
    do
    {
      char v118 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v117) - 1), &v180);
      if (v180 == 4) {
        *v116++ = v118 - 127;
      }
      ++v117;
    }
    while (v117 < *v9);
    *(void *)__b = v116;
  }
  unsigned __int8 *v116 = v174;
  ++*(void *)__b;
  if (v9[1])
  {
    unint64_t v119 = 0;
    unsigned int v120 = *(unsigned char **)__b;
    do
    {
      char v121 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v119) - 1), &v180);
      if (v180 == 4) {
        *v120++ = v121 - 127;
      }
      ++v119;
    }
    while (v119 < v9[1]);
    *(void *)__b = v120;
  }
  if (v175 | v174)
  {
    **(unsigned char **)__b = v179;
    ++*(void *)__b;
    if (v9[3])
    {
      unint64_t v122 = 0;
      char v123 = *(unsigned char **)__b;
      do
      {
        char v124 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v122) - 1), &v180);
        if (v180 == 4) {
          *v123++ = v124 - 127;
        }
        ++v122;
      }
      while (v122 < v9[3]);
      *(void *)__b = v123;
    }
  }
  else
  {
    **(unsigned char **)__b = 0;
    ++*(void *)__b;
  }
  STEU_Encode(v93, 118, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 70) {
    gn_report_assertion_failure("ME_enc_v: B Too Long!");
  }
  v190[0] = 3;
  v190[1] = v112;
  *(void *)__b = &v190[2];
  if (*v9)
  {
    unint64_t v125 = 0;
    uint64_t v86 = *(unsigned __int8 **)__b;
    do
    {
      char v126 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v125) - 1), &v180);
      if (v180 == 5) {
        *v86++ = v126 - 63;
      }
      ++v125;
    }
    while (v125 < *v9);
    *(void *)__b = v86;
  }
  *uint64_t v86 = v176;
  ++*(void *)__b;
  if (v9[1])
  {
    unint64_t v127 = 0;
    uint64_t v128 = *(unsigned char **)__b;
    do
    {
      char v129 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v127) - 1), &v180);
      if (v180 == 5) {
        *v128++ = v129 - 63;
      }
      ++v127;
    }
    while (v127 < v9[1]);
    *(void *)__b = v128;
  }
  if (v112 | v176)
  {
    **(unsigned char **)__b = v166;
    ++*(void *)__b;
    if (v9[3])
    {
      unint64_t v130 = 0;
      uint64_t v131 = *(unsigned char **)__b;
      do
      {
        char v132 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v130) - 1), &v180);
        if (v180 == 5) {
          *v131++ = v132 - 63;
        }
        ++v130;
      }
      while (v130 < v9[3]);
      *(void *)__b = v131;
    }
  }
  else
  {
    **(unsigned char **)__b = 0;
    ++*(void *)__b;
  }
  STEU_Encode(v93, 118, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 70) {
    gn_report_assertion_failure("ME_enc_v: Q Too Long!");
  }
  LODWORD(v180) = 0;
  unsigned __int8 v181 = 0;
  v190[0] = *v9;
  unsigned int v133 = v190[0];
  uint64_t v134 = &v190[1];
  *(void *)__b = &v190[1];
  if (v190[0])
  {
    uint64_t v135 = 0;
    unint64_t v136 = 0;
    while (*(__int16 *)(a4 + 4174 + 2 * v135) < 1)
    {
LABEL_237:
      if (++v135 >= (unint64_t)v133)
      {
        *(void *)__b = v134;
        uint64_t v93 = v177;
        uint64_t v94 = v171;
        goto LABEL_239;
      }
    }
    int v137 = LongPrnIdx_To_ShortPrnIdx(*(unsigned __int16 *)(a4 + 4174 + 2 * v135) - 1, &v180);
    if (v180 == 2)
    {
      if (v136 > 0xD)
      {
        unsigned int v138 = 0;
        unsigned __int8 v181 = 0;
      }
      else
      {
        unsigned int v138 = *(char *)(a4 + v136 + 6196) + 8;
        unsigned __int8 v181 = 4;
        ++v136;
LABEL_231:
        if (v138 >= 0x100)
        {
          EvLog_d("ME_enc_o: STE SV ID out of range", v138);
          unsigned int v138 = 0;
        }
      }
      unsigned __int8 v140 = v181;
      if (!v138 && !v181)
      {
        EvLog("ME_enc_o: Illegal [0,0] STE Constel & SV ID");
        unsigned __int8 v140 = v181;
      }
      unsigned char *v134 = v138;
      v134[1] = v140;
      v134 += 2;
      unsigned int v133 = *v9;
      goto LABEL_237;
    }
    if ((int)v180 > 6) {
      int v139 = 0;
    }
    else {
      int v139 = Prn_Offset[v180];
    }
    unsigned int v138 = Encode_SVid_STE(v180, (v139 + v137), (char *)&v181);
    goto LABEL_231;
  }
LABEL_239:
  STEU_Encode(v93, 111, v190, (unint64_t *)__b);
  if ((uint64_t)(*(void *)__b - (void)v190) >= 130) {
    gn_report_assertion_failure("ME_enc_o: Too long!");
  }
  if (*(unsigned char *)(a5 + 364)) {
    goto LABEL_245;
  }
  uint64_t v141 = 0;
  int32x4_t v142 = 0uLL;
  v143.i64[0] = 0x100000001;
  v143.i64[1] = 0x100000001;
  int32x4_t v144 = 0uLL;
  int32x4_t v145 = 0uLL;
  int32x4_t v146 = 0uLL;
  do
  {
    uint8x16_t v147 = (uint8x16_t)vtstq_s8(*(int8x16_t *)(a5 + 365 + v141), *(int8x16_t *)(a5 + 365 + v141));
    uint16x8_t v148 = vmovl_u8(*(uint8x8_t *)v147.i8);
    uint16x8_t v149 = vmovl_high_u8(v147);
    int32x4_t v146 = vaddq_s32(v146, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v149), v143));
    int32x4_t v145 = vaddq_s32(v145, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v149.i8), v143));
    int32x4_t v144 = vaddq_s32(v144, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v148), v143));
    int32x4_t v142 = vaddq_s32(v142, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v148.i8), v143));
    v141 += 16;
  }
  while (v141 != 48);
  int v150 = vaddvq_s32(vaddq_s32(vaddq_s32(v142, v145), vaddq_s32(v144, v146)));
  if (v150 == 48)
  {
LABEL_245:
    v190[0] = -1;
    *(void *)__b = &v190[1];
    goto LABEL_246;
  }
  if ((v150 - 1) <= 0x2E)
  {
    uint64_t v163 = 0;
    v190[0] = v150;
    unsigned int v164 = &v190[1];
    uint64_t v165 = a5 + 365;
    do
    {
      if (*(unsigned char *)(v165 + v163))
      {
        unsigned char *v164 = v163;
        v164[1] = *(unsigned char *)(v165 + v163);
        v164 += 2;
      }
      ++v163;
    }
    while (v163 != 48);
    *(void *)__b = v164;
    if (v164 > v190)
    {
LABEL_246:
      STEU_Encode(v93, 105, v190, (unint64_t *)__b);
      if ((uint64_t)(*(void *)__b - (void)v190) >= 100) {
        gn_report_assertion_failure("ME_enc_i: Too long!");
      }
    }
  }
  if (!*(unsigned char *)(v94 + 20))
  {
    int v151 = *(_DWORD *)(v94 + 16);
    *(_DWORD *)&v190[8] = 0;
    *(void *)&v190[1] = 0;
    if (v151 >= 3)
    {
      EvLog_d("ME_Send_PowUsage: Out of range: ", v151);
      LOBYTE(v151) = 1;
    }
    v190[0] = v151;
    STEU_Encode_c(v93, 80, 12, v190);
  }
  if (v169)
  {
    *(_WORD *)&v190[10] = 0;
    *(_DWORD *)&v190[6] = 0;
    v190[0] = HIBYTE(v169);
    v190[1] = BYTE2(v169);
    v190[2] = BYTE1(v169);
    v190[3] = v169;
    v190[4] = HIBYTE(v167);
    v190[5] = v167;
    STEU_Encode_c(v93, 79, 12, v190);
  }
  v190[11] = 0;
  *(void *)&v190[3] = 0;
  v190[0] = *(_DWORD *)(v94 + 12);
  int v152 = *(_DWORD *)(v94 + 4);
  v190[1] = v152;
  if (v152 == 2)
  {
    if (*(_DWORD *)(a4 + 52) < 3u || !*(_DWORD *)v94)
    {
      uint64_t v153 = 0;
      v190[1] = 0;
      int v154 = 82;
      while (1)
      {
        if (!*(unsigned char *)(a4 + v153 + 72)
          || !*(unsigned char *)(a4 + v153 + 64)
          || (*(_DWORD *)(a4 + v153 + 68) ? (BOOL v155 = *(_DWORD *)(a4 + v153 + 68) == 6) : (BOOL v155 = 1), v155))
        {
          if (--v154 < 6) {
            break;
          }
        }
        v153 += 48;
        if (v153 == 3936)
        {
          LOBYTE(v152) = 0;
          goto LABEL_269;
        }
      }
    }
    LOBYTE(v152) = 1;
    v190[1] = 1;
  }
LABEL_269:
  *(_DWORD *)(v94 + 8) = v152;
  v190[2] = *(_DWORD *)(v94 + 68);
  char v156 = *(unsigned char *)(v94 + 31);
  if (v156)
  {
    char v156 = 1;
    v190[3] = 1;
  }
  if (*(unsigned char *)(v94 + 34))
  {
    v156 |= 2u;
    v190[3] = v156;
  }
  if (*(unsigned char *)(v94 + 33))
  {
    v156 |= 4u;
    v190[3] = v156;
  }
  if (*(unsigned char *)(v94 + 32))
  {
    v156 |= 8u;
    v190[3] = v156;
  }
  if (*(unsigned char *)(v94 + 36))
  {
    v156 |= 0x10u;
    v190[3] = v156;
  }
  if (*(unsigned char *)(v94 + 35)) {
    v190[3] = v156 | 0x20;
  }
  char v157 = *(unsigned char *)(v94 + 37);
  if (v157)
  {
    char v157 = 1;
    v190[4] = 1;
  }
  if (*(unsigned char *)(v94 + 40))
  {
    v157 |= 2u;
    v190[4] = v157;
  }
  if (*(unsigned char *)(v94 + 39))
  {
    v157 |= 4u;
    v190[4] = v157;
  }
  if (*(unsigned char *)(v94 + 38))
  {
    v157 |= 8u;
    v190[4] = v157;
  }
  if (*(unsigned char *)(v94 + 42))
  {
    v157 |= 0x10u;
    v190[4] = v157;
  }
  if (*(unsigned char *)(v94 + 41)) {
    v190[4] = v157 | 0x20;
  }
  switch(*(_DWORD *)(v94 + 24))
  {
    case 0:
    case 1:
    case 3:
      v190[5] = 0;
      break;
    case 2:
      v190[5] = 1;
      break;
    default:
      v190[5] = 0;
      EvCrt_Illegal_Default("G5K_ME_enc_cC", 0x778u);
      break;
  }
  v190[6] = *(unsigned char *)(v94 + 28);
  v190[7] = *(unsigned char *)(v94 + 72);
  v190[8] = 1;
  STEU_Encode_c(v93, 67, 12, v190);
  *(void *)&v190[3] = 0;
  v190[11] = 0;
  *(_WORD *)uint64_t v190 = -1;
  v190[2] = -1;
  STEU_Encode_c(v93, 65, 12, v190);
  *(_DWORD *)&v190[8] = 0;
  *(void *)&v190[1] = 0;
  v190[0] = *(unsigned char *)(v94 + 29);
  STEU_Encode_c(v93, 68, 12, v190);
  if (*(unsigned char *)(v94 + 1384))
  {
    *(void *)&v190[4] = 0;
    float64x2_t v158 = *(float64x2_t *)(v94 + 1352);
    float64x2_t v159 = *(float64x2_t *)(v94 + 1368);
    int8x8_t v160 = (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v158), (int32x4_t)vcgtzq_f64(v159)));
    int16x8_t v161 = (int16x8_t)vcvtq_n_s64_f64(v158, 2uLL);
    *(int8x8_t *)v161.unsigned int i8 = vorn_s8(vand_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64((int64x2_t)v161), (int16x4_t)vmovn_s64(vcvtq_n_s64_f64(v159, 2uLL))), v160), v160);
    *(void *)uint64_t v190 = vmovn_s16(v161).u32[0];
    STEU_Encode_c(v93, 90, 12, v190);
  }
  *(_DWORD *)&v190[8] = 0;
  *(void *)&v190[1] = 0;
  v190[0] = *(unsigned char *)(v94 + 30);
  STEU_Encode_c(v93, 69, 12, v190);
  unint64_t v162 = (*v93)++;
  *unint64_t v162 = 10;
  if (*v93 >= v93[3]) {
    std::string *v93 = v93[2];
  }
  GNSS_Write_GNB_Ctrl(v93);
}

char **G5K_ME_enc_n(char **a1, int a2, __int16 a3)
{
  *(void *)&v7[142] = *MEMORY[0x263EF8340];
  int v5 = a2;
  __int16 v6 = a3;
  unsigned __int16 v4 = v7;
  size_t result = STEU_Encode(a1, 110, (unsigned __int8 *)&v5, (unint64_t *)&v4);
  if (v4 - (unsigned char *)&v5 != 6) {
    return (char **)gn_report_assertion_failure("ME_enc_n: Wrong Length!");
  }
  return result;
}

uint64_t GncS02_09UpdatedPosAval(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncS02_09UpdatedPosAval");
      LbsOsaTrace_WriteLog(8u, __str, v2, 4, 1);
    }
    GncS04_72SendUpdates();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_09UpdatedPosAval", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_21FGSchedTimExp(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_FG_SCHED_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_21FGSchedTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_73FGPosTimerExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_21FGSchedTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_22SessStopAckTimExp(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESS_STOP_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_22SessStopAckTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_33SessStopAckTimrExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_22SessStopAckTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_23SessStartAckTimExp(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESS_START_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_23SessStartAckTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_36SessStartAckTimrExp();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_23SessStartAckTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t xofScvs_Init(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  g_XofBceParseState = 0;
  g_XofEeParseState = 0;
  g_RtiParseState = 0;
  g_Header = 0u;
  unk_26AE66DC8 = 0u;
  xmmword_26AE66DD8 = 0u;
  unk_26AE66DE8 = 0u;
  xmmword_26AE66DF8 = 0u;
  unk_26AE66E08 = 0u;
  xmmword_26AE66E18 = 0u;
  *(_OWORD *)&dword_26AE66E28 = 0u;
  g_PayLoad = 0u;
  unk_26AE6C7E8 = 0u;
  xmmword_26AE6C7F8 = 0u;
  *(_OWORD *)&dword_26AE6C808 = 0u;
  xmmword_26AE6C818 = 0u;
  *(_OWORD *)&dword_26AE6C828 = 0u;
  xmmword_26AE6C838 = 0u;
  *(_OWORD *)&qword_26AE6C848 = 0u;
  xmmword_26AE6C858 = 0u;
  *(_OWORD *)&qword_26AE6C868 = 0u;
  xmmword_26AE6C878 = 0u;
  *(_OWORD *)&qword_26AE6C888 = 0u;
  xmmword_26AE6C898 = 0u;
  *(_OWORD *)&qword_26AE6C8A8 = 0u;
  xmmword_26AE6C8B8 = 0u;
  unk_26AE6C8C8 = 0u;
  xmmword_26AE6C8D8 = 0u;
  unk_26AE6C8E8 = 0u;
  xmmword_26AE6C8F8 = 0u;
  *(_OWORD *)&qword_26AE6C908 = 0u;
  xmmword_26AE6C918 = 0u;
  xmmword_26AE6C9A8 = 0u;
  unk_26AE6C9B8 = 0u;
  xmmword_26AE6C988 = 0u;
  unk_26AE6C998 = 0u;
  xmmword_26AE6C968 = 0u;
  unk_26AE6C978 = 0u;
  xmmword_26AE6C948 = 0u;
  unk_26AE6C958 = 0u;
  g_RtiRawData = 0u;
  unk_26AE6C938 = 0u;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GCP ORB MjrVer,%u,MinVer,%u RTI MjrVer,%u,MinVer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "xofScvs_Init", 0, 2, 5, 1, 3);
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  return 1;
}

uint64_t xofSvcs_Deinit(void)
{
  g_XofBceParseState = 0;
  g_XofEeParseState = 0;
  g_RtiParseState = 0;
  if (qword_26AE6C848) {
    free((void *)qword_26AE6C848);
  }
  qword_26AE6C848 = 0;
  if (qword_26AE6C850) {
    free((void *)qword_26AE6C850);
  }
  qword_26AE6C850 = 0;
  if ((void)xmmword_26AE6C858) {
    free((void *)xmmword_26AE6C858);
  }
  *(void *)&xmmword_26AE6C858 = 0;
  if (*((void *)&xmmword_26AE6C858 + 1)) {
    free(*((void **)&xmmword_26AE6C858 + 1));
  }
  *((void *)&xmmword_26AE6C858 + 1) = 0;
  if (qword_26AE6C868) {
    free((void *)qword_26AE6C868);
  }
  qword_26AE6C868 = 0;
  if (qword_26AE6C870) {
    free((void *)qword_26AE6C870);
  }
  qword_26AE6C870 = 0;
  if ((void)xmmword_26AE6C878) {
    free((void *)xmmword_26AE6C878);
  }
  *(void *)&xmmword_26AE6C878 = 0;
  if (*((void *)&xmmword_26AE6C878 + 1)) {
    free(*((void **)&xmmword_26AE6C878 + 1));
  }
  *((void *)&xmmword_26AE6C878 + 1) = 0;
  if (qword_26AE6C888) {
    free((void *)qword_26AE6C888);
  }
  qword_26AE6C888 = 0;
  if (qword_26AE6C890) {
    free((void *)qword_26AE6C890);
  }
  qword_26AE6C890 = 0;
  if ((void)xmmword_26AE6C898) {
    free((void *)xmmword_26AE6C898);
  }
  *(void *)&xmmword_26AE6C898 = 0;
  if (*((void *)&xmmword_26AE6C898 + 1)) {
    free(*((void **)&xmmword_26AE6C898 + 1));
  }
  *((void *)&xmmword_26AE6C898 + 1) = 0;
  if (qword_26AE6C8A8) {
    free((void *)qword_26AE6C8A8);
  }
  qword_26AE6C8A8 = 0;
  if (qword_26AE6C8B0) {
    free((void *)qword_26AE6C8B0);
  }
  qword_26AE6C8B0 = 0;
  if ((void)xmmword_26AE6C8B8) {
    free((void *)xmmword_26AE6C8B8);
  }
  *(void *)&xmmword_26AE6C8B8 = 0;
  if (*((void *)&xmmword_26AE6C8B8 + 1)) {
    free(*((void **)&xmmword_26AE6C8B8 + 1));
  }
  xmmword_26AE66E18 = 0u;
  *(_OWORD *)&dword_26AE66E28 = 0u;
  xmmword_26AE66DF8 = 0u;
  unk_26AE66E08 = 0u;
  xmmword_26AE66DD8 = 0u;
  unk_26AE66DE8 = 0u;
  g_Header = 0u;
  unk_26AE66DC8 = 0u;
  g_PayLoad = 0u;
  unk_26AE6C7E8 = 0u;
  xmmword_26AE6C7F8 = 0u;
  *(_OWORD *)&dword_26AE6C808 = 0u;
  xmmword_26AE6C818 = 0u;
  *(_OWORD *)&dword_26AE6C828 = 0u;
  xmmword_26AE6C838 = 0u;
  *(_OWORD *)&qword_26AE6C848 = 0u;
  xmmword_26AE6C858 = 0u;
  *(_OWORD *)&qword_26AE6C868 = 0u;
  xmmword_26AE6C878 = 0u;
  *(_OWORD *)&qword_26AE6C888 = 0u;
  xmmword_26AE6C898 = 0u;
  *(_OWORD *)&qword_26AE6C8A8 = 0u;
  xmmword_26AE6C8B8 = 0u;
  unk_26AE6C8C8 = 0u;
  xmmword_26AE6C8D8 = 0u;
  unk_26AE6C8E8 = 0u;
  xmmword_26AE6C8F8 = 0u;
  *(_OWORD *)&qword_26AE6C908 = 0u;
  xmmword_26AE6C918 = 0u;
  xmmword_26AE6C9A8 = 0u;
  unk_26AE6C9B8 = 0u;
  xmmword_26AE6C988 = 0u;
  unk_26AE6C998 = 0u;
  xmmword_26AE6C968 = 0u;
  unk_26AE6C978 = 0u;
  xmmword_26AE6C948 = 0u;
  unk_26AE6C958 = 0u;
  g_RtiRawData = 0u;
  unk_26AE6C938 = 0u;
  return 1;
}

uint64_t xofScvs_InjectOrbitData(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofScvs_InjectOrbitData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 427673) < 0xFFF979E7 || !a1 || !a3)
  {
    uint64_t v9 = 8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v9;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofScvs_InjectOrbitData", 515, a2);
    uint64_t v9 = 8;
LABEL_17:
    int v15 = 0;
LABEL_18:
    LbsOsaTrace_WriteLog(8u, __str, v13, v15, 1);
    return v9;
  }
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = xofSvcs00_19ParseHeader(a1, a2);
  if (v8 != 1)
  {
    uint64_t v9 = v8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v9;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Header parse failed XOF cache not updated,RetVal,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "xofScvs_InjectOrbitData", 770, v9);
    goto LABEL_17;
  }
  memcpy_s("xofScvs_InjectOrbitData", 136, &g_Header, 0x80u, a1, 0x80uLL);
  unsigned int v22 = 0;
  uint64_t v9 = xofSvcs00_20ParsePayLoad((signed __int8 *)a1, a2, 0x80u, &v22);
  if (v9 == 1 && v22 == dword_26AE66E28)
  {
    g_XofEeParseState = 1;
    g_XofBceParseState = 1;
    *(unsigned char *)a3 = 1;
    uint64_t v10 = HIDWORD(g_Header) + 604800 * WORD5(g_Header);
    *(void *)(a3 + 8) = v10;
    if (byte_26AE66DCC | byte_26AE66DCA)
    {
      unint64_t v11 = byte_26AE66DCD * (unint64_t)byte_26AE66DCC;
      if (v11 <= 4) {
        LODWORD(v11) = 4;
      }
      *(void *)(a3 + 16) = v10 + 3600 * v11;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofScvs_InjectOrbitData", 770);
      LbsOsaTrace_WriteLog(8u, __str, v20, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 68, "xofScvs_InjectOrbitData");
      int v15 = 5;
      goto LABEL_18;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Payload parse failed,RetVal,%u,ProcessedPayloadBytes,%u,Header.PayloadLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 69, "xofScvs_InjectOrbitData", 770, v9, v22, dword_26AE66E28);
      LbsOsaTrace_WriteLog(8u, __str, v17, 0, 1);
    }
    g_XofEeParseState = 2;
    g_XofBceParseState = 2;
  }
  return v9;
}

uint64_t xofScvs_InjectRtiData(signed __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofScvs_InjectRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if (a2 != 160 || !a1 || !a3)
  {
    uint64_t v9 = 8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v9;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "xofScvs_InjectRtiData", 515, a2);
    uint64_t v9 = 8;
LABEL_13:
    int v12 = 0;
    goto LABEL_14;
  }
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = xofSvcs00_10ParseRtiData(a1, 160);
  if (v8 != 1)
  {
    uint64_t v9 = v8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v9;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse failed,Rti cache not updated,RetVal,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "xofScvs_InjectRtiData", 770, v9);
    goto LABEL_13;
  }
  memcpy_s("xofScvs_InjectRtiData", 216, &g_RtiRawData, 0xA0u, a1, 0xA0uLL);
  uint64_t v9 = 1;
  g_RtiParseState = 1;
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = DWORD1(g_RtiRawData) + 604800 * WORD1(g_RtiRawData);
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "xofScvs_InjectRtiData");
    uint64_t v9 = 1;
    int v12 = 5;
LABEL_14:
    LbsOsaTrace_WriteLog(8u, __str, v11, v12, 1);
  }
  return v9;
}

uint64_t xofSvcs_GetIonoModel(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetIonoModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      memcpy_s("xofSvcs_GetIonoModel", 249, a1, 8u, &g_PayLoad, 8uLL);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetIonoModel");
      uint64_t v6 = 1;
      int v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetIonoModel", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    if (g_XofBceParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IonoModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs_GetIonoModel", 513);
      int v7 = 0;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetGpsUTCModel(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsUTCModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      memcpy_s("xofSvcs_GetGpsUTCModel", 274, a1, 0x14u, (char *)&g_PayLoad + 8, 0x14uLL);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetGpsUTCModel");
      uint64_t v6 = 1;
      int v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetGpsUTCModel", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    if (g_XofBceParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsUtcModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs_GetGpsUTCModel", 513);
      int v7 = 0;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetGloChanMap(int a1, unsigned __int8 *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetGloChanMap");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if ((a1 - 25) >= 0xFFFFFFE8 && a2)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66E0B && !byte_26AE66E09 && !byte_26AE66E0A)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 6;
        }
LABEL_10:
        bzero(__str, 0x410uLL);
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v6, "GNC", 68, "xofSvcs_GetGloChanMap");
        LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
        return 6;
      }
      memcpy_s("xofSvcs_GetGloChanMap", 309, a2, 2u, (char *)&g_PayLoad + 2 * (a1 - 1) + 240, 2uLL);
      if (*a2 == a1)
      {
        int v18 = a2[1];
        if (v18 == 99)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v19 = mach_continuous_time();
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,ChanNum not known,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "xofSvcs_GetGloChanMap", 0, *a2, (char)a2[1]);
            LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 6;
          }
          goto LABEL_10;
        }
        if ((v18 - 7) > 0xF1)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 68, "xofSvcs_GetGloChanMap");
          uint64_t v8 = 1;
          goto LABEL_16;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_34;
        }
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,ChanNum,%d\n", v23);
      }
      else
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_34;
        }
        bzero(__str, 0x410uLL);
        unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqSvId,%u,XofSvId,%u\n", v21);
      }
      LbsOsaTrace_WriteLog(8u, __str, v22, 2, 1);
LABEL_34:
      uint64_t v8 = 8;
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return v8;
      }
      goto LABEL_15;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGloChanMap", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGloChanMap");
      LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
    }
    if (g_XofBceParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloChanMap,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloChanMap", 515, a1);
      LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
    }
    uint64_t v8 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
LABEL_15:
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v11, "GNC", 68, "xofSvcs_GetGloChanMap");
LABEL_16:
      LbsOsaTrace_WriteLog(8u, __str, v12, 5, 1);
    }
  }
  return v8;
}

uint64_t xofSvcs_GetTimeModel(int a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetTimeModel");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (g_XofBceParseState == 1)
    {
      switch(a1)
      {
        case 2:
          if (BYTE1(xmmword_26AE66DD8)) {
            BOOL v6 = 0;
          }
          else {
            BOOL v6 = BYTE2(xmmword_26AE66DD8) == 0;
          }
          if (v6 && BYTE3(xmmword_26AE66DD8) == 0) {
            goto LABEL_74;
          }
          if ((void)xmmword_26AE6C7F8 || BYTE8(xmmword_26AE6C7F8))
          {
            double v25 = (char *)&unk_26AE6C7F4;
            int v26 = 381;
            goto LABEL_81;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_74;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sbas,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_73;
        case 3:
          if (byte_26AE66DE9) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = byte_26AE66DEA == 0;
          }
          if (v16 && byte_26AE66DEB == 0) {
            goto LABEL_74;
          }
          if (dword_26AE6C808 || dword_26AE6C80C || byte_26AE6C810)
          {
            double v25 = (char *)&xmmword_26AE6C7F8 + 12;
            int v26 = 404;
            goto LABEL_81;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_74;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_73;
        case 4:
          if (BYTE1(xmmword_26AE66DF8)) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = BYTE2(xmmword_26AE66DF8) == 0;
          }
          if (v18 && BYTE3(xmmword_26AE66DF8) == 0) {
            goto LABEL_74;
          }
          if ((void)xmmword_26AE6C818 || BYTE8(xmmword_26AE6C818))
          {
            double v25 = (char *)&unk_26AE6C814;
            int v26 = 427;
            goto LABEL_81;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_74;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gal,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_73;
        case 5:
          if (byte_26AE66E09) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = byte_26AE66E0A == 0;
          }
          if (v20 && byte_26AE66E0B == 0) {
            goto LABEL_74;
          }
          if (dword_26AE6C828 || dword_26AE6C82C || byte_26AE6C830)
          {
            double v25 = (char *)&xmmword_26AE6C818 + 12;
            int v26 = 450;
            goto LABEL_81;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_74;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Glo,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_73;
        case 6:
          if (BYTE1(xmmword_26AE66E18)) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = BYTE2(xmmword_26AE66E18) == 0;
          }
          if (v22 && BYTE3(xmmword_26AE66E18) == 0) {
            goto LABEL_74;
          }
          if ((void)xmmword_26AE6C838 || BYTE8(xmmword_26AE6C838))
          {
            double v25 = (char *)&unk_26AE6C834;
            int v26 = 473;
LABEL_81:
            memcpy_s("xofSvcs_GetTimeModel", v26, a2, 0x10u, v25, 0x10uLL);
            if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v27 = mach_continuous_time();
              size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 68, "xofSvcs_GetTimeModel");
              uint64_t v9 = 1;
              int v12 = 5;
              goto LABEL_19;
            }
            uint64_t v9 = 1;
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Bds,TA0,0,TA1,0,TA2,0\n");
LABEL_73:
              LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
            }
LABEL_74:
            uint64_t v9 = 6;
          }
          break;
        default:
          uint64_t v9 = 8;
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            return v9;
          }
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "xofSvcs_GetTimeModel", 515, a1);
          int v12 = 2;
          goto LABEL_19;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetTimeModel", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v9 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "xofSvcs_GetTimeModel", 515, a1);
      int v12 = 0;
LABEL_19:
      LbsOsaTrace_WriteLog(8u, __str, v11, v12, 1);
    }
  }
  return v9;
}

uint64_t xofSvcs_GetGpsSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGpsSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 33) >= 0xE0u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (*((void *)&xmmword_26AE6C898 + 1) && xofSvcs01_02GetExtEphSvIndex(1, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGpsSvOrbData", 645, a3, 0x40u, (const void *)(*((void *)&xmmword_26AE6C898 + 1) + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGpsSvOrbData");
          uint64_t v10 = 1;
          int v11 = 5;
          goto LABEL_13;
        }
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req Svid,%u,Resp Svid,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofSvcs_GetGpsSvOrbData", 770, a2, *a3);
        int v17 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekN,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGpsSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        int v17 = 5;
      }
      LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGpsSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGpsSvOrbData", 515, a2);
      int v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs01_02GetExtEphSvIndex(int a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned __int8 v34 = 0;
  if (!xofSvcs00_23GetEeNumSats(a1) || (xofSvcs00_02SvIncluded(a1, a2) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u,SvId,%u\n", v12, "GNC", 68, "xofSvcs01_02GetExtEphSvIndex", 769, a1, a2);
LABEL_22:
      size_t v22 = v13;
      int v23 = 5;
LABEL_23:
      LbsOsaTrace_WriteLog(8u, __str, v22, v23, 1);
    }
    return 6;
  }
  if (!xofSvcs00_23GetEeNumSats(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", v33);
    goto LABEL_11;
  }
  unint64_t v8 = HIDWORD(g_Header) + 604800 * WORD5(g_Header);
  unint64_t v9 = HIDWORD(a3) + 604800 * (unsigned __int16)a3;
  if (v9 < v8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartTime,%llu,ReqTime,%llu,ConstellType,%u\n", v10, "GNC", 87);
LABEL_16:
    size_t v15 = v11;
    int v16 = 2;
    goto LABEL_19;
  }
  BlckLeuint64_t n = xofSvcs00_24GetBlckLen(a1);
  if (!BlckLen)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 69, "xofSvcs01_01GetExtEphBlockNum", 515, a1);
    int v16 = 0;
    goto LABEL_19;
  }
  unint64_t v18 = (v9 - v8) / (3600 * (unint64_t)BlckLen);
  if (v18 >= 0x2B)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqTime,%llu,ConstellType,%u,BlockNum,%llu\n", v19, "GNC", 87);
    goto LABEL_16;
  }
  if (v18 >= xofSvcs00_25GetEeNumBlks(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u,SvId,%u\n", v21, "GNC", 68, "xofSvcs01_02GetExtEphSvIndex", 769, a1, a2);
        goto LABEL_22;
      }
      return 6;
    }
    bzero(__str, 0x410uLL);
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqTime,%llu,ConstellType,%u,BlockNum,%llu\n", v28, "GNC", 68);
LABEL_11:
    size_t v15 = v14;
    int v16 = 5;
LABEL_19:
    LbsOsaTrace_WriteLog(8u, __str, v15, v16, 1);
    goto LABEL_20;
  }
  if (XofSvcs00_03GetSvIndexCrr(a1, a2, &v34) != 1) {
    goto LABEL_20;
  }
  int StartSv = xofSvcs02_04GetStartSv(a1);
  if (StartSv)
  {
    unsigned int v26 = xofSvcs00_23GetEeNumSats(a1) * v18 - (StartSv + v34) + a2;
    *a4 = v26;
    int EeNumSats = xofSvcs00_23GetEeNumSats(a1);
    if (v26 < xofSvcs00_25GetEeNumBlks(a1) * EeNumSats) {
      return 1;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 6;
    }
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    size_t v22 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 69, "xofSvcs01_02GetExtEphSvIndex", 772, *a4);
    int v23 = 0;
    goto LABEL_23;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 69, "xofSvcs01_02GetExtEphSvIndex", 515, a1);
    LbsOsaTrace_WriteLog(8u, __str, v31, 0, 1);
    return 0;
  }
  return result;
}

uint64_t xofSvcs_GetGloSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGloSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 25) >= 0xE8u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if ((void)xmmword_26AE6C8B8 && xofSvcs01_02GetExtEphSvIndex(5, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGloSvOrbData", 687, a3, 0x40u, (const void *)(xmmword_26AE6C8B8 + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGloSvOrbData");
          uint64_t v10 = 1;
          int v11 = 5;
          goto LABEL_13;
        }
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp Svid,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofSvcs_GetGloSvOrbData", 770, a2, *a3);
        int v17 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        size_t v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekN,%u,Tow%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGloSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        int v17 = 5;
      }
      LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGloSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGloSvOrbData", 515, a2);
      int v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetQzssSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetQzssSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 + 53) >= 0xF6u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (qword_26AE6C8A8 && xofSvcs01_02GetExtEphSvIndex(3, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetQzssSvOrbData", 729, a3, 0x40u, (const void *)(qword_26AE6C8A8 + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetQzssSvOrbData");
          uint64_t v10 = 1;
          int v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetQzssSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x40uLL, 0, 0x40uLL);
      }
      else
      {
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetQzssSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetQzssSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetQzssSvOrbData", 513, a2);
      int v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetGalSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGalSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 37) >= 0xDCu && a3)
  {
    if (g_XofEeParseState == 1)
    {
      unsigned int v20 = 0;
      if (qword_26AE6C8B0 && xofSvcs01_02GetExtEphSvIndex(4, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGalSvOrbData", 773, a3, 0x44u, (const void *)(qword_26AE6C8B0 + 68 * v20), 0x44uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGalSvOrbData");
          uint64_t v10 = 1;
          int v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetGalSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x44uLL, 0, 0x44uLL);
      }
      else
      {
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGalSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGalSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGalSvOrbData", 513, a2);
      int v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetBdsSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetBdsSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 38) >= 0xDBu && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (*((void *)&xmmword_26AE6C8B8 + 1) && xofSvcs01_02GetExtEphSvIndex(6, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetBdsSvOrbData", 817, a3, 0x54u, (const void *)(*((void *)&xmmword_26AE6C8B8 + 1) + 84 * v20), 0x54uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 1;
          }
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetBdsSvOrbData");
          uint64_t v10 = 1;
          int v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetBdsSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x54uLL, 0, 0x54uLL);
      }
      else
      {
        uint64_t v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return v10;
        }
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetBdsSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetBdsSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState) {
      return 5;
    }
    else {
      return 6;
    }
  }
  else
  {
    uint64_t v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BdsExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetBdsSvOrbData", 513, a2);
      int v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetRtiData(int a1, int *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (g_RtiParseState)
    {
      *a2 = a1;
      switch(a1)
      {
        case 1:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = (long long *)((char *)&g_RtiRawData + 8);
          int v8 = 855;
          goto LABEL_21;
        case 2:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = &xmmword_26AE6C948;
          int v8 = 860;
          goto LABEL_21;
        case 3:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = (long long *)&unk_26AE6C960;
          int v8 = 865;
          goto LABEL_21;
        case 4:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = (long long *)&unk_26AE6C978;
          int v8 = 875;
          goto LABEL_21;
        case 5:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = (long long *)((char *)&xmmword_26AE6C988 + 8);
          int v8 = 870;
          goto LABEL_21;
        case 6:
          uint64_t v6 = a2 + 1;
          unsigned __int16 v7 = &xmmword_26AE6C9A8;
          int v8 = 881;
LABEL_21:
          memcpy_s("xofSvcs_GetRtiData", v8, v6, 0x18u, v7, 0x18uLL);
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "xofSvcs_GetRtiData");
            uint64_t v9 = 1;
            int v12 = 5;
            goto LABEL_23;
          }
          uint64_t v9 = 1;
          break;
        default:
          uint64_t v9 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v15 = mach_continuous_time();
            unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 69, "xofSvcs_GetRtiData", 514, a1);
            LbsOsaTrace_WriteLog(8u, __str, v16, 0, 1);
            return 0;
          }
          return v9;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetRtiData", 769, g_RtiParseState);
        LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
      }
      if (g_RtiParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v9 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiData,ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "xofSvcs_GetRtiData", 515, a1);
      int v12 = 0;
LABEL_23:
      LbsOsaTrace_WriteLog(8u, __str, v11, v12, 1);
    }
  }
  return v9;
}

uint64_t xofSvcs_GetGpsAlmData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66DC9) {
        return 6;
      }
      if (qword_26AE6C848)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGpsAlmData", 933, byte_26AE66DC9, 0x20uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGpsAlmData", 941, v4, 32 * byte_26AE66DC9, (const void *)qword_26AE6C848, 32 * byte_26AE66DC9);
        *(unsigned char *)a1 = byte_26AE66DC9;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGpsAlmData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGpsAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGpsAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGpsAlmData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetQzssAlmData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetQzssAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66DE9) {
        return 6;
      }
      if (qword_26AE6C850)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetQzssAlmData", 982, byte_26AE66DE9, 0x20uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetQzssAlmData", 990, v4, 32 * byte_26AE66DE9, (const void *)qword_26AE6C850, 32 * byte_26AE66DE9);
        *(unsigned char *)a1 = byte_26AE66DE9;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetQzssAlmData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetQzssAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetQzssAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetQzssAlmData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

size_t xofSvcs_ClrOrbData(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  g_XofEeParseState = 0;
  g_XofBceParseState = 0;
  if (qword_26AE6C848) {
    free((void *)qword_26AE6C848);
  }
  qword_26AE6C848 = 0;
  if (qword_26AE6C850) {
    free((void *)qword_26AE6C850);
  }
  qword_26AE6C850 = 0;
  if ((void)xmmword_26AE6C858) {
    free((void *)xmmword_26AE6C858);
  }
  *(void *)&xmmword_26AE6C858 = 0;
  if (*((void *)&xmmword_26AE6C858 + 1)) {
    free(*((void **)&xmmword_26AE6C858 + 1));
  }
  *((void *)&xmmword_26AE6C858 + 1) = 0;
  if (qword_26AE6C868) {
    free((void *)qword_26AE6C868);
  }
  qword_26AE6C868 = 0;
  if (qword_26AE6C870) {
    free((void *)qword_26AE6C870);
  }
  qword_26AE6C870 = 0;
  if ((void)xmmword_26AE6C878) {
    free((void *)xmmword_26AE6C878);
  }
  *(void *)&xmmword_26AE6C878 = 0;
  if (*((void *)&xmmword_26AE6C878 + 1)) {
    free(*((void **)&xmmword_26AE6C878 + 1));
  }
  *((void *)&xmmword_26AE6C878 + 1) = 0;
  if (qword_26AE6C888) {
    free((void *)qword_26AE6C888);
  }
  qword_26AE6C888 = 0;
  if (qword_26AE6C890) {
    free((void *)qword_26AE6C890);
  }
  qword_26AE6C890 = 0;
  if ((void)xmmword_26AE6C898) {
    free((void *)xmmword_26AE6C898);
  }
  *(void *)&xmmword_26AE6C898 = 0;
  if (*((void *)&xmmword_26AE6C898 + 1)) {
    free(*((void **)&xmmword_26AE6C898 + 1));
  }
  *((void *)&xmmword_26AE6C898 + 1) = 0;
  if (qword_26AE6C8A8) {
    free((void *)qword_26AE6C8A8);
  }
  qword_26AE6C8A8 = 0;
  if (qword_26AE6C8B0) {
    free((void *)qword_26AE6C8B0);
  }
  qword_26AE6C8B0 = 0;
  if ((void)xmmword_26AE6C8B8) {
    free((void *)xmmword_26AE6C8B8);
  }
  *(void *)&xmmword_26AE6C8B8 = 0;
  if (*((void *)&xmmword_26AE6C8B8 + 1)) {
    free(*((void **)&xmmword_26AE6C8B8 + 1));
  }
  xmmword_26AE66E18 = 0u;
  *(_OWORD *)&dword_26AE66E28 = 0u;
  xmmword_26AE66DF8 = 0u;
  unk_26AE66E08 = 0u;
  xmmword_26AE66DD8 = 0u;
  unk_26AE66DE8 = 0u;
  g_Header = 0u;
  unk_26AE66DC8 = 0u;
  g_PayLoad = 0u;
  unk_26AE6C7E8 = 0u;
  xmmword_26AE6C7F8 = 0u;
  *(_OWORD *)&dword_26AE6C808 = 0u;
  xmmword_26AE6C818 = 0u;
  *(_OWORD *)&dword_26AE6C828 = 0u;
  xmmword_26AE6C838 = 0u;
  *(_OWORD *)&qword_26AE6C848 = 0u;
  xmmword_26AE6C858 = 0u;
  *(_OWORD *)&qword_26AE6C868 = 0u;
  xmmword_26AE6C878 = 0u;
  *(_OWORD *)&qword_26AE6C888 = 0u;
  xmmword_26AE6C898 = 0u;
  *(_OWORD *)&qword_26AE6C8A8 = 0u;
  xmmword_26AE6C8B8 = 0u;
  unk_26AE6C8C8 = 0u;
  xmmword_26AE6C8D8 = 0u;
  unk_26AE6C8E8 = 0u;
  xmmword_26AE6C8F8 = 0u;
  *(_OWORD *)&qword_26AE6C908 = 0u;
  xmmword_26AE6C918 = 0u;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Orb data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrOrbData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrOrbData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

size_t xofSvcs_ClrRtiData(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  xmmword_26AE6C9A8 = 0u;
  unk_26AE6C9B8 = 0u;
  xmmword_26AE6C988 = 0u;
  unk_26AE6C998 = 0u;
  xmmword_26AE6C968 = 0u;
  unk_26AE6C978 = 0u;
  xmmword_26AE6C948 = 0u;
  unk_26AE6C958 = 0u;
  g_RtiRawData = 0u;
  unk_26AE6C938 = 0u;
  g_RtiParseState = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rti data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrRtiData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrRtiData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

size_t xofSvcs_ClrBceOrbData(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrBceOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  if (qword_26AE6C848) {
    free((void *)qword_26AE6C848);
  }
  qword_26AE6C848 = 0;
  if (qword_26AE6C850) {
    free((void *)qword_26AE6C850);
  }
  qword_26AE6C850 = 0;
  if ((void)xmmword_26AE6C858) {
    free((void *)xmmword_26AE6C858);
  }
  *(void *)&xmmword_26AE6C858 = 0;
  if (*((void *)&xmmword_26AE6C858 + 1)) {
    free(*((void **)&xmmword_26AE6C858 + 1));
  }
  *((void *)&xmmword_26AE6C858 + 1) = 0;
  if (qword_26AE6C868) {
    free((void *)qword_26AE6C868);
  }
  qword_26AE6C868 = 0;
  if (qword_26AE6C870) {
    free((void *)qword_26AE6C870);
  }
  qword_26AE6C870 = 0;
  if ((void)xmmword_26AE6C878) {
    free((void *)xmmword_26AE6C878);
  }
  *(void *)&xmmword_26AE6C878 = 0;
  if (*((void *)&xmmword_26AE6C878 + 1)) {
    free(*((void **)&xmmword_26AE6C878 + 1));
  }
  *((void *)&xmmword_26AE6C878 + 1) = 0;
  if (qword_26AE6C888) {
    free((void *)qword_26AE6C888);
  }
  qword_26AE6C888 = 0;
  if (qword_26AE6C890) {
    free((void *)qword_26AE6C890);
  }
  qword_26AE6C890 = 0;
  if ((void)xmmword_26AE6C898) {
    free((void *)xmmword_26AE6C898);
  }
  *(void *)&xmmword_26AE6C898 = 0;
  g_PayLoad = 0u;
  unk_26AE6C7E8 = 0u;
  xmmword_26AE6C7F8 = 0u;
  *(_OWORD *)&dword_26AE6C808 = 0u;
  xmmword_26AE6C818 = 0u;
  *(long long *)((char *)&xmmword_26AE6C818 + 12) = 0u;
  memset_s(&unk_26AE6C8C8, 0x30uLL, 0, 0x30uLL);
  g_XofBceParseState = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BCE data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrBceOrbData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrBceOrbData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

uint64_t xofSvcs_GetGloAlmData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGloAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66E09) {
        return 6;
      }
      if ((void)xmmword_26AE6C858)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGloAlmData", 1125, byte_26AE66E09, 0x24uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGloAlmData", 1133, v4, 36 * byte_26AE66E09, (const void *)xmmword_26AE6C858, 36 * byte_26AE66E09);
        *(unsigned char *)a1 = byte_26AE66E09;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGloAlmData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGloAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGloAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloAlmData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGalAlmData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGalAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE1(xmmword_26AE66DF8)) {
        return 6;
      }
      if (*((void *)&xmmword_26AE6C858 + 1))
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGalAlmData", 1173, BYTE1(xmmword_26AE66DF8), 0x1CuLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGalAlmData", 1181, v4, 28 * BYTE1(xmmword_26AE66DF8), *((const void **)&xmmword_26AE6C858 + 1), 28 * BYTE1(xmmword_26AE66DF8));
        *(unsigned char *)a1 = BYTE1(xmmword_26AE66DF8);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGalAlmData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGalAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGalAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGalAlmData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGpsBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66DCA) {
        return 6;
      }
      if (qword_26AE6C870)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGpsBrdCstEphData", 1272, byte_26AE66DCA, 0x40uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGpsBrdCstEphData", 1280, v4, byte_26AE66DCA << 6, (const void *)qword_26AE6C870, byte_26AE66DCA << 6);
        *(unsigned char *)a1 = byte_26AE66DCA;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGpsBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGpsBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGpsBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGpsBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetQzssBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetQzssBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66DEA) {
        return 6;
      }
      if (*((void *)&xmmword_26AE6C878 + 1))
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetQzssBrdCstEphData", 1321, byte_26AE66DEA, 0x40uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetQzssBrdCstEphData", 1329, v4, byte_26AE66DEA << 6, *((const void **)&xmmword_26AE6C878 + 1), byte_26AE66DEA << 6);
        *(unsigned char *)a1 = byte_26AE66DEA;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetQzssBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetQzssBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetQzssBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetQzssBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGloBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGloBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_26AE66E0A) {
        return 6;
      }
      if (qword_26AE6C890)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGloBrdCstEphData", 1369, byte_26AE66E0A, 0x2CuLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGloBrdCstEphData", 1377, v4, 44 * byte_26AE66E0A, (const void *)qword_26AE6C890, 44 * byte_26AE66E0A);
        *(unsigned char *)a1 = byte_26AE66E0A;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGloBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGloBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGloBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGalBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGalBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_26AE66DF8)) {
        return 6;
      }
      if (qword_26AE6C888)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetGalBrdCstEphData", 1417, BYTE2(xmmword_26AE66DF8), 0x44uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetGalBrdCstEphData", 1425, v4, 68 * BYTE2(xmmword_26AE66DF8), (const void *)qword_26AE6C888, 68 * BYTE2(xmmword_26AE66DF8));
        *(unsigned char *)a1 = BYTE2(xmmword_26AE66DF8);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGalBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGalBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGalBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGalBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetBdsBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetBdsBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_26AE66E18)) {
        return 6;
      }
      if ((void)xmmword_26AE6C898)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetBdsBrdCstEphData", 1466, BYTE2(xmmword_26AE66E18), 0x54uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetBdsBrdCstEphData", 1474, v4, 84 * BYTE2(xmmword_26AE66E18), (const void *)xmmword_26AE6C898, 84 * BYTE2(xmmword_26AE66E18));
        *(unsigned char *)a1 = BYTE2(xmmword_26AE66E18);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetBdsBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BDS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetBdsBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetBdsBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BdsBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetBdsBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetSbasBrdCstEphData(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetSbasBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_26AE66DD8)) {
        return 6;
      }
      if ((void)xmmword_26AE6C878)
      {
        uint64_t v4 = gnssOsa_Calloc("xofSvcs_GetSbasBrdCstEphData", 1515, BYTE2(xmmword_26AE66DD8), 0x28uLL);
        *(void *)(a1 + 8) = v4;
        if (!v4) {
          return 7;
        }
        memcpy_s("xofSvcs_GetSbasBrdCstEphData", 1523, v4, 40 * BYTE2(xmmword_26AE66DD8), (const void *)xmmword_26AE6C878, 40 * BYTE2(xmmword_26AE66DD8));
        *(unsigned char *)a1 = BYTE2(xmmword_26AE66DD8);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetSbasBrdCstEphData");
        uint64_t v7 = 1;
        int v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetSbasBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetSbasBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
  else
  {
    uint64_t v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SbasBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetSbasBrdCstEphData", 513);
      int v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetBlockLen(int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetBlockLen");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (g_XofEeParseState == 1)
  {
    BlckLeuint64_t n = xofSvcs00_24GetBlckLen(a1);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetBlockLen");
      LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
    }
  }
  else
  {
    BlckLeuint64_t n = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "xofSvcs_GetBlockLen", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
      return 0;
    }
  }
  return BlckLen;
}

uint64_t xofSvcs_GetXofInjctTime(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetXofInjctTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      *(_WORD *)a1 = WORD1(g_Header);
      *(_DWORD *)(a1 + 4) = DWORD1(g_Header);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofInjctTime");
      uint64_t v6 = 1;
      int v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetXofInjctTime", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 9;
  }
  else
  {
    uint64_t v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofInjctTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetXofInjctTime", 513);
      int v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetRtiInjctTime(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetRtiInjctTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_RtiParseState)
    {
      *(_WORD *)a1 = WORD1(g_RtiRawData);
      *(_DWORD *)(a1 + 4) = DWORD1(g_RtiRawData);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetRtiInjctTime");
      uint64_t v6 = 1;
      int v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetRtiInjctTime", 769, g_RtiParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 9;
  }
  else
  {
    uint64_t v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiInjctTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetRtiInjctTime", 513);
      int v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetXofEEStartTime(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetXofEEStartTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      *(_WORD *)a1 = WORD5(g_Header);
      *(_DWORD *)(a1 + 4) = HIDWORD(g_Header);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofEEStartTime");
      uint64_t v6 = 1;
      int v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetXofEEStartTime", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 6;
  }
  else
  {
    uint64_t v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeStartTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetXofEEStartTime", 513);
      int v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetXofBrdSvBitMask(int a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (g_XofBceParseState == 1)
    {
      switch(a1)
      {
        case 1:
          if (!byte_26AE66DCE) {
            goto LABEL_32;
          }
          uint64_t v6 = xmmword_26AE6C8F8;
          goto LABEL_29;
        case 2:
          if (!BYTE6(xmmword_26AE66DD8)) {
            goto LABEL_32;
          }
          uint64_t v6 = *((void *)&xmmword_26AE6C8F8 + 1);
          goto LABEL_29;
        case 3:
          if (!byte_26AE66DEE) {
            goto LABEL_32;
          }
          uint64_t v6 = qword_26AE6C908;
          goto LABEL_29;
        case 4:
          if (!BYTE6(xmmword_26AE66DF8)) {
            goto LABEL_32;
          }
          uint64_t v6 = qword_26AE6C910;
          goto LABEL_29;
        case 5:
          if (!byte_26AE66E0E) {
            goto LABEL_32;
          }
          uint64_t v6 = xmmword_26AE6C918;
          goto LABEL_29;
        case 6:
          if (BYTE6(xmmword_26AE66E18))
          {
            uint64_t v6 = *((void *)&xmmword_26AE6C918 + 1);
LABEL_29:
            *a2 = v6;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v13 = mach_continuous_time();
              size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
              uint64_t v8 = 1;
              goto LABEL_31;
            }
            return 1;
          }
LABEL_32:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return 6;
          }
          break;
        default:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_11;
          }
          bzero(__str, 0x410uLL);
          unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", v17);
          goto LABEL_10;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "xofSvcs_GetXofBrdSvBitMask", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
        return 6;
      }
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v14, "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
    LbsOsaTrace_WriteLog(8u, __str, v15, 5, 1);
    return 6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BrdSvBitMask\n");
LABEL_10:
    LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
  }
LABEL_11:
  uint64_t v8 = 8;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
LABEL_31:
    LbsOsaTrace_WriteLog(8u, __str, v10, 5, 1);
  }
  return v8;
}

void GncP26_05HandlePowerRepMsg(unsigned __int8 *a1, _DWORD *a2)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Rx ZX%c%c%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP26_05HandlePowerRepMsg", *a1, a1[1], a1[2]);
    LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
  }
  unsigned int PlcHwType = GncP05_62GetPlcHwType();
  if (PlcHwType > 5) {
    return;
  }
  if (((1 << PlcHwType) & 0x35) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v136 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PoweRep GCPU,HwType,%hhu\n", v136);
    goto LABEL_7;
  }
  if (PlcHwType == 1)
  {
    int v10 = a1[2];
    if (v10 == 77)
    {
      if (a2[1])
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,RunTm,%u,BBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 73, "GncP26_01MePowerRptV1", *a2, a2[1], a2[2], a2[5], a2[24]);
          LbsOsaTrace_WriteLog(8u, __str, v16, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SlpTm,%u,CpuTm,%u,SrchTm,%u,TrkTm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 73, "GncP26_01MePowerRptV1", a2[7], a2[8], a2[10], a2[11]);
          LbsOsaTrace_WriteLog(8u, __str, v18, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v19 = mach_continuous_time();
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClkFrq,%u,SE,%u,TEAcc,%u,TETde,%u,QE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "GncP26_01MePowerRptV1", a2[13], a2[14], a2[15], a2[16], a2[17]);
          LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v21 = mach_continuous_time();
          unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%u,PreBnd,%u,AGC,%u,Notch,%u,Scan,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 73, "GncP26_01MePowerRptV1", *((unsigned __int16 *)a2 + 36), *((unsigned __int8 *)a2 + 74), *((unsigned __int8 *)a2 + 75), *((unsigned __int16 *)a2 + 38), *((unsigned __int16 *)a2 + 39));
          LbsOsaTrace_WriteLog(8u, __str, v22, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PME,%u,Viterbi,%u,Dspi,%u,Dwb,%u,Spur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncP26_01MePowerRptV1", *((unsigned __int16 *)a2 + 42), *((unsigned __int16 *)a2 + 43), *((unsigned __int16 *)a2 + 44), *((unsigned __int16 *)a2 + 45), *((unsigned __int16 *)a2 + 46));
          LbsOsaTrace_WriteLog(8u, __str, v25, 4, 1);
        }
        LODWORD(v23) = a2[1];
        *(double *)&uint64_t v26 = (double)v23;
        uint64_t v27 = *((void *)a2 + 7);
        v28.i64[0] = v27;
        v28.i64[1] = HIDWORD(v27);
        int8x16_t v29 = (int8x16_t)vdivq_f64(vmulq_f64(vcvtq_f64_u64(v28), (float64x2_t)xmmword_22BB0CCF0), (float64x2_t)vdupq_lane_s64(v26, 0));
        int8x16_t v30 = vextq_s8(v29, v29, 8uLL);
        *(int8x16_t *)&qword_26AE74F90 = v30;
        v30.i32[0] = a2[17];
        unint64_t v31 = 0x3F7CCCCCCCCCCCCDLL;
        LOWORD(v31) = *((_WORD *)a2 + 38);
        unint64_t v32 = 0x3FC47AE147AE147BLL;
        *(double *)&qword_26AE74F88 = (double)v31 * 0.16 / *(double *)&v26;
        LOWORD(v32) = *((_WORD *)a2 + 39);
        unint64_t v33 = 0x4010666666666666;
        *(double *)&qword_26AE74F80 = (double)v32 * 4.1 / *(double *)&v26;
        LOWORD(v33) = *((_WORD *)a2 + 42);
        unint64_t v34 = 0x3FE947AE147AE148;
        LOWORD(v34) = *((_WORD *)a2 + 43);
        unint64_t v35 = 0x3FD3333333333333;
        *(double *)&qword_26AE74F70 = (double)v34 * 0.3 / *(double *)&v26;
        *(double *)&qword_26AE74F78 = (double)v33 * 0.79 / *(double *)&v26;
        LOWORD(v35) = *((_WORD *)a2 + 46);
        HIDWORD(v36) = 1071770501;
        *(double *)&qword_26AE74F60 = (double)v30.u64[0] * 0.00703125 / *(double *)&v26;
        *(double *)&qword_26AE74F68 = (double)v35 * 0.56 / *(double *)&v26;
        LODWORD(v36) = a2[8];
        HIDWORD(v37) = 1075485081;
        *(double *)&qword_26AE74F58 = (double)v36 * 6.65 / *(double *)&v26;
        LODWORD(v37) = a2[2];
        *(double *)&qword_26AE74FA0 = (double)v37 * 6.7 / *(double *)&v26;
        double v38 = *(double *)&qword_26AE74F58
            + *(double *)&qword_26AE74F68
            + *(double *)&qword_26AE74F70
            + *(double *)&qword_26AE74F78
            + *(double *)&qword_26AE74F80
            + *(double *)&qword_26AE74F88
            + *(double *)&qword_26AE74F60
            + *(double *)&v29.i64[1]
            + *(double *)v29.i64
            + *(double *)&qword_26AE74FA0;
        unsigned int v39 = *((unsigned __int8 *)a2 + 74);
        if (*((unsigned char *)a2 + 74))
        {
          unsigned __int8 v40 = 0;
          do
          {
            v40 += v39 & 1;
            BOOL v41 = v39 > 1;
            v39 >>= 1;
          }
          while (v41);
          int v42 = v40;
          if (v40 >= 3u)
          {
            double v43 = 9.2;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v124 = mach_continuous_time();
              unsigned __int16 v125 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumConst,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v124), "GNC", 73, "GncP26_01MePowerRptV1", v42);
              LbsOsaTrace_WriteLog(8u, __str, v125, 4, 1);
            }
          }
          else
          {
            double v43 = dbl_22BB0CDB8[(char)v40];
          }
        }
        else
        {
          int v42 = 0;
          double v43 = 0.0;
        }
        double v126 = v38 + v43;
        unsigned int v128 = a2[1];
        unsigned int v127 = a2[2];
        *(double *)&qword_26AE74F50 = (double)v127 * 15.5 / (double)v128;
        *(double *)&qword_26AE74FD8 = v126 / 1.1 + *(double *)&qword_26AE74F50 * 1.25;
        dword_26AE74FCC = a2[24];
        unk_26AE74FD0 = v128;
        dword_26AE74FD4 = v127;
        dword_26AE74F38 = a2[7];
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v129 = mach_continuous_time();
          unsigned __int16 v130 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IdleCur,%.2f,MECPU,%.2f,SE,%.2f,TEACC,%.2f,QE,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_26AE74FA0, *(double *)&qword_26AE74F58, *(double *)&qword_26AE74F98, *(double *)&qword_26AE74F90, *(double *)&qword_26AE74F60);
          LbsOsaTrace_WriteLog(8u, __str, v130, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v131 = mach_continuous_time();
          unsigned __int16 v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Notch,%.2f,Scan,%.2f,PME,%.2f,Viterbi,%.2f,Spur,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_26AE74F88, *(double *)&qword_26AE74F80, *(double *)&qword_26AE74F78, *(double *)&qword_26AE74F70, *(double *)&qword_26AE74F68);
          LbsOsaTrace_WriteLog(8u, __str, v132, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v133 = mach_continuous_time();
          unsigned __int16 v134 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%.2f,NumConst,%u,Band,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v133), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_26AE74F50, v42, v43);
          LbsOsaTrace_WriteLog(8u, __str, v134, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v135 = mach_continuous_time();
          size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: MENonRf,%f,TotMEPow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNC", 73, "GncP26_01MePowerRptV1", v126, *(double *)&qword_26AE74FD8);
          int v9 = 4;
          goto LABEL_8;
        }
        return;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        return;
      }
      goto LABEL_72;
    }
    if (v10 == 80)
    {
      if (dword_26AE74FCC)
      {
        unsigned int v11 = a2[1];
        if (v11)
        {
          if (a2[2] <= v11)
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v96 = mach_continuous_time();
              unsigned __int16 v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,ClkFrq,%u,Tsk1,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "GNC", 73, "GncP26_02CpPowerRptV1", *a2, a2[1], a2[2], *((unsigned __int16 *)a2 + 6), a2[4]);
              LbsOsaTrace_WriteLog(8u, __str, v97, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v98 = mach_continuous_time();
              unsigned __int16 v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Tsk2,%u,Tsk3,%u,Tsk4,%u,Tsk5,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "GNC", 73, "GncP26_02CpPowerRptV1", a2[5], a2[6], a2[7], a2[8]);
              LbsOsaTrace_WriteLog(8u, __str, v99, 4, 1);
            }
            unsigned int v101 = a2[1];
            unsigned int v100 = a2[2];
            double v102 = (double)v100 / (double)v101 * 2.5;
            double v103 = (double)(v101 - v100) / (double)v101 * 0.64;
            double v104 = (v102 + v103) / 1.1;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v105 = mach_continuous_time();
              unsigned __int16 v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CPCPU ActCur,%f,IdlCur,%f,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "GNC", 73, "GncP26_02CpPowerRptV1", v102, v103, (v102 + v103) / 1.1);
              LbsOsaTrace_WriteLog(8u, __str, v106, 4, 1);
            }
            unint64_t v107 = (double *)gnssOsa_Calloc("GncP26_02CpPowerRptV1", 422, 1, 0x20uLL);
            if (v107)
            {
              char v108 = v107;
              *((_DWORD *)v107 + 3) = dword_26AE74FCC;
              unsigned int v109 = unk_26AE74FD0;
              *((void *)v107 + 2) = unk_26AE74FD0;
              double v110 = v104 + *(double *)&qword_26AE74FD8;
              v107[3] = v104 + *(double *)&qword_26AE74FD8;
              word_26AE74F3C = *((_WORD *)a2 + 6);
              *(void *)&dword_26AE74F40 = *(void *)(a2 + 1);
              *(double *)&qword_26AE74FA8 = v110 / 0.85;
              *(double *)&qword_26AE74FB0 = v110 / 0.85 * (double)v109 * 0.001;
              *(double *)&qword_26AE74FB8 = v110 / 0.85 / 3.7;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v111 = mach_continuous_time();
                unsigned __int16 v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_POW_REP_IND =>GNM Tick,%u,MeasInt,%u,ActInt,%u,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "GNC", 73, "GncP26_02CpPowerRptV1", *((_DWORD *)v108 + 3), *((_DWORD *)v108 + 4), *((_DWORD *)v108 + 5), v108[3]);
                LbsOsaTrace_WriteLog(8u, __str, v112, 4, 1);
              }
              AgpsSendFsmMsg(134, 128, 8786179, v108);
              GncP26_06SndNmeaDebugPowerMsg();
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            goto LABEL_24;
          }
          return;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          return;
        }
LABEL_72:
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasIntMs,0\n");
        goto LABEL_7;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        return;
      }
LABEL_59:
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NO ME Power Report\n");
      goto LABEL_7;
    }
LABEL_25:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v137 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ZXOP Extn,%u\n", v137);
      goto LABEL_7;
    }
    return;
  }
  int v12 = a1[2];
  if (v12 == 77)
  {
    if (!a2[1])
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        return;
      }
      goto LABEL_72;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v44 = mach_continuous_time();
      unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,RunTm,%u,BBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 73, "GncP26_04MePowerRptV2", *a2, a2[1], a2[2], a2[5], a2[24]);
      LbsOsaTrace_WriteLog(8u, __str, v45, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v46 = mach_continuous_time();
      unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SlpTm,%u,CpuTm,%u,SrchTm,%u,TrkTm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 73, "GncP26_04MePowerRptV2", a2[7], a2[8], a2[10], a2[11]);
      LbsOsaTrace_WriteLog(8u, __str, v47, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v48 = mach_continuous_time();
      unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClkFrq,%u,SE,%u,TEAcc,%u,TETde,%u,QE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 73, "GncP26_04MePowerRptV2", a2[13], a2[14], a2[15], a2[16], a2[17]);
      LbsOsaTrace_WriteLog(8u, __str, v49, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v50 = mach_continuous_time();
      unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%u,PreBnd,%u,AGC,%u,Notch,%u,Scan,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 73, "GncP26_04MePowerRptV2", *((unsigned __int16 *)a2 + 36), *((unsigned __int8 *)a2 + 74), *((unsigned __int8 *)a2 + 75), *((unsigned __int16 *)a2 + 38), *((unsigned __int16 *)a2 + 39));
      LbsOsaTrace_WriteLog(8u, __str, v51, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v53 = mach_continuous_time();
      unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PME,%u,Viterbi,%u,Dspi,%u,Dwb,%u,Spur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNC", 73, "GncP26_04MePowerRptV2", *((unsigned __int16 *)a2 + 42), *((unsigned __int16 *)a2 + 43), *((unsigned __int16 *)a2 + 44), *((unsigned __int16 *)a2 + 45), *((unsigned __int16 *)a2 + 46));
      LbsOsaTrace_WriteLog(8u, __str, v54, 4, 1);
    }
    LODWORD(v52) = a2[1];
    *(double *)&uint64_t v55 = (double)v52;
    uint64_t v56 = *((void *)a2 + 7);
    v57.i64[0] = v56;
    v57.i64[1] = HIDWORD(v56);
    int8x16_t v58 = (int8x16_t)vdivq_f64(vmulq_f64(vcvtq_f64_u64(v57), (float64x2_t)xmmword_22BB0CCE0), (float64x2_t)vdupq_lane_s64(v55, 0));
    int8x16_t v59 = vextq_s8(v58, v58, 8uLL);
    *(int8x16_t *)&qword_26AE74F90 = v59;
    v59.i16[0] = *((_WORD *)a2 + 38);
    unint64_t v60 = 0x3FC1EB851EB851ECLL;
    *(double *)&qword_26AE74F88 = (double)v59.u64[0] * 0.14 / *(double *)&v55;
    LOWORD(v60) = *((_WORD *)a2 + 39);
    unint64_t v61 = 0x400CCCCCCCCCCCCDLL;
    *(double *)&qword_26AE74F80 = (double)v60 * 3.6 / *(double *)&v55;
    LOWORD(v61) = *((_WORD *)a2 + 42);
    unint64_t v62 = 0.25;
    LOWORD(v62) = *((_WORD *)a2 + 43);
    *(double *)&unint64_t v63 = (double)v62 * 0.3;
    double v64 = *(double *)&v63 / *(double *)&v55;
    LOWORD(v63) = *((_WORD *)a2 + 46);
    *(double *)&unint64_t v65 = (double)v63 * 0.45;
    double v66 = *(double *)&v65 / *(double *)&v55;
    qword_26AE74F70 = *(void *)&v64;
    *(double *)&qword_26AE74F78 = (double)v61 * 0.25 / *(double *)&v55;
    *(double *)&qword_26AE74F68 = *(double *)&v65 / *(double *)&v55;
    LODWORD(v65) = a2[8];
    *(double *)&unint64_t v67 = (double)v65 * 11.2;
    double v68 = *(double *)&v67 / *(double *)&v55;
    *(double *)&qword_26AE74F58 = *(double *)&v67 / *(double *)&v55;
    LODWORD(v67) = a2[2];
    *(double *)&qword_26AE74FA0 = (double)v67 * 2.4 / *(double *)&v55;
    double v69 = *(double *)&qword_26AE74F78
        + *(double *)&qword_26AE74F80
        + *(double *)&qword_26AE74F88
        + *(double *)&v58.i64[1]
        + *(double *)v58.i64
        + *(double *)&qword_26AE74FA0;
    unsigned int v70 = *((unsigned __int8 *)a2 + 74);
    unsigned int v71 = ((v70 >> 1) & 1) + (v70 & 1) + ((v70 & 4) >> 2);
    int v72 = ((v70 >> 4) & 1) + ((v70 >> 5) & 1);
    if (v71 >= 3)
    {
      double v73 = 8.2;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v74 = mach_continuous_time();
        unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumL1Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "GNC", 73, "GncP26_04MePowerRptV2", ((v70 >> 1) & 1) + (v70 & 1) + ((v70 & 4) >> 2));
        LbsOsaTrace_WriteLog(8u, __str, v75, 4, 1);
      }
    }
    else
    {
      double v73 = dbl_22BB0CDD0[v71];
    }
    double v76 = v64 + v69;
    if (v72)
    {
      if (v72 == 1)
      {
        double v77 = 6.5;
      }
      else
      {
        double v77 = 7.8;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v78 = mach_continuous_time();
          unsigned __int16 v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumL5Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "GNC", 73, "GncP26_04MePowerRptV2", v72);
          LbsOsaTrace_WriteLog(8u, __str, v79, 4, 1);
        }
      }
    }
    else
    {
      double v77 = 0.0;
    }
    unsigned int v80 = a2[2];
    unsigned int v81 = a2[1];
    if ((v70 & 4) != 0) {
      double v82 = (double)v80 * 12.1 / (double)v81;
    }
    else {
      double v82 = (double)(11 * v80 / v81);
    }
    if (v72) {
      double v83 = (double)(5 * v80 / v81);
    }
    else {
      double v83 = 0.0;
    }
    double v84 = (double)v80 * 0.5 / (double)v81;
    double v85 = v68 + v66 + v76 + v73 + v77;
    double v86 = v82 + v83;
    *(double *)&qword_26AE74F50 = v84 + v86;
    *(double *)&qword_26AE74FD8 = v86 * 1.15 + v85 * 0.9 + v84 * 1.8;
    dword_26AE74FCC = a2[24];
    unk_26AE74FD0 = v81;
    dword_26AE74FD4 = v80;
    dword_26AE74F38 = a2[7];
    g_PowerMeas = 1000 * (*a2 / 0x249F000u);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v87 = mach_continuous_time();
      unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartTmMs,%u,IdleCur,%.2f,MECPU,%.2f,SE,%.2f,TEACC,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "GNC", 73, "GncP26_04MePowerRptV2", g_PowerMeas, *(double *)&qword_26AE74FA0, *(double *)&qword_26AE74F58, *(double *)&qword_26AE74F98, *(double *)&qword_26AE74F90);
      LbsOsaTrace_WriteLog(8u, __str, v88, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v89 = mach_continuous_time();
      unsigned __int16 v90 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Notch,%.2f,Scan,%.2f,PME,%.2f,Viterbi,%.2f,Spur,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "GNC", 73, "GncP26_04MePowerRptV2", *(double *)&qword_26AE74F88, *(double *)&qword_26AE74F80, *(double *)&qword_26AE74F78, *(double *)&qword_26AE74F70, *(double *)&qword_26AE74F68);
      LbsOsaTrace_WriteLog(8u, __str, v90, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v91 = mach_continuous_time();
      unsigned __int16 v92 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%.2f,NumConst,%u,NumL5Const,%u,BdsUsed,%u,PreBand,%.2f,PreBandL5,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v91), "GNC", 73, "GncP26_04MePowerRptV2", *(double *)&qword_26AE74F50, v71, v72, (v70 >> 2) & 1, v73, v77);
      LbsOsaTrace_WriteLog(8u, __str, v92, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v93 = mach_continuous_time();
      unsigned __int16 v94 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MENonRf,%f,TotMEPow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "GNC", 73, "GncP26_04MePowerRptV2", v85, *(double *)&qword_26AE74FD8);
      LbsOsaTrace_WriteLog(8u, __str, v94, 4, 1);
    }
    unsigned int v95 = g_PowerMeas - dword_26AE74F34;
LABEL_109:
    if (v95 <= 0x31) {
      GncP26_07SndPowerRptV2();
    }
    return;
  }
  if (v12 != 80) {
    goto LABEL_25;
  }
  if (!dword_26AE74FCC)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return;
    }
    goto LABEL_59;
  }
  unsigned int v13 = a2[1];
  if (!v13)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      return;
    }
    goto LABEL_72;
  }
  if (a2[2] <= v13)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v113 = mach_continuous_time();
      unsigned __int16 v114 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,ClkFrq,%u,Tsk1,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v113), "GNC", 73, "GncP26_03CpPowerRptV2", *a2, a2[1], a2[2], *((unsigned __int16 *)a2 + 6), a2[4]);
      LbsOsaTrace_WriteLog(8u, __str, v114, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v115 = mach_continuous_time();
      unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Tsk2,%u,Tsk3,%u,Tsk4,%u,Tsk5,%u,Tsk6,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "GNC", 73, "GncP26_03CpPowerRptV2", a2[5], a2[6], a2[7], a2[8], a2[9]);
      LbsOsaTrace_WriteLog(8u, __str, v116, 4, 1);
    }
    unsigned int v118 = a2[1];
    unsigned int v117 = a2[2];
    double v119 = 1.0 / (double)v118;
    double v120 = v119 * (double)v117 * 2.2;
    double v121 = v119 * (double)(v118 - v117) * 0.64;
    *(double *)&qword_26AE74F48 = (v120 + v121) * 0.9;
    word_26AE74F3C = *((_WORD *)a2 + 6);
    dword_26AE74F40 = v118;
    unk_26AE74F44 = v117;
    dword_26AE74F34 = 1000 * (*a2 / 0x249F000u);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v122 = mach_continuous_time();
      unsigned __int16 v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CPCPU StartTmMs,%u,ActCur,%f,IdlCur,%f,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "GNC", 73, "GncP26_03CpPowerRptV2", dword_26AE74F34, v120, v121, *(double *)&qword_26AE74F48);
      LbsOsaTrace_WriteLog(8u, __str, v123, 4, 1);
    }
    unsigned int v95 = dword_26AE74F34 - g_PowerMeas;
    goto LABEL_109;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
LABEL_24:
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Strt,%u,MeasInt,%u,ActInt,%u\n", v14, "GNC");
LABEL_7:
    size_t v8 = v7;
    int v9 = 2;
LABEL_8:
    LbsOsaTrace_WriteLog(8u, __str, v8, v9, 1);
  }
}

void GncP26_06SndNmeaDebugPowerMsg(void)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __int16 v0 = g_GncPCntxtInfo;
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
  if ((IsLoggingAllowed & 1) == 0 && (v0 & 0x200) == 0) {
    return;
  }
  bzero(__str, 0x400uLL);
  unsigned __int16 v18 = snprintf(__str, 0x400uLL, "$PDPMT,%u,%u,%u,%u", dword_26AE74FCC, unk_26AE74FD0, dword_26AE74FD4, dword_26AE74F38);
  if (!HswUtil_AddNmeaCS(__str, 0x400u, &v18))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return;
    }
    bzero(v19, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    uint64_t v16 = v18;
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5);
    uint64_t v4 = "%10u %s%c %s: #%04hx BytesWritten,%u\n";
    goto LABEL_13;
  }
  uint64_t v2 = v18;
  if (v18 >= 0x400u) {
    goto LABEL_9;
  }
  unsigned __int16 v3 = 1024 - v18;
  unsigned __int16 v18 = snprintf(&__str[v18], 1024 - v18, "$PDPMC,%u,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", dword_26AE74FCC, *(double *)&qword_26AE74FA0, *(double *)&qword_26AE74F98, *(double *)&qword_26AE74F90, *(double *)&qword_26AE74F88, *(double *)&qword_26AE74F80, *(double *)&qword_26AE74F78, *(double *)&qword_26AE74F70, *(double *)&qword_26AE74F68, *(double *)&qword_26AE74F60, *(double *)&qword_26AE74F58, *(double *)&qword_26AE74F50);
  if (!HswUtil_AddNmeaCS(&__str[v2], v3, &v18)) {
    goto LABEL_28;
  }
  uint64_t v2 = (unsigned __int16)(v18 + v2);
  if (v2 >= 0x400)
  {
LABEL_9:
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return;
    }
    bzero(v19, 0x410uLL);
    uint64_t v16 = v2;
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v4 = "%10u %s%c %s: #%04hx NmeaLen,%u\n";
LABEL_13:
    unsigned __int16 v6 = snprintf(v19, 0x40FuLL, v4, v15, "GNC", 69, "GncP26_06SndNmeaDebugPowerMsg", 772, v16, v17);
LABEL_14:
    LbsOsaTrace_WriteLog(8u, v19, v6, 0, 1);
    return;
  }
  unsigned __int16 v18 = snprintf(&__str[v2], (1024 - v2), "$PDPGT,%u,%u,%u,%u,%u", dword_26AE74FCC, dword_26AE74F40, unk_26AE74F44, dword_26AE74F40 - unk_26AE74F44, (unsigned __int16)word_26AE74F3C);
  if (HswUtil_AddNmeaCS(&__str[v2], (unsigned __int16)(1024 - v2), &v18))
  {
    uint64_t v2 = (unsigned __int16)(v18 + v2);
    if (v2 >= 0x400) {
      goto LABEL_9;
    }
    unsigned __int16 v18 = snprintf(&__str[v2], (1024 - v2), "$PDPTM,%u,%u,%u,%.3f,%.3f,%.3f", dword_26AE74FCC, unk_26AE74FD0, dword_26AE74FD4, *(double *)&qword_26AE74FB8, *(double *)&qword_26AE74FA8, *(double *)&qword_26AE74FB0);
    if (HswUtil_AddNmeaCS(&__str[v2], (unsigned __int16)(1024 - v2), &v18))
    {
      unsigned __int16 v7 = v18 + v2;
      if (v7 < 0x401u) {
        int v8 = IsLoggingAllowed;
      }
      else {
        int v8 = 0;
      }
      if (v8 == 1) {
        LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)__str, v7);
      }
      if ((v0 & 0x200) != 0)
      {
        int v9 = gnssOsa_Calloc("GncP26_06SndNmeaDebugPowerMsg", 218, 1, 0x18uLL);
        if (v9)
        {
          int v10 = v9;
          unsigned int v11 = gnssOsa_Calloc("GncP26_06SndNmeaDebugPowerMsg", 227, (unsigned __int16)(v7 + 1), 1uLL);
          v10[2] = v11;
          if (v11)
          {
            memcpy_s("GncP26_06SndNmeaDebugPowerMsg", 234, v11, (unsigned __int16)(v7 + 1), __str, v7);
            *((_WORD *)v10 + 6) = v7;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(v19, 0x410uLL);
              uint64_t v12 = mach_continuous_time();
              unsigned __int16 v13 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND =>GNM Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP26_06SndNmeaDebugPowerMsg", *((unsigned __int16 *)v10 + 6));
              LbsOsaTrace_WriteLog(8u, v19, v13, 4, 1);
            }
            AgpsSendFsmMsg(134, 128, 8786691, v10);
          }
          else
          {
            free(v10);
          }
        }
      }
      return;
    }
  }
LABEL_28:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(v19, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: #%04hx NmeaLen,%u,BytesWritten,%u\n", v14);
    goto LABEL_14;
  }
}

void GncP26_07SndPowerRptV2(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  __int16 v0 = (double *)gnssOsa_Calloc("GncP26_07SndPowerRptV2", 253, 1, 0x20uLL);
  if (v0)
  {
    unsigned __int16 v1 = v0;
    *((_DWORD *)v0 + 3) = dword_26AE74FCC;
    unsigned int v2 = unk_26AE74FD0;
    *((void *)v0 + 2) = unk_26AE74FD0;
    double v3 = *(double *)&qword_26AE74FD8 + *(double *)&qword_26AE74F48;
    v0[3] = *(double *)&qword_26AE74FD8 + *(double *)&qword_26AE74F48;
    *(double *)&qword_26AE74FA8 = v3 / 0.85;
    *(double *)&qword_26AE74FB0 = v3 / 0.85 * (double)v2 * 0.001;
    *(double *)&qword_26AE74FB8 = v3 / 0.85 / 3.7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_POW_REP_IND =>GNM Tick,%u,MeasInt,%u,ActInt,%u,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP26_07SndPowerRptV2", *((_DWORD *)v1 + 3), *((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), v1[3]);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8786179, v1);
    GncP26_06SndNmeaDebugPowerMsg();
  }
}

uint64_t GM_Prop_AAD(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = (a2 - 1);
  if (a2 - 1 >= 0)
  {
    int v4 = result;
    uint64_t v5 = v3 + 1;
    uint64_t v6 = a3 + 48 * v3;
    do
    {
      if (*(unsigned char *)(v6 + 8))
      {
        if (*(unsigned char *)(v6 + 4))
        {
          long long v7 = *(_OWORD *)(v6 + 16);
          v9[0] = *(_OWORD *)v6;
          v9[1] = v7;
          void v9[2] = *(_OWORD *)(v6 + 32);
          *(_DWORD *)uint64_t v6 = v4;
          size_t result = Comp_Cur_Acq_Aid((uint64_t)v9, v6);
        }
      }
      v6 -= 48;
    }
    while (v5-- > 1);
  }
  return result;
}

double Nav_Kalman_Update_Init()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v18 = v2;
  uint64_t v19 = v1;
  uint64_t v3 = v0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v17 = (unsigned char *)(v0 + 11528);
  uint64_t v20 = v0 + 7172;
  bzero(v22, 0x69F0uLL);
  uint64_t v23 = 0x500000002;
  BYTE1(v24[0]) = 0;
  *((void *)&v24[6] + 1) = 0;
  v24[7] = 0uLL;
  *(void *)((char *)&v24[8] + 4) = 0;
  *(void *)((char *)&v24[8] + 12) = 0;
  *(void *)((char *)&v24[9] + 1) = 0;
  *(void *)((char *)&v24[16] + 12) = 0;
  *(void *)((char *)&v24[17] + 4) = 0;
  HIDWORD(v24[17]) = 0;
  *(void *)((char *)&v24[18] + 4) = 0;
  *(void *)((char *)&v24[18] + 12) = 0;
  DWORD1(v24[19]) = 0;
  *(_OWORD *)((char *)v24 + 4) = 0u;
  *(_OWORD *)((char *)&v24[1] + 4) = 0u;
  *(_OWORD *)((char *)&v24[2] + 4) = 0u;
  *(_OWORD *)((char *)&v24[3] + 4) = 0u;
  *(_OWORD *)((char *)&v24[4] + 4) = 0u;
  *(_OWORD *)((char *)&v24[5] + 4) = 0u;
  BYTE4(v24[6]) = 0;
  *(void *)((char *)&v24[12] + 10) = 0;
  *(_OWORD *)((char *)&v24[11] + 12) = 0u;
  *(_OWORD *)((char *)&v24[10] + 12) = 0u;
  *(_OWORD *)((char *)&v24[9] + 12) = 0u;
  *(_OWORD *)((char *)&v24[13] + 4) = 0u;
  *(_OWORD *)((char *)&v24[14] + 4) = 0u;
  *(_OWORD *)((char *)&v24[15] + 4) = 0u;
  DWORD1(v24[16]) = 0;
  bzero((char *)&v24[19] + 12, 0x498uLL);
  *(void *)((char *)&v24[94] + 4) = 0;
  *(void *)((char *)&v24[93] + 12) = 0;
  *(void *)((char *)&v24[95] + 12) = 0;
  *(void *)((char *)&v24[95] + 4) = 0;
  DWORD1(v24[93]) = 1;
  HIDWORD(v24[94]) = 0;
  LOBYTE(v24[95]) = 0;
  *(_OWORD *)((char *)&v24[96] + 4) = 0u;
  *(_OWORD *)((char *)&v24[97] + 4) = 0u;
  *(_OWORD *)((char *)&v24[98] + 4) = 0u;
  BYTE4(v24[99]) = 0;
  DWORD1(v24[100]) = 1;
  *(_OWORD *)((char *)&v24[100] + 12) = 0u;
  *(_OWORD *)((char *)&v24[101] + 12) = 0u;
  *(_OWORD *)((char *)&v24[102] + 12) = 0u;
  *(_DWORD *)((char *)&v24[103] + 11) = 0;
  *(_OWORD *)((char *)&v24[126] + 12) = 0u;
  *(_OWORD *)((char *)&v24[127] + 12) = 0u;
  *(_OWORD *)((char *)&v24[124] + 12) = 0u;
  *(_OWORD *)((char *)&v24[125] + 12) = 0u;
  *(_OWORD *)((char *)&v24[122] + 12) = 0u;
  *(_OWORD *)((char *)&v24[123] + 12) = 0u;
  *(_OWORD *)((char *)&v24[120] + 12) = 0u;
  *(_OWORD *)((char *)&v24[121] + 12) = 0u;
  *(_OWORD *)((char *)&v24[118] + 12) = 0u;
  *(_OWORD *)((char *)&v24[119] + 12) = 0u;
  *(_OWORD *)((char *)&v24[116] + 12) = 0u;
  *(_OWORD *)((char *)&v24[117] + 12) = 0u;
  *(_OWORD *)((char *)&v24[114] + 12) = 0u;
  *(_OWORD *)((char *)&v24[115] + 12) = 0u;
  *(_OWORD *)((char *)&v24[112] + 12) = 0u;
  *(_OWORD *)((char *)&v24[113] + 12) = 0u;
  *(_OWORD *)((char *)&v24[110] + 12) = 0u;
  *(_OWORD *)((char *)&v24[111] + 12) = 0u;
  *(_OWORD *)((char *)&v24[108] + 12) = 0u;
  *(_OWORD *)((char *)&v24[109] + 12) = 0u;
  *(_OWORD *)((char *)&v24[106] + 12) = 0u;
  *(_OWORD *)((char *)&v24[107] + 12) = 0u;
  *(_OWORD *)((char *)&v24[104] + 12) = 0u;
  *(_OWORD *)((char *)&v24[105] + 12) = 0u;
  uint64_t v4 = 261;
  BYTE5(v24[104]) = 0;
  do
  {
    uint64_t v5 = &v22[v4];
    *(_DWORD *)uint64_t v5 = 0;
    *(_OWORD *)(v5 + 1) = 0uLL;
    *(_OWORD *)(v5 + 3) = 0uLL;
    v4 += 5;
  }
  while (v5 + 5 != (void *)((char *)&v24[248] + 12));
  uint64_t v6 = 501;
  do
  {
    long long v7 = &v22[v6];
    *(_DWORD *)long long v7 = 0;
    *(_OWORD *)(v7 + 1) = 0uLL;
    *(_OWORD *)(v7 + 3) = 0uLL;
    v6 += 5;
  }
  while (v7 + 5 != (void *)((char *)&v24[368] + 12));
  *(void *)((char *)&v24[447] + 4) = 0;
  HIDWORD(v24[447]) = 0;
  *(void *)((char *)&v24[448] + 4) = 0;
  HIDWORD(v24[448]) = 0;
  bzero((char *)&v24[368] + 12, 0x4E4uLL);
  *(_OWORD *)((char *)&v24[456] + 4) = 0u;
  *(_OWORD *)((char *)&v24[455] + 4) = 0u;
  *(_OWORD *)((char *)&v24[454] + 4) = 0u;
  *(_OWORD *)((char *)&v24[453] + 4) = 0u;
  *(_OWORD *)((char *)&v24[452] + 4) = 0u;
  *(_OWORD *)((char *)&v24[451] + 4) = 0u;
  *(_OWORD *)((char *)&v24[450] + 4) = 0u;
  *(_OWORD *)((char *)&v24[449] + 4) = 0u;
  DWORD1(v24[457]) = -1;
  *(void *)((char *)&v24[515] + 12) = 0;
  BYTE4(v24[516]) = 0;
  *(void *)((char *)&v24[693] + 12) = 0;
  DWORD1(v24[694]) = 0;
  *(void *)((char *)&v24[700] + 12) = 0;
  DWORD1(v24[701]) = 0;
  *(void *)((char *)&v24[718] + 4) = 0;
  BYTE12(v24[718]) = 0;
  *(_OWORD *)((char *)&v24[713] + 12) = 0u;
  *(_OWORD *)((char *)&v24[714] + 12) = 0u;
  *(_OWORD *)((char *)&v24[715] + 12) = 0u;
  *(_OWORD *)((char *)&v24[716] + 12) = 0u;
  BYTE12(v24[717]) = 0;
  *(void *)((char *)&v24[724] + 4) = 0;
  BYTE12(v24[724]) = 0;
  DWORD1(v24[719]) = 0;
  *(_OWORD *)((char *)&v24[719] + 12) = 0u;
  *(_OWORD *)((char *)&v24[720] + 12) = 0u;
  *(_OWORD *)((char *)&v24[721] + 12) = 0u;
  *(_OWORD *)((char *)&v24[722] + 12) = 0u;
  BYTE12(v24[723]) = 0;
  BYTE4(v24[725]) = 0;
  BYTE12(v24[1680]) = 0;
  *((void *)&v24[1685] + 1) = 0;
  *((void *)&v24[1692] + 1) = 0;
  bzero((char *)&v24[457] + 8, 0x39FuLL);
  bzero((char *)&v24[516] + 12, 0xAA6uLL);
  DWORD1(v24[689]) = 0;
  *(_OWORD *)((char *)&v24[688] + 4) = 0u;
  *(_OWORD *)((char *)&v24[687] + 4) = 0u;
  BYTE4(v24[691]) = 0;
  *(void *)((char *)&v24[689] + 12) = 0;
  *(_OWORD *)((char *)&v24[690] + 4) = 0u;
  *(_OWORD *)((char *)&v24[691] + 8) = 0u;
  *(_OWORD *)((char *)&v24[692] + 8) = 0u;
  *(_OWORD *)((char *)&v24[694] + 12) = 0u;
  *(_DWORD *)((char *)&v24[695] + 11) = 0;
  memset(&v24[696], 0, 22);
  *((void *)&v24[698] + 1) = 0;
  *(_OWORD *)((char *)&v24[697] + 8) = 0u;
  BYTE4(v24[700]) = 0;
  *(_OWORD *)((char *)&v24[699] + 4) = 0u;
  *(_OWORD *)((char *)&v24[701] + 12) = 0u;
  *(_OWORD *)((char *)&v24[702] + 12) = 0u;
  *(_OWORD *)((char *)&v24[703] + 12) = 0u;
  *(_OWORD *)((char *)&v24[704] + 12) = 0u;
  *(_OWORD *)((char *)&v24[705] + 12) = 0u;
  *(_OWORD *)((char *)&v24[706] + 12) = 0u;
  *(_OWORD *)((char *)&v24[707] + 12) = 0u;
  *(_OWORD *)((char *)&v24[708] + 12) = 0u;
  *(_OWORD *)((char *)&v24[709] + 12) = 0u;
  *(_OWORD *)((char *)&v24[710] + 12) = 0u;
  *(_OWORD *)((char *)&v24[711] + 12) = 0u;
  *(_OWORD *)((char *)&v24[712] + 8) = 0u;
  bzero((char *)&v24[725] + 8, 0x3B6CuLL);
  BYTE4(v24[1685]) = 0;
  *(_OWORD *)((char *)&v24[1684] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1683] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1682] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1681] + 4) = 0u;
  BYTE4(v24[1692]) = 0;
  *(_OWORD *)((char *)&v24[1686] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1687] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1688] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1689] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1690] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1691] + 4) = 0u;
  *(void *)uint64_t v3 = v22[0];
  *(void *)(v3 + 20) = v23;
  memcpy((void *)(v3 + 28), v24, 0x69D0uLL);
  *(_DWORD *)uint64_t v3 = 167849989;
  *(_WORD *)(v3 + 4) = 284;
  *(void *)(v3 + 8) = 0x10001000105DCLL;
  *(_DWORD *)(v3 + 16) = 655366;
  unsigned int v8 = *(_DWORD *)(v18 + 52);
  *(_DWORD *)(v3 + 20) = v8;
  unsigned int v9 = *(_DWORD *)(v18 + 56);
  *(_DWORD *)(v3 + 24) = v9;
  v21[0] = v8;
  v21[1] = v9;
  NK_Set_Dynamics(v21, v3 + 32);
  *(unsigned char *)(v3 + 128) = 1;
  *(_DWORD *)(v3 + 132) = 1;
  *(_DWORD *)(v3 + 152) = -1;
  *(_WORD *)(v20 + 3989) = 1;
  *(_DWORD *)(v3 + 11136) = -1;
  *(_DWORD *)(v3 + 11440) = -1;
  *(void *)(v3 + 11480) = 0x416312D000000000;
  int64x2_t v10 = vdupq_n_s64(0x416312D000000000uLL);
  *(int64x2_t *)(v3 + 11488) = v10;
  *(void *)(v3 + 11504) = 0x416312D000000000;
  *uint64_t v17 = -1;
  *(_DWORD *)(v3 + 11536) = -1;
  *(void *)(v3 + 11576) = 0x416312D000000000;
  *(int64x2_t *)(v3 + 11584) = v10;
  *(void *)(v3 + 11600) = 0x416312D000000000;
  v17[96] = -1;
  *(void *)(v3 + 272) = *(void *)(v19 + 224);
  double v11 = dbl_22BB0C060[*(_DWORD *)(v18 + 52) < 5u];
  *(double *)(v3 + 280) = v11;
  if (*(unsigned char *)(v19 + 19)) {
    *(double *)(v3 + 280) = v11 * 0.5;
  }
  *(void *)(v3 + 328) = 0x4163125300000000;
  *(void *)(v3 + 304) = 0x4163125300000000;
  *(unsigned char *)(v3 + 1696) = 1;
  *(unsigned char *)uint64_t v20 = 18;
  *(_WORD *)(v3 + 233) = 513;
  *(_WORD *)(v3 + 236) = 5;
  *(void *)(v3 + 27032) = 0;
  *(void *)(v3 + 27048) = 0;
  *(void *)(v3 + 27040) = 0;
  Geo2ECEF(v3 + 27032, (uint64_t)&WGS84_Datum, (double *)(v3 + 27008));
  __double2 v12 = __sincos_stret(*(double *)(v3 + 27032));
  *(__double2 *)(v3 + 27056) = v12;
  double v13 = 1.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  double v14 = *(double *)(v3 + 27048);
  double v15 = v12.__cosval * (v14 + v13 * 6378137.0);
  if (v15 < 1.0) {
    double v15 = 1.0;
  }
  *(double *)(v3 + 27080) = v15;
  double result = v14 + v13 * (v13 * v13) * 6335439.33;
  *(double *)(v3 + 27072) = result;
  return result;
}

unsigned int *NK_Set_Dynamics(unsigned int *result, uint64_t a2)
{
  *(_OWORD *)a2 = xmmword_22BB0CE40;
  *(_OWORD *)(a2 + 16) = xmmword_22BB0CE50;
  *(void *)(a2 + 32) = 0x3F978D4FDF3B645ALL;
  unsigned int v2 = *result;
  int64x2_t v3 = vdupq_n_s64(0x3FA47AE147AE147CuLL);
  double v4 = 25.0;
  __asm { FMOV            V6.2D, #25.0 }
  double v10 = 0.25;
  uint64_t v11 = 0;
  double v12 = 400.0;
  double v13 = 0.04;
  double v14 = 0.0204081633;
  switch(*result)
  {
    case 0u:
    case 1u:
      goto LABEL_4;
    case 2u:
      goto LABEL_11;
    case 3u:
      int64x2_t v3 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      double v10 = 4.0;
      double v13 = 0.100489;
      double v14 = 0.01;
      goto LABEL_11;
    case 4u:
      int64x2_t v3 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      double v10 = 9.0;
      double v13 = 0.100489;
      double v14 = 0.00694444444;
LABEL_11:
      *(int64x2_t *)(a2 + 40) = v3;
      *(void *)(a2 + 56) = 0x3FF0000000000000;
      *(double *)(a2 + 72) = v10;
      *(double *)(a2 + 88) = v14;
      goto LABEL_20;
    case 5u:
      *(int64x2_t *)(a2 + 40) = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      *(void *)(a2 + 56) = 0x3FF0000000000000;
      *(void *)(a2 + 72) = 0x4039000000000000;
      *(void *)(a2 + 88) = 0x3FB0000000000000;
      double v15 = 25.0;
      double v14 = 0.0625;
      goto LABEL_24;
    case 6u:
      __asm { FMOV            V0.2D, #1.0; jumptable 000000022B8CF20C case 6 }
      *(_OWORD *)(a2 + 40) = _Q0;
      *(void *)(a2 + 56) = 0x3FF0000000000000;
      *(double *)&uint64_t v17 = 100.0;
      *(void *)(a2 + 72) = 0x4059000000000000;
      *(void *)(a2 + 88) = 0x3FD0000000000000;
      double v14 = 0.25;
      goto LABEL_22;
    case 7u:
      goto LABEL_15;
    case 8u:
      _Q6 = vdupq_n_s64(0x4202A05F20000000uLL);
      double v12 = 1000000.0;
      double v4 = 1.0e10;
LABEL_15:
      *(int64x2_t *)(a2 + 40) = _Q6;
      *(void *)(a2 + 56) = 0x3FF0000000000000;
      double v13 = v4;
      break;
    default:
      uint64_t v11 = 0x4202A05F20000000;
LABEL_4:
      if (v2 >= 2) {
        double v13 = 1.0e10;
      }
      else {
        double v13 = 0.0;
      }
      *(void *)(a2 + 40) = v11;
      *(double *)(a2 + 48) = v13;
      *(void *)(a2 + 56) = 0x3FF0000000000000;
      if (v2 >= 2) {
        double v12 = 1000000.0;
      }
      else {
        double v12 = 0.0;
      }
      break;
  }
  *(double *)(a2 + 72) = v12;
  *(void *)(a2 + 88) = 0x3FF0000000000000;
  double v10 = 0.0;
  double v14 = 1.0;
  if (v2 < 2)
  {
LABEL_20:
    *(double *)(a2 + 80) = v14 * v10;
    *(double *)(a2 + 64) = v14;
    *(double *)(a2 + 48) = v13 * 0.5;
  }
  else
  {
    if (v2 == 7)
    {
      *(double *)&uint64_t v17 = 400.0;
LABEL_22:
      double v15 = *(double *)&v17;
    }
    else
    {
      if (v2 == 8)
      {
        *(void *)(a2 + 80) = 0x412E848000000000;
        *(void *)(a2 + 64) = 0x3FF0000000000000;
        *(_OWORD *)(a2 + 24) = xmmword_22BB0CE60;
        return result;
      }
      double v15 = 1000000.0;
    }
LABEL_24:
    *(double *)(a2 + 80) = v14 * v15;
    *(double *)(a2 + 64) = v14;
  }
  return result;
}

uint64_t NK_Set_XO_PN(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = xmmword_22BB0CE70;
  if (*(_WORD *)(result + 248))
  {
    *(_OWORD *)(a2 + 24) = xmmword_22BB0CE80;
    int v2 = (int)*(double *)(result + 80);
    if ((v2 - 71) <= 0xFFFFFFAE)
    {
      if ((v2 - 101) >= 0xFFFFFF73)
      {
        if ((v2 - 96) >= 0xFFFFFF7D)
        {
          if ((v2 - 91) >= 0xFFFFFF87)
          {
            if ((v2 - 86) >= 0xFFFFFF91)
            {
              if ((v2 - 81) >= 0xFFFFFF9B)
              {
                int32x2_t v4 = vdup_n_s32((v2 - 76) < 0xFFFFFFA5);
                v5.i64[0] = v4.u32[0];
                v5.i64[1] = v4.u32[1];
                int8x16_t v3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)xmmword_22BB0CEF0, (int8x16_t)xmmword_22BB0CEE0);
              }
              else
              {
                int8x16_t v3 = (int8x16_t)xmmword_22BB0CED0;
              }
            }
            else
            {
              int8x16_t v3 = (int8x16_t)xmmword_22BB0CEC0;
            }
          }
          else
          {
            int8x16_t v3 = (int8x16_t)xmmword_22BB0CEB0;
          }
        }
        else
        {
          int8x16_t v3 = (int8x16_t)xmmword_22BB0CEA0;
        }
      }
      else
      {
        int8x16_t v3 = (int8x16_t)xmmword_22BB0CE90;
      }
      *(int8x16_t *)(a2 + 24) = v3;
    }
  }
  return result;
}

void s_Nav_Kalman_SD::s_Nav_Kalman_SD(s_Nav_Kalman_SD *this)
{
  int v2 = (char *)this + 26920;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  int8x16_t v3 = (char *)this + 8288;
  *((_DWORD *)this + 4) = 0;
  *(void *)((char *)this + 20) = 0x500000002;
  *((_WORD *)this + 14) = 0;
  *((unsigned char *)this + 30) = 0;
  *(void *)((char *)this + 132) = 0;
  *(void *)((char *)this + 148) = 0;
  *(void *)((char *)this + 140) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *(void *)((char *)this + 173) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((unsigned char *)this + 128) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(void *)((char *)this + 230) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 0;
  bzero((char *)this + 344, 0x498uLL);
  *((void *)this + 192) = 0;
  *((void *)this + 191) = 0;
  *((void *)this + 195) = 0;
  *((void *)this + 194) = 0;
  *((_DWORD *)this + 380) = 1;
  *((_DWORD *)this + 386) = 0;
  *((unsigned char *)this + 1548) = 0;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((unsigned char *)this + 1616) = 0;
  *((void *)this + 203) = 0;
  *((_DWORD *)this + 408) = 1;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_DWORD *)((char *)this + 1687) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  uint64_t v4 = 2088;
  *((_WORD *)this + 848) = 0;
  do
  {
    int64x2_t v5 = (char *)this + v4;
    *(_DWORD *)int64x2_t v5 = 0;
    *(_OWORD *)(v5 + 8) = 0uLL;
    *(_OWORD *)(v5 + 24) = 0uLL;
    v4 += 40;
  }
  while (v5 + 40 != (char *)this + 4008);
  uint64_t v6 = (char *)this + 5928;
  uint64_t v7 = 4008;
  do
  {
    unsigned int v8 = (char *)this + v7;
    *(_DWORD *)unsigned int v8 = 0;
    *(_OWORD *)(v8 + 8) = 0uLL;
    *(_OWORD *)(v8 + 24) = 0uLL;
    v7 += 40;
  }
  while (v8 + 40 != v6);
  *((void *)this + 898) = 0;
  *((_DWORD *)this + 1798) = 0;
  *((void *)this + 900) = 0;
  *((_DWORD *)this + 1802) = 0;
  bzero(v6, 0x4E4uLL);
  *((_OWORD *)this + 458) = 0u;
  *((_OWORD *)this + 457) = 0u;
  *((_OWORD *)this + 456) = 0u;
  *((_OWORD *)this + 455) = 0u;
  *((_OWORD *)this + 454) = 0u;
  *((_OWORD *)this + 453) = 0u;
  *((_OWORD *)this + 452) = 0u;
  *((_OWORD *)this + 451) = 0u;
  *((_DWORD *)this + 1836) = -1;
  *((void *)this + 1035) = 0;
  *int8x16_t v3 = 0;
  *((void *)this + 1391) = 0;
  *((_DWORD *)this + 2784) = 0;
  *((void *)this + 1405) = 0;
  *((_DWORD *)this + 2812) = 0;
  *((void *)this + 1440) = 0;
  v3[3240] = 0;
  *(_OWORD *)((char *)this + 11448) = 0u;
  *(_OWORD *)((char *)this + 11464) = 0u;
  *(_OWORD *)((char *)this + 11480) = 0u;
  *(_OWORD *)((char *)this + 11496) = 0u;
  *((unsigned char *)this + 11512) = 0;
  *((void *)this + 1452) = 0;
  v3[3336] = 0;
  *((_DWORD *)this + 2884) = 0;
  *(_OWORD *)((char *)this + 11544) = 0u;
  *(_OWORD *)((char *)this + 11560) = 0u;
  *(_OWORD *)((char *)this + 11576) = 0u;
  *(_OWORD *)((char *)this + 11592) = 0u;
  *((unsigned char *)this + 11608) = 0;
  v3[3344] = 0;
  *int v2 = 0;
  *(void *)(v2 + 76) = 0;
  *(void *)(v2 + 188) = 0;
  bzero((char *)this + 7348, 0x39FuLL);
  bzero((char *)this + 8296, 0xAA6uLL);
  *((_DWORD *)this + 2764) = 0;
  *((_OWORD *)this + 690) = 0u;
  *((_OWORD *)this + 689) = 0u;
  *((void *)this + 1383) = 0;
  *((_OWORD *)this + 692) = 0u;
  *((unsigned char *)this + 11088) = 0;
  *(_OWORD *)((char *)this + 11092) = 0u;
  *(_OWORD *)((char *)this + 11108) = 0u;
  *(_OWORD *)((char *)this + 11144) = 0u;
  *(_DWORD *)((char *)this + 11159) = 0;
  *(_OWORD *)((char *)this + 11164) = 0u;
  *(void *)((char *)this + 11178) = 0;
  *(void *)((char *)this + 11204) = 0;
  *(_OWORD *)((char *)this + 11188) = 0u;
  *((_OWORD *)this + 701) = 0u;
  *((unsigned char *)this + 11232) = 0;
  *(_OWORD *)((char *)this + 11256) = 0u;
  *(_OWORD *)((char *)this + 11272) = 0u;
  *(_OWORD *)((char *)this + 11288) = 0u;
  *(_OWORD *)((char *)this + 11304) = 0u;
  *(_OWORD *)((char *)this + 11320) = 0u;
  *(_OWORD *)((char *)this + 11336) = 0u;
  *(_OWORD *)((char *)this + 11352) = 0u;
  *(_OWORD *)((char *)this + 11368) = 0u;
  *(_OWORD *)((char *)this + 11384) = 0u;
  *(_OWORD *)((char *)this + 11400) = 0u;
  *(_OWORD *)((char *)this + 11416) = 0u;
  *(_OWORD *)((char *)this + 11428) = 0u;
  bzero((char *)this + 11636, 0x3B6CuLL);
  *((unsigned char *)this + 26992) = 0;
  *((_OWORD *)this + 1686) = 0u;
  *((_OWORD *)this + 1685) = 0u;
  *((_OWORD *)this + 1684) = 0u;
  *((_OWORD *)this + 1683) = 0u;
  *((_OWORD *)this + 1688) = 0u;
  *((_OWORD *)this + 1689) = 0u;
  *((_OWORD *)this + 1690) = 0u;
  *((_OWORD *)this + 1691) = 0u;
  *((_OWORD *)this + 1692) = 0u;
  *((_OWORD *)this + 1693) = 0u;
  *((unsigned char *)this + 27104) = 0;
}

unsigned char *BDS_D1_EphBin2Int(unsigned char *result, unsigned int *a2, uint64_t a3)
{
  if (*result)
  {
    unsigned int v3 = *a2;
    unsigned int v4 = a2[1];
    *(unsigned char *)(a3 + 22) = (*a2 & 0x200) != 0;
    *(unsigned char *)(a3 + 19) = (v3 >> 4) & 0x1F;
    *(unsigned char *)(a3 + 21) = v3 & 0xF;
    *(_WORD *)(a3 + 16) = (v4 >> 9) & 0x1FFF;
    *(_DWORD *)(a3 + 8) = ((v4 & 0x1FF) << 8) | (a2[2] >> 14);
    unsigned int v5 = a2[2];
    *(_WORD *)(a3 + 90) = ((__int16)(4 * v5) >> 15) & 0xFC00 | (v5 >> 4) & 0x3FF;
    if ((v5 & 8) != 0) {
      __int16 v6 = *((_WORD *)a2 + 7) & 0x3F | ((v5 & 0xF) << 6) | 0xFC00;
    }
    else {
      __int16 v6 = *((_WORD *)a2 + 7) & 0x3F | ((v5 & 0xF) << 6);
    }
    *(_WORD *)(a3 + 92) = v6;
    if ((a2[6] & 0x40) != 0) {
      unsigned int v7 = ((a2[6] & 0x7F) << 17) | (a2[7] >> 5) & 0x1FFFF | 0xFF000000;
    }
    else {
      unsigned int v7 = ((a2[6] & 0x7F) << 17) | (a2[7] >> 5) & 0x1FFFF;
    }
    *(_DWORD *)(a3 + 80) = v7;
    if ((a2[7] & 0x10) != 0) {
      unsigned int v8 = ((a2[7] & 0x1F) << 17) | (a2[8] >> 5) & 0x1FFFF | 0xFFC00000;
    }
    else {
      unsigned int v8 = ((a2[7] & 0x1F) << 17) | (a2[8] >> 5) & 0x1FFFF;
    }
    *(_DWORD *)(a3 + 84) = v8;
    *(_WORD *)(a3 + 88) = ((__int16)(a2[6] >> 2) >> 15) & 0xF800 | (a2[6] >> 7) & 0x7FF;
    *(unsigned char *)(a3 + 18) = a2[8] & 0x1F;
  }
  if (result[1])
  {
    unsigned int v9 = a2[10];
    *(_WORD *)(a3 + 50) = (*((_WORD *)a2 + 18) << 6) | BYTE2(v9) & 0x3F;
    int v10 = (4 * (unsigned __int16)v9) | (a2[11] >> 20) & 3;
    if ((v9 & 0x8000) != 0) {
      v10 |= 0xFFFC0000;
    }
    *(_DWORD *)(a3 + 56) = v10;
    *(_DWORD *)(a3 + 24) = (a2[11] << 12) | (a2[12] >> 10) & 0xFFF;
    *(_DWORD *)(a3 + 28) = a2[13] & 0x3FFFFF | ((unsigned __int16)a2[12] << 22);
    *(_DWORD *)(a3 + 60) = ((int)(a2[14] << 10) >> 31) & 0xFFFC0000 | (a2[14] >> 4) & 0x3FFFF;
    if ((a2[14] & 8) != 0) {
      unsigned int v11 = ((a2[14] & 0xF) << 14) | (a2[15] >> 8) & 0x3FFF | 0xFFFC0000;
    }
    else {
      unsigned int v11 = ((a2[14] & 0xF) << 14) | (a2[15] >> 8) & 0x3FFF;
    }
    *(_DWORD *)(a3 + 64) = v11;
    if ((a2[15] & 0x80) != 0) {
      unsigned int v12 = (a2[15] << 10) | (a2[16] >> 12) & 0x3FF | 0xFFFC0000;
    }
    else {
      unsigned int v12 = (a2[15] << 10) | (a2[16] >> 12) & 0x3FF;
    }
    *(_DWORD *)(a3 + 68) = v12;
    *(_DWORD *)(a3 + 32) = (a2[16] << 20) | (a2[17] >> 2) & 0xFFFFF;
  }
  if (result[2])
  {
    if (result[1]) {
      *(_DWORD *)(a3 + 12) = ((a2[17] & 3) << 15) | (32 * (a2[18] & 0x3FF)) | (a2[19] >> 17) & 0x1F;
    }
    *(_DWORD *)(a3 + 40) = (a2[19] << 15) | (a2[20] >> 7) & 0x7FFF;
    if ((a2[20] & 0x40) != 0) {
      unsigned int v13 = ((a2[20] & 0x7F) << 11) | (a2[21] >> 11) & 0x7FF | 0xFFFC0000;
    }
    else {
      unsigned int v13 = ((a2[20] & 0x7F) << 11) | (a2[21] >> 11) & 0x7FF;
    }
    *(_DWORD *)(a3 + 72) = v13;
    if ((a2[21] & 0x400) != 0) {
      unsigned int v14 = ((a2[21] & 0x7FF) << 13) | (a2[22] >> 9) & 0x1FFF | 0xFF000000;
    }
    else {
      unsigned int v14 = ((a2[21] & 0x7FF) << 13) | (a2[22] >> 9) & 0x1FFF;
    }
    *(_DWORD *)(a3 + 52) = v14;
    if ((a2[22] & 0x100) != 0) {
      unsigned int v15 = ((a2[22] & 0x1FF) << 9) | (a2[23] >> 13) & 0x1FF | 0xFFFC0000;
    }
    else {
      unsigned int v15 = ((a2[22] & 0x1FF) << 9) | (a2[23] >> 13) & 0x1FF;
    }
    *(_DWORD *)(a3 + 76) = v15;
    unsigned int v16 = a2[23];
    unsigned int v17 = a2[24];
    if ((v16 & 0x1000) != 0) {
      __int16 v18 = (2 * (v16 & 0x1FFF)) | (v17 >> 21) & 1 | 0xC000;
    }
    else {
      __int16 v18 = (2 * (v16 & 0x1FFF)) | (v17 >> 21) & 1;
    }
    *(_WORD *)(a3 + 48) = v18;
    *(_DWORD *)(a3 + 36) = (v17 << 11) | (a2[25] >> 11) & 0x7FF;
    *(_DWORD *)(a3 + 44) = (a2[25] << 21) | (a2[26] >> 1) & 0x1FFFFF;
  }
  return result;
}

BOOL STEU_Checksum_OK(char *a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = a1[1];
  int v3 = 3;
  do
  {
    if (!v2) {
      return 0;
    }
    int v4 = a1[v3 - 1];
    if (v4 == 10 || v4 == 13) {
      return 0;
    }
    v1 += v2;
    ++v3;
    int v2 = v4;
  }
  while (v4 != 125);
  unsigned __int8 v8 = 0;
  v9[0] = a1[v3 - 1];
  v9[1] = a1[v3];
  int v6 = AscToU1((uint64_t)v9, &v8);
  BOOL result = 0;
  if (v6) {
    return v8 == v1;
  }
  return result;
}

uint64_t Comp_NEDvar_UDU(uint64_t result, unsigned int a2, int a3, double (*a4)[3], double *a5)
{
  uint64_t v5 = 0;
  v41[9] = *MEMORY[0x263EF8340];
  int v6 = a3;
  do
  {
    unsigned __int8 v7 = v6++;
    unsigned int v8 = (v7 * v7 + v7) >> 1;
    unsigned int v9 = (v5 + a3);
    unsigned int v10 = (v9 * v9 + v9) >> 1;
    uint64_t v11 = v5;
    unsigned __int8 v12 = v6;
    do
    {
      unsigned int v13 = (v11 + a3);
      if (v5 == v11)
      {
        double v14 = *(double *)(result + 8 * (v10 + (v5 + a3)));
        unsigned int v15 = v13 + 1;
      }
      else
      {
        unsigned int v15 = v13 + 1;
        unsigned int v16 = v9 + (((v13 + 1) * v13) >> 1);
        if (v9 >= v13) {
          unsigned int v16 = v10 + v13;
        }
        double v14 = *(double *)(result + 8 * (v13 + ((v15 * v13) >> 1))) * *(double *)(result + 8 * v16);
      }
      uint64_t v17 = v12;
      __int16 v18 = (double *)&v41[3 * v5 + v11];
      *__int16 v18 = v14;
      if (a2 > v15)
      {
        int v19 = v12;
        unsigned int v20 = v19 * v19 + v12;
        int v21 = 2 * v19 + 2;
        unsigned int v22 = (v15 * v7) >> 1;
        uint64_t v23 = v17;
        do
        {
          unsigned int v24 = v23 + v23 * v23;
          unsigned int v25 = v8 + v23;
          if (v23 > v9) {
            unsigned int v25 = v9 + (v24 >> 1);
          }
          double v26 = *(double *)(result + 8 * v25);
          unsigned int v27 = v22 + v23;
          BOOL v28 = v23 > v13;
          uint64_t v29 = v23 + 1;
          double v30 = *(double *)(result + 8 * (v23 + ((unint64_t)v20 >> 1))) * v26;
          unsigned int v31 = v13 + (v24 >> 1);
          if (!v28) {
            unsigned int v31 = v27;
          }
          double v14 = v14 + v30 * *(double *)(result + 8 * v31);
          v20 += v21;
          v21 += 2;
          uint64_t v23 = v29;
        }
        while (v29 < a2);
        *__int16 v18 = v14;
      }
      *(double *)&v41[3 * v11++ + v5] = v14;
      unsigned __int8 v12 = v17 + 1;
      ++v7;
    }
    while (v11 != 3);
    ++v5;
  }
  while (v5 != 3);
  uint64_t v32 = 0;
  double v33 = 0.0;
  unint64_t v34 = a4;
  do
  {
    uint64_t v35 = 0;
    unint64_t v36 = v41;
    double v37 = 0.0;
    do
    {
      uint64_t v38 = 0;
      double v39 = 0.0;
      do
      {
        double v39 = v39 + *(double *)&v36[v38] * (*v34)[v38];
        ++v38;
      }
      while (v38 != 3);
      if (!v32) {
        double v33 = v33 + v39 * (*a4)[v35 + 3];
      }
      double v37 = v37 + v39 * (*a4)[3 * v32 + v35++];
      v36 += 3;
    }
    while (v35 != 3);
    a5[v32++] = v37;
    ++v34;
  }
  while (v32 != 3);
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (a5[i] <= 0.00000001) {
      a5[i] = 0.00000001;
    }
  }
  return result;
}

uint64_t GM_Get_Best_NSSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 1);
  if (a4 - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  unsigned __int8 v7 = (_WORD *)(a1 + 36 * v4 + 8);
  unsigned int v8 = (unsigned __int8 *)(a2 + 48 * v4 + 12);
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      unsigned int v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 8) != 0 && (*v7 & 0x300) != 0x300 && *(v8 - 8) && v8[3])
      {
        int v11 = v10 + 6 * *v8;
        if (v11 <= v6)
        {
          uint64_t v9 = v9;
        }
        else
        {
          int v6 = v11;
          uint64_t v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t GncP27_30PopulateRawMeas(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
  {
    if (v4 >= 0x101)
    {
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigMeas Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 64));
        LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
        return 0;
      }
      return result;
    }
    uint64_t result = (uint64_t)gnssOsa_Calloc("GncP27_30PopulateRawMeas", 403, v4, 0xB0uLL);
    *(void *)(a2 + 72) = result;
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = a1 + 51272;
  unsigned int v10 = *(unsigned __int16 *)(a1 + 51432);
  if (*(_WORD *)(a1 + 51432))
  {
    if (v10 >= 0x101)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 51432));
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      goto LABEL_15;
    }
    unsigned int v13 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 421, v10, 0x68uLL);
    *(void *)(a2 + 248) = v13;
    if (!v13)
    {
LABEL_15:
      uint64_t v17 = *(void **)(a2 + 72);
      if (v17) {
        free(v17);
      }
      uint64_t result = 0;
      *(void *)(a2 + 72) = 0;
      return result;
    }
  }
  unsigned int v14 = *(unsigned __int16 *)(a1 + 78064);
  if (*(_WORD *)(a1 + 78064))
  {
    if (v14 >= 0x101)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 78064));
        LbsOsaTrace_WriteLog(8u, __str, v16, 2, 1);
      }
      goto LABEL_60;
    }
    __int16 v18 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 441, v14, 0x138uLL);
    *(void *)(a2 + 264) = v18;
    if (!v18)
    {
LABEL_60:
      unsigned __int16 v79 = *(void **)(a2 + 72);
      if (v79) {
        free(v79);
      }
      *(void *)(a2 + 72) = 0;
      unsigned int v80 = *(void **)(a2 + 248);
      if (v80) {
        free(v80);
      }
      uint64_t result = 0;
      *(void *)(a2 + 248) = 0;
      return result;
    }
  }
  uint64_t v82 = a1;
  double v83 = (unsigned __int16 *)(a1 + 78064);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  int v19 = *(unsigned __int16 *)(a1 + 64);
  *(_WORD *)(a2 + 64) = v19;
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 172;
    uint64_t v22 = a1;
    do
    {
      uint64_t v23 = *(void *)(a2 + 72);
      uint64_t v24 = v23 + v21;
      *(_WORD *)(v23 + v21 - 172) = *(_WORD *)(v22 + 72);
      *(unsigned char *)(v24 - 170) = GncP07_01PopulateSigId(*(_DWORD *)(v22 + 76));
      *(unsigned char *)(v24 - 169) = GncP07_09PopulateConstellId(*(_DWORD *)(v22 + 80));
      *(_WORD *)(v24 - 168) = *(_WORD *)(v22 + 84);
      *(_OWORD *)(v24 - 164) = *(_OWORD *)(v22 + 88);
      *(void *)(v24 - 148) = *(void *)(v22 + 104);
      *(unsigned char *)(v24 - 140) = *(unsigned char *)(v22 + 112);
      *(_OWORD *)(v24 - 132) = *(_OWORD *)(v22 + 120);
      *(void *)(v24 - 116) = *(void *)(v22 + 136);
      *(void *)(v24 - 108) = *(void *)(v22 + 152);
      *(unsigned char *)(v24 - 100) = *(unsigned char *)(v22 + 160);
      *(_WORD *)(v24 - 98) = *(_WORD *)(v22 + 162);
      *(_OWORD *)(v24 - 92) = *(_OWORD *)(v22 + 168);
      *(_OWORD *)(v24 - 76) = *(_OWORD *)(v22 + 184);
      *(unsigned char *)(v24 - 60) = GncP07_02PopulateMeasMdl(*(_DWORD *)(v22 + 200));
      *(unsigned char *)(v24 - 59) = GncP07_02PopulateMeasMdl(*(_DWORD *)(v22 + 204));
      *(_DWORD *)(v24 - 58) = *(_DWORD *)(v22 + 208);
      *(unsigned char *)(v24 - 54) = *(unsigned char *)(v22 + 212);
      *(void *)(v24 - 52) = *(void *)(v22 + 216);
      int v25 = *(_DWORD *)(v22 + 224);
      if (v25 == 1) {
        char v26 = 1;
      }
      else {
        char v26 = 2;
      }
      if (v25) {
        char v27 = v26;
      }
      else {
        char v27 = 0;
      }
      *(unsigned char *)(v24 - 44) = v27;
      *(_OWORD *)(v24 - 36) = *(_OWORD *)(v22 + 232);
      *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 + 248);
      unsigned int v28 = *(_DWORD *)(v22 + 264);
      if (v28 >= 3)
      {
        int v30 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v29) = 0;
        if (v30)
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MPath,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP07_04PopulateMPath", 770, v28);
          LbsOsaTrace_WriteLog(8u, __str, v32, 2, 1);
          LOBYTE(v29) = 0;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(v22 + 264);
      }
      uint64_t v33 = v23 + v21;
      *(unsigned char *)(v33 - 4) = v29;
      *(_DWORD *)(v33 - 2) = *(_DWORD *)(v22 + 268);
      if (v20 > 0xFE) {
        break;
      }
      ++v20;
      v21 += 176;
      v22 += 200;
    }
    while (v20 < *(unsigned __int16 *)(a2 + 64));
  }
  *(_DWORD *)(a2 + 80) = *(_DWORD *)v9;
  *(unsigned char *)(a2 + 84) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)(a2 + 86) = *(_DWORD *)(v9 + 6);
  *(unsigned char *)(a2 + 94) = *(unsigned char *)(v9 + 14);
  *(void *)(a2 + 144) = *(void *)(v9 + 64);
  *(void *)(a2 + 200) = *(void *)(v9 + 120);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(v9 + 128);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(v9 + 144);
  *(_WORD *)(a2 + 90) = *(_WORD *)(v9 + 10);
  *(unsigned char *)(a2 + 92) = *(unsigned char *)(v9 + 12);
  *(unsigned char *)(a2 + 93) = *(unsigned char *)(v9 + 13);
  *(_WORD *)(a2 + 96) = *(_WORD *)(v9 + 16);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(v9 + 20);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(v82 + 51296);
  *(void *)(a2 + 120) = *(void *)(v9 + 40);
  *(_WORD *)(a2 + 128) = *(_WORD *)(v9 + 48);
  *(unsigned char *)(a2 + 130) = *(unsigned char *)(v9 + 50);
  *(void *)(a2 + 136) = *(void *)(v9 + 56);
  *(_WORD *)(a2 + 152) = *(_WORD *)(v9 + 72);
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(v9 + 76);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v9 + 80);
  *(_WORD *)(a2 + 176) = *(_WORD *)(v9 + 96);
  *(_DWORD *)(a2 + 180) = *(_DWORD *)(v9 + 100);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(v82 + 51376);
  int v34 = *(unsigned __int16 *)(v9 + 160);
  *(_WORD *)(a2 + 240) = v34;
  if (v34)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v37 = v82 + 51440;
    uint64_t v38 = v82 + 51464;
    uint64_t v39 = v82 + 51444;
    do
    {
      uint64_t v40 = *(void *)(a2 + 248);
      *(_WORD *)(v40 + v35) = *(_WORD *)(v37 + v35);
      unsigned int v41 = *(_DWORD *)(v39 + v35);
      if (v41 >= 5)
      {
        int v43 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v42) = 0;
        if (v43)
        {
          bzero(__str, 0x410uLL);
          uint64_t v44 = mach_continuous_time();
          unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Glon SlotSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 87, "GncP07_05PopulateGLOSloNSrc", 770, v41);
          LbsOsaTrace_WriteLog(8u, __str, v45, 2, 1);
          LOBYTE(v42) = 0;
        }
      }
      else
      {
        int v42 = *(_DWORD *)(v39 + v35);
      }
      uint64_t v46 = v40 + v35;
      *(unsigned char *)(v46 + 2) = v42;
      *(_OWORD *)(v46 + 8) = *(_OWORD *)(v82 + 51448 + v35);
      unsigned int v47 = *(_DWORD *)(v38 + v35);
      if (v47 >= 5)
      {
        int v49 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v48) = 0;
        if (v49)
        {
          bzero(__str, 0x410uLL);
          uint64_t v50 = mach_continuous_time();
          unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVtimeSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 87, "GncP07_06PopulateSVTimeSrc", 770, v47);
          LbsOsaTrace_WriteLog(8u, __str, v51, 2, 1);
          LOBYTE(v48) = 0;
        }
      }
      else
      {
        int v48 = *(_DWORD *)(v38 + v35);
      }
      uint64_t v52 = v40 + v35;
      *(unsigned char *)(v52 + 24) = v48;
      *(unsigned char *)(v52 + 25) = *(unsigned char *)(v37 + v35 + 28);
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v82 + v35 + 51472);
      *(_OWORD *)(v52 + 48) = *(_OWORD *)(v82 + v35 + 51488);
      *(_OWORD *)(v52 + 64) = *(_OWORD *)(v82 + v35 + 51504);
      *(_OWORD *)(v52 + 80) = *(_OWORD *)(v82 + v35 + 51520);
      *(void *)(v52 + 96) = *(void *)(v82 + 51536 + v35);
      if (v36 > 0xFE) {
        break;
      }
      ++v36;
      v35 += 104;
    }
    while (v36 < *(unsigned __int16 *)(a2 + 240));
  }
  int v53 = *v83;
  *(_WORD *)(a2 + 256) = v53;
  if (!v53) {
    return 1;
  }
  uint64_t v84 = 0;
  unint64_t v54 = 0;
  uint64_t v55 = v82;
  uint64_t v56 = v82 + 78268;
  uint64_t v57 = v82 + 78352;
  uint64_t v58 = v82 + 78168;
  uint64_t v59 = 48;
  uint64_t v81 = a2;
  do
  {
    uint64_t v60 = v55 + 344 * v54 + 78072;
    uint64_t v61 = *(void *)(a2 + 264);
    uint64_t v62 = v61 + 312 * v54;
    *(unsigned char *)uint64_t v62 = GncP07_09PopulateConstellId(*(_DWORD *)v60);
    *(_WORD *)(v62 + 2) = *(_WORD *)(v60 + 4);
    *(unsigned char *)(v62 + 4) = *(unsigned char *)(v60 + 6);
    *(_OWORD *)(v62 + 144) = *(_OWORD *)(v60 + 144);
    *(unsigned char *)(v62 + 160) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 160));
    *(unsigned char *)(v62 + 161) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 164));
    *(unsigned char *)(v62 + 162) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 168));
    *(unsigned char *)(v62 + 163) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 172));
    char v63 = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 176));
    int v64 = *(unsigned __int16 *)(v60 + 192);
    *(_WORD *)(v62 + 176) = v64;
    unint64_t v65 = (unsigned __int16 *)(v62 + 176);
    *((unsigned char *)v65 - 12) = v63;
    *((void *)v65 - 1) = *(void *)(v60 + 184);
    if (v64)
    {
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      uint64_t v68 = v61 + v84;
      do
      {
        *(unsigned char *)(v68 + v67 + 178) = GncP07_01PopulateSigId(*(_DWORD *)(v56 + 4 * v67));
        double v69 = (void *)(v68 + v66);
        v69[23] = *(void *)(v57 + v66 - 64);
        v69[27] = *(void *)(v57 + v66 - 32);
        v69[31] = *(void *)(v57 + v66);
        v69[35] = *(void *)(v57 + v66 + 32);
        if (v67 > 2) {
          break;
        }
        ++v67;
        v66 += 8;
      }
      while (v67 < *v65);
    }
    uint64_t v55 = v82;
    uint64_t v70 = v82 + 344 * v54;
    unsigned int v71 = *(_DWORD *)(v70 + 78080);
    if (v71 >= 5)
    {
      int v73 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      LOBYTE(v72) = 0;
      if (v73)
      {
        bzero(__str, 0x410uLL);
        uint64_t v74 = mach_continuous_time();
        unsigned __int16 v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVPosSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "GNC", 87, "GncP07_08PopulateSvPosSrc", 770, v71);
        LbsOsaTrace_WriteLog(8u, __str, v75, 2, 1);
        LOBYTE(v72) = 0;
      }
    }
    else
    {
      int v72 = *(_DWORD *)(v70 + 78080);
    }
    uint64_t v76 = v61 + 312 * v54;
    *(unsigned char *)(v76 + 8) = v72;
    *(void *)(v76 + 16) = *(void *)(v82 + 344 * v54 + 78088);
    *(_OWORD *)(v76 + 120) = *(_OWORD *)(v82 + 344 * v54 + 78192);
    *(void *)(v76 + 136) = *(void *)(v82 + 344 * v54 + 78208);
    uint64_t v77 = -24;
    a2 = v81;
    do
    {
      uint64_t v78 = (void *)(v61 + v59 + v77);
      void *v78 = *(void *)(v58 + v77 - 48);
      v78[3] = *(void *)(v58 + v77 - 24);
      v78[6] = *(void *)(v58 + v77);
      v78[9] = *(void *)(v58 + v77 + 24);
      v77 += 8;
    }
    while (v77);
    uint64_t result = 1;
    if (v54 > 0xFE) {
      break;
    }
    ++v54;
    v56 += 344;
    v84 += 312;
    v57 += 344;
    v59 += 312;
    v58 += 344;
  }
  while (v54 < *(unsigned __int16 *)(v81 + 256));
  return result;
}