uint64_t GncP07_01PopulateSigId(unsigned int a1)
{
  unsigned __int8 v2;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x263EF8340];
  if (a1 >= 0xA)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_01PopulateSigId", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_09PopulateConstellId(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 7)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_09PopulateConstellId", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_02PopulateMeasMdl(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 5)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasModel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_02PopulateMeasMdl", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_07PopulateHIState(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1 >= 3)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    unsigned __int8 v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HIState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_07PopulateHIState", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

BOOL R8_EQ(const double *a1, const double *a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)a1 | 0x8000000000000000;
  if (*(uint64_t *)a1 < 0) {
    unint64_t v3 = -v2;
  }
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 | 0x8000000000000000;
  if (*(uint64_t *)a2 < 0) {
    unint64_t v5 = -v4;
  }
  uint64_t v6 = ~v2 & 0x7FF0000000000000;
  uint64_t v7 = v2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v8 = ~v4 & 0x7FF0000000000000;
  uint64_t v9 = v4 & 0xFFFFFFFFFFFFFLL;
  unint64_t v10 = v5 - v3;
  BOOL v11 = v3 >= v5;
  unint64_t v12 = v3 - v5;
  if (!v11) {
    unint64_t v12 = v10;
  }
  BOOL v13 = v12 < 4;
  if (v8) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v9 == 0;
  }
  if (!v14) {
    BOOL v13 = 0;
  }
  if (v6) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v7 == 0;
  }
  return v15 && v13;
}

uint64_t posp_HandlePospInitMsg()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (GNS_PospInitialize((uint64_t)pos_protocol_PospCallback) && GNS_PpduInitialize((uint64_t)pos_protocol_PpduCallback))
  {
    RRLP_Bridge_init();
    LPP_Bridge_init();
    posp_TimerInit();
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 69, "posp_HandlePospInitMsg", 258);
      LbsOsaTrace_WriteLog(0x13u, __str, v1, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx POSP Initialization failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 69, "posp_HandlePospInitMsg", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v3, 0, 1);
    }
  }
  return 0;
}

uint64_t posp_HandlePospReqMsg(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unsigned __int16 v1 = *(unsigned __int8 **)(a1 + 16);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "posp_HandlePospReqMsg");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (*(_DWORD *)v1)
  {
    switch(*(_DWORD *)v1)
    {
      case 1:
        char v4 = 0;
        unint64_t v5 = v1 + 96;
        goto LABEL_10;
      case 2:
        goto LABEL_8;
      case 3:
        uint64_t v6 = *((void *)v1 + 12);
        if (v6) {
          char v4 = *(unsigned char *)(v6 + 16);
        }
        else {
LABEL_8:
        }
          char v4 = 0;
        unint64_t v5 = v1 + 76;
LABEL_10:
        int v7 = 0;
        switch(*v5)
        {
          case 0:
            int v7 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol is Unknown\n");
              goto LABEL_20;
            }
            break;
          case 1:
            break;
          case 2:
            int v7 = 1;
            break;
          case 3:
            int v7 = 2;
            break;
          default:
            int v7 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Protocol,%u\n", v29);
LABEL_20:
              LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
              int v7 = 0;
            }
            break;
        }
        int v13 = *((_DWORD *)v1 + 3);
        if (v13 == 1) {
          goto LABEL_30;
        }
        if (v13)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
            goto LABEL_30;
          }
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Session Protocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 69, "ConvertSessionType", 770, v13);
          int v16 = 0;
        }
        else
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0)) {
            goto LABEL_30;
          }
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unknown Session Protocol\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 87, "ConvertSessionType", 770);
          int v16 = 2;
        }
        LbsOsaTrace_WriteLog(0x13u, __str, v15, v16, 1);
LABEL_30:
        uint64_t session_info = gps_find_session_info(*((_DWORD *)v1 + 2));
        if (session_info)
        {
          *(_DWORD *)(session_info + 8) = v7;
          *(_DWORD *)uint64_t session_info = *((_DWORD *)v1 + 2);
          *(unsigned char *)(session_info + 4) = 1;
          *(unsigned char *)(session_info + 14) = v1[17];
          if (*(_DWORD *)v1 == 3) {
            *(unsigned char *)(session_info + 15) = v4;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v19 = mach_continuous_time();
            size_t v20 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Session exists with Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 73, "GeneratePPDUSession", *((_DWORD *)v1 + 2));
            int v21 = 4;
LABEL_42:
            LbsOsaTrace_WriteLog(0x13u, __str, v20, v21, 1);
          }
        }
        else
        {
          __int16 v38 = -1;
          memset(&v63[2], 0, 27);
          uint64_t v43 = 0;
          memset(v44, 0, sizeof(v44));
          *(void *)&v62[1] = -1;
          *(_DWORD *)&v62[8] = -1;
          unsigned __int8 v22 = v1[17];
          if (*(_DWORD *)v1 == 3) {
            char v23 = v4;
          }
          else {
            char v23 = -1;
          }
          int v30 = *((_DWORD *)v1 + 2);
          __int16 v31 = 1;
          int v32 = v7;
          __int16 v33 = 0;
          unsigned __int8 v34 = v22;
          char v35 = v23;
          char v36 = 0;
          unint64_t v37 = 0xFFFFFFFF00000000;
          *(_OWORD *)v39 = *(_OWORD *)v63;
          *(_OWORD *)&v39[13] = *(_OWORD *)&v63[13];
          unint64_t v40 = 0xFFFFFFFF00000000;
          __int16 v41 = 0;
          long long v42 = xmmword_22BB0C140;
          __int16 v45 = -1;
          char v46 = 0;
          int v47 = 0;
          uint64_t v48 = -1;
          uint64_t v49 = 0;
          int v50 = -1;
          char v51 = -1;
          int v53 = *(_DWORD *)&v62[8];
          uint64_t v52 = *(void *)v62;
          uint64_t v54 = -1;
          uint64_t v55 = 0x7FFFFFFFLL;
          char v56 = 0;
          __int16 v57 = -1;
          unint64_t v58 = 0xFFFFFFFF7FFFFFFFLL;
          int v59 = 0;
          char v60 = 0;
          uint64_t v61 = 0;
          if (!gps_create_session_info_ext((uint64_t)&v30) && LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Create Session\n");
LABEL_41:
            size_t v20 = v12;
            int v21 = 0;
            goto LABEL_42;
          }
        }
LABEL_43:
        int v11 = *(_DWORD *)v1;
LABEL_44:
        switch(v11)
        {
          case 0:
            goto LABEL_45;
          case 1:
            HandlePPDUSessionData((int *)v1 + 2);
            break;
          case 2:
            HandlePPDUCapReq((uint64_t)(v1 + 8));
            break;
          case 3:
            HandlePPDUAssistDataReq((uint64_t)(v1 + 8));
            break;
          case 4:
            goto LABEL_46;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v24 = mach_continuous_time();
              unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "PSP", 69, "posp_HandlePospReqMsg", 770, *(_DWORD *)v1);
              LbsOsaTrace_WriteLog(0x13u, __str, v25, 0, 1);
            }
            break;
        }
        break;
      case 4:
LABEL_46:
        HandlePPDUSessionEND((_DWORD *)v1 + 2);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "GeneratePPDUSession", 770, *v1);
          LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
        }
        int v11 = *(_DWORD *)v1;
        if ((*(_DWORD *)v1 | 4) == 4) {
          goto LABEL_44;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
          goto LABEL_43;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU Session Info\n");
        goto LABEL_41;
    }
  }
  else
  {
LABEL_45:
    HandlePPDUCapUpdate((_DWORD *)v1 + 2);
  }
  MEMORY[0x230F4E5D0](v1, 0x1032C4083C19586);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "PSP", 68, "posp_HandlePospReqMsg");
    LbsOsaTrace_WriteLog(0x13u, __str, v27, 5, 1);
  }
  return 0;
}

uint64_t posp_HandlePospRspMsg(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(int **)(a1 + 16);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "PSP", 65, "posp_HandlePospRspMsg", *v2);
    LbsOsaTrace_WriteLog(0x13u, __str, v4, 1, 1);
  }
  uint64_t session_info = gps_find_session_info(*(_DWORD *)(a1 + 24));
  if (!session_info)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "posp_HandlePospRspMsg", 2052, *(_DWORD *)(a1 + 24));
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    }
    if (v2) {
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v6 = session_info;
  int v7 = *v2;
  if ((*v2 - 1) >= 2)
  {
    if (v7 == 3)
    {
LABEL_16:
      send_assistance_req(v2 + 2, *(_DWORD *)(session_info + 8));
    }
    else
    {
      if (v7 == 4)
      {
        if (v2[3] != 1)
        {
LABEL_24:
          send_api_status(v2 + 2, *(_DWORD *)(session_info + 8), *(unsigned __int16 *)(session_info + 12), *(unsigned char *)(session_info + 5));
          goto LABEL_26;
        }
        goto LABEL_8;
      }
LABEL_17:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgType,%u\n", v23);
LABEL_19:
        LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
      }
    }
LABEL_26:
    MEMORY[0x230F4E5D0](v2, 0x1022C406FC2E6EELL);
    return 0;
  }
LABEL_8:
  if (*(unsigned char *)(session_info + 16))
  {
    switch(*v2)
    {
      case 1:
        if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
          goto LABEL_26;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MSA not enabled\n");
        break;
      case 2:
        send_position_response((unsigned int *)v2 + 2, *(_DWORD *)(session_info + 8), *(_WORD *)(session_info + 12), *(unsigned char *)(session_info + 5));
        long long v15 = *(_OWORD *)(v2 + 2);
        long long v16 = *(_OWORD *)(v2 + 6);
        long long v17 = *(_OWORD *)(v2 + 14);
        *(_OWORD *)(v6 + 96) = *(_OWORD *)(v2 + 10);
        *(_OWORD *)(v6 + 112) = v17;
        *(_OWORD *)(v6 + 64) = v15;
        *(_OWORD *)(v6 + 80) = v16;
        long long v18 = *(_OWORD *)(v2 + 18);
        long long v19 = *(_OWORD *)(v2 + 22);
        long long v20 = *(_OWORD *)(v2 + 26);
        *(void *)(v6 + 176) = *((void *)v2 + 15);
        *(_OWORD *)(v6 + 144) = v19;
        *(_OWORD *)(v6 + 160) = v20;
        *(_OWORD *)(v6 + 128) = v18;
        int v21 = *(_DWORD *)(v6 + 60);
        *(_DWORD *)(v6 + 184) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                 * (double)mach_continuous_time())
                              - v21;
        goto LABEL_26;
      case 3:
        goto LABEL_16;
      case 4:
        goto LABEL_24;
      default:
        goto LABEL_17;
    }
    goto LABEL_19;
  }
  MEMORY[0x230F4E5D0](v2, 0x1022C406FC2E6EELL);
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No Msr Pos Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 69, "posp_HandlePospRspMsg", 770);
    LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 68, "posp_HandlePospRspMsg");
    LbsOsaTrace_WriteLog(0x13u, __str, v14, 5, 1);
  }
  return 0;
}

uint64_t posp_HandleWlanMsg(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 65, "posp_HandleWlanMsg", *(unsigned __int8 *)(a1 + 13));
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 1, 1);
  }
  int v4 = *(unsigned __int8 *)(a1 + 13);
  switch(v4)
  {
    case 4:
      HandleWlanCbInit(*(uint64_t (**)(void, void, void))(a1 + 16));
      break;
    case 6:
      send_wlan_meas(*(void *)(a1 + 16));
      break;
    case 5:
      unint64_t v5 = *(int **)(a1 + 16);
      HandleWlanCapUpdate(v5);
      if (v5) {
        free(v5);
      }
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "posp_HandleWlanMsg", 770, *(unsigned __int8 *)(a1 + 13));
        LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      }
      break;
  }
  return 0;
}

uint64_t posp_HandlePospShutdownMsg()
{
  return 0;
}

uint64_t posp_HandlePospTimerMsg(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "posp_HandlePospTimerMsg");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  posp_TimerExpiry(*(_DWORD *)(a1 + 4));
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "posp_HandlePospTimerMsg");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  return 0;
}

uint64_t POSP_0IgnoreMessage()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 69, "POSP_0IgnoreMessage", 519);
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 0, 1);
  }
  return 0;
}

uint64_t SuplPospPostMessage(unsigned __int8 *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "SuplPospPostMessage");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("SuplPospPostMessage", 99, 1, 0x20uLL);
  if (a1 && v4)
  {
    int v5 = *a1;
    v4[12] = v5;
    v4[13] = a1[1];
    *((_DWORD *)v4 + 6) = *((_DWORD *)a1 + 4);
    *((void *)v4 + 2) = *((void *)a1 + 1);
    AgpsSendFsmMsg(133, 133, v5, v4);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
    char v7 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 68, "SuplPospPostMessage");
      LbsOsaTrace_WriteLog(0x13u, __str, v9, 5, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msg is NULL or memory allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "SuplPospPostMessage", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
    }
    return -1;
  }
  return v7;
}

uint64_t POSP0_00Init(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: POSP Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 73, "SuplPospInitialize");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 4, 1);
  }
  *(_WORD *)__str = 1792;
  uint64_t v4 = 0;
  int v5 = 0;
  return SuplPospPostMessage((unsigned __int8 *)__str);
}

uint64_t POSP0_01DeInit(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: POSP De-Initialization Fn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 73, "SuplPospShutDown");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 4, 1);
  }
  *(_WORD *)__str = 1796;
  uint64_t v4 = 0;
  int v5 = 0;
  return SuplPospPostMessage((unsigned __int8 *)__str);
}

void POSP0_02DestMissingHandler(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 73, "POSP0_02DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 4, 1);
  }
  if ((*(_DWORD *)(a1 + 4) - 1) > 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 73, "POSP0_02DestMissingHandler", *(_DWORD *)(a1 + 4));
      LbsOsaTrace_WriteLog(0x13u, __str, v6, 4, 1);
    }
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4) {
      free(v4);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void *NA_Ram_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v6 = (void *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v29 = *MEMORY[0x263EF8340];
  EvLog("NA_Ram_Init:");
  p_NA = (uint64_t)v6;
  bzero(v28, 0x5438uLL);
  for (uint64_t i = 848; i != 3152; i += 72)
  {
    uint64_t v8 = &v28[i];
    *(void *)(v8 + 63) = 0;
    *((_OWORD *)v8 + 2) = 0uLL;
    *((_OWORD *)v8 + 3) = 0uLL;
    *(_OWORD *)uint64_t v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
  }
  do
  {
    unsigned __int16 v9 = &v28[i];
    *((_WORD *)v9 + 16) = 0;
    *(_OWORD *)unsigned __int16 v9 = 0uLL;
    *((_OWORD *)v9 + 1) = 0uLL;
    i += 36;
  }
  while (i != 4304);
  uint64_t v10 = -720;
  do
  {
    unsigned __int16 v11 = &v28[v10];
    v11[317] = 0uLL;
    v11[316] = 0uLL;
    v11[315] = 0uLL;
    v11[314] = 0uLL;
    *(void *)&v28[v10 + 5087] = 0;
    v10 += 72;
  }
  while (v10);
  uint64_t v12 = -360;
  do
  {
    *(_WORD *)&v28[v12 + 5416] = 0;
    uint64_t v13 = &v28[v12 + 5384];
    *uint64_t v13 = 0uLL;
    v13[1] = 0uLL;
    v12 += 36;
  }
  while (v12);
  *(void *)&v28[5390] = 0;
  *(void *)&v28[5384] = 0;
  uint64_t v14 = -3168;
  do
  {
    long long v15 = &v28[v14 + 8568];
    *(void *)(v15 + 79) = 0;
    *((_OWORD *)v15 + 3) = 0uLL;
    *((_OWORD *)v15 + 4) = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *(_OWORD *)long long v15 = 0uLL;
    v14 += 88;
  }
  while (v14);
  uint64_t v16 = -1296;
  do
  {
    long long v17 = &v28[v16 + 9864];
    *(_DWORD *)(v17 + 31) = 0;
    *(_OWORD *)long long v17 = 0uLL;
    *((_OWORD *)v17 + 1) = 0uLL;
    v16 += 36;
  }
  while (v16);
  memset(&v28[9864], 0, 20);
  uint64_t v18 = -3700;
  do
  {
    long long v19 = &v28[v18];
    *((_DWORD *)v19 + 3420) = 0;
    long long v20 = &v28[v18 + 13608];
    *((_OWORD *)v19 + 849) = 0uLL;
    *(void *)&v28[v18 + 13599] = 0;
    *(_OWORD *)long long v20 = 0uLL;
    *((_OWORD *)v20 + 1) = 0uLL;
    *((_OWORD *)v20 + 2) = 0uLL;
    *((_OWORD *)v20 + 3) = 0uLL;
    *(void *)(v20 + 62) = 0;
    v18 += 100;
  }
  while (v18);
  bzero(&v28[13584], 0x65CuLL);
  for (uint64_t j = 0; j != 1536; j += 64)
  {
    unsigned __int8 v22 = &v28[j + 15212];
    *(_OWORD *)((char *)v22 + 46) = 0uLL;
    v22[1] = 0uLL;
    v22[2] = 0uLL;
    *unsigned __int8 v22 = 0uLL;
  }
  uint64_t v23 = 16748;
  do
  {
    uint64_t v24 = &v28[v23];
    *(void *)uint64_t v24 = 0;
    *((_WORD *)v24 + 4) = 0;
    *(void *)(v24 + 12) = 0;
    *(void *)(v24 + 28) = 0;
    *(void *)(v24 + 20) = 0;
    v23 += 36;
  }
  while (v24 + 36 != &v28[17612]);
  uint64_t v25 = 0;
  *(void *)&v28[17612] = 0;
  *(_WORD *)&v28[17620] = 0;
  *(_DWORD *)&v28[17624] = 0;
  v28[17628] = 0;
  *(_DWORD *)&v28[17632] = 0;
  memset(&v28[17640], 0, 33);
  v28[17636] = 0;
  do
  {
    uint64_t v26 = &v28[v25 + 17676];
    *(void *)&v28[v25 + 17696] = 0;
    *(void *)uint64_t v26 = 0;
    *((void *)v26 + 1) = 0;
    *((_WORD *)v26 + 8) = 0;
    v25 += 28;
  }
  while (v25 != 1344);
  *(_DWORD *)&v28[21480] = 0;
  memset(&v28[19020], 0, 137);
  v28[19168] = 0;
  *(void *)&v28[19160] = 0;
  memset(&v28[21488], 0, 20);
  memset(&v28[21512], 0, 20);
  memset(&v28[21536], 0, 24);
  return memcpy(v6, v28, 0x5438uLL);
}

uint64_t Core_Get_TM_FSP_Time(unsigned int *a1, unsigned int *a2)
{
  *a1 = 0;
  *a2 = 0;
  if (!*(unsigned char *)p_NA) {
    return 0;
  }
  int v4 = *(_DWORD *)(p_NA + 400);
  double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v6 = p_NA;
  int v7 = *(_DWORD *)(p_NA + 404);
  int v8 = **(_DWORD **)(p_api + 8) - v7;
  if ((unint64_t)v5 - v4 > 0xDBBA0 || v8 > 900000 || v8 <= -5001)
  {
    EvCrt_v("Core_Get_TM_FSP_Time: WARNING: Deleted OS_Time %u Age %d TTick %u Age %d ms", *(_DWORD *)(p_NA + 400), (unint64_t)v5 - v4, v7, v8);
    uint64_t result = 0;
    uint64_t v12 = p_NA;
    *(unsigned char *)p_NA = 0;
    *(void *)(v12 + 400) = 0;
    return result;
  }
  if (!*(unsigned char *)p_NA) {
    return 0;
  }
  *a1 = *(_DWORD *)(p_NA + 400);
  *a2 = *(_DWORD *)(v6 + 404);
  return 1;
}

uint64_t Core_Get_Ref_Time(int a1, double *a2, __int16 *a3, double *a4)
{
  uint64_t v4 = p_NA;
  if (!*(unsigned char *)(p_NA + 2)) {
    return 0;
  }
  int v5 = a1 - *(_DWORD *)(p_NA + 412);
  if ((v5 - 900001) >= 0xFFF238A7)
  {
    *a2 = *(double *)(p_NA + 416);
    *a3 = *(_WORD *)(v4 + 424);
    *a4 = *(double *)(v4 + 432);
    double v8 = (double)v5;
    Inc_GPS_TOW((double)v5 * 0.001, a2, a3);
    *a4 = *a4 + v8 * 0.00000001;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 2) = 0;
  }
  return result;
}

uint64_t Core_Get_Glon_Ref_Time(int a1, unsigned __int16 *a2, __int16 *a3, double *a4, double *a5)
{
  uint64_t v5 = p_NA;
  if (!*(unsigned char *)(p_NA + 3)) {
    return 0;
  }
  int v6 = a1 - *(_DWORD *)(p_NA + 440);
  if ((v6 - 900001) >= 0xFFF238A7)
  {
    *a2 = *(_WORD *)(p_NA + 444);
    *a3 = *(_WORD *)(v5 + 446);
    *a4 = *(double *)(v5 + 448);
    *a5 = *(double *)(v5 + 456);
    double v9 = (double)v6;
    Inc_Glon_TOD((double)v6 * 0.001, a4, a3, a2);
    *a5 = *a5 + v9 * 0.00000001;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 3) = 0;
  }
  return result;
}

uint64_t Core_Get_UTC_Ref_Time(int a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7, unsigned __int16 *a8, double *a9)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v9 = p_NA;
  if (!*(unsigned char *)(p_NA + 4)) {
    return 0;
  }
  int v10 = a1 - *(_DWORD *)(p_NA + 464);
  if ((v10 - 900001) >= 0xFFF238A7)
  {
    __int16 v23 = 0;
    double v22 = 0.0;
    *a2 = *(_WORD *)(p_NA + 468);
    *a3 = *(_WORD *)(v9 + 470);
    *a4 = *(_WORD *)(v9 + 472);
    *a5 = *(_WORD *)(v9 + 474);
    *a6 = *(_WORD *)(v9 + 476);
    *a7 = *(_WORD *)(v9 + 478);
    unsigned __int16 v19 = *(_WORD *)(v9 + 480);
    *a8 = v19;
    *a9 = *(double *)(v9 + 488);
    UTC_To_GPS_Time(&v23, &v22, *a2, *a3, *a4, *a5, *a6, *a7, 0.0, v19);
    double v20 = (double)v10 * 0.001 + v22;
    double v22 = v20;
    __int16 v21 = v23;
    if (v20 >= 604800.0)
    {
      do
      {
        double v20 = v20 + -604800.0;
        ++v21;
      }
      while (v20 >= 604800.0);
      double v22 = v20;
      __int16 v23 = v21;
    }
    if (v20 < 0.0)
    {
      do
      {
        double v20 = v20 + 604800.0;
        --v21;
      }
      while (v20 < 0.0);
      double v22 = v20;
      __int16 v23 = v21;
    }
    GPS_To_UTC_Time(a2, a3, a4, a5, a6, a7, a8, v21, v20, 0.0);
    *a9 = *a9 + (double)v10 * 0.00000001;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 4) = 0;
  }
  return result;
}

uint64_t Get_FSP_Time(unsigned int a1, __int16 *a2, double *a3, double *a4, unsigned __int8 *a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(p_NA + 5)) {
    return 0;
  }
  *(void *)char v35 = 0;
  unsigned int v34 = 0;
  unsigned int v33 = 0;
  BOOL FS_Pulse_TTick = API_Get_FS_Pulse_TTick(&v34, &v33, &v35[1], v35);
  uint64_t result = 0;
  if (!FS_Pulse_TTick) {
    return result;
  }
  unsigned int v12 = v35[1];
  double v13 = (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891;
  if (fabs(v13) > 60000.0)
  {
    EvCrt_v("Get_FSP_Time:  ERROR:  fabs(DeltaTTick) = fabs(%g) > %d", (double)(int)(v35[1] - v34) + (double)v33 * -0.0000152587891, 60000);
    return 0;
  }
  unsigned int v32 = v34;
  uint64_t v14 = *(void *)(p_api + 88);
  double v15 = *(double *)(v14 + 888) / 299792458.0;
  unsigned int v31 = v33;
  if (v15 > 0.000001)
  {
    EvLog("Get_FSP_Time:  Neglecting Clock Drift in FSP Time propogation!");
    double v16 = 0.0;
    double v15 = 0.000001;
  }
  else
  {
    double v16 = *(double *)(v14 + 168);
  }
  uint64_t v17 = 0;
  unsigned int v18 = v35[0];
  unsigned int v19 = v35[0] - (int)v13;
  uint64_t v20 = p_NA;
  char v21 = 1;
  while (1)
  {
    char v22 = v21;
    if (*(unsigned char *)(v20 + v17 + 5))
    {
      uint64_t v23 = v20 + 8 * v17;
      if (*(double *)(v23 + 520) > 0.0)
      {
        *a2 = *(_WORD *)(v20 + 2 * v17 + 512);
        *a3 = *(double *)(v23 + 496);
        double v24 = *(double *)(v23 + 520) * *(double *)(v23 + 520);
        *a4 = v24;
        unsigned int v25 = *(_DWORD *)(v20 + 4 * v17 + 552);
        if (!*(unsigned char *)(v20 + 7)) {
          break;
        }
        if (v25 >= v19 - 500 && v25 <= v19 + 400) {
          break;
        }
      }
    }
    char v21 = 0;
    uint64_t v17 = 1;
    if ((v22 & 1) == 0)
    {
      unsigned __int16 v27 = "Get_FSP_Time:  WARNING:  No pulse found !";
LABEL_19:
      EvLog(v27);
      return 0;
    }
  }
  int v28 = a1 - v12;
  if (a1 == v12)
  {
    unsigned int v29 = v18;
  }
  else
  {
    if (a1 < v12)
    {
      unsigned __int16 v27 = "Get_FSP_Time:  ReqTTick earlier than FSP FS_DBTT_TTick !";
      goto LABEL_19;
    }
    unsigned int v29 = v18;
    double v13 = v13 + (double)v28;
  }
  double v30 = (1.0 - v16) * (v13 * 0.001);
  *a4 = v24 + v15 * v30 * (v15 * v30);
  Inc_GPS_TOW(v30, a3, a2);
  EvLog_v("Get_FSP_Time:  %d %d %d %d %d %d %g %d %g %d %d %g %g", a1, v17, v32, v31, v29, v19, *(double *)(p_NA + 8 * v17 + 496), v25, v30, *a2, (int)*a3, *a3 - (double)(int)*a3, *a4 * 1000000.0 * 1000000.0);
  *a5 = 2;
  return 1;
}

BOOL Core_Get_GPS_TimePos(unsigned int a1, unsigned char *a2, unsigned char *a3, int *a4, unsigned char *a5, double *a6, double *a7, uint64_t a8, double *a9, double *a10)
{
  v24[3] = *(double *)MEMORY[0x263EF8340];
  __int16 v21 = 0;
  double v18 = 0.0;
  *a2 = 0;
  *a3 = 0;
  *a9 = 0.0;
  *a10 = 0.0;
  *a7 = 0.0;
  *a5 = 0;
  if (Get_FSP_Time(a1, &v21, a6, &v18, &v22))
  {
    *a7 = sqrt(v18) * 3.0;
    *a2 = 1;
  }
  char v23 = 0;
  double v19 = 0.0;
  int v17 = 0;
  if (Core_Get_Pos_LLH(a1, 150000, 1, &v20, a8, (uint64_t)v24, (uint64_t *)&v19, &v23, &v22, &v17, a4)
    && v23)
  {
    *a9 = sqrt(v24[0]) * 3.0;
    *a10 = sqrt(v19) * 3.0;
    *a3 = 1;
  }
  return *a2 || *a3 != 0;
}

uint64_t Core_Get_Pos_LLH(int a1, int a2, int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned char *a8, unsigned char *a9, int *a10, int *a11)
{
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  uint64_t v14 = p_NA;
  uint64_t v15 = 367;
  uint64_t v16 = 21000;
  do
  {
    if (*(unsigned char *)(v14 + v15))
    {
      int v17 = *(int **)(p_api + 8);
      int v18 = *v17;
      if (*v17) {
        int v18 = *(_DWORD *)(v14 + v16) + v18 - v17[4];
      }
      int v19 = a1 - v18;
      if (a1 - v18 <= -3001)
      {
        EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_LLH [i]", a1 - v18, a1, v18);
        uint64_t v14 = p_NA;
        int v19 = 999999000;
      }
      if (v19 > a2) {
        *(unsigned char *)(v14 + v15) = 0;
      }
    }
    ++v15;
    v16 += 80;
  }
  while (v15 != 373);
  if (*(unsigned char *)(v14 + 12))
  {
    int v20 = *(_DWORD **)(p_api + 8);
    if (*v20) {
      int v21 = *(_DWORD *)(v14 + 728) + *v20 - v20[4];
    }
    else {
      int v21 = 0;
    }
    int v22 = a1 - v21;
    if (a1 - v21 <= -3001)
    {
      EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_LLH [E911]", a1 - v21, a1, v21);
      uint64_t v14 = p_NA;
      int v22 = 999999000;
    }
    if (v22 > a2) {
      *(unsigned char *)(v14 + 12) = 0;
    }
  }
  if (!*(unsigned char *)(v14 + 10)) {
    return 0;
  }
  char v23 = *(_DWORD **)(p_api + 8);
  if (*v23) {
    int v24 = *(_DWORD *)(v14 + 608) + *v23 - v23[4];
  }
  else {
    int v24 = 0;
  }
  int v26 = a1 - v24;
  if (a1 - v24 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_LLH [0]", a1 - v24, a1, v24);
    int v26 = 999999000;
  }
  if (v26 <= a2)
  {
    *a4 = v24;
    uint64_t v27 = p_NA;
    uint64_t v28 = *(void *)(p_NA + 632);
    *(_OWORD *)a5 = *(_OWORD *)(p_NA + 616);
    *(void *)(a5 + 16) = v28;
    uint64_t v29 = *(void *)(v27 + 656);
    *(_OWORD *)a6 = *(_OWORD *)(v27 + 640);
    *(void *)(a6 + 16) = v29;
    *a7 = *(void *)(v27 + 688);
    *a8 = *(unsigned char *)(v27 + 11);
    *a9 = *(unsigned char *)(v27 + 720);
    int v30 = *(_DWORD *)(v27 + 704);
    *a10 = v30;
    int v31 = *(_DWORD *)(v27 + 696);
    if ((v31 - 1) > 3)
    {
      *a11 = 0;
      EvCrt_Illegal_Default("Core_Get_Pos_LLH", 0x3C5u);
      uint64_t v32 = p_NA;
      int v33 = *(_DWORD *)(p_NA + 696);
      int v30 = *a10;
      *a11 = v33;
      if (!v33)
      {
        int v34 = 1;
        switch(v30)
        {
          case 0:
            goto LABEL_35;
          case 1:
          case 2:
          case 5:
            int v34 = 4;
            goto LABEL_35;
          case 3:
          case 4:
          case 6:
            int v34 = 3;
LABEL_35:
            *a11 = v34;
            goto LABEL_36;
          case 7:
          case 8:
            *a11 = 2;
            goto LABEL_45;
          default:
            EvLog("Core_Get_Pos_LLH: Warning, Un-defined Ref Position Source");
            *a11 = 1;
            int v30 = *a10;
            break;
        }
      }
    }
    else
    {
      *a11 = v31;
    }
    if ((v30 - 7) >= 2)
    {
      uint64_t v32 = p_NA;
LABEL_36:
      if (*(unsigned char *)(v32 + 11))
      {
        uint64_t v35 = 0x412E848000000000;
        if (*(double *)a7 > 1000000.0 || (uint64_t v35 = 0x4059000000000000, *(double *)a7 < 100.0)) {
          *a7 = v35;
        }
      }
      if (*(unsigned char *)(v32 + 10) && *(double *)(a6 + 8) < 250000.0)
      {
        double v36 = *(double *)a6;
        *(void *)(a6 + 8) = *(void *)a6;
        if (v36 < 250000.0) {
          *(int64x2_t *)a6 = vdupq_n_s64(0x410E848000000000uLL);
        }
        *(void *)(a6 + 16) = 0;
      }
    }
LABEL_45:
    double v37 = *(double *)a6;
    double v38 = *(double *)(a6 + 8);
    if (*(double *)a6 < v38)
    {
      *(double *)(a6 + 8) = v37;
      *(void *)(a6 + 16) = 0;
      double v38 = v37;
    }
    if (a3)
    {
      double v39 = (double)v26 * 0.015 * ((double)v26 * 0.015);
      if (v38 < v39)
      {
        *(double *)(a6 + 8) = v37;
        if (v37 < v39)
        {
          *(double *)a6 = v39;
          *(double *)(a6 + 8) = v39;
        }
        *(void *)(a6 + 16) = 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(_WORD *)(p_NA + 10) = 0;
  }
  return result;
}

uint64_t Core_Set_Clk_Drift(void *a1, double *a2, uint64_t a3)
{
  EvLog_nd(a1, 3, a3, *(unsigned int *)a2, (int)a2[1], *((unsigned int *)a2 + 4));
  uint64_t v4 = p_NA;
  *(_DWORD *)(p_NA + 560) = *(_DWORD *)a2;
  double v5 = a2[1];
  unsigned int v6 = *((_DWORD *)a2 + 4);
  *(double *)(v4 + 568) = v5 * 0.000000001;
  *(double *)(v4 + 576) = (double)v6 * 0.000000001 * ((double)v6 * 0.000000001);
  *(unsigned char *)(v4 + 584) = 2;
  *(unsigned char *)(v4 + 8) = 1;
  if (fabs(v5) > 30000.0)
  {
    *(unsigned char *)(v4 + 8) = 0;
    EvCrt_v("%s FAILED: Calibration = %g >30ppm, Out of range!");
    return 0;
  }
  if (v6 - 10001 <= 0xFFFFD8EF)
  {
    *(unsigned char *)(v4 + 8) = 0;
    EvCrt_v("%s FAILED: RMS_ppb = %g ==0ppm or >10ppm, Out of range!");
    return 0;
  }
  return 1;
}

uint64_t Core_Get_Clk_Drift(int a1, int a2, unsigned int *a3, double *a4, double *a5, unsigned __int8 *a6)
{
  if (!*(unsigned char *)(p_NA + 8)) {
    return 0;
  }
  if (*(unsigned char *)(p_NA + 307) && *(_DWORD *)(p_NA + 19248) == 10)
  {
    EvLog("Core_Get_Clk_Drift: Ext Freq Assist skipped in Airborne mode");
    return 0;
  }
  unsigned int v12 = *(_DWORD **)(p_api + 8);
  if (*v12) {
    int v13 = *(_DWORD *)(p_NA + 560) + *v12 - v12[4];
  }
  else {
    int v13 = 0;
  }
  int v14 = a1 - v13;
  if (a1 - v13 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Clk_Drift", a1 - v13, a1, v13);
    int v14 = 999999000;
  }
  if (v14 / 1000 <= a2)
  {
    *a3 = v13;
    uint64_t v15 = p_NA;
    *a4 = *(double *)(p_NA + 568);
    *a5 = *(double *)(v15 + 576);
    *a6 = *(unsigned char *)(v15 + 584);
    double v16 = 9.0e-16;
    if (*a5 < 9.0e-16 || (double v16 = *a5, *a5 < 2.77777778e-14))
    {
      if (v14 > 899999) {
        *a5 = 2.77777778e-14;
      }
      else {
        *a5 = v16
      }
            + (2.77777778e-14 - v16)
            * (-((double)(900 - v14 / 1000) * 0.00111111111 * ((double)(900 - v14 / 1000) * 0.00111111111))
             * ((double)(900 - v14 / 1000)
              * 0.00111111111)
             + 1.0);
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(p_NA + 8) = 0;
  }
  return result;
}

uint64_t Core_Get_Pos_H(int a1, int a2, double *a3, double *a4)
{
  uint64_t v4 = p_NA;
  if (!*(unsigned char *)(p_NA + 11)) {
    return 0;
  }
  double v8 = *(int **)(p_api + 8);
  int v9 = *v8;
  if (*v8) {
    int v9 = *(_DWORD *)(p_NA + 608) + v9 - v8[4];
  }
  int v10 = a1 - v9;
  if (a1 - v9 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_H", a1 - v9, a1, v9);
    uint64_t v4 = p_NA;
    int v10 = 999999000;
  }
  if (v10 <= a2)
  {
    *a3 = *(double *)(v4 + 632);
    *a4 = *(double *)(v4 + 688);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(v4 + 11) = 0;
  }
  return result;
}

uint64_t Core_Get_Pos_E911(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 12)) {
    return 0;
  }
  int v3 = *(_DWORD *)(p_NA + 728);
  if (a1 - v3 > -3001)
  {
    if (a1 - v3 < 150001)
    {
      double v5 = (_OWORD *)(p_NA + 728);
      *a2 = *(_OWORD *)(p_NA + 728);
      long long v6 = v5[1];
      long long v7 = v5[2];
      long long v8 = v5[4];
      a2[3] = v5[3];
      a2[4] = v8;
      a2[1] = v6;
      a2[2] = v7;
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Pos_E911", a1 - v3, a1, v3);
    uint64_t v2 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v2 + 12) = 0;
  return result;
}

uint64_t Core_Get_Static_Status(unsigned __int8 *a1)
{
  if (!*(unsigned char *)(p_NA + 299)) {
    return 0;
  }
  double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v3 = p_NA;
  int v4 = *(_DWORD *)(p_NA + 19152);
  int v5 = (unint64_t)v2 - v4;
  if (v5 > -3001)
  {
    if (v5 < 2001)
    {
      *a1 = *(unsigned char *)(p_NA + 19156);
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Static_Status", (unint64_t)v2 - v4, (unint64_t)v2, v4);
    uint64_t v3 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v3 + 299) = 0;
  return result;
}

uint64_t Core_Get_Ped_Status(_DWORD *a1, unsigned char *a2)
{
  if (!*(unsigned char *)(p_NA + 300)) {
    return 0;
  }
  double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  uint64_t v5 = p_NA;
  int v6 = *(_DWORD *)(p_NA + 19160);
  int v7 = (unint64_t)v4 - v6;
  if (v7 > -3001)
  {
    if (v7 < 2001)
    {
      *a1 = *(_DWORD *)(p_NA + 19164);
      *a2 = *(unsigned char *)(v5 + 19168);
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Ped_Status", (unint64_t)v4 - v6, (unint64_t)v4, v6);
    uint64_t v5 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 300) = 0;
  return result;
}

uint64_t Core_Get_ExtA_DMS(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 301)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 19172);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_DMS", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 305) = 0;
    *(_DWORD *)(v2 + 301) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 19172);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 19180);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_UAC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 307)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 19244);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_UAC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 311) = 0;
    *(_DWORD *)(v2 + 307) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 19244);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 19252);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_FIV_Ind(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 313)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 19316);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_FIV_Ind", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 317) = 0;
    *(_DWORD *)(v2 + 313) = 0;
    return result;
  }
  if (v7 >= 43200001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 19316);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(p_NA + 19324);
  *(void *)a2 = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Alt(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 325)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 19416);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Alt", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 329) = 0;
    *(_DWORD *)(v2 + 325) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  long long v9 = *(_OWORD *)(p_NA + 19432);
  *a2 = *(_OWORD *)(p_NA + 19416);
  a2[1] = v9;
  return 1;
}

uint64_t Core_Get_ExtA_MapV(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 331)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 19608);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_MapV", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 335) = 0;
    *(_DWORD *)(v2 + 331) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = p_NA;
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 19608);
  long long v11 = *(_OWORD *)(v9 + 19640);
  long long v10 = *(_OWORD *)(v9 + 19656);
  long long v12 = *(_OWORD *)(v9 + 19624);
  *(void *)(a2 + 64) = *(void *)(v9 + 19672);
  *(_OWORD *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 16) = v12;
  return 1;
}

uint64_t Core_Get_ExtA_SpdC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 337)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 20040);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_SpdC", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 341) = 0;
    *(_DWORD *)(v2 + 337) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 20056);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 20040);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_AT_Vel(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 343)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 20184);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_AT_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 347) = 0;
    *(_DWORD *)(v2 + 343) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 20200);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 20184);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_V_Vel(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 349)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 20328);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_V_Vel", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 353) = 0;
    *(_DWORD *)(v2 + 349) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 20344);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 20328);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_Heading(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 355)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 20472);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_Heading", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 359) = 0;
    *(_DWORD *)(v2 + 355) = 0;
    return result;
  }
  if (v7 >= 120001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  uint64_t v9 = *(void *)(p_NA + 20488);
  *(_OWORD *)a2 = *(_OWORD *)(p_NA + 20472);
  *(void *)(a2 + 16) = v9;
  return 1;
}

uint64_t Core_Get_ExtA_TunnelEP(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 361)) {
    return 0;
  }
  int v5 = *(_DWORD *)(p_NA + 20616);
  double v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  int v7 = (unint64_t)v6 - v5;
  if (v7 <= -3001)
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "ExtA_TunnelEP", (unint64_t)v6 - v5, (unint64_t)v6, v5);
LABEL_5:
    uint64_t result = 0;
    *(_WORD *)(v2 + 365) = 0;
    *(_DWORD *)(v2 + 361) = 0;
    return result;
  }
  if (v7 >= 30001) {
    goto LABEL_5;
  }
  if (v7 > a1) {
    return 0;
  }
  long long v9 = *(_OWORD *)(p_NA + 20664);
  long long v11 = *(_OWORD *)(p_NA + 20616);
  long long v10 = *(_OWORD *)(p_NA + 20632);
  a2[2] = *(_OWORD *)(p_NA + 20648);
  a2[3] = v9;
  *a2 = v11;
  a2[1] = v10;
  return 1;
}

uint64_t Core_Get_Speed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5 = p_NA;
  if (!*(unsigned char *)(p_NA + 373)) {
    return 0;
  }
  double v6 = *(_DWORD **)(p_api + 8);
  if (*v6) {
    int v7 = *(_DWORD *)(p_NA + 21480) + *v6 - v6[4];
  }
  else {
    int v7 = 0;
  }
  if (a1 - v7 > -3001)
  {
    if (a1 - v7 < 3001)
    {
      *a2 = v7;
      *a3 = *(double *)(v5 + 21488);
      *a4 = *(double *)(v5 + 21496);
      *a5 = 0.0;
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Speed", a1 - v7, a1, v7);
    uint64_t v5 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 373) = 0;
  return result;
}

uint64_t Core_Get_GSpeed(int a1, unsigned int *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5 = p_NA;
  if (!*(unsigned char *)(p_NA + 374)) {
    return 0;
  }
  double v6 = *(_DWORD **)(p_api + 8);
  if (*v6) {
    int v7 = *(_DWORD *)(p_NA + 21504) + *v6 - v6[4];
  }
  else {
    int v7 = 0;
  }
  if (a1 - v7 > -3001)
  {
    if (a1 - v7 < 3001)
    {
      *a2 = v7;
      *a3 = *(double *)(v5 + 21512);
      *a4 = *(double *)(v5 + 21520);
      *a5 = 0.0;
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "GSpeed", a1 - v7, a1, v7);
    uint64_t v5 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 374) = 0;
  return result;
}

uint64_t Core_Get_Track(int a1, unsigned int *a2, double *a3, double *a4, double *a5, double *a6)
{
  uint64_t v6 = p_NA;
  if (!*(unsigned char *)(p_NA + 375)) {
    return 0;
  }
  int v7 = *(_DWORD **)(p_api + 8);
  if (*v7) {
    int v8 = *(_DWORD *)(p_NA + 21528) + *v7 - v7[4];
  }
  else {
    int v8 = 0;
  }
  if (a1 - v8 > -3001)
  {
    if (a1 - v8 < 3001)
    {
      *a2 = v8;
      *a3 = *(double *)(v6 + 21544);
      *a4 = *(double *)(v6 + 21536);
      *a5 = *(double *)(v6 + 21552);
      *a6 = 0.0;
      return 1;
    }
  }
  else
  {
    EvCrt_v("NA_Age:  ERROR:  %s  Assistance Age in the Future by %d  ms  (%u -%u)", "Track", a1 - v8, a1, v8);
    uint64_t v6 = p_NA;
  }
  uint64_t result = 0;
  *(unsigned char *)(v6 + 375) = 0;
  return result;
}

uint64_t Core_Get_GPS_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 33) < 0xFFFFFFE0) {
    return 0;
  }
  uint64_t v4 = (a1 - 1);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v4 + 47))
  {
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 3152);
    if (a2 - v5 >= 15724801)
    {
      uint64_t result = 0;
      *(unsigned char *)(p_NA + v4 + 47) = 0;
      return result;
    }
  }
  else
  {
    if (!*(unsigned char *)(p_NA + v4 + 47)) {
      return 0;
    }
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 3152);
  }
  uint64_t v6 = p_NA + 36 * v4;
  int v7 = *(_DWORD *)(v6 + 3156);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v7;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v6 + 3160);
  int v8 = (unsigned char *)(v6 + 3162);
  unsigned int v9 = 9;
  uint64_t v10 = 12;
  do
  {
    uint64_t v11 = a3 + v10;
    *(unsigned char *)uint64_t v11 = *v8;
    *(unsigned char *)(v11 + 1) = v8[1];
    *(_WORD *)(v11 + 2) = v8[2];
    --v9;
    v10 += 4;
    v8 += 3;
  }
  while (v9 > 1);
  int v12 = *(_DWORD *)a3;
  if (a2) {
    BOOL v13 = v12 < a2 + 50;
  }
  else {
    BOOL v13 = 1;
  }
  unsigned int v14 = v13;
  if (v12) {
    BOOL v15 = v12 < 619315201;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15) {
    return 0;
  }
  else {
    return v14;
  }
}

uint64_t Core_Get_QZSS_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 + 53) < 0xF6u) {
    return 0;
  }
  uint64_t v4 = (a1 - 193);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v4 + 89))
  {
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 5024);
    if (a2 - v5 >= 15724801)
    {
      uint64_t result = 0;
      *(unsigned char *)(p_NA + v4 + 89) = 0;
      return result;
    }
  }
  else
  {
    if (!*(unsigned char *)(p_NA + v4 + 89)) {
      return 0;
    }
    int v5 = *(_DWORD *)(p_NA + 36 * v4 + 5024);
  }
  uint64_t v6 = p_NA + 36 * v4;
  int v7 = *(_DWORD *)(v6 + 5028);
  *(_DWORD *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v7;
  *(_WORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 10) = *(_WORD *)(v6 + 5032);
  int v8 = (unsigned char *)(v6 + 5034);
  unsigned int v9 = 9;
  uint64_t v10 = 12;
  do
  {
    uint64_t v11 = a3 + v10;
    *(unsigned char *)uint64_t v11 = *v8;
    *(unsigned char *)(v11 + 1) = v8[1];
    *(_WORD *)(v11 + 2) = v8[2];
    --v9;
    v10 += 4;
    v8 += 3;
  }
  while (v9 > 1);
  int v12 = *(_DWORD *)a3;
  if (a2) {
    BOOL v13 = v12 < a2 + 50;
  }
  else {
    BOOL v13 = 1;
  }
  unsigned int v14 = v13;
  if (v12) {
    BOOL v15 = v12 < 619315201;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15) {
    return 0;
  }
  else {
    return v14;
  }
}

BOOL Core_Get_GLON_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 25) < 0xFFFFFFE8) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v3 + 123))
  {
    if (a2 - *(_DWORD *)(p_NA + 36 * v3 + 16748) >= 15724801)
    {
      BOOL result = 0;
      *(unsigned char *)(p_NA + v3 + 123) = 0;
      return result;
    }
  }
  else if (!*(unsigned char *)(p_NA + v3 + 123))
  {
    return 0;
  }
  uint64_t v5 = p_NA + 36 * v3 + 16748;
  long long v7 = *(_OWORD *)v5;
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v5 + 32);
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 && v8 < 619315201) {
    return 0;
  }
  return !a2 || v8 < a2 + 50;
}

BOOL Core_Get_GAL_Alm(int a1, int a2, uint64_t a3)
{
  if ((a1 - 37) < 0xFFFFFFDC) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v3 + 186))
  {
    if (a2 - *(_DWORD *)(p_NA + 36 * v3 + 8568) >= 15724801)
    {
      BOOL result = 0;
      *(unsigned char *)(p_NA + v3 + 186) = 0;
      return result;
    }
  }
  else if (!*(unsigned char *)(p_NA + v3 + 186))
  {
    return 0;
  }
  uint64_t v5 = p_NA + 36 * v3;
  long long v7 = *(_OWORD *)(v5 + 8568);
  long long v6 = *(_OWORD *)(v5 + 8584);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v5 + 8600);
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 && v8 < 619315201) {
    return 0;
  }
  return !a2 || v8 < a2 + 50;
}

BOOL Core_Get_BDS_Alm(int a1, int a2, _OWORD *a3)
{
  if ((a1 - 38) < 0xFFFFFFDB) {
    return 0;
  }
  uint64_t v3 = (a1 - 1);
  if (a2 >= 619315201 && *(unsigned char *)(p_NA + v3 + 260))
  {
    if (a2 - *(_DWORD *)(p_NA + 44 * v3 + 13584) >= 15724801)
    {
      BOOL result = 0;
      *(unsigned char *)(p_NA + v3 + 260) = 0;
      return result;
    }
  }
  else if (!*(unsigned char *)(p_NA + v3 + 260))
  {
    return 0;
  }
  uint64_t v5 = (_OWORD *)(p_NA + 44 * v3);
  long long v6 = v5[850];
  long long v7 = v5[849];
  *(_OWORD *)((char *)a3 + 28) = *(_OWORD *)((char *)v5 + 13612);
  *a3 = v7;
  a3[1] = v6;
  int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 && v8 < 619315201) {
    return 0;
  }
  return !a2 || v8 < a2 + 50;
}

BOOL Core_Get_GPS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  if ((a1 - 33) < 0xFFFFFFE0) {
    return 0;
  }
  uint64_t v6 = (a1 - 1);
  long long v7 = (unsigned char *)(p_NA + v6 + 15);
  if (!a2 && !a3)
  {
    *long long v7 = 0;
    EvLog_d("Core_Get_GPS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  int v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    uint64_t v10 = *(unsigned int *)(p_NA + 72 * v6 + 848);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_GPS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      BOOL result = 0;
      *(unsigned char *)(p_NA + v6 + 15) = 0;
      return result;
    }
    if (!a3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (!a3 || !v9) {
      return result;
    }
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 72 * v6 + 848);
  unsigned int v13 = a3[2];
  uint64_t v14 = 16 * (unsigned __int16)a3[7];
  unsigned int v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    uint64_t v16 = *a3;
    if ((int)v16 >= 1)
    {
      int v17 = (v13 >> 14) & 0x3FF;
      do
      {
        int v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(void *)(p_api + 72) + 1026));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00) {
          LODWORD(v19) = 1237420800;
        }
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = (v19 - 604800);
        }
      }
      else
      {
        uint64_t v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0) {
        unsigned int v21 = v19;
      }
      else {
        unsigned int v21 = -(int)v19;
      }
      if (v21 >= 0x5461)
      {
        *(unsigned char *)(p_NA + v6 + 15) = 0;
        EvLog_nd("Core_Get_GPS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = (v22 - 604800);
    }
    BOOL v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    uint64_t v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(unsigned char *)(p_NA + v6 + 15) = 0;
      EvLog_nd("Core_Get_GPS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!v24) {
      *a3 = a2;
    }
  }
  if (!*(unsigned char *)(p_NA + v6 + 15)) {
    return 0;
  }
  int v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201) {
      return 0;
    }
  }
  if (a2 && v26 >= (int)a2 + 300) {
    return 0;
  }
  if (v26) {
    BOOL v27 = v26 <= (int)a2 - 7200;
  }
  else {
    BOOL v27 = 0;
  }
  return !v27;
}

BOOL Core_Get_QZSS_Eph(uint64_t a1, uint64_t a2, int *a3)
{
  if ((a1 + 53) < 0xF6u) {
    return 0;
  }
  uint64_t v6 = (a1 - 193);
  long long v7 = (unsigned char *)(p_NA + v6 + 79);
  if (!a2 && !a3)
  {
    *long long v7 = 0;
    EvLog_d("Core_Get_QZSS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  int v9 = *v7;
  if ((int)a2 >= 619315201 && v9)
  {
    uint64_t v10 = *(unsigned int *)(p_NA + 72 * v6 + 4304);
    if ((int)v10 >= 619315201 && (int)a2 - (int)v10 >= 21601)
    {
      EvLog_nd("Core_Get_QZSS_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v10);
      BOOL result = 0;
      *(unsigned char *)(p_NA + v6 + 79) = 0;
      return result;
    }
    if (!a3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (!a3 || !v9) {
      return result;
    }
  }
  UnCompact_GPS_BinEph((uint64_t)a3, p_NA + 72 * v6 + 4304);
  unsigned int v13 = a3[2];
  uint64_t v14 = 16 * (unsigned __int16)a3[7];
  unsigned int v15 = a3[17];
  if ((v13 & 0xFFC000) != 0 || ((a3[9] | v15) & 3) != 0 || (a3[25] & 3) != 0)
  {
    uint64_t v16 = *a3;
    if ((int)v16 >= 1)
    {
      int v17 = (v13 >> 14) & 0x3FF;
      do
      {
        int v18 = (__int16)v17;
        LOWORD(v17) = v17 + 1024;
      }
      while (v18 < *(__int16 *)(*(void *)(p_api + 72) + 1026));
      LODWORD(v19) = 604800 * v18 + v14 - v16;
      if ((int)v16 >= 619315201 && (int)v19 >= 618105601)
      {
        if (v19 >= 0x49C18B00) {
          LODWORD(v19) = 1237420800;
        }
        LODWORD(v19) = v19 - 1238630399 + ((int)v14 + 604800 * v18 - (int)v16 - (int)v19 + 619315199) % 0x24EA0000u;
      }
      if ((int)v19 > -21601 || v14 >> 5 > 0x2A2)
      {
        if (v14 <= 0x8E620 || (int)v19 <= 21600) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = (v19 - 604800);
        }
      }
      else
      {
        uint64_t v19 = (v19 + 604800);
      }
      if ((int)v19 >= 0) {
        unsigned int v21 = v19;
      }
      else {
        unsigned int v21 = -(int)v19;
      }
      if (v21 >= 0x5461)
      {
        *(unsigned char *)(p_NA + v6 + 79) = 0;
        EvLog_nd("Core_Get_QZSS_Eph:  (c) Deleted SV", 5, v12, a1, a2, v19, v14, v16);
      }
    }
  }
  if ((int)a2 >= 1)
  {
    LODWORD(v22) = ((int)a2 - (int)v14) % 604800;
    if ((int)v22 <= 302400) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = (v22 - 604800);
    }
    BOOL v23 = (int)v22 > 10800 && (v15 & 0x80) == 0;
    uint64_t v24 = *a3;
    if (v23 || (int)v22 >= 16201)
    {
      *(unsigned char *)(p_NA + v6 + 79) = 0;
      EvLog_nd("Core_Get_QZSS_Eph:  (d) Deleted SV", 5, v12, a1, a2, v22, v14, v24);
      LODWORD(v24) = *a3;
    }
    if (!v24) {
      *a3 = a2;
    }
  }
  if (!*(unsigned char *)(p_NA + v6 + 79)) {
    return 0;
  }
  int v26 = *a3;
  if (*a3)
  {
    if (v26 < 619315201) {
      return 0;
    }
  }
  if (a2 && v26 >= (int)a2 + 300) {
    return 0;
  }
  if (v26) {
    BOOL v27 = v26 <= (int)a2 - 7200;
  }
  else {
    BOOL v27 = 0;
  }
  return !v27;
}

BOOL Core_Get_GAL_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 - 37) < 0xFFFFFFDC) {
    return 0;
  }
  unsigned int v4 = a2;
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  int v8 = (unsigned char *)(p_NA + v6 + 150);
  if (!a2 && !a3)
  {
    *int v8 = 0;
    EvLog_d("Core_Get_GAL_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + 88 * v6 + 5400);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_GAL_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 150) = 0;
    }
    uint64_t v11 = 60 * *(unsigned __int16 *)(v7 + 88 * v6 + 5418);
    int v12 = v4 % 0x93A80 - v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400) {
      LODWORD(v13) = v4 % 0x93A80 - v11;
    }
    if (v12 <= 302399) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = (v12 - 604800);
    }
    if ((int)v13 >= 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = -(int)v13;
    }
    if (v14 >= 0x3841)
    {
      *(unsigned char *)(v7 + v6 + 150) = 0;
      EvLog_nd("Core_Get_GAL_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, v11);
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(p_NA + v6 + 150);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = p_NA + 88 * v6;
  long long v17 = *(_OWORD *)(v16 + 5416);
  *(_OWORD *)a3 = *(_OWORD *)(v16 + 5400);
  *(_OWORD *)(a3 + 16) = v17;
  long long v18 = *(_OWORD *)(v16 + 5432);
  long long v19 = *(_OWORD *)(v16 + 5448);
  long long v20 = *(_OWORD *)(v16 + 5464);
  *(void *)(a3 + 80) = *(void *)(v16 + 5480);
  *(_OWORD *)(a3 + 48) = v19;
  *(_OWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 32) = v18;
  int v21 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v21)
  {
    *(_DWORD *)a3 = v4;
    int v21 = v4;
  }
  if (!*v15 || v21 && v21 < 619315201 || v4 && v21 >= (int)(v4 + 300)) {
    return 0;
  }
  if (v21) {
    BOOL v23 = v21 <= (int)(v4 - 1800);
  }
  else {
    BOOL v23 = 0;
  }
  return !v23;
}

BOOL Core_Get_BDS_Eph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 - 38) < 0xFFFFFFDB) {
    return 0;
  }
  unsigned int v4 = a2;
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  int v8 = (unsigned char *)(p_NA + v6 + 223);
  if (!a2 && !a3)
  {
    *int v8 = 0;
    EvLog_d("Core_Get_BDS_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + 100 * v6 + 9884);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 14401)
    {
      EvLog_nd("Core_Get_BDS_Eph:  (b) Deleted SV", 3, a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 223) = 0;
    }
    int v11 = *(_DWORD *)(v7 + 100 * v6 + 9896);
    signed int v12 = v4 % 0x93A80 - 8 * v11;
    LODWORD(v13) = v12 + 604800;
    if (v12 >= -302400) {
      LODWORD(v13) = v4 % 0x93A80 - 8 * v11;
    }
    if (v12 <= 302399) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = (v12 - 604800);
    }
    if ((int)v13 >= 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = -(int)v13;
    }
    if (v14 >= 0x3841)
    {
      *(unsigned char *)(v7 + v6 + 223) = 0;
      EvLog_nd("Core_Get_BDS_Eph:  (c) Deleted SV", 4, a3, a1, v13, v4 % 0x93A80, (8 * v11));
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(p_NA + v6 + 223);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = p_NA + 100 * v6;
  long long v17 = *(_OWORD *)(v16 + 9916);
  long long v18 = *(_OWORD *)(v16 + 9884);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v16 + 9900);
  *(_OWORD *)(a3 + 32) = v17;
  *(_OWORD *)a3 = v18;
  long long v19 = *(_OWORD *)(v16 + 9932);
  long long v20 = *(_OWORD *)(v16 + 9948);
  long long v21 = *(_OWORD *)(v16 + 9964);
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(v16 + 9980);
  *(_OWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 80) = v21;
  *(_OWORD *)(a3 + 48) = v19;
  int v22 = *(_DWORD *)a3;
  if ((int)v4 >= 1 && !v22)
  {
    *(_DWORD *)a3 = v4;
    int v22 = v4;
  }
  if (!*v15 || v22 && v22 < 619315201 || v4 && v22 >= (int)(v4 + 300)) {
    return 0;
  }
  if (v22) {
    BOOL v24 = v22 <= (int)(v4 - 1800);
  }
  else {
    BOOL v24 = 0;
  }
  return !v24;
}

BOOL Core_Get_GLON_Eph(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if ((a1 - 25) < 0xFFFFFFE8) {
    return 0;
  }
  uint64_t v6 = (a1 - 1);
  uint64_t v7 = p_NA;
  int v8 = (unsigned char *)(p_NA + v6 + 99);
  if (!a2 && !a3)
  {
    *int v8 = 0;
    EvLog_d("Core_Get_GLON_Eph:  (a) Deleted SV", a1);
    return 0;
  }
  if ((int)a2 >= 619315201 && *v8)
  {
    uint64_t v9 = *(unsigned int *)(p_NA + (v6 << 6) + 15212);
    if ((int)v9 >= 619315201 && (int)a2 - (int)v9 >= 9901)
    {
      EvLog_nd("Core_Get_GLON_Eph:  (b) Deleted SV", 3, (uint64_t)a3, a1, a2, v9);
      uint64_t v7 = p_NA;
      uint64_t v11 = p_NA + v6;
      *(unsigned char *)(v11 + 99) = 0;
      *(unsigned char *)(v11 + 17640) = 127;
    }
    uint64_t v12 = 900 * (*(_WORD *)(v7 + (v6 << 6) + 15238) & 0x7Fu);
    int v13 = ((int)a2 + 10800) % 0x15180u - v12;
    int v14 = v13 + 86400;
    if (v13 >= -43200) {
      int v14 = ((int)a2 + 10800) % 0x15180u - v12;
    }
    if (v13 > 43199) {
      int v14 = v13 - 86400;
    }
    if (v14 < 0) {
      int v14 = -v14;
    }
    if (v14 >= 0x26AD)
    {
      *(unsigned char *)(v7 + v6 + 99) = 0;
      EvLog_nd("Core_Get_GLON_Eph:  (c) Deleted SV", 4, (uint64_t)a3, a1, a2, ((int)a2 + 10800) % 0x15180u, v12);
      uint64_t v7 = p_NA;
      *(unsigned char *)(p_NA + v6 + 17640) = 127;
    }
  }
  if (!a3) {
    return 0;
  }
  unsigned int v15 = (unsigned char *)(v7 + v6 + 99);
  if (!*v15) {
    return 0;
  }
  uint64_t v16 = (long long *)(v7 + (v6 << 6) + 15212);
  long long v17 = v16[3];
  long long v19 = *v16;
  long long v18 = v16[1];
  a3[2] = v16[2];
  a3[3] = v17;
  *a3 = v19;
  a3[1] = v18;
  int v20 = *(_DWORD *)a3;
  if ((int)a2 >= 1 && !v20)
  {
    *(_DWORD *)a3 = a2;
    int v20 = a2;
  }
  if (!*v15 || v20 && v20 < 619315201 || a2 && v20 >= (int)a2 + 300) {
    return 0;
  }
  if (v20) {
    BOOL v22 = v20 <= (int)a2 - 1800;
  }
  else {
    BOOL v22 = 0;
  }
  return !v22;
}

uint64_t Core_Get_GLON_Clk1(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 147)) {
    return 0;
  }
  uint64_t v3 = p_NA + 17612;
  int v4 = *(_DWORD *)(p_NA + 17612);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *(_DWORD *)uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 147) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)(v3 + 12);
    *a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_Klob(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 13)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 808);
  int v4 = *(_DWORD *)(p_NA + 808);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 13) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GPS_UTC(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 14)) {
    return 0;
  }
  uint64_t v3 = p_NA + 824;
  int v4 = *(_DWORD *)(p_NA + 824);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *(_DWORD *)uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 14) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(void *)(a2 + 16) = *(void *)(v3 + 16);
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_GAL_GGTO(int a1, _OWORD *a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 149)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 5384);
  int v4 = *(_DWORD *)(p_NA + 5384);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 149) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    *a2 = *(_OWORD *)v3;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_BDS_BGTO(int a1, uint64_t a2)
{
  uint64_t v2 = p_NA;
  if (!*(unsigned char *)(p_NA + 222)) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)(p_NA + 9864);
  int v4 = *(_DWORD *)(p_NA + 9864);
  if (a1 < 619315201 || v4)
  {
    if (a1 < 619315201) {
      goto LABEL_8;
    }
  }
  else
  {
    int v4 = a1 - 900;
    *uint64_t v3 = a1 - 900;
  }
  if (a1 - v4 >= 1209601)
  {
    uint64_t result = 0;
    *(unsigned char *)(v2 + 222) = 0;
    return result;
  }
LABEL_8:
  if (v4) {
    BOOL v6 = v4 < 619315201;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    long long v7 = *(_OWORD *)v3;
    *(_DWORD *)(a2 + 16) = v3[4];
    *(_OWORD *)a2 = v7;
    return 1;
  }
  return 0;
}

uint64_t Core_Get_AGNSS_AcqAss(_DWORD *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = p_NA;
  if (!*(unsigned char *)(p_NA + 297)) {
    return 0;
  }
  uint64_t v7 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v7 + 5))
  {
    if (*(int *)v7 >= 3)
    {
      int v8 = (int)*(double *)(v7 + 24) + 604800 * *(__int16 *)(v7 + 16);
      if (v8 >= 619315201)
      {
        int v9 = *(_DWORD *)(p_NA + 17664);
        unsigned int v10 = 1000 * (v8 % 0x93A80u);
        if (v10 - v9 - 180001 <= 0xFFFCCBAE)
        {
          *(unsigned char *)(p_NA + 297) = 0;
          EvCrt_v("Core_Get_AGPS_AcqAss:  AcqAss Invalidated,  d_ITOW = %d =(%d - %d)", v10 - v9, v10, v9);
          uint64_t v3 = p_NA;
          *(unsigned char *)(p_NA + 148) = 0;
          if (!*(unsigned char *)(v3 + 297)) {
            return 0;
          }
        }
      }
    }
  }
  int v20 = a2;
  if (*(unsigned char *)(v3 + 17672))
  {
    unint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 17676;
    while (1)
    {
      int v14 = (_OWORD *)(v3 + v13);
      if (*(unsigned char *)(v3 + v13) != 4)
      {
        uint64_t v15 = a3 + 28 * v12;
        long long v16 = *(_OWORD *)((char *)v14 + 12);
        *(_OWORD *)uint64_t v15 = *v14;
        *(_OWORD *)(v15 + 12) = v16;
        if (*(unsigned char *)v15 == 2)
        {
          uint64_t v17 = *(unsigned __int8 *)(v3 + 28 * v12 + 17678);
          int v18 = *(_DWORD *)(*(void *)(p_api + 56) + 4 * (v17 - 1) + 16336);
          if (v18 == 2139062143)
          {
            if (!*(unsigned char *)(v3 + 148)) {
              goto LABEL_18;
            }
            int v18 = *(unsigned __int8 *)(v3 + v17 - 1 + 17640);
            if (v18 == 127) {
              goto LABEL_18;
            }
          }
          else
          {
            *(unsigned char *)(v3 + 28 * v12 + 17679) = v18;
            *(unsigned char *)(v15 + 3) = v18;
          }
          API_Set_GLON_Slot_Num((char)v18, v17);
          ++v12;
          uint64_t v3 = p_NA;
        }
        else
        {
          ++v12;
        }
      }
LABEL_18:
      ++v11;
      v13 += 28;
      if (v11 >= *(unsigned __int8 *)(v3 + 17672)) {
        goto LABEL_22;
      }
    }
  }
  LOBYTE(v12) = 0;
LABEL_22:
  *int v20 = v12;
  *a1 = *(_DWORD *)(v3 + 17664);
  return 1;
}

uint64_t Core_Get_GPS_TOWAss(unsigned int *__b)
{
  uint64_t v2 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v2 + 5) && *(int *)v2 >= 3) {
    int v3 = (int)*(double *)(v2 + 24) + 604800 * *(__int16 *)(v2 + 16);
  }
  else {
    int v3 = 0;
  }
  int v4 = (_OWORD *)p_NA;
  if (*(unsigned char *)(p_NA + 298)
    && (v3 < 619315201
     || (int v5 = *(_DWORD *)(p_NA + 19020), v6 = 1000 * (v3 % 0x93A80u), v6 - v5 - 180001 > 0xFFFD0646)
     || (*(unsigned char *)(p_NA + 298) = 0,
         EvCrt_v("Core_Get_GPS_TOWAss:  TOW_Assist Invalidated,  d_ITOW = %d =(%d - %d)", v6 - v5, 1000 * (v3 % 0x93A80u), v5), int v4 = (_OWORD *)p_NA, *(unsigned char *)(p_NA + 298))))
  {
    long long v7 = v4[1189];
    long long v8 = v4[1190];
    long long v9 = v4[1192];
    *((_OWORD *)__b + 2) = v4[1191];
    *((_OWORD *)__b + 3) = v9;
    *(_OWORD *)__b = v7;
    *((_OWORD *)__b + 1) = v8;
    long long v10 = v4[1193];
    long long v11 = v4[1194];
    long long v12 = v4[1196];
    *((_OWORD *)__b + 6) = v4[1195];
    *((_OWORD *)__b + 7) = v12;
    *((_OWORD *)__b + 4) = v10;
    *((_OWORD *)__b + 5) = v11;
  }
  else
  {
    if ((v3 - 681909601) >= 0x1869F
      && (v3 - 758719201) >= 0x1869F
      && (v3 - 790368801) >= 0x1869F)
    {
      uint64_t result = 0;
      *__b = 0;
      return result;
    }
    memset_pattern16(__b, &unk_22BB0CF30, 0x80uLL);
  }
  return 1;
}

__n128 SBAS_Eph2RefState(__n128 *a1, char a2, __int16 a3, int a4, uint64_t a5)
{
  *(void *)(a5 + 176) = 0;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(unsigned char *)(a5 + 180) = a2;
  *(_DWORD *)(a5 + 184) = 1;
  *(_DWORD *)(a5 + 176) = 6;
  *(void *)(a5 + 112) = 0x4083880000000000;
  unsigned __int32 v8 = a1->n128_u32[2];
  ldiv_t v9 = ldiv(a4, 86400);
  if ((int)(LODWORD(v9.rem) - v8) >= -43200) {
    int v10 = 0;
  }
  else {
    int v10 = -1;
  }
  if ((int)(LODWORD(v9.rem) - v8) > 43199) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  int v12 = v8 + 86400 * (v11 + LODWORD(v9.quot));
  int v13 = v12 - 604800;
  if (v12 > 0x93A7F)
  {
    __int16 v14 = a3 + 1;
  }
  else
  {
    int v13 = v12;
    __int16 v14 = a3;
  }
  BOOL v15 = v12 >= 0;
  if (v12 < 0) {
    int v16 = v12 + 604800;
  }
  else {
    int v16 = v13;
  }
  if (v15) {
    __int16 v17 = v14;
  }
  else {
    __int16 v17 = a3 - 1;
  }
  *(_DWORD *)(a5 + 160) = v16;
  *(_WORD *)(a5 + 164) = v17;
  *(void *)a5 = a1[2].n128_u64[0];
  *(void *)(a5 + 8) = a1[2].n128_u64[1];
  *(void *)(a5 + 16) = a1[3].n128_u64[0];
  *(void *)(a5 + 24) = a1[3].n128_u64[1];
  *(void *)(a5 + 32) = a1[4].n128_u64[0];
  *(void *)(a5 + 40) = a1[4].n128_u64[1];
  *(void *)(a5 + 48) = a1[5].n128_u64[0];
  *(void *)(a5 + 56) = a1[5].n128_u64[1];
  *(void *)(a5 + 64) = a1[6].n128_u64[0];
  __n128 result = a1[1];
  *(__n128 *)(a5 + 96) = result;
  return result;
}

void ds_Intermittent(char **a1, unsigned int a2, double *a3)
{
  uint64_t v6 = 0;
  *(void *)&v41[99] = *MEMORY[0x263EF8340];
  long long v7 = *a1;
  char v8 = 84;
  do
  {
    *a1 = v7 + 1;
    *long long v7 = v8;
    long long v7 = *a1;
    if (*a1 >= a1[3])
    {
      long long v7 = a1[2];
      *a1 = v7;
    }
    char v8 = aTsx[++v6];
  }
  while (v6 != 4);
  sprintf_5d(a1, *((unsigned __int16 *)a3 + 124));
  sprintf_sgR8(a1, a3[10]);
  sprintf_sgR8(a1, a3[11]);
  sprintf_sgR8(a1, a3[12]);
  sprintf_sgR8(a1, a3[13]);
  sprintf_sgR8(a1, a3[14]);
  sprintf_sgR8(a1, a3[15]);
  sprintf_sgR8(a1, a3[16]);
  sprintf_sgR8(a1, a3[18]);
  sprintf_sgR8(a1, a3[19]);
  sprintf_sgR8(a1, a3[20]);
  sprintf_sgR8(a1, a3[21]);
  sprintf_sgR8(a1, a3[22]);
  sprintf_sgR8(a1, a3[23]);
  sprintf_sgR8(a1, a3[24]);
  sprintf_sgR8(a1, a3[25]);
  sprintf_sgR8(a1, a3[26]);
  sprintf_sgR8(a1, a3[27]);
  sprintf_sgR8(a1, a3[28]);
  sprintf_sgR8(a1, a3[29]);
  sprintf_sgR8(a1, a3[30]);
  ldiv_t v9 = (*a1)++;
  *ldiv_t v9 = 10;
  int v10 = *a1;
  if (*a1 >= a1[3]) {
    int v10 = a1[2];
  }
  int v11 = "INT";
  if (a2 == 11) {
    int v11 = "Int";
  }
  char v12 = *v11;
  if (*v11)
  {
    int v13 = (unsigned __int8 *)(v11 + 1);
    do
    {
      *a1 = v10 + 1;
      *int v10 = v12;
      int v10 = *a1;
      if (*a1 >= a1[3])
      {
        int v10 = a1[2];
        *a1 = v10;
      }
      int v14 = *v13++;
      char v12 = v14;
    }
    while (v14);
  }
  BOOL v15 = &ch_GNSS_Exe_States[20 * a2 + 1];
  char v16 = 32;
  do
  {
    *a1 = v10 + 1;
    *int v10 = v16;
    int v10 = *a1;
    if (*a1 >= a1[3])
    {
      int v10 = a1[2];
      *a1 = v10;
    }
    int v17 = *v15++;
    char v16 = v17;
  }
  while (v17);
  unsigned int v18 = **(_DWORD **)(p_api + 8);
  *a1 = v10 + 1;
  *int v10 = 32;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf_10u(a1, v18);
  if (a2 <= 0xB)
  {
    if (((1 << a2) & 0xA48) != 0)
    {
      sprintf_5d(a1, *((_DWORD *)a3 + 237));
      long long v19 = *a1;
      int v20 = &ch_Oper_Mode[6 * *(unsigned int *)a3 + 1];
      char v21 = 32;
      do
      {
        *a1 = v19 + 1;
        *long long v19 = v21;
        long long v19 = *a1;
        if (*a1 >= a1[3])
        {
          long long v19 = a1[2];
          *a1 = v19;
        }
        int v22 = *v20++;
        char v21 = v22;
      }
      while (v22);
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 120]);
      BOOL v23 = (*a1)++;
      *BOOL v23 = 32;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf_ACC(a1, a3[*(unsigned int *)a3 + 122]);
      BOOL v24 = *a1;
      unsigned int v25 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 1) + 1];
      char v26 = 32;
      do
      {
        *a1 = v24 + 1;
        *BOOL v24 = v26;
        BOOL v24 = *a1;
        if (*a1 >= a1[3])
        {
          BOOL v24 = a1[2];
          *a1 = v24;
        }
        int v27 = *v25++;
        char v26 = v27;
      }
      while (v27);
      uint64_t v28 = &ch_Sens_Mode[4 * *((unsigned int *)a3 + 2) + 1];
      char v29 = 32;
      do
      {
        *a1 = v24 + 1;
        *BOOL v24 = v29;
        BOOL v24 = *a1;
        if (*a1 >= a1[3])
        {
          BOOL v24 = a1[2];
          *a1 = v24;
        }
        int v30 = *v28++;
        char v29 = v30;
      }
      while (v30);
      int v31 = &ch_Power_Mode[4 * *((unsigned int *)a3 + 4) + 1];
      char v32 = 32;
      do
      {
        *a1 = v24 + 1;
        *BOOL v24 = v32;
        BOOL v24 = *a1;
        if (*a1 >= a1[3])
        {
          BOOL v24 = a1[2];
          *a1 = v24;
        }
        int v33 = *v31++;
        char v32 = v33;
      }
      while (v33);
      sprintf_sp1d(a1, *((_DWORD *)a3 + 17));
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 72));
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 73));
      sprintf_sp1d(a1, *((_DWORD *)a3 + 6));
      sprintf_sp1d(a1, *((unsigned __int8 *)a3 + 28));
      sprintf_4d(a1, *((char *)a3 + 250));
      sprintf_4d(a1, *((unsigned __int8 *)a3 + 251));
    }
    else if (a2 == 2)
    {
      GN_GPS_Get_LibVersion(&v40);
      uint64_t v35 = *a1;
      for (unsigned int i = 5; i > 1; --i)
      {
        *a1 = v35 + 1;
        *uint64_t v35 = 32;
        uint64_t v35 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v35 = a1[2];
          *a1 = v35;
        }
      }
      char v37 = v40;
      if (v40)
      {
        double v38 = v41;
        do
        {
          *a1 = v35 + 1;
          *uint64_t v35 = v37;
          uint64_t v35 = *a1;
          if (*a1 >= a1[3])
          {
            uint64_t v35 = a1[2];
            *a1 = v35;
          }
          int v39 = *v38++;
          char v37 = v39;
        }
        while (v39);
      }
    }
  }
  int v34 = (*a1)++;
  *int v34 = 10;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
}

uint64_t Is_Legal(int a1)
{
  uint64_t result = 0;
  if (BYTE2(a1) && a1 & 0xFF00FFFF | (BYTE2(a1) << 16))
  {
    switch((char)a1)
    {
      case 1:
        BOOL v3 = BYTE2(a1) >= 0x21u;
        goto LABEL_11;
      case 2:
        BOOL v3 = BYTE2(a1) >= 0x19u;
        goto LABEL_11;
      case 3:
        BOOL v3 = BYTE2(a1) >= 0x25u;
        goto LABEL_11;
      case 4:
        BOOL v3 = BYTE2(a1) >= 0x26u;
        goto LABEL_11;
      case 5:
        BOOL v3 = BYTE2(a1) - 193 >= 0xA;
        goto LABEL_11;
      case 6:
        BOOL v3 = BYTE2(a1) - 120 >= 0x27;
LABEL_11:
        uint64_t result = !v3;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t PP_Acq_Ass_Update_AA(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8 = 0;
  *(void *)&v106[1324] = *MEMORY[0x263EF8340];
  do
  {
    ldiv_t v9 = &v105[v8];
    *((_DWORD *)v9 + 5) = 0;
    *((_DWORD *)v9 + 6) = 0;
    *(void *)ldiv_t v9 = 0;
    *((void *)v9 + 1) = 0;
    v8 += 28;
    *((_WORD *)v9 + 8) = 0;
  }
  while (v8 != 1344);
  uint64_t v10 = 0;
  *(void *)(a2 + 5008) = 0;
  *(_DWORD *)(a2 + 300) = -1;
  do
  {
    int v11 = (_OWORD *)(a2 + 304 + v10);
    *(_OWORD *)((char *)v11 + 29) = 0uLL;
    *int v11 = 0uLL;
    v11[1] = 0uLL;
    v10 += 48;
  }
  while (v10 != 3936);
  int v99 = 0;
  unsigned __int8 v98 = 0;
  *(void *)&long long v12 = -1;
  *((void *)&v12 + 1) = -1;
  *(_OWORD *)(a2 + 4240) = v12;
  *(_OWORD *)(a2 + 4256) = v12;
  *(_OWORD *)(a2 + 4272) = v12;
  *(_OWORD *)(a2 + 4288) = v12;
  *(_OWORD *)(a2 + 4304) = v12;
  *(_OWORD *)(a2 + 4320) = v12;
  *(_OWORD *)(a2 + 4336) = v12;
  *(_OWORD *)(a2 + 4352) = v12;
  *(_OWORD *)(a2 + 4368) = v12;
  *(_OWORD *)(a2 + 4384) = v12;
  *(_OWORD *)(a2 + 4400) = v12;
  *(_WORD *)(a2 + 4416) = -1;
  *(_WORD *)(a2 + 4594) = -25187;
  *(void *)&long long v12 = 0x9D9D9D9D9D9D9D9DLL;
  *((void *)&v12 + 1) = 0x9D9D9D9D9D9D9D9DLL;
  *(_OWORD *)(a2 + 4418) = v12;
  *(_OWORD *)(a2 + 4434) = v12;
  *(_OWORD *)(a2 + 4450) = v12;
  *(_OWORD *)(a2 + 4466) = v12;
  *(_OWORD *)(a2 + 4482) = v12;
  *(_OWORD *)(a2 + 4498) = v12;
  *(_OWORD *)(a2 + 4514) = v12;
  *(_OWORD *)(a2 + 4530) = v12;
  *(_OWORD *)(a2 + 4546) = v12;
  *(_OWORD *)(a2 + 4562) = v12;
  *(_OWORD *)(a2 + 4578) = v12;
  memset_pattern16((void *)(a2 + 4596), &unk_22BB0C9B0, 0x164uLL);
  *(void *)(a2 + 4952) = 0;
  int AGNSS_AcqAss = Core_Get_AGNSS_AcqAss(&v99, &v98, (uint64_t)v105);
  uint64_t result = 0;
  if (AGNSS_AcqAss)
  {
    double v16 = *(double *)(a1 + 16);
    uint64_t v17 = *(unsigned int *)(a2 + 284);
    if (v17 == 11) {
      unsigned int v18 = (double *)(a2 + 192);
    }
    else {
      unsigned int v18 = (double *)((char *)&TOW_stat_Sigma_m_Table + 8 * v17);
    }
    double v19 = *v18;
    if (*v18 > 300.0)
    {
      __int16 v96 = 0;
      double v100 = 0.0;
      double v95 = 0.0;
      if (Get_FSP_Time(*(_DWORD *)(a2 + 176), &v96, &v100, &v95, &v97))
      {
        double v20 = sqrt(v95) * 299792458.0;
        if (v20 < v19)
        {
          double v19 = v20;
          double v16 = v100;
        }
      }
    }
    *(double *)(a2 + 5008) = v19;
    *(double *)(a2 + 5000) = v16;
    if (v19 > 1500000000.0)
    {
      EvLog_v("PP_Acq_Ass_Update_AA:  Exit:  TOW_Sigma_m = %g,  Too high!", v19);
      return 0;
    }
    double v21 = -0.5;
    if (v16 * 1000.0 > 0.0) {
      double v21 = 0.5;
    }
    double v22 = v16 * 1000.0 + v21;
    if (v22 <= 2147483650.0)
    {
      if (v22 >= -2147483650.0) {
        int v23 = (int)v22;
      }
      else {
        int v23 = 0x80000000;
      }
    }
    else
    {
      int v23 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 300) = v23;
    unsigned int v24 = v98;
    if (v98)
    {
      unint64_t v25 = 0;
      int v26 = v23 - v99;
      if (v23 - v99 >= 0) {
        unsigned int v27 = v23 - v99;
      }
      else {
        unsigned int v27 = v99 - v23;
      }
      unsigned int v28 = v27 / 0x1F40;
      char v29 = v106;
      uint64_t v30 = a2 + 304;
      do
      {
        char v104 = 0;
        long long v102 = 0u;
        long long v103 = 0u;
        int v31 = *((_DWORD *)v29 - 5);
        if (v31)
        {
          int v32 = *(_DWORD *)(a2 + 176);
          LODWORD(v100) = v32 - v26;
          BYTE4(v100) = 1;
          int v101 = v31;
          LOWORD(v102) = 257;
          switch((char)v31)
          {
            case 2:
              __int16 v33 = 146;
              break;
            case 3:
              __int16 v33 = 174;
              break;
            case 4:
              if ((v31 & 0xFF0000u) <= 0xA0000) {
                __int16 v33 = 258;
              }
              else {
                __int16 v33 = 162;
              }
              break;
            case 5:
            case 6:
              __int16 v33 = 258;
              break;
            default:
              __int16 v33 = 154;
              break;
          }
          WORD2(v102) = v33;
          HIWORD(v102) = *((_WORD *)v29 - 2);
          *(void *)&long long v103 = *v29;
          *(int8x8_t *)((char *)&v102 + 6) = vext_s8(*(int8x8_t *)((char *)v29 - 12), *(int8x8_t *)((char *)v29 - 12), 2uLL);
          *(_DWORD *)uint64_t v30 = v32;
          Comp_Cur_Acq_Aid((uint64_t)&v100, v30);
          unsigned __int16 v34 = *(_WORD *)(v30 + 18) + v28;
          *(_WORD *)(v30 + 18) = v34;
          int v35 = v26 * v34 / 3079450 + *(unsigned __int16 *)(v30 + 26);
          if (v35 > 500) {
            LOWORD(v35) = 512;
          }
          *(_WORD *)(v30 + 26) = v35;
          int v36 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)(v30 + 8));
          uint64_t v37 = a2 + v36;
          *(unsigned char *)(v37 + 4418) = *((unsigned char *)v29 - 15);
          *(_WORD *)(a2 + 2 * v36 + 4596) = *((_WORD *)v29 - 7);
          *(unsigned char *)(v37 + 4240) = v25;
          unsigned int v24 = v98;
        }
        char v29 = (void *)((char *)v29 + 28);
        ++v25;
        v30 += 48;
      }
      while (v25 < v24);
    }
    uint64_t v38 = *a3;
    if (*a4 != v38)
    {
      EvCrt_nd("PP_Acq_Ass_Update_AA:  Error:  Database time-tag miss-match ", 2, v13, *a4, v38);
      return 1;
    }
    uint64_t v39 = 0;
    int v92 = 0;
    uint64_t v40 = 0;
    int v41 = 0;
    int v42 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v43 = (_WORD *)a4 + 1365;
    v44 = a4 + 8;
    int v45 = 0xFFFF;
    do
    {
      unsigned int v46 = *(_DWORD *)(v43 - 5);
      if (Is_Legal(v46)
        && *((unsigned __int8 *)v43 - 6) >= 0xAu
        && *v43
        && ((int v47 = &a3[v39], v46 != 4)
          ? (BOOL v48 = LOBYTE(a3[v39 + 19]) == v46)
          : (BOOL v48 = 0),
            v48
         && (*((unsigned __int8 *)v47 + 78) == BYTE2(v46)
          || v46 == 2 && HIBYTE(a3[v39 + 19]) == HIBYTE(v46))
         && (int)a3[v39 + 103] >= 10
         && (int v49 = *(char *)(a2 + (int)GNSS_Id_To_Num_Prn_Idx(v47[19]) + 4240), (v49 & 0x80000000) == 0)))
      {
        unsigned int v50 = v49;
        uint64_t v51 = (100 * (*(v43 - 1) & 0x300)) | *((unsigned __int8 *)v43 - 6);
        if (v51 <= v40 || *(unsigned __int16 *)(a2 + 48 * v50 + 328) >> 4 > 0x3FEu)
        {
          uint64_t v51 = v40;
        }
        else
        {
          int v52 = *v44 - *(_DWORD *)(a2 + 48 * v50 + 332);
          if (v52 >= 0) {
            unsigned int v53 = *v44 - *(_DWORD *)(a2 + 48 * v50 + 332);
          }
          else {
            unsigned int v53 = *(_DWORD *)(a2 + 48 * v50 + 332) - *v44;
          }
          if (v53 <= 0x62) {
            int v92 = v44[1] + 1534500 * v52 - *(_DWORD *)(a2 + 48 * v50 + 336);
          }
          int v41 = *(v43 - 1) & 0x300;
        }
        int v54 = (v44[1] - *(_DWORD *)(a2 + 48 * v50 + 336)) % 1023;
        if (v45 == 0xFFFF) {
          int v45 = (v44[1] - *(_DWORD *)(a2 + 48 * v50 + 336)) % 1023;
        }
        int v55 = v54 - v45;
        if (v54 - v45 >= 513)
        {
          if (v55 >= 1535) {
            int v55 = 1535;
          }
          unsigned int v56 = 1023 * ((v54 - v45 - v55 + 1022) / 0x3FFu);
          int v57 = v54 - 1023;
          int v54 = v54 - 1023 - v56;
          int v55 = v57 - v45 - v56;
        }
        if (v55 <= -513)
        {
          if (v55 <= -1535) {
            int v58 = -1535;
          }
          else {
            int v58 = v55;
          }
          BOOL v59 = __CFADD__(v55, 1535);
          unsigned int v60 = (v58 - v55 - (v55 < 0xFFFFFA01)) / 0x3FF;
          if (!v59) {
            ++v60;
          }
          int v54 = v54 - v60 + (v60 << 10) + 1023;
        }
        ++v42;
        uint64_t v61 = a2 + 48 * v50;
        LODWORD(v93) = v93 + ((int)v44[3] >> 8) - *(__int16 *)(v61 + 326);
        HIDWORD(v93) += v54;
        LODWORD(v94) = v94 + *(unsigned __int16 *)(v61 + 322);
        HIDWORD(v94) += *(unsigned __int16 *)(v61 + 330);
      }
      else
      {
        uint64_t v51 = v40;
      }
      v43 += 18;
      ++v39;
      v44 += 14;
      uint64_t v40 = v51;
    }
    while (v39 != 48);
    HIDWORD(v63) = v41;
    LODWORD(v63) = v41;
    int v62 = v63 >> 8;
    int v64 = 0;
    int v65 = v92;
    switch(v62)
    {
      case 0:
        break;
      case 1:
      case 2:
        int v64 = 0;
        int v62 = 1;
        break;
      case 3:
        int v62 = 1;
        int v64 = 1;
        break;
      default:
        EvCrt_Illegal_Default("PP_Acq_Ass_Update_AA", 0x1B2u);
        int v62 = 0;
        int v64 = 0;
        int v65 = v92;
        break;
    }
    if (*(double *)(a2 + 200) <= 900.0)
    {
      int v66 = 0;
    }
    else if (*(unsigned __int16 *)(a2 + 258) >= 0x13Bu)
    {
      int v66 = *(unsigned __int8 *)(p_NA + 8);
      if (*(unsigned char *)(p_NA + 8)) {
        int v66 = (sqrt(*(double *)(p_NA + 576)) * 1000000000.0) < 0x32;
      }
    }
    else
    {
      int v66 = 1;
    }
    if (v42 < 1)
    {
      if (*(unsigned __int16 *)(a2 + 256) >= 0x73u) {
        int v77 = 115;
      }
      else {
        int v77 = *(unsigned __int16 *)(a2 + 256);
      }
      if (v66) {
        unsigned int v76 = v77;
      }
      else {
        unsigned int v76 = *(unsigned __int16 *)(a2 + 256);
      }
      double v78 = *(double *)(a2 + 72) * 1575420000.0;
      double v79 = -0.5;
      if (v78 > 0.0) {
        double v79 = 0.5;
      }
      double v80 = v78 + v79;
      if (v80 <= 2147483650.0)
      {
        if (v80 >= -2147483650.0) {
          int v81 = (int)v80;
        }
        else {
          int v81 = 0x80000000;
        }
      }
      else
      {
        int v81 = 0x7FFFFFFF;
      }
      *(_DWORD *)(a2 + 4952) = -v81;
    }
    else
    {
      *(_DWORD *)(a2 + 4952) = (int)v93 / v42;
      int v67 = SHIDWORD(v93) / v42;
      if (SHIDWORD(v93) / v42 <= 1022) {
        unsigned int v68 = 1022;
      }
      else {
        unsigned int v68 = SHIDWORD(v93) / v42;
      }
      unsigned int v69 = 1023 * (((2149582851u * (unint64_t)v68) >> 32) >> 9);
      int v70 = v67 - v69;
      if ((int)(v67 - v69) <= -1023)
      {
        if (v70 <= -2045) {
          int v71 = -2045;
        }
        else {
          int v71 = v67 - v69;
        }
        unsigned int v72 = v71 + v69;
        BOOL v48 = v72 == v67;
        unsigned int v73 = (v72 - v67 - (v72 != v67)) / 0x3FF;
        if (!v48) {
          ++v73;
        }
        int v70 = v70 - v73 + (v73 << 10) + 1023;
      }
      if (v65 <= 0) {
        int v64 = 0;
      }
      if (v64 == 1)
      {
        if (v65 > v70) {
          int v74 = 512;
        }
        else {
          int v74 = -512;
        }
        v70 += 1023 * ((v74 + v65 - v70) / 1023);
      }
      *(_DWORD *)(a2 + 4956) = v70;
      if (v42 == 1) {
        int v75 = v66;
      }
      else {
        int v75 = 0;
      }
      if (v75 == 1) {
        unsigned int v76 = v94 + ((5 * *(unsigned __int16 *)(a2 + 260)) >> 2);
      }
      else {
        unsigned int v76 = (int)v94 / v42 + *(unsigned __int16 *)(a2 + 260) + *(unsigned __int16 *)(a2 + 260) / v42;
      }
      int v82 = SHIDWORD(v94) / v42;
      if (SHIDWORD(v94) / v42 <= (v19 * 0.0102370821)) {
        goto LABEL_140;
      }
    }
    double v83 = *(double *)(a2 + 64) * 1023000.0;
    double v84 = -0.5;
    if (v83 > 0.0) {
      double v84 = 0.5;
    }
    double v85 = v83 + v84;
    if (v85 <= 2147483650.0)
    {
      if (v85 >= -2147483650.0) {
        int v86 = (int)v85;
      }
      else {
        int v86 = 0x80000000;
      }
    }
    else
    {
      int v86 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 4956) = -v86;
    int v82 = (v19 * 0.0102370821);
LABEL_140:
    uint64_t v87 = 0;
    if (v19 >= 299792.458) {
      unsigned int v88 = v62;
    }
    else {
      unsigned int v88 = 2;
    }
    do
    {
      if (*(_DWORD *)(a2 + v87 + 312) && *(unsigned char *)(a2 + v87 + 308))
      {
        uint64_t v89 = a2 + v87;
        *(_WORD *)(a2 + v87 + 326) += *(_WORD *)(a2 + 4952);
        int v90 = v76 + *(unsigned __int16 *)(a2 + v87 + 322);
        if (v90 >= 0xFFFF) {
          LOWORD(v90) = -1;
        }
        *(_WORD *)(v89 + 322) = v90;
        Inc_CA_Chips(*(unsigned int *)(a2 + 4956), (int *)(v89 + 336), (int *)(v89 + 332));
        int v91 = v82 + (*(unsigned __int16 *)(v89 + 328) >> 4);
        if (v91 > 500) {
          LOWORD(v91) = 512;
        }
        *(_WORD *)(v89 + 330) = v91;
        if (v88 > *(unsigned __int8 *)(v89 + 318)) {
          *(unsigned char *)(v89 + 318) = v88;
        }
      }
      v87 += 48;
    }
    while (v87 != 3936);
    return 1;
  }
  return result;
}

uint64_t PP_Acq_Ass_Replace_AA(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a1 + 300) & 0x80000000) != 0) {
    return 0;
  }
  *(_DWORD *)&__src[352] = -1;
  uint64_t v38 = (unsigned char *)(a3 + 6132);
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)&__src[320] = v7;
  *(_OWORD *)&__src[336] = v7;
  *(_OWORD *)&__src[288] = v7;
  *(_OWORD *)&__src[304] = v7;
  *(_OWORD *)&__src[256] = v7;
  *(_OWORD *)&__src[272] = v7;
  *(_OWORD *)&__src[224] = v7;
  *(_OWORD *)&__src[240] = v7;
  *(_OWORD *)&__src[192] = v7;
  *(_OWORD *)&__src[208] = v7;
  *(_OWORD *)&__src[160] = v7;
  *(_OWORD *)&__src[176] = v7;
  *(_OWORD *)&__src[128] = v7;
  *(_OWORD *)&__src[144] = v7;
  *(_OWORD *)&__src[96] = v7;
  *(_OWORD *)&__src[112] = v7;
  *(_OWORD *)&__src[64] = v7;
  *(_OWORD *)&__src[80] = v7;
  *(_OWORD *)&__src[32] = v7;
  *(_OWORD *)&__src[48] = v7;
  *(_OWORD *)__src = v7;
  *(_OWORD *)&__src[16] = v7;
  LODWORD(v43[22]) = -1;
  v43[20] = v7;
  v43[21] = v7;
  v43[18] = v7;
  v43[19] = v7;
  v43[16] = v7;
  v43[17] = v7;
  v43[14] = v7;
  v43[15] = v7;
  v43[12] = v7;
  v43[13] = v7;
  v43[10] = v7;
  v43[11] = v7;
  v43[8] = v7;
  v43[9] = v7;
  v43[6] = v7;
  v43[7] = v7;
  v43[4] = v7;
  v43[5] = v7;
  v43[2] = v7;
  v43[3] = v7;
  v43[0] = v7;
  v43[1] = v7;
  memset_pattern16(__b, &unk_22BB0C9A0, 0x2C8uLL);
  uint64_t v9 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = a1 + v9;
    if (*(unsigned char *)(a1 + v9 + 314) && *(unsigned char *)(v12 + 308))
    {
      int v13 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)(v12 + 312));
      __b[v13] = 1;
      *(_WORD *)&__src[2 * v11] = v13 + 1;
      uint64_t v11 = (v11 + 1);
      switch(*(unsigned char *)(v12 + 312))
      {
        case 0:
        case 6:
          break;
        case 1:
          ++v10;
          break;
        case 2:
          ++HIDWORD(v41);
          break;
        case 3:
          LODWORD(v41) = v41 + 1;
          break;
        case 4:
          ++HIDWORD(v40);
          break;
        case 5:
          LODWORD(v40) = v40 + 1;
          break;
        default:
          EvCrt_Illegal_Default("PP_Acq_Ass_Replace_AA", 0x2A5u);
          break;
      }
    }
    v9 += 48;
  }
  while (v9 != 3936);
  if (*(_DWORD *)(a3 + 48) || v11 > 7)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    do
    {
      switch(Get_Constell_Prn(v15))
      {
        case 0u:
        case 6u:
          break;
        case 1u:
          if (v10 && a2[31]) {
            goto LABEL_35;
          }
          break;
        case 2u:
          if (HIDWORD(v41) && a2[32]) {
            goto LABEL_35;
          }
          break;
        case 3u:
          if (v41 && a2[36]) {
            goto LABEL_35;
          }
          break;
        case 4u:
          if (HIDWORD(v40) && a2[35]) {
            goto LABEL_35;
          }
          break;
        case 5u:
          if (v40 && a2[33])
          {
LABEL_35:
            if (__b[v15] == 2)
            {
              __b[v15] = 0;
              *((_WORD *)v43 + v16++) = v15 + 1;
            }
          }
          break;
        default:
          EvCrt_Illegal_Default("PP_Acq_Ass_Replace_AA", 0x2C7u);
          break;
      }
      ++v15;
    }
    while (v15 != 178);
  }
  EvLog_nd("PP_Acq_Ass_Replace_AA: ", 4, v8, *(unsigned int *)(a1 + 300), v11, *(unsigned int *)(a1 + 4952), *(unsigned int *)(a1 + 4956));
  if (!v11) {
    return 0;
  }
  memcpy((void *)(a3 + 60), (const void *)(a1 + 304), 0xF60uLL);
  for (uint64_t i = 0; i != 3936; i += 48)
  {
    uint64_t v18 = a3 + i;
    if (*(unsigned char *)(a3 + i + 68) == 2)
    {
      if (*(unsigned char *)(v18 + 70)) {
        *(unsigned char *)(v18 + 70) = *(_DWORD *)(*(void *)(a3 + 6216)
      }
                                         + 4 * (*(unsigned __int8 *)(v18 + 70) - 1));
    }
  }
  long long v19 = *(_OWORD *)(a1 + 4240);
  long long v20 = *(_OWORD *)(a1 + 4256);
  long long v21 = *(_OWORD *)(a1 + 4288);
  *(_OWORD *)(a3 + 4028) = *(_OWORD *)(a1 + 4272);
  *(_OWORD *)(a3 + 4044) = v21;
  *(_OWORD *)(a3 + 3996) = v19;
  *(_OWORD *)(a3 + 4012) = v20;
  long long v22 = *(_OWORD *)(a1 + 4304);
  long long v23 = *(_OWORD *)(a1 + 4320);
  long long v24 = *(_OWORD *)(a1 + 4352);
  *(_OWORD *)(a3 + 4092) = *(_OWORD *)(a1 + 4336);
  *(_OWORD *)(a3 + 4108) = v24;
  *(_OWORD *)(a3 + 4060) = v22;
  *(_OWORD *)(a3 + 4076) = v23;
  long long v25 = *(_OWORD *)(a1 + 4368);
  long long v26 = *(_OWORD *)(a1 + 4384);
  long long v27 = *(_OWORD *)(a1 + 4400);
  *(_WORD *)(a3 + 4172) = *(_WORD *)(a1 + 4416);
  *(_OWORD *)(a3 + 4140) = v26;
  *(_OWORD *)(a3 + 4156) = v27;
  *(_OWORD *)(a3 + 4124) = v25;
  memcpy((void *)(a3 + 5420), __b, 0x2C8uLL);
  memcpy((void *)(a3 + 4174), __src, 0x164uLL);
  memcpy((void *)(a3 + 4530), v43, 0x164uLL);
  *uint64_t v38 = v11;
  v38[1] = v16;
  v38[2] = -78 - (v16 + v11);
  v38[3] = 0;
  *(void *)(a3 + 6360) = *(void *)(a1 + 4952);
  long long v28 = *(_OWORD *)(a1 + 4466);
  long long v30 = *(_OWORD *)(a1 + 4418);
  long long v29 = *(_OWORD *)(a1 + 4434);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 4450);
  *(_OWORD *)(a4 + 48) = v28;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v29;
  long long v31 = *(_OWORD *)(a1 + 4530);
  long long v33 = *(_OWORD *)(a1 + 4482);
  long long v32 = *(_OWORD *)(a1 + 4498);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 4514);
  *(_OWORD *)(a4 + 112) = v31;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v32;
  long long v35 = *(_OWORD *)(a1 + 4562);
  long long v34 = *(_OWORD *)(a1 + 4578);
  long long v36 = *(_OWORD *)(a1 + 4546);
  *(_WORD *)(a4 + 176) = *(_WORD *)(a1 + 4594);
  *(_OWORD *)(a4 + 144) = v35;
  *(_OWORD *)(a4 + 160) = v34;
  *(_OWORD *)(a4 + 128) = v36;
  memcpy((void *)(a4 + 178), (const void *)(a1 + 4596), 0x164uLL);
  *(unsigned char *)(a4 + 534) = v11;
  uint64_t result = 1;
  *(unsigned char *)(a4 + 535) = 1;
  return result;
}

uint64_t PP_Acq_Ass_Merge_AA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a1 + 300);
  if (v8 < 0) {
    return 0;
  }
  uint64_t v9 = a3;
  uint64_t v101 = 0;
  uint64_t v12 = (unsigned __int8 *)(a2 + 6132);
  memset(v100, 0, sizeof(v100));
  if (!*(unsigned char *)(a2 + 6132)) {
    goto LABEL_28;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  a3 = 4294200046;
  a4 = 4293432796;
  a5 = 767250;
  a7 = 4198405;
  a8 = 4294966785;
  uint64_t v17 = 2130706432;
  do
  {
    if ((*(char *)(a2 + 3996 + v13) & 0x80000000) == 0)
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 3996 + v13);
      if (*(_DWORD *)(a2 + 48 * v18 + 68))
      {
        if (*(unsigned char *)(a2 + 48 * v18 + 64))
        {
          *((_DWORD *)v100 + v18) = 1;
          if ((*(char *)(a1 + 4240 + v13) & 0x80000000) == 0
            && *(_DWORD *)(a1 + 48 * *(unsigned __int8 *)(a1 + 4240 + v13) + 312)
            && *(unsigned char *)(a1 + 48 * *(unsigned __int8 *)(a1 + 4240 + v13) + 308))
          {
            uint64_t v19 = a1 + 48 * *(unsigned __int8 *)(a1 + 4240 + v13);
            long long v20 = (int32x2_t *)(a2 + 48 * v18);
            int32x2_t v21 = vsub_s32(*(int32x2_t *)(v19 + 332), v20[11]);
            LODWORD(v22) = v21.i32[1] + 1534500 * v21.i32[0];
            if ((int)v22 < -767250) {
              LODWORD(v22) = v22 + 1534500;
            }
            if ((int)v22 <= 767250) {
              uint64_t v22 = v22;
            }
            else {
              uint64_t v22 = (v22 - 1534500);
            }
            uint64_t v23 = v22;
            if (v17 != 2130706432)
            {
              if ((int)v22 - (int)v17 >= 511) {
                int v24 = 511;
              }
              else {
                int v24 = v22 - v17;
              }
              unsigned int v25 = 1023 * (((int)v22 - (int)v17 - v24 + 1022) / 0x3FFu);
              int v26 = v22 - v17 - v25;
              if (v26 <= -511) {
                int v26 = -511;
              }
              int v27 = v25 + v17 + v26;
              unsigned int v28 = (v27 - v22 - (v27 != v22)) / 0x3FF;
              if (v27 != v22) {
                ++v28;
              }
              LODWORD(v22) = v22 - v25 - v28 + (v28 << 10);
              uint64_t v23 = v17;
            }
            ++v16;
            a6 = *(__int16 *)(v19 + 326);
            int v14 = v14 + a6 - v20[10].i16[1];
            v15 += v22;
            uint64_t v17 = v23;
          }
        }
      }
    }
    ++v13;
  }
  while (v13 != 178);
  if (v16 >= 1)
  {
    uint64_t v97 = (v15 / v16);
    uint64_t v29 = (v14 / v16);
  }
  else
  {
LABEL_28:
    double v30 = (*(double *)(a1 + 64) - (*(double *)(a1 + 96) - (double)v8 * 0.001)) * 1023000.0;
    double v31 = -0.5;
    if (v30 <= 0.0) {
      double v32 = -0.5;
    }
    else {
      double v32 = 0.5;
    }
    double v33 = v30 + v32;
    if (v33 <= 2147483650.0)
    {
      if (v33 >= -2147483650.0) {
        int v34 = (int)v33;
      }
      else {
        int v34 = 0x80000000;
      }
    }
    else
    {
      int v34 = 0x7FFFFFFF;
    }
    uint64_t v35 = (v34 + *(_DWORD *)(a1 + 4956));
    double v36 = *(double *)(a1 + 72) * 1575420000.0;
    if (v36 > 0.0) {
      double v31 = 0.5;
    }
    double v37 = v36 + v31;
    if (v37 <= 2147483650.0)
    {
      if (v37 >= -2147483650.0) {
        int v38 = (int)v37;
      }
      else {
        int v38 = 0x80000000;
      }
    }
    else
    {
      int v38 = 0x7FFFFFFF;
    }
    uint64_t v97 = v35;
    uint64_t v29 = (v38 + *(_DWORD *)(a1 + 4952));
  }
  uint64_t v96 = v29;
  uint64_t v39 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v40 = 0;
  do
  {
    uint64_t v41 = a1 + 48 * v39;
    if (!*(unsigned char *)(v41 + 314) || !*(unsigned char *)(a1 + 48 * v39 + 308)) {
      goto LABEL_68;
    }
    int v42 = (_OWORD *)(v41 + 304);
    int v43 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)(v41 + 312));
    uint64_t v44 = a2 + v43;
    if (*(char *)(v44 + 3996) < 0
      || (uint64_t v45 = *(unsigned __int8 *)(v44 + 3996), v46 = a2 + 48 * v45, !*(unsigned char *)(v46 + 70))
      || !*(unsigned char *)(a2 + 48 * v45 + 64))
    {
      uint64_t v45 = 0;
      int v58 = (unsigned char *)(v44 + 3996);
      BOOL v59 = (unsigned __int8 *)(a2 + 70);
      while (*(_DWORD *)(v59 - 2) || *(v59 - 6))
      {
        ++v45;
        v59 += 48;
        if (v45 == 82) {
          goto LABEL_66;
        }
      }
      long long v61 = v42[1];
      long long v60 = v42[2];
      *(_OWORD *)(v59 - 10) = *v42;
      *(_OWORD *)(v59 + 22) = v60;
      *(_OWORD *)(v59 + 6) = v61;
      if (*(v59 - 2) == 2) {
        *BOOL v59 = *(_DWORD *)(*(void *)(a2 + 6216) + 4 * *v59 - 4);
      }
      uint64_t v99 = (v99 + 1);
      *int v58 = v45;
      int v57 = 3;
      goto LABEL_65;
    }
    uint64_t v47 = a2 + 48 * v45;
    unsigned int v50 = *(unsigned __int16 *)(v47 + 86);
    int v49 = (_WORD *)(v47 + 86);
    unsigned int v48 = v50;
    if (!*((unsigned char *)v49 - 11)) {
      goto LABEL_142;
    }
    if (v48 < 0x101)
    {
      if (!*(unsigned char *)(a2 + 48 * v45 + 72))
      {
        unsigned int v64 = *(unsigned __int16 *)(a1 + 48 * v39 + 330);
        if (v48 > v64) {
          LOWORD(v64) = v48;
        }
        *int v49 = v64;
      }
      goto LABEL_66;
    }
    if (!*(unsigned char *)(a2 + 48 * v45 + 72))
    {
LABEL_142:
      uint64_t v51 = a1 + 48 * v39;
      int v52 = (*(unsigned __int16 *)(v51 + 330) >> 4) + 1;
      if (v52 + v52 * (*(unsigned __int16 *)(v51 + 322) >> 5) < (v48 >> 4)
                                                               + 1
                                                               + ((v48 >> 4) + 1)
                                                               * (*(unsigned __int16 *)(a2
                                                                                      + 48 * v45
                                                                                      + 78) >> 5))
      {
        long long v53 = *v42;
        long long v54 = v42[2];
        *(_OWORD *)(v46 + 76) = v42[1];
        *(_OWORD *)(v46 + 92) = v54;
        *(_OWORD *)(v46 + 60) = v53;
        int v56 = *(unsigned __int8 *)(v46 + 68);
        uint64_t v55 = v46 + 68;
        if (v56 == 2) {
          *(unsigned char *)(v55 + 2) = *(_DWORD *)(*(void *)(a2 + 6216) + 4 * *(unsigned __int8 *)(v55 + 2) - 4);
        }
        uint64_t v98 = (v98 + 1);
        int v57 = 2;
LABEL_65:
        *((_DWORD *)v100 + v45) = v57;
      }
    }
LABEL_66:
    uint64_t v40 = (v40 + 1);
    uint64_t v62 = a2 + 4 * v43;
    if (*(_DWORD *)(v62 + 5420) != 1)
    {
      *(_DWORD *)(v62 + 5420) = 1;
      uint64_t v63 = *v12;
      *(_WORD *)(a2 + 2 * v63 + 4174) = v43 + 1;
      *uint64_t v12 = v63 + 1;
    }
LABEL_68:
    ++v39;
  }
  while (v39 != 82);
  if ((int)v98 > 0 || (int)v99 >= 1)
  {
    uint64_t v65 = 0;
    uint64_t v66 = a2 + 64;
    unsigned __int16 v67 = 512;
    unsigned __int16 v68 = 512;
    do
    {
      if (*(_DWORD *)(v66 + 4) && *(unsigned char *)v66)
      {
        unsigned int v69 = *(unsigned __int16 *)(v66 + 22);
        unsigned __int16 v70 = v67;
        if (v67 >= v69) {
          unsigned __int16 v70 = *(_WORD *)(v66 + 22);
        }
        if (v68 < v69) {
          LOWORD(v69) = v68;
        }
        if ((*(_DWORD *)((unsigned char *)v100 + v65) & 0xFFFFFFFE) == 2) {
          unsigned __int16 v68 = v69;
        }
        else {
          unsigned __int16 v67 = v70;
        }
      }
      v65 += 4;
      v66 += 48;
    }
    while (v65 != 328);
    if (v68 != 512 || v67 != 512)
    {
      if (v68 >= v67)
      {
        uint64_t v73 = 0;
        int v74 = v100;
        do
        {
          if (*(_DWORD *)(a2 + v73 + 68) && *(unsigned char *)(a2 + v73 + 64) && (*v74 & 0xFFFFFFFE) == 2)
          {
            *(_WORD *)(a2 + v73 + 82) -= v96;
            Inc_CA_Chips(-(int)v97, (int *)(a2 + v73 + 92), (int *)(a2 + v73 + 88));
          }
          v73 += 48;
          ++v74;
        }
        while (v73 != 3936);
      }
      else
      {
        uint64_t v71 = 0;
        unsigned int v72 = v100;
        do
        {
          if (*(_DWORD *)(a2 + v71 + 68) && *(unsigned char *)(a2 + v71 + 64) && (*v72 & 0xFFFFFFFE) != 2)
          {
            *(_WORD *)(a2 + v71 + 82) += v96;
            Inc_CA_Chips(v97, (int *)(a2 + v71 + 92), (int *)(a2 + v71 + 88));
          }
          v71 += 48;
          ++v72;
        }
        while (v71 != 3936);
      }
    }
  }
  if (*(_DWORD *)(a2 + 48)) {
    BOOL v75 = 1;
  }
  else {
    BOOL v75 = (int)v40 <= 7;
  }
  if (v75 || v12[1] < 7u)
  {
    uint64_t v80 = 0;
    int v79 = 0;
    do
    {
      int v81 = *(__int16 *)(a2 + 4530 + v80);
      if (v81 >= 1 && !*(_DWORD *)(a2 + 4 * (*(unsigned __int16 *)(a2 + 4530 + v80) - 1) + 5420)) {
        *(_WORD *)(a2 + 2 * v79++ + 4530) = v81;
      }
      v80 += 2;
    }
    while (v80 != 356);
    v12[1] = v79;
    if (v79 <= 0xB1u) {
      memset((void *)(a2 + 4530 + 2 * v79), 255, 2 * (177 - v79) + 2);
    }
  }
  else
  {
    uint64_t v76 = 0;
    *(void *)&long long v77 = -1;
    *((void *)&v77 + 1) = -1;
    *(_OWORD *)(a2 + 4530) = v77;
    *(_OWORD *)(a2 + 4546) = v77;
    *(_OWORD *)(a2 + 4562) = v77;
    *(_OWORD *)(a2 + 4578) = v77;
    *(_OWORD *)(a2 + 4594) = v77;
    *(_OWORD *)(a2 + 4610) = v77;
    *(_OWORD *)(a2 + 4626) = v77;
    *(_OWORD *)(a2 + 4642) = v77;
    *(_OWORD *)(a2 + 4658) = v77;
    *(_OWORD *)(a2 + 4674) = v77;
    *(_OWORD *)(a2 + 4690) = v77;
    *(_OWORD *)(a2 + 4706) = v77;
    *(_OWORD *)(a2 + 4722) = v77;
    *(_OWORD *)(a2 + 4738) = v77;
    *(_OWORD *)(a2 + 4754) = v77;
    *(_OWORD *)(a2 + 4770) = v77;
    *(_OWORD *)(a2 + 4786) = v77;
    *(_OWORD *)(a2 + 4802) = v77;
    *(_OWORD *)(a2 + 4818) = v77;
    *(_OWORD *)(a2 + 4834) = v77;
    *(_OWORD *)(a2 + 4850) = v77;
    *(_OWORD *)(a2 + 4866) = v77;
    *(_DWORD *)(a2 + 4882) = -1;
    uint64_t v78 = a2 + 5420;
    v12[1] = 0;
    do
    {
      if (!*(_DWORD *)(v78 + v76)) {
        *(_DWORD *)(v78 + v76) = 2;
      }
      v76 += 4;
    }
    while (v76 != 712);
    LOBYTE(v79) = 0;
    *(unsigned char *)(v9 + 535) = 1;
  }
  uint64_t v82 = 0;
  v12[2] = -78 - v12[3] - (v79 + *v12);
  *(void *)(a2 + 6360) = *(void *)(a1 + 4952);
  uint64_t v83 = a1 + 4418;
  do
  {
    int v84 = *(char *)(v83 + v82);
    if ((v84 > 0 || *(__int16 *)(v83 + 2 * v82 + 178) >= 1) && *(char *)(v9 + v82) < 0)
    {
      uint64_t v85 = v9 + 2 * v82;
      if (*(__int16 *)(v85 + 178) < 0)
      {
        *(unsigned char *)(v9 + v82) = v84;
        *(_WORD *)(v85 + 178) = *(_WORD *)(v83 + 2 * v82 + 178);
      }
    }
    ++v82;
  }
  while (v82 != 178);
  EvLog_nd("PP_Acq_Ass_Merge_AA: ", 10, a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 300), v40, v98, v99, *v12, v12[1], *(unsigned int *)(a1 + 4952), *(unsigned int *)(a1 + 4956), v96, v97);
  if (!*v12) {
    return 0;
  }
  if (g_Enable_Event_Log)
  {
    for (uint64_t i = 0; i != 178; ++i)
    {
      if ((*(char *)(a2 + 3996 + i) & 0x80000000) == 0 && (*(char *)(a1 + 4240 + i) & 0x80000000) == 0)
      {
        uint64_t v87 = a2 + 48 * *(unsigned __int8 *)(a2 + 3996 + i);
        unsigned int v90 = *(unsigned __int8 *)(v87 + 68);
        uint64_t v89 = v87 + 68;
        uint64_t v88 = v90;
        int v91 = *(char *)(v89 + 2);
        if (v90 == 2 || (int v91 = *(unsigned __int8 *)(v89 + 2), v88 <= 6)) {
          char v92 = PP_Acq_Ass_Merge_AA(s_Pre_Positioning_WD *,s_DB_Acq_Aid_Table *,s_DB_SV_AzEl *)::ch_CONSTELL_ID[v88];
        }
        else {
          char v92 = 88;
        }
        uint64_t v93 = a2 + 48 * *(unsigned __int8 *)(a2 + 3996 + i);
        uint64_t v94 = a1 + 48 * *(unsigned __int8 *)(a1 + 4240 + i);
        EvLog_v("PP_Acq_Ass_Merge_AA:  %c %3d %2d %3d  %c   D %3d %3d %4d   C %3d %3d %5d   S %d %d  GR %d %d", v92, v91, *(char *)(v89 + 3), *(unsigned __int8 *)(a1 + 2 + 48 * *(unsigned __int8 *)(a1 + 4240 + i) + 312), PP_Acq_Ass_Merge_AA(s_Pre_Positioning_WD *,s_DB_Acq_Aid_Table *,s_DB_SV_AzEl *)::ch_MERGE_STATE[*((unsigned int *)v100 + *(unsigned __int8 *)(a2 + 3996 + i))], *(unsigned __int16 *)(v93 + 78), *(unsigned __int16 *)(v94 + 322), *(__int16 *)(v93 + 82) - *(__int16 *)(v94 + 326), *(unsigned __int16 *)(v93 + 86), *(unsigned __int16 *)(v94 + 330), *(_DWORD *)(v93 + 92) - *(_DWORD *)(v94 + 336), *(unsigned __int8 *)(v93 + 74), *(unsigned __int8 *)(v94 + 318), *(unsigned __int8 *)(v93 + 75), *(unsigned __int8 *)(v94 + 319));
      }
    }
  }
  return 1;
}

uint64_t Gnm07_06EncodeNSend(unsigned __int8 *a1, uint64_t a2, const char *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned __int16 __s = 0;
  int v18 = 0;
  char v19 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  int PlcGnssHw = Gnm03_64GetPlcGnssHw();
  plc00_05EncodeMsg((unsigned __int8 *)2, a1, a2, (uint64_t)v17, 2048, &__s, (uint64_t)&v18, PlcGnssHw);
  if (v18)
  {
    if (IsLoggingAllowed)
    {
      if (!plc00_15GetExtErrAsString(&v18, &__s_2, 0x104uLL)
        || !LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        return 0;
      }
      bzero(__str, 0x410uLL);
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDE,%u,Err,%s\n", v7, "GNM", 87);
    }
    else
    {
      int v12 = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      uint64_t result = 0;
      if (!v12) {
        return result;
      }
      bzero(__str, 0x410uLL);
      unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDE,%u\n", v13, "GNM");
    }
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:zx%c%c,%u =>GNCorHW %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm07_06EncodeNSend", *a1, a1[1], a1[2], a3);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
  }
  return Gnm07_01Send(*a1, a1[2], (uint64_t)v17, (unsigned __int8 *)__s);
}

uint64_t Gnm07_01Send(int a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  HIDWORD(v5) = a1;
  LODWORD(v5) = a1 - 66;
  switch((v5 >> 1))
  {
    case 0u:
    case 1u:
    case 9u:
    case 0xAu:
      goto LABEL_2;
    case 0xBu:
      if (a2 != 77) {
        goto LABEL_7;
      }
LABEL_2:
      if (!off_26AE6D248) {
        goto LABEL_7;
      }
      off_26AE6D248(a4, a3);
      uint64_t result = 1;
      break;
    default:
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      uint64_t result = 0;
      if (!IsLoggingAllowed) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm07_01Send", 777, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
LABEL_7:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t Gnm05_22PopulateGnssShapeType(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 30);
  if ((a2 & 2) != 0 || a2 == 0) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v3 == 255) {
    unsigned int v5 = 1;
  }
  int v6 = *(_DWORD *)(a1 + 36);
  if ((a2 & 8) != 0 || a2 == 0) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v5;
  }
  if (v6) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = v5;
  }
  if (v3 != 255
    && *(unsigned __int8 *)(a1 + 31) != 255
    && *(unsigned __int8 *)(a1 + 41) != 255
    && *(unsigned __int8 *)(a1 + 32) != 255)
  {
    if ((a2 & 4) != 0 || a2 == 0) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = result;
    }
    int v12 = *(unsigned __int8 *)(a1 + 40);
    if ((a2 & 0x10) != 0 || a2 == 0) {
      int v14 = 16;
    }
    else {
      int v14 = v11;
    }
    if (v12 == 255) {
      unsigned int v15 = v11;
    }
    else {
      unsigned int v15 = v14;
    }
    if (v6) {
      return v15;
    }
    else {
      return v11;
    }
  }
  return result;
}

uint64_t Gnm05_23PopulateGnssVelocityType(uint64_t a1, unsigned __int8 a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 10) == -1) {
    goto LABEL_7;
  }
  if ((a2 & 8) != 0 && v2 != 0xFFFF) {
    return 8;
  }
  if ((a2 & 2) != 0) {
    return 2;
  }
LABEL_7:
  if ((a2 & 4) == 0 || v2 == 0xFFFF) {
    return a2 & (*(__int16 *)(a1 + 2) != -1);
  }
  return 4;
}

uint64_t Gnm05_25PopulateGnssAidReq(unsigned char *a1, void *a2, int a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AllwdGnss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm05_25PopulateGnssAidReq", a3);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  unsigned int v8 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 407, 1, 8uLL);
  a2[1] = v8;
  if (!v8) {
    return 0;
  }
  if (a1[16] && !a1[19]) {
    *unsigned int v8 = 1;
  }
  if (a1[17]) {
    v8[1] = 1;
  }
  if (a1[18] && !a1[21]) {
    v8[2] = 1;
  }
  BOOL v9 = *v8 || v8[1] || v8[2];
  int v10 = 0;
  if ((a3 & 1) != 0 && a1[24])
  {
    unsigned int v11 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 442, 1, 0xD8uLL);
    a2[2] = v11;
    if (!v11)
    {
      int v42 = (void *)a2[1];
      if (v42) {
        free(v42);
      }
      uint64_t v22 = 0;
      a2[1] = 0;
      return v22;
    }
    int v10 = Gnm05_24PopulateGnssAssistData((uint64_t)v11, 1, (uint64_t)(a1 + 24), 8u, 0x18u, 8u);
    unsigned int v8 = (unsigned char *)a2[1];
    v8[3] = 1;
  }
  int v12 = 0;
  if ((a3 & 0x20) != 0 && a1[256])
  {
    unint64_t v13 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 458, 1, 0xD8uLL);
    a2[3] = v13;
    if (!v13)
    {
      int v43 = (void *)a2[1];
      if (v43) {
        free(v43);
      }
      a2[1] = 0;
      uint64_t v44 = (void *)a2[2];
      if (v44) {
        free(v44);
      }
      uint64_t v22 = 0;
      a2[2] = 0;
      return v22;
    }
    int v12 = Gnm05_24PopulateGnssAssistData((uint64_t)v13, 32, (uint64_t)(a1 + 256), 6u, 0x14u, 6u);
    unsigned int v8 = (unsigned char *)a2[1];
    v8[4] = 1;
  }
  int v14 = 0;
  if ((a3 & 0x40) != 0 && a1[952])
  {
    unsigned int v15 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 477, 1, 0xD8uLL);
    a2[6] = v15;
    if (!v15)
    {
      uint64_t v45 = (void *)a2[1];
      if (v45) {
        free(v45);
      }
      a2[1] = 0;
      uint64_t v46 = (void *)a2[2];
      if (v46) {
        free(v46);
      }
      a2[2] = 0;
      uint64_t v47 = (void *)a2[3];
      if (v47) {
        free(v47);
      }
      uint64_t v22 = 0;
      a2[3] = 0;
      return v22;
    }
    int v14 = Gnm05_24PopulateGnssAssistData((uint64_t)v15, 64, (uint64_t)(a1 + 952), 6u, 0x14u, 6u);
    unsigned int v8 = (unsigned char *)a2[1];
    v8[7] = 1;
  }
  int v16 = 0;
  if ((a3 & 0x10) != 0 && a1[488])
  {
    uint64_t v17 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 496, 1, 0xD8uLL);
    a2[4] = v17;
    if (!v17)
    {
      unsigned int v48 = (void *)a2[1];
      if (v48) {
        free(v48);
      }
      a2[1] = 0;
      int v49 = (void *)a2[2];
      if (v49) {
        free(v49);
      }
      a2[2] = 0;
      unsigned int v50 = (void *)a2[3];
      if (v50) {
        free(v50);
      }
      a2[3] = 0;
      uint64_t v51 = (void *)a2[6];
      if (v51) {
        free(v51);
      }
      uint64_t v22 = 0;
      a2[6] = 0;
      return v22;
    }
    int v16 = Gnm05_24PopulateGnssAssistData((uint64_t)v17, 16, (uint64_t)(a1 + 488), 4u, 4u, 4u);
    unsigned int v8 = (unsigned char *)a2[1];
    v8[5] = 1;
  }
  int v18 = 0;
  if ((a3 & 4) == 0 || !a1[720])
  {
LABEL_36:
    if (v10) {
      int v20 = 1;
    }
    else {
      int v20 = v9;
    }
    if (v12) {
      int v20 = 1;
    }
    if (v16) {
      int v20 = 1;
    }
    unsigned int v21 = v20 | v18;
    if (v14) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22 == 1 && a1[18] && !v8[2]) {
      v8[2] = 1;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v23 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      long long v24 = (unsigned __int8 *)a2[1];
      int v25 = *v24;
      int v26 = v24[1];
      int v27 = v24[2];
      int v28 = v24[3];
      int v29 = v24[4];
      int v30 = v24[5];
      int v31 = v24[6];
      BOOL v32 = v24[7] == 0;
      uint64_t v33 = 89;
      if (v32) {
        uint64_t v34 = 78;
      }
      else {
        uint64_t v34 = 89;
      }
      if (v31) {
        uint64_t v35 = 89;
      }
      else {
        uint64_t v35 = 78;
      }
      if (v30) {
        uint64_t v36 = 89;
      }
      else {
        uint64_t v36 = 78;
      }
      if (v29) {
        uint64_t v37 = 89;
      }
      else {
        uint64_t v37 = 78;
      }
      if (v28) {
        uint64_t v38 = 89;
      }
      else {
        uint64_t v38 = 78;
      }
      if (v27) {
        uint64_t v39 = 89;
      }
      else {
        uint64_t v39 = 78;
      }
      if (v26) {
        uint64_t v40 = 89;
      }
      else {
        uint64_t v40 = 78;
      }
      if (!v25) {
        uint64_t v33 = 78;
      }
      unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RefTime,%c,RefPos,%c,Iono,%c,Agps,%c,Aglon,%c,Aqzss,%c,Asbas,%c,Abds,%c\n", (unint64_t)v23, "GNM", 73, "Gnm05_25PopulateGnssAidReq", v33, v40, v39, v38, v37, v36, v35, v34);
      LbsOsaTrace_WriteLog(0xBu, __str, v41, 4, 1);
    }
    return v22;
  }
  char v19 = gnssOsa_Calloc("Gnm05_25PopulateGnssAidReq", 517, 1, 0xD8uLL);
  a2[5] = v19;
  if (v19)
  {
    int v18 = Gnm05_24PopulateGnssAssistData((uint64_t)v19, 4, (uint64_t)(a1 + 720), 4u, 4u, 4u);
    unsigned int v8 = (unsigned char *)a2[1];
    v8[6] = 1;
    goto LABEL_36;
  }
  int v52 = (void *)a2[2];
  if (v52) {
    free(v52);
  }
  a2[2] = 0;
  long long v53 = (void *)a2[3];
  if (v53) {
    free(v53);
  }
  a2[3] = 0;
  long long v54 = (void *)a2[6];
  if (v54) {
    free(v54);
  }
  a2[6] = 0;
  uint64_t v55 = (void *)a2[1];
  if (v55) {
    free(v55);
  }
  a2[1] = 0;
  int v56 = (void *)a2[4];
  if (v56) {
    free(v56);
  }
  uint64_t v22 = 0;
  a2[4] = 0;
  return v22;
}

uint64_t Gnm05_24PopulateGnssAssistData(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = a2;
  int v8 = *(unsigned __int8 *)(a3 + 16);
  *(unsigned char *)(a1 + 4) = v8;
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a3 + 22);
  if (*(unsigned char *)(a3 + 18) && *(unsigned __int8 *)(a3 + 3) < a5)
  {
    *(unsigned char *)(a1 + 6) = 1;
    *(unsigned char *)(a1 + 13) = *(unsigned char *)(a3 + 25);
  }
  if (*(unsigned char *)(a3 + 19) && *(unsigned __int8 *)(a3 + 1) < a4)
  {
    *(unsigned char *)(a1 + 7) = 1;
    *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 26);
  }
  if (*(unsigned char *)(a3 + 20) && *(unsigned __int8 *)(a3 + 2) < a6) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a3 + 30);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a3 + 28);
  LODWORD(v9) = *(unsigned __int8 *)(a3 + 33);
  *(unsigned char *)(a1 + 20) = v9;
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a3 + 32);
  if (v9 >= 0x30) {
    uint64_t v9 = 48;
  }
  else {
    uint64_t v9 = v9;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = (_WORD *)(a3 + 36);
    do
    {
      *(unsigned char *)(a1 + v10 + 21) = *((unsigned char *)v11 - 2);
      __int16 v12 = *v11;
      v11 += 2;
      *(_WORD *)(a1 + 2 * v10++ + 86) = v12;
    }
    while (v9 != v10);
  }
  if (v8 || *(unsigned char *)(a1 + 6) || *(unsigned char *)(a1 + 7) || *(unsigned char *)(a1 + 8))
  {
    uint64_t v13 = 1;
    *(unsigned char *)(a1 + 5) = 1;
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a3 + 24);
    if (a2 == 64) {
      *(unsigned char *)(a1 + 11) = *(unsigned char *)(a3 + 23);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (v13) {
      uint64_t v15 = 89;
    }
    else {
      uint64_t v15 = 78;
    }
    if (*(unsigned char *)(a1 + 15)) {
      uint64_t v16 = 89;
    }
    else {
      uint64_t v16 = 78;
    }
    if (*(unsigned char *)(a1 + 14)) {
      uint64_t v17 = 89;
    }
    else {
      uint64_t v17 = 78;
    }
    if (*(unsigned char *)(a1 + 13)) {
      uint64_t v18 = 89;
    }
    else {
      uint64_t v18 = 78;
    }
    if (*(unsigned char *)(a1 + 10)) {
      uint64_t v19 = 89;
    }
    else {
      uint64_t v19 = 78;
    }
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v20 = 89;
    }
    else {
      uint64_t v20 = 78;
    }
    if (*(unsigned char *)(a1 + 7)) {
      uint64_t v21 = 89;
    }
    else {
      uint64_t v21 = 78;
    }
    if (*(unsigned char *)(a1 + 6)) {
      uint64_t v22 = 89;
    }
    else {
      uint64_t v22 = 78;
    }
    if (*(unsigned char *)(a1 + 12)) {
      uint64_t v23 = 89;
    }
    else {
      uint64_t v23 = 78;
    }
    if (*(unsigned char *)(a1 + 11)) {
      uint64_t v24 = 89;
    }
    else {
      uint64_t v24 = 78;
    }
    if (*(unsigned char *)(a1 + 5)) {
      uint64_t v25 = 89;
    }
    else {
      uint64_t v25 = 78;
    }
    if (*(unsigned char *)(a1 + 4)) {
      uint64_t v26 = 89;
    }
    else {
      uint64_t v26 = 78;
    }
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AssistReq GNSSID,%u,Utc,%c,Rti,%c,Grid,%c,TimeModel,%c,Alm,%c,Eph,%c,RefMeas,%c,AuxInfo,%c,AlmModId,%c,EphModId,%c,ClkModId,%c,AidReq,%c\n", (unint64_t)v14, "GNM", 73, "Gnm05_24PopulateGnssAssistData", a2, v26, v25, v24, v23, v22, v21, v20, v19, v18, v17,
            v16,
            v15);
    LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
  }
  return v13;
}

uint64_t Gnm05_27PopulateDefaultGnssAidReq(void *a1, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm05_27PopulateDefaultGnssAidReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  uint64_t v6 = gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 655, 1, 8uLL);
  a1[1] = v6;
  if (!v6) {
    return 0;
  }
  *(_WORD *)uint64_t v6 = 257;
  v6[2] = 1;
  if (a2)
  {
    unsigned __int16 v7 = (char *)gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 668, 1, 0xD8uLL);
    a1[2] = v7;
    if (!v7) {
      goto LABEL_45;
    }
    *(void *)unsigned __int16 v7 = 0x101010100000001;
    *(_DWORD *)(v7 + 7) = 16843009;
    v7[20] = 0;
    v7[15] = 2;
    *(_DWORD *)(v7 + 11) = 33685760;
    *(unsigned char *)(a1[1] + 3) = 1;
  }
  if ((a2 & 0x20) != 0)
  {
    int v8 = (char *)gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 682, 1, 0xD8uLL);
    a1[3] = v8;
    if (!v8)
    {
      uint64_t v13 = (void *)a1[2];
      if (v13) {
        free(v13);
      }
      a1[2] = 0;
      goto LABEL_45;
    }
    *(void *)int v8 = 0x101010100000020;
    *(_DWORD *)(v8 + 7) = 16843009;
    v8[20] = 0;
    v8[15] = 4;
    *(_DWORD *)(v8 + 11) = 67436800;
    *(unsigned char *)(a1[1] + 4) = 1;
  }
  if ((a2 & 0x40) != 0)
  {
    uint64_t v9 = (char *)gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 699, 1, 0xD8uLL);
    a1[6] = v9;
    if (!v9)
    {
      double v14 = (void *)a1[2];
      if (v14) {
        free(v14);
      }
      a1[2] = 0;
      uint64_t v15 = (void *)a1[3];
      if (v15) {
        free(v15);
      }
      a1[3] = 0;
      goto LABEL_45;
    }
    *(void *)uint64_t v9 = 0x101010100000040;
    *(_DWORD *)(v9 + 7) = 16843009;
    v9[20] = 0;
    v9[15] = 6;
    *(_DWORD *)(v9 + 11) = 101122304;
    *(unsigned char *)(a1[1] + 7) = 1;
  }
  if ((a2 & 0x10) != 0)
  {
    uint64_t v10 = gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 717, 1, 0xD8uLL);
    a1[4] = v10;
    if (!v10)
    {
      uint64_t v16 = (void *)a1[2];
      if (v16) {
        free(v16);
      }
      a1[2] = 0;
      uint64_t v17 = (void *)a1[3];
      if (v17) {
        free(v17);
      }
      a1[3] = 0;
      uint64_t v18 = (void *)a1[6];
      if (v18) {
        free(v18);
      }
      a1[6] = 0;
      goto LABEL_45;
    }
    Gnm05_26PopulateDefaultAssistData((uint64_t)v10, 16);
    *(unsigned char *)(a1[1] + 5) = 1;
  }
  if ((a2 & 4) == 0) {
    return 1;
  }
  uint64_t v11 = 1;
  __int16 v12 = gnssOsa_Calloc("Gnm05_27PopulateDefaultGnssAidReq", 736, 1, 0xD8uLL);
  a1[5] = v12;
  if (v12)
  {
    Gnm05_26PopulateDefaultAssistData((uint64_t)v12, 4);
    *(unsigned char *)(a1[1] + 6) = 1;
    return v11;
  }
  uint64_t v19 = (void *)a1[2];
  if (v19) {
    free(v19);
  }
  a1[2] = 0;
  uint64_t v20 = (void *)a1[3];
  if (v20) {
    free(v20);
  }
  a1[3] = 0;
  uint64_t v21 = (void *)a1[6];
  if (v21) {
    free(v21);
  }
  a1[6] = 0;
  uint64_t v22 = (void *)a1[4];
  if (v22) {
    free(v22);
  }
  a1[4] = 0;
LABEL_45:
  uint64_t v23 = (void *)a1[1];
  if (v23) {
    free(v23);
  }
  uint64_t v11 = 0;
  a1[1] = 0;
  return v11;
}

size_t Gnm05_26PopulateDefaultAssistData(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 16843009;
  *(_DWORD *)(a1 + 7) = 16843009;
  *(unsigned char *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 15) = 0;
  *(_DWORD *)(a1 + 11) = 256;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm05_26PopulateDefaultAssistData", 770, a2);
    return LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
  }
  return result;
}

size_t Gnm05_31PrintNavSoln(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (*(unsigned char *)(a1 + 10)) {
      uint64_t v3 = 89;
    }
    else {
      uint64_t v3 = 78;
    }
    if (*(unsigned char *)(a1 + 9)) {
      uint64_t v4 = 89;
    }
    else {
      uint64_t v4 = 78;
    }
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v5 = 89;
    }
    else {
      uint64_t v5 = 78;
    }
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NAV:OsTime,%ums,BBTick,%ums,DateSet,%c,TimeSet,%c,UtcValid,%c,Year,%u,Month,%u,Day,%u,Hours,%u,Min,%u,Sec,%u,Msec,%u,WkNo,%d,Tow,%.12f,TowUnc%.12f,UtcCorr,%.1f,ClkDrift,%.12f,ClkDriftUnc,%.12f\n", v2, "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(_DWORD *)a1, v5, v4, v3, *(unsigned __int16 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(unsigned __int16 *)(a1 + 20), *(unsigned __int16 *)(a1 + 22),
           *(unsigned __int16 *)(a1 + 24),
           *(__int16 *)(a1 + 28),
           *(double *)(a1 + 40),
           *(double *)(a1 + 32),
           *(double *)(a1 + 64),
           *(double *)(a1 + 72),
           *(double *)(a1 + 168));
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NAV:OsTime,%ums,Lat,%.9f,Lon,%.9f,AltMSL,%f,Speed,%f,Course,%f,VerVel,%f,HAccMaj,%f,HAccMin,%f,PRRes,%f,FixT,%u,VSF,%u,VNM,%u,FixMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 128), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 248), *(unsigned __int8 *)(a1 + 288),
           *(unsigned __int8 *)(a1 + 289),
           *(unsigned __int8 *)(a1 + 290),
           *(unsigned __int8 *)(a1 + 291));
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NAV:OsTime,%ums,SatView,%u,SatUsed,%u,UsrS,%u,GnssC,%u,Reliab,%u,AsstUsed,0x%X,SpoofMsk,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm05_31PrintNavSoln", *(_DWORD *)(a1 + 4), *(unsigned __int8 *)(a1 + 306), *(unsigned __int8 *)(a1 + 307), *(unsigned __int8 *)(a1 + 292), *(unsigned __int8 *)(a1 + 293), *(unsigned __int8 *)(a1 + 304), *(_DWORD *)(a1 + 300), *(_DWORD *)(a1 + 296));
    return LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  return result;
}

size_t Gnm05_32PrintGadData(size_t result)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    size_t v1 = result;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GAD:SessId,%u,Final,%u,GnssMask,%x,VelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm05_32PrintGadData", *(_DWORD *)v1, *(unsigned __int8 *)(v1 + 4), *(unsigned __int8 *)(v1 + 5), *(_DWORD *)(v1 + 68));
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GAD:Tow,%ums,TowUncK,%u,GnssTod,%ums,GnssTodFrac,%u(250ns),GnssTodUncK,%u,DeltaGnssTodK,%u,RefDeltaCellTime,%u,GnssTimeId,%u,GpsWkNo,%u,GPSLeapSec,%d,LocalBBTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm05_32PrintGadData", *(_DWORD *)(v1 + 84), *(unsigned __int8 *)(v1 + 88), *(_DWORD *)(v1 + 92), *(unsigned __int16 *)(v1 + 96), *(unsigned __int8 *)(v1 + 98), *(unsigned __int8 *)(v1 + 99), *(_DWORD *)(v1 + 100), *(_DWORD *)(v1 + 104), *(unsigned __int16 *)(v1 + 110), *(_DWORD *)(v1 + 112), *(_DWORD *)(v1 + 116));
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GAD:OsTime,%ums,Status,%u,FixType,%u,ShapeType,%u,LatSign,%u,Lat,%u,Lon,%d,Alt,%u,UncSemMajK,%u,UncSemMinK,%u,AxisB,%u,AltDir,%u,UncAltK,%u,Conf,%u,InclAngle,%u,OffsetAngle,%u,InRad,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm05_32PrintGadData", *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 20), *(_DWORD *)(v1 + 24), *(_DWORD *)(v1 + 28), *(_DWORD *)(v1 + 32), *(_DWORD *)(v1 + 36), *(_DWORD *)(v1 + 40), *(unsigned __int16 *)(v1 + 44), *(unsigned __int8 *)(v1 + 46), *(unsigned __int8 *)(v1 + 47), *(unsigned __int8 *)(v1 + 48),
             *(_DWORD *)(v1 + 52),
             *(unsigned __int8 *)(v1 + 56),
             *(unsigned __int8 *)(v1 + 57),
             *(unsigned __int8 *)(v1 + 58),
             *(unsigned __int8 *)(v1 + 59),
             *(_DWORD *)(v1 + 60));
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GAD:Bearing,%u,HorSpeed,%u,VerDir,%u,VerSpeed,%u,HorSpeedUnc,%u,VerSpeedUnc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm05_32PrintGadData", *(unsigned __int16 *)(v1 + 72), *(unsigned __int16 *)(v1 + 74), *(unsigned __int8 *)(v1 + 76), *(unsigned __int16 *)(v1 + 78), *(unsigned __int16 *)(v1 + 80), *(unsigned __int16 *)(v1 + 82));
      return LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
    }
  }
  return result;
}

size_t Gnm05_35PrintMeas(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 3GPPMEAS:SessId,%u,FinalRep,%u,AsstMask,0x%X,MeasMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm05_35PrintMeas", *(_DWORD *)a1, *(unsigned __int8 *)(a1 + 4), *(_DWORD *)(a1 + 12), *(unsigned __int8 *)(a1 + 16));
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 3GPPMEAS:GNSS:Status,%u,GpsTow,%ums,TowUncK,%u,Tod,%ums,TodFrac,%u(250ns),TodUncK,%u,DeltaTodK,%u,RefDeltaCellTime,%dus,NumGnssID,%u,GpsWkNo,%u,GPSLeapSec,%d,LocalBBTimeMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm05_34PrintGnssMeas", *(_DWORD *)(a1 + 680), *(_DWORD *)(a1 + 684), *(unsigned __int8 *)(a1 + 688), *(_DWORD *)(a1 + 692), *(unsigned __int16 *)(a1 + 696), *(unsigned __int8 *)(a1 + 698), *(unsigned __int8 *)(a1 + 699), *(_DWORD *)(a1 + 700), *(unsigned __int8 *)(a1 + 720), *(unsigned __int16 *)(a1 + 710), *(_DWORD *)(a1 + 712),
           *(_DWORD *)(a1 + 716));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + 720);
  if (*(unsigned char *)(a1 + 720))
  {
    unint64_t v7 = 0;
    uint64_t v8 = (unsigned __int8 *)(a1 + 736);
    uint64_t v29 = a1;
    do
    {
      uint64_t v9 = a1 + 10280 * v7;
      unsigned __int8 v10 = *(unsigned char *)(v9 + 728);
      if (v10)
      {
        unint64_t v11 = 0;
        __int16 v12 = (_DWORD *)(v9 + 724);
        uint64_t v30 = (unsigned __int8 *)(v9 + 728);
        unint64_t v31 = v7;
        int v28 = v8;
        do
        {
          uint64_t v13 = a1 + 10280 * v7 + 1284 * v11;
          if (*(unsigned char *)(v13 + 734))
          {
            unint64_t v14 = 0;
            uint64_t v15 = (unsigned __int8 *)(v13 + 732);
            uint64_t v16 = (unsigned __int8 *)(v13 + 734);
            uint64_t v17 = (unsigned __int8 *)(a1 + 10280 * v7 + 1284 * v11 + 733);
            uint64_t v18 = v8;
            do
            {
              if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v19 = mach_continuous_time();
                unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 3GPPMEAS:GNSS:GnssId,%u,SignalId,%u,SvId,%u,CPAmbig,%u,Snr,%u,MPathInd,%u,CarQualInd,%u,IntCodePh,%ums,CPRmsErr,%u,CodePh,%ums,Dopp,%dm/s,ADR,%um\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm05_34PrintGnssMeas", *v12, *v15, *v18, *v17, v18[1], v18[2], v18[3], v18[4], v18[5], *((_DWORD *)v18 + 2), *((__int16 *)v18 + 6),
                        *((_DWORD *)v18 + 4));
                LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
              }
              if (v14 > 0x3E) {
                break;
              }
              ++v14;
              v18 += 20;
            }
            while (v14 < *v16);
            a1 = v29;
            unsigned __int8 v10 = *v30;
            unint64_t v7 = v31;
          }
          if (v11 > 6) {
            break;
          }
          ++v11;
          v8 += 1284;
        }
        while (v11 < v10);
        unsigned int v6 = *(unsigned __int8 *)(a1 + 720);
        uint64_t v8 = v28;
      }
      if (v7 > 0xE) {
        break;
      }
      ++v7;
      v8 += 10280;
    }
    while (v7 < v6);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 3GPPMEAS:GPS:Status,%u,GpsTow,%ums,GpsTowUncK,%u,RefDeltaCellTime,%dus,DeltaTowK,%u,NoSv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm05_33PrintGpsMeas", *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 28), *(_DWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 37));
    size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
  }
  if (*(unsigned char *)(a1 + 37))
  {
    unint64_t v24 = 0;
    uint64_t v25 = (unsigned __int8 *)(a1 + 47);
    do
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 3GPPMEAS:GPS:SatId,%u,Cno,%u,Doppler,%u,WholeChips,%u,FracChips,%u,MPathInd,%u,PsRmsErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm05_33PrintGpsMeas", *(v25 - 9), *(v25 - 8), *(__int16 *)(v25 - 7), *(unsigned __int16 *)(v25 - 5), *(unsigned __int16 *)(v25 - 3), *(v25 - 1), *v25);
        size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
      }
      if (v24 > 0x3E) {
        break;
      }
      ++v24;
      v25 += 10;
    }
    while (v24 < *(unsigned __int8 *)(a1 + 37));
  }
  return result;
}

size_t Gnm05_43ConvertNavToGpsGad(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v8 = 1;
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = 1;
  int v9 = *(unsigned __int8 *)(a3 + 288);
  if (v9 != 2)
  {
    if (v9 == 3)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = 0;
      *(_DWORD *)(a1 + 4) = 7;
    }
  }
  *(_DWORD *)(a1 + 8) = v8;
  double v10 = *(double *)(a3 + 104);
  unsigned int v11 = (fabs(v10) * 93206.7444 + 0.5);
  if (v10 >= 0.0) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  *(_DWORD *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 20) = v11;
  int v13 = (*(double *)(a3 + 112) * 46603.3778);
  if (v13 >= 0x800000) {
    v13 -= 0x1000000;
  }
  *(_DWORD *)(a1 + 24) = v13;
  unsigned int v14 = (log(*(double *)(a3 + 200) / 10.0 + 1.0) / 0.0953101798 + 1.0);
  if (v14 >= 0x7F) {
    LOBYTE(v14) = 127;
  }
  *(unsigned char *)(a1 + 30) = v14;
  unsigned int v15 = (log(*(double *)(a3 + 208) / 10.0 + 1.0) / 0.0953101798 + 1.0);
  if (v15 >= 0x7F) {
    LOBYTE(v15) = 127;
  }
  *(unsigned char *)(a1 + 31) = v15;
  int v16 = (int)*(double *)(a3 + 216);
  *(unsigned char *)(a1 + 32) = v16;
  double v17 = *(double *)(a3 + 120);
  if (v17 >= 0.0) {
    int v18 = 1;
  }
  else {
    int v18 = 2;
  }
  if (v17 < 0.0) {
    double v17 = -v17;
  }
  *(_DWORD *)(a1 + 36) = v18;
  *(_WORD *)(a1 + 28) = (int)v17;
  unsigned int v19 = (log(*(double *)(a3 + 192) / 45.0 + 1.0) / 0.0246926126 + 1.0);
  if (v19 >= 0x7F) {
    LOBYTE(v19) = 127;
  }
  *(unsigned char *)(a1 + 40) = v19;
  *(_DWORD *)(a1 + 44) = -1;
  *(_WORD *)(a1 + 41) = -189;
  *(unsigned char *)(a1 + 43) = -1;
  if (v16 == 255) {
    int v20 = 8;
  }
  else {
    int v20 = 16;
  }
  *(_DWORD *)(a1 + 12) = v20;
  *(_DWORD *)(a2 + 16) = a4;
  *(void *)a2 = *(void *)(a3 + 12);
  *(_WORD *)(a2 + 8) = *(_WORD *)(a3 + 20);
  *(_DWORD *)(a2 + 10) = *(_DWORD *)(a3 + 22);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 1);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GAD Lat,%u,Long,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm05_43ConvertNavToGpsGad", *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24));
    return LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
  }
  return result;
}

uint64_t Gnm05_55AssignAppInfo(unsigned char *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 1;
  }
  uint64_t v4 = 1;
  unsigned __int16 v5 = gnssOsa_Calloc("Gnm05_55AssignAppInfo", 1083, 1, 0xC4uLL);
  *(void *)a2 = v5;
  if (!v5) {
    return 0;
  }
  *unsigned __int16 v5 = 1;
  memcpy_s("Gnm05_55AssignAppInfo", 1091, v5 + 66, 0x41u, a1 + 66, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 1092, (void *)(*(void *)a2 + 1), 0x41u, a1 + 1, 0x41uLL);
  memcpy_s("Gnm05_55AssignAppInfo", 1093, (void *)(*(void *)a2 + 131), 0x41u, a1 + 131, 0x41uLL);
  return v4;
}

BOOL Gnm05_57GenerateInitCLT(__int16 *a1, unsigned int a2, double a3, double **a4, unsigned __int16 *a5)
{
  if (a2 <= 8)
  {
    double v10 = (double *)gnssOsa_Calloc("Gnm05_57GenerateInitCLT", 1125, a2, 8uLL);
    unsigned int v11 = v10;
    if (a2)
    {
      uint64_t v12 = a2;
      int v13 = v10;
      uint64_t v14 = a2;
      do
      {
        int v15 = *a1++;
        *v13++ = a3 + (a3 + a3) * (double)v15 * 0.000000999999997;
        a3 = a3 + a3;
        --v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v16 = (double *)gnssOsa_Calloc("Gnm05_57GenerateInitCLT", 1138, (unsigned __int16)(1 << a2), 8uLL);
    uint64_t v17 = 0;
    if (((1 << a2) & 0xFFFE) != 0) {
      uint64_t v18 = (unsigned __int16)(1 << a2);
    }
    else {
      uint64_t v18 = 1;
    }
    do
    {
      if (a2)
      {
        unsigned int v19 = (unsigned __int16)v17;
        double v20 = 0.0;
        uint64_t v21 = v11;
        uint64_t v22 = v12;
        do
        {
          if (v19) {
            double v20 = v20 + *v21;
          }
          if (v19 < 2) {
            break;
          }
          v19 >>= 1;
          ++v21;
          --v22;
        }
        while (v22);
      }
      else
      {
        double v20 = 0.0;
      }
      v16[v17++] = v20;
    }
    while (v17 != v18);
    *a4 = v16;
    *a5 = 1 << a2;
    if (v11) {
      free(v11);
    }
  }
  return a2 < 9;
}

uint64_t lsim25_01HandleEeApiStatus(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim25_01HandleEeApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  uint64_t v4 = (char *)gnssOsa_Calloc("lsim25_01HandleEeApiStatus", 38, 1, 0x28uLL);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EEAPI_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim25_01HandleEeApiStatus");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    if (g_GnsEeCallback)
    {
      *(void *)unsigned __int16 v5 = *(void *)(a1 + 12);
      *((_DWORD *)v5 + 2) = *(_DWORD *)(a1 + 20);
      v5[16] = *(unsigned char *)(a1 + 24);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 32);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>EeCB,Api,%u,Id,%u,Status,%u,DataIntValid,%u,StartGpsSecs,%llu,EndGpsSecs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 77, "lsim25_01HandleEeApiStatus", *((_DWORD *)v5 + 1), *(_DWORD *)v5, *((_DWORD *)v5 + 2), v5[16], *((void *)v5 + 3), *((void *)v5 + 4));
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 3, 1);
      }
      g_GnsEeCallback(0, 40, v5);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_14;
      }
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim25_01HandleEeApiStatus");
      int v12 = 4;
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
      {
LABEL_14:
        free(v5);
        return 0;
      }
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 68, "lsim25_01HandleEeApiStatus", 258);
      int v12 = 5;
    }
    LbsOsaTrace_WriteLog(0xCu, __str, v11, v12, 1);
    goto LABEL_14;
  }
  return 0;
}

size_t lsim25_01EeCbInit(size_t result)
{
  size_t v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsEeCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim25_01EeCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsEeCallback = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim25_01EeCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_EeInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_EeInitialize", 102, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[3] = 8;
  *((void *)v2 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v2);
  return 1;
}

uint64_t GNS_EeInjectOrbitData(int a1, signed __int8 *a2, size_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_EeInjectOrbitData");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ORB\n");
      goto LABEL_9;
    }
LABEL_10:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EeInjectOrbitData");
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
    }
    return 2;
  }
  if ((a3 - 427673) < 0xFFF979E7)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ORBLen,%u\n", v22);
LABEL_9:
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 2, 1);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  int v12 = gnssOsa_Calloc("GNS_EeInjectOrbitData", 153, 1, 0x28uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = gnssOsa_Calloc("GNS_EeInjectOrbitData", 161, a3, 1uLL);
    v13[3] = v14;
    if (v14)
    {
      memcpy_s("GNS_EeInjectOrbitData", 170, v14, a3, a2, a3);
      *((_DWORD *)v13 + 8) = a3;
      *((_DWORD *)v13 + 3) = a1;
      *((_DWORD *)v13 + 4) = 1;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND =>GNC,ORB,DataLen,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_EeInjectOrbitData", *((_DWORD *)v13 + 8), *((_DWORD *)v13 + 3));
        LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8783619, v13);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GNS_EeInjectOrbitData");
      uint64_t v11 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
      return v11;
    }
    free(v13);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "GNS_EeInjectOrbitData");
    LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
  }
  return 6;
}

uint64_t GNS_EeInjectRtiData(int a1, signed __int8 *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_EeInjectRtiData");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 87, "GNS_EeInjectRtiData", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
LABEL_18:
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v20, "LSM", 73, "GNS_EeInjectRtiData");
    LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    return 2;
  }
  if (a3 != 160)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTILen,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "GNS_EeInjectRtiData", 514, a3);
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_18;
  }
  unsigned __int16 v8 = gnssOsa_Calloc("GNS_EeInjectRtiData", 222, 1, 0x28uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    unsigned __int16 v10 = gnssOsa_Calloc("GNS_EeInjectRtiData", 230, 160, 1uLL);
    v9[3] = v10;
    if (v10)
    {
      memcpy_s("GNS_EeInjectRtiData", 239, v10, 0xA0u, a2, 0xA0uLL);
      *((_DWORD *)v9 + 8) = 160;
      *((_DWORD *)v9 + 3) = a1;
      *((_DWORD *)v9 + 4) = 2;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EEDATA_IND =>GNC,RTI,DataLen,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EeInjectRtiData", *((_DWORD *)v9 + 8), *((_DWORD *)v9 + 3));
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8783619, v9);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "GNS_EeInjectRtiData");
      uint64_t v15 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
      return v15;
    }
    free(v9);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "GNS_EeInjectRtiData");
    LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
  }
  return 6;
}

void *EvLog(void *result)
{
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    size_t v1 = result;
    uint64_t v2 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2));
    unsigned __int16 v3 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v3 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    uint64_t v4 = (unsigned char *)g_CB_ELog++;
    *uint64_t v4 = 32;
    unsigned __int16 v5 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      unsigned __int16 v5 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v6 = *v1;
    if (*v1)
    {
      unsigned __int16 v7 = v1 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v5 + 1);
        *unsigned __int16 v5 = v6;
        unsigned __int16 v5 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          unsigned __int16 v5 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v8 = *v7++;
        char v6 = v8;
      }
      while (v8);
    }
    g_CB_ELog = (uint64_t)(v5 + 1);
    *unsigned __int16 v5 = 10;
    int v9 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v9 = qword_26AE54850;
    }
    int v10 = dword_26AE54848 - v9;
    int v11 = qword_26AE54858 - qword_26AE54850;
    if (v10 > 0) {
      int v11 = 0;
    }
    if ((v11 + v10) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_d(void *result, int a2)
{
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    unsigned __int16 v3 = result;
    uint64_t v4 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4));
    unsigned __int16 v5 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v5 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    char v6 = (unsigned char *)g_CB_ELog++;
    *char v6 = 32;
    unsigned __int16 v7 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      unsigned __int16 v7 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v8 = *v3;
    if (*v3)
    {
      int v9 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v7 + 1);
        *unsigned __int16 v7 = v8;
        unsigned __int16 v7 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          unsigned __int16 v7 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v10 = *v9++;
        char v8 = v10;
      }
      while (v10);
    }
    size_t result = sprintf_sp1d(&g_CB_ELog, a2);
    int v11 = (unsigned char *)g_CB_ELog++;
    *int v11 = 10;
    int v12 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v12 = qword_26AE54850;
    }
    int v13 = dword_26AE54848 - v12;
    int v14 = qword_26AE54858 - qword_26AE54850;
    if (v13 > 0) {
      int v14 = 0;
    }
    if ((v14 + v13) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_nd(void *result, int a2, uint64_t a3, ...)
{
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    uint64_t v4 = result;
    uint64_t v5 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5));
    char v6 = (unsigned char *)g_CB_ELog++;
    *char v6 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    unsigned __int16 v7 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v7 = 32;
    char v8 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      char v8 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v9 = *v4;
    if (*v4)
    {
      int v10 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v8 + 1);
        *char v8 = v9;
        char v8 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          char v8 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v11 = *v10++;
        char v9 = v11;
      }
      while (v11);
    }
    for (uint64_t i = (int *)&a3; a2; --a2)
    {
      int v12 = i;
      i += 2;
      size_t result = sprintf_sp1d(&g_CB_ELog, *v12);
    }
    int v13 = (unsigned char *)g_CB_ELog++;
    *int v13 = 10;
    int v14 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v14 = qword_26AE54850;
    }
    int v15 = dword_26AE54848 - v14;
    int v16 = qword_26AE54858 - qword_26AE54850;
    if (v15 > 0) {
      int v16 = 0;
    }
    if ((v16 + v15) <= 0xFF) {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvLog_VecI4(void *result, unsigned int a2, int *a3)
{
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    uint64_t v5 = result;
    uint64_t v6 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6));
    unsigned __int16 v7 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v7 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    char v8 = (unsigned char *)g_CB_ELog++;
    *char v8 = 32;
    char v9 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      char v9 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v10 = *v5;
    if (*v5)
    {
      int v11 = v5 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v9 + 1);
        *char v9 = v10;
        char v9 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          char v9 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v12 = *v11++;
        char v10 = v12;
      }
      while (v12);
    }
    if (a2)
    {
      uint64_t v13 = a2;
      do
      {
        int v14 = *a3++;
        size_t result = sprintf_sp1d(&g_CB_ELog, v14);
        --v13;
      }
      while (v13);
      char v9 = (unsigned char *)g_CB_ELog;
    }
    g_CB_ELog = (uint64_t)(v9 + 1);
    *char v9 = 10;
    int v15 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v15 = qword_26AE54850;
    }
    int v16 = dword_26AE54848 - v15;
    int v17 = qword_26AE54858 - qword_26AE54850;
    if (v16 > 0) {
      int v17 = 0;
    }
    if ((v17 + v16) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvLog_v(char *result, ...)
{
  va_start(va, result);
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    size_t v1 = result;
    uint64_t v2 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2));
    unsigned __int16 v3 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v3 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    uint64_t v4 = (unsigned char *)g_CB_ELog++;
    *uint64_t v4 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (int *)va);
    int v5 = qword_26AE54858 - qword_26AE54850;
    if (dword_26AE54848 - (int)g_CB_ELog > 0) {
      int v5 = 0;
    }
    if ((v5 + dword_26AE54848 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

uint64_t DbgLog_v(uint64_t result, char *a2, ...)
{
  va_start(va, a2);
  char v3 = result;
  if (result)
  {
    if (!g_Enable_Nav_Debug) {
      return result;
    }
    uint64_t v4 = (char *)g_CB_NDbg;
    char v5 = 69;
    uint64_t v6 = 1u;
    unsigned __int16 v7 = &g_CB_NDbg;
    do
    {
      g_CB_NDbg = (uint64_t)(v4 + 1);
      *uint64_t v4 = v5;
      uint64_t v4 = (char *)g_CB_NDbg;
      if (g_CB_NDbg >= (unint64_t)qword_26AE54898)
      {
        uint64_t v4 = (char *)qword_26AE54890;
        g_CB_NDbg = qword_26AE54890;
      }
      char v5 = str_3_6[v6++];
    }
    while (v6 != 4);
  }
  else
  {
    if ((unsigned __int16)g_Enable_Event_Log < 2u) {
      return result;
    }
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v7 = &g_CB_ELog;
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8));
    char v9 = (unsigned char *)g_CB_ELog++;
    *char v9 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
  }
  sprintf_10u(v7, **(_DWORD **)(p_api + 8));
  char v10 = (unsigned char *)(*v7)++;
  *char v10 = 32;
  if (*v7 >= (unint64_t)v7[3]) {
    *unsigned __int16 v7 = v7[2];
  }
  size_t result = sprintf_v((uint64_t)v7, a2, (int *)va);
  if ((v3 & 1) == 0)
  {
    int v11 = *((_DWORD *)v7 + 2) - *(_DWORD *)v7;
    if (v11 <= 0) {
      v11 += *((_DWORD *)v7 + 6) - *((_DWORD *)v7 + 4);
    }
    if (v11 <= 0xFF) {
      return GNSS_Event_Log_Ctl((uint64_t)v7);
    }
  }
  return result;
}

void *EvCrt_d(void *result, int a2)
{
  if (g_Enable_Event_Log)
  {
    char v3 = result;
    uint64_t v4 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4));
    char v5 = (unsigned char *)g_CB_ELog++;
    *char v5 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    uint64_t v6 = (unsigned char *)g_CB_ELog++;
    *uint64_t v6 = 32;
    unsigned __int16 v7 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      unsigned __int16 v7 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v8 = *v3;
    if (*v3)
    {
      char v9 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v7 + 1);
        *unsigned __int16 v7 = v8;
        unsigned __int16 v7 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          unsigned __int16 v7 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v10 = *v9++;
        char v8 = v10;
      }
      while (v10);
    }
    size_t result = sprintf_sp1d(&g_CB_ELog, a2);
    int v11 = (unsigned char *)g_CB_ELog++;
    *int v11 = 10;
    int v12 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v12 = qword_26AE54850;
    }
    int v13 = dword_26AE54848 - v12;
    int v14 = qword_26AE54858 - qword_26AE54850;
    if (v13 > 0) {
      int v14 = 0;
    }
    if ((v14 + v13) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvCrt_nd(void *result, int a2, uint64_t a3, ...)
{
  if (g_Enable_Event_Log)
  {
    uint64_t v4 = result;
    uint64_t v5 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5));
    uint64_t v6 = (unsigned char *)g_CB_ELog++;
    *uint64_t v6 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    unsigned __int16 v7 = (unsigned char *)g_CB_ELog++;
    *unsigned __int16 v7 = 32;
    char v8 = (unsigned char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      char v8 = (unsigned char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v9 = *v4;
    if (*v4)
    {
      int v10 = v4 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v8 + 1);
        *char v8 = v9;
        char v8 = (unsigned char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          char v8 = (unsigned char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v11 = *v10++;
        char v9 = v11;
      }
      while (v11);
    }
    for (uint64_t i = (int *)&a3; a2; --a2)
    {
      int v12 = i;
      i += 2;
      size_t result = sprintf_sp1d(&g_CB_ELog, *v12);
    }
    int v13 = (unsigned char *)g_CB_ELog++;
    *int v13 = 10;
    int v14 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v14 = qword_26AE54850;
    }
    int v15 = dword_26AE54848 - v14;
    int v16 = qword_26AE54858 - qword_26AE54850;
    if (v15 > 0) {
      int v16 = 0;
    }
    if ((v16 + v15) <= 0xFF) {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

char *EvCrt_v(char *result, ...)
{
  va_start(va, result);
  if (g_Enable_Event_Log)
  {
    size_t v1 = result;
    uint64_t v2 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2));
    char v3 = (unsigned char *)g_CB_ELog++;
    *char v3 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    uint64_t v4 = (unsigned char *)g_CB_ELog++;
    *uint64_t v4 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    size_t result = (char *)sprintf_v((uint64_t)&g_CB_ELog, v1, (int *)va);
    int v5 = qword_26AE54858 - qword_26AE54850;
    if (dword_26AE54848 - (int)g_CB_ELog > 0) {
      int v5 = 0;
    }
    if ((v5 + dword_26AE54848 - g_CB_ELog) <= 0xFF) {
      return (char *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

void *EvCrt_Illegal_Default(void *result, unsigned int a2)
{
  if (g_Enable_Event_Log)
  {
    char v3 = result;
    uint64_t v4 = mach_continuous_time();
    sprintf_10u(&g_CB_ELog, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4));
    int v5 = (unsigned char *)g_CB_ELog++;
    *int v5 = 32;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858) {
      g_CB_ELog = qword_26AE54850;
    }
    sprintf_10u(&g_CB_ELog, **(_DWORD **)(p_api + 8));
    uint64_t v6 = (unsigned char *)g_CB_ELog++;
    *uint64_t v6 = 32;
    unsigned __int16 v7 = (char *)g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      unsigned __int16 v7 = (char *)qword_26AE54850;
      g_CB_ELog = qword_26AE54850;
    }
    char v8 = *v3;
    if (*v3)
    {
      char v9 = v3 + 1;
      do
      {
        g_CB_ELog = (uint64_t)(v7 + 1);
        *unsigned __int16 v7 = v8;
        unsigned __int16 v7 = (char *)g_CB_ELog;
        if (g_CB_ELog >= (unint64_t)qword_26AE54858)
        {
          unsigned __int16 v7 = (char *)qword_26AE54850;
          g_CB_ELog = qword_26AE54850;
        }
        int v10 = *v9++;
        char v8 = v10;
      }
      while (v10);
    }
    char v11 = 58;
    uint64_t v12 = 1u;
    do
    {
      g_CB_ELog = (uint64_t)(v7 + 1);
      *unsigned __int16 v7 = v11;
      unsigned __int16 v7 = (char *)g_CB_ELog;
      if (g_CB_ELog >= (unint64_t)qword_26AE54858)
      {
        unsigned __int16 v7 = (char *)qword_26AE54850;
        g_CB_ELog = qword_26AE54850;
      }
      char v11 = str_5_7[v12++];
    }
    while (v12 != 46);
    size_t result = sprintf_1u(&g_CB_ELog, a2);
    int v13 = (unsigned char *)g_CB_ELog++;
    *int v13 = 10;
    int v14 = g_CB_ELog;
    if (g_CB_ELog >= (unint64_t)qword_26AE54858)
    {
      g_CB_ELog = qword_26AE54850;
      int v14 = qword_26AE54850;
    }
    int v15 = dword_26AE54848 - v14;
    int v16 = qword_26AE54858 - qword_26AE54850;
    if (v15 > 0) {
      int v16 = 0;
    }
    if ((v16 + v15) <= 0xFF)
    {
      return (void *)GNSS_Event_Log_Ctl((uint64_t)&g_CB_ELog);
    }
  }
  return result;
}

double Comp_Sig_TOT(int a1, int a2, unsigned int a3, double a4, double a5)
{
  for (double i = ((double)a2 + (double)a3 * 0.0000152587891) * 0.000000977517107 + (double)a1 * 1.5; i >= a5; double i = i - a5)
    ;
  while (i < 0.0)
    double i = i + a5;
  double v6 = a5 + -600.0;
  while (a4 - i > v6)
    double i = i + a5;
  while (i - a4 > v6)
    double i = i - a5;
  return i;
}

double *UTC_To_GPS_Time(__int16 *a1, double *a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, double a9, unsigned __int16 a10)
{
  int v10 = a3 - 1898;
  if (a3 >= 1901) {
    int v10 = a3 - 1901;
  }
  BOOL v11 = (a3 & 3) == 0 && a4 > 2;
  int v12 = 365 * (a3 - 1901) + (v10 >> 2) + a5;
  if (v11) {
    ++v12;
  }
  int v13 = v12 + Days_to_Month[a4 - 1] - 28860;
  *a1 = v13 / 7;
  *a2 = (double)(3600 * a6 + 60 * a7 + a8 + 86400 * (v13 % 7)) + (double)a10 * 0.001;

  return Inc_GPS_TOW(a9, a2, a1);
}

void *plc00_03DecodeMsg(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6, unsigned __int8 *a7, int a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned __int16 v27 = 0;
  int __s = 0;
  char v34 = 0;
  memset(v35, 0, sizeof(v35));
  char v36 = 0;
  uint64_t v26 = 0;
  size_t result = (void *)memset_s(&__s, 0x98uLL, 0, 0x98uLL);
  if (a1 >= 3)
  {
    *(_DWORD *)a6 = 51;
    a6[3] = 0;
    return result;
  }
  unsigned __int16 v30 = a3;
  uint64_t v28 = a2;
  unsigned __int16 v29 = 0;
  uint64_t v31 = a4;
  int v32 = 133955584;
  v35[138] = *((unsigned char *)a6 + 144);
  plc01_01DecHeader((unsigned __int16 *)&v28, a7, &v27, (uint64_t)&__s);
  if (__s) {
    goto LABEL_4;
  }
  if (v27 + 9 != a3)
  {
    int __s = 7;
    if (!v35[138]) {
      goto LABEL_4;
    }
    snprintf(&v35[10], 0x80uLL, "D HDR PL %d != L %d", v27, a3 - 9);
    if (__s) {
      goto LABEL_4;
    }
  }
  if (a1 != 2)
  {
    if (a1 == 1) {
      goto LABEL_11;
    }
    if (a1) {
      goto LABEL_12;
    }
  }
  plc00_04GetPayloadFields(a7, g_ListAll_Chip2Host, &v26, &__s, a8);
  if (a1) {
    goto LABEL_12;
  }
  if (!__s) {
    goto LABEL_13;
  }
LABEL_11:
  plc00_04GetPayloadFields(a7, g_ListAll_Host2Chip, &v26, &__s, a8);
LABEL_12:
  if (!__s)
  {
LABEL_13:
    unsigned __int16 v29 = 8;
    uint64_t v17 = v26;
    if (a3 <= 0xB) {
      __int16 v18 = -1;
    }
    else {
      __int16 v18 = -3;
    }
    if ((*(_WORD *)(v26 + 4) & 0x1000) != 0) {
      __int16 v19 = v18;
    }
    else {
      __int16 v19 = -1;
    }
    unsigned __int16 v30 = v19 + a3;
    plc00_13CodecProcess(1, (uint64_t)&v28, v26, (uint64_t)&v31, (uint64_t)&__s);
    if (!__s && (*(_WORD *)(v17 + 4) & 0xE000) != 0x2000 && a3 >= 0xA && (*(_WORD *)(v17 + 4) & 0x1000) != 0)
    {
      unsigned __int16 __dst = 0;
      if (v30 - 3 <= v29)
      {
        uint64_t v20 = v28;
        memcpy_s("plc00_03DecodeMsg", 222, &__dst, 2u, (const void *)(v28 + v29), 2uLL);
        if (v27 < 3uLL)
        {
          unsigned __int16 v21 = 0;
        }
        else
        {
          unsigned __int16 v21 = 0;
          uint64_t v22 = (unsigned __int8 *)(v20 + 8);
          uint64_t v23 = v27 - 2;
          do
          {
            __int16 v24 = *v22++;
            v21 += v24;
            --v23;
          }
          while (v23);
        }
        if (v21 != __dst)
        {
          int __s = 21;
          if (v35[138]) {
            snprintf(&v35[10], 0x80uLL, "D PL CS %d != %d\n", __dst, v21);
          }
        }
      }
      else
      {
        int __s = 22;
      }
    }
  }
LABEL_4:
  size_t result = memcpy_s("plc00_03DecodeMsg", 243, a6, 0x94u, &__s, 0x94uLL);
  *a5 = v29;
  return result;
}

uint64_t plc00_13CodecProcess(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int16 *)(a3 + 4) >> 13;
  if (v5 != 1)
  {
    int v8 = result;
    if (v5 == 3)
    {
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8);
      return v12(result, a4, a4, a5, a4);
    }
    else if (v5 == 2)
    {
      if (result == 1) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = a2;
      }
      __int16 v10 = *(_WORD *)(v9 + 8);
      size_t result = plc03_06CodecFields(result, a2, *(unsigned int **)(a3 + 8), *(unsigned __int8 *)(a3 + 3), a4, a5);
      if (!*(_DWORD *)a5)
      {
        int v11 = (unsigned __int16)(*(_WORD *)(v9 + 8) - v10);
        if (v11 != (*(_WORD *)(a3 + 4) & 0xFFF))
        {
          *(_DWORD *)a5 = 56;
          if (*(unsigned char *)(a5 + 144)) {
            return snprintf((char *)(a5 + 16), 0x80uLL, "%c PL T %d != S %d\n", g_CodecChar[v8], v11, *(_WORD *)(a3 + 4) & 0xFFF);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a5 = 53;
    }
  }
  return result;
}

unsigned __int8 *plc00_04GetPayloadFields(unsigned __int8 *result, unsigned __int8 *a2, void *a3, int *a4, int a5)
{
  *a3 = 0;
  if (!*((void *)a2 + 1)) {
    goto LABEL_17;
  }
  int v5 = *result;
  do
  {
    double v6 = a2;
    int v7 = *a2;
    a2 += 16 * (v7 != v5);
    int v8 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  while (v7 != v5 && v8 != 0);
  if (v7 == v5)
  {
    int v10 = v6[16 * (v7 != v5) + 1];
    if (v10)
    {
      while (v8[1] != result[1] || v8[2] && (v8[2] != result[2] || *v8 && *v8 != a5))
      {
        v8 += 16;
        if (!(_BYTE)--v10) {
          goto LABEL_16;
        }
      }
      int v11 = 0;
      *a3 = v8;
    }
    else
    {
LABEL_16:
      int v11 = 5;
    }
  }
  else
  {
LABEL_17:
    int v11 = 4;
  }
  *a4 = v11;
  return result;
}

double plc00_05EncodeMsg(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned __int16 *a6, uint64_t a7, int a8)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *(_DWORD *)int __s = 0;
  __s[4] = 0;
  memset(&__s[6], 0, 139);
  char v37 = 0;
  uint64_t v30 = 0;
  memset_s(__s, 0x98uLL, 0, 0x98uLL);
  if ((int)a1 < 3)
  {
    __s[144] = *(unsigned char *)(a7 + 144);
    uint64_t v34 = a3;
    int v35 = 133955584;
    uint64_t v31 = a4;
    unsigned __int16 v32 = 8;
    plc00_07GetPayloadFieldsEnc(a1, a2, &v30, (int *)__s, a8);
    unsigned __int16 v17 = a5 - 1;
    __int16 v33 = a5 - 1;
    int v18 = *(_DWORD *)__s;
    uint64_t v19 = v30;
    if (!*(_DWORD *)__s && v30)
    {
      if ((*(_WORD *)(v30 + 4) & 0x1000) != 0) {
        __int16 v33 = a5 - 3;
      }
      plc00_13CodecProcess(0, (uint64_t)&v34, v30, (uint64_t)&v31, (uint64_t)__s);
      int v18 = *(_DWORD *)__s;
    }
    unsigned __int16 v20 = 0;
    if (!v18 && v19)
    {
      unsigned int v21 = v32;
      *a6 = v32;
      BOOL v22 = v21 >= 8;
      unsigned int v23 = v21 - 8;
      if (v23 != 0 && v22)
      {
        unsigned int v24 = *(unsigned __int16 *)(v19 + 4);
        int v25 = (v24 >> 11) & 2 | 1;
      }
      else
      {
        LOWORD(v23) = 0;
        unsigned int v24 = *(unsigned __int16 *)(v19 + 4);
        LOWORD(v25) = 1;
      }
      plc00_10EncodeHdrPlCs(a2, v31, v17, (unsigned __int16)v23, (v24 >> 12) & 1, (uint64_t)__s);
      unsigned __int16 v20 = v32 + v25;
    }
    *a6 = v20;
    long long v26 = *(_OWORD *)&__s[112];
    *(_OWORD *)(a7 + 96) = *(_OWORD *)&__s[96];
    *(_OWORD *)(a7 + 112) = v26;
    *(_OWORD *)(a7 + 128) = *(_OWORD *)&__s[128];
    *(unsigned char *)(a7 + 144) = __s[144];
    long long v27 = *(_OWORD *)&__s[48];
    *(_OWORD *)(a7 + 32) = *(_OWORD *)&__s[32];
    *(_OWORD *)(a7 + 48) = v27;
    long long v28 = *(_OWORD *)&__s[80];
    *(_OWORD *)(a7 + 64) = *(_OWORD *)&__s[64];
    *(_OWORD *)(a7 + 80) = v28;
    double result = *(double *)__s;
    long long v29 = *(_OWORD *)&__s[16];
    *(_OWORD *)a7 = *(_OWORD *)__s;
    *(_OWORD *)(a7 + 16) = v29;
  }
  else
  {
    *(_DWORD *)a7 = 51;
    *(_WORD *)(a7 + 6) = 0;
  }
  return result;
}

unsigned __int8 *plc00_07GetPayloadFieldsEnc(unsigned __int8 *result, unsigned __int8 *a2, void *a3, int *a4, int a5)
{
  int v9 = (int)result;
  if (result == 2) {
    goto LABEL_4;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
LABEL_4:
    double result = plc00_04GetPayloadFields(a2, g_ListAll_Host2Chip, a3, a4, a5);
    if (v9 != 1 && (v9 || !*a4)) {
      return result;
    }
  }

  return plc00_04GetPayloadFields(a2, g_ListAll_Chip2Host, a3, a4, a5);
}

unsigned char *plc00_10EncodeHdrPlCs(unsigned char *a1, uint64_t a2, int a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v13 = 0;
  char v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v22, 0, 27);
  v22[30] = 0;
  memset_s(&v13, 0x98uLL, 0, 0x98uLL);
  *(_DWORD *)a6 = 0;
  if (a4 && a5)
  {
    plc00_14AddPlCs((unsigned __int8 *)(a2 + 8), (unsigned __int16)(a3 - 8), a4);
    LOWORD(a4) = a4 + 2;
  }
  double result = plc02_01EncHeader(a1, (unsigned __int16)a4, a2, a3, (uint64_t)&v13);
  *(unsigned char *)(a2 + (unsigned __int16)a4 + 8) = 10;
  *(_DWORD *)a6 = v13;
  *(_WORD *)(a6 + 6) = 0;
  return result;
}

void *plc00_14AddPlCs(unsigned __int8 *a1, int a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a3)
  {
    __int16 v3 = 0;
    uint64_t v4 = a3;
    int v5 = a1;
    uint64_t v6 = a3;
    do
    {
      __int16 v7 = *v5++;
      v3 += v7;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
    __int16 v3 = 0;
  }
  __int16 __src = v3;
  return memcpy_s("plc00_14AddPlCs", 748, &a1[v4], a2 - a3, &__src, 2uLL);
}

BOOL plc00_15GetExtErrAsString(_DWORD *a1, char *__s, rsize_t __smax)
{
  unsigned int v3 = __smax;
  uint64_t v26 = *MEMORY[0x263EF8340];
  memset_s(__s, __smax, 0, __smax);
  if (v3 >= 0x104)
  {
    uint64_t v6 = a1 + 2;
    snprintf(__str, 0x40uLL, "ErrCode,%u", *a1);
    int v7 = strnlen(__str, 0x40uLL);
    memcpy_s("plc00_15GetExtErrAsString", 797, __s, 0x104u, __str, v7);
    uint64_t v8 = 0;
    __s[v7] = 32;
    __s[(v7 + 1)] = 58;
    __s[(v7 + 2)] = 32;
    unsigned __int8 v9 = v7 + 4;
    __s[(v7 + 3)] = 80;
    int v10 = v7 + 5;
    __s[v9] = 76;
    do
    {
      unsigned int v11 = *((unsigned __int8 *)v6 + v8);
      if (*((unsigned char *)v6 + v8))
      {
        unsigned int v12 = v11 & 0x3F;
        unsigned int v13 = v11 >> 6;
        __s[v10] = 45;
        __s[(v10 + 1)] = 62;
        if (v13 == 2) {
          char v14 = 85;
        }
        else {
          char v14 = 70;
        }
        if (v13 == 1) {
          char v15 = 65;
        }
        else {
          char v15 = v14;
        }
        __s[(v10 + 2)] = v15;
        __s[(v10 + 3)] = 40;
        if (v12 < 0xA)
        {
          int v16 = v10 + 4;
        }
        else
        {
          int v16 = v10 + 5;
          __s[(v10 + 4)] = ((unsigned __int16)(26 * v12) >> 8) | 0x30;
          LOBYTE(v12) = v12 - 10 * ((unsigned __int16)(26 * v12) >> 8);
        }
        __s[v16] = v12 + 48;
        int v10 = v16 + 2;
        __s[(v16 + 1)] = 41;
      }
      ++v8;
    }
    while (v8 != 8);
    long long v17 = (const char *)(a1 + 4);
    unsigned __int8 v18 = strnlen(v17, 0x80uLL);
    __s[v10] = 32;
    __s[(v10 + 1)] = 58;
    char v19 = v10 + 3;
    __s[(v10 + 2)] = 32;
    long long v20 = &__s[(v10 + 3)];
    unsigned int v21 = 260 - (v10 + 3);
    if (v18)
    {
      if (v18 >= 0x80u) {
        size_t v22 = 128;
      }
      else {
        size_t v22 = v18;
      }
      memcpy_s("plc00_15GetExtErrAsString", 877, v20, v21, v17, v22);
      unsigned __int8 v23 = v19 + v22;
    }
    else
    {
      memcpy_s("plc00_15GetExtErrAsString", 884, v20, v21, "NO ERROR DETAIL", 0xFuLL);
      unsigned __int8 v23 = v10 + 18;
    }
    __s[v23] = 0;
  }
  return v3 > 0x103;
}

BOOL send_is_supl_last_transaction(int a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = lpp_session_exists(a1);
  if (!v1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 69, "send_is_supl_last_transaction", 2052);
      uint64_t v4 = 1;
      LbsOsaTrace_WriteLog(0x13u, __str, v6, 0, 1);
      return v4;
    }
    return 1;
  }
  uint64_t v2 = **(uint64_t ***)(v1 + 40);
  if (!v2) {
    return 1;
  }
  char v3 = 0;
  do
  {
    if (*((unsigned char *)v2 + 25) == 1) {
      char v3 = 1;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }
  while (v2);
  return v3 != 1;
}

void send_supl_caps_rsp(int a1, int a2, int a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 73, "send_supl_caps_rsp", a1, a2);
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 4, 1);
  }
  BOOL v11 = a2 != 0;
  *(_DWORD *)__str = a1;
  unsigned int v13 = a4;
  int v12 = a3;
  BOOL is_supl_last_transaction = send_is_supl_last_transaction(a1);
  HandleLppCapsResponse((uint64_t)__str);
  if (a4) {
    free(a4);
  }
}

void send_supl_pos_ind(int a1, int a2, int a3, void *a4, char a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 73, "send_supl_pos_ind", a1, a2);
    LbsOsaTrace_WriteLog(0x13u, __str, v11, 4, 1);
  }
  BOOL v15 = a2 != 0;
  int v16 = a1;
  *(_DWORD *)__str = a3;
  unsigned int v13 = a4;
  char v17 = a5;
  BOOL is_supl_last_transaction = send_is_supl_last_transaction(a1);
  HandleLppPosResponse((int *)__str);
  if (a4) {
    free(a4);
  }
}

void send_lpm_supl_ad_rsp(int a1, int a2, unsigned int *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 73, "send_lpm_supl_ad_rsp", a1, a2);
    LbsOsaTrace_WriteLog(0x13u, __str, v7, 4, 1);
  }
  if (a2)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
  }
  else
  {
    uint64_t v8 = gnssOsa_Calloc("posp_alloc", 18, 1, *a3);
    memcpy_s("send_lpm_supl_ad_rsp", 92, v8, *a3, *((const void **)a3 + 1), *a3);
    unsigned int v9 = *a3;
  }
  BOOL v13 = a2 != 0;
  int v12 = v8;
  *(_DWORD *)__str = a1;
  unsigned int v11 = v9;
  BOOL is_supl_last_transaction = send_is_supl_last_transaction(a1);
  HandleLppAdResponse((uint64_t)__str);
  if (v8) {
    free(v8);
  }
}

uint64_t PERDecode(unsigned int *a1, unsigned __int8 *a2, int *a3)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t result = *a1;
  if (!result)
  {
    int v7 = setjmp((int *)a1 + 1);
    *((unsigned char *)a1 + 196) = 1;
    if (v7)
    {
      MMSRelease((uint64_t)a1);
    }
    else
    {
      *a1 = 0;
      v16[0] = 0;
      *((void *)a1 + 25) = a2;
      *((void *)a1 + 89) = 1;
      *((void *)a1 + 130) = a2;
      *((void *)a1 + 131) = a3;
      uint64_t v8 = (*((uint64_t (**)(unsigned int *, void *))a1 + 106))(a1, v16);
      *((void *)a1 + 134) = v8;
      *((void *)a1 + 135) = v8 + v16[0];
      uint64_t v9 = (*((uint64_t (**)(unsigned int *, unsigned int *))a1 + 110))(a1, a1 + 276);
      *((void *)a1 + 136) = v9;
      if (*((unsigned char *)a1 + 1104) != 7) {
        *((void *)a1 + 136) = v9 + 1;
      }
      uint64_t v10 = (*((uint64_t (**)(unsigned int *, uint64_t))a1 + 108))(a1, (uint64_t)a1 + 1105);
      *((void *)a1 + 137) = v10;
      uint64_t v11 = *((unsigned __int8 *)a1 + 1105);
      if ((*((unsigned char *)a1 + 1057) & 8) == 0) {
        *((void *)a1 + 132) = 2080;
      }
      uint64_t v12 = v11;
      *((void *)a1 + 139) = 0;
      PERDecVal((size_t)a1, a2, (uint64_t)a3, 0);
      if (*((void *)a1 + 137) == v10 && *((unsigned __int8 *)a1 + 1105) == v12) {
        PERGetByte((uint64_t)a1);
      }
      if ((a1[264] & 0x10) != 0)
      {
        char v14 = (unsigned char *)*((void *)a1 + 137);
        uint64_t v15 = *((unsigned __int8 *)a1 + 1105);
      }
      else
      {
        int v13 = *((unsigned __int8 *)a1 + 1105);
        char v14 = (unsigned char *)*((void *)a1 + 137);
        if (v13 != 7)
        {
          *v14 &= -2 << v13;
          char v14 = (unsigned char *)(*((void *)a1 + 137) + 1);
          *((void *)a1 + 137) = v14;
          *((unsigned char *)a1 + 1105) = 7;
        }
        uint64_t v15 = 7;
      }
      (*((void (**)(unsigned int *, unsigned char *, uint64_t))a1 + 109))(a1, &v14[-v10], v15);
      *((void *)a1 + 133) = v12 - *((unsigned __int8 *)a1 + 1105) + 8 * (*((void *)a1 + 137) - v10);
      SDLFinalizeValue((uint64_t)a1, a2, a3);
    }
    *((unsigned char *)a1 + 196) = 0;
    return *a1;
  }
  return result;
}

uint64_t lsim26_01HandleInitCalibReq(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim26_01HandleInitCalibReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_INIT_CALIB_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim26_01HandleInitCalibReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_GnsXOCallback)
  {
    uint64_t v6 = gnssOsa_Calloc("lsim26_01HandleInitCalibReq", 50, 1, 4uLL);
    if (v6)
    {
      int v7 = v6;
      memcpy_s("lsim26_01HandleInitCalibReq", 60, v6, 1u, (const void *)(a1 + 12), 1uLL);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:INIT_CAL_REQ =>XoCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim26_01HandleInitCalibReq");
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
      }
      g_GnsXOCallback(0, 4, v7);
      free(v7);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
LABEL_28:
        bzero(__str, 0x410uLL);
        unint64_t v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v24, "LSM", 73, "lsim26_01HandleInitCalibReq");
        LbsOsaTrace_WriteLog(0xCu, __str, v25, 4, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitCalReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 69, "lsim26_01HandleInitCalibReq", 1537);
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XoCal\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 87, "lsim26_01HandleInitCalibReq", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim26_02InitCalibErrRsp");
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    char v14 = gnssOsa_Calloc("lsim26_02InitCalibErrRsp", 78, 1, 0x50uLL);
    if (v14)
    {
      uint64_t v15 = v14;
      v14[3] = 12;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_CALIB_RSP =>GNM,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "lsim26_02InitCalibErrRsp", v15[3]);
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
      }
      AgpsSendFsmMsg(131, 128, 8604420, v15);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitCalRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 69, "lsim26_02InitCalibErrRsp", 1537);
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "lsim26_02InitCalibErrRsp");
      LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      goto LABEL_28;
    }
  }
  return 0;
}

size_t lsim26_03XoCbInit(size_t result)
{
  uint64_t v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsXOCallback)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim26_03XoCbInit", 513);
      uint64_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsXOCallback = v1;
    return result;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim26_03XoCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_XOSetCallback(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_XOSetCallback", 124, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[3] = 13;
  *((void *)v2 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v2);
  return 1;
}

uint64_t GNS_XOInitCalInd(const void *a1, const void *a2, const void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_XOInitCalInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_18;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitCal\n");
LABEL_17:
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    goto LABEL_18;
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_18;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CurrSrcCal\n");
    goto LABEL_17;
  }
  if (a3)
  {
    uint64_t v8 = (char *)gnssOsa_Calloc("GNS_XOInitCalInd", 185, 1, 0x50uLL);
    if (v8)
    {
      unsigned __int16 v9 = v8;
      uint64_t v10 = v8 + 12;
      memcpy_s("GNS_XOInitCalInd", 195, v8 + 12, 0x2Cu, a1, 0x2CuLL);
      memcpy_s("GNS_XOInitCalInd", 196, v9 + 56, 0x12u, a2, 0x12uLL);
      memcpy_s("GNS_XOInitCalInd", 197, v9 + 74, 4u, a3, 4uLL);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_CALIB_RSP =>GNM,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 77, "GNS_XOInitCalInd", *v10);
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 3, 1);
      }
      AgpsSendFsmMsg(131, 128, 8604420, v9);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "GNS_XOInitCalInd");
        uint64_t v15 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v20 = mach_continuous_time();
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XoInitCal\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 87, "GNS_XOInitCalInd", 1537);
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 2, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "GNS_XOInitCalInd");
        LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
      }
      return 6;
    }
    return v15;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AdcPreCal\n");
    goto LABEL_17;
  }
LABEL_18:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GNS_XOInitCalInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  return 2;
}

uint64_t GNS_XOLearntCurveInd()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XoLearntCurve\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 87, "GNS_XOLearntCurveInd", 1026);
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 2, 1);
  }
  return 3;
}

uint64_t Is_GN_API_Set_Allowed(const char *a1)
{
  uint64_t v1 = *(int *)p_api;
  if (v1 > 7 || ((0x93u >> v1) & 1) == 0) {
    return 1;
  }
  EvCrt_v("%s:  FAILED:  Not allowed when in \"%s\" Mode", a1, off_2648B2528[v1]);
  return 0;
}

BOOL API_Set_Inter_Chan_Bias_Model(unsigned __int16 a1, unsigned int a2)
{
  if (a2 >= 6) {
    EvCrt_d("API_Set_Inter_Chan_Bias_Model:  FAILED  Illegal ME RF Type", a2);
  }
  else {
    Init_Set_Inter_Chan_Bias(*(char **)(p_api + 72), a2);
  }
  return a2 < 6;
}

uint64_t API_Set_TSX_ClkCorr_Params(double a1, double a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 >= 0xFA1)
    {
      __int16 v5 = 4000;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d capped to %d ppb");
LABEL_6:
      LOWORD(a3) = v5;
      goto LABEL_7;
    }
    if (a3 <= 0xAE)
    {
      __int16 v5 = 175;
      EvLog_v("API_Set_TSX_ClkCorr_Params: Offset Unc %d increased to %d ppb");
      goto LABEL_6;
    }
  }
LABEL_7:
  uint64_t v6 = *(void *)(p_api + 72);
  *(double *)(v6 + 232) = a1;
  *(double *)(v6 + 240) = a2;
  *(_WORD *)(v6 + 248) = a3;
  return 1;
}

BOOL API_Set_Config(uint64_t a1)
{
  v15[1] = *(double *)MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = *(void *)(p_api + 72);
    *(_DWORD *)(v2 + 24) = *(_DWORD *)(a1 + 12);
    *(unsigned char *)(v2 + 28) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(v2 + 72) = *(unsigned char *)(a1 + 17);
    int v3 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(v2 + 12) = v3;
    *(unsigned char *)(v2 + 73) = 0;
    if (v3 == 1 || v3 == 2) {
      *(unsigned char *)(v2 + 73) = v3;
    }
    if (*(_DWORD *)a1 == 1)
    {
      *(void *)(v2 + 4) = 0x100000001;
    }
    else if (*(_DWORD *)a1)
    {
      *(_DWORD *)(v2 + 4) = 2;
    }
    else
    {
      *(_DWORD *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
    }
    *(unsigned char *)(v2 + 66) = 4 * *(unsigned char *)(a1 + 32);
    API_Set_FixInterval(*(unsigned __int16 *)(a1 + 34));
    *(void *)(v2 + 1012) = *(void *)(a1 + 36);
    *(_WORD *)(v2 + 1020) = *(_WORD *)(a1 + 44);
    *(_DWORD *)(v2 + 1052) = 60000 * *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(v2 + 1024) = *(_WORD *)(a1 + 58);
    unsigned int v4 = *(unsigned __int16 *)(a1 + 60);
    if (v4 < 0x400) {
      LOWORD(v4) = 1930;
    }
    *(_WORD *)(v2 + 1026) = v4;
    *(_WORD *)(v2 + 41) = *(_WORD *)(a1 + 28);
    *(unsigned char *)(v2 + 39) = *(unsigned char *)(a1 + 26);
    *(void *)(v2 + 31) = *(void *)(a1 + 18);
    *(unsigned char *)(v2 + 40) = *(unsigned char *)(a1 + 27);
    *(_WORD *)(v2 + 1028) = *(_WORD *)(a1 + 62);
    *(unsigned char *)(v2 + 43) = *(unsigned char *)(a1 + 30);
    *(unsigned char *)(v2 + 46) = *(unsigned char *)(a1 + 31);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(a1 + 4);
    int v5 = *(unsigned __int8 *)(a1 + 46);
    if (v5 == 255) {
      int v6 = -1;
    }
    else {
      int v6 = 60000 * v5;
    }
    *(_DWORD *)(v2 + 1060) = v6;
    *(void *)(v2 + 1120) = *(void *)(a1 + 88);
    *(_WORD *)(v2 + 1132) = *(_WORD *)(a1 + 96);
    *(unsigned char *)(v2 + 1134) = *(unsigned char *)(a1 + 98);
    g_Enable_Nav_Debug = *(_WORD *)(a1 + 50);
    g_Enable_GNB_Debug = *(_WORD *)(a1 + 52);
    g_Enable_Event_Log = *(_WORD *)(a1 + 54);
    g_Enable_LCD_Debug = *(_WORD *)(a1 + 56);
    v15[0] = 0.0;
    if (!R8_EQ((const double *)(a1 + 64), v15)
      || (double v14 = 0.0, !R8_EQ((const double *)(a1 + 72), &v14))
      || (uint64_t v13 = 0, !R8_EQ((const double *)(a1 + 80), (const double *)&v13)))
    {
      unsigned __int16 v7 = *(__double2 **)(p_api + 176);
      v7[1689].__double cosval = *(double *)(a1 + 64) * 0.0174532925;
      v7[1690].__sinval = *(double *)(a1 + 72) * 0.0174532925;
      v7[1690].__double cosval = *(double *)(a1 + 80);
      Geo2ECEF((uint64_t)&v7[1689].__cosval, (uint64_t)&WGS84_Datum, &v7[1688].__sinval);
      __double2 v8 = __sincos_stret(v7[1689].__cosval);
      v7[1691] = v8;
      double v9 = 1.0 / sqrt(v8.__sinval * v8.__sinval * -0.00669437999 + 1.0);
      double cosval = v7[1690].__cosval;
      double v11 = v8.__cosval * (cosval + v9 * 6378137.0);
      if (v11 < 1.0) {
        double v11 = 1.0;
      }
      v7[1692].__double cosval = v11;
      v7[1692].__sinval = cosval + v9 * (v9 * v9) * 6335439.33;
    }
  }
  return a1 != 0;
}

uint64_t API_Set_FixInterval(int a1)
{
  uint64_t v2 = *(void *)(p_api + 72);
  int v3 = *(_DWORD *)(v2 + 952);
  if (!v3)
  {
    int v4 = *(_DWORD *)(v2 + 948);
    if (a1 == (unsigned __int16)v4) {
      return 1;
    }
    int v5 = *(_DWORD *)p_api;
    if (*(_DWORD *)p_api <= 0xBu)
    {
      if (((1 << v5) & 0xE48) != 0)
      {
        unsigned __int16 v7 = *(_DWORD **)(p_api + 160);
        int v8 = v7[117];
        int v9 = v7[134];
        int v10 = v7[112];
        if ((int)(v9
                 + v8
                 - v10
                 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())) > 99)
        {
          int v11 = v7[134] + a1 - *(_DWORD *)(v2 + 948);
          EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int %d %d", *(_DWORD *)p_api, *(_DWORD *)(v2 + 948), a1);
          *(_DWORD *)(v2 + 948) = a1;
          v7[134] = v11;
          G5K_ME_enc_n(*(char ***)(p_api + 352), v11, a1);
          GNSS_Write_GNB_Ctrl(*(char ***)(p_api + 352));
          return 1;
        }
        int v5 = *(_DWORD *)p_api;
        int v4 = *(_DWORD *)(v2 + 948);
      }
      else if (((1 << v5) & 0x93) != 0)
      {
        int v6 = 0;
LABEL_14:
        EvLog_v("API_Set_FixInterval:  GNSS_Exe_State NOT RUNNING(%d) Fix_Int %d %d", v5, v6, a1);
        *(_DWORD *)(v2 + 948) = a1;
        *(_DWORD *)(v2 + 952) = 0;
        return 1;
      }
      *(_DWORD *)(v2 + 952) = a1;
      EvLog_v("API_Set_FixInterval:  GNSS_Exe_State   RUNNING(%d) Fix_Int To Be Updated %d %d", v5, v4, a1);
      return 1;
    }
    EvCrt_Illegal_Default("API_Set_FixInterval", 0x2F2u);
    int v5 = *(_DWORD *)p_api;
    int v6 = *(_DWORD *)(v2 + 952);
    goto LABEL_14;
  }
  if (a1 != (unsigned __int16)v3)
  {
    EvLog_v("API_Set_FixInterval:  Fix_Int Update Pending %d %d", *(_DWORD *)(v2 + 952), a1);
    *(_DWORD *)(v2 + 952) = a1;
  }
  return 1;
}

BOOL API_Query_Config(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v1 = p_api;
    uint64_t v2 = *(void *)(p_api + 72);
    int v3 = *(_DWORD *)(v2 + 4);
    if (v3 == 1) {
      int v4 = 1;
    }
    else {
      int v4 = 2;
    }
    if (v3) {
      int v5 = v4;
    }
    else {
      int v5 = 0;
    }
    int v6 = *(_DWORD *)(v2 + 68);
    *(_DWORD *)a1 = v5;
    *(_DWORD *)(a1 + 4) = v6;
    int v7 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(a1 + 12) = v7;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(v2 + 28);
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(v2 + 72) == 1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(v2 + 39);
    *(unsigned char *)(a1 + 27) = *(unsigned char *)(v2 + 40);
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(v2 + 41);
    *(void *)(a1 + 18) = *(void *)(v2 + 31);
    *(_WORD *)(a1 + 29) = *(_WORD *)(v2 + 42);
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(v2 + 46);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(v2 + 66) != 0;
    uint64_t v8 = *(void *)(v1 + 72);
    int v9 = *(_DWORD *)(v8 + 952);
    if (!v9) {
      int v9 = *(_DWORD *)(v8 + 948);
    }
    *(_WORD *)(a1 + 34) = v9;
    *(void *)(a1 + 36) = *(void *)(v2 + 1012);
    *(_WORD *)(a1 + 44) = *(_WORD *)(v2 + 1020);
    uint64_t v10 = *(unsigned int *)(v2 + 1060);
    if (v10 == 0xFFFFFFFFLL) {
      char v11 = -1;
    }
    else {
      char v11 = v10 / 0xEA60;
    }
    *(unsigned char *)(a1 + 46) = v11;
    *(_WORD *)(a1 + 48) = *(_DWORD *)(v2 + 1052) / 0xEA60u;
    *(_WORD *)(a1 + 58) = *(_WORD *)(v2 + 1024);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v2 + 1026);
    *(void *)(a1 + 88) = *(void *)(v2 + 1120);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(v2 + 1132);
    *(_WORD *)(a1 + 97) = *(_WORD *)(v2 + 1133);
    *(_WORD *)(a1 + 50) = g_Enable_Nav_Debug;
    *(_WORD *)(a1 + 52) = g_Enable_GNB_Debug;
    *(_WORD *)(a1 + 54) = g_Enable_Event_Log;
    *(_WORD *)(a1 + 56) = g_Enable_LCD_Debug;
    uint64_t v12 = *(void *)(v1 + 176);
    *(double *)(a1 + 64) = *(double *)(v12 + 27032) * 57.2957795;
    *(double *)(a1 + 72) = *(double *)(v12 + 27040) * 57.2957795;
    *(void *)(a1 + 80) = *(void *)(v12 + 27048);
  }
  return a1 != 0;
}

uint64_t API_Set_Inhib_SVID(BOOL *a1, BOOL *a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = *(void *)(p_api + 72);
  uint64_t v7 = *(void *)(p_api + 96);
  long long v8 = *((_OWORD *)a1 + 2);
  long long v9 = *((_OWORD *)a1 + 3);
  long long v10 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v6 + 253) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 285) = v8;
  *(_OWORD *)(v6 + 301) = v9;
  *(_OWORD *)(v6 + 269) = v10;
  long long v11 = *((_OWORD *)a1 + 7);
  long long v13 = *((_OWORD *)a1 + 4);
  long long v12 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v6 + 349) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(v6 + 365) = v11;
  *(_OWORD *)(v6 + 317) = v13;
  *(_OWORD *)(v6 + 333) = v12;
  long long v15 = *((_OWORD *)a1 + 9);
  long long v14 = *((_OWORD *)a1 + 10);
  long long v16 = *((_OWORD *)a1 + 8);
  *(_WORD *)(v6 + 429) = *((_WORD *)a1 + 88);
  *(_OWORD *)(v6 + 397) = v15;
  *(_OWORD *)(v6 + 413) = v14;
  *(_OWORD *)(v6 + 381) = v16;
  int v17 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v6 + 432) + v4)) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    v5 |= v18;
    v17 *= 2;
    ++v4;
  }
  while (v4 != 32);
  uint64_t v19 = 0;
  int v20 = 0;
  int v21 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v6 + 448) + v19)) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    v20 |= v22;
    v21 *= 2;
    ++v19;
  }
  while (v19 != 10);
  uint64_t v23 = 0;
  int v24 = 0;
  int v25 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v6 + 440) + v23)) {
      int v26 = v25;
    }
    else {
      int v26 = 0;
    }
    v24 |= v26;
    v25 *= 2;
    ++v23;
  }
  while (v23 != 24);
  uint64_t v27 = 0;
  int v28 = 0;
  int v29 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v6 + 456) + v27)) {
      int v30 = v29;
    }
    else {
      int v30 = 0;
    }
    v28 |= v30;
    v29 *= 2;
    ++v27;
  }
  while (v27 != 39);
  uint64_t v31 = 0;
  int v32 = 0;
  int v33 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v6 + 464) + v31)) {
      int v34 = v33;
    }
    else {
      int v34 = 0;
    }
    v32 |= v34;
    v33 *= 2;
    ++v31;
  }
  while (v31 != 37);
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v37 = *(void *)(v6 + 472);
  int v38 = 1;
  do
  {
    if (*(unsigned char *)(v37 + v35)) {
      int v39 = v38;
    }
    else {
      int v39 = 0;
    }
    v36 |= v39;
    v38 *= 2;
    ++v35;
  }
  while (v35 != 36);
  EvLog_v("API_Set_Inhib_SVID: G %x Q %x R %x S %X B %X E %X", v5, v20, v24, v28, v32, v36);
  unint64_t v40 = 0;
  uint64_t v41 = *(void *)(p_api + 56);
  do
  {
    if (a1[v40])
    {
      uint64_t v42 = v40;
      if (v40 >= 0x8B)
      {
        uint64_t v44 = (unsigned __int8 *)(v7 + 26868);
        uint64_t v42 = 139;
        while (1)
        {
          int v45 = *v44;
          v44 += 192;
          if (v40 - 19 == v45) {
            break;
          }
          if (++v42 == 149) {
            goto LABEL_40;
          }
        }
      }
      *(_DWORD *)(v7 + 192 * v42 + 184) = 0;
LABEL_40:
      int v43 = 2;
    }
    else
    {
      if (!a2[v40]) {
        goto LABEL_42;
      }
      int v43 = 1;
    }
    *(_DWORD *)(v41 + 20 * v40 + 33796) = v43;
LABEL_42:
    ++v40;
  }
  while (v40 != 178);
  return 1;
}

uint64_t API_Set_Not_Broadcast_SVID(BOOL *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  uint64_t v3 = *(void *)(p_api + 72);
  long long v4 = *((_OWORD *)a1 + 3);
  long long v6 = *(_OWORD *)a1;
  long long v5 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v3 + 512) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v3 + 528) = v4;
  *(_OWORD *)(v3 + 480) = v6;
  *(_OWORD *)(v3 + 496) = v5;
  long long v7 = *((_OWORD *)a1 + 7);
  long long v9 = *((_OWORD *)a1 + 4);
  long long v8 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v3 + 576) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(v3 + 592) = v7;
  *(_OWORD *)(v3 + 544) = v9;
  *(_OWORD *)(v3 + 560) = v8;
  long long v11 = *((_OWORD *)a1 + 9);
  long long v10 = *((_OWORD *)a1 + 10);
  long long v12 = *((_OWORD *)a1 + 8);
  *(_WORD *)(v3 + 656) = *((_WORD *)a1 + 88);
  *(_OWORD *)(v3 + 624) = v11;
  *(_OWORD *)(v3 + 640) = v10;
  *(_OWORD *)(v3 + 608) = v12;
  int v13 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v3 + 664) + v1)) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    v2 |= v14;
    v13 *= 2;
    ++v1;
  }
  while (v1 != 32);
  uint64_t v15 = 0;
  int v16 = 0;
  int v17 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v3 + 680) + v15)) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    v16 |= v18;
    v17 *= 2;
    ++v15;
  }
  while (v15 != 10);
  uint64_t v19 = 0;
  int v20 = 0;
  int v21 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v3 + 672) + v19)) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    v20 |= v22;
    v21 *= 2;
    ++v19;
  }
  while (v19 != 24);
  uint64_t v23 = 0;
  int v24 = 0;
  int v25 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v3 + 688) + v23)) {
      int v26 = v25;
    }
    else {
      int v26 = 0;
    }
    v24 |= v26;
    v25 *= 2;
    ++v23;
  }
  while (v23 != 39);
  uint64_t v27 = 0;
  int v28 = 0;
  int v29 = 1;
  do
  {
    if (*(unsigned char *)(*(void *)(v3 + 696) + v27)) {
      int v30 = v29;
    }
    else {
      int v30 = 0;
    }
    v28 |= v30;
    v29 *= 2;
    ++v27;
  }
  while (v27 != 37);
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v33 = *(void *)(v3 + 704);
  int v34 = 1;
  do
  {
    if (*(unsigned char *)(v33 + v31)) {
      int v35 = v34;
    }
    else {
      int v35 = 0;
    }
    v32 |= v35;
    v34 *= 2;
    ++v31;
  }
  while (v31 != 36);
  EvLog_v("API_Set_Not_Broadcast_SVID: G %x Q %x R %x S %X B %X E %X", v2, v16, v20, v24, v28, v32);
  return 1;
}

uint64_t API_Set_RTI_Bad_SV_List(BOOL *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = p_api;
  uint64_t v3 = *(void *)(p_api + 72);
  long long v4 = *((_OWORD *)a1 + 2);
  long long v5 = *((_OWORD *)a1 + 3);
  long long v6 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v3 + 253) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 285) = v4;
  *(_OWORD *)(v3 + 301) = v5;
  *(_OWORD *)(v3 + 269) = v6;
  long long v7 = *((_OWORD *)a1 + 7);
  long long v9 = *((_OWORD *)a1 + 4);
  long long v8 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v3 + 349) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(v3 + 365) = v7;
  *(_OWORD *)(v3 + 317) = v9;
  *(_OWORD *)(v3 + 333) = v8;
  long long v11 = *((_OWORD *)a1 + 9);
  long long v10 = *((_OWORD *)a1 + 10);
  long long v12 = *((_OWORD *)a1 + 8);
  *(_WORD *)(v3 + 429) = *((_WORD *)a1 + 88);
  *(_OWORD *)(v3 + 397) = v11;
  *(_OWORD *)(v3 + 413) = v10;
  *(_OWORD *)(v3 + 381) = v12;
  uint64_t v13 = *(void *)(v2 + 56) + 33800;
  uint64_t v14 = v3;
  do
  {
    if (*(unsigned char *)(v14 + 253))
    {
      *(unsigned char *)(v14 + 712) = 1;
      int v15 = 2;
    }
    else
    {
      int v15 = 1;
    }
    *(_DWORD *)(v13 + v1) = v15;
    v1 += 20;
    ++v14;
  }
  while (v1 != 3560);
  uint64_t v16 = *(void *)(v3 + 1040);
  if (v16 > 0) {
    Core_Save_Inhib_EE((BOOL *)(v3 + 712), v16);
  }
  return 1;
}

uint64_t API_Get_Est_ME_TTick(void)
{
  uint64_t v0 = *(int **)(p_api + 8);
  if (!*v0) {
    return 0;
  }
  int v2 = v0[4];
  int v1 = *v0;
  return v1
       - v2
       + (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
}

BOOL API_Get_FS_Pulse_TTick(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  long long v4 = *(unsigned int **)(p_api + 8);
  *a3 = *v4;
  *a1 = v4[1];
  *a2 = v4[2];
  unsigned int v5 = v4[4];
  *a4 = v5;
  int v6 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*a2 > 0x10000)
  {
    EvLog_v("API_Get_FS_Pulse_TTick:  FS_TTick_Fract = %u, out of range!", *a2);
    return 0;
  }
  int v9 = *a3 - v6;
  BOOL v7 = v9 < 60001;
  if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
    EvLog_v("API_Get_FS_Pulse_TTick:  valid %d,  age %d,  (%u, %u, %u, %u)", v9 < 60001, *a3 - v6, *a3, v6, *a2, v5);
  }
  if (v9 < 60001 != v9 < 63001) {
    EvCrt_v("API_Get_FS_Pulse_TTick:  Pulse invalidated, %d > 60s old", v9);
  }
  return v7;
}

uint64_t API_Get_TM_FSP_OS_Time_ms_for_TTick(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)unsigned int v5 = 0;
  int TM_FSP_Time = Core_Get_TM_FSP_Time(&v5[1], v5);
  uint64_t result = 0;
  if (TM_FSP_Time)
  {
    if (v5[1]) {
      BOOL v4 = v5[0] == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return v5[1] + a1 - v5[0];
    }
  }
  return result;
}

uint64_t API_Get_Num_SV_and_Clock_Unknowns(unsigned int *a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  int v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(p_api + 88);
  uint64_t v8 = v7 + 1496;
  do
  {
    int v9 = *(_DWORD *)(v8 + 4 * v2 - 528);
    if (Is_Legal(v9) && *(unsigned char *)(v8 + v2))
    {
      uint64_t v6 = (v6 + 1);
      switch((char)v9)
      {
        case 0:
        case 6:
          break;
        case 1:
        case 3:
        case 5:
          int v5 = 1;
          break;
        case 2:
          int v4 = 1;
          break;
        case 4:
          int v3 = 1;
          break;
        default:
          EvCrt_Illegal_Default("API_Get_Num_SV_and_Clock_Unknowns", 0x5FCu);
          break;
      }
    }
    ++v2;
  }
  while (v2 != 48);
  int v10 = v5;
  if (v5) {
    int v11 = 2;
  }
  else {
    int v11 = 1;
  }
  if (v4) {
    int v10 = v11;
  }
  unsigned int v12 = v10 + (v3 & 1);
  if (v12 > 1)
  {
    if (((*(unsigned char *)(v7 + 462) != 0) & v5 & v4) == 1)
    {
      if (v12 - 3 > 0xFFFFFFFD) {
        goto LABEL_24;
      }
      unsigned int v12 = 2;
    }
    if (((*(unsigned char *)(v7 + 463) != 0) & v5 & v3) != 1) {
      goto LABEL_22;
    }
    if (v12 - 3 <= 0xFFFFFFFD)
    {
      unsigned int v12 = 2;
LABEL_22:
      if (((*(unsigned char *)(v7 + 464) != 0) & v4) == 1) {
        v12 -= v3 & 1;
      }
      goto LABEL_25;
    }
LABEL_24:
    unsigned int v12 = 1;
  }
LABEL_25:
  if (*(int *)(v7 + 48) < 8) {
    ++v12;
  }
  *a1 = v12;
  return v6;
}

uint64_t API_Get_Fix_Reliability(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = *(void *)(p_api + 88);
  uint64_t v1 = *(void *)(p_api + 232);
  int v7 = 0;
  int Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)&v7);
  if (*(double *)(v0 + 760) <= 10.0) {
    int v3 = -3;
  }
  else {
    int v3 = -4;
  }
  int v4 = v3 + Num_SV_and_Clock_Unknowns - v7;
  if (*(unsigned char *)(v1 + 22992)
    && !*(unsigned char *)(v1 + 23008)
    && *(_DWORD *)(v1 + 22996) == 1
    && *(double *)(v1 + 23040) <= 160000.0
    && (*(_DWORD *)(v1 + 23000) - 3) < 2
    || *(unsigned char *)(v1 + 23848)
    && !*(unsigned char *)(v1 + 23864)
    && *(_DWORD *)(v1 + 23852) == 1
    && *(double *)(v1 + 23896) <= 160000.0)
  {
    v4 += 2;
  }
  if (*(unsigned char *)(v1 + 23120)
    && !*(unsigned char *)(v1 + 23136)
    && *(_DWORD *)(v1 + 23124) == 1
    && *(double *)(v1 + 23152) <= 160000.0
    && (*(_DWORD *)(v1 + 23000) - 3) < 2)
  {
    ++v4;
  }
  if (v4 == 2) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v4 == 3) {
    unsigned int v5 = 3;
  }
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v5;
  }
}

void *API_Get_Dbg_Constell_ME_Data(void *result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(p_api + 104);
  uint64_t v8 = *(char **)(p_api + 160);
  int v9 = *(unsigned char **)(p_api + 72);
  switch((int)result)
  {
    case 1:
      if (v9[31])
      {
        int v10 = v8 + 410;
        int v11 = -1;
        unsigned int v12 = 32;
        goto LABEL_15;
      }
      break;
    case 2:
      if (v9[32])
      {
        int v10 = v8 + 414;
        int v11 = -1;
        unsigned int v12 = 24;
        goto LABEL_15;
      }
      break;
    case 3:
      if (v9[36])
      {
        int v10 = v8 + 418;
        int v11 = -1;
        unsigned int v12 = 36;
        goto LABEL_15;
      }
      break;
    case 4:
      if (v9[35])
      {
        int v10 = v8 + 422;
        int v11 = -1;
        unsigned int v12 = 37;
        goto LABEL_15;
      }
      break;
    case 5:
      if (v9[33])
      {
        int v10 = v8 + 410;
        int v11 = -193;
        unsigned int v12 = 10;
LABEL_15:
        char v13 = *v10;
        goto LABEL_16;
      }
      break;
    case 6:
      if (v9[34])
      {
        char v13 = 0;
        int v11 = -120;
        unsigned int v12 = 39;
LABEL_16:
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        int v17 = 0;
        *(unsigned char *)(a2 + 17) = v13;
        memset(v44, 0, sizeof(v44));
        memset(v43, 0, sizeof(v43));
        uint64_t v18 = 604;
        memset(v42, 0, sizeof(v42));
        __int16 v45 = 0;
        do
        {
          if (*(unsigned __int8 *)(v7 + v14 + 76) == result)
          {
            unsigned int v19 = v11 + *(unsigned __int8 *)(v7 + v14 + 78);
            if (v19 < v12)
            {
              int v20 = *(_DWORD *)(v7 + v14 + 412);
              BOOL v21 = v20 > 9 || v20 == 8;
              if (v21)
              {
                ++*((unsigned char *)v44 + v19);
                ++*(_WORD *)(a2 + 2);
                int v22 = (unsigned char *)(v7 + v18);
                LOBYTE(a5) = *(unsigned char *)(v7 + v18);
                LOBYTE(a6) = *(unsigned char *)(v7 + v18 + 48);
                *(double *)&unint64_t v23 = (double)*(unint64_t *)&a6;
                unint64_t v24 = 0x3FB0000000000000;
                double v25 = (double)*(unint64_t *)&a5 + *(double *)&v23 * 0.0625;
                *((double *)v43 + v17) = v25;
                LOBYTE(v25) = *(unsigned char *)(v7 + v18 + 96);
                LOBYTE(v23) = *(unsigned char *)(v7 + v18 + 144);
                double v26 = (double)*(unint64_t *)&v25 + (double)v23 * 0.0625;
                *((double *)v42 + v17) = v26;
                if (!*(unsigned char *)a2) {
                  *(unsigned char *)a2 = 1;
                }
                unsigned int v27 = *(unsigned __int16 *)(v7 + v15 + 316);
                unsigned int v28 = (v27 >> 8) & 3;
                if (*(unsigned __int8 *)(a2 + 4) < v28) {
                  *(unsigned char *)(a2 + 4) = v28;
                }
                if ((v27 & 8) != 0)
                {
                  if ((v27 & 0xC0) != 0)
                  {
                    int v29 = (unsigned __int16 *)(v7 + 2 * v16 + 1036);
                  }
                  else
                  {
                    BOOL v21 = (v27 & 0x30) == 0;
                    int v29 = (unsigned __int16 *)(v7 + v15 + 844);
                    if (!v21) {
                      int v29 = (unsigned __int16 *)(v7 + 2 * v16 + 940);
                    }
                  }
                }
                else
                {
                  int v29 = (unsigned __int16 *)(v7 + 2 * v16 + 844);
                }
                unsigned int v30 = *v29;
                if (*(unsigned __int16 *)(a2 + 8) < v30) {
                  *(_WORD *)(a2 + 8) = v30;
                }
                LOWORD(v26) = *(_WORD *)(a2 + 10);
                double v31 = (double)*(unint64_t *)&v26;
                LOBYTE(v26) = v22[96];
                LOBYTE(v24) = v22[144];
                double v32 = (double)v24;
                double v33 = (double)*(unint64_t *)&v26 + v32 * 0.0625;
                if (v33 > v31)
                {
                  *(_WORD *)(a2 + 10) = (int)v33;
                  LOBYTE(v33) = v22[96];
                  LOBYTE(v31) = v22[144];
                  double v31 = (double)*(unint64_t *)&v31;
                  double v32 = 0.0625;
                  double v33 = (double)*(unint64_t *)&v33 + v31 * 0.0625;
                }
                LOBYTE(v31) = *v22;
                LOBYTE(v32) = v22[48];
                a6 = (double)*(unint64_t *)&v31 + (double)*(unint64_t *)&v32 * 0.0625;
                a5 = a6 - v33;
                if (a5 <= 6.0)
                {
                  ++*(_WORD *)(a2 + 14);
                  if (a5 <= 3.0) {
                    ++*(_WORD *)(a2 + 12);
                  }
                }
                ++v17;
              }
            }
          }
          ++v16;
          ++v18;
          v15 += 2;
          v14 += 4;
        }
        while (v18 != 652);
        uint64_t v34 = 0;
        *(unsigned char *)(a2 + 16) = v17;
        do
        {
          if (*((unsigned __int8 *)v44 + v34) >= 2u) {
            ++*(_WORD *)(a2 + 6);
          }
          ++v34;
        }
        while (v12 != v34);
        if (v17 > 0)
        {
          if (v17 >= 5) {
            int v35 = 5;
          }
          else {
            int v35 = v17;
          }
          uint64_t v36 = (v17 - 1);
          VecSortAscR8((double *)v43, 0, v17 - 1);
          int v37 = v17 + ~v35;
          uint64_t v38 = v17 - 1;
          uint64_t v39 = v37;
          double v40 = 0.0;
          do
            double v40 = v40 + *((double *)v43 + v38--);
          while (v38 > v37);
          *(double *)(a2 + 24) = v40 / (double)v35;
          uint64_t result = VecSortAscR8((double *)v42, 0, v36);
          double v41 = 0.0;
          do
            double v41 = v41 + *((double *)v42 + v36--);
          while (v36 > v39);
          *(double *)(a2 + 32) = v41 / (double)v35;
        }
      }
      break;
    default:
      uint64_t result = EvCrt_Illegal_Default("API_Get_Dbg_Constell_ME_Data", 0x8D0u);
      break;
  }
  return result;
}

uint64_t API_Get_Dbg_Constell_PE_Data(uint64_t result, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(p_api + 56);
  uint64_t v3 = *(void *)(p_api + 232);
  int v4 = *(unsigned char **)(p_api + 72);
  uint64_t v5 = *(void *)(p_api + 104);
  uint64_t v6 = *(void *)(p_api + 40);
  memset(v83, 0, sizeof(v83));
  memset(v82, 0, 39);
  memset(v81, 0, 39);
  int v8 = result;
  switch((int)result)
  {
    case 1:
      if (v4[31])
      {
        int v9 = (unsigned char *)v2[6];
        int v10 = (_OWORD *)v2[7];
        int v71 = -1;
        int v72 = 32;
        uint64_t v65 = (_OWORD *)v2[8];
        goto LABEL_19;
      }
      return result;
    case 2:
      if (v4[32])
      {
        int v9 = (unsigned char *)v2[2034];
        int v10 = (_OWORD *)v2[2035];
        uint64_t v65 = (_OWORD *)v2[2036];
        v2 += 1401;
        int v12 = 24;
        goto LABEL_11;
      }
      return result;
    case 3:
      if (v4[36])
      {
        int v9 = (unsigned char *)v2[2076];
        int v10 = (_OWORD *)v2[2077];
        uint64_t v65 = (_OWORD *)v2[2078];
        v2 += 2070;
        int v12 = 36;
        goto LABEL_11;
      }
      return result;
    case 4:
      if (v4[35])
      {
        int v9 = (unsigned char *)v2[3058];
        int v10 = (_OWORD *)v2[3059];
        uint64_t v65 = (_OWORD *)v2[3060];
        v2 += 3052;
        int v12 = 37;
LABEL_11:
        int v72 = v12;
        int v71 = -1;
        goto LABEL_19;
      }
      return result;
    case 5:
      if (v4[33])
      {
        int v9 = (unsigned char *)v2[1069];
        int v10 = (_OWORD *)v2[1070];
        uint64_t v65 = (_OWORD *)v2[1071];
        v2 += 1063;
        int v71 = -193;
        int v72 = 10;
        goto LABEL_19;
      }
      return result;
    case 6:
      if (!v4[34]) {
        return result;
      }
      for (uint64_t i = 0; i != 39; ++i)
      {
        unsigned int v14 = *(unsigned __int8 *)(v6 + 6316 + i);
        if (v14 >= 3)
        {
          unsigned int v11 = 2481;
          goto LABEL_87;
        }
        v83[i] = 0;
        *((unsigned char *)v82 + i) = 0x10100u >> (8 * v14);
        *((unsigned char *)v81 + i) = 0;
      }
      v2 += 2068;
      int v71 = -120;
      int v72 = 39;
      uint64_t v65 = v81;
      int v10 = v82;
      int v9 = v83;
LABEL_19:
      uint64_t v15 = (unsigned __int8 *)(v6 + 6132);
      uint64_t v69 = *v2;
      if (*(unsigned char *)(v6 + 6132))
      {
        unint64_t v16 = 0;
        do
        {
          LODWORD(v80[0]) = 0;
          uint64_t result = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v6 + 4174 + 2 * v16) - 1), v80);
          if (LODWORD(v80[0]) == v8 && (result & 0x80000000) == 0)
          {
            ++*(unsigned char *)(a2 + 112);
            if (v9[result] || *((unsigned char *)v10 + result)) {
              ++*(unsigned char *)(a2 + 113);
            }
          }
          ++v16;
        }
        while (v16 < *v15);
      }
      if (*(unsigned char *)(v6 + 6135))
      {
        unint64_t v17 = 0;
        uint64_t v18 = v6 + 4886;
        do
        {
          LODWORD(v80[0]) = 0;
          uint64_t result = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v18 + 2 * v17) - 1), v80);
          if (LODWORD(v80[0]) == v8 && (result & 0x80000000) == 0) {
            ++*(unsigned char *)(a2 + 114);
          }
          ++v17;
        }
        while (v17 < v15[3]);
      }
      uint64_t v66 = v10;
      unsigned __int16 v70 = v9;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v74 = 0;
      unsigned int v73 = 0;
      memset(v80, 0, sizeof(v80));
      memset(v79, 0, sizeof(v79));
      memset(v78, 0, sizeof(v78));
      memset(v77, 0, sizeof(v77));
      memset(v76, 0, sizeof(v76));
      uint64_t v23 = -384;
      uint64_t v24 = 14112;
      uint64_t v25 = 2960;
      uint64_t v26 = 8536;
      memset(v75, 0, sizeof(v75));
      int v28 = v71;
      unsigned int v27 = v72;
      uint64_t v67 = v5;
      uint64_t v68 = v3;
      break;
    default:
      unsigned int v11 = 2499;
LABEL_87:
      return (uint64_t)EvCrt_Illegal_Default("API_Get_Dbg_Constell_PE_Data", v11);
  }
  while (1)
  {
    if (*(unsigned __int8 *)(v5 + v19 + 76) != v8) {
      goto LABEL_69;
    }
    if (*(int *)(v5 + v19 + 412) < 10) {
      goto LABEL_69;
    }
    uint64_t v29 = v28 + *(unsigned __int8 *)(v5 + v19 + 78);
    if (v29 >= v27) {
      goto LABEL_69;
    }
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    if (v70[v29] || *((unsigned char *)v66 + v29))
    {
      ++*(unsigned char *)(a2 + 1);
    }
    else if (*((unsigned char *)v65 + v29))
    {
      ++*(unsigned char *)(a2 + 2);
    }
    if (*(unsigned char *)(v69 + v29)) {
      ++*(unsigned char *)(a2 + 3);
    }
    else {
      ++*(unsigned char *)(a2 + 4);
    }
    if (*(unsigned char *)(v3 + v25))
    {
      *((double *)v80 + v73) = fabs(*(double *)(v3 + v23 + 5600));
      *((double *)v77 + v73++) = fabs(*(double *)(v3 + v23 + 8000));
    }
    int v30 = *(_DWORD *)(v3 + v19 + 3056);
    if ((v30 - 1) >= 0x1D)
    {
      if (!v30) {
        goto LABEL_53;
      }
      unsigned int v61 = v21;
      unsigned int v62 = v20;
      unsigned int v60 = v22;
      uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      uint64_t v22 = v60;
      uint64_t v21 = v61;
      uint64_t v20 = v62;
      int v28 = v71;
      unsigned int v27 = v72;
    }
    if ((int)v22 <= 15)
    {
      uint64_t v31 = *(int *)(v3 + v19 + 3056);
      if (v31 >= 0x1D)
      {
        uint64_t v33 = v20;
        uint64_t v34 = v21;
        int v35 = v22;
        uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
        LODWORD(v22) = v35;
        uint64_t v21 = v34;
        uint64_t v5 = v67;
        uint64_t v3 = v68;
        uint64_t v20 = v33;
        int v28 = v71;
        unsigned int v27 = v72;
        char v32 = 120;
      }
      else
      {
        char v32 = aGhkmnpqrstvyac_0[v31];
      }
      *(unsigned char *)(a2 + (int)v22 + 9) = v32;
      uint64_t v22 = (v22 + 1);
    }
LABEL_53:
    if (*(unsigned char *)(v3 + v26))
    {
      *((double *)v79 + v74) = fabs(*(double *)(v3 + v23 + 11560));
      *((double *)v76 + v74) = fabs(*(double *)(v3 + v23 + 13576));
      LODWORD(v74) = v74 + 1;
    }
    uint64_t v36 = v3 + v19;
    int v37 = *(_DWORD *)(v3 + v19 + 8632);
    if ((v37 - 1) >= 0x1D)
    {
      if (!v37) {
        goto LABEL_61;
      }
      unsigned int v63 = v20;
      uint64_t v50 = v21;
      uint64_t v51 = v22;
      uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      uint64_t v22 = v51;
      uint64_t v21 = v50;
      uint64_t v5 = v67;
      uint64_t v3 = v68;
      uint64_t v20 = v63;
      int v28 = v71;
      unsigned int v27 = v72;
    }
    if ((int)v21 <= 15)
    {
      uint64_t v38 = *(int *)(v36 + 8632);
      if (v38 >= 0x1D)
      {
        uint64_t v40 = v20;
        int v41 = v21;
        uint64_t v42 = v22;
        uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
        uint64_t v22 = v42;
        LODWORD(v21) = v41;
        uint64_t v5 = v67;
        uint64_t v3 = v68;
        uint64_t v20 = v40;
        int v28 = v71;
        unsigned int v27 = v72;
        char v39 = 120;
      }
      else
      {
        char v39 = aGhkmnpqrstvyac_0[v38];
      }
      *(unsigned char *)(a2 + (int)v21 + 25) = v39;
      uint64_t v21 = (v21 + 1);
    }
LABEL_61:
    if (*(unsigned char *)(v3 + v24))
    {
      *((double *)v78 + HIDWORD(v74)) = fabs(*(double *)(v3 + v23 + 17136));
      *((double *)v75 + HIDWORD(v74)) = fabs(*(double *)(v3 + v23 + 19152));
      ++HIDWORD(v74);
    }
    uint64_t v43 = v3 + v19;
    int v44 = *(_DWORD *)(v3 + v19 + 14208);
    if ((v44 - 1) < 0x1D) {
      goto LABEL_64;
    }
    if (v44)
    {
      unsigned int v64 = v20;
      uint64_t v52 = v21;
      uint64_t v53 = v22;
      uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      uint64_t v22 = v53;
      uint64_t v21 = v52;
      uint64_t v5 = v67;
      uint64_t v3 = v68;
      uint64_t v20 = v64;
      int v28 = v71;
      unsigned int v27 = v72;
LABEL_64:
      if ((int)v20 <= 15)
      {
        uint64_t v45 = *(int *)(v43 + 14208);
        if (v45 >= 0x1D)
        {
          int v47 = v20;
          uint64_t v48 = v21;
          uint64_t v49 = v22;
          uint64_t result = gn_report_assertion_failure("SV_Meas_Edit_Char");
          uint64_t v22 = v49;
          uint64_t v21 = v48;
          uint64_t v5 = v67;
          uint64_t v3 = v68;
          LODWORD(v20) = v47;
          int v28 = v71;
          unsigned int v27 = v72;
          char v46 = 120;
        }
        else
        {
          char v46 = aGhkmnpqrstvyac_0[v45];
        }
        *(unsigned char *)(a2 + (int)v20 + 41) = v46;
        uint64_t v20 = (v20 + 1);
      }
    }
LABEL_69:
    v19 += 4;
    ++v24;
    ++v25;
    v23 += 8;
    ++v26;
    if (v19 == 192)
    {
      if (v73)
      {
        *(unsigned char *)(a2 + 6) = v73;
        VecMedian8((double *)v80, v73);
        *(void *)(a2 + 64) = v54;
        uint64_t result = (uint64_t)VecMedian8((double *)v77, v73);
        *(void *)(a2 + 88) = v55;
      }
      if (v74)
      {
        *(unsigned char *)(a2 + 7) = v74;
        VecMedian8((double *)v79, v74);
        *(void *)(a2 + 72) = v56;
        uint64_t result = (uint64_t)VecMedian8((double *)v76, v74);
        *(void *)(a2 + 96) = v57;
      }
      if (HIDWORD(v74))
      {
        *(unsigned char *)(a2 + 8) = BYTE4(v74);
        VecMedian8((double *)v78, SHIDWORD(v74));
        *(void *)(a2 + 80) = v58;
        uint64_t result = (uint64_t)VecMedian8((double *)v75, SHIDWORD(v74));
        *(void *)(a2 + 104) = v59;
      }
      return result;
    }
  }
}

void *API_Get_Dbg_Constell_Orb_Data(void *result, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(p_api + 56);
  uint64_t v3 = *(uint64_t **)(p_api + 72);
  uint64_t v4 = *(void *)(p_api + 40);
  *(unsigned char *)a2 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, 39);
  memset(v20, 0, 39);
  switch((int)result)
  {
    case 1:
      if (*((unsigned char *)v3 + 31))
      {
        uint64_t v5 = (unsigned char *)v2[6];
        uint64_t v6 = (_OWORD *)v2[7];
        uint64_t v7 = v3 + 54;
        uint64_t v8 = 32;
        int v9 = (_OWORD *)v2[8];
        goto LABEL_18;
      }
      break;
    case 2:
      if (*((unsigned char *)v3 + 32))
      {
        uint64_t v5 = (unsigned char *)v2[2034];
        uint64_t v6 = (_OWORD *)v2[2035];
        int v9 = (_OWORD *)v2[2036];
        v2 += 1401;
        uint64_t v7 = v3 + 55;
        uint64_t v8 = 24;
        goto LABEL_18;
      }
      break;
    case 3:
      if (*((unsigned char *)v3 + 36))
      {
        uint64_t v5 = (unsigned char *)v2[2076];
        uint64_t v6 = (_OWORD *)v2[2077];
        int v9 = (_OWORD *)v2[2078];
        v2 += 2070;
        uint64_t v7 = v3 + 59;
        uint64_t v8 = 36;
        goto LABEL_18;
      }
      break;
    case 4:
      if (*((unsigned char *)v3 + 35))
      {
        uint64_t v5 = (unsigned char *)v2[3058];
        uint64_t v6 = (_OWORD *)v2[3059];
        int v9 = (_OWORD *)v2[3060];
        v2 += 3052;
        uint64_t v7 = v3 + 58;
        uint64_t v8 = 37;
        goto LABEL_18;
      }
      break;
    case 5:
      if (*((unsigned char *)v3 + 33))
      {
        uint64_t v5 = (unsigned char *)v2[1069];
        uint64_t v6 = (_OWORD *)v2[1070];
        int v9 = (_OWORD *)v2[1071];
        v2 += 1063;
        uint64_t v7 = v3 + 56;
        uint64_t v8 = 10;
        goto LABEL_18;
      }
      break;
    case 6:
      if (*((unsigned char *)v3 + 34))
      {
        uint64_t v11 = 0;
        uint64_t v12 = v4 + 6316;
        do
        {
          unsigned int v13 = *(unsigned __int8 *)(v12 + v11);
          if (v13 >= 3)
          {
            unsigned int v10 = 2764;
            goto LABEL_37;
          }
          v22[v11] = 0;
          *((unsigned char *)v21 + v11) = 0x10100u >> (8 * v13);
          *((unsigned char *)v20 + v11++) = 0;
        }
        while (v11 != 39);
        v2 += 2068;
        uint64_t v7 = v3 + 57;
        int v9 = v20;
        uint64_t v6 = v21;
        uint64_t v5 = v22;
        uint64_t v8 = 39;
LABEL_18:
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t result = 0;
        uint64_t v18 = *v7;
        uint64_t v19 = *v2;
        do
        {
          if (*((unsigned char *)result + (void)v5))
          {
            v17 |= 1 << (char)result;
            *(void *)(a2 + 8) = v17;
          }
          if (*((unsigned char *)result + (void)v9))
          {
            v16 |= 1 << (char)result;
            *(void *)(a2 + 24) = v16;
          }
          if (*((unsigned char *)result + v19))
          {
            v15 |= 1 << (char)result;
            *(void *)(a2 + 32) = v15;
          }
          if (*((unsigned char *)result + (void)v6))
          {
            v14 |= 1 << (char)result;
            *(void *)(a2 + 16) = v14;
          }
          if (*((unsigned char *)result + v18)) {
            *(void *)(a2 + 40) |= 1 << (char)result;
          }
          uint64_t result = (void *)((char *)result + 1);
        }
        while ((void *)v8 != result);
        if (v17 || v16 || v14 || *(void *)(a2 + 40)) {
          *(unsigned char *)a2 = 1;
        }
      }
      break;
    default:
      unsigned int v10 = 2782;
LABEL_37:
      uint64_t result = EvCrt_Illegal_Default("API_Get_Dbg_Constell_Orb_Data", v10);
      break;
  }
  return result;
}

uint64_t API_Get_UTC_Cor(char a1, double *a2)
{
  uint64_t v3 = *(void *)(p_api + 48);
  uint64_t v4 = *(void *)(p_api + 56);
  int v5 = *(_DWORD *)(v4 + 8444);
  if ((v5 - 1) > 5)
  {
LABEL_4:
    if (*(unsigned char *)(v3 + 64) && *(__int16 *)(v3 + 66) >= 1)
    {
      int UTC_Leap_Second_For_GLON_Day_4yrBlk = Get_UTC_Leap_Second_For_GLON_Day_4yrBlk(*(unsigned __int16 *)(v3 + 66), *(__int16 *)(v3 + 68), *(double *)(v3 + 72));
      if (UTC_Leap_Second_For_GLON_Day_4yrBlk == -99) {
        LOBYTE(v6) = 18;
      }
      else {
        LOBYTE(v6) = UTC_Leap_Second_For_GLON_Day_4yrBlk;
      }
    }
    else
    {
      if (!*(unsigned char *)(v3 + 5) || (int v8 = *(__int16 *)(v3 + 16), v8 < 1025))
      {
        uint64_t v10 = 0;
        LOBYTE(v6) = 18;
LABEL_40:
        int v25 = *(unsigned __int8 *)(v4 + 8458);
        if (v25 != v6)
        {
          EvLog_v("API_Get_UTC_Cor:  Default %d sec GPS-UTC Correction updated from %d sec", (char)v6, (char)v25);
          *(unsigned char *)(v4 + 8458) = v6;
          *(unsigned char *)(v4 + 8461) = v6;
          uint64_t v4 = *(void *)(p_api + 56);
        }
        *(_DWORD *)(v4 + 8444) = 1;
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      while ((unsigned __int16)v8 < *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 4]
           || (unsigned __int16)v8 >= *(unsigned __int16 *)&Time_Data_At_Leap_Sec_Change[v9 + 16])
      {
        v9 += 12;
        if (v9 == 96) {
          goto LABEL_38;
        }
      }
      LOBYTE(v6) = Time_Data_At_Leap_Sec_Change[v9 + 10];
      if (v6 != 157) {
        goto LABEL_39;
      }
LABEL_38:
      LOBYTE(v6) = 18;
    }
LABEL_39:
    uint64_t v10 = 1;
    goto LABEL_40;
  }
  if (v5 == 1)
  {
    int v6 = *(char *)(v4 + 8458);
    if (v6 >= 18) {
      goto LABEL_4;
    }
LABEL_23:
    uint64_t v10 = 1;
LABEL_43:
    double v24 = (double)(char)v6;
LABEL_44:
    *a2 = v24;
    return v10;
  }
  unsigned int v11 = v5 - 4;
  if (*(unsigned char *)(v3 + 5)) {
    BOOL v12 = v11 >= 3;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    LOBYTE(v6) = *(unsigned char *)(v4 + 8458);
    goto LABEL_23;
  }
  int v13 = (int)(*(double *)(v3 + 24) - *(double *)(v3 + 32) + 0.0005);
  int v14 = *(__int16 *)(v3 + 16);
  int v15 = *(unsigned __int8 *)(v4 + 8459);
  int v16 = v15 | 0x400;
  int v17 = v14 - 127;
  if (v14 - 127 > (v15 | 0x400)) {
    int v16 = v14 - 127;
  }
  unsigned int v18 = (v16 - v15 - 769) & 0xFFFFFF00 | v15;
  int v19 = v13 + 604800 * v14;
  if (*(char *)(v4 + 8461) >= *(char *)(v4 + 8458)) {
    int v20 = *(char *)(v4 + 8458);
  }
  else {
    int v20 = *(char *)(v4 + 8461);
  }
  if ((int)(86400 * *(unsigned __int8 *)(v4 + 8460) - v19 + v20 + 604800 * v18 + 619315200) <= 0) {
    char v21 = *(unsigned char *)(v4 + 8461);
  }
  else {
    char v21 = *(unsigned char *)(v4 + 8458);
  }
  double v22 = (double)v21;
  *a2 = v22;
  if ((a1 & 1) == 0)
  {
    int v23 = *(unsigned __int8 *)(v4 + 8457);
    if (v17 <= (v23 | 0x400)) {
      int v17 = v23 | 0x400;
    }
    double v24 = v22
        + (double)*(int *)(v4 + 8452) * 9.31322575e-10
        + (double)*(int *)(v4 + 8448)
        * 8.8817842e-16
        * (double)(int)(v19
                      - (*(unsigned __int8 *)(v4 + 8456) << 12)
                      - 604800 * ((v17 - v23 - 769) & 0xFFFFFF00 | v23)
                      - 619315200);
    uint64_t v10 = 1;
    goto LABEL_44;
  }
  return 1;
}

unsigned int *API_Get_Next_Leap_Second(unsigned int *result, signed __int8 *a2, int *a3)
{
  uint64_t v3 = p_api;
  uint64_t v4 = *(void *)(p_api + 48);
  uint64_t v5 = *(void *)(p_api + 56);
  *uint64_t result = 0;
  *a2 = 0;
  *a3 = 0x7FFFFFFF;
  if (*(unsigned char *)(v4 + 5))
  {
    if (*(int *)v4 >= 1 && (*(_DWORD *)(*(void *)(v3 + 56) + 8444) - 4) <= 2)
    {
      int v6 = (unsigned __int8 *)(v5 + 8458);
      int v7 = v6[3];
      int v8 = *v6;
      if (v7 != v8)
      {
        unsigned int v11 = result;
        double v12 = *(double *)(v4 + 24);
        double v13 = *(double *)(v4 + 32);
        int v14 = *(__int16 *)(v4 + 16);
        int v15 = v6[1];
        int v16 = v6[2];
        uint64_t result = (unsigned int *)Is_Future_Leap_Sec_Date_Not_Valid(v14, 1, v15, v6[2]);
        if ((result & 1) == 0)
        {
          int v17 = v15 | 0x400;
          if (v14 - 127 > (v15 | 0x400)) {
            int v17 = v14 - 127;
          }
          unsigned int v18 = 604800 * ((v17 - v15 - 769) & 0xFFFFFF00 | v15) + 86400 * v16 + 619315200;
          *unsigned int v11 = v18;
          int v19 = (char)v8;
          if ((char)v7 < (char)v8) {
            int v19 = (char)v7;
          }
          *a3 = v19 - (int)(v12 - v13 + 0.0005) - 604800 * v14 + v18;
          *v11 += v19;
          *a2 = v7 - v8;
        }
      }
    }
  }
  return result;
}

uint64_t API_Get_Nav_Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  uint64_t v9 = v6;
  uint64_t v377 = *MEMORY[0x263EF8340];
  uint64_t v10 = p_api;
  uint64_t v11 = *(void *)(p_api + 88);
  uint64_t v12 = *(void *)(p_api + 72);
  uint64_t v13 = *(void *)(p_api + 104);
  uint64_t v14 = *(void *)(p_api + 328);
  uint64_t v15 = *(void *)(p_api + 232);
  uint64_t v330 = *(void *)(p_api + 176);
  uint64_t v16 = *(void *)(p_api + 56);
  uint64_t v314 = *(void *)(p_api + 48);
  uint64_t v17 = *(void *)(p_api + 160);
  bzero(v6, 0x18C8uLL);
  bzero(v8, 0x30A8uLL);
  if (*(double *)(*(void *)(v10 + 88) + 344) > 600.0) {
    return 0;
  }
  unsigned int v18 = 0;
  uint64_t v334 = v16 + 33552;
  v326 = (unsigned char *)(v16 + 16296);
  v315 = (unsigned char *)(v16 + 8458);
  v325 = (unsigned char *)(v15 + 31344);
  uint64_t v340 = v15 + 22720;
  v312 = (double *)(v9 + 32);
  v313 = (__int16 *)(v9 + 24);
  uint64_t v332 = v17;
  v323 = (_DWORD *)(v17 + 529);
  v324 = (_OWORD *)(v11 + 856);
  uint64_t v335 = v16;
  uint64_t v19 = v16 + 16336;
  v322 = (double *)(v15 + 736);
  uint64_t v327 = v15;
  v316 = (double *)(v15 + 752);
  v317 = (double *)(v15 + 744);
  v321 = (long long *)(v12 + 1072);
  uint64_t v320 = v12 + 1388;
  v319 = (long long *)(v12 + 1476);
  uint64_t v344 = v13 + 3;
  int v20 = *(_DWORD *)(v11 + 32);
  v318 = (_OWORD *)(v12 + 1460);
  v331 = v9;
  uint64_t v328 = v13;
  uint64_t v329 = v11;
  uint64_t v333 = v14;
  uint64_t v342 = v12;
  while (1)
  {
    unsigned int v338 = v18;
    int v21 = *(_DWORD *)(v11 + 36);
    *((_DWORD *)v9 + 1) = v21;
    v8[1] = v21;
    uint64_t v22 = *(unsigned int *)(v11 + 48);
    v9[8] = (int)v22 > 0;
    int v339 = v20;
    BOOL v23 = (int)v22 >= 1 && *(unsigned char *)(v11 + 52) != 0;
    v9[9] = v23;
    *((_WORD *)v9 + 12) = *(_WORD *)(v11 + 54);
    uint64_t v24 = *(void *)(v11 + 40);
    *((void *)v9 + 4) = v24;
    *((void *)v9 + 5) = v24;
    *((void *)v9 + 6) = *(void *)(v11 + 144);
    *((void *)v9 + 7) = *(void *)(v11 + 168);
    *((double *)v9 + 12) = *(double *)(v11 + 208) * 57.2957795;
    *((double *)v9 + 13) = *(double *)(v11 + 216) * 57.2957795;
    *((void *)v9 + 14) = *(void *)(v11 + 224);
    *((double *)v9 + 15) = *(double *)(v11 + 224) - *(double *)(v11 + 232);
    *((void *)v9 + 9) = *(void *)(v11 + 72);
    *((void *)v9 + 10) = *(void *)(v11 + 80);
    *((void *)v9 + 11) = *(void *)(v11 + 88);
    uint64_t v25 = 952;
    if (!*(unsigned char *)(v12 + 66)) {
      uint64_t v25 = 352;
    }
    uint64_t v26 = 960;
    if (!*(unsigned char *)(v12 + 66)) {
      uint64_t v26 = 360;
    }
    uint64_t v27 = 936;
    if (!*(unsigned char *)(v12 + 66)) {
      uint64_t v27 = 336;
    }
    *((void *)v9 + 16) = *(void *)(v11 + v25);
    *((void *)v9 + 17) = *(void *)(v11 + v26);
    *((double *)v9 + 18) = -*(double *)(v11 + v27);
    double v28 = *(double *)(v11 + 848);
    if (v28 >= 9499050.0) {
      double v29 = g_TOW_stat_Sigma_Table[v22];
    }
    else {
      double v29 = v28 * 0.00000000333564095;
    }
    *((double *)v9 + 19) = v29;
    *((double *)v9 + 20) = *(double *)(v11 + 840) * 0.00000000333564095;
    *((double *)v9 + 21) = *(double *)(v11 + 888) * 0.00000000333564095;
    *((_OWORD *)v9 + 11) = *(_OWORD *)(v11 + 800);
    *((void *)v9 + 24) = *(void *)(v11 + 824);
    *(_OWORD *)(v9 + 200) = *(_OWORD *)(v11 + 896);
    *((void *)v9 + 27) = *(void *)(v11 + 912);
    *((_OWORD *)v9 + 14) = *v324;
    double v30 = *(double *)(v11 + 880);
    *((double *)v9 + 30) = v30;
    *((void *)v9 + 31) = *(void *)(v11 + 1984);
    if (v30 > 360.0) {
      *((void *)v9 + 30) = 0x408F380000000000;
    }
    *((void *)v9 + 32) = *(void *)(v11 + 784);
    *((void *)v9 + 33) = *(void *)(v11 + 760);
    *((_OWORD *)v9 + 17) = *(_OWORD *)(v11 + 768);
    uint64_t v31 = *(void *)(p_api + 104);
    uint64_t v32 = *(void *)(p_api + 48);
    uint64_t v33 = *(void *)(p_api + 56);
    uint64_t v34 = *(void *)(p_api + 232);
    if (*(unsigned char *)(v32 + 5))
    {
      uint64_t v35 = *(void *)(p_api + 72);
      int v36 = *(__int16 *)(v32 + 16);
      int v37 = v36 < *(__int16 *)(v35 + 1028);
      if (*(int *)v32 >= 9 && *(void *)(v35 + 1040) > (int)*(double *)(v32 + 24) + 604800 * v36) {
        v37 |= 2u;
      }
    }
    else
    {
      int v37 = 0;
    }
    double v38 = *(double *)(v34 + 32);
    if (v38 > 100.0 && *(int *)(v34 + 12) > 8) {
      v37 |= 4u;
    }
    if (v38 < -100.0 && *(int *)(v34 + 12) > 8) {
      v37 |= 8u;
    }
    uint64_t v39 = 0;
    unsigned int v40 = 0;
    unsigned int v41 = 0;
    uint64_t v42 = v31 + 940;
    uint64_t v43 = (unsigned __int16 *)(v31 + 844);
    do
    {
      if (*(int *)(v42 + 4 * v39 - 528) >= 10 && *v43 >= 0xC8u)
      {
        unsigned int v44 = *(unsigned __int8 *)(v42 + v39 - 336);
        unsigned int v45 = *(unsigned __int8 *)(v42 + v39 - 240);
        unsigned int v46 = v44 <= 0x2C ? v41 : v41 + 1;
        int v47 = v45 - v44;
        BOOL v48 = v45 <= 0x2C && v47 <= 5;
        unsigned int v49 = v48 ? v40 : v40 + 1;
        if (v43[48] >= 0xC8u)
        {
          unsigned int v41 = v46;
          unsigned int v40 = v49;
        }
      }
      ++v39;
      ++v43;
    }
    while (v39 != 48);
    uint64_t v50 = 0;
    int32x4_t v51 = 0uLL;
    int32x4_t v52 = 0uLL;
    int32x4_t v53 = 0uLL;
    v54.i64[0] = 0x100000001;
    v54.i64[1] = 0x100000001;
    int32x4_t v55 = 0uLL;
    do
    {
      uint8x16_t v56 = (uint8x16_t)vceqzq_s8(*(int8x16_t *)(v33 + 8466 + v50));
      uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
      uint16x8_t v58 = vmovl_high_u8(v56);
      int32x4_t v55 = vaddq_s32(v55, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v58), v54));
      int32x4_t v53 = vaddq_s32(v53, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8), v54));
      int32x4_t v52 = vaddq_s32(v52, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v57), v54));
      int32x4_t v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8), v54));
      v50 += 16;
    }
    while (v50 != 32);
    int v337 = v37;
    uint64_t v59 = 0;
    unsigned int v60 = 0;
    unsigned int v336 = vaddvq_s32(vaddq_s32(vaddq_s32(v51, v53), vaddq_s32(v52, v55)));
    do
      v60 += *(unsigned __int8 *)(v33 + 39124 + v59++);
    while (v59 != 178);
    uint64_t v61 = 0;
    unsigned int v62 = 0;
    uint64_t v63 = *(void *)(p_api + 88) + 968;
    do
    {
      int v64 = *(_DWORD *)(v63 + v61);
      if (Is_Legal(v64))
      {
        switch((char)v64)
        {
          case 1:
            uint64_t v65 = BYTE2(v64) - 1;
            if (*(unsigned char *)(*(void *)(v33 + 48) + v65))
            {
              uint64_t v66 = v33 + 108 * (int)v65 + 104;
              goto LABEL_60;
            }
            break;
          case 2:
          case 6:
            break;
          case 3:
            uint64_t v67 = BYTE2(v64) - 1;
            if (*(unsigned char *)(*(void *)(v33 + 16608) + v67))
            {
              BOOL v68 = Is_GAL_IntEph_Real(v33 + 88 * (int)v67 + 16736);
              goto LABEL_61;
            }
            break;
          case 4:
            uint64_t v69 = BYTE2(v64) - 1;
            if (*(unsigned char *)(*(void *)(v33 + 24464) + v69))
            {
              BOOL v68 = Is_BDS_IntEph_Real(v33 + 100 * (int)v69 + 24520);
              goto LABEL_61;
            }
            break;
          case 5:
            uint64_t v70 = BYTE2(v64) - 193;
            if (*(unsigned char *)(*(void *)(v33 + 8552) + v70))
            {
              uint64_t v66 = v33 + 108 * (int)v70 + 8608;
LABEL_60:
              BOOL v68 = Is_GPS_BinEph_Real(v66);
LABEL_61:
              v62 += !v68;
            }
            break;
          default:
            EvCrt_Illegal_Default("API_Get_Spoofing_Flags", 0x870u);
            break;
        }
      }
      v61 += 4;
    }
    while (v61 != 192);
    int v71 = v337 | 0x10;
    if (v41 <= 2) {
      int v71 = v337;
    }
    if (v40 > 2) {
      v71 |= 0x20u;
    }
    if (v336 > 2) {
      v71 |= 0x100u;
    }
    if (v60 > 2) {
      v71 |= 0x200u;
    }
    if (v62 > 2) {
      v71 |= 0x400u;
    }
    if (*(unsigned char *)(v33 + 8464)) {
      v71 |= 0x1000u;
    }
    if (*(unsigned char *)(v33 + 8465)) {
      v71 |= 0x2000u;
    }
    uint64_t v9 = v331;
    *((_DWORD *)v331 + 72) = v71;
    *((_DWORD *)v331 + 73) = *(_DWORD *)(v342 + 48);
    uint64_t v72 = *(void *)(p_api + 88);
    int v73 = 1;
    uint64_t v74 = v328;
    uint64_t v11 = v329;
    uint64_t v75 = v333;
    switch(*(_DWORD *)(v72 + 4))
    {
      case 0:
        int v73 = 0;
        break;
      case 1:
      case 2:
      case 3:
        break;
      case 4:
        BOOL v76 = *(unsigned char *)(v72 + 17) == 0;
        int v73 = 2;
        goto LABEL_82;
      case 5:
        BOOL v76 = *(unsigned char *)(v72 + 17) == 0;
        int v73 = 4;
LABEL_82:
        if (!v76) {
          ++v73;
        }
        break;
      default:
        EvCrt_Illegal_Default("API_Get_Fix_Type", 0x679u);
        int v73 = 0;
        uint64_t v72 = *(void *)(p_api + 88);
        uint64_t v74 = v328;
        uint64_t v11 = v329;
        uint64_t v75 = v333;
        break;
    }
    *((_DWORD *)v331 + 74) = v73;
    v351[0] = 0;
    int Num_SV_and_Clock_Unknowns = API_Get_Num_SV_and_Clock_Unknowns((unsigned int *)v351);
    int v78 = Num_SV_and_Clock_Unknowns - v351[0];
    if (Num_SV_and_Clock_Unknowns - v351[0] < 3)
    {
      if (v78 != 2)
      {
        if (v78 < 1) {
          goto LABEL_94;
        }
        goto LABEL_91;
      }
    }
    else if (*(double *)(v72 + 776) < 10.0)
    {
      int v79 = 4;
      goto LABEL_95;
    }
    if (*(double *)(v72 + 760) < 10.0)
    {
      int v79 = 3;
      goto LABEL_95;
    }
LABEL_91:
    if (*(double *)(v72 + 784) < 10.0 && *(_DWORD *)(v72 + 4))
    {
      int v79 = 2;
      goto LABEL_95;
    }
LABEL_94:
    int v79 = Num_SV_and_Clock_Unknowns > 0;
LABEL_95:
    *((_DWORD *)v331 + 75) = v79;
    *((_DWORD *)v331 + 76) = API_Get_Fix_Reliability();
    uint64_t v82 = p_api;
    uint64_t v83 = *(void *)(p_api + 88);
    int v84 = *(unsigned __int8 *)(v83 + 19);
    if (*(unsigned char *)(v83 + 19))
    {
      int v84 = *(_DWORD *)(v83 + 12);
      if (v84)
      {
        if (*(double *)(v83 + 896) <= 30000.0)
        {
          if (*(unsigned char *)(v83 + 476) && *(unsigned char *)(v83 + 492))
          {
            int v84 = 3;
          }
          else if (*(unsigned char *)(v83 + 16))
          {
            int v84 = 2;
          }
          else
          {
            int v84 = 1;
          }
        }
        else
        {
          int v84 = 0;
        }
      }
    }
    *((_DWORD *)v331 + 77) = v84;
    uint64_t v85 = *(int **)(v82 + 48);
    int v86 = 2 * (*(_DWORD *)(v83 + 4) != 0);
    if (*v85 <= 8)
    {
      int v87 = v85[21];
      if (v87)
      {
        if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v87) < 300000) {
          v86 |= 4u;
        }
      }
    }
    if (*(_DWORD *)(v83 + 408) == 1) {
      int v88 = v86 | 8;
    }
    else {
      int v88 = v86;
    }
    if (*(_DWORD *)(v83 + 396) == 1) {
      v88 |= 0x10u;
    }
    if (*(_DWORD *)(v83 + 392) == 1) {
      unsigned int v89 = v88 | 0x20;
    }
    else {
      unsigned int v89 = v88;
    }
    if (*(_DWORD *)(v83 + 416) == 1)
    {
      int v90 = v89 | 0x40;
      v89 |= 0x80u;
      if (*(_DWORD *)(v83 + 420) != 1) {
        unsigned int v89 = v90;
      }
    }
    uint64_t v91 = 0;
    if (*(unsigned char *)(v83 + 524)) {
      v89 |= 0x100u;
    }
    if (*(unsigned char *)(v83 + 540)) {
      v89 |= 0x200u;
    }
    if (*(unsigned char *)(v83 + 556)) {
      v89 |= 0x400u;
    }
    if (*(unsigned char *)(v83 + 572)) {
      v89 |= 0x800u;
    }
    if (*(unsigned char *)(v83 + 668)) {
      v89 |= 0x1000u;
    }
    if (*(unsigned char *)(v83 + 604)) {
      v89 |= 0x2000u;
    }
    if (*(unsigned char *)(v83 + 588)) {
      v89 |= 0x4000u;
    }
    if (*(unsigned char *)(v83 + 732)) {
      v89 |= 0x8000u;
    }
    if (*(unsigned char *)(v83 + 684)) {
      v89 |= 0x10000u;
    }
    if (*(unsigned char *)(v83 + 700)) {
      v89 |= 0x20000u;
    }
    if (*(unsigned char *)(v83 + 716)) {
      v89 |= 0x40000u;
    }
    if (*(unsigned char *)(v83 + 508)) {
      v89 |= 0x1000000u;
    }
    if (*(unsigned char *)(v83 + 492)) {
      v89 |= 0x2000000u;
    }
    if (*(unsigned char *)(v83 + 476)) {
      v89 |= 0x4000000u;
    }
    if (*(unsigned char *)(v83 + 652)) {
      v89 |= 0x80000u;
    }
    while (!*(unsigned char *)(*(void *)(p_api + 72) + 253 + v91) || *(char *)(*(void *)(p_api + 32) + v91) < 1)
    {
      if (++v91 == 178) {
        goto LABEL_155;
      }
    }
    v89 |= 0x10000000u;
LABEL_155:
    uint64_t v92 = 0;
    while (!*(unsigned char *)(*(void *)(p_api + 56) + 38768 + v92))
    {
      if (++v92 == 178) {
        goto LABEL_160;
      }
    }
    v89 |= 0x20000000u;
LABEL_160:
    if (v89 <= 1) {
      int v93 = 1;
    }
    else {
      int v93 = v89;
    }
    *((_DWORD *)v331 + 78) = v93;
    v331[316] = 2;
    double v94 = 400.0;
    uint64_t v95 = v332;
    if (sqrt(*((double *)v331 + 26) * *((double *)v331 + 26) + *((double *)v331 + 25) * *((double *)v331 + 25)) < 400.0)
    {
      unsigned int v96 = *((_DWORD *)v331 + 75);
      if (v96 | v93 & 2)
      {
        int v97 = *((_DWORD *)v331 + 76);
        if (v97)
        {
          BOOL v226 = v96 >= 3;
          unsigned int v98 = v96 - 3;
          if (v226)
          {
            if (v98 >= 2)
            {
              EvCrt_Illegal_Default("API_Get_Nav_Data", 0xDDEu);
              int v99 = 0;
              int v97 = *((_DWORD *)v331 + 76);
            }
            else
            {
              int v99 = 1;
            }
          }
          else
          {
            int v99 = 0;
          }
          if ((v97 - 2) >= 3)
          {
            uint64_t v95 = v332;
            if (v97 != 1)
            {
              EvCrt_Illegal_Default("API_Get_Nav_Data", 0xDEDu);
              uint64_t v95 = v332;
            }
          }
          else
          {
            uint64_t v95 = v332;
            if (v99) {
              v331[317] = 1;
            }
          }
          unsigned int v100 = *((_DWORD *)v331 + 75);
          if (v100 - 2 < 3) {
            goto LABEL_179;
          }
          if (v100 >= 2)
          {
            EvCrt_Illegal_Default("API_Get_Nav_Data", 0xE04u);
            uint64_t v95 = v332;
            if ((v93 & 2) == 0) {
              goto LABEL_180;
            }
LABEL_179:
            v331[318] = 1;
            goto LABEL_180;
          }
          if ((v93 & 2) != 0) {
            goto LABEL_179;
          }
        }
      }
    }
LABEL_180:
    *(_WORD *)((char *)v8 + 73) = 0;
    *((unsigned char *)v8 + 75) = 0;
    *((_WORD *)v8 + 38) = *(_WORD *)(v95 + 520);
    HIDWORD(v101) = *(_DWORD *)(v95 + 522);
    LODWORD(v101) = HIDWORD(v101);
    *(_DWORD *)((char *)v8 + 78) = v101 >> 16;
    *(_DWORD *)((char *)v8 + 82) = *v323;
    *((_WORD *)v8 + 43) = *(_WORD *)(v342 + 250);
    *((unsigned char *)v8 + 88) = *(unsigned char *)(v95 + 527);
    *((unsigned char *)v8 + 89) = *(unsigned char *)(v95 + 440);
    *((_WORD *)v8 + 45) = *(_DWORD *)(v95 + 444);
    *((unsigned char *)v8 + 92) = *(unsigned char *)(v95 + 464);
    *(void *)((char *)v8 + 94) = 0;
    *(_DWORD *)((char *)v8 + 101) = 0;
    *((void *)v8 + 14) = *(void *)(v342 + 96);
    *((void *)v8 + 15) = *(void *)(v342 + 176);
    *((void *)v8 + 16) = *(void *)(v342 + 232);
    double v102 = *(double *)(v342 + 208);
    *((double *)v8 + 17) = v102;
    *((void *)v8 + 18) = 0;
    API_Get_Dbg_Constell_ME_Data((void *)1, (uint64_t)(v8 + 38), v102, v94, v80, v81);
    API_Get_Dbg_Constell_ME_Data((void *)5, (uint64_t)(v8 + 48), v103, v104, v105, v106);
    API_Get_Dbg_Constell_ME_Data((void *)2, (uint64_t)(v8 + 58), v107, v108, v109, v110);
    API_Get_Dbg_Constell_ME_Data((void *)3, (uint64_t)(v8 + 68), v111, v112, v113, v114);
    API_Get_Dbg_Constell_ME_Data((void *)4, (uint64_t)(v8 + 78), v115, v116, v117, v118);
    API_Get_Dbg_Constell_ME_Data((void *)6, (uint64_t)(v8 + 88), v119, v120, v121, v122);
    int v123 = *(_DWORD *)(v342 + 1032);
    if (v123 < 1)
    {
      int v128 = 0;
      uint64_t v125 = v330;
      uint64_t v126 = v330 + 175;
    }
    else
    {
      uint64_t v124 = *(void *)(p_api + 48);
      uint64_t v125 = v330;
      uint64_t v126 = v330 + 175;
      if (*(unsigned char *)(v124 + 5) && *(int *)v124 >= 3) {
        int v127 = (int)*(double *)(v124 + 24) + 604800 * *(__int16 *)(v124 + 16);
      }
      else {
        int v127 = 0;
      }
      int v128 = (v127 - v123) / 3600;
    }
    v8[98] = v128;
    int v129 = *(_DWORD *)(v342 + 1036);
    if (v129 < 1)
    {
      *((_WORD *)v8 + 198) = 0;
      uint64_t v130 = p_api;
    }
    else
    {
      uint64_t v130 = p_api;
      uint64_t v131 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v131 + 5) && *(int *)v131 >= 3) {
        int v132 = (int)*(double *)(v131 + 24) + 604800 * *(__int16 *)(v131 + 16);
      }
      else {
        LOBYTE(v132) = 0;
      }
      *((_WORD *)v8 + 198) = ((char)(v132 - v129) / 16);
    }
    uint64_t v133 = 0;
    uint64_t v134 = *(void *)(v130 + 64) + 365;
    int8x16_t v135 = 0uLL;
    do
    {
      int8x16_t v135 = vsubq_s8(v135, vtstq_s8(*(int8x16_t *)(v134 + v133), *(int8x16_t *)(v134 + v133)));
      v133 += 16;
    }
    while (v133 != 48);
    *((unsigned char *)v8 + 398) = vaddvq_s8(v135);
    if (*(unsigned char *)(v125 + 128)) {
      int v136 = *(_DWORD *)(v125 + 132);
    }
    else {
      int v136 = 0;
    }
    uint64_t v137 = 0;
    v8[100] = v136;
    do
    {
      *((unsigned char *)v8 + v137 + 404) = *(unsigned char *)(v126 + v137);
      ++v137;
    }
    while (v137 != 6);
    *((unsigned char *)v8 + 410) = *v325;
    v135.i32[0] = *(_DWORD *)(v125 + 11048);
    *((double *)v8 + 52) = (double)v135.u64[0] * 0.001;
    *((void *)v8 + 53) = *(void *)(v11 + 1976);
    *((void *)v8 + 54) = *(void *)(v11 + 2000);
    *((void *)v8 + 55) = *(void *)(v11 + 2024);
    *((unsigned char *)v8 + 448) = *(unsigned char *)(v11 + 19);
    *((unsigned char *)v8 + 449) = *(unsigned char *)(v125 + 232);
    API_Get_Dbg_Constell_PE_Data(1, (uint64_t)(v8 + 114));
    API_Get_Dbg_Constell_PE_Data(5, (uint64_t)(v8 + 144));
    API_Get_Dbg_Constell_PE_Data(2, (uint64_t)(v8 + 174));
    API_Get_Dbg_Constell_PE_Data(3, (uint64_t)(v8 + 204));
    API_Get_Dbg_Constell_PE_Data(4, (uint64_t)(v8 + 234));
    API_Get_Dbg_Constell_PE_Data(6, (uint64_t)(v8 + 264));
    API_Get_Dbg_Constell_Orb_Data((void *)1, (uint64_t)(v8 + 308));
    API_Get_Dbg_Constell_Orb_Data((void *)5, (uint64_t)(v8 + 320));
    API_Get_Dbg_Constell_Orb_Data((void *)2, (uint64_t)(v8 + 332));
    API_Get_Dbg_Constell_Orb_Data((void *)3, (uint64_t)(v8 + 344));
    API_Get_Dbg_Constell_Orb_Data((void *)4, (uint64_t)(v8 + 356));
    API_Get_Dbg_Constell_Orb_Data((void *)6, (uint64_t)(v8 + 368));
    *((unsigned char *)v8 + 8) = *(unsigned char *)(v11 + 532);
    *((unsigned char *)v8 + 9) = *(unsigned char *)(v11 + 540);
    *((unsigned char *)v8 + 10) = *(_DWORD *)(v11 + 536) != 0;
    v8[3] = *(_DWORD *)(v11 + 544);
    *((unsigned char *)v8 + 16) = *(_DWORD *)(v340 + 12);
    *((unsigned char *)v8 + 17) = *(_DWORD *)(v340 + 20);
    *((unsigned char *)v8 + 18) = *(unsigned char *)(v11 + 516);
    *((unsigned char *)v8 + 19) = *(unsigned char *)(v11 + 524);
    *((unsigned char *)v8 + 20) = *(_DWORD *)(v11 + 520) != 0;
    v8[6] = *(_DWORD *)(v11 + 528);
    *((unsigned char *)v8 + 28) = *(_DWORD *)v340;
    *((unsigned char *)v8 + 29) = *(_DWORD *)(v340 + 8);
    *((unsigned char *)v8 + 30) = *(unsigned char *)(v11 + 548);
    *((unsigned char *)v8 + 31) = *(unsigned char *)(v11 + 556);
    *((unsigned char *)v8 + 32) = *(_DWORD *)(v11 + 552) != 0;
    v8[9] = *(_DWORD *)(v11 + 560);
    *((unsigned char *)v8 + 40) = *(_DWORD *)(v340 + 24);
    *((unsigned char *)v8 + 41) = *(_DWORD *)(v340 + 32);
    *((unsigned char *)v8 + 42) = *(unsigned char *)(v11 + 596);
    *((unsigned char *)v8 + 43) = *(unsigned char *)(v11 + 604);
    *((unsigned char *)v8 + 44) = *(_DWORD *)(v11 + 600) != 0;
    v8[12] = *(_DWORD *)(v11 + 608);
    memset(v351, 0, sizeof(v351));
    Core_Get_ExtA_Alt(6000, v351);
    *(_OWORD *)(v8 + 14) = *(_OWORD *)&v351[2];
    *((unsigned char *)v8 + 72) = v351[6];
    *((unsigned char *)v8 + 1176) = *(unsigned char *)(v11 + 580);
    *((unsigned char *)v8 + 1177) = *(unsigned char *)(v11 + 588);
    *((unsigned char *)v8 + 1178) = *(_DWORD *)(v11 + 584) != 0;
    v8[295] = *(_DWORD *)(v11 + 592);
    *((unsigned char *)v8 + 1184) = *(unsigned char *)(v340 + 1088);
    *((double *)v8 + 149) = -(*(double *)(v11 + 208) - *(double *)(v327 + 23784) * 0.0174532925) * 6378137.0;
    *((double *)v8 + 150) = *(double *)(v11 + 312)
                          * (-(*(double *)(v11 + 216) - *(double *)(v327 + 23792) * 0.0174532925)
                           * 6378137.0);
    double v138 = *(double *)(v327 + 23816);
    double v139 = v138 - *(double *)(v11 + 360);
    *((double *)v8 + 151) = v139;
    double v140 = -360.0;
    if (v139 >= 180.0 || (double v140 = 360.0, v139 < -180.0))
    {
      *((double *)v8 + 151) = v139 + v140;
      double v138 = *(double *)(v327 + 23816);
    }
    if (v138 <= 0.0) {
      double v141 = -0.5;
    }
    else {
      double v141 = 0.5;
    }
    double v142 = v138 + v141;
    if (v142 <= 2147483650.0)
    {
      if (v142 >= -2147483650.0) {
        int v143 = (int)v142;
      }
      else {
        LOWORD(v143) = 0;
      }
    }
    else
    {
      LOWORD(v143) = -1;
    }
    *((_WORD *)v8 + 608) = v143;
    double v144 = *(double *)(v327 + 23824);
    if (v144 <= 0.0) {
      double v145 = -0.5;
    }
    else {
      double v145 = 0.5;
    }
    double v146 = v144 + v145;
    if (v146 <= 2147483650.0)
    {
      if (v146 >= -2147483650.0) {
        int v147 = (int)v146;
      }
      else {
        LOWORD(v147) = 0;
      }
    }
    else
    {
      LOWORD(v147) = -1;
    }
    *((_WORD *)v8 + 609) = v147;
    double v148 = *(double *)(v327 + 23832);
    if (v148 <= 0.0) {
      double v149 = -0.5;
    }
    else {
      double v149 = 0.5;
    }
    double v150 = v148 + v149;
    if (v150 <= 2147483650.0)
    {
      if (v150 >= -2147483650.0) {
        int v151 = (int)v150;
      }
      else {
        LOBYTE(v151) = 0;
      }
    }
    else
    {
      LOBYTE(v151) = -1;
    }
    *((unsigned char *)v8 + 1220) = v151;
    *(_DWORD *)((char *)v8 + 1221) = *(_DWORD *)(v340 + 1120);
    *((unsigned char *)v8 + 1225) = *(unsigned char *)(v340 + 1124);
    int v350 = 0;
    memset(v351, 0, 24);
    memset(v362, 0, 24);
    *(void *)v346 = 0;
    char v349 = 0;
    uint64_t v348 = 0;
    char Pos_LLH = Core_Get_Pos_LLH(*(_DWORD *)v327, 150000, 0, &v350, (uint64_t)v351, (uint64_t)v362, (uint64_t *)v346, (unsigned char *)v8 + 1530, &v349, (int *)&v348 + 1, (int *)&v348);
    *((unsigned char *)v8 + 1520) = Pos_LLH;
    if (Pos_LLH)
    {
      v8[381] = *(_DWORD *)(v11 + 412);
      *((unsigned char *)v8 + 1528) = BYTE4(v348);
      *((unsigned char *)v8 + 1529) = v348;
      int v153 = *(_DWORD *)(v11 + 416);
      BOOL v154 = v153 == 1 && *(unsigned char *)(v11 + 620) != 0;
      *((unsigned char *)v8 + 1521) = v154;
      *((unsigned char *)v8 + 1522) = v153 == 1;
      *((unsigned char *)v8 + 1523) = *(_DWORD *)(v11 + 616) != 0;
      double v155 = *(double *)&v351[2];
      *((double *)v8 + 192) = (*(double *)v351 - *(double *)(v11 + 208)) * 6378137.0;
      *((double *)v8 + 193) = *(double *)(v11 + 312) * ((v155 - *(double *)(v11 + 216)) * 6378137.0);
      *((int32x2_t *)v8 + 195) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vsqrtq_f64(v362[0])));
      *((unsigned char *)v8 + 1568) = (int)(v362[1].f64[0] * 57.2957795);
      if (*((unsigned char *)v8 + 1530))
      {
        *((void *)v8 + 194) = *(void *)&v351[4];
        *((_WORD *)v8 + 785) = (int)sqrt(*(double *)v346);
      }
    }
    *((unsigned char *)v8 + 1572) = *(unsigned char *)(v11 + 660);
    *((unsigned char *)v8 + 1573) = *(unsigned char *)(v11 + 668);
    *((unsigned char *)v8 + 1574) = *(_DWORD *)(v11 + 664) != 0;
    *((unsigned char *)v8 + 1575) = 0;
    if (*(unsigned char *)(p_NA + 319))
    {
      int v156 = *(_DWORD *)(p_NA + 19388);
      *((unsigned char *)v8 + 1572) = 1;
      *((unsigned char *)v8 + 1575) = v156;
    }
    *((unsigned char *)v8 + 1576) = *(unsigned char *)(v11 + 724);
    *((unsigned char *)v8 + 1577) = *(unsigned char *)(v11 + 732);
    *((unsigned char *)v8 + 1578) = *(_DWORD *)(v11 + 728) != 0;
    v8[395] = *(_DWORD *)(v11 + 736);
    *((void *)v8 + 199) = *(void *)(v327 + 24112);
    memset(v351, 0, 24);
    if (Core_Get_ExtA_AT_Vel(120000, (uint64_t)v351))
    {
      *((unsigned char *)v8 + 1600) = *(unsigned char *)(v11 + 676);
      *((unsigned char *)v8 + 1601) = *(unsigned char *)(v11 + 684);
      *((unsigned char *)v8 + 1602) = *(_DWORD *)(v11 + 680) != 0;
      *(_OWORD *)(v8 + 402) = *(_OWORD *)&v351[2];
    }
    memset(v362, 0, 24);
    if (Core_Get_ExtA_Heading(120000, (uint64_t)v362))
    {
      *((unsigned char *)v8 + 1624) = *(unsigned char *)(v11 + 708);
      *((unsigned char *)v8 + 1625) = *(unsigned char *)(v11 + 716);
      *((unsigned char *)v8 + 1626) = *(_DWORD *)(v11 + 712) != 0;
      *((float64x2_t *)v8 + 102) = *(float64x2_t *)((char *)v362 + 8);
    }
    long long v347 = 0uLL;
    *(void *)v346 = 0;
    if (Core_Get_ExtA_V_Vel(120000, (uint64_t)v346))
    {
      *((unsigned char *)v8 + 1648) = *(unsigned char *)(v11 + 692);
      *((unsigned char *)v8 + 1649) = *(unsigned char *)(v11 + 700);
      *((unsigned char *)v8 + 1650) = *(_DWORD *)(v11 + 696) != 0;
      *(_OWORD *)(v8 + 414) = v347;
    }
    uint64_t v157 = 0;
    int v158 = *(_DWORD *)(v11 + 36);
    v8[418] = v158;
    v8[419] = *(_DWORD *)(v11 + 32);
    *((unsigned char *)v8 + 1680) = 0;
    char v159 = 1;
    do
    {
      char v160 = v159;
      if (*(unsigned char *)(v75 + v157 + 5))
      {
        uint64_t v161 = v75 + 8 * v157;
        if (*(double *)(v161 + 520) > 0.0)
        {
          *((unsigned char *)v8 + 1680) = 1;
          *((_WORD *)v8 + 841) = *(_WORD *)(v75 + 2 * v157 + 512);
          *((void *)v8 + 211) = *(void *)(v161 + 496);
          *((void *)v8 + 212) = *(void *)(v161 + 520);
          v8[426] = v158 - *(_DWORD *)(v75 + 4 * v157 + 552);
        }
      }
      char v159 = 0;
      uint64_t v157 = 1;
    }
    while ((v160 & 1) != 0);
    *((unsigned char *)v8 + 1708) = *(unsigned char *)(v75 + 8);
    double v162 = *(double *)(v75 + 568) * 1000000000.0;
    if (v162 <= 0.0) {
      double v163 = -0.5;
    }
    else {
      double v163 = 0.5;
    }
    double v164 = v162 + v163;
    int v165 = (int)v164;
    if (v164 < -2147483650.0) {
      int v165 = 0x80000000;
    }
    if (v164 > 2147483650.0) {
      int v165 = 0x7FFFFFFF;
    }
    v8[428] = v165;
    v8[429] = (sqrt(*(double *)(v75 + 576)) * 1000000000.0);
    *((unsigned char *)v8 + 1720) = *(unsigned char *)(v327 + 16);
    *((unsigned char *)v8 + 1721) = *(_DWORD *)(v11 + 48);
    *((void *)v8 + 216) = *(void *)(v11 + 40);
    *((_WORD *)v8 + 868) = *(_WORD *)(v11 + 54);
    *((unsigned char *)v8 + 1738) = *(_DWORD *)(v11 + 180);
    *((void *)v8 + 218) = *(void *)(v11 + 192);
    HIDWORD(v166) = *(_DWORD *)(v11 + 186);
    LODWORD(v166) = HIDWORD(v166);
    v8[438] = v166 >> 16;
    *((unsigned char *)v8 + 1756) = 0;
    if (*(unsigned char *)(v11 + 52) && (*(_DWORD *)(v335 + 8444) - 4) <= 2)
    {
      int v167 = *(unsigned __int8 *)(*(void *)(p_api + 56) + 8456);
      int v168 = *(unsigned __int8 *)(*(void *)(p_api + 56) + 8457);
      int v169 = *(unsigned __int8 *)(*(void *)(p_api + 56) + 8459);
      char v170 = *(unsigned char *)(*(void *)(p_api + 56) + 8460);
      *((unsigned char *)v8 + 1756) = 1;
      int v171 = v168 | 0x400;
      int v172 = *(__int16 *)(v314 + 16) - 127;
      do
      {
        __int16 v173 = v171;
        v171 += 256;
      }
      while (v172 > v173);
      *((_WORD *)v8 + 880) = v173;
      *((unsigned char *)v8 + 1758) = (795365 * (unint64_t)(v167 << 12)) >> 36;
      *((unsigned char *)v8 + 1757) = *v315;
      int v174 = v169 | 0x400;
      do
      {
        __int16 v175 = v174;
        v174 += 256;
      }
      while (v172 > v175);
      *((_WORD *)v8 + 882) = v175;
      *((unsigned char *)v8 + 1763) = v170;
      *((unsigned char *)v8 + 1762) = v315[3];
    }
    *((_WORD *)v8 + 883) = 0;
    if (*v326) {
      *((_WORD *)v8 + 883) = (int)((double)*(int *)(v335 + 16236) * 9.31322575e-10 * 1000000000.0);
    }
    *((_WORD *)v8 + 884) = 0;
    *(void *)v351 = 0;
    if (!R8_EQ(v322, (const double *)v351))
    {
      v362[0].f64[0] = 0.0;
      if (!R8_EQ(v317, v362[0].f64)) {
        *((_WORD *)v8 + 884) = (int)((*v317 - *v322) * 1000000000.0);
      }
    }
    *((_WORD *)v8 + 885) = 0;
    if ((*(_DWORD *)v334 - 2) <= 4) {
      *((_WORD *)v8 + 885) = (int)((double)*(__int16 *)(v334 + 4) * 0.1);
    }
    *((_WORD *)v8 + 886) = 0;
    *(void *)v351 = 0;
    BOOL v176 = R8_EQ(v322, (const double *)v351);
    if (!v176)
    {
      v362[0].f64[0] = 0.0;
      BOOL v176 = R8_EQ(v316, v362[0].f64);
      if (!v176) {
        *((_WORD *)v8 + 886) = (int)((*v316 - *v322) * 1000000000.0);
      }
    }
    *((_OWORD *)v8 + 111) = *(_OWORD *)(v342 + 88);
    *((_OWORD *)v8 + 112) = *(_OWORD *)(v342 + 104);
    *((_OWORD *)v8 + 113) = *(_OWORD *)(v342 + 120);
    *((_OWORD *)v8 + 114) = *(_OWORD *)(v342 + 136);
    *((_OWORD *)v8 + 115) = *(_OWORD *)(v342 + 152);
    *((_OWORD *)v8 + 116) = *(_OWORD *)(v342 + 168);
    *((_OWORD *)v8 + 117) = *(_OWORD *)(v342 + 184);
    *((_OWORD *)v8 + 118) = *(_OWORD *)(v342 + 232);
    *((_WORD *)v8 + 952) = *(_WORD *)(v342 + 248);
    *(_OWORD *)(v8 + 478) = *(_OWORD *)(v342 + 200);
    *(_OWORD *)(v8 + 482) = *(_OWORD *)(v342 + 216);
    uint64_t v177 = *(void *)(p_api + 288);
    *((_WORD *)v8 + 972) = *(_WORD *)(v177 + 8);
    *((unsigned char *)v8 + 1946) = *(unsigned char *)(v177 + 16);
    *((unsigned char *)v8 + 1947) = *(unsigned char *)(v177 + 17);
    v8[487] = 1224998914;
    strcpy((char *)v8 + 1952, "230302");
    *((int32x2_t *)v8 + 245) = vrev64_s32(vsub_s32(*(int32x2_t *)(v11 + 32), *(int32x2_t *)(v342 + 1064)));
    *((unsigned char *)v8 + 1968) = *(unsigned char *)(v342 + 73);
    *((unsigned char *)v8 + 1969) = *(unsigned char *)(v342 + 43);
    char v178 = *(unsigned char *)(v342 + 31);
    *((unsigned char *)v8 + 1970) = v178;
    if (*(unsigned char *)(v342 + 34))
    {
      v178 |= 2u;
      *((unsigned char *)v8 + 1970) = v178;
    }
    if (*(unsigned char *)(v342 + 33))
    {
      v178 += 4;
      *((unsigned char *)v8 + 1970) = v178;
    }
    if (*(unsigned char *)(v342 + 32))
    {
      v178 += 8;
      *((unsigned char *)v8 + 1970) = v178;
    }
    if (*(unsigned char *)(v342 + 36))
    {
      v178 += 16;
      *((unsigned char *)v8 + 1970) = v178;
    }
    if (*(unsigned char *)(v342 + 35)) {
      *((unsigned char *)v8 + 1970) = v178 + 32;
    }
    char v179 = *(unsigned char *)(v342 + 37);
    *((unsigned char *)v8 + 1971) = v179;
    if (*(unsigned char *)(v342 + 40))
    {
      v179 |= 2u;
      *((unsigned char *)v8 + 1971) = v179;
    }
    if (*(unsigned char *)(v342 + 39))
    {
      v179 += 4;
      *((unsigned char *)v8 + 1971) = v179;
    }
    if (*(unsigned char *)(v342 + 38))
    {
      v179 += 8;
      *((unsigned char *)v8 + 1971) = v179;
    }
    if (*(unsigned char *)(v342 + 42))
    {
      v179 += 16;
      *((unsigned char *)v8 + 1971) = v179;
    }
    if (*(unsigned char *)(v342 + 41)) {
      *((unsigned char *)v8 + 1971) = v179 + 32;
    }
    *((unsigned char *)v8 + 1972) = *(_DWORD *)(v342 + 52);
    long long v180 = *v321;
    long long v181 = v321[1];
    *(_OWORD *)(v8 + 501) = *(long long *)((char *)v321 + 28);
    *(_OWORD *)(v8 + 494) = v180;
    *(_OWORD *)(v8 + 498) = v181;
    long long v183 = *(_OWORD *)(v320 + 32);
    long long v182 = *(_OWORD *)(v320 + 48);
    long long v184 = *(_OWORD *)(v320 + 16);
    *(void *)(v8 + 521) = *(void *)(v320 + 64);
    *(_OWORD *)(v8 + 513) = v183;
    *(_OWORD *)(v8 + 517) = v182;
    *(_OWORD *)(v8 + 509) = v184;
    *(_OWORD *)(v8 + 505) = *(_OWORD *)v320;
    long long v186 = v319[4];
    long long v185 = v319[5];
    long long v187 = v319[3];
    *(void *)(v8 + 551) = *((void *)v319 + 12);
    *(_OWORD *)(v8 + 543) = v186;
    *(_OWORD *)(v8 + 547) = v185;
    *(_OWORD *)(v8 + 539) = v187;
    long long v188 = *v319;
    long long v189 = v319[2];
    *(_OWORD *)(v8 + 531) = v319[1];
    *(_OWORD *)(v8 + 535) = v189;
    *(_OWORD *)(v8 + 527) = v188;
    *(_OWORD *)(v8 + 523) = *v318;
    if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled((gnss::GnssAdaptDevice *)v176)) {
      memcpy(v8 + 553, (const void *)(*(void *)(p_api + 152) + 4), 0x2800uLL);
    }
    __int16 v376 = 0;
    memset(v375, 0, sizeof(v375));
    memset(v373, 0, sizeof(v373));
    __int16 v374 = 0;
    bzero(v372, 0x590uLL);
    bzero(v371, 0x590uLL);
    uint64_t v190 = 0;
    __int16 v370 = 0;
    memset(v369, 0, sizeof(v369));
    memset(v366, 0, 14);
    memset(v365, 0, sizeof(v365));
    memset(v364, 0, sizeof(v364));
    memset(v363, 0, 14);
    *(void *)&long long v191 = 0x8181818181818181;
    *((void *)&v191 + 1) = 0x8181818181818181;
    v367[0] = v191;
    v367[1] = v191;
    v367[2] = v191;
    v367[3] = v191;
    v367[4] = v191;
    v367[5] = v191;
    v367[6] = v191;
    v367[7] = v191;
    v367[8] = v191;
    v367[9] = v191;
    v367[10] = v191;
    __int16 v368 = -32383;
    do
    {
      switch(Get_Constell_Prn(v190))
      {
        case 1u:
        case 5u:
        case 6u:
          v375[v190] = 0;
          break;
        case 2u:
          v375[v190] = 4;
          break;
        case 3u:
          char v192 = 8;
          goto LABEL_300;
        case 4u:
          char v192 = 12;
LABEL_300:
          v375[v190] = v192;
          break;
        default:
          v375[v190] = 15;
          EvCrt_Illegal_Default("API_Get_Nav_Data", 0x1027u);
          break;
      }
      ++v190;
    }
    while (v190 != 178);
    memset(v366, 4, 14);
    uint64_t v193 = 47;
    do
    {
      uint64_t v194 = v193;
      unsigned int v195 = *(_DWORD *)(v11 + 4 * v193 + 968);
      unsigned int v196 = HIWORD(v195);
      if ((v195 & 0xFF00FF) == 2)
      {
        uint64_t v197 = 0;
        while (*(_DWORD *)(v19 + 4 * v197) != *(char *)(v344 + 4 * v194 + 76))
        {
          if (++v197 == 24) {
            goto LABEL_309;
          }
        }
        LOBYTE(v196) = v197 + 1;
      }
LABEL_309:
      unsigned int v198 = v195 & 0xFF00FFFF | (v196 << 16);
      if (Is_Legal(v198))
      {
        unsigned int v201 = GNSS_Id_To_Num_Prn_Idx(v198);
        if ((v201 & 0x80000000) == 0 && *(int *)(v11 + 4 * v194 + 1160) >= 10)
        {
          uint64_t v204 = v74 + 4 * v194;
          v375[v201] = *(unsigned char *)(v204 + 77);
          LOBYTE(v202) = *(unsigned char *)(v74 + v194 + 604);
          LOBYTE(v203) = *(unsigned char *)(v74 + v194 + 652);
          *(double *)&unint64_t v205 = (double)v203;
          *(double *)&unint64_t v206 = (double)v202 + *(double *)&v205 * 0.0625;
          v372[v201] = *(double *)&v206;
          LOBYTE(v206) = *(unsigned char *)(v74 + v194 + 700);
          LOBYTE(v205) = *(unsigned char *)(v74 + v194 + 748);
          v371[v201] = (double)v206 + (double)v205 * 0.0625;
          v369[v201] = *(unsigned char *)(v74 + v194 + 268);
          if (*(unsigned char *)(v11 + v194 + 1496)) {
            v373[v201] = 1;
          }
          if (v195 == 2) {
            *((unsigned char *)v367 + v201) = *(unsigned char *)(v204 + 79);
          }
        }
      }
      else if (*(int *)(v11 + 4 * v194 + 1160) >= 10)
      {
        uint64_t v207 = v74 + 4 * v194;
        if ((*(unsigned char *)(v207 + 79) + 7) <= 0xDu)
        {
          uint64_t v208 = (*(unsigned char *)(v207 + 79) + 7);
          v366[v208] = *(unsigned char *)(v207 + 77);
          LOBYTE(v199) = *(unsigned char *)(v74 + v194 + 604);
          LOBYTE(v200) = *(unsigned char *)(v74 + v194 + 652);
          *(double *)&unint64_t v209 = (double)v200;
          *(double *)&unint64_t v210 = (double)v199 + *(double *)&v209 * 0.0625;
          v365[v208] = *(double *)&v210;
          LOBYTE(v210) = *(unsigned char *)(v74 + v194 + 700);
          LOBYTE(v209) = *(unsigned char *)(v74 + v194 + 748);
          v364[v208] = (double)v210 + (double)v209 * 0.0625;
          v363[v208] = *(unsigned char *)(v74 + v194 + 268);
        }
      }
      uint64_t v193 = v194 - 1;
    }
    while (v194);
    if (*(_DWORD *)(v11 + 32) == v339) {
      break;
    }
    unsigned int v18 = v338 + 1;
    int v20 = *(_DWORD *)(v11 + 32);
    uint64_t v12 = v342;
    if (v338 == 5) {
      goto LABEL_471;
    }
  }
  if (v338 > 3)
  {
LABEL_471:
    bzero(v331, 0x18C8uLL);
    bzero(v8, 0x30A8uLL);
    return 0;
  }
  Inc_GPS_TOW(-*((double *)v331 + 6), v312, v313);
  API_Get_UTC_Cor(0, (double *)v331 + 8);
  v211 = v331 + 20;
  GPS_To_UTC_Time((_WORD *)v331 + 5, (unsigned __int16 *)v331 + 6, (unsigned __int16 *)v331 + 7, (unsigned __int16 *)v331 + 8, (unsigned __int16 *)v331 + 9, (unsigned __int16 *)v331 + 10, (unsigned __int16 *)v331 + 11, *((_WORD *)v331 + 12), *((double *)v331 + 4), *((double *)v331 + 8));
  if (v331[9])
  {
    if (*((_WORD *)v331 + 8) == 23 && *((_WORD *)v331 + 9) == 59)
    {
      unsigned int v212 = (unsigned __int16)*v211;
      if (v212 >= 0x3A)
      {
        v351[0] = 0;
        v346[0] = 0;
        LODWORD(v362[0].f64[0]) = 0;
        API_Get_Next_Leap_Second((unsigned int *)v351, v346, (int *)v362);
        if (!LODWORD(v362[0].f64[0]) && v346[0] == 1) {
          _WORD *v211 = v212 + 1;
        }
      }
    }
  }
  int v213 = 0;
  unint64_t v214 = 0;
  uint64_t v215 = *(void *)(p_api + 32);
  long long v358 = *(_OWORD *)(v215 + 128);
  long long v359 = *(_OWORD *)(v215 + 144);
  long long v360 = *(_OWORD *)(v215 + 160);
  __int16 v361 = *(_WORD *)(v215 + 176);
  long long v354 = *(_OWORD *)(v215 + 64);
  long long v355 = *(_OWORD *)(v215 + 80);
  long long v356 = *(_OWORD *)(v215 + 96);
  long long v357 = *(_OWORD *)(v215 + 112);
  *(_OWORD *)v351 = *(_OWORD *)v215;
  uint64_t v216 = v74 + 76;
  *(_OWORD *)&v351[4] = *(_OWORD *)(v215 + 16);
  long long v352 = *(_OWORD *)(v215 + 32);
  uint64_t v345 = v215;
  long long v353 = *(_OWORD *)(v215 + 48);
  while (1)
  {
    uint64_t v217 = 0;
    LODWORD(v218) = -1;
    char v219 = -100;
    do
    {
      int v220 = *((char *)v351 + v217);
      if (v220 <= v219) {
        uint64_t v218 = v218;
      }
      else {
        uint64_t v218 = v217;
      }
      if (v220 > v219) {
        char v219 = *((unsigned char *)v351 + v217);
      }
      ++v217;
    }
    while (v217 != 178);
    if ((v218 & 0x80000000) != 0) {
      break;
    }
    *((unsigned char *)v351 + v218) = -120;
    if ((*(char *)(v345 + v218) & 0x80000000) == 0 || v372[v218] > 0.0)
    {
      LODWORD(v362[0].f64[0]) = 0;
      unsigned __int8 v343 = LongPrnIdx_To_Prn(v218, (int *)v362);
      v221 = &v9[v214];
      v9[v214 + 1732] = v343;
      int v341 = v213;
      uint64_t v222 = (char)v375[v218];
      switch(LODWORD(v362[0].f64[0]))
      {
        case 1:
          if (v375[v218])
          {
            if (v375[v218] == 1) {
              int v223 = 18;
            }
            else {
              int v223 = 0;
            }
          }
          else
          {
            int v223 = 17;
          }
          int v224 = 1;
          break;
        case 2:
          if (v222 >= 8) {
            int v223 = 0;
          }
          else {
            int v223 = *(_DWORD *)&asc_22BB0E008[4 * v222];
          }
          int v224 = 2;
          break;
        case 3:
          unsigned int v225 = (v222 - 8);
          BOOL v226 = v225 >= 4;
          int v227 = v225 + 97;
          int v228 = 6;
          goto LABEL_353;
        case 4:
          unsigned int v229 = (v222 - 12);
          BOOL v226 = v229 >= 3;
          int v227 = v229 + 81;
          int v228 = 5;
LABEL_353:
          int v224 = v228;
          if (v226) {
            int v223 = 0;
          }
          else {
            int v223 = v227;
          }
          break;
        case 5:
          if (v375[v218])
          {
            if (v375[v218] == 1) {
              int v223 = 50;
            }
            else {
              int v223 = 0;
            }
          }
          else
          {
            int v223 = 49;
          }
          int v224 = 3;
          break;
        case 6:
          if (v375[v218]) {
            int v223 = 0;
          }
          else {
            int v223 = 65;
          }
          int v224 = 4;
          break;
        default:
          int v224 = 0;
          int v223 = 0;
          break;
      }
      uint64_t v230 = 0;
      v221[1732] = LongPrnIdx_To_Prn(v218, (int *)v362);
      v231 = &v331[4 * v214];
      *((_DWORD *)v231 + 81) = v224;
      *((_DWORD *)v231 + 209) = v223;
      uint64_t v9 = v331;
      v221[1860] = *((unsigned char *)v367 + v218);
      v232 = &v331[8 * v214];
      *((double *)v232 + 249) = v372[v218];
      *((double *)v232 + 377) = v371[v218];
      v221[6216] = v369[v218];
      uint64_t v233 = 2120;
      uint64_t v234 = v333;
      while (1)
      {
        int v235 = *(_DWORD *)(v216 + v230);
        if (Is_Legal(v235))
        {
          if (GNSS_Id_To_Num_Prn_Idx(v235) == v218) {
            break;
          }
        }
        v233 += 40;
        v230 += 4;
        if (v230 == 192) {
          goto LABEL_383;
        }
      }
      uint64_t v236 = *(void *)(p_api + 176);
      int v237 = *(_DWORD *)(v236 + v230 + 5928);
      if (v237) {
        int v238 = *(_DWORD *)(v329 + 32) - v237;
      }
      else {
        int v238 = 0x7FFFFFFF;
      }
      if (v238 < 0) {
        int v238 = -v238;
      }
      if (v238 >> 5 <= 0x752)
      {
        uint64_t v239 = v236 + v233;
        *(void *)&v331[8 * v214 + 4040] = *(void *)(v239 + 1920);
        double v240 = *(double *)v239;
        goto LABEL_386;
      }
LABEL_383:
      int v241 = *(__int16 *)(v345 + 2 * v218 + 178);
      if ((v241 & 0x80000000) == 0) {
        *(double *)&v331[8 * v214 + 4040] = (double)v241;
      }
      double v240 = (double)*(char *)(v345 + v218);
LABEL_386:
      uint64_t v242 = v335;
      int v243 = v341;
      unsigned __int8 v244 = v343;
      *(double *)&v331[8 * v214 + 5064] = v240;
      int v245 = v373[v218];
      v331[v214 + 6088] = v245;
      uint64_t v246 = v335 + v218;
      if (*(unsigned char *)(v335 + v218 + 37344)) {
        BOOL v247 = 1;
      }
      else {
        BOOL v247 = *(unsigned char *)(v246 + 37522) != 0;
      }
      v248 = &v331[3 * v214];
      v249 = (unsigned __int16 *)(v248 + 1348);
      int v250 = *((unsigned __int16 *)v248 + 674);
      unsigned int v251 = v250 & 0xFFFFFFFE | (v248[1350] << 16) | v247;
      *((_WORD *)v248 + 674) = v250 & 0xFFFE | v247;
      unsigned int v252 = v251 & 0xFFFFFFFD | (2 * (*(unsigned char *)(v246 + 37522) & 0x7F));
      *((_WORD *)v248 + 674) = v252;
      if (v247)
      {
        switch(LODWORD(v362[0].f64[0]))
        {
          case 1:
            uint64_t v253 = v343 - 1;
            int v254 = *(_DWORD *)(v335 + 108 * (int)v253 + 108);
            uint64_t v255 = *(void *)(v335 + 80);
            goto LABEL_397;
          case 2:
            uint64_t v253 = v343 - 1;
            int v254 = *(_DWORD *)(v335 + (v253 << 6) + 11228);
            uint64_t v255 = *(void *)(v335 + 16312);
            goto LABEL_397;
          case 3:
            uint64_t v253 = v343 - 1;
            int v254 = *(_DWORD *)(v335 + 88 * (int)v253 + 16740);
            uint64_t v255 = *(void *)(v335 + 16640);
            goto LABEL_397;
          case 4:
            uint64_t v253 = v343 - 1;
            int v254 = *(_DWORD *)(v335 + 100 * (int)v253 + 24524);
            uint64_t v255 = *(void *)(v335 + 24496);
            goto LABEL_397;
          case 5:
            uint64_t v253 = v343 - 193;
            int v254 = *(_DWORD *)(v335 + 108 * (int)v253 + 8612);
            uint64_t v255 = *(void *)(v335 + 8584);
LABEL_397:
            unsigned int v257 = *(unsigned __int8 *)(v255 + v253);
            if (v257)
            {
              unsigned int v257 = HIWORD(v252);
              v252 |= 0x20u;
              *((unsigned char *)v249 + 2) = v257;
              unsigned __int16 *v249 = v252;
              LOBYTE(v257) = 1;
            }
            switch(v254)
            {
              case 0:
              case 1:
              case 2:
                goto LABEL_410;
              case 3:
                unsigned int v258 = HIWORD(v252);
                *((unsigned char *)v249 + 2) = BYTE2(v252);
                unsigned __int16 *v249 = v252 | 0x10;
                if (v257) {
                  goto LABEL_410;
                }
                __int16 v259 = 272;
                break;
              case 4:
                unsigned int v258 = HIWORD(v252);
                *((unsigned char *)v249 + 2) = BYTE2(v252);
                unsigned __int16 *v249 = v252 | 4;
                if (v257) {
                  goto LABEL_410;
                }
                __int16 v259 = 68;
                break;
              case 5:
                unsigned int v258 = HIWORD(v252);
                *((unsigned char *)v249 + 2) = BYTE2(v252);
                unsigned __int16 *v249 = v252 | 8;
                if (v257) {
                  goto LABEL_410;
                }
                __int16 v259 = 136;
                break;
              case 6:
                *((unsigned char *)v249 + 2) = BYTE2(v252);
                unsigned __int16 *v249 = v252 | 2;
                goto LABEL_410;
              default:
                unsigned int v256 = 4512;
                goto LABEL_403;
            }
            *((unsigned char *)v249 + 2) = v258;
            unsigned __int16 *v249 = v252 | v259;
            break;
          case 6:
            goto LABEL_431;
          default:
            unsigned int v256 = 4483;
LABEL_403:
            int v260 = v245;
            EvCrt_Illegal_Default("API_Get_Nav_Data", v256);
            int v245 = v260;
            int v243 = v341;
            uint64_t v234 = v333;
            unsigned __int8 v244 = v343;
            break;
        }
      }
LABEL_410:
      switch(LODWORD(v362[0].f64[0]))
      {
        case 1:
          uint64_t v261 = v244 - 1;
          if (*(unsigned char *)(v234 + v261 + 15))
          {
            v262 = (unsigned int *)(v234 + 72 * (int)v261 + 852);
            goto LABEL_423;
          }
          break;
        case 2:
          uint64_t v264 = v244 - 1;
          if (*(unsigned char *)(v234 + v264 + 99))
          {
            uint64_t v265 = v234 + (v264 << 6);
            uint64_t v266 = 15216;
            goto LABEL_422;
          }
          break;
        case 3:
          uint64_t v267 = v244 - 1;
          if (*(unsigned char *)(v234 + v267 + 150))
          {
            uint64_t v265 = v234 + 88 * (int)v267;
            uint64_t v266 = 5404;
            goto LABEL_422;
          }
          break;
        case 4:
          uint64_t v268 = v244 - 1;
          if (*(unsigned char *)(v234 + v268 + 223))
          {
            uint64_t v265 = v234 + 100 * (int)v268;
            uint64_t v266 = 9888;
            goto LABEL_422;
          }
          break;
        case 5:
          uint64_t v269 = v244 - 193;
          if (*(unsigned char *)(v234 + v269 + 79))
          {
            uint64_t v265 = v234 + 72 * (int)v269;
            uint64_t v266 = 4308;
LABEL_422:
            v262 = (unsigned int *)(v265 + v266);
LABEL_423:
            unsigned int v270 = *v262;
            if (v270 > 6)
            {
              unsigned int v263 = 4563;
              goto LABEL_428;
            }
            if (((1 << v270) & 0x57) == 0)
            {
              if (v270 == 3) {
                unsigned __int16 v271 = *v249 | 0x10;
              }
              else {
                unsigned __int16 v271 = *v249 | 8;
              }
              unsigned __int16 *v249 = v271;
            }
          }
          break;
        case 6:
          break;
        default:
          unsigned int v263 = 4532;
LABEL_428:
          uint64_t v272 = v234;
          int v273 = v243;
          int v274 = v245;
          EvCrt_Illegal_Default("API_Get_Nav_Data", v263);
          int v245 = v274;
          int v243 = v273;
          uint64_t v234 = v272;
          uint64_t v242 = v335;
          unsigned __int8 v244 = v343;
          break;
      }
LABEL_431:
      if (*(unsigned char *)(v242 + v218 + 37700))
      {
        int v275 = *((unsigned __int8 *)v249 + 2);
        int v276 = *v249;
        unsigned __int16 *v249 = v276 | 0x200;
        switch(LODWORD(v362[0].f64[0]))
        {
          case 1:
            uint64_t v277 = v242 + 44 * v244;
            uint64_t v278 = 6976;
            goto LABEL_438;
          case 2:
            uint64_t v277 = v242 + 36 * v244;
            uint64_t v278 = 15320;
            goto LABEL_438;
          case 3:
            uint64_t v277 = v242 + 36 * v244;
            uint64_t v278 = 23040;
            goto LABEL_438;
          case 4:
            uint64_t v277 = v242 + 44 * v244;
            uint64_t v278 = 31880;
LABEL_438:
            v280 = (_DWORD *)(v277 + v278);
            goto LABEL_439;
          case 5:
            v280 = (_DWORD *)(v242 + 44 * v244 + 2280);
LABEL_439:
            int v281 = v276 | (v275 << 16);
            switch(*v280)
            {
              case 0:
              case 1:
              case 2:
              case 6:
                goto LABEL_447;
              case 3:
                __int16 v282 = -28160;
                goto LABEL_446;
              case 4:
                __int16 v282 = 9728;
                goto LABEL_446;
              case 5:
                __int16 v282 = 18944;
LABEL_446:
                *((unsigned char *)v249 + 2) = BYTE2(v281);
                unsigned __int16 *v249 = v281 | v282;
                break;
              default:
                unsigned int v279 = 4607;
                goto LABEL_443;
            }
            break;
          case 6:
            goto LABEL_468;
          default:
            unsigned int v279 = 4588;
LABEL_443:
            uint64_t v283 = v234;
            int v284 = v243;
            int v285 = v245;
            EvCrt_Illegal_Default("API_Get_Nav_Data", v279);
            int v245 = v285;
            int v243 = v284;
            uint64_t v234 = v283;
            uint64_t v242 = v335;
            unsigned __int8 v244 = v343;
            break;
        }
      }
LABEL_447:
      switch(LODWORD(v362[0].f64[0]))
      {
        case 1:
          uint64_t v286 = v244 - 1;
          if (*(unsigned char *)(v234 + v286 + 47))
          {
            v287 = (unsigned int *)(v234 + 36 * (int)v286 + 3156);
            goto LABEL_460;
          }
          break;
        case 2:
          uint64_t v289 = v244 - 1;
          if (*(unsigned char *)(v234 + v289 + 123))
          {
            uint64_t v290 = v234 + 36 * (int)v289;
            uint64_t v291 = 16752;
            goto LABEL_459;
          }
          break;
        case 3:
          uint64_t v292 = v244 - 1;
          if (*(unsigned char *)(v234 + v292 + 186))
          {
            uint64_t v290 = v234 + 36 * (int)v292;
            uint64_t v291 = 8572;
            goto LABEL_459;
          }
          break;
        case 4:
          uint64_t v293 = v244 - 1;
          if (*(unsigned char *)(v234 + v293 + 260))
          {
            uint64_t v290 = v234 + 44 * (int)v293;
            uint64_t v291 = 13588;
            goto LABEL_459;
          }
          break;
        case 5:
          uint64_t v294 = v244 - 193;
          if (*(unsigned char *)(v234 + v294 + 89))
          {
            uint64_t v290 = v234 + 36 * (int)v294;
            uint64_t v291 = 5028;
LABEL_459:
            v287 = (unsigned int *)(v290 + v291);
LABEL_460:
            unsigned int v295 = *v287;
            if (v295 > 6)
            {
              unsigned int v288 = 4656;
              goto LABEL_465;
            }
            if (((1 << v295) & 0x57) == 0)
            {
              if (v295 == 3) {
                unsigned __int16 v296 = *v249 | 0x1000;
              }
              else {
                unsigned __int16 v296 = *v249 | 0x800;
              }
              unsigned __int16 *v249 = v296;
            }
          }
          break;
        case 6:
          break;
        default:
          unsigned int v288 = 4625;
LABEL_465:
          int v297 = v243;
          int v298 = v245;
          EvCrt_Illegal_Default("API_Get_Nav_Data", v288);
          int v245 = v298;
          int v243 = v297;
          break;
      }
LABEL_468:
      unsigned int v299 = (*v249 | (*((unsigned __int8 *)v249 + 2) << 16)) & 0xFFFEFFFF | (*(unsigned __int8 *)(v242 + v218 + 33605) << 16);
      *((unsigned char *)v249 + 2) = BYTE2(v299);
      unsigned int v300 = v299 & 0xFFFDFFFF | (*(unsigned __int8 *)(v242 + v218 + 33605) << 17);
      *((unsigned char *)v249 + 2) = BYTE2(v300);
      unsigned int v301 = v300 & 0xFFFBFFFF | (*(unsigned __int8 *)(v242 + v218 + 33605) << 18);
      *((unsigned char *)v249 + 2) = BYTE2(v301);
      unsigned int v302 = v301 & 0xFFF7FFFF | (*(unsigned __int8 *)(v242 + v218 + 33605) << 19);
      *((unsigned char *)v249 + 2) = BYTE2(v302);
      *((unsigned char *)v249 + 2) = (v302 & 0xFFEFFFFF | (*(unsigned __int8 *)(v242 + v218 + 33605) << 20)) >> 16;
      ++v214;
      int v213 = v243 + v245;
    }
    if (v214 >= 0x80) {
      goto LABEL_481;
    }
  }
  unint64_t v304 = 0;
  do
  {
    double v305 = v365[v304];
    if (v305 > 0.0)
    {
      v306 = &v9[v214];
      v9[v214 + 1860] = v304 - 7;
      unint64_t v307 = v366[v304];
      if (v307 > 7) {
        int v308 = 0;
      }
      else {
        int v308 = *(_DWORD *)&asc_22BB0E008[4 * v307];
      }
      v309 = &v9[4 * v214];
      *((_DWORD *)v309 + 81) = 2;
      *((_DWORD *)v309 + 209) = v308;
      v310 = (double *)&v9[8 * v214];
      double v311 = v364[v304];
      v310[249] = v305;
      v310[377] = v311;
      v306[6216] = v363[v304];
      v310[505] = 0.0;
      v310[633] = -99.0;
      v306[6088] = 0;
      ++v214;
    }
    if (v304 > 0xC) {
      break;
    }
    ++v304;
  }
  while (v214 < 0x80);
LABEL_481:
  v9[319] = v214;
  v9[320] = v213;
  *(_DWORD *)uint64_t v9 = v339;
  uint64_t result = 1;
  *int v8 = v339;
  return result;
}

uint64_t API_Get_Raw_Meas_Data(void *a1)
{
  uint64_t v241 = *MEMORY[0x263EF8340];
  uint64_t v207 = a1 + 9758;
  unsigned int v195 = a1 + 6409;
  bzero(a1, 0x288F8uLL);
  uint64_t v205 = *(void *)(p_api + 32);
  uint64_t v2 = *(void *)(p_api + 72);
  uint64_t v3 = *(void *)(p_api + 16);
  uint64_t v4 = *(void *)(p_api + 56);
  uint64_t v196 = v4 + 33548;
  uint64_t v192 = v4 + 24368;
  uint64_t v190 = (unsigned char *)(v4 + 16232);
  uint64_t v214 = v4;
  long long v191 = (unsigned __int8 *)(v4 + 8456);
  uint64_t v197 = *(void *)(p_api + 88);
  uint64_t v5 = *(void *)(p_api + 104);
  uint64_t v208 = *(void *)(p_api + 96);
  uint64_t v6 = *(void *)(p_api + 176);
  uint64_t v7 = *(void *)(p_api + 232);
  uint64_t v202 = *(void *)(p_api + 48);
  *a1 = 1000000 * *(unsigned int *)(v202 + 8);
  if (*(_WORD *)(v2 + 248))
  {
    a1[1] = *(void *)(v2 + 160);
    a1[2] = *(void *)(v2 + 232);
    *(float64x2_t *)(a1 + 3) = vmulq_f64(vsqrtq_f64(*(float64x2_t *)(v6 + 56)), (float64x2_t)vdupq_n_s64(0x400AAF6485FFABE7uLL));
    *((double *)a1 + 5) = *(double *)(v2 + 224) * *(double *)(v2 + 224);
    *((double *)a1 + 6) = *(double *)(v2 + 208) * *(double *)(v2 + 208);
  }
  unint64_t v206 = (double *)v6;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *((_DWORD *)a1 + 14) = 0;
  uint64_t v183 = v7 + 6848;
  uint64_t v181 = v7 + 7616;
  uint64_t v11 = 10408;
  long long v184 = (double *)(v7 + 10408);
  long long v186 = (double *)v2;
  uint64_t v182 = v7 + 4832;
  uint64_t v12 = -2688;
  uint64_t v13 = 3296;
  uint64_t v203 = v5;
  do
  {
    uint64_t v14 = v3 + v9;
    int v15 = *(unsigned __int8 *)(v3 + v9 + 2720);
    if (*(unsigned char *)(v3 + v9 + 2720))
    {
      int v16 = *(unsigned __int8 *)(v14 + 2722);
      if ((v15 == 2 || v16 != 0) && v15 == *(unsigned __int8 *)(v5 + v8 + 76))
      {
        uint64_t v18 = v3 + v9;
        if (*(unsigned __int8 *)(v3 + v9 + 2721) == *(unsigned __int8 *)(v5 + v8 + 77)
          && *(unsigned __int8 *)(v18 + 2723) == *(unsigned __int8 *)(v5 + v8 + 79)
          && (!*(unsigned char *)(v14 + 2722) || v16 == *(unsigned __int8 *)(v5 + v8 + 78)))
        {
          unsigned int v19 = *((unsigned __int16 *)a1 + 32);
          if (v19 > 0xFF) {
            break;
          }
          *((_WORD *)a1 + 32) = v19 + 1;
          unint64_t v209 = (int *)(v14 + 2720);
          uint64_t v20 = (uint64_t)&a1[25 * v19 + 8];
          *(_WORD *)(v20 + 8) = -1;
          char v178 = (_WORD *)(v20 + 8);
          uint64_t v199 = v3 + v9;
          long long v188 = (double *)(v5 + v8);
          unsigned int v193 = v19;
          int v21 = 0;
          switch(*(unsigned char *)(v18 + 2721))
          {
            case 0:
              unint64_t v23 = *(char *)v209;
              if (v23 >= 7)
              {
                unsigned int v22 = 5136;
                goto LABEL_28;
              }
              int v21 = dword_22BB0E028[v23];
              break;
            case 1:
              int v21 = 1;
              break;
            case 2:
              int v21 = 2;
              break;
            case 3:
              int v21 = 3;
              break;
            case 4:
              int v21 = 4;
              break;
            case 5:
            case 6:
            case 7:
            case 0xE:
              break;
            case 8:
              int v21 = 7;
              break;
            case 9:
            case 0xA:
            case 0xB:
              int v21 = 8;
              break;
            case 0xC:
              int v21 = 5;
              break;
            case 0xD:
              int v21 = 6;
              break;
            default:
              unsigned int v22 = 5156;
LABEL_28:
              uint64_t v24 = v7;
              EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", v22);
              unsigned int v19 = v193;
              uint64_t v7 = v24;
              int v21 = 0;
              break;
          }
          HIDWORD(a1[25 * v19 + 9]) = v21;
          uint64_t v198 = v7;
          switch(*(unsigned char *)v209)
          {
            case 0:
              LODWORD(a1[25 * v19 + 10]) = 0;
              break;
            case 1:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 1;
              goto LABEL_38;
            case 2:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 2;
              goto LABEL_38;
            case 3:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 6;
              goto LABEL_38;
            case 4:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 5;
              goto LABEL_38;
            case 5:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 3;
              goto LABEL_38;
            case 6:
              uint64_t v25 = &a1[25 * v19];
              int v26 = 4;
LABEL_38:
              *((_DWORD *)v25 + 20) = v26;
              break;
            default:
              EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x1434u);
              break;
          }
          int v27 = GM_Gen_SV_Meas_QI((uint64_t)v209);
          if (*(unsigned char *)v209 == 2)
          {
            uint64_t v29 = v3 + v9;
            __int16 v30 = *(char *)(v199 + 2723);
          }
          else
          {
            __int16 v30 = *(unsigned __int8 *)(v14 + 2722);
            uint64_t v29 = v3 + v9;
          }
          unsigned int v31 = v193;
          uint64_t v32 = &a1[25 * v193];
          *((_WORD *)v32 + 42) = v30;
          double v33 = *(double *)(v202 + 24) * 1000000000.0;
          v32[13] = (uint64_t)v33;
          uint64_t v34 = v32 + 13;
          signed __int16 v35 = *(_WORD *)(v3 + v12 + 2754);
          uint64_t v36 = (uint64_t)v33 - 1000000 * v35;
          *(v34 - 1) = v36;
          uint64_t v37 = v3 + v9;
          int v38 = *(unsigned __int8 *)(v3 + v9 + 2742);
          unsigned int v39 = *(unsigned __int16 *)(v3 + v9 + 2740);
          int v40 = v39 <= 1 ? 1 : *(unsigned __int16 *)(v3 + v9 + 2740);
          *(v34 - 2) = v36 - ((1000000 * v38 * v40) & 0xFFFFFFC0);
          int v41 = *(unsigned __int16 *)(v37 + 2728);
          char v42 = (v41 & 0x200) != 0 ? 9 : 1;
          char v43 = (~v41 & 0x300) != 0 ? v42 : 15;
          *((unsigned char *)v34 + 8) = v43;
          double v44 = *(double *)(v3 + v12 + 2768) * 1000000000.0;
          char v179 = v34;
          *((double *)v34 + 2) = v44;
          if (v27 >= 10 && *(_WORD *)(v37 + 2730))
          {
            int v175 = v27;
            unsigned int GNSS_PR_Meas_Var = API_Get_GNSS_PR_Meas_Var((uint64_t)v209, v35, *(unsigned char *)(v3 + v12 + 2758), *(unsigned char *)(v198 + v10 + 978));
            uint64_t v37 = v3 + v9;
            uint64_t v29 = v3 + v9;
            double v46 = (double)GNSS_PR_Meas_Var;
            int v27 = v175;
            unsigned int v31 = v193;
            double v44 = sqrt(v46) * 3.33564095;
            *(double *)&a1[25 * v193 + 16] = v44;
            LOBYTE(v38) = *(unsigned char *)(v3 + v9 + 2742);
            LOWORD(v39) = *(_WORD *)(v3 + v9 + 2740);
          }
          else
          {
            a1[25 * v193 + 16] = 0x42374876E8000000;
          }
          uint64_t v5 = v203;
          LOBYTE(v44) = *(unsigned char *)(v203 + v10 + 604);
          LOBYTE(v28) = *(unsigned char *)(v203 + v10 + 652);
          *(double *)&unint64_t v47 = (double)v28;
          double v48 = (double)*(unint64_t *)&v44 + *(double *)&v47 * 0.0625;
          unsigned int v49 = (double *)&a1[25 * v31];
          v49[17] = v48;
          LOBYTE(v48) = *(unsigned char *)(v203 + v10 + 700);
          LOBYTE(v47) = *(unsigned char *)(v203 + v10 + 748);
          v49[18] = (double)*(unint64_t *)&v48 + (double)v47 * 0.0625;
          *((unsigned char *)v49 + 160) = v38;
          *((_WORD *)v49 + 81) = v39;
          v49[21] = (double)*(int *)(v3 + v12 + 2732) * 0.00247949753;
          int v50 = *(_DWORD *)(v3 + v12 + 2736);
          v49[23] = (double)v50 * 0.00247949753;
          if (v27 < 10) {
            goto LABEL_63;
          }
          uint64_t v51 = v3 + v9;
          if (*(_WORD *)(v3 + v9 + 2732))
          {
            int v176 = v50;
            unsigned int v52 = *(unsigned __int8 *)(v51 + 2724);
            if (v52 >= 0x2B) {
              int v53 = 43;
            }
            else {
              int v53 = *(unsigned __int8 *)(v51 + 2724);
            }
            int v54 = v27;
            NK_Get_DO_Meas_Var(*v209, v53, (v53 - v52 + *(unsigned char *)(v51 + 2725)), *(unsigned __int8 *)(v3 + v12 + 2758), (*(unsigned __int16 *)(v3 + v9 + 2732) / 5u) & 0x3FFE, (*(unsigned __int16 *)(v51 + 2734) / 5u) & 0x3FFE, *(_DWORD *)(v203 + 4 * v10 + 412), (*(unsigned __int16 *)(v3 + v12 + 2754) / 5u) & 0x3FFE, *(_WORD *)(v37 + 2728), (double *)v224);
            int v50 = v176;
            int v27 = v54;
            unsigned int v31 = v193;
            uint64_t v29 = v3 + v9;
            uint64_t v5 = v203;
            double v56 = sqrt(v55 * 0.25) * 3.33564095;
            if (v56 < 1.0) {
              double v56 = 1.0;
            }
            *(double *)&a1[25 * v193 + 22] = v56;
          }
          else
          {
LABEL_63:
            a1[25 * v31 + 22] = 0x40F869FFFFFFFFFFLL;
            double v56 = 100000.0;
          }
          uint16x8_t v57 = &a1[25 * v31];
          *((_DWORD *)v57 + 56) = 0;
          uint16x8_t v58 = (int *)(v57 + 28);
          unint64_t v59 = -1.0;
          if (!v50) {
            double v56 = -1.0;
          }
          *((double *)v58 - 4) = v56;
          *((void *)v58 - 3) = 0x300000002;
          *((_WORD *)v58 - 8) = v10;
          *((unsigned char *)v58 - 12) = v27 > 9;
          if (v27 < 15 || (unsigned int v60 = *(unsigned __int16 *)(v3 + v9 + 2734), v60 < 0x15))
          {
            a1[25 * v31 + 32] = 0x42374876E8000000;
          }
          else
          {
            *(double *)&a1[25 * v31 + 30] = (double)*v179;
            long long v180 = (double *)&a1[25 * v31];
            LOWORD(v59) = *(_WORD *)(v3 + v12 + 2740);
            v180[31] = ((double)*(int *)(v3 + v12 + 2744) + (double)v59 * 0.0000152587891) * 0.634751368;
            int v61 = *(unsigned __int8 *)(v3 + v9 + 2724) >= 0x2Bu ? 43 : *(unsigned __int8 *)(v3 + v9 + 2724);
            unsigned int v177 = v60;
            double DR_Meas_Var = NK_Get_DR_Meas_Var(*v209, v61, *(unsigned __int8 *)(v3 + v12 + 2758), ((52429 * v60) >> 18) & 0x3FFE, (double *)v224);
            unsigned int v31 = v193;
            uint64_t v29 = v3 + v9;
            uint64_t v5 = v203;
            v180[32] = sqrt(DR_Meas_Var * 0.25) * 3.33564095;
            int v63 = *((_DWORD *)v186 + 237) + 100 >= v177 ? 1 : 2;
            *uint16x8_t v58 = v63;
          }
          unsigned int v64 = *(unsigned __int8 *)(v3 + v12 + 2761);
          uint64_t v7 = v198;
          if (v64 == 255)
          {
            LODWORD(a1[25 * v31 + 33]) = 0;
          }
          else
          {
            int v65 = v64 > 9 ? 1 : 2;
            LODWORD(a1[25 * v31 + 33]) = v65;
          }
          HIDWORD(a1[25 * v31 + 33]) = *(_DWORD *)(v3 + v9 + 2730);
          int v66 = *(unsigned __int8 *)v209;
          if (v66 != 6)
          {
            if (v66 == 2)
            {
              char v67 = *((unsigned char *)v188 + 78);
              if (!v67)
              {
                if (*(_DWORD *)(v214 + 4 * *(char *)(v29 + 2723) + 16460) == 2139062143) {
                  goto LABEL_129;
                }
                char v67 = *(_DWORD *)(v214 + 4 * *(char *)(v29 + 2723) + 16460);
                if (!v67) {
                  goto LABEL_129;
                }
              }
              char v68 = v67;
              *(unsigned char *)(v14 + 2722) = v67;
            }
            else
            {
              char v68 = 0;
            }
            unsigned int v69 = GNSS_Id_To_Num_Pos_Idx(*v209);
            uint64_t v5 = v203;
            uint64_t v7 = v198;
            if (!v208 || !*(_DWORD *)(v208 + 192 * v69 + 184)) {
              goto LABEL_129;
            }
            unsigned int v70 = *((unsigned __int16 *)v195 + 80);
            if (v70 > 0xFF) {
              break;
            }
            int v71 = &a1[13 * *((unsigned __int16 *)v195 + 80) + 6430];
            *int v71 = *((unsigned char *)a1 + 64) - 1;
            *char v178 = v70;
            *((_WORD *)v195 + 80) = v70 + 1;
            v71[1] = v68;
            if (*(unsigned char *)v209 == 2)
            {
              switch(*(_DWORD *)(v214 + 4 * *(char *)(v199 + 2723) + 16516))
              {
                case 0:
                  HIDWORD(a1[13 * v70 + 6430]) = 0;
                  break;
                case 1:
                  uint64_t v72 = &a1[13 * v70];
                  int v73 = 2;
                  goto LABEL_100;
                case 2:
                  uint64_t v72 = &a1[13 * v70];
                  int v73 = 3;
                  goto LABEL_100;
                case 3:
                  uint64_t v72 = &a1[13 * v70];
                  int v73 = 4;
LABEL_100:
                  *((_DWORD *)v72 + 12861) = v73;
                  break;
                default:
                  HIDWORD(a1[13 * v70 + 6430]) = 0;
                  EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x1568u);
                  uint64_t v7 = v198;
                  uint64_t v5 = v203;
                  break;
              }
            }
            else
            {
              HIDWORD(a1[13 * v70 + 6430]) = 1;
            }
            int v74 = *(unsigned __int8 *)v209;
            if (v74 == 4)
            {
              double v75 = *(double *)(v5 + 24) + -14.0 + *(double *)(v5 + 8 * v10 + 1232) * -0.00000000333564095;
              double v76 = 604800.0;
            }
            else
            {
              if (v74 != 2)
              {
                double v75 = *(double *)(v5 + 24) + *(double *)(v5 + 8 * v10 + 1232) * -0.00000000333564095;
LABEL_109:
                double v78 = v75 * 1000000000.0;
                if (v78 < 0.0) {
                  double v78 = v78 + 6.048e14;
                }
                *(double *)&a1[13 * v70 + 6431] = v78;
                uint64_t v79 = v7 + v10;
                int v80 = *(unsigned __int8 *)(v7 + v10 + 2960);
                if (*(unsigned char *)(v7 + v10 + 2960))
                {
                  double v81 = sqrt(*(double *)(v7 + v13) + *(double *)(v7 + v13 + 8));
                  uint64_t v82 = (uint64_t)&a1[13 * v70 + 6430];
                  *(double *)(v82 + 80) = v81;
                  *(double *)(v82 + 16) = v81 * 3.33564095;
                  *(void *)(v82 + 32) = *(void *)(v182 + 8 * v10);
                }
                LODWORD(a1[13 * v70 + 6433]) = 0;
                uint64_t v83 = (char *)v184 + v10;
                int v84 = (char *)v184 + v10 - 1872;
                int v85 = *v84;
                if (*v84) {
                  a1[13 * v70 + 6435] = *(void *)(v7 + v11);
                }
                if (v83[3704]) {
                  a1[13 * v70 + 6436] = *(void *)(v7 + v11 + 5576);
                }
                if (v80)
                {
                  int v86 = *(_DWORD *)(v7 + 4 * v10 + 3056);
                  if ((v86 - 1) >= 0x1D)
                  {
                    if (v86)
                    {
                      uint64_t v210 = v7 + v10;
                      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                      uint64_t v7 = v198;
                      int v84 = (char *)v184 + v10 - 1872;
                      uint64_t v79 = v210;
                      uint64_t v5 = v203;
                      int v85 = *v84;
                    }
                    else
                    {
                      a1[13 * v70 + 6437] = *(void *)(v181 + 8 * v10);
                    }
                  }
                }
                if (v85)
                {
                  int v87 = *(_DWORD *)(v7 + v8 + 8632);
                  if ((v87 - 1) >= 0x1D)
                  {
                    if (v87)
                    {
                      uint64_t v211 = v79;
                      unint64_t v200 = v84;
                      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                      uint64_t v7 = v198;
                      int v84 = v200;
                      uint64_t v79 = v211;
                      uint64_t v5 = v203;
                    }
                    else
                    {
                      a1[13 * v70 + 6438] = *(void *)(v7 + v11 + 2784);
                    }
                  }
                }
                if (v83[3704])
                {
                  int v88 = *(_DWORD *)(v7 + v8 + 14208);
                  if ((v88 - 1) >= 0x1D)
                  {
                    if (v88)
                    {
                      uint64_t v212 = v79;
                      unsigned int v201 = v84;
                      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                      uint64_t v7 = v198;
                      int v84 = v201;
                      uint64_t v79 = v212;
                      uint64_t v5 = v203;
                    }
                    else
                    {
                      a1[13 * v70 + 6439] = *(void *)(v7 + v11 + 8360);
                    }
                  }
                }
                if (*(unsigned char *)(v79 + 2960)) {
                  *(double *)&a1[13 * v70 + 6440] = sqrt(*(double *)(v183 + 8 * v10));
                }
                if (*v84) {
                  *(double *)&a1[13 * v70 + 6441] = sqrt(*(double *)(v7 + v11 + 2016));
                }
                if (v83[3704]) {
                  *(double *)&a1[13 * v70 + 6442] = sqrt(*(double *)(v7 + v11 + 7592));
                }
                goto LABEL_129;
              }
              double v75 = *(double *)(v5 + 64) + *(double *)(v5 + 8 * v10 + 1232) * -0.00000000333564095;
              double v76 = 86400.0;
            }
            double v77 = v75 + v76;
            if (v75 < 0.0) {
              double v75 = v77;
            }
            goto LABEL_109;
          }
        }
      }
    }
LABEL_129:
    ++v10;
    v9 += 36;
    v8 += 4;
    v12 += 56;
    v11 += 8;
    v13 += 24;
  }
  while (v10 != 48);
  uint64_t v89 = 0;
  uint64_t v194 = (double *)(v197 + 144);
  long long v187 = (double *)(v197 + 152);
  long long v189 = (double *)(v197 + 160);
  long long v185 = v206 + 43;
  int v90 = (int *)(v196 + 252);
  double v91 = 0.5;
  float64x2_t v204 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
  uint64_t v92 = v208;
  do
  {
    char Constell_Prn = Get_Constell_Prn(v89);
    unsigned __int8 v94 = Num_Prn_Idx_To_GNSS_Id(v89);
    unsigned __int8 v95 = v94;
    if (Constell_Prn == 2)
    {
      int v96 = *(_DWORD *)(v214 + 4 * v94 + 16332);
      if (v96 == 2139062143) {
        goto LABEL_225;
      }
    }
    else
    {
      if (Constell_Prn == 6) {
        break;
      }
      LOBYTE(v96) = 0;
    }
    unsigned int v97 = Num_Prn_Idx_To_Num_Pos_Idx(v89);
    if (v97 - 1 <= 0x93)
    {
      unsigned int v98 = v97;
      uint64_t v213 = v92 + 192 * v97;
      if (*(_DWORD *)(v213 + 184))
      {
        unsigned int v99 = (unsigned __int16)*v207;
        if (v99 > 0xFF) {
          break;
        }
        *uint64_t v207 = v99 + 1;
        unsigned int v100 = (int *)&a1[43 * v99 + 9759];
        switch(Constell_Prn)
        {
          case 1:
            int v101 = 1;
            goto LABEL_155;
          case 2:
            *unsigned int v100 = 2;
            __int16 v102 = (char)v96;
            unsigned __int8 v103 = v95;
            goto LABEL_157;
          case 3:
            int v101 = 6;
            goto LABEL_155;
          case 4:
            int v101 = 5;
            goto LABEL_155;
          case 5:
            int v101 = 3;
LABEL_155:
            *unsigned int v100 = v101;
            break;
          default:
            EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x1631u);
            break;
        }
        unsigned __int8 v103 = 0;
        __int16 v102 = v95;
LABEL_157:
        uint64_t v104 = (uint64_t)&a1[43 * v99 + 9759];
        *(_WORD *)(v104 + 4) = v102;
        *(unsigned char *)(v104 + 6) = v103;
        double v105 = sqrt(*(double *)(v92 + 192 * v98 + 112) * v91);
        *(double *)(v104 + 144) = v105;
        *(double *)(v104 + 152) = v105 * 3.33564095;
        unsigned int v106 = *(v90 - 4);
        if (v106 >= 3)
        {
          EvCrt_Illegal_Default("Set_e_GN_RM_HI_State", 0x1338u);
          unsigned int v106 = 0;
        }
        LODWORD(a1[43 * v99 + 9779]) = v106;
        unsigned int v107 = *(v90 - 3);
        if (v107 >= 3)
        {
          EvCrt_Illegal_Default("Set_e_GN_RM_HI_State", 0x1338u);
          unsigned int v107 = 0;
        }
        HIDWORD(a1[43 * v99 + 9779]) = v107;
        unsigned int v108 = *(v90 - 2);
        if (v108 >= 3)
        {
          EvCrt_Illegal_Default("Set_e_GN_RM_HI_State", 0x1338u);
          unsigned int v108 = 0;
        }
        LODWORD(a1[43 * v99 + 9780]) = v108;
        unsigned int v109 = *(v90 - 1);
        if (v109 >= 3)
        {
          EvCrt_Illegal_Default("Set_e_GN_RM_HI_State", 0x1338u);
          unsigned int v109 = 0;
        }
        HIDWORD(a1[43 * v99 + 9780]) = v109;
        int v110 = *v90;
        if (*v90 >= 3)
        {
          EvCrt_Illegal_Default("Set_e_GN_RM_HI_State", 0x1338u);
          int v110 = 0;
        }
        LODWORD(a1[43 * v99 + 9781]) = v110;
        int v220 = *(char *)(v205 + v89);
        uint64_t v111 = v205 + 8 * v89;
        double v112 = *(double *)(v111 + 536);
        double v113 = v112 * 57.2957795;
        double v222 = v112;
        double v223 = v112 * 57.2957795;
        __double2 v114 = __sincos_stret(v112);
        __double2 v221 = v114;
        int v215 = *(__int16 *)(v205 + 2 * v89 + 178);
        long double v218 = *(double *)(v111 + 1960);
        double v219 = v218 * 57.2957795;
        long double v216 = sin(v218);
        double cosval = v114.__cosval;
        double v115 = v206[187];
        if (v115 > 0.0 && v113 >= 0.0) {
          *(double *)&a1[43 * v99 + 9782] = v115 * Trop_Elev_MapF((uint64_t)&v220);
        }
        LOWORD(a1[43 * v99 + 9783]) = 1;
        char v116 = Constell_Prn - 1;
        if ((Constell_Prn - 1) >= 6u)
        {
          EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x167Du);
          int v118 = 0;
          uint64_t v117 = 15;
        }
        else
        {
          uint64_t v117 = qword_22BB0E048[v116];
          int v118 = dword_22BB0E078[v116];
        }
        HIDWORD(a1[43 * v99 + 9783]) = v118;
        double v119 = 0.0;
        double v120 = 0.0;
        if (*(_DWORD *)(v214 + 8428))
        {
          double v120 = 0.0;
          if (v223 >= 0.0) {
            double v120 = GPS_Klob_Iono_Delay((double *)(v197 + 208), (uint64_t)&v215, (uint64_t)&v220, (char *)(v214 + 8424), *(double *)(v202 + 24))* g_GPS_L1_Iono_SF_Table[v117];
          }
        }
        *(double *)&a1[43 * v99 + 9786] = v120;
        double v121 = 0.0;
        switch(v118)
        {
          case 1:
          case 9:
            break;
          case 4:
            double v122 = v206[911];
            double v123 = v206[912];
            *(void *)&v224[0] = 0;
            if (R8_EQ(v187, (const double *)v224)) {
              goto LABEL_182;
            }
            double v235 = 0.0;
            BOOL v124 = R8_EQ(v194, &v235);
            double v125 = 0.0;
            double v126 = 0.0;
            if (v124) {
              goto LABEL_187;
            }
            double v125 = (*v187 - *v194) * 299792458.0;
            *(void *)&long long v228 = 0;
            long long v226 = 0u;
            long long v227 = 0u;
            long long v225 = 0u;
            memset(v224, 0, sizeof(v224));
            long long v239 = 0u;
            long long v240 = 0u;
            long long v237 = 0u;
            long long v238 = 0u;
            long long v236 = 0u;
            *(_OWORD *)v232 = xmmword_22BB0DF00;
            *(double *)uint64_t v234 = 0.0;
            double v235 = -1.0;
            mapu((double *)v232, 1, 1u, 2, v185, 0xBu, (double *)v224, 1, &v235, (double *)v234);
            goto LABEL_186;
          case 5:
            double v122 = v206[915];
            double v123 = v206[916];
            *(void *)&v224[0] = 0;
            if (R8_EQ(v189, (const double *)v224))
            {
LABEL_182:
              double v125 = 0.0;
              double v126 = 0.0;
            }
            else
            {
              double v235 = 0.0;
              BOOL v127 = R8_EQ(v194, &v235);
              double v125 = 0.0;
              double v126 = 0.0;
              if (!v127)
              {
                double v125 = (*v189 - *v194) * 299792458.0;
                *(void *)&long long v228 = 0;
                long long v226 = 0u;
                long long v227 = 0u;
                long long v225 = 0u;
                memset(v224, 0, sizeof(v224));
                long long v239 = 0u;
                long long v240 = 0u;
                long long v237 = 0u;
                long long v238 = 0u;
                long long v236 = 0u;
                *(void *)v232 = 0x3FF0000000000000;
                *(void *)&v232[2] = 0;
                unint64_t v233 = 0xBFF0000000000000;
                *(double *)uint64_t v234 = 0.0;
                double v235 = -1.0;
                mapu((double *)v232, 1, 1u, 3, v185, 0xBu, (double *)v224, 1, &v235, (double *)v234);
LABEL_186:
                double v126 = *(double *)v234 * *(double *)v234;
              }
            }
LABEL_187:
            double v119 = v122 - v125;
            double v121 = sqrt(v123 + v126);
            double v91 = 0.5;
            break;
          case 7:
            double v119 = v206[913];
            double v121 = sqrt(v206[914]);
            break;
          default:
            EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x16EFu);
            double v121 = 0.0;
            break;
        }
        int v128 = (double *)&a1[43 * v99 + 9759];
        v128[31] = v119;
        v128[35] = v121;
        v128[39] = *(double *)(v208 + 192 * v98 + 120) * 1000000000.0;
        switch(Constell_Prn)
        {
          case 1:
            uint64_t v129 = v214 + 108 * (v95 - 1);
            int v130 = *(_DWORD *)(v129 + 3564);
            unsigned int v131 = *(_DWORD *)(v129 + 108);
            unsigned int v132 = *(_DWORD *)(v214 + 44 * (v95 - 1) + 7020);
            goto LABEL_201;
          case 2:
            unsigned int v132 = *(_DWORD *)(v214 + 36 * (v95 - 1) + 15356);
            if (*(_DWORD *)(v214 + ((unint64_t)(v95 - 1) << 6) + 11228)) {
              unsigned int v132 = *(_DWORD *)(v214 + ((unint64_t)(v95 - 1) << 6) + 11228);
            }
            if (*(_DWORD *)(v214 + 108 * (v95 - 1) + 12764) != 6) {
              goto LABEL_193;
            }
            goto LABEL_204;
          case 3:
            uint64_t v134 = v214 + 88 * (v95 - 1);
            int v130 = *(_DWORD *)(v134 + 19908);
            unsigned int v131 = *(_DWORD *)(v134 + 16740);
            uint64_t v135 = v214 + 36 * (v95 - 1);
            uint64_t v136 = 23076;
            goto LABEL_199;
          case 4:
            uint64_t v137 = v214 + 100 * (v95 - 1);
            int v130 = *(_DWORD *)(v137 + 28224);
            unsigned int v131 = *(_DWORD *)(v137 + 24524);
            uint64_t v135 = v214 + 44 * (v95 - 1);
            uint64_t v136 = 31924;
LABEL_199:
            unsigned int v132 = *(_DWORD *)(v135 + v136);
            goto LABEL_201;
          case 5:
            uint64_t v138 = v214 + 108 * (v95 + 63);
            int v130 = *(_DWORD *)(v138 + 9692);
            unsigned int v131 = *(_DWORD *)(v138 + 8612);
            unsigned int v132 = *(_DWORD *)(v214 + 44 * (v95 + 63) + 10772);
LABEL_201:
            if (v131) {
              unsigned int v132 = v131;
            }
            if (v130 == 6)
            {
LABEL_204:
              int v133 = 4;
            }
            else
            {
LABEL_193:
              if (v132 < 7 && ((0x79u >> v132) & 1) != 0)
              {
                int v133 = dword_22BB0E090[v132];
              }
              else
              {
                EvCrt_Illegal_Default("Set_e_GN_RM_SV_Pos_Src", 0x1393u);
LABEL_196:
                int v133 = 0;
              }
            }
            LODWORD(a1[43 * v99 + 9760]) = v133;
            uint64_t v139 = v208 + 192 * v98;
            int v142 = *(__int16 *)(v139 + 164);
            double v141 = (__int16 *)(v139 + 164);
            int v140 = v142;
            __int16 v143 = v142;
            switch(Constell_Prn)
            {
              case 0:
              case 7:
                EvCrt_Illegal_Default("API_Get_Raw_Meas_Data", 0x1743u);
                int v144 = 0;
                __int16 v143 = *v141;
                goto LABEL_209;
              case 1:
              case 5:
              case 6:
                goto LABEL_214;
              case 2:
                uint64_t v92 = v208;
                uint64_t v145 = v208 + 192 * v98;
                int v146 = *(__int16 *)(v145 + 172);
                int v147 = *(_DWORD *)(v145 + 168);
                if (v146 > 0 || v147 >= 1)
                {
                  int v140 = v146 + 1461 * *(__int16 *)(v208 + 192 * v98 + 174);
                  int v148 = v147 - 126316800;
                  int v149 = 86400;
LABEL_215:
                  int v144 = v148 + v140 * v149;
                }
                else
                {
                  *(void *)&v224[0] = 0;
                  API_Get_UTC_Cor(1, (double *)v224);
                  v232[0] = 0;
                  v234[0] = 0;
                  double v235 = 0.0;
                  __int16 v143 = *v141;
                  GPS_To_Glon_Time(0, *v141, (double)*(int *)(v208 + 192 * v98 + 160), *(double *)v224, v232, v234, &v235);
                  int v144 = 86400 * (v234[0] + 1461 * v232[0]) - 126316800 + (int)v235;
                }
LABEL_216:
                *(double *)&a1[43 * v99 + 9761] = (double)v144;
                int v230 = 0;
                char v231 = 0;
                memset(v224, 0, sizeof(v224));
                long long v225 = 0u;
                long long v226 = 0u;
                long long v227 = 0u;
                long long v228 = 0u;
                memset(v229, 0, sizeof(v229));
                uint64_t v150 = v92 + 192 * v98;
                int v152 = *(_DWORD *)(v150 + 160);
                int v151 = (int *)(v150 + 160);
                if (Comp_CurrState(0x1Eu, v143, v213, (uint64_t)v224, (double)v152 + -15.0, 0.0))
                {
                  uint64_t v153 = (uint64_t)&a1[43 * v99 + 9759];
                  *(_OWORD *)(v153 + 24) = *(_OWORD *)((char *)v224 + 8);
                  *(void *)(v153 + 40) = *((void *)&v224[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v141, v213, (uint64_t)v224, (double)*v151 + -5.0, 0.0))
                {
                  uint64_t v154 = (uint64_t)&a1[43 * v99 + 9759];
                  *(_OWORD *)(v154 + 48) = *(_OWORD *)((char *)v224 + 8);
                  *(void *)(v154 + 64) = *((void *)&v224[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v141, v213, (uint64_t)v224, (double)*v151 + 5.0, 0.0))
                {
                  uint64_t v155 = (uint64_t)&a1[43 * v99 + 9759];
                  *(_OWORD *)(v155 + 72) = *(_OWORD *)((char *)v224 + 8);
                  *(void *)(v155 + 88) = *((void *)&v224[1] + 1);
                }
                if (Comp_CurrState(0x1Eu, *v141, v213, (uint64_t)v224, (double)*v151 + 15.0, 0.0))
                {
                  uint64_t v156 = (uint64_t)&a1[43 * v99 + 9759];
                  *(_OWORD *)(v156 + 96) = *(_OWORD *)((char *)v224 + 8);
                  *(void *)(v156 + 112) = *((void *)&v224[1] + 1);
                }
                uint64_t v157 = (uint64_t)&a1[43 * v99 + 9759];
                *(float64x2_t *)(v157 + 120) = vmulq_f64(*(float64x2_t *)(v92 + 192 * v98 + 96), v204);
                *(void *)(v157 + 136) = 0;
                break;
              case 3:
                v140 -= 1024;
LABEL_214:
                uint64_t v92 = v208;
                int v148 = *(_DWORD *)(v208 + 192 * v98 + 160);
                int v149 = 604800;
                goto LABEL_215;
              case 4:
                uint64_t v92 = v208;
                int v158 = *(_DWORD *)(v208 + 192 * v98 + 160);
                if (v158 < 14) {
                  int v159 = -1357;
                }
                else {
                  int v159 = -1356;
                }
                int v160 = v159 + v140;
                if (v158 >= 14) {
                  int v161 = -14;
                }
                else {
                  int v161 = 604786;
                }
                int v144 = v161 + v158 + 604800 * v160;
                goto LABEL_216;
              default:
                int v144 = 0;
LABEL_209:
                uint64_t v92 = v208;
                goto LABEL_216;
            }
            break;
          default:
            goto LABEL_196;
        }
      }
    }
LABEL_225:
    ++v89;
    v90 += 5;
  }
  while (v89 != 178);
  int v162 = *(__int16 *)(v197 + 54);
  *(_WORD *)unsigned int v195 = *(_WORD *)(v197 + 54);
  *((_WORD *)v195 + 1) = *(_WORD *)(v197 + 188);
  *((unsigned char *)v195 + 4) = *(unsigned char *)(v197 + 186);
  if (*(unsigned char *)(v197 + 52))
  {
    *((_WORD *)v195 + 3) = v162 - 1356;
    if (*(double *)(v197 + 40) < 14.0) {
      *((_WORD *)v195 + 3) = v162 - 1357;
    }
    *((_WORD *)v195 + 4) = v162 - 1024;
  }
  if ((*(_DWORD *)(v214 + 8444) - 3) <= 3)
  {
    int v163 = v191[3];
    int v164 = v162 - 127;
    if (v164 <= (v163 | 0x400)) {
      LOWORD(v164) = v163 | 0x400;
    }
    __int16 v165 = ((v164 - v163 - 769) & 0xFF00 | v163) + 1024;
    *((_WORD *)v195 + 5) = v165;
    *((_WORD *)v195 + 6) = *((_WORD *)v191 + 2);
    *((unsigned char *)v195 + 14) = v191[2];
    *((_WORD *)v195 + 8) = v165;
    *((_DWORD *)v195 + 5) = *v191 << 12;
    uint64_t v166 = *(void *)(v214 + 8448);
    v167.i64[0] = (int)v166;
    v167.i64[1] = SHIDWORD(v166);
    int8x16_t v168 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v167), (float64x2_t)xmmword_22BB0DF10);
    *((int8x16_t *)a1 + 3206) = vextq_s8(v168, v168, 8uLL);
  }
  if (v190[64])
  {
    v169.i64[0] = -*(_DWORD *)(v214 + 16228);
    v169.i64[1] = *(int *)(v214 + 16236);
    *((float64x2_t *)a1 + 3208) = vmulq_f64(vcvtq_f64_s64(v169), (float64x2_t)xmmword_22BB0DF20);
    *((unsigned char *)v195 + 50) = *v190;
    *((_WORD *)v195 + 24) = v191[7768];
  }
  if ((*(_DWORD *)(v192 + 4) - 3) <= 3)
  {
    int v170 = *(unsigned __int8 *)(v192 + 13);
    int v171 = *((unsigned __int16 *)v195 + 4) - 31;
    if (v171 <= v170) {
      LOWORD(v171) = *(unsigned __int8 *)(v192 + 13);
    }
    *((_WORD *)v195 + 36) = ((v171 - v170 + 63) & 0xFFC0) + v170;
    *((_DWORD *)v195 + 19) = *(_DWORD *)v192 % 604800;
    *((double *)v195 + 10) = (double)*(__int16 *)(v192 + 8) * 0.0291038305;
    *((double *)v195 + 11) = (double)*(__int16 *)(v192 + 10) * 0.00000044408921;
  }
  if ((*(_DWORD *)(v196 + 4) - 3) <= 3)
  {
    unsigned int v172 = *(_DWORD *)v196 - 14;
    if (*(int *)v196 <= 14) {
      unsigned int v172 = 0;
    }
    *((_WORD *)v195 + 48) = v172 / 0x93A80;
    *((_DWORD *)v195 + 25) = v172 % 0x93A80;
    *((double *)v195 + 13) = (double)*(__int16 *)(v196 + 8) * 0.1;
    *((double *)v195 + 14) = (double)*(__int16 *)(v196 + 10) * 0.1;
  }
  if (*(unsigned char *)(v202 + 5) && *(_DWORD *)v202)
  {
    double v173 = *(double *)(v202 + 32);
    v195[15] = llround((*(double *)(v202 + 24) - v173) * 1000000000.0)
             + 604800000000000 * *(__int16 *)(v202 + 16)
             - 1000000 * *(unsigned int *)(v202 + 8);
    *((double *)v195 + 16) = (double)(uint64_t)round(v173 * -1000000000.0) - v173 * -1000000000.0;
    *((double *)v195 + 17) = *(double *)(v197 + 848) * 3.33564095;
  }
  *((double *)v195 + 18) = *(double *)(v202 + 40) * -1000000000.0;
  *((double *)v195 + 19) = *(double *)(v197 + 888) * 3.33564095;
  return 1;
}

uint64_t API_Get_GNSS_PR_Meas_Var(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = *(unsigned __int16 *)(a1 + 12);
  int v5 = *(unsigned __int16 *)(a1 + 14);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 4);
  if (v6 >= 0x2B) {
    int v7 = 43;
  }
  else {
    int v7 = *(unsigned __int8 *)(a1 + 4);
  }
  __int16 v8 = *(_WORD *)(a1 + 10) / 5u;
  unsigned __int8 v9 = v7 - v6 + *(unsigned char *)(a1 + 5);
  int v12 = 999999;
  return NK_Get_PR_Meas_Var(*(_DWORD *)a1, *(unsigned __int8 *)(*(void *)(p_api + 72) + 65), v7, v9, a3, v8 & 0x3FFE, ((52429 * v4) >> 18) & 0x3FFE, ((52429 * v5) >> 18) & 0x3FFE, (a2 / 5u) & 0x3FFE, a4, 0xFFFFFF9D, *(_DWORD *)(*(void *)(p_api + 72) + 60), &v11, &v12) >> 2;
}

BOOL API_Get_GAD_Data(_DWORD *a1, char a2, int *a3, _WORD *a4, char *a5, int *a6, int *a7, int *a8, unsigned char *a9, uint64_t a10)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(p_api + 88);
  if (a1)
  {
    int v11 = *(_DWORD *)(v10 + 36);
    if (*a1) {
      BOOL v12 = *a1 == v11;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12) {
      return 0;
    }
    *a1 = v11;
  }
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = (unsigned char *)(v10 + 968);
  do
  {
    if (*(unsigned char *)(v10 + 1496 + v16))
    {
      switch(*v18)
      {
        case 0:
          break;
        case 1:
          v17 |= 1u;
          break;
        case 2:
          v17 |= 0x20u;
          break;
        case 3:
          v17 |= 2u;
          break;
        case 4:
          v17 |= 0x40u;
          break;
        case 5:
          v17 |= 0x10u;
          break;
        case 6:
          v17 |= 4u;
          break;
        default:
          EvCrt_Illegal_Default("API_Get_GAD_Data", 0x191Eu);
          break;
      }
    }
    ++v16;
    v18 += 4;
  }
  while (v16 != 48);
  *a9 = v17 & a2;
  double v19 = *(double *)(v10 + 144);
  double v20 = (*(double *)(v10 + 40) - v19) * 1000.0;
  if (v20 >= 0.0)
  {
    int v21 = a7;
    unsigned int v22 = a3;
    unint64_t v23 = a4;
    if (v20 >= 604800000.0) {
      double v20 = v20 + -604800000.0;
    }
  }
  else
  {
    double v20 = v20 + 604800000.0;
    int v21 = a7;
    unsigned int v22 = a3;
    unint64_t v23 = a4;
  }
  unsigned int v24 = (int)v20;
  *unsigned int v22 = (int)v20;
  int v25 = (int)((v20 - (double)(int)v20) * 10000.0);
  int v26 = *(_DWORD *)(v10 + 48);
  if (v26 != 11) {
    LOWORD(v25) = -1;
  }
  *unint64_t v23 = v25;
  if ((*a9 & 0x20) != 0 && *(_DWORD *)(v10 + 180) > v26 || *(unsigned char *)(v10 + 380) && !*(unsigned char *)(v10 + 375))
  {
    double v28 = (*(double *)(v10 + 192) - v19) * 1000.0;
    double v29 = -0.5;
    if (v28 > 0.0) {
      double v29 = 0.5;
    }
    double v30 = v28 + v29;
    if (v30 <= 2147483650.0)
    {
      if (v30 >= -2147483650.0) {
        unsigned int v24 = (int)v30;
      }
      else {
        unsigned int v24 = 0x80000000;
      }
    }
    else
    {
      unsigned int v24 = 0x7FFFFFFF;
    }
    int v26 = *(_DWORD *)(v10 + 180);
    int v31 = 32;
LABEL_42:
    *a6 = v31;
    goto LABEL_43;
  }
  *a6 = 1;
  if ((*a9 & 0x15) == 0)
  {
    if ((*a9 & 2) == 0)
    {
      if ((*a9 & 0x40) != 0)
      {
        *a6 = 64;
        v24 -= 14000;
      }
      goto LABEL_43;
    }
    int v31 = 2;
    goto LABEL_42;
  }
LABEL_43:
  if ((v24 & 0x80000000) != 0)
  {
    unsigned int v33 = v24 + 86400000;
  }
  else
  {
    if (v24 <= 0x5265BFF) {
      unsigned int v32 = 86399999;
    }
    else {
      unsigned int v32 = v24;
    }
    unsigned int v33 = v24 - 86400000 * (v32 / 0x5265C00);
  }
  *int v21 = v33;
  switch(v26)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      char v34 = 127;
      goto LABEL_60;
    case 4:
      char v34 = 126;
      goto LABEL_60;
    case 5:
      char v34 = 120;
      goto LABEL_60;
    case 6:
      char v34 = 113;
      goto LABEL_60;
    case 7:
      char v34 = 106;
      goto LABEL_60;
    case 8:
      char v34 = 99;
      goto LABEL_60;
    case 9:
      char v34 = 92;
      goto LABEL_60;
    case 10:
      char v34 = 85;
      goto LABEL_60;
    case 11:
      char v34 = 78;
LABEL_60:
      *a5 = v34;
      break;
    default:
      *a5 = 127;
      EvCrt_Illegal_Default("API_Get_GAD_Data", 0x1987u);
      break;
  }
  uint64_t v35 = p_api;
  uint64_t v36 = *(void *)(p_api + 8);
  uint64_t v37 = *(void *)(p_api + 72);
  int v38 = *(_DWORD *)(v36 + 4);
  if (!v38) {
    goto LABEL_68;
  }
  unsigned int v39 = *(_DWORD *)(v36 + 8);
  if (v39 > 0x10000) {
    goto LABEL_68;
  }
  double v40 = (*(double *)(v10 + 168) + 1.0)
      * ((double)v39 * -0.0000000152587891 + (double)(*(_DWORD *)(v10 + 32) - v38) * 0.001);
  HIDWORD(v41) = 1078984704;
  if (v40 > 64.0) {
    goto LABEL_68;
  }
  LODWORD(v41) = *(_DWORD *)(v37 + 948);
  if (v40 > (double)v41 * 0.005) {
    goto LABEL_68;
  }
  double v42 = v40 * 1000000.0;
  double v43 = -0.5;
  if (v42 > 0.0) {
    double v43 = 0.5;
  }
  double v44 = v42 + v43;
  if (v44 <= 2147483650.0)
  {
    if (v44 >= -2147483650.0) {
      int v45 = (int)v44;
    }
    else {
      int v45 = 0x80000000;
    }
  }
  else
  {
LABEL_68:
    int v45 = 0x7FFFFFFF;
  }
  *a8 = v45;
  if (*(unsigned char *)(v37 + 66))
  {
    double v46 = (double *)(v10 + 952);
    double v47 = *(double *)(v10 + 936);
  }
  else
  {
    double v46 = (double *)(v10 + 352);
    double v47 = *(double *)(v10 + 336);
  }
  double v48 = -v47;
  int v49 = *(_DWORD *)(v10 + 36);
  double v51 = *(double *)(v10 + 208);
  double v50 = *(double *)(v10 + 216);
  double v52 = *(double *)(v10 + 224);
  double v102 = *(double *)(v10 + 960);
  double v53 = *(double *)(v10 + 896);
  double v54 = *(double *)(v10 + 904);
  double v55 = *(double *)(v10 + 912);
  double v106 = *(double *)(v10 + 824);
  float64x2_t v104 = *(float64x2_t *)(v10 + 856);
  double v56 = *v46;
  uint64_t v57 = *(void *)(v35 + 328);
  int v58 = *(_DWORD *)(v10 + 4);
  if (v58 < 3) {
    goto LABEL_87;
  }
  BOOL v27 = 0;
  if (!*a9 || v53 >= 400.0) {
    goto LABEL_88;
  }
  if (*(_DWORD *)(*(void *)(v35 + 232) + 25364) >> 4 > 0x752u)
  {
LABEL_87:
    BOOL v27 = 0;
    goto LABEL_88;
  }
  BOOL v27 = v58 > 3;
  if (*(unsigned char *)(v10 + 620)
    && *(unsigned char *)(v57 + 10)
    && *(_DWORD *)(v57 + 704) == 7
    && *(int *)(v57 + 700) >= 2
    && *(double *)(v57 + 664) <= 9000000.0)
  {
    *a9 |= 0x80u;
    BOOL v27 = 1;
  }
  if (*(unsigned char *)(v57 + 11))
  {
    if (*(_DWORD *)(v57 + 704) == 7 && *(int *)(v57 + 700) >= 2)
    {
      double v97 = *(double *)(v57 + 632);
      double v98 = sqrt(*(double *)(v57 + 688));
      EvCrt_v("API_Get_GAD_Data: HELO Altitude w.r.t Est Altitude: HELO Alt %f acc %f  Est Alt %f acc %f [1-sigma]", v97, v98, v52, v106);
      if (v98 <= 20.0)
      {
        EvLog_v("API_Get_GAD_Data: Override: Est Altitude Overridden with HELO Altitude.", 20.0, v98);
        *a9 |= 0x80u;
        double v52 = v97;
        double v106 = v98;
      }
    }
  }
LABEL_88:
  if (a2 < 0 && !v27)
  {
    EvLog_v("GN_AGNSS_Get_GAD_Data:  No Valid GNSS Fix, but HELO is enabled, checking ...");
    if (!*(unsigned char *)(v57 + 10)) {
      goto LABEL_114;
    }
    if (*(_DWORD *)(v57 + 704) != 7) {
      goto LABEL_114;
    }
    int v59 = *(_DWORD *)(v57 + 700);
    if (v59 < 2) {
      goto LABEL_114;
    }
    double v60 = *(double *)(v57 + 664);
    if (v60 > 9000000.0) {
      goto LABEL_114;
    }
    if (v59 <= 2)
    {
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v110 = 0u;
      if (!Core_Get_Pos_E911(v49, &v110))
      {
LABEL_114:
        BOOL v27 = 0;
        goto LABEL_115;
      }
      double v108 = (*(double *)(v57 + 616) - *((double *)&v110 + 1) * 0.0174532925) * 6378137.0;
      double v99 = (*(double *)(v57 + 624) - *(double *)&v111 * 0.0174532925) * 6378137.0;
      long double v61 = cos(*((double *)&v110 + 1) * 0.0174532925);
      double v100 = sqrt(v61 * v99 * (v61 * v99) + v108 * v108);
      double v62 = *(double *)(v57 + 664);
      double v63 = (double)(*(_DWORD *)(v57 + 608) - (int)v110) * 0.015;
      double v109 = sqrt(v62 + *((double *)&v111 + 1) * *((double *)&v111 + 1) + v63 * v63);
      EvCrt_v("API_Get_GAD_Data:  HELO check:  dAge %d  dPos %f  RelSig %f  Acc %f %f", *(_DWORD *)(v57 + 608) - v110, v100, v109, sqrt(v62), *((double *)&v111 + 1));
      if (v100 > 2000.0 && v100 > v109 * 3.0)
      {
        EvCrt_v("API_Get_GAD_Data:  HELO Rejected:  Too far from E-911 Ref Pos,  diff %f > %f max", v100, 2000.0);
        EvCrt_v("API_Get_GAD_Data:  HELO Rejected:  Inconsistent with E-911 Ref Pos,  diff %f  rel_sig %f", v100, v109);
        goto LABEL_114;
      }
      double v60 = *(double *)(v57 + 664);
    }
    double v51 = *(double *)(v57 + 616);
    double v50 = *(double *)(v57 + 624);
    double v52 = *(double *)(v57 + 632);
    double v53 = sqrt(v60);
    double v54 = sqrt(*(double *)(v57 + 672));
    double v55 = *(double *)(v57 + 680);
    double v65 = *(double *)(v57 + 688);
    int v66 = *(_DWORD *)(v10 + 36) - *(_DWORD *)(v57 + 608);
    v49 -= v66;
    int v67 = *v22;
    if (*v22 < v66) {
      int v67 = *v22 + 604800000;
    }
    unsigned int v68 = v67 - v66;
    if (v68 > 0x240C83FF) {
      v68 -= 604800000;
    }
    *unsigned int v22 = v68;
    int v69 = *v21;
    if (*v21 < v66) {
      int v69 = *v21 + 86400000;
    }
    unsigned int v70 = v69 - v66;
    if (v70 > 0x5265BFF) {
      v70 -= 86400000;
    }
    *int v21 = v70;
    *a9 = 0x80;
    double v106 = sqrt(v65);
    EvCrt_v("API_Get_GAD_Data:  HELO Inserted:  Age %d  Acc %f  %f  %f", v66, v53, v54, v106);
    float64x2_t v104 = (float64x2_t)xmmword_22BB0DF30;
    BOOL v27 = 1;
    double v56 = 0.0;
    double v102 = 0.0;
    double v48 = 0.0;
  }
LABEL_115:
  *(_DWORD *)a10 = v49;
  *(unsigned char *)(a10 + 4) = v51 < 0.0;
  double v71 = fabs(v51) * 5340353.08;
  double v72 = -0.5;
  if (v71 <= 0.0) {
    double v73 = -0.5;
  }
  else {
    double v73 = 0.5;
  }
  double v74 = v71 + v73;
  if (v74 <= 2147483650.0)
  {
    if (v74 >= -2147483650.0) {
      int v75 = (int)v74;
    }
    else {
      int v75 = 0x80000000;
    }
  }
  else
  {
    int v75 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a10 + 8) = v75;
  if (v50 * 2670176.86 > 0.0) {
    double v72 = 0.5;
  }
  double v76 = v50 * 2670176.86 + v72;
  if (v76 <= 2147483650.0)
  {
    if (v76 >= -2147483650.0)
    {
      int v77 = (int)v76;
      if ((int)v76 >= 0x800000) {
        v77 -= 0x1000000;
      }
    }
    else
    {
      int v77 = 0x80000000;
    }
  }
  else
  {
    int v77 = 2130706431;
  }
  *(_DWORD *)(a10 + 12) = v77;
  *(unsigned char *)(a10 + 16) = v52 < 0.0;
  double v78 = fabs(v52);
  double v79 = -0.5;
  if (v52 < 0.0) {
    double v79 = 0.5;
  }
  if (v52 > 0.0) {
    double v79 = 0.5;
  }
  double v80 = v78 + v79;
  double v81 = v48;
  if (v80 <= 2147483650.0)
  {
    double v82 = v55;
    if (v80 >= -2147483650.0) {
      unsigned int v83 = (int)v80;
    }
    else {
      unsigned int v83 = 0x80000000;
    }
  }
  else
  {
    double v82 = v55;
    unsigned int v83 = 0x7FFFFFFF;
  }
  if (v83 >= 0x7FFF) {
    LOWORD(v83) = 0x7FFF;
  }
  *(_WORD *)(a10 + 18) = v83;
  int v84 = (int)(log(v53 * 2.146 * 0.1 + 1.0) * 10.4920587);
  if (v84 >= 126) {
    LOBYTE(v84) = 126;
  }
  *(unsigned char *)(a10 + 20) = v84 + 1;
  int v85 = (int)(log(v54 * 2.146 * 0.1 + 1.0) * 10.4920587);
  if (v85 >= 126) {
    LOBYTE(v85) = 126;
  }
  *(unsigned char *)(a10 + 21) = v85 + 1;
  unsigned int v86 = (int)v82 >> 1;
  if ((int)v82 > 0xB3) {
    LOBYTE(v86) = v86 - 90;
  }
  *(unsigned char *)(a10 + 22) = v86;
  int v87 = (int)(log(v106 * 1.645 * 0.0222222222 + 1.0) * 40.4979423);
  if (v87 >= 126) {
    LOBYTE(v87) = 126;
  }
  *(unsigned char *)(a10 + 23) = v87 + 1;
  *(unsigned char *)(a10 + 24) = 90;
  *(unsigned char *)(a10 + 25) = v81 > 0.0;
  *(_WORD *)(a10 + 26) = (int)v102;
  double v88 = -0.5;
  if (v56 * 3.6 > 0.0) {
    double v88 = 0.5;
  }
  double v89 = v56 * 3.6 + v88;
  if (v89 <= 2147483650.0)
  {
    if (v89 >= -2147483650.0) {
      int v90 = (int)v89;
    }
    else {
      int v90 = 0x80000000;
    }
  }
  else
  {
    int v90 = 0x7FFFFFFF;
  }
  if (v90 >= 0x7FFF) {
    LOWORD(v90) = 0x7FFF;
  }
  *(_WORD *)(a10 + 28) = v90;
  double v91 = fabs(v81) * 3.6;
  double v92 = -0.5;
  if (v91 > 0.0) {
    double v92 = 0.5;
  }
  double v93 = v91 + v92;
  if (v93 <= 2147483650.0)
  {
    if (v93 >= -2147483650.0) {
      int v94 = (int)v93;
    }
    else {
      int v94 = 0x80000000;
    }
  }
  else
  {
    int v94 = 0x7FFFFFFF;
  }
  if (v94 >= 127) {
    LOBYTE(v94) = 127;
  }
  *(unsigned char *)(a10 + 30) = v94;
  int32x2_t v95 = vadd_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(vmulq_f64(v104, (float64x2_t)xmmword_22BB0DF40), (float64x2_t)vdupq_n_s64(0x400CCCCCCCCCCCCDuLL)))), (int32x2_t)0xFE000000FELL), (int32x2_t)0x100000001);
  *(unsigned char *)(a10 + 32) = v95.i8[4];
  *(unsigned char *)(a10 + 31) = v95.i8[0];
  return v27;
}

uint64_t API_Qual_Pos(const char *a1, int a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(_DWORD **)(p_api + 72);
  uint64_t v9 = *(void *)(p_api + 80);
  uint64_t v11 = *(void *)(p_api + 232);
  unsigned int v86 = (unsigned __int8 *)(v11 + 24777);
  uint64_t v12 = *(void *)(p_api + 176);
  int v85 = (unsigned char *)(v11 + 8388);
  memset(v90, 0, sizeof(v90));
  uint64_t v13 = (char *)v90;
  double v88 = (char *)v90;
  double v89 = &v91;
  v87[1] = v90;
  char v14 = 81;
  uint64_t v15 = 1u;
  do
  {
    v87[0] = v13 + 1;
    *uint64_t v13 = v14;
    uint64_t v13 = (char *)v87[0];
    if (v87[0] >= (unint64_t)v89)
    {
      uint64_t v13 = v88;
      v87[0] = v88;
    }
    char v14 = aQualPos[v15++];
  }
  while (v15 != 11);
  char v16 = *a1;
  if (*a1)
  {
    int v17 = a1 + 1;
    do
    {
      v87[0] = v13 + 1;
      *uint64_t v13 = v16;
      uint64_t v13 = (char *)v87[0];
      if (v87[0] >= (unint64_t)v89)
      {
        uint64_t v13 = v88;
        v87[0] = v88;
      }
      int v18 = *(unsigned __int8 *)v17++;
      char v16 = v18;
    }
    while (v18);
  }
  double v19 = " NM";
  if (a2) {
    double v19 = " SS";
  }
  char v20 = *v19;
  if (*v19)
  {
    int v21 = (unsigned __int8 *)(v19 + 1);
    do
    {
      v87[0] = v13 + 1;
      *uint64_t v13 = v20;
      uint64_t v13 = (char *)v87[0];
      if (v87[0] >= (unint64_t)v89)
      {
        uint64_t v13 = v88;
        v87[0] = v88;
      }
      int v22 = *v21++;
      char v20 = v22;
    }
    while (v22);
  }
  v87[0] = v13 + 1;
  *uint64_t v13 = 32;
  if (v87[0] >= (unint64_t)v89) {
    v87[0] = v88;
  }
  sprintf_2d(v87, a3);
  unint64_t v23 = (unsigned char *)v87[0]++;
  *unint64_t v23 = 32;
  if (v87[0] >= (unint64_t)v89) {
    v87[0] = v88;
  }
  sprintf_3d(v87, a4);
  if (a5) {
    int v24 = a2;
  }
  else {
    int v24 = 0;
  }
  if (v24 == 1) {
    int v25 = a5 - (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  else {
    int v25 = 0;
  }
  sprintf_sp1d(v87, v25);
  uint64_t v26 = 0;
  char v27 = 32;
  double v28 = (char *)v87[0];
  do
  {
    v87[0] = v28 + 1;
    *double v28 = v27;
    double v28 = (char *)v87[0];
    if (v87[0] >= (unint64_t)v89)
    {
      double v28 = v88;
      v87[0] = v88;
    }
    char v27 = asc_22BABB86A[++v26];
  }
  while (v26 != 2);
  if (v24)
  {
    if (v25 < v10[237])
    {
      uint64_t v67 = a5;
      unint64_t v69 = v10[237];
      double v29 = "%s %s  - Deadline up %d  FixInt %d";
LABEL_143:
      uint64_t v51 = 1;
      DbgLog_v(1, v29, v90, " TRUE ", v67, v69, v71, v73);
      return v51;
    }
    if (v7 == -1)
    {
      DbgLog_v(1, "%s %s  - Waiting for full time-out");
      return 0;
    }
  }
  int v30 = *(_DWORD *)(v9 + 4);
  if (!a2)
  {
    if (v30 <= 0)
    {
      DbgLog_v(1, "%s %s  - NM FixType %d < INT_AID");
      return 0;
    }
LABEL_39:
    uint64_t v31 = a2 ^ 1u;
    if (v7)
    {
      if (!a4) {
        a4 = 5 * v7;
      }
    }
    else
    {
      if (!a4) {
        a4 = *(double *)&v10[2 * v31 + 244];
      }
      unint64_t v7 = *(double *)&v10[2 * v31 + 240];
    }
    unsigned int v32 = 3 * v7;
    if (a4 < 3 * (int)v7) {
      unsigned int v32 = a4;
    }
    if (v24) {
      unint64_t v33 = v32;
    }
    else {
      unint64_t v33 = a4;
    }
    if (a5) {
      int v34 = 0;
    }
    else {
      int v34 = a2;
    }
    if (v34 == 1)
    {
      if (*(_DWORD *)(v12 + 11048))
      {
        unsigned int v35 = *(_DWORD *)(v12 + 11028);
        if (v35 >= 4 && *v86 >= 4u && *(double *)(v11 + 24632) <= 10.0)
        {
          int v36 = *(_DWORD *)(v9 + 48);
          int v37 = v36 - 6;
          if (v36 >= 6)
          {
            int v38 = v33;
            int v39 = 10000;
            switch(v37)
            {
              case 0:
                break;
              case 1:
                int v39 = 11000;
                break;
              case 2:
                int v39 = 12000;
                break;
              case 3:
                int v39 = 14000;
                break;
              case 4:
                int v39 = 16000;
                break;
              case 5:
                int v39 = 20000;
                break;
              default:
                EvCrt_Illegal_Default("API_Qual_Pos", 0x1B4Du);
                unsigned int v35 = *(_DWORD *)(v12 + 11028);
                int v39 = 10000;
                break;
            }
            if (v35 >= 0xD) {
              unsigned int v35 = 13;
            }
            int v40 = (v35 - 3) * v10[237];
            if (v40 >= 10000) {
              int v40 = 10000;
            }
            int v41 = v40 + v39;
            DbgLog_v(1, "%s %s  - SS Scaling required  %d", (const char *)v90, " info ", v40 + v39);
            unint64_t v7 = (v41 * v7) / 0x2710uLL;
            unint64_t v33 = (v41 * v38) / 0x2710uLL;
          }
        }
      }
    }
    if (a5 || !v31)
    {
      if (a5)
      {
        double v45 = *(double *)(v9 + 896);
        if (v45 > 10.0) {
          double v45 = v45 * 1.5;
        }
        double v46 = *(double *)(v9 + 824);
        double v47 = v46 * 1.5;
        if (v46 <= 15.0) {
          double v47 = *(double *)(v9 + 824);
        }
LABEL_92:
        uint64_t v48 = v47;
        uint64_t v49 = v45;
        if (v7 < v49 || v33 < v48)
        {
          DbgLog_v(1, "%s %s  - Insufficient :  H %d %d  V %d %d");
          return 0;
        }
        if (v34)
        {
          if (*v10
            || *(int *)(v9 + 48) < 9
            || *(_DWORD *)(v9 + 32) - *(_DWORD *)(v12 + 26996) < 24001
            || *(_DWORD *)(v12 + 11028) > 0x3Cu)
          {
            goto LABEL_142;
          }
          unsigned int v52 = v10[15];
          if (v52 >= 8)
          {
            unint64_t v64 = v33;
            EvCrt_Illegal_Default("API_Qual_Pos", 0x1BB5u);
            unint64_t v33 = v64;
            unsigned int v53 = 0;
          }
          else
          {
            unsigned int v53 = (0xC0u >> v52) & 1;
          }
          double v65 = *(double *)(v11 + 24632);
          if ((double)v7 * 0.3 >= (double)*(unsigned int *)(v11 + 25364)
            && v65 <= 20.0
            && (!v53 || !*(unsigned char *)(v12 + 233))
            && *(unsigned __int8 *)(v11 + 2812) + 2 < *(unsigned __int8 *)(v9 + 369))
          {
            goto LABEL_142;
          }
          uint64_t v80 = *(unsigned __int8 *)(v9 + 369);
          uint64_t v81 = *(unsigned __int8 *)(v11 + 2812);
          uint64_t v78 = *(unsigned __int8 *)(v12 + 233);
          uint64_t v79 = *(unsigned int *)(v12 + 11028);
          uint64_t v76 = (int)(v65 * 10.0);
          uint64_t v77 = v10[15];
          uint64_t v75 = *(unsigned int *)(v11 + 25364);
          uint64_t v72 = v48;
          unint64_t v74 = v33;
          uint64_t v68 = v49;
          unint64_t v70 = v7;
          double v63 = "%s %s  - Delay :  H %d %d  V %d %d  :  %d  :  %d  :  %d %d %d  :  %d %d";
        }
        else
        {
          if (!a5 || v31)
          {
LABEL_142:
            uint64_t v71 = v48;
            unint64_t v73 = v33;
            uint64_t v67 = v49;
            unint64_t v69 = v7;
            double v29 = "%s %s  - NM or noDL OK :  H %d %d  V %d %d";
            goto LABEL_143;
          }
          unsigned int v54 = *(_DWORD *)(v12 + 11028);
          if (v54 >= 0x11)
          {
            uint64_t v51 = 1;
            DbgLog_v(1, "%s %s  - Already waited :  H %d %d  V %d %d  :  FixTime %d > 16", v90);
            return v51;
          }
          unsigned int v55 = *(unsigned __int8 *)(v11 + 2812);
          BOOL v57 = v55 > 2
             || (unsigned int v56 = *v85, v56 > 2)
             || *(unsigned char *)(v11 + 2812) && v55 + 10 >= *(unsigned __int8 *)(v9 + 369)
             || *v85 && v56 + 10 >= *(unsigned __int8 *)(v9 + 371);
          unsigned int v58 = *(unsigned __int8 *)(v12 + 233);
          if (v54 >= 3)
          {
            if (*(unsigned char *)(v12 + 233)) {
              BOOL v60 = 1;
            }
            else {
              BOOL v60 = *(_DWORD *)(v9 + 32) - *(_DWORD *)(v12 + 26996) < 7001;
            }
            if (v60) {
              BOOL v57 = 1;
            }
            int v59 = (unsigned int *)(v11 + 25360);
            if (!v57)
            {
              LODWORD(v45) = *(_DWORD *)(v11 + 25368);
              double v61 = (double)*(unint64_t *)&v45;
              if ((double)v7 * 0.3 >= (double)*(unint64_t *)&v45)
              {
                LODWORD(v61) = *(_DWORD *)(v11 + 25372);
                if ((double)v33 * 0.3 >= (double)*(unint64_t *)&v61
                  && *(_DWORD *)(v11 + 25360) <= 0xAu)
                {
                  int v62 = *(_DWORD *)(v9 + 48);
                  if (v62 >= 8 && (v7 > 0x31 || v62 != 8) && *(unsigned __int8 *)(v11 + 977) > 0x1Bu)
                  {
                    uint64_t v71 = v48;
                    unint64_t v73 = v33;
                    uint64_t v67 = v49;
                    unint64_t v69 = v7;
                    double v29 = "%s %s  - OK :  H %d %d  V %d %d";
                    goto LABEL_143;
                  }
                }
              }
              unsigned int v58 = 0;
            }
          }
          else
          {
            int v59 = (unsigned int *)(v11 + 25360);
          }
          uint64_t v83 = *(unsigned int *)(v9 + 48);
          uint64_t v84 = *(unsigned __int8 *)(v11 + 977);
          uint64_t v81 = v59[3];
          uint64_t v82 = *v59;
          uint64_t v79 = *v85;
          uint64_t v80 = v59[2];
          uint64_t v77 = (*(_DWORD *)(v9 + 32) - *(_DWORD *)(v12 + 26996));
          uint64_t v78 = *(unsigned __int8 *)(v11 + 2812);
          uint64_t v75 = *(unsigned int *)(v12 + 11028);
          uint64_t v76 = v58;
          uint64_t v72 = v48;
          unint64_t v74 = v33;
          uint64_t v68 = v49;
          unint64_t v70 = v7;
          double v63 = "%s %s  - Wait :  H %d %d  V %d %d  :  %d %d %d  :  %d %d  :  %d %d %d :  %d %d";
        }
        DbgLog_v(1, v63, v90, " FALSE", v68, v70, v72, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84);
        return 0;
      }
    }
    else if (*(_DWORD *)(v12 + 11048) {
           && *(_DWORD *)(v12 + 11028)
    }
           && *v86 >= 4u
           && *(double *)(v11 + 24616) <= 10.0
           && *(double *)(v11 + 24632) <= 20.0
           && *(int *)(v9 + 48) >= 10)
    {
      int v42 = v10[237] * *(_DWORD *)(v12 + 11044);
      if (v42 >= 10000) {
        int v42 = 10000;
      }
      int v43 = v42 + 10000;
      int v44 = v33;
      DbgLog_v(1, "%s %s  - NM Scaling required  %d", (const char *)v90, " info ", v42 + 10000);
      unint64_t v7 = (v43 * v7) / 0x2710uLL;
      unint64_t v33 = (v43 * v44) / 0x2710uLL;
    }
    double v45 = *(double *)(v9 + 896);
    double v47 = *(double *)(v9 + 824);
    goto LABEL_92;
  }
  if (v30 > 3) {
    goto LABEL_39;
  }
  DbgLog_v(1, "%s %s  - SS FixType %d < SV_2D");
  return 0;
}

BOOL API_Get_GPS_MS_Ass_Meas(_DWORD *a1, int a2, uint64_t a3)
{
  v106[6] = *(double *)MEMORY[0x263EF8340];
  uint64_t v5 = p_api;
  uint64_t v6 = *(void *)(p_api + 16);
  if (a1)
  {
    int v7 = *(_DWORD *)(v6 + 4);
    if (*a1) {
      BOOL v8 = *a1 == v7;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      return 0;
    }
    *a1 = v7;
  }
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v9 = *(void *)(v5 + 48);
  unsigned int v10 = *(_DWORD *)v9;
  if (*(int *)v9 < 3) {
    return 0;
  }
  unsigned int v11 = *(unsigned __int8 *)(v6 + 22);
  if (v10 > 7) {
    goto LABEL_22;
  }
  if (v10 == 4) {
    int v12 = 2;
  }
  else {
    int v12 = 1;
  }
  if (v10 <= 4) {
    int v13 = v12;
  }
  else {
    int v13 = 3;
  }
  if (v10 == 7) {
    unsigned int v14 = 192;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v10 == 6) {
    unsigned int v14 = 96;
  }
  if (v14 >= v11)
  {
LABEL_22:
    double v16 = (double)(*(_DWORD *)v6 - *(_DWORD *)(v9 + 8)) * 0.001;
    for (double i = *(double *)(v9 + 24) + v16 - (*(double *)(v9 + 32) + *(double *)(v9 + 40) * v16);
          i >= 604800.0;
    while (i < 0.0)
      double i = i + 604800.0;
    double v18 = i * 1000.0;
    double v19 = -0.5;
    if (v18 > 0.0) {
      double v19 = 0.5;
    }
    double v20 = v18 + v19;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        int v15 = (int)v20;
      }
      else {
        int v15 = 0x80000000;
      }
    }
    else
    {
      int v15 = 0x7FFFFFFF;
    }
  }
  else
  {
    int v15 = *(_DWORD *)(v6 + 24);
  }
  uint64_t v102 = *(void *)(v5 + 104);
  *(_DWORD *)a3 = v15;
  char v21 = 78;
  switch(v10)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      LOBYTE(v22) = 127;
      goto LABEL_50;
    case 4u:
      LOBYTE(v22) = 126;
      goto LABEL_50;
    case 5u:
      LOBYTE(v22) = 120;
      goto LABEL_50;
    case 6u:
      LOBYTE(v22) = 113;
      goto LABEL_50;
    case 7u:
      LOBYTE(v22) = 106;
      goto LABEL_50;
    case 8u:
      LOBYTE(v22) = 99;
      goto LABEL_50;
    case 9u:
      LOBYTE(v22) = 92;
      goto LABEL_50;
    case 0xAu:
      char v21 = 85;
      goto LABEL_45;
    case 0xBu:
LABEL_45:
      *(unsigned char *)(a3 + 4) = v21;
      goto LABEL_46;
    default:
      *(unsigned char *)(a3 + 4) = 127;
      EvCrt_Illegal_Default("API_Get_GPS_MS_Ass_Meas", 0x1D25u);
      if (*(int *)v9 < 10) {
        goto LABEL_51;
      }
      unsigned int v11 = *(unsigned __int8 *)(v6 + 22);
LABEL_46:
      if (v11 && *(_DWORD *)a3 == *(_DWORD *)(v6 + 24))
      {
        unsigned int v22 = (*(unsigned char *)(a3 + 4) + ~(v11 >> 3));
        if (v22 <= 0x60) {
          LOBYTE(v22) = 96;
        }
LABEL_50:
        *(unsigned char *)(a3 + 4) = v22;
      }
LABEL_51:
      *(unsigned char *)(a3 + 6) = -1;
      uint64_t v23 = p_api;
      uint64_t v24 = *(void *)(p_api + 8);
      int v25 = *(_DWORD *)(v24 + 4);
      if (!v25) {
        goto LABEL_58;
      }
      unsigned int v26 = *(_DWORD *)(v24 + 8);
      if (v26 > 0x10000) {
        goto LABEL_58;
      }
      double v27 = (*(double *)(v9 + 40) + 1.0) * ((double)v26 * -0.0000000152587891 + (double)(*(_DWORD *)v6 - v25) * 0.001);
      HIDWORD(v28) = 1078984704;
      if (v27 > 64.0) {
        goto LABEL_58;
      }
      LODWORD(v28) = *(_DWORD *)(*(void *)(p_api + 72) + 948);
      if (v27 > (double)v28 * 0.005) {
        goto LABEL_58;
      }
      double v29 = v27 * 1000000.0;
      double v30 = -0.5;
      if (v29 > 0.0) {
        double v30 = 0.5;
      }
      double v31 = v29 + v30;
      if (v31 <= 2147483650.0)
      {
        if (v31 >= -2147483650.0) {
          int v32 = (int)v31;
        }
        else {
          int v32 = 0x80000000;
        }
      }
      else
      {
LABEL_58:
        int v32 = 0x7FFFFFFF;
      }
      *(_DWORD *)(a3 + 8) = v32;
      uint64_t v33 = *(void *)(v23 + 40);
      int v34 = *(_DWORD *)(v33 + 6360);
      int v35 = -1024 * *(_DWORD *)(v33 + 6364);
      if (v35 | (v34 << 8))
      {
        HIDWORD(v100) = v34 << 8;
      }
      else
      {
        HIDWORD(v100) = (int)(*(double *)(v9 + 40) * -4.0330752e11);
        int v35 = (int)(*(double *)(v9 + 32) * 1047552000.0);
      }
      *(unsigned char *)(a3 + 5) = 0;
      uint64_t v36 = *(void *)(v23 + 232);
      double v37 = 0.0;
      uint64_t v101 = v36;
      if (*(_DWORD *)v9 == 11)
      {
        double v38 = *(double *)(v9 + 32);
        __int16 v104 = 0;
        *(void *)&v105[0] = 0;
        v106[0] = 9.9980001e13;
        if (Get_FSP_Time(*(_DWORD *)(v9 + 8), &v104, (double *)v105, v106, &v103) && v106[0] < 0.00000001)
        {
          double v39 = *(double *)(v9 + 24) - *(double *)v105;
          double v37 = v39 - *(double *)(v9 + 32);
          uint64_t v36 = v101;
          if (a2) {
            *(unsigned char *)(a3 + 5) = 1;
          }
          else {
            double v39 = v38;
          }
        }
        else
        {
          double v39 = v38;
          uint64_t v36 = v101;
        }
        int v35 = (int)(v39 * 1047552000.0);
      }
      if (*(_DWORD *)v36 != *(_DWORD *)v6)
      {
        EvCrt_v("API_Get_MS_Ass_Meas:  Error:  Database time-tag miss-match  %u  %u", *(_DWORD *)v6, *(_DWORD *)v36);
        return 0;
      }
      LODWORD(v100) = v35;
      uint64_t v40 = 0;
      double v41 = *(double *)(v36 + 656);
      memset(v105, 0, sizeof(v105));
      int v42 = (_WORD *)(v6 + 2728);
      double v43 = -1345.28908 / v41;
      do
      {
        if (Is_Legal(*((_DWORD *)v42 - 2))) {
          *(_WORD *)((char *)v105 + v40) = *v42 & 0x300 | *((unsigned __int8 *)v42 - 4);
        }
        v40 += 2;
        v42 += 18;
      }
      while (v40 != 96);
      for (uint64_t j = 0; j != 48; ++j)
      {
        uint64_t v45 = 0;
        __int16 v46 = -1;
        unsigned int v47 = -1;
        do
        {
          if (*((__int16 *)v105 + v45) > v46)
          {
            __int16 v46 = *((_WORD *)v105 + v45);
            unsigned int v47 = v45;
          }
          ++v45;
        }
        while (v45 != 48);
        *((unsigned char *)v106 + j) = v47;
        if ((v47 & 0x80000000) == 0) {
          *((_WORD *)v105 + v47) = -99;
        }
      }
      uint64_t v48 = 0;
      unsigned int v99 = 0;
      int v98 = 0;
      uint64_t v97 = *(void *)(p_api + 64);
      break;
  }
  do
  {
    uint64_t v49 = *((char *)v106 + v48);
    uint64_t v50 = v6 + 36 * v49;
    int v51 = *(_DWORD *)(v50 + 2720);
    if (Is_Legal(v51)) {
      BOOL v52 = v51 == 1;
    }
    else {
      BOOL v52 = 0;
    }
    if (!v52) {
      goto LABEL_117;
    }
    uint64_t v53 = v6 + 36 * v49;
    if (*(unsigned __int8 *)(v53 + 2724) < 0xAu) {
      goto LABEL_117;
    }
    uint64_t v54 = v6 + 36 * v49;
    if (!*(_WORD *)(v54 + 2730)) {
      goto LABEL_117;
    }
    uint64_t v55 = v102 + 4 * v49;
    if (v51 != *(_DWORD *)(v55 + 76) || *(int *)(v55 + 412) < 10) {
      goto LABEL_117;
    }
    uint64_t v56 = v101;
    int v57 = *(_DWORD *)(v101 + 4 * v49 + 3056);
    if ((v57 - 1) >= 0x1D)
    {
      if (!v57) {
        goto LABEL_95;
      }
      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      uint64_t v56 = v101;
    }
    if (fabs(*(double *)(v56 + 8 * v49 + 4832)) >= 16.0) {
      goto LABEL_117;
    }
LABEL_95:
    if (*(unsigned char *)(v97 + v49 + 365)) {
      goto LABEL_117;
    }
    unsigned int v58 = (int *)(v50 + 2720);
    int v59 = *v58;
    if (!Is_SV_Usable(*v58)) {
      goto LABEL_117;
    }
    unsigned int v60 = *(unsigned __int8 *)(v53 + 2724);
    if (v60 <= *(unsigned __int8 *)(v6 + 36 * v49 + 2725)
      && *(unsigned __int16 *)(v54 + 2730) >> 3 < 0x36Bu)
    {
      goto LABEL_117;
    }
    uint64_t v61 = v6 + 56 * v49;
    unsigned int v62 = *(unsigned __int16 *)(v61 + 40);
    int v63 = *(_DWORD *)(v61 + 36);
    int v64 = v100 + (v62 >> 6) + ((v63 % 1023) << 10);
    int v65 = v100 - 1047552 + (v62 >> 6) + ((v63 % 1023) << 10) + ((1047552 - v64) & ~((1047552 - v64) >> 31));
    uint64_t v66 = a3 + 10 * v99;
    *(unsigned char *)(v66 + 14) = BYTE2(v59);
    *(unsigned char *)(v66 + 15) = v60;
    uint64_t v67 = v61 + 32;
    unsigned int v68 = (v65 - (v65 != 0)) / 0xFFC00;
    if (v65) {
      ++v68;
    }
    int v69 = 1047552 * v68;
    int v70 = v69 - v64 + 1047552;
    if (v70 >= 1047551) {
      int v71 = 1047551;
    }
    else {
      int v71 = v69 - v64 + 1047552;
    }
    unsigned int v72 = v70 - 1047552 * ((v69 - v64 - v71 + 2095103) / 0xFFC00u);
    *(_WORD *)(v66 + 18) = v72 >> 10;
    *(_WORD *)(v66 + 20) = v72 & 0x3FF;
    if (!v99 && (*(_WORD *)(v6 + 36 * v49 + 2728) & 0x200) != 0)
    {
      int v73 = ((unint64_t)(2145384445 * (v63 + 1023)) >> 32) - v63 - 1023;
      int v74 = (v73 >> 9) + (v73 >> 31) - 1500 * *(_DWORD *)v67 + *(_DWORD *)a3;
      int v75 = v74 + (v74 < 0 ? 0x240C8400 : 0);
      if ((v75 - 2) <= 0x7C) {
        *(unsigned char *)(a3 + 6) = v75;
      }
    }
    int v76 = *(_DWORD *)(v6 + 56 * v49 + 44) - HIDWORD(v100);
    if (*(unsigned __int16 *)(v102 + 2 * v49 + 1036) < 0x32u)
    {
      int v79 = *(_DWORD *)(v6 + 56 * v49 + 44) - HIDWORD(v100);
      uint64_t v77 = v101;
    }
    else
    {
      uint64_t v77 = v101;
      if (*(int *)(v55 + 412) < 15)
      {
        int v79 = *(_DWORD *)(v6 + 56 * v49 + 44) - HIDWORD(v100);
      }
      else
      {
        if (*(double *)(v101 + 656) < 0.5) {
          goto LABEL_116;
        }
        double v78 = *(double *)(v101 + 8 * v49 + 120);
        if (fabs(v78) > 3000.0) {
          goto LABEL_116;
        }
        int v79 = (int)(v43 * v78) - HIDWORD(v100);
        unsigned int v80 = v79 - v76;
        if (v79 - v76 < 0) {
          unsigned int v80 = v76 - v79;
        }
        if (v80 > 0x2000)
        {
          EvLog_v("API_Get_GPS_MS_Ass_Meas:  Warning:  SV %d, Doppler miss-match  %d  %d !", BYTE2(v59), v76 >> 8, v79 >> 8);
          uint64_t v77 = v101;
LABEL_116:
          int v79 = v76;
        }
      }
    }
    unsigned int v81 = v99;
    uint64_t v82 = a3 + 10 * v99;
    *(_WORD *)(v82 + 16) = (5 * v79) >> 8;
    *(unsigned char *)(v82 + 22) = 0;
    int GNSS_PR_Meas_Var = API_Get_GNSS_PR_Meas_Var((uint64_t)v58, *(_WORD *)(v67 + 34), *(unsigned char *)(v67 + 38), *(unsigned char *)(v77 + v49 + 978));
    int v84 = U4sqrt(100 * GNSS_PR_Meas_Var);
    unsigned int v85 = Comp_AGNSS_PR_Sigma(1000 * v84);
    if (v85 >= 0x3E) {
      int v86 = 62;
    }
    else {
      int v86 = v85;
    }
    *(unsigned char *)(v82 + 23) = v86;
    int v98 = v98 - v86 + 64;
    ++v99;
    if (v81 == 15)
    {
      unsigned int v87 = 16;
      *(unsigned char *)(a3 + 12) = 16;
      double v88 = (unsigned char *)(a3 + 12);
      goto LABEL_131;
    }
LABEL_117:
    ++v48;
  }
  while (v48 != 48);
  unsigned int v87 = v99;
  *(unsigned char *)(a3 + 12) = v99;
  double v88 = (unsigned char *)(a3 + 12);
  if (!v99)
  {
    unsigned __int8 v91 = 0;
    goto LABEL_146;
  }
LABEL_131:
  unsigned int v90 = v98;
  if (v100)
  {
    if (*(unsigned __int8 *)(a3 + 4) >= 0x63u)
    {
      unsigned int v92 = 5;
      unsigned int v90 = (v87 - 1) * v98 / v87;
    }
    else
    {
      unsigned int v92 = 4;
    }
    if (v92 <= v87)
    {
      if (v92 >= v87)
      {
        unsigned int v90 = (3 * v90) >> 2;
      }
      else if ((v92 | 2) > v87)
      {
        unsigned int v90 = (14 * v90) >> 4;
      }
    }
    else
    {
      v90 >>= 1;
    }
    if (v90 >= 0xFF) {
      unsigned __int8 v91 = -1;
    }
    else {
      unsigned __int8 v91 = v90;
    }
  }
  else
  {
    unsigned __int8 v91 = v87;
  }
LABEL_146:
  *(unsigned char *)(a3 + 13) = v91;
  unsigned int v93 = v87;
  EvLog_v("GN_AGPS_Meas:  %9u %3d  %3d %u  %2d %3d %g %d", *(_DWORD *)a3, *(unsigned __int8 *)(a3 + 4), *(char *)(a3 + 6), *(_DWORD *)(a3 + 8), v87, v91, v37 * 299792458.0, *(unsigned __int8 *)(a3 + 5));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *v88)
  {
    unint64_t v94 = 0;
    int32x2_t v95 = (unsigned char *)(a3 + 23);
    do
    {
      unsigned int v96 = *v95;
      EvLog_v("GN_AGPS_Meas_El: %2d %3d %2d  %6d (%5d)  %4d %5d  %d %2d (%d,%d) %f", v94++, *(v95 - 9), *(v95 - 8), *(__int16 *)(v95 - 7), ((26215 * *(__int16 *)(v95 - 7)) >> 17) + ((26215 * *(__int16 *)(v95 - 7)) >> 31), *(unsigned __int16 *)(v95 - 5), *(unsigned __int16 *)(v95 - 3), *(v95 - 1), v96, v96 >> 3, v96 & 7, ((double)(v96 & 7) * 0.125 + 1.0) * 0.5 * (double)(1 << (*v95 >> 3)));
      v95 += 10;
    }
    while (v94 < *v88);
  }
  return v93 != 0;
}

BOOL Is_SV_Usable(int a1)
{
  if (!(_BYTE)a1) {
    return 0;
  }
  if (a1 == 2 && !BYTE2(a1)) {
    return 1;
  }
  int v2 = a1 > 7u ? 0 : Num_Prn[a1 - 1];
  int v3 = BYTE2(a1) + v2 - 1;
  return *(unsigned char *)(*(void *)(p_api + 56) + v3 + 33605) && *(unsigned char *)(*(void *)(p_api + 72) + v3 + 253) == 0;
}

BOOL API_Get_GNSS_MS_Ass_Meas(_DWORD *a1, int a2, char *a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)p_api;
  uint64_t v6 = *(void *)(p_api + 16);
  uint64_t v7 = *(void *)(p_api + 104);
  if (a1)
  {
    int v8 = *(_DWORD *)(v6 + 4);
    if (*a1) {
      BOOL v9 = *a1 == v8;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      return 0;
    }
    *a1 = v8;
  }
  bzero(a3, 0x494uLL);
  unsigned int v10 = (double *)v5[6];
  uint64_t v11 = *(unsigned int *)v10;
  if ((int)v11 < 3) {
    return 0;
  }
  unsigned int v12 = *(unsigned __int8 *)(v6 + 22);
  if (v11 > 7) {
    goto LABEL_22;
  }
  if (v11 == 4) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  if (v11 <= 4) {
    int v14 = v13;
  }
  else {
    int v14 = 3;
  }
  if (v11 == 7) {
    unsigned int v15 = 192;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v11 == 6) {
    unsigned int v15 = 96;
  }
  if (v15 >= v12)
  {
LABEL_22:
    double v18 = (double)(*(_DWORD *)v6 - *((_DWORD *)v10 + 2)) * 0.001;
    for (double i = v10[3] + v18 - (v10[4] + v10[5] * v18); i >= 604800.0; double i = i + -604800.0)
      ;
    while (i < 0.0)
      double i = i + 604800.0;
    double v20 = i * 1000.0;
    if (i * 1000.0 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        unsigned int v16 = (int)v20;
      }
      else {
        unsigned int v16 = 0x80000000;
      }
    }
    else
    {
      unsigned int v16 = 0x7FFFFFFF;
    }
    double v21 = -((double)v16 - i * 1000.0) * 10000.0;
    if (v21 <= 2147483650.0)
    {
      if (v21 >= -2147483650.0) {
        int v22 = (int)v21;
      }
      else {
        LOWORD(v22) = 0;
      }
    }
    else
    {
      LOWORD(v22) = -1;
    }
    char v23 = g_TOW_Stat2GAD_UncK_Table[v11];
    a3[10] = v23;
    int v17 = (unsigned __int8 *)(a3 + 10);
    *((_WORD *)a3 + 4) = v22;
    if ((int)v11 >= 10 && v12 && v16 == *(_DWORD *)(v6 + 24))
    {
      unsigned int v24 = (v23 + ~(v12 >> 3));
      if (v24 <= 0x60) {
        LOBYTE(v24) = 96;
      }
      *int v17 = v24;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v6 + 24);
    a3[10] = g_TOW_Stat2GAD_UncK_Table[v11];
    int v17 = (unsigned __int8 *)(a3 + 10);
  }
  a3[11] = -1;
  uint64_t v25 = v5[1];
  int v26 = *(_DWORD *)(v25 + 4);
  if (!v26) {
    goto LABEL_50;
  }
  unsigned int v27 = *(_DWORD *)(v25 + 8);
  if (v27 > 0x10000) {
    goto LABEL_50;
  }
  double v28 = (v10[5] + 1.0) * ((double)v27 * -0.0000000152587891 + (double)(*(_DWORD *)v6 - v26) * 0.001);
  HIDWORD(v29) = 1078984704;
  if (v28 > 64.0) {
    goto LABEL_50;
  }
  LODWORD(v29) = *(_DWORD *)(v5[9] + 948);
  if (v28 > (double)v29 * 0.005) {
    goto LABEL_50;
  }
  double v30 = v28 * 1000000.0;
  double v31 = -0.5;
  if (v30 > 0.0) {
    double v31 = 0.5;
  }
  double v32 = v30 + v31;
  if (v32 <= 2147483650.0)
  {
    if (v32 >= -2147483650.0) {
      int v33 = (int)v32;
    }
    else {
      int v33 = 0x80000000;
    }
  }
  else
  {
LABEL_50:
    int v33 = 0x7FFFFFFF;
  }
  *((_DWORD *)a3 + 3) = v33;
  uint64_t v34 = v5[5];
  int v35 = *(_DWORD *)(v34 + 6360) << 8;
  int v36 = *(_DWORD *)(v34 + 6364);
  int v37 = ((unint64_t)(4499197279600640 * v36) >> 32) - (v36 << 21);
  int v119 = (v37 >> 9) + (v37 >> 31);
  if (!v35 && (1022 - (v36 << 21)) <= 0x7FC)
  {
    int v35 = (int)(v10[5] * -4.0330752e11);
    int v119 = (int)(v10[4] * 2097152000.0);
  }
  if (*(_DWORD *)v10 == 11) {
    int v119 = (int)(v10[4] * 2097152000.0);
  }
  uint64_t v38 = v5[29];
  if (*(_DWORD *)v38 != *(_DWORD *)v6)
  {
    EvCrt_v("API_Get_MS_Ass_Meas:  Error:  Database time-tag miss-match  %u  %u", *(_DWORD *)v6, *(_DWORD *)v38);
    return 0;
  }
  int v111 = a2;
  uint64_t v117 = a3;
  uint64_t v118 = v5[29];
  uint64_t v39 = 0;
  double v40 = *(double *)(v38 + 656);
  memset(v121, 0, 96);
  uint64_t v120 = v7;
  double v41 = (unsigned __int8 *)(v7 + 79);
  int v42 = v121;
  double v43 = -1345.28908 / v40;
  do
  {
    uint64_t v44 = v6 + v39;
    if (*(unsigned char *)(v6 + v39 + 2720) == 2 && !*(unsigned char *)(v44 + 2722) && *(unsigned __int8 *)(v6 + v39 + 2723) == *v41) {
      *(unsigned char *)(v44 + 2722) = *(v41 - 1);
    }
    if (Is_Legal(*(_DWORD *)(v44 + 2720))) {
      *int v42 = *(_WORD *)(v6 + v39 + 2728) & 0x300 | *(unsigned __int8 *)(v6 + v39 + 2724);
    }
    v39 += 36;
    ++v42;
    v41 += 4;
  }
  while (v39 != 1728);
  long long v112 = v17;
  for (uint64_t j = 0; j != 48; ++j)
  {
    uint64_t v46 = 0;
    __int16 v47 = -1;
    int v48 = -1;
    do
    {
      if (*((__int16 *)v121 + v46) > v47)
      {
        __int16 v47 = *((_WORD *)v121 + v46);
        int v48 = v46;
      }
      ++v46;
    }
    while (v46 != 48);
    *((unsigned char *)&v121[6] + j) = v48;
    if (v48 != -1) {
      *((_WORD *)v121 + v48) = -99;
    }
  }
  uint64_t v49 = 0;
  unsigned int v113 = 0;
  unsigned int v115 = v16;
  unsigned int v116 = 0;
  uint64_t v114 = *(void *)(p_api + 64);
  unsigned int v110 = v16 + 86399999;
  do
  {
    uint64_t v50 = *((char *)&v121[6] + v49);
    uint64_t v51 = v6 + 36 * v50;
    int v52 = *(_DWORD *)(v51 + 2720);
    if (Is_Legal(v52)) {
      BOOL v53 = v52 == 0;
    }
    else {
      BOOL v53 = 1;
    }
    if (v53) {
      goto LABEL_134;
    }
    uint64_t v54 = v6 + 36 * v50;
    if (*(unsigned __int8 *)(v54 + 2724) < 0xAu) {
      goto LABEL_134;
    }
    uint64_t v55 = v6 + 36 * v50;
    if (!*(_WORD *)(v55 + 2730)) {
      goto LABEL_134;
    }
    uint64_t v56 = v120 + 4 * v50;
    if (v52 != *(_DWORD *)(v56 + 76) || *(int *)(v56 + 412) < 10) {
      goto LABEL_134;
    }
    uint64_t v57 = v118;
    int v58 = *(_DWORD *)(v118 + 4 * v50 + 3056);
    if ((v58 - 1) >= 0x1D)
    {
      if (!v58) {
        goto LABEL_84;
      }
      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      uint64_t v57 = v118;
    }
    if (fabs(*(double *)(v57 + 8 * v50 + 4832)) >= 16.0) {
      goto LABEL_134;
    }
LABEL_84:
    if (*(unsigned char *)(v114 + v50 + 365)) {
      goto LABEL_134;
    }
    int v59 = (unsigned char *)(v51 + 2720);
    int v60 = *(_DWORD *)(v51 + 2720);
    if (!Is_SV_Usable(v60)) {
      goto LABEL_134;
    }
    unsigned int v61 = *(unsigned __int8 *)(v54 + 2724);
    if (v61 <= *(unsigned __int8 *)(v6 + 36 * v50 + 2725)
      && *(unsigned __int16 *)(v55 + 2730) >> 3 < 0x36Bu)
    {
      goto LABEL_134;
    }
    if ((v60 - 1) > 5u) {
      goto LABEL_134;
    }
    int v62 = dword_22BB0E0AC[(char)(v60 - 1)];
    *(_DWORD *)&v117[24 * v116 + 20] = v62;
    if ((v62 & v111) == 0) {
      goto LABEL_134;
    }
    int v63 = (_DWORD *)(v6 + 56 * v50 + 32);
    int v64 = &v117[24 * v116];
    v64[24] = v59[2];
    int v65 = (unsigned __int8 *)(v64 + 24);
    if (*v59 == 3) {
      char v66 = 4;
    }
    else {
      char v66 = 1;
    }
    v65[1] = v66;
    v65[2] = v61;
    *(_WORD *)(v65 + 3) = 0;
    unsigned int v67 = *(_WORD *)(v6 + 36 * v50 + 2728) & 0x300;
    if (v67 == 768 || !v116 && v67 >= 0x200)
    {
      int v68 = *(_DWORD *)(v6 + 56 * v50 + 36);
      int v69 = ((unint64_t)(2145384445 * (v68 + 1023)) >> 32) - v68 - 1023;
      int v70 = (v69 >> 9) + (v69 >> 31);
      int v71 = v70 + v115 - 1500 * *v63;
      unsigned int v72 = 86400000
          * (((v71 & ~(v71 >> 31)) - v71 + (v71 >> 31)) / 0x5265C00 + (v71 >> 31));
      unsigned int v73 = v71 + v72;
      int v74 = v73 >= 0x5265BFF ? 86399999 : v73;
      if (v67 == 768)
      {
        unsigned int v75 = (v110 - 1500 * *v63 + v70 + v72 - v74) % 0x5265C00 - (v110 - 1500 * *v63 + v70 + v72 - v74) + v73;
        if (v75 - 2 <= 0x7C)
        {
          v65[4] = v75;
          if (!v116) {
            v117[11] = v75;
          }
        }
      }
    }
    int GNSS_PR_Meas_Var = API_Get_GNSS_PR_Meas_Var((uint64_t)v59, *(_WORD *)(v6 + 56 * v50 + 66), *(unsigned char *)(v6 + 56 * v50 + 70), *(unsigned char *)(v118 + v50 + 978));
    unsigned int v77 = 1000 * U4sqrt(100 * GNSS_PR_Meas_Var);
    if (v77 < 0x111700)
    {
      if (v77 >> 3 <= 0x270)
      {
        int v79 = v117;
        LOBYTE(v81) = v117[24 * v116 + 29];
        goto LABEL_115;
      }
      int v82 = 9375;
      if (v77 >= 0x249F)
      {
        int v83 = 0;
        int v84 = 9375;
        do
        {
          int v82 = 2 * v84;
          ++v83;
          BOOL v85 = v77 >= 2 * v84;
          v84 *= 2;
        }
        while (v85);
      }
      else
      {
        int v83 = 0;
      }
      unsigned int v81 = 8 * v83 - (v82 - v77) / (625 << v83) + 7;
      int v79 = v117;
      unsigned int v80 = &v117[24 * v116];
    }
    else
    {
      int v79 = v117;
      unsigned int v80 = &v117[24 * v116];
      LOBYTE(v81) = 63;
    }
    v80[29] = v81;
LABEL_115:
    uint64_t v86 = v6 + 56 * v50;
    int v87 = 2145386496 - ((32 * *(unsigned __int16 *)(v86 + 40)) | ((*(_DWORD *)(v86 + 36) % 1023) << 21));
    signed int v88 = ((v119 + 0x1FFFFF - v87 / 1023 + ((v87 / 1023 - v119) & ~((v87 / 1023 - v119) >> 31))) & 0xFFE00000)
        + v87 / 1023
        - v119;
    if (v88 < 0x200000) {
      unsigned int v89 = 0x1FFFFF;
    }
    else {
      unsigned int v89 = ((v119 + 0x1FFFFF - v87 / 1023 + ((v87 / 1023 - v119) & ~((v87 / 1023 - v119) >> 31))) & 0xFFE00000)
    }
          + v87 / 1023
          - v119;
    *(_DWORD *)&v79[24 * v116 + 32] = v88 - (v89 & 0x7FE00000);
    int v90 = *(_DWORD *)(v86 + 44) - v35;
    if (*(unsigned __int16 *)(v120 + 2 * v50 + 1036) < 0x32u || *(int *)(v56 + 412) < 15)
    {
      LOWORD(v92) = *(_WORD *)(v86 + 44) - v35;
    }
    else
    {
      if (*(double *)(v118 + 656) >= 0.5)
      {
        double v91 = *(double *)(v118 + 8 * v50 + 120);
        double v78 = fabs(v91);
        if (v78 <= 3000.0)
        {
          int v92 = (int)(v43 * v91) - v35;
          unsigned int v93 = v92 - v90;
          if (v92 - v90 < 0) {
            unsigned int v93 = v90 - v92;
          }
          if (v93 <= 0x2000) {
            goto LABEL_128;
          }
          EvLog_v("API_Get_GNSS_MS_Ass_Meas:  Warning:  SV %d, Doppler miss-match  %d  %d !", *v65, v90 >> 8, v92 >> 8);
        }
      }
      LOWORD(v92) = v90;
    }
LABEL_128:
    int v94 = 0;
    *(_WORD *)&v117[24 * v116 + 36] = (__int16)(16 * v92) / 861;
    uint64_t v95 = v6 + 56 * v50;
    LOWORD(v78) = *(_WORD *)(v95 + 52);
    double v96 = ((double)*(int *)(v95 + 56) + (double)*(unint64_t *)&v78 * 0.0000152587891) * 194.860721;
    if (v96 <= -4294967280.0)
    {
      __int16 v97 = 0;
      unsigned int v98 = v116;
      unsigned int v99 = v113;
    }
    else
    {
      __int16 v97 = 0;
      unsigned int v98 = v116;
      unsigned int v99 = v113;
      if (v96 < 4294967280.0)
      {
        int v94 = (int)v96;
        __int16 v97 = *(_WORD *)(v6 + 36 * v50 + 2734);
      }
    }
    int v100 = v99 - v81 + 64;
    uint64_t v101 = &v117[24 * v116];
    *((_DWORD *)v101 + 10) = v94;
    *((_WORD *)v101 + 19) = v97;
    unsigned int v102 = v98 + 1;
    unsigned int v113 = v100;
    if (v102 == 48)
    {
      unsigned int v104 = 48;
      unsigned __int8 v103 = (int *)v117;
      v117[16] = 48;
      goto LABEL_136;
    }
    unsigned int v116 = v102;
LABEL_134:
    ++v49;
  }
  while (v49 != 48);
  unsigned __int8 v103 = (int *)v117;
  unsigned int v104 = v116;
  v117[16] = v116;
  if (!v116)
  {
    char v106 = 0;
    unsigned int v105 = v115;
    goto LABEL_153;
  }
LABEL_136:
  unsigned int v105 = v115;
  if (v119 | v35)
  {
    if (*v112 >= 0x63u)
    {
      unsigned int v108 = 5;
      unsigned int v109 = (v104 - 1) * v113 / v104;
    }
    else
    {
      unsigned int v108 = 4;
      unsigned int v109 = v113;
    }
    if (v108 <= v104)
    {
      if (v108 >= v104)
      {
        unsigned int v109 = (3 * v109) >> 2;
      }
      else if ((v108 | 2) > v104)
      {
        unsigned int v109 = (14 * v109) >> 4;
      }
    }
    else
    {
      v109 >>= 1;
    }
    if (v109 >= 0xFF) {
      char v106 = -1;
    }
    else {
      char v106 = v109;
    }
  }
  else
  {
    char v106 = v104;
  }
LABEL_153:
  *((unsigned char *)v103 + 17) = v106;
  Set_Meas_GNSS_TOD(v105 % 0x5265C00, v103);
  return v104 != 0;
}

uint64_t Set_Meas_GNSS_TOD(uint64_t result, int *a2)
{
  int v3 = result;
  v10[1] = *(double *)MEMORY[0x263EF8340];
  int v4 = a2[5];
  if ((v4 & 0x20) != 0)
  {
    v10[0] = 0.0;
    uint64_t result = API_Get_UTC_Cor(1, v10);
    double v6 = -0.5;
    if (v10[0] * 1000.0 > 0.0) {
      double v6 = 0.5;
    }
    double v7 = v10[0] * 1000.0 + v6;
    if (v7 <= 2147483650.0)
    {
      if (v7 >= -2147483650.0) {
        int v8 = (int)v7;
      }
      else {
        int v8 = 0x80000000;
      }
    }
    else
    {
      int v8 = 0x7FFFFFFF;
    }
    int v3 = v3 - v8 + 10800000;
    int v5 = 32;
  }
  else if ((v4 & 2) != 0)
  {
    int v5 = 2;
  }
  else if ((v4 & 0x40) != 0)
  {
    int v3 = result - 14000;
    int v5 = 64;
  }
  else
  {
    int v5 = 1;
  }
  *a2 = v5;
  int v9 = v3 - 86400000;
  if (v3 <= 86400000) {
    int v9 = v3;
  }
  a2[1] = v9 + (v9 < 0 ? 0x5265C00 : 0);
  return result;
}

uint64_t API_Get_GNSS_Assist_Req(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v219 = *MEMORY[0x263EF8340];
  if (a1)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  uint64_t v11 = &g_Crc32_RemTable[230];
  uint64_t v12 = p_api;
  int v13 = *(unsigned char **)(p_api + 328);
  uint64_t v14 = *(void *)(p_api + 48);
  int v15 = *(unsigned __int8 *)(v14 + 5);
  if (*(unsigned char *)(v14 + 5) && *(int *)v14 > 5 || v13[2])
  {
    uint64_t v16 = 0;
    if (!a1 || !*(unsigned char *)(v14 + 5)) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v16 = 1;
  if (!a1) {
    return v16;
  }
  *(unsigned char *)a1 = 1;
  if (v15)
  {
LABEL_11:
    if (*(int *)v14 >= 4) {
      *(unsigned char *)(a1 + 10) = 1;
    }
  }
LABEL_13:
  double v17 = *(double *)(*(void *)(v12 + 80) + 816);
  uint64_t v199 = *(void *)(v12 + 80);
  if (v17 > 300.0 && !v13[10])
  {
    uint64_t v16 = 1;
    if (!a1) {
      return v16;
    }
    *(unsigned char *)(a1 + 1) = 1;
    goto LABEL_16;
  }
  if (a1)
  {
LABEL_16:
    if (v17 <= 10000.0) {
      goto LABEL_27;
    }
    int v216 = 0;
    uint64_t v215 = 0;
    int v212 = 0;
    int v213 = 0;
    double v18 = *(int **)(v12 + 8);
    if (*v18)
    {
      int v20 = v18[4];
      int v19 = *v18;
      int v21 = v19 - v20 + (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    }
    else
    {
      int v21 = 0;
    }
    __int16 v214 = 0;
    if ((Core_Get_Pos_LLH(v21, 150000, 1, &v216, (uint64_t)v218, (uint64_t)v217, &v215, &v214, (unsigned char *)&v214 + 1, &v212, &v213) & 1) == 0)
    {
      uint64_t v7 = a7;
      goto LABEL_29;
    }
    double v23 = v217[0] + (double)((v21 - v216) * (v21 - v216)) * 0.0009;
    uint64_t v7 = a7;
    if (v23 <= 100000000.0) {
LABEL_27:
    }
      *(unsigned char *)(a1 + 11) = 1;
LABEL_29:
    uint64_t v12 = p_api;
    uint64_t v22 = *(void *)(p_api + 56);
    if ((*(_DWORD *)(v22 + 8428) - 2) < 5 || v13[13])
    {
      unsigned int v24 = (unsigned char *)(a1 + 12);
    }
    else
    {
      unsigned int v24 = (unsigned char *)(a1 + 2);
      uint64_t v16 = 1;
    }
    *unsigned int v24 = 1;
    if ((*(_DWORD *)(v22 + 8444) - 2) < 5 || v13[14]) {
      *(unsigned char *)(a1 + 13) = 1;
    }
    goto LABEL_35;
  }
  uint64_t v22 = *(void *)(v12 + 56);
  if ((*(_DWORD *)(v22 + 8428) - 2) >= 5 && !v13[13]) {
    return 1;
  }
LABEL_35:
  uint64_t v209 = a4;
  uint64_t v208 = *(unsigned char **)(v12 + 72);
  LOBYTE(v217[0]) = 0;
  LOBYTE(v215) = 0;
  unint64_t v200 = v13;
  uint64_t v198 = v14;
  if (!v208[31])
  {
    if (a2)
    {
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
    }
    goto LABEL_93;
  }
  int v203 = v16;
  if (a2)
  {
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_DWORD *)a2 = 1;
    *(_WORD *)(a2 + 11) = 514;
    *(unsigned char *)(a2 + 13) = 2;
    uint64_t v22 = *(void *)(v12 + 56);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  int v28 = 0;
  uint64_t v29 = *(void *)(v12 + 328);
  do
  {
    if (*(unsigned char *)(*(void *)(v22 + 64) + v25) || *(unsigned char *)(v29 + 47 + v25))
    {
      ++v27;
      v26 |= 1 << v25;
    }
    else if (!*(unsigned char *)(*(void *)v22 + v25))
    {
      ++v28;
    }
    ++v25;
  }
  while (v25 != 32);
  if (a2)
  {
    *(void *)(a2 + 168) = v26;
    if (v27 + v28 > 27)
    {
      BOOL v30 = 0;
    }
    else
    {
      BOOL v30 = 1;
      *(unsigned char *)(a2 + 6) = 1;
    }
  }
  else
  {
    BOOL v30 = v27 + v28 < 28;
  }
  LOBYTE(v217[0]) = v27;
  uint64_t v31 = *(void *)(v12 + 48);
  if (*(unsigned char *)(v31 + 5) && *(int *)v31 >= 3) {
    uint64_t v32 = ((int)*(double *)(v31 + 24) + 604800 * *(__int16 *)(v31 + 16));
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(_DWORD *)v12 != 11)
  {
    int v33 = *(_DWORD *)(*(void *)(v12 + 80) + 36);
    uint64_t v34 = 274877907
        * (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v33);
    uint64_t v32 = (v34 >> 38) + ((unint64_t)v34 >> 63) + v32;
  }
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v37 = v29 + 15;
  do
  {
    if (*(unsigned char *)(*(void *)(v22 + 48) + v35))
    {
      ++v36;
    }
    else if (*(unsigned char *)(v37 + v35))
    {
      memset(v218, 0, 108);
      v36 += Core_Get_GPS_Eph((v35 + 1), v32, (int *)v218);
    }
    ++v35;
  }
  while (v35 != 32);
  uint64_t v38 = a2;
  if (a2 && ((v36 > 7) & ~v30) == 0)
  {
    *(unsigned char *)(a2 + 7) = 1;
    LOBYTE(v215) = v36;
    uint64_t v7 = a7;
    uint64_t v11 = g_Crc32_RemTable + 920;
LABEL_72:
    *(_WORD *)(v38 + 4) = 257;
    *(_WORD *)(v38 + 8) = 0;
    *(unsigned char *)(v38 + 10) = 0;
    int v39 = 1;
    goto LABEL_73;
  }
  int v39 = !((v36 > 7) & ~v30) || v30;
  LOBYTE(v215) = v36;
  uint64_t v7 = a7;
  if (!a2)
  {
LABEL_85:
    uint64_t v11 = g_Crc32_RemTable + 920;
    goto LABEL_88;
  }
  uint64_t v11 = &g_Crc32_RemTable[230];
  if (v39)
  {
    uint64_t v38 = a2;
    goto LABEL_72;
  }
LABEL_73:
  uint64_t v40 = *((void *)v11 + 71);
  uint64_t v41 = *(void *)(v40 + 48);
  if (!*(unsigned char *)(v41 + 5) || *(int *)v41 < 1) {
    goto LABEL_88;
  }
  __int16 v42 = *(_WORD *)(v41 + 16);
  *(_WORD *)(a2 + 14) = v42;
  int v43 = (int)*(double *)(v41 + 24) / 3600;
  *(unsigned char *)(a2 + 16) = v43 + 2;
  if ((v43 + 2) >= 0xA8u)
  {
    *(_WORD *)(a2 + 14) = v42 + 1;
    *(unsigned char *)(a2 + 16) = v43 + 90;
  }
  *(_WORD *)(a2 + 17) = 3;
  uint64_t v44 = *(void *)(v40 + 40);
  uint64_t v45 = (unsigned __int8 *)(v44 + 6132);
  if (*(unsigned char *)(v44 + 6132))
  {
    unint64_t v46 = 0;
    uint64_t v47 = v44 + 4174;
    do
    {
      LODWORD(v218[0]) = 0;
      unsigned int v48 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v47 + 2 * v46) - 1), v218);
      if (LODWORD(v218[0]) == 1 && (v48 & 0x80000000) == 0 && *(unsigned char *)(*(void *)(v22 + 48) + v48))
      {
        uint64_t v49 = *(unsigned __int8 *)(a2 + 18);
        *(unsigned char *)(a2 + v49 + 19) = v48;
        *(_WORD *)(a2 + 2 * v49 + 68) = *(unsigned __int8 *)(v22 + 108 * v48 + 146);
        *(unsigned char *)(a2 + 18) = v49 + 1;
      }
      ++v46;
    }
    while (v46 < *v45);
    a4 = v209;
    uint64_t v7 = a7;
    goto LABEL_85;
  }
  uint64_t v7 = a7;
LABEL_88:
  if (a1 && v39)
  {
    uint64_t v16 = 1;
    *(unsigned char *)(a1 + 4) = 1;
  }
  else
  {
    uint64_t v16 = v203 | v39;
    if (!a1) {
      goto LABEL_93;
    }
  }
  *(unsigned char *)(a1 + 14) = v27;
  *(unsigned char *)(a1 + 15) = v36;
LABEL_93:
  uint64_t v50 = v208;
  if (!v208[32])
  {
    if (a3)
    {
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
    }
    goto LABEL_154;
  }
  unsigned int v204 = v16;
  if (a3)
  {
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_DWORD *)a3 = 32;
    *(_WORD *)(a3 + 11) = 1029;
    *(unsigned char *)(a3 + 13) = 4;
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  int v54 = 0;
  uint64_t v55 = *((void *)v11 + 71);
  uint64_t v56 = *(void **)(v55 + 56);
  uint64_t v57 = *(void *)(v55 + 328);
  do
  {
    if (*(unsigned char *)(v56[2036] + v51) || *(unsigned char *)(v57 + 123 + v51))
    {
      ++v53;
      v52 |= 1 << v51;
    }
    else if (!*(unsigned char *)(v56[1401] + v51))
    {
      ++v54;
    }
    ++v51;
  }
  while (v51 != 24);
  if (a3)
  {
    *(void *)(a3 + 168) = v52;
    if (v53 + v54 > 20)
    {
      BOOL v58 = 0;
    }
    else
    {
      BOOL v58 = 1;
      *(unsigned char *)(a3 + 6) = 1;
    }
  }
  else
  {
    BOOL v58 = v53 + v54 < 21;
  }
  LOBYTE(v217[0]) = v53;
  uint64_t v59 = *(void *)(v55 + 48);
  if (*(unsigned char *)(v59 + 5) && *(int *)v59 >= 3) {
    uint64_t v60 = ((int)*(double *)(v59 + 24) + 604800 * *(__int16 *)(v59 + 16));
  }
  else {
    uint64_t v60 = 0;
  }
  if (*(_DWORD *)v55 != 11)
  {
    int v61 = *(_DWORD *)(*(void *)(v55 + 80) + 36);
    uint64_t v62 = 274877907
        * (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v61);
    uint64_t v60 = (v62 >> 38) + ((unint64_t)v62 >> 63) + v60;
  }
  uint64_t v63 = 0;
  int v64 = 0;
  uint64_t v65 = v57 + 99;
  do
  {
    if (*(unsigned char *)(v56[2034] + v63))
    {
      ++v64;
    }
    else if (*(unsigned char *)(v65 + v63))
    {
      memset(v218, 0, 62);
      v64 += Core_Get_GLON_Eph((v63 + 1), v60, v218);
    }
    ++v63;
  }
  while (v63 != 24);
  if (a3 && ((v64 > 5) & ~v58) == 0)
  {
    int v66 = 1;
    *(unsigned char *)(a3 + 7) = 1;
    LOBYTE(v215) = v64;
    goto LABEL_128;
  }
  int v66 = !((v64 > 5) & ~v58) || v58;
  LOBYTE(v215) = v64;
  if (a3)
  {
LABEL_128:
    uint64_t v67 = a5;
    unsigned __int8 v68 = 0;
    for (int i = 1; i != 25; ++i)
    {
      memset(v218, 0, 62);
      BOOL GLON_Eph = Core_Get_GLON_Eph(i, v60, v218);
      char v71 = DWORD2(v218[0]) != 2139062143 && GLON_Eph;
      v68 += v71;
    }
    if (v68 <= 5u) {
      *(unsigned char *)(a3 + 9) = 1;
    }
    a5 = v67;
    a4 = v209;
    if (v66)
    {
      *(_WORD *)(a3 + 4) = 257;
      *(unsigned char *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 10) = 1;
    }
    uint64_t v72 = p_api;
    uint64_t v73 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v73 + 5) && *(int *)v73 >= 1)
    {
      __int16 v74 = *(_WORD *)(v73 + 68);
      *(_WORD *)(a3 + 14) = v74;
      int v75 = (int)*(double *)(v73 + 72) / 3600;
      *(unsigned char *)(a3 + 16) = v75 + 2;
      if ((v75 + 2) >= 0xA8u)
      {
        *(_WORD *)(a3 + 14) = v74 + 1;
        *(unsigned char *)(a3 + 16) = v75 + 90;
      }
      *(_WORD *)(a3 + 17) = 1;
      uint64_t v76 = *(void *)(v72 + 40);
      unsigned int v77 = (unsigned __int8 *)(v76 + 6132);
      if (*(unsigned char *)(v76 + 6132))
      {
        unint64_t v78 = 0;
        uint64_t v79 = v76 + 4174;
        do
        {
          LODWORD(v218[0]) = 0;
          unsigned int v80 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v79 + 2 * v78) - 1), v218);
          if (LODWORD(v218[0]) == 2 && (v80 & 0x80000000) == 0 && *(unsigned char *)(v56[2034] + v80))
          {
            char v81 = BYTE2(v56[8 * (unint64_t)v80 + 1406]);
            uint64_t v82 = *(unsigned __int8 *)(a3 + 18);
            *(unsigned char *)(a3 + v82 + 19) = v80;
            *(_WORD *)(a3 + 2 * v82 + 68) = ((v81 & 0x7F) - 1);
            *(unsigned char *)(a3 + 18) = v82 + 1;
          }
          ++v78;
        }
        while (v78 < *v77);
      }
      a4 = v209;
    }
  }
  if (a1 && v66)
  {
    uint64_t v16 = 1;
    *(unsigned char *)(a1 + 5) = 1;
    uint64_t v7 = a7;
    uint64_t v11 = g_Crc32_RemTable + 920;
    uint64_t v50 = v208;
  }
  else
  {
    uint64_t v16 = v66 | v204;
    uint64_t v7 = a7;
    uint64_t v11 = &g_Crc32_RemTable[230];
    uint64_t v50 = v208;
    if (!a1) {
      goto LABEL_154;
    }
  }
  *(unsigned char *)(a1 + 17) = v53;
  *(unsigned char *)(a1 + 18) = v64;
LABEL_154:
  if (!v50[36])
  {
    if (v7)
    {
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
    }
    goto LABEL_211;
  }
  unsigned int v205 = v16;
  if (v7)
  {
    *(_OWORD *)(v7 + 144) = 0u;
    *(_OWORD *)(v7 + 160) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_DWORD *)uint64_t v7 = 2;
    *(_WORD *)(v7 + 11) = 257;
    *(unsigned char *)(v7 + 13) = 1;
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  int v85 = 0;
  int v86 = 0;
  uint64_t v87 = *((void *)v11 + 71);
  signed int v88 = *(void **)(v87 + 56);
  uint64_t v89 = *(void *)(v87 + 328);
  do
  {
    if (*(unsigned char *)(v88[2078] + v83) || *(unsigned char *)(v89 + 186 + v83))
    {
      ++v85;
      v84 |= 1 << v83;
    }
    else if (!*(unsigned char *)(v88[2070] + v83))
    {
      ++v86;
    }
    ++v83;
  }
  while (v83 != 36);
  if (v7)
  {
    *(void *)(v7 + 168) = v84;
    if (v85 + v86 > 23)
    {
      BOOL v90 = 0;
    }
    else
    {
      BOOL v90 = 1;
      *(unsigned char *)(v7 + 6) = 1;
    }
  }
  else
  {
    BOOL v90 = v85 + v86 < 24;
  }
  LOBYTE(v217[0]) = v85;
  uint64_t v91 = *(void *)(v87 + 48);
  if (*(unsigned char *)(v91 + 5) && *(int *)v91 >= 3) {
    uint64_t v92 = ((int)*(double *)(v91 + 24) + 604800 * *(__int16 *)(v91 + 16));
  }
  else {
    uint64_t v92 = 0;
  }
  if (*(_DWORD *)v87 != 11)
  {
    int v93 = *(_DWORD *)(*(void *)(v87 + 80) + 36);
    uint64_t v94 = 274877907
        * (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v93);
    uint64_t v92 = (v94 >> 38) + ((unint64_t)v94 >> 63) + v92;
  }
  uint64_t v95 = 0;
  int v96 = 0;
  uint64_t v97 = v89 + 150;
  do
  {
    if (*(unsigned char *)(v88[2076] + v95))
    {
      ++v96;
    }
    else if (*(unsigned char *)(v97 + v95))
    {
      memset(v218, 0, 87);
      v96 += Core_Get_GAL_Eph((v95 + 1), v92, (uint64_t)v218);
    }
    ++v95;
  }
  while (v95 != 36);
  uint64_t v7 = a7;
  if (a7 && ((v96 > 7) & ~v90) == 0)
  {
    *(unsigned char *)(a7 + 7) = 1;
    LOBYTE(v215) = v96;
    uint64_t v11 = g_Crc32_RemTable + 920;
LABEL_191:
    *(_WORD *)(a7 + 4) = 257;
    *(_WORD *)(a7 + 8) = 0;
    int v98 = 1;
    *(unsigned char *)(a7 + 10) = 1;
    goto LABEL_192;
  }
  int v98 = !((v96 > 7) & ~v90) || v90;
  LOBYTE(v215) = v96;
  if (!a7)
  {
LABEL_205:
    uint64_t v11 = &g_Crc32_RemTable[230];
    goto LABEL_206;
  }
  uint64_t v11 = &g_Crc32_RemTable[230];
  if (v98) {
    goto LABEL_191;
  }
LABEL_192:
  uint64_t v99 = *((void *)v11 + 71);
  uint64_t v100 = *(void *)(v99 + 48);
  if (!*(unsigned char *)(v100 + 5)) {
    goto LABEL_206;
  }
  if (*(int *)v100 < 1) {
    goto LABEL_206;
  }
  int v101 = *(__int16 *)(v100 + 16);
  if (v101 < 1024) {
    goto LABEL_206;
  }
  *(_WORD *)(a7 + 14) = v101 - 1024;
  int v102 = (int)*(double *)(v100 + 24) / 3600;
  *(unsigned char *)(a7 + 16) = v102 + 2;
  if ((v102 + 2) >= 0xA8u)
  {
    *(_WORD *)(a7 + 14) = v101 - 1023;
    *(unsigned char *)(a7 + 16) = v102 + 90;
  }
  *(_WORD *)(a7 + 17) = 3;
  uint64_t v103 = *(void *)(v99 + 40);
  unsigned int v104 = (unsigned __int8 *)(v103 + 6132);
  if (*(unsigned char *)(v103 + 6132))
  {
    unint64_t v105 = 0;
    uint64_t v106 = v103 + 4174;
    do
    {
      LODWORD(v218[0]) = 0;
      unsigned int v107 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v106 + 2 * v105) - 1), v218);
      if (LODWORD(v218[0]) == 3 && (v107 & 0x80000000) == 0 && *(unsigned char *)(v88[2076] + v107))
      {
        uint64_t v108 = *(unsigned __int8 *)(a7 + 18);
        *(unsigned char *)(a7 + v108 + 19) = v107;
        *(_WORD *)(a7 + 2 * v108 + 68) = v88[11 * v107 + 2094];
        *(unsigned char *)(a7 + 18) = v108 + 1;
      }
      ++v105;
    }
    while (v105 < *v104);
    a4 = v209;
    uint64_t v7 = a7;
    goto LABEL_205;
  }
  a4 = v209;
LABEL_206:
  uint64_t v50 = v208;
  if (a1 && v98)
  {
    uint64_t v16 = 1;
    *(unsigned char *)(a1 + 9) = 1;
  }
  else
  {
    uint64_t v16 = v98 | v205;
    if (!a1) {
      goto LABEL_211;
    }
  }
  *(unsigned char *)(a1 + 29) = v85;
  *(unsigned char *)(a1 + 30) = v96;
LABEL_211:
  if (!v50[35])
  {
    if (a6)
    {
      *(_OWORD *)(a6 + 144) = 0u;
      *(_OWORD *)(a6 + 160) = 0u;
      *(_OWORD *)(a6 + 112) = 0u;
      *(_OWORD *)(a6 + 128) = 0u;
      *(_OWORD *)(a6 + 80) = 0u;
      *(_OWORD *)(a6 + 96) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)(a6 + 64) = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)a6 = 0u;
    }
    goto LABEL_268;
  }
  unsigned int v206 = v16;
  if (a6)
  {
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_DWORD *)a6 = 64;
    *(_WORD *)(a6 + 11) = 1543;
    *(unsigned char *)(a6 + 13) = 6;
  }
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  int v111 = 0;
  int v112 = 0;
  uint64_t v113 = *((void *)v11 + 71);
  uint64_t v114 = *(void **)(v113 + 56);
  uint64_t v115 = *(void *)(v113 + 328);
  do
  {
    if (*(unsigned char *)(v114[3060] + v109) || *(unsigned char *)(v115 + 260 + v109))
    {
      ++v111;
      v110 |= 1 << v109;
    }
    else if (!*(unsigned char *)(v114[3052] + v109))
    {
      ++v112;
    }
    ++v109;
  }
  while (v109 != 37);
  if (a6)
  {
    *(void *)(a6 + 168) = v110;
    if (v111 + v112 > 23)
    {
      BOOL v116 = 0;
    }
    else
    {
      BOOL v116 = 1;
      *(unsigned char *)(a6 + 6) = 1;
    }
  }
  else
  {
    BOOL v116 = v111 + v112 < 24;
  }
  LOBYTE(v217[0]) = v111;
  uint64_t v117 = *(void *)(v113 + 48);
  if (*(unsigned char *)(v117 + 5) && *(int *)v117 >= 3) {
    uint64_t v118 = ((int)*(double *)(v117 + 24) + 604800 * *(__int16 *)(v117 + 16));
  }
  else {
    uint64_t v118 = 0;
  }
  if (*(_DWORD *)v113 != 11)
  {
    int v119 = *(_DWORD *)(*(void *)(v113 + 80) + 36);
    uint64_t v120 = 274877907
         * (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v119);
    uint64_t v118 = (v120 >> 38) + ((unint64_t)v120 >> 63) + v118;
  }
  uint64_t v121 = 0;
  int v122 = 0;
  uint64_t v123 = v115 + 223;
  do
  {
    if (*(unsigned char *)(v114[3058] + v121))
    {
      ++v122;
    }
    else if (*(unsigned char *)(v123 + v121))
    {
      LODWORD(v218[6]) = 0;
      memset(v218, 0, 23);
      memset((char *)&v218[1] + 8, 0, 64);
      *(void *)((char *)&v218[5] + 6) = 0;
      v122 += Core_Get_BDS_Eph((v121 + 1), v118, (uint64_t)v218);
    }
    ++v121;
  }
  while (v121 != 37);
  uint64_t v124 = a6;
  if (a6 && ((v122 > 7) & ~v116) == 0)
  {
    *(unsigned char *)(a6 + 7) = 1;
    LOBYTE(v215) = v122;
    a4 = v209;
    uint64_t v7 = a7;
    uint64_t v11 = g_Crc32_RemTable + 920;
LABEL_248:
    *(_WORD *)(v124 + 4) = 257;
    *(_WORD *)(v124 + 8) = 0;
    int v125 = 1;
    *(unsigned char *)(v124 + 10) = 1;
    goto LABEL_249;
  }
  int v125 = !((v122 > 7) & ~v116) || v116;
  LOBYTE(v215) = v122;
  a4 = v209;
  uint64_t v7 = a7;
  if (!a6)
  {
LABEL_262:
    uint64_t v11 = &g_Crc32_RemTable[230];
    goto LABEL_263;
  }
  uint64_t v11 = &g_Crc32_RemTable[230];
  if (v125)
  {
    uint64_t v124 = a6;
    goto LABEL_248;
  }
LABEL_249:
  uint64_t v126 = *((void *)v11 + 71);
  uint64_t v127 = *(void *)(v126 + 48);
  if (!*(unsigned char *)(v127 + 5)) {
    goto LABEL_263;
  }
  if (*(int *)v127 < 1) {
    goto LABEL_263;
  }
  int v128 = *(__int16 *)(v127 + 16);
  if (v128 < 1356) {
    goto LABEL_263;
  }
  *(_WORD *)(a6 + 14) = v128 - 1356;
  int v129 = (int)*(double *)(v127 + 24) / 3600;
  *(unsigned char *)(a6 + 16) = v129 + 2;
  if ((v129 + 2) >= 0xA8u)
  {
    *(_WORD *)(a6 + 14) = v128 - 1355;
    *(unsigned char *)(a6 + 16) = v129 + 90;
  }
  *(_WORD *)(a6 + 17) = 3;
  uint64_t v130 = *(void *)(v126 + 40);
  unsigned int v131 = (unsigned __int8 *)(v130 + 6132);
  if (*(unsigned char *)(v130 + 6132))
  {
    unint64_t v132 = 0;
    uint64_t v133 = v130 + 4174;
    do
    {
      LODWORD(v218[0]) = 0;
      unsigned int v134 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v133 + 2 * v132) - 1), v218);
      if (LODWORD(v218[0]) == 4 && (v134 & 0x80000000) == 0 && *(unsigned char *)(v114[3058] + v134))
      {
        uint64_t v135 = *(unsigned __int8 *)(a6 + 18);
        *(unsigned char *)(a6 + v135 + 19) = v134;
        *(_WORD *)(a6 + 2 * v135 + 68) = *((_DWORD *)v114 + 25 * v134 + 6132) / 0xE10u;
        *(unsigned char *)(a6 + 18) = v135 + 1;
      }
      ++v132;
    }
    while (v132 < *v131);
    a4 = v209;
    uint64_t v7 = a7;
    goto LABEL_262;
  }
  a4 = v209;
  uint64_t v7 = a7;
LABEL_263:
  uint64_t v50 = v208;
  if (a1 && v125)
  {
    uint64_t v16 = 1;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    uint64_t v16 = v125 | v206;
    if (!a1) {
      goto LABEL_268;
    }
  }
  *(unsigned char *)(a1 + 26) = v111;
  *(unsigned char *)(a1 + 27) = v122;
LABEL_268:
  if (!v50[33])
  {
    __int16 v143 = v200;
    if (a4)
    {
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 160) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
    }
    goto LABEL_319;
  }
  if (a4)
  {
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_DWORD *)a4 = 16;
    *(_WORD *)(a4 + 11) = 514;
    *(unsigned char *)(a4 + 13) = 2;
  }
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  int v138 = 0;
  uint64_t v139 = *((void *)v11 + 71);
  uint64_t v140 = *(void *)(v139 + 56);
  uint64_t v141 = *(void *)(v139 + 328);
  do
  {
    if (*(unsigned char *)(*(void *)(v140 + 8568) + v136) || *(unsigned char *)(v141 + 89 + v136))
    {
      ++v138;
      v137 |= 1 << v136;
    }
    ++v136;
  }
  while (v136 != 10);
  unsigned int v207 = v16;
  if (a4)
  {
    *(void *)(a4 + 168) = v137;
    if (v138 <= 0)
    {
      BOOL v142 = 1;
      *(unsigned char *)(a4 + 6) = 1;
    }
    else
    {
      BOOL v142 = 0;
    }
  }
  else
  {
    BOOL v142 = v138 < 1;
  }
  LOBYTE(v217[0]) = v138;
  uint64_t v144 = *(void *)(v139 + 48);
  if (*(unsigned char *)(v144 + 5) && *(int *)v144 >= 3) {
    uint64_t v145 = ((int)*(double *)(v144 + 24) + 604800 * *(__int16 *)(v144 + 16));
  }
  else {
    uint64_t v145 = 0;
  }
  if (*(_DWORD *)v139 != 11)
  {
    int v146 = *(_DWORD *)(*(void *)(v139 + 80) + 36);
    uint64_t v147 = 274877907
         * (int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v146);
    uint64_t v145 = (v147 >> 38) + ((unint64_t)v147 >> 63) + v145;
  }
  uint64_t v148 = 0;
  int v149 = 0;
  uint64_t v150 = v141 + 79;
  uint64_t v11 = &g_Crc32_RemTable[230];
  do
  {
    if (*(unsigned char *)(*(void *)(v140 + 8552) + v148))
    {
      ++v149;
    }
    else if (*(unsigned char *)(v150 + v148))
    {
      memset(v218, 0, 108);
      v149 += Core_Get_QZSS_Eph((v148 - 63), v145, (int *)v218);
    }
    ++v148;
  }
  while (v148 != 10);
  a4 = v209;
  if (v209 && ((v149 > 1) & ~v142) == 0)
  {
    *(unsigned char *)(v209 + 7) = 1;
    LOBYTE(v215) = v149;
    uint64_t v7 = a7;
    goto LABEL_300;
  }
  int v151 = !((v149 > 1) & ~v142) || v142;
  LOBYTE(v215) = v149;
  uint64_t v7 = a7;
  if (v209)
  {
    if (!v151)
    {
LABEL_301:
      uint64_t v152 = p_api;
      uint64_t v153 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v153 + 5) && *(int *)v153 >= 1)
      {
        __int16 v154 = *(_WORD *)(v153 + 16);
        *(_WORD *)(v209 + 14) = v154;
        int v155 = (int)*(double *)(v153 + 24) / 3600;
        *(unsigned char *)(v209 + 16) = v155 + 2;
        if ((v155 + 2) >= 0xA8u)
        {
          *(_WORD *)(v209 + 14) = v154 + 1;
          *(unsigned char *)(v209 + 16) = v155 + 90;
        }
        *(_WORD *)(v209 + 17) = 3;
        uint64_t v156 = *(void *)(v152 + 40);
        uint64_t v157 = (unsigned __int8 *)(v156 + 6132);
        if (*(unsigned char *)(v156 + 6132))
        {
          unint64_t v158 = 0;
          uint64_t v159 = v156 + 4174;
          do
          {
            LODWORD(v218[0]) = 0;
            unsigned int v160 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(v159 + 2 * v158) - 1), v218);
            if (LODWORD(v218[0]) == 5 && (v160 & 0x80000000) == 0 && *(unsigned char *)(*(void *)(v140 + 8552) + v160))
            {
              uint64_t v161 = *(unsigned __int8 *)(v209 + 18);
              *(unsigned char *)(v209 + v161 + 19) = v160;
              *(_WORD *)(v209 + 2 * v161 + 68) = *(unsigned __int8 *)(v140 + 108 * v160 + 8650);
              *(unsigned char *)(v209 + 18) = v161 + 1;
            }
            ++v158;
          }
          while (v158 < *v157);
          a4 = v209;
          uint64_t v7 = a7;
          uint64_t v11 = g_Crc32_RemTable + 920;
        }
        else
        {
          uint64_t v7 = a7;
        }
      }
      goto LABEL_314;
    }
LABEL_300:
    *(_WORD *)(v209 + 4) = 257;
    *(_WORD *)(v209 + 8) = 0;
    *(unsigned char *)(v209 + 10) = 0;
    int v151 = 1;
    goto LABEL_301;
  }
LABEL_314:
  uint64_t v50 = v208;
  if (a1 && v151)
  {
    uint64_t v16 = 1;
    *(unsigned char *)(a1 + 6) = 1;
  }
  else
  {
    uint64_t v16 = v151 | v207;
    if (!a1)
    {
      int v162 = v208 + 34;
      if (v208[34])
      {
        API_Get_GNSS_Assist_Req_SBAS(v217, &v215, a5);
        uint64_t v16 = 1;
        __int16 v143 = v200;
        goto LABEL_328;
      }
      __int16 v143 = v200;
      goto LABEL_326;
    }
  }
  *(unsigned char *)(a1 + 20) = v138;
  *(unsigned char *)(a1 + 21) = v149;
  __int16 v143 = v200;
LABEL_319:
  int v162 = v50 + 34;
  if (!v50[34])
  {
LABEL_326:
    if (a5)
    {
      *(_OWORD *)(a5 + 144) = 0u;
      *(_OWORD *)(a5 + 160) = 0u;
      *(_OWORD *)(a5 + 112) = 0u;
      *(_OWORD *)(a5 + 128) = 0u;
      *(_OWORD *)(a5 + 80) = 0u;
      *(_OWORD *)(a5 + 96) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)a5 = 0u;
    }
    goto LABEL_328;
  }
  API_Get_GNSS_Assist_Req_SBAS(v217, &v215, a5);
  uint64_t v16 = 1;
  if (a1)
  {
    *(unsigned char *)(a1 + 7) = 1;
    *(unsigned char *)(a1 + 23) = LOBYTE(v217[0]);
    *(unsigned char *)(a1 + 24) = v215;
    if (!v143[297]) {
      goto LABEL_337;
    }
LABEL_330:
    int v163 = v143 + 17664;
    uint64_t v164 = *((void *)v11 + 71);
    uint64_t v165 = *(void *)(v164 + 48);
    if (*(unsigned char *)(v165 + 5) && *(int *)v165 >= 3)
    {
      uint64_t v166 = v16;
      int v167 = (int)*(double *)(v165 + 24) + 604800 * *(__int16 *)(v165 + 16);
    }
    else
    {
      uint64_t v166 = v16;
      int v167 = 0;
    }
    int v168 = 1000 * (v167 % 604800);
    int64x2_t v169 = *(int **)(v164 + 8);
    int v170 = *v169;
    if (*v169)
    {
      uint64_t v171 = a5;
      int v172 = v169[4];
      uint64_t v173 = mach_continuous_time();
      int v174 = v170 - v172;
      a5 = v171;
      a4 = v209;
      int v175 = v174 + (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v173);
    }
    else
    {
      int v175 = 0;
    }
    uint64_t v16 = v166;
    int v176 = v175 - *(_DWORD *)(v198 + 8);
    BOOL v177 = __OFADD__(v176, v168);
    int v178 = v176 + v168;
    int v179 = v178 + 604800000;
    if (v178 < 0 == v177) {
      int v179 = v178;
    }
    if (v178 <= 604800000) {
      int v180 = v179;
    }
    else {
      int v180 = v178 - 604800000;
    }
    if ((v180 - *(_DWORD *)v163 + 14999) <= 0xAFC6)
    {
      uint64_t v181 = v163[8];
      if (v163[8])
      {
        unsigned __int8 v182 = 0;
        unsigned __int8 v183 = 0;
        unsigned __int8 v184 = 0;
        unsigned __int8 v185 = 0;
        unsigned __int8 v186 = 0;
        unsigned __int8 v187 = 0;
        unsigned __int8 v188 = 0;
        long long v189 = v163 + 14;
        do
        {
          switch(*(v189 - 2))
          {
            case 1u:
              ++v188;
              break;
            case 2u:
              ++v187;
              uint64_t v190 = *v189 - 1;
              if (*(_DWORD *)(*(void *)(*((void *)v11 + 71) + 56) + 4 * v190 + 16336) != 2139062143
                || v200[148] && v200[v190 + 17640] != 127)
              {
                ++v182;
              }
              break;
            case 3u:
              ++v183;
              break;
            case 4u:
              ++v184;
              break;
            case 5u:
              ++v186;
              break;
            case 6u:
              ++v185;
              break;
            default:
              break;
          }
          v189 += 28;
          --v181;
        }
        while (v181);
      }
      else
      {
        unsigned __int8 v188 = 0;
        unsigned __int8 v187 = 0;
        unsigned __int8 v186 = 0;
        unsigned __int8 v185 = 0;
        unsigned __int8 v184 = 0;
        unsigned __int8 v183 = 0;
        unsigned __int8 v182 = 0;
      }
      *(unsigned char *)(a1 + 16) = v188;
      *(unsigned char *)(a1 + 19) = v187;
      *(unsigned char *)(a1 + 22) = v186;
      *(unsigned char *)(a1 + 25) = v185;
      *(unsigned char *)(a1 + 28) = v184;
      *(unsigned char *)(a1 + 31) = v183;
      if (v208[31]) {
        BOOL v191 = v188 >= 0x10u;
      }
      else {
        BOOL v191 = 1;
      }
      if (!v191 || v208[32] && v187 < 0xEu || v208[33] && v186 < 0xAu || *v162 && v185 < 6u || v208[35] && v184 < 0x12u)
      {
        char v192 = 1;
      }
      else
      {
        if (v208[36]) {
          BOOL v197 = v183 >= 0x12u;
        }
        else {
          BOOL v197 = 1;
        }
        char v192 = !v197;
      }
      *(unsigned char *)(a1 + 3) = v192;
      if (a3 && *(unsigned char *)(a3 + 9) && v182 >= 6u && v187 == v182) {
        *(unsigned char *)(a3 + 9) = 0;
      }
    }
    goto LABEL_379;
  }
LABEL_328:
  if (v143[297])
  {
    if (!a1) {
      goto LABEL_379;
    }
    goto LABEL_330;
  }
  if (a1) {
LABEL_337:
  }
    *(unsigned char *)(a1 + 3) = 1;
LABEL_379:
  if (**((_DWORD **)v11 + 71) != 11)
  {
    int v193 = *(_DWORD *)(v199 + 36);
    int v194 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v193;
    if (v194 >= 1800001)
    {
      if (a1)
      {
        *(_WORD *)(a1 + 10) = 0;
        if (a2) {
          *(unsigned char *)(a2 + 7) = 1;
        }
        if (a3) {
          *(unsigned char *)(a3 + 7) = 1;
        }
        if (v7) {
          *(unsigned char *)(v7 + 7) = 1;
        }
        if (a6) {
          *(unsigned char *)(a6 + 7) = 1;
        }
        if (a4) {
          *(unsigned char *)(a4 + 7) = 1;
        }
        if (a5) {
          *(unsigned char *)(a5 + 7) = 1;
        }
        if (v194 <= 0xDBBA00)
        {
          int v195 = 14400000 - v194;
          *(unsigned char *)(a1 + 15) = v195 * *(unsigned __int8 *)(a1 + 15) / 14400000;
          *(unsigned char *)(a1 + 18) = v195 * *(unsigned __int8 *)(a1 + 18) / 14400000;
          *(unsigned char *)(a1 + 30) = v195 * *(unsigned __int8 *)(a1 + 30) / 14400000;
          *(unsigned char *)(a1 + 27) = v195 * *(unsigned __int8 *)(a1 + 27) / 14400000;
          *(unsigned char *)(a1 + 21) = v195 * *(unsigned __int8 *)(a1 + 21) / 14400000;
          *(unsigned char *)(a1 + 24) = v195 * *(unsigned __int8 *)(a1 + 24) / 14400000;
          uint64_t v16 = 1;
        }
        else
        {
          *(unsigned char *)(a1 + 15) = 0;
          *(unsigned char *)(a1 + 18) = 0;
          *(unsigned char *)(a1 + 30) = 0;
          *(unsigned char *)(a1 + 27) = 0;
          *(unsigned char *)(a1 + 21) = 0;
          uint64_t v16 = 1;
          *(unsigned char *)(a1 + 24) = 0;
        }
        goto LABEL_398;
      }
      return 1;
    }
  }
LABEL_398:
  if (a1 && v16) {
    *(_DWORD *)a1 = 16843009;
  }
  return v16;
}

unsigned char *API_Get_GNSS_Assist_Req_SBAS(unsigned char *result, unsigned char *a2, uint64_t a3)
{
  if (a3)
  {
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 168) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)a3 = 4;
    *(_WORD *)(a3 + 11) = 1286;
    *(unsigned char *)(a3 + 13) = 5;
    *(unsigned char *)(a3 + 6) = 1;
  }
  *uint64_t result = 0;
  if (*(_DWORD *)p_api != 11) {
    uint64_t result = (unsigned char *)mach_continuous_time();
  }
  if (a3)
  {
    *(unsigned char *)(a3 + 7) = 1;
    *a2 = 0;
    *(_WORD *)(a3 + 4) = 257;
    *(_WORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 10) = 0;
    uint64_t v5 = *(void *)(p_api + 48);
    if (*(unsigned char *)(v5 + 5) && *(int *)v5 >= 1)
    {
      __int16 v6 = *(_WORD *)(v5 + 16);
      *(_WORD *)(a3 + 14) = v6;
      int v7 = ((int)*(double *)(v5 + 24) + 1800) / 3600;
      *(unsigned char *)(a3 + 16) = v7;
      if ((v7 & 0xF8u) >= 0xA8)
      {
        *(_WORD *)(a3 + 14) = v6 + 1;
        *(unsigned char *)(a3 + 16) = v7 + 88;
      }
      *(_WORD *)(a3 + 17) = 0;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t API_Set_GPS_CBinEph(char *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = Is_GN_API_Set_Allowed(a1);
  if (result)
  {
    unsigned __int8 v8 = a2 - 1;
    if (((a2 - 1) & 0xE0) != 0) {
      unsigned __int8 v8 = 0;
    }
    if ((a2 + 63) >= 0xAu) {
      int v9 = (a2 - 1) < 0x20;
    }
    else {
      int v9 = 5;
    }
    if ((a2 + 63) >= 0xAu) {
      unsigned __int8 v10 = v8;
    }
    else {
      unsigned __int8 v10 = a2 + 63;
    }
    if (v9)
    {
      uint64_t v11 = *(void *)(p_api + 328);
      if ((unsigned __int16)g_Enable_Event_Log >= 3u) {
        EvLog_nd(a1, 2, v7, a2, *a3);
      }
      uint64_t result = 1;
      uint64_t v12 = v11 + 72 * v10;
      if (v9 == 5)
      {
        *(_OWORD *)(v12 + 4304) = *(_OWORD *)a3;
        long long v16 = *((_OWORD *)a3 + 1);
        long long v17 = *((_OWORD *)a3 + 2);
        long long v18 = *((_OWORD *)a3 + 3);
        *(void *)(v12 + 4368) = *((void *)a3 + 8);
        *(_OWORD *)(v12 + 4352) = v18;
        *(_OWORD *)(v12 + 4336) = v17;
        *(_OWORD *)(v12 + 4320) = v16;
        *(unsigned char *)(v11 + v10 + 79) = 1;
      }
      else
      {
        *(_OWORD *)(v12 + 848) = *(_OWORD *)a3;
        long long v13 = *((_OWORD *)a3 + 1);
        long long v14 = *((_OWORD *)a3 + 2);
        long long v15 = *((_OWORD *)a3 + 3);
        *(void *)(v12 + 912) = *((void *)a3 + 8);
        *(_OWORD *)(v12 + 880) = v14;
        *(_OWORD *)(v12 + 896) = v15;
        *(_OWORD *)(v12 + 864) = v13;
        *(unsigned char *)(v11 + v10 + 15) = 1;
      }
    }
    else
    {
      EvCrt_v("%s FAILED:  SV = %d, Out of range !", a1, a2);
      return 0;
    }
  }
  return result;
}

uint64_t API_Set_Ref_Time(int a1, double i, __int16 a3, double a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)p_api;
  if (*(_DWORD *)p_api > 0xBu || ((1 << v5) & 0xD2C) == 0)
  {
    EvCrt_d("API_Set_Ref_Time:  REJECTED.  Incompatible GPS Exe State ", v5);
    return 0;
  }
  uint64_t v10 = *(void *)(p_api + 48);
  int v11 = *(_DWORD *)(v10 + 12);
  int v12 = v11 - a1;
  if (v11 - a1 >= 0) {
    unsigned int v13 = v11 - a1;
  }
  else {
    unsigned int v13 = a1 - v11;
  }
  if (v13 >= 0xDBBA1) {
    EvCrt_v("API_Set_Ref_Time:  WARNING  Large Time latency (%u - %u) = %d", a1, *(_DWORD *)(v10 + 12), v11 - a1);
  }
  if (v11 != a1)
  {
    for (int i = (double)v12 * 0.001 + i; i >= 604800.0; ++a3)
      int i = i + -604800.0;
    while (i < 0.0)
    {
      int i = i + 604800.0;
      --a3;
    }
    a4 = a4 + (double)v12 * 0.00000001;
  }
  unsigned int v14 = 8;
  uint64_t v15 = 6;
  while (v15 != -1)
  {
    double v16 = TOW_stat_Promotion_timeRMSms_Table[v15];
    --v14;
    --v15;
    if (a4 <= v16) {
      goto LABEL_22;
    }
  }
  unsigned int v14 = 0;
LABEL_22:
  int v17 = *(_DWORD *)v10;
  if (*(unsigned char *)(v10 + 5)) {
    BOOL v18 = v17 < 1;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if (v17)
    {
      if (!*(unsigned char *)(v10 + 5))
      {
        *(unsigned char *)(v10 + 5) = 1;
        *(_WORD *)(v10 + 16) = a3;
        EvLog_v("API_Set_Ref_Time:  Applied.  GPS Wk %d  ", a3);
        double v42 = 0.0;
        *(void *)int v43 = 0;
        API_Get_UTC_Cor(1, &v42);
        double v29 = v42;
        GPS_To_Glon_Time(0, *(__int16 *)(v10 + 16), *(double *)(v10 + 24), v42, (int *)v43, (int *)&v43[4], (double *)(v10 + 72));
        *(_WORD *)(v10 + 68) = *(_WORD *)&v43[4];
        *(_WORD *)(v10 + 66) = *(_WORD *)v43;
        *(unsigned char *)(v10 + 64) = 1;
        *(_DWORD *)(v10 + 60) = *(_DWORD *)v10;
        double v30 = -0.5;
        if (v29 > 0.0) {
          double v30 = 0.5;
        }
        double v31 = v29 + v30;
        goto LABEL_68;
      }
      int v19 = a3;
      double v20 = 0.0;
      goto LABEL_48;
    }
    uint64_t v22 = p_api;
    double v20 = 0.0;
  }
  else
  {
    double v21 = *(double *)(v10 + 24);
    int v19 = a3;
    double v20 = v21 - i + (double)(604800 * (*(__int16 *)(v10 + 16) - a3));
    if (v14 <= v17 && v20 * v20 <= a4 * (a4 * 25.0)) {
      goto LABEL_48;
    }
    EvLog_v("API_Set_Ref_Time: dT %g,  Sigma %g, (%g-%g), (%d-%d)", v20, a4, v21, i, *(__int16 *)(v10 + 16), a3);
    *(_DWORD *)uint64_t v10 = 0;
    *(_DWORD *)(v10 + 60) = 0;
    uint64_t v22 = p_api;
    *(_DWORD *)(*(void *)(p_api + 168) + 12) = 0;
    uint64_t v23 = *(void *)(v22 + 176);
    *(unsigned char *)(v23 + 128) = 1;
    *(_DWORD *)(v23 + 132) = 5;
  }
  if (*(_DWORD *)v22 == 8 || *(_DWORD *)v22 == 5) {
    *(_DWORD *)uint64_t v22 = 2;
  }
  EvLog_v("API_Set_Ref_Time:  Applied.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, a3, i, a4, v14, v20);
  if (!v14)
  {
    int v19 = a3;
    EvCrt_v("API_Set_Ref_Time:  WARNING: Input Ref_Sigma too big !");
    int v17 = *(_DWORD *)v10;
LABEL_48:
    EvLog_v("API_Set_Ref_Time:  Not Used.  %u  %d  %g  Sigma  %g  %d  dT  %g", a1, v19, i, a4, v17, v20);
    return 0;
  }
  *(unsigned char *)(v10 + 5) = 1;
  *(_WORD *)(v10 + 16) = a3;
  *(double *)(v10 + 24) = i;
  *(_DWORD *)uint64_t v10 = v14;
  *(void *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 84) = a1;
  if (v14 - 4 <= 4)
  {
    double v25 = -0.5;
    if (i * 1000.0 > 0.0) {
      double v25 = 0.5;
    }
    double v26 = i * 1000.0 + v25;
    if (v26 <= 2147483650.0)
    {
      if (v26 >= -2147483650.0) {
        int v27 = (int)v26;
      }
      else {
        int v27 = 0x80000000;
      }
    }
    else
    {
      int v27 = 0x7FFFFFFF;
    }
    int v32 = *(_DWORD *)(v10 + 8);
    int v33 = *(_DWORD *)(v10 + 12);
    int v34 = v27 - v32;
    LODWORD(v42) = 0;
    v43[4] = 0;
    if (Core_Load_TTick_Cal(v32, v33, v27 - v32, (unsigned int *)&v42, &v43[4]))
    {
      int v35 = v43[4];
      int v36 = v43[4] >= 0x5Au ? 6 : 7;
      unsigned int v37 = v43[4] >= 0x1Eu ? v36 : 8;
      if (v37 >= v14)
      {
        int v38 = LODWORD(v42);
        Inc_GPS_TOW((double)SLODWORD(v42) * 0.001, (double *)(v10 + 24), (__int16 *)(v10 + 16));
        *(_DWORD *)uint64_t v10 = v37;
        EvLog_v("API_Set_Ref_Time:  Calib.  %d  %g  %d  %d", v38, *(double *)(v10 + 24), v34, v35);
      }
    }
  }
  double v42 = 0.0;
  *(void *)int v43 = 0;
  API_Get_UTC_Cor(1, &v42);
  double v39 = v42;
  GPS_To_Glon_Time(0, *(__int16 *)(v10 + 16), *(double *)(v10 + 24), v42, (int *)v43, (int *)&v43[4], (double *)(v10 + 72));
  *(_WORD *)(v10 + 68) = *(_WORD *)&v43[4];
  *(_WORD *)(v10 + 66) = *(_WORD *)v43;
  *(unsigned char *)(v10 + 64) = 1;
  *(_DWORD *)(v10 + 60) = *(_DWORD *)v10;
  double v40 = -0.5;
  if (v39 > 0.0) {
    double v40 = 0.5;
  }
  double v31 = v39 + v40;
LABEL_68:
  if (v31 <= 2147483650.0)
  {
    if (v31 >= -2147483650.0) {
      uint64_t v41 = (int)v31;
    }
    else {
      uint64_t v41 = 0x80000000;
    }
  }
  else
  {
    uint64_t v41 = 0x7FFFFFFFLL;
  }
  GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v41, v10, *(void *)(p_api + 96));
  *(_DWORD *)(v10 + 80) = v41;
  EvLog_v("API_Set_Ref_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v10 + 66), *(__int16 *)(v10 + 68), *(unsigned __int8 *)(v10 + 64), *(double *)(v10 + 72), *(_DWORD *)(v10 + 60));
  return 1;
}

char *GLON_Clear_SV_Ref_State_On_LeapSec_Jump(char *result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 80);
  if (v3 >= 1 && v3 != result)
  {
    uint64_t v5 = -4608;
    do
    {
      __int16 v6 = (_OWORD *)(a3 + v5);
      if ((*(_DWORD *)(a3 + v5 + 10936) - 1) <= 1)
      {
        v6[682] = 0uLL;
        v6[681] = 0uLL;
        v6[680] = 0uLL;
        v6[679] = 0uLL;
        v6[678] = 0uLL;
        v6[677] = 0uLL;
        v6[676] = 0uLL;
        v6[675] = 0uLL;
        v6[674] = 0uLL;
        v6[673] = 0uLL;
        v6[672] = 0uLL;
        *(_OWORD *)((char *)v6 + 10924) = 0uLL;
      }
      v5 += 192;
    }
    while (v5);
    return EvLog_v("GLON_Clear_SV_Ref_State_On_LeapSec_Jump: Leap Sec jump [prev_LS: %d curr_LS: %d], Clearing Prev Computed GLON Orbit Ref States", *(_DWORD *)(a2 + 80), result);
  }
  return result;
}

uint64_t API_Set_Ref_UTC_Time(unsigned __int16 *a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v1 = *(_DWORD *)p_api;
  if (*(_DWORD *)p_api > 0xBu || ((1 << v1) & 0xD2C) == 0)
  {
    EvCrt_d("API_Set_Ref_UTC_Time:  REJECTED.  Incompatible GPS Exe State ", v1);
    return 0;
  }
  uint64_t v4 = *(void *)(p_api + 48);
  int v5 = *(_DWORD *)(v4 + 12);
  int v6 = *((_DWORD *)a1 + 5);
  int v7 = v5 - v6;
  if (v5 - v6 >= 0) {
    unsigned int v8 = v5 - v6;
  }
  else {
    unsigned int v8 = v6 - v5;
  }
  if (v8 >= 0xDBBA1) {
    EvLog_v("API_Set_Ref_UTC_Time:  WARNING  Large Time latency (%u - %u) = %d", v6, *(_DWORD *)(v4 + 12), v5 - v6);
  }
  __int16 v46 = 0;
  double v44 = 0.0;
  double v45 = 0.0;
  if (*(unsigned char *)(v4 + 5)) {
    int v9 = 2;
  }
  else {
    int v9 = 3;
  }
  do
  {
    API_Get_UTC_Cor(1, &v44);
    UTC_To_GPS_Time(&v46, &v45, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], v44, a1[6]);
    int v10 = v46;
    *(_WORD *)(v4 + 16) = v46;
    *(unsigned char *)(v4 + 5) = 1;
    --v9;
  }
  while (v9);
  EvLog_v("API_Set_Ref_UTC_Time:  GPS Time  %d  %d  %g", v10, 1, v45);
  LODWORD(v11) = *((_DWORD *)a1 + 4);
  double v12 = (double)v11 * 0.001;
  if (v5 != v6)
  {
    double v13 = (double)v7 * 0.001 + v45;
    double v45 = v13;
    if (v13 >= 604800.0)
    {
      __int16 v14 = v46;
      do
      {
        double v13 = v13 + -604800.0;
        ++v14;
      }
      while (v13 >= 604800.0);
      double v45 = v13;
      __int16 v46 = v14;
    }
    if (v13 < 0.0)
    {
      __int16 v15 = v46;
      do
      {
        double v13 = v13 + 604800.0;
        --v15;
      }
      while (v13 < 0.0);
      double v45 = v13;
      __int16 v46 = v15;
    }
    double v12 = v12 + (double)v7 * 0.00000001;
  }
  unsigned int v16 = 8;
  uint64_t v17 = 6;
  while (v17 != -1)
  {
    double v18 = TOW_stat_Promotion_timeRMSms_Table[v17];
    --v16;
    --v17;
    if (v12 <= v18) {
      goto LABEL_29;
    }
  }
  unsigned int v16 = 0;
LABEL_29:
  int v19 = *(_DWORD *)v4;
  if (*(unsigned char *)(v4 + 5)) {
    BOOL v20 = v19 < 1;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
    double v21 = 0.0;
    if (v19)
    {
LABEL_53:
      EvLog_v("API_Set_Ref_UTC_Time:  Not Used.  %u  %d  %g  Sigma  %g  %d  dT  %g", *((_DWORD *)a1 + 5), v46, v45, v12, v19, v21);
      return 0;
    }
    uint64_t v22 = p_api;
  }
  else
  {
    double v23 = *(double *)(v4 + 24);
    double v21 = v23 - v45 + (double)(604800 * (*(__int16 *)(v4 + 16) - v46));
    if (v16 <= v19 && v21 * v21 <= v12 * (v12 * 25.0)) {
      goto LABEL_53;
    }
    EvLog_v("API_Set_Ref_UTC_Time:  dT %g,  Sigma %g, (%g-%g), (%d-%d)", v21, v12, v23, v45, *(__int16 *)(v4 + 16), v46);
    *(_DWORD *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 60) = 0;
    uint64_t v22 = p_api;
    *(_DWORD *)(*(void *)(p_api + 168) + 12) = 0;
    uint64_t v24 = *(void *)(v22 + 176);
    *(unsigned char *)(v24 + 128) = 1;
    *(_DWORD *)(v24 + 132) = 5;
  }
  if (*(_DWORD *)v22 == 8 || *(_DWORD *)v22 == 5) {
    *(_DWORD *)uint64_t v22 = 2;
  }
  EvLog_v("API_Set_Ref_UTC_Time:  Applied.  %u  %d  %g  Sigma  %g  %d  dT  %g", *((_DWORD *)a1 + 5), v46, v45, v12, v16, v21);
  if (!v16)
  {
    EvLog("API_Set_Ref_UTC_Time:  WARNING: Input Ref_Sigma too big !");
    int v19 = *(_DWORD *)v4;
    goto LABEL_53;
  }
  *(unsigned char *)(v4 + 5) = 1;
  *(_WORD *)(v4 + 16) = v46;
  double v26 = v45;
  *(double *)(v4 + 24) = v45;
  *(_DWORD *)uint64_t v4 = v16;
  *(void *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 84) = *((_DWORD *)a1 + 5);
  if (v16 - 4 <= 4)
  {
    double v27 = v26 * 1000.0;
    double v28 = -0.5;
    if (v27 > 0.0) {
      double v28 = 0.5;
    }
    double v29 = v27 + v28;
    if (v29 <= 2147483650.0)
    {
      if (v29 >= -2147483650.0) {
        int v30 = (int)v29;
      }
      else {
        int v30 = 0x80000000;
      }
    }
    else
    {
      int v30 = 0x7FFFFFFF;
    }
    int v32 = *(_DWORD *)(v4 + 8);
    int v33 = *(_DWORD *)(v4 + 12);
    int v34 = v30 - v32;
    LODWORD(v44) = 0;
    BYTE4(v43) = 0;
    if (Core_Load_TTick_Cal(v32, v33, v30 - v32, (unsigned int *)&v44, (unsigned __int8 *)&v43 + 4))
    {
      int v35 = BYTE4(v43);
      int v36 = BYTE4(v43) >= 0x5Au ? 6 : 7;
      unsigned int v37 = BYTE4(v43) >= 0x1Eu ? v36 : 8;
      if (v37 >= v16)
      {
        int v38 = LODWORD(v44);
        Inc_GPS_TOW((double)SLODWORD(v44) * 0.001, (double *)(v4 + 24), (__int16 *)(v4 + 16));
        *(_DWORD *)uint64_t v4 = v37;
        EvLog_v("API_Set_Ref_UTC_Time:  Calib.  %d  %g  %d  %d", v38, *(double *)(v4 + 24), v34, v35);
      }
    }
  }
  uint64_t v43 = 0;
  double v44 = 0.0;
  API_Get_UTC_Cor(1, &v44);
  double v39 = v44;
  GPS_To_Glon_Time(0, *(__int16 *)(v4 + 16), *(double *)(v4 + 24), v44, (int *)&v43, (int *)&v43 + 1, (double *)(v4 + 72));
  *(_WORD *)(v4 + 68) = WORD2(v43);
  *(_WORD *)(v4 + 66) = v43;
  *(unsigned char *)(v4 + 64) = 1;
  *(_DWORD *)(v4 + 60) = *(_DWORD *)v4;
  double v40 = -0.5;
  if (v39 > 0.0) {
    double v40 = 0.5;
  }
  double v41 = v39 + v40;
  if (v41 <= 2147483650.0)
  {
    if (v41 >= -2147483650.0) {
      uint64_t v42 = (int)v41;
    }
    else {
      uint64_t v42 = 0x80000000;
    }
  }
  else
  {
    uint64_t v42 = 0x7FFFFFFFLL;
  }
  GLON_Clear_SV_Ref_State_On_LeapSec_Jump((char *)v42, v4, *(void *)(p_api + 96));
  *(_DWORD *)(v4 + 80) = v42;
  EvLog_v("API_Set_Ref_UTC_Time:  Glo Time  %d  %d  %d  %g  %d", *(__int16 *)(v4 + 66), *(__int16 *)(v4 + 68), *(unsigned __int8 *)(v4 + 64), *(double *)(v4 + 72), *(_DWORD *)(v4 + 60));
  return 1;
}

uint64_t API_Set_Ref_Glon_Time(int a1, __int16 a2, __int16 a3, double a4, double a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  __int16 v41 = a2;
  __int16 v40 = a3;
  double v39 = a4;
  if (*(_DWORD *)p_api > 0xBu || ((1 << *(_DWORD *)p_api) & 0xD2C) == 0)
  {
    EvCrt_d("API_Set_Ref_Time:  REJECTED.  Incompatible GPS Exe State ", *(_DWORD *)p_api);
    return 0;
  }
  uint64_t v8 = *(void *)(p_api + 48);
  int v9 = *(_DWORD *)(v8 + 12);
  int v10 = v9 - a1;
  if (v9 - a1 >= 0) {
    unsigned int v11 = v9 - a1;
  }
  else {
    unsigned int v11 = a1 - v9;
  }
  if (v11 < 0xDBBA1)
  {
    if (v9 != a1)
    {
      double v12 = (double)v10;
      Inc_Glon_TOD((double)v10 * 0.001, &v39, &v40, (unsigned __int16 *)&v41);
      a5 = a5 + v12 * 0.00000001;
    }
  }
  else
  {
    EvLog_v("API_Set_Ref_Time:  WARNING  Large Time latency (%u - %u) = %d", a1, *(_DWORD *)(v8 + 12), v9 - a1);
  }
  unsigned int v13 = 8;
  uint64_t v14 = 6;
  while (v14 != -1)
  {
    double v15 = TOW_stat_Promotion_timeRMSms_Table[v14];
    --v13;
    --v14;
    if (a5 <= v15) {
      goto LABEL_17;
    }
  }
  unsigned int v13 = 0;
LABEL_17:
  int v16 = *(_DWORD *)(v8 + 60);
  if (*(unsigned char *)(v8 + 64)) {
    BOOL v17 = v16 < 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    int v22 = *(__int16 *)(v8 + 68);
    int v19 = v40;
    int v23 = *(__int16 *)(v8 + 66);
    int v18 = v41;
    double v21 = v39;
    double v20 = *(double *)(v8 + 72) - v39 + (double)(86400 * (v22 - v40 + 1461 * (v23 - v41)));
    if (v13 <= v16 && v20 * v20 <= a5 * 5.0 * (a5 * 5.0)) {
      goto LABEL_27;
    }
    EvLog_v("API_Set_Ref_Glon_Time: dT %g,  Sigma %g,  (%d-%d),  (%d-%d),  (%g-%g),", v20, a5, v23, v41, v22, v40, *(double *)(v8 + 72), v39);
    *(_DWORD *)(v8 + 60) = 0;
    *(_DWORD *)uint64_t v8 = 0;
    uint64_t v25 = p_api;
    *(_DWORD *)(*(void *)(p_api + 168) + 12) = 0;
    uint64_t v26 = *(void *)(v25 + 176);
    *(unsigned char *)(v26 + 128) = 1;
    *(_DWORD *)(v26 + 132) = 5;
    goto LABEL_30;
  }
  if (!v16)
  {
    uint64_t v25 = p_api;
    double v20 = 0.0;
LABEL_30:
    if (*(_DWORD *)v25 == 8 || *(_DWORD *)v25 == 5) {
      *(_DWORD *)uint64_t v25 = 2;
    }
    int v24 = v41;
    int v19 = v40;
    double v21 = v39;
    EvLog_v("API_Set_Ref_Glon_Time:  Applied.  %u  %d  %d  %g  Sigma  %g  %d  dT  %g", a1, v41, v40, v39, a5, v13, v20);
    if (!v13)
    {
      EvLog("API_Set_Ref_Glon_Time:  WARNING: Input Ref_Glon_Sigma too big !");
      goto LABEL_48;
    }
    *(unsigned char *)(v8 + 64) = 1;
    *(_WORD *)(v8 + 66) = v24;
    *(_WORD *)(v8 + 68) = v19;
    *(double *)(v8 + 72) = v21;
    *(_DWORD *)(v8 + 60) = v13;
    *(void *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 84) = a1;
    double v37 = 0.0;
    *(void *)int v38 = 0;
    if (*(unsigned char *)(v8 + 5)) {
      int v28 = 2;
    }
    else {
      int v28 = 3;
    }
    double v29 = (double *)(v8 + 24);
    do
    {
      API_Get_UTC_Cor(1, &v37);
      Glon_To_GPS_Time(*(__int16 *)(v8 + 66), *(__int16 *)(v8 + 68), *(double *)(v8 + 72), v37, &v38[1], v38, (double *)(v8 + 24));
      __int16 v30 = v38[0];
      if (v38[1] >= 1)
      {
        __int16 v30 = LOWORD(v38[0]) + (LOWORD(v38[1]) << 10);
        v38[0] += v38[1] << 10;
        v38[1] = 0;
      }
      *(_WORD *)(v8 + 16) = v30;
      *(unsigned char *)(v8 + 5) = 1;
      int v31 = *(_DWORD *)(v8 + 60);
      *(_DWORD *)uint64_t v8 = v31;
      BOOL v32 = __OFSUB__(v28--, 1);
    }
    while (!((v28 < 0) ^ v32 | (v28 == 0)));
    goto LABEL_45;
  }
  int v18 = v41;
  int v19 = v40;
  if (*(unsigned char *)(v8 + 64))
  {
    double v20 = 0.0;
    double v21 = v39;
LABEL_27:
    int v24 = v18;
LABEL_48:
    EvLog_v("API_Set_Ref_Glon_Time:  Not Used.  %u  %d  %d  %g  Sigma  %g  %d  dT  %g", a1, v24, v19, v21, a5, *(_DWORD *)v8, v20);
    return 0;
  }
  *(unsigned char *)(v8 + 64) = 1;
  *(_WORD *)(v8 + 66) = v18;
  *(_WORD *)(v8 + 68) = v19;
  EvLog_v("API_Set_Ref_Time:  Applied.  Glon Date %d %d", v18, v19);
  double v37 = 0.0;
  *(void *)int v38 = 0;
  if (*(unsigned char *)(v8 + 5)) {
    int v35 = 2;
  }
  else {
    int v35 = 3;
  }
  double v29 = (double *)(v8 + 24);
  do
  {
    API_Get_UTC_Cor(1, &v37);
    Glon_To_GPS_Time(*(__int16 *)(v8 + 66), *(__int16 *)(v8 + 68), *(double *)(v8 + 72), v37, &v38[1], v38, (double *)(v8 + 24));
    __int16 v30 = v38[0];
    if (v38[1] >= 1)
    {
      __int16 v30 = LOWORD(v38[0]) + (LOWORD(v38[1]) << 10);
      v38[0] += v38[1] << 10;
      v38[1] = 0;
    }
    *(_WORD *)(v8 + 16) = v30;
    *(unsigned char *)(v8 + 5) = 1;
    int v31 = *(_DWORD *)(v8 + 60);
    *(_DWORD *)uint64_t v8 = v31;
    BOOL v32 = __OFSUB__(v35--, 1);
  }
  while (!((v35 < 0) ^ v32 | (v35 == 0)));
LABEL_45:
  double v36 = *v29;
  uint64_t v33 = 1;
  EvLog_v("API_Set_Ref_Glon_Time:  GPS Time  %d  %d  %g  %d", v30, 1, v36, v31);
  return v33;
}

BOOL API_Set_GLON_Slot_Num(int a1, int a2)
{
  unsigned int v3 = a1 + 7;
  unsigned int v4 = a2 - 1;
  BOOL result = (a1 + 7) < 0xE && v4 < 0x18;
  if (result)
  {
    uint64_t v7 = *(void *)(p_api + 56);
    uint64_t v8 = v7 + 4 * v3;
    *(_DWORD *)(v8 + 16432) = a2;
    *(_DWORD *)(v8 + 16488) = 3;
    *(_DWORD *)(v7 + 4 * v4 + 16336) = a1;
  }
  return result;
}

char *EvLog_GPS_IntEph(const char *a1, int a2, uint64_t a3)
{
  return EvLog_v("%s  %2d %d %2d %2d %d %3d %d %3d %3d %4d %5d %5d %4d %5d %5d %5d %5d %5d %5d %5d %5d %5d %8d %11d %10u %10u %11d %11d %11d %8d", a1, a2, *(unsigned __int8 *)(a3 + 8), *(unsigned __int8 *)(a3 + 9), *(unsigned __int8 *)(a3 + 10), *(unsigned __int8 *)(a3 + 11), *(unsigned __int8 *)(a3 + 12), *(char *)(a3 + 13), *(char *)(a3 + 14), *(char *)(a3 + 15), *(unsigned __int16 *)(a3 + 16), *(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a3 + 20), *(unsigned __int16 *)(a3 + 22), *(__int16 *)(a3 + 24), *(__int16 *)(a3 + 26), *(__int16 *)(a3 + 28),
           *(__int16 *)(a3 + 30),
           *(__int16 *)(a3 + 32),
           *(__int16 *)(a3 + 34),
           *(__int16 *)(a3 + 36),
           *(__int16 *)(a3 + 38),
           *(__int16 *)(a3 + 40),
           *(_DWORD *)(a3 + 44),
           *(_DWORD *)(a3 + 48),
           *(_DWORD *)(a3 + 52),
           *(_DWORD *)(a3 + 56),
           *(_DWORD *)(a3 + 60),
           *(_DWORD *)(a3 + 64),
           *(_DWORD *)(a3 + 68),
           *(_DWORD *)(a3 + 72));
}

uint64_t Is_GPS_IntEph_Valid(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 + 53) > 0xF5u || (a2 - 33) > 0xDFu)
  {
    if (*(unsigned __int8 *)(a3 + 8) < 4u)
    {
      if (*(unsigned __int8 *)(a3 + 9) < 0x10u)
      {
        if (*(unsigned __int8 *)(a3 + 10) < 0x40u)
        {
          if (*(unsigned __int8 *)(a3 + 11) < 2u)
          {
            if (*(unsigned __int8 *)(a3 + 12) < 0x20u)
            {
              if (*(char *)(a3 + 13) < 2)
              {
                if (*(unsigned __int16 *)(a3 + 16) < 0xBDCu)
                {
                  if (*(unsigned __int16 *)(a3 + 22) < 0x400u)
                  {
                    if ((unsigned __int16)((unsigned __int16)(*(_WORD *)(a3 + 28) - 0x2000) >> 14) > 2u)
                    {
                      if ((*(_DWORD *)(a3 + 44) - 0x200000) >> 22 == 1023)
                      {
                        int v3 = *(_DWORD *)(a3 + 72);
                        if ((v3 - 0x800000) >> 24 == 255)
                        {
                          double v4 = 0.0;
                          if ((a2 + 53) >= 0xF6u) {
                            double v4 = 0.000000314159265;
                          }
                          double v5 = (double)v3 * 3.57157734e-13;
                          if (v5 >= -0.00000198862815)
                          {
                            if (v5 <= v4)
                            {
                              if (*(unsigned __int16 *)(a3 + 20) < 0x93A8u)
                              {
                                if (*(unsigned __int16 *)(a3 + 18) < 0x93A8u)
                                {
                                  LODWORD(v5) = *(_DWORD *)(a3 + 52);
                                  double v6 = (double)*(unint64_t *)&v5 * 1.16415322e-10;
                                  if (v6 >= 0.0)
                                  {
                                    if (v6 <= dbl_22BB0DF50[(a2 + 53) < 0xF6u])
                                    {
                                      LODWORD(v6) = *(_DWORD *)(a3 + 56);
                                      double v7 = (double)*(unint64_t *)&v6 * 0.00000190734863;
                                      if (v7 >= 4800.0)
                                      {
                                        if (v7 <= dbl_22BB0DF60[(a2 + 53) < 0xF6u]) {
                                          return 1;
                                        }
                                        EvCrt_v("%s FAILED: APowerHalf = %g > %g, Unrealistic value!");
                                      }
                                      else
                                      {
                                        EvCrt_v("%s FAILED: APowerHalf = %g < %g, Unrealistic value!");
                                      }
                                    }
                                    else
                                    {
                                      EvCrt_v("%s FAILED: e = %g > %g, Unrealistic value!");
                                    }
                                  }
                                  else
                                  {
                                    EvCrt_v("%s FAILED: e = %g < %g, Unrealistic value!");
                                  }
                                }
                                else
                                {
                                  EvCrt_v("%s FAILED: toc = %d >37800, Out of range!");
                                }
                              }
                              else
                              {
                                EvCrt_v("%s FAILED: toe = %d >=37800, Out of range!");
                              }
                            }
                            else
                            {
                              EvCrt_v("%s FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
                            }
                          }
                          else
                          {
                            EvCrt_v("%s FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
                          }
                        }
                        else
                        {
                          EvCrt_v("%s FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
                        }
                      }
                      else
                      {
                        EvCrt_v("%s FAILED: af0 = %d <-2^21 or >=2^21, Out of range!");
                      }
                    }
                    else
                    {
                      EvCrt_v("%s FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
                    }
                  }
                  else
                  {
                    EvCrt_v("%s FAILED: IODC = %d >1023, Out of range!");
                  }
                }
                else
                {
                  EvCrt_v("%s FAILED: Week = %d >=3036, Out of range!");
                }
              }
              else
              {
                EvCrt_v("%s FAILED: L2Pflag = %d <0 or >1, Out of range!");
              }
            }
            else
            {
              EvCrt_v("%s FAILED: AODA = %d >31, Out of range!");
            }
          }
          else
          {
            EvCrt_v("%s FAILED: FitIntFlag = %d >1, Out of range!");
          }
        }
        else
        {
          EvCrt_v("%s FAILED: SVHealth = %d >63, Out of range!");
        }
      }
      else
      {
        EvCrt_v("%s FAILED: URA = %d >15, Out of range!");
      }
    }
    else
    {
      EvCrt_v("%s FAILED: CodeOnL2 = %d >3, Out of range!");
    }
  }
  else
  {
    EvCrt_v("%s FAILED: Sat_ID = %d, Out of range!");
  }
  return 0;
}

void *EvLog_ABDS_Eph_El(unsigned __int16 *a1)
{
  return EvLog_nd("GN_ABDS_Set_Eph_El: ", 28, (__int16)a1[43], *a1, *((unsigned int *)a1 + 1), *((unsigned int *)a1 + 2), *((unsigned __int8 *)a1 + 12), *((unsigned __int8 *)a1 + 13), *((unsigned __int8 *)a1 + 14), *((unsigned __int8 *)a1 + 15), *((unsigned __int8 *)a1 + 16), *((unsigned int *)a1 + 5), *((unsigned int *)a1 + 6), *((unsigned int *)a1 + 7), *((unsigned int *)a1 + 8), *((unsigned int *)a1 + 9), *((unsigned int *)a1 + 10), (__int16)a1[22], (__int16)a1[23],
           *((unsigned int *)a1 + 12),
           *((unsigned int *)a1 + 13),
           *((unsigned int *)a1 + 14),
           *((unsigned int *)a1 + 15),
           *((unsigned int *)a1 + 16),
           *((unsigned int *)a1 + 17),
           *((unsigned int *)a1 + 18),
           *((unsigned int *)a1 + 19),
           *((unsigned int *)a1 + 20),
           (__int16)a1[42],
           (__int16)a1[43],
           (__int16)a1[44],
           *MEMORY[0x263EF8340]);
}

BOOL Is_BDS_IntEph_Real(uint64_t a1)
{
  return *(_DWORD *)(a1 + 52)
      || *(_WORD *)(a1 + 48)
      || *(_WORD *)(a1 + 50)
      || *(_DWORD *)(a1 + 56)
      || *(_DWORD *)(a1 + 60)
      || *(_DWORD *)(a1 + 64)
      || *(_DWORD *)(a1 + 68)
      || *(_DWORD *)(a1 + 72)
      || *(_DWORD *)(a1 + 76)
      || *(_WORD *)(a1 + 88) != 0;
}

void *GNSS_HL_System_Start_Up(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6 = (void *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  uint64_t v9 = (uint64_t)v6;
  uint64_t v128 = *MEMORY[0x263EF8340];
  int v10 = *(unsigned __int8 *)(v6[7] + 39302);
  if (v7)
  {
    uint64_t v11 = v6[9];
    int v12 = *(_DWORD *)(v6[20] + 448);
    int v13 = *(_DWORD *)(v11 + 16);
    __int16 v14 = *(_WORD *)(v11 + 29);
    __int16 v15 = *(_WORD *)(v11 + 1026);
    char v16 = *(unsigned char *)(v11 + 252);
    uint64_t v17 = *(void *)(v11 + 216);
    long long v104 = *(_OWORD *)(v11 + 224);
    long long v105 = *(_OWORD *)(v11 + 200);
    uint64_t v18 = *(void *)(v11 + 240);
    __int16 v103 = *(_WORD *)(v11 + 248);
    long long v101 = *(_OWORD *)(v11 + 96);
    long long v102 = *(_OWORD *)(v11 + 80);
    long long v99 = *(_OWORD *)(v11 + 128);
    long long v100 = *(_OWORD *)(v11 + 112);
    long long v97 = *(_OWORD *)(v11 + 160);
    long long v98 = *(_OWORD *)(v11 + 144);
    long long v96 = *(_OWORD *)(v11 + 176);
    uint64_t v19 = *(void *)(v11 + 192);
    long long v123 = xmmword_26AE6D38E;
    long long v124 = unk_26AE6D39E;
    int v125 = dword_26AE6D3AE;
    long long v119 = xmmword_26AE6D34E;
    long long v120 = unk_26AE6D35E;
    long long v122 = unk_26AE6D37E;
    long long v121 = xmmword_26AE6D36E;
    long long v20 = *(_OWORD *)(v11 + 397);
    long long v21 = *(_OWORD *)(v11 + 413);
    long long v22 = *(_OWORD *)(v11 + 365);
    __src[8] = *(_OWORD *)(v11 + 381);
    __src[9] = v20;
    __src[10] = v21;
    LOWORD(__src[11]) = *(_WORD *)(v11 + 429);
    long long v23 = *(_OWORD *)(v11 + 333);
    long long v24 = *(_OWORD *)(v11 + 349);
    long long v25 = *(_OWORD *)(v11 + 301);
    __src[4] = *(_OWORD *)(v11 + 317);
    __src[5] = v23;
    __src[6] = v24;
    __src[7] = v22;
    long long v26 = *(_OWORD *)(v11 + 269);
    long long v27 = *(_OWORD *)(v11 + 285);
    __src[0] = *(_OWORD *)(v11 + 253);
    __src[1] = v26;
    __src[2] = v27;
    __src[3] = v25;
    long long v28 = *(_OWORD *)(v11 + 624);
    long long v115 = *(_OWORD *)(v11 + 608);
    long long v116 = v28;
    long long v117 = *(_OWORD *)(v11 + 640);
    __int16 v118 = *(_WORD *)(v11 + 656);
    long long v29 = *(_OWORD *)(v11 + 560);
    long long v111 = *(_OWORD *)(v11 + 544);
    long long v112 = v29;
    long long v30 = *(_OWORD *)(v11 + 592);
    long long v113 = *(_OWORD *)(v11 + 576);
    long long v114 = v30;
    long long v31 = *(_OWORD *)(v11 + 496);
    long long v107 = *(_OWORD *)(v11 + 480);
    long long v108 = v31;
    long long v32 = *(_OWORD *)(v11 + 528);
    long long v109 = *(_OWORD *)(v11 + 512);
    long long v110 = v32;
    long long v34 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 16);
    long long v33 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 32);
    v126[0] = **((_OWORD **)&xmmword_26AE66D08 + 1);
    v126[1] = v34;
    v126[2] = v33;
    long long v36 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 64);
    long long v35 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 80);
    long long v37 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 48);
    uint64_t v127 = *(void *)(*((void *)&xmmword_26AE66D08 + 1) + 96);
    v126[4] = v36;
    v126[5] = v35;
    v126[3] = v37;
    EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (double *)v126);
    GNSS_HL_Data_Bases_Clear();
    GNSS_HL_Data_Bases_Init();
    GNSS_HL_Data_Bases_Init_NV();
    uint64_t v38 = *(void *)(v9 + 72);
    *(_DWORD *)(v38 + 1064) = v12;
    *(_DWORD *)(v38 + 16) = v13;
    *(_WORD *)(v38 + 29) = v14;
    *(_WORD *)(v38 + 1026) = v15;
    *(unsigned char *)(v38 + 252) = v16;
    *(_OWORD *)(v11 + 200) = v105;
    *(void *)(v11 + 216) = v17;
    *(_OWORD *)(v11 + 224) = v104;
    *(void *)(v11 + 240) = v18;
    *(_WORD *)(v11 + 248) = v103;
    *(_OWORD *)(v11 + 80) = v102;
    *(_OWORD *)(v11 + 96) = v101;
    *(_OWORD *)(v11 + 112) = v100;
    *(_OWORD *)(v11 + 128) = v99;
    *(_OWORD *)(v11 + 144) = v98;
    *(_OWORD *)(v11 + 160) = v97;
    *(_OWORD *)(v11 + 176) = v96;
    *(void *)(v11 + 192) = v19;
    *(unsigned char *)(*(void *)(v9 + 72) + 20) = 0;
    dword_26AE6D3AE = v125;
    xmmword_26AE6D34E = v119;
    unk_26AE6D35E = v120;
    xmmword_26AE6D38E = v123;
    unk_26AE6D39E = v124;
    xmmword_26AE6D36E = v121;
    unk_26AE6D37E = v122;
    uint64_t v39 = *(void *)(v9 + 72) + 253;
    long long v40 = __src[1];
    *(_OWORD *)uint64_t v39 = __src[0];
    long long v41 = __src[2];
    long long v42 = __src[3];
    *(_OWORD *)(v39 + 16) = v40;
    *(_OWORD *)(v39 + 32) = v41;
    long long v44 = __src[6];
    long long v43 = __src[7];
    long long v45 = __src[4];
    *(_OWORD *)(v39 + 80) = __src[5];
    *(_OWORD *)(v39 + 96) = v44;
    *(_OWORD *)(v39 + 48) = v42;
    *(_OWORD *)(v39 + 64) = v45;
    *(_WORD *)(v39 + 176) = __src[11];
    long long v46 = __src[10];
    long long v47 = __src[8];
    *(_OWORD *)(v39 + 144) = __src[9];
    *(_OWORD *)(v39 + 160) = v46;
    *(_OWORD *)(v39 + 112) = v43;
    *(_OWORD *)(v39 + 128) = v47;
    uint64_t v48 = *(void *)(v9 + 72);
    long long v49 = v110;
    *(_OWORD *)(v48 + 512) = v109;
    *(_OWORD *)(v48 + 528) = v49;
    long long v50 = v108;
    *(_OWORD *)(v48 + 480) = v107;
    *(_OWORD *)(v48 + 496) = v50;
    long long v51 = v114;
    *(_OWORD *)(v48 + 576) = v113;
    *(_OWORD *)(v48 + 592) = v51;
    long long v52 = v112;
    *(_OWORD *)(v48 + 544) = v111;
    *(_OWORD *)(v48 + 560) = v52;
    *(_WORD *)(v48 + 656) = v118;
    long long v53 = v117;
    long long v54 = v115;
    *(_OWORD *)(v48 + 624) = v116;
    *(_OWORD *)(v48 + 640) = v53;
    *(_OWORD *)(v48 + 608) = v54;
    GN_GPS_Set_Config((uint64_t)v126);
  }
  else
  {
    GNSS_HL_Data_Bases_Init_NV();
    GNSS_HL_Data_Bases_TimeSynch((void *)v9, v55, v56);
  }
  if (v10) {
    *(unsigned char *)(*(void *)(v9 + 56) + 39302) = 1;
  }
  uint64_t v57 = *(int **)(v9 + 8);
  BOOL v58 = *(int **)(v9 + 16);
  int v59 = *v57;
  *BOOL v58 = *v57;
  v58[1] = v57[4];
  uint64_t v61 = *(void *)(v9 + 72);
  uint64_t v60 = *(void *)(v9 + 80);
  int v62 = *(_DWORD *)(v61 + 956);
  int v63 = v62 + v59;
  if (!v62) {
    int v63 = 0;
  }
  *(_DWORD *)(v61 + 1008) = v63;
  unsigned int v64 = *(unsigned __int16 *)(v61 + 248);
  if (*(_WORD *)(v61 + 248))
  {
    *(void *)(v61 + 992) = 0;
    *(double *)(v61 + 1000) = (double)v64 * 0.000000001;
    *(void *)(v60 + 888) = 0x4163125300000000;
    *(void *)(v60 + 168) = 0;
    *(unsigned char *)(p_NA + 8) = 0;
  }
  SV_Data_Decode_Init();
  SV_Data_Decode_Update_Wrapper(v9);
  GPS_State_Update_Init(*(void *)(v9 + 192), *(void *)(v9 + 248), *(void *)(v9 + 48), *(void **)(v9 + 56), *(void *)(v9 + 72), *(void *)(v9 + 88), *(void *)(v9 + 96));
  GLON_State_Update_Init(*(double **)(v9 + 192), *(void *)(v9 + 48), *(int **)(v9 + 56), *(void *)(v9 + 96));
  bzero(*(void **)(v9 + 168), 0x8E0uLL);
  SV_Gen_Meas_Update_Wrapper(v9, v65, v66, v67, v68, v69);
  Nav_Kalman_Update_Init();
  Nav_Kalman_Update_Wrapper(v9);
  int v70 = (gnss::GnssAdaptDevice *)memcpy(*(void **)(v9 + 88), *(const void **)(v9 + 80), 0x800uLL);
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v70))
  {
    if (v8)
    {
      uint64_t v71 = *(void *)(v9 + 112);
      *(void *)(v71 + 256) = *(void *)(v71 + 240);
      *(unsigned char *)(v71 + 325) = 0;
      uint64_t v72 = *(void *)(v9 + 112);
      *(void *)(v72 + 352) = *(void *)(v72 + 336);
      *(unsigned char *)(v72 + 421) = 0;
      uint64_t v73 = *(void *)(v9 + 112);
      *(void *)(v73 + 448) = *(void *)(v73 + 432);
      *(unsigned char *)(v73 + 517) = 0;
      Sen_Aug_FPE_ReInit(*(int64x2_t **)(v9 + 208), *(void *)(v9 + 136), *(void *)(v9 + 392), *(void *)(v9 + 152));
    }
    else
    {
      __int16 v74 = *(int64x2_t **)(v9 + 208);
      uint64_t v75 = *(void *)(v9 + 136);
      uint64_t v76 = *(void *)(v9 + 392);
      uint64_t v77 = *(void *)(v9 + 152);
      long long v78 = *(_OWORD *)(v75 + 55);
      long long v79 = *(_OWORD *)(v75 + 71);
      long long v80 = *(_OWORD *)(v75 + 87);
      *(_DWORD *)((char *)&__src[6] + 2) = *(_DWORD *)(v75 + 103);
      long long v81 = *(_OWORD *)(v75 + 7);
      long long v82 = *(_OWORD *)(v75 + 23);
      *(_OWORD *)((char *)&__src[2] + 2) = *(_OWORD *)(v75 + 39);
      *(_OWORD *)((char *)&__src[1] + 2) = v82;
      *(_OWORD *)((char *)__src + 2) = v81;
      *(_OWORD *)((char *)&__src[5] + 2) = v80;
      *(_OWORD *)((char *)&__src[4] + 2) = v79;
      *(_OWORD *)((char *)&__src[3] + 2) = v78;
      LOWORD(__src[0]) = 12;
      FPE_ApplyNewMeas((char **)0xB, (unsigned __int16 *)__src, v75, v74, 0, v76, v77, 0);
    }
    Fused_Nav_SA_FPE_Init(*(void *)(v9 + 216));
  }
  uint64_t v83 = *(void *)(v9 + 200);
  *(unsigned char *)(v83 + 48) = 0;
  *(_OWORD *)(v83 + 16) = 0u;
  *(_OWORD *)(v83 + 32) = 0u;
  *(_OWORD *)uint64_t v83 = 0u;
  *(_WORD *)(v83 + 2) = -1;
  *(unsigned char *)uint64_t v83 = 1;
  Pre_Positioning_Update_Wrapper();
  bzero(__src, 0x2C78uLL);
  uint64_t v84 = 540;
  do
  {
    int v85 = (char *)__src + v84;
    *int v85 = 0;
    *(void *)(v85 + 4) = 0;
    *(void *)(v85 + 11) = 0;
    v84 += 20;
  }
  while (v85 + 20 != (char *)&__src[43] + 12);
  uint64_t v86 = 704;
  do
  {
    uint64_t v87 = (char *)__src + v86;
    *(void *)uint64_t v87 = 0;
    *((_WORD *)v87 + 4) = 0;
    *(void *)(v87 + 12) = 0;
    *((_WORD *)v87 + 10) = 0;
    *((void *)v87 + 6) = 0;
    *((void *)v87 + 3) = 0;
    *((void *)v87 + 4) = 0;
    v86 += 56;
    *((_WORD *)v87 + 20) = 0;
  }
  while (v87 + 56 != (char *)&__src[212]);
  for (uint64_t i = 3392; i != 5120; i += 36)
  {
    uint64_t v89 = (char *)__src + i;
    v89[32] = 0;
    *(_OWORD *)uint64_t v89 = 0uLL;
    *((_OWORD *)v89 + 1) = 0uLL;
  }
  uint64_t v90 = -960;
  do
  {
    uint64_t v91 = (char *)__src + v90;
    *((_WORD *)v91 + 3048) = 0;
    *((_OWORD *)v91 + 380) = 0uLL;
    v90 += 20;
  }
  while (v90);
  uint64_t v92 = 0xFFFFFFFFFFFFF80;
  do
  {
    *(void *)&__src[v92 + 508] = 0;
    *(void *)((char *)&__src[v92 + 508] + 6) = 0;
    ++v92;
  }
  while (v92 * 16);
  uint64_t v93 = 8128;
  do
  {
    uint64_t v94 = (char *)__src + v93;
    *(_DWORD *)uint64_t v94 = 0;
    v94[52] = 0;
    v93 += 56;
  }
  while (v94 + 56 != (char *)&__src[676]);
  WORD4(__src[697]) = 0;
  HIDWORD(__src[702]) = 0;
  LOBYTE(__src[703]) = 0;
  *(_OWORD *)((char *)&__src[698] + 12) = 0u;
  *(_OWORD *)((char *)&__src[699] + 12) = 0u;
  *(_OWORD *)((char *)&__src[700] + 12) = 0u;
  *(_OWORD *)((char *)&__src[701] + 10) = 0u;
  HIDWORD(__src[703]) = 0;
  *(_DWORD *)((char *)&__src[703] + 7) = 0;
  DWORD1(__src[703]) = 0;
  memset(&__src[676], 0, 343);
  *(void *)((char *)&__src[698] + 2) = 0;
  *(void *)((char *)&__src[697] + 12) = 0;
  BOOL result = memcpy(*(void **)(v9 + 160), __src, 0x2C78uLL);
  *(void *)(*(void *)(v9 + 160) + 384) = *(void *)(v9 + 160);
  *(void *)uint64_t v9 = 0x10000000BLL;
  return result;
}

void GNSS_HL_System_Re_Start(uint64_t a1)
{
  uint64_t v2 = 0;
  v62[11] = *(double *)MEMORY[0x263EF8340];
  double v4 = *(_DWORD **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(_DWORD *)uint64_t v3 = *v4;
  *(_DWORD *)(v3 + 4) = v4[4];
  *(_WORD *)(v3 + 21) = 0;
  *(_DWORD *)(v3 + 24) = 0;
  uint64_t v5 = v3 + 2720;
  do
  {
    uint64_t v6 = v5 + v2;
    *(unsigned char *)(v6 + 32) = 0;
    *(_OWORD *)uint64_t v6 = 0uLL;
    *(_OWORD *)(v6 + 16) = 0uLL;
    v2 += 36;
  }
  while (v2 != 1728);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(v7 + 11151) = 0;
  *(_OWORD *)(v7 + 11136) = 0u;
  *(_OWORD *)(v7 + 11120) = 0u;
  *(_OWORD *)(v7 + 11104) = 0u;
  *(_OWORD *)(v7 + 11088) = 0u;
  *(_OWORD *)(v7 + 11072) = 0u;
  *(_OWORD *)(v7 + 11056) = 0u;
  *(_OWORD *)(v7 + 11040) = 0u;
  *(_OWORD *)(v7 + 11024) = 0u;
  *(_OWORD *)(v7 + 11008) = 0u;
  *(_OWORD *)(v7 + 10992) = 0u;
  *(_OWORD *)(v7 + 10976) = 0u;
  *(_OWORD *)(v7 + 10960) = 0u;
  *(_OWORD *)(v7 + 10944) = 0u;
  *(_OWORD *)(v7 + 10928) = 0u;
  *(_OWORD *)(v7 + 10912) = 0u;
  *(_OWORD *)(v7 + 10896) = 0u;
  *(_OWORD *)(v7 + 10880) = 0u;
  *(_OWORD *)(v7 + 10864) = 0u;
  *(_OWORD *)(v7 + 10848) = 0u;
  *(_OWORD *)(v7 + 10832) = 0u;
  bzero(*(void **)(a1 + 24), 0xA80uLL);
  uint64_t v13 = *(void *)(a1 + 72);
  int v14 = *(_DWORD *)(v13 + 956);
  if (v14) {
    v14 += **(_DWORD **)(a1 + 8);
  }
  *(_DWORD *)(v13 + 1008) = v14;
  double v15 = 0.0;
  if (*(_DWORD *)a1 == 6)
  {
    unsigned int v16 = *(unsigned __int16 *)(v13 + 248);
    if (*(_WORD *)(v13 + 248))
    {
      uint64_t v17 = *(void *)(a1 + 80);
      *(void *)(v13 + 992) = 0;
      double v18 = (double)v16 * 0.000000001;
      *(double *)(v13 + 1000) = v18;
      *(void *)(v17 + 888) = 0x4163125300000000;
      *(void *)(v17 + 168) = 0;
      *(unsigned char *)(p_NA + 8) = 0;
      double v15 = v18 * 299792458.0 / 3.0 * (v18 * 299792458.0 / 3.0);
      uint64_t v19 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      unsigned int v20 = *(_DWORD *)(v19 + 12);
      if (v20 >= 0x493E1)
      {
        double v21 = *(double *)(v13 + 1000);
        uint64_t v22 = 0x3E877CF447651960;
        if (v21 >= 0.000000175)
        {
          if (v20 < 0xDBBA1 || v21 >= 0.0000005) {
            goto LABEL_14;
          }
          uint64_t v22 = 0x3EA0C6F7A0B5ED8ELL;
        }
        *(void *)(v13 + 1000) = v22;
      }
    }
LABEL_14:
    v62[0] = 0.0;
    __int16 v61 = 0;
    int v60 = 0;
    long long v23 = *(int **)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 80);
    double v25 = *(double *)(v24 + 848);
    if (v25 >= 9999000.0) {
      double v26 = (double)TOW_stat_ms[*v23];
    }
    else {
      double v26 = v25 * 0.0000100069229 + 1.0;
    }
    uint64_t v27 = *(void *)(a1 + 16);
    LODWORD(v25) = *(_DWORD *)(v19 + 12);
    double v28 = (double)*(unint64_t *)&v25 * 0.00006;
    if (v26 + v28 <= 600000.0)
    {
      for (int i = 10; i != -1; --i)
      {
        if (TOW_stat_ms[i] >= (int)(v26 + v28)) {
          break;
        }
      }
    }
    else
    {
      int i = 0;
    }
    uint64_t v30 = v23[15];
    unsigned int j = i;
    if (v30 != *v23)
    {
      double v32 = v28 + (double)(TOW_stat_ms[v30] + 1);
      if (v32 <= 600000.0)
      {
        for (unsigned int j = 10; j != -1; --j)
        {
          if (TOW_stat_ms[j] >= (int)v32) {
            break;
          }
        }
      }
      else
      {
        unsigned int j = 0;
      }
    }
    *(_DWORD *)(v24 + 48) = i;
    *(_DWORD *)(v24 + 180) = j;
    *((unsigned char *)v23 + 4) = 0;
    *long long v23 = i;
    v23[15] = j;
    if (!Core_Load_ApxTime(*(unsigned int *)(v27 + 4), &v61, v62, &v60)) {
      goto LABEL_35;
    }
    __int16 v33 = v61;
    if (v61 < 1025) {
      goto LABEL_35;
    }
    if (v60 <= i)
    {
      if (*((unsigned char *)v23 + 5)) {
        goto LABEL_35;
      }
      *((unsigned char *)v23 + 5) = 1;
      *((_WORD *)v23 + 8) = v33;
    }
    else
    {
      *long long v23 = v60;
      *((_WORD *)v23 + 2) = 256;
      *((void *)v23 + 1) = *(void *)v27;
      *((_WORD *)v23 + 8) = v33;
      *((double *)v23 + 3) = v62[0];
      *((void *)v23 + 4) = 0;
    }
    *(void *)BOOL v58 = 0;
    *(void *)int v59 = 0;
    API_Get_UTC_Cor(1, (double *)v58);
    GPS_To_Glon_Time(0, *((__int16 *)v23 + 8), *((double *)v23 + 3), *(double *)v58, v59, &v59[1], (double *)v23 + 9);
    *((_WORD *)v23 + 34) = v59[1];
    *((_WORD *)v23 + 33) = v59[0];
    *((unsigned char *)v23 + 64) = 1;
    v23[15] = *v23;
LABEL_35:
    uint64_t v34 = *(void *)(a1 + 168);
    if (*v23 < 10 || *(int *)(v34 + 12) < 4) {
      *(_DWORD *)(v34 + 12) = 0;
    }
    else {
      *(_DWORD *)(v34 + 12) = 3;
    }
    *(unsigned char *)(v34 + 4) = 0;
  }
  SV_Gen_Meas_Update_Wrapper(a1, v8, v9, v10, v11, v12);
  SV_Data_Decode_Update_Wrapper(a1);
  SV_State_Update_Wrapper(a1);
  uint64_t v35 = *(void *)(a1 + 176);
  uint64_t v36 = *(void *)(a1 + 72);
  uint64_t v37 = *(void *)(a1 + 80);
  v58[0] = 0;
  *(unsigned char *)(v35 + 30) = 0;
  *(void *)(v35 + 7336) = 0;
  *(_DWORD *)(v35 + 7344) = -1;
  ++*(_DWORD *)(v35 + 11032);
  ++*(_DWORD *)(v35 + 11044);
  int v38 = *(_DWORD *)(v37 + 36);
  int v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v38;
  if (v39 >= 1)
  {
    int v40 = v39 / *(_DWORD *)(v36 + 948);
    *(_DWORD *)(v35 + 11032) += v40;
    *(_DWORD *)(v35 + 11044) += v40;
  }
  if (*(_DWORD *)a1 == 9
    && (*(_DWORD *)(v35 + 20) - 4) <= 4
    && *(_DWORD *)(v35 + 11028)
    && *(_DWORD *)(v35 + 11040))
  {
    long long v41 = (double *)*(unsigned __int16 *)(v35 + 18);
  }
  else
  {
    long long v41 = 0;
  }
  int v42 = *(_DWORD *)(v36 + 948);
  if (v42 * *(_DWORD *)(v35 + 11032) > (1000 * v41) && *(double *)(v37 + 344) > 0.0)
  {
    NK_Decay_Speed(v41, v42, v37 + 32, v35);
    *(void *)(v35 + 11256) = 0;
    *(_DWORD *)(v35 + 11264) = 0;
    *(void *)(v35 + 11240) = 0;
    *(_DWORD *)(v35 + 11248) = 0;
  }
  *(void *)(v35 + 11024) = 0;
  *(_DWORD *)(v35 + 11032) = 0;
  *(void *)(v35 + 144) = 0;
  *(_OWORD *)(v35 + 11040) = 0u;
  *(_DWORD *)(v35 + 152) = -1;
  *(_DWORD *)(v35 + 268) = 0;
  *(unsigned char *)(v35 + 26992) = 0;
  *(_DWORD *)(v35 + 26996) = 0;
  *(_WORD *)(v35 + 8272) = 0;
  *(_OWORD *)(v35 + 10424) = 0u;
  *(_OWORD *)(v35 + 10440) = 0u;
  *(_OWORD *)(v35 + 10456) = 0u;
  *(_OWORD *)(v35 + 7360) = 0u;
  *(_OWORD *)(v35 + 7376) = 0u;
  *(_OWORD *)(v35 + 7392) = 0u;
  *(_OWORD *)(v35 + 7408) = 0u;
  *(_OWORD *)(v35 + 7424) = 0u;
  *(_OWORD *)(v35 + 7440) = 0u;
  *(_OWORD *)(v35 + 7456) = 0u;
  *(_OWORD *)(v35 + 7472) = 0u;
  *(_OWORD *)(v35 + 7488) = 0u;
  *(_OWORD *)(v35 + 7504) = 0u;
  *(_OWORD *)(v35 + 7520) = 0u;
  *(_OWORD *)(v35 + 7536) = 0u;
  *(_OWORD *)(v35 + 7872) = 0u;
  *(_OWORD *)(v35 + 7856) = 0u;
  *(_OWORD *)(v35 + 7840) = 0u;
  if (*(_DWORD *)a1 != 6)
  {
    long long v50 = (double *)(v35 + 344);
    Apply_Q_Boost(900.0, 0, 1u, v50, v58, v62);
    Apply_Q_Boost(900.0, 1u, 1u, v50, v58, v62);
    Apply_Q_Boost(900.0, 2u, 1u, v50, v58, v62);
    double v47 = 8.98755179;
    if (*(_WORD *)(v36 + 248)) {
      double v47 = v15;
    }
    unsigned int v48 = 3;
    long long v49 = v50;
    goto LABEL_59;
  }
  uint64_t v43 = *(void *)(a1 + 8);
  *(void *)(v37 + 840) = 0x4163125300000000;
  *(_WORD *)(v37 + 176) = 0;
  *(unsigned char *)(v37 + 178) = 0;
  *(void *)(v37 + 152) = 0;
  *(void *)(v37 + 160) = 0;
  *(void *)(v37 + 144) = 0;
  unsigned int v44 = *(_DWORD *)(v43 + 12);
  if (v44 <= 0x2BF1F)
  {
    long long v45 = (double *)(v35 + 344);
    Apply_Q_Boost(3.59502071e11, 0, 1u, v45, v58, v62);
    Apply_Q_Boost(3.59502071e11, 1u, 1u, v45, v58, v62);
    Apply_Q_Boost(3.59502071e11, 2u, 1u, v45, v58, v62);
    double v46 = 224.688795;
    if (*(_WORD *)(v36 + 248)) {
      double v46 = v15;
    }
    Apply_Q_Boost(v46, 3u, 1u, v45, v58, v62);
    double v47 = 4.0;
    unsigned int v48 = 4;
    long long v49 = v45;
LABEL_59:
    Apply_Q_Boost(v47, v48, 1u, v49, v58, v62);
    goto LABEL_60;
  }
  *(unsigned char *)(v35 + 128) = 1;
  *(_DWORD *)(v35 + 132) = 3;
  *(_WORD *)(v35 + 232) = 256;
  *(unsigned char *)(v35 + 234) = 2;
  *(unsigned char *)(v35 + 11088) = 0;
  *(_OWORD *)(v35 + 11144) = 0uLL;
  int v57 = *(_DWORD *)(v37 + 12);
  if (v57 != 2)
  {
    if (v57 != 3) {
      goto LABEL_60;
    }
    *(_DWORD *)(v37 + 12) = 2;
  }
  if (v44 >= 0x36EE81) {
    *(_DWORD *)(v37 + 12) = 1;
  }
LABEL_60:
  *(_DWORD *)uint64_t v36 = 0;
  Nav_Kalman_Update_Wrapper(a1);
  memcpy(*(void **)(a1 + 88), *(const void **)(a1 + 80), 0x800uLL);
  updated = (gnss::GnssAdaptDevice *)Pre_Positioning_Update_Wrapper();
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(updated))
  {
    uint64_t v52 = *(void *)(a1 + 112);
    *(void *)(v52 + 256) = *(void *)(v52 + 240);
    *(unsigned char *)(v52 + 325) = 0;
    uint64_t v53 = *(void *)(a1 + 112);
    *(void *)(v53 + 352) = *(void *)(v53 + 336);
    *(unsigned char *)(v53 + 421) = 0;
    uint64_t v54 = *(void *)(a1 + 112);
    *(void *)(v54 + 448) = *(void *)(v54 + 432);
    *(unsigned char *)(v54 + 517) = 0;
    uint64_t v55 = *(void *)(a1 + 72);
    uint64_t v56 = *(void *)(a1 + 136);
    *(_DWORD *)uint64_t v56 = *(_DWORD *)(v55 + 948);
    *(unsigned char *)(v56 + 6) = *(unsigned char *)(v55 + 43);
    *(_WORD *)(v56 + 4) = g_Enable_LCD_Debug;
    GN_GPS_Get_LibVersion((char *)(v56 + 7));
    Sen_Aug_FPE_ReInit(*(int64x2_t **)(a1 + 208), *(void *)(a1 + 136), *(void *)(a1 + 392), *(void *)(a1 + 152));
    Fused_Nav_SA_FPE_Init(*(void *)(a1 + 216));
  }
  *(void *)a1 = 0x10000000BLL;
}

uint64_t Decode_BDS_1st_Health_SF(uint64_t result, unsigned __int16 *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 4);
  *a2 = ((*(_WORD *)result & 3) << 7) | (v2 >> 15) & 0x7F;
  a2[1] = (v2 >> 6) & 0x1FF;
  __int16 v3 = 8 * (v2 & 0x3F);
  unsigned int v4 = *(_DWORD *)(result + 8);
  unsigned int v5 = *(_DWORD *)(result + 12);
  a2[2] = v3 & 0xFFF8 | (v4 >> 10) & 7;
  a2[3] = (v4 >> 10) & 0x1FF;
  a2[4] = (v4 >> 1) & 0x1FF;
  a2[5] = ((v4 & 1) << 8) | (v5 >> 14);
  a2[6] = (v5 >> 5) & 0x1FF;
  __int16 v6 = 16 * (v5 & 0x1F);
  unsigned int v7 = *(_DWORD *)(result + 16);
  unsigned int v8 = *(_DWORD *)(result + 20);
  a2[7] = v6 & 0xFFF0 | (v7 >> 18) & 0xF;
  a2[8] = (v7 >> 9) & 0x1FF;
  a2[9] = v7 & 0x1FF;
  a2[10] = (v8 >> 13) & 0x1FF;
  a2[11] = (v8 >> 4) & 0x1FF;
  __int16 v9 = 32 * (v8 & 0xF);
  unsigned int v10 = *(_DWORD *)(result + 24);
  unsigned int v11 = *(_DWORD *)(result + 28);
  a2[12] = v9 & 0xFFE0 | (v10 >> 17) & 0x1F;
  a2[13] = (v10 >> 8) & 0x1FF;
  a2[14] = (2 * v10) | (v11 >> 21) & 1;
  a2[15] = (v11 >> 12) & 0x1FF;
  a2[16] = (v11 >> 3) & 0x1FF;
  int v12 = *(_DWORD *)(result + 32);
  a2[17] = ((v11 & 7) << 6) | BYTE2(v12) & 0x3F;
  a2[18] = (unsigned __int16)v12 >> 7;
  return result;
}

uint64_t Decode_BDS_3rd_Health_SF(uint64_t result, unsigned __int16 *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 4);
  *a2 = ((*(_WORD *)result & 3) << 7) | (v2 >> 15) & 0x7F;
  a2[1] = (v2 >> 6) & 0x1FF;
  __int16 v3 = 8 * (v2 & 0x3F);
  unsigned int v4 = *(_DWORD *)(result + 8);
  unsigned int v5 = *(_DWORD *)(result + 12);
  a2[2] = v3 & 0xFFF8 | (v4 >> 10) & 7;
  a2[3] = (v4 >> 10) & 0x1FF;
  a2[4] = (v4 >> 1) & 0x1FF;
  a2[5] = ((v4 & 1) << 8) | (v5 >> 14);
  a2[6] = (v5 >> 5) & 0x1FF;
  __int16 v6 = 16 * (v5 & 0x1F);
  unsigned int v7 = *(_DWORD *)(result + 16);
  unsigned int v8 = *(_DWORD *)(result + 20);
  a2[7] = v6 & 0xFFF0 | (v7 >> 18) & 0xF;
  a2[8] = (v7 >> 9) & 0x1FF;
  a2[9] = v7 & 0x1FF;
  a2[10] = (v8 >> 13) & 0x1FF;
  a2[11] = (v8 >> 4) & 0x1FF;
  a2[12] = (32 * (v8 & 0xF)) | (*(_DWORD *)(result + 24) >> 17) & 0x1F;
  return result;
}

size_t gnss::GnssAdaptDevice::Ga05_04RequestLtlInfoCB(int *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga05_04RequestLtlInfoCB");
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    uint64_t v6 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga05_03InjectLtlInfo");
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
    }
    int v9 = *a1;
    int v10 = a1[1];
    memcpy(__dst, a1 + 2, sizeof(__dst));
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Resp,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "Ga05_03InjectLtlInfo", v10);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
    }
    uint64_t v13 = *(NSObject **)(v6 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice20Ga05_03InjectLtlInfoERKN7GnssHal14ExtensionsOlaf7LtlInfoE_block_invoke;
    block[3] = &__block_descriptor_tmp_25;
    block[4] = v6;
    int v22 = v9;
    int v23 = v10;
    memcpy(v24, __dst, sizeof(v24));
    dispatch_async(v13, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga05_03InjectLtlInfo");
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LtlInjected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 77, "Ga05_04RequestLtlInfoCB");
      LbsOsaTrace_WriteLog(0x18u, __str, v17, 3, 1);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga05_04RequestLtlInfoCB");
    return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga05_00RegisterGnsXoCallback(int a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "Ga05_00RegisterGnsXoCallback", a1);
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (!DeviceInstance)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnsXOCB\n");
    return LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
  }
  uint64_t v9 = DeviceInstance;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice28Ga05_00RegisterGnsXoCallbackE15e_gnsXO_MsgTypejP18u_gnsXO_MsgDataOut_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = DeviceInstance;
  int v16 = a1;
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, block);
  if (a1 == 1)
  {
    if (!a3)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnsXOMsgData\n");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    if (*a3 == 1)
    {
      uint64_t v10 = v9;
      int v11 = 1;
      return gnss::GnssAdaptDevice::Ga05_01HandleGnsXoCallback(v10, v11);
    }
    if (!*a3)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      return gnss::GnssAdaptDevice::Ga05_01HandleGnsXoCallback(v10, v11);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Request\n");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
  }
  else
  {
    if (!a1)
    {
      uint64_t v10 = v9;
      int v11 = 0;
      return gnss::GnssAdaptDevice::Ga05_01HandleGnsXoCallback(v10, v11);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL ReqType,%u\n", v14);
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice28Ga05_00RegisterGnsXoCallbackE15e_gnsXO_MsgTypejP18u_gnsXO_MsgDataOut_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1040) = *(_DWORD *)(result + 40);
  return result;
}

size_t gnss::GnssAdaptDevice::Ga05_01HandleGnsXoCallback(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga05_01HandleGnsXoCallback");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  uint64_t v6 = *(NSObject **)(a1 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice26Ga05_01HandleGnsXoCallbackEN7GnssHal14ExtensionsOlaf11LtlInfoTypeE_block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = a1;
  int v11 = a2;
  dispatch_async(v6, block);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga05_01HandleGnsXoCallback");
    return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  return result;
}

void *___ZN4gnss15GnssAdaptDevice26Ga05_01HandleGnsXoCallbackEN7GnssHal14ExtensionsOlaf11LtlInfoTypeE_block_invoke(uint64_t a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  int v1 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);
  HalExtensions = gnss::GnssAdaptDevice::getHalExtensions(v1);
  v5[0] = &unk_26DF18900;
  v5[1] = gnss::GnssAdaptDevice::Ga05_04RequestLtlInfoCB;
  v5[3] = v5;
  (*(void (**)(void *, int *, void *))(*(void *)HalExtensions + 88))(HalExtensions, &v4, v5);
  return std::__function::__value_func<void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::~__value_func[abi:ne180100](v5);
}

void sub_22B8EDE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDevice20Ga05_03InjectLtlInfoERKN7GnssHal14ExtensionsOlaf7LtlInfoE_block_invoke(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v59 = 0uLL;
  __int16 v60 = 0;
  int v51 = 0;
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 - 1) < 2)
  {
    uint64_t v18 = operator new[](0x21CuLL, MEMORY[0x263F8C180]);
    if (!v18)
    {
      snprintf(v52, 0x400uLL, "ASSERT,%s,%d,%s", "Ga05_03InjectLtlInfo_block_invoke", 182, "Memory allocation failed for FreqOffValues");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v39 = mach_continuous_time();
        unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "OSA", 69, "Ga05_03InjectLtlInfo_block_invoke", v52);
        LbsOsaTrace_WriteLog(0xEu, __str, v40, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga05_03InjectLtlInfo_block_invoke", "ga05GnssHalExtensions.cpp", 182, "false && \"Memory allocation failed for FreqOffValues\"");
    }
    uint64_t v19 = v18;
    unsigned __int16 v20 = operator new[](0x10EuLL, MEMORY[0x263F8C180]);
    if (!v20)
    {
      snprintf(v52, 0x400uLL, "ASSERT,%s,%d,%s", "Ga05_03InjectLtlInfo_block_invoke", 190, "Memory allocation failed for HistoryCnt");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v41 = mach_continuous_time();
        unsigned __int16 v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "OSA", 69, "Ga05_03InjectLtlInfo_block_invoke", v52);
        LbsOsaTrace_WriteLog(0xEu, __str, v42, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga05_03InjectLtlInfo_block_invoke", "ga05GnssHalExtensions.cpp", 190, "false && \"Memory allocation failed for HistoryCnt\"");
    }
    double v21 = v20;
    if (*(unsigned char *)(a1 + 40))
    {
      int v22 = *(_DWORD *)(a1 + 92);
      int v23 = *(_DWORD *)(a1 + 96);
      memcpy_s("Ga05_03InjectLtlInfo_block_invoke", 212, v19, 0x21Cu, (const void *)(a1 + 100), 0x21CuLL);
      memcpy_s("Ga05_03InjectLtlInfo_block_invoke", 216, v21, 0x10Eu, (const void *)(a1 + 640), 0x10EuLL);
      long long v59 = *(_OWORD *)(a1 + 912);
      __int16 v60 = *(_WORD *)(a1 + 928);
      int v51 = *(_DWORD *)(a1 + 930);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LtlInfoType,%u,LearnCt,%u,CleanUpCt,%u,NumEntries,%u,ProdVer,%u,PostCalVer,%u,AdcGain,%u,AdcOffset,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 73, "Ga05_03InjectLtlInfo_block_invoke", v3 != 2, v22, v23, 135, v60, HIBYTE(v60), (unsigned __int16)v51, HIWORD(v51));
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 4, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%d,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 73, "Ga05_03InjectLtlInfo_block_invoke", *(_DWORD *)(a1 + 48), 2);
      LbsOsaTrace_WriteLog(0x18u, __str, v28, 4, 1);
    }
    GNS_XOLearntCurveInd();
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: XOLearntCurve Inj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga05_03InjectLtlInfo_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 5, 1);
    }
    MEMORY[0x230F4E5A0](v21, 0x1000C80BDFB0063);
    MEMORY[0x230F4E5A0](v19, 0x1000C8052888210);
  }
  else if (v3 == -1)
  {
    uint64_t v47 = 0;
    unsigned int v48 = &v47;
    uint64_t v49 = 0x2000000000;
    int v50 = 0;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice20Ga05_03InjectLtlInfoERKN7GnssHal14ExtensionsOlaf7LtlInfoE_block_invoke_2;
    block[3] = &unk_2648B25B0;
    block[4] = &v47;
    void block[5] = v2;
    dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, block);
    int v26 = *((_DWORD *)v48 + 6);
    if (v26 == 1)
    {
      GNS_XOLearntCurveInd();
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v35 = mach_continuous_time();
        unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: XOLearntCurve Inj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "Ga05_03InjectLtlInfo_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v36, 5, 1);
      }
    }
    else if (v26)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v37 = mach_continuous_time();
        unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LtlInfoType ReqType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 69, "Ga05_03InjectLtlInfo_block_invoke", 770, *((_DWORD *)v48 + 6));
        LbsOsaTrace_WriteLog(0x18u, __str, v38, 0, 1);
      }
    }
    else
    {
      char v56 = 0;
      long long v57 = 0u;
      memset(v58, 0, sizeof(v58));
      *(_DWORD *)__str = 2;
      GNS_XOInitCalInd(__str, &v59, &v51);
    }
    _Block_object_dispose(&v47, 8);
  }
  else if (!v3)
  {
    char v53 = 0;
    memset(v54, 0, sizeof(v54));
    if (*(unsigned char *)(a1 + 40))
    {
      *(_DWORD *)uint64_t v52 = 1;
      int v45 = *(unsigned __int8 *)(a1 + 76);
      char v53 = *(unsigned char *)(a1 + 76);
      int v4 = *(__int16 *)(a1 + 78);
      v54[0] = *(_WORD *)(a1 + 78);
      int v5 = *(_DWORD *)(a1 + 52);
      int v6 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)&v54[1] = v5;
      *(_DWORD *)&v54[3] = v6;
      int v7 = *(_DWORD *)(a1 + 60);
      int v8 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)&v54[5] = v7;
      *(_DWORD *)&v54[7] = v8;
      *(void *)&long long v9 = *(void *)(a1 + 68);
      uint64_t v43 = v9;
      uint64_t v44 = *(void *)(a1 + 80);
      *((void *)&v9 + 1) = v44;
      *(_OWORD *)&v54[9] = v9;
      int v10 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)&v54[17] = v10;
      long long v59 = *(_OWORD *)(a1 + 912);
      int v11 = *(unsigned __int8 *)(a1 + 928);
      LOBYTE(v60) = *(unsigned char *)(a1 + 928);
      int v12 = *(unsigned __int8 *)(a1 + 929);
      HIBYTE(v60) = *(unsigned char *)(a1 + 929);
      int v13 = *(unsigned __int16 *)(a1 + 930);
      LOWORD(v51) = *(_WORD *)(a1 + 930);
      int v14 = *(unsigned __int16 *)(a1 + 932);
      HIWORD(v51) = *(_WORD *)(a1 + 932);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v16 = 84;
        if (!v45) {
          uint64_t v16 = 70;
        }
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%u,Calib,%c,RefTemp,%d,C5,%d,C4,%d,C3,%d,C2,%d,C1,%d,C0,%d,ClnUpFact,%u,HWId,%u,ClkId,%u,ProdVer,%u,PostCalVer,%u,AdcGain,%u,AdcOffset,%u\n", v15, "ADP", 73, "Ga05_03InjectLtlInfo_block_invoke", 1, v16, v4, v5, v6, v7, v8, v43, HIDWORD(v43), v44, HIDWORD(v44),
                v10,
                v11,
                v12,
                v13,
                v14);
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v52 = 2;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v31 = mach_continuous_time();
        unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%d,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 73, "Ga05_03InjectLtlInfo_block_invoke", *(_DWORD *)(a1 + 48), 2);
        LbsOsaTrace_WriteLog(0x18u, __str, v32, 4, 1);
      }
    }
    GNS_XOInitCalInd(v52, &v59, &v51);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v33 = mach_continuous_time();
      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: XOInitCal Inj\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "Ga05_03InjectLtlInfo_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
    }
  }
}

void sub_22B8EE88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t ___ZN4gnss15GnssAdaptDevice20Ga05_03InjectLtlInfoERKN7GnssHal14ExtensionsOlaf7LtlInfoE_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 1040);
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga05_04GetPlatformType(gnss::GnssAdaptDevice *a1, unsigned __int8 *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Null Pltfm\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    return 0;
  }
  HalExtensions = gnss::GnssAdaptDevice::getHalExtensions(a1);
  unsigned int v5 = (*(uint64_t (**)(void *))(*(void *)HalExtensions + 120))(HalExtensions);
  if (v5 >= 5)
  {
    uint64_t v2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v10 = gnss::GnssAdaptDevice::getHalExtensions(a1);
    (*(void (**)(void *))(*(void *)v10 + 120))(v10);
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", v9);
    goto LABEL_9;
  }
  *(unsigned char *)uint64_t v2 = v5;
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v6 = mach_continuous_time();
  unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Platform Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "Ga05_04GetPlatformType", *(unsigned __int8 *)v2);
  uint64_t v2 = 1;
  LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
  return v2;
}

uint64_t gnss::GnssAdaptDevice::Ga05_06RegBbResetCallback(int a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BBReset Rsn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "Ga05_06RegBbResetCallback", a1);
    int IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v4, 4, 1);
  }
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (!DeviceInstance)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmBBReset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga05_06RegBbResetCallback", 1302);
    int v13 = 0;
    return LbsOsaTrace_WriteLog(0x18u, __str, v12, v13, 1);
  }
  uint64_t v6 = DeviceInstance;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga05_07HandleResetBbResetReq");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  unint64_t v9 = *(NSObject **)(v6 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice28Ga05_07HandleResetBbResetReqE19e_Gnm_BbResetReason_block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = v6;
  char v16 = a1;
  dispatch_async(v9, block);
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga05_07HandleResetBbResetReq");
    int v13 = 5;
    return LbsOsaTrace_WriteLog(0x18u, __str, v12, v13, 1);
  }
  return result;
}

void ___ZN4gnss15GnssAdaptDevice28Ga05_07HandleResetBbResetReqE19e_Gnm_BbResetReason_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  HalExtensions = gnss::GnssAdaptDevice::getHalExtensions(*(gnss::GnssAdaptDevice **)(a1 + 32));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
  gnss::GnssAdaptDevice::Ga07_23GetBbResetReasonStr(v3, __p);
  (*(void (**)(void *, uint64_t, void **))(*(void *)HalExtensions + 128))(HalExtensions, v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B8EEF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(gnss::GnssAdaptDevice *this)
{
  unsigned int v1 = atomic_load((unsigned int *)&gnss::GnssAdaptDevice::s_EnableInertialFusionSetting);
  if ((v1 & 1) == 0) {
    __assert_rtn("Ga05_08CheckIfInertialFusionShouldBeEnabled", "ga05GnssHalExtensions.cpp", 367, "settingIsSet && \"EnableInertialFusionSetting not set via extension prior to query\"");
  }
  return (v1 >> 1) & 1;
}

void std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::~__func()
{
  JUMPOUT(0x230F4E5D0);
}

void *std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26DF18900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26DF18900;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::destroy_deallocate(void *__p)
{
  operator delete(__p);
}

uint64_t std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(a1 + 8);

  return v2(a2);
}

uint64_t std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&),std::allocator<void (*)(GnssHal::ExtensionsOlaf::LtlInfo const&)>,void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(GnssHal::ExtensionsOlaf::LtlInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

size_t lsim04_02CloseOtherCpNiSessions(int a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim04_02CloseOtherCpNiSessions");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1 == 1 || a1 == 4 || a1 == 255)
  {
    unsigned int v6 = 0;
    char v7 = 1;
    do
    {
      char v8 = v7;
      if (!a2 || *a2 != v6)
      {
        __int16 v15 = 0;
        *(_DWORD *)__str = -1;
        int v14 = 0;
        if (lsim11_05GnmGetSessionInfo(v6, (int *)__str, &v14, (unsigned char *)&v15 + 1, 0, (char *)&v15))
        {
          if ((_BYTE)v15 && (a1 == 255 || !HIBYTE(v15)))
          {
            if ((v14 & 0xFFFFFFFE) == 2)
            {
              lsim03_18GnssPosnResultInd(*(int *)__str, 0, 1);
            }
            else if (v14 == 1)
            {
              lsim03_17GnssMeasResultInd(*(int *)__str, 0, 1);
            }
            lsim03_16AbortInd(*(int *)__str, 1, 0);
          }
        }
      }
      char v7 = 0;
      unsigned int v6 = 1;
    }
    while ((v8 & 1) != 0);
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
LABEL_20:
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim04_02CloseOtherCpNiSessions");
      return LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Categ,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim04_02CloseOtherCpNiSessions", 515, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result) {
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t lsim04_03CheckEmergencySessions(int a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim04_03CheckEmergencySessions");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  unsigned int v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    __int16 v19 = 0;
    if (lsim11_05GnmGetSessionInfo(v4, 0, 0, (unsigned char *)&v19 + 1, 0, (char *)&v19) && HIBYTE(v19))
    {
      BOOL v7 = a1 == 1;
      BOOL v8 = a1 != 2;
      if ((_BYTE)v19) {
        BOOL v7 = 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8 || v7)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Emergency Ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "lsim04_03CheckEmergencySessions");
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim04_03CheckEmergencySessions");
          LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
        }
        return 1;
      }
    }
    char v5 = 0;
    unsigned int v4 = 1;
  }
  while ((v6 & 1) != 0);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim04_03CheckEmergencySessions");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    return 0;
  }
  return result;
}

size_t lsim04_05CpCbInit(size_t result)
{
  unsigned int v1 = (void *)result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsCpCallback)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim04_05CpCbInit", 513);
      uint64_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsCpCallback = v1;
    return result;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim04_05CpCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_CpInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_CpInitialize", 235, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[3] = 2;
  *((void *)v2 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v2);
  return 1;
}

size_t GNS_ExecuteCpCb()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = (uint64_t (*)(void))g_GnsCpCallback;
  if (g_GnsCpCallback)
  {
    return v0();
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 87, "GNS_ExecuteCpCb", 258);
      return LbsOsaTrace_WriteLog(0xCu, __str, v3, 2, 1);
    }
  }
  return result;
}

uint64_t GNS_CpLocAbort(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = 1;
  if (!lsim03_14SendAbortInd(a1, 1))
  {
    uint64_t v2 = 2;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpAbort,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 87, "GNS_CpLocAbort", 257, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v4, 2, 1);
    }
  }
  return v2;
}

uint64_t GNS_CpLocReq(int a1, uint64_t a2, char a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = 1;
  if ((lsim03_13SendLocInfoReq(a1, a2, 1, a3) & 1) == 0)
  {
    uint64_t v4 = 2;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpLocReq,SId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 87, "GNS_CpLocReq", 515, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v6, 2, 1);
    }
  }
  return v4;
}

uint64_t GncP23_30HandleEaDataInd(uint64_t a1)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND EAType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP23_30HandleEaDataInd", *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    switch(*(_DWORD *)(a1 + 16))
    {
      case 1:
        unsigned int v4 = *(_DWORD *)(a1 + 104);
        if (v4 >= 2)
        {
          if (v4 == 2)
          {
            if (GncP23_22SetTunnelEndPt(a1 + 24)) {
              goto LABEL_100;
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v80 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaPos Type,%u\n", v80);
            goto LABEL_105;
          }
          goto LABEL_106;
        }
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x50uLL, 0, 0x50uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%hd,HeightAvl,%u,Height,%f,RmsH,%f,T,%u,Src,%u,SrcHash,0x%llX\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP23_11SetWgs84RefPos", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(__int16 *)(a1 + 64), *(unsigned __int8 *)(a1 + 66), *(double *)(a1 + 72), *(double *)(a1 + 80), *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92),
                 *(void *)(a1 + 96));
          LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
        }
        long long v7 = *(_OWORD *)(a1 + 48);
        long long v83 = *(_OWORD *)(a1 + 32);
        long long v84 = v7;
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        *(_WORD *)int v85 = *(_WORD *)(a1 + 64);
        v85[2] = *(unsigned char *)(a1 + 66);
        *(_OWORD *)&v85[8] = *(_OWORD *)(a1 + 72);
        uint64_t v88 = *(void *)(a1 + 96);
        unsigned int v8 = *(_DWORD *)(a1 + 88);
        if (v8 >= 5)
        {
          int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v8 = 0;
          if (IsLoggingAllowed)
          {
            bzero(__str, 0x410uLL);
            uint64_t v10 = mach_continuous_time();
            unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 88));
            LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
            unsigned int v8 = 0;
          }
        }
        unsigned int v86 = v8;
        uint64_t v12 = *(int *)(a1 + 92);
        if (v12 >= 0xC)
        {
          int v72 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          int v13 = 0;
          if (v72)
          {
            bzero(__str, 0x410uLL);
            uint64_t v73 = mach_continuous_time();
            unsigned __int16 v74 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Source,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "GNC", 87, "GncP23_11SetWgs84RefPos", 770, *(_DWORD *)(a1 + 92));
            LbsOsaTrace_WriteLog(8u, __str, v74, 2, 1);
            int v13 = 0;
          }
        }
        else
        {
          int v13 = dword_22BB0E234[v12];
        }
        int v87 = v13;
        if (GN_AGPS_Set_Ref_Pos((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:RefPos\n");
        goto LABEL_105;
      case 2:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:DMS,OsTime,%u,State,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNC", 68, "GncP23_12SetDevMotionState", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          LbsOsaTrace_WriteLog(8u, __str, v19, 5, 1);
        }
        unsigned int v20 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v20 >= 4)
        {
          int v21 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v20 = 0;
          if (v21)
          {
            bzero(__str, 0x410uLL);
            uint64_t v22 = mach_continuous_time();
            unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 28));
            LbsOsaTrace_WriteLog(8u, __str, v23, 2, 1);
            unsigned int v20 = 0;
          }
        }
        HIDWORD(__s) = v20;
        unsigned int v24 = *(_DWORD *)(a1 + 32);
        if (v24 >= 4)
        {
          int v25 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v24 = 0;
          if (v25)
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNC", 87, "GncP23_12SetDevMotionState", 770, *(_DWORD *)(a1 + 32));
            LbsOsaTrace_WriteLog(8u, __str, v27, 2, 1);
            unsigned int v24 = 0;
          }
        }
        LODWORD(v83) = v24;
        if (GN_ExtA_Set_Device_Motion_State((unsigned int *)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Dms\n");
        goto LABEL_105;
      case 3:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:UAC,OsTime,%u,Context,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 68, "GncP23_13SetUsrActCtxt", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          LbsOsaTrace_WriteLog(8u, __str, v30, 5, 1);
        }
        unsigned int v31 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v31 >= 0xC)
        {
          int v32 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v31 = 0;
          if (v32)
          {
            bzero(__str, 0x410uLL);
            uint64_t v33 = mach_continuous_time();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Context,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 28));
            LbsOsaTrace_WriteLog(8u, __str, v34, 2, 1);
            unsigned int v31 = 0;
          }
        }
        HIDWORD(__s) = v31;
        unsigned int v35 = *(_DWORD *)(a1 + 32);
        if (v35 >= 4)
        {
          int v36 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v35 = 0;
          if (v36)
          {
            bzero(__str, 0x410uLL);
            uint64_t v37 = mach_continuous_time();
            unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNC", 87, "GncP23_13SetUsrActCtxt", 770, *(_DWORD *)(a1 + 32));
            LbsOsaTrace_WriteLog(8u, __str, v38, 2, 1);
            unsigned int v35 = 0;
          }
        }
        LODWORD(v83) = v35;
        if (GN_ExtA_Set_User_Activity_Context((unsigned int *)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:UAC\n");
        goto LABEL_105;
      case 4:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0xCuLL, 0, 0xCuLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = mach_continuous_time();
          unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:FIV,OsTime,%u,Fiv,%u,Reliab,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "GNC", 68, "GncP23_14SetFixedInVehicle", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32));
          LbsOsaTrace_WriteLog(8u, __str, v40, 5, 1);
        }
        unsigned int v41 = *(_DWORD *)(a1 + 28);
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        if (v41 >= 4)
        {
          int v42 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v41 = 0;
          if (v42)
          {
            bzero(__str, 0x410uLL);
            uint64_t v43 = mach_continuous_time();
            unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Indication,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v43), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 28));
            LbsOsaTrace_WriteLog(8u, __str, v44, 2, 1);
            unsigned int v41 = 0;
          }
        }
        HIDWORD(__s) = v41;
        unsigned int v45 = *(_DWORD *)(a1 + 32);
        if (v45 >= 4)
        {
          int v46 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v45 = 0;
          if (v46)
          {
            bzero(__str, 0x410uLL);
            uint64_t v47 = mach_continuous_time();
            unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Reliability,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "GNC", 87, "GncP23_14SetFixedInVehicle", 770, *(_DWORD *)(a1 + 32));
            LbsOsaTrace_WriteLog(8u, __str, v48, 2, 1);
            unsigned int v45 = 0;
          }
        }
        LODWORD(v83) = v45;
        if (GN_ExtA_Set_Fixed_In_Vehicle((unsigned int *)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:FIV\n");
        goto LABEL_105;
      case 5:
        LODWORD(__s) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        GncP16_22UpdateStateAssistDataRcvd((unsigned int *)&__s);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v49 = mach_continuous_time();
          unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:SES,Severity,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "GNC", 68, "GncP23_15SetSigEnvSev", *(_DWORD *)(a1 + 24));
          LbsOsaTrace_WriteLog(8u, __str, v50, 5, 1);
        }
        unsigned int v51 = *(_DWORD *)(a1 + 24);
        if (v51 >= 8)
        {
          int v52 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          unsigned int v51 = 0;
          if (v52)
          {
            bzero(__str, 0x410uLL);
            uint64_t v53 = mach_continuous_time();
            unsigned __int16 v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigEnv,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNC", 87, "GncP23_15SetSigEnvSev", 770, *(_DWORD *)(a1 + 24));
            LbsOsaTrace_WriteLog(8u, __str, v54, 2, 1);
            unsigned int v51 = 0;
          }
        }
        if (GN_ExtA_Set_Sig_Env_Sev(v51)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:SES\n");
        goto LABEL_105;
      case 6:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x20uLL, 0, 0x20uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v55 = mach_continuous_time();
          unsigned __int16 v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:ALT,OsTime,%u,Alt,%f,RmsAlt,%f,Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "GNC", 68, "GncP23_16SetAltitudeAid", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(_DWORD *)(a1 + 48));
          LbsOsaTrace_WriteLog(8u, __str, v56, 5, 1);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        uint64_t v57 = *(int *)(a1 + 48);
        if (v57 >= 5)
        {
          int v69 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
          int v58 = 0;
          if (v69)
          {
            bzero(__str, 0x410uLL);
            uint64_t v70 = mach_continuous_time();
            unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Trust,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "GNC", 87, "GncP23_16SetAltitudeAid", 770, *(_DWORD *)(a1 + 48));
            LbsOsaTrace_WriteLog(8u, __str, v71, 2, 1);
            int v58 = 0;
          }
        }
        else
        {
          int v58 = dword_22BB0E264[v57];
        }
        LODWORD(v84) = v58;
        if (GN_ExtA_Set_Altitude((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
        goto LABEL_105;
      case 7:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x48uLL, 0, 0x48uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 1))
        {
          bzero(__str, 0x410uLL);
          uint64_t v59 = mach_continuous_time();
          unsigned __int16 v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:RPOS,OsTime,%u,Lat,%f,Long,%f,HeightAvl,%u,Height,%.2f,Dir,%.2f,Length,%.2f,Width,%.2f,Tunnel,%u,Freeway,%u,Railway,%u,OneWay,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "GNC", 68, "GncP23_17SetMapVectorSeg", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(unsigned __int8 *)(a1 + 90),
                  *(unsigned __int8 *)(a1 + 91));
          LbsOsaTrace_WriteLog(8u, __str, v60, 5, 1);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        *(void *)&long long v84 = *(void *)(a1 + 48);
        BYTE8(v84) = *(unsigned char *)(a1 + 56);
        *(_OWORD *)int v85 = *(_OWORD *)(a1 + 64);
        *(void *)&v85[16] = *(void *)(a1 + 80);
        unsigned int v86 = *(_DWORD *)(a1 + 88);
        LOBYTE(v87) = *(unsigned char *)(a1 + 92);
        if (GN_ExtA_Set_Map_Vector_Seg((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Mapv\n");
        goto LABEL_105;
      case 8:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v61 = mach_continuous_time();
          unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:SPDC,OsTime,%u,Dur,%u,SpdL,%.2f,SpdU,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "GNC", 68, "GncP23_18SetSpeedC", *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(double *)(a1 + 32), *(double *)(a1 + 40));
          LbsOsaTrace_WriteLog(8u, __str, v62, 5, 1);
        }
        uint64_t __s = *(void *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Speed_Constraint((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:SpeedC\n");
        goto LABEL_105;
      case 9:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v63 = mach_continuous_time();
          unsigned __int16 v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "GNC", 68, "GncP23_19SetAtVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          LbsOsaTrace_WriteLog(8u, __str, v64, 5, 1);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Along_Track_Vel((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Vel\n");
        goto LABEL_105;
      case 0xA:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v65 = mach_continuous_time();
          unsigned __int16 v66 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:HDNG,OsTime,%u,Heading,%.2f,RmsHeading,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v65), "GNC", 68, "GncP23_20SetHeading", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          LbsOsaTrace_WriteLog(8u, __str, v66, 5, 1);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_User_Heading((uint64_t)&__s)) {
          goto LABEL_100;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          goto LABEL_106;
        }
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Heading\n");
        goto LABEL_105;
      case 0xB:
        unsigned int v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        memset_s(&__s, 0x18uLL, 0, 0x18uLL);
        GncP16_22UpdateStateAssistDataRcvd(&v81);
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v67 = mach_continuous_time();
          unsigned __int16 v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:VEL,OsTime,%u,Vel,%.2f,RmsVel,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "GNC", 68, "GncP23_21SetVertVel", *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
          LbsOsaTrace_WriteLog(8u, __str, v68, 5, 1);
        }
        LODWORD(__s) = *(_DWORD *)(a1 + 24);
        long long v83 = *(_OWORD *)(a1 + 32);
        if (GN_ExtA_Set_Vertical_Vel((uint64_t)&__s))
        {
LABEL_100:
          int v75 = *(_DWORD *)(a1 + 12);
          int v76 = *(_DWORD *)(a1 + 16);
          int v77 = 1;
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:VertVel\n");
LABEL_105:
            LbsOsaTrace_WriteLog(8u, __str, v28, 2, 1);
          }
LABEL_106:
          int v75 = *(_DWORD *)(a1 + 12);
          int v76 = *(_DWORD *)(a1 + 16);
          int v77 = 0;
        }
        GncP23_01SendApiStatus(v75, v76, v77);
        break;
      default:
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          return 0;
        }
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaData Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 87, "GncP23_30HandleEaDataInd", 770, *(_DWORD *)(a1 + 16));
        int v16 = 2;
        goto LABEL_15;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP23_30HandleEaDataInd", 517);
    int v16 = 0;
LABEL_15:
    LbsOsaTrace_WriteLog(8u, __str, v15, v16, 1);
  }
  return 0;
}

uint64_t GncP23_22SetTunnelEndPt(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v8, 0, 48);
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EXTA:POS_TYPE,OsTime,%u,Lat,%f,Long,%f,RmsSMaj,%f,RmsSMin,%f,RmsSMajB,%d,HeightAvl,%d,Height,%f,RmsH,%f,PosType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "GncP23_22SetTunnelEndPt", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), *(double *)(a1 + 56), *(_DWORD *)(a1 + 80));
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  LODWORD(v8[0]) = *(_DWORD *)a1;
  *(_OWORD *)((char *)v8 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  WORD4(v8[2]) = *(_WORD *)(a1 + 40);
  BYTE10(v8[2]) = *(unsigned char *)(a1 + 42);
  v8[3] = *(_OWORD *)(a1 + 48);
  uint64_t v4 = GN_ExtA_Set_Tunnel_End_Point((uint64_t)v8);
  if ((v4 & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA TunnelEP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP23_22SetTunnelEndPt", 257);
    LbsOsaTrace_WriteLog(8u, __str, v6, 2, 1);
  }
  return v4;
}

void GncP23_01SendApiStatus(int a1, int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned __int16 v6 = gnssOsa_Calloc("GncP23_01SendApiStatus", 40, 1, 0x18uLL);
  if (v6)
  {
    long long v7 = v6;
    v6[4] = a2;
    v6[5] = a3;
    v6[3] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EAAPI_IND =>LSIM Api,%u,ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "GncP23_01SendApiStatus", v7[4], v7[3]);
      LbsOsaTrace_WriteLog(8u, __str, v9, 5, 1);
    }
    AgpsSendFsmMsg(134, 131, 8782083, v7);
  }
}

size_t Hal08_SetGizar2AvaialbleBuffers(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  byte_26AE6C9E1 = a1;
  g_FastPatchContext = a1 >> 1;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Maxsize,%u,fwslots,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal08_SetAvailableTxSlots", 2034, g_FastPatchContext);
    return LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  return result;
}

uint64_t Hal08_HandleSingleAck(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!qword_26AE6C9F0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v33 = a1;
    uint64_t v35 = a2;
    uint64_t v29 = a3;
    uint64_t v31 = a4;
    int v16 = "%10u %s%c %s: cntxt,null,BlockID,%u,Status,%u,CPU,%c,PatchType,%c\n";
LABEL_11:
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, v16, v15, "HAL", 69, "Hal08_HandleSingleAck", v29, v31, v33, v35, v36);
    return LbsOsaTrace_WriteLog(0xDu, __str, v17, 0, 1);
  }
  if ((unsigned __int16)word_26AE6C9E8 <= a3)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v28 = 514;
    uint64_t v30 = a3;
    unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v14 = "%10u %s%c %s: #%04hx BlockID,%u\n";
LABEL_14:
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, v14, v27, "HAL", 69, "Hal08_HandleSingleAck", v28, v30, v32, v34, v36);
    return LbsOsaTrace_WriteLog(0xDu, __str, v17, 0, 1);
  }
  int v8 = 79;
  int v9 = 80;
  switch(g_HalState)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
      if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0)) {
        goto LABEL_7;
      }
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx state,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 87, "Hal08_GetHalStateDetails", 262, g_HalState);
      int v12 = 2;
      goto LABEL_6;
    case 4:
      int v8 = 80;
      goto LABEL_22;
    case 5:
      int v8 = 70;
      goto LABEL_22;
    case 6:
      int v8 = 80;
      goto LABEL_21;
    case 7:
      goto LABEL_22;
    case 8:
      int v8 = 70;
LABEL_21:
      int v9 = 77;
LABEL_22:
      if (v9 != a1) {
        goto LABEL_38;
      }
      if (a4 == 32 && v8 == a2)
      {
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Resp BlockID,%u,Status,%u,CPU,%c,PatchType,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "HAL", 68, "Hal08_HandleSingleAck", a3, 32, a1, a2);
          uint64_t result = LbsOsaTrace_WriteLog(0xDu, __str, v19, 5, 1);
        }
        int v20 = *(_DWORD *)(qword_26AE6C9F0 + 4 * a3);
        if (v20 == 2)
        {
          *(_DWORD *)(qword_26AE6C9F0 + 4 * a3) = 3;
          goto LABEL_45;
        }
        if (v20 == 1)
        {
          *(_DWORD *)(qword_26AE6C9F0 + 4 * a3) = 3;
          if (a3) {
            return result;
          }
LABEL_45:
          uint64_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
          if ((result & 1) == 0)
          {
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
            if (result)
            {
              bzero(__str, 0x410uLL);
              unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              uint64_t v28 = 1542;
              uint64_t v30 = *__error();
              unint64_t v27 = v25;
              uint64_t v14 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
              goto LABEL_14;
            }
          }
          return result;
        }
LABEL_42:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        uint64_t v28 = 1288;
        unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v14 = "%10u %s%c %s: #%04hx Incorrect ACK status\n";
        goto LABEL_14;
      }
      if (a4 == 32 || v8 != a2)
      {
LABEL_38:
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        if (!result) {
          return result;
        }
        bzero(__str, 0x410uLL);
        unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v35 = a1;
        uint64_t v36 = a2;
        uint64_t v31 = a3;
        uint64_t v33 = a4;
        uint64_t v29 = 1288;
        int v16 = "%10u %s%c %s: #%04hx Rsp Block ID,%u Status,%u,CPU,%c,PatchType,%c\n";
        goto LABEL_11;
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BlockID,%u,Status,%u,CPU,%c,PatchType,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 69, "Hal08_HandleSingleAck", 1288, a3, a4, a1, a2);
        uint64_t result = LbsOsaTrace_WriteLog(0xDu, __str, v22, 0, 1);
      }
      int v23 = *(_DWORD *)(qword_26AE6C9F0 + 4 * a3);
      if (v23 != 2)
      {
        if (v23 == 1)
        {
          *(_DWORD *)(qword_26AE6C9F0 + 4 * a3) = 4;
          return result;
        }
        goto LABEL_42;
      }
      *(_DWORD *)(qword_26AE6C9F0 + 4 * a3) = 4;
      uint64_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
      if ((result & 1) == 0)
      {
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          unint64_t v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v28 = 1542;
          uint64_t v30 = *__error();
          unint64_t v27 = v26;
          uint64_t v14 = "%10u %s%c %s: #%04hx AvailableBufReset,%d\n";
          goto LABEL_14;
        }
      }
      return result;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx state,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "HAL", 69, "Hal08_GetHalStateDetails", 515, g_HalState);
        int v12 = 0;
LABEL_6:
        LbsOsaTrace_WriteLog(0xDu, __str, v11, v12, 1);
      }
LABEL_7:
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (!result) {
        return result;
      }
      bzero(__str, 0x410uLL);
      uint64_t v28 = 262;
      unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v14 = "%10u %s%c %s: #%04hx\n";
      goto LABEL_14;
  }
}

uint64_t Hal08_FastPatchDnld(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (g_FastPatchContext)
  {
    unsigned int v5 = 1;
    unsigned int v6 = a3 - 79;
    long long v7 = &unk_26AE6C000;
    unsigned int v57 = a3 - 79;
    while (1)
    {
      unsigned int v58 = 0;
      if ((int)a3 <= 101)
      {
        if (v6 >= 2 && a3 != 70)
        {
LABEL_19:
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v10 = mach_continuous_time();
            unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PatchType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "Hal08_PatchCodeGetLength", 515, a3);
            LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
          }
        }
        v7[633] = 0;
LABEL_44:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v21 = mach_continuous_time();
          unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx size\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "HAL", 69, "Hal08_CreatePatchList", 513);
          LbsOsaTrace_WriteLog(0xDu, __str, v22, 0, 1);
        }
        uint64_t v23 = 4294967291;
        goto LABEL_47;
      }
      switch(a3)
      {
        case 'f':
          if (a2 == 80)
          {
            int v9 = &qword_26AE6CA00;
          }
          else
          {
            if (a2 != 77)
            {
              unsigned int v8 = 0;
              break;
            }
            int v9 = &qword_26AE6CA18;
          }
          ((void (*)(char *, void, uint64_t))*v9)(__str, 0, 30);
          if (__str[0] <= 2u && __str[1] == 0 && __str[2] == 2) {
            unsigned int v8 = v61;
          }
          else {
            unsigned int v8 = 4 * v62;
          }
          break;
        case 'p':
          unsigned int v8 = dword_26AE6CA50;
          if (a2 != 80) {
            unsigned int v8 = 0;
          }
          if (a2 == 77) {
            unsigned int v8 = dword_26AE6CA5C;
          }
          break;
        case 'o':
          unsigned int v8 = dword_26AE6CA70;
          break;
        default:
          goto LABEL_19;
      }
      v7[633] = v8;
      if (!v8) {
        goto LABEL_44;
      }
      if (v8 % 0x7F2) {
        __int16 v14 = v8 / 0x7F2 + 1;
      }
      else {
        __int16 v14 = v8 / 0x7F2;
      }
      word_26AE6C9E8 = v14;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: size,%u,blocks,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 73, "Hal08_PreparePatchList", dword_26AE6C9E4, (unsigned __int16)word_26AE6C9E8);
        LbsOsaTrace_WriteLog(0xDu, __str, v16, 4, 1);
      }
      unsigned __int16 v17 = gnssOsa_Calloc("Hal08_PreparePatchList", 109, (unsigned __int16)word_26AE6C9E8, 4uLL);
      qword_26AE6C9F0 = (uint64_t)v17;
      if (!v17)
      {
        uint64_t v23 = 4294967294;
        goto LABEL_47;
      }
      if (!word_26AE6C9E8)
      {
        uint64_t v23 = 0xFFFFFFFFLL;
        goto LABEL_47;
      }
      bzero(v17, 4 * (unsigned __int16)word_26AE6C9E8);
      Hal08_GetPatchPacket((uint64_t)v59, 0, a2, a3, &v58, 0);
      uint64_t v18 = v58;
      if (a3 != 102)
      {
        if (a3 == 112)
        {
          if (a2 != 77)
          {
            if (a2 == 80) {
              g_HalState = 4;
            }
            goto LABEL_61;
          }
          unsigned __int16 v19 = &g_Crc32_RemTable[230];
          int v20 = 6;
        }
        else
        {
          unsigned __int16 v19 = g_Crc32_RemTable + 920;
          int v20 = 7;
        }
        goto LABEL_60;
      }
      if (a2 == 77)
      {
        unsigned __int16 v19 = g_Crc32_RemTable + 920;
        int v20 = 8;
        goto LABEL_60;
      }
      if (a2 == 80)
      {
        unsigned __int16 v19 = g_Crc32_RemTable + 920;
        int v20 = 5;
LABEL_60:
        v19[244] = v20;
      }
LABEL_61:
      if ((int)Hal22_ZxSendToChip((unsigned __int8 *)v59, (unsigned __int16)(v18 + 14)) <= 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx 1stBlk\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "HAL", 69, "Hal08_SingleAckPatchDnld", 1288);
          LbsOsaTrace_WriteLog(0xDu, __str, v29, 0, 1);
        }
        if (qword_26AE6C9F0) {
          free((void *)qword_26AE6C9F0);
        }
        LODWORD(v27) = 0;
        qword_26AE6C9F0 = 0;
        dword_26AE6C9E4 = 0;
        word_26AE6C9E8 = 0;
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BlkId,%u Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "HAL", 68, "Hal08_SingleAckPatchDnld", 0);
        LODWORD(v27) = 1;
        LbsOsaTrace_WriteLog(0xDu, __str, v26, 5, 1);
      }
      else
      {
        LODWORD(v27) = 1;
      }
      char v30 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
      if (v30 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v47 = mach_continuous_time();
          unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx 1stBlk\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "HAL", 69, "Hal08_SingleAckPatchDnld", 1543);
          LbsOsaTrace_WriteLog(0xDu, __str, v48, 0, 1);
        }
        unsigned int v6 = v57;
        long long v7 = (_DWORD *)&unk_26AE6C000;
        if (qword_26AE6C9F0) {
          free((void *)qword_26AE6C9F0);
        }
        qword_26AE6C9F0 = 0;
        dword_26AE6C9E4 = 0;
        uint64_t v23 = 4294967287;
      }
      else if (v30)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v49 = mach_continuous_time();
          unsigned __int16 v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx 1stBlk\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "HAL", 69, "Hal08_SingleAckPatchDnld", 1541);
          LbsOsaTrace_WriteLog(0xDu, __str, v50, 0, 1);
        }
        unsigned int v6 = v57;
        long long v7 = (_DWORD *)&unk_26AE6C000;
        if (qword_26AE6C9F0) {
          free((void *)qword_26AE6C9F0);
        }
        qword_26AE6C9F0 = 0;
        dword_26AE6C9E4 = 0;
        uint64_t v23 = 4294967285;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 1stBlk success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "HAL", 68, "Hal08_SingleAckPatchDnld");
          LbsOsaTrace_WriteLog(0xDu, __str, v32, 5, 1);
        }
        unsigned int v33 = (unsigned __int16)word_26AE6C9E8;
        if (v27 < (unsigned __int16)word_26AE6C9E8)
        {
          do
          {
            if (g_FastPatchContext && (unsigned __int16)v27 < (unsigned __int16)v33)
            {
              unint64_t v27 = (unsigned __int16)v27;
              unsigned int v34 = 1;
              while (1)
              {
                Hal08_GetPatchPacket((uint64_t)v59, (unsigned __int16)v27, a2, a3, &v58, v18);
                if (v34 == g_FastPatchContext || v27 + 1 == (unsigned __int16)word_26AE6C9E8) {
                  *(_DWORD *)(qword_26AE6C9F0 + 4 * v27) = 2;
                }
                uint64_t v18 = v58 + v18;
                if ((int)Hal22_ZxSendToChip((unsigned __int8 *)v59, (unsigned __int16)(v58 + 14)) <= 0) {
                  break;
                }
                if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v35 = mach_continuous_time();
                  unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BlkId,%u Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "HAL", 68, "Hal08_SingleAckPatchDnld", v27);
                  LbsOsaTrace_WriteLog(0xDu, __str, v36, 5, 1);
                }
                ++v27;
                if (v34 < g_FastPatchContext)
                {
                  ++v34;
                  if (v27 < (unsigned __int16)word_26AE6C9E8) {
                    continue;
                  }
                }
                goto LABEL_92;
              }
              if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v37 = mach_continuous_time();
                unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PatchID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "HAL", 69, "Hal08_SingleAckPatchDnld", 1282, v27);
                LbsOsaTrace_WriteLog(0xDu, __str, v38, 0, 1);
              }
              if (qword_26AE6C9F0) {
                free((void *)qword_26AE6C9F0);
              }
              qword_26AE6C9F0 = 0;
              dword_26AE6C9E4 = 0;
              word_26AE6C9E8 = 0;
            }
LABEL_92:
            char v39 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1F4u);
            if (v39 == 1)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                unint64_t v43 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                int v44 = 1543;
                goto LABEL_100;
              }
            }
            else if (v39)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                unint64_t v43 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                int v44 = 1541;
LABEL_100:
                size_t v41 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v43, "HAL", 69, "Hal08_SingleAckPatchDnld", v44);
                int v42 = 0;
LABEL_101:
                LbsOsaTrace_WriteLog(0xDu, __str, v41, v42, 1);
              }
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v40 = mach_continuous_time();
              size_t v41 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: OK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "HAL", 68, "Hal08_SingleAckPatchDnld");
              int v42 = 5;
              goto LABEL_101;
            }
            unsigned int v33 = (unsigned __int16)word_26AE6C9E8;
          }
          while ((unsigned __int16)word_26AE6C9E8 > (unsigned __int16)v27);
        }
        if (!v33)
        {
          if (qword_26AE6C9F0) {
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        unsigned int v6 = v57;
        long long v7 = (_DWORD *)&unk_26AE6C000;
        if (*(_DWORD *)qword_26AE6C9F0 == 3)
        {
          unint64_t v45 = 0;
          while (v33 - 1 != v45)
          {
            int v46 = *(_DWORD *)(qword_26AE6C9F0 + 4 + 4 * v45++);
            if (v46 != 3)
            {
              if (v45 >= v33) {
                break;
              }
              goto LABEL_109;
            }
          }
LABEL_127:
          free((void *)qword_26AE6C9F0);
LABEL_128:
          uint64_t v23 = 0;
          qword_26AE6C9F0 = 0;
          dword_26AE6C9E4 = 0;
          word_26AE6C9E8 = 0;
          return v23;
        }
LABEL_109:
        free((void *)qword_26AE6C9F0);
        qword_26AE6C9F0 = 0;
        dword_26AE6C9E4 = 0;
        uint64_t v23 = 4294967283;
      }
      word_26AE6C9E8 = 0;
LABEL_47:
      if (v5++ >= 3)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(v59, 0x410uLL);
          uint64_t v52 = mach_continuous_time();
          unsigned __int16 v53 = snprintf(v59, 0x40FuLL, "%10u %s%c %s: #%04hx retries,%u,CPU,%c,PatchType,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v52), "HAL", 69, "Hal08_FastPatchDnld", 1288, 4, a2, a3);
          LbsOsaTrace_WriteLog(0xDu, v59, v53, 0, 1);
        }
        return v23;
      }
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(v59, 0x410uLL);
    uint64_t v54 = mach_continuous_time();
    unsigned __int16 v55 = snprintf(v59, 0x40FuLL, "%10u %s%c %s: #%04hx zero fwslot\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "HAL", 69, "Hal08_FastPatchDnld", 515);
    LbsOsaTrace_WriteLog(0xDu, v59, v55, 0, 1);
  }
  return 4294967283;
}

double Hal08_InitPatchesCode(void)
{
  memset_s(&qword_26AE6C9F8, 0x88uLL, 0, 0x88uLL);
  int v0 = xmmword_26AE023AC;
  int v1 = DWORD1(xmmword_26AE023AC);

  return Register_PatchFunc((uint64_t)&qword_26AE6C9F8, v0, v1);
}

uint64_t Hal08_GetPatchPacket(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned __int16 v9 = dword_26AE6C9E4 - a6;
  if ((dword_26AE6C9E4 - a6) > 0x7F1) {
    unsigned __int16 v9 = 2034;
  }
  uint64_t v10 = v9;
  __int16 v11 = v9 + 5;
  *(_WORD *)a1 = 30842;
  *(unsigned char *)(a1 + 2) = 66;
  *(unsigned char *)(a1 + 3) = a4;
  *(unsigned char *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 5) = v11;
  *(unsigned char *)(a1 + 7) = a3 + a4 + v11 + ((unsigned __int16)(v11 & 0xFF00) >> 8) + 66;
  *(unsigned char *)(a1 + 8) = a2;
  int v12 = (unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 9) = BYTE1(a2);
  *(unsigned char *)(a1 + 10) = 0;
  if (a4 <= 101)
  {
    if ((a4 - 79) >= 2 && a4 != 70)
    {
LABEL_17:
      if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
        goto LABEL_27;
      }
      bzero(__str, 0x410uLL);
      unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx default type,%u\n", v19);
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  uint64_t v13 = a1 + 11;
  if (a4 == 102)
  {
    if (a3 == 77)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))qword_26AE6CA18)(v13, a6, v10);
      goto LABEL_27;
    }
    if (a3 == 80)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))qword_26AE6CA00)(v13, a6, v10);
      goto LABEL_27;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      goto LABEL_27;
    }
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ssf CPUtype,%u\n", v20);
LABEL_26:
    LbsOsaTrace_WriteLog(0xDu, __str, v14, 0, 1);
    goto LABEL_27;
  }
  if (a4 != 112)
  {
    if (a4 == 111)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))off_26AE6CA38)(v13, a6, v10);
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (a3 == 77)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))qword_26AE6CA10)(v13, a6, v10);
    goto LABEL_27;
  }
  if (a3 == 80)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))qword_26AE6C9F8)(v13, a6, v10);
    goto LABEL_27;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ptc CPUtype,%u\n", v21);
    goto LABEL_26;
  }
LABEL_27:
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Data,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "HAL", 68, "Hal08_GetPatchPacket", v10);
    LbsOsaTrace_WriteLog(0xDu, __str, v16, 5, 1);
  }
  uint64_t result = Hal04_ComputeChecksum(v12, (unsigned __int16)(v10 + 3));
  uint64_t v18 = a1 + v10;
  *(_WORD *)(v18 + 11) = result;
  *(unsigned char *)(v18 + 13) = 10;
  *a5 = v10;
  *(_DWORD *)(qword_26AE6C9F0 + 4 * a2) = 1;
  return result;
}

unint64_t NK_Get_Ext_Meas(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  unsigned int v8 = (unsigned char *)(a5 + 7174);
  uint64_t v9 = a4 + 25004;
  uint64_t v10 = a4 + 24096;
  uint64_t v11 = a4 + 22992;
  unsigned int v142 = 0;
  if ((*(_DWORD *)(a5 + 20) - 5) < 4)
  {
    EvLog("NK_Get_Ext_Meas: Ext Ref Pos and Alt Assist skipped in Airborne mode");
    goto LABEL_222;
  }
  double v141 = 0.0;
  __int16 v140 = 0;
  int v138 = 0;
  int v139 = 0;
  if (Core_Get_Pos_LLH(a1, 150000, 0, (int *)&v142, (uint64_t)&v148, (uint64_t)&v145, (uint64_t *)&v141, (unsigned char *)&v140 + 1, &v140, &v139, &v138))
  {
    unsigned int v12 = v142;
    unsigned int v13 = a1 - v142;
    *(_DWORD *)(v10 + 724) = a1 - v142;
    if (v139 == 7)
    {
      *(unsigned char *)(v9 + 16) = 1;
      *(_DWORD *)(v9 + 28) = v13;
      if (HIBYTE(v140))
      {
        *(unsigned char *)(v9 + 32) = 1;
        *(_DWORD *)(v9 + 44) = v13;
      }
    }
    unsigned int v14 = v138 - 3;
    BOOL v15 = (v138 - 3) < 2;
    if (!*(unsigned char *)(a4 + 960)) {
      goto LABEL_29;
    }
    double v16 = v145;
    if (v145 <= 4.0e10 && v14 <= 1)
    {
      uint64_t v132 = v10;
      unsigned __int16 v17 = (_DWORD *)(a5 + 11048);
      int v134 = 1;
      int v135 = 1;
      int v18 = 1;
      goto LABEL_40;
    }
    double v23 = *(double *)(a4 + 800);
    __double2 v24 = __sincos_stret(v23);
    double v25 = 1.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
    double v26 = *(double *)(a4 + 816);
    double v27 = v24.__cosval * (v26 + v25 * 6378137.0);
    if (v27 < 1.0) {
      double v27 = 1.0;
    }
    double v28 = (v23 - *(double *)&v148) * (v26 + v25 * (v25 * v25) * 6335439.33);
    double v29 = (*(double *)(a4 + 808) - *((double *)&v148 + 1))
        * v27
        * ((*(double *)(a4 + 808) - *((double *)&v148 + 1))
         * v27)
        + v28 * v28;
    if (v16 > 4.0e10 && v29 < fmax(v16 * 9.0, 4.0e10))
    {
      *(_DWORD *)(v9 + 20) = 23;
      goto LABEL_12;
    }
    if (*(_DWORD *)(a4 + 968) != 1)
    {
LABEL_29:
      int v18 = 1;
      goto LABEL_30;
    }
    BOOL v30 = v14 >= 2;
    int v18 = 1;
    if (!v30)
    {
LABEL_30:
      if (*(_DWORD *)(a5 + 11048) && !v15) {
        goto LABEL_133;
      }
      int v134 = v15;
      int v135 = v18;
      uint64_t v132 = v10;
      unsigned __int16 v17 = (_DWORD *)(a5 + 11048);
      unsigned int v12 = v142;
LABEL_40:
      unsigned int v32 = a1 - v12;
      if ((int)(a1 - v12) >= 0) {
        unsigned int v33 = a1 - v12;
      }
      else {
        unsigned int v33 = v12 - a1;
      }
      if (v33 < 0x3E8 || v12 - *(_DWORD *)(a5 + 7244) - 1000 <= 0xFFFFF830)
      {
        *(_OWORD *)(a5 + 7224) = 0u;
        *(_DWORD *)(a5 + 7240) = a1;
        *(_DWORD *)(a5 + 7244) = v12;
        double v34 = 0.0;
        double v35 = 0.0;
        if (v33 < 0x3E8) {
          goto LABEL_70;
        }
      }
      if (*(_DWORD *)(a4 + 964) == 3)
      {
        double v36 = *(double *)(a4 + 24712);
        if (v36 <= 3.0)
        {
          double v56 = *(double *)(a4 + 944);
          double v42 = v56 + v36 * 3.0;
          double v44 = 5.0;
          if (*(double *)(a4 + 24728) <= 3.0)
          {
            double v57 = *(double *)(a4 + 24720);
            if (v57 <= 3.0)
            {
              double v58 = *(double *)(a4 + 936) * *(double *)(a4 + 936) - v56 * v56;
              double v59 = sqrt(v58) + v57 * 3.0;
              BOOL v60 = v58 < 0.0;
              double v44 = 5.0;
              if (!v60) {
                double v44 = v59;
              }
            }
          }
          goto LABEL_65;
        }
      }
      uint64_t v37 = v17;
      int ExtA_UAC = Core_Get_ExtA_UAC(120000, (uint64_t)v143);
      int v39 = *(unsigned __int8 *)(p_NA + 319);
      if (*(unsigned char *)(p_NA + 319))
      {
        unsigned int v40 = *(_DWORD *)(p_NA + 19388);
        if (!*(unsigned char *)(v9 + 72))
        {
          *(unsigned char *)(v9 + 64) = v39;
          *(unsigned char *)(v9 + 72) = v39;
        }
        if (DWORD2(v143[0]) == 3) {
          char v41 = ExtA_UAC;
        }
        else {
          char v41 = 0;
        }
        if ((v41 & 1) == 0)
        {
          if (v40 >= 8) {
            __assert_rtn("NK_Get_Ext_Meas", "NK_Get_Ext_Meas.cpp", 451, "FALSE");
          }
          double v42 = dbl_22BB0E338[v40];
          goto LABEL_64;
        }
      }
      else
      {
        if (DWORD2(v143[0]) == 3) {
          int v43 = ExtA_UAC;
        }
        else {
          int v43 = 0;
        }
        if (v43 != 1)
        {
LABEL_63:
          double v42 = 45.0;
LABEL_64:
          double v44 = 5.0;
          unsigned __int16 v17 = v37;
LABEL_65:
          signed int v45 = *(_DWORD *)(a5 + 7240);
          if (v45)
          {
            int v46 = a1 - v45;
            if (v46 < 0) {
              int v46 = -v46;
            }
            signed int v45 = v46 / 0x3E8u;
          }
          double v35 = *(double *)(a5 + 7224) + v42 * (double)v45;
          *(double *)(a5 + 7224) = v35;
          double v34 = *(double *)(a5 + 7232) + v44 * (double)v45;
          *(double *)(a5 + 7232) = v34;
          *(_DWORD *)(a5 + 7240) = a1;
LABEL_70:
          double v47 = dbl_22BB0E2E0[v139 == 7];
          int v48 = *(_DWORD *)(a4 + 968);
          if (!v48) {
            double v47 = 5400.0;
          }
          if (v35 > v47)
          {
            HIBYTE(v140) = 0;
            if (v18 != 1)
            {
              uint64_t v10 = v132;
LABEL_132:
              BOOL v15 = v134;
              goto LABEL_133;
            }
            int v49 = 0;
            *(_DWORD *)(v9 + 20) = 24;
            *(_DWORD *)(v9 + 36) = 24;
            double v50 = 0.0;
            uint64_t v10 = v132;
            goto LABEL_111;
          }
          if (v139 == 7)
          {
            double v51 = v35 * v35;
            if (v48)
            {
              uint64_t v10 = v132;
              BOOL v15 = v134;
            }
            else
            {
              uint64_t v10 = v132;
              BOOL v15 = v134;
              if (v138 != 4 && (v138 != 3 || *(int *)(a4 + 12) <= 7)) {
                double v51 = fmax(v51, 4356.0);
              }
            }
            double v50 = v34 * v34;
            if (*(_DWORD *)(a5 + 20) < 5u) {
              double v50 = v50 * 0.444444444;
            }
            if (!v135)
            {
              int v49 = 0;
              goto LABEL_115;
            }
            double v52 = v146;
            goto LABEL_108;
          }
          double v52 = v146;
          double v53 = (double)(225 * v33 / 0x3E8 * (v33 / 0x3E8));
          uint64_t v10 = v132;
          if (v146 < v53)
          {
            double v52 = v145;
            double v146 = v145;
            if (v145 < v53)
            {
              double v145 = v53;
              double v146 = v53;
              double v52 = v53;
            }
            uint64_t v147 = 0;
          }
          if (v140 > 1u)
          {
            double v50 = 0.0;
            if (v135)
            {
              double v51 = 0.0;
LABEL_107:
              BOOL v15 = v134;
LABEL_108:
              uint64_t v61 = v147;
              double v62 = v51 + v145;
              double v63 = v52 + v51;
              *(_OWORD *)(v11 + 24) = v148;
              double v145 = v62;
              double v146 = v63;
              *(unsigned char *)uint64_t v11 = 1;
              *(_DWORD *)(v11 + 20) = v142;
              int v64 = v138;
              *(_DWORD *)(v11 + 4) = v18;
              *(_DWORD *)(v11 + 8) = v64;
              *(double *)(a4 + 23040) = v62;
              *(double *)(a4 + 23048) = v63;
              *(void *)(a4 + 23056) = v61;
              if (v48 || (double v65 = 4.0, v15) && *(_DWORD *)(a5 + 11032) <= 0x18u) {
                double v65 = 25.0;
              }
              *(double *)(a4 + 23096) = v65;
              *(_DWORD *)(v11 + 12) = v140;
              int v49 = 1;
LABEL_115:
              unsigned int v66 = v142;
              if (HIBYTE(v140))
              {
                double v67 = v50 + v141;
                double v141 = v67;
                *(unsigned char *)(v11 + 128) = 1;
                int v68 = v138;
                *(_DWORD *)(v11 + 148) = v66;
                *(_DWORD *)(v11 + 132) = v18;
                *(_DWORD *)(v11 + 136) = v68;
                *(double *)(a4 + 23144) = v149;
                *(double *)(a4 + 23152) = v67;
                *(void *)(a4 + 23176) = 0x4039000000000000;
                *(_DWORD *)(v11 + 140) = v140;
              }
              if (!v66) {
                int v49 = 0;
              }
              if (v49 != 1 || *v17 && *(unsigned char *)(a4 + 960)) {
                goto LABEL_133;
              }
              double v69 = fmax(v145 * 9.0, 4.0e10);
              double v70 = Horiz_Diff_Sqd((double *)(a4 + 800), (const double *)(v11 + 24));
              if (v70 <= v69)
              {
                int v71 = *(unsigned __int8 *)(a4 + 960);
              }
              else
              {
                int v71 = 0;
                *(unsigned char *)(a4 + 960) = 0;
              }
              if (v70 > 40000.0 && !v71)
              {
                *(_OWORD *)(a4 + 800) = *(_OWORD *)(v11 + 24);
                if (HIBYTE(v140)) {
                  *(void *)(a4 + 816) = *(void *)(a4 + 23144);
                }
                Geo2ECEF(a4 + 800, (uint64_t)&WGS84_Datum, (double *)(a4 + 664));
                NK_Transform_State(a4 + 624);
                if (*(_DWORD *)(a5 + 140))
                {
                  BOOL v15 = v134;
                  if (!*(unsigned char *)(a5 + 128))
                  {
                    *(unsigned char *)(a5 + 128) = 1;
                    *(_DWORD *)(a5 + 132) = 94;
                  }
                  goto LABEL_133;
                }
              }
              goto LABEL_132;
            }
          }
          else
          {
            uint64_t v54 = *(int *)(a5 + 20);
            if (v54 > 8) {
              double v55 = 100.0;
            }
            else {
              double v55 = dbl_22BB0E378[v54];
            }
            double v50 = v55 * (double)(int)(v32 * v32);
            if (v140 == 1) {
              double v50 = v50 * 0.5;
            }
            if (v135)
            {
              double v51 = v50;
              goto LABEL_107;
            }
          }
          int v49 = 0;
LABEL_111:
          BOOL v15 = v134;
          goto LABEL_115;
        }
        unsigned int v40 = 0;
      }
      double v42 = 54.0;
      switch(DWORD1(v143[0]))
      {
        case 0:
        case 1:
        case 9:
          goto LABEL_63;
        case 2:
          double v42 = 2.4;
          goto LABEL_64;
        case 3:
        case 5:
          double v42 = 10.0;
          if (!v39) {
            goto LABEL_64;
          }
          signed int v78 = v40 - 5;
          if (v40 - 5 >= 3) {
            goto LABEL_64;
          }
          long long v79 = (double *)&unk_22BB0E308;
          goto LABEL_171;
        case 4:
          double v42 = 4.6;
          goto LABEL_64;
        case 6:
          double v42 = 16.9;
          if (!v39) {
            goto LABEL_64;
          }
          goto LABEL_166;
        case 7:
          double v42 = 30.0;
          if (!v39) {
            goto LABEL_64;
          }
LABEL_166:
          signed int v78 = v40 - 5;
          if (v40 - 5 >= 3) {
            goto LABEL_64;
          }
          long long v79 = (double *)&unk_22BB0E320;
LABEL_171:
          double v42 = v79[v78];
          break;
        case 8:
          double v42 = 45.0;
          if (!v39) {
            goto LABEL_64;
          }
          signed int v78 = v40 - 5;
          if (v40 - 5 >= 3) {
            goto LABEL_64;
          }
          long long v79 = (double *)&unk_22BB0E2F0;
          goto LABEL_171;
        case 0xA:
        case 0xB:
          goto LABEL_64;
        default:
          __assert_rtn("NK_Get_Ext_Meas", "NK_Get_Ext_Meas.cpp", 436, "FALSE");
      }
      goto LABEL_64;
    }
    if (v29 >= 22500.0)
    {
      if (v29 >= 9000000.0)
      {
        BOOL v15 = 0;
        goto LABEL_30;
      }
      int v31 = 3;
    }
    else
    {
      int v31 = 4;
    }
    uint64_t v132 = v10;
    int v138 = v31;
    if (v16 > v29) {
      double v29 = v16;
    }
    double v145 = v29;
    unsigned __int16 v17 = (_DWORD *)(a5 + 11048);
    int v134 = 1;
    int v135 = 1;
    goto LABEL_40;
  }
  BOOL v15 = (v138 - 3) < 2;
LABEL_12:
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    unsigned int v12 = *(_DWORD *)(a5 + 11056);
    if (v12)
    {
      unsigned int v142 = *(_DWORD *)(a5 + 11056);
      double v149 = *(double *)(a5 + 11080);
      long long v148 = *(_OWORD *)(a5 + 11064);
      int v19 = *(_DWORD *)a4 - v12;
      if (v19 >= -999)
      {
        if (v19 > 3599999)
        {
          double v22 = 4000.0;
          double v21 = 200000.0;
        }
        else
        {
          double v20 = (double)(v19 / 1000) * 0.000277777778;
          double v21 = v20 * 30000.0 + 400.0;
          double v22 = v20 * 400.0 + 400.0;
          unsigned int v142 = a1;
          unsigned int v12 = a1;
        }
        uint64_t v132 = v10;
        double v145 = v21 * v21;
        double v146 = v21 * v21;
        uint64_t v147 = 0;
        double v141 = v22 * v22;
        int v138 = 3;
        int v18 = 2;
        __int16 v140 = 258;
        unsigned __int16 v17 = (_DWORD *)(a5 + 11048);
        int v134 = 1;
        int v135 = 1;
        goto LABEL_40;
      }
    }
  }
  int v18 = 0;
  if (HIBYTE(v140)) {
    goto LABEL_30;
  }
LABEL_133:
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    long long v136 = 0u;
    long long v137 = 0u;
    if (Core_Get_ExtA_Alt(6000, &v136))
    {
      *(unsigned char *)uint64_t v9 = 1;
      *(unsigned char *)(v9 + 8) = 1;
      int v72 = v136;
      uint64_t v73 = *(_DWORD **)(p_api + 8);
      if (*v73) {
        int v74 = v73[4] - (*v73 + v136);
      }
      else {
        int v74 = 0;
      }
      *(_DWORD *)(v9 + 12) = v74 + a1;
      uint64_t v144 = 0;
      memset(v143, 0, sizeof(v143));
      if (Core_Get_ExtA_MapV(30000, (uint64_t)v143))
      {
        if ((_BYTE)v144)
        {
          *(unsigned char *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 4) = 7;
          EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Tunnel");
        }
        if (BYTE4(v144))
        {
          *(unsigned char *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 4) = 8;
          EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude provided when Map Vector indicates Bridge");
        }
      }
      if (HIBYTE(v140) && *(unsigned char *)(v11 + 128) && (*(_DWORD *)(v11 + 136) - 3) <= 1)
      {
        double v75 = *(double *)&v137;
        double v76 = v75 * v75;
        double v77 = *(double *)(a4 + 23152);
        if (v77 >= v75 * v75)
        {
          double v80 = *((double *)&v136 + 1);
          double v81 = *((double *)&v136 + 1) - *(double *)(a4 + 23144);
          if (v81 * v81 > (v76 + v77) * 9.0)
          {
            *(unsigned char *)(v9 + 8) = 0;
            *(_DWORD *)(v9 + 4) = 10;
            EvCrt_v("NK_Get_Ext_Meas:  ERROR:  DEM Altitude rejected - Incompatible with Ref Pos, diff %f  Sigma %f %f", fabs(v81), v75, sqrt(v77));
            unsigned int v82 = a3[15];
            BOOL v30 = v82 >= 5;
            unsigned int v83 = v82 - 5;
            if (v30)
            {
              if (v83 >= 3)
              {
                EvCrt_Illegal_Default("NK_Get_Ext_Meas", 0x2FAu);
              }
              else if (!v8[3988] && !*(unsigned char *)(a5 + 128))
              {
                if (*(_DWORD *)(a5 + 140))
                {
                  double v84 = *(double *)(a4 + 816) - v80;
                  if (v84 * v84 < v76 * 16.0)
                  {
                    *(unsigned char *)(a5 + 128) = 1;
                    *(_DWORD *)(a5 + 132) = 98;
                    EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Edit & KF Height near edited DEM Altitude,  diff %f  Sigma %f", 98, fabs(v84), sqrt(*(double *)(a4 + 23152)));
                  }
                }
              }
            }
          }
        }
        else
        {
          *(unsigned char *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 4) = 9;
          EvCrt_v("NK_Get_Ext_Meas:  WARNING:  DEM Altitude rejected - Worse Sigma Unc than Ref Pos, %f > %f", v75, sqrt(v77));
        }
      }
      if (*(unsigned char *)(v9 + 8))
      {
        *(unsigned char *)(v11 + 128) = 1;
        *(_DWORD *)(v11 + 132) = 1;
        int v85 = *(_DWORD **)(p_api + 8);
        if (*v85) {
          int v86 = *v85 + v72 - v85[4];
        }
        else {
          int v86 = 0;
        }
        *(_DWORD *)(v11 + 148) = v86;
        *(void *)(a4 + 23144) = *((void *)&v136 + 1);
        int v87 = 4;
        switch(DWORD2(v137))
        {
          case 0:
            if (*(double *)&v137 >= 25.0) {
              int v87 = 3;
            }
            else {
              int v87 = 4;
            }
            break;
          case 1:
            int v87 = 2;
            break;
          case 2:
            int v87 = 3;
            break;
          case 3:
            break;
          default:
            EvCrt_Illegal_Default("NK_Get_Ext_Meas", 0x326u);
            int v87 = 1;
            break;
        }
        *(_DWORD *)(v11 + 136) = v87;
        int v88 = *(_DWORD *)(v9 + 12);
        if (v88 < 0) {
          int v88 = -v88;
        }
        double v89 = (double)v88 * 0.001;
        if (v8[3987]) {
          double v89 = v89 * 0.1;
        }
        *(double *)(a4 + 23152) = v89 * v89 + *(double *)&v137 * *(double *)&v137;
        if (v8[3988])
        {
          uint64_t v90 = a3;
          uint64_t v91 = (int)a3[15];
          if (v91 >= 8)
          {
            EvCrt_Illegal_Default("NK_Get_Ext_Meas", 0x348u);
            uint64_t v90 = a3;
            double v92 = 25.0;
          }
          else
          {
            double v92 = dbl_22BB0E3C0[v91];
          }
        }
        else
        {
          uint64_t v90 = a3;
          double v92 = 25.0;
          if (!*a3) {
            double v92 = 9.0;
          }
        }
        *(double *)(a4 + 23176) = v92;
        *(_DWORD *)(v11 + 140) = 0;
        HIBYTE(v140) = 1;
        unsigned int v93 = v90[15];
        BOOL v30 = v93 >= 5;
        unsigned int v94 = v93 - 5;
        if (v30)
        {
          if (v94 >= 3)
          {
            EvCrt_Illegal_Default("NK_Get_Ext_Meas", 0x36Du);
          }
          else if (v8[3988])
          {
            if (!*(unsigned char *)(a5 + 128))
            {
              if (*(_DWORD *)(a5 + 140))
              {
                double v98 = *(double *)(a4 + 816) - *(double *)(a4 + 23144);
                double v99 = *(double *)(a4 + 24672);
                double v100 = *(double *)(a4 + 23152);
                if (v98 * v98 > (v100 + v99 * v99) * 16.0)
                {
                  *(unsigned char *)(a5 + 128) = 1;
                  *(_DWORD *)(a5 + 132) = 95;
                  EvLog_v("NK_Get_Ext_Meas:  KF Reset Type %d:  DEM Altitude Incompatible with current Height, diff %f  Sigma %f %f", 95, fabs(v98), sqrt(v100), v99);
                }
              }
            }
          }
        }
      }
    }
  }
  if ((!*(_DWORD *)(a5 + 11048) || *(unsigned char *)(a5 + 233))
    && *(double *)(a4 + 24680) > 200.0
    && *(_DWORD *)(a5 + 20) <= 4u)
  {
    int v95 = HIBYTE(v140);
    if (!HIBYTE(v140) || *(double *)(a4 + 24672) < 100000.0 && *(double *)(a4 + 23152) > 40000.0)
    {
      *(unsigned char *)(v11 + 128) = 1;
      *(_DWORD *)(v11 + 148) = a1;
      *(void *)(v11 + 132) = 0x300000002;
      *(void *)(a4 + 23152) = 0x414E848000000000;
      if (v18 && v95 && v149 > -500.0 && v149 < 6000.0)
      {
        *(double *)(a4 + 23144) = v149;
        if (v15) {
          *(double *)(a4 + 23152) = v141;
        }
      }
      else
      {
        long long v96 = (double *)(a4 + 816);
        *(void *)&v143[0] = 0;
        if (R8_EQ((const double *)(a4 + 816), (const double *)v143) || (double v97 = *v96, *v96 <= -500.0) || v97 >= 6000.0) {
          *(void *)(a4 + 23144) = 0x407F400000000000;
        }
        else {
          *(double *)(a4 + 23144) = v97;
        }
      }
      *(void *)(a4 + 23176) = 0x4039000000000000;
      *(_DWORD *)(v11 + 140) = 2;
    }
  }
  if (!*(unsigned char *)(a4 + 960) && *(unsigned char *)v11 && *(_DWORD *)(v11 + 4) == 1 && *(unsigned char *)(v11 + 128)) {
    *(unsigned char *)(a4 + 960) = 1;
  }
LABEL_222:
  long long v101 = (_DWORD *)(a4 + 22724);
  if (*(unsigned char *)v11)
  {
    *unsigned int v8 = 1;
    *(_DWORD *)(a5 + 7192) = *(_DWORD *)(v11 + 20);
    *(void *)(a5 + 7200) = *(void *)(a4 + 23040);
  }
  else if (*v8 && (int)(a1 - *(_DWORD *)(a5 + 7192)) > 120000)
  {
    *unsigned int v8 = 0;
  }
  long long v102 = (unsigned char *)(a4 + 23320);
  if (*(unsigned char *)(v11 + 128))
  {
    v8[1] = 1;
    *(_DWORD *)(a5 + 7208) = *(_DWORD *)(v11 + 148);
    *(void *)(a5 + 7216) = *(void *)(a4 + 23152);
  }
  else if (v8[1] && (int)(a1 - *(_DWORD *)(a5 + 7208)) > 120000)
  {
    v8[1] = 0;
  }
  *(unsigned char *)(a4 + 22920) = 0;
  *(void *)&v143[0] = 0;
  *(void *)&long long v136 = 0;
  LOBYTE(v148) = 0;
  if (Core_Get_Clk_Drift(a1, 300, &v142, (double *)v143, (double *)&v136, (unsigned __int8 *)&v148))
  {
    *(unsigned char *)(a4 + 22920) = 1;
    *(_DWORD *)(a4 + 22924) = 1;
    *(_DWORD *)(a4 + 22940) = v142;
    double v103 = *(double *)v143;
    *(double *)(a4 + 22944) = *(double *)v143 * 299792458.0;
    double v104 = *(double *)&v136 * 8.98755179e16;
    *(double *)(a4 + 22952) = *(double *)&v136 * 8.98755179e16;
    *(void *)(a4 + 22976) = 0x4030000000000000;
    *(_DWORD *)(a4 + 22932) = v148;
    if (v104 < *(double *)(a4 + 24744) * *(double *)(a4 + 24744))
    {
      uint64_t v105 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v105 + 5) && *(int *)v105 >= 3)
      {
        int v106 = (int)*(double *)(v105 + 24) + 604800 * *(__int16 *)(v105 + 16);
        if (v106 <= 0) {
          int v107 = v106;
        }
        else {
          int v107 = v106 - 1800;
        }
      }
      else
      {
        int v107 = 0;
      }
      Core_Save_Clk_Drift(1, v107, v103);
      EvLog_v("NK_Get_Ext_Meas: Core_Save_Clk_Drift %g, Sigma(m/s) %g < %g", v103 * 1000000000.0, sqrt(*(double *)(a4 + 22952)), *(double *)(a4 + 24744));
    }
  }
  *(void *)&v143[0] = 0;
  *(void *)&long long v148 = 0;
  *long long v102 = 0;
  if (Core_Get_Speed(a1, &v142, (double *)v143, (double *)&v148, (double *)&v136))
  {
    unsigned int v108 = v142;
    unsigned int v109 = a1 - v142;
    if ((int)(a1 - v142) < 0) {
      unsigned int v109 = v142 - a1;
    }
    if (v109 <= 0x1F4)
    {
      *long long v102 = 1;
      *(_DWORD *)(a4 + 23324) = 1;
      *(_DWORD *)(a4 + 23336) = v108;
      *(void *)(a4 + 23344) = *(void *)&v143[0];
      *(void *)(a4 + 23352) = v148;
      *(void *)(a4 + 23376) = 0x4030000000000000;
    }
  }
  *(void *)&long long v148 = 0;
  double v141 = 0.0;
  *(unsigned char *)(a4 + 23392) = 0;
  if (Core_Get_GSpeed(a1, &v142, (double *)&v148, &v141, &v145))
  {
    unsigned int v110 = v142;
    unsigned int v111 = a1 - v142;
    if ((int)(a1 - v142) < 0) {
      unsigned int v111 = v142 - a1;
    }
    if (v111 <= 0x1F4)
    {
      *(unsigned char *)(a4 + 23392) = 1;
      *(_DWORD *)(a4 + 23396) = 1;
      *(_DWORD *)(a4 + 23408) = v110;
      *(void *)(a4 + 23416) = v148;
      *(double *)(a4 + 23424) = v141;
      *(void *)(a4 + 23448) = 0x4030000000000000;
    }
  }
  if (*(_DWORD *)(a5 + 20) < 5u)
  {
    memset(v143, 0, 24);
    if (Core_Get_ExtA_AT_Vel(1000, (uint64_t)v143))
    {
      *(unsigned char *)(v9 + 80) = 1;
      *(unsigned char *)(v9 + 88) = 1;
      *(_DWORD *)(v9 + 84) = 0;
      long long v112 = *(_DWORD **)(p_api + 8);
      if (*v112) {
        int v113 = LODWORD(v143[0]) + *v112 - v112[4];
      }
      else {
        int v113 = 0;
      }
      *(_DWORD *)(v9 + 92) = a1 - v113;
      double v114 = *(double *)&v143[1] * *(double *)&v143[1];
      if (*(unsigned char *)(a4 + 23392) && *(double *)(a4 + 23424) < v114)
      {
        *(unsigned char *)(v9 + 88) = 0;
        if (*(_DWORD *)(a4 + 23396) == 1)
        {
          *(_DWORD *)(v9 + 84) = 29;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing EXT Ground Speed Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 84) = 30;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: EXTA VA Along-Track Speed rejected - Worse Sigma Unc than Existing INT Ground Speed Aiding [%d], %f > %f");
        }
      }
      else if (*v101 == 1 {
             && *(unsigned char *)(a4 + 22756)
      }
             && (*((double *)v143 + 1) >= 3.0 || *((double *)v143 + 1) >= *(double *)&v143[1] * 3.0))
      {
        *(unsigned char *)(v9 + 88) = 0;
        *(_DWORD *)(v9 + 84) = 27;
        EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Discrepancy with CTXT Static Status, AT Spd %f  Sigma %f");
      }
      else
      {
        long long v136 = 0uLL;
        *(void *)&long long v137 = 0;
        if (Core_Get_ExtA_SpdC(120000, (uint64_t)&v136)
          && ((long long v115 = *(_DWORD **)(p_api + 8), !*v115) ? (v116 = 0) : (v116 = v115[4] - (v136 + *v115)),
              (int)(v116 + a1) <= SDWORD1(v136)
           && (*((double *)v143 + 1) > *(double *)&v137 || *((double *)v143 + 1) < *((double *)&v136 + 1))))
        {
          *(unsigned char *)(v9 + 88) = 0;
          *(_DWORD *)(v9 + 84) = 26;
          EvCrt_v("Set_ExtA_VA_Horz_Spd: VA Along-Track Speed rejected - Out of Speed constrains, AT Spd %f  SpdC %f %f");
        }
        else
        {
          *(unsigned char *)(a4 + 23392) = 1;
          *(_DWORD *)(a4 + 23408) = v113;
          *(void *)(a4 + 23416) = *((void *)&v143[0] + 1);
          *(double *)(a4 + 23424) = v114;
          *(void *)(a4 + 23396) = 0x400000001;
          *(void *)(a4 + 23448) = 0x4030000000000000;
        }
      }
    }
    if (*(_DWORD *)(a5 + 20) <= 4u)
    {
      memset(v143, 0, 24);
      if (Core_Get_ExtA_V_Vel(1000, (uint64_t)v143))
      {
        *(unsigned char *)(v9 + 96) = 1;
        *(unsigned char *)(v9 + 104) = 1;
        *(_DWORD *)(v9 + 100) = 0;
        long long v117 = *(_DWORD **)(p_api + 8);
        if (*v117) {
          int v118 = LODWORD(v143[0]) + *v117 - v117[4];
        }
        else {
          int v118 = 0;
        }
        *(_DWORD *)(v9 + 108) = a1 - v118;
        double v119 = *(double *)&v143[1];
        if (*v101 == 1
          && *(unsigned char *)(a4 + 22756)
          && ((double v120 = *((double *)v143 + 1), v121 = fabs(*((double *)v143 + 1)), v121 >= 3.0)
           || v121 >= *(double *)&v143[1] * 3.0))
        {
          *(unsigned char *)(v9 + 104) = 0;
          *(_DWORD *)(v9 + 100) = 31;
          EvCrt_v("Set_ExtA_VA_Vert_Vel: VA Vert Velocity rejected - Discrepancy with CTXT Static Status, Vert vel %f  Sigma %f", v120, v119);
        }
        else
        {
          *(unsigned char *)(v11 + 200) = 1;
          *(_DWORD *)(v11 + 220) = v118;
          *(void *)(a4 + 23216) = *((void *)&v143[0] + 1);
          *(double *)(a4 + 23224) = v119 * v119;
          *(void *)(v11 + 204) = 0x400000001;
          *(void *)(a4 + 23248) = 0x4030000000000000;
        }
      }
    }
  }
  *(void *)&long long v136 = 0;
  double v145 = 0.0;
  double v141 = 0.0;
  *(unsigned char *)(a4 + 23464) = 0;
  if (Core_Get_Track(a1, &v142, (double *)&v136, &v141, &v145, (double *)&v148))
  {
    unsigned int v122 = v142;
    unsigned int v123 = a1 - v142;
    if ((int)(a1 - v142) < 0) {
      unsigned int v123 = v142 - a1;
    }
    if (v123 <= 0x1F4)
    {
      *(unsigned char *)(a4 + 23464) = 1;
      *(_DWORD *)(a4 + 23468) = 1;
      *(_DWORD *)(a4 + 23480) = v122;
      *(void *)(a4 + 23488) = v136;
      *(double *)(a4 + 23496) = v145;
      *(void *)(a4 + 23520) = 0x4030000000000000;
      *(double *)(a4 + 23536) = v141;
    }
  }
  if (*(_DWORD *)(a5 + 20) <= 4u)
  {
    memset(v143, 0, 24);
    if (Core_Get_ExtA_Heading(1000, (uint64_t)v143))
    {
      *(unsigned char *)(v9 + 112) = 1;
      *(unsigned char *)(v9 + 120) = 1;
      *(_DWORD *)(v9 + 116) = 0;
      long long v124 = *(_DWORD **)(p_api + 8);
      if (*v124) {
        int v125 = LODWORD(v143[0]) + *v124 - v124[4];
      }
      else {
        int v125 = 0;
      }
      *(_DWORD *)(v9 + 124) = a1 - v125;
      double v126 = *(double *)&v143[1] * *(double *)&v143[1];
      if (*(unsigned char *)(a4 + 23464) && *(double *)(a4 + 23496) < v126)
      {
        *(unsigned char *)(v9 + 120) = 0;
        if (*(_DWORD *)(a4 + 23468) == 1)
        {
          *(_DWORD *)(v9 + 116) = 35;
          EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing EXT Track Aiding [%d], %f > %f");
        }
        else
        {
          *(_DWORD *)(v9 + 116) = 36;
          EvCrt_v("Set_ExtA_VA_Heading: EXTA VA Heading rejected - Worse Sigma Unc than Existing INT Track Aiding [%d], %f > %f");
        }
      }
      else
      {
        *(unsigned char *)(a4 + 23464) = 1;
        *(_DWORD *)(a4 + 23480) = v125;
        *(void *)(a4 + 23488) = *((void *)&v143[0] + 1);
        *(double *)(a4 + 23496) = v126;
        *(void *)(a4 + 23504) = *(void *)(a4 + 952);
        *(void *)(a4 + 23468) = 0x400000001;
        *(void *)(a4 + 23520) = 0x4030000000000000;
        *(void *)(a4 + 23536) = 0x3FF0000000000000;
      }
    }
  }
  memset(v143, 0, 24);
  unint64_t result = Core_Get_ExtA_SpdC(120000, (uint64_t)v143);
  if (result)
  {
    int v128 = v143[0];
    unint64_t result = mach_continuous_time();
    int v129 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result) - v128;
    if (v129 >= SDWORD1(v143[0]))
    {
      *(_DWORD *)(v9 + 132) = 2;
    }
    else
    {
      *(unsigned char *)uint64_t v10 = 1;
      *(_DWORD *)(v10 + 4) = 1;
    }
    uint64_t v130 = *(_DWORD **)(p_api + 8);
    if (*v130) {
      int v131 = *v130 + v128 - v130[4];
    }
    else {
      int v131 = 0;
    }
    *(_DWORD *)(v10 + 8) = v131;
    *(_OWORD *)(a4 + 24112) = *(_OWORD *)((char *)v143 + 8);
    *(unsigned char *)(v9 + 128) = 1;
    *(_DWORD *)(v9 + 140) = v129;
  }
  return result;
}

BOOL AzEl_SinCos(double *a1, uint64_t a2, uint64_t a3)
{
  v12[1] = *(double *)MEMORY[0x263EF8340];
  double v5 = a1[2];
  *(double *)(a3 + 8) = -v5;
  if (v5 <= -1.0)
  {
    unint64_t v7 = 0x3FF0000000000000;
LABEL_6:
    *(void *)(a3 + 8) = v7;
    double v6 = 0.0;
    goto LABEL_7;
  }
  if (v5 >= 1.0)
  {
    unint64_t v7 = 0xBFF0000000000000;
    goto LABEL_6;
  }
  double v6 = sqrt(v5 * -v5 + 1.0);
LABEL_7:
  *(double *)(a3 + 16) = v6;
  v12[0] = 0.0;
  BOOL result = R8_EQ((const double *)(a3 + 16), v12);
  if (result) {
    goto LABEL_8;
  }
  double v10 = a1[1] / v6;
  *(double *)(a2 + 8) = v10;
  double v11 = *a1 / v6;
  *(double *)(a2 + 16) = v11;
  if (v10 >= 1.0)
  {
    long long v9 = xmmword_22BB0E400;
    goto LABEL_16;
  }
  if (v10 <= -1.0)
  {
    long long v9 = xmmword_22BB0E410;
    goto LABEL_16;
  }
  if (v11 >= 1.0)
  {
LABEL_8:
    long long v9 = xmmword_22BB0E420;
  }
  else
  {
    if (v11 > -1.0) {
      return result;
    }
    long long v9 = xmmword_22BB0E430;
  }
LABEL_16:
  *(_OWORD *)(a2 + 8) = v9;
  return result;
}

void *NK_Obs_Equ_SV(void *result, int a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  if (a2) {
    int v6 = 4;
  }
  else {
    int v6 = 2;
  }
  if (result != 2) {
    int v6 = (int)result;
  }
  if ((v6 - 3) < 2)
  {
    uint64_t v8 = 0;
    *(double *)(a5 + 24) = a6;
    *(void *)(a5 + 40) = *(void *)(a4 + 24);
    *(void *)(a5 + 48) = *(void *)(a4 + 32);
    *(void *)(a5 + 56) = *(void *)(a4 + 40);
    do
    {
      *(double *)(a5 + 64 + v8) = -(*(double *)(a4 + v8) * a6);
      v8 += 8;
    }
    while (v8 != 24);
  }
  else if (v6 == 2)
  {
    *(void *)(a5 + 24) = 0x3FF0000000000000;
    *(double *)(a5 + 64) = -*(double *)a4;
    *(double *)(a5 + 72) = -*(double *)(a4 + 8);
    *(double *)(a5 + 80) = -*(double *)(a4 + 16);
  }
  else if (v6 == 1)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (a3 == 4)
    {
      unint64_t v7 = (void *)(a5 + 16);
    }
    else
    {
      unint64_t v7 = (void *)a5;
      if (a3 == 2) {
        unint64_t v7 = (void *)(a5 + 8);
      }
    }
    *unint64_t v7 = 0x3FF0000000000000;
    *(void *)(a5 + 32) = *(void *)(a4 + 48);
    *(double *)(a5 + 40) = -*(double *)a4;
    *(double *)(a5 + 48) = -*(double *)(a4 + 8);
    *(double *)(a5 + 56) = -*(double *)(a4 + 16);
  }
  else
  {
    return EvCrt_Illegal_Default("NK_Obs_Equ_SV", 0xBEu);
  }
  return result;
}

uint64_t xofSvcs00_23GetEeNumSats(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 1:
      uint64_t result = byte_26AE66DCB;
      break;
    case 2:
      uint64_t result = BYTE3(xmmword_26AE66DD8);
      break;
    case 3:
      uint64_t result = byte_26AE66DEB;
      break;
    case 4:
      uint64_t result = BYTE3(xmmword_26AE66DF8);
      break;
    case 5:
      uint64_t result = byte_26AE66E0B;
      break;
    case 6:
      uint64_t result = BYTE3(xmmword_26AE66E18);
      break;
    default:
      unsigned __int8 v2 = a1;
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "xofSvcs00_23GetEeNumSats", 514, v2);
        LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t xofSvcs00_24GetBlckLen(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 1:
      uint64_t result = byte_26AE66DCD;
      break;
    case 2:
      uint64_t result = BYTE5(xmmword_26AE66DD8);
      break;
    case 3:
      uint64_t result = byte_26AE66DED;
      break;
    case 4:
      uint64_t result = BYTE5(xmmword_26AE66DF8);
      break;
    case 5:
      uint64_t result = byte_26AE66E0D;
      break;
    case 6:
      uint64_t result = BYTE5(xmmword_26AE66E18);
      break;
    default:
      unsigned __int8 v2 = a1;
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "xofSvcs00_24GetBlckLen", 514, v2);
        LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t xofSvcs00_25GetEeNumBlks(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 1:
      uint64_t result = byte_26AE66DCC;
      break;
    case 2:
      uint64_t result = BYTE4(xmmword_26AE66DD8);
      break;
    case 3:
      uint64_t result = byte_26AE66DEC;
      break;
    case 4:
      uint64_t result = BYTE4(xmmword_26AE66DF8);
      break;
    case 5:
      uint64_t result = byte_26AE66E0C;
      break;
    case 6:
      uint64_t result = BYTE4(xmmword_26AE66E18);
      break;
    default:
      unsigned __int8 v2 = a1;
      int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
      uint64_t result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "xofSvcs00_25GetEeNumBlks", 514, v2);
        LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t xofSvcs00_02SvIncluded(int a1, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t IncludedSats = xofSvcs00_22GetIncludedSats(a1);
  if ((a1 - 1) < 6) {
    return (IncludedSats >> ((0xFFFFFF3F88FFuLL >> (8 * (a1 - 1))) + a2)) & 1;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "xofSvcs00_02SvIncluded", 772, a1);
    LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
    return 0;
  }
  return result;
}

uint64_t xofSvcs00_22GetIncludedSats(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 1:
      int v1 = &qword_26AE66DD0;
      goto LABEL_11;
    case 2:
      int v1 = (uint64_t *)&xmmword_26AE66DD8 + 1;
      goto LABEL_11;
    case 3:
      int v1 = &qword_26AE66DF0;
      goto LABEL_11;
    case 4:
      int v1 = (uint64_t *)&xmmword_26AE66DF8 + 1;
      goto LABEL_11;
    case 5:
      int v1 = &qword_26AE66E10;
      goto LABEL_11;
    case 6:
      int v1 = (uint64_t *)&xmmword_26AE66E18 + 1;
LABEL_11:
      uint64_t result = *v1;
      break;
    default:
      unsigned __int8 v2 = a1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v3 = mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 87, "xofSvcs00_22GetIncludedSats", 514, v2);
        LbsOsaTrace_WriteLog(8u, __str, v4, 2, 1);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t XofSvcs00_03GetSvIndexCrr(int a1, char a2, unsigned char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t IncludedSats = xofSvcs00_22GetIncludedSats(a1);
  if ((a1 - 1) >= 6)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "XofSvcs00_03GetSvIndexCrr", 772, a1);
      LbsOsaTrace_WriteLog(8u, __str, v11, 0, 1);
      return 0;
    }
  }
  else
  {
    if ((0xFFFFFF3F88FFuLL >> (8 * (a1 - 1))) + a2)
    {
      uint64_t v7 = 0;
      do
      {
        if (((IncludedSats >> v7) & 1) == 0) {
          ++*a3;
        }
        ++v7;
      }
      while (((0xFFFFFF3F88FFuLL >> (8 * (a1 - 1))) + a2) != v7);
    }
    return 1;
  }
  return result;
}

uint64_t xofSvcs00_04PayLoadCrc(unsigned __int8 *a1, unsigned int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = XofSvcs02_02Crc32(0, a1, a2);
  if (v4 == a3) {
    return 1;
  }
  int v6 = v4;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PayLoadCrc,%u,ComputedCrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "xofSvcs00_04PayLoadCrc", 771, a3, v6);
    LbsOsaTrace_WriteLog(8u, __str, v8, 0, 1);
  }
  return 3;
}

uint64_t xofSvcs00_10ParseRtiData(signed __int8 *a1, int a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiData\n");
LABEL_17:
    LbsOsaTrace_WriteLog(8u, __str, v6, 0, 1);
    return 0;
  }
  if (a2 != 160)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiData,DataLen,%u\n", v10);
LABEL_14:
      LbsOsaTrace_WriteLog(8u, __str, v7, 0, 1);
    }
LABEL_15:
    uint64_t v2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTI CRC\n");
    goto LABEL_17;
  }
  LOWORD(__dst[0]) = 1024;
  xofSvcs02_03EndianConvert((unsigned __int8 *)__dst, 2u, a1 + 156, 4u);
  int v3 = *(_DWORD *)(v2 + 156);
  if (XofSvcs02_02Crc32(0, (unsigned __int8 *)v2, 0x9Cu) != v3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FileCrc,%u,ComputedCrc,%u\n", v8);
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (!xofSvcs02_03EndianConvert(g_RtiDataSizeMap, 0x18u, (signed __int8 *)v2, 0xA0u))
  {
    uint64_t v2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rti endian conversion\n");
    goto LABEL_17;
  }
  long long v13 = 0u;
  memset(__dst, 0, sizeof(__dst));
  memcpy_s("xofSvcs00_10ParseRtiData", 659, __dst, 0xA0u, (const void *)v2, 0xA0uLL);
  if (LOWORD(__dst[0]) != 1)
  {
    uint64_t v2 = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FormatVersion,%u\n", v11);
    goto LABEL_17;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v4 = mach_continuous_time();
  unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiVer,%u,FileGpsWeek,%u,FileGpsTow,%u,FileCrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "xofSvcs00_10ParseRtiData", 0, LOWORD(__dst[0]), WORD1(__dst[0]), DWORD1(__dst[0]), HIDWORD(v13));
  uint64_t v2 = 1;
  LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
  return v2;
}

uint64_t xofSvcs00_18ParseBrdCstSvMaskData(signed __int8 *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a3 > a2 || !a4)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n", v10);
    goto LABEL_24;
  }
  if ((xofSvcs00_30ParseConstellBrdCstSvMask(1, unk_26AE66DC8, qword_26AE66DD0, (uint64_t)a1, a2, *a4 + a3, a4) & 1) == 0)
  {
    int v12 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS DataLen,%u,Offset,%u\n", v13);
    goto LABEL_24;
  }
  if ((xofSvcs00_30ParseConstellBrdCstSvMask(2, xmmword_26AE66DD8, *((uint64_t *)&xmmword_26AE66DD8 + 1), (uint64_t)a1, a2, *a4 + a3, a4) & 1) == 0)
  {
    int v14 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v14) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS DataLen,%u,Offset,%u\n", v15);
    goto LABEL_24;
  }
  if ((xofSvcs00_30ParseConstellBrdCstSvMask(3, unk_26AE66DE8, qword_26AE66DF0, (uint64_t)a1, a2, *a4 + a3, a4) & 1) == 0)
  {
    int v16 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v16) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS DataLen,%u,Offset,%u\n", v17);
    goto LABEL_24;
  }
  if ((xofSvcs00_30ParseConstellBrdCstSvMask(4, xmmword_26AE66DF8, *((uint64_t *)&xmmword_26AE66DF8 + 1), (uint64_t)a1, a2, *a4 + a3, a4) & 1) == 0)
  {
    int v18 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v18) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL DataLen,%u,Offset,%u\n", v19);
    goto LABEL_24;
  }
  if ((xofSvcs00_30ParseConstellBrdCstSvMask(5, unk_26AE66E08, qword_26AE66E10, (uint64_t)a1, a2, *a4 + a3, a4) & 1) == 0)
  {
    int v20 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v20) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLO DataLen,%u,Offset,%u\n", v21);
    goto LABEL_24;
  }
  if (xofSvcs00_30ParseConstellBrdCstSvMask(6, xmmword_26AE66E18, *((uint64_t *)&xmmword_26AE66E18 + 1), (uint64_t)a1, a2, *a4 + a3, a4))return 1; {
  int v22 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  }
  uint64_t result = 0;
  if (v22)
  {
    bzero(__str, 0x410uLL);
    unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BDS DataLen,%u,Offset,%u\n", v23);
LABEL_24:
    LbsOsaTrace_WriteLog(8u, __str, v11, 0, 1);
    return 0;
  }
  return result;
}

uint64_t xofSvcs00_30ParseConstellBrdCstSvMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a6 <= a5)
  {
    *(_WORD *)double v26 = 2048;
    if ((a2 & 0xFF000000000000) != 0)
    {
      if ((unint64_t)a6 + 8 <= a5)
      {
        unint64_t v17 = (void *)(a4 + a6);
        if (xofSvcs02_03EndianConvert(v26, 2u, (signed __int8 *)v17, 8u))
        {
          switch((int)a1)
          {
            case 1:
              int v18 = (uint64_t *)&xmmword_26AE6C8F8;
              int v19 = 1732;
              goto LABEL_24;
            case 2:
              int v18 = (uint64_t *)&xmmword_26AE6C8F8 + 1;
              int v19 = 1737;
              goto LABEL_24;
            case 3:
              int v18 = &qword_26AE6C908;
              int v19 = 1742;
              goto LABEL_24;
            case 4:
              int v18 = &qword_26AE6C910;
              int v19 = 1747;
              goto LABEL_24;
            case 5:
              int v18 = (uint64_t *)&xmmword_26AE6C918;
              int v19 = 1752;
              goto LABEL_24;
            case 6:
              int v18 = (uint64_t *)&xmmword_26AE6C918 + 1;
              int v19 = 1757;
LABEL_24:
              memcpy_s("xofSvcs00_30ParseConstellBrdCstSvMask", v19, v18, 8u, v17, 8uLL);
              *a7 += 8;
              return 1;
            default:
              uint64_t v9 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                return v9;
              }
              bzero(__str, 0x410uLL);
              uint64_t v22 = 515;
              uint64_t v23 = a1;
              unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unsigned __int16 v11 = "%10u %s%c %s: #%04hx Constel,%u\n";
              break;
          }
        }
        else
        {
          uint64_t v9 = 0;
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
            return v9;
          }
          bzero(__str, 0x410uLL);
          uint64_t v22 = 770;
          uint64_t v23 = a1;
          unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v11 = "%10u %s%c %s: #%04hx EndianCnv,Constel,%u\n";
        }
        goto LABEL_9;
      }
      uint64_t v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v24 = a6 + 8;
        uint64_t v25 = a5;
        uint64_t v22 = 772;
        uint64_t v23 = a1;
        unsigned __int16 v11 = "%10u %s%c %s: #%04hx Constel,%u,ComputedOffset,%lu,DataLen,%u\n";
        goto LABEL_8;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 68, "xofSvcs00_30ParseConstellBrdCstSvMask", 769, a1);
      uint64_t v9 = 1;
      LbsOsaTrace_WriteLog(8u, __str, v15, 5, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v23 = a5;
      uint64_t v24 = a6;
      uint64_t v22 = 770;
      unsigned __int16 v11 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
LABEL_8:
      unint64_t v21 = v10;
LABEL_9:
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, v11, v21, "GNC", 69, "xofSvcs00_30ParseConstellBrdCstSvMask", v22, v23, v24, v25);
      LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
      return 0;
    }
  }
  return v9;
}

uint64_t xofSvcs00_19ParseHeader(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!a1 || a2 <= 0x7F)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HeaderData,DataLen,%u\n", v37);
LABEL_58:
      LbsOsaTrace_WriteLog(8u, __str, v22, 0, 1);
    }
LABEL_59:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Header CRC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 69, "xofSvcs00_19ParseHeader", 771);
      LbsOsaTrace_WriteLog(8u, __str, v25, 0, 1);
    }
    return 2;
  }
  *(_WORD *)double v51 = 1024;
  int v4 = XofSvcs02_02Crc32(0, a1, 0x7Cu);
  LODWORD(__dst) = *((_DWORD *)a1 + 31);
  xofSvcs02_03EndianConvert(v51, 2u, (signed __int8 *)&__dst, 4u);
  if (v4 != __dst)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HeaderCrc,%u,ComputedCrc,%u\n", v23);
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (xofSvcs02_03EndianConvert(g_HeaderSizeMap, 0x41u, (signed __int8 *)a1, 0x80u))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long __dst = 0u;
    long long v44 = 0u;
    memcpy_s("xofSvcs00_19ParseHeader", 2040, &__dst, 0x80u, a1, 0x80uLL);
    if ((unsigned __int16)__dst == 2 && a2 - 128 == v50)
    {
      int v5 = BYTE3(v48) | BYTE2(v48) | BYTE1(v48);
      if (v5) {
        int v6 = 76;
      }
      else {
        int v6 = 28;
      }
      if ((BYTE3(v45) | BYTE2(v45)) | BYTE1(v45)) {
        int v7 = v6 + 16;
      }
      else {
        int v7 = v6;
      }
      if (BYTE3(v46) | BYTE2(v46) | BYTE1(v46)) {
        int v8 = v7 + 16;
      }
      else {
        int v8 = v7;
      }
      if (BYTE3(v47) | BYTE2(v47) | BYTE1(v47)) {
        v8 += 16;
      }
      BOOL v9 = v5 == 0;
      int v10 = v8 + 16;
      if (v9) {
        int v10 = v8;
      }
      int v11 = BYTE2(v49);
      int v12 = BYTE1(v49);
      if (BYTE3(v49) | BYTE2(v49) || (int v11 = 0, BYTE1(v49)))
      {
        v10 += 16;
        int v12 = 40 * BYTE1(v49);
      }
      if (BYTE3(v44)) {
        int v13 = (BYTE3(v44) * BYTE4(v44)) << 6;
      }
      else {
        int v13 = 0;
      }
      if (BYTE3(v48)) {
        int v14 = (BYTE3(v48) * BYTE4(v48)) << 6;
      }
      else {
        int v14 = 0;
      }
      if (BYTE3(v47)) {
        int v15 = 68 * BYTE3(v47) * BYTE4(v47);
      }
      else {
        int v15 = 0;
      }
      if (BYTE3(v46)) {
        int v16 = (BYTE3(v46) * BYTE4(v46)) << 6;
      }
      else {
        int v16 = 0;
      }
      if (BYTE3(v49)) {
        int v17 = 84 * BYTE3(v49) * BYTE4(v49);
      }
      else {
        int v17 = 0;
      }
      unsigned int v18 = 44 * BYTE2(v48)
          + 36 * BYTE1(v48)
          + 40 * BYTE2(v45)
          + 68 * BYTE2(v47)
          + 28 * BYTE1(v47)
          + v12
          + v10
          + 84 * v11
          + 32 * (BYTE1(v44) + BYTE1(v46))
          + ((BYTE2(v44) + BYTE2(v46)) << 6)
          + v13
          + v14
          + v15
          + v16
          + v17;
      if (BYTE6(v44) == 1) {
        v18 += 8;
      }
      if (BYTE6(v45) == 1) {
        v18 += 8;
      }
      if (BYTE6(v46) == 1) {
        v18 += 8;
      }
      if (BYTE6(v47) == 1) {
        v18 += 8;
      }
      if (BYTE6(v48) == 1) {
        v18 += 8;
      }
      if (BYTE6(v49) == 1) {
        uint64_t v19 = v18 + 8;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v50 >= v19)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v31 = mach_continuous_time();
          unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OrbVer,%u,FileGpsWeek,%u,FileGpsTow,%u,StartGpsWeek,%u,StartGpsTow,%u,PayloadLen,%u,ExpPayloadLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 73, "xofSvcs00_28ValidateHeader", 0, (unsigned __int16)__dst, WORD1(__dst), DWORD1(__dst), WORD5(__dst), HIDWORD(__dst), v50, v19);
          LbsOsaTrace_WriteLog(8u, __str, v32, 4, 1);
        }
        if (xofSvcs00_29ValidateConstellInfo(1, (uint64_t)&v44, 0x20u))
        {
          if (xofSvcs00_29ValidateConstellInfo(2, (uint64_t)&v45, 0x27u))
          {
            if (xofSvcs00_29ValidateConstellInfo(3, (uint64_t)&v46, 0xAu))
            {
              if (xofSvcs00_29ValidateConstellInfo(4, (uint64_t)&v47, 0x24u))
              {
                if (xofSvcs00_29ValidateConstellInfo(5, (uint64_t)&v48, 0x18u))
                {
                  if (xofSvcs00_29ValidateConstellInfo(6, (uint64_t)&v49, 0x25u))
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v33 = mach_continuous_time();
                      unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PayLoadLen,%u,PayLoadCrc,%u,HdrCrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 73, "xofSvcs00_28ValidateHeader", 0, v50, DWORD1(v50), HIDWORD(v50));
                      LbsOsaTrace_WriteLog(8u, __str, v34, 4, 1);
                    }
                    uint64_t result = xofSvcs00_04PayLoadCrc(a1 + 128, v50, SDWORD1(v50));
                    if (result != 1)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v35 = mach_continuous_time();
                        unsigned __int16 v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Payload CRC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNC", 69, "xofSvcs00_19ParseHeader", 771);
                        LbsOsaTrace_WriteLog(8u, __str, v36, 0, 1);
                      }
                      return 3;
                    }
                    return result;
                  }
                  if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                    goto LABEL_69;
                  }
                  bzero(__str, 0x410uLL);
                  uint64_t v39 = 770;
                  unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  unint64_t v21 = "%10u %s%c %s: #%04hx Bds\n";
                  goto LABEL_68;
                }
                if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v39 = 770;
                  unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  unint64_t v21 = "%10u %s%c %s: #%04hx Glo\n";
                  goto LABEL_68;
                }
              }
              else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v39 = 770;
                unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                unint64_t v21 = "%10u %s%c %s: #%04hx Gal\n";
                goto LABEL_68;
              }
            }
            else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v39 = 770;
              unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              unint64_t v21 = "%10u %s%c %s: #%04hx Qzss\n";
              goto LABEL_68;
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v39 = 770;
            unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unint64_t v21 = "%10u %s%c %s: #%04hx Sabs\n";
            goto LABEL_68;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v39 = 770;
          unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unint64_t v21 = "%10u %s%c %s: #%04hx Gps\n";
          goto LABEL_68;
        }
LABEL_69:
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
        uint64_t result = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Header\n");
          goto LABEL_71;
        }
        return result;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        goto LABEL_69;
      }
      bzero(__str, 0x410uLL);
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v41 = v50;
      uint64_t v42 = v19;
      uint64_t v39 = 769;
      uint64_t v40 = (unsigned __int16)__dst;
      unint64_t v21 = "%10u %s%c %s: #%04hx Ver,%u,PayloadLen,%u,ExpectedDataLen,%u\n";
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        goto LABEL_69;
      }
      bzero(__str, 0x410uLL);
      unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v41 = v50;
      uint64_t v42 = a2;
      uint64_t v39 = 770;
      uint64_t v40 = (unsigned __int16)__dst;
      unint64_t v21 = "%10u %s%c %s: #%04hx Ver,%u,PayloadLen,%u,DataLen,%u\n";
    }
    unint64_t v38 = v20;
LABEL_68:
    unsigned __int16 v29 = snprintf(__str, 0x40FuLL, v21, v38, "GNC", 69, "xofSvcs00_28ValidateHeader", v39, v40, v41, v42);
    LbsOsaTrace_WriteLog(8u, __str, v29, 0, 1);
    goto LABEL_69;
  }
  int v27 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  uint64_t result = 0;
  if (v27)
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Header endian conversion\n");
LABEL_71:
    LbsOsaTrace_WriteLog(8u, __str, v28, 0, 1);
    return 0;
  }
  return result;
}

uint64_t xofSvcs00_20ParsePayLoad(signed __int8 *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  if (a3 > a2 || !a2 || !a1 || !a4)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n", v14);
    goto LABEL_26;
  }
  if ((unint64_t)a3 + 8 > a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ComputedOffset,%lu,DataLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs00_11ParseIonoModel", 770, a3 + 8, a2);
      LbsOsaTrace_WriteLog(8u, __str, v9, 0, 1);
    }
    int v10 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IonoModel\n");
LABEL_26:
      LbsOsaTrace_WriteLog(8u, __str, v12, 0, 1);
      return 0;
    }
    return result;
  }
  memcpy_s("xofSvcs00_11ParseIonoModel", 699, &g_PayLoad, 8u, &a1[a3], 8uLL);
  unsigned int v15 = *a4 + 8;
  *a4 = v15;
  unsigned int v216 = 0;
  uint64_t v16 = v15 + a3;
  if (v16 > a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unint64_t v208 = a2;
      uint64_t v210 = v16;
      unsigned int v18 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
LABEL_15:
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, v18, v17, "GNC", 69, "xofSvcs00_12ParseUtcModel", 770, v208, v210);
LABEL_22:
      LbsOsaTrace_WriteLog(8u, __str, v19, 0, 1);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  unint64_t v20 = &a1[v16];
  if (!xofSvcs02_03EndianConvert(byte_26ADFF84C, 9u, v20, 0x14u))
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC model endian conversion\n");
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  unint64_t v21 = v16 + 20;
  if (v21 > a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unint64_t v208 = v21;
      uint64_t v210 = a2;
      unsigned int v18 = "%10u %s%c %s: #%04hx ComputedOffset,%lu,DataLen,%u\n";
      goto LABEL_15;
    }
LABEL_23:
    int v22 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx UTC\n");
    goto LABEL_26;
  }
  memcpy_s("xofSvcs00_12ParseUtcModel", 739, (char *)&g_PayLoad + 8, 0x14u, v20, 0x14uLL);
  unsigned int v23 = *a4 + 20;
  *a4 = v23;
  uint64_t v24 = v23 + a3;
  if (v24 > a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      goto LABEL_40;
    }
    bzero(__str, 0x410uLL);
    unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n", v25);
    goto LABEL_39;
  }
  if (!byte_26AE66E0B && !byte_26AE66E0A && !byte_26AE66E09)
  {
    int v27 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS channel map\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 68, "xofSvcs00_13ParseGloChanMap", 769);
      LbsOsaTrace_WriteLog(8u, __str, v29, 5, 1);
      int v27 = 0;
    }
LABEL_43:
    unsigned int v33 = *a4 + v27;
    *a4 = v33;
    unsigned int v216 = 0;
    uint64_t v34 = v33 + a3;
    if (v34 > a2)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        goto LABEL_49;
      }
      bzero(__str, 0x410uLL);
      unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v207 = a2;
      uint64_t v209 = v34;
      uint64_t v203 = 770;
      unsigned __int16 v36 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
      goto LABEL_46;
    }
    uint64_t v40 = &a1[v34];
    if (BYTE3(xmmword_26AE66DD8) || *(_WORD *)((char *)&xmmword_26AE66DD8 + 1))
    {
      if (v34 + 16 > (unint64_t)a2)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          goto LABEL_49;
        }
        bzero(__str, 0x410uLL);
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v207 = v34 + 16;
        uint64_t v209 = a2;
        uint64_t v203 = 772;
        unsigned __int16 v36 = "%10u %s%c %s: #%04hx SBAS ComputedOffset,%lu,DataLen,%u\n";
        goto LABEL_46;
      }
      unsigned int v41 = 16;
      if (!xofSvcs02_03EndianConvert(_MergedGlobals, 8u, &a1[v34], 0x10u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v203 = 770;
          unint64_t v199 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v36 = "%10u %s%c %s: #%04hx SBAS time model endian conversion\n";
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      memcpy_s("xofSvcs00_14ParseTimeModel", 843, &unk_26AE6C7F4, 0x10u, &a1[v34], 0x10uLL);
      unsigned int v216 = 16;
    }
    else
    {
      unsigned int v41 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v42 = mach_continuous_time();
        unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS time model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 68, "xofSvcs00_14ParseTimeModel", 769);
        LbsOsaTrace_WriteLog(8u, __str, v43, 5, 1);
        unsigned int v41 = 0;
      }
    }
    if (byte_26AE66DEB || byte_26AE66DE9 || byte_26AE66DEA)
    {
      if ((unint64_t)(v41 + v34) + 16 > a2)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          goto LABEL_49;
        }
        bzero(__str, 0x410uLL);
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v207 = v41 + v34 + 16;
        uint64_t v209 = a2;
        uint64_t v203 = 772;
        unsigned __int16 v36 = "%10u %s%c %s: #%04hx QZSS ComputedOffset,%lu,DataLen,%u\n";
        goto LABEL_46;
      }
      if (!xofSvcs02_03EndianConvert(_MergedGlobals, 8u, &v40[v41], 0x10u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v203 = 770;
          unint64_t v199 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v36 = "%10u %s%c %s: #%04hx Qzss time model endian conversion\n";
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      memcpy_s("xofSvcs00_14ParseTimeModel", 875, (char *)&xmmword_26AE6C7F8 + 12, 0x10u, &v40[v41], 0x10uLL);
      v41 += 16;
      unsigned int v216 = v41;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v44 = mach_continuous_time();
      unsigned __int16 v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS time model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 68, "xofSvcs00_14ParseTimeModel", 769);
      LbsOsaTrace_WriteLog(8u, __str, v45, 5, 1);
    }
    if (BYTE3(xmmword_26AE66DF8) || *(_WORD *)((char *)&xmmword_26AE66DF8 + 1))
    {
      if ((unint64_t)(v41 + v34) + 16 > a2)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          goto LABEL_49;
        }
        bzero(__str, 0x410uLL);
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v207 = v41 + v34 + 16;
        uint64_t v209 = a2;
        uint64_t v203 = 772;
        unsigned __int16 v36 = "%10u %s%c %s: #%04hx Galileo ComputedOffset,%lu,DataLen,%u\n";
        goto LABEL_46;
      }
      if (!xofSvcs02_03EndianConvert(_MergedGlobals, 8u, &v40[v41], 0x10u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v203 = 770;
          unint64_t v199 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v36 = "%10u %s%c %s: #%04hx Galileo time model endian conversion\n";
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      memcpy_s("xofSvcs00_14ParseTimeModel", 906, &unk_26AE6C814, 0x10u, &v40[v41], 0x10uLL);
      v41 += 16;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v46 = mach_continuous_time();
      unsigned __int16 v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Galileo time model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 68, "xofSvcs00_14ParseTimeModel", 769);
      LbsOsaTrace_WriteLog(8u, __str, v47, 5, 1);
    }
    if (!byte_26AE66E0B && !byte_26AE66E09 && !byte_26AE66E0A)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v48 = mach_continuous_time();
        unsigned __int16 v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS time model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 68, "xofSvcs00_14ParseTimeModel", 769);
        LbsOsaTrace_WriteLog(8u, __str, v49, 5, 1);
      }
LABEL_93:
      if (!BYTE3(xmmword_26AE66E18) && !*(_WORD *)((char *)&xmmword_26AE66E18 + 1))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v50 = mach_continuous_time();
          unsigned __int16 v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BeiDou time model\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 68, "xofSvcs00_14ParseTimeModel", 769);
          LbsOsaTrace_WriteLog(8u, __str, v51, 5, 1);
        }
LABEL_104:
        unsigned int v53 = *a4 + v41;
        *a4 = v53;
        unsigned int v216 = 0;
        uint64_t v54 = v53 + a3;
        if (v54 <= a2)
        {
          double v57 = &a1[v54];
          uint64_t v58 = byte_26AE66DC9;
          if (byte_26AE66DC9)
          {
            uint64_t v59 = 32 * byte_26AE66DC9;
            if (32 * byte_26AE66DC9 + v54 <= a2)
            {
              int v63 = 0;
              __srca = &a1[v54];
              while (xofSvcs02_03EndianConvert(byte_26ADFF855, 0xFu, v57, 0x20u))
              {
                ++v63;
                v57 += 32;
                if (v58 <= (unsigned __int16)v63)
                {
                  if (qword_26AE6C848) {
                    free((void *)qword_26AE6C848);
                  }
                  qword_26AE6C848 = 0;
                  int v64 = gnssOsa_Calloc("xofSvcs00_21ParseAlmData", 1040, 1, 32 * v58);
                  qword_26AE6C848 = (uint64_t)v64;
                  if (v64)
                  {
                    memcpy_s("xofSvcs00_21ParseAlmData", 1047, v64, 32 * v58, __srca, 32 * v58);
                    unsigned int v216 = 32 * v58;
                    __int16 __src = &__srca[v59];
                    goto LABEL_125;
                  }
                  goto LABEL_176;
                }
              }
              if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                goto LABEL_176;
              }
              bzero(__str, 0x410uLL);
              uint64_t v204 = 770;
              unint64_t v200 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              double v56 = "%10u %s%c %s: #%04hx GPS endian conversion\n";
              goto LABEL_175;
            }
            if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              uint64_t v207 = (32 * v58 + v54);
              uint64_t v209 = a2;
              uint64_t v204 = 772;
              double v56 = "%10u %s%c %s: #%04hx GPS ComputedOffset,%u,DataLen,%u\n";
              goto LABEL_174;
            }
          }
          else
          {
            __int16 __src = &a1[v54];
            if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v61 = mach_continuous_time();
              unsigned __int16 v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "GNC", 68, "xofSvcs00_21ParseAlmData", 769);
              LbsOsaTrace_WriteLog(8u, __str, v62, 5, 1);
            }
            LODWORD(v59) = 0;
LABEL_125:
            uint64_t v65 = byte_26AE66DE9;
            if (byte_26AE66DE9)
            {
              uint64_t v66 = 32 * byte_26AE66DE9;
              uint64_t v67 = v59 + v54 + 32 * byte_26AE66DE9;
              if (v67 <= a2)
              {
                int v70 = 0;
                int v71 = __src;
                while (xofSvcs02_03EndianConvert(byte_26ADFF855, 0xFu, v71, 0x20u))
                {
                  ++v70;
                  v71 += 32;
                  if (v65 <= (unsigned __int16)v70)
                  {
                    if (qword_26AE6C850) {
                      free((void *)qword_26AE6C850);
                    }
                    qword_26AE6C850 = 0;
                    int v72 = gnssOsa_Calloc("xofSvcs00_21ParseAlmData", 1079, 1, 32 * v65);
                    qword_26AE6C850 = (uint64_t)v72;
                    if (v72)
                    {
                      memcpy_s("xofSvcs00_21ParseAlmData", 1086, v72, 32 * v65, __src, 32 * v65);
                      LODWORD(v59) = v216 + v66;
                      v216 += v66;
                      __src += v66;
                      goto LABEL_140;
                    }
                    goto LABEL_176;
                  }
                }
                if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                  goto LABEL_176;
                }
                bzero(__str, 0x410uLL);
                uint64_t v204 = 770;
                unint64_t v200 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                double v56 = "%10u %s%c %s: #%04hx QZSS Alm data endian conversion\n";
                goto LABEL_175;
              }
              if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                uint64_t v207 = v67;
                uint64_t v209 = a2;
                uint64_t v204 = 772;
                double v56 = "%10u %s%c %s: #%04hx QZSS ComputedOffset,%u,DataLen,%u\n";
                goto LABEL_174;
              }
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v68 = mach_continuous_time();
                unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "GNC", 68, "xofSvcs00_21ParseAlmData", 769);
                LbsOsaTrace_WriteLog(8u, __str, v69, 5, 1);
              }
LABEL_140:
              uint64_t v73 = BYTE1(xmmword_26AE66DF8);
              if (BYTE1(xmmword_26AE66DF8))
              {
                uint64_t v74 = 28 * BYTE1(xmmword_26AE66DF8);
                uint64_t v75 = v59 + v54 + 28 * BYTE1(xmmword_26AE66DF8);
                if (v75 <= a2)
                {
                  int v78 = 0;
                  long long v79 = __src;
                  while (xofSvcs02_03EndianConvert(byte_26ADFF864, 0x10u, v79, 0x1Cu))
                  {
                    ++v78;
                    v79 += 28;
                    if (v73 <= (unsigned __int16)v78)
                    {
                      if (*((void *)&xmmword_26AE6C858 + 1)) {
                        free(*((void **)&xmmword_26AE6C858 + 1));
                      }
                      *((void *)&xmmword_26AE6C858 + 1) = 0;
                      double v80 = gnssOsa_Calloc("xofSvcs00_21ParseAlmData", 1118, 1, 28 * v73);
                      *((void *)&xmmword_26AE6C858 + 1) = v80;
                      if (v80)
                      {
                        memcpy_s("xofSvcs00_21ParseAlmData", 1125, v80, 28 * v73, __src, 28 * v73);
                        LODWORD(v59) = v216 + v74;
                        v216 += v74;
                        __src += v74;
                        goto LABEL_155;
                      }
                      goto LABEL_176;
                    }
                  }
                  if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                    goto LABEL_176;
                  }
                  bzero(__str, 0x410uLL);
                  uint64_t v204 = 770;
                  unint64_t v200 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  double v56 = "%10u %s%c %s: #%04hx Galileo Alm data endian conversion\n";
                  goto LABEL_175;
                }
                if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  uint64_t v207 = v75;
                  uint64_t v209 = a2;
                  uint64_t v204 = 772;
                  double v56 = "%10u %s%c %s: #%04hx Galileo ComputedOffset,%u,DataLen,%u\n";
                  goto LABEL_174;
                }
              }
              else
              {
                if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v76 = mach_continuous_time();
                  unsigned __int16 v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Galileo Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v76), "GNC", 68, "xofSvcs00_21ParseAlmData", 769);
                  LbsOsaTrace_WriteLog(8u, __str, v77, 5, 1);
                }
LABEL_155:
                uint64_t v81 = byte_26AE66E09;
                if (byte_26AE66E09)
                {
                  uint64_t v82 = 36 * byte_26AE66E09;
                  uint64_t v83 = v59 + v54 + 36 * byte_26AE66E09;
                  if (v83 <= dword_26AE66E28)
                  {
                    int v86 = 0;
                    int v87 = __src;
                    while (xofSvcs02_03EndianConvert(byte_26ADFF897, 0x14u, v87, 0x24u))
                    {
                      ++v86;
                      v87 += 36;
                      if (v81 <= (unsigned __int16)v86)
                      {
                        if ((void)xmmword_26AE6C858) {
                          free((void *)xmmword_26AE6C858);
                        }
                        *(void *)&xmmword_26AE6C858 = 0;
                        int v88 = gnssOsa_Calloc("xofSvcs00_21ParseAlmData", 1157, 1, 36 * v81);
                        *(void *)&xmmword_26AE6C858 = v88;
                        if (v88)
                        {
                          memcpy_s("xofSvcs00_21ParseAlmData", 1164, v88, 36 * v81, __src, 36 * v81);
                          LODWORD(v59) = v216 + v82;
                          v216 += v82;
                          __src += v82;
                          goto LABEL_170;
                        }
                        goto LABEL_176;
                      }
                    }
                    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                      goto LABEL_176;
                    }
                    bzero(__str, 0x410uLL);
                    uint64_t v204 = 772;
                    unint64_t v200 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    double v56 = "%10u %s%c %s: #%04hx GLONASS Alm data endian conversion\n";
                    goto LABEL_175;
                  }
                  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    uint64_t v207 = v83;
                    uint64_t v209 = a2;
                    uint64_t v204 = 771;
                    double v56 = "%10u %s%c %s: #%04hx GLONASS ComputedOffset,%u,DataLen,%u\n";
                    goto LABEL_174;
                  }
                }
                else
                {
                  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    uint64_t v84 = mach_continuous_time();
                    unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "GNC", 68, "xofSvcs00_21ParseAlmData", 769);
                    LbsOsaTrace_WriteLog(8u, __str, v85, 5, 1);
                  }
LABEL_170:
                  uint64_t v89 = BYTE1(xmmword_26AE66E18);
                  if (!BYTE1(xmmword_26AE66E18))
                  {
                    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                    {
LABEL_179:
                      unsigned int v96 = *a4 + v216;
                      *a4 = v96;
                      unsigned int v216 = 0;
                      uint64_t v97 = v96 + a3;
                      if (v97 > a2)
                      {
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = a2;
                        uint64_t v209 = v97;
                        uint64_t v205 = 770;
                        double v99 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
                        goto LABEL_271;
                      }
                      double v100 = &a1[v97];
                      uint64_t v101 = byte_26AE66DCA;
                      if (byte_26AE66DCA)
                      {
                        unint64_t v102 = (unint64_t)byte_26AE66DCA << 6;
                        if ((byte_26AE66DCA << 6) + (int)v97 <= a2)
                        {
                          int v105 = 0;
                          __srcc = &a1[v97];
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8C1, 0x1Du, v100, 0x40u))
                          {
                            ++v105;
                            v100 += 64;
                            if (v101 <= (unsigned __int16)v105)
                            {
                              if (qword_26AE6C870) {
                                free((void *)qword_26AE6C870);
                              }
                              qword_26AE6C870 = 0;
                              int v106 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1253, 1, v101 << 6);
                              qword_26AE6C870 = (uint64_t)v106;
                              if (v106)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1260, v106, v101 << 6, __srcc, v101 << 6);
                                unsigned int v216 = v101 << 6;
                                __srcb = &__srcc[v102];
                                goto LABEL_196;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx GPS BCE data endian conversion\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = ((v101 << 6) + v97);
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx GPS ComputedOffset,%u,DataLen,%u\n";
                        goto LABEL_271;
                      }
                      __srcb = &a1[v97];
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v103 = mach_continuous_time();
                        unsigned __int16 v104 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v104, 5, 1);
                      }
                      LODWORD(v102) = 0;
LABEL_196:
                      uint64_t v107 = BYTE2(xmmword_26AE66DD8);
                      if (BYTE2(xmmword_26AE66DD8))
                      {
                        uint64_t v108 = 40 * BYTE2(xmmword_26AE66DD8);
                        uint64_t v109 = v102 + v97 + 40 * BYTE2(xmmword_26AE66DD8);
                        if (v109 <= a2)
                        {
                          int v112 = 0;
                          int v113 = __srcb;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF885, 0x12u, v113, 0x28u))
                          {
                            ++v112;
                            v113 += 40;
                            if (v107 <= (unsigned __int16)v112)
                            {
                              if ((void)xmmword_26AE6C878) {
                                free((void *)xmmword_26AE6C878);
                              }
                              *(void *)&xmmword_26AE6C878 = 0;
                              double v114 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1292, 1, 40 * v107);
                              *(void *)&xmmword_26AE6C878 = v114;
                              if (v114)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1299, v114, 40 * v107, __srcb, 40 * v107);
                                LODWORD(v102) = v216 + v108;
                                v216 += v108;
                                __srcb += v108;
                                goto LABEL_211;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx SBAS BCE data endian conversion\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = v109;
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx SBAS,ComputedOffset,%u,DataLen,%u\n";
                        goto LABEL_271;
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v110 = mach_continuous_time();
                        unsigned __int16 v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS BCE data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v110), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v111, 5, 1);
                      }
LABEL_211:
                      uint64_t v115 = byte_26AE66DEA;
                      if (byte_26AE66DEA)
                      {
                        unint64_t v116 = (unint64_t)byte_26AE66DEA << 6;
                        uint64_t v117 = (int)v102 + (int)v97 + (byte_26AE66DEA << 6);
                        if (v117 <= a2)
                        {
                          int v120 = 0;
                          double v121 = __srcb;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8C1, 0x1Du, v121, 0x40u))
                          {
                            ++v120;
                            v121 += 64;
                            if (v115 <= (unsigned __int16)v120)
                            {
                              if (*((void *)&xmmword_26AE6C878 + 1)) {
                                free(*((void **)&xmmword_26AE6C878 + 1));
                              }
                              *((void *)&xmmword_26AE6C878 + 1) = 0;
                              unsigned int v122 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1329, 1, v115 << 6);
                              *((void *)&xmmword_26AE6C878 + 1) = v122;
                              if (v122)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1336, v122, v115 << 6, __srcb, v115 << 6);
                                LODWORD(v102) = v216 + v116;
                                v216 += v116;
                                __srcb += v116;
                                goto LABEL_226;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx QZSS BCE data endian conversion\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = v117;
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx QZSS ComputedOffset,%u,DataLen,%u\n";
                        goto LABEL_271;
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v118 = mach_continuous_time();
                        unsigned __int16 v119 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v118), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v119, 5, 1);
                      }
LABEL_226:
                      uint64_t v123 = BYTE2(xmmword_26AE66DF8);
                      if (BYTE2(xmmword_26AE66DF8))
                      {
                        uint64_t v124 = 68 * BYTE2(xmmword_26AE66DF8);
                        uint64_t v125 = v102 + v97 + 68 * BYTE2(xmmword_26AE66DF8);
                        if (v125 <= a2)
                        {
                          int v128 = 0;
                          int v129 = __srcb;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8DE, 0x1Du, v129, 0x44u))
                          {
                            ++v128;
                            v129 += 68;
                            if (v123 <= (unsigned __int16)v128)
                            {
                              if (qword_26AE6C888) {
                                free((void *)qword_26AE6C888);
                              }
                              qword_26AE6C888 = 0;
                              uint64_t v130 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1367, 1, 68 * v123);
                              qword_26AE6C888 = (uint64_t)v130;
                              if (v130)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1374, v130, 68 * v123, __srcb, 68 * v123);
                                LODWORD(v102) = v216 + v124;
                                v216 += v124;
                                __srcb += v124;
                                goto LABEL_241;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx Galileo BCE data endian conversion\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = v125;
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx Galileo ComputedOffset,%u,DataLen,%u\n";
                        goto LABEL_271;
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v126 = mach_continuous_time();
                        unsigned __int16 v127 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Galileo BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v127, 5, 1);
                      }
LABEL_241:
                      unsigned int v131 = byte_26AE66E0A;
                      if (byte_26AE66E0A)
                      {
                        uint64_t v132 = 44 * byte_26AE66E0A;
                        uint64_t v133 = (v102 + v97 + v132);
                        if (v133 <= a2)
                        {
                          int v140 = 0;
                          double v141 = __srcb;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8AB, 0x16u, v141, 0x2Cu))
                          {
                            ++v140;
                            v141 += 44;
                            if (v131 <= (unsigned __int16)v140)
                            {
                              if (qword_26AE6C890) {
                                free((void *)qword_26AE6C890);
                              }
                              qword_26AE6C890 = 0;
                              unsigned int v142 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1406, 1, 44 * v131);
                              qword_26AE6C890 = (uint64_t)v142;
                              if (v142)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1413, v142, 44 * v131, __srcb, 44 * v131);
                                LODWORD(v102) = v216 + v132;
                                v216 += v132;
                                __srcb += v132;
                                goto LABEL_267;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx GLONASS BCE data endian conversion failed\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = v133;
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx GLONASS ComputedOffset,%u,DataLen,%u\n";
                        goto LABEL_271;
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v135 = mach_continuous_time();
                        unsigned __int16 v136 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v136, 5, 1);
                      }
LABEL_267:
                      unsigned int v143 = BYTE2(xmmword_26AE66E18);
                      if (BYTE2(xmmword_26AE66E18))
                      {
                        int v144 = 84 * BYTE2(xmmword_26AE66E18);
                        uint64_t v145 = (v102 + v97 + v144);
                        if (v145 <= a2)
                        {
                          int v150 = 0;
                          int v151 = __srcb;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8FB, 0x1Eu, v151, 0x54u))
                          {
                            ++v150;
                            v151 += 84;
                            if (v143 <= (unsigned __int16)v150)
                            {
                              if ((void)xmmword_26AE6C898) {
                                free((void *)xmmword_26AE6C898);
                              }
                              *(void *)&xmmword_26AE6C898 = 0;
                              uint64_t v152 = gnssOsa_Calloc("xofSvcs00_16ParseBrdCstEphData", 1445, 1, 84 * v143);
                              *(void *)&xmmword_26AE6C898 = v152;
                              if (v152)
                              {
                                memcpy_s("xofSvcs00_16ParseBrdCstEphData", 1452, v152, 84 * v143, __srcb, 84 * v143);
                                LODWORD(v102) = v216 + v144;
                                goto LABEL_288;
                              }
                              goto LABEL_273;
                            }
                          }
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_273;
                          }
                          bzero(__str, 0x410uLL);
                          uint64_t v205 = 770;
                          unint64_t v201 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          double v99 = "%10u %s%c %s: #%04hx BeiDou BCE data endian conversion failed\n";
                          goto LABEL_272;
                        }
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_273;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v98 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                        uint64_t v207 = v145;
                        uint64_t v209 = a2;
                        uint64_t v205 = 772;
                        double v99 = "%10u %s%c %s: #%04hx BeiDou ComputedOffset,%u,DataLen,%u\n";
LABEL_271:
                        unint64_t v201 = v98;
LABEL_272:
                        unsigned __int16 v146 = snprintf(__str, 0x40FuLL, v99, v201, "GNC", 69, "xofSvcs00_16ParseBrdCstEphData", v205, v207, v209);
                        LbsOsaTrace_WriteLog(8u, __str, v146, 0, 1);
LABEL_273:
                        int v147 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
                        uint64_t result = 0;
                        if (v147)
                        {
                          bzero(__str, 0x410uLL);
                          mach_continuous_time();
                          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BCE\n");
                          goto LABEL_26;
                        }
                        return result;
                      }
                      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v148 = mach_continuous_time();
                        unsigned __int16 v149 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BeiDou BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "GNC", 68, "xofSvcs00_16ParseBrdCstEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v149, 5, 1);
                      }
LABEL_288:
                      unsigned int v153 = *a4 + v102;
                      *a4 = v153;
                      unsigned int v216 = 0;
                      uint64_t v154 = v153 + a3;
                      if (v154 > a2)
                      {
                        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                          goto LABEL_360;
                        }
                        bzero(__str, 0x410uLL);
                        unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)mach_continuous_time());
                        uint64_t v207 = a2;
                        uint64_t v209 = v154;
                        uint64_t v206 = 770;
                        uint64_t v156 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
LABEL_358:
                        unint64_t v202 = v155;
                        goto LABEL_359;
                      }
                      __srcd = &a1[v154];
                      if (byte_26AE66DCB)
                      {
                        unsigned int v157 = byte_26AE66DCC * byte_26AE66DCB;
                        if (v154 + (v157 << 6) > a2)
                        {
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_360;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          uint64_t v207 = v154 + (v157 << 6);
                          uint64_t v209 = a2;
                          uint64_t v206 = 772;
                          uint64_t v156 = "%10u %s%c %s: #%04hx GPS ComputedOffset,%u,DataLen,%u\n";
                          goto LABEL_358;
                        }
                        if (v157)
                        {
                          unsigned int v161 = 0;
                          int v162 = &a1[v154];
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8C1, 0x1Du, v162, 0x40u))
                          {
                            ++v161;
                            v162 += 64;
                            if (v161 >= v157) {
                              goto LABEL_304;
                            }
                          }
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v206 = 770;
                            unint64_t v202 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            uint64_t v156 = "%10u %s%c %s: #%04hx GPS EE endian conversion\n";
LABEL_359:
                            unsigned __int16 v190 = snprintf(__str, 0x40FuLL, v156, v202, "GNC", 69, "xofSvcs00_17ParseExtEphData", v206, v207, v209);
                            LbsOsaTrace_WriteLog(8u, __str, v190, 0, 1);
                            goto LABEL_360;
                          }
                          goto LABEL_360;
                        }
LABEL_304:
                        uint64_t v160 = v157 << 6;
                        if (*((void *)&xmmword_26AE6C898 + 1)) {
                          free(*((void **)&xmmword_26AE6C898 + 1));
                        }
                        *((void *)&xmmword_26AE6C898 + 1) = 0;
                        int v163 = gnssOsa_Calloc("xofSvcs00_17ParseExtEphData", 1504, 1, v157 << 6);
                        *((void *)&xmmword_26AE6C898 + 1) = v163;
                        if (!v163) {
                          goto LABEL_360;
                        }
                        memcpy_s("xofSvcs00_17ParseExtEphData", 1512, v163, v157 << 6, __srcd, v157 << 6);
                        unsigned int v216 = v157 << 6;
                        __srcd += v160;
                      }
                      else
                      {
                        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                        {
                          bzero(__str, 0x410uLL);
                          uint64_t v158 = mach_continuous_time();
                          unsigned __int16 v159 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v158), "GNC", 68, "xofSvcs00_17ParseExtEphData", 769);
                          LbsOsaTrace_WriteLog(8u, __str, v159, 5, 1);
                        }
                        LODWORD(v160) = 0;
                      }
                      if (byte_26AE66DEB)
                      {
                        unsigned int v164 = byte_26AE66DEC * byte_26AE66DEB;
                        uint64_t v165 = v154 + (v164 << 6) + v160;
                        if (v165 > a2)
                        {
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_360;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          uint64_t v207 = v165;
                          uint64_t v209 = a2;
                          uint64_t v206 = 772;
                          uint64_t v156 = "%10u %s%c %s: #%04hx QZSS ComputedOffset,%u,DataLen,%u\n";
                          goto LABEL_358;
                        }
                        if (v164)
                        {
                          unsigned int v168 = 0;
                          int64x2_t v169 = __srcd;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8C1, 0x1Du, v169, 0x40u))
                          {
                            ++v168;
                            v169 += 64;
                            if (v168 >= v164) {
                              goto LABEL_318;
                            }
                          }
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v206 = 770;
                            unint64_t v202 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            uint64_t v156 = "%10u %s%c %s: #%04hx QZSS EE endian conversion\n";
                            goto LABEL_359;
                          }
LABEL_360:
                          int v191 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
                          uint64_t result = 0;
                          if (v191)
                          {
                            bzero(__str, 0x410uLL);
                            mach_continuous_time();
                            unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EE\n");
                            goto LABEL_26;
                          }
                          return result;
                        }
LABEL_318:
                        uint64_t v170 = v164 << 6;
                        if (qword_26AE6C8A8) {
                          free((void *)qword_26AE6C8A8);
                        }
                        qword_26AE6C8A8 = 0;
                        uint64_t v171 = gnssOsa_Calloc("xofSvcs00_17ParseExtEphData", 1546, 1, v164 << 6);
                        qword_26AE6C8A8 = (uint64_t)v171;
                        if (!v171) {
                          goto LABEL_360;
                        }
                        memcpy_s("xofSvcs00_17ParseExtEphData", 1554, v171, v164 << 6, __srcd, v164 << 6);
                        LODWORD(v160) = v216 + v170;
                        v216 += v170;
                        __srcd += v170;
                      }
                      else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v166 = mach_continuous_time();
                        unsigned __int16 v167 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QZSS EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v166), "GNC", 68, "xofSvcs00_17ParseExtEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v167, 5, 1);
                      }
                      if (BYTE3(xmmword_26AE66DF8))
                      {
                        unsigned int v172 = BYTE4(xmmword_26AE66DF8) * BYTE3(xmmword_26AE66DF8);
                        uint64_t v173 = v154 + 68 * v172 + v160;
                        if (v173 > a2)
                        {
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_360;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          uint64_t v207 = v173;
                          uint64_t v209 = a2;
                          uint64_t v206 = 772;
                          uint64_t v156 = "%10u %s%c %s: #%04hx GAL ComputedOffset,%u,DataLen,%u\n";
                          goto LABEL_358;
                        }
                        if (v172)
                        {
                          unsigned int v176 = 0;
                          BOOL v177 = __srcd;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8DE, 0x1Du, v177, 0x44u))
                          {
                            ++v176;
                            v177 += 68;
                            if (v176 >= v172) {
                              goto LABEL_334;
                            }
                          }
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v206 = 770;
                            unint64_t v202 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            uint64_t v156 = "%10u %s%c %s: #%04hx Galileo EE endian conversion\n";
                            goto LABEL_359;
                          }
                          goto LABEL_360;
                        }
LABEL_334:
                        uint64_t v178 = 68 * v172;
                        if (qword_26AE6C8B0) {
                          free((void *)qword_26AE6C8B0);
                        }
                        qword_26AE6C8B0 = 0;
                        int v179 = gnssOsa_Calloc("xofSvcs00_17ParseExtEphData", 1589, 1, 68 * v172);
                        qword_26AE6C8B0 = (uint64_t)v179;
                        if (!v179) {
                          goto LABEL_360;
                        }
                        memcpy_s("xofSvcs00_17ParseExtEphData", 1597, v179, 68 * v172, __srcd, 68 * v172);
                        LODWORD(v160) = v216 + v178;
                        v216 += v178;
                        __srcd += v178;
                      }
                      else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v174 = mach_continuous_time();
                        unsigned __int16 v175 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Galileo EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v174), "GNC", 68, "xofSvcs00_17ParseExtEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v175, 5, 1);
                      }
                      if (byte_26AE66E0B)
                      {
                        unsigned int v180 = byte_26AE66E0C * byte_26AE66E0B;
                        uint64_t v181 = v154 + (v180 << 6) + v160;
                        if (v181 > a2)
                        {
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_360;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          uint64_t v207 = v181;
                          uint64_t v209 = a2;
                          uint64_t v206 = 772;
                          uint64_t v156 = "%10u %s%c %s: #%04hx GLO ComputedOffset,%u,DataLen,%u\n";
                          goto LABEL_358;
                        }
                        if (v180)
                        {
                          unsigned int v184 = 0;
                          unsigned __int8 v185 = __srcd;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8C1, 0x1Du, v185, 0x40u))
                          {
                            ++v184;
                            v185 += 64;
                            if (v184 >= v180) {
                              goto LABEL_350;
                            }
                          }
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v206 = 770;
                            unint64_t v202 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            uint64_t v156 = "%10u %s%c %s: #%04hx GLO EE endian conversion\n";
                            goto LABEL_359;
                          }
                          goto LABEL_360;
                        }
LABEL_350:
                        uint64_t v186 = v180 << 6;
                        if ((void)xmmword_26AE6C8B8) {
                          free((void *)xmmword_26AE6C8B8);
                        }
                        *(void *)&xmmword_26AE6C8B8 = 0;
                        unsigned __int8 v187 = gnssOsa_Calloc("xofSvcs00_17ParseExtEphData", 1630, 1, v180 << 6);
                        *(void *)&xmmword_26AE6C8B8 = v187;
                        if (!v187) {
                          goto LABEL_360;
                        }
                        memcpy_s("xofSvcs00_17ParseExtEphData", 1638, v187, v180 << 6, __srcd, v180 << 6);
                        LODWORD(v160) = v216 + v186;
                        v216 += v186;
                        __srcd += v186;
                      }
                      else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v182 = mach_continuous_time();
                        unsigned __int16 v183 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLO EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v182), "GNC", 68, "xofSvcs00_17ParseExtEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v183, 5, 1);
                      }
                      if (BYTE3(xmmword_26AE66E18))
                      {
                        unsigned int v188 = BYTE4(xmmword_26AE66E18) * BYTE3(xmmword_26AE66E18);
                        uint64_t v189 = 84 * v188 + v154 + v160;
                        if (v189 > a2)
                        {
                          if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                            goto LABEL_360;
                          }
                          bzero(__str, 0x410uLL);
                          unint64_t v155 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
                          uint64_t v207 = v189;
                          uint64_t v209 = a2;
                          uint64_t v206 = 772;
                          uint64_t v156 = "%10u %s%c %s: #%04hx BDS ComputedOffset,%u,DataLen,%u\n";
                          goto LABEL_358;
                        }
                        if (v188)
                        {
                          unsigned int v194 = 0;
                          int v195 = __srcd;
                          while (xofSvcs02_03EndianConvert(byte_26ADFF8FB, 0x1Eu, v195, 0x54u))
                          {
                            ++v194;
                            v195 += 84;
                            if (v194 >= v188) {
                              goto LABEL_370;
                            }
                          }
                          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            uint64_t v206 = 770;
                            unint64_t v202 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                    * (double)mach_continuous_time());
                            uint64_t v156 = "%10u %s%c %s: #%04hx BeiDou EE endian conversion\n";
                            goto LABEL_359;
                          }
                          goto LABEL_360;
                        }
LABEL_370:
                        if (*((void *)&xmmword_26AE6C8B8 + 1)) {
                          free(*((void **)&xmmword_26AE6C8B8 + 1));
                        }
                        *((void *)&xmmword_26AE6C8B8 + 1) = 0;
                        uint64_t v196 = gnssOsa_Calloc("xofSvcs00_17ParseExtEphData", 1672, 1, 84 * v188);
                        *((void *)&xmmword_26AE6C8B8 + 1) = v196;
                        if (!v196) {
                          goto LABEL_360;
                        }
                        memcpy_s("xofSvcs00_17ParseExtEphData", 1680, v196, 84 * v188, __srcd, 84 * v188);
                        LODWORD(v160) = v216 + 84 * v188;
                      }
                      else if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v192 = mach_continuous_time();
                        unsigned __int16 v193 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BeiDou EE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v192), "GNC", 68, "xofSvcs00_17ParseExtEphData", 769);
                        LbsOsaTrace_WriteLog(8u, __str, v193, 5, 1);
                      }
                      unsigned int v197 = *a4 + v160;
                      *a4 = v197;
                      unsigned int v216 = 0;
                      if (xofSvcs00_18ParseBrdCstSvMaskData(a1, a2, v197 + a3, &v216))
                      {
                        *a4 += v216;
                        return 1;
                      }
                      int v198 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
                      uint64_t result = 0;
                      if (v198)
                      {
                        bzero(__str, 0x410uLL);
                        mach_continuous_time();
                        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BrdCstSvBitMask\n");
                        goto LABEL_26;
                      }
                      return result;
                    }
                    bzero(__str, 0x410uLL);
                    uint64_t v134 = mach_continuous_time();
                    size_t v94 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BeiDou Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v134), "GNC", 68, "xofSvcs00_21ParseAlmData", 769);
                    int v95 = 5;
LABEL_178:
                    LbsOsaTrace_WriteLog(8u, __str, v94, v95, 1);
                    goto LABEL_179;
                  }
                  int v90 = 40 * BYTE1(xmmword_26AE66E18);
                  uint64_t v91 = (v59 + v54 + v90);
                  if (v91 <= a2)
                  {
                    int v137 = 0;
                    int v138 = __src;
                    while (xofSvcs02_03EndianConvert(byte_26ADFF874, 0x11u, v138, 0x28u))
                    {
                      ++v137;
                      v138 += 40;
                      if (v89 <= (unsigned __int16)v137)
                      {
                        if (qword_26AE6C868) {
                          free((void *)qword_26AE6C868);
                        }
                        qword_26AE6C868 = 0;
                        int v139 = gnssOsa_Calloc("xofSvcs00_21ParseAlmData", 1196, 1, 40 * v89);
                        qword_26AE6C868 = (uint64_t)v139;
                        if (v139)
                        {
                          memcpy_s("xofSvcs00_21ParseAlmData", 1203, v139, 40 * v89, __src, 40 * v89);
                          v216 += v90;
                          goto LABEL_179;
                        }
                        goto LABEL_176;
                      }
                    }
                    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
                      goto LABEL_176;
                    }
                    bzero(__str, 0x410uLL);
                    uint64_t v204 = 770;
                    unint64_t v200 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    double v56 = "%10u %s%c %s: #%04hx BeiDou Almanac data endian conversion\n";
                    goto LABEL_175;
                  }
                  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                    uint64_t v207 = v91;
                    uint64_t v209 = a2;
                    uint64_t v204 = 772;
                    double v56 = "%10u %s%c %s: #%04hx BeiDou ComputedOffset,%u,DataLen,%u\n";
                    goto LABEL_174;
                  }
                }
              }
            }
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v55 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          uint64_t v207 = a2;
          uint64_t v209 = v54;
          uint64_t v204 = 770;
          double v56 = "%10u %s%c %s: #%04hx DataLen,%u,Offset,%u\n";
LABEL_174:
          unint64_t v200 = v55;
LABEL_175:
          unsigned __int16 v92 = snprintf(__str, 0x40FuLL, v56, v200, "GNC", 69, "xofSvcs00_21ParseAlmData", v204, v207, v209);
          LbsOsaTrace_WriteLog(8u, __str, v92, 0, 1);
        }
LABEL_176:
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
          goto LABEL_179;
        }
        bzero(__str, 0x410uLL);
        uint64_t v93 = mach_continuous_time();
        size_t v94 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "GNC", 69, "xofSvcs00_20ParsePayLoad", 770);
        int v95 = 0;
        goto LABEL_178;
      }
      if ((unint64_t)(v41 + v34) + 16 <= a2)
      {
        double v52 = &v40[v41];
        if (xofSvcs02_03EndianConvert(_MergedGlobals, 8u, v52, 0x10u))
        {
          memcpy_s("xofSvcs00_14ParseTimeModel", 966, &unk_26AE6C834, 0x10u, v52, 0x10uLL);
          v41 += 16;
          goto LABEL_104;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v60 = mach_continuous_time();
          size_t v37 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BeiDou time model endian conversion\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "GNC", 73, "xofSvcs00_14ParseTimeModel", 770);
          int v38 = 4;
          goto LABEL_48;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v207 = v41 + v34 + 16;
        uint64_t v209 = a2;
        uint64_t v203 = 772;
        unsigned __int16 v36 = "%10u %s%c %s: #%04hx BeiDou ComputedOffset,%lu,DataLen,%u\n";
        goto LABEL_46;
      }
LABEL_49:
      int v39 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
      uint64_t result = 0;
      if (v39)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time model\n");
        goto LABEL_26;
      }
      return result;
    }
    if ((unint64_t)(v41 + v34) + 16 <= a2)
    {
      if (!xofSvcs02_03EndianConvert(_MergedGlobals, 8u, &v40[v41], 0x10u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v203 = 770;
          unint64_t v199 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v36 = "%10u %s%c %s: #%04hx GLONASS time model endian conversion\n";
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      memcpy_s("xofSvcs00_14ParseTimeModel", 937, (char *)&xmmword_26AE6C818 + 12, 0x10u, &v40[v41], 0x10uLL);
      v41 += 16;
      unsigned int v216 = v41;
      goto LABEL_93;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      goto LABEL_49;
    }
    bzero(__str, 0x410uLL);
    unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v207 = v41 + v34 + 16;
    uint64_t v209 = a2;
    uint64_t v203 = 772;
    unsigned __int16 v36 = "%10u %s%c %s: #%04hx GLONASS ComputedOffset,%lu,PayLoadLen,%u\n";
LABEL_46:
    unint64_t v199 = v35;
LABEL_47:
    size_t v37 = (unsigned __int16)snprintf(__str, 0x40FuLL, v36, v199, "GNC", 69, "xofSvcs00_14ParseTimeModel", v203, v207, v209);
    int v38 = 0;
LABEL_48:
    LbsOsaTrace_WriteLog(8u, __str, v37, v38, 1);
    goto LABEL_49;
  }
  if (v24 + 48 <= (unint64_t)a2)
  {
    unsigned __int16 v32 = &a1[v24];
    int v27 = 48;
    memcpy_s("xofSvcs00_13ParseGloChanMap", 792, &unk_26AE6C8C8, 0x30u, v32, 0x30uLL);
    goto LABEL_43;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
    goto LABEL_40;
  }
  bzero(__str, 0x410uLL);
  unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Offset,%u,PayLoadLen,%u\n", v30);
LABEL_39:
  LbsOsaTrace_WriteLog(8u, __str, v26, 0, 1);
LABEL_40:
  int v31 = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  uint64_t result = 0;
  if (v31)
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS channel map\n");
    goto LABEL_26;
  }
  return result;
}

uint64_t xofSvcs00_29ValidateConstellInfo(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(unsigned __int8 *)(a2 + 1);
  if (v5 <= a3
    && (unsigned int v6 = *(unsigned __int8 *)(a2 + 2), v6 <= a3)
    && (unsigned int v7 = *(unsigned __int8 *)(a2 + 3), v7 <= a3)
    && *(unsigned __int8 *)(a2 + 4) <= 0x2Au
    && *(unsigned __int8 *)(a2 + 5) < 0xA9u)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    int v13 = *(unsigned __int8 *)(a2 + 6);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u,AlmSats,%u,BceSats,%u,EeSats,%u,NumBlk,%u,BlkLen,%u,EeMask,0x%llx,Tm,%u,BrdSvMaskIncl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 73, "xofSvcs00_29ValidateConstellInfo", 0, a1, *(unsigned __int8 *)(a2 + 1), *(unsigned __int8 *)(a2 + 2), *(unsigned __int8 *)(a2 + 3), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), v12, (v6 | v5 | v7) != 0, v13 == 1);
      uint64_t v8 = 1;
      LbsOsaTrace_WriteLog(8u, __str, v15, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u,AlmSats,%u,BceSats,%u,EeSats,%u,NumBlk,%u,BlkLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs00_29ValidateConstellInfo", 770, a1, *(unsigned __int8 *)(a2 + 1), *(unsigned __int8 *)(a2 + 2), *(unsigned __int8 *)(a2 + 3), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5));
      LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
      return 0;
    }
  }
  return v8;
}

uint64_t GN_AGPS_Set_Alm_El(unsigned __int8 *a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm_El");
  if (result)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 5u) {
      EvLog_v("GN_AGPS_Set_Alm_El: %3d %2d %3d %3d %5d %5d %5d %5d %5d %8d %8d %8d %8d %d", *a1, a1[1], a1[2], a1[3], *((__int16 *)a1 + 2), *((__int16 *)a1 + 3), *((unsigned __int16 *)a1 + 4), *((__int16 *)a1 + 5), *((__int16 *)a1 + 6), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), a1[32]);
    }
    uint64_t v3 = a1[1];
    if ((v3 + 53) <= 0xF5u && (v3 - 33) <= 0xDFu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Sat_ID = %d, Out of range!");
      return 0;
    }
    unsigned int v4 = *((__int16 *)a1 + 2);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 2) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af0 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    unsigned int v5 = *((__int16 *)a1 + 3);
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)a1 + 3) - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: af1 = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    unsigned int v6 = *((unsigned __int16 *)a1 + 4);
    double v7 = (double)v6 * 0.000000476837158;
    if (v7 < 0.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v7 > dbl_22BB0DF50[(v3 + 53) < 0xF6u])
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: e = %g > %g, Unrealistic value!");
      return 0;
    }
    double v8 = 0.0;
    if ((v3 + 53) >= 0xF6u) {
      double v8 = 0.000000314159265;
    }
    __int16 v9 = *((_WORD *)a1 + 6);
    double v10 = (double)v9 * 1.14290475e-11;
    if (v10 < -0.00000198862815)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e < %e rad/s, Unrealistic value!");
      return 0;
    }
    if (v10 > v8)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: OmegaDot = %e > %e rad/s, Unrealistic value!");
      return 0;
    }
    unsigned int v11 = *((_DWORD *)a1 + 4);
    if (HIBYTE(v11))
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %u >=2^24,  Out of range !");
      return 0;
    }
    double v12 = (double)v11 * 0.00048828125;
    if (v12 < 4800.0)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g < %g, Unrealistic value!");
      return 0;
    }
    if (v12 > dbl_22BB0DF60[(v3 + 53) < 0xF6u])
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: APowerHalf = %g > %g, Unrealistic value!");
      return 0;
    }
    int v13 = *((_DWORD *)a1 + 5);
    if ((v13 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: Omega0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v14 = *((_DWORD *)a1 + 6);
    if ((v14 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: w = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v15 = *((_DWORD *)a1 + 7);
    if ((v15 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGPS_Set_Alm_El: FAILED: M0 = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v35 = 0;
    char v16 = v3 & 0x3F;
    if (v3 == 32) {
      char v16 = 0;
    }
    __int16 v20 = v6;
    char v21 = v16;
    unsigned __int8 v17 = a1[3];
    __int16 v22 = *((_WORD *)a1 + 5);
    unsigned __int8 v23 = v17;
    unsigned __int8 v24 = a1[2];
    __int16 v25 = v9;
    __int16 v26 = v11;
    char v27 = BYTE2(v11);
    __int16 v28 = v13;
    char v29 = BYTE2(v13);
    __int16 v30 = v14;
    char v31 = BYTE2(v14);
    __int16 v32 = v15;
    char v33 = BYTE2(v15);
    char v34 = (32 * v5) | (4 * (v4 & 7));
    LOBYTE(v35) = v5 >> 3;
    BYTE1(v35) = v4 >> 3;
    __int16 v19 = *a1;
    int v18 = 0;
    BYTE2(v35) = a1[32];
    return GN_AGPS_Set_Alm(v3, (uint64_t)&v18);
  }
  return result;
}

void Kep_Calc_SV_Ref_State(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  __int16 v8 = a2;
  v116[1] = *(double *)MEMORY[0x263EF8340];
  if (*(_WORD *)(a4 + 18))
  {
    int v10 = *(_DWORD *)(a4 + 24);
    int v11 = a3 + 604800 * (a2 - *(__int16 *)(a4 + 18)) - v10;
  }
  else
  {
    int v10 = *(_DWORD *)(a4 + 24);
    int v12 = a3 - v10;
    int v13 = a3 - v10 - 604800;
    if (a3 - v10 <= 302399) {
      int v13 = a3 - v10;
    }
    if (v12 < -302400) {
      int v11 = v12 + 604800;
    }
    else {
      int v11 = v13;
    }
  }
  double v14 = *(double *)(a4 + 168);
  double v15 = v14 * v14;
  int v16 = *(_DWORD *)(a4 + 8);
  double v102 = *(double *)(a4 + 96) + sqrt(dbl_22BB0E450[(v16 - 3) < 2]) / (v14 * (v14 * v14));
  double v106 = (double)v11;
  double v17 = *(double *)(a4 + 160) + v102 * (double)v11;
  long double v18 = sin(v17);
  unsigned int v19 = 0;
  double v20 = *(double *)(a4 + 200);
  double v21 = v17 + v20 * v18;
  do
  {
    double v22 = v21;
    double v21 = v17 + v20 * sin(v21);
  }
  while (vabdd_f64(v21, v22) > 1.0e-11 && v19++ < 0x13);
  double v104 = 1.0 - v20 * v20;
  double v24 = cos(v17);
  long double v25 = tan(v21 * 0.5);
  long double v26 = atan(sqrt((v20 + 1.0) / (1.0 - v20)) * v25);
  double v27 = v26 + v26;
  if (v27 < 0.0) {
    double v27 = v27 + 6.28318531;
  }
  __double2 v28 = __sincos_stret(v27);
  __double2 v29 = __sincos_stret(*(double *)(a4 + 192));
  double v30 = v29.__sinval * v28.__cosval + v28.__sinval * v29.__cosval;
  double v31 = v28.__cosval * v29.__cosval - v28.__sinval * v29.__sinval;
  double v32 = v31 * (v30 + v30);
  if (a1 == 1)
  {
    double v24 = v31 * v31 - v30 * v30;
    double v33 = v24 * *(double *)(a4 + 120) + *(double *)(a4 + 128) * v32;
    double v34 = v33 * v33 * -0.5 + 1.0;
    double v35 = v31 * v33;
    double v99 = v33;
    double v36 = -(v30 * v33);
    double v30 = v35 + v30 * v34;
    double v31 = v36 + v31 * v34;
    double v37 = v24 * *(double *)(a4 + 104) + *(double *)(a4 + 112) * v32;
  }
  else
  {
    double v99 = 0.0;
    double v37 = 0.0;
  }
  double v105 = sqrt(v104);
  double v101 = v15;
  double v103 = v20 * v28.__cosval + 1.0;
  double v98 = v37;
  double v38 = v15 * v104 / v103 + v37;
  double v39 = v31 * v38;
  double v40 = v38 * v30;
  double v41 = *(double *)(a4 + 184);
  double v97 = v32;
  if (a1 == 1)
  {
    double v100 = v24 * *(double *)(a4 + 136) + *(double *)(a4 + 144) * v32;
    double v42 = (double)v11;
    double v41 = v41 + v100 + *(double *)(a4 + 152) * v106;
  }
  else
  {
    double v100 = 0.0;
    double v42 = (double)v11;
  }
  __double2 v43 = __sincos_stret(v41);
  double v44 = dbl_22BB0E460[v16 == 4];
  double v45 = *(double *)(a4 + 208) - v44;
  __double2 v46 = __sincos_stret(*(double *)(a4 + 176) + v45 * v42 - v44 * (double)v10);
  *(double *)a5 = v39 * v46.__cosval - v40 * v43.__cosval * v46.__sinval;
  *(double *)(a5 + 8) = v40 * v43.__cosval * v46.__cosval + v39 * v46.__sinval;
  double v47 = v40 * v43.__sinval;
  *(double *)(a5 + 16) = v40 * v43.__sinval;
  double v48 = v102;
  double v49 = v103 * (v102 * v103) / (v104 * v105);
  double v50 = v49 + v49;
  double v51 = v102 * (v101 * *(double *)(a4 + 200) / v105);
  double v52 = v28.__sinval * v51;
  double v53 = 0.0;
  if (a1 == 1)
  {
    double v54 = *(double *)(a4 + 128) * v24 - *(double *)(a4 + 120) * v97;
    double v55 = *(double *)(a4 + 112) * v24 - *(double *)(a4 + 104) * v97;
    double v56 = v49 + v50 * v54;
    double v52 = v52 + v50 * v55;
    double v57 = *(double *)(a4 + 144) * v24 - *(double *)(a4 + 136) * v97;
    double v58 = *(double *)(a4 + 152) + v50 * v57;
  }
  else
  {
    double v56 = v103 * (v102 * v103) / (v104 * v105);
    double v54 = 0.0;
    double v55 = 0.0;
    double v57 = 0.0;
    double v58 = 0.0;
  }
  double v59 = v52 * v31 - v40 * v56;
  double v60 = v39 * v56 + v52 * v30;
  double v61 = v59 + -(v40 * v45) * v43.__cosval;
  double v62 = v60 * v43.__cosval - v47 * v58 + v39 * v45;
  double v63 = v61 * v46.__cosval - v62 * v46.__sinval;
  double v64 = v46.__cosval * v62 + v61 * v46.__sinval;
  *(double *)(a5 + 24) = v63;
  *(double *)(a5 + 32) = v64;
  double v65 = v43.__cosval * (v40 * v58) + v60 * v43.__sinval;
  *(double *)(a5 + 40) = v65;
  double v66 = v103 * (v28.__sinval * (-(v50 * v102) * *(double *)(a4 + 200)) / (v104 * v105));
  double cosval = v28.__cosval;
  double v68 = v28.__cosval * (v49 * v51);
  if (a1 == 1)
  {
    double v69 = v66 + v66;
    double v70 = v50 * -v50;
    double v68 = v68 + (v66 + v66) * v55 + v70 * v98;
    double v66 = v66 + (v66 + v66) * v54 + v70 * v99;
    double v53 = v70 * v100 + v69 * v57;
  }
  double v71 = v52 * v56;
  double v72 = v31 * v71 + v68 * v30 + v59 * v56 + v66 * v39;
  double v73 = v68 * v31 - v71 * v30 - v60 * v56 - v66 * v40 + -(v60 * v45) * v43.__cosval + v45 * (v40 * v58) * v43.__sinval;
  double v74 = v43.__sinval * -(v60 * v58) + v72 * v43.__cosval - v65 * v58 + -v47 * v53 + v59 * v45;
  double v75 = v46.__cosval * v73 - v45 * v64 - v74 * v46.__sinval;
  double v76 = v46.__sinval * v73 + v45 * v63 + v74 * v46.__cosval;
  *(double *)(a5 + 48) = v75;
  *(double *)(a5 + 56) = v76;
  double v77 = v43.__cosval * ((v60 + v60) * v58) + v72 * v43.__sinval + v40 * v53 * v43.__cosval;
  double v78 = -(v58 * v58);
  double v79 = dbl_22BB0E470[v16 == 4];
  double v80 = v77 + v78 * v47;
  double v81 = dbl_22BB0E480[v16 == 4];
  *(double *)(a5 + 64) = v80;
  *(double *)(a5 + 72) = v79 * v76 + v81 * -3.0 * v63;
  *(double *)(a5 + 80) = v81 * -3.0 * v64 - v79 * v75;
  *(double *)(a5 + 88) = (v81 * -3.0 - v81) * v65;
  if (a1 == 1)
  {
    unint64_t v82 = *(char *)(a4 + 15);
    if (v82 > 0xF)
    {
      if ((v82 + 16) > 0x10u)
      {
        double v86 = 99980001.0;
LABEL_39:
        *(double *)(a5 + 112) = v86;
        int v87 = v11 / 60;
        if (*(unsigned char *)(a4 + 14)) {
          int v88 = -180;
        }
        else {
          int v88 = -120;
        }
        int v89 = v88 + v87;
        if (v88 + v87 < 1) {
          goto LABEL_56;
        }
        v116[0] = 0.0;
        if (!R8_EQ((const double *)(a4 + 208), v116)) {
          goto LABEL_54;
        }
        double v115 = 0.0;
        if (!R8_EQ((const double *)(a4 + 48), &v115)) {
          goto LABEL_54;
        }
        double v114 = 0.0;
        if (R8_EQ((const double *)(a4 + 112), &v114)
          && (double v113 = 0.0, R8_EQ((const double *)(a4 + 96), &v113))
          && (double v112 = 0.0, R8_EQ((const double *)(a4 + 120), &v112))
          && (double v111 = 0.0, R8_EQ((const double *)(a4 + 128), &v111))
          && (double v110 = 0.0, R8_EQ((const double *)(a4 + 136), &v110))
          && (double v109 = 0.0, R8_EQ((const double *)(a4 + 144), &v109))
          && (double v108 = 0.0, R8_EQ((const double *)(a4 + 104), &v108)))
        {
          double v107 = 0.0;
          BOOL v90 = R8_EQ((const double *)(a4 + 152), &v107);
          double v48 = v102;
          double cosval = v28.__cosval;
          if (v90) {
            goto LABEL_56;
          }
        }
        else
        {
LABEL_54:
          double v48 = v102;
          double cosval = v28.__cosval;
        }
        *(double *)(a5 + 112) = v86 + (double)(2 * v89 * v89);
LABEL_56:
        double v85 = v106 + (double)(v10 - *(_DWORD *)(a4 + 20));
        goto LABEL_57;
      }
      uint64_t v83 = (double *)((char *)&GPS_Modern_URA_Table + 8 * -(int)v82);
    }
    else
    {
      uint64_t v83 = (double *)((char *)&GPS_Legacy_URA_Table + 8 * v82);
    }
    double v86 = *v83;
    goto LABEL_39;
  }
  int v84 = (v11 + 302400) / 1000 + 1200;
  if (v11 >= 31233600) {
    int v84 = 65500;
  }
  if (v11 <= -301401) {
    int v84 = 1200;
  }
  *(double *)(a5 + 112) = (double)(v84 * v84);
  double v85 = (double)v11;
LABEL_57:
  double v91 = *(double *)(a4 + 200);
  double v92 = v91 * -4.44280763e-10 * *(double *)(a4 + 168) / (v91 * cosval + 1.0);
  double v93 = *(double *)(a4 + 40);
  double v94 = v85 * *(double *)(a4 + 48);
  *(double *)(a5 + 96) = *(double *)(a4 + 32) + v105 * v92 * v28.__sinval + v85 * (v94 + v93);
  *(double *)(a5 + 104) = v93 + v48 * v92 * (cosval + v91) + v94 * 2.0;
  long long v95 = *(_OWORD *)(a4 + 56);
  long long v96 = *(_OWORD *)(a4 + 72);
  *(void *)(a5 + 152) = *(void *)(a4 + 88);
  *(_OWORD *)(a5 + 136) = v96;
  *(_OWORD *)(a5 + 120) = v95;
  *(_DWORD *)(a5 + 160) = a3;
  *(_WORD *)(a5 + 164) = v8;
  *(_WORD *)(a5 + 166) = *(_WORD *)(a4 + 16);
  *(_DWORD *)(a5 + 184) = a1;
  *(unsigned char *)(a5 + 180) = *(unsigned char *)(a4 + 12);
  *(_DWORD *)(a5 + 176) = *(_DWORD *)(a4 + 8);
}

void GM_Inc_Local_Time(int a1, uint64_t a2)
{
  int v3 = a1 - *(_DWORD *)(a2 + 6768);
  *(_DWORD *)(a2 + 6768) = a1;
  Inc_Local_Time(v3, 604800, (double *)(a2 + 6736), (__int16 *)(a2 + 6734));
  Inc_Local_Time(v3, 86400, (double *)(a2 + 6760), (__int16 *)(a2 + 6752));
  int v4 = *(__int16 *)(a2 + 6752);
  if (v4 >= 1462)
  {
    __int16 v5 = *(_WORD *)(a2 + 6748);
    if (v4 >= 2922) {
      __int16 v6 = 2922;
    }
    else {
      __int16 v6 = *(_WORD *)(a2 + 6752);
    }
    unsigned __int16 v7 = v4 - v6 + 1460;
    *(_WORD *)(a2 + 6752) = v4 - 1461 * (v7 / 0x5B5u) - 1461;
    *(_WORD *)(a2 + 6748) = v5 + v7 / 0x5B5u + 1;
  }
}

void DD_Assist_QZSS_Data(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8 = 0;
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v87 = a1 + 3654;
  uint64_t v88 = a1 + 3584;
  uint64_t v89 = a1 + 3644;
  int v9 = a2 - 241;
  int v86 = a2 - 241;
  do
  {
    if (*(unsigned __int8 *)(v8 + a3 + 129) > 0xA5u
      || *(unsigned char *)(a4[1069] + v8) && (v9 - *((_DWORD *)a4 + 27 * v8 + 2152)) > 0xFFFFF806)
    {
      goto LABEL_38;
    }
    long long v97 = 0u;
    memset(v98, 0, 28);
    long long v96 = 0u;
    long long v94 = 0u;
    memset(v95, 0, sizeof(v95));
    if (!Core_Get_QZSS_Eph((v8 - 63), a2, (int *)&v94)) {
      goto LABEL_9;
    }
    uint64_t v10 = a4[1069];
    if (*(unsigned char *)(v10 + v8))
    {
      int v11 = (char *)a4 + 108 * v8;
      int v12 = *((_DWORD *)v11 + 2152);
      if ((int)v94 <= v12 && (int)a2 - v12 > -1801)
      {
LABEL_9:
        *(void *)(a4[1064] + 20 * v8 + 8) = 0;
        goto LABEL_38;
      }
      unsigned int v13 = DWORD2(v94);
      if ((int)v94 - v12 <= 10799)
      {
        int v84 = v11 + 8608;
        if (Is_GPS_BinEph_Real((uint64_t)(v11 + 8608)) && !Is_GPS_BinEph_Real((uint64_t)&v94))
        {
          *int v84 = a2;
          int v9 = v86;
          goto LABEL_38;
        }
      }
    }
    else
    {
      unsigned int v13 = DWORD2(v94);
    }
    unint64_t v14 = (0xE4FE7F3uLL >> ((v13 >> 2) & 0x1F)) & 1;
    double v15 = (_OWORD *)a4[1063];
    if (*((unsigned char *)v15 + v8)) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v14 == 0;
    }
    if (v16)
    {
      int v9 = v86;
    }
    else
    {
      uint64_t v17 = a4[1071];
      int v9 = v86;
      if (!*(unsigned char *)(v17 + v8)) {
        goto LABEL_26;
      }
      long double v18 = (char *)a4 + 44 * v8;
      unint64_t v19 = 0xE4FE7F3uLL >> (*((_DWORD *)v18 + 2697) & 0x1F);
      int v20 = *((_DWORD *)v18 + 2692);
      if ((v19 & 1) != 0 || v20 + 3600 <= (int)a2)
      {
        if (v20 + 100 < (int)a2)
        {
          *(unsigned char *)(a4[1066] + v8) = 0;
          *(unsigned char *)(v17 + v8) = 0;
          *(unsigned char *)(v89 + v8) = -1;
          uint64_t v10 = a4[1069];
          double v15 = (_OWORD *)a4[1063];
        }
LABEL_26:
        LODWORD(v14) = 1;
        goto LABEL_27;
      }
      LODWORD(v14) = 0;
    }
LABEL_27:
    double v21 = (char *)a4 + 108 * v8;
    long long v22 = v95[1];
    *((_OWORD *)v21 + 541) = v96;
    long long v23 = v98[0];
    *((_OWORD *)v21 + 542) = v97;
    *((_OWORD *)v21 + 543) = v23;
    long long v24 = v95[0];
    *((_OWORD *)v21 + 538) = v94;
    *((_OWORD *)v21 + 539) = v24;
    long double v25 = (long long *)(v21 + 8608);
    *((_OWORD *)v21 + 540) = v22;
    *(_OWORD *)(v21 + 8700) = *(_OWORD *)((char *)v98 + 12);
    *(unsigned char *)(a4[1065] + v8) = 1;
    *(unsigned char *)(v10 + v8) = 1;
    *((unsigned char *)v15 + v8) = v14;
    int v26 = *((_DWORD *)v21 + 2153);
    if (v14) {
      int v27 = 1;
    }
    else {
      int v27 = 2;
    }
    uint64_t v28 = a4[1064] + 20 * v8;
    __double2 v29 = (int *)(v28 + 12);
    double v30 = (int *)(v28 + 8);
    if (v26 == 5) {
      double v31 = v30;
    }
    else {
      double v31 = v29;
    }
    *double v31 = v27;
    if ((int)a2 >= 1)
    {
      *(unsigned char *)(a4[1072] + v8) = 1;
      Core_Save_QZSS_Eph((v8 - 63), 0, v25);
      double v15 = (_OWORD *)a4[1063];
    }
    uint64_t v32 = 0;
    LODWORD(v33) = 0;
    uint64_t v34 = p_NV;
    long long v35 = v15[1];
    *(_OWORD *)(p_NV + 92) = *v15;
    *(_OWORD *)(v34 + 108) = v35;
    uint64_t v36 = v34 + 88;
    __int16 v37 = -9871;
    do
    {
      int v38 = *(unsigned __int8 *)(v36 + v32) ^ HIBYTE(v37);
      __int16 v37 = -12691 * (v37 + (*(unsigned __int8 *)(v36 + v32) ^ HIBYTE(v37))) + 22719;
      uint64_t v33 = (v33 + v38);
      ++v32;
    }
    while (v32 != 40);
    *(void *)(v34 + 80) = v33;
    uint64_t v39 = v88 + 6 * v8;
    *(_DWORD *)uint64_t v39 = 16777472;
    *(_WORD *)(v39 + 4) = 256;
    *(_WORD *)(v87 + 2 * v8) = 256;
LABEL_38:
    ++v8;
  }
  while (v8 != 10);
  uint64_t v40 = a5;
  if ((int)a2 >= 1)
  {
    for (uint64_t i = 0; i != 10; ++i)
    {
      if (*(unsigned char *)(a4[1063] + i)
        && !*(unsigned char *)(*(void *)(v40 + 912) + i)
        && *(unsigned __int8 *)(a3 + i + 129) <= 0xA5u
        && (!*(unsigned char *)(a4[1070] + i) || (int)a2 - *((_DWORD *)a4 + 27 * i + 2422) >= 241))
      {
        long long v97 = 0u;
        memset(v98, 0, 28);
        long long v96 = 0u;
        long long v94 = 0u;
        memset(v95, 0, sizeof(v95));
        int GPS_BinEph = EE_Get_GPS_BinEph((i - 63), a2, (uint64_t)&v94);
        uint64_t v43 = a4[1070];
        if (!GPS_BinEph || (int v44 = v94, *(unsigned char *)(v43 + i)) && (int)v94 <= *((_DWORD *)a4 + 27 * i + 2422))
        {
          *(unsigned char *)(v43 + i) = 0;
        }
        else
        {
          long long v45 = v95[0];
          __double2 v46 = (_OWORD *)((char *)a4 + 108 * i + 9688);
          *__double2 v46 = v94;
          v46[1] = v45;
          *(_OWORD *)((char *)v46 + 92) = *(_OWORD *)((char *)v98 + 12);
          long long v47 = v98[0];
          v46[4] = v97;
          v46[5] = v47;
          long long v48 = v96;
          v46[2] = v95[1];
          v46[3] = v48;
          *(unsigned char *)(a4[1065] + i) = 1;
          *(unsigned char *)(v43 + i) = 1;
          uint64_t v49 = v88 + 6 * i;
          *(_DWORD *)uint64_t v49 = 16777472;
          *(_WORD *)(v49 + 4) = 256;
          long long v92 = 0u;
          memset(v93, 0, sizeof(v93));
          long long v91 = 0u;
          v90[0] = v44;
          v90[1] = DWORD1(v94);
          LOBYTE(v91) = BYTE8(v94);
          unsigned int v50 = 21;
          uint64_t v51 = 11;
          *(_WORD *)((char *)&v91 + 1) = *(_WORD *)((char *)&v94 + 9);
          double v52 = (char *)v95 + 8;
          *(_WORD *)(v87 + 2 * i) = 256;
          do
          {
            double v53 = (char *)v90 + v51;
            *double v53 = *v52;
            *(_WORD *)(v53 + 1) = *(_WORD *)(v52 + 1);
            v52 += 4;
            --v50;
            v51 += 3;
          }
          while (v50 > 1);
          Debug_Log_GPS_Eph(2, i + 193, (uint64_t)v90);
        }
        uint64_t v40 = a5;
      }
    }
  }
  uint64_t v54 = 0;
  uint64_t v55 = 5848;
  long long v94 = 0u;
  memset(v95, 0, 28);
  while (2)
  {
    if (!*(unsigned char *)(a4[1071] + v54) || (int)a2 - *((_DWORD *)a4 + 11 * v54 + 2692) >= 1801)
    {
      *(_OWORD *)((unint64_t)&v94 | 0xC) = 0u;
      *(_OWORD *)(((unint64_t)&v94 | 0xC) + 0x10) = 0u;
      if (Core_Get_QZSS_Alm((v54 - 63), a2, (uint64_t)&v94))
      {
        uint64_t v56 = a4[1071];
        if (!*(unsigned char *)(v56 + v54) || (int)v94 > *((_DWORD *)a4 + 11 * v54 + 2692))
        {
          unint64_t v57 = (0xE4FE7F3uLL >> (BYTE4(v95[0]) & 0x1F)) & 1;
          uint64_t v58 = a4[1063];
          if (*(unsigned char *)(v58 + v54)) {
            BOOL v59 = 1;
          }
          else {
            BOOL v59 = v57 == 0;
          }
          if (v59) {
            goto LABEL_74;
          }
          uint64_t v60 = a4[1069];
          if (*(unsigned char *)(v60 + v54))
          {
            double v61 = (char *)a4 + 108 * v54;
            unint64_t v62 = 0xE4FE7F3uLL >> (((unint64_t)*((unsigned int *)v61 + 2154) >> 2) & 0x1F);
            int v63 = *((_DWORD *)v61 + 2152);
            if ((v62 & 1) == 0 && v63 + 3600 > (int)a2)
            {
              LOBYTE(v57) = 0;
              goto LABEL_74;
            }
            if (v63 + 100 < (int)a2)
            {
              *(unsigned char *)(a4[1065] + v54) = 0;
              *(unsigned char *)(v60 + v54) = 0;
              uint64_t v64 = v88 + 6 * v54;
              *(_DWORD *)uint64_t v64 = 16777472;
              *(_WORD *)(v64 + 4) = 256;
              *(_WORD *)(v87 + 2 * v54) = 256;
            }
          }
          LOBYTE(v57) = 1;
LABEL_74:
          double v65 = (_OWORD *)((char *)a4 + 44 * v54);
          double v66 = v65 + 673;
          long long v67 = v95[0];
          v65[673] = v94;
          v65[674] = v67;
          *(_OWORD *)((char *)v65 + 10796) = *(_OWORD *)((char *)v95 + 12);
          *(unsigned char *)(a4[1066] + v54) = 1;
          *(unsigned char *)(v56 + v54) = 1;
          *(unsigned char *)(v58 + v54) = v57;
          if ((int)a2 >= 1)
          {
            uint64_t v68 = 0;
            LODWORD(v69) = 0;
            uint64_t v70 = p_NV;
            uint64_t v71 = p_NV + 56 * v54 + 5840;
            long long v72 = *v66;
            long long v73 = v66[1];
            *(_OWORD *)(v71 + 36) = *(long long *)((char *)v66 + 28);
            *(_OWORD *)(v71 + 24) = v73;
            *(_OWORD *)(v71 + 8) = v72;
            uint64_t v74 = v70 + v55;
            __int16 v75 = -9871;
            do
            {
              int v76 = *(unsigned __int8 *)(v74 + v68) ^ HIBYTE(v75);
              __int16 v75 = -12691 * (v75 + (*(unsigned __int8 *)(v74 + v68) ^ HIBYTE(v75))) + 22719;
              uint64_t v69 = (v69 + v76);
              ++v68;
            }
            while (v68 != 48);
            *(void *)uint64_t v71 = v69;
            uint64_t v58 = a4[1063];
          }
          uint64_t v77 = 0;
          LODWORD(v78) = 0;
          uint64_t v79 = p_NV;
          __int16 v80 = *(_WORD *)(v58 + 8);
          *(void *)(p_NV + 5828) = *(void *)v58;
          *(_WORD *)(v79 + 5836) = v80;
          uint64_t v81 = v79 + 5824;
          __int16 v82 = -9871;
          do
          {
            int v83 = *(unsigned __int8 *)(v81 + v77) ^ HIBYTE(v82);
            __int16 v82 = -12691 * (v82 + (*(unsigned __int8 *)(v81 + v77) ^ HIBYTE(v82))) + 22719;
            uint64_t v78 = (v78 + v83);
            ++v77;
          }
          while (v77 != 40);
          *(void *)(v79 + 5816) = v78;
          *(unsigned char *)(v89 + v54) = -1;
        }
      }
    }
    ++v54;
    v55 += 56;
    if (v54 != 10) {
      continue;
    }
    break;
  }
}

uint64_t Hal34_InitPciGnssDevice(_DWORD *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v2 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  int v3 = 4;
  while (Hal29_GetGcdStatus())
  {
    if (!--v3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GCD status failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal34_InitPciGnssDevice");
        LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
      }
      *a1 = 22;
      return 4294967286;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    GnssHwStr = Hal14_GetGnssHwStr(g_HwProduct);
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s init,starttick,%ums\n", v7, "HAL", 65, "Hal34_InitPciGnssDevice", GnssHwStr, v2);
    LbsOsaTrace_WriteLog(0xDu, __str, v9, 1, 1);
  }
  uint64_t result = 0;
  g_HalState = 0;
  return result;
}

void HAL34_SunshineStackDumpHandler(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 <= 0xB1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u\n", v16);
LABEL_11:
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    return;
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx aResp\n");
    goto LABEL_11;
  }
  int v5 = a1[4];
  if (v5 == 77)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME\n");
  }
  else if (v5 == 80)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CP\n");
  }
  else
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: unk\n");
  }
  LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
LABEL_17:
  int v7 = *((unsigned __int16 *)a1 + 4);
  switch(v7)
  {
    case 3:
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 69, "HAL34_SunshineStackDumpHandler", 1299);
        int v8 = 1;
        LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
      }
      else
      {
        int v8 = 1;
      }
      break;
    case 2:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "HAL34_SunshineStackDumpHandler", 1300);
        int v14 = 0;
LABEL_29:
        LbsOsaTrace_WriteLog(0xDu, __str, v13, v14, 1);
        int v8 = 0;
      }
      break;
    case 1:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %usec\n", v17);
LABEL_28:
        size_t v13 = v9;
        int v14 = 4;
        goto LABEL_29;
      }
      break;
    default:
      int v8 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Unk\n");
        goto LABEL_28;
      }
      break;
  }
  StackDumpString = (char *)Hal11_GetStackDumpString(a1[11], a1[10]);
  GnssDbgMgr_HandleStackDump(a2, a1, v8, StackDumpString);
}

uint64_t HAL34_StackDumpReq(unsigned int a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v10[0] = 0;
  __int16 v7 = 30530;
  char v8 = a1;
  __int16 v12 = 6;
  char v13 = 0;
  plc00_10EncodeHdrPlCs(&v7, (uint64_t)v11, 15, 4u, 1, (uint64_t)v10);
  if (v10[0])
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HdrErr,%u\n", v6);
    return LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
  }
  __int16 v15 = 0;
  int v14 = 0;
  char v16 = 10;
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Cpu,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "HAL34_StackDumpReq", a1);
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 4, 1);
  }
  uint64_t result = Hal22_ZxSendToChip(v11, 0xFuLL);
  if ((int)result <= 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      return LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    }
  }
  return result;
}

void *gnss::GnssAdaptDevice::setPVTMReport(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(void *)(a9 + 24))
  {
    char v16 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_15;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v21, a9);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)v22, a8);
    char v23 = a2;
    char v24 = a3;
    char v25 = a4;
    char v26 = a5;
    char v27 = a6;
    char v28 = a7;
    dispatch_async(v16, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v22);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v21);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setPVTMReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
    }
  }
  return result;
}

void sub_22B8FCBDC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice13setPVTMReportEbbbbbbNSt3__18functionIFvNS1_10unique_ptrINS_3FixENS1_14default_deleteIS4_EEEENS3_INS_17MeasurementReportENS5_IS8_EEEEONS1_6vectorINS_6SvInfoENS1_9allocatorISC_EEEEONSB_INS_23ReceiverBandCorrectionsENSD_ISH_EEEENS3_INS_18TimeConversionInfoENS5_ISL_EEEENS3_INS_24KlobucharModelParametersENS5_ISO_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v56[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPVTMReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(void *)(a1 + 96))
    {
      if (*(unsigned char *)(v2 + 89))
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v50, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v50, (uint64_t)"setPVTMReport_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v50);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v5 = mach_continuous_time();
          unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setPVTMReport_block_invoke", 2056);
          LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setPVTMReport_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
        }
      }
      else if ((*(unsigned char *)(a1 + 104) | *(unsigned char *)(a1 + 107) | *(unsigned char *)(a1 + 108) | *(unsigned char *)(a1 + 109)) | (*(unsigned char *)(a1 + 105) | *(unsigned char *)(a1 + 106)))
      {
        if (*(unsigned char *)(a1 + 105) || !*(unsigned char *)(a1 + 106))
        {
          std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
          uint64_t v26 = v2 + 312;
          if (__str != (char *)(v2 + 312))
          {
            char v27 = v55;
            uint64_t v28 = *(void *)(v2 + 336);
            if (v55 == __str)
            {
              if (v28 == v26)
              {
                (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v56);
                (*(void (**)(char *))(*(void *)v55 + 32))(v55);
                uint64_t v55 = 0;
                (*(void (**)(void, char *))(**(void **)(v2 + 336) + 24))(*(void *)(v2 + 336), __str);
                (*(void (**)(void))(**(void **)(v2 + 336) + 32))(*(void *)(v2 + 336));
                *(void *)(v2 + 336) = 0;
                uint64_t v55 = __str;
                (*(void (**)(void *, uint64_t))(v56[0] + 24))(v56, v2 + 312);
                (*(void (**)(void *))(v56[0] + 32))(v56);
              }
              else
              {
                (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 312);
                (*(void (**)(char *))(*(void *)v55 + 32))(v55);
                uint64_t v55 = *(char **)(v2 + 336);
              }
              *(void *)(v2 + 336) = v26;
            }
            else if (v28 == v26)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v26 + 24))(v2 + 312, __str);
              (*(void (**)(void))(**(void **)(v2 + 336) + 32))(*(void *)(v2 + 336));
              *(void *)(v2 + 336) = v55;
              uint64_t v55 = __str;
            }
            else
            {
              uint64_t v55 = *(char **)(v2 + 336);
              *(void *)(v2 + 336) = v27;
            }
          }
          std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](__str);
          *(void *)__str = v2 + 280;
          int v54 = 0;
          std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
          v29.i32[0] = *(_DWORD *)(a1 + 105);
          uint32x4_t v30 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v29)));
          v31.i64[0] = v30.u32[0];
          v31.i64[1] = v30.u32[1];
          int8x16_t v32 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL);
          v31.i64[0] = v30.u32[2];
          v31.i64[1] = v30.u32[3];
          int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_22BB0E5C0, (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL));
          int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_22BB0E5D0, v32);
          uint64_t v35 = 96;
          if (!*(unsigned char *)(a1 + 109)) {
            uint64_t v35 = 64;
          }
          int8x16_t v36 = vorrq_s8(v34, v33);
          *(void *)(v2 + 280) = *(void *)&vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)) | v35 | *(void *)(v2 + 280) & 0xFFFFFFFFFFFFFF80 | *(unsigned __int8 *)(a1 + 104);
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v47, (uint64_t)"setPVTMReport_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v47);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v37 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if (*(unsigned char *)(a1 + 109)) {
              uint64_t v38 = 84;
            }
            else {
              uint64_t v38 = 70;
            }
            if (*(unsigned char *)(a1 + 108)) {
              uint64_t v39 = 84;
            }
            else {
              uint64_t v39 = 70;
            }
            if (*(unsigned char *)(a1 + 107)) {
              uint64_t v40 = 84;
            }
            else {
              uint64_t v40 = 70;
            }
            if (*(unsigned char *)(a1 + 106)) {
              uint64_t v41 = 84;
            }
            else {
              uint64_t v41 = 70;
            }
            if (*(unsigned char *)(a1 + 105)) {
              uint64_t v42 = 84;
            }
            else {
              uint64_t v42 = 70;
            }
            if (*(unsigned char *)(a1 + 104)) {
              uint64_t v43 = 84;
            }
            else {
              uint64_t v43 = 70;
            }
            unsigned __int16 v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Pvt,%c,Meas,%c,ExtMeas,%c,SvInfo,%c,BandCor,%c,TimeCon,%c\n", (unint64_t)v37, "ADP", 77, "setPVTMReport_block_invoke", v43, v42, v41, v40, v39, v38);
            LbsOsaTrace_WriteLog(0x18u, __str, v44, 3, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v45 = mach_continuous_time();
            unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 68, "setPVTMReport_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v46, 5, 1);
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v48, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v48, (uint64_t)"setPVTMReport_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v48);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v18 = mach_continuous_time();
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM Invalid measReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "setPVTMReport_block_invoke", 515);
            LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v20 = mach_continuous_time();
            unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "setPVTMReport_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v49, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v49, (uint64_t)"setPVTMReport_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v49);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v22 = mach_continuous_time();
          unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM No valid flags\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 69, "setPVTMReport_block_invoke", 515);
          LbsOsaTrace_WriteLog(0x18u, __str, v23, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "setPVTMReport_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
        }
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v51, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v51, (uint64_t)"setPVTMReport_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v51);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setPVTMReport_block_invoke", 513);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setPVTMReport_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v52, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v52, (uint64_t)"setPVTMReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v52);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setPVTMReport_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setPVTMReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22B8FD790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B8FD878(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c304_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss3FixENS_14default_deleteIS3_EEEENS1_INS2_17MeasurementReportENS4_IS7_EEEEONS_6vectorINS2_6SvInfoENS_9allocatorISB_EEEEONSA_INS2_23ReceiverBandCorrectionsENSC_ISG_EEEENS1_INS2_18TimeConversionInfoENS4_ISK_EEEENS1_INS2_24KlobucharModelParametersENS4_ISN_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    unsigned __int16 v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_14;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
    v11[4] = a2;
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
    dispatch_async(v6, block);
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v12);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setNmeaHandler", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
  }
  return result;
}

void sub_22B8FDA88(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice14setNmeaHandlerEyNSt3__18functionIFvONS1_6vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS7_IS9_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(void *a1)
{
  v43[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setNmeaHandler_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)(a1 + 5));
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v39, (uint64_t)"setNmeaHandler_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v39);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setNmeaHandler_block_invoke", 2056);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setNmeaHandler_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NmeaMask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 77, "setNmeaHandler_block_invoke", a1[9]);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 3, 1);
      }
      if (a1[9] < 0x400uLL)
      {
        std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)(a1 + 10));
        uint64_t v20 = v2 + 408;
        if (__str != (char *)(v2 + 408))
        {
          unsigned __int16 v21 = v42;
          uint64_t v22 = *(void *)(v2 + 432);
          if (v42 == __str)
          {
            if (v22 == v20)
            {
              (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v43);
              (*(void (**)(char *))(*(void *)v42 + 32))(v42);
              uint64_t v42 = 0;
              (*(void (**)(void, char *))(**(void **)(v2 + 432) + 24))(*(void *)(v2 + 432), __str);
              (*(void (**)(void))(**(void **)(v2 + 432) + 32))(*(void *)(v2 + 432));
              *(void *)(v2 + 432) = 0;
              uint64_t v42 = __str;
              (*(void (**)(void *, uint64_t))(v43[0] + 24))(v43, v2 + 408);
              (*(void (**)(void *))(v43[0] + 32))(v43);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 408);
              (*(void (**)(char *))(*(void *)v42 + 32))(v42);
              uint64_t v42 = *(char **)(v2 + 432);
            }
            *(void *)(v2 + 432) = v20;
          }
          else if (v22 == v20)
          {
            (*(void (**)(uint64_t, char *))(*(void *)v20 + 24))(v2 + 408, __str);
            (*(void (**)(void))(**(void **)(v2 + 432) + 32))(*(void *)(v2 + 432));
            *(void *)(v2 + 432) = v42;
            uint64_t v42 = __str;
          }
          else
          {
            uint64_t v42 = *(char **)(v2 + 432);
            *(void *)(v2 + 432) = v21;
          }
        }
        std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](__str);
        if (a1[13] && a1[9])
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v23 = mach_continuous_time();
            unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Request NMEA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 73, "setNmeaHandler_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v24, 4, 1);
          }
          unsigned int v25 = Gnm_RegisterNmeaUpdates(*((unsigned __int16 *)a1 + 36), gnss::GnssAdaptDevice::Ga06_15GnssRegisterNmeaCB);
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v26 = mach_continuous_time();
            unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NMEA CB null kGaNmeaNone\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "setNmeaHandler_block_invoke");
            LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
          }
          unsigned int v25 = Gnm_RegisterNmeaUpdates(0, 0);
        }
        unsigned int v28 = v25;
        uint64_t v29 = (uint64_t)(a1 + 5);
        if (v25)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, v29);
          gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v28, (uint64_t)v37, (uint64_t)"setNmeaHandler_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetNmea,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setNmeaHandler_block_invoke", 257, v28);
            LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v32 = mach_continuous_time();
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setNmeaHandler_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, v29);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v36, (uint64_t)"setNmeaHandler_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v34 = mach_continuous_time();
            unsigned __int16 v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "setNmeaHandler_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v35, 5, 1);
          }
        }
      }
      else
      {
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)(a1 + 5));
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v38, (uint64_t)"setNmeaHandler_block_invoke");
        std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v38);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Mask,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setNmeaHandler_block_invoke", 515, a1[9]);
          LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
        }
        uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (result)
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "setNmeaHandler_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
        }
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v40, (uint64_t)(a1 + 5));
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v40, (uint64_t)"setNmeaHandler_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v40);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setNmeaHandler_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setNmeaHandler_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22B8FE538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
}

void sub_22B8FE610(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE80c108_ZTSNSt3__18functionIFvONS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 80));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setThermalRiskState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(a1, 7, (uint64_t)v8, (uint64_t)"setThermalRiskState");
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setThermalRiskState", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B8FE7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setPowerReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_18;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
    dispatch_async(v4, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v10);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setPowerReport", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

void sub_22B8FE94C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice14setPowerReportENSt3__18functionIFvNS1_10unique_ptrINS_14PwrMeasurementENS1_14default_deleteIS4_EEEEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  v35[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setPowerReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  uint64_t v5 = a1 + 40;
  if (*(unsigned char *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, a1 + 40);
    v31[3] = 0;
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 15, (uint64_t)v30);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
    uint64_t v6 = *(void *)(a1 + 96);
    if (v6)
    {
      std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
      uint64_t v7 = v2 + 472;
      if (__str != (char *)(v2 + 472))
      {
        uint64_t v8 = v34;
        uint64_t v9 = *(void *)(v2 + 496);
        if (v34 == __str)
        {
          if (v9 == v7)
          {
            (*(void (**)(char *, void *))(*(void *)__str + 24))(__str, v35);
            (*(void (**)(char *))(*(void *)v34 + 32))(v34);
            uint64_t v34 = 0;
            (*(void (**)(void, char *))(**(void **)(v2 + 496) + 24))(*(void *)(v2 + 496), __str);
            (*(void (**)(void))(**(void **)(v2 + 496) + 32))(*(void *)(v2 + 496));
            *(void *)(v2 + 496) = 0;
            uint64_t v34 = __str;
            (*(void (**)(void *, uint64_t))(v35[0] + 24))(v35, v2 + 472);
            (*(void (**)(void *))(v35[0] + 32))(v35);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(*(void *)__str + 24))(__str, v2 + 472);
            (*(void (**)(char *))(*(void *)v34 + 32))(v34);
            uint64_t v34 = *(char **)(v2 + 496);
          }
          *(void *)(v2 + 496) = v7;
        }
        else if (v9 == v7)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v7 + 24))(v2 + 472, __str);
          (*(void (**)(void))(**(void **)(v2 + 496) + 32))(*(void *)(v2 + 496));
          *(void *)(v2 + 496) = v34;
          uint64_t v34 = __str;
        }
        else
        {
          uint64_t v34 = *(char **)(v2 + 496);
          *(void *)(v2 + 496) = v8;
        }
      }
      std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](__str);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ENABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 77, "setPowerReport_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 3, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DISABLE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 77, "setPowerReport_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 3, 1);
    }
    unsigned int v19 = gnss::GnssAdaptDevice::Ga01_06GnssReportPower((NSObject **)v2, v6 != 0);
    if (v19)
    {
      uint64_t v20 = *(void *)(v2 + 240);
      if (!v20) {
        goto LABEL_34;
      }
      uint64_t v21 = v2 + 240;
      do
      {
        unsigned int v22 = *(unsigned __int8 *)(v20 + 32);
        BOOL v23 = v22 >= 0xF;
        if (v22 >= 0xF) {
          unsigned __int16 v24 = (uint64_t *)v20;
        }
        else {
          unsigned __int16 v24 = (uint64_t *)(v20 + 8);
        }
        if (v23) {
          uint64_t v21 = v20;
        }
        uint64_t v20 = *v24;
      }
      while (*v24);
      if (v21 == v2 + 240 || *(unsigned __int8 *)(v21 + 32) >= 0x10u) {
LABEL_34:
      }
        uint64_t v21 = v2 + 240;
      std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::erase((uint64_t **)(v2 + 232), (uint64_t *)v21);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, v5);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v19, (uint64_t)v29, (uint64_t)"setPowerReport_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v25 = mach_continuous_time();
        unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPwr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "setPowerReport_block_invoke", 257, v19);
        LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
      }
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v27 = mach_continuous_time();
      unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 68, "setPowerReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v28, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v32, (uint64_t)"setPowerReport_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v32);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setPowerReport_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setPowerReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
    }
  }
  return result;
}

void sub_22B8FF0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga01_06GnssReportPower(NSObject **this, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState == a2)
  {
    uint64_t v3 = 4;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (a2) {
        uint64_t v5 = "ENABLE";
      }
      else {
        uint64_t v5 = "DISABLE";
      }
      size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Ignoring %s PwrRep request\n", (unint64_t)v4, "ADP", 73, "Ga01_06GnssReportPower", v5);
      int v7 = 4;
LABEL_12:
      LbsOsaTrace_WriteLog(0x18u, __str, v6, v7, 1);
    }
  }
  else
  {
    uint64_t v9 = Gnm_SetPowerReport(a2);
    if (v9)
    {
      uint64_t v3 = v9;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        unsigned __int16 v11 = "DISABLE";
        if (a2) {
          unsigned __int16 v11 = "ENABLE";
        }
        size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPwrRep request,%s,%u\n", (unint64_t)v10, "ADP", 69, "Ga01_06GnssReportPower", 257, v11, v3);
        int v7 = 0;
        goto LABEL_12;
      }
    }
    else if (gnssOsa_SemWaitTimeOut(this[129], 0x1F4u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        uint64_t v13 = "DISABLE";
        if (a2) {
          uint64_t v13 = "ENABLE";
        }
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPwrRep %s timeout\n", (unint64_t)v12, "ADP", 69, "Ga01_06GnssReportPower", 257, v13);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
      }
      return 10;
    }
    else
    {
      gnss::GnssAdaptDevice::Ga01_06GnssReportPower(BOOL)::v_PowerReportState = a2;
      uint64_t v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (a2) {
          unsigned __int16 v16 = "ENABLED";
        }
        else {
          unsigned __int16 v16 = "DISABLED";
        }
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Power reporting,%s\n", (unint64_t)v15, "ADP", 73, "Ga01_06GnssReportPower", v16);
        LbsOsaTrace_WriteLog(0x18u, __str, v17, 4, 1);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_22B8FF4C4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)(a1 + 72));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *gnss::GnssAdaptDevice::setConfigCoexistence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    double v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_23_1;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    void v9[4] = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigCoexistence", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice20setConfigCoexistenceEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigCoexistence_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(void *)(a1 + 72) == *(void *)(v2 + 104))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v28, (uint64_t)"setConfigCoexistence_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v28);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No Change,request dropped, Co-ex flag, %llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 73, "setConfigCoexistence_block_invoke", *(void *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 4, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setConfigCoexistence_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
      return result;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NewCoexFlags,%llu,CurrentConfig,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "setConfigCoexistence_block_invoke", *(void *)(a1 + 72), *(void *)(v2 + 104));
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 4, 1);
    }
    uint64_t v16 = a1 + 40;
    if (*(void *)(a1 + 72) >= 0x200000uLL)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, v16);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v27, (uint64_t)"setConfigCoexistence_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CoexFlags,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "setConfigCoexistence_block_invoke", 515, *(void *)(a1 + 72));
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "setConfigCoexistence_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
      }
      return result;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, v16);
    v26[3] = 0;
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 14, (uint64_t)v25);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    if (gnss::GnssAdaptDevice::Ga01_04HandleSideBand((gnss::GnssAdaptDevice *)v2, *(void *)(a1 + 72)))
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (!result) {
        return result;
      }
      goto LABEL_26;
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0xEu);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetSideBandConfig\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "setConfigCoexistence_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
LABEL_26:
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "setConfigCoexistence_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v29, (uint64_t)"setConfigCoexistence_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setConfigCoexistence_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setConfigCoexistence_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22B8FFDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga01_04HandleSideBand(gnss::GnssAdaptDevice *this, unint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = 1;
  if ((a2 & 2) != 0) {
    uint64_t v4 = 2;
  }
  unint64_t v5 = 32 * (a2 & 0x800);
  if ((a2 & 0x1000) != 0) {
    unint64_t v5 = ((a2 >> 11) & 1 | 2) << 16;
  }
  if ((a2 & 0x2000) != 0) {
    unint64_t v5 = (unint64_t)((v5 >> 16) | 4) << 16;
  }
  unint64_t v6 = v5 | (a2 >> 12) & 0x100 | (a2 >> 10) & 1;
  if ((a2 & 0x4000) != 0) {
    unint64_t v6 = v5 & 0x7FFF00FFE1 | (a2 >> 12) & 0x100 | (a2 >> 10) & 1 | ((unint64_t)(BYTE2(v5) | 8u) << 16);
  }
  unint64_t v7 = v6 & 0xFFFFFFFF00FFFFFFLL;
  if ((a2 & 0x8000) != 0) {
    unint64_t v6 = v6 & 0xFFFFFFFF00FFFFFFLL | 0x2000000;
  }
  unint64_t v8 = v7 | ((unint64_t)(BYTE3(v6) | 8u) << 24);
  if ((a2 & 0x10000) != 0) {
    unint64_t v6 = v8;
  }
  unint64_t v9 = v6 | ((a2 & 0x20000) << 16);
  unint64_t v10 = v6 | ((((v9 & 0xFF00000000) >> 32) | 4) << 32);
  if ((a2 & 0x40000) == 0) {
    unint64_t v10 = v9;
  }
  if ((a2 & 0x80000) != 0) {
    unint64_t v10 = v10 | ((((v10 & 0xFF00000000) >> 32) | 8) << 32);
  }
  unint64_t v11 = (a2 << 47) & 0x100000000000000;
  unint64_t v12 = (a2 << 40) & 0x1000000000000;
  if ((a2 & 0x80) != 0) {
    unint64_t v13 = 0x20000000000;
  }
  else {
    unint64_t v13 = (a2 << 34) & 0x10000000000;
  }
  uint64_t v14 = (a2 << 27) & 0x100000000;
  if ((a2 & 3) != 0) {
    uint64_t v15 = v4;
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v16 = (a2 << 6) & 0x100 | (((a2 >> 3) & 1) << 16) & 0xFFFFFFFFFEFFFFFFLL | (((a2 >> 4) & 1) << 24) | v15;
  unint64_t v17 = v10 & 0xFFFFFFFFFFLL;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CfgType,%u,LegacyFta,%u,EnhancedFreqAid,%u,StatSpurCanclCfg,%u,DynSpurCanclCfg,%u,JammerDetect,%u,LegacyBlanking,%u,EBlankGpsGalBds3,%u,EBlankGlo,%u,EBlankBds2,%u,ForceFilter,%u,GpsGalBds3FiltMsk,%u,GloFiltMsk,%u,Bds2FiltMsk,%u,\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "Ga01_05SideBandTrigger", 0x1FFF, v16 & 3, BYTE1(v16), BYTE2(v16), BYTE3(v16), HIDWORD(v14), v13 >> 40, HIWORD(v12), HIBYTE(v11), v17,
            BYTE1(v17),
            BYTE2(v17),
            BYTE3(v17),
            HIDWORD(v17));
    LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
  }
  if (Gnm_SetSideBandConfig(1, 0x1FFFLL, v16 | v13 | v14 | v12 | v11, v17))
  {
    uint64_t v20 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetSideBandConfig Response,%u\n", v25);
LABEL_31:
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
      return 0;
    }
  }
  else if (gnssOsa_SemWaitTimeOut(*((NSObject **)this + 129), 0x1F4u))
  {
    uint64_t v20 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetSideBandConfig\n");
      goto LABEL_31;
    }
  }
  else
  {
    *((void *)this + 13) = a2;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Set CoexSB Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 73, "Ga01_04HandleSideBand");
      uint64_t v20 = 1;
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v20;
}

void *gnss::GnssAdaptDevice::setConfigDutyCycling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    uint64_t v3 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_27_0;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
    dispatch_async(v3, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setConfigDutyCycling", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    }
  }
  return result;
}

size_t ___ZN4gnss15GnssAdaptDevice20setConfigDutyCyclingEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigDutyCycling_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v10, (uint64_t)"setConfigDutyCycling_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Not Supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 87, "setConfigDutyCycling_block_invoke", 264);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 2, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setConfigDutyCycling_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  return result;
}

void sub_22B9005FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setConfigSimulatorMode(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 24))
  {
    uint64_t v8 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_33;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
    char v15 = a2;
    int v14 = a3;
    char v16 = a4;
    dispatch_async(v8, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v13);
  }
  else
  {
    size_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setConfigSimulatorMode", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice22setConfigSimulatorModeEbibNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigSimulatorMode_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v6 = 84;
      if (!*(unsigned char *)(a1 + 76)) {
        uint64_t v6 = 70;
      }
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DevState,%c,Week,%d\n", (unint64_t)v5, "ADP", 65, "setConfigSimulatorMode_block_invoke", v6, *(_DWORD *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 1, 1);
    }
    memset(v27, 0, sizeof(v27));
    char v28 = 2;
    v32[0] = 0;
    *(void *)((char *)v32 + 5) = 0;
    uint64_t v29 = 0;
    v31[0] = 0;
    uint64_t v30 = 0;
    uint64_t v8 = 62;
    *(void *)((char *)v31 + 7) = 0;
    do
    {
      unsigned __int16 v9 = &v27[v8];
      *(_DWORD *)(v9 + 255) = 0;
      *((_OWORD *)v9 + 14) = 0uLL;
      *((_OWORD *)v9 + 15) = 0uLL;
      *((_OWORD *)v9 + 12) = 0uLL;
      *((_OWORD *)v9 + 13) = 0uLL;
      *((_OWORD *)v9 + 10) = 0uLL;
      *((_OWORD *)v9 + 11) = 0uLL;
      *((_OWORD *)v9 + 8) = 0uLL;
      *((_OWORD *)v9 + 9) = 0uLL;
      *((_OWORD *)v9 + 6) = 0uLL;
      *((_OWORD *)v9 + 7) = 0uLL;
      *((_OWORD *)v9 + 4) = 0uLL;
      *((_OWORD *)v9 + 5) = 0uLL;
      *((_OWORD *)v9 + 2) = 0uLL;
      *((_OWORD *)v9 + 3) = 0uLL;
      v8 += 262;
      *(_OWORD *)unsigned __int16 v9 = 0uLL;
      *((_OWORD *)v9 + 1) = 0uLL;
      *((_WORD *)v9 + 130) = -1;
    }
    while (v9 + 262 != (unsigned char *)&v33);
    int v33 = 0;
    uint64_t v35 = 0;
    *(void *)&v34[7] = 0;
    *(void *)uint64_t v34 = 0;
    *(_DWORD *)&v27[8] = 512;
    v34[8] = *(unsigned char *)(a1 + 76);
    v34[9] = *(unsigned char *)(a1 + 77);
    if (v34[8])
    {
      *(_WORD *)&v34[10] = *(_DWORD *)(a1 + 72);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Simulation mode ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "setConfigSimulatorMode_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
      }
    }
    unsigned int v12 = Gnm_SetUserConfig((uint64_t)v27);
    uint64_t v13 = a1 + 40;
    if (v12)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, v13);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v12, (uint64_t)v26, (uint64_t)"setConfigSimulatorMode_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUserConfig Res,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setConfigSimulatorMode_block_invoke", 257, v12);
        LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setConfigSimulatorMode_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
      }
    }
    else
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, v13);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v25, (uint64_t)"setConfigSimulatorMode_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "setConfigSimulatorMode_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
      }
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v36, (uint64_t)"setConfigSimulatorMode_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setConfigSimulatorMode_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setConfigSimulatorMode_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
  }
  return result;
}

void sub_22B900D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setConfigEnableGnssConstellations(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    unsigned __int16 v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_39;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    int v10 = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigEnableGnssConstellations", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice33setConfigEnableGnssConstellationsEjNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 77, "setConfigEnableGnssConstellations_block_invoke", *(_DWORD *)(a1 + 72));
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 3, 1);
    }
    memset(v27, 0, sizeof(v27));
    char v28 = 2;
    v31[0] = 0;
    *(void *)((char *)v31 + 5) = 0;
    long long v29 = 0uLL;
    memset(v30, 0, 15);
    uint64_t v7 = 62;
    do
    {
      uint64_t v8 = &v27[v7];
      *(_DWORD *)(v8 + 255) = 0;
      *((_OWORD *)v8 + 14) = 0uLL;
      *((_OWORD *)v8 + 15) = 0uLL;
      *((_OWORD *)v8 + 12) = 0uLL;
      *((_OWORD *)v8 + 13) = 0uLL;
      *((_OWORD *)v8 + 10) = 0uLL;
      *((_OWORD *)v8 + 11) = 0uLL;
      *((_OWORD *)v8 + 8) = 0uLL;
      *((_OWORD *)v8 + 9) = 0uLL;
      *((_OWORD *)v8 + 6) = 0uLL;
      *((_OWORD *)v8 + 7) = 0uLL;
      *((_OWORD *)v8 + 4) = 0uLL;
      *((_OWORD *)v8 + 5) = 0uLL;
      *((_OWORD *)v8 + 2) = 0uLL;
      *((_OWORD *)v8 + 3) = 0uLL;
      v7 += 262;
      *(_OWORD *)uint64_t v8 = 0uLL;
      *((_OWORD *)v8 + 1) = 0uLL;
      *((_WORD *)v8 + 130) = -1;
    }
    while (v8 + 262 != (unsigned char *)&v32);
    int v32 = 0;
    v33[2] = 0;
    *(void *)((char *)v33 + 7) = 0;
    v33[0] = 0;
    *(_DWORD *)&v27[8] |= 0x10u;
    int v9 = *(_DWORD *)(a1 + 72);
    if (v9)
    {
      BYTE5(v29) = 1;
      *(_DWORD *)((char *)&v29 + 1) = 16843009;
      if ((v9 & 2) == 0)
      {
LABEL_10:
        if ((v9 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_27;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_10;
    }
    BYTE10(v29) = 1;
    *(_DWORD *)((char *)&v29 + 6) = 16843009;
    if ((v9 & 4) == 0)
    {
LABEL_11:
      if ((v9 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_28;
    }
LABEL_27:
    BYTE6(v30[1]) = 1;
    *(_DWORD *)((char *)&v30[1] + 2) = 16843009;
    if ((v9 & 8) == 0)
    {
LABEL_12:
      if ((v9 & 0x10) == 0)
      {
LABEL_14:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ConfigMask,%d,Config2Mask,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 77, "setConfigEnableGnssConstellations_block_invoke", *(_DWORD *)&v27[4], *(_DWORD *)&v27[8]);
          LbsOsaTrace_WriteLog(0x18u, __str, v11, 3, 1);
        }
        unsigned int v12 = Gnm_SetUserConfig((uint64_t)v27);
        uint64_t v13 = a1 + 40;
        if (v12)
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, v13);
          gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, v12, (uint64_t)v26, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v14 = mach_continuous_time();
            unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUserConfig Ret,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "setConfigEnableGnssConstellations_block_invoke", 257, v12);
            LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
          }
        }
        else
        {
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v25, v13);
          gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(v2, 0, (uint64_t)v25, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
          std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if (result)
          {
            bzero(__str, 0x410uLL);
            uint64_t v23 = mach_continuous_time();
            unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
          }
        }
        return result;
      }
LABEL_13:
      BYTE4(v30[0]) = 1;
      LODWORD(v30[0]) = 16843009;
      goto LABEL_14;
    }
LABEL_28:
    BYTE1(v30[1]) = 1;
    *(_DWORD *)((char *)v30 + 5) = 16843009;
    if ((v9 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v34, (uint64_t)"setConfigEnableGnssConstellations_block_invoke");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 69, "setConfigEnableGnssConstellations_block_invoke", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v20, 0, 1);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "setConfigEnableGnssConstellations_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
  }
  return result;
}

void sub_22B901540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::setConfigRfBandEnable(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a4 + 24))
  {
    if ((a2 & ~a3) != 0) {
      int v4 = 1;
    }
    else {
      int v4 = 4;
    }
    uint64_t v5 = *(NSObject **)(a1 + 296);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_40;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a4);
    int v11 = v4;
    dispatch_async(v5, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v10);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "setConfigRfBandEnable", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice21setConfigRfBandEnableEbbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = a1 + 32;

  return std::function<void ()(gnss::Result)>::operator()(v2, v1);
}

void *gnss::GnssAdaptDevice::setConfigNetworkFreqAssistance(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 24))
  {
    int v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_46_0;
    void block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
    char v10 = a2;
    dispatch_async(v4, block);
    return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
  }
  else
  {
    uint64_t result = (void *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "setConfigNetworkFreqAssistance", 513);
      return (void *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice30setConfigNetworkFreqAssistanceEbNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v26, (uint64_t)"setConfigNetworkFreqAssistance_block_invoke");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FreqAssist req dropped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setConfigNetworkFreqAssistance_block_invoke", 2056);
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
      }
      return result;
    }
    uint64_t v14 = *(unsigned __int8 *)(a1 + 72);
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v24, a1 + 40);
    v25[3] = 0;
    gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 14, (uint64_t)v24);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v25);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
    unsigned int v15 = ++gnss::GnssAdaptDevice::Ga07_00GenerateUID(void)::v_Key % 0x7Fu;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v16 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v17 = 84;
      if (!*(unsigned char *)(a1 + 72)) {
        uint64_t v17 = 70;
      }
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SbUniqueKey,%u,eE_FREQAID state,%c\n", (unint64_t)v16, "ADP", 77, "setConfigNetworkFreqAssistance_block_invoke", v15, v17);
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 3, 1);
    }
    unsigned int v19 = Gnm_SetSideBandConfig(v15, 2, v14 << 8, 0);
    if (!v19)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (!result) {
        return result;
      }
      goto LABEL_23;
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v19, 0xEu);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetSideBand,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "setConfigNetworkFreqAssistance_block_invoke", 257, v19);
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
LABEL_23:
      bzero(__str, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
    }
  }
  else
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v27, (uint64_t)"setConfigNetworkFreqAssistance_block_invoke");
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v27);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setConfigNetworkFreqAssistance_block_invoke", 1302);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "setConfigNetworkFreqAssistance_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
  return result;
}

void sub_22B901EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

BOOL gnss::GnssAdaptDevice::Ga01_00SetMSBMandatoryMask(gnss::GnssAdaptDevice *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v9 = 0u;
  bzero(v6, 0x20EuLL);
  v6[0] = 2;
  __int16 v7 = 32;
  char v8 = 6;
  int v1 = Gnm_SetPlatformConfig(v6);
  if (v1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPltfmCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga01_00SetMSBMandatoryMask", 257, v1);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  return v1 == 0;
}

BOOL gnss::GnssAdaptDevice::Ga01_01SetMSAMandatoryMask(gnss::GnssAdaptDevice *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga01_01SetMSAMandatoryMask");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  long long v13 = 0u;
  long long v12 = 0u;
  bzero(&v9, 0x20EuLL);
  int v9 = 1;
  __int16 v10 = 64;
  char v11 = 4;
  int v3 = Gnm_SetPlatformConfig(&v9);
  if (v3 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPltfmCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga01_01SetMSAMandatoryMask", 257, v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga01_01SetMSAMandatoryMask");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  return v3 == 0;
}

void gnss::GnssAdaptDevice::Ga01_02PowerReportCB(gnss::GnssAdaptDevice *a1, const void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerReportCB\n");
    goto LABEL_8;
  }
  int v3 = (int)a1;
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (!DeviceInstance) {
    return;
  }
  if (v3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Result,%u\n", v10);
LABEL_8:
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    return;
  }
  uint64_t v6 = DeviceInstance;
  *(void *)&long long __dst = 0;
  DWORD2(__dst) = 0;
  double v12 = 0.0;
  memcpy_s("Ga01_03HandlePowerReportCB", 576, &__dst, 0x18u, a2, 0x18uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ActiveIntMS,%u,AvgPwrMw,%f,LocalTime,%u,MeasIntMS,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga01_03HandlePowerReportCB", DWORD2(__dst), v12, __dst, DWORD1(__dst));
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
  }
  int v9 = *(NSObject **)(v6 + 288);
  *(void *)__str = MEMORY[0x263EF8330];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBE11e_Gnm_ErrorP15s_Gnm_PowerMeas_block_invoke;
  double v16 = &__block_descriptor_tmp_59;
  uint64_t v17 = v6;
  long long v18 = __dst;
  double v19 = v12;
  dispatch_async(v9, __str);
}

void *___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBE11e_Gnm_ErrorP15s_Gnm_PowerMeas_block_invoke(uint64_t a1)
{
  void v21[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v21, v2 + 472);
  if (v21[3])
  {
    v15[0] = 0;
    v15[1] = v15;
    double v15[2] = 0x3002000000;
    v15[3] = __Block_byref_object_copy__0;
    v15[4] = __Block_byref_object_dispose__0;
    int v3 = (double *)operator new(0x28uLL, MEMORY[0x263F8C180]);
    if (!v3)
    {
      double v16 = 0;
      snprintf(v19, 0x400uLL, "ASSERT,%s,%d,%s", "Ga01_03HandlePowerReportCB_block_invoke", 595, "Memory allocation failed for PwrMeas");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v13 = mach_continuous_time();
        unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 69, "Ga01_03HandlePowerReportCB_block_invoke", v19);
        LbsOsaTrace_WriteLog(0xEu, __str, v14, 0, 1);
      }
      if (gp_Logger) {
        (*(void (**)(uint64_t))(*(void *)gp_Logger + 48))(gp_Logger);
      }
      __assert_rtn("Ga01_03HandlePowerReportCB_block_invoke", "ga01GnssDeviceConfig.cpp", 595, "false && \"Memory allocation failed for PwrMeas\"");
    }
    *((_DWORD *)v3 + 8) = 0;
    LODWORD(v4) = *(_DWORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    v3[2] = (double)v4 / 1000.0;
    *((void *)v3 + 3) = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    v7.i64[0] = v6;
    v7.i64[1] = HIDWORD(v6);
    *(float64x2_t *)int v3 = vdivq_f64(vcvtq_f64_u64(v7), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
    unsigned __int16 v8 = *(NSObject **)(v2 + 296);
    double v16 = v3;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBE11e_Gnm_ErrorP15s_Gnm_PowerMeas_block_invoke_2;
    block[3] = &unk_26DF18B58;
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v21);
    void block[4] = v15;
    dispatch_async(v8, block);
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v18);
    _Block_object_dispose(v15, 8);
    int v9 = v16;
    double v16 = 0;
    if (v9) {
      MEMORY[0x230F4E5D0](v9, 0x1000C407A37F5ACLL);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OnPowerReportCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga01_03HandlePowerReportCB_block_invoke", 770);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
  }
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v21);
}

void sub_22B90284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Block_object_dispose(&a15, 8);
  uint64_t v22 = a20;
  a20 = 0;
  if (v22) {
    MEMORY[0x230F4E5D0](v22, 0x1000C407A37F5ACLL);
  }
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)(v20 - 72));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    JUMPOUT(0x230F4E5D0);
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga01_03HandlePowerReportCBE11e_Gnm_ErrorP15s_Gnm_PowerMeas_block_invoke_2(uint64_t a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  v5[0] = v2;
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
  uint64_t result = v5[0];
  v5[0] = 0;
  if (result) {
    return MEMORY[0x230F4E5D0](result, 0x1000C407A37F5ACLL);
  }
  return result;
}

void sub_22B902A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x230F4E5D0](a9, 0x1000C407A37F5ACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = a1 + 40;

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](v3, v2);
}

void *__destroy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_10unique_ptrIN4gnss14PwrMeasurementENS_14default_deleteIS3_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);

  return std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v1);
}

uint64_t gnss::GnssAdaptDevice::Ga01_06SetDefaultSideBandConfig(gnss::GnssAdaptDevice *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = gnss::GnssAdaptDevice::Ga01_04HandleSideBand(this, *((void *)this + 13));
  if ((v1 & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetSideBandConfig\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga01_06SetDefaultSideBandConfig", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  return v1;
}

uint64_t gnss::GnssAdaptDevice::Ga01_07SetSecondaryLogConfig(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  char v5 = 0;
  int v4 = 0;
  switch(a2)
  {
    case 1:
    case 2:
      int v2 = 16843009;
      goto LABEL_6;
    case 3:
      int v2 = 33686018;
      goto LABEL_6;
    case 4:
    case 5:
      int v2 = 84215045;
      goto LABEL_6;
    case 6:
      int v2 = 101058054;
LABEL_6:
      char v5 = v2;
      int v4 = v2;
      break;
    default:
      return Gnm_SetTaLogConfig((uint64_t)&v4);
  }
  return Gnm_SetTaLogConfig((uint64_t)&v4);
}

uint64_t std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer(a1, a2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 9);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a2 + 5);
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  int v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      int v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64x2_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64x2_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64x2_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64x2_t v7 = *(uint64_t **)v12;
    }
    double v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_67;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_67:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        double v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      unsigned __int16 v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_71;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_52;
    }
LABEL_49:
    uint64x2_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64x2_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    double v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_58;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_52:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  double v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_58:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64x2_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    double v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    double v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  unsigned __int16 v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *unsigned __int16 v24 = v23;
LABEL_71:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t GAL_AlmBin2Int(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result + 8);
  if (v2 - 7168 <= 0xFFF)
  {
    *(unsigned char *)(a2 + 9) = (v2 >> 6) & 0xF;
    int v3 = (v2 >> 4) & 3;
    unsigned int v4 = *(unsigned __int16 *)(result + 28);
    if (v4 >= 0x10)
    {
      if (((v4 >> 4) & 3) == v3) {
        int v3 = 0;
      }
      v3 += v4 >> 4;
    }
    *(_WORD *)(a2 + 10) = v3;
    *(_WORD *)(a2 + 12) = (*(_WORD *)(result + 10) >> 10) & 0xFC3F | ((*(_WORD *)(result + 8) & 0xF) << 6);
    unsigned int v5 = *(unsigned __int16 *)(result + 10);
    *(_WORD *)(a2 + 14) = (int)((*(unsigned __int16 *)(result + 12) << 12) | (v5 << 28)) >> 19;
    *(_WORD *)(a2 + 16) = (*(_WORD *)(result + 14) >> 12) & 0xF80F | (16 * (*(_WORD *)(result + 12) & 0x7F));
    HIDWORD(v6) = *(unsigned __int16 *)(result + 14);
    LODWORD(v6) = *(unsigned __int16 *)(result + 16) << 16;
    *(unsigned char *)(a2 + 8) = (v5 >> 4) & 0x3F;
    *(_WORD *)(a2 + 24) = v6 >> 28;
    *(_WORD *)(a2 + 18) = (__int16)(16 * *(_WORD *)(result + 16)) >> 5;
    HIDWORD(v6) = *(unsigned __int16 *)(result + 16);
    LODWORD(v6) = *(unsigned __int16 *)(result + 18) << 16;
    *(_WORD *)(a2 + 20) = v6 >> 17;
    *(_WORD *)(a2 + 22) = ((*(unsigned __int16 *)(result + 20) << 15) | (*(unsigned __int16 *)(result + 18) << 31)) >> 21;
    HIDWORD(v6) = *(unsigned __int16 *)(result + 20);
    LODWORD(v6) = *(unsigned __int16 *)(result + 22) << 16;
    *(_WORD *)(a2 + 26) = v6 >> 22;
    HIDWORD(v6) = *(unsigned __int16 *)(result + 22);
    LODWORD(v6) = *(unsigned __int16 *)(result + 24) << 16;
    *(_WORD *)(a2 + 28) = v6 >> 22;
    *(_WORD *)(a2 + 30) = ((*(unsigned __int16 *)(result + 26) << 10) | (*(unsigned __int16 *)(result + 24) << 26)) >> 19;
    unsigned int v7 = *(unsigned __int16 *)(result + 26);
    *(unsigned char *)(a2 + 33) = (v7 >> 7) & 3;
    *(unsigned char *)(a2 + 34) = (v7 >> 5) & 3;
    *(void *)a2 = *(void *)result;
  }
  return result;
}

void GncP02_10DataIndFromMECB(size_t a1, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v4 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 142, 1, 0x20uLL);
  if (v4)
  {
    unsigned int v5 = v4;
    unint64_t v6 = gnssOsa_Calloc("GncP02_10DataIndFromMECB", 148, 1, a1);
    void v5[2] = v6;
    if (v6)
    {
      if (a1 > 8)
      {
        memcpy_s("GncP02_10DataIndFromMECB", 161, v6, a1, a2, a1);
        *((_WORD *)v5 + 12) = a1;
        if (a2[2] == 77) {
          unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        }
        else {
          LODWORD(v9) = 0;
        }
        *((_DWORD *)v5 + 7) = v9;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND =>GNCP Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "GncP02_10DataIndFromMECB", *((unsigned __int16 *)v5 + 12));
          LbsOsaTrace_WriteLog(8u, __str, v11, 5, 1);
        }
        AgpsSendFsmMsg(134, 134, 8788739, v5);
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP02_10DataIndFromMECB", 783, a1);
        LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
      }
    }
    else
    {
      free(v5);
    }
  }
}

void GncP02_13ClearMEBuf(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  while (g_GncPMeData)
    GncP02_14ClearCurrMEBufElem();
  g_GncPMeData = 0;
  if (g_GncPMeData)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MEDataPack,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP02_13ClearMEBuf", 770, g_GncPMeData);
      LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
    }
    g_GncPMeData = 0;
  }
}

void GncP02_14ClearCurrMEBufElem(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (g_GncPMeData)
  {
    uint64_t v0 = *(void *)(g_GncPMeData + 2056);
    free((void *)g_GncPMeData);
    if (g_GncPMeData)
    {
      --g_GncPMeData;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 87, "GncP02_14ClearCurrMEBufElem", 770);
      LbsOsaTrace_WriteLog(8u, __str, v2, 2, 1);
    }
    g_GncPMeData = v0;
  }
}

void GncP02_23PostProcessMeMsg(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  if (v6 != 66 && v6 != 79)
  {
    if (v6 == 77)
    {
      if (a1[1] == 77)
      {
        if ((a2 & 1) == 0) {
          GncP16_26UpdateStateMEDataRcvd();
        }
        if ((g_GncPMeData & 1) == 0)
        {
          GncP01_32ExecutePE((uint64_t)a1, a2, a3, a4, a5, a6);
        }
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP02_23PostProcessMeMsg", 777, *a1);
      LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
    }
  }
}

size_t GncP02_16GetMEDataFrmBuf(size_t a1, char *a2)
{
  if (!g_GncPMeData) {
    return 0;
  }
  size_t v2 = a1;
  g_GncPMeData = *(_DWORD *)(g_GncPMeData + 2052);
  size_t v3 = *(unsigned __int16 *)(g_GncPMeData + 2048);
  if (v3 <= a1)
  {
    memcpy_s("GncP02_16GetMEDataFrmBuf", 400, a2, a1, (const void *)g_GncPMeData, v3);
    size_t v2 = *(unsigned __int16 *)(g_GncPMeData + 2048);
    GncP02_14ClearCurrMEBufElem();
  }
  else
  {
    memcpy_s("GncP02_16GetMEDataFrmBuf", 387, a2, a1, (const void *)g_GncPMeData, a1);
    memmove((void *)g_GncPMeData, (const void *)(g_GncPMeData + v2), (*(_WORD *)(g_GncPMeData + 2048) - v2));
    *(_WORD *)(g_GncPMeData + 2048) -= v2;
  }
  return v2;
}

uint64_t GncP02_22HandleDataFromME(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (a1)
  {
    __int16 v51 = 0;
    unsigned __int8 v52 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_BUF_RX_IND Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "GncP02_22HandleDataFromME", *(unsigned __int16 *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
    }
    unsigned int v8 = *(unsigned __int16 *)(a1 + 24);
    if (!*(_WORD *)(a1 + 24)) {
      goto LABEL_25;
    }
    if (v8 >= 0x801)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgLen,%u,Max,%u\n", v9);
LABEL_24:
        LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
        goto LABEL_25;
      }
      goto LABEL_25;
    }
    if (v8 <= 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgLen,%u,Min,%u\n", v13);
        goto LABEL_24;
      }
LABEL_25:
      BOOL v21 = *(void **)(a1 + 16);
      if (v21) {
        free(v21);
      }
      *(void *)(a1 + 16) = 0;
      return 0;
    }
    int v14 = *(_DWORD *)(a1 + 28);
    uint64_t v15 = *(void *)(a1 + 16);
    __int16 v53 = 0;
    unsigned __int8 v54 = 0;
    if (*(unsigned char *)v15 != 122 || *(unsigned char *)(v15 + 1) != 120)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME Data nonZX MC,%u,MID,%u\n", v20);
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    LOBYTE(v53) = *(unsigned char *)(v15 + 2);
    int v16 = *(unsigned __int8 *)(v15 + 3);
    HIBYTE(v53) = *(unsigned char *)(v15 + 3);
    unsigned __int8 v54 = *(unsigned char *)(v15 + 4);
    if (v53 != 66)
    {
      if (v53 != 79)
      {
        if (v53 != 77)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v49 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u\n", v49);
            goto LABEL_44;
          }
LABEL_71:
          __int16 v51 = v53;
          unsigned __int8 v52 = v54;
          GncP02_23PostProcessMeMsg((unsigned __int8 *)&v51, 0, v2, v3, v4, v5);
          goto LABEL_25;
        }
        if (v16 != 77) {
          goto LABEL_71;
        }
        size_t v17 = *(unsigned __int16 *)(v15 + 5);
        if ((int)v17 + 9 > v8)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME=>GNCP ZX%c%c,Readlen,%u,Payloadlen,%u\n", v18, "GNC", 87);
LABEL_44:
            size_t v27 = v19;
            char v28 = __str;
LABEL_69:
            int v41 = 2;
            goto LABEL_70;
          }
          goto LABEL_71;
        }
        uint64_t v31 = gnssOsa_Calloc("GncP02_15AddMEDataElem", 318, 1, 0x810uLL);
        if (!v31)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
            goto LABEL_71;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEData Lost Len,%u\n");
          goto LABEL_44;
        }
        int v32 = v31;
        if (g_GncPMeData == 255)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v33 = mach_continuous_time();
            unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEData Overflow\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNC", 87, "GncP02_15AddMEDataElem");
            LbsOsaTrace_WriteLog(8u, __str, v34, 2, 1);
          }
          GncP02_13ClearMEBuf();
        }
        v32[513] = v14;
        *((_WORD *)v32 + 1024) = v17;
        *((void *)v32 + 257) = 0;
        memcpy_s("GncP02_15AddMEDataElem", 337, v32, 0x800u, (const void *)(v15 + 8), v17);
        uint64_t v35 = &g_GncPMeData;
        uint64_t v36 = g_GncPMeData;
        if (g_GncPMeData)
        {
          do
          {
            uint64_t v37 = v36;
            uint64_t v36 = *(void *)(v36 + 2056);
          }
          while (v36);
          uint64_t v35 = (uint64_t *)(v37 + 2056);
        }
        *uint64_t v35 = (uint64_t)v32;
        ++g_GncPMeData;
        if (g_GncPMeData)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_71;
          }
          bzero(__str, 0x410uLL);
          unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Len,%u,TS,%u,NumPks,%u\n", v38);
        }
        else
        {
          int v44 = (unsigned __int16)word_26ADFF91E;
          if (word_26ADFF91E && (unsigned __int16)g_GncPConfig >= 0x3E8u)
          {
            if (AgpsFsmStartTimer(0x861E06u, (unsigned __int16)word_26ADFF91E))
            {
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v45 = mach_continuous_time();
                unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNC", 87, "GncP02_11StrtMEDataDelayTimr", 1544, v44);
                LbsOsaTrace_WriteLog(8u, __str, v46, 2, 1);
              }
            }
            else
            {
              g_GncPMeData = 1;
              mach_continuous_time();
            }
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
            goto LABEL_71;
          }
          bzero(__str, 0x410uLL);
          unint64_t v48 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FixInt,%u,Timer,%u,Started,%u,Len,%u,TS,%u,NumPks,%u\n", v48, "GNC", 73);
        }
        size_t v27 = v39;
        char v28 = __str;
LABEL_88:
        int v41 = 4;
        goto LABEL_70;
      }
      if (v16 == 84)
      {
        GncP25_04HandleTimeMarkEvent((unsigned __int8 *)v15, v8);
        goto LABEL_71;
      }
      memset_s(__str, 0x7FCuLL, 0, 0x7FCuLL);
      if (!GncP02_01DecodeZXStream((unsigned __int8 *)v15, v8, (unsigned __int8 *)&v53, (uint64_t)__str)) {
        goto LABEL_71;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(v56, 0x410uLL);
        uint64_t v29 = mach_continuous_time();
        unsigned __int16 v30 = snprintf(v56, 0x40FuLL, "%10u %s%c %s: ME=>GNCP ZX%c%c,SN,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNC", 73, "GncP02_20ProcessMeMsg", v53, HIBYTE(v53), v54);
        LbsOsaTrace_WriteLog(8u, v56, v30, 4, 1);
      }
      if (HIBYTE(v53) == 80)
      {
        GncP26_05HandlePowerRepMsg((unsigned __int8 *)&v53, __str);
        goto LABEL_71;
      }
      goto LABEL_66;
    }
    memset_s(__str, 0x7FCuLL, 0, 0x7FCuLL);
    if (!GncP02_01DecodeZXStream((unsigned __int8 *)v15, v8, (unsigned __int8 *)&v53, (uint64_t)__str)) {
      goto LABEL_71;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(v56, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(v56, 0x40FuLL, "%10u %s%c %s: ME=>GNCP ZX%c%c,SN,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNC", 73, "GncP02_20ProcessMeMsg", v53, HIBYTE(v53), v54);
      LbsOsaTrace_WriteLog(8u, v56, v24, 4, 1);
    }
    if (HIBYTE(v53) != 83)
    {
LABEL_66:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_71;
      }
      bzero(v56, 0x410uLL);
      unint64_t v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v43 = snprintf(v56, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u\n", v42);
LABEL_68:
      size_t v27 = v43;
      char v28 = v56;
      goto LABEL_69;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(v56, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(v56, 0x40FuLL, "%10u %s%c %s: Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "GNC", 73, "GncP02_25HandleDeRegGnssResp", __str[0]);
      LbsOsaTrace_WriteLog(8u, v56, v26, 4, 1);
    }
    if (__str[0] > 0x4Cu)
    {
      if (__str[0] == 77)
      {
        GncP16_31UpdateStateMEPowerState(7u);
        goto LABEL_71;
      }
      if (__str[0] == 119)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0)) {
          goto LABEL_71;
        }
        bzero(v56, 0x410uLL);
        uint64_t v47 = mach_continuous_time();
        size_t v27 = (unsigned __int16)snprintf(v56, 0x40FuLL, "%10u %s%c %s: ME Wake-up in progress\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "GNC", 73, "GncP02_25HandleDeRegGnssResp");
        char v28 = v56;
        goto LABEL_88;
      }
      if (__str[0] != 109) {
        goto LABEL_82;
      }
    }
    else if (__str[0] != 32)
    {
      if (__str[0] == 67 || __str[0] == 71)
      {
        GncP03_14SendDeRegGnssReq((unsigned __int16)word_26ADFF920, 0);
        goto LABEL_71;
      }
LABEL_82:
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        goto LABEL_71;
      }
      bzero(v56, 0x410uLL);
      unint64_t v50 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v43 = snprintf(v56, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%u\n", v50);
      goto LABEL_68;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(v56, 0x410uLL);
      uint64_t v40 = mach_continuous_time();
      size_t v27 = (unsigned __int16)snprintf(v56, 0x40FuLL, "%10u %s%c %s: Success response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNC", 68, "GncP02_25HandleDeRegGnssResp");
      char v28 = v56;
      int v41 = 5;
LABEL_70:
      LbsOsaTrace_WriteLog(8u, v28, v27, v41, 1);
      goto LABEL_71;
    }
    goto LABEL_71;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 69, "GncP02_22HandleDataFromME", 517);
    LbsOsaTrace_WriteLog(8u, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t GncP02_31MEDataDelayTimExp(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(&v18[3], 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(&v18[3], 0x40FuLL, "%10u %s%c %s: FSM:GNCP_MEDATA_DELAY_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "GncP02_31MEDataDelayTimExp");
      LbsOsaTrace_WriteLog(8u, &v18[3], v6, 5, 1);
    }
    int v7 = g_GncPStateInfo;
    g_GncPMeData = 0;
    strcpy(v18, "MM");
    if (g_GncPStateInfo > 0x10u) {
      goto LABEL_22;
    }
    if (((1 << g_GncPStateInfo) & 0x10A3E) != 0)
    {
LABEL_6:
      GncP02_13ClearMEBuf();
      return 0;
    }
    if (((1 << g_GncPStateInfo) & 0xC5C1) == 0)
    {
LABEL_22:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(&v18[3], 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(&v18[3], 0x40FuLL, "%10u %s%c %s: #%04hx State,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP02_12MEDataTimerExpiry", 262, v7);
        LbsOsaTrace_WriteLog(8u, &v18[3], v17, 2, 1);
      }
    }
    uint64_t v10 = g_GncPMeData;
    if (!g_GncPMeData) {
      return 0;
    }
    int v11 = g_GncPMeData;
    while (1)
    {
      int v12 = *(unsigned __int16 *)(v10 + 2048);
      GncP02_23PostProcessMeMsg((unsigned __int8 *)v18, 1, v1, v2, v3, v4);
      uint64_t v10 = g_GncPMeData;
      if (g_GncPMeData == v11 && *(unsigned __int16 *)(g_GncPMeData + 2048) == v12) {
        break;
      }
      int v11 = g_GncPMeData;
      if (!g_GncPMeData) {
        return 0;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(&v18[3], 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(&v18[3], 0x40FuLL, "%10u %s%c %s: State,%hhu,NumPks,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP02_12MEDataTimerExpiry", v7, v11);
      LbsOsaTrace_WriteLog(8u, &v18[3], v15, 0, 1);
    }
    goto LABEL_6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(&v18[3], 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(&v18[3], 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP02_31MEDataDelayTimExp", 517);
    LbsOsaTrace_WriteLog(8u, &v18[3], v9, 0, 1);
  }
  return 0;
}

uint64_t GncP02_32StateHndlTimExp(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_STATE_HNDL_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 68, "GncP02_32StateHndlTimExp");
      uint64_t IsLoggingAllowed = LbsOsaTrace_WriteLog(8u, __str, v8, 5, 1);
    }
    GncP16_25UpdateStateTimerExpiry(IsLoggingAllowed, v2, v3, v4, v5, v6);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "GncP02_32StateHndlTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
  }
  return 0;
}

uint64_t GncP02_33BBResetTimExp(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_GNSSBBRESET_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_33BBResetTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncP19_04MEResetTimerExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP02_33BBResetTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncP02_34TimemarkSessTimExp(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_SESS_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncP02_34TimemarkSessTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncP25_10TimemarkSessTimerExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncP02_34TimemarkSessTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

BOOL GncP02_01DecodeZXStream(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned __int16 v16 = 0;
  int v19 = 0;
  char v20 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
  int PlcHwType = GncP05_62GetPlcHwType();
  plc00_03DecodeMsg(0, (uint64_t)a1, a2, a4, &v16, &v19, a3, PlcHwType);
  int v9 = v19;
  if (!v19) {
    return v9 == 0;
  }
  if (!IsLoggingAllowed)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
      goto LABEL_9;
    }
    bzero(__str, 0x410uLL);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDE,%u\n", v12, "GNC");
    goto LABEL_8;
  }
  if (plc00_15GetExtErrAsString(&v19, __s, 0x104uLL) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDE,%u,Err,%s\n", v10, "GNC", 87);
LABEL_8:
    LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
  }
LABEL_9:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgHeader %x,%x,%x,%x,%x,%x,%x,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "GncP02_01DecodeZXStream", 776, *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
    LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
  }
  return v9 == 0;
}

uint64_t Decode_BDS_Alm_Health_Sts(int a1)
{
  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1)
    {
      if ((a1 & 0xE0) != 0) {
        int v5 = 4;
      }
      else {
        int v5 = 7;
      }
      int v6 = (a1 << 26 >> 31) & 6;
      if ((a1 & 0x40) != 0) {
        int v6 = 5;
      }
      if ((a1 & 0x80) != 0) {
        unsigned int v7 = v5;
      }
      else {
        unsigned int v7 = v6;
      }
      if ((a1 & 0xE0) == 0) {
        unsigned int v7 = v5;
      }
      if ((a1 & 2) != 0) {
        unsigned int v8 = 3;
      }
      else {
        unsigned int v8 = v7;
      }
      if (a1 == 255) {
        return 2;
      }
      else {
        return v8;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((a1 & 0xE0) != 0) {
      int v1 = 8;
    }
    else {
      int v1 = 11;
    }
    int v2 = (a1 << 26 >> 31) & 0xA;
    if ((a1 & 0x40) != 0) {
      int v2 = 9;
    }
    if ((a1 & 0x80) != 0) {
      unsigned int v3 = v1;
    }
    else {
      unsigned int v3 = v2;
    }
    if ((a1 & 0xE0) == 0) {
      unsigned int v3 = v1;
    }
    if ((a1 & 2) != 0) {
      return 3;
    }
    else {
      return v3;
    }
  }
}

uint64_t FN_Publish_Fused_Soln(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(int32x2_t *)(a2 + 32) = vrev64_s32(*(int32x2_t *)a1);
  *(void *)(a2 + 40) = v2;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a2 + 52) = *(unsigned char *)(a1 + 20);
  *(_WORD *)(a2 + 54) = *(_WORD *)(a1 + 22);
  char v3 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a2 + 1) = v3;
  *(unsigned char *)a2 = v3;
  long long v4 = *(_OWORD *)(a1 + 192);
  *(void *)(a2 + 224) = *(void *)(a1 + 208);
  *(_OWORD *)(a2 + 208) = v4;
  long long v5 = *(_OWORD *)(a1 + 216);
  *(void *)(a2 + 336) = *(void *)(a1 + 232);
  *(_OWORD *)(a2 + 320) = v5;
  *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 240);
  *(void *)(a2 + 360) = *(void *)(a1 + 256);
  *(void *)(a2 + 4) = *(void *)(a1 + 28);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 152);
  long long v7 = *(_OWORD *)(a1 + 136);
  long long v8 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 864) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 880) = v8;
  *(_OWORD *)(a2 + 896) = v7;
  *(void *)(a2 + 912) = v6;
  long long v9 = *(_OWORD *)(a1 + 88);
  long long v10 = *(_OWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 800) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 816) = v10;
  *(_OWORD *)(a2 + 832) = v11;
  *(_OWORD *)(a2 + 848) = v9;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 176);
  long long v12 = *(_OWORD *)(a1 + 264);
  long long v13 = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 1512) = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a2 + 1528) = v13;
  *(_OWORD *)(a2 + 1496) = v12;
  *(_WORD *)(a2 + 462) = *(_WORD *)(a1 + 552);
  *(_OWORD *)(a2 + 468) = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 484) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a2 + 500) = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a2 + 516) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 532) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 548) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a2 + 580) = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a2 + 596) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 612) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a2 + 628) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a2 + 660) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(a2 + 676) = *(_OWORD *)(a1 + 488);
  *(_OWORD *)(a2 + 692) = *(_OWORD *)(a1 + 504);
  *(_OWORD *)(a2 + 708) = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 724) = *(_OWORD *)(a1 + 536);
  long long v14 = *(_OWORD *)(a1 + 944);
  *(void *)(a2 + 1992) = *(void *)(a1 + 960);
  *(_OWORD *)(a2 + 1976) = v14;
  long long v15 = *(_OWORD *)(a1 + 968);
  *(void *)(a2 + 2016) = *(void *)(a1 + 984);
  *(_OWORD *)(a2 + 2000) = v15;
  long long v16 = *(_OWORD *)(a1 + 992);
  *(void *)(a2 + 2040) = *(void *)(a1 + 1008);
  *(_OWORD *)(a2 + 2024) = v16;
  memcpy((void *)(a2 + 1592), (const void *)(a1 + 560), 0x180uLL);
  return 1;
}

BOOL Comp_AcqAid(int a1, __int16 a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5, double a6)
{
  int v6 = *a4;
  *(unsigned char *)(a5 + 4) = v6;
  if (!v6) {
    return v6 != 0;
  }
  *(_DWORD *)a5 = a1;
  double v7 = *((double *)a4 + 5) * 65.536;
  double v8 = -0.5;
  if (v7 <= 0.0) {
    double v9 = -0.5;
  }
  else {
    double v9 = 0.5;
  }
  double v10 = v7 + v9;
  if (v10 <= 2147483650.0)
  {
    if (v10 >= -2147483650.0) {
      int v11 = (int)v10;
    }
    else {
      LOWORD(v11) = 0;
    }
  }
  else
  {
    LOWORD(v11) = -1;
  }
  *(_WORD *)(a5 + 20) = v11;
  double v12 = *((double *)a4 + 3);
  if (v12 > 0.0) {
    double v8 = 0.5;
  }
  double v13 = v12 + v8;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0) {
      int v14 = (int)v13;
    }
    else {
      LOWORD(v14) = 0;
    }
  }
  else
  {
    LOWORD(v14) = -1;
  }
  *(_WORD *)(a5 + 22) = v14;
  unsigned int v15 = *((_DWORD *)a4 + 8);
  if (v15 >= a3)
  {
    *(_WORD *)(a5 + 22) = -a2;
    LOWORD(v15) = a3;
  }
  *(_WORD *)(a5 + 18) = v15;
  double v16 = *((double *)a4 + 6) * 4.0;
  double v17 = -0.5;
  if (v16 > 0.0) {
    double v17 = 0.5;
  }
  double v18 = v16 + v17;
  if (v18 <= 2147483650.0)
  {
    if (v18 >= -2147483650.0) {
      __int16 v19 = (int)v18;
    }
    else {
      __int16 v19 = 0;
    }
  }
  else
  {
    __int16 v19 = -1;
  }
  *(_WORD *)(a5 + 40) = v19;
  unsigned int v20 = *((_DWORD *)a4 + 14);
  if (v20 >= 0xFF) {
    LOBYTE(v20) = -1;
  }
  *(unsigned char *)(a5 + 42) = v20;
  unsigned int v21 = *((_DWORD *)a4 + 1);
  *(unsigned char *)(a5 + 15) = v21 >> 6 < 0x753;
  unsigned int v22 = *((_DWORD *)a4 + 3);
  if (v22 >= 0x24988)
  {
    if (v22 > 0xDB930)
    {
      *(unsigned char *)(a5 + 14) = 0;
      goto LABEL_34;
    }
    char v23 = 2;
  }
  else
  {
    char v23 = 3;
  }
  *(unsigned char *)(a5 + 14) = v23;
LABEL_34:
  LODWORD(v18) = *((_DWORD *)a4 + 2);
  double v24 = (double)*(unint64_t *)&v18 / 299792458.0;
  *(_WORD *)(a5 + 16) = (int)(v24 * 2000.0 + 0.5);
  *(_DWORD *)(a5 + 36) = (int)(v24 * 1000000000.0);
  double v25 = a6 - v24;
  double v26 = v25 / 1.5;
  if (v25 / 1.5 <= 0.0) {
    double v26 = v25 / 1.5 + -1.0;
  }
  int v27 = (int)v26;
  *(_DWORD *)(a5 + 28) = (int)v26;
  double v28 = (v25 + (double)(int)v26 * -1.5) * 1023000.0;
  double v29 = -0.5;
  if (v28 > 0.0) {
    double v29 = 0.5;
  }
  double v30 = v28 + v29;
  if (v30 <= 2147483650.0)
  {
    if (v30 >= -2147483650.0) {
      int v31 = (int)v30;
    }
    else {
      int v31 = 0x80000000;
    }
  }
  else
  {
    int v31 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a5 + 32) = v31;
  if (v27 < 0) {
    *(_DWORD *)(a5 + 28) = v27 + 403200;
  }
  unsigned int v32 = *((_DWORD *)a4 + 4);
  if (v32 >= 0x1B8)
  {
    if (v32 <= 0x247B5) {
      unsigned int v33 = (v32 + 293) / 0x125;
    }
    else {
      LOWORD(v33) = 512;
    }
  }
  else
  {
    LOWORD(v33) = 2;
  }
  *(_WORD *)(a5 + 26) = v33;
  if (v21 >= 0x13)
  {
    if (v21 <= 0x247B5) {
      unsigned int v34 = (v21 + 18) / 0x12;
    }
    else {
      LOWORD(v34) = 8184;
    }
  }
  else
  {
    LOWORD(v34) = 1;
  }
  *(_WORD *)(a5 + 24) = v34;
  return v6 != 0;
}

uint64_t POSGen_inpPOS2mST(uint64_t a1, _DWORD *a2, uint64_t a3, double *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *((_DWORD *)a4 + 2) = 9;
  TCU_ConvertOStimeToTTICKtime((const char *)a3, *a2, a4);
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  VecSet_3x1((const char *)3, (uint64_t)v28, *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 6));
  InsUtil_Geo2ECEF_Iterative((double *)v28, (uint64_t)v27);
  Copy_Mat(3, (int *)v27, (const char *)6, (int *)a4 + 4);
  double v8 = *((double *)a2 + 3);
  if (v8 <= *((double *)a2 + 4)) {
    double v8 = *((double *)a2 + 4);
  }
  memset(v26, 0, sizeof(v26));
  VecSet_3x1((const char *)3, (uint64_t)v26, v8, v8, *((double *)a2 + 7));
  Mult_Mat_scalar(2.0, 3, (int *)v26, (const char *)3, (int *)v26);
  Copy_Mat(3, (int *)v26, (const char *)6, (int *)a4 + 18);
  if (*((double *)a2 + 3) <= 0.0 || *((double *)a2 + 4) <= 0.0 || *((double *)a2 + 7) <= 0.0)
  {
    __int16 v14 = g_FPE_LogSeverity;
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v16 = *(double *)(g_TCU + 8);
      }
      else {
        double v16 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f POS: Bad meas rms at OsTime=%d (gpsTime=%0.3f)", "POSGen_inpPOS2mST", 99, v15, v16, *a2, *(double *)(a3 + 8));
      __int16 v14 = g_FPE_LogSeverity;
    }
    if ((v14 & 0x200) != 0) {
      LC_LOG_NMEA_GENERIC("%s,POSW1,%d,%d,%.3f");
    }
    goto LABEL_20;
  }
  if (!*a2)
  {
    __int16 v20 = g_FPE_LogSeverity;
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v22 = *(double *)(g_TCU + 8);
      }
      else {
        double v22 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f POS: Bad meas with OS_time_ms=0 (gpsTime=%0.3f)", "POSGen_inpPOS2mST", 107, v21, v22, *(double *)(a3 + 8));
      __int16 v20 = g_FPE_LogSeverity;
    }
    if ((v20 & 0x200) != 0) {
      LC_LOG_NMEA_GENERIC("%s,POSW2,%d,%.3f");
    }
    goto LABEL_20;
  }
  __int16 v9 = g_FPE_LogSeverity;
  if ((a2[16] - 3) >= 2)
  {
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v24 = *(double *)(g_TCU + 8);
      }
      else {
        double v24 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f POS: Low trust meas ignored (trust=%u,gpsTime=%0.3f)", "POSGen_inpPOS2mST", 115, v23, v24, a2[16], *(double *)(a3 + 8));
      __int16 v9 = g_FPE_LogSeverity;
    }
    if ((v9 & 0x200) != 0) {
      LC_LOG_NMEA_GENERIC("%s,POSW3,%d,%d,%d,%.3f");
    }
LABEL_20:
    uint64_t v17 = 0;
    double v25 = -1.0;
    double v18 = -1.0;
    goto LABEL_21;
  }
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU)
    {
      double v11 = *(double *)(g_TCU + 8);
      double v12 = *a4 - *(double *)(g_TCU + 64);
      double v13 = 604800.0;
      if (v12 >= 604800.0)
      {
        double v13 = -604800.0;
      }
      else if (v12 >= 0.0)
      {
        goto LABEL_41;
      }
      double v12 = v12 + v13;
    }
    else
    {
      double v11 = 0.0;
      double v12 = 0.0;
    }
LABEL_41:
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: EPOS = {tow:%0.3f,LLH:[%0.6f %0.6f %0.1f],ErrEllip:[%0.1f %0.1f %d],src:%u}", "POSGen_inpPOS2mST", 124, v10, v11, v12, *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 6), *((double *)a2 + 3), *((double *)a2 + 4), *((__int16 *)a2 + 20), a2[17]);
  }
  double v25 = 0.0;
  double v18 = distLLA((double *)v28, (double *)(a1 + 8), &v25);
  uint64_t v17 = 1;
LABEL_21:
  if ((g_FPE_LogSeverity & 0x200) != 0) {
    LC_LOG_NMEA_GENERIC("%s,POS,%.3f,%.1f,%.1f,%.1f,%.3f,%.1f,%.1f", "$PFPEX", *a4, *((double *)a2 + 6), *((double *)a2 + 3), *((double *)a2 + 4), *(double *)(a3 + 40) - *a4, v18, v25);
  }
  return v17;
}

uint64_t POSGen_run(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v8 = *(void **)(a3 + 87792);
  __int16 v9 = *(_DWORD **)(a4 + 128056);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long __dst = 0u;
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  double v10 = *(double *)(a5 + 40);
  uint64_t result = Cyc_Record_Count_Free(v9, 1u);
  if (result)
  {
    while (1)
    {
      uint64_t result = Cyc_Record_IsEmpty(v8, a2);
      if (result) {
        break;
      }
      Cyc_Record_Read((uint64_t)v8, a2, &__dst);
      if (POSGen_inpPOS2mST(a1, &__dst, a5, (double *)&v20))
      {
        if (*(double *)&v20 >= *(double *)a1)
        {
          *(void *)a1 = v20;
          memset(v19, 0, sizeof(v19));
          VecSet_3x1((const char *)3, (uint64_t)v19, *((double *)&__dst + 1), *(double *)&v15, *(double *)&v17);
          Copy_Mat(3, (int *)v19, (const char *)3, (int *)(a1 + 8));
          Cyc_Record_Write((uint64_t)v9, &v20);
        }
        else if ((g_FPE_LogSeverity & 4) != 0)
        {
          uint64_t v12 = mach_continuous_time();
          if (g_TCU) {
            double v13 = *(double *)(g_TCU + 8);
          }
          else {
            double v13 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f POS: ignoring measurement in the past. meas.time=%0.3f, prevTime=%0.3f (diff=%0.3f)", "POSGen_run", 202, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), v13, *(double *)&v20, *(double *)a1, *(double *)a1 - *(double *)&v20);
        }
      }
      uint64_t result = Cyc_Record_Count_Free(v9, 1u);
      if (!result) {
        return result;
      }
    }
    DWORD2(v20) = 12;
    *(double *)&long long v20 = v10 + 0.001;
    *(void *)&long long v21 = 0x4008000000000000;
    if (v10 + 0.001 > *(double *)a1)
    {
      *(double *)a1 = v10 + 0.001;
      return (uint64_t)Cyc_Record_Write((uint64_t)v9, &v20);
    }
  }
  return result;
}

uint64_t Gnm28_01HandlePeNvBackup(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_01HandlePeNvBackup");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm28_01HandlePeNvBackup", 517);
    int v11 = 0;
LABEL_13:
    LbsOsaTrace_WriteLog(0xBu, __str, v10, v11, 1);
    return 0;
  }
  long long v4 = *(const void **)(a1 + 16);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm28_01HandlePeNvBackup", 513);
    int v11 = 2;
    goto LABEL_13;
  }
  size_t v5 = *(unsigned __int16 *)(a1 + 12);
  if (!*(_WORD *)(a1 + 12))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, v5, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NVSize,0\n");
LABEL_18:
    size_t v7 = v13;
    int v8 = 2;
    goto LABEL_19;
  }
  if ((gnssOsa_storeBufferToNv(0, v4, v5) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqWrite,%u\n", v16);
    goto LABEL_18;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success NvSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm28_01HandlePeNvBackup", *(unsigned __int16 *)(a1 + 12));
    int v8 = 4;
LABEL_19:
    LbsOsaTrace_WriteLog(0xBu, __str, v7, v8, 1);
  }
LABEL_20:
  __int16 v14 = *(void **)(a1 + 16);
  if (v14) {
    free(v14);
  }
  *(void *)(a1 + 16) = 0;
  return 0;
}

uint64_t Gnm28_11RestorePeNv(int a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Restore PE NV initiated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_11RestorePeNv");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  long long v4 = (unsigned __int16 *)gnssOsa_Calloc("Gnm28_11RestorePeNv", 97, 1, 0x20uLL);
  if (!v4)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm28_11RestorePeNv", 1537);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
    return 0;
  }
  size_t v5 = v4;
  size_t size = 0;
  if ((gnssOsa_getNvSize(0, &size) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      int v13 = 1572;
LABEL_14:
      size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v12, "GNM", 87, "Gnm28_11RestorePeNv", v13);
      int v15 = 2;
LABEL_17:
      LbsOsaTrace_WriteLog(0xBu, __str, v14, v15, 1);
    }
LABEL_18:
    free(v5);
    return 0;
  }
  if (!size)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      size_t v14 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Empty file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm28_11RestorePeNv");
      int v15 = 4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (size >= 0x10000)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm28_11RestorePeNv", 770);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    }
    gnssOsa_clearNV(0);
    goto LABEL_18;
  }
  long long v17 = gnssOsa_Calloc("Gnm28_11RestorePeNv", 132, 1, size);
  *((void *)v5 + 2) = v17;
  if (!v17)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_18;
    }
    bzero(__str, 0x410uLL);
    unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v13 = 1537;
    goto LABEL_14;
  }
  unsigned __int16 Nv = gnssOsa_readNv(0, v17, size);
  v5[6] = Nv;
  if (size != Nv)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqRead,%zu,Read,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 87, "Gnm28_11RestorePeNv", 1571, size, v5[6]);
      LbsOsaTrace_WriteLog(0xBu, __str, v22, 2, 1);
    }
    long long v23 = (void *)*((void *)v5 + 2);
    if (v23) {
      free(v23);
    }
    goto LABEL_18;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ =>GNCP NvSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm28_11RestorePeNv", v5[6], a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
  }
  *((unsigned char *)v5 + 24) = a1;
  AgpsSendFsmMsg(128, 134, 8787456, v5);
  return 1;
}

uint64_t Gnm28_12HandlePeNvRestoreNoAck(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_VAR_PE_NV_RESTORE_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm28_12HandlePeNvRestoreNoAck", 517);
    int v12 = 0;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v11, v12, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v5 = 89;
    if (!(_BYTE)g_Gnm_NVStoreCntxt) {
      uint64_t v5 = 78;
    }
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerStart,%u,TimerStatus,%c\n", (unint64_t)v4, "GNM", 73, "Gnm28_12HandlePeNvRestoreNoAck", HIDWORD(g_Gnm_NVStoreCntxt), v5);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
  }
  if ((_BYTE)g_Gnm_NVStoreCntxt)
  {
    int v7 = HIDWORD(g_Gnm_NVStoreCntxt);
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v7 >= 0xFA)
    {
      LOBYTE(g_Gnm_NVStoreCntxt) = 0;
      HIDWORD(g_Gnm_NVStoreCntxt) = 0;
      if ((_BYTE)qword_26AE6D430)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Max PENvRestore attempts\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck");
          LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
        }
        LOBYTE(qword_26AE6D430) = 0;
        return 0;
      }
      LOBYTE(qword_26AE6D430) = 1;
      if (Gnm28_11RestorePeNv(1))
      {
        if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
        {
          HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                         * (double)mach_continuous_time());
          LOBYTE(g_Gnm_NVStoreCntxt) = 1;
          return 0;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm28_12HandlePeNvRestoreNoAck", 1544);
          int v12 = 2;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

uint64_t Gnm28_13HandlePeNvRestoreAck(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v11 = 517;
LABEL_17:
    size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v10, "GNM", 69, "Gnm28_13HandlePeNvRestoreAck", v11);
    int v13 = 0;
LABEL_18:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    return 0;
  }
  if (qword_26AE6D430 != *(unsigned __int8 *)(a1 + 13))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v11 = 1028;
    goto LABEL_17;
  }
  if (AgpsFsmStopTimer(8400646) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", 1545);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
  }
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  int v6 = *(unsigned __int8 *)(a1 + 12);
  if ((v6 - 2) >= 2)
  {
    if (v6 != 1)
    {
      if (!*(unsigned char *)(a1 + 12))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
          int v9 = 4;
LABEL_39:
          LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
        }
LABEL_40:
        LOBYTE(qword_26AE6D430) = 0;
        return 0;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ErrCode,%hhu\n", v23);
LABEL_31:
        size_t v12 = v21;
        int v13 = 2;
        goto LABEL_18;
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
    }
    char v19 = gnssOsa_clearNV(0);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    if (v19)
    {
      if (!IsLoggingAllowed) {
        goto LABEL_40;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PeNv Deleted\n");
    }
    else
    {
      if (!IsLoggingAllowed) {
        goto LABEL_40;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    }
LABEL_38:
    size_t v8 = v16;
    int v9 = 2;
    goto LABEL_39;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fail Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm28_13HandlePeNvRestoreAck", *(unsigned __int8 *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
  }
  if ((_BYTE)qword_26AE6D430)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_40;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Max PENvRestore attempts\n");
    goto LABEL_38;
  }
  LOBYTE(qword_26AE6D430) = 1;
  if (Gnm28_11RestorePeNv(1))
  {
    if (!AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                     * (double)mach_continuous_time());
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_31;
    }
  }
  return 0;
}

double Gnm28_21InitRestorePeNv(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  LOBYTE(g_Gnm_NVStoreCntxt) = 0;
  HIDWORD(g_Gnm_NVStoreCntxt) = 0;
  LOBYTE(qword_26AE6D430) = 0;
  if (Gnm28_11RestorePeNv(0))
  {
    if (AgpsFsmStartTimer(0x802F06u, 0xFAu))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v1 = mach_continuous_time();
        unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm28_21InitRestorePeNv", 1544);
        LbsOsaTrace_WriteLog(0xBu, __str, v2, 2, 1);
      }
    }
    else
    {
      double result = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      HIDWORD(g_Gnm_NVStoreCntxt) = (unint64_t)result;
      LOBYTE(g_Gnm_NVStoreCntxt) = 1;
    }
  }
  return result;
}

uint64_t GM_Reject_Rep_SV(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)&v28[188] = *MEMORY[0x263EF8340];
  unsigned int v6 = a2 - 1;
  if ((int)(a2 - 1) >= 0)
  {
    uint64_t v7 = (int *)(result + 36 * v6);
    uint64_t v8 = a2 - 1;
    int v9 = v7;
    do
    {
      *(_DWORD *)&v27[4 * v8] = 0;
      int v10 = *v9;
      v9 -= 9;
      double result = Is_Legal(v10);
      if (result)
      {
        int v11 = *(_DWORD *)(a3 + 4 * v8);
        if (v11 >= 10)
        {
          int v12 = v11 + *((unsigned __int8 *)v7 + 4) + *((unsigned __int8 *)v7 + 6);
          unsigned int v13 = *((unsigned __int16 *)v7 + 6);
          if (v13 >= 0x2710) {
            unsigned int v13 = 10000;
          }
          *(_DWORD *)&v27[4 * v8] = v13 + 1000 * v12;
        }
      }
      uint64_t v7 = v9;
    }
    while (v8-- > 0);
  }
  if (a2)
  {
    uint64_t v15 = 0;
    unsigned __int16 v16 = (unsigned int *)v28;
    uint64_t v17 = (int *)(a3 + 4);
    unsigned __int16 v18 = (unsigned __int8 *)(v5 + 36);
    unint64_t v19 = a2;
    while (1)
    {
      uint64_t v20 = v5 + 36 * v15;
      int v21 = *(_DWORD *)v20;
      double result = Is_Legal(*(_DWORD *)v20);
      if (result)
      {
        if (*(int *)(a3 + 4 * v15) >= 10 && v15 + 1 < v19) {
          break;
        }
      }
LABEL_25:
      ++v15;
      --v6;
      ++v16;
      ++v17;
      v18 += 36;
      if (v15 == v19) {
        return result;
      }
    }
    unsigned int v22 = *(_DWORD *)&v27[4 * v15];
    unint64_t v23 = v18;
    long long v24 = v17;
    uint64_t v25 = v16;
    unsigned int v26 = v6;
    while (1)
    {
      if (*v23 == v21)
      {
        if (v21 == 2)
        {
          if (v23[3] != *(unsigned __int8 *)(v20 + 3)) {
            goto LABEL_24;
          }
        }
        else if (*(_DWORD *)v23 != v21)
        {
          goto LABEL_24;
        }
        if (*v24 >= 10)
        {
          if (v22 < *v25)
          {
            *(_DWORD *)(a3 + 4 * v15) = 3;
            goto LABEL_25;
          }
          *long long v24 = 3;
        }
      }
LABEL_24:
      ++v25;
      ++v24;
      v23 += 36;
      if (!--v26) {
        goto LABEL_25;
      }
    }
  }
  return result;
}

uint64_t Decode_GAL_INAV_GST(const unsigned __int16 *a1, unsigned int *a2, __int16 *a3)
{
  *a3 = 0;
  *a2 = 0;
  unsigned int v3 = *a1;
  if ((v3 & 0xFC00) == 0x1400)
  {
    *a3 = (a1[5] >> 11) & 0xF01F | (32 * (a1[4] & 0x7F));
    int v4 = (a1[5] & 0x7FF) << 9;
    int v5 = a1[6] >> 7;
LABEL_6:
    *a2 = v4 | v5;
    return 1;
  }
  uint64_t v6 = 0;
  if (v3 <= 0x3FF && (v3 & 0x300) == 0x200)
  {
    *a3 = a1[6] >> 4;
    int v4 = (a1[6] & 0xF) << 16;
    int v5 = a1[7];
    goto LABEL_6;
  }
  return v6;
}

uint64_t NK_SV_Meas_AP_Stats(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  v67[12] = *(double *)MEMORY[0x263EF8340];
  uint64_t v7 = (_WORD *)(a3 + 10982);
  switch(a1)
  {
    case 3:
      uint64_t v56 = (double *)(a4 + 20024);
      uint64_t v8 = a4 + 13960;
      int v9 = (double *)(a3 + 10936);
      int v10 = (double *)(a3 + 10944);
      BOOL v59 = (double *)(a3 + 10952);
      uint64_t v7 = (_WORD *)(a3 + 10986);
      break;
    case 2:
      uint64_t v56 = (double *)(a4 + 20024);
      uint64_t v8 = a4 + 8384;
      int v9 = (double *)(a3 + 10912);
      int v10 = (double *)(a3 + 10920);
      BOOL v59 = (double *)(a3 + 10928);
      uint64_t v7 = (_WORD *)(a3 + 10984);
      break;
    case 1:
      uint64_t v56 = (double *)(a4 + 20016);
      uint64_t v8 = a4 + 2808;
      int v9 = (double *)(a3 + 10888);
      int v10 = (double *)(a3 + 10896);
      BOOL v59 = (double *)(a3 + 10904);
      break;
    default:
      gn_report_assertion_failure("");
      return 0;
  }
  uint64_t v57 = (unsigned char *)(a4 + 24783);
  if (!*(_DWORD *)(a3 + 140) || !*(_DWORD *)(a3 + 11048) || *(unsigned char *)(a3 + 233) || *v9 < 0.0 || *v10 < 0.0)
  {
    *int v9 = 0.0;
    *int v10 = 0.0;
  }
  uint64_t v60 = v10;
  double v61 = v9;
  uint64_t v11 = 0;
  uint64_t v58 = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 16) = 0;
  uint64_t v62 = 0;
  int v63 = (double *)(a3 + 872);
  uint64_t v12 = a3 + 1400;
  *(void *)(v8 + 40) = 0;
  double v13 = 0.0;
  double v14 = 0.0;
  do
  {
    if (!*(unsigned char *)(v8 + v11 + 152)) {
      goto LABEL_37;
    }
    double v66 = 0.0;
    uint64_t v15 = (unsigned __int8 *)(a2 + 4 * v11);
    NK_Obs_Equ_SV(a1, *(unsigned __int8 *)(v8 + v11 + 200), *v15, v4 + 56 * v11 + 20032, (uint64_t)v67, *(double *)(v4 + 656));
    int v17 = *(_DWORD *)(v5 + 20);
    unsigned int v16 = *(_DWORD *)(v5 + 24);
    if (v17 == v16)
    {
LABEL_16:
      unsigned __int16 v18 = (double *)(v8 + 8 * v11 + 2024);
    }
    else
    {
      switch(v17)
      {
        case 0:
          break;
        case 1:
          if (!v16) {
            goto LABEL_16;
          }
          break;
        case 2:
          if (v16 <= 1) {
            goto LABEL_16;
          }
          break;
        case 3:
          if (v16 <= 2) {
            goto LABEL_16;
          }
          break;
        case 4:
          if (v16 - 5 >= 3) {
            goto LABEL_16;
          }
          break;
        case 5:
          if ((v16 & 0xFFFFFFFE) != 6) {
            goto LABEL_16;
          }
          break;
        case 6:
          if (v16 != 7) {
            goto LABEL_16;
          }
          break;
        default:
          goto LABEL_16;
      }
      unsigned __int16 v18 = (double *)(v8 + 8 * v11 + 2792);
    }
    uint64_t v19 = v4;
    uint64_t v20 = 0;
    double v21 = 0.0;
    do
    {
      double v21 = v21 + v67[v20] * *(double *)(v12 + v20 * 8);
      ++v20;
    }
    while (v20 != 11);
    double v22 = *v18 - v21;
    unint64_t v23 = (double *)(v8 + 8 * v11);
    v23[601] = v22;
    invtst(v63, v67, 0xBu, v23[505], v22, 1.0e20, &v66);
    double v24 = v66;
    if (v66 <= 0.0) {
      gn_report_assertion_failure("NK_SV_Meas_AP_Stats: -ve var");
    }
    double v25 = v23[505];
    double v26 = v25 + v25 - fabs(v24);
    v23[649] = v26;
    int v27 = *(_DWORD *)(v8 + 4 * v11 + 248);
    if ((v27 - 1) < 0x1D) {
      goto LABEL_35;
    }
    if (v27)
    {
      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      goto LABEL_35;
    }
    if (a1 != 2 && !*(unsigned char *)(v19 + v11 + 49)) {
      goto LABEL_35;
    }
    double v14 = v14 + v23[601] * v23[601] / v25;
    *(double *)(v8 + 40) = v26 / v25 + *(double *)(v8 + 40);
    double v13 = v13 + 1.0 / v25;
    ++BYTE4(v62);
    int v35 = *v15;
    if (v35 == 4)
    {
      ++BYTE4(v58);
LABEL_35:
      uint64_t v4 = v19;
LABEL_36:
      uint64_t v5 = a3;
      goto LABEL_37;
    }
    uint64_t v4 = v19;
    if (v35 == 2)
    {
      LOBYTE(v58) = v58 + 1;
      goto LABEL_36;
    }
    uint64_t v5 = a3;
    LOBYTE(v62) = v62 + 1;
LABEL_37:
    int v28 = *(_DWORD *)(v8 + 4 * v11 + 248);
    if ((v28 - 1) < 0x1D) {
      goto LABEL_38;
    }
    if (v28)
    {
      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_38:
      *(unsigned char *)(v8 + v11 + 152) = 0;
      ++*v7;
      switch(a1)
      {
        case 3:
          uint64_t v29 = v5 + v11;
          uint64_t v30 = 9992;
          break;
        case 2:
          uint64_t v29 = v5 + v11;
          uint64_t v30 = 9944;
          break;
        case 1:
          uint64_t v29 = v5 + v11;
          uint64_t v30 = 9896;
          break;
        default:
          goto LABEL_46;
      }
      long long v31 = (unsigned char *)(v29 + v30);
      int v32 = *v31;
      if (v32 != 255) {
        *long long v31 = v32 + 1;
      }
      goto LABEL_46;
    }
    switch(a1)
    {
      case 3:
        uint64_t v33 = v5 + v11;
        uint64_t v34 = 9992;
        break;
      case 2:
        uint64_t v33 = v5 + v11;
        uint64_t v34 = 9944;
        break;
      case 1:
        uint64_t v33 = v5 + v11;
        uint64_t v34 = 9896;
        break;
      default:
        goto LABEL_46;
    }
    *(unsigned char *)(v33 + v34) = 0;
LABEL_46:
    ++v11;
  }
  while (v11 != 48);
  if (a1 == 3)
  {
    v57[2] = v62;
    v57[7] = v58;
    v57[12] = BYTE4(v58);
    uint64_t v37 = v60;
    uint64_t v36 = v61;
  }
  else
  {
    uint64_t v37 = v60;
    uint64_t v36 = v61;
    if (a1 == 2)
    {
      v57[1] = v62;
      v57[6] = v58;
      v57[11] = BYTE4(v58);
    }
    else if (a1 == 1)
    {
      *uint64_t v57 = v62;
      v57[5] = v58;
      v57[10] = BYTE4(v58);
    }
  }
  double v39 = *(double *)(v8 + 40);
  if (v39 < 1.0)
  {
    *(void *)(v8 + 32) = 0;
    double v40 = *v37 * 0.98;
    *uint64_t v37 = v40;
    *uint64_t v36 = *v36 * dbl_22BB0E600[*v36 > 1.0];
    int v41 = v59;
    unsigned __int8 v38 = BYTE4(v62);
    if (v40 < 1.0)
    {
      *uint64_t v36 = 0.0;
      *uint64_t v37 = 0.0;
    }
    goto LABEL_100;
  }
  double v42 = v14 * *(double *)(v8 + 48) / v39;
  *(double *)(v8 + 32) = v42;
  if (v42 > 3.02)
  {
    double v43 = *v36;
    if (*v36 > 11.0)
    {
      if (v43 > 1.0)
      {
        if (v42 <= v43) {
          double v42 = *v36;
        }
        double v42 = v42 * 0.1;
      }
      goto LABEL_91;
    }
    double v44 = v39 + 0.5;
    if ((int)v44 <= 4) {
      unsigned __int8 v45 = (int)v44 - 1;
    }
    else {
      unsigned __int8 v45 = 4;
    }
    double v46 = F_dist[v45];
    BOOL v48 = v42 <= v46;
    double v47 = fmin(v43, 4.0) * v46;
    BOOL v48 = v48 || v42 <= v47;
    if (!v48)
    {
      if (v43 > 1.0) {
        double v42 = v42 / v43;
      }
LABEL_91:
      if (*(_DWORD *)(v4 + 968) != 1 && v42 > *v56) {
        *uint64_t v56 = v42;
      }
    }
  }
  if (*(unsigned char *)(v5 + 233))
  {
    *(void *)(v8 + 40) = 0;
    int v41 = v59;
    unsigned __int8 v38 = BYTE4(v62);
  }
  else
  {
    unsigned __int8 v38 = BYTE4(v62);
    double v49 = *v37 * 0.98;
    double v50 = *(double *)(v8 + 40);
    double v51 = *(double *)(v8 + 32) / (v13 / (double)BYTE4(v62));
    *(double *)(v8 + 16) = v51;
    int v41 = v59;
    *BOOL v59 = v51 * v50 + *v59 * *v59 * v49;
    double v52 = *(double *)(v8 + 32) * *(double *)(v8 + 40) + *v36 * v49;
    *uint64_t v36 = v52;
    double v53 = v49 + *(double *)(v8 + 40);
    *uint64_t v37 = v53;
    *uint64_t v36 = v52 / v53;
    *(double *)(v8 + 16) = sqrt(*(double *)(v8 + 16));
    *BOOL v59 = sqrt(*v59 / *v37);
    if (*v56 > 1.0 && *v36 > 11.0)
    {
      double v54 = *v36 / *v56;
      *uint64_t v36 = v54;
      if (v54 < 10.0) {
        *uint64_t v36 = 10.0;
      }
    }
  }
LABEL_100:
  *(double *)(v8 + 24) = *v41;
  return v38;
}

uint64_t GN_ASBAS_Set_Eph_El(unsigned int a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!Is_GN_API_Set_Allowed("GN_ASBAS_Set_Eph_El")) {
    return 0;
  }
  if (a1 <= 0x77)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d <%d, Out of range!");
    return 0;
  }
  if (a1 >= 0x9F)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: SVid = %d >%d, Out of range!");
    return 0;
  }
  if (*a3 >> 3 >= 0x2A3u)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: to = %d >=5400, Out of range!");
    return 0;
  }
  unsigned int v6 = *((unsigned __int8 *)a3 + 2);
  if (v6 >= 0x10)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: URA = %d >15, Out of range!");
    return 0;
  }
  int v7 = *((_DWORD *)a3 + 1);
  if ((v7 - 2048) <= 0xFFFFEFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf0 = %d <-2^11 or >=2^11, Out of range!");
    return 0;
  }
  int v8 = *((_DWORD *)a3 + 2);
  if (v8 != (char)v8)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: agf1 = %d <-2^7 or >=2^7, Out of range!");
    return 0;
  }
  uint64_t v9 = 0;
  char v10 = 1;
  do
  {
    char v11 = v10;
    if ((*(_DWORD *)&a3[2 * v9 + 6] - 536870913) < 0xBFFFFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[%d] = %d <-2^29 or >=2^29, Out of range!");
      return 0;
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  int v12 = *((_DWORD *)a3 + 5);
  if ((v12 - 16777217) < 0xFDFFFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: pos[2] = %d <-2^24 or >=2^24, Out of range!");
    return 0;
  }
  uint64_t v15 = 0;
  char v16 = 1;
  do
  {
    char v17 = v16;
    if ((*(_DWORD *)&a3[2 * v15 + 12] - 65537) < 0xFFFDFFFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[%d] = %d <-2^16 or >=2^16, Out of range!");
      return 0;
    }
    char v16 = 0;
    uint64_t v15 = 1;
  }
  while ((v17 & 1) != 0);
  int v18 = *((_DWORD *)a3 + 8);
  if ((v18 - 131073) < 0xFFFBFFFF)
  {
    EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: vel[2] = %d <-2^17 or >=2^17, Out of range!");
    return 0;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    if ((*(_DWORD *)&a3[2 * i + 18] - 513) < 0xFFFFFBFF)
    {
      EvCrt_v("GN_ASBAS_Set_Eph_El: FAILED: acc[%d] = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
  }
  uint64_t v20 = *(void *)(p_api + 48);
  if (*(unsigned char *)(v20 + 5) && *(int *)v20 >= 3) {
    int v21 = (int)*(double *)(v20 + 24) + 604800 * *(__int16 *)(v20 + 16);
  }
  else {
    int v21 = 0;
  }
  __int16 v24 = *a3;
  char v25 = v6;
  int v26 = v7;
  int v27 = v8;
  uint64_t v28 = *(void *)(a3 + 6);
  int v29 = v12;
  uint64_t v30 = *((void *)a3 + 3);
  int v31 = v18;
  uint64_t v32 = *(void *)(a3 + 18);
  int v33 = *((_DWORD *)a3 + 11);
  if (*((unsigned char *)a3 + 48)) {
    int v22 = 5;
  }
  else {
    int v22 = 3;
  }
  v23[0] = v21;
  v23[1] = v22;
  uint64_t v13 = SBAS_Set_StateTable(a1, a2, v23);
  if (v13) {
    Debug_Log_SBA_Eph(1, a1, a2, (uint64_t)v23);
  }
  return v13;
}

size_t lsim01_01Init(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim01_01Init");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  unsigned __int16 v2 = gnssOsa_Calloc("lsim01_01Init", 87, 1, 0xCuLL);
  if (v2)
  {
    AgpsSendFsmMsg(131, 131, 8621056, v2);
    LODWORD(v2) = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, (int)v2);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim01_01Init");
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  return result;
}

size_t lsim01_02DeInit(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim01_02DeInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  unsigned __int16 v2 = gnssOsa_Calloc("lsim01_02DeInit", 107, 1, 0xCuLL);
  if (v2)
  {
    AgpsSendFsmMsg(131, 131, 8621312, v2);
    LODWORD(v2) = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, (int)v2);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim01_02DeInit");
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  return result;
}

void lsim01_05DestMissingHandler(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim01_05DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 > 8636162)
  {
    if (v4 > 8782594)
    {
      if (v4 > 8783106)
      {
        if (v4 != 8783107)
        {
          int v5 = 8783619;
LABEL_27:
          if (v4 != v5) {
            goto LABEL_28;
          }
          goto LABEL_42;
        }
      }
      else if (v4 != 8782595 && v4 != 8782851)
      {
        goto LABEL_28;
      }
      uint64_t v7 = *(void ***)(a1 + 16);
      if (v7[1])
      {
        free(v7[1]);
        uint64_t v7 = *(void ***)(a1 + 16);
      }
LABEL_32:
      free(v7);
LABEL_33:
      *(void *)(a1 + 16) = 0;
      return;
    }
    if (v4 == 8636163) {
      goto LABEL_34;
    }
    if (v4 == 8636419)
    {
      double v14 = *(void **)(a1 + 24);
      if (v14) {
        free(v14);
      }
      *(void *)(a1 + 24) = 0;
      uint64_t v15 = *(void **)(a1 + 32);
      if (v15) {
        free(v15);
      }
      *(void *)(a1 + 32) = 0;
LABEL_50:
      char v16 = *(void **)(a1 + 40);
      if (v16) {
        free(v16);
      }
      *(void *)(a1 + 40) = 0;
      return;
    }
    int v6 = 8782339;
    goto LABEL_19;
  }
  if (v4 <= 8622594)
  {
    if (v4 == 8586243) {
      goto LABEL_20;
    }
    if (v4 == 8586755)
    {
      int v12 = *(void **)(a1 + 16);
      if (v12) {
        free(v12);
      }
      *(void *)(a1 + 16) = 0;
      goto LABEL_42;
    }
    int v6 = 8621827;
LABEL_19:
    if (v4 != v6) {
      goto LABEL_28;
    }
LABEL_20:
    uint64_t v7 = *(void ***)(a1 + 16);
    if (!v7) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v4 <= 8625154)
  {
    if (v4 != 8622595)
    {
      int v5 = 8624643;
      goto LABEL_27;
    }
LABEL_42:
    uint64_t v13 = *(void **)(a1 + 24);
    if (v13) {
      free(v13);
    }
    *(void *)(a1 + 24) = 0;
    return;
  }
  if (v4 != 8625155)
  {
    if (v4 != 8630787)
    {
LABEL_28:
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim01_05DestMissingHandler", *(_DWORD *)(a1 + 4));
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
      }
      return;
    }
    goto LABEL_50;
  }
LABEL_34:
  char v10 = *(void **)(a1 + 24);
  if (v10) {
    free(v10);
  }
  *(void *)(a1 + 24) = 0;
  char v11 = *(void **)(a1 + 32);
  if (v11) {
    free(v11);
  }
  *(void *)(a1 + 32) = 0;
}

uint64_t lsim01_11InitReq()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim01_11InitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_INIT_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 77, "lsim01_11InitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 3, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim01_03InitRoutine");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  lsim12_00TimersInit();
  lsim11_01InitSessionMgmt();
  LOBYTE(g_LsimPltConfig) = 4;
  *(_DWORD *)((char *)&g_LsimPltConfig + 2) = 5242944;
  HIWORD(g_LsimPltConfig) = 64;
  LOBYTE(qword_26AE6D3FE) = 6;
  *(_DWORD *)((char *)&qword_26AE6D3FE + 2) = 36765729;
  HIWORD(qword_26AE6D3FE) = 33;
  g_SimInfoDB = 0;
  byte_26AE5322E = 0;
  unk_26AE5322F = -1;
  lsim05_31InitSupl();
  lsim15_21InitMobileInfo();
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim01_03InitRoutine");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim01_11InitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

uint64_t lsim01_12DeInitReq()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "LSM", 73, "lsim01_12DeInitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v1, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_DEINIT_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 77, "lsim01_12DeInitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 3, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim01_04DeInitRoutine");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  g_GnsCellInfoCallback = 0;
  if (qword_26AE6D3E8) {
    free((void *)qword_26AE6D3E8);
  }
  qword_26AE6D3E8 = 0;
  lsim04_02CloseOtherCpNiSessions(255, 0);
  g_GnsCpCallback = 0;
  g_GnsEcallCallback = 0;
  g_LsimEcallOngoing = 0;
  lsim05_32DeInitSupl();
  g_SimInfoCallback = 0;
  lsim12_04TimersDeinit();
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim01_04DeInitRoutine");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim01_12DeInitReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

uint64_t lsim01_13HandleCbInit(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim01_13HandleCbInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_CB_INIT_IND,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 77, "lsim01_13HandleCbInit", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 3, 1);
  }
  switch(*(_DWORD *)(a1 + 12))
  {
    case 1:
      lsim23_21EcallCbInit(*(void *)(a1 + 16));
      break;
    case 2:
      lsim04_05CpCbInit(*(void *)(a1 + 16));
      break;
    case 3:
      lsim05_45SuplCbInit(*(void *)(a1 + 16));
      break;
    case 4:
      lsim05_46PospCbInit(*(void *)(a1 + 16));
      break;
    case 5:
      lsim21_13PpduCbInit(*(void *)(a1 + 16));
      break;
    case 6:
      lsim09_41DcCbInit(*(void *)(a1 + 16));
      break;
    case 7:
      lsim22_03EaCbInit(*(void *)(a1 + 16));
      break;
    case 8:
      lsim25_01EeCbInit(*(void *)(a1 + 16));
      break;
    case 9:
      lsim17_04SiCbInit(*(void (**)(void))(a1 + 16));
      break;
    case 0xA:
      lsim15_23CiCbInit(*(void *)(a1 + 16));
      break;
    case 0xB:
      lsim07_02FtaCbInit(*(void *)(a1 + 16));
      break;
    case 0xC:
      lsim24_02SensCbInit(*(void *)(a1 + 16));
      break;
    case 0xD:
      lsim26_03XoCbInit(*(void *)(a1 + 16));
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 87, "lsim01_13HandleCbInit", 515, *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim01_13HandleCbInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

size_t G5K_Read_GNB_Meas(char **a1)
{
  uint64_t v2 = a1[1];
  unsigned __int16 v3 = a1[2];
  uint64_t v4 = *a1;
  if (*a1 != v3 && v4 == v2)
  {
    *a1 = v3;
    a1[1] = v3;
    uint64_t v2 = v3;
    uint64_t v4 = v3;
  }
  unint64_t v6 = 15 * (a1[3] - v3) + (15 * (a1[3] - v3) < 0 ? 0xFuLL : 0);
  unint64_t v7 = v6 >> 4;
  if (v4 >= v2) {
    uint64_t v2 = a1[3];
  }
  else {
    LOWORD(v2) = (_WORD)v2 - 1;
  }
  unsigned __int16 v8 = (_WORD)v2 - (_WORD)v4;
  unsigned int v9 = (unsigned __int16)(v6 >> 4);
  if (v9 < v8) {
    unsigned __int16 v8 = v6 >> 4;
  }
  size_t result = GncP02_16GetMEDataFrmBuf(v8, v4);
  char v11 = &(*a1)[result];
  *a1 = v11;
  if (v11 >= a1[3])
  {
    uint64_t v13 = a1[1];
    uint64_t v12 = a1[2];
    if (v13 != v12)
    {
      *a1 = v12;
      unsigned __int16 v14 = ~(_WORD)v12 + (_WORD)v13;
      if (v9 < v14) {
        unsigned __int16 v14 = v7;
      }
      size_t result = GncP02_16GetMEDataFrmBuf(v14, v12);
      uint64_t v15 = &(*a1)[result];
      *a1 = v15;
      if (v15 >= a1[3]) {
        *a1 = a1[2];
      }
    }
  }
  return result;
}

void G5K_ME_Decode_Meas(unsigned __int8 **a1, char *a2)
{
  uint64_t v321 = *MEMORY[0x263EF8340];
  unsigned __int16 v3 = (char *)*((void *)a2 + 48);
  uint64_t v4 = a1[1];
  if (v4 == *a1) {
    goto LABEL_358;
  }
  unint64_t v6 = a2 + 11172;
  int v308 = a2 + 428;
  unint64_t v7 = a2 + 11160;
  v316 = a2 + 403;
  unsigned __int16 v8 = a2 + 381;
  unsigned int v9 = a2 + 1;
  v312 = a2 + 3;
  v313 = a2 + 2;
  v317 = a2 + 402;
  double v311 = a2 + 704;
  unsigned int v299 = a2 + 3420;
  v309 = a2 + 540;
  v310 = a2 + 3392;
  v306 = a2 + 8144;
  unint64_t v307 = a2 + 11331;
  double v305 = a2 + 8136;
  unint64_t v304 = a2 + 8150;
  unsigned int v302 = a2 + 8140;
  v303 = a2 + 8128;
  unsigned int v300 = a2 + 6093;
  unsigned int v301 = a2 + 5137;
  int64x2_t v298 = vdupq_n_s64(0x40F5180000000000uLL);
  int64x2_t v297 = vdupq_n_s64(0x4122750000000000uLL);
  v315 = a2 + 11160;
  while (1)
  {
    int v12 = *v4;
    char v10 = v4 + 1;
    int v11 = v12;
    a1[1] = v10;
    if (v10 >= a1[3]) {
      a1[1] = a1[2];
    }
    if (v3 < a2 || v3 >= v8)
    {
      EvLog("ME_Dec: Rec Buff out of bounds");
      a2[392] = 0;
      unsigned __int16 v3 = a2;
    }
    if (v11 == 123 || v11 == 36)
    {
      a2[392] = 1;
      *a2 = v11;
      unsigned __int16 v3 = v9;
      goto LABEL_11;
    }
    if (!a2[392]) {
      goto LABEL_11;
    }
    *v3++ = v11;
    if (v11 != 10) {
      goto LABEL_11;
    }
    *unsigned __int16 v3 = 0;
    if (a2[392] && STEU_Checksum_OK(a2))
    {
      int v14 = 0;
      int v15 = 0;
      int v16 = 0;
      int v17 = 0;
      int v18 = 1;
      uint64_t v19 = 1;
      switch(*v9)
      {
        case 'A':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 7;
          goto LABEL_50;
        case 'B':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 12;
          goto LABEL_50;
        case 'C':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 8;
          goto LABEL_50;
        case 'D':
          goto LABEL_50;
        case 'E':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 16;
          goto LABEL_50;
        case 'F':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 6;
          goto LABEL_50;
        case 'G':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 5;
          goto LABEL_50;
        case 'H':
          int v22 = a2[406];
          if (a2[403] | v22)
          {
            uint64_t v23 = a2[405] - v22;
            unsigned __int16 v24 = *((_WORD *)a2 + 200) + v23;
            *((_WORD *)a2 + 200) = v24;
            unsigned __int16 v25 = *((_WORD *)a2 + 198) + 1;
            *((_WORD *)a2 + 198) = v25;
            EvLog_nd("ME_InComplete_Epoch_Check: Missed M & T", 3, v13, v23, v24, v25);
            *(_DWORD *)v316 = 0;
            bzero(v311, 0xA80uLL);
            for (uint64_t i = 0; i != 1728; i += 36)
            {
              int v27 = &v310[i];
              v27[32] = 0;
              *(_OWORD *)int v27 = 0uLL;
              *((_OWORD *)v27 + 1) = 0uLL;
            }
            for (uint64_t j = 0; j != 160; j += 20)
            {
              int v29 = &v309[j];
              *(void *)int v29 = 0;
              *((void *)v29 + 1) = 0;
              *(_DWORD *)(v29 + 15) = 0;
            }
            EvLog("ME_InComplete_Epoch_Check:  Flushing M");
          }
          int v18 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 4;
          int v14 = 1;
          goto LABEL_50;
        case 'I':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 21;
          goto LABEL_50;
        case 'J':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 17;
          goto LABEL_50;
        case 'K':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 11;
          goto LABEL_50;
        case 'L':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 20;
          goto LABEL_50;
        case 'M':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v17 = 0;
          uint64_t v19 = 2;
          int v16 = 1;
          goto LABEL_50;
        case 'N':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 10;
          goto LABEL_50;
        case 'O':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 14;
          goto LABEL_50;
        case 'R':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 15;
          goto LABEL_50;
        case 'S':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 9;
          goto LABEL_50;
        case 'T':
          int v18 = 0;
          int v14 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 3;
          int v15 = 1;
          goto LABEL_50;
        case 'W':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 13;
          goto LABEL_50;
        case 'Y':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          uint64_t v19 = 18;
          goto LABEL_50;
        case 'Z':
          int v18 = 0;
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          uint64_t v19 = 19;
          int v17 = 1;
LABEL_50:
          v30.i32[1] = 0;
          memset(v320, 0, sizeof(v320));
          int v31 = *a2;
          uint64_t v314 = v9;
          if (v31 != 123)
          {
            uint64_t v32 = "ME_Decode: Incorrect 1st ch";
            goto LABEL_54;
          }
          int v289 = v15;
          int v31 = *v9;
          if ((v31 - 123) <= 0xFFFFFFC5)
          {
            uint64_t v32 = "ME_Decode: Incorrect ID";
LABEL_54:
            EvLog_d(v32, v31);
            goto LABEL_55;
          }
          int v284 = v14;
          uint64_t v62 = v313;
          if (v18)
          {
            uint64_t v62 = v312;
            int v31 = *v313;
            if ((v31 - 91) <= 0xFFFFFFE5)
            {
              uint64_t v32 = "ME_Decode: Incorrect {D Debug ID ";
              goto LABEL_54;
            }
          }
          int v63 = *v62;
          if (v63 == 125)
          {
            uint64_t v32 = "ME_Decode: Incorrect start";
            int v31 = 125;
            goto LABEL_54;
          }
          int v276 = v16;
          int v273 = v17;
          int v279 = v18;
          __int16 v282 = v6;
          int v64 = 0;
          unsigned int v65 = 0;
          LODWORD(v319) = 0;
          double v66 = (unsigned __int8 *)(v62 + 1);
          break;
        default:
          EvLog_d("ME_Get_Msg_Type: Unknown message type: ", *v9);
          goto LABEL_56;
      }
      while (1)
      {
        if ((v63 - 112) <= 0xBFu)
        {
          EvLog_d("ME_Decode: Illegal ch", v63);
LABEL_145:
          unint64_t v6 = v282;
LABEL_146:
          unint64_t v7 = v315;
          goto LABEL_55;
        }
        *((unsigned char *)&v319 + v64) = v63 - 48;
        int v63 = *v66;
        if (v63 == 125)
        {
          if (v64 != 3)
          {
            uint64_t v67 = v19;
            gn_report_assertion_failure("ME_Decode: Input not N x 4 bytes");
            memset((char *)&v319 + v64 + 1, 32, (2 - v64) + 1);
            uint64_t v19 = v67;
          }
        }
        else if (v64 != 3)
        {
          ++v64;
          goto LABEL_126;
        }
        if (v65 >= 0x5D)
        {
          if (v279) {
            EvLog_v("ME_Decode: Longer {D - Debug messages. Received  %d  Max %d bytes");
          }
          else {
            EvLog_v("ME_Decode: Input longer than buffer. Received  %d  Max %d bytes");
          }
          goto LABEL_145;
        }
        int v64 = 0;
        char v68 = BYTE1(v319);
        uint64_t v69 = (char *)v320 + v65;
        *uint64_t v69 = (BYTE1(v319) >> 4) + 4 * LOBYTE(v319);
        char v70 = BYTE2(v319);
        v69[1] = (BYTE2(v319) >> 2) + 16 * v68;
        v69[2] = BYTE3(v319) + (v70 << 6);
        v65 += 3;
        int v63 = *v66;
LABEL_126:
        ++v66;
        if (v63 == 125)
        {
          int v71 = v19 - 1;
          signed int v72 = v65 - 15;
          int v73 = v284;
          if (v65 != 15) {
            int v73 = 0;
          }
          if (v73 == 1)
          {
            *(_WORD *)((char *)&v320[1] + 3) = 0;
            *(_DWORD *)((char *)v320 + 15) = 0;
            unsigned int v65 = 21;
            unint64_t v6 = v282;
            unint64_t v7 = v315;
            goto LABEL_131;
          }
          if (!v289)
          {
            unint64_t v6 = v282;
            unint64_t v7 = v315;
            int v75 = v279;
            goto LABEL_148;
          }
          unint64_t v6 = v282;
          unint64_t v7 = v315;
          int v75 = v279;
          if (v72 > 9 || ((0x249u >> v72) & 1) == 0) {
            goto LABEL_131;
          }
          int v76 = dword_22BB0E67C[v72];
          unsigned int v77 = dword_22BB0E6A4[v72];
          int v78 = v76 + G5K_CompMsgSize[(v19 - 1)];
          if (!v78 || (unsigned int v65 = v78 + v77, v78 + v77 > 0x60))
          {
            unsigned int v65 = v77;
            goto LABEL_131;
          }
          do
          {
            *((unsigned char *)v320 + v77++) = 0;
            --v78;
          }
          while (v78);
LABEL_148:
          if (v276)
          {
            switch(v65)
            {
              case '6':
                int v79 = -54;
                goto LABEL_160;
              case 'E':
                unsigned int v65 = 68;
                int v79 = -68;
                goto LABEL_160;
              case 'B':
                unsigned int v65 = 64;
                int v79 = -64;
LABEL_160:
                int v81 = v79 + G5K_CompMsgSize[(v19 - 1)];
                if (v81)
                {
                  unsigned int v82 = v81 + v65;
                  if (v81 + v65 <= 0x60)
                  {
                    do
                    {
                      *((unsigned char *)v320 + v65++) = 0;
                      --v81;
                    }
                    while (v81);
                    unsigned int v65 = v82;
                    goto LABEL_164;
                  }
                }
                break;
            }
LABEL_131:
            unsigned int v74 = G5K_CompMsgSize[v71];
            if (v65 != v74)
            {
              if (v65 < v74)
              {
                EvCrt_v("ME_Decode: ERROR: {%c too short, %d < %d ");
                goto LABEL_55;
              }
              EvCrt_v("ME_Decode: Warning: {%c too long, %d < %d ", G5K_CompMsgType[v71], v65, G5K_CompMsgSize[v71]);
            }
            if (v65)
            {
              switch(v71)
              {
                case 0:
                  goto LABEL_174;
                case 1:
                  uint64_t v80 = LOBYTE(v320[0]);
                  ++a2[406];
                  if (v80 >= 0x30)
                  {
                    EvCrt_v("ME_dec_M: Warning: Unsupported channel index %d >= %d");
                    goto LABEL_55;
                  }
                  *(void *)unsigned int v295 = v80;
                  int v178 = BYTE1(v320[0]) >> 4;
                  int v179 = BYTE1(v320[0]) & 0xF;
                  int v318 = 0;
                  int v180 = BYTE2(v320[0]);
                  int v181 = Decode_SVid_STE(BYTE2(v320[0]), v178, &v318);
                  int v183 = v318;
                  if (v179 == 15 && !v318 && !v181) {
                    goto LABEL_146;
                  }
                  if (!(v318 | v181))
                  {
                    EvLog_v("ME_dec_M: Not Supported: SVID %d Const %d Sig %d");
                    goto LABEL_146;
                  }
                  if (v318)
                  {
                    if (v179 == 15) {
                      goto LABEL_344;
                    }
                  }
                  else if (v179 != 15 || v181)
                  {
LABEL_344:
                    EvLog_v("ME_dec_M: Illegal STE SV:  ID %d  Const %d  Sig %d", v180, v178, v179);
                    double v235 = &a2[56 * v295[0]];
                    *((void *)v235 + 94) = 0;
                    *((_OWORD *)v235 + 45) = 0u;
                    *((_OWORD *)v235 + 46) = 0u;
                    *((_OWORD *)v235 + 44) = 0u;
                    long long v236 = &a2[36 * v295[0]];
                    v236[3424] = 0;
                    *((_OWORD *)v236 + 213) = 0u;
                    *((_OWORD *)v236 + 212) = 0u;
                    goto LABEL_355;
                  }
                  uint64_t v272 = *((void *)&xmmword_26AE66C28 + 1);
                  int v213 = &a2[36 * *(void *)v295];
                  __int16 v214 = v213 + 3392;
                  *(void *)(v213 + 3404) = 0;
                  *(void *)(v213 + 3396) = 0;
                  *(void *)(v213 + 3417) = 0;
                  uint64_t v215 = &a2[56 * v295[0]];
                  unsigned int v216 = v215 + 704;
                  *(void *)(v213 + 3412) = 0;
                  *((void *)v215 + 94) = 0;
                  *((_OWORD *)v215 + 45) = 0u;
                  *((_OWORD *)v215 + 46) = 0u;
                  *((_OWORD *)v215 + 44) = 0u;
                  v213[3392] = v183;
                  v213[3393] = v179;
                  if (v183 == 2) {
                    char v217 = 0;
                  }
                  else {
                    char v217 = v181;
                  }
                  if (v183 == 2) {
                    char v218 = v181;
                  }
                  else {
                    char v218 = 0;
                  }
                  v213[3394] = v217;
                  v213[3395] = v218;
                  int16x4_t v219 = (int16x4_t)vmovl_u8((uint8x8_t)*(unsigned int *)((char *)v320 + 3)).u64[0];
                  *(int16x4_t *)v182.i8 = vrev32_s16(v219);
                  v182.i32[0] = v219.i32[0];
                  *((_DWORD *)v213 + 849) = vmovn_s16(v182).u32[0];
                  *((_WORD *)v213 + 1700) = *(_WORD *)((char *)v320 + 7);
                  int v220 = HIBYTE(v320[0]);
                  int v221 = v320[1];
                  unsigned int v288 = DWORD1(v320[1]);
                  *((_WORD *)v213 + 1704) = WORD5(v320[1]);
                  unsigned int v222 = *(_DWORD *)((char *)v320 + 9);
                  int v223 = *(unsigned __int16 *)((char *)v320 + 13);
                  unsigned __int16 v281 = WORD4(v320[1]);
                  *((_WORD *)v213 + 1701) = HIWORD(v320[1]);
                  *((_DWORD *)v213 + 851) = v320[2];
                  *((_WORD *)v215 + 371) = WORD3(v320[2]);
                  v215[744] = BYTE8(v320[2]);
                  *(_DWORD *)(v215 + 738) = *(_DWORD *)((char *)&v320[2] + 9);
                  v215[745] = BYTE13(v320[2]);
                  unsigned int v224 = BYTE6(v320[3]);
                  v213[3414] = BYTE7(v320[3]);
                  *((_WORD *)v213 + 1706) = WORD4(v320[3]);
                  *((_DWORD *)v215 + 183) = *(_DWORD *)((char *)&v320[3] + 10);
                  *((_WORD *)v215 + 368) = HIWORD(v320[3]);
                  int v278 = v320[4];
                  v213[3415] = BYTE4(v320[4]);
                  *((_DWORD *)v213 + 854) = *(_DWORD *)((char *)&v320[4] + 5);
                  long long v225 = &v299[36 * *(void *)v295];
                  *(_DWORD *)long long v225 = *(_DWORD *)((char *)&v320[4] + 9);
                  v225[4] = BYTE13(v320[4]);
                  unsigned int v226 = v223 | (v220 << 16);
                  v213[3410] = v224 >> 4;
                  v213[3411] = v224 & 0xF;
                  double v319 = 0.0;
                  if (!(v222 | v226))
                  {
                    *unsigned int v216 = 0;
                    *(_WORD *)&a2[56 * v295[0] + 712] = 0;
LABEL_353:
                    uint64_t v246 = &a2[56 * v295[0]];
                    *((_DWORD *)v246 + 179) = (int)((double)(v221 / 256) * 5.25503547);
                    *((_DWORD *)v246 + 180) = (int)((double)(v278 / 256) * 5.25503547);
                    double v247 = (double)v288 * 5.25503547 + (double)v281 * 0.0000152587891 * 5.25503547;
                    int v248 = (int)v247 + ((int)v247 >> 31);
                    *((_DWORD *)v246 + 182) = v248;
                    *((_WORD *)v246 + 362) = vcvtd_n_s64_f64(v247 - (double)v248, 0x10uLL);
                    goto LABEL_355;
                  }
                  double v227 = (double)v222 * 0.001 + (double)v226 * 0.0000000596046448 * 0.001;
                  long long v228 = (double *)&a2[56 * v295[0] + 752];
                  double v275 = v227;
                  *long long v228 = v227;
                  if (v183 == 2)
                  {
                    char UTC_Cor = API_Get_UTC_Cor(1, &v319);
                    if (v319 <= 0.0) {
                      double v230 = -0.5;
                    }
                    else {
                      double v230 = 0.5;
                    }
                    int v231 = (int)(v319 + v230);
                    if (v319 + v230 < -2147483650.0) {
                      int v231 = 0x80000000;
                    }
                    if (v319 + v230 > 2147483650.0) {
                      int v231 = 0x7FFFFFFF;
                    }
                    char *v315 = UTC_Cor;
                    double v319 = (double)v231;
                    v315[1] = v231;
                    v232.f64[0] = *v228;
                    v232.f64[1] = v275 + -10800.0 + (double)v231;
                    float64x2_t v233 = vaddq_f64(v232, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v272 + 8 * v214[3] + 1208) * 0.00000000333564095), 0));
                    float64x2_t v234 = (float64x2_t)v298;
                  }
                  else
                  {
                    if (v183 != 4) {
                      goto LABEL_349;
                    }
                    v237.f64[0] = (double)v222 * 0.001 + (double)v226 * 0.0000000596046448 * 0.001;
                    v237.f64[1] = v227 + 14.0;
                    float64x2_t v233 = vaddq_f64(v237, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v272 + 1264) * 0.00000000333564095), 0));
                    float64x2_t v234 = (float64x2_t)v297;
                  }
                  float64x2_t v238 = vmlsq_f64(v233, v234, vrndmq_f64(vdivq_f64(v233, v234)));
                  *long long v228 = v238.f64[0];
                  double v275 = v238.f64[1];
LABEL_349:
                  uint64_t v239 = (int)(v275 * 0.666666667);
                  *(_DWORD *)unsigned int v216 = v239;
                  double v240 = v275 + (double)(int)v239 * -1.5;
                  uint64_t v241 = (int)(v240 * 1000.0);
                  double v242 = v240 + (double)v241 * -0.001;
                  uint64_t v243 = (int)(v242 * 1023000.0);
                  unsigned __int8 v244 = &a2[56 * v295[0]];
                  double v245 = (v242 + (double)v243 * -0.000000977517107) * 1023000.0 * 10000.0;
                  *((_DWORD *)v244 + 177) = v243 - v241 + (v241 << 10);
                  *((_WORD *)v244 + 356) = (109951163 * (unint64_t)((int)v245 << 12)) >> 36;
                  if ((int)v239 <= 403199
                    && v241 <= 0x5DB
                    && v243 <= 0x3FE
                    && (int)v245 >> 4 < 0x271)
                  {
                    goto LABEL_353;
                  }
                  EvLog_nd("ME_dec_M: Code TOT out of range ", 4, v13, v239, v241, v243, (int)v245);
LABEL_355:
                  unint64_t v6 = v282;
                  break;
                case 2:
                  int v106 = v320[0];
                  int v107 = DWORD1(v320[0]);
                  *((_DWORD *)a2 + 112) = v320[0];
                  *((_DWORD *)a2 + 113) = v107;
                  *((_DWORD *)a2 + 114) = WORD4(v320[0]);
                  *((_DWORD *)a2 + 115) = 8 * *(_DWORD *)((char *)v320 + 10);
                  char v108 = BYTE14(v320[0]);
                  if (BYTE14(v320[0]) > 5u) {
                    char v108 = -1;
                  }
                  a2[464] = v108;
                  unsigned __int16 v283 = *(_WORD *)((char *)v320 + 15);
                  char v280 = BYTE1(v320[1]);
                  __int16 v277 = WORD1(v320[1]);
                  char v291 = BYTE4(v320[1]);
                  int v286 = SBYTE5(v320[1]);
                  __int16 v274 = WORD3(v320[1]);
                  __int16 v270 = WORD5(v320[1]);
                  __int16 v271 = WORD4(v320[1]);
                  __int16 v268 = HIWORD(v320[1]);
                  __int16 v269 = WORD6(v320[1]);
                  __int16 v266 = WORD1(v320[2]);
                  __int16 v267 = v320[2];
                  int v264 = BYTE6(v320[2]);
                  __int16 v265 = WORD2(v320[2]);
                  int v262 = BYTE8(v320[2]);
                  int v263 = BYTE7(v320[2]);
                  int v259 = BYTE9(v320[2]);
                  __int16 v261 = WORD6(v320[2]);
                  int v251 = BYTE14(v320[2]);
                  int v250 = HIBYTE(v320[2]);
                  int v249 = LOBYTE(v320[3]);
                  int v109 = BYTE1(v320[3]);
                  int v110 = BYTE2(v320[3]);
                  int v111 = BYTE3(v320[3]);
                  __int16 v260 = WORD2(v320[3]);
                  char v258 = BYTE6(v320[3]);
                  __int16 v256 = *(_WORD *)((char *)&v320[3] + 7);
                  int v257 = BYTE10(v320[2]);
                  int v254 = BYTE11(v320[2]);
                  __int16 v255 = *(_WORD *)((char *)&v320[3] + 9);
                  __int16 v252 = *(_WORD *)((char *)&v320[3] + 13);
                  __int16 v253 = *(_WORD *)((char *)&v320[3] + 11);
                  if (!a2[403]
                    || v106 != *((_DWORD *)a2 + 128)
                    || (LODWORD(v112) = *((_DWORD *)a2 + 129), !v112))
                  {
                    unint64_t v112 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  }
                  *((_DWORD *)a2 + 117) = v112;
                  *((_DWORD *)a2 + 124) = 0;
                  a2[500] = 0;
                  a2[402] = 1;
                  unsigned int v113 = a2[464];
                  if (v113 != 255 && !a2[465])
                  {
                    API_Set_Inter_Chan_Bias_Model(*((_WORD *)a2 + 236), v113);
                    a2[465] = 1;
                  }
                  double v114 = *(double **)(p_api + 72);
                  v114[10] = (double)v280;
                  v114[11] = (double)v274 * 0.00390625;
                  v114[12] = (double)v271 * 0.00390625;
                  v114[13] = (double)v270 * 0.00390625;
                  v114[14] = (double)v269 * 0.00390625;
                  v114[15] = (double)v277 * 0.00390625;
                  v114[16] = (double)v268 * 0.00390625;
                  v114[17] = (double)v267 * 0.00390625;
                  v114[18] = (double)v266 * 0.00390625;
                  v114[19] = (double)v265 * 0.00390625;
                  v114[20] = (double)(((v264 << 8) | (v263 << 16) | (v262 << 24)) >> 8) * 0.125;
                  v114[21] = (double)(((v259 << 8) | (v257 << 16) | (v254 << 24)) >> 8) * 0.125;
                  v114[22] = (double)v261 * 0.125;
                  v114[23] = (double)(((v251 << 8) | (v250 << 16) | (v249 << 24)) >> 8) * 0.125;
                  v114[24] = (double)(((v109 << 8) | (v110 << 16) | (v111 << 24)) >> 8) * 0.125;
                  API_Set_TSX_ClkCorr_Params((double)v260 * 0.125, (double)v258 * 0.125, v283);
                  uint64_t v115 = *(void *)(p_api + 72);
                  *(double *)(v115 + 200) = (double)v256 * 0.125;
                  *(double *)(v115 + 208) = (double)v255 * 0.125;
                  *(double *)(v115 + 216) = (double)v253 * 0.125;
                  *(double *)(v115 + 224) = (double)v252 * 0.125;
                  char v116 = v291;
                  if (v286 <= 0) {
                    char v116 = 0;
                  }
                  *(unsigned char *)(v115 + 250) = v116;
                  *(unsigned char *)(v115 + 251) = v286 & ~(v286 >> 31);
                  goto LABEL_146;
                case 3:
                  a2[405] = v320[0];
                  int v117 = *(_DWORD *)((char *)v320 + 1);
                  *((_DWORD *)a2 + 128) = *(_DWORD *)((char *)v320 + 1);
                  *((_WORD *)a2 + 260) = *(_WORD *)((char *)v320 + 5);
                  *((_WORD *)a2 + 262) = *(_WORD *)((char *)v320 + 7);
                  a2[526] = BYTE9(v320[0]);
                  *((_WORD *)a2 + 261) = WORD5(v320[0]);
                  *(_WORD *)(a2 + 527) = WORD6(v320[0]);
                  v30.i32[0] = *(_DWORD *)((char *)v320 + 14);
                  *(_DWORD *)(v316 + 126) = vrshrn_n_s16((int16x8_t)vmovl_u8(v30), 4uLL).u32[0];
                  int v118 = g_GncPMeData;
                  *((_DWORD *)a2 + 129) = g_GncPMeData;
                  if (!v118)
                  {
                    *((_DWORD *)a2 + 129) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                             * (double)mach_continuous_time());
                    int v117 = *((_DWORD *)a2 + 128);
                  }
                  int TM_FSP_OS_Time_ms_for_TTick = API_Get_TM_FSP_OS_Time_ms_for_TTick(v117);
                  int v120 = *((_DWORD *)a2 + 129);
                  if (TM_FSP_OS_Time_ms_for_TTick)
                  {
                    int v121 = TM_FSP_OS_Time_ms_for_TTick;
                    unsigned int v122 = TM_FSP_OS_Time_ms_for_TTick - v120 >= 0
                         ? TM_FSP_OS_Time_ms_for_TTick - v120
                         : v120 - TM_FSP_OS_Time_ms_for_TTick;
                    if (v122 >> 3 <= 0x270)
                    {
                      EvLog_v("TM_FSP: Replacing %u with %u delta %d", v120, TM_FSP_OS_Time_ms_for_TTick, TM_FSP_OS_Time_ms_for_TTick - v120);
                      *((_DWORD *)a2 + 129) = v121;
                      int v120 = v121;
                    }
                  }
                  a2[403] = 1;
                  *((_DWORD *)a2 + 2791) = v120;
                  goto LABEL_146;
                case 4:
                  uint64_t v123 = 0;
                  uint64_t v124 = (int *)v302;
                  while (1)
                  {
                    uint64_t v125 = &a2[56 * v123 + 8180];
                    if (!*v125) {
                      break;
                    }
                    ++v123;
                    v124 += 14;
                    if (v123 == 48)
                    {
                      uint64_t v126 = "G5K_ME_dec_G: No empty slots!";
                      goto LABEL_229;
                    }
                  }
                  LODWORD(v319) = 0;
                  int v292 = v320[0] & 0xF;
                  char v149 = Decode_SVid_STE(BYTE1(v320[0]), LOBYTE(v320[0]) >> 4, (int *)&v319);
                  if ((LODWORD(v319) & 0xFFFFFFFB) != 1)
                  {
                    EvLog_v("ME_dec_G: Illegal GPS/QZSS STE SV:  ID %d  Const %d  Sig %d");
                    goto LABEL_146;
                  }
                  int v150 = &a2[56 * v123 + 8128];
                  *int v150 = LOBYTE(v319);
                  int v151 = v292;
                  v150[1] = v292;
                  v150[2] = v149;
                  v150[3] = 0;
                  if (v292)
                  {
                    uint64_t v152 = "ME_dec_G: Illegal GPS/QZSS Signal ";
                    goto LABEL_325;
                  }
                  uint64_t v207 = 0;
                  char v208 = 0;
                  uint64_t v209 = &a2[56 * v123];
                  uint64_t v210 = v209 + 8132;
                  v209[8133] = v149;
                  unsigned int v211 = WORD2(v320[0]);
                  *((_WORD *)v209 + 4068) = WORD2(v320[0]);
                  int v212 = (unsigned __int16 *)v320 + 3;
                  do
                  {
                    *v124++ = *v212 | (*((unsigned __int8 *)v212 + 2) << 16);
                    v208 += ((v211 >> v207++) & 1) == 0;
                    int v212 = (unsigned __int16 *)((char *)v212 + 3);
                  }
                  while (v207 != 10);
                  v210[2] = v208;
                  *uint64_t v210 = 1;
                  ++a2[410];
                  *uint64_t v125 = 1;
                  goto LABEL_323;
                case 5:
                  uint64_t v127 = 48;
                  int v128 = v303;
                  while (v128[52])
                  {
                    v128 += 56;
                    if (!--v127)
                    {
                      uint64_t v206 = "ME_dec_F: No empty slots!";
                      goto LABEL_306;
                    }
                  }
                  LODWORD(v319) = 0;
                  char v153 = v320[0] & 0xF;
                  char v154 = Decode_SVid_STE(BYTE1(v320[0]), LOBYTE(v320[0]) >> 4, (int *)&v319);
                  if (LODWORD(v319) == 2)
                  {
                    *int v128 = 2;
                    v128[1] = v153;
                    v128[2] = 0;
                    v128[3] = v154;
                    v128[5] = v154;
                    BOOL v51 = BYTE2(v320[0]) == 0;
                    v128[6] = BYTE2(v320[0]) != 0;
                    char v155 = BYTE3(v320[0]);
                    if (v51) {
                      char v155 = -1;
                    }
                    v128[7] = v155;
                    *((void *)v128 + 1) = *(void *)((char *)v320 + 5);
                    *((_DWORD *)v128 + 4) = *(_DWORD *)((char *)v320 + 13);
                    v128[4] = 1;
                    ++a2[414];
                    v128[52] = 1;
                  }
                  else
                  {
                    EvLog_v("ME_dec_F: Illegal F STE SV:  ID %d  Const %d  Sig %d");
                  }
                  goto LABEL_146;
                case 6:
                  uint64_t v129 = 0;
                  uint64_t v130 = v304;
                  unsigned int v131 = v305;
                  while (a2[56 * v129 + 8180])
                  {
                    ++v129;
                    v131 += 56;
                    v130 += 56;
                    if (v129 == 48)
                    {
                      uint64_t v126 = "ME_dec_A: No empty slots!";
                      goto LABEL_229;
                    }
                  }
                  LODWORD(v319) = 0;
                  int v293 = v320[0] & 0xF;
                  char v156 = Decode_SVid_STE(BYTE1(v320[0]), LOBYTE(v320[0]) >> 4, (int *)&v319);
                  if (LODWORD(v319) != 3)
                  {
                    EvLog_v("G5K_ME_dec_A: Illegal GAL STE SV:  ID %d  Const %d  Sig %d");
                    goto LABEL_146;
                  }
                  unsigned int v157 = &a2[56 * v129 + 8128];
                  *unsigned int v157 = 3;
                  int v151 = v293;
                  v157[1] = v293;
                  v157[2] = v156;
                  v157[3] = 0;
                  if ((v293 | 2) != 0xA)
                  {
                    uint64_t v152 = "ME_dec_A: Illegal GAL Signal ";
LABEL_325:
                    EvLog_d(v152, v151);
                    goto LABEL_146;
                  }
                  uint64_t v158 = 0;
                  unsigned __int16 v159 = &a2[56 * v129];
                  uint64_t v160 = v159 + 8132;
                  v159 += 8128;
                  v159[5] = v156;
                  v159[7] = BYTE2(v320[0]);
                  v159[6] = BYTE3(v320[0]) != 0;
                  do
                  {
                    *(_WORD *)unsigned int v131 = *(_WORD *)((char *)v320 + v158 + 4);
                    v131 += 2;
                    v158 += 2;
                  }
                  while (v158 != 14);
                  for (uint64_t k = 0; k != 14; k += 2)
                  {
                    *(_WORD *)uint64_t v130 = *(_WORD *)((char *)&v320[1] + k + 2);
                    v130 += 2;
                  }
                  *uint64_t v160 = 1;
                  ++a2[418];
                  a2[56 * v129 + 8180] = 1;
LABEL_323:
                  unint64_t v6 = v282;
                  unint64_t v7 = v315;
                  goto LABEL_55;
                case 7:
                  uint64_t v132 = 0;
                  uint64_t v133 = (int *)v306;
                  do
                  {
                    uint64_t v134 = &a2[56 * v132 + 8180];
                    if (!*v134)
                    {
                      LODWORD(v319) = 0;
                      char v294 = v320[0] & 0xF;
                      char v162 = Decode_SVid_STE(BYTE1(v320[0]), LOBYTE(v320[0]) >> 4, (int *)&v319);
                      if (LODWORD(v319) == 4)
                      {
                        int v163 = &a2[56 * v132];
                        v163[8128] = 4;
                        v163[8129] = v294;
                        v163[8130] = v162;
                        v163[8131] = 0;
                        unsigned int v164 = v163 + 8132;
                        v163[8133] = v162;
                        char v165 = BYTE4(v320[0]);
                        unsigned int v166 = BYTE4(v320[0]) | (BYTE5(v320[0]) << 8);
                        *((_WORD *)v163 + 4068) = BYTE4(v320[0]) | (BYTE5(v320[0]) << 8);
                        *((_DWORD *)v163 + 2035) = *(_DWORD *)((char *)v320 + 6);
                        char v167 = (v165 & 1) == 0;
                        uint64_t v168 = -9;
                        int64x2_t v169 = (unsigned __int16 *)v320 + 5;
                        do
                        {
                          *v133++ = *v169 | (*((unsigned __int8 *)v169 + 2) << 16);
                          v167 += ((v166 >> (v168 + 10)) & 1) == 0;
                          int64x2_t v169 = (unsigned __int16 *)((char *)v169 + 3);
                        }
                        while (!__CFADD__(v168++, 1));
                        v164[2] = v167;
                        *unsigned int v164 = 1;
                        ++a2[422];
                        *uint64_t v134 = 1;
                      }
                      else
                      {
                        EvLog_v("ME_dec_C: Illegal BDS STE SV:  ID %d  Const %d  Sig %d");
                      }
                      goto LABEL_146;
                    }
                    ++v132;
                    v133 += 14;
                  }
                  while (v132 != 48);
                  uint64_t v126 = "ME_dec_C: No empty slots!";
LABEL_229:
                  EvLog(v126);
                  goto LABEL_146;
                case 8:
                  goto LABEL_55;
                case 9:
                  int v135 = *(_DWORD *)((char *)v320 + 2);
                  if ((v320[0] & 0xD0) == 0x10)
                  {
                    if ((v320[0] & 0xF) == 0)
                    {
                      a2[409] = BYTE1(v320[0]);
                      *((_DWORD *)a2 + 2704) = v135;
                      a2[408] = 1;
                    }
                  }
                  else
                  {
                    int v184 = LOBYTE(v320[0]) >> 4;
                    switch(v184)
                    {
                      case 2:
                        break;
                      case 4:
                        a2[413] = BYTE1(v320[0]);
                        *((_DWORD *)a2 + 2705) = v135;
                        a2[412] = 1;
                        break;
                      case 5:
                        a2[417] = BYTE1(v320[0]);
                        *((_DWORD *)a2 + 2706) = v135;
                        a2[416] = 1;
                        break;
                      case 6:
                        a2[421] = BYTE1(v320[0]);
                        *((_DWORD *)a2 + 2707) = v135;
                        a2[420] = 1;
                        break;
                      default:
                        EvLog_d("ME_dec_N: Illegal Constell ", v184);
                        break;
                    }
                  }
                  a2[407] = 1;
                  goto LABEL_55;
                case 10:
                  uint64_t v136 = 0;
                  while (1)
                  {
                    int v137 = &a2[v136];
                    if (!a2[v136 + 558]) {
                      break;
                    }
                    v136 += 20;
                    if (v136 == 160)
                    {
                      uint64_t v206 = "ME_dec_K: No free slots!";
                      goto LABEL_306;
                    }
                  }
                  LODWORD(v319) = 0;
                  v137[540] = v320[0];
                  char v171 = BYTE1(v320[0]) & 0xF;
                  char v172 = Decode_SVid_STE(BYTE2(v320[0]), BYTE1(v320[0]) >> 4, (int *)&v319);
                  int v173 = LODWORD(v319);
                  if (LODWORD(v319))
                  {
                    uint64_t v174 = &a2[v136];
                    v174[544] = LOBYTE(v319);
                    v174[545] = v171;
                    BOOL v175 = v173 == 2;
                    if (v173 == 2) {
                      char v176 = 0;
                    }
                    else {
                      char v176 = v172;
                    }
                    if (v175) {
                      char v177 = v172;
                    }
                    else {
                      char v177 = 0;
                    }
                    v174[546] = v176;
                    v174[547] = v177;
                    *((_DWORD *)v174 + 137) = *(_DWORD *)((char *)v320 + 3);
                    v174[556] = BYTE7(v320[0]);
                    *((_DWORD *)v174 + 138) = DWORD2(v320[0]);
                    v174[557] = BYTE12(v320[0]);
                    v137[558] = 1;
                    a2[404] = 1;
                  }
                  else
                  {
                    EvLog_v("ME_dec_K: Illegal STE SV:  ID %d  Const %d  Sig %d");
                  }
                  goto LABEL_145;
                case 11:
                  *((_WORD *)a2 + 241) = v320[0];
                  *((_WORD *)a2 + 236) = WORD1(v320[0]);
                  *((void *)v308 + 7) = *(void *)((char *)v320 + 4);
                  *((_WORD *)a2 + 246) = WORD6(v320[0]);
                  a2[494] = BYTE14(v320[0]);
                  *((_DWORD *)a2 + 119) = *(_DWORD *)((char *)v320 + 15);
                  *((_WORD *)a2 + 240) = *(_WORD *)((char *)&v320[1] + 3);
                  ++a2[500];
                  *((_DWORD *)a2 + 124) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                           * (double)mach_continuous_time());
                  goto LABEL_55;
                case 12:
                  *((_DWORD *)a2 + 109) = v320[0];
                  a2[440] = BYTE4(v320[0]);
                  *((_DWORD *)a2 + 111) = *(_DWORD *)((char *)v320 + 5);
                  goto LABEL_55;
                case 13:
                  *(void *)int v308 = *(void *)&v320[0];
                  a2[424] = 1;
                  goto LABEL_55;
                case 14:
                  uint64_t v206 = "ME_dec_R: {R not supported";
                  goto LABEL_306;
                case 15:
                  uint64_t v206 = "ME_dec_E:  {E not supported";
                  goto LABEL_306;
                case 16:
                  *(_DWORD *)unint64_t v6 = v320[0];
                  int v6[4] = BYTE4(v320[0]);
                  v6[5] = 1;
                  goto LABEL_55;
                case 17:
                  *((_WORD *)v6 + 4) = v320[0];
                  *(_DWORD *)(v6 + 10) = *(_DWORD *)((char *)v320 + 2);
                  *(_OWORD *)(v6 + 14) = *(_OWORD *)((char *)v320 + 6);
                  *(_OWORD *)(v6 + 30) = *(_OWORD *)((char *)&v320[1] + 6);
                  *(void *)(v6 + 46) = *(void *)((char *)&v320[2] + 6);
                  *((_WORD *)v6 + 27) = HIWORD(v320[2]);
                  *((_DWORD *)v6 + 14) = v320[3];
                  *((_WORD *)v6 + 30) = WORD2(v320[3]);
                  *(void *)(v6 + 62) = *(void *)((char *)&v320[3] + 6);
                  *((_DWORD *)a2 + 2811) = *(_DWORD *)((char *)&v320[3] + 14);
                  v6[76] = 1;
                  goto LABEL_55;
                case 18:
                  *((_WORD *)v6 + 40) = v320[0];
                  *(_DWORD *)(v6 + 82) = *(_DWORD *)((char *)v320 + 2);
                  v6[86] = BYTE6(v320[0]);
                  *((_WORD *)v6 + 44) = *(_WORD *)((char *)v320 + 7);
                  v6[90] = BYTE9(v320[0]);
                  v6[91] = 1;
                  goto LABEL_55;
                case 19:
                  *((_WORD *)v6 + 46) = v320[0];
                  *(void *)(v6 + 94) = *(void *)((char *)v320 + 2);
                  *(_DWORD *)(v6 + 102) = *(_DWORD *)((char *)v320 + 10);
                  v6[106] = 1;
                  goto LABEL_55;
                case 20:
                  *((void *)a2 + 1410) = *(void *)&v320[0];
                  *((_WORD *)v6 + 58) = WORD4(v320[0]);
                  *(_DWORD *)(v6 + 118) = *(_DWORD *)((char *)v320 + 10);
                  HIDWORD(v138) = *(_DWORD *)((char *)&v320[1] + 2);
                  LODWORD(v138) = *(_DWORD *)((char *)&v320[1] + 2);
                  *(_DWORD *)(v6 + 122) = *(_DWORD *)((char *)v320 + 14);
                  *(_DWORD *)(v6 + 126) = v138 >> 16;
                  *(_DWORD *)(v6 + 130) = *(_DWORD *)((char *)&v320[1] + 6);
                  int v139 = v307;
                  for (uint64_t m = 26; m != 92; m += 22)
                  {
                    unsigned __int8 v141 = *((unsigned char *)v320 + m + 4);
                    __int16 v142 = *(_WORD *)((char *)v320 + m + 5);
                    __int16 v143 = *(_WORD *)((char *)v320 + m + 11);
                    char v144 = *((unsigned char *)v320 + m + 13);
                    __int16 v145 = *(_WORD *)((char *)v320 + m + 14);
                    __int16 v146 = *(_WORD *)((char *)&v320[1] + m);
                    char v147 = *((unsigned char *)&v320[1] + m + 2);
                    __int16 v148 = *(_WORD *)((char *)&v320[1] + m + 3);
                    uint64_t v13 = *((unsigned __int8 *)&v320[1] + m + 5);
                    *(_DWORD *)(v139 - 23) = *(_DWORD *)((char *)v320 + m);
                    *(_WORD *)(v139 - 19) = v141;
                    *(_WORD *)(v139 - 17) = v142;
                    *(_DWORD *)(v139 - 15) = *(_DWORD *)((char *)v320 + m + 7);
                    *(_WORD *)(v139 - 11) = v143;
                    *(_WORD *)(v139 - 9) = v146;
                    *(v139 - 7) = v147;
                    *(v139 - 6) = v144;
                    *(_WORD *)(v139 - 5) = v145;
                    *(_WORD *)(v139 - 3) = v148;
                    *(_WORD *)(v139 - 1) = v13;
                    v139 += 24;
                  }
                  v6[208] = 1;
                  goto LABEL_55;
                default:
                  double v104 = "G5K_ME_Unpack";
                  unsigned int v105 = 1158;
                  goto LABEL_305;
              }
              goto LABEL_146;
            }
          }
          else
          {
LABEL_164:
            if (v273)
            {
              if (v65 == 6)
              {
                if (v19 == 1) {
                  unsigned int v83 = 0;
                }
                else {
                  unsigned int v83 = G5K_CompMsgSize[(v19 - 1)] - 4;
                }
                unsigned int v65 = 4;
              }
              else
              {
                unsigned int v83 = 0;
              }
              if (v83 + v65 <= 0x60) {
                bzero((char *)v320 + v65, v83);
              }
              goto LABEL_131;
            }
            if (!v75) {
              goto LABEL_131;
            }
            if (v65 >= 0xB)
            {
              if (-1431655765 * v65 <= 0x55555555)
              {
LABEL_174:
                int v84 = *v313;
                if (v84 == 66)
                {
                  int v185 = 0;
                  uint64_t v186 = (unsigned __int8 *)v320;
                  do
                  {
                    unsigned int v187 = *v186;
                    unsigned int v188 = v187 >> 4;
                    uint64_t v189 = v186[1];
                    LODWORD(v319) = 0;
                    int v287 = v189;
                    int v296 = v187 & 0xF;
                    char v190 = Decode_SVid_STE(v189, v187 >> 4, (int *)&v319);
                    if (LODWORD(v319))
                    {
                      if (LODWORD(v319) == 2) {
                        char v191 = 0;
                      }
                      else {
                        char v191 = v190;
                      }
                      if (LODWORD(v319) == 2) {
                        char v192 = v190;
                      }
                      else {
                        char v192 = 0;
                      }
                      int v193 = *((__int16 *)v186 + 1);
                      unsigned __int8 v194 = v186[4];
                      unsigned int v195 = v186[5];
                      char v196 = v195 & 0x3F;
                      unsigned int v197 = v195 >> 6;
                      __int16 v198 = *((_WORD *)v186 + 3);
                      unsigned int v199 = v186[9];
                      __int16 v200 = v186[8] | ((v199 & 0x1F) << 8);
                      unsigned int v201 = v199 >> 6;
                      LOWORD(v199) = v186[10];
                      unsigned int v202 = v186[11];
                      v186 += 12;
                      __int16 v203 = v199 & 0xF8FF | ((v202 & 7) << 8);
                      uint64_t v13 = v202 >> 3;
                      uint64_t v204 = v301;
                      uint64_t v205 = 48;
                      unint64_t v7 = v315;
                      while (*v204)
                      {
                        v204 += 20;
                        if (!--v205)
                        {
                          uint64_t v206 = "G5K_ME_dec_Dbg_B: No more empty slots to store Search Channel Top Candidates Info!";
LABEL_306:
                          EvLog(v206);
                          goto LABEL_55;
                        }
                      }
                      *(v204 - 17) = LOBYTE(v319);
                      *(v204 - 16) = v296;
                      *(v204 - 15) = v191;
                      *(v204 - 14) = v192;
                      *(_WORD *)(v204 - 13) = v193 & 0xFFF;
                      *(v204 - 11) = v194;
                      *(v204 - 10) = v196;
                      *(v204 - 9) = v197;
                      *(v204 - 8) = v201;
                      *(_WORD *)(v204 - 7) = v200;
                      *(_WORD *)(v204 - 5) = v198;
                      *(_WORD *)(v204 - 3) = v203;
                      *(v204 - 1) = v13;
                      *uint64_t v204 = 1;
                      if (v193 < 0) {
                        break;
                      }
                    }
                    else
                    {
                      v186 += 2;
                      EvLog_v("G5K_ME_dec_Dbg_B: Illegal STE SV:  ID %d  Const %d  Sig %d", v287, v188, v296);
                      unint64_t v7 = v315;
                    }
                    ++v185;
                  }
                  while (v185 != 20);
                }
                else
                {
                  if (v84 == 67)
                  {
                    int v85 = 0;
                    int v86 = (unsigned __int8 *)v320;
                    while (1)
                    {
                      unsigned int v87 = *v86;
                      unsigned int v88 = v87 >> 4;
                      uint64_t v89 = v86[1];
                      LODWORD(v319) = 0;
                      int v285 = v89;
                      int v290 = v87 & 0xF;
                      char v90 = Decode_SVid_STE(v89, v87 >> 4, (int *)&v319);
                      if (LODWORD(v319))
                      {
                        if (LODWORD(v319) == 2) {
                          char v91 = 0;
                        }
                        else {
                          char v91 = v90;
                        }
                        if (LODWORD(v319) == 2) {
                          char v92 = v90;
                        }
                        else {
                          char v92 = 0;
                        }
                        unsigned __int8 v93 = v86[2];
                        int v94 = v86[3];
                        int v95 = (v94 << 16) | (v86[4] << 24);
                        int v96 = (v86[5] << 16) & 0xF80000 | (v86[6] << 24);
                        unsigned int v97 = v86[8];
                        __int16 v98 = v86[7] | ((v97 & 7) << 8);
                        unsigned int v99 = v97 >> 3;
                        double v100 = v86 + 10;
                        unsigned __int8 v101 = v86[9];
                        double v102 = v300;
                        uint64_t v103 = 128;
                        unint64_t v7 = v315;
                        while (1)
                        {
                          uint64_t v13 = *v102;
                          if (!*v102) {
                            break;
                          }
                          v102 += 16;
                          if (!--v103)
                          {
                            uint64_t v206 = "G5K_ME_dec_Dbg_C: No more empty slots to store Searched CH SV Info!";
                            goto LABEL_306;
                          }
                        }
                        *(v102 - 13) = LOBYTE(v319);
                        *(v102 - 12) = v290;
                        *(v102 - 11) = v91;
                        *(v102 - 10) = v92;
                        *(_WORD *)(v102 - 9) = v95 >> 19;
                        *(_WORD *)(v102 - 7) = v96 >> 19;
                        *(_WORD *)(v102 - 5) = v98;
                        *(v102 - 3) = v99;
                        *(v102 - 2) = v93;
                        *(v102 - 1) = v101;
                        *double v102 = 1;
                        if ((v94 & 4) != 0) {
                          goto LABEL_55;
                        }
                      }
                      else
                      {
                        EvLog_v("G5K_ME_dec_Dbg_C: Illegal STE SV:  ID %d  Const %d  Sig %d", v285, v88, v290);
                        double v100 = v86 + 2;
                        unint64_t v7 = v315;
                      }
                      ++v85;
                      int v86 = v100;
                      if (v85 == 24) {
                        goto LABEL_55;
                      }
                    }
                  }
                  double v104 = "G5K_ME_Unpack_Debug";
                  unsigned int v105 = 1181;
LABEL_305:
                  EvCrt_Illegal_Default(v104, v105);
                }
              }
              else
              {
                EvCrt_v("ME_Decode: ERROR: {D Debug payload is not multiple of 3 bytes: %d ");
              }
            }
          }
LABEL_55:
          unsigned int v9 = v314;
          goto LABEL_56;
        }
      }
    }
    unsigned __int16 v20 = *((_WORD *)a2 + 197) + 1;
    *((_WORD *)a2 + 197) = v20;
    EvCrt_v("ME_Dec: CheckSum Err %d >%s", v20, a2);
    unsigned int v21 = *((_DWORD *)a2 + 112);
    if (v21 > 0xBB8)
    {
      if (v21 < 0xFFFFF447) {
        goto LABEL_56;
      }
    }
    else
    {
      if (*((unsigned __int16 *)a2 + 197) < 4u) {
        goto LABEL_56;
      }
      EvCrt_v("ME_Dec: GN_GPS_Hard_Reset_GNB >4 Checksum Errors in <=3000 ms !");
      GN_GPS_Hard_Reset_GNB();
    }
    *((_WORD *)a2 + 197) = 0;
LABEL_56:
    if (g_Enable_GNB_Debug)
    {
      if (*((_DWORD *)a2 + 2791) != *((_DWORD *)a2 + 2792))
      {
        int v33 = (char **)xmmword_26AE66D68;
        uint64_t v34 = *(char **)xmmword_26AE66D68;
        char v35 = 36;
        uint64_t v36 = 1u;
        do
        {
          *int v33 = v34 + 1;
          *uint64_t v34 = v35;
          uint64_t v34 = *v33;
          if (*v33 >= v33[3])
          {
            uint64_t v34 = v33[2];
            *int v33 = v34;
          }
          char v35 = aT_0[v36++];
        }
        while (v36 != 4);
        sprintf_1u(v33, *((_DWORD *)a2 + 2791));
        uint64_t v37 = (*v33)++;
        *uint64_t v37 = 32;
        if (*v33 >= v33[3]) {
          *int v33 = v33[2];
        }
        sprintf_1u(v33, *((_DWORD *)a2 + 128));
        unsigned __int8 v38 = (*v33)++;
        *unsigned __int8 v38 = 10;
        double v39 = *v33;
        if (*v33 >= v33[3])
        {
          double v39 = v33[2];
          *int v33 = v39;
        }
        *double v39 = 0;
        *((_DWORD *)a2 + 2792) = *((_DWORD *)a2 + 2791);
        unint64_t v7 = v315;
      }
      GNB_Debug_BlockMove(a2, (unsigned __int16)((_WORD)v3 - (_WORD)a2));
    }
    a2[392] = 0;
    unsigned __int16 v3 = a2;
    if (a2[402]) {
      break;
    }
LABEL_11:
    uint64_t v4 = a1[1];
    if (v4 == *a1) {
      goto LABEL_358;
    }
  }
  double v40 = v9;
  int v41 = *a1;
  double v42 = a1[1];
  if (v42 == *a1)
  {
LABEL_88:
    if (!*v316) {
      goto LABEL_357;
    }
    int v52 = *((_DWORD *)a2 + 128);
    if (*((_DWORD *)a2 + 112) == v52) {
      goto LABEL_357;
    }
    EvLog_v("ME_Dec: Inconsistent TTicks %u %u", *((_DWORD *)a2 + 112), v52);
    goto LABEL_99;
  }
  if (v41 >= v42) {
    uint64_t v43 = (v41 - v42);
  }
  else {
    uint64_t v43 = (v41 - *((_DWORD *)a1 + 4) + *((_DWORD *)a1 + 6) - v42);
  }
  if (v43 >= 4)
  {
    EvLog_nd("ME_Dec: More data after {T message", 3, v13, v42, *a1, v43);
    int v41 = *a1;
  }
  if (v42 == v41)
  {
LABEL_87:
    if (!*v317) {
      goto LABEL_357;
    }
    goto LABEL_88;
  }
  uint64_t v44 = 0;
  while (1)
  {
    int v46 = *v42++;
    int v45 = v46;
    if (v42 >= a1[3]) {
      double v42 = a1[2];
    }
    uint64_t v47 = (v45 == 123) | v44;
    if (v45 != 123 && ((v44 ^ 1) & 1) == 0)
    {
      unsigned int v48 = v45 - 72;
      BOOL v49 = v48 > 0xC;
      int v50 = (1 << v48) & 0x1029;
      BOOL v51 = v49 || v50 == 0;
      uint64_t v47 = v44;
      if (!v51) {
        break;
      }
    }
    uint64_t v44 = v47;
    if (v42 == v41) {
      goto LABEL_87;
    }
  }
  if (!*v317 || !*v316 || a2[406] || a2[410] || a2[414] || a2[418] || a2[422])
  {
    EvCrt_nd("ME_Dec: Throughput error, found next data set", 3, v13, *((unsigned int *)a2 + 112), *((unsigned int *)a2 + 128), v43);
LABEL_99:
    unsigned int v9 = v40;
    *(void *)&v320[0] = 0;
    a2[412] = 0;
    a2[416] = 0;
    a2[420] = 0;
    a2[424] = 0;
    *(_WORD *)(a2 + 413) = 0;
    *(_WORD *)(a2 + 417) = 0;
    *(_WORD *)(a2 + 421) = 0;
    *(void *)v317 = 0;
    double v53 = a2;
    uint64_t v54 = 3392;
    v317[8] = 0;
    do
    {
      uint64_t v55 = &a2[v54];
      v55[32] = 0;
      *(_OWORD *)uint64_t v55 = 0uLL;
      *((_OWORD *)v55 + 1) = 0uLL;
      *((void *)v53 + 94) = 0;
      *((_OWORD *)v53 + 45) = 0uLL;
      *((_OWORD *)v53 + 46) = 0uLL;
      *((_OWORD *)v53 + 44) = 0uLL;
      uint64_t v56 = v53 + 8128;
      *((_OWORD *)v53 + 508) = 0uLL;
      *((_OWORD *)v53 + 509) = 0uLL;
      *((_OWORD *)v53 + 510) = 0uLL;
      v54 += 36;
      v53 += 56;
      *(void *)(v56 + 45) = 0;
    }
    while (v54 != 5120);
    for (uint64_t n = 540; n != 700; n += 20)
    {
      uint64_t v58 = &a2[n];
      *(void *)uint64_t v58 = 0;
      *((void *)v58 + 1) = 0;
      *(_DWORD *)(v58 + 15) = 0;
    }
    *unint64_t v7 = 0;
    API_Get_UTC_Cor(1, (double *)v320);
    if (*(double *)v320 <= 0.0) {
      double v59 = -0.5;
    }
    else {
      double v59 = 0.5;
    }
    double v60 = *(double *)v320 + v59;
    if (*(double *)v320 + v59 <= 2147483650.0)
    {
      if (v60 >= -2147483650.0) {
        int v61 = (int)v60;
      }
      else {
        LOBYTE(v61) = 0;
      }
    }
    else
    {
      LOBYTE(v61) = -1;
    }
    v7[1] = v61;
    unsigned __int16 v3 = a2;
    goto LABEL_11;
  }
  EvCrt_nd("ME_Dec: Throughput error, more data follows", 3, v13, *((unsigned int *)a2 + 112), *((unsigned int *)a2 + 128), v43);
LABEL_357:
  unsigned __int16 v3 = a2;
LABEL_358:
  *((void *)a2 + 48) = v3;
}

void KF_ApplyCorrectionsFromKalmanFullStates(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v3 = 0u;
  memset(v2, 0, sizeof(v2));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a1, 0, 0, 21, 1u, 32, (int *)v2);
  Set_Mat_Size((const char *)0x20, (int *)v2, 24, 1);
  long long v3 = *(_OWORD *)(a1 + 200);
  *(void *)&long long v4 = *(void *)(a1 + 216);
  INS_ApplyCorrectionsFromKalman(a1 + 16664, (uint64_t)v2);
  Set_Mat_Const((const char *)0x15, 1u, (const char *)0x20, (int *)v2, 0.0);
  Copy_SubMat_to_Mat(1.0, 32, v2, 0, 0, 32, (int *)a1);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
}

void KF_predictKF(uint64_t a1, uint64_t a2, int *a3)
{
  Mult_Mat_Mat(1024, a2, 32, a1, 32, a1);
  long long v6 = (int *)(a1 + 264);
  Mult_Mat_Mat(1024, a2, 1024, (uint64_t)v6, 1024, (uint64_t)v6);
  Mult_Mat_MatT(1024, (uint64_t)v6, 1024, a2, 1024, (uint64_t)v6);

  Add_Mat(1024, v6, 1024, a3, (const char *)0x400, v6);
}

void KF_createSystemModelMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = v7;
  char v10 = v9;
  double v12 = v11;
  uint64_t v13 = v6;
  v32[5] = *(double *)MEMORY[0x263EF8340];
  Set_Mat_Const((const char *)*(unsigned int *)(v6 + 17960), *(_DWORD *)(v6 + 17960), (const char *)0x400, v7, 0.0);
  bzero(v28, 0x2008uLL);
  Set_Mat_I((const char *)0xF, (const char *)0x400, v28, 1.0);
  if (v10)
  {
    int v14 = 0;
    int v15 = 6;
  }
  else
  {
    bzero(v27, 0x2008uLL);
    bzero(v26, 0x2008uLL);
    bzero(v25, 0x2008uLL);
    int v16 = (_DWORD *)(v13 + 16672);
    double v17 = *(double *)(v13 + 17144);
    double v18 = *(double *)(v13 + 17152);
    memset(v32, 0, 32);
    Mult_Mat_Mat(9, v13 + 16672, 3, v13 + 17160, 3, (uint64_t)v32);
    Mult_Mat_scalar(-1.0, 3, (int *)v32, (const char *)3, (int *)v32);
    memset(v31, 0, sizeof(v31));
    skewSimMat(v32, v31);
    memset(v30, 0, sizeof(v30));
    Mult_Mat_MatT(3, v13 + 17008, 3, v13 + 17008, 9, (uint64_t)v30);
    double v19 = v18 * Norma2_Vec(3, (int *)(v13 + 17008));
    if (fabs(v19) <= 1.0e-30)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v21 = *(double *)(g_TCU + 8);
        }
        else {
          double v21 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "KF_createSystemModelInsMatrix", 443, v20, v21, v19, 1.0e-30);
      }
      g_FPE_AssertFlag = 1;
      double v19 = 1.0;
    }
    int v22 = (_DWORD *)(v13 + 17368);
    Mult_Mat_scalar((v17 + v17) / v19, 9, v30, (const char *)9, v30);
    int v15 = 15;
    Set_Mat_Const((const char *)0xF, 0xFu, (const char *)0x400, v27, 0.0);
    memset(v29, 0, sizeof(v29));
    Set_Mat_I((const char *)3, (const char *)9, v29, 1.0);
    Copy_SubMat_to_Mat(-1.0, 9, v22, 0, 0, 1024, v27);
    Copy_SubMat_to_Mat(1.0, 9, v16, 0, 12, 1024, v27);
    Copy_SubMat_to_Mat(1.0, 9, v31, 3, 0, 1024, v27);
    Copy_SubMat_to_Mat(-2.0, 9, v22, 3, 3, 1024, v27);
    Copy_SubMat_to_Mat(1.0, 9, v30, 3, 6, 1024, v27);
    Copy_SubMat_to_Mat(1.0, 9, v16, 3, 9, 1024, v27);
    Copy_SubMat_to_Mat(1.0, 9, v29, 6, 3, 1024, v27);
    Mult_Mat_Mat(1024, (uint64_t)v27, 1024, (uint64_t)v27, 1024, (uint64_t)v26);
    Mult_Mat_Mat(1024, (uint64_t)v27, 1024, (uint64_t)v26, 1024, (uint64_t)v25);
    Add_Mat_ScalarMult(v12, 1024, v28, 1024, v27, (const char *)0x400, v28);
    Add_Mat_ScalarMult(v12 * 0.5 * v12, 1024, v28, 1024, v26, (const char *)0x400, v28);
    Add_Mat_ScalarMult(v12 * 0.166666667 * v12 * v12, 1024, v28, 1024, v25, (const char *)0x400, v28);
    int v14 = 18;
  }
  Copy_SubMat_to_Mat(1.0, 1024, v28, 0, 0, 1024, v8);
  memset(v27, 0, 80);
  Set_Mat_I((const char *)3, (const char *)9, v27, 1.0);
  Copy_SubMat_to_Mat(1.0, 9, v27, 15, v15, 1024, v8);
  Copy_SubMat_to_Mat(1.0, 9, v27, 18, v14, 1024, v8);
  Copy_SubMat_to_Mat(1.0, 9, v27, 21, 21, 1024, v8);
  memset(v26, 0, 80);
  Set_Mat_I((const char *)2, (const char *)9, v26, 1.0);
  Copy_SubMat_to_Mat(1.0, 9, v27, 24, 24, 1024, v8);
  int v23 = v8[1];
  *(void *)&v8[2 * (27 * v23 + 27) + 2] = 0x3FF0000000000000;
  int v24 = 28 * v23;
  *(void *)&v8[2 * (v24 + 28) + 2] = 0x3FF0000000000000;
  *(void *)&v8[2 * (29 * v23 + 29) + 2] = 0x3FF0000000000000;
  *(void *)&v8[2 * (30 * v23 + 30) + 2] = 0x3FF0000000000000;
  *(void *)&v8[2 * (31 * v23 + 31) + 2] = 0x3FF0000000000000;
  *(double *)&v8[2 * (v24 + 27) + 2] = v12;
}

void KF_getVelocityCorrectionFromLeverArm(uint64_t a1, int *a2, int *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  memset(v21, 0, sizeof(v21));
  uint64_t v6 = a1 + 16672;
  Copy_Mat(9, (int *)(a1 + 16672), (const char *)9, (int *)v21);
  memset(v20, 0, sizeof(v20));
  Copy_Mat(9, (int *)(a1 + 17288), (const char *)9, (int *)v20);
  memset(v19, 0, sizeof(v19));
  Mult_Mat_MatT(9, (uint64_t)v21, 9, (uint64_t)v20, 9, (uint64_t)v19);
  memset(v18, 0, sizeof(v18));
  extractOfromC((uint64_t)v19, (uint64_t)v18);
  long long v16 = 0u;
  long long v17 = 0u;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v16, 0.0);
  *((void *)&v17 + 1) = 0x3FF0000000000000;
  memset(v15, 0, sizeof(v15));
  Mult_MatT_Mat(9, a1 + 16832, 3, (uint64_t)&v16, 3, (uint64_t)v15);
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a1, 21, 0, 3, 1u, 3, (int *)v13);
  Mult_Mat_Mat(9, v6, 3, (uint64_t)v13, 3, (uint64_t)v14);
  double v7 = Dot_Vec_Vec(3, (uint64_t)v14, 3, (uint64_t)v15);
  memset(v12, 0, sizeof(v12));
  Add_Mat_ScalarMult(-v7, 3, (int *)v15, 3, (int *)v14, (const char *)3, (int *)v12);
  double v8 = Norma_Vec(3, (int *)v12);
  Mult_Mat_scalar(1.0 / (v8 + 0.0000001), 3, (int *)v12, (const char *)3, (int *)v12);
  double v9 = Dot_Vec_Vec(3, (uint64_t)v12, 3, (uint64_t)v18);
  double v10 = v9 + v9;
  memset(v11, 0, sizeof(v11));
  Cross_Vec_Vec(3, (double *)v14, 3, (double *)v15, (const char *)3, (int *)v11);
  Mult_Mat_scalar(v10, 3, (int *)v11, (const char *)3, a3);
  Mult_Mat_scalar(*(double *)(a1 + 17720), 3, a3, (const char *)3, a2);
}

BOOL KF_checkConstAngle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  double v8 = v7;
  uint64_t v9 = v6;
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(v29, 0, sizeof(v29));
  Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)v29, 0.0);
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  Set_Mat_Const((const char *)3, 5u, (const char *)0x24, (int *)v27, 0.0);
  memset(v26, 0, sizeof(v26));
  Mult_Mat_Mat(9, v9 + 16832, 9, v9 + 16672, 9, (uint64_t)v26);
  memset(v25, 0, sizeof(v25));
  Copy_Mat(9, (int *)(v9 + 17288), (const char *)9, (int *)v25);
  memset(v24, 0, sizeof(v24));
  Mult_Mat_Mat(9, v9 + 16832, 9, (uint64_t)v25, 9, (uint64_t)v24);
  bzero(v23, 0x2008uLL);
  Set_Mat_Const((const char *)3, 0x20u, (const char *)0x400, v23, 0.0);
  memset(v22, 0, sizeof(v22));
  Mult_Mat_MatT(9, (uint64_t)v26, 9, (uint64_t)v24, 9, (uint64_t)v22);
  Copy_SubMat_to_Mat(1.0, 9, v22, 0, 0, 1024, v23);
  Copy_SubMat_to_Mat(-1.0, 9, v22, 0, 18, 1024, v23);
  memset(v21, 0, sizeof(v21));
  Mult_Mat_MatT(9, (uint64_t)v26, 9, (uint64_t)v24, 9, (uint64_t)v21);
  memset(v20, 0, sizeof(v20));
  extractOfromC((uint64_t)v21, (uint64_t)v20);
  memset(v19, 0, sizeof(v19));
  Set_Mat_I((const char *)3, (const char *)9, (int *)v19, 0.01);
  *((void *)v19 + (2 * DWORD1(v19[0]) + 2) + 1) = 0x3F9EB851EB851EB8;
  bzero(v18, 0x2008uLL);
  Mult_Mat_Mat(1024, (uint64_t)v23, 1024, v9 + 264, 1024, (uint64_t)v18);
  Mult_Mat_MatT(1024, (uint64_t)v18, 1024, (uint64_t)v23, 1024, (uint64_t)v18);
  Add_Mat(1024, (int *)v18, 9, (int *)v19, (const char *)0x400, (int *)v18);
  memset(v17, 0, sizeof(v17));
  Copy_Mat_diag_to_Vec(1024, v18, 0, 0, 3, v17);
  Sqrt_Mat(3, (int *)v17, (const char *)3, (int *)v17);
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  ElDiv_Mat_Mat(3, (int *)v20, 3, (int *)v17, (const char *)0x20, (int *)v15);
  double v10 = Norma_Vec(32, (int *)v15);
  if (v10 > v8)
  {
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v12 = *(double *)(g_TCU + 8);
      }
      else {
        double v12 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: eventsLog = {time:%f, type:'%s', mssg:'%s at time %f'}", "KF_checkConstAngle", 2928, v11, v12, *(double *)(v9 + 17192), "UnmountDetected", "detected movement", *(double *)(v9 + 17192));
    }
    double v13 = *(double *)(v9 + 17192);
    *(double *)(v9 + 48744) = v13;
    Shift_Right_Vec(v13, 6, (int *)(v9 + 67664), (const char *)6, v9 + 67664);
  }
  return v10 > v8;
}

void KF_rotateVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (int *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset(v15, 0, sizeof(v15));
  Copy_Mat(9, v6 + 4168, (const char *)9, (int *)v15);
  memset(v14, 0, sizeof(v14));
  Copy_Mat(9, v6 + 4322, (const char *)9, (int *)v14);
  memset(v13, 0, sizeof(v13));
  Mult_MatT_Mat(9, (uint64_t)v15, 9, (uint64_t)v14, 9, (uint64_t)v13);
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  Copy_SubMat_from_Mat(1.0, 32, v6, 21, 0, 3, 1u, 3, (int *)v11);
  Mult_Mat_Mat(9, (uint64_t)v14, 3, (uint64_t)v11, 3, (uint64_t)v12);
  Mult_MatT_Mat(9, (uint64_t)v15, 3, (uint64_t)v12, 3, (uint64_t)v11);
  Copy_SubMat_to_Mat(1.0, 3, v11, 21, 0, 32, v6);
  bzero(v10, 0x2008uLL);
  Copy_SubMat_from_Mat(1.0, 1024, v6 + 66, 21, 0, 3, v6[67], 1024, v10);
  Mult_Mat_Mat(9, (uint64_t)v13, 1024, (uint64_t)v10, 1024, (uint64_t)v10);
  Copy_SubMat_to_Mat(1.0, 1024, v10, 21, 0, 1024, v6 + 66);
  Copy_SubMat_from_Mat(1.0, 1024, v6 + 66, 0, 21, v6[67], 3u, 1024, v10);
  Mult_Mat_MatT(1024, (uint64_t)v10, 9, (uint64_t)v13, 1024, (uint64_t)v10);
  Copy_SubMat_to_Mat(1.0, 1024, v10, 0, 21, 1024, v6 + 66);
  Copy_SubMat_from_Mat(1.0, 1024, v6 + 66, 21, 21, 3, 3u, 1024, v10);
  memset(v9, 0, sizeof(v9));
  Set_Mat_I((const char *)3, (const char *)9, (int *)v9, 0.05);
  Add_Mat(1024, v10, 9, (int *)v9, (const char *)0x400, v10);
  Copy_SubMat_to_Mat(1.0, 1024, v10, 21, 21, 1024, v6 + 66);
  bzero(v8, 0x2008uLL);
  Copy_SubMat_from_Mat(1.0, 1024, v6 + 66, 9, 9, 3, 3u, 1024, v8);
  memset(v7, 0, sizeof(v7));
  Copy_SubMat_from_Mat(1.0, 1024, v6 + 10136, 9, 9, 3, 3u, 9, (int *)v7);
  Add_Mat_ScalarMult(0.01, 1024, v8, 9, (int *)v7, (const char *)0x400, v8);
  Copy_SubMat_to_Mat(1.0, 1024, v8, 9, 9, 1024, v6 + 66);
}

void KF_createMeasurementNoiseCovMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  double v19 = v18;
  double v21 = v20;
  int v23 = v22;
  uint64_t v24 = v9;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v87 = 0;
  memset(v86, 0, sizeof(v86));
  ElMult_Mat_Mat(6, v20, 6, v20, (const char *)6, (int *)v86);
  Set_Mat_Const((const char *)(v21[1] * *v21), v21[1] * *v21, (const char *)0x400, (int *)v13, 0.0);
  Copy_Vec_to_Mat_diag(6, (int *)v86, 0, 0, 1, 1, 1024, (unsigned int *)v13);
  Set_Mat_Const((const char *)*v19, v19[1], (const char *)6, (int *)v11, 1.0);
  bzero(v85, 0x2008uLL);
  Mult_Mat_Mat(1024, v17, 1024, v24 + 264, 1024, (uint64_t)v85);
  Mult_Mat_MatT(1024, (uint64_t)v85, 1024, v17, 1024, (uint64_t)v85);
  bzero(v84, 0x2008uLL);
  Add_Mat(1024, v85, 1024, (int *)v13, (const char *)0x400, v84);
  bzero(v83, 0x2008uLL);
  Copy_Mat_diag_to_Vec(1024, (unsigned int *)v84, 0, 0, 1024, v83);
  Sqrt_Mat(1024, v83, (const char *)0x400, v83);
  ElDiv_Mat_Mat(6, v19, 1024, v83, (const char *)6, (int *)a9);
  memset(v82, 0, sizeof(v82));
  memset(v81, 0, sizeof(v81));
  memset(v80, 0, sizeof(v80));
  switch(v23)
  {
    case 1:
      Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)v11, 1.0);
      if (*(unsigned char *)(v24 + 40529))
      {
        double v25 = *(double *)(a9 + 8);
        double v26 = -v25;
        if (v25 >= 0.0) {
          double v26 = *(double *)(a9 + 8);
        }
        if (v26 > 3.0) {
          *(void *)(v11 + 8) = 0;
        }
        double v27 = *(double *)(a9 + 16);
        if (v27 < 0.0) {
          double v27 = -v27;
        }
        if (v27 > 3.0) {
          *(void *)(v11 + 16) = 0;
        }
        uint64_t v28 = *(int *)(v24 + 67720);
        if (v28 >= 8)
        {
          if (g_FPE_LogSeverity)
          {
            unint64_t v64 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v65 = *(double *)(g_TCU + 8);
            }
            else {
              double v65 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f SES does not support value %u", "KF_createRweightedGNSS", 1151, v64, v65, *(_DWORD *)(v24 + 67720));
          }
          g_FPE_AssertFlag = 1;
          double v29 = 0.0;
        }
        else
        {
          double v29 = dbl_22BB0E740[v28];
        }
        if (*(double *)(a9 + 8) < 0.0)
        {
          *(double *)(v13 + 8) = *(double *)(v13 + 8) + *(double *)(v13 + 8);
          if (*(double *)(a9 + 8) < v29)
          {
            *(void *)(v11 + 8) = 0;
            if (*(unsigned char *)(v24 + 40531))
            {
              if (*(double *)(a9 + 8) < -10.0) {
                *(void *)(v11 + 16) = 0;
              }
            }
          }
        }
      }
      return;
    case 5:
      uint64_t v32 = 3;
      double v38 = Norma2_Vec(3, (int *)(v24 + 16944));
      unsigned int v39 = 0;
      double v40 = v38 * 0.050625;
      int v41 = *(_DWORD *)(v13 + 4) + 1;
      do
      {
        uint64_t v42 = v13 + 8 * v39;
        double v44 = *(double *)(v42 + 8);
        uint64_t v43 = (double *)(v42 + 8);
        if (v44 < v40) {
          *uint64_t v43 = v40;
        }
        v39 += v41;
        --v32;
      }
      while (v32);
      if (*(unsigned char *)(v24 + 40530) && KF_checkConstAngle(v24, v33, v34, v35, v36, v37))
      {
        KF_rotateVi(v24, v45, v46, v47, v48, v49);
        Set_Mat_Const((const char *)*v19, v19[1], (const char *)6, (int *)v11, 0.0);
        goto LABEL_52;
      }
      int v61 = (const char *)*v19;
      unsigned int v62 = v19[1];
      double v63 = 1.0;
      goto LABEL_58;
    case 6:
      Copy_SubMat_from_Mat(1.0, 6, v19, 0, 0, 3, 1u, 3, (int *)v81);
      Copy_SubMat_from_Mat(1.0, 1024, v84, 0, 0, 3, 3u, 9, (int *)v80);
      bzero(v88, 0x2008uLL);
      Invert_Mat(9, (uint64_t)v80, 1024, (uint64_t)v88, v50, v51);
      Mult_Mat_Mat(1024, (uint64_t)v88, 3, (uint64_t)v81, 3, (uint64_t)v82);
      Mult_MatT_Mat(3, (uint64_t)v81, 3, (uint64_t)v82, 3, (uint64_t)v82);
      double v52 = *((double *)v82 + 1);
      if (*((double *)v82 + 1) < 0.0)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v54 = *(double *)(g_TCU + 8);
          }
          else {
            double v54 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KF_createMeasurementNoiseCovMatrix", 1253, v53, v54, v52);
        }
        g_FPE_AssertFlag = 1;
        double v52 = 1.0;
      }
      double v66 = *(double *)(v15 + 112);
      Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)v11, 1.0);
      if (sqrt(v52) >= 3.0 && v66 >= 4.0)
      {
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
      }
      if (*(unsigned char *)(v24 + 40530) && KF_checkConstAngle(v24, v67, v68, v69, v70, v71))
      {
        KF_rotateVi(v24, v73, v74, v75, v76, v77);
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
LABEL_52:
        *(void *)(v24 + 57152) = 0x3FF0000000000000;
      }
      return;
    case 9:
      uint64_t v55 = v24 + 16832;
      Mult_MatT_Mat(9, v55, 1024, v13, 1024, v13);
      Mult_Mat_Mat(1024, v13, 9, v55, 1024, v13);
      Add_Mat(1024, v85, 1024, (int *)v13, (const char *)0x400, v84);
      bzero(v88, 0x2008uLL);
      Invert_Mat(1024, (uint64_t)v84, 1024, (uint64_t)v88, v56, v57);
      Mult_Mat_Mat(1024, (uint64_t)v88, 6, (uint64_t)v19, 3, (uint64_t)v82);
      Mult_MatT_Mat(6, (uint64_t)v19, 3, (uint64_t)v82, 3, (uint64_t)v82);
      double v58 = *((double *)v82 + 1);
      if (*((double *)v82 + 1) < 0.0)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v59 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v60 = *(double *)(g_TCU + 8);
          }
          else {
            double v60 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KF_createMeasurementNoiseCovMatrix", 1275, v59, v60, v58);
        }
        g_FPE_AssertFlag = 1;
        double v58 = 1.0;
      }
      double v78 = sqrt(v58);
      Set_Mat_Const((const char *)1, 1u, (const char *)6, (int *)a9, v78);
      if (v78 >= 5.0) {
        goto LABEL_57;
      }
      return;
    case 10:
      memset(v88, 0, 80);
      createC_e_map((int *)(v15 + 112), (int *)(v15 + 144), v24 + 16832, (uint64_t)v88, 0);
      memset(v79, 0, sizeof(v79));
      Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)v13, 1, 1, 3, 3u, 9, (int *)v79);
      Mult_MatT_Mat(9, (uint64_t)v88, 9, (uint64_t)v79, 9, (uint64_t)v79);
      Mult_Mat_Mat(9, (uint64_t)v79, 9, (uint64_t)v88, 9, (uint64_t)v79);
      Copy_SubMat_to_Mat(1.0, 9, v79, 1, 1, 1024, (int *)v13);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      if (fabs(*(double *)(a9 + 8)) < 5.0) {
        return;
      }
LABEL_57:
      int v61 = (const char *)*v19;
      unsigned int v62 = v19[1];
      double v63 = 0.0;
LABEL_58:
      Set_Mat_Const(v61, v62, (const char *)6, (int *)v11, v63);
      break;
    case 11:
      Mult_Mat_scalar(40.0, 1024, (int *)v13, (const char *)0x400, (int *)v13);
      break;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v31 = *(double *)(g_TCU + 8);
        }
        else {
          double v31 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f measType = %d is not supported!", "KF_createMeasurementNoiseCovMatrix", 1321, v30, v31, (unsigned __int16)v23);
      }
      g_FPE_AssertFlag = 1;
      break;
  }
}

uint64_t KF_reduceSvInd(unsigned int a1, unsigned int a2)
{
  if (a2 == 4) {
    uint64_t v4 = a1 - 192;
  }
  else {
    uint64_t v4 = a1;
  }
  if (a2 > 4 || (v4 - 38) <= 0xFFFFFFDA)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v6 = *(double *)(g_TCU + 8);
      }
      else {
        double v6 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f sv_reduced index %d (sv=%d) > SvTable size %d (or 0)! ", "KF_reduceSvInd", 1483, v5, v6, v4, a1, a2);
    }
    uint64_t v4 = 0;
    g_FPE_AssertFlag = 1;
  }
  return v4;
}

uint64_t KF_ApplySingleMeas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v194 = v7;
  uint64_t v193 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = v6;
  uint64_t v291 = *MEMORY[0x263EF8340];
  unint64_t v20 = (double *)(v6 + 117096);
  uint64_t v21 = v6 + 48752;
  int v22 = (double *)(v6 + 40488);
  char v196 = (unsigned char *)(v6 + 34368);
  unsigned int v197 = (_DWORD *)(v6 + 17016);
  double v23 = *(double *)v17;
  uint64_t v24 = *(unsigned int *)(v17 + 8);
  __int16 v200 = (int *)(v17 + 16);
  Set_Mat_Const((const char *)1, 1u, (const char *)6, v13, -1.0);
  Set_Mat_Const((const char *)1, 1u, (const char *)6, v12, -999.0);
  *uint64_t v10 = v24;
  if (*(double *)(v19 + 17192) >= *(double *)(v21 + 18896))
  {
    *(void *)(v21 + 18896) = 0x7FF8000000000000;
    Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, (int *)(v19 + 67384), 1.0);
  }
  uint64_t v195 = v21;
  BOOL v27 = 0;
  switch((int)v24)
  {
    case 0:
      double v38 = v23 - *(double *)(v19 + 17192);
      INS_ApplyImuSample(v19 + 16664, v200, v23);
      Set_Mat_Const((const char *)*(unsigned int *)(v19 + 17960), *(_DWORD *)(v19 + 17960), (const char *)0x400, (int *)(v19 + 75928), 0.0);
      uint64_t v285 = 0;
      long long v284 = 0u;
      long long v283 = 0u;
      long long v282 = 0u;
      long long v281 = 0u;
      long long v280 = 0u;
      long long v279 = 0u;
      long long v278 = 0u;
      long long v277 = 0u;
      long long v276 = 0u;
      long long v275 = 0u;
      long long v274 = 0u;
      long long v273 = 0u;
      long long v272 = 0u;
      long long v271 = 0u;
      memset(__x, 0, sizeof(__x));
      Set_Mat_Const((const char *)*(unsigned int *)(v19 + 17960), 1u, (const char *)0x20, (int *)__x, 0.0);
      double v39 = Norma_Vec(3, (int *)(v19 + 16976));
      if (v39 >= 8.33333333)
      {
        double v40 = 1.0;
        if (v39 <= 16.6666667) {
          double v40 = (v39 + -8.33333333) * 0.7 / 8.33333333 + 0.3;
        }
      }
      else
      {
        double v40 = 0.3;
      }
      double v201 = v40;
      *(void *)&long long v256 = 0;
      long long v255 = 0u;
      memset(v254, 0, sizeof(v254));
      Copy_Mat(6, (int *)(v19 + 17792), (const char *)6, (int *)v254);
      *(float64x2_t *)((char *)v254 + 8) = vmulq_n_f64(*(float64x2_t *)((char *)v254 + 8), v201);
      v254[1].f64[1] = v201 * v254[1].f64[1];
      ElMult_Mat_Mat(6, (int *)v254, 6, (int *)v254, (const char *)6, (int *)v254);
      Mult_Mat_scalar(v38, 6, (int *)v254, (const char *)6, (int *)v254);
      Copy_Vec_to_Mat_diag(6, (int *)v254, 0, 0, 1, 0, 32, (unsigned int *)__x);
      *(void *)&long long v286 = 0x100000003;
      *((double *)&v286 + 1) = v38 * 0.000001;
      *(double *)&long long v287 = v38 * 0.000001;
      *((double *)&v287 + 1) = v38 * 0.000001;
      Copy_Vec_to_Mat_diag(3, (int *)&v286, 6u, 0, 1, 0, 32, (unsigned int *)__x);
      *(void *)&long long v235 = 0;
      long long v233 = 0u;
      long long v234 = 0u;
      long long v232 = 0u;
      Exp_Mat(v38 * -2.0, 6, (int *)(v19 + 17904), (const char *)6, (int *)&v232);
      *(void *)&long long v240 = 0;
      long long v239 = 0u;
      long long v238 = 0u;
      long long v237 = 0u;
      Set_Mat_Const((const char *)*(unsigned int *)(v19 + 17904), *(_DWORD *)(v19 + 17908), (const char *)6, (int *)&v237, 1.0);
      Sub_Mat(6, (int *)&v237, 6, (int *)&v232, (const char *)6, (int *)&v232);
      ElMult_Mat_Mat(6, (int *)&v232, 6, (int *)(v19 + 17848), (const char *)6, (int *)&v232);
      Copy_Vec_to_Mat_diag(6, (int *)&v232, 9u, 0, 1, 0, 32, (unsigned int *)__x);
      double v60 = v38 * 0.00001;
      if (*v196) {
        double v60 = v38 * 0.00001 * 10.0;
      }
      *(void *)&long long v212 = 0x100000003;
      *((double *)&v212 + 1) = v60;
      *(double *)&long long v213 = v60;
      *((double *)&v213 + 1) = v60;
      Copy_Vec_to_Mat_diag(3, (int *)&v212, 0x15u, 0, 1, 0, 32, (unsigned int *)__x);
      *(double *)&long long v283 = v38 * 0.09 * 100.0;
      *((double *)&v283 + 1) = v38 * 0.09;
      if (*(double *)(v19 + 17192) >= 0.0) {
        double v61 = v38 * 0.000001;
      }
      else {
        double v61 = v38;
      }
      Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v212, v61);
      Copy_Vec_to_Mat_diag(3, (int *)&v212, 0x1Du, 0, 1, 0, 32, (unsigned int *)__x);
      *((double *)&v282 + 1) = v38 * 0.0001;
      Copy_Vec_to_Mat_diag(32, (int *)__x, 0, 0, 1, 1, 1024, (unsigned int *)(v19 + 75928));
      Diag_Mult_Mat(1024, (unsigned int *)(v19 + 75928), 32, (_DWORD *)(v19 + 67384));
      KF_createSystemModelMatrix(v19, 0, v19 + 67728, v62, v63, v64);
      uint64_t v58 = v19;
      uint64_t v56 = v19 + 67728;
      uint64_t v57 = (int *)(v19 + 75928);
      goto LABEL_48;
    case 2:
      double v55 = *(double *)(v18 + 136);
      if (v55 != 0.0) {
        *(double *)(v19 + 232) = *(double *)(v19 + 232) - v55;
      }
      *(void *)&long long v272 = 0;
      long long v271 = 0u;
      memset(__x, 0, sizeof(__x));
      KF_sendMeas2Checker(v19, 2, (uint64_t)v200, 0, 0, 0, (uint64_t)__x);
      goto LABEL_49;
    case 3:
    case 4:
    case 12:
      goto LABEL_4;
    case 8:
      if (v23 >= *(double *)(v19 + 17192))
      {
        Copy_Mat(3, (int *)(v19 + 17008), (const char *)3, (int *)(v19 + 17224));
        Copy_Mat(9, (int *)(v19 + 16672), (const char *)9, (int *)(v19 + 17288));
        uint64_t v56 = v19 + 17968;
        uint64_t v57 = (int *)(v19 + 26168);
        uint64_t v58 = v19;
LABEL_48:
        KF_predictKF(v58, v56, v57);
      }
      goto LABEL_49;
    default:
      double v41 = *(double *)(v19 + 17192);
      BOOL v27 = v23 >= v41;
      if (v24 == 1)
      {
        uint64_t v42 = v24;
        if (*((unsigned char *)v22 + 40))
        {
          unsigned int v43 = *(_DWORD *)(v18 + 132);
          int v44 = KF_reduceSvInd(*(_DWORD *)(v18 + 128), v43);
          if (!v44) {
            goto LABEL_32;
          }
          unsigned int v45 = v44 + 37 * v43 - 1;
          int v46 = *(unsigned __int8 *)(v19 + 34376 + v45);
          double v47 = *(double *)(v19 + 34376 + 8 * v45 + 192);
          uint64_t v48 = v19 + 34376 + 24 * v45;
          *(_OWORD *)((char *)__x + 8) = *(_OWORD *)(v48 + 1672);
          uint64_t v49 = *(void *)(v48 + 1688);
          *(void *)&__x[0] = 0x100000003;
          *((void *)&__x[1] + 1) = v49;
          memset(v254, 0, sizeof(v254));
          Sub_Mat(3, (int *)__x, 3, (int *)(v19 + 17008), (const char *)3, (int *)v254);
          double v50 = Norma_Vec(3, (int *)v254);
          double v51 = *(double *)(v19 + 17192);
          double v52 = v47 - v51;
          if (v47 - v51 < 0.0) {
            double v52 = -(v47 - v51);
          }
          if (v51 >= 0.0 && v46 && v52 <= 60.0 && v50 <= 8.0)
          {
LABEL_32:
            uint64_t v54 = 1;
            Set_Mat_Const((const char *)2, 1u, (const char *)6, v14, 2.0);
            KF_LogStatistics(v19, v18, (uint64_t)v14);
            return v54;
          }
        }
        if (v23 >= v41)
        {
          __int16 v198 = v14;
          BOOL v190 = 0;
          unsigned int v191 = v16;
          int v187 = 1;
          uint64_t v24 = v42;
          goto LABEL_73;
        }
LABEL_49:
        uint64_t v65 = v19;
        uint64_t v66 = v18;
        uint64_t v67 = (uint64_t)v14;
LABEL_117:
        KF_LogStatistics(v65, v66, v67);
        return 1;
      }
LABEL_4:
      __int16 v198 = v14;
      LODWORD(v199) = v24;
      if (v24 == 10)
      {
        BOOL v190 = 1;
        unsigned int v191 = v16;
        memset(__x, 0, sizeof(__x));
        Sub_Mat(3, (int *)(v18 + 160), 3, (int *)(v18 + 128), (const char *)3, (int *)__x);
        memset(v254, 0, sizeof(v254));
        Add_Mat(3, (int *)(v18 + 160), 3, (int *)(v18 + 128), (const char *)3, (int *)v254);
        Mult_Mat_scalar(0.5, 3, (int *)v254, (const char *)3, (int *)v254);
        long long v232 = 0u;
        long long v233 = 0u;
        Sub_Mat(3, (int *)(v19 + 17008), 3, (int *)v254, (const char *)3, (int *)&v232);
        long long v238 = 0u;
        long long v237 = 0u;
        double v28 = Norma_Vec(3, (int *)__x);
        long long v286 = 0u;
        long long v287 = 0u;
        Mult_Mat_scalar(1.0 / v28, 3, (int *)__x, (const char *)3, (int *)&v286);
        Mult_MatT_Mat(3, (uint64_t)&v232, 3, (uint64_t)&v286, 3, (uint64_t)&v237);
        double v29 = *((double *)&v237 + 1);
        if (*((double *)&v237 + 1) < 0.0) {
          double v29 = -*((double *)&v237 + 1);
        }
        double v30 = v28 * 0.5;
        double v31 = 4.0;
        if (v29 > v30) {
          goto LABEL_15;
        }
        double v31 = 2.0;
        if (!*((unsigned char *)v22 + 40)) {
          goto LABEL_15;
        }
        int v32 = *(unsigned __int8 *)v22;
        double v33 = v22[1];
        *(_OWORD *)((char *)__x + 8) = *((_OWORD *)v22 + 1);
        uint64_t v34 = *((void *)v22 + 4);
        *(void *)&__x[0] = 0x100000003;
        *((void *)&__x[1] + 1) = v34;
        memset(v254, 0, sizeof(v254));
        Add_Mat(3, (int *)(v18 + 160), 3, (int *)(v18 + 128), (const char *)3, (int *)v254);
        Mult_Mat_scalar(0.5, 3, (int *)v254, (const char *)3, (int *)v254);
        Sub_Mat(3, (int *)__x, 3, (int *)v254, (const char *)3, (int *)v254);
        double v35 = Norma_Vec(3, (int *)v254);
        double v36 = *(double *)(v19 + 17192);
        double v37 = v33 - v36;
        if (v33 - v36 < 0.0) {
          double v37 = -(v33 - v36);
        }
        if (v36 >= 0.0 && v32 && v37 <= 60.0 && v35 <= 10.0)
        {
LABEL_15:
          Set_Mat_Const((const char *)1, 1u, (const char *)6, v14, v31);
          LOBYTE(v27) = 0;
        }
LABEL_52:
        int v68 = *(_DWORD *)(v18 + 8);
        if (v68 == 9)
        {
          memset(__x, 0, sizeof(__x));
          Sub_Mat(6, v200, 3, (int *)(v19 + 17008), (const char *)3, (int *)__x);
          if (Norma2_Vec(3, (int *)__x) <= 400000000.0)
          {
            uint64_t v71 = v14;
            if (!v27) {
              goto LABEL_116;
            }
            goto LABEL_72;
          }
          uint64_t v71 = v14;
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            mach_continuous_time();
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Extreme ExtPos meas at time=%f: Diff=%f");
          }
        }
        else
        {
          if (v68 != 10)
          {
            uint64_t v71 = v14;
            if (g_FPE_LogSeverity)
            {
              unint64_t v72 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v73 = *(double *)(g_TCU + 8);
              }
              else {
                double v73 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f MeasType %u is not expected here!", "KF_isGrossError", 3670, v72, v73, *(_DWORD *)(v18 + 8));
            }
            g_FPE_AssertFlag = 1;
            if (!v27) {
              goto LABEL_116;
            }
            goto LABEL_72;
          }
          memset(__x, 0, sizeof(__x));
          memset(v254, 0, sizeof(v254));
          Sub_Mat(3, (int *)(v18 + 128), 3, (int *)(v19 + 17008), (const char *)3, (int *)__x);
          Sub_Mat(3, (int *)(v18 + 160), 3, (int *)(v19 + 17008), (const char *)3, (int *)v254);
          double v69 = Norma2_Vec(3, (int *)__x);
          double v70 = Norma2_Vec(3, (int *)v254);
          if (v69 >= v70) {
            double v70 = v69;
          }
          if (v70 <= 400000000.0)
          {
            uint64_t v71 = v14;
            if (!v27) {
              goto LABEL_116;
            }
LABEL_72:
            int v187 = 0;
            goto LABEL_73;
          }
          uint64_t v71 = v14;
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            mach_continuous_time();
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Extreme MAP meas at time=%f: startDiff=%f endDiff=%f");
          }
        }
        Set_Mat_Const((const char *)1, 1u, (const char *)6, v71, 3.0);
LABEL_116:
        uint64_t v65 = v19;
        uint64_t v66 = v18;
        uint64_t v67 = (uint64_t)v71;
        goto LABEL_117;
      }
      if ((v24 - 9) < 2)
      {
        BOOL v190 = v24 == 10;
        unsigned int v191 = v16;
        goto LABEL_52;
      }
      uint64_t v189 = v22;
      uint64_t v59 = (uint64_t)v14;
      if (!v27) {
        goto LABEL_163;
      }
      BOOL v190 = 0;
      unsigned int v191 = v16;
      int v187 = 0;
LABEL_73:
      uint64_t v74 = v19 + 100592;
      int v75 = *(_DWORD *)(v18 + 132);
      long long v235 = 0u;
      long long v236 = 0u;
      char v192 = (int *)(v19 + 84184);
      long long v233 = 0u;
      long long v234 = 0u;
      long long v232 = 0u;
      Transpose_Mat(9, v19 + 16672, 9, (uint64_t)&v232, v25, v26);
      *(void *)&v231[0] = 0x100000003;
      *(_OWORD *)((char *)v231 + 8) = *(_OWORD *)(v19 + 176);
      *((void *)&v231[1] + 1) = *(void *)(v19 + 192);
      long long v241 = 0u;
      long long v240 = 0u;
      long long v239 = 0u;
      long long v238 = 0u;
      long long v237 = 0u;
      Set_Mat_I((const char *)3, (const char *)9, (int *)&v237, 1.0);
      uint64_t v199 = v24;
      int v76 = v24 - 1;
      uint64_t v186 = (int *)(v19 + 16672);
      switch(v76)
      {
        case 0:
          uint64_t v285 = 0;
          long long v284 = 0u;
          long long v283 = 0u;
          long long v282 = 0u;
          long long v281 = 0u;
          long long v280 = 0u;
          long long v279 = 0u;
          long long v278 = 0u;
          long long v277 = 0u;
          long long v276 = 0u;
          long long v275 = 0u;
          long long v274 = 0u;
          long long v273 = 0u;
          long long v272 = 0u;
          long long v271 = 0u;
          memset(__x, 0, sizeof(__x));
          uint64_t v269 = 0;
          long long v268 = 0u;
          long long v267 = 0u;
          long long v266 = 0u;
          long long v265 = 0u;
          long long v264 = 0u;
          long long v263 = 0u;
          long long v262 = 0u;
          long long v261 = 0u;
          long long v260 = 0u;
          long long v259 = 0u;
          long long v258 = 0u;
          long long v257 = 0u;
          long long v256 = 0u;
          long long v255 = 0u;
          memset(v254, 0, sizeof(v254));
          Sub_Mat(3, (int *)(v19 + 17008), 3, (int *)(v18 + 136), (const char *)0x20, (int *)__x);
          double v79 = Norma_Vec(32, (int *)__x);
          if (fabs(v79) <= 1.0e-30)
          {
            if (g_FPE_LogSeverity)
            {
              unint64_t v109 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v110 = *(double *)(g_TCU + 8);
              }
              else {
                double v110 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "KF_createMeasurementMatrix", 646, v109, v110, v79, 1.0e-30);
            }
            uint64_t v80 = v19 + 100592;
            g_FPE_AssertFlag = 1;
            double v79 = 1.0;
          }
          else
          {
            uint64_t v80 = v19 + 100592;
          }
          Transpose_Mat(32, (uint64_t)__x, 32, (uint64_t)v254, v77, v78);
          Mult_Mat_scalar(-1.0 / v79, 32, (int *)v254, (const char *)0x20, (int *)v254);
          Set_Mat_Const((const char *)2, 0x20u, (const char *)0x400, v192, 0.0);
          Copy_SubMat_to_Mat(1.0, 32, v254, 0, 6, 1024, v192);
          if (v75 == 4) {
            unsigned int v175 = 28;
          }
          else {
            unsigned int v175 = v75 + 28;
          }
          *(void *)(v19 + 84192 + 8 * v175) = 0x3FF0000000000000;
          Copy_SubMat_to_Mat(1.0, 32, v254, 1, 3, 1024, v192);
          *(void *)(v19 + 84192 + 8 * (*(_DWORD *)(v19 + 84188) + 27)) = 0x3FF0000000000000;
          *(void *)(v19 + 84416) = 0x3FF0000000000000;
          uint64_t v74 = v80;
          break;
        case 4:
          Set_Mat_Const((const char *)4, 0x20u, (const char *)0x400, v192, 0.0);
          long long v229 = 0u;
          long long v230 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          KF_getVelocityCorrectionFromLeverArm(v19, (int *)&v229, (int *)&v227);
          long long v225 = 0u;
          long long v226 = 0u;
          Sub_Mat(3, (int *)(v19 + 16944), 3, (int *)&v229, (const char *)3, (int *)&v225);
          double v83 = Norma_Vec(3, (int *)&v225);
          uint64_t v285 = 0;
          long long v284 = 0u;
          long long v283 = 0u;
          long long v282 = 0u;
          long long v281 = 0u;
          long long v280 = 0u;
          long long v279 = 0u;
          long long v278 = 0u;
          long long v277 = 0u;
          long long v276 = 0u;
          long long v275 = 0u;
          long long v274 = 0u;
          long long v273 = 0u;
          long long v272 = 0u;
          long long v271 = 0u;
          memset(__x, 0, sizeof(__x));
          Abs_Mat(3, (int *)&v225, (const char *)0x20, (int *)__x);
          long long v257 = 0u;
          long long v256 = 0u;
          long long v255 = 0u;
          memset(v254, 0, sizeof(v254));
          Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v19 + 264), 3, 3, 3, 3u, 9, (int *)v254);
          long long v223 = 0u;
          long long v224 = 0u;
          Copy_Mat_diag_to_Vec(9, (unsigned int *)v254, 0, 0, 3, &v223);
          Sqrt_Mat(3, (int *)&v223, (const char *)3, (int *)&v223);
          Mult_Mat_scalar(2.0, 3, (int *)&v223, (const char *)3, (int *)&v223);
          long long v221 = 0u;
          long long v222 = 0u;
          Min_Mat_Mat(3, (int *)&v223, 32, (int *)__x, (const char *)3, (int *)&v221);
          long long v219 = 0u;
          long long v220 = 0u;
          Sign_Mat(3, (int *)&v225, (const char *)3, (int *)&v219);
          memset(v218, 0, sizeof(v218));
          ElMult_Mat_Mat(3, (int *)&v221, 3, (int *)&v219, (const char *)3, (int *)v218);
          Sub_Mat(3, (int *)&v225, 3, (int *)v218, (const char *)3, (int *)v218);
          ElMult_Mat_Mat(3, (int *)v218, 3, (int *)v218, (const char *)3, (int *)v218);
          Sum_Mat(3, v218);
          double v85 = v84;
          memset(v217, 0, sizeof(v217));
          Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)v217, 0.0);
          if (v83 > 0.0 && (!*v196 || v85 > 0.0))
          {
            long long v289 = 0u;
            long long v290 = 0u;
            long long v287 = 0u;
            long long v288 = 0u;
            long long v286 = 0u;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v213 = 0u;
            long long v214 = 0u;
            long long v212 = 0u;
            skewSimMat((double *)&v225, (int *)&v212);
            Mult_Mat_Mat(9, (uint64_t)&v232, 9, (uint64_t)&v212, 9, (uint64_t)&v286);
            Mult_Mat_scalar(-1.0, 9, (int *)&v286, (const char *)9, (int *)&v286);
            long long v210 = 0u;
            long long v211 = 0u;
            long long v208 = 0u;
            long long v209 = 0u;
            long long v207 = 0u;
            Mult_Mat_MatT(3, (uint64_t)v231, 3, (uint64_t)&v225, 9, (uint64_t)&v207);
            if (fabs(v83) <= 1.0e-30)
            {
              if (g_FPE_LogSeverity)
              {
                unint64_t v86 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                if (g_TCU) {
                  double v87 = *(double *)(g_TCU + 8);
                }
                else {
                  double v87 = 0.0;
                }
                LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "KF_createMeasurementMatrix", 712, v86, v87, v83, 1.0e-30);
              }
              g_FPE_AssertFlag = 1;
              double v83 = 1.0;
            }
            Mult_Mat_scalar(1.0 / v83, 9, (int *)&v207, (const char *)9, (int *)&v207);
            Sub_Mat(9, (int *)&v207, 9, (int *)&v232, (const char *)9, (int *)&v207);
            long long v205 = 0u;
            long long v206 = 0u;
            long long v203 = 0u;
            long long v204 = 0u;
            long long v202 = 0u;
            Set_Mat_I((const char *)3, (const char *)9, (int *)&v202, -v83);
            Mult_Mat_Mat(9, (uint64_t)&v207, 3, (uint64_t)&v227, 3, (uint64_t)v217);
            int v94 = (int *)(v19 + 84184);
            Copy_SubMat_to_Mat(1.0, 9, &v286, 0, 0, 1024, v192);
            Copy_SubMat_to_Mat(1.0, 9, &v207, 0, 3, 1024, v192);
            Copy_SubMat_to_Mat(1.0, 9, &v202, 0, 21, 1024, v192);
            unsigned int v88 = v217;
            double v89 = -1.0;
            uint64_t v90 = 3;
            int v91 = 0;
            int v92 = 26;
            goto LABEL_91;
          }
          break;
        case 5:
          Set_Mat_Const((const char *)6, 0x20u, (const char *)0x400, v192, 0.0);
          Copy_SubMat_to_Mat(-1.0, 9, &v237, 0, 6, 1024, v192);
          Copy_SubMat_to_Mat(1.0, 9, &v237, 0, 15, 1024, v192);
          Copy_SubMat_to_Mat(1.0, 9, &v237, 3, 0, 1024, v192);
          unsigned int v88 = &v237;
          double v89 = -1.0;
          uint64_t v90 = 9;
          int v91 = 3;
          int v92 = 18;
          unsigned __int8 v93 = (int *)(v19 + 84184);
          goto LABEL_92;
        case 8:
          int v94 = (int *)(v19 + 84184);
          Set_Mat_Const((const char *)3, 0x20u, (const char *)0x400, v192, 0.0);
          unsigned int v88 = &v237;
          double v89 = -1.0;
          uint64_t v90 = 9;
          goto LABEL_90;
        case 9:
          long long v212 = 0u;
          long long v213 = 0u;
          Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 21, 0, 3, 1u, 3, (int *)&v212);
          long long v273 = 0u;
          long long v272 = 0u;
          long long v271 = 0u;
          memset(__x, 0, sizeof(__x));
          skewSimMat((double *)&v212, (int *)__x);
          long long v257 = 0u;
          long long v256 = 0u;
          long long v255 = 0u;
          memset(v254, 0, sizeof(v254));
          createC_e_map((int *)(v18 + 128), (int *)(v18 + 160), v19 + 16832, (uint64_t)v254, 0);
          int v94 = (int *)(v19 + 84184);
          Set_Mat_Const((const char *)4, 0x20u, (const char *)0x400, v192, 0.0);
          long long v207 = 0u;
          long long v208 = 0u;
          Copy_SubMat_from_Mat(1.0, 9, v254, 1, 0, 1, 3u, 3, (int *)&v207);
          Copy_SubMat_to_Mat(-1.0, 3, &v207, 0, 6, 1024, v192);
          long long v289 = 0u;
          long long v290 = 0u;
          long long v287 = 0u;
          long long v288 = 0u;
          long long v286 = 0u;
          Mult_Mat_Mat(9, v19 + 16672, 9, (uint64_t)__x, 9, (uint64_t)&v286);
          Copy_SubMat_to_Mat(-1.0, 9, &v286, 1, 0, 1024, v192);
          double v89 = -1.0;
          uint64_t v90 = 9;
          unsigned int v88 = (long long *)(v19 + 16672);
          int v91 = 1;
          int v92 = 21;
          goto LABEL_91;
        case 10:
          int v94 = (int *)(v19 + 84184);
          Set_Mat_Const((const char *)1, 0x20u, (const char *)0x400, v192, 0.0);
          memset(__x, 0, sizeof(__x));
          Copy_SubMat_from_Mat(1.0, 9, (_DWORD *)(v19 + 16832), 2, 0, 1, 3u, 3, (int *)__x);
          unsigned int v88 = __x;
          double v89 = 1.0;
          uint64_t v90 = 3;
LABEL_90:
          int v91 = 0;
          int v92 = 6;
LABEL_91:
          unsigned __int8 v93 = v94;
LABEL_92:
          Copy_SubMat_to_Mat(v89, v90, v88, v91, v92, 1024, v93);
          break;
        default:
          if (g_FPE_LogSeverity)
          {
            unint64_t v81 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v82 = *(double *)(g_TCU + 8);
            }
            else {
              double v82 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f measType = %d is not supported!", "KF_createMeasurementMatrix", 796, v81, v82, (unsigned __int16)v199);
          }
          g_FPE_AssertFlag = 1;
          break;
      }
      *(void *)&long long v215 = 0;
      long long v213 = 0u;
      long long v214 = 0u;
      long long v212 = 0u;
      Copy_Mat(6, v200, (const char *)6, (int *)&v212);
      int v95 = *(_DWORD *)(v18 + 132);
      int v96 = (int *)(v19 + 100584);
      long long v207 = 0u;
      long long v208 = 0u;
      long long v202 = 0u;
      long long v203 = 0u;
      memset(v231, 0, sizeof(v231));
      long long v257 = 0u;
      long long v256 = 0u;
      long long v255 = 0u;
      memset(v254, 0, sizeof(v254));
      long long v235 = 0u;
      long long v236 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      long long v232 = 0u;
      long long v241 = 0u;
      long long v240 = 0u;
      long long v239 = 0u;
      long long v238 = 0u;
      long long v237 = 0u;
      uint64_t v285 = 0;
      long long v284 = 0u;
      long long v283 = 0u;
      long long v282 = 0u;
      long long v281 = 0u;
      long long v280 = 0u;
      long long v279 = 0u;
      long long v278 = 0u;
      long long v277 = 0u;
      long long v276 = 0u;
      long long v275 = 0u;
      long long v274 = 0u;
      long long v273 = 0u;
      long long v272 = 0u;
      long long v271 = 0u;
      memset(__x, 0, sizeof(__x));
      long long v229 = 0u;
      long long v230 = 0u;
      long long v227 = 0u;
      long long v228 = 0u;
      unsigned int v188 = (int *)(v19 + 100584);
      uint64_t v189 = v22;
      switch(v76)
      {
        case 0:
          Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)(v19 + 100584), 0.0);
          Sub_Mat(3, (int *)(v19 + 17008), 3, (int *)(v18 + 136), (const char *)3, (int *)&v207);
          double v99 = Norma_Vec(3, (int *)&v207);
          if (fabs(v99) <= 1.0e-30)
          {
            double v100 = (int *)(v19 + 100584);
            if (g_FPE_LogSeverity)
            {
              unint64_t v111 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v112 = *(double *)(g_TCU + 8);
              }
              else {
                double v112 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "KF_createMeasExpectedValue", 858, v111, v112, v99, 1.0e-30);
            }
            g_FPE_AssertFlag = 1;
            double v99 = 1.0;
          }
          else
          {
            double v100 = (int *)(v19 + 100584);
          }
          Transpose_Mat(3, (uint64_t)&v207, 3, (uint64_t)&v207, v97, v98);
          Mult_Mat_scalar(-1.0 / v99, 3, (int *)&v207, (const char *)3, (int *)&v207);
          Sub_Mat(3, (int *)(v19 + 16944), 3, (int *)(v18 + 168), (const char *)3, (int *)&v202);
          Mult_Mat_Mat(3, (uint64_t)&v207, 3, (uint64_t)&v202, 3, (uint64_t)&v202);
          double v176 = *(double *)(v19 + 232);
          *(double *)(v74 + 8) = *(double *)(v19 + 224) - *((double *)&v202 + 1);
          double v177 = v99 + v176;
          if ((v95 & 0xFFFFFFFB) != 0) {
            double v177 = v177 + *(double *)(v19 + 8 * (unsigned __int16)v95 + 232);
          }
          *(double *)uint64_t v74 = v177;
          uint64_t v107 = v19 + 100640;
          Sub_Mat(6, v100, 6, (int *)&v212, (const char *)6, (int *)(v19 + 100640));
          *(void *)&long long v289 = 0;
          char v108 = (int *)(v19 + 92384);
          long long v287 = 0u;
          long long v288 = 0u;
          long long v286 = 0u;
          *(void *)&long long v210 = 0;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v207 = 0u;
LABEL_216:
          KF_createMeasurementNoiseCovMatrix(v19, 1, v18 + 72, v107, (uint64_t)v192, (uint64_t)v200, (uint64_t)v108, (uint64_t)v20, (uint64_t)v12);
          KF_calcConsisGains(v19, 1, v18 + 72, v107, (uint64_t)v192, (uint64_t)&v286);
          int v114 = v194;
          if (v194)
          {
            unsigned int v178 = *(_DWORD *)(v193 + 17512);
            if (v178 <= 0x2F) {
              *(_DWORD *)(v193 + 17512) = ++v178;
            }
            uint64_t v117 = v178 - 1;
            *(void *)(v193 + 8 * v117 + 8) = *(void *)v18;
            uint64_t v179 = v193 + 6360 + v117;
            *(unsigned char *)(v179 + 152) = 1;
            int v180 = (unsigned char *)(v179 + 152);
            *(v180 - 96) = 1;
            uint64_t v181 = v193 + 784 + v117;
            *(unsigned char *)(v181 + 152) = 1;
            int16x8_t v182 = (unsigned char *)(v181 + 152);
            *(v182 - 96) = 1;
            uint64_t v183 = v193 + 784 + 8 * v117;
            *(void *)(v183 + 2024) = *(void *)(v74 + 56);
            uint64_t v184 = v193 + 6360 + 8 * v117;
            *(void *)(v184 + 2024) = *(void *)(v74 + 64);
            *(void *)(v183 + 4040) = *(void *)(v19 + 92392);
            *(void *)(v184 + 4040) = *(void *)(v19 + 8 * (*(_DWORD *)(v19 + 92388) + 1) + 92392);
            uint64_t v185 = v193 + 4 * v117;
            *(_DWORD *)(v185 + 400) = *(_DWORD *)(v18 + 128);
            *(_DWORD *)(v185 + 592) = *(_DWORD *)(v18 + 132) + 1;
            if (v20[1] == 0.0)
            {
              *(_DWORD *)(v193 + 4 * v117 + 1032) = 21;
              *int16x8_t v182 = 0;
            }
            if (v20[2] == 0.0)
            {
              *(_DWORD *)(v193 + 4 * v117 + 6608) = 21;
              *int v180 = 0;
            }
            Copy_SubMat_from_Mat(1.0, 1024, v192, 0, 6, 1, 3u, 3, (int *)(v193 + 144 * v117 + 17520));
          }
          else
          {
            LODWORD(v117) = 0;
          }
          Set_Mat_Size((const char *)6, (int *)&v207, 0, 0);
          CCH_insertMeas(v19 + 48760, 1, (uint64_t)v200, (uint64_t)&v286, (uint64_t)v20, (unsigned int *)&v207);
          break;
        case 4:
          KF_getVelocityCorrectionFromLeverArm(v19, (int *)&v229, (int *)&v227);
          Sub_Mat(3, (int *)(v19 + 16944), 3, (int *)&v229, (const char *)0x20, (int *)__x);
          Set_Mat_Const((const char *)4, 1u, (const char *)6, (int *)(v19 + 100584), 0.0);
          Mult_MatT_Mat(9, (uint64_t)v186, 32, (uint64_t)__x, 3, (uint64_t)&v202);
          VecSet_3x1((const char *)3, (uint64_t)v231, *(double *)(v19 + 176), *(double *)(v19 + 184), *(double *)(v19 + 192));
          double v103 = Norma_Vec(32, (int *)__x);
          Add_Mat_ScalarMult(-v103, 3, (int *)&v202, 3, (int *)v231, (const char *)3, (int *)&v202);
          Copy_SubMat_to_Mat(1.0, 3, &v202, 0, 0, 6, (int *)(v19 + 100584));
          *(double *)(v74 + 24) = Norma_Vec(3, (int *)v231) + -1.0;
          goto LABEL_107;
        case 5:
          Set_Mat_Const((const char *)6, 1u, (const char *)6, v188, 0.0);
          int v96 = (int *)(v19 + 100584);
          Sub_Mat(3, (int *)(v19 + 17008), 3, (int *)(v19 + 17224), (const char *)3, (int *)&v202);
          Copy_SubMat_to_Mat(1.0, 3, &v202, 0, 0, 6, v188);
          Copy_Mat(9, v186, (const char *)9, (int *)v254);
          Copy_Mat(9, (int *)(v19 + 17288), (const char *)9, (int *)&v232);
          Mult_Mat_MatT(9, (uint64_t)v254, 9, (uint64_t)&v232, 9, (uint64_t)&v237);
          extractOfromC((uint64_t)&v237, (uint64_t)&v202);
          Copy_SubMat_to_Mat(1.0, 3, &v202, 3, 0, 6, v188);
          goto LABEL_107;
        case 8:
          Copy_Mat(3, (int *)(v19 + 17008), (const char *)6, (int *)(v19 + 100584));
          goto LABEL_107;
        case 9:
          long long v289 = 0uLL;
          long long v290 = 0uLL;
          long long v287 = 0uLL;
          long long v288 = 0uLL;
          long long v286 = 0uLL;
          long long v225 = 0uLL;
          long long v226 = 0uLL;
          createC_e_map((int *)(v18 + 128), (int *)(v18 + 160), v19 + 16832, (uint64_t)&v286, (int *)&v225);
          long long v223 = 0u;
          long long v224 = 0u;
          Add_Mat(3, (int *)(v18 + 160), 3, (int *)(v18 + 128), (const char *)3, (int *)&v223);
          Add_Mat_ScalarMult(-0.5, 3, (int *)(v19 + 17008), 3, (int *)&v223, (const char *)3, (int *)&v223);
          Mult_Mat_Mat(9, (uint64_t)&v286, 3, (uint64_t)&v223, 3, (uint64_t)&v223);
          double v104 = Norma_Vec(3, (int *)&v225);
          if (v104 < 0.1 && (g_FPE_LogSeverity & 2) != 0)
          {
            unint64_t v105 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v106 = *(double *)(g_TCU + 8);
            }
            else {
              double v106 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f Map vector is too short! norma = %f", "KF_createMeasExpectedValue", 964, v105, v106, v104);
          }
          Mult_Mat_scalar(1.0 / v104, 3, (int *)&v225, (const char *)3, (int *)&v225);
          long long v221 = 0u;
          long long v222 = 0u;
          Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 21, 0, 3, 1u, 3, (int *)&v221);
          long long v219 = 0u;
          long long v220 = 0u;
          Mult_Mat_Mat(9, (uint64_t)v186, 3, (uint64_t)&v221, 3, (uint64_t)&v219);
          Sub_Mat(3, (int *)&v225, 3, (int *)&v219, (const char *)3, (int *)&v219);
          Set_Mat_Size((const char *)6, v188, 4, 1);
          Copy_SubMat_to_Mat(1.0, 3, &v219, 1, 0, 6, v188);
          *(void *)uint64_t v74 = v224;
          uint64_t v107 = v19 + 100640;
          Sub_Mat(6, v188, 6, (int *)&v212, (const char *)6, (int *)(v19 + 100640));
          *(void *)&long long v289 = 0;
          char v108 = (int *)(v19 + 92384);
          long long v287 = 0u;
          long long v288 = 0u;
          long long v286 = 0u;
          *(void *)&long long v210 = 0;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v207 = 0u;
LABEL_132:
          KF_createMeasurementNoiseCovMatrix(v19, 10, v18 + 72, v107, (uint64_t)v192, (uint64_t)v200, (uint64_t)v108, (uint64_t)v20, (uint64_t)v12);
          KF_calcConsisGains(v19, 10, v18 + 72, v107, (uint64_t)v192, (uint64_t)&v286);
          Set_Mat_Size((const char *)6, (int *)&v207, 0, 0);
          CCH_insertMeas(v19 + 48760, 10, (uint64_t)v200, (uint64_t)&v286, (uint64_t)v20, (unsigned int *)&v207);
          goto LABEL_133;
        case 10:
          Set_Mat_Const((const char *)1, 1u, (const char *)6, (int *)(v19 + 100584), 0.0);
          long long v286 = 0u;
          long long v287 = 0u;
          InsUtil_ECEF2Geo_Iterative((double *)(v19 + 17008), (uint64_t)&v286, 6378137.0);
          *(void *)uint64_t v74 = *((void *)&v287 + 1);
LABEL_107:
          uint64_t v107 = v19 + 100640;
          Sub_Mat(6, v96, 6, (int *)&v212, (const char *)6, (int *)(v19 + 100640));
          *(void *)&long long v289 = 0;
          char v108 = (int *)(v19 + 92384);
          long long v287 = 0u;
          long long v288 = 0u;
          long long v286 = 0u;
          *(void *)&long long v210 = 0;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v207 = 0u;
LABEL_108:
          KF_createMeasurementNoiseCovMatrix(v19, v199, v18 + 72, v107, (uint64_t)v192, (uint64_t)v200, (uint64_t)v108, (uint64_t)v20, (uint64_t)v12);
          KF_calcConsisGains(v19, v199, v18 + 72, v107, (uint64_t)v192, (uint64_t)&v286);
          KF_sendMeas2Checker(v19, v199, (uint64_t)v200, (uint64_t)&v286, (uint64_t)v20, v107, (uint64_t)&v207);
LABEL_133:
          LODWORD(v117) = 0;
          int v114 = v194;
          break;
        default:
          if (g_FPE_LogSeverity)
          {
            unint64_t v101 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v102 = *(double *)(g_TCU + 8);
            }
            else {
              double v102 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f measType = %d is not supported!", "KF_createMeasExpectedValue", 981, v101, v102, v199);
          }
          g_FPE_AssertFlag = 1;
          uint64_t v107 = v19 + 100640;
          Sub_Mat(6, (int *)(v19 + 100584), 6, (int *)&v212, (const char *)6, (int *)(v19 + 100640));
          *(void *)&long long v289 = 0;
          char v108 = (int *)(v19 + 92384);
          long long v287 = 0u;
          long long v288 = 0u;
          long long v286 = 0u;
          *(void *)&long long v210 = 0;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v207 = 0u;
          switch(v76)
          {
            case 0:
              goto LABEL_216;
            case 6:
            case 8:
            case 10:
              goto LABEL_108;
            case 9:
              goto LABEL_132;
            default:
              int v114 = v194;
              if (g_FPE_LogSeverity)
              {
                unint64_t v115 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                if (g_TCU) {
                  double v116 = *(double *)(g_TCU + 8);
                }
                else {
                  double v116 = 0.0;
                }
                LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unsupported case %d in creareR", "KF_ApplySingleMeas", 2067, v115, v116, v199);
              }
              LODWORD(v117) = 0;
              g_FPE_AssertFlag = 1;
              break;
          }
          break;
      }
      Sum_Mat(6, v20);
      if (v118 > 0.0)
      {
        uint64_t v285 = 0;
        long long v284 = 0u;
        long long v283 = 0u;
        long long v282 = 0u;
        long long v281 = 0u;
        long long v280 = 0u;
        long long v279 = 0u;
        long long v278 = 0u;
        long long v277 = 0u;
        long long v276 = 0u;
        long long v275 = 0u;
        long long v274 = 0u;
        long long v273 = 0u;
        long long v272 = 0u;
        long long v271 = 0u;
        memset(__x, 0, sizeof(__x));
        Mat_Eq_Scalar(0.0, 6, (int *)v20, (const char *)0x20, (int *)__x);
        Sum_Mat(32, __x);
        if (v119 > 0.1)
        {
          if (Find_First_NonZero_in_Vector_Starting_At(6, (int *)v20, 0) == -1)
          {
            if (g_FPE_LogSeverity)
            {
              unint64_t v122 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v123 = *(double *)(g_TCU + 8);
              }
              else {
                double v123 = 0.0;
              }
              LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f could not find any non-zero elemnts in measIndex!", "KF_filterMeasByIndex", 1377, v122, v123);
            }
            g_FPE_AssertFlag = 1;
          }
          else
          {
            Filter_Rows_from_Mat(6, (int *)&v212, 6, (int *)v20);
            Filter_Rows_from_Mat(1024, v108, 6, (int *)v20);
            Filter_Cols_from_Mat(1024, (uint64_t)v108, 6, (uint64_t)v20, v120, v121);
            Filter_Rows_from_Mat(1024, v192, 6, (int *)v20);
            Filter_Rows_from_Mat(6, v188, 6, (int *)v20);
          }
        }
        *(void *)&long long v205 = 0;
        long long v203 = 0u;
        long long v204 = 0u;
        long long v202 = 0u;
        Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 28, 0, 4, 1u, 6, (int *)&v202);
        double v124 = *(double *)(v19 + 224);
        bzero(__x, 0x2008uLL);
        bzero(v254, 0x2008uLL);
        Mult_Mat_MatT(1024, v19 + 264, 1024, (uint64_t)v192, 1024, (uint64_t)v254);
        Mult_Mat_Mat(1024, (uint64_t)v192, 1024, (uint64_t)v254, 1024, (uint64_t)__x);
        Add_Mat(1024, (int *)__x, 1024, v108, (const char *)0x400, (int *)__x);
        Invert_Mat(1024, (uint64_t)__x, 1024, (uint64_t)__x, v125, v126);
        Mult_Mat_Mat(1024, (uint64_t)v254, 1024, (uint64_t)__x, 1024, v19 + 8464);
        uint64_t v253 = 0;
        long long v252 = 0u;
        long long v251 = 0u;
        long long v250 = 0u;
        long long v249 = 0u;
        long long v248 = 0u;
        long long v247 = 0u;
        long long v246 = 0u;
        long long v245 = 0u;
        long long v244 = 0u;
        long long v243 = 0u;
        long long v242 = 0u;
        long long v241 = 0u;
        long long v240 = 0u;
        long long v239 = 0u;
        long long v238 = 0u;
        long long v237 = 0u;
        Sub_Mat(6, (int *)&v212, 6, v188, (const char *)0x20, (int *)&v237);
        bzero(&v232, 0x2008uLL);
        Mult_Mat_Mat(1024, v19 + 8464, 32, (uint64_t)&v237, 1024, (uint64_t)&v232);
        Add_Mat(32, (int *)v19, 1024, (int *)&v232, (const char *)0x20, (int *)v19);
        Mult_Mat_Mat(1024, v19 + 8464, 1024, (uint64_t)v192, 1024, (uint64_t)__x);
        Mult_Mat_Mat(1024, (uint64_t)__x, 1024, v19 + 264, 1024, (uint64_t)__x);
        Sub_Mat(1024, (int *)(v19 + 264), 1024, (int *)__x, (const char *)0x400, (int *)(v19 + 264));
        if (v114)
        {
          *(void *)&long long v272 = 0;
          long long v271 = 0u;
          memset(__x, 0, sizeof(__x));
          Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 28, 0, 4, 1u, 6, (int *)__x);
          *(void *)&long long v256 = 0;
          long long v255 = 0u;
          memset(v254, 0, sizeof(v254));
          Sub_Mat(6, (int *)__x, 6, (int *)&v202, (const char *)6, (int *)v254);
          double v127 = *(double *)(v19 + 224) - v124;
          long long v232 = 0u;
          long long v233 = 0u;
          Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 6, 0, 3, 1u, 3, (int *)&v232);
          Transpose_Mat(3, (uint64_t)&v232, 3, (uint64_t)&v232, v128, v129);
          uint64_t v130 = v193 + 144 * v117;
          double v131 = Dot_Vec_Vec(3, (uint64_t)&v232, 3, v130 + 17520);
          Sum_Mat(6, v254);
          uint64_t v133 = v193 + 8 * v117;
          *(double *)(v130 + 17552) = *(double *)(v133 + 2808) + v131 + v132;
          long long v238 = 0u;
          long long v237 = 0u;
          Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 3, 0, 3, 1u, 3, (int *)&v237);
          Transpose_Mat(3, (uint64_t)&v237, 3, (uint64_t)&v237, v134, v135);
          *(double *)(v130 + 17560) = *(double *)(v133 + 8384)
                                    + v127
                                    + Dot_Vec_Vec(3, (uint64_t)&v237, 3, v130 + 17520);
        }
      }
      KF_ApplyCorrectionsFromKalmanFullStates(v19);
      if (v114)
      {
        unsigned int v136 = v117;
        uint64_t v137 = v193 + 144 * v117;
        Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(v137 + 17568), 0.0);
        Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(v137 + 17600), 0.0);
        Copy_Mat(3, (int *)(v19 + 17008), (const char *)3, (int *)(v137 + 17568));
        Copy_Mat(3, (int *)(v19 + 16944), (const char *)3, (int *)(v137 + 17600));
        double v138 = *(double *)(v19 + 8 * (28 * *(_DWORD *)(v19 + 4)) + 8);
        *(double *)(v137 + 17632) = v138;
        int v139 = *(_DWORD *)(v18 + 132);
        if ((v139 | 4) != 4) {
          *(double *)(v137 + 17632) = v138 + *(double *)(v19 + 8 * (v139 + 28) + 8);
        }
        *(void *)(v193 + 144 * v136 + 17640) = *(void *)(v19 + 224);
      }
      if (v187)
      {
        unsigned int v140 = *(_DWORD *)(v18 + 132);
        int v141 = KF_reduceSvInd(*(_DWORD *)(v18 + 128), v140);
        if (v141)
        {
          unsigned int v142 = v141 + 37 * v140 - 1;
          *(void *)(v19 + 34376 + 8 * v142 + 192) = *(void *)(v19 + 17192);
          *(unsigned char *)(v19 + 34376 + v142) = 1;
          uint64_t v143 = v19 + 34376 + 24 * v142;
          *(_OWORD *)(v143 + 1672) = *(_OWORD *)v197;
          *(void *)(v143 + 1688) = *(void *)(v19 + 17032);
        }
      }
      if (v190)
      {
        memset(__x, 0, sizeof(__x));
        Add_Mat(3, (int *)(v18 + 160), 3, (int *)(v18 + 128), (const char *)3, (int *)__x);
        Mult_Mat_scalar(0.5, 3, (int *)__x, (const char *)3, (int *)__x);
        v22[1] = *(double *)(v19 + 17192);
        *(unsigned char *)int v22 = 1;
        *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)__x + 8);
        void v22[4] = *((double *)&__x[1] + 1);
      }
      Set_Mat_Const((const char *)*(unsigned int *)v20, *((_DWORD *)v20 + 1), (const char *)6, v198, -1.0);
      if (*(_DWORD *)v20)
      {
        unint64_t v144 = 0;
        __int16 v145 = v198 + 2;
        uint64_t v146 = v19 + 117104;
        do
        {
          if (CheckPassFlag(*(double *)(v146 + 8 * v144))) {
            *(void *)&v145[2 * v144] = 0x3FF0000000000000;
          }
          if ((CheckPassFlag(*(double *)(v146 + 8 * v144)) & 1) == 0) {
            *(void *)&v145[2 * v144] = 0;
          }
          ++v144;
        }
        while (v144 < *(unsigned int *)v20);
      }
      uint64_t v16 = v191;
      uint64_t v59 = (uint64_t)v198;
LABEL_163:
      KF_LogStatistics(v19, v18, v59);
      uint64_t v54 = 1;
      if (v199 != 4) {
        return v54;
      }
      uint64_t v147 = v16;
      long long v273 = 0u;
      long long v272 = 0u;
      long long v271 = 0u;
      memset(__x, 0, sizeof(__x));
      Mult_Mat_Mat(9, v19 + 16832, 9, v19 + 16672, 9, (uint64_t)__x);
      memset(v254, 0, sizeof(v254));
      Set_Mat_Size((const char *)3, (int *)v254, 3, 1);
      uint64_t v148 = DWORD1(__x[0]);
      unsigned int v149 = DWORD1(__x[0]);
      v254[0].f64[1] = atan2(*((long double *)__x + ((2 * DWORD1(__x[0])) | 1u) + 1), *((long double *)__x + (2 * DWORD1(__x[0]) + 2) + 1))* 57.2957795;
      v254[1].f64[0] = asin(*((long double *)&__x[v149] + 1)) * 57.2957795;
      v254[1].f64[1] = atan2(*((long double *)__x + v148 + 1), *((long double *)__x + 1)) * 57.2957795;
      double v150 = v23 - v20[46];
      if (v150 <= 0.0)
      {
        VecSet_3x1((const char *)3, v19 + 17760, 0.0, 0.0, 0.0);
        char v153 = v189;
      }
      else
      {
        Sub_Mat(3, (int *)v254, 3, (int *)(v19 + 17728), (const char *)3, (int *)(v19 + 17760));
        uint64_t v151 = 0;
        uint64_t v152 = v19 + 17768;
        char v153 = v189;
        do
        {
          double v154 = *(double *)(v152 + v151);
          double v155 = -360.0;
          if (v154 >= 180.0 || (double v155 = 360.0, v154 < -180.0)) {
            *(double *)(v152 + v151) = v154 + v155;
          }
          v151 += 8;
        }
        while (v151 != 24);
        Mult_Mat_scalar(1.0 / v150, 3, (int *)(v19 + 17760), (const char *)3, (int *)(v19 + 17760));
      }
      Copy_Mat(3, (int *)v254, (const char *)3, (int *)(v19 + 17728));
      uint64_t v285 = 0;
      long long v284 = 0u;
      long long v283 = 0u;
      long long v282 = 0u;
      long long v281 = 0u;
      long long v280 = 0u;
      long long v279 = 0u;
      long long v278 = 0u;
      long long v277 = 0u;
      long long v276 = 0u;
      long long v275 = 0u;
      long long v274 = 0u;
      long long v273 = 0u;
      long long v272 = 0u;
      long long v271 = 0u;
      memset(__x, 0, sizeof(__x));
      long long v212 = 0u;
      long long v213 = 0u;
      Mult_Mat_Mat(9, v19 + 16832, 3, v19 + 16944, 3, (uint64_t)&v212);
      long long v207 = 0u;
      long long v208 = 0u;
      Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)v19, 21, 0, 3, 1u, 3, (int *)&v207);
      long long v257 = 0u;
      long long v256 = 0u;
      long long v255 = 0u;
      memset(v254, 0, sizeof(v254));
      Mult_Mat_Mat(9, v19 + 16832, 9, v19 + 16672, 9, (uint64_t)v254);
      Mult_Mat_Mat(9, (uint64_t)v254, 3, (uint64_t)&v207, 9, (uint64_t)v254);
      long long v235 = 0u;
      long long v236 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      long long v232 = 0u;
      Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v19 + 264), 0, 0, 3, 3u, 9, (int *)&v232);
      long long v241 = 0u;
      long long v240 = 0u;
      long long v239 = 0u;
      long long v238 = 0u;
      long long v237 = 0u;
      Mult_Mat_Mat(9, v19 + 16832, 9, (uint64_t)&v232, 9, (uint64_t)&v237);
      Mult_Mat_MatT(9, (uint64_t)&v237, 9, v19 + 16832, 9, (uint64_t)&v237);
      long long v289 = 0u;
      long long v290 = 0u;
      long long v287 = 0u;
      long long v288 = 0u;
      long long v286 = 0u;
      Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v19 + 264), 21, 21, 3, 3u, 9, (int *)&v286);
      long long v202 = 0u;
      long long v203 = 0u;
      Copy_Mat_diag_to_Vec(9, (unsigned int *)&v286, 0, 0, 3, &v202);
      Sqrt_Mat(3, (int *)&v202, (const char *)3, (int *)&v202);
      double v156 = *((double *)&v237 + (2 * DWORD1(v237) + 2) + 1);
      if (v156 >= 0.0)
      {
        unsigned int v157 = v196;
      }
      else
      {
        unsigned int v157 = v196;
        if (g_FPE_LogSeverity)
        {
          unint64_t v158 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v159 = *(double *)(g_TCU + 8);
          }
          else {
            double v159 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KF_consisPreprocessStates", 3523, v158, v159, v156);
        }
        g_FPE_AssertFlag = 1;
        double v156 = 1.0;
      }
      if (sqrt(v156) >= 0.1 || (double v160 = 1.0, (All_Mat_Smaller_Than(0.1, 3, (unsigned int *)&v202) & 1) == 0)) {
        double v160 = 0.0;
      }
      Set_Mat_Const((const char *)0xD, 1u, (const char *)0x20, (int *)__x, 0.0);
      *((double *)__x + 1) = v160;
      Copy_SubMat_to_Mat(1.0, 3, &v212, 1, 0, 32, (int *)__x);
      int v161 = DWORD1(v212) * v212 + 1;
      Copy_SubMat_to_Mat(1.0, 9, v254, v161, 0, 32, (int *)__x);
      int v162 = v161 + HIDWORD(v254[0].f64[0]) * LODWORD(v254[0].f64[0]);
      int v163 = v197;
      Copy_SubMat_to_Mat(1.0, 3, v197 + 16, v162, 0, 32, (int *)__x);
      int v164 = v162 + v163[17] * v163[16];
      Copy_SubMat_to_Mat(1.0, 3, v197 + 24, v164, 0, 32, (int *)__x);
      int v166 = v164 + v163[25] * v163[24];
      if (v166 != 13)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v167 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v168 = *(double *)(g_TCU + 8);
          }
          else {
            double v168 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Wrong number of elements (%u) were written to vector!", "KF_consisPreprocessStates", 3546, v167, v168, v166);
        }
        g_FPE_AssertFlag = 1;
      }
      *(int32x2_t *)&__x[0] = vrev64_s32(*(int32x2_t *)&__x[0]);
      v254[0].f64[0] = 0.0;
      int64x2_t v169 = (int *)(v19 + 48760);
      BOOL v170 = CCH_Run((uint64_t)v169, (uint64_t)__x, *v157, v147, (uint64_t)v254, v165);
      float64_t v171 = v254[0].f64[0];
      *(float64_t *)(v195 + 18624) = v254[0].f64[0];
      ++*((_DWORD *)v20 + 88);
      v20[45] = v171;
      if (*v157)
      {
        if (*(unsigned char *)v195) {
          char v172 = v170;
        }
        else {
          char v172 = 1;
        }
        if ((v172 & 1) == 0) {
          goto LABEL_197;
        }
        return 1;
      }
      if (v170) {
        return 1;
      }
LABEL_197:
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v173 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v174 = *(double *)(g_TCU + 8);
        }
        else {
          double v174 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Divergence detected with confidence %f at KF#%d", "KF_callConsistencyChecker", 3609, v173, v174, v254[0].f64[0], *((_DWORD *)v153 + 11));
      }
      CCH_initStates(v169);
      return 0;
  }
}

void KF_sendMeas2Checker(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  Set_Mat_Size((const char *)6, (int *)a7, 0, 0);
  if (a2 == 9)
  {
    Mult_Mat_Mat(9, a1 + 16832, 6, a6, 6, a7);
    *(int32x2_t *)a7 = vrev64_s32(*(int32x2_t *)a7);
  }
  else if (a2 == 2)
  {
    if (*(double *)(a3 + 136) == 0.0
      || *(double *)(a3 + 144) == 0.0
      || *(double *)(a3 + 152) == 0.0
      || !*(unsigned char *)(a3 + 193))
    {
      Set_Mat_Const((const char *)1, 6u, (const char *)6, (int *)a7, NAN);
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      Set_Mat_Size((const char *)3, (int *)v17, 3, 1);
      *(float64x2_t *)((char *)v17 + 8) = vmulq_f64(*(float64x2_t *)(a3 + 136), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
      *((void *)&v17[1] + 1) = *(void *)(a3 + 152);
      memset(v16, 0, sizeof(v16));
      InsUtil_Geo2ECEF_Iterative((double *)v17, (uint64_t)v16);
      Sub_Mat(3, (int *)(a1 + 17008), 3, (int *)v16, (const char *)3, (int *)v16);
      Mult_Mat_Mat(9, a1 + 16832, 3, (uint64_t)v16, 6, a7);
      *(int32x2_t *)a7 = vrev64_s32(*(int32x2_t *)a7);
      Set_Mat_Size((const char *)6, (int *)a7, 1, 6);
      double v14 = *(double *)(a3 + 168);
      if (v14 == 0.0 && *(double *)(a3 + 176) == 0.0 && *(double *)(a3 + 184) == 0.0 || !*(unsigned char *)(a3 + 194))
      {
        *(int64x2_t *)(a7 + 32) = vdupq_n_s64(0x7FF8000000000000uLL);
        uint64_t v15 = 0x7FF8000000000000;
      }
      else
      {
        *(double *)(a7 + 32) = v14;
        *(void *)(a7 + 40) = *(void *)(a3 + 176);
        uint64_t v15 = *(void *)(a3 + 184);
      }
      *(void *)(a7 + 48) = v15;
    }
  }
  CCH_insertMeas(a1 + 48760, a2, a3, a4, a5, (unsigned int *)a7);
}

void KF_calcConsisGains(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  double v14 = v13;
  int v16 = v15;
  uint64_t v17 = v6;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  ElMult_Mat_Mat(6, v13, 6, v13, (const char *)6, (int *)v72);
  uint64_t v18 = (const char *)(v14[1] * *v14);
  bzero(v71, 0x2008uLL);
  Set_Mat_Const(v18, v18, (const char *)0x400, v71, 0.0);
  Copy_Vec_to_Mat_diag(6, (int *)v72, 0, 0, 1, 1, 1024, (unsigned int *)v71);
  bzero(v70, 0x2008uLL);
  Mult_Mat_Mat(1024, v10, 1024, v17 + 264, 1024, (uint64_t)v70);
  Mult_Mat_MatT(1024, (uint64_t)v70, 1024, v10, 1024, (uint64_t)v70);
  bzero(v69, 0x2008uLL);
  Add_Mat(1024, v70, 1024, v71, (const char *)0x400, v69);
  switch(v16)
  {
    case 1:
      bzero(v74, 0x2008uLL);
      Copy_Mat_diag_to_Vec(1024, (unsigned int *)v69, 0, 0, 1024, v74);
      Sqrt_Mat(1024, (int *)v74, (const char *)0x400, (int *)v74);
      ElDiv_Mat_Mat(6, v12, 1024, (int *)v74, (const char *)6, (int *)v8);
      goto LABEL_35;
    case 5:
      memset(v74, 0, 80);
      Copy_SubMat_from_Mat(1.0, 1024, v69, 0, 0, 3, 3u, 9, (int *)v74);
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      long long v68 = 0u;
      long long v67 = 0u;
      long long v66 = 0u;
      long long v65 = 0u;
      long long v64 = 0u;
      long long v63 = 0u;
      long long v62 = 0u;
      long long v61 = 0u;
      long long v60 = 0u;
      long long v59 = 0u;
      SVD_decomp(9, (uint64_t)v74, (const char *)9, (uint64_t)&v49, (const char *)9, (int *)&v64, (const char *)9, (uint64_t)&v59);
      if (DWORD1(v49) && v49)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        Copy_Mat_diag_to_Vec(9, (unsigned int *)&v64, 0, 0, 3, &v44);
        Sqrt_Mat(3, (int *)&v44, (const char *)3, (int *)&v44);
        long long v39 = 0u;
        long long v40 = 0u;
        Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)&v39, 1.0);
        ElDiv_Mat_Mat(3, (int *)&v39, 3, (int *)&v44, (const char *)3, (int *)&v44);
        Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)&v64, 0.0);
        Copy_Vec_to_Mat_diag(3, (int *)&v44, 0, 0, 1, 1, 9, (unsigned int *)&v64);
        long long v58 = 0u;
        long long v57 = 0u;
        long long v56 = 0u;
        long long v55 = 0u;
        long long v54 = 0u;
        Mult_Mat_Mat(9, (uint64_t)&v49, 9, (uint64_t)&v64, 9, (uint64_t)&v54);
        Mult_Mat_MatT(9, (uint64_t)&v54, 9, (uint64_t)&v59, 9, (uint64_t)&v54);
        long long v32 = 0u;
        long long v33 = 0u;
        Copy_SubMat_from_Mat(1.0, 6, v12, 0, 0, 3, 1u, 3, (int *)&v32);
        Mult_Mat_Mat(9, (uint64_t)&v54, 3, (uint64_t)&v32, 6, v8);
LABEL_35:
        *(int32x2_t *)uint64_t v8 = vrev64_s32(*(int32x2_t *)v8);
      }
      else
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v28 = *(double *)(g_TCU + 8);
          }
          else {
            double v28 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f SVD decomposition failed!", "KF_calcConsisGains", 3289, v27, v28);
        }
        g_FPE_AssertFlag = 1;
      }
      return;
    case 6:
      long long v68 = 0u;
      long long v67 = 0u;
      long long v66 = 0u;
      long long v65 = 0u;
      long long v64 = 0u;
      Copy_SubMat_from_Mat(1.0, 1024, v69, 0, 0, 3, 3u, 9, (int *)&v64);
      long long v60 = 0u;
      long long v59 = 0u;
      Copy_SubMat_from_Mat(1.0, 6, v12, 0, 0, 3, 1u, 3, (int *)&v59);
      bzero(&v49, 0x2008uLL);
      bzero(v74, 0x2008uLL);
      Invert_Mat(9, (uint64_t)&v64, 1024, (uint64_t)v74, v21, v22);
      Mult_Mat_Mat(1024, (uint64_t)v74, 3, (uint64_t)&v59, 1024, (uint64_t)&v49);
      Mult_MatT_Mat(3, (uint64_t)&v59, 1024, (uint64_t)&v49, 6, v8);
      Sqrt_Mat(6, (int *)v8, (const char *)6, (int *)v8);
      goto LABEL_35;
    case 9:
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(v17 + 264), 6, 6, 3, 3u, 9, (int *)&v49);
      long long v68 = 0u;
      long long v67 = 0u;
      long long v66 = 0u;
      uint64_t v23 = v17 + 16832;
      long long v65 = 0u;
      long long v64 = 0u;
      Mult_Mat_Mat(9, v23, 9, (uint64_t)&v49, 9, (uint64_t)&v64);
      Mult_Mat_MatT(9, (uint64_t)&v64, 9, v23, 9, (uint64_t)&v64);
      Add_Mat(9, (int *)&v64, 1024, v71, (const char *)9, (int *)&v64);
      long long v63 = 0u;
      long long v62 = 0u;
      long long v61 = 0u;
      long long v60 = 0u;
      long long v59 = 0u;
      long long v58 = 0u;
      long long v57 = 0u;
      long long v56 = 0u;
      long long v55 = 0u;
      long long v54 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      Copy_SubMat_from_Mat(1.0, 9, &v64, 0, 0, 2, 2u, 9, (int *)&v39);
      SVD_decomp(9, (uint64_t)&v39, (const char *)9, (uint64_t)&v59, (const char *)9, (int *)&v54, (const char *)9, (uint64_t)&v44);
      memset(v38, 0, sizeof(v38));
      Copy_Mat_diag_to_Vec(9, (unsigned int *)&v54, 0, 0, 3, v38);
      Sqrt_Mat(3, (int *)v38, (const char *)3, (int *)v38);
      memset(v37, 0, sizeof(v37));
      Set_Mat_Const((const char *)2, 1u, (const char *)3, (int *)v37, 1.0);
      ElDiv_Mat_Mat(3, (int *)v37, 3, (int *)v38, (const char *)3, (int *)v38);
      Set_Mat_Const((const char *)2, 2u, (const char *)9, (int *)&v54, 0.0);
      Copy_Vec_to_Mat_diag(3, (int *)v38, 0, 0, 1, 1, 9, (unsigned int *)&v54);
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      Mult_Mat_Mat(9, v23, 6, (uint64_t)v12, 9, (uint64_t)&v32);
      bzero(v74, 0x2008uLL);
      Copy_SubMat_from_Mat(1.0, 9, &v32, 0, 0, 2, 1u, 1024, (int *)v74);
      Mult_Mat_Mat(9, (uint64_t)&v59, 9, (uint64_t)&v54, 6, v8);
      Mult_Mat_MatT(6, v8, 9, (uint64_t)&v44, 6, v8);
      Mult_Mat_Mat(6, v8, 1024, (uint64_t)v74, 6, v8);
      double v24 = *((double *)&v64 + (2 * DWORD1(v64) + 2) + 1);
      if (v24 < 0.0)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v26 = *(double *)(g_TCU + 8);
          }
          else {
            double v26 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "KF_calcConsisGains", 3371, v25, v26, v24);
        }
        g_FPE_AssertFlag = 1;
        double v24 = 1.0;
      }
      double v29 = sqrt(v24);
      if (fabs(v29) <= 1.0e-30)
      {
        if (g_FPE_LogSeverity)
        {
          unint64_t v30 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v31 = *(double *)(g_TCU + 8);
          }
          else {
            double v31 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "KF_calcConsisGains", 3373, v30, v31, v29, 1.0e-30);
        }
        g_FPE_AssertFlag = 1;
        double v29 = 1.0;
      }
      Set_Mat_Size((const char *)6, (int *)v8, 3, 1);
      *(double *)(v8 + 24) = *((double *)&v33 + 1) / v29;
      goto LABEL_35;
    case 10:
    case 11:
      Set_Mat_Size((const char *)6, (int *)v8, 0, 0);
      goto LABEL_35;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v20 = *(double *)(g_TCU + 8);
        }
        else {
          double v20 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unsupported meas type %u !", "KF_calcConsisGains", 3387, v19, v20, v16);
      }
      g_FPE_AssertFlag = 1;
      goto LABEL_35;
  }
}

uint64_t CheckPassFlag(double a1)
{
  if (fabs(a1) < 1.0e-30) {
    return 0;
  }
  if (fabs(a1 + -1.0) < 1.0e-30) {
    return 1;
  }
  if (g_FPE_LogSeverity)
  {
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v4 = *(double *)(g_TCU + 8);
    }
    else {
      double v4 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input to CheckPassFlag is %f, which is not 0.0 nor 1.0", "CheckPassFlag", 134, v3, v4, a1);
  }
  uint64_t result = 0;
  g_FPE_AssertFlag = 1;
  return result;
}

uint64_t KF_LogStatistics(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = result + 117328;
  switch(v3)
  {
    case 0:
      *(unsigned char *)(result + 117400) = 1;
      *(unsigned char *)(result + 117408) = 1;
      *(_DWORD *)(result + 117404) = 0;
      *(void *)(result + 117416) = *(void *)a2;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 8:
    case 12:
      return result;
    case 5:
    case 6:
      *(unsigned char *)(result + 117424) = 1;
      if (*(unsigned char *)(result + 117432) && (uint64_t result = Any_Mat_Not_Equal_To(6, (unsigned int *)a3, 1, 0), result))
      {
        uint64_t result = Any_Mat_Equal_To(6, (unsigned int *)a3, 0, 0);
        if (result)
        {
          *(unsigned char *)(v6 + 104) = 0;
          if (v3 == 5)
          {
            *(_DWORD *)(v6 + 100) = 1000;
            __int16 v7 = g_FPE_LogSeverity;
            if ((g_FPE_LogSeverity & 8) != 0)
            {
              unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              if (g_TCU) {
                double v9 = *(double *)(g_TCU + 8);
              }
              else {
                double v9 = 0.0;
              }
              uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Unmount while moving (%f)", "KF_LogStatistics", 3042, v8, v9, *(double *)(a2 + 128));
              __int16 v7 = g_FPE_LogSeverity;
            }
            if ((v7 & 0x200) != 0) {
              uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMC1,%d,%.1f");
            }
          }
          else
          {
            uint64_t result = All_Mat_Equal_To(6, (unsigned int *)a3, 0, 0);
            if (result)
            {
              *(_DWORD *)(v6 + 100) = 1002;
              __int16 v40 = g_FPE_LogSeverity;
              if ((g_FPE_LogSeverity & 8) != 0)
              {
                unint64_t v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                if (g_TCU) {
                  double v42 = *(double *)(g_TCU + 8);
                }
                else {
                  double v42 = 0.0;
                }
                uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Bad frozen indication, and unmount (%f)", "KF_LogStatistics", 3051, v41, v42, *(double *)(a2 + 128));
                __int16 v40 = g_FPE_LogSeverity;
              }
              if ((v40 & 0x200) != 0) {
                uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMC2,%d,%.1f");
              }
            }
            else
            {
              uint64_t result = Any_Mat_Equal_To(6, (unsigned int *)a3, 0, 3u);
              if (result)
              {
                *(_DWORD *)(v6 + 100) = 1004;
                __int16 v43 = g_FPE_LogSeverity;
                if ((g_FPE_LogSeverity & 8) != 0)
                {
                  unint64_t v44 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  if (g_TCU) {
                    double v45 = *(double *)(g_TCU + 8);
                  }
                  else {
                    double v45 = 0.0;
                  }
                  uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Bad frozen indication (%f)", "KF_LogStatistics", 3058, v44, v45, *(double *)(a2 + 128));
                  __int16 v43 = g_FPE_LogSeverity;
                }
                if ((v43 & 0x200) != 0) {
                  uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMC3,%d,%.1f");
                }
              }
              else
              {
                *(_DWORD *)(v6 + 100) = 1006;
                __int16 v46 = g_FPE_LogSeverity;
                if ((g_FPE_LogSeverity & 8) != 0)
                {
                  unint64_t v47 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  if (g_TCU) {
                    double v48 = *(double *)(g_TCU + 8);
                  }
                  else {
                    double v48 = 0.0;
                  }
                  uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f Unmount while frozen (%f)", "KF_LogStatistics", 3065, v47, v48, *(double *)(a2 + 128));
                  __int16 v46 = g_FPE_LogSeverity;
                }
                if ((v46 & 0x200) != 0) {
                  uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMC4,%d,%.1f");
                }
              }
            }
          }
          if (*(double *)(a2 + 128) > 0.0)
          {
            switch(*(_DWORD *)(v6 + 100))
            {
              case 0x3E8:
                int v49 = 1001;
                goto LABEL_108;
              case 0x3EA:
                int v49 = 1003;
                goto LABEL_108;
              case 0x3EC:
                int v49 = 1005;
                goto LABEL_108;
              case 0x3EE:
                int v49 = 1007;
LABEL_108:
                *(_DWORD *)(v6 + 100) = v49;
                break;
              default:
                if ((g_FPE_LogSeverity & 8) != 0)
                {
                  unint64_t v50 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  if (g_TCU) {
                    double v51 = *(double *)(g_TCU + 8);
                  }
                  else {
                    double v51 = 0.0;
                  }
                  uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MOTC no newStateCount", "KF_LogStatistics", 3088, v50, v51);
                }
                break;
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(v6 + 100) = 0;
      }
      *(void *)(v6 + 112) = *(void *)a2;
      break;
    case 9:
      double v12 = *(double *)(a3 + 8);
      BOOL v13 = v12 < 0.0;
      double v14 = floor(v12 + 0.5);
      double v15 = -floor(0.5 - v12);
      if (!v13) {
        double v15 = v14;
      }
      *(unsigned char *)(result + 117352) = 1;
      *(unsigned char *)(result + 117360) = v15 == 1;
      *(_DWORD *)(result + 117356) = 0;
      *(void *)(result + 117368) = *(void *)a2;
      if (v15 == 3)
      {
        *(_DWORD *)(result + 117356) = 1012;
        __int16 v28 = g_FPE_LogSeverity;
        if ((g_FPE_LogSeverity & 8) != 0)
        {
          unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v30 = *(double *)(g_TCU + 8);
          }
          else {
            double v30 = 0.0;
          }
          uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f POS ignored, Gross Error Detected", "KF_LogStatistics", 3012, v29, v30);
          __int16 v28 = g_FPE_LogSeverity;
        }
        if ((v28 & 0x200) != 0) {
          uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFPOS2,%d");
        }
      }
      else if (!v15)
      {
        *(_DWORD *)(result + 117356) = 1013;
        __int16 v16 = g_FPE_LogSeverity;
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v18 = *(double *)(g_TCU + 8);
          }
          else {
            double v18 = 0.0;
          }
          uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f POS ignored, outside of 5-sigma threshold", "KF_LogStatistics", 3006, v17, v18);
          __int16 v16 = g_FPE_LogSeverity;
        }
        if ((v16 & 0x200) != 0) {
          uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFPOS3,%d");
        }
      }
      break;
    case 10:
      double v19 = *(double *)(a3 + 8);
      BOOL v13 = v19 < 0.0;
      double v20 = floor(v19 + 0.5);
      double v21 = -floor(0.5 - v19);
      if (!v13) {
        double v21 = v20;
      }
      *(unsigned char *)uint64_t v6 = 1;
      *(unsigned char *)(result + 117336) = v21 == 1;
      *(_DWORD *)(result + 117332) = 0;
      switch(v21)
      {
        case 0u:
          *(_DWORD *)(result + 117332) = 1011;
          __int16 v22 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v24 = *(double *)(g_TCU + 8);
            }
            else {
              double v24 = 0.0;
            }
            uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MAP ignored, outside of 5-sigma threshold", "KF_LogStatistics", 2980, v23, v24);
            __int16 v22 = g_FPE_LogSeverity;
          }
          if ((v22 & 0x200) != 0) {
            uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMAP4,%d");
          }
          break;
        case 2u:
          *(_DWORD *)(result + 117332) = 1008;
          __int16 v31 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v32 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v33 = *(double *)(g_TCU + 8);
            }
            else {
              double v33 = 0.0;
            }
            uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MAP ignored due to correlation", "KF_LogStatistics", 2974, v32, v33);
            __int16 v31 = g_FPE_LogSeverity;
          }
          if ((v31 & 0x200) != 0) {
            uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMAP1,%d");
          }
          break;
        case 3u:
          *(_DWORD *)(result + 117332) = 1010;
          __int16 v34 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v36 = *(double *)(g_TCU + 8);
            }
            else {
              double v36 = 0.0;
            }
            uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MAP ignored, Gross Error Detected", "KF_LogStatistics", 2992, v35, v36);
            __int16 v34 = g_FPE_LogSeverity;
          }
          if ((v34 & 0x200) != 0) {
            uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMAP3,%d");
          }
          break;
        case 4u:
          *(_DWORD *)(result + 117332) = 1009;
          __int16 v37 = g_FPE_LogSeverity;
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            unint64_t v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v39 = *(double *)(g_TCU + 8);
            }
            else {
              double v39 = 0.0;
            }
            uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f MAP ignored, outside of Interval", "KF_LogStatistics", 2986, v38, v39);
            __int16 v37 = g_FPE_LogSeverity;
          }
          if ((v37 & 0x200) != 0) {
            uint64_t result = (uint64_t)LC_LOG_NMEA_GENERIC("%s,KFMAP2,%d");
          }
          break;
        default:
          break;
      }
      *(void *)(v6 + 16) = *(void *)a2;
      break;
    case 11:
      double v25 = *(double *)(a3 + 8);
      BOOL v13 = v25 < 0.0;
      double v26 = floor(v25 + 0.5);
      double v27 = -floor(0.5 - v25);
      if (!v13) {
        double v27 = v26;
      }
      *(unsigned char *)(result + 117376) = 1;
      *(unsigned char *)(result + 117384) = v27 == 1;
      *(_DWORD *)(result + 117380) = 0;
      *(void *)(result + 117392) = *(void *)a2;
      break;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v11 = *(double *)(g_TCU + 8);
        }
        else {
          double v11 = 0.0;
        }
        uint64_t result = (uint64_t)LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Meas %u is not logged for Statistics", "KF_LogStatistics", 3111, v10, v11, v3);
      }
      g_FPE_AssertFlag = 1;
      break;
  }
  return result;
}

const char *KF_initializeKalmanFilterCarMode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 67656;
  uint64_t v6 = a1 + 48752;
  uint64_t v7 = a1 + 40488;
  unint64_t v8 = (unsigned char *)(a1 + 34368);
  if (!*(unsigned char *)(a1 + 67656))
  {
    __int16 v16 = (_DWORD *)(a1 + 117320);
    unint64_t v17 = (_DWORD *)(a1 + 17960);
    *(unsigned char *)uint64_t v5 = 1;
    *(_DWORD *)(a1 + 17960) = 1;
    *(_DWORD *)(a1 + 40528) = 16843009;
    *(_DWORD *)(a1 + 40532) = a3;
    Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, (int *)a1, 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 264), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 8464), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 17792), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 17848), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 17904), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 17968), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 26168), 0.0);
    *(unsigned char *)(a1 + 117324) = 0;
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 67728), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 75928), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 84128), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 84184), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 92384), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 100584), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 100640), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 100696), 0.0);
    Set_Mat_Const((const char *)0x20, 0x20u, (const char *)0x400, (int *)(a1 + 108896), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 117096), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 117152), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 117208), 0.0);
    Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 117264), 0.0);
    *__int16 v16 = 12;
    Copy_Mat(6, (int *)a2, (const char *)6, (int *)(a1 + 17792));
    Copy_Mat(6, (int *)(a2 + 56), (const char *)6, (int *)(a1 + 17848));
    Copy_Mat(6, (int *)(a2 + 112), (const char *)6, (int *)(a1 + 17904));
    Copy_Mat(1024, (int *)(a2 + 456), (const char *)0x400, (int *)(a1 + 40544));
    double v9 = (const char *)*(unsigned int *)(a2 + 168);
    *unint64_t v17 = v9;
    Set_Mat_Const(v9, v9, (const char *)0x400, (int *)(a1 + 26168), 0.0);
    KF_createSystemModelMatrix(a1, 1, a1 + 17968, v10, v11, v12);
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    Set_Mat_Const((const char *)*v17, 1u, (const char *)0x20, (int *)v18, 0.0);
    v13.i32[0] = *(_DWORD *)(a2 + 173);
    int16x8_t v14 = (int16x8_t)vmovl_u8(v13);
    *(int8x8_t *)v14.i8 = vext_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v14.i8, 6uLL);
    *(_DWORD *)(v7 + 40) = vmovn_s16(v14).u32[0];
    *(unsigned char *)uint64_t v6 = 1;
  }
  INS_Init(a1 + 16664, *(unsigned char *)(a2 + 172), *(unsigned __int8 *)(a2 + 177), (double *)(a2 + 192), *(double *)(a2 + 184));
  CCH_initStates((int *)(a1 + 48760));
  *(void *)(v6 + 18616) = &sCCH_NeuralNWModel;
  *unint64_t v8 = 1;
  *(_OWORD *)(a1 + 34376) = 0u;
  *(_OWORD *)(a1 + 34392) = 0u;
  *(_OWORD *)(a1 + 34408) = 0u;
  *(_OWORD *)(a1 + 34424) = 0u;
  *(_OWORD *)(a1 + 34440) = 0u;
  *(_OWORD *)(a1 + 34456) = 0u;
  *(_OWORD *)(a1 + 34472) = 0u;
  *(_OWORD *)(a1 + 34488) = 0u;
  *(_OWORD *)(a1 + 34504) = 0u;
  *(_OWORD *)(a1 + 34520) = 0u;
  *(_OWORD *)(a1 + 34536) = 0u;
  *(_OWORD *)(a1 + 34545) = 0u;
  *(unsigned char *)uint64_t v7 = 0;
  Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, (int *)(a1 + 67384), 1.0);
  *(void *)(v6 + 18896) = 0x7FF8000000000000;
  *(void *)(v7 + 8256) = 0xC08F380000000000;
  *(_DWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v7 + 48) = 0;
  *(unsigned char *)(v5 + 1) = 1;
  KF_ResetStatistics(a1);
  return Set_Mat_Const((const char *)6, 1u, (const char *)6, (int *)(a1 + 67664), -999.0);
}

uint64_t KF_ResetStatistics(uint64_t result)
{
  *(unsigned char *)(result + 117424) = 0;
  *(_DWORD *)(result + 117428) = 0;
  *(void *)(result + 117440) = 0;
  *(unsigned char *)(result + 117376) = 0;
  *(_DWORD *)(result + 117380) = 0;
  *(unsigned char *)(result + 117384) = 0;
  *(void *)(result + 117392) = 0;
  *(unsigned char *)(result + 117352) = 0;
  *(_DWORD *)(result + 117356) = 0;
  *(unsigned char *)(result + 117360) = 0;
  *(void *)(result + 117368) = 0;
  *(unsigned char *)(result + 117328) = 0;
  *(_DWORD *)(result + 117332) = 0;
  *(unsigned char *)(result + 117336) = 0;
  *(void *)(result + 117344) = 0;
  *(unsigned char *)(result + 117400) = 0;
  *(_DWORD *)(result + 117404) = 0;
  *(unsigned char *)(result + 117408) = 0;
  *(void *)(result + 117416) = 0;
  *(unsigned char *)(result + 117432) = 1;
  *(_DWORD *)(result + 117448) = 0;
  *(void *)(result + 117456) = 0;
  return result;
}

void KF_prepOutput(uint64_t a1, int *a2, double a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)(a2 + 2112);
  uint64_t v7 = a1 + 67657;
  bzero(a2, 0x23E8uLL);
  memset(v52, 0, sizeof(v52));
  Mult_Mat_Mat(9, a1 + 16832, 9, a1 + 16672, 9, (uint64_t)v52);
  long long v50 = 0u;
  long long v51 = 0u;
  memset(v49, 0, sizeof(v49));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a1, 21, 0, 3, 1u, 3, (int *)v49);
  Mult_Mat_Mat(9, (uint64_t)v52, 3, (uint64_t)v49, 3, (uint64_t)&v50);
  double v8 = Norma_Vec(3, (int *)&v50);
  memset(v48, 0, sizeof(v48));
  Copy_Mat_diag_to_Vec(1024, (unsigned int *)(a1 + 264), 0x15u, 3, 3, v48);
  Sqrt_Mat(3, (int *)v48, (const char *)3, (int *)v48);
  int v9 = All_Mat_Smaller_Than(0.5, 3, (unsigned int *)v48);
  if (v8 > 1.0e-30 && (!*(unsigned char *)v7 ? (int v10 = 1) : (int v10 = v9), v10 == 1))
  {
    Mult_Mat_scalar(1.0 / v8, 3, (int *)&v50, (const char *)3, (int *)&v50);
    *((long double *)a2 + 10) = atan2(*(long double *)&v51, *((long double *)&v50 + 1));
    v6[2] = 1;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 264), 21, 21, 3, 3u, 9, (int *)&v43);
    Mult_Mat_Mat(9, (uint64_t)v52, 9, (uint64_t)&v43, 9, (uint64_t)(a2 + 2154));
    Mult_Mat_MatT(9, (uint64_t)(a2 + 2154), 9, (uint64_t)v52, 9, (uint64_t)(a2 + 2154));
    *(unsigned char *)uint64_t v7 = 0;
  }
  else
  {
    Set_Mat_I((const char *)3, (const char *)9, a2 + 2154, 1.0);
    *((void *)a2 + 10) = 0;
    v6[2] = 0;
    *(unsigned char *)uint64_t v7 = 1;
  }
  Transpose_Mat(3, a1 + 17008, 3, (uint64_t)a2, v11, v12);
  Transpose_Mat(3, a1 + 16944, 3, (uint64_t)(a2 + 8), v13, v14);
  uint64_t v15 = *(void *)(a1 + 17192);
  *((void *)a2 + 8) = v15;
  *((void *)a2 + 9) = v15;
  Transpose_Mat(9, a1 + 16672, 9, (uint64_t)(a2 + 22), v16, v17);
  Copy_Mat(9, (int *)v52, (const char *)9, a2 + 42);
  Copy_Mat(1024, (int *)(a1 + 264), (const char *)0x400, a2 + 62);
  Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 264), 6, 6, 3, 3u, 9, a2 + 2114);
  Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 264), 3, 3, 3, 3u, 9, a2 + 2134);
  Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 264), 27, 27, 5, 5u, 36, a2 + 2174);
  char v18 = 1;
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a1, 27, 0, 5, 1u, 6, a2 + 2248);
  v6[1] = 1;
  *((_OWORD *)a2 + 566) = *(_OWORD *)(a1 + 117328);
  long long v19 = *(_OWORD *)(a1 + 117344);
  long long v20 = *(_OWORD *)(a1 + 117360);
  long long v21 = *(_OWORD *)(a1 + 117376);
  *((_OWORD *)a2 + 570) = *(_OWORD *)(a1 + 117392);
  *((_OWORD *)a2 + 569) = v21;
  *((_OWORD *)a2 + 568) = v20;
  *((_OWORD *)a2 + 567) = v19;
  long long v22 = *(_OWORD *)(a1 + 117408);
  long long v23 = *(_OWORD *)(a1 + 117424);
  long long v24 = *(_OWORD *)(a1 + 117440);
  *((void *)a2 + 1148) = *(void *)(a1 + 117456);
  *((_OWORD *)a2 + 573) = v24;
  *((_OWORD *)a2 + 572) = v23;
  *((_OWORD *)a2 + 571) = v22;
  v6[3] = 1;
  double v25 = *(double *)(a1 + 17192);
  if (v25 < a3)
  {
    double v26 = a3 - v25;
    memset(v42, 0, sizeof(v42));
    Mult_Mat_scalar(a3 - v25, 3, (int *)(a1 + 16944), (const char *)3, (int *)v42);
    memset(v41, 0, sizeof(v41));
    Add_Mat(3, (int *)(a1 + 17008), 3, (int *)v42, (const char *)3, (int *)v41);
    double v27 = Norma_Vec(3, (int *)v42);
    if (v26 > 5.0 || v26 > 2.0 && v27 > 15.0)
    {
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v29 = *(double *)(g_TCU + 8);
        }
        else {
          double v29 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Extrapolate INVALID dt=%0.1fs dr=%0.2fm", "KF_prepOutput", 2665, v28, v29, v26, v27);
      }
      v6[3] = 0;
    }
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 264), 6, 6, 3, 3u, 9, (int *)&v43);
    memset(v40, 0, sizeof(v40));
    Copy_SubMat_from_Mat(v26 * v26, 1024, (_DWORD *)(a1 + 264), 3, 3, 3, 3u, 9, (int *)v40);
    memset(v39, 0, sizeof(v39));
    Copy_SubMat_from_Mat(v26 + v26, 1024, (_DWORD *)(a1 + 264), 6, 3, 3, 3u, 9, (int *)v39);
    memset(v38, 0, sizeof(v38));
    Add_Mat(9, (int *)v40, 9, (int *)v39, (const char *)9, (int *)v38);
    Add_Mat(9, (int *)v38, 9, (int *)&v43, (const char *)9, (int *)v38);
    Copy_SubMat_to_Mat(1.0, 9, v38, 6, 6, 1024, a2 + 62);
    *((double *)a2 + 9) = a3;
    Transpose_Mat(3, (uint64_t)v41, 3, (uint64_t)a2, v30, v31);
    *((double *)a2 + 8) = a3;
  }
  v6[6] = 1;
  double v32 = *(double *)(v7 + 15);
  double v33 = *(double *)(a1 + 8 * (*(_DWORD *)(v7 + 11) * *(_DWORD *)(v7 + 7) - 1) + 67672);
  if (vabdd_f64(v32, v33) < 180.0 && v32 - v33 != 0.0 && *(double *)(a1 + 17192) - v32 < 80.0)
  {
    char v18 = 0;
    v6[6] = 0;
  }
  double v34 = *((double *)a2 + 1);
  if (v34 <= -1.79769313e308 || v34 >= 1.79769313e308)
  {
    if (g_FPE_LogSeverity)
    {
      unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v37 = *(double *)(g_TCU + 8);
      }
      else {
        double v37 = 0.0;
      }
      LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f FPE output position has non valid value: %f", "KF_prepOutput", 2716, v36, v37, *((double *)a2 + 1));
    }
    char v35 = 0;
    g_FPE_AssertFlag = 1;
    v6[1] = 0;
  }
  else
  {
    char v35 = v6[1];
    if (v35)
    {
      char v35 = v6[2];
      if (v35)
      {
        if (v6[3]) {
          char v35 = v18;
        }
        else {
          char v35 = 0;
        }
      }
    }
  }
  *uint64_t v6 = v35;
}

void KF_initKFafterLeveling(uint64_t a1, int *a2, int *a3, double *a4, int *a5, double *a6, int *a7, _DWORD *a8, double a9)
{
  *(double *)(a1 + 17192) = a9;
  INS_InitAfterLeveling(a1 + 16664, a4, a5, a6, a7, a8);
  Copy_Mat(32, a2, (const char *)0x20, (int *)a1);
  Copy_Mat(1024, a3, (const char *)0x400, (int *)(a1 + 264));
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
}

void KF_softResetCmd(uint64_t a1, int a2, double a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v19 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v10 = xmmword_22BB0E730;
  int v11 = 23;
  uint64_t v6 = a1 + 67560;
  switch(a2)
  {
    case 0:
      Mult_Mat_scalar(a3, 1024, (int *)(a1 + 264), (const char *)0x400, (int *)(a1 + 264));
      KF_ApplyCorrectionsFromKalmanFullStates(a1);
      break;
    case 1:
      *(int64x2_t *)uint64_t v6 = vdupq_n_s64(0x40F86A0000000000uLL);
      *(void *)(a1 + 67576) = 0x40F86A0000000000;
      goto LABEL_10;
    case 2:
      Set_Mat_Const((const char *)0x20, 1u, (const char *)0x20, (int *)(a1 + 67384), 10.0);
LABEL_10:
      *(double *)(v6 + 88) = a3;
      break;
    case 3:
      Set_Mat_Cols_By_Idx(0.0, 1024, (unsigned int *)(a1 + 264), &v10);
      Set_Mat_Rows_By_Idx(0.0, 1024, (unsigned int *)(a1 + 264), &v10);
      memset(v9, 0, sizeof(v9));
      Copy_SubMat_from_Mat(1.0, 1024, (_DWORD *)(a1 + 40544), 21, 21, 3, 3u, 9, (int *)v9);
      Copy_SubMat_to_Mat(1.0, 9, v9, 21, 21, 1024, (int *)(a1 + 264));
      break;
    case 4:
      *(_OWORD *)(a1 + 34545) = 0u;
      *(_OWORD *)(a1 + 34520) = 0u;
      *(_OWORD *)(a1 + 34536) = 0u;
      *(_OWORD *)(a1 + 34488) = 0u;
      *(_OWORD *)(a1 + 34504) = 0u;
      *(_OWORD *)(a1 + 34456) = 0u;
      *(_OWORD *)(a1 + 34472) = 0u;
      *(_OWORD *)(a1 + 34424) = 0u;
      *(_OWORD *)(a1 + 34440) = 0u;
      *(_OWORD *)(a1 + 34392) = 0u;
      *(_OWORD *)(a1 + 34408) = 0u;
      *(_OWORD *)(a1 + 34376) = 0u;
      break;
    default:
      if (g_FPE_LogSeverity)
      {
        unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v8 = *(double *)(g_TCU + 8);
        }
        else {
          double v8 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f input type %u not supported!", "KF_softResetCmd", 3206, v7, v8, a2);
      }
      g_FPE_AssertFlag = 1;
      break;
  }
}

size_t posp_TimerInit(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 68, "posp_TimerInit");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 5, 1);
  }
  g_PospTmrData = 0;
  g_PospTmrData = 0;
  g_PospTmrData = 0;
  g_PospTmrData = -1;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "PSP", 68, "posp_TimerInit");
    return LbsOsaTrace_WriteLog(0x13u, __str, v4, 5, 1);
  }
  return result;
}

uint64_t posp_StartTimer(void *a1, int a2, unsigned int a3, int a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 68, "posp_StartTimer");
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 5, 1);
  }
  if (g_PospTmrData == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Timer In Use\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "posp_StartTimer", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
    }
    uint64_t v12 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
LABEL_12:
      bzero(__str, 0x410uLL);
      unint64_t v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "PSP", 68, "posp_StartTimer");
      LbsOsaTrace_WriteLog(0x13u, __str, v16, 5, 1);
      return 0;
    }
  }
  else if (AgpsFsmStartTimer(0x850106u, a3))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "posp_StartTimer", 1544);
      LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
    }
    uint64_t v12 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
      goto LABEL_12;
    }
  }
  else
  {
    g_PospTmrData = 1;
    g_PospTmrData = a1;
    g_PospTmrData = a4;
    g_PospTmrData = a2;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TmrStart,TmId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 73, "posp_StartTimer", g_PospTmrData);
      LbsOsaTrace_WriteLog(0x13u, __str, v19, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 68, "posp_StartTimer");
      uint64_t v12 = 1;
      LbsOsaTrace_WriteLog(0x13u, __str, v21, 5, 1);
    }
    else
    {
      return 1;
    }
  }
  return v12;
}

uint64_t posp_StopTimer(int a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "posp_StopTimer");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  if (a2 == 1 && g_PospTmrData != a1 && g_PospTmrData == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TmrActive,%u,TimerId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "posp_StopTimer", 770, g_PospTmrData, g_PospTmrData);
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    }
    goto LABEL_15;
  }
  if (AgpsFsmStopTimer(8716550))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "posp_StopTimer", 1545);
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    }
    g_PospTmrData = 0;
    g_PospTmrData = -1;
LABEL_15:
    uint64_t v11 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 68, "posp_StopTimer");
      LbsOsaTrace_WriteLog(0x13u, __str, v13, 5, 1);
      return 0;
    }
    return v11;
  }
  g_PospTmrData = 0;
  g_PospTmrData = 0;
  g_PospTmrData = -1;
  g_PospTmrData = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TmrStop,TmId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 73, "posp_StopTimer", g_PospTmrData);
    LbsOsaTrace_WriteLog(0x13u, __str, v16, 4, 1);
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v17 = mach_continuous_time();
  unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "posp_StopTimer");
  uint64_t v11 = 1;
  LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
  return v11;
}

size_t posp_TimerExpiry(int a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 68, "posp_TimerExpiry");
    LbsOsaTrace_WriteLog(0x13u, __str, v3, 5, 1);
  }
  if (a1 == 8716550)
  {
    if (g_PospTmrData)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TmrId,%u,Expired\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 73, "posp_TimerExpiry", g_PospTmrData);
        LbsOsaTrace_WriteLog(0x13u, __str, v5, 4, 1);
      }
      g_PospTmrData(g_PospTmrData, 1);
      g_PospTmrData = 0;
      g_PospTmrData = 0x7FFFFFFF;
      g_PospTmrData = 0;
      g_PospTmrData = 0;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "posp_TimerExpiry", 258);
        LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
      }
      g_PospTmrData = 0;
      g_PospTmrData = 0x7FFFFFFF;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "posp_TimerExpiry", 2052);
    LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 68, "posp_TimerExpiry");
    return LbsOsaTrace_WriteLog(0x13u, __str, v12, 5, 1);
  }
  return result;
}

size_t posp_TimerDeInit(void)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "PSP", 68, "posp_TimerDeInit");
    LbsOsaTrace_WriteLog(0x13u, __str, v1, 5, 1);
  }
  if (g_PospTmrData == 1)
  {
    if (AgpsFsmStopTimer(8716550))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "PSP", 69, "posp_TimerDeInit", 1545);
        int v4 = 0;
LABEL_9:
        LbsOsaTrace_WriteLog(0x13u, __str, v3, v4, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: TmrDeinit,TmrId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 73, "posp_TimerDeInit", g_PospTmrData);
      int v4 = 4;
      goto LABEL_9;
    }
    g_PospTmrData = 0;
    g_PospTmrData = 0;
    g_PospTmrData = 0;
    g_PospTmrData = -1;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "posp_TimerDeInit");
    return LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  return result;
}

uint64_t posp_IsTimerActive(int a1, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 68, "posp_IsTimerActive");
    LbsOsaTrace_WriteLog(0x13u, __str, v5, 5, 1);
  }
  int v6 = g_PospTmrData;
  int v7 = g_PospTmrData;
  int v8 = g_PospTmrData;
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if (v6 == a1 && v7 != 0 && v8 == a2)
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 68, "posp_IsTimerActive");
      uint64_t v14 = 1;
      LbsOsaTrace_WriteLog(0x13u, __str, v16, 5, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 68, "posp_IsTimerActive");
      LbsOsaTrace_WriteLog(0x13u, __str, v13, 5, 1);
    }
    return 0;
  }
  return v14;
}

uint64_t gnssdbg_GetLogSeverityME(int a1, int a2)
{
  if (a2 != 1)
  {
    if (!a2)
    {
      uint64_t result = 1;
      if (a1 > 847)
      {
        if (a1 <= 2304)
        {
          if (a1 <= 2048)
          {
            char v12 = a1 - 80;
            if ((a1 - 848) <= 0x12)
            {
              if (((1 << v12) & 0x5FE00) != 0) {
                return 4;
              }
              if (((1 << v12) & 0x20001) != 0) {
                return result;
              }
              if (a1 == 856) {
                return 2;
              }
            }
            if (a1 == 1544) {
              return 2;
            }
            if (a1 == 1815) {
              return 4;
            }
          }
          else if ((a1 - 2049) < 0x10)
          {
            return 2;
          }
        }
        else
        {
          uint64_t v7 = (a1 - 2305);
          if (v7 <= 0x20)
          {
            if (((1 << (a1 - 1)) & 0x1F7000000) != 0) {
              return 2;
            }
            if (((1 << (a1 - 1)) & 0x8800003) != 0) {
              return result;
            }
            if (v7 == 18) {
              return 4;
            }
          }
          char v8 = a1 + 92;
          if ((a1 - 2468) <= 0x10)
          {
            if (((1 << v8) & 0x1A3) != 0) {
              return 4;
            }
            if (((1 << v8) & 0x1F000) != 0) {
              return 2;
            }
            if (((1 << v8) & 0x14) != 0) {
              return result;
            }
          }
          uint64_t v9 = (a1 - 2404);
          if (v9 <= 0x3E)
          {
            if (((1 << v9) & 0x5000001000000001) != 0) {
              return 4;
            }
            if (((1 << v9) & 0x100000002020) != 0) {
              return result;
            }
            if (v9 != 16) {
              return 3;
            }
            return 2;
          }
        }
      }
      else
      {
        if (a1 > 512)
        {
          char v4 = a1 - 1;
          if ((a1 - 513) > 0x3E) {
            goto LABEL_8;
          }
          if (((1 << v4) & 0x670021E10000F9BFLL) != 0) {
            return 4;
          }
          if (((1 << v4) & 0x8810200) == 0)
          {
LABEL_8:
            if ((a1 - 590) <= 0xA)
            {
              int v5 = 1 << (a1 - 78);
              if ((v5 & 0x721) != 0) {
                return 4;
              }
              if ((v5 & 0x18) != 0) {
                return result;
              }
            }
            uint64_t v6 = (a1 - 770);
            if (v6 > 0x33) {
              return 3;
            }
            if (((1 << v6) & 0x8000000006001) != 0) {
              return result;
            }
            if (v6 != 42) {
              return 3;
            }
            return 4;
          }
          return 2;
        }
        uint64_t v10 = (a1 - 266);
        if (v10 <= 0x2E)
        {
          if (((1 << v10) & 0x70C080004625) != 0) {
            return 4;
          }
          if (((1 << v10) & 0xC005F900000) != 0) {
            return result;
          }
          if (v10 != 11) {
            return 3;
          }
          return 2;
        }
      }
    }
    return 3;
  }
  uint64_t result = 1;
  if (a1 <= 1024)
  {
    if (a1 > 782)
    {
      switch(a1)
      {
        case 848:
        case 858:
        case 860:
        case 862:
        case 865:
        case 866:
        case 867:
        case 870:
        case 871:
        case 874:
        case 890:
        case 891:
        case 894:
        case 896:
        case 897:
        case 898:
        case 900:
        case 901:
        case 902:
        case 903:
        case 904:
        case 915:
        case 916:
        case 917:
        case 923:
        case 924:
        case 925:
        case 934:
        case 955:
          return result;
        case 849:
        case 850:
        case 851:
        case 852:
        case 853:
        case 854:
        case 855:
        case 859:
        case 861:
        case 863:
        case 864:
        case 868:
        case 869:
        case 873:
        case 877:
        case 878:
        case 879:
        case 880:
        case 882:
        case 883:
        case 884:
        case 885:
        case 886:
        case 887:
        case 889:
        case 892:
        case 893:
        case 895:
        case 899:
        case 906:
        case 907:
        case 908:
        case 909:
        case 910:
        case 911:
        case 912:
        case 913:
        case 914:
        case 918:
        case 919:
        case 921:
        case 922:
        case 928:
        case 929:
        case 930:
        case 931:
        case 932:
        case 933:
        case 937:
        case 938:
        case 939:
        case 940:
        case 941:
        case 942:
        case 943:
        case 944:
        case 945:
        case 946:
        case 949:
        case 950:
        case 951:
        case 957:
        case 964:
        case 965:
        case 966:
          return 3;
        case 856:
        case 872:
        case 875:
        case 876:
        case 881:
        case 888:
        case 905:
        case 920:
        case 926:
        case 927:
        case 935:
        case 936:
        case 958:
        case 959:
        case 963:
          return 2;
        case 857:
        case 947:
        case 948:
        case 952:
        case 953:
        case 954:
        case 956:
        case 960:
        case 961:
        case 962:
        case 967:
          return 4;
        default:
          if ((a1 - 783) < 2) {
            return result;
          }
          if (a1 != 812) {
            return 3;
          }
          return 4;
      }
    }
    if (a1 > 512)
    {
      switch(a1)
      {
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 520:
        case 521:
        case 524:
        case 525:
        case 526:
        case 527:
        case 545:
        case 550:
        case 551:
        case 552:
        case 553:
        case 558:
        case 571:
        case 574:
        case 575:
        case 590:
        case 602:
        case 603:
        case 604:
        case 605:
        case 606:
        case 608:
        case 609:
          return 4;
        case 519:
        case 522:
        case 523:
        case 528:
        case 530:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 537:
        case 538:
        case 539:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 546:
        case 547:
        case 548:
        case 549:
        case 554:
        case 555:
        case 556:
        case 557:
        case 559:
        case 560:
        case 561:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 570:
        case 572:
        case 573:
        case 576:
        case 577:
        case 578:
        case 579:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
        case 588:
        case 589:
        case 591:
        case 592:
        case 601:
        case 607:
          return 3;
        case 529:
        case 536:
        case 593:
        case 594:
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 600:
          return 2;
        default:
          if (a1 == 630) {
            return 4;
          }
          if (a1 != 770) {
            return 3;
          }
          return result;
      }
    }
    unsigned int v13 = a1 - 266;
    if (v13 <= 0x2B)
    {
      if (((1 << v13) & 0xC080004A25) == 0)
      {
        if (((1 << v13) & 0xC0000000000) != 0) {
          return result;
        }
        return 3;
      }
      return 4;
    }
    return 3;
  }
  if (a1 <= 2304)
  {
    if (a1 <= 1815)
    {
      if ((a1 - 1143) < 2) {
        return result;
      }
      if ((a1 - 1550) >= 2)
      {
        if (a1 == 1025) {
          return result;
        }
        return 3;
      }
      return 4;
    }
    if ((a1 - 2049) <= 0x24 && ((1 << (a1 - 1)) & 0x1F81FFFFFFLL) != 0 || a1 == 1816) {
      return 2;
    }
    return 3;
  }
  if (a1 <= 2416)
  {
    char v11 = a1 - 1;
    if ((a1 - 2305) <= 0x26)
    {
      if (((1 << v11) & 0x1F7000000) != 0) {
        return 2;
      }
      if (((1 << v11) & 0xD80000) != 0) {
        return 4;
      }
      if (((1 << v11) & 0x4008000003) != 0) {
        return result;
      }
    }
    if (a1 != 2404)
    {
      if (a1 == 2409) {
        return result;
      }
      return 3;
    }
    return 4;
  }
  switch(a1)
  {
    case 2448:
    case 2485:
    case 2487:
    case 2489:
    case 2490:
    case 2493:
    case 2495:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2512:
      return 4;
    case 2449:
    case 2450:
    case 2451:
    case 2452:
    case 2453:
    case 2454:
    case 2455:
    case 2458:
    case 2460:
    case 2465:
    case 2468:
    case 2469:
    case 2470:
    case 2471:
    case 2472:
    case 2473:
    case 2474:
    case 2475:
    case 2476:
    case 2478:
    case 2480:
    case 2481:
    case 2482:
    case 2483:
    case 2486:
    case 2488:
    case 2496:
    case 2497:
    case 2498:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2513:
      return 3;
    case 2456:
    case 2457:
    case 2459:
    case 2461:
    case 2462:
    case 2463:
    case 2464:
    case 2466:
    case 2467:
    case 2477:
    case 2514:
      return 2;
    case 2479:
    case 2484:
    case 2491:
    case 2492:
    case 2494:
      return result;
    default:
      switch(a1)
      {
        case 2417:
        case 2421:
          return result;
        case 2418:
          return 4;
        case 2419:
          return 3;
        case 2420:
          return 2;
        default:
          if (a1 == 2438) {
            return 4;
          }
          return 3;
      }
  }
  return result;
}

uint64_t asn1PE_PosPayLoad_rrlpPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Asn1Coder::EncodeOctetString(a1, 1, 0x2000, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (void *)a2, 0, 0);
  uint64_t v4 = v3;
  if (v3) {
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_PosPayLoad_rrlpPayload(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  Asn1Coder::DecodeInteger(a1, 1, 0x2000u, &v6);
  Asn1Coder::GetBitStringFromBuffer(a1, 8 * v6, a2, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PE_PosPayLoad(uint64_t a1, unsigned char *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int16 *)a2 > 3u);
  uint64_t rrlpPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(Ver2) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_3;
  }
  unsigned int v9 = *(unsigned __int16 *)a2;
  if (v9 < 4)
  {
    uint64_t Ver2 = Asn1Coder::EncodeInteger(a1, 0, 2, v9 - 1);
    if (Ver2)
    {
      uint64_t rrlpPayload = Ver2;
      int v5 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_3;
    }
    int v10 = *(unsigned __int16 *)a2;
    if (v10 != 1)
    {
      if (v10 == 3)
      {
        uint64_t rrlpPayload = asn1PE_PosPayLoad_rrlpPayload(a1, (uint64_t)(a2 + 56));
        if (!rrlpPayload) {
          return rrlpPayload;
        }
        goto LABEL_17;
      }
      if (v10 != 2)
      {
        uint64_t rrlpPayload = 4;
        *(unsigned char *)(a1 + 16) = 4;
        int v5 = *(_DWORD *)(a1 + 8);
        int v6 = *(_DWORD *)(a1 + 12);
        LODWORD(Ver2) = 4;
        goto LABEL_3;
      }
    }
    uint64_t rrlpPayload = 1;
    *(unsigned char *)(a1 + 16) = 1;
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_17:
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    LODWORD(Ver2) = rrlpPayload;
    goto LABEL_3;
  }
  if (a2[80] | a2[81])
  {
    uint64_t Ver2 = asn1PE_PosPayLoadVer2(a1, a2);
    uint64_t rrlpPayload = Ver2;
    if (!Ver2) {
      return rrlpPayload;
    }
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    uint64_t rrlpPayload = 1;
    LODWORD(Ver2) = 1;
  }
LABEL_3:
  SuplAsn1Logger::TraceError(Ver2, v5, v6);
  return rrlpPayload;
}

uint64_t asn1PD_PosPayLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t rrlpPayload = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(Ver2) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_3;
  }
  if (!BitFromBuffer)
  {
    unsigned __int16 v11 = 0;
    uint64_t Ver2 = Asn1Coder::DecodeInteger(a1, 0, 2u, &v11);
    if (Ver2)
    {
      uint64_t rrlpPayload = Ver2;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_3;
    }
    int v10 = v11;
    *(_WORD *)a2 = v11 + 1;
    if (v10)
    {
      if (v10 == 2)
      {
        uint64_t rrlpPayload = asn1PD_PosPayLoad_rrlpPayload(a1, (unint64_t *)(a2 + 56));
        if (!rrlpPayload) {
          return rrlpPayload;
        }
        goto LABEL_15;
      }
      if (v10 != 1)
      {
        uint64_t rrlpPayload = 4;
        *(unsigned char *)(a1 + 16) = 4;
        int v6 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        LODWORD(Ver2) = 4;
        goto LABEL_3;
      }
    }
    uint64_t rrlpPayload = 1;
    *(unsigned char *)(a1 + 16) = 1;
    SuplAsn1Logger::TraceError(1u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_15:
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(Ver2) = rrlpPayload;
    goto LABEL_3;
  }
  uint64_t Ver2 = asn1PD_PosPayLoadVer2(a1, a2);
  uint64_t rrlpPayload = Ver2;
  if (!Ver2) {
    return rrlpPayload;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
LABEL_3:
  SuplAsn1Logger::TraceError(Ver2, v6, v7);
  return rrlpPayload;
}

uint64_t asn1PE_SUPLPOS(uint64_t a1, unsigned __int8 *a2)
{
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
LABEL_5:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 12);
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_5;
  }

  return asn1PE_PosPayLoad(a1, a2 + 8);
}

uint64_t asn1PD_SUPLPOS(uint64_t a1, unsigned char *a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  uint64_t v8 = asn1PD_PosPayLoad(a1, (uint64_t)(a2 + 8));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  if (*a2)
  {
    asn1PD_Velocity(a1, (uint64_t)(a2 + 144));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_7;
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = Asn1Coder::SkipSequenceExtension(a1);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return v5;
}

uint64_t SuplPosPayloadHandler::GetInstance(SuplPosPayloadHandler *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SuplPosPayloadHandler::GetInstance(void)::pred_suplPosPayloadHandler != -1) {
    dispatch_once(&SuplPosPayloadHandler::GetInstance(void)::pred_suplPosPayloadHandler, &__block_literal_global_1);
  }
  uint64_t result = SuplPosPayloadHandler::m_pos_payload_handler;
  if (!SuplPosPayloadHandler::m_pos_payload_handler)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplPosPayloadHandler.cpp", 54, "false && \"Memory allocation failure\"");
  }
  return result;
}

void *___ZN21SuplPosPayloadHandler11GetInstanceEv_block_invoke()
{
  uint64_t result = operator new(0x18uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  SuplPosPayloadHandler::m_pos_payload_handler = (uint64_t)result;
  return result;
}

uint64_t SuplPosPayloadHandler::ProcessPosPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "SPL", 69, "ProcessPosPayload", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v19, 0, 1);
    }
    return -1;
  }
  __p = 0;
  long long v46 = 0;
  char v48 = 0;
  uint64_t v47 = 0;
  int v6 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)a1);
  int v49 = *(_DWORD *)(a3 + 376);
  BOOL v7 = *(unsigned char *)(a3 + 380) == 2;
  BOOL v50 = v7;
  int v8 = *(unsigned __int16 *)(a2 + 8);
  if (v8 == 3)
  {
    Instance = (SimUtils *)SimUtils::GetInstance((SimUtils *)v6);
    IsItCampedOnLte = (LcsSuplGlueLayer *)SimUtils::IsItCampedOnLte(Instance, *(_DWORD *)(a3 + 532));
    if (!IsItCampedOnLte)
    {
      char v48 = 1;
      if (&__p != (void **)(a2 + 64)) {
        IsItCampedOnLte = (LcsSuplGlueLayer *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(char **)(a2 + 64), *(char **)(a2 + 72), *(void *)(a2 + 72) - *(void *)(a2 + 64));
      }
      uint64_t v30 = *(unsigned int *)(a3 + 532);
      uint64_t v31 = LcsSuplGlueLayer::GetInstance(IsItCampedOnLte);
      __int16 v20 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v31 + 24))(v31, v30, &__p);
      if (__p)
      {
        long long v46 = __p;
        operator delete(__p);
      }
      return v20;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return -7;
    }
LABEL_22:
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "SPL", 69, "ProcessPosPayload", 515);
    LbsOsaTrace_WriteLog(0x12u, __str, v24, 0, 1);
    return -7;
  }
  if (v8 != 4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v25 = mach_continuous_time();
      unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "SPL", 69, "ProcessPosPayload", 770);
      LbsOsaTrace_WriteLog(0x12u, __str, v26, 0, 1);
    }
    return -7;
  }
  if (!*(unsigned char *)(a2 + 88))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "SPL", 69, "ProcessPosPayload", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v29, 0, 1);
    }
    return -1;
  }
  int v9 = (SimUtils *)SimUtils::GetInstance((SimUtils *)v6);
  if (!SimUtils::IsItCampedOnLte(v9, *(_DWORD *)(a3 + 532)))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return -7;
    }
    goto LABEL_22;
  }
  char v48 = 3;
  size_t IsLoggingAllowed = (size_t)operator new(0x38uLL, MEMORY[0x263F8C180]);
  if (IsLoggingAllowed)
  {
    *(_WORD *)size_t IsLoggingAllowed = 0;
    *(_OWORD *)(IsLoggingAllowed + 8) = 0u;
    *(_OWORD *)(IsLoggingAllowed + 24) = 0u;
    *(_OWORD *)(IsLoggingAllowed + 40) = 0u;
    *(void *)a1 = IsLoggingAllowed;
    uint64_t v12 = *(void *)(a2 + 96);
    uint64_t v11 = *(void *)(a2 + 104);
    if (v11 != v12)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12 + v13;
        if (*(void *)(v12 + v13) != *(void *)(v12 + v13 + 8))
        {
          ++*(unsigned char *)(a1 + 8);
          uint64_t v16 = *(void *)a1;
          uint64_t v17 = *(void **)(*(void *)a1 + 16);
          if ((unint64_t)v17 >= *(void *)(*(void *)a1 + 24))
          {
            size_t IsLoggingAllowed = std::vector<ASN1T_PosPayLoad_lpppayload>::__push_back_slow_path<ASN1T_PosPayLoad_lpppayload const&>((uint64_t *)(v16 + 8), v15);
          }
          else
          {
            *uint64_t v17 = 0;
            v17[1] = 0;
            _OWORD v17[2] = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v17, *(const void **)v15, *(void *)(v15 + 8), *(void *)(v15 + 8) - *(void *)v15);
            size_t IsLoggingAllowed = (size_t)(v17 + 3);
            *(void *)(v16 + 16) = v17 + 3;
          }
          *(void *)(v16 + 16) = IsLoggingAllowed;
          uint64_t v12 = *(void *)(a2 + 96);
          uint64_t v11 = *(void *)(a2 + 104);
        }
        ++v14;
        v13 += 24;
      }
      while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3));
    }
  }
  else
  {
    *(void *)a1 = 0;
    size_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v32 = mach_continuous_time();
      unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "SPL", 69, "CopyLppPayLoad", 1537);
      size_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0x12u, __str, v33, 0, 1);
    }
  }
  if (!*(void *)a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return -1;
    }
    goto LABEL_42;
  }
  int v34 = *(_DWORD *)(a3 + 376);
  char v35 = (LcsSuplGlueLayer *)SuplProvider::GetInstance((SuplProvider *)IsLoggingAllowed);
  uint64_t v36 = *((void *)v35 + 4);
  if (!v36)
  {
LABEL_41:
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0)) {
      return -1;
    }
LABEL_42:
    bzero(__str, 0x410uLL);
    uint64_t v37 = mach_continuous_time();
    unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "SPL", 69, "ProcessLppPayload", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v38, 0, 1);
    return -1;
  }
  while (*(_DWORD *)v36 != v34)
  {
    uint64_t v36 = *(void *)(v36 + 8);
    if (!v36) {
      goto LABEL_41;
    }
  }
  if (*(char *)(a1 + 8) >= 1)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    while (1)
    {
      uint64_t v41 = *(void *)a1;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 3) <= v40) {
        break;
      }
      int v55 = 0;
      BOOL v56 = 0;
      char v54 = 0;
      long long v52 = 0;
      uint64_t v53 = 0;
      *(void *)__str = 0;
      double v42 = (char **)(*(void *)(v41 + 8) + v39);
      if (v42 != (char **)__str) {
        char v35 = (LcsSuplGlueLayer *)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, *v42, v42[1], v42[1] - *v42);
      }
      char v54 = 3;
      int v55 = v34;
      BOOL v56 = v7;
      uint64_t v43 = *(unsigned int *)(v36 + 524);
      uint64_t v44 = LcsSuplGlueLayer::GetInstance(v35);
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v44 + 24))(v44, v43, __str);
      char v35 = *(LcsSuplGlueLayer **)__str;
      if (*(void *)__str)
      {
        long long v52 = *(LcsSuplGlueLayer **)__str;
        operator delete(*(void **)__str);
      }
      __int16 v20 = 0;
      ++v40;
      v39 += 24;
      if ((uint64_t)v40 >= *(char *)(a1 + 8)) {
        return v20;
      }
    }
  }
  return 0;
}

void sub_22B915B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *SuplPosPayloadHandler::ResetLppParams(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  v4[1] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  if (*this)
  {
    v4[0] = (void **)(v2 + 32);
    std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v4);
    v4[0] = (void **)(v2 + 8);
    std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v4);
    this = (uint64_t *)MEMORY[0x230F4E5D0](v2, 0x1020C407B5832A3);
  }
  *(void *)uint64_t v1 = 0;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    v4[0] = (void **)(v3 + 32);
    std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v4);
    v4[0] = (void **)(v3 + 8);
    std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](v4);
    this = (uint64_t *)MEMORY[0x230F4E5D0](v3, 0x1020C407B5832A3);
  }
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 8) = 0;
  return this;
}

void SuplPosPayloadHandler::ProcessPosResponse(uint64_t a1, char **a2, int a3, SuplSession *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t SuplStateObject = SuplSession::GetSuplStateObject(a4);
    SuplState::UpdateState(SuplStateObject, 5, (uint64_t)a4);
    uint64_t v8 = SuplSession::GetSuplStateObject(a4);
    int v9 = (void *)v8;
    int v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      *(_WORD *)(*(void *)(v8 + 40) + 8) = 3;
      uint64_t v12 = (char **)(*(void *)(v8 + 40) + 64);
      if (v12 != a2) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v12, v10, v11, v11 - v10);
      }
    }
    SuplPosRecd::PrepareSuplMessage(v9, a3);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "ProcessPosResponse", 513);
    LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
  }
}

uint64_t SuplPosPayloadHandler::ProcessLppAdReq(SuplProvider *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  Instance = (SimUtils *)SuplProvider::GetInstance(a1);
  uint64_t v8 = *((void *)Instance + 4);
  if (v8)
  {
    while (*(_DWORD *)v8 != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_4;
      }
    }
    v28[0] = 0;
    __int16 v29 = 0;
    uint64_t v30 = 0xFFFFFFFFLL;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    char v34 = 0;
    __int16 v35 = 0;
    char v36 = 0;
    uint64_t v37 = -1;
    char v38 = 0;
    unint64_t v39 = 0xFFFF000000000000;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    v42[0] = 0;
    *(void *)((char *)v42 + 6) = 0;
    _OWORD v42[2] = 0;
    v42[3] = 0;
    uint64_t v43 = 0;
    char v44 = 1;
    uint64_t v12 = *(void *)(SimUtils::GetInstance(Instance) + 16);
    if (v12)
    {
      while (*(_DWORD *)v12 != *(_DWORD *)(v8 + 524))
      {
        uint64_t v12 = *(void *)(v12 + 8);
        if (!v12) {
          goto LABEL_12;
        }
      }
      ASN1T_LocationId::operator=((uint64_t)v28, v12 + 56);
    }
LABEL_12:
    __int16 v19 = *(_WORD *)(v8 + 448);
    uint64_t v13 = *(const void **)(v8 + 464);
    uint64_t v20 = *(void *)(v8 + 456);
    unsigned __int16 v21 = 0;
    long long v22 = 0;
    uint64_t v23 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v21, v13, *(void *)(v8 + 472), *(void *)(v8 + 472) - (void)v13);
    __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unsigned __int16 v14 = (LcsSuplGlueLayer *)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(v8 + 488), *(void *)(v8 + 496), *(void *)(v8 + 496) - *(void *)(v8 + 488));
    char v27 = *(unsigned char *)(v8 + 512);
    if (a4 >= 0x11)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "SPL", 69, "ProcessLppAdReq", 514);
        LbsOsaTrace_WriteLog(0x12u, __str, v17, 0, 1);
      }
      __int16 v11 = -4;
    }
    else
    {
      uint64_t v15 = LcsSuplGlueLayer::GetInstance(v14);
      __int16 v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t, void))(*(void *)v15 + 40))(v15, a2, a3, a4, &v19, v43 + 8, *(unsigned int *)(v8 + 524));
    }
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      long long v22 = v21;
      operator delete(v21);
    }
    ASN1T_CellInfo::~ASN1T_CellInfo((ASN1T_CellInfo *)v28);
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "ProcessLppAdReq", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
    }
    return -1;
  }
  return v11;
}

void sub_22B9160F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t *SuplPosPayloadHandler::HandleLppPosResponseFromStack(uint64_t *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t *)SuplProvider::GetInstance((SuplProvider *)a1);
  uint64_t v5 = result[4];
  if (!v5)
  {
LABEL_4:
    uint64_t result = (uint64_t *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "HandleLppPosResponseFromStack", 513);
      return (uint64_t *)LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
    return result;
  }
  while (*(_DWORD *)v5 != *(_DWORD *)(a2 + 28))
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      goto LABEL_4;
    }
  }
  uint64_t v8 = (SuplSession *)(v5 - 8);
  *(unsigned char *)(v5 + 400) = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(a2 + 24))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "HandleLppPosResponseFromStack", 515);
      LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
    }
    uint64_t SuplStateObject = SuplSession::GetSuplStateObject(v8);
    SuplState::UpdateState(SuplStateObject, 5, (uint64_t)v8);
    uint64_t v12 = (void *)SuplSession::GetSuplStateObject(v8);
    SuplPosRecd::SetPayLoadPosResponses((uint64_t)v12, a1[2]);
    SuplPosRecd::PrepareSuplMessage(v12, 1);
    return SuplPosPayloadHandler::ResetLppParams(a1);
  }
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return result;
  }
  uint64_t v13 = (char *)a1[2];
  if (v13)
  {
    unsigned __int16 v14 = (void *)*((void *)v13 + 1);
LABEL_16:
    *uint64_t v13 = 1;
    uint64_t v16 = (void *)*((void *)v13 + 2);
    if (v16 == v14)
    {
      if (*((void **)v13 + 3) == v14)
      {
        uint64_t v31 = v13 + 24;
        uint64_t v23 = operator new(0x18uLL);
        *(void *)__str = v23;
        uint64_t v28 = v23;
        v23[1] = 0;
        int v23[2] = 0;
        *uint64_t v23 = 0;
        __int16 v29 = v23 + 3;
        uint64_t v30 = v23 + 3;
        std::vector<ASN1T_PosPayLoad_lpppayload>::__swap_out_circular_buffer((uint64_t *)v13 + 1, __str);
        std::__split_buffer<ASN1T_PosPayLoad_lpppayload>::~__split_buffer((uint64_t)__str);
      }
      else
      {
        *unsigned __int16 v14 = 0;
        v14[1] = 0;
        _OWORD v14[2] = 0;
        *((void *)v13 + 2) = v14 + 3;
      }
    }
    else if (0xAAAAAAAAAAAAAAABLL * (v16 - v14) >= 2)
    {
      unsigned __int16 v17 = v14 + 3;
      if (v16 != v14 + 3)
      {
        uint64_t v18 = (void *)*((void *)v13 + 2);
        do
        {
          uint64_t v20 = (void *)*(v18 - 3);
          v18 -= 3;
          __int16 v19 = v20;
          if (v20)
          {
            *(v16 - 2) = v19;
            operator delete(v19);
          }
          uint64_t v16 = v18;
        }
        while (v18 != v17);
      }
      *((void *)v13 + 2) = v17;
    }
    unsigned __int16 v24 = *(void **)(a1[2] + 8);
    if (v24 != (void *)a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v24, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    }
    uint64_t v25 = SuplSession::GetSuplStateObject(v8);
    SuplState::UpdateState(v25, 5, (uint64_t)v8);
    uint64_t v26 = (void *)SuplSession::GetSuplStateObject(v8);
    SuplPosRecd::SetPayLoadPosResponses((uint64_t)v26, a1[2]);
    SuplPosRecd::PrepareSuplMessage(v26, 0);
    return SuplPosPayloadHandler::ResetLppParams(a1);
  }
  uint64_t v15 = (char *)operator new(0x38uLL, MEMORY[0x263F8C180]);
  if (v15)
  {
    uint64_t v13 = v15;
    unsigned __int16 v14 = 0;
    *(_WORD *)uint64_t v15 = 0;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    a1[2] = (uint64_t)v15;
    goto LABEL_16;
  }
  a1[2] = 0;
  uint64_t result = (uint64_t *)LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v21 = mach_continuous_time();
    unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "HandleLppPosResponseFromStack", 1537);
    return (uint64_t *)LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
  }
  return result;
}

void sub_22B916578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__split_buffer<ASN1T_PosPayLoad_lpppayload>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ASN1T_VER2_PosPayLoad_tia801payload>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<ASN1T_PosPayLoad_lpppayload>::__push_back_slow_path<ASN1T_PosPayLoad_lpppayload const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int16 v17 = a1 + 2;
  if (v9) {
    unsigned __int16 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>>(v7, v9);
  }
  else {
    unsigned __int16 v10 = 0;
  }
  __int16 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)__int16 v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  std::vector<ASN1T_PosPayLoad_lpppayload>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ASN1T_PosPayLoad_lpppayload>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_22B9167F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<ASN1T_PosPayLoad_lpppayload>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)&long long v12 = a6;
  *((void *)&v12 + 1) = a7;
  long long v11 = v12;
  v13[0] = a1;
  v13[1] = &v11;
  _OWORD v13[2] = &v12;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v12 + 1) - 24;
      *((void *)&v12 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v12;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sub_22B916A64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_PosPayLoad_lpppayload>,std::reverse_iterator<ASN1T_PosPayLoad_lpppayload*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<ASN1T_PosPayLoad_lpppayload>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ASN1T_PosPayLoad_lpppayload>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t GM_Gen_SV_Meas_QI(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  int v1 = *(unsigned __int16 *)(a1 + 8);
  if ((~v1 & 0x888) == 0) {
    return 18;
  }
  if ((~v1 & 0x88) == 0) {
    return 17;
  }
  if ((~v1 & 0x848) == 0) {
    return 16;
  }
  if ((~v1 & 0x48) == 0) {
    return 15;
  }
  if ((~v1 & 0x28) == 0) {
    return 14;
  }
  if ((~v1 & 0x18) == 0) {
    return 13;
  }
  uint64_t result = 12;
  if ((~v1 & 0xC) != 0)
  {
    if ((~v1 & 0xA) != 0)
    {
      if (v1)
      {
        return 9;
      }
      else if ((_BYTE)v1)
      {
        return 2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t rrl_error_handling(int a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset_s(&__s, 0x528uLL, 0, 0x528uLL);
  memset_s(&v7, 8uLL, 0, 8uLL);
  if (GetStaticLpPrivate()[16] == 1)
  {
    int __s = *((_DWORD *)GetStaticLpPrivate() + 6);
    switch(*((_DWORD *)GetStaticLpPrivate() + 8))
    {
      case 0:
        if (GetStaticLpPrivate()[716] != 1) {
          goto LABEL_17;
        }
        uint64_t v5 = GetStaticLpPrivate() + 708;
        goto LABEL_15;
      case 1:
        if (GetStaticLpPrivate()[584] != 1 || GetStaticLpPrivate()[536] != 1) {
          goto LABEL_17;
        }
        uint64_t v5 = GetStaticLpPrivate() + 528;
        goto LABEL_15;
      case 2:
        if (GetStaticLpPrivate()[692] != 1) {
          goto LABEL_17;
        }
        uint64_t v5 = GetStaticLpPrivate() + 684;
        goto LABEL_15;
      case 3:
        goto LABEL_17;
      case 4:
        if (GetStaticLpPrivate()[104] != 1 || GetStaticLpPrivate()[100] != 1) {
          goto LABEL_17;
        }
        uint64_t v5 = GetStaticLpPrivate() + 92;
LABEL_15:
        uint64_t v4 = *(void *)v5;
        break;
      case 5:
      case 6:
        uint64_t v4 = *((void *)GetStaticLpPrivate() + 5);
        break;
      default:
        ms_report_exception(1, 24590, 199, "rrl_error_handling");
        goto LABEL_17;
    }
    uint64_t v7 = v4;
    int v9 = 4;
    int v10 = a1;
    char v13 = 1;
    char v12 = 1;
    uint64_t v11 = v4;
  }
  else
  {
LABEL_17:
    int v9 = 4;
    int v10 = a1;
  }
  return rrl_encode_air_message(a2, &__s);
}

uint64_t rrl_process_measure_request(void *a1, _WORD *a2, int *a3, unsigned char *a4, uint64_t a5, int a6)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *a3 = 0;
  *a4 = 0;
  rrl_clear_gnss_ad(a1, 0);
  memset_s(a2, 0x2CuLL, 0, 0x2CuLL);
  char v12 = *(void **)(a5 + 8);
  if (v12)
  {
    free(v12);
    *(void *)(a5 + 8) = 0;
  }
  *(_DWORD *)a5 = 0;
  if (GetStaticLpPrivate()[16] && !*((_DWORD *)GetStaticLpPrivate() + 8))
  {
    StaticLpPrivate = GetStaticLpPrivate();
    unsigned __int16 v17 = GetStaticLpPrivate();
    memset_s(v17 + 1344, 0x1CuLL, 0, 0x1CuLL);
    int v18 = *((_DWORD *)GetStaticLpPrivate() + 6);
    *((_DWORD *)GetStaticLpPrivate() + 339) = v18;
    LOBYTE(v18) = StaticLpPrivate[716];
    GetStaticLpPrivate()[1360] = v18;
    if (GetStaticLpPrivate()[1360] == 1) {
      *(void *)(GetStaticLpPrivate() + 1364) = *(void *)(StaticLpPrivate + 708);
    }
    if (!*((_DWORD *)StaticLpPrivate + 13)) {
      goto LABEL_43;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: methodType, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 73, "rrl_process_measure_request", *((_DWORD *)StaticLpPrivate + 10));
      LbsOsaTrace_WriteLog(0x13u, __str, v20, 4, 1);
    }
    int v21 = *((_DWORD *)StaticLpPrivate + 10);
    int v22 = 4;
    if (v21 && v21 != 3)
    {
      *((_DWORD *)GetStaticLpPrivate() + 337) = 2;
      if (StaticLpPrivate[560])
      {
        int v23 = 1;
      }
      else
      {
        int v23 = StaticLpPrivate[1336];
        if (StaticLpPrivate[1336]) {
          int v23 = StaticLpPrivate[1320] != 0;
        }
      }
      if (v23 | a6)
      {
LABEL_22:
        GetStaticLpPrivate()[1352] = 1;
        memset_s(__str, 4uLL, 0, 4uLL);
        if (GetStaticLpPrivate()[1352] == 1)
        {
          int v24 = *((_DWORD *)GetStaticLpPrivate() + 2);
          *(_DWORD *)__str = *((_DWORD *)GetStaticLpPrivate() + 337) & v24;
          if (*(_DWORD *)__str) {
            goto LABEL_34;
          }
        }
        else if (*(_DWORD *)__str)
        {
          goto LABEL_34;
        }
        if (*((_DWORD *)GetStaticLpPrivate() + 337) == 1)
        {
          if (GetStaticLpPrivate()[1352] == 1)
          {
            int v25 = *((_DWORD *)GetStaticLpPrivate() + 2) & 2;
            *(_DWORD *)__str = v25;
          }
          else
          {
            int v25 = *(_DWORD *)__str;
          }
          if (!v25)
          {
LABEL_33:
            GetStaticLpPrivate()[1352] = 0;
LABEL_34:
            if (GetStaticLpPrivate()[1352])
            {
              *a2 = 1;
              *((_DWORD *)a2 + 1) = -1;
              *(_WORD *)((char *)a2 + 9) = 0;
              *((unsigned char *)a2 + 21) = 1;
              if (*((_DWORD *)GetStaticLpPrivate() + 337) == 1) {
                *((unsigned char *)a2 + 21) = 0;
              }
              *((_DWORD *)a2 + 6) = 3;
              if (GetStaticLpPrivate()[1352] == 1) {
                a2[18] |= 1u;
              }
              *(_WORD *)((char *)a2 + 11) = 0;
              *((_DWORD *)a2 + 4) = -1;
              *((unsigned char *)a2 + 20) = 0;
              *((_DWORD *)a2 + 7) = 2;
              a2[16] = -1;
              *((unsigned char *)a2 + 34) = -1;
              *((unsigned char *)a2 + 40) = 0;
              a2[19] = 0;
              int v26 = *((_DWORD *)StaticLpPrivate + 10);
              if ((v26 - 1) >= 2)
              {
                if (v26)
                {
                  ms_report_exception(2, 24591, 432, "rrl_process_measure_request");
                }
                else if (StaticLpPrivate[48] != 1)
                {
                  goto LABEL_46;
                }
              }
              *((_DWORD *)a2 + 1) = rrl_util_accuracy_to_meter(*((unsigned int *)StaticLpPrivate + 11));
LABEL_46:
              if (StaticLpPrivate[1336] == 1 && StaticLpPrivate[1040])
              {
                int v27 = *((_DWORD *)StaticLpPrivate + 259);
                if (HIWORD(v27))
                {
                  if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
                    goto LABEL_61;
                  }
                  bzero(__str, 0x410uLL);
                  unint64_t v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx requiredResponseTime,%d\n", v41);
LABEL_58:
                  LbsOsaTrace_WriteLog(0x13u, __str, v28, 0, 1);
                  goto LABEL_61;
                }
              }
              else
              {
                int v27 = *((_DWORD *)StaticLpPrivate + 14);
                if (!v27)
                {
                  if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
                    goto LABEL_61;
                  }
                  bzero(__str, 0x410uLL);
                  unint64_t v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
                  unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Response time,%u\n", v42);
                  goto LABEL_58;
                }
                if (v27 < 2)
                {
                  LOWORD(v27) = 2;
                }
                else
                {
                  int v29 = v27 - 1;
                  LOWORD(v27) = 2;
                  do
                  {
                    LOWORD(v27) = 2 * v27;
                    --v29;
                  }
                  while (v29);
                }
              }
              *a2 = v27;
LABEL_61:
              if (StaticLpPrivate[1336] == 1 && StaticLpPrivate[724] != 0) {
                *((unsigned char *)a2 + 9) = 1;
              }
              if (StaticLpPrivate[704] != 1 || StaticLpPrivate[688] == 0)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  double v32 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
                  if (StaticLpPrivate[1336]) {
                    uint64_t v33 = 84;
                  }
                  else {
                    uint64_t v33 = 70;
                  }
                  unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MsrPosition Ext,%c\n", (unint64_t)v32, "PSP", 68, "rrl_process_measure_request", v33);
                  LbsOsaTrace_WriteLog(0x13u, __str, v34, 5, 1);
                }
              }
              else
              {
                *((unsigned char *)a2 + 10) = 1;
              }
              if (StaticLpPrivate[68] == 1) {
                *((_DWORD *)a2 + 6) = *((_DWORD *)StaticLpPrivate + 16);
              }
              if (StaticLpPrivate[560])
              {
                int v35 = StaticLpPrivate[1320];
              }
              else if (!StaticLpPrivate[1336] || (int v35 = StaticLpPrivate[1320], !StaticLpPrivate[1320]))
              {
LABEL_98:
                *a3 = *((_DWORD *)GetStaticLpPrivate() + 337);
                uint64_t v13 = 0;
                GetStaticLpPrivate()[1344] = 1;
                goto LABEL_7;
              }
              if (StaticLpPrivate[560]) {
                uint64_t v36 = (uint64_t)(StaticLpPrivate + 184);
              }
              else {
                uint64_t v36 = 0;
              }
              if (v35) {
                BOOL v37 = StaticLpPrivate[1336] == 0;
              }
              else {
                BOOL v37 = 1;
              }
              if (v37) {
                uint64_t v38 = 0;
              }
              else {
                uint64_t v38 = (uint64_t)(StaticLpPrivate + 1048);
              }
              if (StaticLpPrivate[696]) {
                BOOL v39 = StaticLpPrivate[704] == 0;
              }
              else {
                BOOL v39 = 1;
              }
              if (v39) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = StaticLpPrivate + 692;
              }
              rrl_process_gnss_assist_data((uint64_t)a1, v36, v38, v40);
              goto LABEL_98;
            }
LABEL_43:
            memset_s(__str, 0x70uLL, 0, 0x70uLL);
            *(_DWORD *)__str = 7;
            char v44 = 0;
            *a4 = rrl_encode_measure_response_error(__str, a5);
            goto LABEL_6;
          }
          *((_DWORD *)GetStaticLpPrivate() + 337) = 2;
        }
        if (*(_DWORD *)__str) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      int v22 = 1;
    }
    *((_DWORD *)GetStaticLpPrivate() + 337) = v22;
    goto LABEL_22;
  }
  rrl_clean();
LABEL_6:
  uint64_t v13 = 1;
LABEL_7:
  rrl_free_asn_pdu();
  GetStaticLpPrivate()[1344] = 1;
  int v14 = *a3;
  *((_DWORD *)GetStaticLpPrivate() + 337) = v14;
  return v13;
}

uint64_t rrl_clean_measure_procedure(void)
{
  uint64_t v0 = GetStaticLpPrivate() + 1344;

  return memset_s(v0, 0x1CuLL, 0, 0x1CuLL);
}

void rrl_process_gnss_assist_data(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v223 = *MEMORY[0x263EF8340];
  rrl_clear_gnss_ad((void *)a1, 1);
  if (!a2 || GetStaticLpPrivate()[5] != 1) {
    return;
  }
  uint64_t v221 = a3;
  if (*(unsigned char *)(a2 + 64) == 1)
  {
    *(unsigned char *)a1 = 1;
    *(_WORD *)(a1 + 8) = 257;
    *(_DWORD *)(a1 + 20) = 80 * *(_DWORD *)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 4);
    if (HIWORD(v8))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gpsWeek,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 4));
        LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
      }
    }
    else
    {
      *(_WORD *)(a1 + 16) = v8;
    }
    if (a3 && *(unsigned char *)(a3 + 184) == 1)
    {
      unsigned int v11 = *(_DWORD *)(a3 + 180);
      if (v11 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gpsWeekCycleNumber,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a3 + 180));
          LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 18) = v11;
      }
    }
    if (a4) {
      *(unsigned char *)(a1 + 24) = *a4;
    }
    if (*(unsigned char *)(a2 + 28) == 1)
    {
      *(unsigned char *)(a1 + 62) = 1;
      unsigned int v14 = *(_DWORD *)(a2 + 8);
      if (HIWORD(v14))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx bcchCarrier,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 8));
          LbsOsaTrace_WriteLog(0x13u, __str, v16, 0, 1);
        }
      }
      else
      {
        *(_WORD *)(a1 + 64) = v14;
      }
      unsigned int v17 = *(_DWORD *)(a2 + 12);
      if (v17 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx bsic,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 12));
          LbsOsaTrace_WriteLog(0x13u, __str, v19, 0, 1);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 66) = v17;
      }
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 16);
      unsigned int v20 = *(_DWORD *)(a2 + 20);
      if (v20 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v21 = mach_continuous_time();
          unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx timeSlot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 20));
          LbsOsaTrace_WriteLog(0x13u, __str, v22, 0, 1);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 72) = v20;
      }
      unsigned int v23 = *(_DWORD *)(a2 + 24);
      if (v23 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx bitNumber,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 24));
          LbsOsaTrace_WriteLog(0x13u, __str, v25, 0, 1);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 73) = v23;
      }
    }
    if (*(unsigned char *)(a2 + 56) == 1)
    {
      int v26 = *(_DWORD *)(a2 + 48);
      if (v26 >= 1)
      {
        if (v26 > 0xFF)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v27 = mach_continuous_time();
            unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "PSP", 69, "rrl_process_gnss_assist_data", 772, *(_DWORD *)(a2 + 48));
            LbsOsaTrace_WriteLog(0x13u, __str, v28, 0, 1);
          }
        }
        else
        {
          *(unsigned char *)(a1 + 76) = v26;
        }
        if (*(unsigned __int8 *)(a1 + 76) >= 0x11u)
        {
          *(unsigned char *)(a1 + 76) = 16;
          goto LABEL_42;
        }
        if (*(unsigned char *)(a1 + 76))
        {
LABEL_42:
          unint64_t v29 = 0;
          uint64_t v30 = (uint64_t *)(a2 + 32);
          uint64_t v31 = (unsigned char *)(a1 + 84);
          do
          {
            uint64_t v30 = (uint64_t *)*v30;
            unsigned int v32 = *((_DWORD *)v30 + 2);
            if (v32 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v33 = mach_continuous_time();
                unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "PSP", 69, "rrl_process_gnss_assist_data", 772, *((_DWORD *)v30 + 2));
                LbsOsaTrace_WriteLog(0x13u, __str, v34, 0, 1);
              }
            }
            else
            {
              *(v31 - 6) = v32;
            }
            unsigned int v35 = *((_DWORD *)v30 + 3);
            if (HIWORD(v35))
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v36 = mach_continuous_time();
                unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmWord,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "PSP", 69, "rrl_process_gnss_assist_data", 772, *((_DWORD *)v30 + 3));
                LbsOsaTrace_WriteLog(0x13u, __str, v37, 0, 1);
              }
            }
            else
            {
              *((_WORD *)v31 - 2) = v35;
            }
            unsigned int v38 = *((_DWORD *)v30 + 4);
            if (v38 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v39 = mach_continuous_time();
                unsigned __int16 v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx antiSpoof,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "PSP", 69, "rrl_process_gnss_assist_data", 772, *((_DWORD *)v30 + 4));
                LbsOsaTrace_WriteLog(0x13u, __str, v40, 0, 1);
              }
            }
            else
            {
              *(v31 - 2) = v38;
            }
            unsigned int v41 = *((_DWORD *)v30 + 5);
            if (v41 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v42 = mach_continuous_time();
                unsigned __int16 v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alert,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "PSP", 69, "rrl_process_gnss_assist_data", 772, *((_DWORD *)v30 + 5));
                LbsOsaTrace_WriteLog(0x13u, __str, v43, 0, 1);
              }
            }
            else
            {
              *(v31 - 1) = v41;
            }
            unsigned int v44 = *((_DWORD *)v30 + 6);
            if (v44 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v45 = mach_continuous_time();
                unsigned __int16 v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmRsvdBits,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "PSP", 69, "rrl_process_gnss_assist_data", 772, *((_DWORD *)v30 + 6));
                LbsOsaTrace_WriteLog(0x13u, __str, v46, 0, 1);
              }
            }
            else
            {
              *uint64_t v31 = v44;
            }
            ++v29;
            v31 += 8;
          }
          while (v29 < *(unsigned __int8 *)(a1 + 76));
        }
      }
    }
  }
  if (*(unsigned char *)(a2 + 88) == 1)
  {
    uint64_t v47 = *(unsigned __int8 **)(a2 + 80);
    if (v47)
    {
      unsigned int v48 = *(_DWORD *)(a2 + 72);
      if (v48 >= 7)
      {
        *(_WORD *)(a1 + 504) = 0;
        int v49 = *v47 >> 4;
        *(_WORD *)(a1 + 522) = v49;
        *(unsigned char *)(a1 + 524) = v47[1] >> 7;
        unsigned __int8 v50 = v47[1];
        *(void *)(a1 + 528) = (unint64_t)(v50 & 0x7F) << 8;
        unint64_t v51 = v47[2] | ((unint64_t)(v50 & 0x7F) << 8);
        *(void *)(a1 + 528) = v51 << 8;
        *(void *)(a1 + 528) = v47[3] | ((v51 & 0x7FFF) << 8);
        int v52 = v47[4];
        *(_DWORD *)(a1 + 536) = v52 << 8;
        LODWORD(v51) = v47[5] | (v52 << 8);
        *(_DWORD *)(a1 + 536) = v51 << 8;
        int v53 = v47[6] | ((unsigned __int16)v51 << 8);
        if (v51 >= 0x8000) {
          v53 |= 0xFF800000;
        }
        *(_DWORD *)(a1 + 536) = v53;
        switch(v49)
        {
          case 0:
          case 1:
            break;
          case 3:
            if (v48 < 0xB) {
              goto LABEL_79;
            }
            *(unsigned char *)(a1 + 540) = v47[7];
            *(unsigned char *)(a1 + 541) = v47[8];
            *(unsigned char *)(a1 + 542) = v47[9];
            unsigned __int8 v54 = v47[10];
            goto LABEL_77;
          case 8:
            if (v48 < 9) {
              goto LABEL_79;
            }
            *(unsigned char *)(a1 + 543) = v47[7] & 0x80;
            uint64_t v55 = v47[7];
            *(void *)(a1 + 544) = v55 << 8;
            *(void *)(a1 + 544) = v47[8] | ((unint64_t)v55 << 8);
            break;
          case 9:
            if (v48 < 0xE) {
              goto LABEL_79;
            }
            *(unsigned char *)(a1 + 543) = v47[7] & 0x80;
            uint64_t v56 = v47[7];
            *(void *)(a1 + 544) = v56 << 8;
            *(void *)(a1 + 544) = v47[8] | ((unint64_t)v56 << 8);
            *(unsigned char *)(a1 + 540) = v47[9];
            *(unsigned char *)(a1 + 541) = v47[10];
            *(unsigned char *)(a1 + 542) = v47[11];
            *(unsigned char *)(a1 + 552) = v47[12];
            unsigned __int8 v54 = v47[13];
LABEL_77:
            *(unsigned char *)(a1 + 553) = v54;
            break;
          default:
            ms_report_exception(1, 24590, 1737, "rrl_set_ref_location");
LABEL_79:
            *(_WORD *)(a1 + 504) = 5;
            goto LABEL_80;
        }
      }
    }
    *(unsigned char *)(a1 + 616) |= 1u;
    *(unsigned char *)a1 = 1;
  }
LABEL_80:
  if (*(unsigned char *)(a2 + 160) == 1)
  {
    int v57 = *(_DWORD *)(a2 + 152);
    if (v57 > 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v58 = mach_continuous_time();
        unsigned __int16 v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "PSP", 69, "rrl_set_gps_navigation_data", 772, *(_DWORD *)(a2 + 152));
        LbsOsaTrace_WriteLog(0x13u, __str, v59, 0, 1);
      }
      int v57 = *(_DWORD *)(a2 + 152);
    }
    else
    {
      *(unsigned char *)(a1 + 312) = v57;
    }
    unint64_t v60 = v57;
    uint64_t v61 = 100 * v57;
    if (is_mul_ok(v60, 0x64uLL)) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = -1;
    }
    long long v63 = (char *)operator new[](v62, MEMORY[0x263F8C180]);
    if (v63)
    {
      if (v60)
      {
        long long v64 = v63;
        do
        {
          *(_WORD *)long long v64 = 255;
          *((_WORD *)v64 + 4) = -1;
          v64[10] = -1;
          *(_DWORD *)(v64 + 2) = -1;
          v64[6] = -1;
          *(void *)(v64 + 12) = -1;
          *(void *)(v64 + 20) = -1;
          *(void *)(v64 + 28) = 0x7FFF7FFFFFFF7FFFLL;
          *(void *)(v64 + 36) = 0x7FFF7FFF7FFFFFFFLL;
          *((_DWORD *)v64 + 11) = 0x7FFFFFFF;
          *((_WORD *)v64 + 24) = 0x7FFF;
          *((_DWORD *)v64 + 13) = -1;
          *((_WORD *)v64 + 28) = 0x7FFF;
          *(void *)(v64 + 60) = -1;
          *((_WORD *)v64 + 34) = 0x7FFF;
          *((_DWORD *)v64 + 18) = 0x7FFFFFFF;
          *((_WORD *)v64 + 38) = 0x7FFF;
          *((_DWORD *)v64 + 20) = 0x7FFFFFFF;
          *((_WORD *)v64 + 42) = 0x7FFF;
          *((void *)v64 + 11) = 0x8000000080000000;
          *((_WORD *)v64 + 48) = 0x7FFF;
          v64 += 100;
        }
        while (v64 != &v63[100 * (int)v60]);
      }
      *(void *)(a1 + 320) = v63;
      if (*(unsigned char *)(a1 + 312))
      {
        unint64_t v65 = 0;
        long long v66 = (uint64_t *)(a2 + 136);
        uint64_t v67 = 96;
        do
        {
          long long v66 = (uint64_t *)*v66;
          unsigned int v68 = *((_DWORD *)v66 + 2);
          if (v68 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v69 = mach_continuous_time();
              unsigned __int16 v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v69), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 2));
              LbsOsaTrace_WriteLog(0x13u, __str, v70, 0, 1);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 320) + v67 - 96) = v68;
          }
          uint64_t v71 = *(void *)(a1 + 320);
          uint64_t v72 = v71 + v67;
          *(unsigned char *)(v72 - 95) = 0;
          int v73 = *((_DWORD *)v66 + 3);
          *(_WORD *)(v72 - 94) = v73;
          if ((v73 | 2) == 2)
          {
            unsigned int v74 = *((_DWORD *)v66 + 4);
            if (v74 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v75 = mach_continuous_time();
                unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCodeOnL2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 4));
                LbsOsaTrace_WriteLog(0x13u, __str, v76, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(v71 + v67 - 92) = v74;
            }
            unsigned int v77 = *((_DWORD *)v66 + 5);
            if (v77 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v78 = mach_continuous_time();
                unsigned __int16 v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemURA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 5));
                LbsOsaTrace_WriteLog(0x13u, __str, v79, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 320) + v67 - 91) = v77;
            }
            unsigned int v80 = *((_DWORD *)v66 + 6);
            if (v80 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v81 = mach_continuous_time();
                unsigned __int16 v82 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemSVhealth,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 6));
                LbsOsaTrace_WriteLog(0x13u, __str, v82, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 320) + v67 - 90) = v80;
            }
            unsigned int v83 = *((_DWORD *)v66 + 7);
            if (HIWORD(v83))
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v84 = mach_continuous_time();
                unsigned __int16 v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemIODC,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 7));
                LbsOsaTrace_WriteLog(0x13u, __str, v85, 0, 1);
              }
            }
            else
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 88) = v83;
            }
            unsigned int v86 = *((_DWORD *)v66 + 8);
            if (v86 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v87 = mach_continuous_time();
                unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemL2Pflag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 8));
                LbsOsaTrace_WriteLog(0x13u, __str, v88, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 320) + v67 - 86) = v86;
            }
            uint64_t v89 = *(void *)(a1 + 320) + v67;
            *(_OWORD *)(v89 - 84) = *(_OWORD *)((char *)v66 + 36);
            int v90 = *((_DWORD *)v66 + 13);
            if (v90 == (__int16)v90)
            {
              *(_WORD *)(v89 - 68) = v90;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v91 = mach_continuous_time();
              unsigned __int16 v92 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemTgd,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v91), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 13));
              LbsOsaTrace_WriteLog(0x13u, __str, v92, 0, 1);
            }
            unsigned int v93 = *((_DWORD *)v66 + 14);
            if (HIWORD(v93))
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v94 = mach_continuous_time();
                unsigned __int16 v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemToc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 14));
                LbsOsaTrace_WriteLog(0x13u, __str, v95, 0, 1);
              }
            }
            else
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 66) = v93;
            }
            int v96 = *((_DWORD *)v66 + 15);
            if (v96 == (__int16)v96)
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 64) = v96;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v97 = mach_continuous_time();
              unsigned __int16 v98 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemAF2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v97), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 15));
              LbsOsaTrace_WriteLog(0x13u, __str, v98, 0, 1);
            }
            int v99 = *((_DWORD *)v66 + 16);
            if (v99 == (__int16)v99)
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 62) = v99;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v100 = mach_continuous_time();
              unsigned __int16 v101 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemAF1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v100), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 16));
              LbsOsaTrace_WriteLog(0x13u, __str, v101, 0, 1);
            }
            uint64_t v102 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v102 - 60) = *((_DWORD *)v66 + 17);
            int v103 = *((_DWORD *)v66 + 18);
            if (v103 == (__int16)v103)
            {
              *(_WORD *)(v102 - 56) = v103;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v104 = mach_continuous_time();
              unsigned __int16 v105 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCrs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v104), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 18));
              LbsOsaTrace_WriteLog(0x13u, __str, v105, 0, 1);
            }
            int v106 = *((_DWORD *)v66 + 19);
            if (v106 == (__int16)v106)
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 54) = v106;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v107 = mach_continuous_time();
              unsigned __int16 v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemDeltaN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 19));
              LbsOsaTrace_WriteLog(0x13u, __str, v108, 0, 1);
            }
            uint64_t v109 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v109 - 52) = *((_DWORD *)v66 + 20);
            int v110 = *((_DWORD *)v66 + 21);
            if (v110 == (__int16)v110)
            {
              *(_WORD *)(v109 - 48) = v110;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v111 = mach_continuous_time();
              unsigned __int16 v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 21));
              LbsOsaTrace_WriteLog(0x13u, __str, v112, 0, 1);
            }
            uint64_t v113 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v113 - 44) = *((_DWORD *)v66 + 22);
            int v114 = *((_DWORD *)v66 + 23);
            if (v114 == (__int16)v114)
            {
              *(_WORD *)(v113 - 40) = v114;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v115 = mach_continuous_time();
              unsigned __int16 v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCus,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 23));
              LbsOsaTrace_WriteLog(0x13u, __str, v116, 0, 1);
            }
            uint64_t v117 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v117 - 36) = *((_DWORD *)v66 + 24);
            unsigned int v118 = *((_DWORD *)v66 + 25);
            if (HIWORD(v118))
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v119 = mach_continuous_time();
                unsigned __int16 v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemToe,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v119), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 25));
                LbsOsaTrace_WriteLog(0x13u, __str, v120, 0, 1);
              }
            }
            else
            {
              *(_WORD *)(v117 - 32) = v118;
            }
            unsigned int v121 = *((_DWORD *)v66 + 26);
            if (v121 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v122 = mach_continuous_time();
                unsigned __int16 v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemFitFlag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 26));
                LbsOsaTrace_WriteLog(0x13u, __str, v123, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 320) + v67 - 30) = v121;
            }
            unsigned int v124 = *((_DWORD *)v66 + 27);
            if (v124 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v125 = mach_continuous_time();
                unsigned __int16 v126 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemAODA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 27));
                LbsOsaTrace_WriteLog(0x13u, __str, v126, 0, 1);
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a1 + 320) + v67 - 29) = v124;
            }
            int v127 = *((_DWORD *)v66 + 28);
            if (v127 == (__int16)v127)
            {
              *(_WORD *)(*(void *)(a1 + 320) + v67 - 28) = v127;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v128 = mach_continuous_time();
              unsigned __int16 v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCic,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 28));
              LbsOsaTrace_WriteLog(0x13u, __str, v129, 0, 1);
            }
            uint64_t v130 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v130 - 24) = *((_DWORD *)v66 + 29);
            int v131 = *((_DWORD *)v66 + 30);
            if (v131 == (__int16)v131)
            {
              *(_WORD *)(v130 - 20) = v131;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v132 = mach_continuous_time();
              unsigned __int16 v133 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCis,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 30));
              LbsOsaTrace_WriteLog(0x13u, __str, v133, 0, 1);
            }
            uint64_t v134 = *(void *)(a1 + 320) + v67;
            *(_DWORD *)(v134 - 16) = *((_DWORD *)v66 + 31);
            int v135 = *((_DWORD *)v66 + 32);
            if (v135 == (__int16)v135)
            {
              *(_WORD *)(v134 - 12) = v135;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v136 = mach_continuous_time();
              unsigned __int16 v137 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCrc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v136), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 32));
              LbsOsaTrace_WriteLog(0x13u, __str, v137, 0, 1);
            }
            uint64_t v138 = *(void *)(a1 + 320);
            *(void *)(v138 + v67 - 8) = *(uint64_t *)((char *)v66 + 132);
            int v139 = *((_DWORD *)v66 + 35);
            if (v139 == (__int16)v139)
            {
              *(_WORD *)(v138 + v67) = v139;
            }
            else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v140 = mach_continuous_time();
              unsigned __int16 v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemIDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "PSP", 69, "rrl_set_gps_navigation_data", 772, *((_DWORD *)v66 + 35));
              LbsOsaTrace_WriteLog(0x13u, __str, v141, 0, 1);
            }
          }
          else
          {
            ms_report_exception(1, 24590, 1807, "rrl_set_gps_navigation_data");
          }
          ++v65;
          v67 += 100;
        }
        while (v65 < *(unsigned __int8 *)(a1 + 312));
      }
      *(unsigned char *)(a1 + 304) = 1;
      *(unsigned char *)a1 = 1;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(void *)(a1 + 320) = 0;
      ms_report_exception(2, 3, 1771, "rrl_set_gps_navigation_data");
      *(unsigned char *)(a1 + 304) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 272) == 1)
  {
    *(unsigned char *)(a1 + 344) = *(_DWORD *)(a2 + 240);
    uint64_t v142 = *(_DWORD *)(a2 + 264);
    *(unsigned char *)(a1 + 346) = *(_DWORD *)(a2 + 264);
    uint64_t v143 = (char *)operator new[](32 * v142, MEMORY[0x263F8C180]);
    if (v143)
    {
      if (v142)
      {
        unint64_t v144 = v143;
        do
        {
          *unint64_t v144 = -1;
          *((_WORD *)v144 + 1) = -1;
          v144[4] = -1;
          *(_DWORD *)(v144 + 6) = 2147450879;
          v144[10] = -1;
          *(_OWORD *)(v144 + 12) = xmmword_22BB0BDA0;
          *((_DWORD *)v144 + 7) = 2147450879;
          v144 += 32;
        }
        while (v144 != &v143[32 * v142]);
      }
      *(void *)(a1 + 352) = v143;
      if (v142)
      {
        unint64_t v145 = 0;
        uint64_t v146 = (uint64_t *)(a2 + 248);
        uint64_t v147 = 30;
        do
        {
          uint64_t v146 = (uint64_t *)*v146;
          unsigned int v148 = *((_DWORD *)v146 + 2);
          if (v148 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v149 = mach_continuous_time();
              unsigned __int16 v150 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx satelliteID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v149), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 2));
              LbsOsaTrace_WriteLog(0x13u, __str, v150, 0, 1);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 352) + v147 - 30) = v148;
          }
          unsigned int v151 = *((_DWORD *)v146 + 3);
          if (HIWORD(v151))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v152 = mach_continuous_time();
              unsigned __int16 v153 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacE,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v152), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 3));
              LbsOsaTrace_WriteLog(0x13u, __str, v153, 0, 1);
            }
          }
          else
          {
            *(_WORD *)(*(void *)(a1 + 352) + v147 - 28) = v151;
          }
          unsigned int v154 = *((_DWORD *)v146 + 4);
          if (v154 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v155 = mach_continuous_time();
              unsigned __int16 v156 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alamanacToa,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v155), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 4));
              LbsOsaTrace_WriteLog(0x13u, __str, v156, 0, 1);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 352) + v147 - 26) = v154;
          }
          int v157 = *((_DWORD *)v146 + 5);
          if (v157 == (__int16)v157)
          {
            *(_WORD *)(*(void *)(a1 + 352) + v147 - 24) = v157;
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v158 = mach_continuous_time();
            unsigned __int16 v159 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacKsii,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v158), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 5));
            LbsOsaTrace_WriteLog(0x13u, __str, v159, 0, 1);
          }
          int v160 = *((_DWORD *)v146 + 6);
          if (v160 == (__int16)v160)
          {
            *(_WORD *)(*(void *)(a1 + 352) + v147 - 22) = v160;
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v161 = mach_continuous_time();
            unsigned __int16 v162 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacOmegaDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v161), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 6));
            LbsOsaTrace_WriteLog(0x13u, __str, v162, 0, 1);
          }
          unsigned int v163 = *((_DWORD *)v146 + 7);
          if (v163 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v164 = mach_continuous_time();
              unsigned __int16 v165 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacSVhealth,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v164), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 7));
              LbsOsaTrace_WriteLog(0x13u, __str, v165, 0, 1);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 352) + v147 - 20) = v163;
          }
          uint64_t v166 = *(void *)(a1 + 352) + v147;
          *(_OWORD *)(v166 - 18) = *((_OWORD *)v146 + 2);
          int v167 = *((_DWORD *)v146 + 12);
          if (v167 == (__int16)v167)
          {
            *(_WORD *)(v166 - 2) = v167;
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v168 = mach_continuous_time();
            unsigned __int16 v169 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacAF0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v168), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 12));
            LbsOsaTrace_WriteLog(0x13u, __str, v169, 0, 1);
          }
          int v170 = *((_DWORD *)v146 + 13);
          if (v170 == (__int16)v170)
          {
            *(_WORD *)(*(void *)(a1 + 352) + v147) = v170;
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v171 = mach_continuous_time();
            unsigned __int16 v172 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx almanacAF1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v171), "PSP", 69, "rrl_set_gps_almanac_data", 772, *((_DWORD *)v146 + 13));
            LbsOsaTrace_WriteLog(0x13u, __str, v172, 0, 1);
          }
          ++v145;
          v147 += 32;
        }
        while (v145 < *(unsigned __int8 *)(a1 + 346));
      }
      if (v221 && *(unsigned char *)(v221 + 218) == 1) {
        *(unsigned char *)(a1 + 345) = *(unsigned char *)(v221 + 217);
      }
      *(unsigned char *)(a1 + 336) = 1;
      *(unsigned char *)a1 = 1;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(void *)(a1 + 352) = 0;
      ms_report_exception(2, 3, 2039, "rrl_set_gps_almanac_data");
      *(unsigned char *)(a1 + 336) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 196) == 1)
  {
    int v173 = *(_DWORD *)(a2 + 164);
    if (v173 == (char)v173)
    {
      *(unsigned char *)(a1 + 620) = v173;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v174 = mach_continuous_time();
      unsigned __int16 v175 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v174), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 164));
      LbsOsaTrace_WriteLog(0x13u, __str, v175, 0, 1);
    }
    int v176 = *(_DWORD *)(a2 + 168);
    if (v176 == (char)v176)
    {
      *(unsigned char *)(a1 + 621) = v176;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v177 = mach_continuous_time();
      unsigned __int16 v178 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v177), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 168));
      LbsOsaTrace_WriteLog(0x13u, __str, v178, 0, 1);
    }
    int v179 = *(_DWORD *)(a2 + 172);
    if (v179 == (char)v179)
    {
      *(unsigned char *)(a1 + 622) = v179;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v180 = mach_continuous_time();
      unsigned __int16 v181 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v180), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 172));
      LbsOsaTrace_WriteLog(0x13u, __str, v181, 0, 1);
    }
    int v182 = *(_DWORD *)(a2 + 176);
    if (v182 == (char)v182)
    {
      *(unsigned char *)(a1 + 623) = v182;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v183 = mach_continuous_time();
      unsigned __int16 v184 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v183), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 176));
      LbsOsaTrace_WriteLog(0x13u, __str, v184, 0, 1);
    }
    int v185 = *(_DWORD *)(a2 + 180);
    if (v185 == (char)v185)
    {
      *(unsigned char *)(a1 + 624) = v185;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v186 = mach_continuous_time();
      unsigned __int16 v187 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v186), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 180));
      LbsOsaTrace_WriteLog(0x13u, __str, v187, 0, 1);
    }
    int v188 = *(_DWORD *)(a2 + 184);
    if (v188 == (char)v188)
    {
      *(unsigned char *)(a1 + 625) = v188;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v189 = mach_continuous_time();
      unsigned __int16 v190 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v189), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 184));
      LbsOsaTrace_WriteLog(0x13u, __str, v190, 0, 1);
    }
    int v191 = *(_DWORD *)(a2 + 188);
    if (v191 == (char)v191)
    {
      *(unsigned char *)(a1 + 626) = v191;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v192 = mach_continuous_time();
      unsigned __int16 v193 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v192), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 188));
      LbsOsaTrace_WriteLog(0x13u, __str, v193, 0, 1);
    }
    int v194 = *(_DWORD *)(a2 + 192);
    if (v194 == (char)v194)
    {
      *(unsigned char *)(a1 + 627) = v194;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v195 = mach_continuous_time();
      unsigned __int16 v196 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v195), "PSP", 69, "rrl_set_gnss_iono_model_data", 772, *(_DWORD *)(a2 + 192));
      LbsOsaTrace_WriteLog(0x13u, __str, v196, 0, 1);
    }
    *(unsigned char *)(a1 + 629) |= 1u;
    *(unsigned char *)(a1 + 617) = 1;
    *(unsigned char *)a1 = 1;
  }
  if (*(unsigned char *)(a2 + 232) == 1)
  {
    *(void *)(a1 + 372) = *(void *)(a2 + 200);
    unsigned int v197 = *(_DWORD *)(a2 + 208);
    if (v197 > 0xFF)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v198 = mach_continuous_time();
        unsigned __int16 v199 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcTot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v198), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 208));
        LbsOsaTrace_WriteLog(0x13u, __str, v199, 0, 1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 380) = v197;
    }
    unsigned int v200 = *(_DWORD *)(a2 + 212);
    if (v200 > 0xFF)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v201 = mach_continuous_time();
        unsigned __int16 v202 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcWNt,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v201), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 212));
        LbsOsaTrace_WriteLog(0x13u, __str, v202, 0, 1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 381) = v200;
    }
    int v203 = *(_DWORD *)(a2 + 216);
    if (v203 == (char)v203)
    {
      *(unsigned char *)(a1 + 382) = v203;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v204 = mach_continuous_time();
      unsigned __int16 v205 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcDeltaTls,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v204), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 216));
      LbsOsaTrace_WriteLog(0x13u, __str, v205, 0, 1);
    }
    unsigned int v206 = *(_DWORD *)(a2 + 220);
    if (v206 > 0xFF)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v207 = mach_continuous_time();
        unsigned __int16 v208 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcWNlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v207), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 220));
        LbsOsaTrace_WriteLog(0x13u, __str, v208, 0, 1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 383) = v206;
    }
    int v209 = *(_DWORD *)(a2 + 224);
    if (v209 == (char)v209)
    {
      *(unsigned char *)(a1 + 384) = v209;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v210 = mach_continuous_time();
      unsigned __int16 v211 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcDN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v210), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 224));
      LbsOsaTrace_WriteLog(0x13u, __str, v211, 0, 1);
    }
    int v212 = *(_DWORD *)(a2 + 228);
    if (v212 == (char)v212)
    {
      *(unsigned char *)(a1 + 385) = v212;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v213 = mach_continuous_time();
      unsigned __int16 v214 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx utcDeltaTlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v213), "PSP", 69, "rrl_set_gps_utc_model_data", 772, *(_DWORD *)(a2 + 228));
      LbsOsaTrace_WriteLog(0x13u, __str, v214, 0, 1);
    }
    *(unsigned char *)(a1 + 368) = 1;
    *(unsigned char *)a1 = 1;
    *(unsigned char *)(a1 + 8) = 1;
  }
  if (*(unsigned char *)(a2 + 368) == 1)
  {
    int v215 = *(_DWORD *)(a2 + 360);
    if (v215 > 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v216 = mach_continuous_time();
        unsigned __int16 v217 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v216), "PSP", 69, "rrl_set_gps_real_time_integrity_data", 772, *(_DWORD *)(a2 + 360));
        LbsOsaTrace_WriteLog(0x13u, __str, v217, 0, 1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 392) = v215;
    }
    char v218 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned __int8 *)(a1 + 392));
    *(void *)(a1 + 400) = v218;
    if (v218)
    {
      if (*(unsigned char *)(a1 + 392))
      {
        unint64_t v219 = 0;
        long long v220 = (uint64_t *)(a2 + 344);
        do
        {
          long long v220 = (uint64_t *)*v220;
          *(unsigned char *)(*(void *)(a1 + 400) + v219++) = *((_DWORD *)v220 + 2);
        }
        while (v219 < *(unsigned __int8 *)(a1 + 392));
      }
      *(unsigned char *)(a1 + 388) = 1;
      *(unsigned char *)a1 = 1;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      ms_report_exception(2, 3, 2319, "rrl_set_gps_real_time_integrity_data");
      *(unsigned char *)(a1 + 388) = 0;
    }
  }
}

uint64_t rrl_encode_measure_response_error(const void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  StaticLpPrivate = GetStaticLpPrivate();
  if (!a1 && StaticLpPrivate[1344] != 1) {
    return 0;
  }
  memset_s(&v7, 0x528uLL, 0, 0x528uLL);
  LODWORD(v7) = *((_DWORD *)GetStaticLpPrivate() + 339);
  int v8 = 1;
  if (GetStaticLpPrivate()[1360] == 1)
  {
    char v12 = 1;
    char v11 = 1;
    uint64_t v10 = *(void *)(GetStaticLpPrivate() + 1364);
  }
  v9[112] = 1;
  memcpy_s("rrl_encode_measure_response_error", 666, v9, 0x70u, a1, 0x70uLL);
  uint64_t v5 = rrl_encode_air_message(a2, (int *)&v7);
  GenericFreeSort(&v7, (uint64_t)&ySDL_T_RASN_PDU);
  return v5;
}

uint64_t rrl_process_assistance_data_delivery(void *a1, unsigned char *a2, uint64_t a3)
{
  if (GetStaticLpPrivate()[16] && *((_DWORD *)GetStaticLpPrivate() + 8) == 2)
  {
    StaticLpPrivate = GetStaticLpPrivate();
    if (StaticLpPrivate[528]) {
      uint64_t v7 = (uint64_t)(StaticLpPrivate + 152);
    }
    else {
      uint64_t v7 = 0;
    }
    if (StaticLpPrivate[1256]) {
      BOOL v8 = StaticLpPrivate[1264] == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (uint64_t)(StaticLpPrivate + 984);
    }
    if (StaticLpPrivate[672]) {
      BOOL v10 = StaticLpPrivate[680] == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      char v11 = 0;
    }
    else {
      char v11 = StaticLpPrivate + 668;
    }
    rrl_process_gnss_assist_data((uint64_t)a1, v7, v9, v11);
    int v12 = *((_DWORD *)GetStaticLpPrivate() + 6);
    rrl_free_asn_pdu();
    GetStaticLpPrivate()[16] = 1;
    *((_DWORD *)GetStaticLpPrivate() + 6) = v12;
    *((_DWORD *)GetStaticLpPrivate() + 8) = 3;
    uint64_t v13 = GetStaticLpPrivate();
    int v14 = rrl_encode_air_message(a3, (int *)v13 + 6);
    *a2 = v14;
    if (v14 == 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 1;
      rrl_clear_gnss_ad(a1, 1);
    }
    rrl_free_asn_pdu();
  }
  else
  {
    rrl_clean();
    return 1;
  }
  return v15;
}

uint64_t rrl_process_measure_response_msb(unsigned __int16 *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *a3 = 0;
  uint64_t v7 = *(void **)(a4 + 8);
  if (v7)
  {
    free(v7);
    *(void *)(a4 + 8) = 0;
  }
  *(_DWORD *)a4 = 0;
  memset_s(__s, 0x70uLL, 0, 0x70uLL);
  if (GetStaticLpPrivate()[1344] && *((_DWORD *)GetStaticLpPrivate() + 337) == 2)
  {
    uint64_t v8 = 0;
    int v9 = *a1;
    uint64_t v10 = 2;
    if (v9 == 1
      || v9 != 4
      && (v9 == 5
       || (rrl_free_asn_pdu(),
           uint64_t v8 = 1,
           GetStaticLpPrivate()[16] = 1,
           StaticLpPrivate = GetStaticLpPrivate(),
           *a3 = rrl_encode_measure_response_location_info((uint64_t)a1, (uint64_t)(StaticLpPrivate + 24), a4),
           rrl_free_asn_pdu(),
           uint64_t v10 = 0,
           !*a3)))
    {
      __s[0] = v10;
      *a3 = rrl_encode_measure_response_error(__s, a4);
      uint64_t v10 = v8;
    }
    int v12 = GetStaticLpPrivate();
    memset_s(v12 + 1344, 0x1CuLL, 0, 0x1CuLL);
  }
  else
  {
    ms_report_exception(2, 24582, 1157, "rrl_process_measure_response_msb");
    return 1;
  }
  return v10;
}

uint64_t rrl_encode_measure_response_location_info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_DWORD *)a2 = *((_DWORD *)GetStaticLpPrivate() + 339);
  int v6 = 1;
  *(_DWORD *)(a2 + 8) = 1;
  if (GetStaticLpPrivate()[1360] == 1)
  {
    *(unsigned char *)(a2 + 560) = 1;
    *(unsigned char *)(a2 + 512) = 1;
    *(void *)(a2 + 504) = *(void *)(GetStaticLpPrivate() + 1364);
  }
  if (*(unsigned char *)(a1 + 50))
  {
    *(unsigned char *)(a2 + 728) = 1;
    *(unsigned char *)(a2 + 584) = 1;
    BOOL v7 = *(unsigned char *)(a1 + 58) != 0;
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(unsigned char *)(a1 + 58) && *(unsigned char *)(a1 + 65))
      {
        BOOL v7 = 0;
        int v6 = 0;
        char v8 = 48;
        int v9 = 1;
        unsigned int v10 = 7;
      }
      else
      {
        BOOL v7 = 0;
        int v9 = 0;
        char v8 = 32;
        unsigned int v10 = 5;
      }
    }
    else
    {
      int v9 = 0;
      int v6 = 0;
      if (*(unsigned char *)(a1 + 58)) {
        unsigned int v10 = 5;
      }
      else {
        unsigned int v10 = 4;
      }
      char v8 = 16 * (*(unsigned char *)(a1 + 58) != 0);
    }
    *(_DWORD *)(a2 + 568) = v10;
    int v12 = gnssOsa_Calloc("posp_alloc", 18, 1, v10);
    *(void *)(a2 + 576) = v12;
    *int v12 = v8;
    **(unsigned char **)(a2 + 576) |= *(unsigned char *)(a1 + 53) & 1;
    *(unsigned char *)(*(void *)(a2 + 576) + 1) = *(unsigned char *)(a1 + 52);
    *(unsigned char *)(*(void *)(a2 + 576) + 2) = *(unsigned char *)(a1 + 55);
    *(unsigned char *)(*(void *)(a2 + 576) + 3) = *(unsigned char *)(a1 + 54);
    if (v7 || v9)
    {
      if (*(_DWORD *)(a1 + 60) == 1) {
        **(unsigned char **)(a2 + 576) |= 2u;
      }
      *(unsigned char *)(*(void *)(a2 + 576) + 4) = *(unsigned char *)(a1 + 64);
      unsigned int v13 = 5;
    }
    else
    {
      unsigned int v13 = 4;
    }
    if ((v9 | v6) == 1) {
      *(unsigned char *)(*(void *)(a2 + 576) + v13++) = *(unsigned char *)(a1 + 57);
    }
    if (v9) {
      *(unsigned char *)(*(void *)(a2 + 576) + v13) = *(unsigned char *)(a1 + 66);
    }
    *(unsigned char *)(a2 + 572) = 1;
    return 0;
  }
  if (GetStaticLpPrivate()[1352] != 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx network timing type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 69, "rrl_encode_measure_response_location_info", 770, *(_DWORD *)(a1 + 68));
      LbsOsaTrace_WriteLog(0x13u, __str, v16, 0, 1);
    }
    return 0;
  }
  *(unsigned char *)(a2 + 496) = 1;
  if (*(_DWORD *)(a1 + 68) != 1)
  {
    int v11 = *(unsigned __int8 *)(a1 + 16);
    if (v11 == 255) {
      goto LABEL_34;
    }
    *(unsigned char *)(a2 + 488) = 1;
    goto LABEL_33;
  }
  *(unsigned char *)(a2 + 488) = 1;
  *(unsigned char *)(a2 + 460) = 1;
  *(_DWORD *)(a2 + 456) = *(unsigned __int8 *)(a1 + 73);
  *(unsigned char *)(a2 + 468) = 1;
  *(_DWORD *)(a2 + 464) = *(unsigned __int16 *)(a1 + 74);
  int v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 != 255)
  {
LABEL_33:
    *(unsigned char *)(a2 + 484) = 1;
    *(_DWORD *)(a2 + 480) = v11;
  }
LABEL_34:
  *(unsigned char *)(a2 + 208) = 1;
  *(_DWORD *)(a2 + 176) = *(unsigned __int16 *)(a1 + 2);
  *(unsigned char *)(a2 + 184) = 1;
  *(_DWORD *)(a2 + 180) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 188) = *(unsigned __int8 *)(a1 + 17);
  int v17 = *(unsigned __int8 *)(a1 + 18);
  *(unsigned char *)(a2 + 196) = 0;
  *(_DWORD *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  switch(v17)
  {
    case 0:
      *(_DWORD *)(a2 + 192) = 7;
      uint64_t v18 = gnssOsa_Calloc("posp_alloc", 18, 1, 7uLL);
      *(void *)(a2 + 200) = v18;
      if (!v18)
      {
        int v22 = 2;
        int v23 = 3;
        int v24 = 1463;
        goto LABEL_61;
      }
      *(unsigned char *)(a2 + 196) = 1;
      *uint64_t v18 = 16 * *(unsigned char *)(a1 + 18);
      *(unsigned char *)(*(void *)(a2 + 200) + 1) = BYTE2(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 2) = BYTE1(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 3) = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 20) == 1) {
        *(unsigned char *)(*(void *)(a2 + 200) + 1) |= 0x80u;
      }
      *(unsigned char *)(*(void *)(a2 + 200) + 4) = *(_WORD *)(a1 + 34);
      *(unsigned char *)(*(void *)(a2 + 200) + 5) = BYTE1(*(_DWORD *)(a1 + 32));
      int v19 = *(_DWORD *)(a1 + 32);
      uint64_t v20 = 6;
      goto LABEL_54;
    case 1:
      *(_DWORD *)(a2 + 192) = 8;
      uint64_t v21 = gnssOsa_Calloc("posp_alloc", 18, 1, 8uLL);
      *(void *)(a2 + 200) = v21;
      if (!v21)
      {
        int v22 = 2;
        int v23 = 3;
        int v24 = 1498;
        goto LABEL_61;
      }
      *(unsigned char *)(a2 + 196) = 1;
      *uint64_t v21 = 16 * *(unsigned char *)(a1 + 18);
      *(unsigned char *)(*(void *)(a2 + 200) + 1) = BYTE2(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 2) = BYTE1(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 3) = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 20) == 1) {
        *(unsigned char *)(*(void *)(a2 + 200) + 1) |= 0x80u;
      }
      *(unsigned char *)(*(void *)(a2 + 200) + 4) = *(_WORD *)(a1 + 34);
      *(unsigned char *)(*(void *)(a2 + 200) + 5) = BYTE1(*(_DWORD *)(a1 + 32));
      *(unsigned char *)(*(void *)(a2 + 200) + 6) = *(_DWORD *)(a1 + 32);
      LOBYTE(v19) = *(unsigned char *)(a1 + 36);
      uint64_t v20 = 7;
      goto LABEL_54;
    case 3:
      *(_DWORD *)(a2 + 192) = 11;
      unsigned __int16 v25 = gnssOsa_Calloc("posp_alloc", 18, 1, 0xBuLL);
      *(void *)(a2 + 200) = v25;
      if (!v25)
      {
        int v22 = 2;
        int v23 = 3;
        int v24 = 1533;
        goto LABEL_61;
      }
      *(unsigned char *)(a2 + 196) = 1;
      *unsigned __int16 v25 = 16 * *(unsigned char *)(a1 + 18);
      *(unsigned char *)(*(void *)(a2 + 200) + 1) = BYTE2(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 2) = BYTE1(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 3) = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 20) == 1) {
        *(unsigned char *)(*(void *)(a2 + 200) + 1) |= 0x80u;
      }
      *(unsigned char *)(*(void *)(a2 + 200) + 4) = *(_WORD *)(a1 + 34);
      *(unsigned char *)(*(void *)(a2 + 200) + 5) = BYTE1(*(_DWORD *)(a1 + 32));
      *(unsigned char *)(*(void *)(a2 + 200) + 6) = *(_DWORD *)(a1 + 32);
      *(unsigned char *)(*(void *)(a2 + 200) + 7) = *(unsigned char *)(a1 + 36);
      *(unsigned char *)(*(void *)(a2 + 200) + 8) = *(unsigned char *)(a1 + 37);
      *(unsigned char *)(*(void *)(a2 + 200) + 9) = *(unsigned char *)(a1 + 38);
      LOBYTE(v19) = *(unsigned char *)(a1 + 49);
      uint64_t v20 = 10;
      goto LABEL_54;
    case 9:
      *(_DWORD *)(a2 + 192) = 14;
      int v26 = gnssOsa_Calloc("posp_alloc", 18, 1, 0xEuLL);
      *(void *)(a2 + 200) = v26;
      if (!v26)
      {
        int v22 = 2;
        int v23 = 3;
        int v24 = 1571;
LABEL_61:
        ms_report_exception(v22, v23, v24, "rrl_set_pos_estimate");
        return 0;
      }
      *(unsigned char *)(a2 + 196) = 1;
      *int v26 = 16 * *(unsigned char *)(a1 + 18);
      *(unsigned char *)(*(void *)(a2 + 200) + 1) = BYTE2(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 2) = BYTE1(*(void *)(a1 + 24));
      *(unsigned char *)(*(void *)(a2 + 200) + 3) = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 20) == 1) {
        *(unsigned char *)(*(void *)(a2 + 200) + 1) |= 0x80u;
      }
      *(unsigned char *)(*(void *)(a2 + 200) + 4) = *(_WORD *)(a1 + 34);
      *(unsigned char *)(*(void *)(a2 + 200) + 5) = BYTE1(*(_DWORD *)(a1 + 32));
      *(unsigned char *)(*(void *)(a2 + 200) + 6) = *(_DWORD *)(a1 + 32);
      *(unsigned char *)(*(void *)(a2 + 200) + 7) = BYTE1(*(void *)(a1 + 40));
      *(unsigned char *)(*(void *)(a2 + 200) + 8) = *(void *)(a1 + 40);
      if (*(unsigned char *)(a1 + 39) == 1) {
        *(unsigned char *)(*(void *)(a2 + 200) + 7) |= 0x80u;
      }
      *(unsigned char *)(*(void *)(a2 + 200) + 9) = *(unsigned char *)(a1 + 36);
      *(unsigned char *)(*(void *)(a2 + 200) + 10) = *(unsigned char *)(a1 + 37);
      *(unsigned char *)(*(void *)(a2 + 200) + 11) = *(unsigned char *)(a1 + 38);
      *(unsigned char *)(*(void *)(a2 + 200) + 12) = *(unsigned char *)(a1 + 48);
      LOBYTE(v19) = *(unsigned char *)(a1 + 49);
      uint64_t v20 = 13;
LABEL_54:
      *(unsigned char *)(*(void *)(a2 + 200) + v20) = v19;
      uint64_t result = rrl_encode_air_message(a3, (int *)a2);
      break;
    default:
      int v22 = 1;
      int v23 = 24590;
      int v24 = 1614;
      goto LABEL_61;
  }
  return result;
}

uint64_t rrl_process_measure_response_stand_alone(unsigned __int16 *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *a2 = 0;
  int v6 = *(void **)(a3 + 8);
  if (v6)
  {
    free(v6);
    *(void *)(a3 + 8) = 0;
  }
  *(_DWORD *)a3 = 0;
  memset_s(__s, 0x70uLL, 0, 0x70uLL);
  if (GetStaticLpPrivate()[1344] && *((_DWORD *)GetStaticLpPrivate() + 337) == 1)
  {
    int v7 = *a1;
    if (v7 == 1 || v7 == 5)
    {
      uint64_t v8 = 0;
      __s[0] = 2;
    }
    else if (v7 == 4)
    {
      __s[0] = 8;
      uint64_t v8 = 2;
    }
    else
    {
      rrl_free_asn_pdu();
      GetStaticLpPrivate()[16] = 1;
      StaticLpPrivate = GetStaticLpPrivate();
      *a2 = rrl_encode_measure_response_location_info((uint64_t)a1, (uint64_t)(StaticLpPrivate + 24), a3);
      rrl_free_asn_pdu();
      if (*a2)
      {
        uint64_t v8 = 0;
        goto LABEL_12;
      }
      __s[0] = 0;
      uint64_t v8 = 1;
    }
    *a2 = rrl_encode_measure_response_error(__s, a3);
LABEL_12:
    int v9 = GetStaticLpPrivate();
    memset_s(v9 + 1344, 0x1CuLL, 0, 0x1CuLL);
    return v8;
  }
  ms_report_exception(2, 24582, 1223, "rrl_process_measure_response_stand_alone");
  return 1;
}

uint64_t rrl_process_assistance_data_request(uint64_t a1, char a2, unsigned char *a3, uint64_t a4)
{
  *a3 = 0;
  uint64_t v8 = *(void **)(a4 + 8);
  if (v8)
  {
    free(v8);
    *(void *)(a4 + 8) = 0;
  }
  *(_DWORD *)a4 = 0;
  if (GetStaticLpPrivate()[1344])
  {
    rrl_free_asn_pdu();
    GetStaticLpPrivate()[16] = 1;
    int v9 = *((_DWORD *)GetStaticLpPrivate() + 339);
    *((_DWORD *)GetStaticLpPrivate() + 6) = v9;
    *((_DWORD *)GetStaticLpPrivate() + 8) = 1;
    if (GetStaticLpPrivate()[1360] == 1)
    {
      GetStaticLpPrivate()[584] = 1;
      GetStaticLpPrivate()[536] = 1;
      unsigned int v10 = GetStaticLpPrivate() + 1364;
      *((void *)GetStaticLpPrivate() + 66) = *(void *)v10;
    }
    StaticLpPrivate = GetStaticLpPrivate();
    StaticLpPrivate[384] = 1;
    *((_DWORD *)StaticLpPrivate + 68) = 0;
    if (a1 && (a2 & 1) != 0)
    {
      int v12 = StaticLpPrivate;
      if (GetStaticLpPrivate()[1352] != 1) {
        ms_report_exception(2, 24589, 1319, "rrl_process_assistance_data_request");
      }
      *((_DWORD *)v12 + 68) = 6;
      if (rrl_init_bits_enc() == 1)
      {
        unsigned int v13 = *(unsigned __int16 *)(a1 + 12);
        rrl_bits_append(8, *(_WORD *)(a1 + 12));
        rrl_bits_append(8, (v13 >> 8) & 1);
        if ((v13 & 8) != 0)
        {
          rrl_bits_append(2, *(unsigned __int8 *)(a1 + 15));
          rrl_bits_append(6, 0);
          rrl_bits_append(8, *(unsigned __int8 *)(a1 + 14));
          rrl_bits_append(8, *(unsigned __int8 *)(a1 + 16));
          rrl_bits_append(4, *(unsigned __int8 *)(a1 + 17));
          rrl_bits_append(4, *(unsigned __int8 *)(a1 + 18));
          if (*(unsigned char *)(a1 + 17))
          {
            unint64_t v14 = 0;
            do
            {
              rrl_bits_append(2, 0);
              rrl_bits_append(6, *(unsigned __int8 *)(a1 + v14 + 27));
              rrl_bits_append(8, *(unsigned __int8 *)(a1 + v14++ + 43));
            }
            while (v14 < *(unsigned __int8 *)(a1 + 17));
          }
        }
        if (rrl_finish_bits_enc((unsigned __int8 **)v12 + 36, (unsigned int *)v12 + 70))
        {
          v12[284] = 1;
          v12[376] = 1;
          v12[296] = 1;
        }
      }
    }
    uint64_t v15 = GetStaticLpPrivate();
    int v16 = rrl_encode_air_message(a4, (int *)v15 + 6);
    *a3 = v16;
    BOOL v17 = v16 != 1;
    rrl_free_asn_pdu();
    uint64_t v18 = GetStaticLpPrivate();
    memset_s(v18 + 1344, 0x1CuLL, 0, 0x1CuLL);
  }
  else
  {
    ms_report_exception(2, 24582, 1291, "rrl_process_assistance_data_request");
    return 1;
  }
  return v17;
}

uint64_t GN_Sen_Set_Defin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (_OWORD *)qword_26AE66C58;
  if (a1)
  {
    if (*(int *)(a1 + 16) > 2) {
      return 0;
    }
    *(_OWORD *)qword_26AE66C58 = *(_OWORD *)a1;
    long long v4 = *(_OWORD *)(a1 + 16);
    long long v5 = *(_OWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 64);
    v3[3] = *(_OWORD *)(a1 + 48);
    v3[4] = v6;
    v3[1] = v4;
    v3[2] = v5;
  }
  if (!a2) {
    goto LABEL_7;
  }
  if (*(int *)(a2 + 16) > 2) {
    return 0;
  }
  v3[5] = *(_OWORD *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 64);
  v3[8] = *(_OWORD *)(a2 + 48);
  v3[9] = v9;
  v3[6] = v7;
  v3[7] = v8;
LABEL_7:
  if (a3)
  {
    if (*(int *)(a3 + 16) > 2) {
      return 0;
    }
    v3[10] = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v12 = *(_OWORD *)(a3 + 32);
    long long v13 = *(_OWORD *)(a3 + 64);
    v3[13] = *(_OWORD *)(a3 + 48);
    v3[14] = v13;
    v3[11] = v11;
    v3[12] = v12;
  }
  return 1;
}

uint64_t GN_Sen_Set_Accl(unsigned int a1, uint64_t a2)
{
  if (a1 <= 0x2BC)
  {
    if (a1)
    {
      uint64_t v5 = 0;
      char v6 = 0;
      uint64_t v7 = a1;
      uint64_t v8 = a2;
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          double v10 = *(double *)(v8 + 8 * i);
          if (v10 < -312.970646 || v10 > 312.970646)
          {
            EvCrt_v("GN_Sen_Set_Accl: FAILED: Accl[%d].XYZ[%d] = %f <-32g or >+32g, Out of range!", v5, i, *(double *)(v8 + 8 * i));
            char v6 = 1;
          }
        }
        ++v5;
        v8 += 32;
      }
      while (v5 != a1);
      uint64_t v11 = qword_26AE66C58 + 240;
      long long v12 = (char *)a2;
      do
      {
        Cyc_Record_Write(v11, v12);
        v12 += 32;
        --v7;
      }
      while (v7);
    }
    else
    {
      char v6 = 0;
    }
    Sen_Log_3AxesData_UU(114, a1, a2, 20000.0);
    char v2 = v6 ^ 1;
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

void Sen_Log_3AxesData_UU(char a1, int a2, uint64_t a3, double a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (g_Enable_GNB_Debug)
  {
    uint64_t v7 = (char **)xmmword_26AE66D68;
    GNB_Debug_Flush_Check();
    int v8 = 0;
    int v9 = 1;
    do
    {
      memset(v26, 0, sizeof(v26));
      int v10 = *(_DWORD *)(a3 + 32 * v8 + 24);
      double v11 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      *(_WORD *)int v26 = (unint64_t)v11;
      _OWORD v26[2] = (unint64_t)v11 >> 16;
      v26[3] = (unint64_t)v11 >> 24;
      if (a2 - v8 >= 30) {
        int v12 = 30;
      }
      else {
        int v12 = a2 - v8;
      }
      void v26[4] = v12;
      unsigned __int16 v25 = &v26[5];
      if (v12 >= 1)
      {
        int v13 = 0;
        int v14 = -v12;
        uint64_t v15 = &v26[5];
        uint64_t v16 = a3 + 16 + 32 * v8;
        do
        {
          int v17 = v10;
          if (v13) {
            int v17 = *(_DWORD *)(v16 + 8) - v10;
          }
          double v18 = *(double *)(v16 - 8);
          int v19 = (int)(*(double *)(v16 - 16) * a4);
          *(_DWORD *)uint64_t v15 = v17;
          *((_WORD *)v15 + 2) = v19;
          v15[6] = BYTE2(v19);
          int v20 = (int)(v18 * a4);
          *(_WORD *)(v15 + 7) = v20;
          v15[9] = BYTE2(v20);
          double v21 = *(double *)v16;
          v16 += 32;
          int v22 = (int)(v21 * a4);
          *((_WORD *)v15 + 5) = v22;
          v15[12] = BYTE2(v22);
          v15 += 13;
          --v13;
        }
        while (v14 != v13);
        unsigned __int16 v25 = v15;
        v8 -= v13;
      }
      STEU_Encode_X(v7, a1, v26, (unint64_t *)&v25);
      GNB_Debug_Flush_Check();
    }
    while (v9++ != (a2 - 1) / 30 + 1);
  }
}

uint64_t GN_Sen_Set_Gyro(unsigned int a1, uint64_t a2)
{
  if (a1 <= 0x2BC)
  {
    if (a1)
    {
      uint64_t v5 = 0;
      char v6 = 0;
      uint64_t v7 = a1;
      uint64_t v8 = a2;
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          double v10 = *(double *)(v8 + 8 * i);
          if (v10 < -34.9 || v10 > 34.9)
          {
            EvCrt_v("GN_Sen_Set_Gyro: FAILED: Gyro[%d].XYZ[%d] = %f <-20rads/s or >+20rads/s, Out of range!", v5, i, *(double *)(v8 + 8 * i));
            char v6 = 1;
          }
        }
        ++v5;
        v8 += 32;
      }
      while (v5 != a1);
      uint64_t v11 = qword_26AE66C58 + 336;
      int v12 = (char *)a2;
      do
      {
        Cyc_Record_Write(v11, v12);
        v12 += 32;
        --v7;
      }
      while (v7);
    }
    else
    {
      char v6 = 0;
    }
    Sen_Log_3AxesData_UU(103, a1, a2, 200000.0);
    char v2 = v6 ^ 1;
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t GN_Sen_Set_Baro(unsigned int a1, double *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a1 <= 0x32)
  {
    if (a1)
    {
      uint64_t v5 = 0;
      char v6 = 0;
      uint64_t v7 = a1;
      uint64_t v8 = a2;
      do
      {
        if (*v8 < 500.0 || *v8 > 1500.0)
        {
          EvCrt_v("GN_Sen_Set_Baro: FAILED: Baro[%d].Press = %f <+500hPa or >+1500hPa, Out of range!", v5, *v8);
          char v6 = 1;
        }
        ++v5;
        v8 += 3;
      }
      while (a1 != v5);
      char v25 = v6;
      uint64_t v9 = qword_26AE66C58 + 432;
      double v10 = a2;
      do
      {
        Cyc_Record_Write(v9, v10);
        v10 += 3;
        --v7;
      }
      while (v7);
    }
    else
    {
      char v25 = 0;
    }
    if (g_Enable_GNB_Debug)
    {
      uint64_t v11 = (char **)xmmword_26AE66D68;
      GNB_Debug_Flush_Check();
      int v12 = 0;
      int v13 = 1;
      do
      {
        memset(v27, 0, sizeof(v27));
        int v14 = LODWORD(a2[3 * v12 + 2]);
        double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        *(_WORD *)uint64_t v27 = (unint64_t)v15;
        _OWORD v27[2] = (unint64_t)v15 >> 16;
        v27[3] = (unint64_t)v15 >> 24;
        if ((int)(a1 - v12) >= 30) {
          int v16 = 30;
        }
        else {
          int v16 = a1 - v12;
        }
        unsigned char v27[4] = v16;
        int v26 = &v27[5];
        if (v16 >= 1)
        {
          int v17 = 0;
          double v18 = &a2[3 * v12 + 2];
          int v19 = -v16;
          int v20 = &v27[5];
          do
          {
            int v21 = v14;
            if (v17) {
              int v21 = *(_DWORD *)v18 - v14;
            }
            *(_DWORD *)int v20 = v21;
            int v22 = (int)((*(v18 - 2) + -1000.0) * 50000.0);
            *((_WORD *)v20 + 2) = v22;
            v20[6] = BYTE2(v22);
            v20 += 7;
            --v17;
            v18 += 3;
          }
          while (v19 != v17);
          int v26 = v20;
          v12 -= v17;
        }
        STEU_Encode_X(v11, 98, v27, (unint64_t *)&v26);
        GNB_Debug_Flush_Check();
      }
      while (v13++ != (int)(a1 - 1) / 30 + 1);
    }
    char v2 = v25 ^ 1;
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

unint64_t Gnm53_11GetCurrentReferenceTime(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (!g_GnmLtlRefTime) {
    return 0;
  }
  int v0 = g_GnmLtlRefTime;
  unint64_t v1 = g_GnmLtlRefTime
     + (unint64_t)((double)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                  * (double)mach_continuous_time())
                                 - v0)
                        * 0.001);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:GPSTime,%llus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm53_11GetCurrentReferenceTime", v1);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  return v1;
}

uint64_t Gnm53_12GetBirthTime(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:BirthGPSTime,%llus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm53_12GetBirthTime", g_GnmLtlRefTime);
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  return g_GnmLtlRefTime;
}

size_t Gnm53_13SetReferenceTime(size_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a4 != 2 || g_GnmLtlRefTime != 1)
  {
    BOOL v4 = g_GnmLtlRefTime >= result || g_GnmLtlRefTime == 0;
    if (!v4 && a2 >> 4 <= 0x270 && g_GnmLtlRefTime < result)
    {
      g_GnmLtlRefTime = result;
      g_GnmLtlRefTime = a3;
      g_GnmLtlRefTime = a4;
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:GPSTime,%llus,OsTime,%ums,Src,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm53_13SetReferenceTime", g_GnmLtlRefTime, g_GnmLtlRefTime, g_GnmLtlRefTime);
        return LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
      }
    }
  }
  return result;
}

uint64_t Gnm53_14HandleOSRefTime(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_REF_OS_TIME_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm53_14HandleOSRefTime");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    size_t v4 = (unint64_t)((double)(*(unsigned int *)(a1 + 12)
                                   + 604800000 * (unint64_t)*(unsigned __int16 *)(a1 + 16))
                          * 0.001);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 18);
    uint64_t v6 = mach_continuous_time();
    Gnm53_13SetReferenceTime(v4, v5, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), 1);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm53_14HandleOSRefTime", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
  }
  return 0;
}

size_t Gnm53_15InitLtlRefTime(size_t result)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (!g_GnmLtlRefTime)
  {
    g_GnmLtlRefTime = result;
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:BirthGPSTime,%llus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm53_15InitLtlRefTime", g_GnmLtlRefTime);
      return LbsOsaTrace_WriteLog(0xBu, __str, v2, 4, 1);
    }
  }
  return result;
}

size_t Gnm53_24ComputeDefaultVarMENv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v11 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  char v13 = 0;
  *(void *)&v14[0] = 0;
  v14[1] = 0u;
  *(void *)double v15 = 0;
  __int16 v16 = 0;
  *(_OWORD *)((char *)v14 + 6) = xmmword_22BB0E7C0;
  *(_OWORD *)&v15[6] = __const__ZL26Gnm53_07GetDefaultXoParamsP22s_LsimMsg_XoInitCalInd_a_CorrFactor;
  int v17 = -2132380128;
  Gnm53_23ComputeVarMENv((uint64_t)&v10, a2, a3, a4, a5, a6);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Default XOCoef,ADC,CurCorrFact\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm53_24ComputeDefaultVarMENv");
    return LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
  }
  return result;
}

uint64_t Gnm53_23ComputeVarMENv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v42 = *MEMORY[0x263EF8340];
  bzero(v30, 0x11C6uLL);
  uint64_t v7 = 0;
  int8x16_t v8 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v6 + 28));
  int8x16_t v28 = vextq_s8(v8, v8, 8uLL);
  int v29 = *(_DWORD *)(v6 + 24);
  do
  {
    uint64_t v9 = &v41[v7];
    *(_DWORD *)uint64_t v9 = 0;
    *((_WORD *)v9 + 2) = 0;
    v7 += 8;
  }
  while (v7 != 2008);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(v40, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf((char *)v40, 0x40FuLL, "%10u %s%c %s: LTL:Compute S Curves using Coefficients\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm53_21ComputeLTLTable");
    LbsOsaTrace_WriteLog(0xBu, (char *)v40, v11, 4, 1);
  }
  int v12 = (int *)v41;
  ltl_least_squares_set((uint64_t)v41, 251, v28.i32, 5u);
  for (uint64_t i = 8; i != 1012; i += 4)
  {
    int v15 = *v12;
    v12 += 2;
    *(float *)v13.i32 = (float)v15 * 0.00023283;
    int16x8_t v16 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_lane_s32(v13, 0), (uint32x4_t)xmmword_22BB0E7D0);
    *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
    int32x2_t v13 = (int32x2_t)vmovn_s16(v16);
    *(_DWORD *)&v30[i] = v13.i32[0];
  }
  for (uint64_t j = 0; j != 502; j += 2)
    *(_WORD *)&v34[j + 1004] = 40;
  unint64_t CurrentReferenceTime = Gnm53_11GetCurrentReferenceTime();
  Gnm55_46SetGenMasterLTLTime(v30, 0x11C6u);
  unint64_t v35 = Gnm53_11GetCurrentReferenceTime();
  Gnm55_47SetNVDataCS(v34, 0x11C6u, 0x5FAu);
  unsigned __int16 v27 = 0;
  v40[0] = 0;
  if (Gnm05_57GenerateInitCLT((__int16 *)(v6 + 56), 8u, 1.125, v40, &v27))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v41, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(v41, 0x40FuLL, "%10u %s%c %s: LTL:Compute CLT using Correction Factors\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm53_22ComputeCLTTable");
      LbsOsaTrace_WriteLog(0xBu, v41, v19, 4, 1);
    }
    uint64_t v20 = v27;
    int v21 = v40[0];
    if (v27)
    {
      uint64_t v22 = 0;
      int v23 = v38;
      while (v22 != 763)
      {
        unsigned int v24 = vcvtd_n_u64_f64(v21[v22], 0xFuLL);
        *((_WORD *)v23 - 1) = v24;
        *int v23 = BYTE2(v24);
        v23 += 3;
        if (v20 == ++v22) {
          goto LABEL_19;
        }
      }
    }
    if (v21) {
LABEL_19:
    }
      free(v21);
    char v25 = 27;
  }
  else
  {
    char v25 = 19;
  }
  *(_DWORD *)&v38[766] = *(_DWORD *)(v6 + 74);
  Gnm55_47SetNVDataCS(v37, 0x11C6u, 0x5D4u);
  memcpy_s("Gnm53_23ComputeVarMENv", 826, v39, 0x5EAu, v34, 0x5EAuLL);
  Gnm55_47SetNVDataCS(v39, 0x11C6u, 0x5EAu);
  *(_DWORD *)uint64_t v30 = 3;
  char v31 = v25;
  char v32 = 0;
  __int16 v33 = Gnm27_04ComputeCS(v30, 6u);
  return Gnm55_13WriteMENv(v30, 0x11C6u);
}

uint64_t Gnm53_25ComputeCalibVarMENv(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v11 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  char v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  if (Gnm55_14ReadXOCal((uint64_t)&v10) && Gnm53_20ValidateXOCal((uint64_t)&v10))
  {
    Gnm53_23ComputeVarMENv((uint64_t)&v10, v0, v1, v2, v3, v4);
    return 1;
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:ME Coefficient Data not present\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm53_25ComputeCalibVarMENv");
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
      return 0;
    }
  }
  return result;
}

uint64_t Gnm53_20ValidateXOCal(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v17 = xmmword_22BB0E7E0;
  int v18 = -84;
  long long v15 = xmmword_22BB0E7F0;
  int v16 = 127;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Calibrated,%d,Coeff C0,%d,C1,%d,C2,%d,C3,%d,C4,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm53_20ValidateXOCal", *(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  int32x4_t v4 = *(int32x4_t *)(a1 + 28);
  int8x16_t v5 = (int8x16_t)vrev64q_s32(v4);
  int8x16_t v19 = vextq_s8(v5, v5, 8uLL);
  int v20 = *(_DWORD *)(a1 + 24);
  if (v4.i32[3] >= -2111062272 && v4.i32[3] <= (int)v15)
  {
    unint64_t v8 = 0;
    while (v8 != 4)
    {
      unint64_t v9 = v8;
      __int32 v10 = v19.i32[v8 + 1];
      if (v10 >= *((_DWORD *)&v17 + v8 + 1))
      {
        ++v8;
        if (v10 <= *((_DWORD *)&v15 + v9 + 1)) {
          continue;
        }
      }
      BOOL v7 = v9 > 3;
      goto LABEL_13;
    }
    return 1;
  }
  else
  {
    BOOL v7 = 0;
LABEL_13:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Incorrect Modem XO Initial values\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm53_20ValidateXOCal", 772);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    }
  }
  return v7;
}

uint64_t Gnm53_26ClearVarMENv(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Clearing ME NV file\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 77, "Gnm53_26ClearVarMENv");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 3, 1);
  }
  uint64_t v2 = gnssOsa_clearNV(1);
  if ((v2 & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME NV File\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 65, "Gnm53_26ClearVarMENv", 1573);
    LbsOsaTrace_WriteLog(0xBu, __str, v4, 1, 1);
  }
  return v2;
}

uint64_t Gnm53_27InitializeVarMENv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v31 = *MEMORY[0x263EF8340];
  char v25 = 0;
  uint64_t v24 = 0;
  int v26 = 0;
  char v27 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  if (!Gnm55_14ReadXOCal((uint64_t)&v24) || (Gnm53_20ValidateXOCal((uint64_t)&v24) & 1) == 0) {
    return Gnm53_31SendCalibReq();
  }
  bzero(v22, 0x11C6uLL);
  MEunsigned __int16 Nv = Gnm55_12ReadMENv(v22, 0x11C6u);
  int v7 = v23;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:NVDataType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm53_27InitializeVarMENv", v7);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if ((~v7 & 0xB) != 0) {
    int v10 = 0;
  }
  else {
    int v10 = MENv;
  }
  if (v10 == 1)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:VarMENvData present\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm53_27InitializeVarMENv");
      return LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:VarMENvData not present\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 65, "Gnm53_27InitializeVarMENv");
      LbsOsaTrace_WriteLog(0xBu, __str, v20, 1, 1);
    }
    return Gnm53_23ComputeVarMENv((uint64_t)&v24, v14, v15, v16, v17, v18);
  }
  return result;
}

size_t Gnm53_31SendCalibReq(void)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  size_t result = (size_t)gnssOsa_Calloc("Gnm53_31SendCalibReq", 983, 1, 0x10uLL);
  if (result)
  {
    unsigned __int16 v1 = (unsigned char *)result;
    if (g_XOTimerStatus == 1)
    {
      if (AgpsFsmStopTimer(8399622) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm53_31SendCalibReq", 1545);
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
      }
      g_XOTimerStatus = 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_INIT_CALIB_REQ =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm53_31SendCalibReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8604416, v1);
    size_t result = AgpsFsmStartTimer(0x802B06u, 0xFAu);
    if (result)
    {
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm53_31SendCalibReq", 1544);
        return LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      }
    }
    else
    {
      g_XOTimerStatus = 1;
    }
  }
  return result;
}

uint64_t Gnm53_33HandleCalibInd(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_CALIB_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm53_33HandleCalibInd");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (g_XOTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8399622) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm53_33HandleCalibInd", 1545);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
    }
    g_XOTimerStatus = 0;
  }
  if (a1)
  {
    Gnm53_32HandleCalibRsp(a1, v2, v3, v4, v5, v6);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm53_33HandleCalibInd", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 0, 1);
  }
  return 0;
}

uint64_t Gnm53_32HandleCalibRsp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (a1 && (uint64_t v6 = a1, *(_DWORD *)(a1 + 12) == 1) && (a1 = Gnm53_20ValidateXOCal(a1), a1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Modem XOCalibdata available\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm53_32HandleCalibRsp");
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    if ((Gnm55_15WriteXOCal(v6) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Modem XO Initial values into NV\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm53_32HandleCalibRsp", 1570);
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
    }
    Gnm53_23ComputeVarMENv(v6, v9, v10, v11, v12, v13);
    if ((g_NmeaMask & 0x200) != 0 || LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0))
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)__str = 0u;
      long long v23 = 0u;
      uint64_t v16 = mach_continuous_time();
      int v17 = snprintf(__str, 0x200uLL, "$PDXCL,%u,%u,%u,%u,%d,%d,%d,%d,%d,%d,%u,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), *(unsigned __int8 *)(v6 + 12), *(unsigned __int8 *)(v6 + 16), *(__int16 *)(v6 + 18), *(_DWORD *)(v6 + 20), *(_DWORD *)(v6 + 24), *(_DWORD *)(v6 + 28), *(_DWORD *)(v6 + 32), *(_DWORD *)(v6 + 36), *(_DWORD *)(v6 + 40), *(_DWORD *)(v6 + 44), *(_DWORD *)(v6 + 48), *(_DWORD *)(v6 + 52));
      if ((v17 & 0x80000000) == 0) {
        Gnm53_82UpdateLtlNmeaData(__str, v17);
      }
    }
    if ((g_NmeaMask & 0x200) != 0 || (uint64_t result = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0), result))
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)__str = 0u;
      long long v23 = 0u;
      uint64_t v19 = mach_continuous_time();
      uint64_t result = snprintf(__str, 0x200uLL, "$PDXCA,%u,%d,%d,%d,%d,%d,%d,%d,%d,%u,%u,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), *(__int16 *)(v6 + 56), *(__int16 *)(v6 + 58), *(__int16 *)(v6 + 60), *(__int16 *)(v6 + 62), *(__int16 *)(v6 + 64), *(__int16 *)(v6 + 66), *(__int16 *)(v6 + 68), *(__int16 *)(v6 + 70), *(unsigned __int8 *)(v6 + 72), *(unsigned __int8 *)(v6 + 73), *(unsigned __int16 *)(v6 + 74), *(unsigned __int16 *)(v6 + 76));
      if ((result & 0x80000000) == 0) {
        uint64_t result = Gnm53_82UpdateLtlNmeaData(__str, result);
      }
    }
  }
  else if ((_BYTE)dword_26AE6D43E)
  {
    uint64_t result = Gnm53_24ComputeDefaultVarMENv(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:XOCalibdata not available retry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm53_32HandleCalibRsp");
      uint64_t result = LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
    }
  }
  if ((_BYTE)dword_26AE6D43E) {
    return Gnm29_01RestoreVarMENv(0);
  }
  return result;
}

uint64_t Gnm53_34HandleCalibReqTimeout(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_XO_REQUEST_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm53_34HandleCalibReqTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  if (a1)
  {
    g_XOTimerStatus = 0;
    Gnm53_32HandleCalibRsp(0, v2, v3, v4, v5, v6);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm53_34HandleCalibReqTimeout", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

uint64_t Gnm53_43ComposeMeWakeMsg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  int v8 = v7;
  unsigned __int16 v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = (unsigned __int8 *)v6;
  uint64_t v121 = *MEMORY[0x263EF8340];
  uint64_t result = Gnm55_12ReadMENv(v112, 0x11C6u);
  if (!result) {
    return result;
  }
  int v15 = v113;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(v119, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:NVDataType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm53_43ComposeMeWakeMsg", v15);
    LbsOsaTrace_WriteLog(0xBu, v119, v17, 4, 1);
  }
  if ((~v15 & 0x1B) == 0)
  {
    if (v8)
    {
LABEL_6:
      BYTE8(v118[0]) = 0;
      *(void *)&v118[0] = 0;
      HIDWORD(v118[0]) = 0;
      LOBYTE(v118[1]) = 0;
      *(_OWORD *)((char *)&v118[1] + 2) = 0u;
      *(_OWORD *)((char *)&v118[2] + 2) = 0u;
      *(_OWORD *)((char *)&v118[3] + 2) = 0u;
      *(_OWORD *)((char *)&v118[3] + 14) = 0u;
      if ((Gnm55_14ReadXOCal((uint64_t)v118) & 1) != 0 && Gnm53_20ValidateXOCal((uint64_t)v118))
      {
        int8x16_t v18 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v118[1] + 12));
        int8x16_t v110 = vextq_s8(v18, v18, 8uLL);
        int v111 = DWORD2(v118[1]);
      }
      else
      {
        for (uint64_t i = 0; i != 5; ++i)
          v110.i32[i] = vcvts_n_s32_f32(*(float *)&dword_22BB0E840[i], 0xEuLL);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(v119, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:S-Curve Coeff C0,%d,C1,%d,C2,%d,C3,%d C4,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNM", 73, "Gnm53_42GetInitialLTL", v110.i32[0], v110.i32[1], v110.i32[2], v110.i32[3], v111);
        LbsOsaTrace_WriteLog(0xBu, v119, v24, 4, 1);
      }
      for (uint64_t j = 0; j != 502; j += 2)
        *(_WORD *)&v115[j] = 40;
      long long v26 = v116;
LABEL_18:
      Gnm53_06PrintLTLData(v26, 0x3ECuLL, v115, 0x1F6uLL);
      *unsigned __int16 v10 = 2;
      if (Gnm55_16GetVarNvData(v112, 0x11C6u, 1012, v13, v12, v10, 2))
      {
        if ((g_NmeaMask & 0x200) != 0 || LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0))
        {
          *(_DWORD *)uint64_t v109 = v12;
          memset(v118, 0, 502);
          memcpy_s("Gnm53_86GenerateXOInitialConfNmea", 2477, v118, 0x1F6u, v115, 0x1F6uLL);
          for (unsigned int k = 0; k < 0xFB; unsigned int k = (unsigned __int16)(k + 32))
          {
            memset(v119, 0, 512);
            uint64_t v28 = mach_continuous_time();
            int v29 = snprintf(v119, 0x200uLL, "$PDXLC,%u,%u,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), 8, (k >> 5) + 1, 251);
            if (v29 < 0) {
              break;
            }
            for (uint64_t m = 0; m != 64; m += 2)
            {
              if (2 * (251 - k) == m) {
                break;
              }
              __int16 v31 = v29;
              if ((unsigned __int16)v29 > 0x1FFu) {
                break;
              }
              int v29 = snprintf(&v119[(unsigned __int16)v29], 512 - (unsigned __int16)v29, ",%u", *(unsigned __int16 *)((char *)v118 + 2 * k + m));
              if (v29 < 0) {
                goto LABEL_29;
              }
              LOWORD(v29) = v31 + v29;
            }
            Gnm53_82UpdateLtlNmeaData(v119, v29);
          }
LABEL_29:
          int v32 = 2;
          unsigned int v12 = *(_DWORD *)v109;
          if ((v15 & 4) == 0) {
            goto LABEL_34;
          }
          goto LABEL_32;
        }
        int v32 = 2;
        if ((v15 & 4) == 0)
        {
LABEL_34:
          if (Gnm55_16GetVarNvData(v112, 0x11C6u, 2260, v13, v12, v10, 8)) {
            int v33 = v32 | 8;
          }
          else {
            int v33 = v32;
          }
          if (Gnm55_16GetVarNvData(v112, 0x11C6u, 3028, v13, v12, v10, 16)) {
            int v34 = v33 | 0x10;
          }
          else {
            int v34 = v33;
          }
          Gnm53_09PrintKfCltAdc(v112);
          uint64_t v35 = *v10;
          if ((unint64_t)(v35 + 24) + 2 <= v12)
          {
            v13[v35] = 24;
            v13[*v10 + 1] = 0;
            memcpy_s("Gnm53_43ComposeMeWakeMsg", 1340, &v13[*v10 + 2], v12 - *v10 - 2, &v110, 0x14uLL);
            *v10 += 26;
            v34 |= 0x20u;
            if ((g_NmeaMask & 0x200) != 0 || LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0))
            {
              memset(v119, 0, 512);
              uint64_t v36 = mach_continuous_time();
              int v37 = snprintf(v119, 0x200uLL, "$PDXIC,%u,%d,%d,%d,%d,%d,%d", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), 0, v111, v110.i32[3], v110.i32[2], v110.i32[1], v110.i32[0]);
              if ((v37 & 0x80000000) == 0) {
                Gnm53_82UpdateLtlNmeaData(v119, v37);
              }
            }
          }
          *uint64_t v13 = v34;
          v13[1] = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
          {
            bzero(v119, 0x410uLL);
            uint64_t v38 = mach_continuous_time();
            unsigned __int16 v39 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:MENvType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNM", 73, "Gnm53_43ComposeMeWakeMsg", v34);
            LbsOsaTrace_WriteLog(0xBu, v119, v39, 4, 1);
          }
          return 1;
        }
      }
      else
      {
        int v32 = 0;
        if ((v15 & 4) == 0) {
          goto LABEL_34;
        }
      }
LABEL_32:
      if (Gnm55_16GetVarNvData(v112, 0x11C6u, 1540, v13, v12, v10, 4)) {
        v32 |= 4u;
      }
      goto LABEL_34;
    }
    int v40 = v113;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
    {
      bzero(v119, 0x410uLL);
      uint64_t v41 = mach_continuous_time();
      unsigned __int16 v42 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:NVDataType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNM", 68, "Gnm53_08IsMasterLTLLearnt", v40);
      LbsOsaTrace_WriteLog(0xBu, v119, v42, 5, 1);
    }
    if ((~v40 & 3) != 0)
    {
LABEL_58:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(v119, 0x410uLL);
        uint64_t v45 = mach_continuous_time();
        unsigned __int16 v46 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:Master LTL Is Not Learnt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNM", 73, "Gnm53_08IsMasterLTLLearnt");
        LbsOsaTrace_WriteLog(0xBu, v119, v46, 4, 1);
      }
      goto LABEL_6;
    }
    uint64_t v43 = 1004;
    bzero(v119, 0x3ECuLL);
    memcpy(v120, v115, sizeof(v120));
    do
    {
      if (*(unsigned __int16 *)&v119[v43] >= 0x29u)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
          goto LABEL_67;
        }
        bzero(v118, 0x410uLL);
        uint64_t v48 = mach_continuous_time();
        size_t v49 = (unsigned __int16)snprintf((char *)v118, 0x40FuLL, "%10u %s%c %s: LTL:Master LTL Is Learnt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNM", 73, "Gnm53_08IsMasterLTLLearnt");
        long long v50 = (char *)v118;
        goto LABEL_66;
      }
      v43 += 2;
    }
    while (v43 != 1506);
    memcpy(v119, v114, sizeof(v119));
    memset((char *)&v118[62] + 12, 0, 480);
    memset((char *)&v118[92] + 12, 0, 22);
    memcpy(v118, v116, 0x3ECuLL);
    uint64_t v44 = 0;
    while (vabds_f32(*(float *)&v119[v44], *(float *)((char *)v118 + v44)) <= 0.002)
    {
      v44 += 4;
      if (v44 == 1004) {
        goto LABEL_58;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v117, 0x410uLL);
      uint64_t v51 = mach_continuous_time();
      size_t v49 = (unsigned __int16)snprintf(v117, 0x40FuLL, "%10u %s%c %s: LTL:Master LTL Is Learnt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "GNM", 73, "Gnm53_08IsMasterLTLLearnt");
      long long v50 = v117;
LABEL_66:
      LbsOsaTrace_WriteLog(0xBu, v50, v49, 4, 1);
    }
LABEL_67:
    for (uint64_t n = 0; n != 2008; n += 8)
    {
      long long v53 = &v119[n];
      *(_DWORD *)long long v53 = 0;
      *((_WORD *)v53 + 2) = 0;
    }
    for (iuint64_t i = 0; ii != 2008; ii += 8)
    {
      uint64_t v55 = (char *)v118 + ii;
      *(_DWORD *)uint64_t v55 = 0;
      *((_WORD *)v55 + 2) = 0;
    }
    uint64_t v56 = 0;
    for (juint64_t j = 0; jj != 502; jj += 2)
    {
      v47.i32[0] = *(_DWORD *)&v114[v56];
      int8x16_t v58 = (int8x16_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v47)), (uint32x4_t)xmmword_22BB0E800);
      uint8x8_t v47 = (uint8x8_t)vorr_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
      *(_DWORD *)&v119[4 * jj] = vcvtms_s32_f32((float)(COERCE_FLOAT(v47.i32[0] | v47.i32[1]) * 4295.0) + 0.5);
      *(_WORD *)&v119[2 * v56 + 4] = *(_WORD *)&v115[jj];
      v56 += 4;
    }
    ltl_least_squares_polynom((uint64_t)v119, 251, (uint64_t)&v110, 5);
    ltl_least_squares_set((uint64_t)v118, 251, v110.i32, 5u);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v117, 0x410uLL);
      uint64_t v60 = mach_continuous_time();
      unsigned __int16 v61 = snprintf(v117, 0x40FuLL, "%10u %s%c %s: LTL:S-Curve Coeff C0,%d,C1,%d,C2,%d,C3,%d,C4,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "GNM", 73, "Gnm53_41PerformLTLPolyfit", v110.i32[0], v110.i32[1], v110.i32[2], v110.i32[3], v111);
      LbsOsaTrace_WriteLog(0xBu, v117, v61, 4, 1);
    }
    size_t v62 = (int *)v118;
    for (kunsigned int k = 8; kk != 1012; kk += 4)
    {
      int v64 = *v62;
      v62 += 2;
      *(float *)v59.i32 = (float)v64 * 0.00023283;
      int16x8_t v65 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_lane_s32(v59, 0), (uint32x4_t)xmmword_22BB0E7D0);
      *(int16x4_t *)v65.i8 = vmovn_s32((int32x4_t)v65);
      int32x2_t v59 = (int32x2_t)vmovn_s16(v65);
      *(_DWORD *)&v112[kk] = v59.i32[0];
    }
    char v108 = v15;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v117, 0x410uLL);
      uint64_t v66 = mach_continuous_time();
      unsigned __int16 v67 = snprintf(v117, 0x40FuLL, "%10u %s%c %s: LTL:Polyfit performed on Master ME NV\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "GNM", 73, "Gnm53_41PerformLTLPolyfit");
      LbsOsaTrace_WriteLog(0xBu, v117, v67, 4, 1);
    }
    bzero(v119, 0x3ECuLL);
    memcpy(v120, v115, sizeof(v120));
    uint64_t v68 = 0;
    char v69 = 0;
    do
    {
      unsigned __int16 v70 = &v119[2 * v68];
      unsigned int v71 = *((unsigned __int16 *)v70 + 502);
      if (v71 >= 0x29)
      {
        uint64_t v72 = 0;
        int v73 = v70 + 1004;
        float v74 = (float)((float)(unsigned __int16)v68 * 0.5) + -30.0;
        float v75 = (float)v110.i32[0] + (float)((float)(v74 + -30.0) * (float)v110.i32[1]);
        float v76 = v74 + -30.0;
        do
        {
          float v76 = (float)(v74 + -30.0) * v76;
          float v75 = v75 + (float)(v76 * (float)v110.i32[v72 + 2]);
          ++v72;
        }
        while (v72 != 3);
        uint64_t v77 = 0;
        float v78 = v75 / 70369000.0;
        float v79 = (float)(v74 + -0.25) + -30.0;
        float v80 = (float)v110.i32[0] + (float)(v79 * (float)v110.i32[1]);
        float v81 = v79;
        do
        {
          float v81 = v79 * v81;
          float v80 = v80 + (float)(v81 * (float)v110.i32[v77 + 2]);
          ++v77;
        }
        while (v77 != 3);
        uint64_t v82 = 0;
        int v83 = (int)(float)(v78 * 1000.0);
        int v84 = (int)(float)((float)(v80 / 70369000.0) * 1000.0);
        do
        {
          if ((unsigned __int16)k_CountRange[v82] <= v71)
          {
            uint64_t v87 = &k_UncertainityPPB[v82];
            goto LABEL_94;
          }
          ++v82;
        }
        while (v82 != 5);
        uint64_t v85 = 0;
        while ((unsigned __int16)Gnm53_66GetUncertfromTempRange(unsigned short)::a_TempRange[v85] > (unsigned __int16)v68)
        {
          if (++v85 == 4)
          {
            unsigned int v86 = 7500;
            goto LABEL_95;
          }
        }
        uint64_t v87 = (__int16 *)((char *)&Gnm53_66GetUncertfromTempRange(unsigned short)::a_UncertainityPPB + v85 * 2);
LABEL_94:
        unsigned int v86 = (unsigned __int16)*v87;
LABEL_95:
        unsigned __int16 v88 = v83 - v84;
        if (v83 - v84 < 0) {
          unsigned __int16 v88 = v84 - v83;
        }
        if (v86 < v88)
        {
          uint64_t v89 = 0;
          while ((unsigned __int16)k_UncertainityPPB[v89] < v88)
          {
            if (++v89 == 5)
            {
              int v90 = 40;
              goto LABEL_103;
            }
          }
          int v90 = (unsigned __int16)k_CountRange[v89];
LABEL_103:
          *int v73 = v90;
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
          {
            bzero(v118, 0x410uLL);
            uint64_t v91 = mach_continuous_time();
            unsigned __int16 v92 = snprintf((char *)v118, 0x40FuLL, "%10u %s%c %s: LTL:Polyfit LTL Count Modified for Temp,%f,Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v91), "GNM", 73, "Gnm53_69EvaluatePolyfitLTL", v74, v90);
            char v69 = 1;
            LbsOsaTrace_WriteLog(0xBu, (char *)v118, v92, 4, 1);
          }
          else
          {
            char v69 = 1;
          }
        }
      }
      ++v68;
    }
    while (v68 != 251);
    if (v69) {
      memcpy(v115, v120, 0x1F6uLL);
    }
    LOBYTE(v15) = v108;
    if ((dword_26AE53244 & 0x8000) == 0)
    {
LABEL_142:
      long long v26 = v114;
      goto LABEL_18;
    }
    unint64_t CurrentReferenceTime = Gnm53_11GetCurrentReferenceTime();
    if (!CurrentReferenceTime
      || (unint64_t v94 = CurrentReferenceTime,
          uint64_t AgeingTime = Gnm55_34GetAgeingTime(v112),
          uint64_t GenMasterLTLTime = Gnm55_35GetGenMasterLTLTime(v112),
          unint64_t v97 = v94 - GenMasterLTLTime,
          v94 - GenMasterLTLTime < 0x127501))
    {
      unsigned int v98 = 60;
      goto LABEL_129;
    }
    if (v97 - 2678401 > 0xCC587F)
    {
      if (v97 - 16070401 >= 0xF53700)
      {
        if (2678400 * (v97 % 6) <= v94 - AgeingTime) {
          unsigned int v98 = 100;
        }
        else {
          unsigned int v98 = 0;
        }
LABEL_129:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(v119, 0x410uLL);
          uint64_t v101 = mach_continuous_time();
          unsigned __int16 v102 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:MaxCountLevel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v101), "GNM", 73, "Gnm53_53HandleLTLAgeing", v98);
          LbsOsaTrace_WriteLog(0xBu, v119, v102, 4, 1);
        }
        if (v98)
        {
          bzero(v119, 0x3ECuLL);
          memcpy(v120, v115, sizeof(v120));
          uint64_t v103 = 0;
          char v104 = 0;
LABEL_133:
          uint64_t v105 = v103 + 502;
          do
          {
            if (*(unsigned __int16 *)&v119[2 * v105] > v98)
            {
              *(_WORD *)&v119[2 * v105] = v98;
              uint64_t v103 = v105 - 501;
              char v104 = 1;
              if (v105 != 752) {
                goto LABEL_133;
              }
              goto LABEL_140;
            }
            ++v105;
          }
          while (v105 != 753);
          if ((v104 & 1) == 0) {
            goto LABEL_142;
          }
LABEL_140:
          memcpy(v115, v120, 0x1F6uLL);
          g_AgeingTimeGpsSeconds = Gnm53_11GetCurrentReferenceTime();
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
          {
            bzero(v118, 0x410uLL);
            uint64_t v106 = mach_continuous_time();
            unsigned __int16 v107 = snprintf((char *)v118, 0x40FuLL, "%10u %s%c %s: LTL:ME LTL Ageing Done\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "GNM", 73, "Gnm53_52PerformLTLAgeing");
            LbsOsaTrace_WriteLog(0xBu, (char *)v118, v107, 4, 1);
          }
        }
        goto LABEL_142;
      }
      BOOL v99 = (unint64_t)(AgeingTime - GenMasterLTLTime) < 0xF53701 || AgeingTime == 0;
      int v100 = 1000;
    }
    else
    {
      BOOL v99 = (unint64_t)(AgeingTime - GenMasterLTLTime) < 0x127501 || AgeingTime == 0;
      int v100 = 100;
    }
    if (v99) {
      unsigned int v98 = v100;
    }
    else {
      unsigned int v98 = 0;
    }
    goto LABEL_129;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(v119, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(v119, 0x40FuLL, "%10u %s%c %s: LTL:Mandatory ME NV Data not preset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 65, "Gnm53_43ComposeMeWakeMsg");
    LbsOsaTrace_WriteLog(0xBu, v119, v21, 1, 1);
    return 0;
  }
  return result;
}

size_t Gnm53_06PrintLTLData(const void *a1, size_t a2, const void *a3, size_t a4)
{
  v26[125] = *MEMORY[0x263EF8340];
  bzero(&__dst, 0x3ECuLL);
  memset(v24, 0, 502);
  memcpy_s("Gnm53_06PrintLTLData", 329, &__dst, 0x3ECu, a1, a2);
  memcpy_s("Gnm53_06PrintLTLData", 335, v24, 0x1F6u, a3, a4);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Temp FreqOffset Count\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm53_06PrintLTLData");
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:%5.1f %6d %5u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm53_06PrintLTLData", -30.0, (int)(float)(__dst * 1000.0), v24[0]);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(v22, 0x258uLL);
    uint64_t v13 = &v24[1];
    uint64_t v14 = v26;
    unint64_t v15 = 1;
    do
    {
      unint64_t v16 = 0;
      for (unsigned int i = 0; i < 0x258; unsigned int i = (unsigned __int16)(v18 + i))
      {
        __int16 v18 = snprintf(&v22[i], 600 - i, "%5.1f %6d %5u ", (float)((float)((float)((int)v15 + (int)v16) * 0.5) + -30.0), (int)(float)(*((float *)v14 + v16) * 1000.0), (unsigned __int16)v13[v16]);
        if (v16 > 0x17) {
          break;
        }
        ++v16;
      }
      size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm53_06PrintLTLData", v22);
        size_t result = LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
      }
      v13 += 25;
      uint64_t v14 = (void *)((char *)v14 + 100);
      BOOL v21 = v15 >= 0xE2;
      v15 += 25;
    }
    while (!v21);
  }
  return result;
}

size_t Gnm53_09PrintKfCltAdc(unsigned __int8 *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  bzero(v27, 0x258uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Index KFValue\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm53_09PrintKfCltAdc");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  for (unint64_t i = 0; i < 0x2D0; unint64_t i = (unsigned __int16)(i + 20))
  {
    unint64_t v5 = 0;
    for (unsigned int j = 0; j < 0x258; unsigned int j = (unsigned __int16)(v7 + j))
    {
      __int16 v7 = snprintf(&v27[j], 600 - j, "%u %u,", i + v5, a1[i + 1540 + v5]);
      if (v5 > 0x12) {
        break;
      }
      ++v5;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm53_09PrintKfCltAdc", v27);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:Index CLTValue\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm53_09PrintKfCltAdc");
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  for (unint64_t k = 0; k < 0x300; unint64_t k = (unsigned __int16)(k + 48))
  {
    unint64_t v13 = 0;
    unsigned int v14 = 0;
    unint64_t v15 = k / 3;
    do
    {
      __int16 v16 = snprintf(&v27[v14], 600 - v14, "%u %u,", v15, *(unsigned __int16 *)&a1[k + 2260 + v13] | (a1[k + 2262 + v13] << 16));
      if (v13 > 0x2C) {
        break;
      }
      v13 += 3;
      unsigned int v14 = (unsigned __int16)(v16 + v14);
      LODWORD(v15) = v15 + 1;
    }
    while (v14 < 0x258);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm53_09PrintKfCltAdc", v27);
      LbsOsaTrace_WriteLog(0xBu, __str, v18, 4, 1);
    }
  }
  int v19 = a1[3028];
  int v20 = a1[3029];
  int v21 = a1[3030];
  int v22 = a1[3031];
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v24 = mach_continuous_time();
    unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:AdcGain,%u,AdcOffset,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm53_09PrintKfCltAdc", v19 | (v20 << 8), v21 | (v22 << 8));
    return LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
  }
  return result;
}

uint64_t Gnm53_44BackupLearntMENv(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  unsigned int v9 = v8;
  uint64_t v74 = *MEMORY[0x263EF8340];
  unsigned __int16 v37 = 2;
  if (v8 <= 1)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
    uint64_t result = 0;
    if (!IsLoggingAllowed) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Learnt ME NV Data LengRec,%u,LengCalc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 87, "Gnm53_44BackupLearntMENv", 770, v9, 2);
    unsigned int v14 = __str;
    goto LABEL_36;
  }
  int v15 = v7;
  __int16 v16 = (unsigned __int8 *)v6;
  bzero(__str, 0x11C6uLL);
  Gnm55_12ReadMENv((unsigned __int8 *)__str, 0x11C6u);
  int v17 = v71;
  if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) == 0)
  {
    if ((v15 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    if (Gnm55_17GetMENvData(v16, v9, &v37, (unsigned __int8 *)__str, 0x11C6u, 1540, 4)) {
      LOWORD(v17) = v17 | 4;
    }
    if ((v15 & 8) == 0) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  bzero(v38, 0x410uLL);
  uint64_t v18 = mach_continuous_time();
  unsigned __int16 v19 = snprintf(v38, 0x40FuLL, "%10u %s%c %s: LTL:MENvType,%u,NVDataType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm53_44BackupLearntMENv", v15, v17);
  LbsOsaTrace_WriteLog(0xBu, v38, v19, 4, 1);
  if ((v15 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_6:
  if ((v15 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_12:
  if (v37 + 2 <= v9)
  {
    unint64_t v20 = (__int16)(v16[v37 + 1] << 8) | (unint64_t)v16[v37];
    if ((dword_26AE53244 & 0x20000) != 0)
    {
      if (Gnm55_17GetMENvData(v16, v9, &v37, (unsigned __int8 *)__str, 0x11C6u, 2260, 8)) {
        LOWORD(v17) = v17 | 8;
      }
    }
    else
    {
      v37 += v20 + 2;
    }
    if (v20 == 768)
    {
      uint64_t v21 = v37;
      if (v37 <= v9 && ((g_NmeaMask & 0x200) != 0 || LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0)))
      {
        unsigned int v22 = 0;
        unsigned __int16 v23 = 0;
        uint64_t v24 = &v16[v21 - v20];
        long long v25 = 0uLL;
        long long v26 = (double *)&g_Crc32_RemTable[230];
        do
        {
          long long v68 = v25;
          long long v69 = v25;
          long long v66 = v25;
          long long v67 = v25;
          long long v64 = v25;
          long long v65 = v25;
          long long v62 = v25;
          long long v63 = v25;
          long long v60 = v25;
          long long v61 = v25;
          long long v58 = v25;
          long long v59 = v25;
          long long v56 = v25;
          long long v57 = v25;
          long long v54 = v25;
          long long v55 = v25;
          long long v52 = v25;
          long long v53 = v25;
          long long v50 = v25;
          long long v51 = v25;
          long long v48 = v25;
          long long v49 = v25;
          long long v46 = v25;
          long long v47 = v25;
          long long v44 = v25;
          long long v45 = v25;
          long long v42 = v25;
          long long v43 = v25;
          long long v40 = v25;
          long long v41 = v25;
          unsigned int v27 = v23 / 0x60u + 1;
          *(_OWORD *)uint64_t v38 = v25;
          long long v39 = v25;
          uint64_t v28 = mach_continuous_time();
          int v29 = snprintf(v38, 0x200uLL, "$PDXCD,%u,%u,%u,%u", (unint64_t)(v26[61] * (double)v28), 8, v27, 256);
          if (v29 < 0) {
            break;
          }
          unsigned __int16 v30 = v29;
          for (unsigned int i = 0; i < 0x60; unsigned int i = (i + 3))
          {
            unint64_t v32 = i + (unint64_t)v22;
            if (v32 > 0x2FD || v30 > 0x1FFu) {
              break;
            }
            int v33 = snprintf(&v38[v30], 512 - v30, ",%u", v24[v32] | (v24[v32 + 1] << 8) | (v24[v32 + 2] << 16));
            if (v33 < 0) {
              goto LABEL_29;
            }
            v30 += v33;
          }
          Gnm53_82UpdateLtlNmeaData(v38, v30);
          unsigned __int16 v23 = v22 + 96;
          unsigned int v22 = (unsigned __int16)(v22 + 96);
          long long v25 = 0uLL;
          long long v26 = (double *)(g_Crc32_RemTable + 920);
        }
        while (v22 < 0x300);
      }
    }
  }
LABEL_29:
  if ((v15 & 0x10) != 0 && Gnm55_17GetMENvData(v16, v9, &v37, (unsigned __int8 *)__str, 0x11C6u, 3028, 16)) {
    LOWORD(v17) = v17 | 0x10;
  }
  Gnm53_09PrintKfCltAdc((unsigned __int8 *)__str);
  Gnm55_47SetNVDataCS(v73, 0xBC2u, 0x5D4u);
  int v34 = v37;
  if (v37 == v9)
  {
    unsigned __int16 v71 = v17;
    __int16 v72 = Gnm27_04ComputeCS((unsigned __int8 *)__str, 6u);
    return Gnm55_13WriteMENv((unsigned __int8 *)__str, 0x11C6u);
  }
  int v35 = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  uint64_t result = 0;
  if (v35)
  {
    bzero(v38, 0x410uLL);
    uint64_t v36 = mach_continuous_time();
    size_t v13 = (unsigned __int16)snprintf(v38, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Learnt ME NV Data LenRec,%u,LenCalc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNM", 87, "Gnm53_44BackupLearntMENv", 770, v9, v34);
    unsigned int v14 = v38;
LABEL_36:
    LbsOsaTrace_WriteLog(0xBu, v14, v13, 2, 1);
    return 0;
  }
  return result;
}

size_t Gnm53_56SetStlDivInd(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  g_StlDivergenceIndicator = 1;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:STL Divergence Bit Set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm53_56SetStlDivInd");
    return LbsOsaTrace_WriteLog(0xBu, __str, v2, 2, 1);
  }
  return result;
}

size_t Gnm53_58SetLtlExtHWClk(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  g_IsExtClocunint64_t k = 1;
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LTL:ExtHW Clk Set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 73, "Gnm53_58SetLtlExtHWClk");
    return LbsOsaTrace_WriteLog(0xBu, __str, v2, 4, 1);
  }
  return result;
}

uint64_t Gnm53_63UpdateMasterLTLNv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v62 = *MEMORY[0x263EF8340];
  bzero(v52, 0x11C6uLL);
  Gnm55_12ReadMENv(v52, 0x11C6u);
  if (!word_26AE53E38) {
    goto LABEL_42;
  }
  int v6 = v53;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(v60, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf((char *)v60, 0x40FuLL, "%10u %s%c %s: LTL:MELearnings Present\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm53_63UpdateMasterLTLNv");
    LbsOsaTrace_WriteLog(0xBu, (char *)v60, v8, 4, 1);
  }
  int v9 = g_PrevUsedLtl;
  if ((v6 & 1) == 0 || g_PrevUsedLtl != 1)
  {
LABEL_63:
    memcpy(v55, &g_LTLDataPPM, sizeof(v55));
    memcpy(v56, &word_26AE53E38, sizeof(v56));
    if ((v6 & 1) == 0 || v9 == 1)
    {
      unint64_t CurrentReferenceTime = Gnm53_11GetCurrentReferenceTime();
      Gnm55_46SetGenMasterLTLTime(v52, 0x11C6u);
      uint64_t v44 = 1514;
      unint64_t v43 = Gnm53_11GetCurrentReferenceTime();
    }
    else
    {
      unint64_t v43 = g_AgeingTimeGpsSeconds;
      if (!g_AgeingTimeGpsSeconds)
      {
LABEL_69:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(v60, 0x410uLL);
          uint64_t v45 = mach_continuous_time();
          unsigned __int16 v46 = snprintf((char *)v60, 0x40FuLL, "%10u %s%c %s: LTL:NVDataType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "GNM", 73, "Gnm53_63UpdateMasterLTLNv", v6 | 3);
          LbsOsaTrace_WriteLog(0xBu, (char *)v60, v46, 4, 1);
        }
        unsigned __int16 v53 = v6 | 3;
        __int16 v54 = Gnm27_04ComputeCS(v52, 6u);
        bzero(&g_LTLDataPPM, 0x5E2uLL);
        g_AgeingTimeGpsSeconds = 0;
        Gnm55_47SetNVDataCS(v55, 0x11C6u, 0x5FAu);
        Gnm55_13WriteMENv(v52, 0x11C6u);
        return gnssOsa_flushNv();
      }
      uint64_t v44 = 1522;
    }
    *(void *)&v52[v44] = v43;
    goto LABEL_69;
  }
  memset(v59, 0, 502);
  memcpy(v60, v55, sizeof(v60));
  memcpy(v61, v56, 0x1F6uLL);
  uint64_t v10 = 0;
  unsigned __int16 v11 = 0;
  do
  {
    if (*(unsigned __int16 *)((char *)&g_LTLDataPPM + v10 + 1004) > 0x28u) {
      ++v11;
    }
    v10 += 2;
  }
  while (v10 != 502);
  if (!v11)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v12 = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v14 = 0;
  unsigned __int16 v15 = 0;
  do
  {
    uint64_t v16 = 0;
    unsigned int v17 = *((unsigned __int16 *)&g_LTLDataPPM + v12 + 502);
    do
    {
      if ((unsigned __int16)k_CountRange[v16] <= v17)
      {
        unint64_t v20 = &k_UncertainityPPB[v16];
        goto LABEL_21;
      }
      ++v16;
    }
    while (v16 != 5);
    uint64_t v18 = 0;
    while ((unsigned __int16)Gnm53_66GetUncertfromTempRange(unsigned short)::a_TempRange[v18] > v15)
    {
      if (++v18 == 4)
      {
        unsigned int v19 = 7500;
        goto LABEL_22;
      }
    }
    unint64_t v20 = (__int16 *)((char *)&Gnm53_66GetUncertfromTempRange(unsigned short)::a_UncertainityPPB + v18 * 2);
LABEL_21:
    unsigned int v19 = (unsigned __int16)*v20;
LABEL_22:
    uint64_t v21 = 0;
    unsigned int v22 = (unsigned __int16)v60[v12 + 502];
    do
    {
      if ((unsigned __int16)k_CountRange[v21] <= v22)
      {
        long long v25 = &k_UncertainityPPB[v21];
        goto LABEL_31;
      }
      ++v21;
    }
    while (v21 != 5);
    uint64_t v23 = 0;
    while ((unsigned __int16)Gnm53_66GetUncertfromTempRange(unsigned short)::a_TempRange[v23] > v15)
    {
      if (++v23 == 4)
      {
        unsigned int v24 = 7500;
        goto LABEL_32;
      }
    }
    long long v25 = (__int16 *)((char *)&Gnm53_66GetUncertfromTempRange(unsigned short)::a_UncertainityPPB + v23 * 2);
LABEL_31:
    unsigned int v24 = (unsigned __int16)*v25;
LABEL_32:
    double v26 = (double)v24 * (double)v24 + (double)v19 * (double)v19;
    double v27 = (float)((float)(*((float *)&g_LTLDataPPM + v12) - *(float *)&v60[2 * v12]) * 1000.0);
    if (v27 * v27 > v26 * 0.433333333 * 0.433333333)
    {
      v59[v12] = (int)sqrt(v26);
      if (v22 > 0x28) {
        ++v14;
      }
      if (v17 > 0x28) {
        ++v13;
      }
    }
    ++v12;
    ++v15;
  }
  while (v12 != 251);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(v58, 0x410uLL);
    uint64_t v28 = mach_continuous_time();
    int v29 = v13;
    unsigned __int16 v30 = snprintf(v58, 0x40FuLL, "%10u %s%c %s: LTL:LearnedBins,%u,EffectiveBins,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNM", 73, "Gnm53_62EvaluateMasterLTL", v11, v13);
    LbsOsaTrace_WriteLog(0xBu, v58, v30, 4, 1);
  }
  else
  {
    int v29 = v13;
  }
  if (v11 <= (2 * v29))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v58, 0x410uLL);
      uint64_t v41 = mach_continuous_time();
      unsigned __int16 v42 = snprintf(v58, 0x40FuLL, "%10u %s%c %s: LTL:Use Learnt Initial LTL Table + Default Count\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "GNM", 73, "Gnm53_62EvaluateMasterLTL");
      LbsOsaTrace_WriteLog(0xBu, v58, v42, 4, 1);
    }
    memset_pattern16(&word_26AE53E38, asc_22BB0E810, 0x1F6uLL);
    goto LABEL_62;
  }
  if (v13 | v14)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(v58, 0x410uLL);
      uint64_t v36 = mach_continuous_time();
      unsigned __int16 v37 = snprintf(v58, 0x40FuLL, "%10u %s%c %s: LTL:Use Master LTL Table + Effective Uncertainty\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNM", 73, "Gnm53_62EvaluateMasterLTL");
      LbsOsaTrace_WriteLog(0xBu, v58, v37, 4, 1);
    }
    memcpy(&g_LTLDataPPM, v60, 0x3ECuLL);
    memcpy(&word_26AE53E38, v61, 0x1F6uLL);
    for (uint64_t i = 0; i != 251; ++i)
    {
      if (v59[i])
      {
        uint64_t v39 = 0;
        while ((unsigned __int16)k_UncertainityPPB[v39] < (unsigned __int16)v59[i])
        {
          if (++v39 == 5)
          {
            __int16 v40 = 40;
            goto LABEL_56;
          }
        }
        __int16 v40 = k_CountRange[v39];
LABEL_56:
        *((_WORD *)&g_LTLDataPPM + i + 502) = v40;
      }
    }
    goto LABEL_62;
  }
  uint64_t v47 = 0;
  unsigned __int16 v48 = 0;
  do
  {
    if (*(unsigned __int16 *)&v61[v47] > 0x28u) {
      ++v48;
    }
    v47 += 2;
  }
  while (v47 != 502);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (v11 > v48)
  {
    if (IsLoggingAllowed)
    {
      bzero(v58, 0x410uLL);
      uint64_t v50 = mach_continuous_time();
      unsigned __int16 v51 = snprintf(v58, 0x40FuLL, "%10u %s%c %s: LTL:Use Learnt Initial LTL Table\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNM", 73, "Gnm53_62EvaluateMasterLTL");
      LbsOsaTrace_WriteLog(0xBu, v58, v51, 4, 1);
    }
LABEL_62:
    int v9 = g_PrevUsedLtl;
    goto LABEL_63;
  }
  if (IsLoggingAllowed)
  {
LABEL_41:
    bzero(v58, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    unsigned __int16 v32 = snprintf(v58, 0x40FuLL, "%10u %s%c %s: LTL:Retain Master LTL Table\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 73, "Gnm53_62EvaluateMasterLTL");
    LbsOsaTrace_WriteLog(0xBu, v58, v32, 4, 1);
  }
LABEL_42:
  bzero(&g_LTLDataPPM, 0x5E2uLL);
  g_AgeingTimeGpsSeconds = 0;
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(v60, 0x410uLL);
    uint64_t v34 = mach_continuous_time();
    unsigned __int16 v35 = snprintf((char *)v60, 0x40FuLL, "%10u %s%c %s: LTL:Update, Ageing Not Required\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "GNM", 73, "Gnm53_63UpdateMasterLTLNv");
    return LbsOsaTrace_WriteLog(0xBu, (char *)v60, v35, 4, 1);
  }
  return result;
}

BOOL Gnm53_64CopyLearntLTL(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a2 > 0x5E5)
  {
    unsigned __int16 __n_2 = 0;
    memcpy_s("Gnm53_64CopyLearntLTL", 1975, &__n_2, 2u, a1, 2uLL);
    if (__n_2 == 1004)
    {
      __uint64_t n = 0;
      memcpy_s("Gnm53_64CopyLearntLTL", 1985, &__n, 2u, a1 + 1006, 2uLL);
      BOOL v2 = __n == 502;
      if (__n == 502)
      {
        uint64_t v18 = a1 + 2;
        memcpy_s("Gnm53_64CopyLearntLTL", 1997, &g_LTLDataPPM, __n_2, a1 + 2, __n_2);
        unsigned int v17 = &a1[(unsigned __int16)(__n_2 + 4)];
        memcpy_s("Gnm53_64CopyLearntLTL", 2004, &word_26AE53E38, __n, v17, __n);
        if ((g_NmeaMask & 0x200) != 0 || LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0))
        {
          unsigned int v5 = 0;
          unsigned __int8 v6 = 0;
          do
          {
            unsigned int v7 = v6 / 0x14u + 1;
            memset(__n_4, 0, 512);
            uint64_t v8 = mach_continuous_time();
            int v9 = snprintf((char *)__n_4, 0x200uLL, "$PDXLL,%u,%u,%u,%u", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), 13, v7, 251);
            if (v9 < 0) {
              break;
            }
            for (uint64_t i = 0; i != 20; ++i)
            {
              if (251 - v5 == i) {
                break;
              }
              __int16 v11 = v9;
              if ((unsigned __int16)v9 > 0x1FFu) {
                break;
              }
              int v9 = snprintf((char *)__n_4 + (unsigned __int16)v9, 512 - (unsigned __int16)v9, ",%0.1f,%d,%u", (float)((float)((float)(int)(v5 + i) * 0.5) + -30.0), (int)(float)(*((float *)&g_LTLDataPPM + v5 + i) * 1000.0), *((unsigned __int16 *)&g_LTLDataPPM + v5 + i + 502));
              if (v9 < 0) {
                goto LABEL_17;
              }
              LOWORD(v9) = v11 + v9;
            }
            Gnm53_82UpdateLtlNmeaData((char *)__n_4, v9);
            unsigned __int8 v6 = v5 + 20;
            unsigned int v5 = (unsigned __int16)(v5 + 20);
          }
          while (v5 < 0xFB);
        }
LABEL_17:
        Gnm53_06PrintLTLData(v18, __n_2, v17, __n);
        return 1;
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__n_4, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf((char *)__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Learnt ME Confidence Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm53_64CopyLearntLTL", 770);
        LbsOsaTrace_WriteLog(0xBu, (char *)__n_4, v15, 2, 1);
      }
    }
    else
    {
      BOOL v2 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__n_4, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v3 = snprintf((char *)__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Learnt ME Frequency Offsets\n");
        goto LABEL_20;
      }
    }
  }
  else
  {
    BOOL v2 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__n_4, 0x410uLL);
      unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v3 = snprintf((char *)__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx LTL:Learnt ME LTL Data LenRecv,%u\n", v16);
LABEL_20:
      LbsOsaTrace_WriteLog(0xBu, (char *)__n_4, v3, 2, 1);
      return 0;
    }
  }
  return v2;
}

void Gnm53_71DeInitializeXOParams(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (g_XOTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8399622) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm53_71DeInitializeXOParams", 1545);
      LbsOsaTrace_WriteLog(0xBu, __str, v1, 2, 1);
    }
    g_XOTimerStatus = 0;
  }
  g_PrevUsedLtl = 0;
  bzero(&g_LTLDataPPM, 0x5E2uLL);
  g_AgeingTimeGpsSeconds = 0;
}

size_t Gnm53_82UpdateLtlNmeaData(char *a1, unsigned __int16 a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned __int16 v7 = a2;
  if (HswUtil_AddNmeaCS(a1, 0x200u, &v7))
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
    if (result) {
      size_t result = LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)a1, v7);
    }
    if ((g_NmeaMask & 0x200) != 0)
    {
      unsigned int v4 = v7;
      return Gnm15_09UpdateNmeaData(a1, v4);
    }
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BytesWritten,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm53_82UpdateLtlNmeaData", 772, v7);
      return LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t Gnm52_11HandleStartTimeMarkRsp(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(a1 + 12)) {
        uint64_t v3 = 84;
      }
      else {
        uint64_t v3 = 70;
      }
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP Success,%c\n", (unint64_t)v2, "GNM", 73, "Gnm52_11HandleStartTimeMarkRsp", v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
    }
    if (*(unsigned char *)(a1 + 12)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = 2;
    }
    Gnm11_00ApiStatusCB(v5, 0, 0, 18);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm52_11HandleStartTimeMarkRsp", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Gnm52_13HandleTimeMarkEvent(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm52_13HandleTimeMarkEvent", 517);
    int v8 = 0;
LABEL_12:
    LbsOsaTrace_WriteLog(0xBu, __str, v7, v8, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_13HandleTimeMarkEvent");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsWk,%d,GpsTOW,%.9fms,GpsTimeUnc,%.9fms,UtcCorr,%f,BBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm52_13HandleTimeMarkEvent", *(__int16 *)(a1 + 18), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 48), *(_DWORD *)(a1 + 56));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (!off_26AE66D98)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v7 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm52_13HandleTimeMarkEvent", 258);
    int v8 = 2;
    goto LABEL_12;
  }
  off_26AE66D98(0, a1 + 16);
  return 0;
}

uint64_t Gnm52_22HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    off_26AE66D98 = *(uint64_t (**)(void, void))(a1 + 16);
    uint64_t v4 = gnssOsa_Calloc("Gnm52_22HandleStartTimeMarkReq", 114, 1, 0xCuLL);
    if (v4)
    {
      unsigned __int16 v5 = v4;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ =>GNC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm52_22HandleStartTimeMarkReq");
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
      }
      AgpsSendFsmMsg(128, 134, 8390912, v5);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm52_22HandleStartTimeMarkReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 0, 1);
  }
  return 0;
}

uint64_t Gnm_StartTimeMarkSesion(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_StartTimeMarkSesion");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t v4 = gnssOsa_Calloc("Gnm_StartTimeMarkSesion", 156, 1, 0x18uLL);
    if (v4)
    {
      v4[2] = a1;
      AgpsSendFsmMsg(128, 128, 8405248, v4);
      uint64_t v5 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_StartTimeMarkSesion");
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
        return 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_StartTimeMarkSesion");
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
      }
      return 5;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_StartTimeMarkSesion", 258);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_StartTimeMarkSesion");
      uint64_t v5 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v5;
}

void Gnm03_51StartHalConnTimer(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (AgpsFsmStartTimer(0x803006u, 0x3A98u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v0 = mach_continuous_time();
        unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_51StartHalConnTimer", 1544);
        LbsOsaTrace_WriteLog(0xBu, __str, v1, 2, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_51StartHalConnTimer", 15000);
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
      }
      LOBYTE(g_HalStatusInfo) = 1;
    }
  }
}

uint64_t Gnm03_64GetPlcGnssHw(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (SHIDWORD(g_HWStatus) <= 2471)
  {
    if (HIDWORD(g_HWStatus) == 848) {
      return 5;
    }
    if (HIDWORD(g_HWStatus) == 1107) {
      return 2;
    }
  }
  else
  {
    switch(HIDWORD(g_HWStatus))
    {
      case 0x9A8:
        return 3;
      case 0x9A9:
        return 4;
      case 0xD67:
        return 1;
    }
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm03_64GetPlcGnssHw", 770, HIDWORD(g_HWStatus));
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
    return 0;
  }
  return result;
}

uint64_t Gnm03_11SetHWRev(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_HW_REV_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_11SetHWRev");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    g_HWStatus = 1;
    memcpy_s("Gnm03_11SetHWRev", 359, &qword_26AE53174, 0xB4u, (const void *)(a1 + 12), 0xB4uLL);
    if (!g_HWStatus) {
      goto LABEL_18;
    }
    if ((int)qword_26AE53174 <= 2471)
    {
      if (qword_26AE53174 != 848 && qword_26AE53174 != 1107)
      {
LABEL_16:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v7 = mach_continuous_time();
          unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_07ValidateHWSupport", 264, qword_26AE53174);
          LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
        }
LABEL_18:
        Hal_StopConn((uint64_t)Gnm_HalStopCnf);
        Gnm03_52StartHalDisConnTimer();
        snprintf(v11, 0x400uLL, "ASSERT: %s %d HWS : HW not supported by stack", "Gnm03_11SetHWRev", 367);
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "Gnm03_11SetHWRev", v11);
          LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("Gnm03_11SetHWRev", "gnm03HwStatus.cpp", 368, "false && \"HW not supported by stack\"");
      }
    }
    else if ((qword_26AE53174 - 2472) >= 2 && qword_26AE53174 != 3431)
    {
      goto LABEL_16;
    }
    if (!*(unsigned char *)(a1 + 192))
    {
      Gnm31_06SendUserCfgLsim();
      Gnm32_11SendPltCfgLsim();
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_11SetHWRev", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

void Gnm03_52StartHalDisConnTimer(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (!BYTE1(g_HalStatusInfo))
  {
    if (AgpsFsmStartTimer(0x803106u, 0x3A98u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v0 = mach_continuous_time();
        unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 87, "Gnm03_52StartHalDisConnTimer", 1544);
        LbsOsaTrace_WriteLog(0xBu, __str, v1, 2, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DurMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_52StartHalDisConnTimer", 15000);
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
      }
      BYTE1(g_HalStatusInfo) = 1;
    }
  }
}

void *Gnm03_12HalStartCnf(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_START_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_12HalStartCnf");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (!(_BYTE)g_HalStatusInfo) {
      goto LABEL_15;
    }
    if (AgpsFsmStopTimer(8400902))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm03_53StopHalConnTimer", 1545);
        int v6 = 2;
LABEL_13:
        LbsOsaTrace_WriteLog(0xBu, __str, v5, v6, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_53StopHalConnTimer");
      int v6 = 4;
      goto LABEL_13;
    }
    LOBYTE(g_HalStatusInfo) = 0;
LABEL_15:
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
    {
LABEL_31:
      Gnm03_19HwStartCnf();
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmState,Active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 77, "Gnm03_12HalStartCnf", 261);
        LbsOsaTrace_WriteLog(0xBu, __str, v18, 3, 1);
      }
      return &a_GnmActiveState;
    }
    bzero(v19, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v12 = qword_26AE53174;
    if ((int)qword_26AE53174 <= 2471)
    {
      if (qword_26AE53174 == 848)
      {
        uint64_t v13 = "Autumn";
        goto LABEL_30;
      }
      if (qword_26AE53174 == 1107)
      {
        uint64_t v13 = "Compact";
        goto LABEL_30;
      }
    }
    else
    {
      switch(qword_26AE53174)
      {
        case 0x9A8:
          uint64_t v13 = "Sunshine";
          goto LABEL_30;
        case 0x9A9:
          uint64_t v13 = "Spring";
          goto LABEL_30;
        case 0xD67:
          uint64_t v13 = "Bright";
LABEL_30:
          unsigned __int16 v16 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: HW,%s,Maj,%u,Min,%u\n", v11, "GNM", 65, "Gnm03_12HalStartCnf", v13, HIDWORD(qword_26AE53174), dword_26AE5317C);
          LbsOsaTrace_WriteLog(0xBu, v19, v16, 1, 1);
          goto LABEL_31;
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm03_03GetGnssHwStr", 770, v12);
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
    }
    uint64_t v13 = "Unknown";
    goto LABEL_30;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_12HalStartCnf", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
  }
  return 0;
}

void Gnm03_19HwStartCnf(void)
{
  unsigned __int8 v0 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  byte_26AE53228 = 0;
  while (1)
  {
    unsigned int v1 = v0;
    int v2 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v0 + 4);
    if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v0 + 4)) {
      break;
    }
    ++v0;
    if (v2 == 128)
    {
      unsigned __int16 v3 = *(void **)(pg_AgpsFsmTable + 168 * v1 + 96);
      if (v3 == &a_GnmInitState || v3 == &a_GnmResetState)
      {
        g_HalStatusInfo = 0;
        if (v3 == &a_GnmInitState)
        {
          size_t v5 = gnssOsa_Calloc("Gnm03_63SendHwTypeGnc", 166, 1, 0x10uLL);
          if (v5)
          {
            int v6 = v5;
            v5[3] = qword_26AE53174;
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v7 = mach_continuous_time();
              unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_TYPE_IND =>GNC HwType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_63SendHwTypeGnc", v6[3]);
              LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
            }
            AgpsSendFsmMsg(128, 134, 8788224, v6);
          }
        }
        Gnm_03_05UpdtHWStatusGnc(1);
        if (g_BootMode == 2)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v15 = mach_continuous_time();
            unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ProductionMode\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 65, "Gnm03_19HwStartCnf");
            LbsOsaTrace_WriteLog(0xBu, __str, v16, 1, 1);
          }
          Gnm10_29SendFwActivity(2, 1);
        }
        else
        {
          Gnm35_12SendDbgCfg(v9, v10, v11, v12, v13, v14);
          if (v3 == &a_GnmInitState)
          {
            Gnm28_21InitRestorePeNv();
            Gnm31_05SendUserCfgGnc();
            Gnm32_10SendPltCfgGnc();
          }
          if (v3 == &a_GnmResetState)
          {
            *(void *)__str = qword_26AE5415E;
            *(void *)&__str[5] = *(uint64_t *)((char *)&qword_26AE5415E + 5);
            Gnm10_29SendFwActivity(3, 1);
            size_t v17 = Gnm38_12SendSBCfg(0xECuLL, 0x53u, (uint64_t)__str);
          }
          Gnm53_27InitializeVarMENv(v17, v18, v19, v20, v21, v22);
        }
        if (v3 == &a_GnmInitState) {
          Gnm03_04SendHWStatus((uint64_t (*)(void, uint64_t, _OWORD *))*(&g_GnmCBs + 1), 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNM", 65, "Gnm03_19HwStartCnf", 1292);
          LbsOsaTrace_WriteLog(0xBu, __str, v24, 1, 1);
        }
      }
      return;
    }
  }
}

void *Gnm03_14HalStopCnf(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_STOP_CNF\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_14HalStopCnf");
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_14HalStopCnf", 517);
      LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v8, 0, 1);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 12))
  {
    if (!BYTE1(g_HalStatusInfo))
    {
LABEL_23:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: HALStop success,starting again\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm03_14HalStopCnf");
        LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v18, 4, 1);
      }
      ++BYTE2(g_HalStatusInfo);
      LOBYTE(__str) = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      int v39 = 0;
      Gnm32_21GetHwConfig(&__str);
      Hal_SetConfigurations((long long *)&__str);
      if (((g_GnssHw - 1) & 0xFC) != 0) {
        int v19 = 0;
      }
      else {
        int v19 = (g_GnssHw - 1) + 1;
      }
      Hal_StartConn(v19, g_BootMode == 2, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
      return 0;
    }
    if (AgpsFsmStopTimer(8401158))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        size_t v5 = (unsigned __int16)snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm03_54StopHalDisConnTimer", 1545);
        int v6 = 2;
LABEL_21:
        LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v5, v6, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm03_54StopHalDisConnTimer");
      int v6 = 4;
      goto LABEL_21;
    }
    BYTE1(g_HalStatusInfo) = 0;
    goto LABEL_23;
  }
  unsigned int v9 = HIBYTE(g_HalStatusInfo);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
  if (v9 <= 4)
  {
    if (IsLoggingAllowed)
    {
      bzero(&__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
      LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v12, 0, 1);
    }
    ++HIBYTE(g_HalStatusInfo);
    Hal_StopConn((uint64_t)Gnm_HalStopCnf);
    Gnm03_52StartHalDisConnTimer();
    return 0;
  }
  if (IsLoggingAllowed)
  {
    bzero(&__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx HALStop fail Attempt,%u,GNSS service stopping\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm03_14HalStopCnf", 1296, HIBYTE(g_HalStatusInfo));
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v14, 0, 1);
  }
  Gnm_03_05UpdtHWStatusGnc(0);
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v22, 0x400uLL, "ASSERT: %s %d HWD : HW deinit failed max attempts", "Gnm03_14HalStopCnf", 475);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 69, "Gnm03_14HalStopCnf", v22);
      LbsOsaTrace_WriteLog(0xEu, (char *)&__str, v21, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm03_14HalStopCnf", "gnm03HwStatus.cpp", 476, "false && \"HW deinit failed max attempts\"");
  }
  Gnm03_60BaseBandResetReq(1);
  return &a_GnmResetState;
}

void Gnm_03_05UpdtHWStatusGnc(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("Gnm_03_05UpdtHWStatusGnc", 249, 1, 0x10uLL);
  if (v2)
  {
    unsigned __int16 v3 = v2;
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_STATUS_IND =>GNC HwStatus,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_03_05UpdtHWStatusGnc", a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 134, 8391939, v3);
  }
}

uint64_t Gnm03_60BaseBandResetReq(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (off_26AE66DA8)
  {
    uint64_t v1 = result;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Reason,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 69, "Gnm03_60BaseBandResetReq", v1);
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 0, 1);
    }
    return off_26AE66DA8(v1);
  }
  return result;
}

void *Gnm03_15HandleHwStatus(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HW_STATUS_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm03_15HandleHwStatus");
    uint64_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 12))
    {
      case 8:
        Gnm53_63UpdateMasterLTLNv(IsLoggingAllowed, v3, v4, v5, v6, v7);
        if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) == 0) {
          return 0;
        }
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
        int v12 = 4;
        goto LABEL_9;
      case 9:
        if (g_GnssHw - 1 >= 3)
        {
          snprintf(v34, 0x400uLL, "ASSERT: %s %d TRW : Transport write failed after max retries", "Gnm03_15HandleHwStatus", 522);
          if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v32 = mach_continuous_time();
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "OSA", 69, "Gnm03_15HandleHwStatus", v34);
            LbsOsaTrace_WriteLog(0xEu, __str, v33, 0, 1);
          }
          gnssOsa_FlushLog();
          __assert_rtn("Gnm03_15HandleHwStatus", "gnm03HwStatus.cpp", 523, "false && \"Transport write failed after max retries\"");
        }
        uint64_t v21 = 8;
        goto LABEL_26;
      case 0xA:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v15 = mach_continuous_time();
          unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWStatus,%u Soft Reset Triggered\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
        }
        Gnm03_06InitHWReset();
        return &a_GnmResetState;
      case 0xB:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v17 = mach_continuous_time();
          unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWStatus,%u Soft Reset Successful\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 65, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          LbsOsaTrace_WriteLog(0xBu, __str, v18, 1, 1);
        }
        Gnm03_19HwStartCnf();
        return &a_GnmActiveState;
      case 0xC:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v19 = mach_continuous_time();
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWStatus,%u Soft Reset Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          LbsOsaTrace_WriteLog(0xBu, __str, v20, 0, 1);
        }
        uint64_t v21 = 9;
LABEL_26:
        Gnm03_60BaseBandResetReq(v21);
        break;
      default:
        uint64_t v22 = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
        if (v22)
        {
          bzero(__str, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNM", 69, "Gnm03_15HandleHwStatus", 1297, *(_DWORD *)(a1 + 12));
          uint64_t v22 = LbsOsaTrace_WriteLog(0xBu, __str, v29, 0, 1);
        }
        Gnm53_63UpdateMasterLTLNv(v22, v23, v24, v25, v26, v27);
        Gnm03_06InitHWReset();
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v30 = mach_continuous_time();
          unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 77, "Gnm03_15HandleHwStatus", 261);
          LbsOsaTrace_WriteLog(0xBu, __str, v31, 3, 1);
        }
        break;
    }
    return &a_GnmResetState;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm03_15HandleHwStatus", 517);
      int v12 = 0;
LABEL_9:
      LbsOsaTrace_WriteLog(0xBu, __str, v11, v12, 1);
    }
    return 0;
  }
}

void Gnm03_06InitHWReset(void)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Initializing HW Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 65, "Gnm03_06InitHWReset");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 1, 1);
  }
  if (BYTE1(dword_26AE6D43E))
  {
    if (AgpsFsmStopTimer(8400390) && LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm03_06InitHWReset", 1545);
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
    }
    BYTE1(dword_26AE6D43E) = 0;
    if (HIBYTE(dword_26AE6D43E)) {
      byte_26AE6D442 = 11;
    }
    Gnm10_31SendMEWakeRsp(0);
    Gnm10_29SendFwActivity(1, 0);
  }
  if (off_26AE66DA0) {
    off_26AE66DA0(1, 0, 0);
  }
  if (g_HWStatus)
  {
    int v4 = qword_26AE53174;
    if (qword_26AE53174 == 3431 && HIDWORD(qword_26AE53174) == 2 && dword_26AE5317C == 1) {
      goto LABEL_27;
    }
    int v7 = g_GnssHw;
  }
  else
  {
    int v7 = g_GnssHw;
    if (!g_GnssHw)
    {
LABEL_27:
      g_HalStatusInfo = 0x1000000;
      Hal_StopConn((uint64_t)Gnm_HalStopCnf);
      Gnm03_52StartHalDisConnTimer();
      goto LABEL_28;
    }
    int v4 = qword_26AE53174;
  }
  BOOL v8 = v4 == 848;
  BOOL v9 = v7 == 4;
  if (g_HWStatus) {
    BOOL v10 = v8;
  }
  else {
    BOOL v10 = v9;
  }
  if (v10) {
    goto LABEL_27;
  }
LABEL_28:
  Gnm_03_05UpdtHWStatusGnc(2);
}

void *Gnm03_16HandleHWInitFail(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_INIT_FAIL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_16HandleHWInitFail");
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm03_16HandleHWInitFail", 517);
      LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v10, 0, 1);
    }
    return 0;
  }
  Hal_StopConn(0);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm03_16HandleHWInitFail", 1294);
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v5, 4, 1);
  }
  if (BYTE2(g_HalStatusInfo) <= 4u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 1, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx WaitBeforeStart,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 65, "Gnm03_16HandleHWInitFail", 1291, 1000);
      LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v7, 1, 1);
    }
    usleep(0xF4240u);
    ++BYTE2(g_HalStatusInfo);
    LOBYTE(__str) = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    int v34 = 0;
    Gnm32_21GetHwConfig(&__str);
    Hal_SetConfigurations((long long *)&__str);
    if (((g_GnssHw - 1) & 0xFC) != 0) {
      int v8 = 0;
    }
    else {
      int v8 = (g_GnssHw - 1) + 1;
    }
    Hal_StartConn(v8, g_BootMode == 2, (uint64_t)Gnm_HalStartCnf);
    Gnm03_51StartHalConnTimer();
    return 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx Err,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm03_20HwStartFailure", 1293, v12);
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v14, 0, 1);
  }
  byte_26AE53228 = v12;
  Gnm_03_05UpdtHWStatusGnc(0);
  Gnm03_04SendHWStatus((uint64_t (*)(void, uint64_t, _OWORD *))*(&g_GnmCBs + 1), 0, 0);
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v17, 0x400uLL, "ASSERT: %s %d HWI : HW init failed max attempts", "Gnm03_16HandleHWInitFail", 624);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(&__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 69, "Gnm03_16HandleHWInitFail", v17);
      LbsOsaTrace_WriteLog(0xEu, (char *)&__str, v16, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm03_16HandleHWInitFail", "gnm03HwStatus.cpp", 625, "false && \"HW init failed max attempts\"");
  }
  Gnm03_60BaseBandResetReq(0);
  return &a_GnmResetState;
}

uint64_t Gnm03_17HandleGetHwInitStatus(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HW_INIT_STATUS_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_17HandleGetHwInitStatus");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm03_04SendHWStatus(*(uint64_t (**)(void, uint64_t, _OWORD *))(a1 + 16), *(unsigned int *)(a1 + 12), 0);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_17HandleGetHwInitStatus", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

size_t Gnm03_04SendHWStatus(uint64_t (*a1)(void, uint64_t, _OWORD *), uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = 0u;
  memset(v20, 0, 26);
  memset(v18, 0, sizeof(v18));
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  if (a1)
  {
    unsigned __int8 v5 = 0;
    BYTE1(v16[0]) = byte_26AE53228;
    while (1)
    {
      unsigned int v6 = v5;
      int v7 = *(unsigned __int8 *)(pg_AgpsFsmTable + 168 * v5 + 4);
      if (!*(unsigned char *)(pg_AgpsFsmTable + 168 * v5 + 4)) {
        break;
      }
      ++v5;
      if (v7 == 128)
      {
        uint64_t v8 = *(void **)(pg_AgpsFsmTable + 168 * v6 + 96);
        if (a3) {
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    uint64_t v8 = 0;
    if (a3)
    {
LABEL_12:
      LOBYTE(v16[0]) = 1;
      WORD1(v16[0]) = qword_26AE53174;
      v12.i64[1] = unk_26AE53180;
      *(int16x4_t *)v12.i8 = vmovn_s32(*(int32x4_t *)((char *)&qword_26AE53174 + 4));
      DWORD1(v16[0]) = vmovn_s16(v12).u32[0];
      *(_OWORD *)((char *)&v16[1] + 12) = *(_OWORD *)algn_26AE5319C;
      long long v17 = *(_OWORD *)algn_26AE531B0;
      LODWORD(v18[0]) = dword_26AE531C0;
      DWORD1(v18[1]) = dword_26AE531D4;
      *(_OWORD *)((char *)v18 + 4) = xmmword_26AE531C4;
      *(_OWORD *)((char *)&v18[1] + 8) = unk_26AE531D8;
      *(_OWORD *)((char *)&v18[2] + 12) = *(_OWORD *)algn_26AE531EC;
      DWORD2(v18[2]) = dword_26AE531E8;
      HIDWORD(v18[3]) = dword_26AE531FC;
      long long v19 = unk_26AE53200;
      *(_OWORD *)((char *)v20 + 4) = xmmword_26AE53214;
      LODWORD(v20[0]) = dword_26AE53210;
      DWORD1(v20[1]) = dword_26AE53224;
      HIDWORD(v16[2]) = dword_26AE531AC;
      DWORD2(v16[1]) = dword_26AE53198;
      *(_OWORD *)((char *)v16 + 8) = unk_26AE53188;
      BYTE8(v20[1]) = 2;
      goto LABEL_13;
    }
LABEL_10:
    if (v8 != &a_GnmInitState && v8 != &a_GnmResetState) {
      goto LABEL_12;
    }
LABEL_13:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HwStatusCB called\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm03_04SendHWStatus");
      LbsOsaTrace_WriteLog(0xBu, __str, v14, 4, 1);
    }
    return a1(0, a2, v16);
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm03_04SendHWStatus", 258);
      return LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
  }
  return result;
}

uint64_t Gnm03_18InitializeHw(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HW_INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_18InitializeHw");
    LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v3, 4, 1);
  }
  if (a1)
  {
    if (g_IsHwInit == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
      {
        bzero(&__str, 0x410uLL);
        unint64_t v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v5 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx ExistingHw,%hhu,ExitingBootMode,%hhu,ReqHw,%hhu,ReqBootMode,%hhu\n", v4, "GNM");
LABEL_9:
        LbsOsaTrace_WriteLog(0xBu, (char *)&__str, v5, 0, 1);
      }
    }
    else
    {
      g_GnssHw = *(unsigned char *)(a1 + 12);
      g_BootMode = *(unsigned char *)(a1 + 13);
      g_IsHwInit = 1;
      unsigned int v6 = *(uint64_t (**)(void))(a1 + 24);
      *(&g_GnmCBs + 1) = *(uint64_t (**)(void, void, void, void))(a1 + 16);
      off_26AE66DA8 = v6;
      g_HalCallbacks = Gnm_HardwareStatusNotif;
      LOBYTE(__str) = 0;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      int v25 = 0;
      Gnm32_21GetHwConfig(&__str);
      Hal_SetConfigurations((long long *)&__str);
      if (((g_GnssHw - 1) & 0xFC) != 0) {
        int v7 = 0;
      }
      else {
        int v7 = (g_GnssHw - 1) + 1;
      }
      Hal_StartConn(v7, g_BootMode == 2, (uint64_t)Gnm_HalStartCnf);
      Gnm03_51StartHalConnTimer();
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_9;
  }
  return 0;
}

uint64_t Gnm03_40DiscardResetReqGnc(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm03_40DiscardResetReqGnc");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm03_40DiscardResetReqGnc", 1028);
      int v6 = 2;
LABEL_8:
      LbsOsaTrace_WriteLog(0xBu, __str, v5, v6, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm03_40DiscardResetReqGnc", 517);
    int v6 = 0;
    goto LABEL_8;
  }
  return 0;
}

void *Gnm03_41HandleResetReqGnc(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm03_41HandleResetReqGnc");
    uint64_t IsLoggingAllowed = LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (a1)
  {
    Gnm53_63UpdateMasterLTLNv(IsLoggingAllowed, v3, v4, v5, v6, v7);
    if (g_HWStatus)
    {
      int v10 = qword_26AE53174;
      if (qword_26AE53174 == 3431 && HIDWORD(qword_26AE53174) == 2 && dword_26AE5317C == 1) {
        goto LABEL_22;
      }
      int v13 = g_GnssHw;
    }
    else
    {
      int v13 = g_GnssHw;
      if (!g_GnssHw) {
        goto LABEL_22;
      }
      int v10 = qword_26AE53174;
    }
    BOOL v17 = v10 == 848;
    BOOL v18 = v13 == 4;
    if (g_HWStatus) {
      BOOL v19 = v17;
    }
    else {
      BOOL v19 = v18;
    }
    if (!v19)
    {
      Gnm03_60BaseBandResetReq(9);
      return &a_GnmResetState;
    }
LABEL_22:
    Gnm03_06InitHWReset();
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnmState,Active->Reset\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 77, "Gnm03_41HandleResetReqGnc", 261);
      LbsOsaTrace_WriteLog(0xBu, __str, v21, 3, 1);
    }
    return &a_GnmResetState;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 69, "Gnm03_41HandleResetReqGnc", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 0, 1);
  }
  return 0;
}

uint64_t Gnm03_42HandleMEWakeReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_42HandleMEWakeReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm10_29SendFwActivity(1, 1);
    bzero(&g_LTLDataPPM, 0x5E2uLL);
    g_AgeingTimeGpsSeconds = 0;
    g_IsExtClocunint64_t k = BYTE1(dword_26AE53250);
    g_StlDivergenceIndicator = 0;
    HIWORD(dword_26AE6D43E) = 0;
    LOBYTE(dword_26AE6D43E) = 1;
    Gnm29_01RestoreVarMENv(*(unsigned __int8 *)(a1 + 12));
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_42HandleMEWakeReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

uint64_t Gnm03_43RejectMEWakeReq(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_ME_WAKE_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_43RejectMEWakeReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    Gnm10_31SendMEWakeRsp(0);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 69, "Gnm03_43RejectMEWakeReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 0, 1);
  }
  return 0;
}

void *Gnm03_55HandleHalConnTimeout(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_CONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!(_BYTE)g_HalStatusInfo)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_55HandleHalConnTimeout");
      int v9 = 4;
LABEL_13:
      LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    }
    return 0;
  }
  LOBYTE(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm03_55HandleHalConnTimeout", 517);
      int v9 = 0;
      goto LABEL_13;
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAL Conn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm03_55HandleHalConnTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
  }
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v13, 0x400uLL, "ASSERT: %s %d HWI : HAL connection timeout", "Gnm03_55HandleHalConnTimeout", 1131);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "Gnm03_55HandleHalConnTimeout", v13);
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm03_55HandleHalConnTimeout", "gnm03HwStatus.cpp", 1132, "false && \"HAL connection Timeout\"");
  }
  Gnm03_60BaseBandResetReq(2);
  return &a_GnmResetState;
}

void *Gnm03_56HandleHalDisconnTimeout(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_HAL_DISCONN_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!BYTE1(g_HalStatusInfo))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Timer not running\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm03_56HandleHalDisconnTimeout");
      int v9 = 4;
LABEL_13:
      LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    }
    return 0;
  }
  BYTE1(g_HalStatusInfo) = 0;
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm03_56HandleHalDisconnTimeout", 517);
      int v9 = 0;
      goto LABEL_13;
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAL Disconn TO\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm03_56HandleHalDisconnTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
  }
  if (g_GnssHw - 1 >= 3)
  {
    snprintf(v13, 0x400uLL, "ASSERT: %s %d HWI : HAL disconnection timeout", "Gnm03_56HandleHalDisconnTimeout", 1169);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "Gnm03_56HandleHalDisconnTimeout", v13);
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Gnm03_56HandleHalDisconnTimeout", "gnm03HwStatus.cpp", 1170, "false && \"HAL disconnection Timeout\"");
  }
  Gnm03_60BaseBandResetReq(3);
  return &a_GnmResetState;
}

uint64_t GNSS_Nav_Debug_Ctl(uint64_t result)
{
  if (g_Enable_Nav_Debug)
  {
    unsigned __int16 v1 = (char **)result;
    unsigned __int16 v3 = *(char **)result;
    uint64_t v2 = *(char **)(result + 8);
    uint64_t v4 = *(char **)result;
    if ((unint64_t)v2 > *(void *)result) {
      uint64_t v4 = *(char **)(result + 24);
    }
    unsigned __int16 v5 = (_WORD)v4 - (_WORD)v2;
    if ((_WORD)v4 == (_WORD)v2)
    {
      if ((unint64_t)v2 >= *(void *)(result + 24))
      {
        uint64_t v2 = *(char **)(result + 16);
        *(void *)(result + 8) = v2;
LABEL_10:
        unsigned __int16 v6 = (_WORD)v3 - (_WORD)v2;
        if (v6)
        {
          size_t result = GN_GPS_Write_Nav_Debug(v6, v2);
          uint64_t v2 = &v1[1][result];
          v1[1] = v2;
        }
      }
    }
    else
    {
      size_t result = GN_GPS_Write_Nav_Debug((unsigned __int16)((_WORD)v4 - (_WORD)v2), v2);
      uint64_t v2 = &v1[1][result];
      v1[1] = v2;
      if (v2 >= v1[3])
      {
        uint64_t v2 = v1[2];
        v1[1] = v2;
        if (result == v5)
        {
          unsigned __int16 v3 = *v1;
          goto LABEL_10;
        }
      }
    }
    if (v2 == *v1)
    {
      uint64_t v7 = v1[2];
      *unsigned __int16 v1 = v7;
      v1[1] = v7;
    }
  }
  return result;
}

void *GNSS_Nav_Debug_Screens(void *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    uint64_t v2 = (char **)result[46];
    if (v2)
    {
      ds_NK_Summary(result);
      if (g_GN_GNSS_Nav_Debug_Port == 1) {
        g_GN_GNSS_Nav_Debug_Port = 0;
      }
      else {
        ds_NK_Crude_Apx_Pos(v2, v1[29], v1[22]);
      }
      ds_Intermittent(v2, *(_DWORD *)v1, (double *)v1[9]);
      return (void *)GNSS_Nav_Debug_Ctl((uint64_t)v2);
    }
  }
  return result;
}

uint64_t GNSS_Nav_Debug_InitWrite(uint64_t result)
{
  if (g_Enable_Nav_Debug)
  {
    uint64_t v1 = *(void *)(result + 368);
    if (g_GN_GNSS_Nav_Debug_Port == 1) {
      ds_Config(*(char ***)(result + 368), *(void *)(result + 72), *(void *)(result + 48), *(double **)(result + 176));
    }
    return ds_NK_Summary_FirstLine(v1);
  }
  return result;
}

uint64_t GNSS_Nav_Debug_Flush_Check(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8) - *(_DWORD *)result;
  if (v1 <= 0) {
    v1 += *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  }
  if (v1 <= 0x2FF)
  {
    return GNSS_Nav_Debug_Ctl(result);
  }
  return result;
}

uint64_t *mapu(double *a1, int a2, unsigned int a3, uint64_t a4, const double *a5, unsigned int a6, double *a7, int a8, double *a9, double *a10)
{
  uint64_t v15 = a9;
  double v16 = *a9;
  size_t result = phiu((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (a6)
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    if (a6 + 1 > 2) {
      uint64_t v20 = a6 + 1;
    }
    else {
      uint64_t v20 = 2;
    }
    uint64_t v21 = v20 - 1;
    do
    {
      v19 += v18 + 1;
      a9[v18++] = a5[v19 - 1];
    }
    while (v21 != v18);
  }
  unsigned int v22 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v23 = a10 - 1;
    unsigned int v24 = (a3 + a3 * a3) >> 1;
    if (a6 + 1 > 2) {
      uint64_t v25 = a6 + 1;
    }
    else {
      uint64_t v25 = 2;
    }
    uint64_t v26 = a3;
    long long v27 = (uint64_t *)(v25 - 1);
    unsigned int v28 = a3 - 1;
    int v29 = v25 - 1;
    do
    {
      unsigned int v30 = v26 - 1;
      double v31 = 0.0;
      if (a6)
      {
        long long v32 = a9;
        size_t result = v27;
        int v33 = v26 - 1;
        do
        {
          double v34 = *v32++;
          double v35 = a7[v33];
          double v31 = v31 + v35 * (v34 * v35);
          a7[v33] = v34 * v35;
          v33 += a8;
          size_t result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      if (v16 >= 0.0)
      {
        v23[v24--] = v31;
        LODWORD(v36) = 1;
        LODWORD(result) = v22;
        do
        {
          if (a6)
          {
            int v37 = 0;
            double v38 = 0.0;
            int v39 = v29;
            do
            {
              double v38 = v38 + a7[(int)result + v37] * a7[v28 + v37];
              v37 += a8;
              --v39;
            }
            while (v39);
          }
          else
          {
            double v38 = 0.0;
          }
          v23[v24] = v38;
          uint64_t v36 = (v36 + 1);
          --v24;
          size_t result = (uint64_t *)(result - 1);
        }
        while (v26 != v36);
      }
      else
      {
        v23[v26] = sqrt(v31);
      }
      --v22;
      --v28;
      --v26;
    }
    while (v30 > 1);
  }
  if (a6)
  {
    int v40 = 0;
    if (a6 + 1 > 2) {
      uint64_t v41 = a6 + 1;
    }
    else {
      uint64_t v41 = 2;
    }
    uint64_t v42 = v41 - 1;
    double v43 = 0.0;
    do
    {
      double v44 = *v15++;
      double v43 = v43 + v44 * a7[v40] * a7[v40];
      v40 += a8;
      --v42;
    }
    while (v42);
  }
  else
  {
    double v43 = 0.0;
  }
  double v45 = sqrt(v43);
  if (v16 < 0.0) {
    double v43 = v45;
  }
  *a10 = v43;
  return result;
}

uint64_t Hal32_SetPowerReport(int a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v20[0] = 0;
  qmemcpy(v18, "Bg ", sizeof(v18));
  __int16 v22 = 3;
  char v23 = 0;
  plc00_10EncodeHdrPlCs(v18, (uint64_t)v21, 12, 1u, 1, (uint64_t)v20);
  int v2 = v20[0];
  if (v20[0])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Hdrerr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "HAL", 69, "Hal32_SetPowerReport", 775, v2);
      LbsOsaTrace_WriteLog(0xDu, __str, v4, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    char v24 = a1;
    char v25 = a1;
    __int16 v26 = 2560;
    g_HalState = 18;
    if ((int)Hal22_ZxSendToChip(v21, 0xCuLL) <= 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 69, "Hal32_SetPowerReport", 1282);
        LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
      }
      return 4294967289;
    }
    else
    {
      char v6 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1C2u);
      if (v6 == 1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          uint64_t v10 = "Dis";
          if (a1) {
            uint64_t v10 = "En";
          }
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v9, "HAL", 69, "Hal32_SetPowerReport", 1543, v10);
          LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
        }
        return 4294967287;
      }
      else if (v6)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          int v13 = "Dis";
          if (a1) {
            int v13 = "En";
          }
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%s\n", (unint64_t)v12, "HAL", 69, "Hal32_SetPowerReport", 1541, v13);
          LbsOsaTrace_WriteLog(0xDu, __str, v14, 0, 1);
        }
        return 4294967285;
      }
      else if (g_PowerReportStatus == 32)
      {
        return 0;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          double v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          double v16 = "Dis";
          if (a1) {
            double v16 = "En";
          }
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%s err,%x\n", (unint64_t)v15, "HAL", 69, "Hal32_SetPowerReport", 770, v16, g_PowerReportStatus);
          LbsOsaTrace_WriteLog(0xDu, __str, v17, 0, 1);
        }
        return 4294967288;
      }
    }
  }
}

size_t Hal32_HandlPowerReportRsp(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = 513;
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_14;
  }
  if (a2 <= 0xC)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = 515;
    uint64_t v11 = a2;
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = "%10u %s%c %s: #%04hx len,%u\n";
    goto LABEL_14;
  }
  if (a1[2] != 66 || a1[3] != 71)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v10 = 770;
    uint64_t v11 = a1[2];
    unsigned __int16 v4 = "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDEx,%u\n";
    unint64_t v9 = v7;
    goto LABEL_14;
  }
  g_PowerReportStatus = a1[8];
  size_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v10 = 1542;
      uint64_t v11 = *__error();
      unint64_t v9 = v6;
      unsigned __int16 v4 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_14:
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, v4, v9, "HAL", 69, "Hal32_HandlPowerReportRsp", v10, v11, v12, v13);
      return LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t Sen_Aug_FPE_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list(a1, "Sen_Aug_FPE_Update_Wrapper: Entry");
  Sen_Aug_FPE_Update(*(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 136), *(void *)(a1 + 128), *(int64x2_t **)(a1 + 208), *(_DWORD **)(a1 + 264), *(char ***)(a1 + 392), *(_DWORD **)(a1 + 152), *(void *)(a1 + 144));

  return GNSS_Validate_p_list(a1, "Sen_Aug_FPE_Kalman_Wrapper: Exit");
}

void *gnssOsa_Calloc(const char *a1, int a2, int a3, size_t size)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  size_t result = malloc_type_calloc(a3, size, 0x211E7931uLL);
  if (!result)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      size_t v10 = v7 * size;
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Size,%lu,Fn,%s,Line,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_Calloc", 1537, v10, a1, a2);
      LbsOsaTrace_WriteLog(0xEu, __str, v11, 0, 1);
    }
    else
    {
      size_t v10 = v7 * size;
    }
    snprintf(v14, 0x400uLL, "Size,%lu,Fn,%s,Line,%d", v10, a1, a2);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "OSA", 69, "gnssOsa_Calloc", v14);
      LbsOsaTrace_WriteLog(0xEu, __str, v13, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_Calloc", "agpsmacosa.cpp", 68, "false && \"Memory allocation failure\"");
  }
  return result;
}

uint64_t gnssOsa_FlushLog(void)
{
  uint64_t result = gp_Logger;
  if (gp_Logger)
  {
    int v1 = *(uint64_t (**)(void))(*(void *)gp_Logger + 48);
    return v1();
  }
  return result;
}

BOOL gnssOsa_SemAcquire(dispatch_semaphore_t dsema)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (dsema)
  {
    dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemAcquire", 1541);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
  }
  return dsema != 0;
}

uint64_t gnssOsa_SemWaitTimeOut(NSObject *a1, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    dispatch_time_t v3 = dispatch_time(0, 1000000 * a2);
    return dispatch_semaphore_wait(a1, v3) != 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 69, "gnssOsa_SemWaitTimeOut", 1543);
      LbsOsaTrace_WriteLog(0xEu, __str, v6, 0, 1);
    }
    return 2;
  }
}

uint64_t gnssOsa_ReleaseOSTimer(void)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_ReleaseOSTimer", 120, &g_MacTimerCriticSection);
  if (g_curTimeState == 1) {
    dispatch_suspend((dispatch_object_t)g_timerHandler);
  }
  g_curTimeState = 0;

  return gnssOsa_MacExitCriticalSection("gnssOsa_ReleaseOSTimer", 132, &g_MacTimerCriticSection);
}

uint64_t gnssOsa_MacEnterCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE invalid input");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v7, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 749, "false && \"CRTE invalid input\"");
  }
  if (pthread_mutex_lock(a3))
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTE OS API Failed");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_MacEnterCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v9, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacEnterCriticalSection", "agpsmacosa.cpp", 754, "false && \"CRTE OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_MacExitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX invalid input");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v7, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 764, "false && \"CRTX invalid input\"");
  }
  if (pthread_mutex_unlock(a3))
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTX OS API Failed");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_MacExitCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v9, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacExitCriticalSection", "agpsmacosa.cpp", 768, "false && \"CRTX OS API Failed\"");
  }
  return 0;
}

uint64_t gnssOsa_OSTimerInit(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v0 = dispatch_source_create(MEMORY[0x263EF8400], 0, 1uLL, (dispatch_queue_t)g_TimerQueue);
  g_timerHandler = (uint64_t)v0;
  if (!v0)
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", "gnssOsa_OSTimerInit", 144, "TIMC TimerHandler");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v4, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(v4, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_OSTimerInit", __str);
      LbsOsaTrace_WriteLog(0xEu, v4, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_OSTimerInit", "agpsmacosa.cpp", 144, "false && \"TIMC TimerHandler\"");
  }
  dispatch_source_set_event_handler_f(v0, (dispatch_function_t)gnssOsa_TimerExpiryHandler);
  return 1;
}

uint64_t gnssOsa_TimerExpiryHandler(void *a1)
{
  uint64_t v1 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v2 = &__str[v1 + 1040];
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = -1;
    *((void *)v2 + 2) = 0;
    *((_DWORD *)v2 + 6) = -1;
    v1 += 32;
    v2[28] = 0;
  }
  while (v1 != 640);
  gnssOsa_MacEnterCriticalSection("gnssOsa_TimerExpiryHandler", 250, &g_MacTimerContextCriticSection);
  unsigned int v3 = 0;
  unsigned __int8 v4 = 0;
  unint64_t v5 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
  do
  {
    uint64_t v6 = &g_MacOsaTimers[32 * v4];
    if (v6[28] && *((void *)v6 + 1) <= v5)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerExpired Handle,%u,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 68, "gnssOsa_TimerExpiryHandler", *(_DWORD *)&g_MacOsaTimers[32 * v4 + 24], *((void *)v6 + 1));
        LbsOsaTrace_WriteLog(0xEu, __str, v8, 5, 1);
      }
      if (*(void *)v6)
      {
        unsigned __int16 v9 = &__str[32 * v3 + 1040];
        *(void *)unsigned __int16 v9 = *(void *)v6;
        *((void *)v9 + 2) = *(void *)&g_MacOsaTimers[32 * v4 + 16];
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
        ++v3;
        *(void *)(v6 + 21) = 0;
        *((void *)v6 + 2) = 0;
        unsigned __int8 v4 = -1;
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MacTimer\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "OSA", 69, "gnssOsa_TimerExpiryHandler", 770);
        LbsOsaTrace_WriteLog(0xEu, __str, v11, 0, 1);
      }
    }
    ++v4;
  }
  while (v4 < 0x14u);
  gnssOsa_TimerHandler();
  uint64_t result = gnssOsa_MacExitCriticalSection("gnssOsa_TimerExpiryHandler", 282, &g_MacTimerContextCriticSection);
  if (v3)
  {
    int v13 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))&__str[32 * v13 + 1040])(*(void *)&__str[32 * v13 + 1056]);
      ++v13;
    }
    while (v3 > v13);
  }
  return result;
}

uint64_t gnssOsa_OSTimerDeInit(void)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_OSTimerDeInit", 152, &g_MacTimerCriticSection);
  uint64_t v0 = g_timerHandler;
  if (!dispatch_source_testcancel((dispatch_source_t)g_timerHandler))
  {
    dispatch_source_cancel(v0);
    uint64_t v0 = g_timerHandler;
  }
  if ((g_curTimeState & 1) == 0)
  {
    dispatch_resume(v0);
    uint64_t v0 = g_timerHandler;
  }
  dispatch_release(v0);
  g_timerHandler = 0;
  g_curTimeState = 0;
  gnssOsa_MacExitCriticalSection("gnssOsa_OSTimerDeInit", 174, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TriggerOSTimer(int64_t a1)
{
  gnssOsa_MacEnterCriticalSection("gnssOsa_TriggerOSTimer", 185, &g_MacTimerCriticSection);
  uint64_t v2 = g_timerHandler;
  dispatch_time_t v3 = dispatch_time(0, a1);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((g_curTimeState & 1) == 0) {
    dispatch_resume((dispatch_object_t)g_timerHandler);
  }
  g_curTimeState = 1;
  gnssOsa_MacExitCriticalSection("gnssOsa_TriggerOSTimer", 199, &g_MacTimerCriticSection);
  return 1;
}

uint64_t gnssOsa_TimerHandler(void)
{
  uint64_t v0 = 0;
  unint64_t v1 = -1;
  do
  {
    if (g_MacOsaTimers[v0 + 28] && *(void *)&g_MacOsaTimers[v0 + 8] < v1) {
      unint64_t v1 = *(void *)&g_MacOsaTimers[v0 + 8];
    }
    v0 += 32;
  }
  while (v0 != 640);
  if (v1 == -1)
  {
    return gnssOsa_ReleaseOSTimer();
  }
  else
  {
    unint64_t v2 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
    BOOL v3 = v1 >= v2;
    int64_t v4 = v1 - v2;
    if (v3) {
      int64_t v5 = v4;
    }
    else {
      int64_t v5 = 0;
    }
    return gnssOsa_TriggerOSTimer(v5);
  }
}

BOOL gnssOsa_Init(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  double v2 = (double)v0 / (double)v1;
  *(double *)&g_MacClockTicksToMsRelatiouint64_t n = v2 * 0.000001;
  g_MacClockTicksToNs = *(void *)&v2;
  BOOL v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, -7);
  if (!v3 && LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
  {
    bzero(&info, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf((char *)&info, 0x40FuLL, "%10u %s%c %s: #%04hx timer queueAttr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 87, "gnssOsa_Init", 513);
    LbsOsaTrace_WriteLog(0xEu, (char *)&info, v5, 2, 1);
  }
  dispatch_queue_t v6 = dispatch_queue_create("TimerQueue", v3);
  g_TimerQueue = (uint64_t)v6;
  if (v6)
  {
    gnssOsa_InitCriticalSection("gnssOsa_Init", 328, &g_MacTimerCriticSection);
    gnssOsa_InitCriticalSection("gnssOsa_Init", 329, &g_MacTimerContextCriticSection);
    gnssOsa_OSTimerInit();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(&info, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf((char *)&info, 0x40FuLL, "%10u %s%c %s: #%04hx Queue creation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "gnssOsa_Init", 513);
    LbsOsaTrace_WriteLog(0xEu, (char *)&info, v8, 0, 1);
  }
  return v6 != 0;
}

uint64_t gnssOsa_InitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC invalid input");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v7, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 778, "false && \"CRTC invalid input\"");
  }
  if (pthread_mutex_init(a3, 0))
  {
    snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTC OS API Failed");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v10, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(v10, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "gnssOsa_InitCriticalSection", __str);
      LbsOsaTrace_WriteLog(0xEu, v10, v9, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_InitCriticalSection", "agpsmacosa.cpp", 782, "false && \"CRTC OS API Failed\"");
  }
  return 0;
}

void gnssOsa_Deinit(void)
{
  if (g_TimerQueue)
  {
    dispatch_release((dispatch_object_t)g_TimerQueue);
    g_TimerQueue = 0;
  }
  gp_Logger = 0;
}

uint64_t gnssOsa_StopAllTimers(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerStopAll\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_StopAllTimers");
    LbsOsaTrace_WriteLog(0xEu, __str, v1, 5, 1);
  }
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopAllTimers", 445, &g_MacTimerContextCriticSection);
  for (uint64_t i = 0; i != 640; i += 32)
  {
    BOOL v3 = &g_MacOsaTimers[i];
    *BOOL v3 = 0;
    v3[1] = 0;
    *(void *)((char *)v3 + 21) = 0;
    v3[2] = 0;
  }
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopAllTimers", 458, &g_MacTimerContextCriticSection);
  return 1;
}

uint64_t gnssOsa_MacDeinitCriticalSection(const char *a1, int a2, _opaque_pthread_mutex_t *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    snprintf(v12, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "CRTD invalid input");
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_MacDeinitCriticalSection", v12);
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("gnssOsa_MacDeinitCriticalSection", "agpsmacosa.cpp", 792, "false && \"CRTD invalid input\"");
  }
  uint64_t result = pthread_mutex_destroy(a3);
  if (result)
  {
    int v6 = result;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeInit CriticalSec,errno,%d,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 73, "gnssOsa_MacDeinitCriticalSection", v6, a1, a2);
      LbsOsaTrace_WriteLog(0xEu, __str, v8, 4, 1);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gnssOsa_StartTimer(const char *a1, int a2, unsigned int *a3, void (*a4)(void *), void *a5, unsigned int a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a3) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  if (v7)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(v26, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(v26, 0x40FuLL, "%10u %s%c %s: #%04hx MacTimer,ReqDurationMs,%u,%s,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 69, "gnssOsa_StartTimer", 513, a6, a1, a2);
      LbsOsaTrace_WriteLog(0xEu, v26, v19, 0, 1);
    }
  }
  else
  {
    gnssOsa_MacEnterCriticalSection("gnssOsa_StartTimer", 359, &g_MacTimerContextCriticSection);
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = &g_MacOsaTimers[v12];
      if (!g_MacOsaTimers[v12 + 28]) {
        break;
      }
      v12 += 32;
      if (v12 == 640)
      {
        gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 372, &g_MacTimerContextCriticSection);
        snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", "gnssOsa_StartTimer", 377, "Timer not started as max timer count hit");
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(v26, 0x410uLL);
          uint64_t v14 = mach_continuous_time();
          unsigned __int16 v15 = snprintf(v26, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 69, "gnssOsa_StartTimer", __str);
          LbsOsaTrace_WriteLog(0xEu, v26, v15, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_StartTimer", "agpsmacosa.cpp", 377, "false && \"Timer not started as max timer count hit\"");
      }
    }
    unint64_t v20 = vcvtad_u64_f64(*(double *)&g_MacClockTicksToNs * (double)mach_continuous_time());
    unsigned int v21 = ++g_MacOsaTimerCount;
    *(void *)uint64_t v13 = a4;
    *((void *)v13 + 1) = v20 + 1000000 * a6;
    *((void *)v13 + 2) = a5;
    *((_DWORD *)v13 + 6) = v21;
    v13[28] = 1;
    *a3 = v21;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(v26, 0x410uLL);
      uint64_t v22 = mach_continuous_time();
      unsigned __int16 v23 = snprintf(v26, 0x40FuLL, "%10u %s%c %s: TimerStarted,Handle,%u,DurationMs,%u,CurrNs,%llu,ExpiryNs,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "OSA", 68, "gnssOsa_StartTimer", *((_DWORD *)v13 + 6), a6, v20, *((void *)v13 + 1));
      LbsOsaTrace_WriteLog(0xEu, v26, v23, 5, 1);
    }
    gnssOsa_TimerHandler();
    gnssOsa_MacExitCriticalSection("gnssOsa_StartTimer", 401, &g_MacTimerContextCriticSection);
  }
  return v8;
}

uint64_t gnssOsa_StopTimer(const char *a1, unsigned int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  gnssOsa_MacEnterCriticalSection("gnssOsa_StopTimer", 414, &g_MacTimerContextCriticSection);
  uint64_t v4 = 0;
  while (*(_DWORD *)&g_MacOsaTimers[v4 + 24] != a3)
  {
    v4 += 32;
    if (v4 == 640) {
      goto LABEL_8;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimerStopped,Handle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "OSA", 68, "gnssOsa_StopTimer", a3);
    LbsOsaTrace_WriteLog(0xEu, __str, v6, 5, 1);
  }
  BOOL v7 = &g_MacOsaTimers[v4];
  *BOOL v7 = 0;
  v7[1] = 0;
  *(void *)((char *)v7 + 21) = 0;
  v7[2] = 0;
LABEL_8:
  gnssOsa_TimerHandler();
  gnssOsa_MacExitCriticalSection("gnssOsa_StopTimer", 432, &g_MacTimerContextCriticSection);
  return 1;
}

BOOL AgpsInitMsgQueue(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  gnssOsa_InitCriticalSection("AgpsInitMsgQueue", 486, (_opaque_pthread_mutex_t *)(a1 + 24));
  BOOL v2 = gnssOsa_SemInit((dispatch_semaphore_s **)(a1 + 88), 0);
  if (v2)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitMsgQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "AgpsInitMsgQueue", 1539);
    LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
  }
  return v2;
}

BOOL gnssOsa_SemInit(dispatch_semaphore_s **a1, intptr_t value)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = (dispatch_semaphore_s *)dispatch_semaphore_create(value);
  *a1 = v3;
  if (!v3 && LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 69, "gnssOsa_SemInit", 1539);
    LbsOsaTrace_WriteLog(0xEu, __str, v5, 0, 1);
  }
  return v3 != 0;
}

size_t AgpsDeinitMsgQueue(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 68, "AgpsDeinitMsgQueue");
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 5, 1);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeinitMsgQueue", 512, (_opaque_pthread_mutex_t *)(a1 + 24));
  for (uint64_t i = *(void ***)(a1 + 8); i; uint64_t i = *(void ***)(a1 + 8))
  {
    unsigned __int16 v5 = i + 1;
    unsigned __int16 v6 = i[1];
    if (!v6) {
      unsigned __int16 v5 = (void *)(a1 + 16);
    }
    *unsigned __int16 v5 = 0;
    *(void *)(a1 + 8) = v6;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Event dropped Src,%u,Dest,%u,Event,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 87, "AgpsDeinitMsgQueue", 770, *(unsigned __int8 *)*i, *((unsigned __int8 *)*i + 1), *((_DWORD *)*i + 1));
      LbsOsaTrace_WriteLog(0xEu, __str, v8, 2, 1);
    }
    if (*i) {
      free(*i);
    }
    free(i);
  }
  gnssOsa_MacExitCriticalSection("AgpsDeinitMsgQueue", 549, (_opaque_pthread_mutex_t *)(a1 + 24));
  if (gnssOsa_MacDeinitCriticalSection("AgpsDeinitMsgQueue", 556, (_opaque_pthread_mutex_t *)(a1 + 24))
    && LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "AgpsDeinitMsgQueue", 1553);
    LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
  }
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)(a1 + 88))
    && LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "AgpsDeinitMsgQueue", 1540);
    LbsOsaTrace_WriteLog(0xEu, __str, v12, 0, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "OSA", 68, "AgpsDeinitMsgQueue");
    return LbsOsaTrace_WriteLog(0xEu, __str, v15, 5, 1);
  }
  return result;
}

BOOL gnssOsa_DeinitCountingSem(dispatch_object_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  dispatch_object_t v1 = *a1;
  if (*a1)
  {
    dispatch_release(*a1);
    *a1 = 0;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 69, "gnssOsa_DeinitCountingSem", 1540);
    LbsOsaTrace_WriteLog(0xEu, __str, v4, 0, 1);
  }
  return v1 != 0;
}

uint64_t AgpsEnQueueFsmMsg(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v3 = (unsigned __int8 *)result;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Src,%x,Dest,%x,EnQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 68, "AgpsEnQueueFsmMsg", *v3, v3[1], *((_DWORD *)v3 + 1));
      LbsOsaTrace_WriteLog(0xEu, __str, v5, 5, 1);
    }
    unsigned __int16 v6 = gnssOsa_Calloc("AgpsEnQueueFsmMsg", 582, 1, 0x10uLL);
    *unsigned __int16 v6 = v3;
    gnssOsa_MacEnterCriticalSection("AgpsEnQueueFsmMsg", 593, (_opaque_pthread_mutex_t *)(a2 + 24));
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      *(void *)(v7 + 8) = v6;
      *(void *)(a2 + 16) = v6;
      v6[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
        *(void *)(v7 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      *(void *)(a2 + 8) = v6;
      *(void *)(a2 + 16) = v6;
      v6[1] = 0;
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(a2 + 88)))
      {
LABEL_8:
        *(void *)(a2 + 16) = v7;
        free(v6);
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Msg,%x,ProcessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 69, "AgpsEnQueueFsmMsg", 1548, *((_DWORD *)v3 + 1), *(unsigned __int8 *)(a2 + 4));
          LbsOsaTrace_WriteLog(0xEu, __str, v9, 0, 1);
        }
      }
    }
    return gnssOsa_MacExitCriticalSection("AgpsEnQueueFsmMsg", 638, (_opaque_pthread_mutex_t *)(a2 + 24));
  }
  return result;
}

BOOL gnssOsa_SemRelease(dispatch_semaphore_t dsema)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (dsema)
  {
    dispatch_semaphore_signal(dsema);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "gnssOsa_SemRelease", 1542);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
  }
  return dsema != 0;
}

unsigned __int8 *AgpsDeQueueFsmMsg(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!gnssOsa_SemAcquire(*(dispatch_semaphore_t *)(a1 + 88))
    && LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "AgpsDeQueueFsmMsg", 1541);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
  }
  gnssOsa_MacEnterCriticalSection("AgpsDeQueueFsmMsg", 659, (_opaque_pthread_mutex_t *)(a1 + 24));
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    unsigned __int16 v5 = v4 + 1;
    uint64_t v6 = v4[1];
    if (!v6) {
      unsigned __int16 v5 = (void *)(a1 + 16);
    }
    *unsigned __int16 v5 = 0;
    *(void *)(a1 + 8) = v6;
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 684, (_opaque_pthread_mutex_t *)(a1 + 24));
    uint64_t v7 = (unsigned __int8 *)*v4;
    free(v4);
    if (v7 && LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Src,%x,Dest,%x,DeQEvent,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 68, "AgpsDeQueueFsmMsg", *v7, v7[1], *((_DWORD *)v7 + 1));
      LbsOsaTrace_WriteLog(0xEu, __str, v9, 5, 1);
    }
  }
  else
  {
    gnssOsa_MacExitCriticalSection("AgpsDeQueueFsmMsg", 684, (_opaque_pthread_mutex_t *)(a1 + 24));
    return 0;
  }
  return v7;
}

size_t gnssOsa_MarkFsmMsgInvalid(int a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = (_opaque_pthread_mutex_t *)(a2 + 24);
    gnssOsa_MacEnterCriticalSection("gnssOsa_MarkFsmMsgInvalid", 715, (_opaque_pthread_mutex_t *)(a2 + 24));
    unsigned __int16 v5 = *(void **)(a2 + 8);
    if (v5)
    {
      while (*(_DWORD *)(*v5 + 4) != a1)
      {
        unsigned __int16 v5 = (void *)v5[1];
        if (!v5) {
          return gnssOsa_MacExitCriticalSection("gnssOsa_MarkFsmMsgInvalid", 737, v4);
        }
      }
      *(unsigned char *)(*v5 + 8) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 73, "gnssOsa_MarkFsmMsgInvalid", a1);
        LbsOsaTrace_WriteLog(0xEu, __str, v10, 4, 1);
      }
    }
    return gnssOsa_MacExitCriticalSection("gnssOsa_MarkFsmMsgInvalid", 737, v4);
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FsmCtxt\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 87, "gnssOsa_MarkFsmMsgInvalid", 513);
      return LbsOsaTrace_WriteLog(0xEu, __str, v8, 2, 1);
    }
  }
  return result;
}

void *memcpy_s(const char *a1, int a2, void *__dst, unsigned int a4, const void *__src, size_t __n)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (__dst && __src)
  {
    if (a4 >= __n)
    {
      uint64_t v11 = __dst;
      memcpy(__dst, __src, __n);
      return v11;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v8, "OSA", 69, "memcpy_s", 515, a1, a2);
LABEL_8:
      LbsOsaTrace_WriteLog(0xEu, __str, v9, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Caller,%s,line,%d\n", v10, "OSA", 69, "memcpy_s", 513, a1, a2);
    goto LABEL_8;
  }
  return 0;
}

char *strncpy_s(char *__dst, unsigned int a2, const char *__src, size_t __n)
{
  size_t result = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (__dst && __src)
  {
    if (a2 >= __n)
    {
      return strncpy(__dst, __src, __n);
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 69, "strncpy_s", 515);
        LbsOsaTrace_WriteLog(0xEu, __str, v7, 0, 1);
      }
      return 0;
    }
  }
  return result;
}

BOOL gnssOsa_CreateThread(const char *a1, int a2, _opaque_pthread_t **a3, unsigned int a4, void *(__cdecl *a5)(void *), void *a6, unsigned int a7, void *a8, int a9)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  memset(&v36, 0, sizeof(v36));
  if (a3)
  {
    if (a4)
    {
      if (pthread_attr_init(&v36))
      {
        snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Init failed");
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(v35, 0x410uLL);
          uint64_t v28 = mach_continuous_time();
          unsigned __int16 v29 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "OSA", 69, "gnssOsa_CreateThread", __str);
          LbsOsaTrace_WriteLog(0xEu, v35, v29, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1026, "false && \"THRD Init failed\"");
      }
      unsigned __int16 v15 = &v36;
      if (pthread_attr_setstacksize(&v36, a4))
      {
        snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Stack Size");
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(v35, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "OSA", 69, "gnssOsa_CreateThread", __str);
          LbsOsaTrace_WriteLog(0xEu, v35, v17, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1030, "false && \"THRD Stack Size\"");
      }
    }
    else
    {
      unsigned __int16 v15 = 0;
    }
    if (pthread_create(a3, v15, a5, a6))
    {
      snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Create failed");
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
      {
        bzero(v35, 0x410uLL);
        uint64_t v26 = mach_continuous_time();
        unsigned __int16 v27 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "OSA", 69, "gnssOsa_CreateThread", __str);
        LbsOsaTrace_WriteLog(0xEu, v35, v27, 0, 1);
      }
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1037, "false && \"THRD Create failed\"");
    }
    int v32 = 0;
    sched_param v33 = 0;
    if (pthread_getschedparam(*a3, &v32, &v33))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1044, "false && \"THRD pthread_getschedparam failed\"");
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(v35, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: #%04hx Requester,%s,Handle,%p,Prio,%d,DesiredPrio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "OSA", 73, "gnssOsa_CreateThread", 1569, a1, a3, v33.sched_priority, v32, a9);
      LbsOsaTrace_WriteLog(0xEu, v35, v21, 4, 1);
    }
    if (a9 == 99)
    {
      int v32 = 4;
      int priority_max = sched_get_priority_max(4);
    }
    else
    {
      if (a9 != 1)
      {
LABEL_23:
        if (a4 && pthread_attr_destroy(v15))
        {
          snprintf(__str, 0x400uLL, "ASSERT:%s,%d,%s", a1, a2, "THRD Destroy failed");
          if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
          {
            bzero(v35, 0x410uLL);
            uint64_t v30 = mach_continuous_time();
            unsigned __int16 v31 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "OSA", 69, "gnssOsa_CreateThread", __str);
            LbsOsaTrace_WriteLog(0xEu, v35, v31, 0, 1);
          }
          gnssOsa_FlushLog();
          __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1074, "false && \"THRD Destroy failed\"");
        }
        return a3 != 0;
      }
      int priority_max = sched_get_priority_min(v32);
    }
    if (priority_max == -1)
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1061, "false && \"sched_get_priority failed\"");
    }
    v33.sched_priority = priority_max;
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
    {
      bzero(v35, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: #%04hx Updated Prio,%d,Policy,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "OSA", 73, "gnssOsa_CreateThread", 1569, v33.sched_priority, v32);
      LbsOsaTrace_WriteLog(0xEu, v35, v24, 4, 1);
    }
    if (pthread_setschedparam(*a3, v32, &v33))
    {
      gnssOsa_FlushLog();
      __assert_rtn("gnssOsa_CreateThread", "agpsmacosa.cpp", 1067, "false && \"pthread_setschedparam failed\"");
    }
    goto LABEL_23;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
  {
    bzero(v35, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(v35, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "OSA", 69, "gnssOsa_CreateThread", 513);
    LbsOsaTrace_WriteLog(0xEu, v35, v19, 0, 1);
  }
  return a3 != 0;
}

size_t gnssOsaSetConfigLogLevel(int a1, int a2)
{
  dword_26AE6D0F8 = (a1 - 3) < 0xFFFFFFFE;
  switch(a1)
  {
    case 1:
    case 2:
      LbsOsaTrace_UpdateModuleConfig(0, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(1u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(2u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(3u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(4u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(5u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(6u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(7u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(8u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0xBu, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0xCu, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0xDu, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0xEu, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0x12u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0x13u, 1, 1);
      LbsOsaTrace_UpdateModuleConfig(0x14u, 1, 1);
      char v2 = 1;
      goto LABEL_6;
    case 3:
      LbsOsaTrace_UpdateModuleConfig(0, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(1u, 1, 2);
      LbsOsaTrace_UpdateModuleConfig(2u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(3u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(4u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(5u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(6u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(7u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(8u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0xBu, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0xCu, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0xDu, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0xEu, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0x12u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0x13u, 1, 3);
      LbsOsaTrace_UpdateModuleConfig(0x14u, 1, 3);
      char v2 = 3;
      goto LABEL_6;
    case 4:
    case 5:
      LbsOsaTrace_UpdateModuleConfig(0, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(1u, 1, 4);
      LbsOsaTrace_UpdateModuleConfig(2u, 1, 4);
      LbsOsaTrace_UpdateModuleConfig(3u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(4u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(5u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(6u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(7u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(8u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0xBu, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0xCu, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0xDu, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0xEu, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0x12u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0x13u, 1, 7);
      LbsOsaTrace_UpdateModuleConfig(0x14u, 1, 7);
      char v2 = 7;
LABEL_6:
      LbsOsaTrace_UpdateModuleConfig(0x18u, 1, v2);
      int v5 = 0;
      char v6 = 0;
      goto LABEL_7;
    case 6:
      LbsOsaTrace_UpdateModuleConfig(0, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(1u, 1, 4);
      LbsOsaTrace_UpdateModuleConfig(2u, 1, 12);
      LbsOsaTrace_UpdateModuleConfig(3u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(4u, 1, 15);
      if (a2) {
        char v9 = 3;
      }
      else {
        char v9 = 15;
      }
      LbsOsaTrace_UpdateModuleConfig(5u, 1, v9);
      LbsOsaTrace_UpdateModuleConfig(6u, 1, v9);
      LbsOsaTrace_UpdateModuleConfig(7u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(8u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0xBu, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0xCu, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0xDu, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0xEu, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0x12u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0x13u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0x14u, 1, 15);
      LbsOsaTrace_UpdateModuleConfig(0x18u, 1, 15);
      int v5 = 1;
      char v6 = 8;
LABEL_7:
      LbsOsaTrace_UpdateModuleConfig(0x19u, v5, v6);
      int v3 = 1;
      char v4 = 1;
      break;
    default:
      LbsOsaTrace_UpdateModuleConfig(0, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(1u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(2u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(3u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(4u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(5u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(6u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(7u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(8u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0xBu, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0xCu, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0xDu, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0xEu, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0x12u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0x13u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0x14u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0x18u, 0, 0);
      LbsOsaTrace_UpdateModuleConfig(0x19u, 0, 0);
      int v3 = 0;
      char v4 = 0;
      break;
  }

  return LbsOsaTrace_UpdateModuleConfig(0x17u, v3, v4);
}

void gnssOsa_ReportExcp(char *__s, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (__s && a2 && a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, __s);
    __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, a2, (uint64_t)&a2[a3], a3);
    if (gp_Logger) {
      (*(void (**)(uint64_t, void **, void **))(*(void *)gp_Logger + 40))(gp_Logger, v8, &__p);
    }
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_22B929344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void gnssOsa_PrintLog(char *__s, int a2, int a3, size_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = gp_Logger;
  if (gp_Logger)
  {
    if (a3)
    {
      a4 = strlen(__s);
      if (!a4) {
        return;
      }
    }
    else
    {
      a4 = a4;
      if (!a4) {
        return;
      }
    }
    uint64_t v8 = 2;
    switch(a2)
    {
      case 0:
        goto LABEL_11;
      case 1:
      case 3:
        uint64_t v8 = 4;
        goto LABEL_15;
      case 2:
        uint64_t v8 = 3;
LABEL_11:
        if (!a3) {
          goto LABEL_15;
        }
        std::string::basic_string[abi:ne180100](__p, __s, a4);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)gp_Logger + 16))(gp_Logger, v8, __p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        break;
      case 4:
        uint64_t v8 = 5;
        goto LABEL_15;
      default:
        uint64_t v8 = 6;
LABEL_15:
        char v9 = *(void (**)(uint64_t, uint64_t, char *, size_t))(*(void *)gp_Logger + 32);
        v9(v4, v8, __s, a4);
        break;
    }
  }
}

void sub_22B929524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *float __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    char v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void lpm_utils_linkedlist_destroy(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a1)
  {
    free(a1);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v1 = mach_continuous_time();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx linklist is NULL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "PSP", 69, "lpm_utils_linkedlist_destroy", 1537);
    LbsOsaTrace_WriteLog(0x13u, __str, v2, 0, 1);
  }
}

uint64_t lpp_fill_in_bitstr_from_byte(unsigned char *a1, size_t size, unsigned int a3)
{
  if (!size) {
    return 0;
  }
  *(_DWORD *)a1 = size;
  a1[4] = 1;
  uint64_t v5 = size;
  char v6 = gnssOsa_Calloc("posp_alloc", 18, 1, size);
  uint64_t v7 = 0;
  *((void *)a1 + 1) = v6;
  do
    *(unsigned char *)(*((void *)a1 + 1) + v7++) = (a3 >> --v5) & 1;
  while (v5);
  return 1;
}

uint64_t lpp_fill_in_bitstr_from_ulong(unsigned int a1, size_t size, uint64_t a3)
{
  int v4 = size;
  uint64_t v6 = size;
  uint64_t v7 = 1;
  size_t v8 = gnssOsa_Calloc("posp_alloc", 18, 1, size);
  *(void *)(a3 + 8) = v8;
  if (!v8) {
    return 0;
  }
  *(_DWORD *)a3 = v4;
  *(unsigned char *)(a3 + 4) = 1;
  if (v4)
  {
    do
    {
      char v9 = a1 & 1;
      a1 >>= 1;
      *(unsigned char *)(*(void *)(a3 + 8) + --v6) = v9;
    }
    while (v6);
    return 1;
  }
  return v7;
}

double GAL_I_EphBin2Int(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 8) & 0x3FF;
  *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 10) >> 2;
  unsigned int v2 = *(unsigned __int16 *)(a1 + 14);
  int v3 = (*(unsigned __int16 *)(a1 + 10) << 30) | (*(unsigned __int16 *)(a1 + 12) << 14) | (v2 >> 2);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
  int v5 = (v2 << 30) | (*(unsigned __int16 *)(a1 + 16) << 14) | (v4 >> 2);
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = v5;
  int v6 = *(unsigned __int16 *)(a1 + 28) | (*(unsigned __int16 *)(a1 + 26) << 16);
  *(_DWORD *)(a2 + 28) = (v4 << 30) | (*(unsigned __int16 *)(a1 + 20) << 14) | (*(unsigned __int16 *)(a1 + 22) >> 2);
  *(_DWORD *)(a2 + 32) = v6;
  int v7 = *(unsigned __int16 *)(a1 + 36) | (*(unsigned __int16 *)(a1 + 34) << 16);
  *(_DWORD *)(a2 + 36) = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int16 *)(a1 + 30) << 16);
  *(_DWORD *)(a2 + 40) = v7;
  *(_WORD *)(a2 + 48) = *(__int16 *)(a1 + 38) >> 2;
  int v8 = *(unsigned __int16 *)(a1 + 44);
  *(_DWORD *)(a2 + 44) = (v8 | (*(unsigned __int16 *)(a1 + 42) << 16)) >> 8;
  HIDWORD(v9) = v8;
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 46) << 16;
  *(_WORD *)(a2 + 50) = v9 >> 24;
  HIDWORD(v9) = *(unsigned __int16 *)(a1 + 46);
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 48) << 16;
  *(_WORD *)(a2 + 52) = v9 >> 24;
  HIDWORD(v9) = *(unsigned __int16 *)(a1 + 48);
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 50) << 16;
  *(_WORD *)(a2 + 54) = v9 >> 24;
  HIDWORD(v9) = *(unsigned __int16 *)(a1 + 50);
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 52) << 16;
  *(_WORD *)(a2 + 56) = v9 >> 24;
  HIDWORD(v9) = *(unsigned __int16 *)(a1 + 52);
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 54) << 16;
  *(_WORD *)(a2 + 58) = v9 >> 24;
  *(unsigned char *)(a2 + 15) = *(unsigned char *)(a1 + 54);
  unsigned int v10 = *(unsigned __int16 *)(a1 + 58);
  *(unsigned char *)(a2 + 14) = v10 >> 10;
  HIDWORD(v9) = v10;
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 60) << 16;
  *(_WORD *)(a2 + 60) = v9 >> 26;
  HIDWORD(v9) = *(unsigned __int16 *)(a1 + 60);
  LODWORD(v9) = *(unsigned __int16 *)(a1 + 62) << 16;
  *(_WORD *)(a2 + 62) = v9 >> 26;
  *(_WORD *)(a2 + 74) = (*(_WORD *)(a1 + 64) >> 12) & 0xC00F | (16 * (*(_WORD *)(a1 + 62) & 0x3FF));
  unsigned int v11 = *(unsigned __int16 *)(a1 + 68);
  int v12 = *(unsigned __int16 *)(a1 + 70);
  *(_DWORD *)(a2 + 64) = (int)(2
                             * ((8 * *(unsigned __int16 *)(a1 + 66)) | (*(unsigned __int16 *)(a1 + 64) << 19) | (v11 >> 13))) >> 1;
  *(_DWORD *)(a2 + 68) = (int)((8 * v12) | (v11 << 19)) >> 11;
  *(_WORD *)(a2 + 72) = (char)v12 >> 2;
  *(_WORD *)(a2 + 78) = ((*(unsigned __int16 *)(a1 + 78) << 15) | (*(unsigned __int16 *)(a1 + 76) << 31)) >> 22;
  *(_WORD *)(a2 + 76) = ((*(unsigned __int16 *)(a1 + 80) << 9) | (*(unsigned __int16 *)(a1 + 78) << 25)) >> 22;
  unsigned int v13 = *(unsigned __int16 *)(a1 + 80);
  *(unsigned char *)(a2 + 85) = (v13 >> 11) & 3;
  *(unsigned char *)(a2 + 86) = (v13 >> 9) & 3;
  *(unsigned char *)(a2 + 82) = BYTE1(v13) & 1;
  *(unsigned char *)(a2 + 83) = (v13 & 0x80) != 0;
  *(_WORD *)(a2 + 12) = (*(_WORD *)(a1 + 82) >> 11) & 0xF01F | (32 * (v13 & 0x7F));
  *(_DWORD *)(a2 + 8) = (*(unsigned __int16 *)(a1 + 84) >> 7) & 0xFFF001FF | ((*(_WORD *)(a1 + 82) & 0x7FF) << 9);
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  return result;
}

const char *DEMGen_inpDEM2mST(uint64_t a1, uint64_t a2, double *a3)
{
  *((_DWORD *)a3 + 2) = 11;
  TCU_ConvertOStimeToTTICKtime((const char *)a2, *(_DWORD *)a1, a3);
  Set_Mat_Const((const char *)1, 1u, (const char *)6, (int *)a3 + 4, *(double *)(a1 + 8));
  double result = Set_Mat_Const((const char *)1, 1u, (const char *)6, (int *)a3 + 18, *(double *)(a1 + 16));
  __int16 v7 = g_FPE_LogSeverity;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v9 = *(double *)(g_TCU + 8);
    }
    else {
      double v9 = 0.0;
    }
    double result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f -DEM: t=%0.3f,Alt=%0.1f,RMS_Alt=%0.1f", "DEMGen_inpDEM2mST", 85, v8, v9, *a3, *(double *)(a1 + 8), *(double *)(a1 + 16));
    __int16 v7 = g_FPE_LogSeverity;
  }
  if ((v7 & 0x200) != 0) {
    return LC_LOG_NMEA_GENERIC("%s,DEM,%.3f,%.1f,%.1f,%.3f", "$PFPEX", *a3, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a2 + 40) - *a3);
  }
  return result;
}

uint64_t DEMGen_run(double *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void **)(a3 + 87776);
  double v9 = *(_DWORD **)(a4 + 128040);
  memset(__dst, 0, sizeof(__dst));
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  double v10 = *(double *)(a5 + 40);
  uint64_t result = Cyc_Record_Count_Free(v9, 1u);
  if (!result) {
    return result;
  }
  while (1)
  {
    uint64_t result = Cyc_Record_IsEmpty(v8, a2);
    if (result) {
      break;
    }
    Cyc_Record_Read((uint64_t)v8, a2, __dst);
    DEMGen_inpDEM2mST((uint64_t)__dst, a5, (double *)&v19);
    double v12 = *(double *)&v19;
    double v13 = *a1;
    if (*(double *)&v19 < *a1)
    {
      if (*(double *)&v19 < v13 + -6.0)
      {
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          uint64_t v14 = mach_continuous_time();
          if (g_TCU) {
            double v15 = *(double *)(g_TCU + 8);
          }
          else {
            double v15 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f DEM: ignoring measurement in the past! meas.time=%0.3f, prevTime=%0.3f (diff=%0.3f)", "DEMGen_run", 149, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), v15, *(double *)&v19, *a1, *a1 - *(double *)&v19);
        }
        goto LABEL_18;
      }
      if (*(double *)&v19 < v13 + -0.05 && (g_FPE_LogSeverity & 4) != 0)
      {
        uint64_t v16 = mach_continuous_time();
        if (g_TCU) {
          double v17 = *(double *)(g_TCU + 8);
        }
        else {
          double v17 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f DEM: using measurement %0.3f sec in the past. meas.time=%0.3f, prevTime=%0.3f", "DEMGen_run", 161, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), v17, *a1 - *(double *)&v19, *(double *)&v19, *a1);
        double v13 = *a1;
      }
      double v12 = v13 + 0.001;
      *(double *)&long long v19 = v13 + 0.001;
    }
    *a1 = v12;
    Cyc_Record_Write((uint64_t)v9, &v19);
LABEL_18:
    uint64_t result = Cyc_Record_Count_Free(v9, 1u);
    if (!result) {
      return result;
    }
  }
  DWORD2(v19) = 12;
  *(double *)&long long v19 = v10 + 0.001;
  *(void *)&long long v20 = 0x3FF0000000000000;
  if (v10 + 0.001 > *a1)
  {
    *a1 = v10 + 0.001;
    return (uint64_t)Cyc_Record_Write((uint64_t)v9, &v19);
  }
  return result;
}

uint64_t XofSvcs02_02Crc32(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  if ((g_Crc32Table_Computed & 1) == 0)
  {
    for (uint64_t i = 0; i != 256; ++i)
    {
      unsigned int v4 = 0;
      unsigned int v5 = i;
      do
      {
        if (v5) {
          unsigned int v5 = (v5 >> 1) ^ 0xEDB88320;
        }
        else {
          v5 >>= 1;
        }
      }
      while (v4++ < 7);
      g_Crc32_RemTable[i] = v5;
    }
    g_Crc32Table_Computed = 1;
  }
  if (a3)
  {
    unsigned int v7 = ~result;
    uint64_t v8 = a3;
    do
    {
      int v9 = *a2++;
      unsigned int v7 = g_Crc32_RemTable[v7 ^ v9] ^ (v7 >> 8);
      --v8;
    }
    while (v8);
    return ~v7;
  }
  return result;
}

BOOL xofSvcs02_03EndianConvert(unsigned __int8 *a1, unsigned int a2, signed __int8 *a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a4 && a2 && a1 && a3)
  {
    if (a2 >= 2)
    {
      uint64_t v12 = 0;
      BOOL v7 = 0;
      unsigned __int16 v13 = 0;
      uint64_t v14 = a2 - 1;
      while (1)
      {
        v13 += a1[v12];
        if (v13 >= a4)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0)) {
            return v7;
          }
          bzero(__str, 0x410uLL);
          unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx OffSet,%u,DataSize,%u\n", v19);
          goto LABEL_22;
        }
        uint64_t v15 = v12 + 1;
        size_t v16 = a1[v12 + 1];
        if ((v16 - 9) < 0xFFFFFFF8) {
          break;
        }
        ++v12;
        double v17 = __src;
        size_t v18 = v16;
        do
          *v17++ = a3[v13 - 1 + v18--];
        while (v18);
        memcpy_s("xofSvcs02_04SingleEnConvert", 82, &a3[v13], v16, __src, v16);
        BOOL v7 = v15 >= (int)v14;
        if (v15 == v14) {
          return v7;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Data,Size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 69, "xofSvcs02_04SingleEnConvert", 513, v16);
        LbsOsaTrace_WriteLog(8u, __str, v22, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Endian conversion,MapIndex,%u,OffSet,%u\n", v23);
LABEL_22:
        LbsOsaTrace_WriteLog(8u, __str, v20, 5, 1);
      }
    }
    else
    {
      return 1;
    }
    return v7;
  }
  else
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    BOOL result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Data,StructSizeMap,MapSize,%u,DataSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "xofSvcs02_03EndianConvert", 515, a2, a4);
      LbsOsaTrace_WriteLog(8u, __str, v11, 0, 1);
      return 0;
    }
  }
  return result;
}

uint64_t xofSvcs02_04GetStartSv(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((a1 - 1) >= 6)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    LOBYTE(v1) = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 69, "xofSvcs02_04GetStartSv", 515, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 0, 1);
      LOBYTE(v1) = 0;
    }
  }
  else
  {
    return (0x10101C17801uLL >> (8 * (a1 - 1)));
  }
  return v1;
}

uint64_t DD_GLON_Alm_Set_Health_Frq(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0;
  unsigned __int8 v20 = 0;
  uint64_t result = GLON_AlmBin2Int(a1, (uint64_t)&v16);
  int v4 = BYTE3(v17) - 32;
  if (BYTE3(v17) <= 0x18u) {
    int v4 = 2139062143;
  }
  if (BYTE3(v17) >= 7u) {
    int v5 = v4;
  }
  else {
    int v5 = BYTE3(v17);
  }
  int v6 = BYTE2(v17);
  uint64_t v7 = BYTE2(v17) - 1;
  if (v7 <= 0x17)
  {
    if (BYTE6(v19))
    {
      if ((unsigned __int16)g_Enable_Event_Log >= 2u)
      {
        int v8 = *((_DWORD *)a2 + v7 + 4084);
        if (v8 != 2139062143 && v8 != v5) {
          uint64_t result = (uint64_t)EvCrt_v("DD_GLON_Alm_Set_Health_Frq:  Error:  Ignoring apparent change of Frq Id of Slot %d from %d to %d %d %d", BYTE2(v17), v8, v5, 1, v20);
        }
      }
      uint64_t v10 = (char *)a2 + 4 * v7;
      if (*((_DWORD *)v10 + 4084) == 2139062143 && v5 != 2139062143) {
        *((_DWORD *)v10 + 4084) = v5;
      }
      uint64_t v12 = a2[1401];
      if (!*(unsigned char *)(v12 + v7) && !*(unsigned char *)(a2[2034] + v7))
      {
        *(unsigned char *)(v12 + v7) = 1;
        uint64_t result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health U->H Alm:  Slot %d  FrqId %d", BYTE2(v17), v5);
        *(_DWORD *)(a2[1402] + 20 * v7 + 4) = 1;
      }
    }
    else
    {
      uint64_t v13 = a2[1401];
      if (*(unsigned char *)(v13 + v7))
      {
        *(unsigned char *)(v13 + v7) = 0;
        uint64_t result = (uint64_t)EvLog_v("DD_GLON_Alm_Set_Health_Frq:  Health H->U Alm:  Slot %d  FrqId %d", v6, v5);
        *(_DWORD *)(a2[1402] + 20 * v7 + 4) = 2;
      }
      uint64_t v14 = (char *)a2 + 4 * v7;
      if (*((_DWORD *)v14 + 4084) == 2139062143 && v5 <= 6) {
        *((_DWORD *)v14 + 4084) = v5;
      }
    }
  }
  return result;
}

char *DD_Proc_GLON_Data(char *result, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2 + 16;
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  if ((v7 & 0x80000000) != 0)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 2u)
    {
      int v22 = *(unsigned __int8 *)(a2 + 59);
      return (char *)EvLog_d("DD_Proc_GLON_Data:  GLON MSB Zero test fail", v22);
    }
  }
  else
  {
    unsigned __int16 v11 = result;
    uint64_t v12 = *(char *)(a2 + 58) + 7;
    uint64_t v13 = (char *)*(int *)(a6 + 4 * v12 + 16432);
    uint64_t v14 = v13 - 1;
    uint64_t v15 = v7 >> 27;
    *(unsigned char *)(a2 + 59) = v15;
    if (!v15) {
      goto LABEL_49;
    }
    if (*(int *)(a4 + 60) >= 7)
    {
      int v16 = *(_DWORD *)(a6 + 8444);
      if ((v16 - 2) < 5 || (v16 - 1) <= 5 && *(unsigned char *)(a4 + 64))
      {
        uint64_t v17 = (*(_DWORD *)(a2 + 60) % 30);
        int v18 = (int)((*(_DWORD *)(a2 + 60) % 30 + (((*(_DWORD *)(a2 + 60) % 30) & 0x80u) >> 7)) << 24) >> 25;
        if ((v17 + 1) < 3) {
          int v18 = 15;
        }
        if (v18 != v7 >> 27
          && !*a3
          && !*(unsigned char *)(*(void *)(a6 + 48) + *(unsigned __int8 *)(a2 + 8))
          && ((v18 - 2) > 3u || v15 + 1 != v18))
        {
          if ((unsigned __int16)g_Enable_Event_Log >= 2u)
          {
            unsigned __int8 v20 = a5;
            uint64_t result = (char *)EvCrt_nd("DD_Proc_GLON_Data:  Decoded Str No error", 3, (uint64_t)a3, v15, v18, v17);
            a5 = v20;
          }
          *(unsigned char *)(a2 + 59) = 0;
          goto LABEL_49;
        }
      }
    }
    if (v15 == 2)
    {
      if ((v7 & 0x4000000) == 0) {
        goto LABEL_22;
      }
    }
    else if (v15 == 3)
    {
      if ((v7 & 0x800) == 0)
      {
LABEL_22:
        if (v13 != 2139062143)
        {
          result[v12 + 4706] = 0;
          if (!v14[*(void *)(a6 + 11208)])
          {
            if (v14[*(void *)(a6 + 16288)])
            {
              uint64_t v21 = a5;
              memset(v111, 0, sizeof(v111));
              uint64_t v112 = 0;
              char v113 = 0;
              uint64_t result = (char *)GLON_AlmBin2Int(a6 + 36 * (void)v14 + 15352, (uint64_t)v111);
              if (BYTE6(v112))
              {
                v14[*(void *)(a6 + 11208)] = 1;
                uint64_t result = EvLog_v("DD_Proc_GLON_Data:  Health U->H Imm:  Slot %d  FrqId %d", v13, *(unsigned __int8 *)(a2 + 59));
                *(_DWORD *)(*(void *)(a6 + 11216) + 20 * (void)v14 + 4) = 1;
              }
              else if ((unsigned __int16)g_Enable_Event_Log >= 4u)
              {
                uint64_t result = EvLog_v("DD_Proc_GLON_Data:  Health U->U Imm:  Slot %d  FrqId %d", v13, *(unsigned __int8 *)(a2 + 59));
              }
              a5 = v21;
            }
          }
        }
LABEL_49:
        long long v25 = v11 + 6005;
        int v26 = *(unsigned __int8 *)(a2 + 59);
        if ((v26 - 1) > 4)
        {
          if ((v26 - 6) <= 9)
          {
            if (v26)
            {
              uint64_t v31 = 14;
              do
              {
                int v32 = *v25;
                if (v32 != v26 && v32 != 0) {
                  *long long v25 = 0;
                }
                if (*(v25 - 1)) {
                  BOOL v34 = v26 - 1 == *(v25 - 1);
                }
                else {
                  BOOL v34 = 1;
                }
                if (!v34) {
                  *(v25 - 1) = 0;
                }
                v25 += 2;
                --v31;
              }
              while (v31);
            }
            else
            {
              uint64_t v27 = 14;
              long long v28 = v11 + 6005;
              do
              {
                int v29 = *(v28 - 1);
                if (v29 != v26 && v29 != 0) {
                  *(v28 - 1) = 0;
                }
                *long long v28 = 0;
                v28 += 2;
                --v27;
              }
              while (v27);
              *(_WORD *)(v11 + 6397) = 0;
            }
          }
        }
        else
        {
          *((_DWORD *)v11 + 1507) = 0;
          *(void *)(v11 + 6020) = 0;
          *(_OWORD *)(v11 + 6004) = 0u;
          v11[6398] = 0;
          *((_WORD *)v11 + 3198) = 0;
        }
        int v35 = *(unsigned __int8 *)(a2 + 59);
        if ((v35 - 1) < 4)
        {
          if (v13 == 2139062143
            || (pthread_attr_t v36 = (_WORD *)(a6 + ((void)v14 << 6) + 11284), *v36 == 4095)
            || !v14[*(void *)(a6 + 11208)]
            || !v14[*(void *)(a6 + 16272)]
            || *(_DWORD *)(a2 + 60) % 1800 < 30)
          {
            uint64_t result = (char *)DD_Proc_Glon_Eph_String(v11, a2, a4, a5);
          }
          else
          {
            uint64_t v37 = v8;
            double v38 = a5;
            DD_Proc_Glon_Eph_Bit_Validation(v13, v35, v37, a6);
            int v39 = (unsigned __int16)*v36;
            uint64_t result = (char *)DD_Proc_Glon_Eph_String(v11, a2, a4, v38);
            if (v39 == 4095)
            {
              uint64_t v40 = a6 + ((void)v14 << 6);
              *(_DWORD *)(v40 + 11224) = *v38;
              *(_DWORD *)(v40 + 11228) = 4;
              v14[*(void *)(a6 + 16304)] = 1;
              if (v11[v12 + 5508] >= 2u)
              {
                uint64_t v41 = *(void **)(a6 + 16328);
                *uint64_t v41 = 0;
                v41[1] = 0;
                _OWORD v41[2] = 0;
              }
              if (*v38 >= 1) {
                uint64_t result = (char *)Core_Save_GLON_Eph(v13, 0, (long long *)(v40 + 11224));
              }
            }
          }
          goto LABEL_96;
        }
        if (v35 != 5)
        {
          if (*(unsigned char *)(a2 + 59))
          {
            if (*(int *)(a4 + 60) >= 3)
            {
              unsigned int v57 = *(_DWORD *)(a2 + 16);
              char v58 = (int)(*(_DWORD *)(a2 + 60) - 2 * ((v57 >> 27) & 0xF) + 15) / 30 % 5 + 1;
              if (((((int)(*(_DWORD *)(a2 + 60) - 2 * ((v57 >> 27) & 0xF) + 15) / 30 % 5) + 1) & 0x100) == 0)
              {
                int v59 = (v57 >> 27) & 0xF;
                uint64_t v60 = *(char *)(a2 + 58) + 7;
                if ((v57 >> 27))
                {
                  uint64_t v87 = (int)v60;
                  unsigned __int16 v88 = &v11[2 * (int)v60 + 6004];
                  if (*v88 + 1 == v59 && v11[(int)v60 + 5972])
                  {
                    uint64_t v89 = &v11[24 * (int)v60];
                    int v90 = *(_DWORD *)(v8 + 8);
                    *(void *)(v89 + 6044) = *(void *)v8;
                    *((_DWORD *)v89 + 1513) = v90;
                    if (!*((_DWORD *)v11 + 1500))
                    {
                      int v91 = *(_DWORD *)(a2 + 60);
                      if (v91 >= 1) {
                        *((_DWORD *)v11 + 1500) = v91;
                      }
                    }
                    unsigned __int16 v92 = &v11[2 * v87];
                    v92[6005] = v59;
                    v11[v87 + 5986] = v58;
                    v92[6369] = *(unsigned char *)(a2 + 15);
                    ++v11[6397];
                    *(_DWORD *)&v11[4 * v87 + 6400] = *a5;
                    if (!v92[6368] && !v92[6369]) {
                      ++v11[6398];
                    }
                  }
                  else
                  {
                    if ((unsigned __int16)g_Enable_Event_Log >= 6u)
                    {
                      if (v11[(int)v60 + 5972]) {
                        uint64_t result = EvLog_v("DD_Proc_Glon_Alm_String:  String numbers not consecutive, 1stStrId %d  2ndStrId %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ");
                      }
                      else {
                        uint64_t result = EvLog_v("DD_Proc_Glon_Alm_String:  Clk1 not Ready, FrqId %d  FrmId %d  StrId %d  Clk1_Ready %d ");
                      }
                    }
                    if (*v88) {
                      *unsigned __int16 v88 = 0;
                    }
                  }
                  goto LABEL_96;
                }
                if (v59 == 14
                  && ((int)(*(_DWORD *)(a2 + 60) - 2 * ((v57 >> 27) & 0xF) + 15) / 30 % 5 + 1) == 5)
                {
                  uint64_t v61 = *(int *)(a6 + 4 * v60 + 16432);
                  if (v61 == 2139062143 || !*(unsigned char *)(v61 + *(void *)(a6 + 11208) - 1))
                  {
                    if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
                      uint64_t result = EvLog_v("DD_Proc_Glon_Alm_String:  Rejected:  Clk2 String,  SlotNum %d  FrqId %d  FrmId %d  StrId %d  glonALM_Str1:  0x%x ", v61, *(char *)(a2 + 58), 5, 14, *(_DWORD *)&v11[24 * (int)v60 + 6032]);
                    }
                    goto LABEL_96;
                  }
                }
                else
                {
                  if (((v57 >> 19) & 0x1F) - 25 < 0xFFFFFFE8)
                  {
                    if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
                      uint64_t result = EvCrt_v("DD_Proc_Glon_Alm_String:  Rejected:  Invalid Slot %d  FrqId %d  FrmId %d  StrId %d  Word[0]: 0x%x ");
                    }
                    goto LABEL_96;
                  }
                  uint64_t v60 = (int)v60;
                }
                unint64_t v97 = &v11[24 * (int)v60];
                uint64_t v98 = *(void *)v8;
                *((_DWORD *)v97 + 1510) = *(_DWORD *)(v8 + 8);
                *((void *)v97 + 754) = v98;
                if (!*((_DWORD *)v11 + 1500))
                {
                  int v99 = *(_DWORD *)(a2 + 60);
                  if (v99 >= 1) {
                    *((_DWORD *)v11 + 1500) = v99;
                  }
                }
                int v100 = &v11[2 * v60];
                v100[6004] = v59;
                v100[6368] = *(unsigned char *)(a2 + 15);
                ++v11[6396];
                *(_DWORD *)&v11[4 * v60 + 6400] = *a5;
              }
            }
          }
          else
          {
            uint64_t result = (char *)EvLog_d("DD_Proc_GLON_Data:  Bad string", *(unsigned __int8 *)(a2 + 9));
          }
LABEL_96:
          uint64_t v49 = 0;
          LODWORD(v50) = 0;
          uint64_t v51 = *(void *)(a6 + 11208);
          uint64_t v52 = p_NV;
          uint64_t v53 = *(void *)(v51 + 16);
          *(_OWORD *)(p_NV + 19172) = *(_OWORD *)v51;
          *(void *)(v52 + 19188) = v53;
          uint64_t v54 = v52 + 19168;
          __int16 v55 = -9871;
          do
          {
            int v56 = *(unsigned __int8 *)(v54 + v49) ^ HIBYTE(v55);
            __int16 v55 = -12691 * (v55 + (*(unsigned __int8 *)(v54 + v49) ^ HIBYTE(v55))) + 22719;
            uint64_t v50 = (v50 + v56);
            ++v49;
          }
          while (v49 != 32);
          *(void *)(v52 + 19160) = v50;
          return result;
        }
        unsigned int v42 = *(_DWORD *)(a2 + 20);
        unsigned int v43 = *(_DWORD *)(a2 + 24);
        int v44 = HIWORD(*(_DWORD *)(a2 + 16)) & 0x7FF;
        HIDWORD(v46) = *(_DWORD *)(a2 + 16);
        LODWORD(v46) = v42;
        int v45 = v46 >> 16;
        if (v45 < 0) {
          int v47 = (v45 ^ 0x7FFFFFFF) + 1;
        }
        else {
          int v47 = v45;
        }
        if ((v42 & 0x200) != 0) {
          unsigned int v48 = (((v43 >> 20) & 0xFFC00FFF | ((v42 & 0x3FF) << 12)) ^ 0xFFDFFFFF) + 1;
        }
        else {
          unsigned int v48 = (v43 >> 20) & 0xFFC00FFF | ((v42 & 0x3FF) << 12);
        }
        if ((v44 - 1462) < 0xFFFFFA4B)
        {
          uint64_t result = EvCrt_v("DD_Proc_Glon_Clk1_String:  Rejected:  FrqId %d  NA = %d  - Out of range [1..1461]");
          goto LABEL_96;
        }
        unint64_t v62 = 0;
        long long v63 = (unsigned __int16 *)(a6 + 16224);
        int v64 = *a5;
        int v65 = (v42 >> 10) & 0x1F;
        int v66 = (v43 >> 19) & 1;
        long long v67 = v11 + 5600;
        BOOL v68 = 1;
        while (1)
        {
          if (v47 == *(v67 - 2) && v48 == *v67 && v65 - 2 < *((unsigned __int8 *)v67 - 4))
          {
            int v69 = *((unsigned __int16 *)v67 - 6);
            BOOL v70 = __OFSUB__(v44, v69);
            LODWORD(result) = v44 - v69;
            uint64_t result = (int)result < 0 != v70
                   ? (char *)(result + 1461)
                   : (char *)result;
            if ((int)result <= 3) {
              break;
            }
          }
          BOOL v68 = v62 < 0xD;
          v67 += 7;
          uint64_t result = (char *)++v62;
          if (v62 == 14)
          {
            BOOL v68 = 0;
            uint64_t v71 = *(char *)(a2 + 58) + 7;
            __int16 v72 = &v11[28 * (int)v71];
            *((_DWORD *)v72 + 1395) = v64;
            int v73 = (long long *)(v72 + 5580);
            *((_DWORD *)v72 + 1396) = 0;
            *((_WORD *)v72 + 2794) = v44;
            *((_DWORD *)v72 + 1398) = v47;
            v72[5596] = v65;
            *((_DWORD *)v72 + 1400) = v48;
            v72[5604] = v66;
            BOOL v74 = *(unsigned char *)(a2 + 15) == 0;
            goto LABEL_119;
          }
        }
        uint64_t v71 = *(char *)(a2 + 58) + 7;
        int v96 = &v11[28 * (int)v71];
        *((_DWORD *)v96 + 1395) = v64;
        int v73 = (long long *)(v96 + 5580);
        *((_DWORD *)v96 + 1396) = 0;
        *((_WORD *)v96 + 2794) = v44;
        *((_DWORD *)v96 + 1398) = v47;
        v96[5596] = v65;
        *((_DWORD *)v96 + 1400) = v48;
        v96[5604] = v66;
        BOOL v74 = 1;
LABEL_119:
        v11[v71 + 5972] = v74;
        if (*(unsigned char *)(a6 + 16296) || !v74)
        {
          if (!v68) {
            goto LABEL_148;
          }
          if (*(unsigned char *)(a6 + 16296))
          {
            unsigned int v78 = v11[28 * (int)v71 + 5596];
            if (*(unsigned __int8 *)(a6 + 16232) >= v78) {
              goto LABEL_134;
            }
            int v79 = *(__int16 *)(a4 + 66) - v78;
            if (v79 < 0) {
              int v79 = -v79;
            }
            if (v79 >= 2)
            {
LABEL_134:
              unsigned int v80 = *(unsigned __int16 *)&v11[28 * (int)v71 + 5588];
              if (*v63 > v80) {
                goto LABEL_148;
              }
              int v81 = *(__int16 *)(a4 + 68) - v80;
              if (v81 < 0) {
                int v81 = -v81;
              }
              if (v81 > 1)
              {
LABEL_148:
                if ((unsigned __int16)g_Enable_Event_Log >= 6u) {
                  uint64_t result = (char *)EvLog_nd("DD_Proc_Glon_Clk1_String:  Rejected: ", 6, (uint64_t)&g_Crc32_RemTable[230], *(unsigned __int8 *)(a6 + 16232), *v63, v11[28 * (int)v71 + 5596], *(unsigned __int16 *)&v11[28 * (int)v71 + 5588], *(__int16 *)(a4 + 66), *(__int16 *)(a4 + 68));
                }
                goto LABEL_96;
              }
            }
          }
          long long v82 = *v73;
          *(_OWORD *)(a6 + 16228) = *(long long *)((char *)v73 + 12);
          *(_OWORD *)(a6 + 16216) = v82;
          *(_DWORD *)(a6 + 16216) = *a5;
          *(_DWORD *)(a6 + 16220) = 4;
        }
        else
        {
          long long v75 = *v73;
          *(_OWORD *)(a6 + 16228) = *(long long *)((char *)v73 + 12);
          *(_OWORD *)(a6 + 16216) = v75;
          *(_DWORD *)(a6 + 16216) = *a5;
          *(_DWORD *)(a6 + 16220) = 4;
          int v76 = *(_DWORD *)(a6 + 16228);
          if (v76 < 0) {
            int v76 = -v76;
          }
          if (v76 > 0x864) {
            goto LABEL_96;
          }
          int v77 = *(_DWORD *)(a6 + 16236);
          if (v77 < 0) {
            int v77 = -v77;
          }
          if (v77 >= 0x433) {
            goto LABEL_96;
          }
        }
        *(unsigned char *)(a6 + 16296) = 1;
        int v83 = *(__int16 *)(a4 + 68);
        int v84 = v83 - *v63;
        int v85 = v84 - 1461;
        int v86 = v84 + 1461;
        if (v84 >= -730) {
          int v86 = v83 - *v63;
        }
        if (v84 <= 729) {
          int v85 = v86;
        }
        if (v85 < 0) {
          int v85 = -v85;
        }
        if (*(unsigned char *)(a4 + 64) && v85 >= 2)
        {
          *(_DWORD *)(a4 + 66) = *(unsigned __int8 *)(a6 + 16232);
          *(unsigned char *)(a4 + 64) = 0;
          goto LABEL_190;
        }
        uint64_t v93 = *(unsigned __int8 *)(a6 + 16232);
        if (*(unsigned char *)(a4 + 64))
        {
          int v94 = *(__int16 *)(a4 + 66);
          if (v93 != v94)
          {
            unsigned __int16 v95 = a5;
            if (v94 + 1 == v93 && v83 == 1461)
            {
              uint64_t result = (char *)EvLog_nd("DD_Proc_Glon_Clk1_String:  4yrBlockNo roll-over ", 2, (uint64_t)&g_Crc32_RemTable[230], *(__int16 *)(a4 + 66), v93);
              *(_WORD *)(a4 + 68) = 1;
            }
            else
            {
              uint64_t result = (char *)EvCrt_nd("DD_Proc_Glon_Clk1_String:  WARNING:  4yrBlockNo miss-match ", 2, (uint64_t)&g_Crc32_RemTable[230], *(__int16 *)(a4 + 66), v93);
            }
            *(_WORD *)(a4 + 66) = *(unsigned __int8 *)(a6 + 16232);
            a5 = v95;
            if (!*(unsigned char *)(a4 + 64)) {
              goto LABEL_190;
            }
          }
        }
        else
        {
          *(_WORD *)(a4 + 66) = v93;
          if (v83 < 1)
          {
LABEL_190:
            uint64_t v104 = 0;
            LODWORD(v105) = 0;
            *(_DWORD *)(a6 + 16216) = *a5;
            *(_DWORD *)(a6 + 16220) = 4;
            uint64_t v106 = p_NV;
            long long v107 = *(_OWORD *)(a6 + 16228);
            *(_OWORD *)(p_NV + 19208) = *(_OWORD *)(a6 + 16216);
            *(_OWORD *)(v106 + 19220) = v107;
            uint64_t v108 = v106 + 19208;
            __int16 v109 = -9871;
            do
            {
              int v110 = *(unsigned __int8 *)(v108 + v104) ^ HIBYTE(v109);
              __int16 v109 = -12691 * (v109 + (*(unsigned __int8 *)(v108 + v104) ^ HIBYTE(v109))) + 22719;
              uint64_t v105 = (v105 + v110);
              ++v104;
            }
            while (v104 != 32);
            *(void *)(v106 + 19200) = v105;
            goto LABEL_96;
          }
          *(unsigned char *)(a4 + 64) = 1;
        }
        if (!*(unsigned char *)(a4 + 5) || !*(_DWORD *)a4)
        {
          *(void *)int v111 = 0;
          int v116 = 0;
          int v115 = 0;
          double v114 = 0.0;
          uint64_t v101 = a5;
          API_Get_UTC_Cor(1, (double *)v111);
          Glon_To_GPS_Time(*(__int16 *)(a4 + 66), *(__int16 *)(a4 + 68), *(double *)(a4 + 72), *(double *)v111, &v116, &v115, &v114);
          uint64_t result = (char *)DD_Submit_WeekNum((void *)*(char *)(a2 + 58), (__int16)v116, (__int16)v115, (int *)a4, v114);
          a5 = v101;
          if (!*v101)
          {
            uint64_t v102 = *(void *)(p_api + 48);
            if (*(unsigned char *)(v102 + 5) && *(int *)v102 >= 3) {
              int v103 = (int)*(double *)(v102 + 24) + 604800 * *(__int16 *)(v102 + 16);
            }
            else {
              int v103 = 0;
            }
            *uint64_t v101 = v103;
          }
        }
        goto LABEL_190;
      }
    }
    else
    {
      if (v15 < 5 || ((v7 >> 27) & 1) == 0) {
        goto LABEL_49;
      }
      if ((*(unsigned char *)(a2 + 26) & 8) == 0) {
        goto LABEL_22;
      }
    }
    if (!*(unsigned char *)(a2 + 15)) {
      ++result[v12 + 4706];
    }
    if (v13 == 2139062143)
    {
      return EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot ?  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d   (Ignored, no Slot)");
    }
    else
    {
      if (!*(unsigned char *)(a2 + 15))
      {
        unint64_t v23 = (unsigned __int8 *)&result[v12 + 4706];
        if (*v23 >= 2u)
        {
          uint64_t v24 = *(void *)(a6 + 11208);
          if (v14[v24])
          {
            v14[v24] = 0;
            uint64_t result = EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d", v13, *(char *)(a2 + 58), *(unsigned __int8 *)(a2 + 59), 0, *v23);
            *(_DWORD *)(*(void *)(a6 + 11216) + 20 * (void)v14) = 2;
          }
        }
      }
      if (v14[*(void *)(a6 + 11208)]) {
        return EvLog_v("DD_Proc_GLON_Data:  Health H->U Imm:  Slot %d  FrqId %d  String %d  Suspect_Bits %d  Bad_Cnt %d  (Waiting Confirmation)");
      }
    }
  }
  return result;
}

char *DD_Proc_Glon_Eph_Bit_Validation(char *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (result - 1);
  unsigned int v5 = a2 - 1;
  if (v4 <= 0x17 && v5 <= 3)
  {
    int v9 = (int)result;
    uint64_t v10 = 0;
    char v11 = 3 * v5;
    uint64_t v12 = a4 + (v4 << 6);
    uint64_t v13 = v12 + 12 * v5 + 11236;
    uint64_t v14 = (_WORD *)(v12 + 11284);
    uint64_t v15 = (char *)&MaskToStrCheck + 12 * v5;
    char v16 = 3 * a2 - 3;
    do
    {
      unsigned int v17 = (unsigned __int16)*v14;
      if (((v17 >> (v16 + v10)) & 1) == 0)
      {
        int v18 = *(_DWORD *)(a3 + 4 * v10);
        int v19 = *(_DWORD *)&v15[4 * v10];
        if (((*(_DWORD *)(v13 + 4 * v10) ^ v18) & v19) != 0)
        {
          if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
            uint64_t result = EvCrt_v("DD_Proc_Glon_Eph_Bit_Validation:  Fail SV %d  St %d  Wd %d  0x%x 0x%x 0x%x", v9, a2, v10, v18, *(_DWORD *)(v13 + 4 * v10), v19);
          }
        }
        else
        {
          *uint64_t v14 = v17 | (1 << (v11 + v10));
        }
      }
      ++v10;
    }
    while (v10 != 3);
  }
  return result;
}

_DWORD *DD_Proc_Glon_Eph_String(_DWORD *result, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v7 = result;
  v41[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v8 = (char)(*(unsigned char *)(a2 + 58) + 7);
  int v9 = &result[v8 + 1181];
  uint64_t v10 = (*(unsigned char *)(a2 + 59) - 1);
  char v11 = (char *)v9 + v10;
  int v12 = *((unsigned __int8 *)v9 + v10);
  if (*((unsigned char *)v9 + v10))
  {
    if (((result[12 * (char)(*(unsigned char *)(a2 + 58) + 7) + 1195 + 3 * (*(unsigned char *)(a2 + 59) - 1)] ^ *(_DWORD *)(a2 + 16)) & MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 3]) != 0)
    {
      int v12 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      do
      {
        unint64_t v14 = v13;
        if (v13 == 2) {
          break;
        }
        int v15 = MaskToStrCheck[3 * *(unsigned __int8 *)(a2 + 59) - 2 + v13];
        int v16 = result[12 * (char)(*(unsigned char *)(a2 + 58) + 7) + 1196 + 3 * (*(unsigned char *)(a2 + 59) - 1) + v13] ^ *(_DWORD *)(a2 + 20 + 4 * v13);
        ++v13;
      }
      while ((v16 & v15) == 0);
      int v12 = v14 > 1;
    }
  }
  uint64_t v17 = (uint64_t)&result[12 * (char)(*(unsigned char *)(a2 + 58) + 7) + 1195 + 3 * (*(unsigned char *)(a2 + 59) - 1)];
  uint64_t v18 = *(void *)(a2 + 16);
  *(_DWORD *)(v17 + 8) = *(_DWORD *)(a2 + 24);
  *(void *)uint64_t v17 = v18;
  int v19 = (char *)&result[v8];
  v19[v10 + 5452] = *(unsigned char *)(a2 + 15);
  *((_DWORD *)v19 + 1381) = *a4;
  if (v12) {
    char v20 = *v11 + 1;
  }
  else {
    char v20 = 1;
  }
  *char v11 = v20;
  if (!result[1180])
  {
    int v21 = *(_DWORD *)(a2 + 60);
    if (v21 >= 1) {
      result[1180] = v21;
    }
  }
  int v22 = *(unsigned __int8 *)(a2 + 59);
  if (v22 == 1)
  {
    if ((result[12 * (int)v8 + 1195] & 0x1800000) == 0) {
      goto LABEL_42;
    }
    *int v9 = 1;
    int v22 = *(unsigned __int8 *)(a2 + 59);
  }
  if (v22 != 4) {
    goto LABEL_42;
  }
  unint64_t v23 = (char *)&result[v8 + 1181] + 3;
  unsigned int v24 = *v23;
  if (!*v23)
  {
    int v26 = (unsigned char *)(a3 + 64);
    if (*(unsigned char *)(a3 + 64)) {
      goto LABEL_42;
    }
LABEL_26:
    if (*(unsigned char *)(a2 + 15)) {
      goto LABEL_42;
    }
    BOOL v27 = 1;
    goto LABEL_28;
  }
  int v25 = (result[12 * (int)v8 + 1206] >> 21) & 0x1F;
  if ((v25 - 25) <= 0xFFFFFFE7)
  {
    *int v9 = 0;
    uint64_t result = EvCrt_v("DD_Proc_Glon_Eph_String:  WARNING:  FrqId %d  Illegal SlotId %d !", *(char *)(a2 + 58), v25);
    if (*(unsigned char *)(a2 + 59) != 4) {
      goto LABEL_42;
    }
    unsigned int v24 = *v23;
  }
  int v26 = (unsigned char *)(a3 + 64);
  BOOL v27 = *(unsigned char *)(a3 + 64) == 0;
  if (v24 <= 1)
  {
    if (*(unsigned char *)(a3 + 64)) {
      goto LABEL_42;
    }
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v28 = *(__int16 *)(a3 + 68);
  uint64_t v29 = (v7[12 * (int)v8 + 1206] >> 26) & 0xFFFFF83F | ((v7[12 * (int)v8 + 1205] & 0x1F) << 6);
  *(_WORD *)(a3 + 68) = (v7[12 * (int)v8 + 1206] >> 26) & 0x3F | ((v7[12 * (int)v8 + 1205] & 0x1F) << 6);
  if (v27)
  {
    if (*(__int16 *)(a3 + 66) >= 1)
    {
      *int v26 = 1;
      uint64_t result = EvLog_nd("DD_Proc_Glon_Eph_String:  New DayNo ", 2, a3, v29, *(char *)(a2 + 58));
    }
LABEL_33:
    if (!*v26) {
      goto LABEL_42;
    }
    goto LABEL_34;
  }
  if (v28 != v29)
  {
    *int v26 = 0;
    uint64_t result = EvCrt_nd("DD_Proc_Glon_Eph_String:  WARNING:  DayNo miss-match", 3, a3, v29, v28, *(char *)(a2 + 58));
    goto LABEL_33;
  }
LABEL_34:
  if (!*(unsigned char *)(a3 + 5) || !*(_DWORD *)a3)
  {
    *(void *)uint64_t v40 = 0;
    v41[0] = 0.0;
    double v39 = 0.0;
    API_Get_UTC_Cor(1, v41);
    Glon_To_GPS_Time(*(__int16 *)(a3 + 66), *(__int16 *)(a3 + 68), *(double *)(a3 + 72), v41[0], &v40[1], v40, &v39);
    uint64_t result = DD_Submit_WeekNum((void *)*(char *)(a2 + 58), SLOWORD(v40[1]), SLOWORD(v40[0]), (int *)a3, v39);
    if (!*a4)
    {
      uint64_t v30 = *(void *)(p_api + 48);
      if (*(unsigned char *)(v30 + 5) && *(int *)v30 >= 3) {
        int v31 = (int)*(double *)(v30 + 24) + 604800 * *(__int16 *)(v30 + 16);
      }
      else {
        int v31 = 0;
      }
      *a4 = v31;
    }
  }
LABEL_42:
  unsigned int v32 = *(unsigned __int8 *)v9;
  if (*(unsigned char *)v9)
  {
    uint64_t v33 = &v7[v8];
    if (*((unsigned char *)v33 + 4725))
    {
      if (*((unsigned char *)v33 + 4726))
      {
        BOOL v34 = &v7[v8];
        if (*((unsigned char *)v34 + 4727))
        {
          uint64_t v35 = 0;
          pthread_attr_t v36 = (char *)v7 + v8 + 5508;
          *pthread_attr_t v36 = v32;
          uint64_t v37 = (uint64_t)v34 + 4725;
          do
          {
            unsigned int v38 = *(unsigned __int8 *)(v37 + v35);
            if (v38 < v32)
            {
              *pthread_attr_t v36 = v38;
              unsigned int v32 = v38;
            }
            ++v35;
          }
          while (v35 != 3);
        }
      }
    }
  }
  return result;
}

uint64_t DD_Save_New_GLON_Alm(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = a2;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)(a3 + 6005);
  if (*(unsigned __int8 *)(a3 + 6397) <= 1u && !*(unsigned char *)(a3 + 6398)) {
    return result;
  }
  uint64_t v5 = 0;
  memset(v78, 0, sizeof(v78));
  uint64_t v79 = 0;
  memset(v80, 0, 14);
  memset(v77, 0, 14);
  *(void *)&long long v6 = 0x7F7F7F7F7F7F7F7FLL;
  *((void *)&v6 + 1) = 0x7F7F7F7F7F7F7F7FLL;
  v81[0] = v6;
  v81[1] = v6;
  uint64_t v82 = 0x7F7F7F7F7F7F7F7FLL;
  unsigned int v7 = (unsigned __int8 *)(a3 + 6005);
  uint64_t v8 = 2139062143;
  _OWORD v81[2] = v6;
  do
  {
    int v9 = *(v7 - 1);
    if ((v9 - 6) <= 8 && v9 + 1 == *v7 && *(unsigned char *)(a3 + 5972 + v5))
    {
      if (v8 == 2139062143) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v8;
      }
      v80[v5] = 1;
    }
    v7 += 2;
    ++v5;
  }
  while (v5 != 14);
  uint64_t v10 = g_Crc32_RemTable + 920;
  char v11 = (unsigned __int16 *)&unk_26AE65000;
  if (v8 == 2139062143)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 6u) {
      uint64_t result = (uint64_t)EvLog("DD_Check_GLON_Alm: No any valid Freq Id Channels for Cross-Checking Almanacs");
    }
    goto LABEL_96;
  }
  int v68 = result;
  int v12 = 0;
  unsigned int v13 = 0;
  *((_DWORD *)v78 + (int)v8) = 1;
  uint64_t v70 = a3 + 6056;
  uint64_t result = (uint64_t)v80;
  uint64_t v14 = 1;
  uint64_t v75 = a3;
  uint64_t v71 = (unsigned __int8 *)(a3 + 6005);
  while ((int)v8 >= 13)
  {
    uint64_t v26 = v14 - 1;
    unsigned __int8 v20 = 1;
    uint64_t v22 = v8;
    uint64_t v15 = v8;
LABEL_42:
    if (*(unsigned char *)(a3 + v15 + 5986) != 5 || *(unsigned char *)(a3 + 2 * v15 + 6004) != 14)
    {
      uint64_t v27 = a3 + 2 * v15;
      if (!*(unsigned char *)(v27 + 6368) && !*(unsigned char *)(v27 + 6369))
      {
        if (v4[392] == v20) {
          goto LABEL_72;
        }
        unsigned int v28 = ((*(_DWORD *)(a3 + 24 * v15 + 6032) >> 19) & 0x1F) - 1;
        if (v28 <= 0x17 && !*(unsigned char *)(a2[2036] + v28)) {
LABEL_40:
        }
          v77[v26] = 1;
      }
    }
    if (v77[v26])
    {
      *((_DWORD *)v81 + v26) = v8;
      ++v12;
    }
    if (v22 != v8)
    {
      v13 += v20;
      *((_DWORD *)v78 + (int)v22) = ++v14;
      uint64_t v8 = v22;
      if (v13 <= v4[392]) {
        continue;
      }
    }
    int v3 = a2;
    uint64_t v10 = g_Crc32_RemTable + 920;
    if (v12 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      int v31 = 0;
      int v32 = 0;
      uint64_t v33 = (v14 + 1) - 1;
      do
      {
        if (v77[v29])
        {
          uint64_t v8 = *((int *)v81 + v29);
          int v34 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          if (v31)
          {
            uint64_t result = (v34 - v32 - 1461);
            int v35 = v34 - v32 + 1461;
            if (v34 - v32 >= -730) {
              int v35 = v34 - v32;
            }
            if (v34 - v32 <= 730) {
              int v36 = v35;
            }
            else {
              int v36 = v34 - v32 - 1461;
            }
            if (v36 <= 0) {
              uint64_t v8 = v30;
            }
            else {
              uint64_t v8 = v8;
            }
            if (v36 > 0) {
              int v32 = v34;
            }
          }
          else
          {
            int v31 = v29 + 1;
            int v32 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588);
          }
        }
        else
        {
          uint64_t v8 = v30;
        }
        ++v29;
        uint64_t v30 = v8;
      }
      while (v33 != v29);
      goto LABEL_73;
    }
    goto LABEL_96;
  }
  uint64_t v72 = v14;
  unsigned int v73 = v13;
  int v74 = v12;
  uint64_t v15 = (int)v8;
  int v16 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  uint64_t v17 = (unsigned __int8 *)(a3 + 2 * (int)v8 + 6004);
  uint64_t v18 = (_DWORD *)(a3 + 24 * (int)v8 + 6032);
  uint64_t v19 = v70 + 24 * (int)v8;
  unsigned __int8 v20 = 1;
  uint64_t v21 = (int)v8;
  uint64_t v22 = v8;
  do
  {
    int v23 = v21++;
    if (v80[v21] && *((int *)v78 + v21) <= 0)
    {
      if (*v16 == 5 && *v17 == 14 && *(unsigned char *)(a3 + v21 + 5986) == 5 && *(unsigned char *)(a3 + 2 * v21 + 6004) == 14)
      {
        if (((*(_DWORD *)(a3 + 24 * v21 + 6032) ^ *v18) & 0x78000030) == 0)
        {
LABEL_36:
          *((_DWORD *)v78 + v21) = *((_DWORD *)v78 + (int)v8);
          ++v20;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v25 = 0;
        while (((*(_DWORD *)(v19 + v25 * 4) ^ v18[v25]) & MaskToAlmCheck[v25]) == 0
             && ((*(_DWORD *)(v19 + v25 * 4 + 12) ^ v18[v25 + 3]) & MaskToAlmCheck[v25 + 3]) == 0)
        {
          if (++v25 == 3) {
            goto LABEL_36;
          }
        }
      }
      if (v22 == v8) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v22;
      }
      if (v11[395] >= 6u)
      {
        unsigned int v24 = v11;
        unsigned int v76 = v22;
        EvLog_v("DD_Check_GLON_Alm:  Different Almanacs, FrqId_1 %d  FrqId_2 %d  FramId %d  StrId %d ", v8 + 65, v23 + 66, *v16, *v17);
        uint64_t v22 = v76;
        uint64_t result = (uint64_t)v80;
        char v11 = v24;
        a3 = v75;
      }
    }
LABEL_20:
    v19 += 24;
  }
  while (v21 != 13);
  uint64_t v14 = v72;
  uint64_t v26 = v72 - 1;
  if (v20 < 2u)
  {
    uint64_t v4 = v71;
    unsigned int v13 = v73;
    int v12 = v74;
    goto LABEL_42;
  }
  uint64_t v4 = v71;
  unsigned int v13 = v73;
  int v12 = v74;
  if (v71[392] != v20) {
    goto LABEL_40;
  }
LABEL_72:
  int v3 = a2;
  uint64_t v10 = &g_Crc32_RemTable[230];
LABEL_73:
  uint64_t v37 = (int)v8;
  unsigned int v38 = (unsigned __int8 *)(a3 + (int)v8 + 5986);
  int v39 = *v38;
  if (v39 == 5 && *(unsigned char *)(a3 + 2 * (int)v8 + 6004) == 14) {
    goto LABEL_78;
  }
  uint64_t v40 = a3 + 24 * (int)v8;
  unint64_t v41 = ((unint64_t)*(unsigned int *)(v40 + 6032) >> 19) & 0x1F;
  if ((v41 - 25) <= 0xFFFFFFE7)
  {
    uint64_t result = (uint64_t)EvCrt_v("DD_Validate_GLON_Alm:  Rejected:  FrqCh %d   Slot Number %d - Out of range", (int)v8 - 7, v41);
    goto LABEL_77;
  }
  uint64_t v42 = (v41 - 1);
  uint64_t v43 = v3[2036];
  if (*(unsigned char *)(v43 + v42))
  {
    int v44 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588) - *((unsigned __int16 *)v3 + 18 * v42 + 7680);
    int v45 = v44 - 1461;
    if (v44 <= 730) {
      int v45 = *(unsigned __int16 *)(a3 + 28 * (int)v8 + 5588)
    }
          - *((unsigned __int16 *)v3 + 18 * v42 + 7680);
    int v46 = v44 >= -730 ? v45 : v44 + 1461;
    if (v46 <= 0)
    {
      if (v68 >= 1 && !v46 && (v39 != 5 || *(unsigned char *)(a3 + 2 * (int)v8 + 6004) != 14 && v42 <= 0x17))
      {
        long long v67 = (char *)v3 + 36 * v42;
        if (!*((_DWORD *)v67 + 3838))
        {
          *((_DWORD *)v67 + 3838) = v68;
          *((_DWORD *)v3 + 9 * v42 + 3839) = 4;
          uint64_t result = Core_Save_GLON_Alm(v41, 0, (long long *)(v67 + 15352));
LABEL_77:
          a3 = v75;
        }
      }
LABEL_78:
      if (v4[392] == v4[391]) {
        goto LABEL_95;
      }
      goto LABEL_96;
    }
  }
  if (v39 != 5 || *(unsigned char *)(a3 + 2 * (int)v8 + 6004) != 14)
  {
    uint64_t v47 = (uint64_t)v3 + 36 * v42 + 15352;
    long long v48 = *(_OWORD *)(v40 + 6032);
    *(void *)(v47 + 28) = *(void *)(v40 + 6048);
    *(_OWORD *)(v47 + 12) = v48;
    if (v11[395] >= 6u)
    {
      EvLog_v("DD_Save_New_GLON_Alm:  New Alm  Slot %d  FrqId %d  FramId %d  StrId %d  Suspect_Bits %d %d  Word[0] 0x%x  NA_Clk1 %d  NA_DBnmAlm  %d ", v41, v37 + 65, *v38, *(unsigned __int8 *)(a3 + 2 * v37 + 6004), *(unsigned __int8 *)(a3 + 2 * v37 + 6368), *(unsigned __int8 *)(a3 + 2 * v37 + 6369), *(_DWORD *)(v40 + 6032), *(unsigned __int16 *)(a3 + 28 * (int)v37 + 5588), *((unsigned __int16 *)v3 + 18 * v42 + 7680));
      a3 = v75;
      uint64_t v43 = v3[2036];
    }
    uint64_t v49 = (char *)v3 + 36 * v42;
    *((_WORD *)v49 + 7680) = *(_WORD *)(a3 + 28 * (int)v37 + 5588);
    *(_DWORD *)uint64_t v47 = v68;
    *((_DWORD *)v49 + 3839) = 4;
    *(unsigned char *)(v3[2032] + v42) = 1;
    *(unsigned char *)(v43 + v42) = 1;
    uint64_t result = DD_GLON_Alm_Set_Health_Frq((uint64_t)(v49 + 15352), v3);
    a3 = v75;
    if (v68 >= 1)
    {
      uint64_t v50 = 0;
      LODWORD(v51) = 0;
      uint64_t v52 = *((void *)v10 + 70) + 48 * v41;
      uint64_t v53 = (void *)(v52 + 19192);
      int v54 = *((_DWORD *)v3 + 9 * v42 + 3846);
      long long v55 = *(_OWORD *)v47;
      *(_OWORD *)(v52 + 19216) = *(_OWORD *)((char *)v3 + 36 * v42 + 15368);
      *(_OWORD *)(v52 + 19200) = v55;
      *(_DWORD *)(v52 + 19232) = v54;
      uint64_t v56 = v52 + 19200;
      __int16 v57 = -9871;
      do
      {
        int v58 = *(unsigned __int8 *)(v56 + v50) ^ HIBYTE(v57);
        __int16 v57 = -12691 * (v57 + (*(unsigned __int8 *)(v56 + v50) ^ HIBYTE(v57))) + 22719;
        uint64_t v51 = (v51 + v58);
        ++v50;
      }
      while (v50 != 40);
      *uint64_t v53 = v51;
    }
  }
LABEL_95:
  *(_DWORD *)(a3 + 6028) = 0;
  *(void *)(a3 + 6020) = 0;
  *(_OWORD *)(a3 + 6004) = 0u;
  v4[393] = 0;
  *(_WORD *)(v4 + 391) = 0;
LABEL_96:
  uint64_t v59 = 0;
  LODWORD(v60) = 0;
  uint64_t v61 = v3[1401];
  uint64_t v62 = *((void *)v10 + 70);
  uint64_t v63 = *(void *)(v61 + 16);
  *(_OWORD *)(v62 + 19172) = *(_OWORD *)v61;
  *(void *)(v62 + 19188) = v63;
  uint64_t v64 = v62 + 19168;
  __int16 v65 = -9871;
  do
  {
    int v66 = *(unsigned __int8 *)(v64 + v59) ^ HIBYTE(v65);
    __int16 v65 = -12691 * (v65 + (*(unsigned __int8 *)(v64 + v59) ^ HIBYTE(v65))) + 22719;
    uint64_t v60 = (v60 + v66);
    ++v59;
  }
  while (v59 != 32);
  *(void *)(v62 + 19160) = v60;
  return result;
}

void DD_Save_New_GLON_Eph(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (a1 >= 1)
  {
    int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = (a1 + 10800) / 0x15180u;
    unsigned int v12 = ((22967 * (__int16)(v11 - 5839)) >> 25) + ((22967 * (__int16)(v11 - 5839)) >> 31);
    int v13 = v11 - 1461 * v12 - 5838;
    unsigned int v14 = v12 + 1;
    uint64_t v15 = 20400;
    do
    {
      if (*(unsigned char *)(*(void *)(a4 + 16272) + v9))
      {
        uint64_t v16 = *(void *)(a4 + 16304);
        LODWORD(v17) = *(unsigned __int8 *)(v16 + v9);
        if (!*(unsigned char *)(v16 + v9))
        {
          uint64_t v18 = 0;
          if (!v8)
          {
            int v7 = v13;
            unsigned int v10 = (a1 + 10800) % 0x15180u;
          }
          uint64_t v19 = a4 + (v9 << 6);
          unsigned __int8 v20 = (long long *)(v19 + 11224);
          unsigned int v21 = (*(_DWORD *)(v19 + 11280) >> 26) & 0xFFFFF83F | ((*(_DWORD *)(v19 + 11276) & 0x1F) << 6);
          __int16 v22 = *(_WORD *)(v19 + 11250);
          *(unsigned char *)(v16 + v9) = 1;
          if ((int)(v21 - v7) > 730) {
            v7 += 1461;
          }
          int v23 = v10 - 900 * (v22 & 0x7F) + 86400 * (v7 - v21);
          *(_DWORD *)(v19 + 11224) = a1 - (v23 & ~(v23 >> 31));
          *(_DWORD *)(v19 + 11228) = 4;
          uint64_t v24 = p_NV;
          long long v25 = *v20;
          long long v26 = v20[1];
          long long v27 = v20[2];
          long long v28 = v20[3];
          uint64_t v29 = (_OWORD *)(p_NV + 72 * v9);
          v29[1278] = v28;
          uint64_t v30 = (void *)v29 + 2549;
          v29[1277] = v27;
          v29[1276] = v26;
          v29[1275] = v25;
          uint64_t v31 = v24 + v15;
          __int16 v32 = -9871;
          do
          {
            int v33 = *(unsigned __int8 *)(v31 + v18) ^ HIBYTE(v32);
            __int16 v32 = -12691 * (v32 + (*(unsigned __int8 *)(v31 + v18) ^ HIBYTE(v32))) + 22719;
            uint64_t v17 = (v17 + v33);
            ++v18;
          }
          while (v18 != 64);
          if (!v8) {
            unsigned int v8 = v14;
          }
          *uint64_t v30 = v17;
        }
      }
      ++v9;
      v15 += 72;
    }
    while (v9 != 24);
  }
  uint64_t v34 = 0;
  int v108 = (char)((2 * (a3 / 1800)) | 1);
  uint64_t v35 = a5 + 5453;
  float64x2_t v110 = (float64x2_t)vdupq_n_s64(0x3FDF400000000000uLL);
  float64x2_t v109 = (float64x2_t)vdupq_n_s64(0x3F4F400000000000uLL);
  do
  {
    int v36 = (unsigned char *)(a5 + v34 + 5508);
    if (!*v36) {
      goto LABEL_59;
    }
    long long v114 = 0u;
    memset(v115, 0, 30);
    long long v113 = 0u;
    memset(&v117[1], 0, 46);
    v117[0] = 0u;
    uint64_t v37 = (_OWORD *)(a5 + 48 * v34 + 4780);
    long long v38 = *(_OWORD *)(a5 + 48 * v34 + 4796);
    *(_OWORD *)((char *)v117 + 12) = *v37;
    *(_OWORD *)((char *)&v117[1] + 12) = v38;
    *(_OWORD *)((char *)&v117[2] + 12) = *(_OWORD *)(a5 + 48 * v34 + 4812);
    *(int8x8_t *)&double v39 = GLON_EphBin2Int((uint64_t)v117, (uint64_t)&v113, *(int32x4_t *)((char *)&v117[2] + 12));
    uint64_t v40 = 0;
    uint64_t v41 = SBYTE12(v113);
    unsigned int v42 = BYTE12(v113);
    LOBYTE(v43) = *(unsigned char *)(a5 + 4 * v34 + 5452);
    do
    {
      if (*(unsigned __int8 *)(v35 + v40) <= v43) {
        int v43 = v43;
      }
      else {
        int v43 = *(unsigned __int8 *)(v35 + v40);
      }
      ++v40;
    }
    while (v40 != 3);
    uint64_t v44 = (v41 - 1);
    if (*v36 >= 2u) {
      goto LABEL_23;
    }
    if (*(unsigned char *)(*(void *)(a4 + 16280) + v44)
      || *(unsigned __int8 *)(*(void *)(a4 + 16272) + v44) | v43)
    {
      int v45 = (_DWORD *)(a4 + 4 * v34 + 16432);
      if ((*v45 == 2139062143 || *(_DWORD *)(a4 + 4 * v44 + 16336) == 2139062143) && !*(unsigned char *)(a5 + 4 * v34 + 5455))
      {
        *(_DWORD *)(a4 + 4 * v44 + 16336) = v34 - 7;
        *int v45 = v41;
        *(_DWORD *)(a4 + 4 * v34 + 16488) = 2;
      }
      goto LABEL_58;
    }
    if (*(_DWORD *)(a4 + 4 * v34 + 16432) == 2139062143 || *(_DWORD *)(a4 + 4 * v44 + 16336) == 2139062143)
    {
LABEL_23:
      *(_DWORD *)(a4 + 4 * v44 + 16336) = v34 - 7;
      *(_DWORD *)(a4 + 4 * v34 + 16432) = v41;
    }
    *(_DWORD *)(a4 + 4 * v34 + 16488) = 2;
    if ((v42 - 25) <= 0xE7u)
    {
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Invalid Out-of-range GLON Slot Num %d", v39);
      }
      goto LABEL_58;
    }
    if (a2 >= 4 && (*(_DWORD *)(a4 + 8444) - 1) <= 5 && v108 != BYTE13(v113))
    {
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        EvCrt_v("DD_Validate_GLON_Eph:  FAIL:  Tb check, R %d  est %d  dec %d", v39);
      }
      goto LABEL_58;
    }
    v46.i64[0] = SHIDWORD(v114);
    v46.i64[1] = v115[0];
    float64x2_t v121 = vmulq_f64(vcvtq_f64_s64(v46), v110);
    double v122 = (double)v115[1] * 0.48828125;
    double v47 = 0.0;
    uint64_t v48 = 2;
    do
    {
      double v47 = v47 + v121.f64[v48] * v121.f64[v48];
      unint64_t v49 = v48-- + 1;
    }
    while (v49 > 1);
    double v50 = sqrt(v47);
    if (v50 < 25200000.0 || v50 > 25800000.0)
    {
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  SV Pos check, R %d  Mag_Pos %g");
      }
    }
    else
    {
      v51.i64[0] = v115[2];
      v51.i64[1] = v115[3];
      float64x2_t v119 = vmulq_f64(vcvtq_f64_s64(v51), v109);
      double v120 = (double)v115[4] * 0.000953674316;
      double v52 = 0.0;
      uint64_t v53 = 2;
      do
      {
        double v52 = v52 + v119.f64[v53] * v119.f64[v53];
        unint64_t v54 = v53-- + 1;
      }
      while (v54 > 1);
      double v55 = sqrt(v52);
      if (v55 >= 2720.0 && v55 <= 4000.0)
      {
        v118[0] = (double)SLOBYTE(v115[5]) * 0.000000931322575;
        v118[1] = (double)SBYTE1(v115[5]) * 0.000000931322575;
        v118[2] = (double)SBYTE2(v115[5]) * 0.000000931322575;
        double v56 = 0.0;
        uint64_t v57 = 2;
        do
        {
          double v56 = v56 + v118[v57] * v118[v57];
          unint64_t v58 = v57-- + 1;
        }
        while (v58 > 1);
        double v59 = sqrt(v56);
        if (v59 > 0.000009)
        {
          if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  SV Acc check, R %d  Mag_Acc %g", v41, v59);
          }
          int v60 = 0;
          *(unsigned char *)(*(void *)(a4 + 16328) + v44) = 1;
          goto LABEL_67;
        }
        if ((unsigned __int16)v114 - 1462 <= 0xFFFFFA4A)
        {
          if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
            EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  Eph Nt check, R %d  Nt %d", v41, (unsigned __int16)v114);
          }
          int v60 = 0;
          goto LABEL_67;
        }
        if (!*(unsigned char *)(*(void *)(a4 + 16272) + v44)) {
          goto LABEL_80;
        }
        memset(v116, 0, 62);
        GLON_EphBin2Int(a4 + (v44 << 6) + 11224, (uint64_t)v116, (int32x4_t)0);
        int v73 = BYTE13(v113);
        int v74 = BYTE13(v116[0]);
        if (BYTE13(v113) != BYTE13(v116[0]) && (unsigned __int16)g_Enable_Event_Log >= 6u)
        {
          int v104 = BYTE13(v116[0]);
          int v106 = BYTE13(v113);
          EvLog_v("DD_Validate_GLON_Eph:  New Eph SV %d %d %d", SBYTE12(v113), BYTE13(v113), BYTE13(v116[0]));
          int v74 = v104;
          int v73 = v106;
        }
        if (v73 == v74)
        {
          int v75 = *(unsigned __int16 *)(a4 + (v44 << 6) + 11284);
          if (v75 == 4095)
          {
            int v60 = 1;
LABEL_67:
            if (a1 >= 1)
            {
              if (v60)
              {
                uint64_t v61 = a4 + (v44 << 6);
                LODWORD(v62) = *(_DWORD *)(v61 + 11224);
                if (!v62)
                {
                  uint64_t v63 = 0;
                  uint64_t v64 = (long long *)(v61 + 11224);
                  *(_DWORD *)(v61 + 11224) = a1;
                  *(_DWORD *)(v61 + 11228) = 4;
                  *(unsigned char *)(*(void *)(a4 + 16304) + v44) = 1;
                  uint64_t v65 = p_NV + 72 * v41;
                  int v66 = (void *)(v65 + 20320);
                  long long v67 = *v64;
                  long long v68 = v64[1];
                  long long v69 = v64[2];
                  *(_OWORD *)(v65 + 20376) = v64[3];
                  *(_OWORD *)(v65 + 20360) = v69;
                  *(_OWORD *)(v65 + 20344) = v68;
                  *(_OWORD *)(v65 + 20328) = v67;
                  uint64_t v70 = v65 + 20328;
                  __int16 v71 = -9871;
                  do
                  {
                    int v72 = *(unsigned __int8 *)(v70 + v63) ^ HIBYTE(v71);
                    __int16 v71 = -12691 * (v71 + (*(unsigned __int8 *)(v70 + v63) ^ HIBYTE(v71))) + 22719;
                    uint64_t v62 = (v62 + v72);
                    ++v63;
                  }
                  while (v63 != 64);
                  *int v66 = v62;
                }
              }
            }
            goto LABEL_58;
          }
          if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
            EvLog_v("DD_Validate_GLON_Eph:  (Adopted) Eph Binary difference with same tb SV %d tb %d checked 0x%x", SBYTE12(v113), BYTE13(v113), v75);
          }
          int v60 = 1;
        }
        else
        {
LABEL_80:
          int v60 = 0;
        }
        uint64_t v76 = a4 + (v44 << 6);
        int v77 = (_OWORD *)(v76 + 11224);
        long long v78 = *v37;
        long long v79 = *(_OWORD *)(a5 + 48 * v34 + 4796);
        *(_OWORD *)(v76 + 11268) = *(_OWORD *)(a5 + 48 * v34 + 4812);
        *(_OWORD *)(v76 + 11252) = v79;
        *(_OWORD *)(v76 + 11236) = v78;
        *(_DWORD *)(v76 + 11224) = a1;
        *(_DWORD *)(v76 + 11228) = 4;
        if (*v36 <= 1u) {
          __int16 v80 = 0;
        }
        else {
          __int16 v80 = 4095;
        }
        *(_WORD *)(v76 + 11284) = v80;
        *(_DWORD *)(v76 + 11232) = v34 - 7;
        *(unsigned char *)(*(void *)(a4 + 16272) + v44) = 1;
        *(unsigned char *)(*(void *)(a4 + 16320) + v44) = 0;
        uint64_t v81 = *(void *)(a4 + 11208);
        int v82 = BYTE5(v114);
        if (*(unsigned char *)(v81 + v44)
          && (uint64_t v83 = "DD_GLON_Alm_Set_Health_Frq:  Health H->U Eph:  Slot %d  FrqId %d ", BYTE5(v114))
          || !*(unsigned char *)(v81 + v44)
          && (uint64_t v83 = "DD_GLON_Alm_Set_Health_Frq:  Health U->H Eph:  Slot %d  FrqId %d ", !BYTE5(v114)))
        {
          int v107 = v60;
          uint64_t v105 = v77;
          EvLog_v(v83, v41);
          int v77 = v105;
          int v60 = v107;
          int v82 = BYTE5(v114);
          uint64_t v81 = *(void *)(a4 + 11208);
        }
        *(unsigned char *)(v81 + v44) = v82 ^ 1;
        if (v82 != 1) {
          int v84 = 1;
        }
        else {
          int v84 = 2;
        }
        *(_DWORD *)(*(void *)(a4 + 11216) + 20 * v44) = v84;
        if (a1 < 1) {
          goto LABEL_58;
        }
        uint64_t v85 = 0;
        LODWORD(v86) = 0;
        *(unsigned char *)(*(void *)(a4 + 16304) + v44) = 1;
        uint64_t v87 = p_NV + 72 * v42;
        unsigned __int16 v88 = (void *)(v87 + 20320);
        long long v89 = *v77;
        long long v90 = v77[1];
        long long v91 = v77[2];
        *(_OWORD *)(v87 + 20376) = v77[3];
        *(_OWORD *)(v87 + 20360) = v91;
        *(_OWORD *)(v87 + 20344) = v90;
        *(_OWORD *)(v87 + 20328) = v89;
        uint64_t v92 = v87 + 20328;
        __int16 v93 = -9871;
        do
        {
          int v94 = *(unsigned __int8 *)(v92 + v85) ^ HIBYTE(v93);
          __int16 v93 = -12691 * (v93 + (*(unsigned __int8 *)(v92 + v85) ^ HIBYTE(v93))) + 22719;
          uint64_t v86 = (v86 + v94);
          ++v85;
        }
        while (v85 != 64);
        *unsigned __int16 v88 = v86;
        goto LABEL_67;
      }
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        EvCrt_v("DD_Validate_GLON_Eph:  Rejected:  SV Vel check, R %d  Vel_Mag %g");
      }
    }
    *(unsigned char *)(*(void *)(a4 + 16328) + v44) = 1;
LABEL_58:
    *int v36 = 0;
LABEL_59:
    ++v34;
    v35 += 4;
  }
  while (v34 != 14);
  uint64_t v95 = 0;
  LODWORD(v96) = 0;
  uint64_t v97 = *(void *)(a4 + 11208);
  uint64_t v98 = p_NV;
  uint64_t v99 = p_NV + 19160;
  uint64_t v100 = *(void *)(v97 + 16);
  *(_OWORD *)(p_NV + 19172) = *(_OWORD *)v97;
  *(void *)(v99 + 28) = v100;
  uint64_t v101 = v98 + 19168;
  __int16 v102 = -9871;
  do
  {
    int v103 = *(unsigned __int8 *)(v101 + v95) ^ HIBYTE(v102);
    __int16 v102 = -12691 * (v102 + (*(unsigned __int8 *)(v101 + v95) ^ HIBYTE(v102))) + 22719;
    uint64_t v96 = (v96 + v103);
    ++v95;
  }
  while (v95 != 32);
  *(void *)(v98 + 19160) = v96;
}

int *DD_Check_Age_GLON_Data(int *result, void *a2, uint64_t a3)
{
  if (*((unsigned char *)result + 64))
  {
    int v3 = result;
    if (result[15] >= 2)
    {
      uint64_t v5 = 0;
      long long v6 = (unsigned __int16 *)(a2 + 1920);
      int v7 = a2 + 1410;
      uint64_t v8 = 19248;
      do
      {
        uint64_t v9 = a2[2034];
        if (*(unsigned char *)(v9 + v5))
        {
          unsigned int v10 = (*v7 >> 26) & 0xFFFFF83F | ((*(v7 - 1) & 0x1F) << 6);
          int v11 = (int)*((double *)v3 + 9) - 900 * (*((_WORD *)v7 - 15) & 0x7F);
          if (v10)
          {
            LODWORD(v12) = v11 + 86400 * (*((__int16 *)v3 + 34) - v10);
            if ((int)v12 > 63115200) {
              LODWORD(v12) = v12 - 126230400;
            }
            if ((int)v12 >= -63115200) {
              uint64_t v12 = v12;
            }
            else {
              uint64_t v12 = (v12 + 126230400);
            }
          }
          else
          {
            LODWORD(v12) = v11 + 86400;
            if (v11 >= -43200) {
              LODWORD(v12) = (int)*((double *)v3 + 9) - 900 * (*((_WORD *)v7 - 15) & 0x7F);
            }
            if ((int)v12 <= 43199) {
              uint64_t v12 = v12;
            }
            else {
              uint64_t v12 = (v12 - 86400);
            }
          }
          if ((int)v12 >= 0) {
            unsigned int v13 = v12;
          }
          else {
            unsigned int v13 = -(int)v12;
          }
          if (v13 >= 0x26AD)
          {
            unsigned int v14 = v7 - 14;
            *(unsigned char *)(v9 + v5) = 0;
            *(unsigned char *)(a2[2040] + v5) = 0;
            *(_OWORD *)((char *)v14 + 46) = 0u;
            v14[1] = 0u;
            _OWORD v14[2] = 0u;
            *unsigned int v14 = 0u;
            *(unsigned char *)(a2[2033] + v5) = 1;
            *(unsigned char *)(a2[2041] + v5) = 0;
            if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
              uint64_t result = (int *)EvLog_nd("DD_Check_Age_GLON_Data:  Delete ", 2, a3, v5 + 1, v12);
            }
          }
        }
        uint64_t v15 = a2[2036];
        if (*(unsigned char *)(v15 + v5))
        {
          int v16 = *((__int16 *)v3 + 34) - *v6;
          int v17 = v16 + 1461;
          if (v16 >= -730) {
            int v17 = *((__int16 *)v3 + 34) - *v6;
          }
          if (v16 <= 729) {
            int v18 = v17;
          }
          else {
            int v18 = v16 - 1461;
          }
          if ((v18 - 183) <= 0xFFFFFF3A)
          {
            *(unsigned char *)(a2[2032] + v5) = 0;
            *(unsigned char *)(v15 + v5) = 0;
            *((_DWORD *)v6 + 6) = 0;
            *(_OWORD *)(v6 + 4) = 0u;
            *(_OWORD *)(v6 - 4) = 0u;
            *(unsigned char *)(a2[2040] + v5) = 0;
            *(unsigned char *)(a2[2041] + v5) = 0;
            uint64_t v19 = p_NV + v8;
            *(void *)(v19 - 8) = 0xFFFFFFFFLL;
            *(_OWORD *)uint64_t v19 = 0u;
            *(_OWORD *)(v19 + 16) = 0u;
            *(_DWORD *)(v19 + 32) = 0;
            if (v18 <= 182) {
              uint64_t result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Future Almanac deleted,  SV %d age %d");
            }
            else {
              uint64_t result = (int *)EvLog_v("DD_Check_Age_GLON_Data:  Old Almanac deleted,  SV %d age %d");
            }
          }
        }
        ++v5;
        v8 += 48;
        v6 += 18;
        v7 += 16;
      }
      while (v5 != 24);
    }
  }
  return result;
}

uint64_t DD_Check_GLON_Strings(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if ((int)result >= 3 && (*(_DWORD *)(a4 + 8444) - 1) <= 5)
  {
    if ((a2 % 30 + 1) >= 3) {
      char v4 = (int)((a2 % 30 + (((a2 % 30) & 0x80u) >> 7)) << 24) >> 25;
    }
    else {
      char v4 = 15;
    }
    int v5 = *(_DWORD *)(a3 + 6000);
    int v6 = a2 - v5;
    if (a2 < v5) {
      int v6 = a2 - v5 + 86400;
    }
    BOOL v7 = v6 > 24;
    BOOL v8 = v5 >= 1 && v7;
    if (a2 < 1) {
      BOOL v8 = 0;
    }
    if (v4 == 2 && result > 3 || v8)
    {
      *(_OWORD *)(a3 + 6000) = 0u;
      *(_OWORD *)(a3 + 6016) = 0u;
    }
    if (a2 >= 1 && (int v11 = *(_DWORD *)(a3 + 4720), v11 >= 1) && (v11 + 10) / 0x708u != (a2 + 10) / 0x708u
      || (a2 % 1800 >= 1771 ? (BOOL v12 = v4 == 10) : (BOOL v12 = 0), v12))
    {
      *(void *)(a3 + 5514) = 0;
      *(void *)(a3 + 5508) = 0;
      *(_OWORD *)(a3 + 4720) = 0u;
      *(_OWORD *)(a3 + 4736) = 0u;
      *(_OWORD *)(a3 + 4752) = 0u;
      *(_OWORD *)(a3 + 4764) = 0u;
    }
  }
  return result;
}

char *DD_LS_Delete_EphAlm_Str(char *result, uint64_t a2, uint64_t a3)
{
  if ((int)result >= 1 && *(unsigned char *)(a2 + 5) && *(int *)a2 >= 1)
  {
    int v4 = (int)result;
    double v5 = *(double *)(a2 + 24);
    double v6 = -0.5;
    if (v5 > 0.0) {
      double v6 = 0.5;
    }
    double v7 = v5 + v6;
    if (v7 <= 2147483650.0)
    {
      if (v7 >= -2147483650.0) {
        int v8 = (int)v7;
      }
      else {
        int v8 = 0x80000000;
      }
    }
    else
    {
      int v8 = 0x7FFFFFFF;
    }
    if ((604800 * *(__int16 *)(a2 + 16) + ~result + v8) <= 0xE0E)
    {
      uint64_t v9 = 0;
      do
      {
        unsigned int v10 = (_DWORD *)(a3 + 4 * v9);
        int v11 = v10[1381];
        if (v11 >= 1 && v11 <= v4)
        {
          v10[1181] = 0;
          *(unsigned char *)(a3 + v9 + 5508) = 0;
          v10[1381] = 0;
          uint64_t result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Eph , Frq %2d ", (int)v9 + 1);
        }
        int v13 = v10[1600];
        if (v13 >= 1 && v13 <= v4)
        {
          uint64_t v15 = (void *)(a3 + 24 * v9);
          v15[755] = 0;
          v15[754] = 0;
          v15[756] = 0;
          *(_WORD *)(a3 + 2 * v9 + 6004) = 0;
          *(_WORD *)(a3 + 6397) = 0;
          v10[1600] = 0;
          uint64_t result = EvLog_v("DD_LS_Delete_EphAlm_Str:  Del Alm , Frq %2d ", ++v9);
        }
        else
        {
          ++v9;
        }
      }
      while (v9 != 14);
    }
  }
  return result;
}

uint64_t DD_Delete_Bad_GLON_Data(uint64_t result, void *a2)
{
  uint64_t v2 = 0;
  int v3 = a2 + 1403;
  uint64_t v4 = 20400;
  do
  {
    uint64_t v5 = a2[2033];
    if (*(unsigned char *)(v5 + v2))
    {
      unsigned int v6 = *((_DWORD *)a2 + v2 + 4084) + 7;
      if (v6 <= 0xD)
      {
        uint64_t v7 = result + 4 * v6;
        *(_DWORD *)(v7 + 4724) = 0;
        int v8 = (_OWORD *)(result + 48 * v6 + 4780);
        *int v8 = 0uLL;
        v8[1] = 0uLL;
        v8[2] = 0uLL;
        *(_DWORD *)(v7 + 5452) = 0;
        *(unsigned char *)(result + v6 + 5508) = 0;
        uint64_t v5 = a2[2033];
      }
      *(unsigned char *)(v5 + v2) = 0;
      *(unsigned char *)(a2[2031] + v2) = 0;
      *(unsigned char *)(a2[2034] + v2) = 0;
      *(_OWORD *)((char *)v3 + 46) = 0uLL;
      v3[1] = 0uLL;
      v3[2] = 0uLL;
      *int v3 = 0uLL;
      *(unsigned char *)(a2[2041] + v2) = 0;
      *(unsigned char *)(a2[2038] + v2) = 1;
      uint64_t v9 = (_OWORD *)(p_NV + v4);
      *((void *)v9 - 1) = 0xFFFFFFFFLL;
      *uint64_t v9 = 0uLL;
      v9[1] = 0uLL;
      v9[2] = 0uLL;
      *(_OWORD *)((char *)v9 + 46) = 0uLL;
    }
    ++v2;
    v4 += 72;
    v3 += 4;
  }
  while (v2 != 24);
  return result;
}

uint64_t DD_Delete_Inhib_GLON_Data(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 + 1919;
  uint64_t v5 = a3 + 1595;
  unsigned int v6 = a3 + 1403;
  uint64_t v7 = 20400;
  uint64_t v8 = 19248;
  do
  {
    if (*(unsigned char *)(result + v3))
    {
      unsigned int v9 = *((_DWORD *)a3 + v3 + 4084) + 7;
      if (v9 <= 0xD)
      {
        uint64_t v10 = a2 + 4 * v9;
        *(_DWORD *)(v10 + 4724) = 0;
        int v11 = (_OWORD *)(a2 + 48 * v9 + 4780);
        *int v11 = 0uLL;
        v11[1] = 0uLL;
        _OWORD v11[2] = 0uLL;
        *(_DWORD *)(v10 + 5452) = 0;
        *(unsigned char *)(a2 + v9 + 5508) = 0;
      }
      *(unsigned char *)(a3[2033] + v3) = 0;
      *(unsigned char *)(a3[2031] + v3) = 0;
      *(unsigned char *)(a3[2034] + v3) = 0;
      *(_OWORD *)((char *)v6 + 46) = 0uLL;
      v6[1] = 0uLL;
      v6[2] = 0uLL;
      *unsigned int v6 = 0uLL;
      *(unsigned char *)(a3[2035] + v3) = 0;
      *(_OWORD *)((char *)v5 + 92) = 0uLL;
      v5[4] = 0uLL;
      void v5[5] = 0uLL;
      void v5[2] = 0uLL;
      v5[3] = 0uLL;
      *uint64_t v5 = 0uLL;
      v5[1] = 0uLL;
      *(unsigned char *)(a3[2041] + v3) = 0;
      *(unsigned char *)(a3[2038] + v3) = 1;
      uint64_t v12 = p_NV;
      int v13 = (_OWORD *)(p_NV + v7);
      *int v13 = 0uLL;
      v13[1] = 0uLL;
      _OWORD v13[2] = 0uLL;
      *(_OWORD *)((char *)v13 + 46) = 0uLL;
      *(unsigned char *)(a3[2032] + v3) = 0;
      *((void *)v13 - 1) = 0xFFFFFFFFLL;
      *(unsigned char *)(a3[2036] + v3) = 0;
      *((_DWORD *)v4 + 8) = 0;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      uint64_t v14 = v12 + v8;
      *(void *)(v14 - 8) = 0xFFFFFFFFLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(_DWORD *)(v14 + 32) = 0;
    }
    ++v3;
    v7 += 72;
    v8 += 48;
    uint64_t v4 = (void *)((char *)v4 + 36);
    uint64_t v5 = (_OWORD *)((char *)v5 + 108);
    v6 += 4;
  }
  while (v3 != 24);
  return result;
}

void *DD_Submit_WeekNum(void *result, int a2, uint64_t a3, int *a4, double a5)
{
  if (*((unsigned char *)a4 + 5)) {
    return result;
  }
  int v7 = (int)result;
  if (*a4)
  {
    uint64_t v8 = (int)a5;
    double v9 = *((double *)a4 + 3);
    int v10 = v8 - (int)v9;
    int v11 = v10 + 604800;
    if (v10 <= -302401) {
      __int16 v12 = a3 - 1;
    }
    else {
      __int16 v12 = a3;
    }
    if (v10 > -302401) {
      int v11 = v8 - (int)v9;
    }
    if (v10 >= 302400) {
      __int16 v13 = a3 + 1;
    }
    else {
      __int16 v13 = v12;
    }
    if (v10 >= 302400) {
      int v14 = v10 - 604800;
    }
    else {
      int v14 = v11;
    }
    if ((v14 + 129599) >= 0x2A2FF)
    {
      uint64_t v15 = ((v14 + 43200) / 86400);
      double v16 = v9 + (double)(86400 * (int)v15);
      *((double *)a4 + 3) = v16;
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        uint64_t result = EvLog_nd("DD_Submit_WeekNum(R): Day number set ", 3, a3, v15, (int)v16, v8);
      }
    }
    a3 = (a2 << 10);
  }
  else
  {
    *((double *)a4 + 3) = a5;
    int v17 = a4[15];
    if (!v17 || (v17 >= 3 ? (int v18 = 3) : (int v18 = a4[15]), *a4 = v18, v17 <= 2))
    {
      if (a5 < 86370.0 || a5 >= 518370.0) {
        goto LABEL_27;
      }
    }
    __int16 v13 = (_WORD)a2 << 10;
  }
  *((_WORD *)a4 + 8) = v13 + a3;
  *((unsigned char *)a4 + 5) = 1;
LABEL_27:
  if ((unsigned __int16)g_Enable_Event_Log >= 2u)
  {
    if (*((_WORD *)a4 + 8)) {
      return EvLog_nd("DD_Submit_WeekNum(R): GPS Week No set from Glon SV", 4, a3, v7, *((__int16 *)a4 + 8), (int)*((double *)a4 + 3), *a4);
    }
  }
  return result;
}

uint64_t Inc_CA_Chips(uint64_t result, int *a2, int *a3)
{
  int v3 = *a2 + result;
  for (*a2 = v3; *a2 > 1534499; int v3 = *a2)
  {
    *a2 = v3 - 1534500;
    if (*a3 <= 403198) {
      int v4 = 1;
    }
    else {
      int v4 = -403199;
    }
    *a3 += v4;
  }
  if (v3 < 0)
  {
    do
    {
      *a2 = v3 + 1534500;
      if (*a3 < 1) {
        int v5 = 403199;
      }
      else {
        int v5 = -1;
      }
      *a3 += v5;
      int v3 = *a2;
    }
    while (*a2 < 0);
  }
  return result;
}

uint64_t Nav_Kalman_Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5, a6);
  uint64_t v393 = v16;
  uint64_t v388 = v17;
  uint64_t v376 = v18;
  uint64_t v372 = v19;
  unsigned __int8 v20 = v14;
  uint64_t v21 = v13;
  uint64_t v538 = *MEMORY[0x263EF8340];
  int v22 = *(unsigned __int8 *)(v13 + 128);
  v386 = (unsigned char *)(v13 + 128);
  uint64_t v383 = (uint64_t)v14 + 25166;
  uint64_t v390 = (uint64_t)(v14 + 6194);
  v389 = v14 + 5922;
  v375 = v14 + 5780;
  *(_DWORD *)(v13 + 169) = 0;
  uint64_t v361 = v13 + 169;
  *(_WORD *)(v13 + 173) = 0;
  uint64_t v378 = v23;
  if (v22)
  {
    *a11 = 0;
  }
  else if (*a11)
  {
    *a11 = 0;
    *(unsigned char *)(v13 + 128) = 1;
    *(_DWORD *)(v13 + 132) = 77;
  }
  __int16 v374 = v14 + 5848;
  unint64_t v385 = v15;
  if (*(unsigned __int8 *)(a10 + 65) >= 5u) {
    *(unsigned char *)(a10 + 65) = 0;
  }
  long long v536 = 0u;
  memset(v537, 0, sizeof(v537));
  memset(v535, 0, 491);
  *(_DWORD *)((char *)v503 + 3) = 0;
  v503[0] = 0;
  memset(&v534[2188], 0, 25);
  memset(&v534[2060], 0, 119);
  memset(&v534[1868], 0, 179);
  memset(&v534[1740], 0, 113);
  bzero(v534, 0x6CBuLL);
  bzero(v533, 0x15C8uLL);
  bzero(v532, 0x15C8uLL);
  bzero(v531, 0x2258uLL);
  memset(v530, 0, sizeof(v530));
  LOWORD(v529) = 0;
  BYTE2(v529) = 0;
  memset(v528, 0, sizeof(v528));
  LOWORD(v527) = 0;
  BYTE2(v527) = 0;
  memset(v526, 0, 56);
  BYTE2(v525) = 0;
  LOWORD(v525) = 0;
  memset(v524, 0, 56);
  BYTE2(v523) = 0;
  LOWORD(v523) = 0;
  memset(v522, 0, sizeof(v522));
  BYTE2(v521) = 0;
  LOWORD(v521) = 0;
  memset(v520, 0, 56);
  BYTE2(v519) = 0;
  LOWORD(v519) = 0;
  char v502 = 0;
  __int16 v501 = 0;
  memset(&v518[15], 0, 104);
  memset((char *)&v518[14] + 4, 0, 12);
  char v500 = 0;
  __int16 v499 = 0;
  memset(&v518[10], 0, 53);
  memset((char *)&v518[9] + 4, 0, 12);
  char v498 = 0;
  __int16 v497 = 0;
  memset(&v518[5], 0, 53);
  memset((char *)&v518[4] + 4, 0, 12);
  char v496 = 0;
  __int16 v495 = 0;
  memset(v518, 0, 61);
  BYTE2(v517) = 0;
  LOWORD(v517) = 0;
  memset(v516, 0, 56);
  BYTE2(v515) = 0;
  LOWORD(v515) = 0;
  memset(&v514[7], 0, 56);
  memset((char *)&v514[6] + 4, 0, 12);
  char v494 = 0;
  __int16 v493 = 0;
  memset(&v514[2], 0, 61);
  memset(v514, 0, 31);
  long long v513 = 0u;
  long long v512 = 0u;
  long long v511 = 0u;
  BYTE2(v510) = 0;
  LOWORD(v510) = 0;
  memset(&v509[37], 0, 112);
  memset((char *)&v509[36] + 4, 0, 12);
  char v492 = 0;
  __int16 v491 = 0;
  memset(&v509[29], 0, 102);
  memset(v509, 0, 455);
  memset(&v508[183], 0, 12);
  char v490 = 0;
  __int16 v489 = 0;
  char v488 = 0;
  __int16 v487 = 0;
  char v486 = 0;
  __int16 v485 = 0;
  char v484 = 0;
  __int16 v483 = 0;
  char v482 = 0;
  __int16 v481 = 0;
  char v480 = 0;
  __int16 v479 = 0;
  char v478 = 0;
  __int16 v477 = 0;
  char v476 = 0;
  __int16 v475 = 0;
  __int16 v473 = 0;
  char v474 = 0;
  __int16 v471 = 0;
  char v472 = 0;
  char v470 = 0;
  __int16 v469 = 0;
  char v468 = 0;
  __int16 v467 = 0;
  char v466 = 0;
  __int16 v465 = 0;
  char v464 = 0;
  __int16 v463 = 0;
  char v462 = 0;
  __int16 v461 = 0;
  char v460 = 0;
  __int16 v459 = 0;
  char v458 = 0;
  __int16 v457 = 0;
  char v456 = 0;
  __int16 v455 = 0;
  char v454 = 0;
  __int16 v453 = 0;
  char v452 = 0;
  __int16 v451 = 0;
  char v450 = 0;
  __int16 v449 = 0;
  char v448 = 0;
  __int16 v447 = 0;
  char v446 = 0;
  __int16 v445 = 0;
  char v444 = 0;
  __int16 v443 = 0;
  char v442 = 0;
  __int16 v441 = 0;
  char v440 = 0;
  __int16 v439 = 0;
  char v438 = 0;
  __int16 v437 = 0;
  char v436 = 0;
  __int16 v435 = 0;
  char v434 = 0;
  __int16 v433 = 0;
  char v432 = 0;
  __int16 v431 = 0;
  char v430 = 0;
  __int16 v429 = 0;
  char v428 = 0;
  __int16 v427 = 0;
  char v426 = 0;
  __int16 v425 = 0;
  char v424 = 0;
  __int16 v423 = 0;
  memset(&v508[103], 0, 311);
  memset(v508, 0, 409);
  __int16 v422 = 0;
  unsigned int v421 = 0;
  memset(v505, 0, 294);
  *(_DWORD *)((char *)v420 + 3) = 0;
  v420[0] = 0;
  *(_DWORD *)((char *)v419 + 3) = 0;
  v419[0] = 0;
  *(_DWORD *)((char *)v418 + 3) = 0;
  v418[0] = 0;
  *(_DWORD *)((char *)__src + 3) = 0;
  LODWORD(__src[0]) = 0;
  *(_DWORD *)((char *)v417 + 3) = 0;
  v417[0] = 0;
  long long v536 = 0uLL;
  *(_DWORD *)v537 = 0;
  memset(&v537[8], 0, 73);
  *(_OWORD *)((char *)&v535[29] + 11) = 0u;
  *(_OWORD *)((char *)&v535[29] + 2) = 0u;
  *(_OWORD *)((char *)&v535[28] + 2) = 0u;
  *(_OWORD *)((char *)&v535[27] + 2) = 0u;
  *(_OWORD *)((char *)&v535[26] + 2) = 0u;
  *(_OWORD *)((char *)&v535[25] + 2) = 0u;
  *(_OWORD *)((char *)&v535[24] + 2) = 0u;
  *(_OWORD *)((char *)&v535[23] + 2) = 0u;
  *(_OWORD *)((char *)&v535[22] + 2) = 0u;
  *(_OWORD *)((char *)&v535[21] + 2) = 0u;
  *(_OWORD *)((char *)&v535[20] + 2) = 0u;
  *(_OWORD *)((char *)&v535[19] + 2) = 0u;
  *(_OWORD *)((char *)&v535[18] + 2) = 0u;
  *(_OWORD *)((char *)&v535[17] + 2) = 0u;
  *(_OWORD *)((char *)&v535[16] + 2) = 0u;
  *(_OWORD *)((char *)&v535[15] + 2) = 0u;
  *(_OWORD *)((char *)&v535[14] + 2) = 0u;
  *(_OWORD *)((char *)&v535[13] + 2) = 0u;
  *(_OWORD *)((char *)&v535[12] + 2) = 0u;
  *(_OWORD *)((char *)&v535[11] + 2) = 0u;
  *(_OWORD *)((char *)&v535[10] + 2) = 0u;
  *(_OWORD *)((char *)&v535[9] + 2) = 0u;
  *(_OWORD *)((char *)&v535[8] + 2) = 0u;
  *(_OWORD *)((char *)&v535[7] + 2) = 0u;
  *(_OWORD *)((char *)&v535[6] + 2) = 0u;
  *(_OWORD *)((char *)&v535[5] + 2) = 0u;
  *(_OWORD *)((char *)&v535[4] + 2) = 0u;
  *(_OWORD *)((char *)&v535[3] + 2) = 0u;
  *(_OWORD *)((char *)&v535[2] + 2) = 0u;
  *(_OWORD *)((char *)&v535[1] + 2) = 0u;
  *(_OWORD *)((char *)v535 + 2) = 0u;
  memset(&v534[2192], 0, 21);
  memset(&v534[2064], 0, 115);
  *(void *)((char *)&v529 + 3) = 0;
  *((void *)&v529 + 1) = 0;
  *(void *)((char *)&v527 + 3) = 0;
  *((void *)&v527 + 1) = 0;
  *(void *)((char *)&v525 + 3) = 0;
  *((void *)&v525 + 1) = 0;
  *((void *)&v523 + 1) = 0;
  *(void *)((char *)&v523 + 3) = 0;
  *((void *)&v521 + 1) = 0;
  *(void *)((char *)&v521 + 3) = 0;
  *(void *)((char *)&v519 + 3) = 0;
  *((void *)&v519 + 1) = 0;
  *(void *)((char *)&v517 + 3) = 0;
  *((void *)&v517 + 1) = 0;
  *((void *)&v515 + 1) = 0;
  *(void *)((char *)&v515 + 3) = 0;
  *(void *)((char *)&v510 + 3) = 0;
  *((void *)&v510 + 1) = 0;
  char v416 = 0;
  long long v414 = 0u;
  long long v415 = 0u;
  long long v412 = 0u;
  long long v413 = 0u;
  char v411 = 0;
  long long v409 = 0u;
  long long v410 = 0u;
  long long v407 = 0u;
  long long v408 = 0u;
  *(_OWORD *)((char *)&v505[76] + 2) = 0u;
  *(_OWORD *)((char *)&v505[73] + 2) = 0u;
  memset(&v534[1870], 0, 177);
  memset(&v534[1743], 0, 110);
  bzero(&v534[6], 0x6C5uLL);
  bzero((char *)v533 + 3, 0x15C5uLL);
  bzero((char *)v532 + 3, 0x15C5uLL);
  bzero(&v531[3], 0x2255uLL);
  long long v506 = 0uLL;
  __int16 v507 = 0;
  bzero((char *)__src + 7, 0x1491uLL);
  long long v24 = *(_OWORD *)&v537[64];
  *((_OWORD *)v20 + 4) = *(_OWORD *)&v537[48];
  *((_OWORD *)v20 + 5) = v24;
  v20[24] = *(_DWORD *)&v537[80];
  long long v25 = *(_OWORD *)v537;
  *(_OWORD *)unsigned __int8 v20 = v536;
  *((_OWORD *)v20 + 1) = v25;
  long long v26 = *(_OWORD *)&v537[32];
  *((_OWORD *)v20 + 2) = *(_OWORD *)&v537[16];
  *((_OWORD *)v20 + 3) = v26;
  *(void *)(v20 + 25) = 0;
  *((_WORD *)v20 + 54) = 0;
  memcpy((char *)v20 + 110, v535, 0x1EBuLL);
  *(unsigned int *)((char *)v20 + 601) = v503[0];
  v20[151] = *(_DWORD *)((char *)v503 + 3);
  *((void *)v20 + 76) = 0;
  v20[154] = -1;
  *(_OWORD *)(v20 + 155) = *(_OWORD *)&v534[2188];
  *(_OWORD *)((char *)v20 + 629) = *(_OWORD *)&v534[2197];
  *((unsigned char *)v20 + 645) = 0;
  *((_WORD *)v20 + 323) = 0;
  v20[162] = 0;
  long long v27 = *(_OWORD *)&v534[2060];
  long long v28 = *(_OWORD *)&v534[2076];
  long long v29 = *(_OWORD *)&v534[2108];
  *(_OWORD *)(v20 + 171) = *(_OWORD *)&v534[2092];
  *(_OWORD *)(v20 + 175) = v29;
  *(_OWORD *)(v20 + 163) = v27;
  *(_OWORD *)(v20 + 167) = v28;
  long long v30 = *(_OWORD *)&v534[2124];
  long long v31 = *(_OWORD *)&v534[2140];
  long long v32 = *(_OWORD *)&v534[2156];
  *(void *)((char *)v20 + 763) = *(void *)&v534[2171];
  *(_OWORD *)(v20 + 183) = v31;
  *(_OWORD *)(v20 + 187) = v32;
  *(_OWORD *)(v20 + 179) = v30;
  *(unsigned int *)((char *)v20 + 778) = 0;
  *(void *)((char *)v20 + 771) = 0;
  long long v33 = *(_OWORD *)&v534[1868];
  long long v34 = *(_OWORD *)&v534[1884];
  long long v35 = *(_OWORD *)&v534[1916];
  *(_OWORD *)((char *)v20 + 814) = *(_OWORD *)&v534[1900];
  *(_OWORD *)((char *)v20 + 830) = v35;
  *(_OWORD *)((char *)v20 + 782) = v33;
  *(_OWORD *)((char *)v20 + 798) = v34;
  long long v36 = *(_OWORD *)&v534[1932];
  long long v37 = *(_OWORD *)&v534[1948];
  long long v38 = *(_OWORD *)&v534[1980];
  *(_OWORD *)((char *)v20 + 878) = *(_OWORD *)&v534[1964];
  *(_OWORD *)((char *)v20 + 894) = v38;
  *(_OWORD *)((char *)v20 + 846) = v36;
  *(_OWORD *)((char *)v20 + 862) = v37;
  long long v39 = *(_OWORD *)&v534[1996];
  long long v40 = *(_OWORD *)&v534[2012];
  long long v41 = *(_OWORD *)&v534[2028];
  *(unsigned int *)((char *)v20 + 957) = *(_DWORD *)&v534[2043];
  *(_OWORD *)((char *)v20 + 926) = v40;
  *(_OWORD *)((char *)v20 + 942) = v41;
  *(_OWORD *)((char *)v20 + 910) = v39;
  long long v42 = *(_OWORD *)&v534[1820];
  *(_OWORD *)((char *)v20 + 1025) = *(_OWORD *)&v534[1804];
  *(_OWORD *)((char *)v20 + 1041) = v42;
  *(_OWORD *)((char *)v20 + 1057) = *(_OWORD *)&v534[1836];
  *((unsigned char *)v20 + 1073) = v534[1852];
  long long v43 = *(_OWORD *)&v534[1756];
  *(_OWORD *)((char *)v20 + 961) = *(_OWORD *)&v534[1740];
  *(_OWORD *)((char *)v20 + 977) = v43;
  long long v44 = *(_OWORD *)&v534[1788];
  *(_OWORD *)((char *)v20 + 993) = *(_OWORD *)&v534[1772];
  *(_OWORD *)((char *)v20 + 1009) = v44;
  memcpy((char *)v20 + 1074, v534, 0x6CBuLL);
  memcpy((char *)v20 + 2813, v533, 0x15C8uLL);
  memcpy((char *)v20 + 8389, v532, 0x15C8uLL);
  memcpy((char *)v20 + 13965, v531, 0x2258uLL);
  *(_OWORD *)((char *)v20 + 22757) = *(_OWORD *)v530;
  *(unsigned int *)((char *)v20 + 22773) = *(_DWORD *)&v530[16];
  *(_OWORD *)((char *)v20 + 22777) = v529;
  long long v45 = *(_OWORD *)&v528[16];
  *(_OWORD *)((char *)v20 + 22793) = *(_OWORD *)v528;
  *(_OWORD *)((char *)v20 + 22809) = v45;
  *(_OWORD *)((char *)v20 + 22825) = *(_OWORD *)&v528[32];
  uint64_t v46 = *(void *)&v528[48];
  *(_OWORD *)((char *)v20 + 22849) = v527;
  *(void *)((char *)v20 + 22841) = v46;
  long long v47 = v526[0];
  long long v48 = v526[1];
  long long v49 = v526[2];
  *(void *)((char *)v20 + 22913) = *(void *)&v526[3];
  *(_OWORD *)((char *)v20 + 22881) = v48;
  *(_OWORD *)((char *)v20 + 22897) = v49;
  *(_OWORD *)((char *)v20 + 22865) = v47;
  *(_OWORD *)((char *)v20 + 22921) = v525;
  *(void *)((char *)v20 + 22985) = *(void *)&v524[3];
  long long v50 = v524[2];
  long long v51 = v524[0];
  *(_OWORD *)((char *)v20 + 22953) = v524[1];
  *(_OWORD *)((char *)v20 + 22969) = v50;
  *(_OWORD *)((char *)v20 + 22937) = v51;
  *(_OWORD *)((char *)v20 + 22993) = v523;
  long long v52 = v522[1];
  *(_OWORD *)((char *)v20 + 23009) = v522[0];
  *(_OWORD *)((char *)v20 + 23025) = v52;
  long long v53 = v522[2];
  long long v54 = v522[3];
  long long v55 = v522[6];
  long long v56 = v522[4];
  *(_OWORD *)((char *)v20 + 23089) = v522[5];
  *(_OWORD *)((char *)v20 + 23105) = v55;
  *(_OWORD *)((char *)v20 + 23057) = v54;
  *(_OWORD *)((char *)v20 + 23073) = v56;
  *(_OWORD *)((char *)v20 + 23121) = v521;
  *(_OWORD *)((char *)v20 + 23041) = v53;
  long long v57 = v520[0];
  long long v58 = v520[1];
  long long v59 = v520[2];
  *(void *)((char *)v20 + 23185) = *(void *)&v520[3];
  *(_OWORD *)((char *)v20 + 23153) = v58;
  *(_OWORD *)((char *)v20 + 23169) = v59;
  *(_OWORD *)((char *)v20 + 23137) = v57;
  *(_OWORD *)((char *)v20 + 23193) = v519;
  long long v60 = v518[18];
  long long v61 = v518[19];
  long long v62 = v518[20];
  *(void *)((char *)v20 + 23257) = *(void *)&v518[21];
  *(_OWORD *)((char *)v20 + 23225) = v61;
  *(_OWORD *)((char *)v20 + 23241) = v62;
  *(_OWORD *)((char *)v20 + 23209) = v60;
  LOWORD(v46) = v501;
  *((unsigned char *)v20 + 23267) = v502;
  *(_WORD *)((char *)v20 + 23265) = v46;
  v375[37] = 0;
  *((unsigned char *)v375 + 152) = 0;
  long long v63 = *(_OWORD *)((char *)&v518[16] + 8);
  *(void *)((char *)v20 + 23289) = *((void *)&v518[17] + 1);
  *(_OWORD *)((char *)v20 + 23273) = v63;
  long long v64 = v518[15];
  *(void *)((char *)v20 + 23313) = *(void *)&v518[16];
  *(_OWORD *)((char *)v20 + 23297) = v64;
  uint64_t v65 = *(void *)((char *)&v518[14] + 4);
  *(unsigned int *)((char *)v20 + 23329) = HIDWORD(v518[14]);
  *(void *)((char *)v20 + 23321) = v65;
  LOWORD(v65) = v499;
  *((unsigned char *)v20 + 23335) = v500;
  *(_WORD *)((char *)v20 + 23333) = v65;
  v375[54] = 0;
  long long v66 = v518[10];
  long long v67 = v518[11];
  long long v68 = v518[12];
  *(void *)((char *)v20 + 23385) = *(void *)((char *)&v518[12] + 13);
  *(_OWORD *)(v20 + 5839) = v67;
  *(_OWORD *)(v20 + 5843) = v68;
  *(_OWORD *)(v20 + 5835) = v66;
  uint64_t v69 = *(void *)((char *)&v518[9] + 4);
  *(unsigned int *)((char *)v20 + 23401) = HIDWORD(v518[9]);
  *(void *)((char *)v20 + 23393) = v69;
  LOWORD(v69) = v497;
  *((unsigned char *)v20 + 23407) = v498;
  *(_WORD *)((char *)v20 + 23405) = v69;
  v374[4] = 0;
  long long v70 = v518[5];
  long long v71 = v518[6];
  long long v72 = v518[7];
  *(void *)((char *)v20 + 23457) = *(void *)((char *)&v518[7] + 13);
  *(_OWORD *)(v20 + 5857) = v71;
  *(_OWORD *)(v20 + 5861) = v72;
  *(_OWORD *)(v20 + 5853) = v70;
  uint64_t v73 = *(void *)((char *)&v518[4] + 4);
  *(unsigned int *)((char *)v20 + 23473) = HIDWORD(v518[4]);
  *(void *)((char *)v20 + 23465) = v73;
  LOWORD(v73) = v495;
  *((unsigned char *)v20 + 23479) = v496;
  *(_WORD *)((char *)v20 + 23477) = v73;
  v374[22] = 0;
  long long v74 = v518[0];
  long long v75 = v518[1];
  long long v76 = v518[2];
  *(_OWORD *)((char *)v20 + 23529) = *(_OWORD *)((char *)&v518[2] + 13);
  *(_OWORD *)(v20 + 5875) = v75;
  *(_OWORD *)(v20 + 5879) = v76;
  *(_OWORD *)(v20 + 5871) = v74;
  *(_OWORD *)((char *)v20 + 23545) = v517;
  long long v77 = v516[0];
  long long v78 = v516[1];
  long long v79 = v516[2];
  *(void *)((char *)v20 + 23609) = *(void *)&v516[3];
  *(_OWORD *)((char *)v20 + 23577) = v78;
  *(_OWORD *)((char *)v20 + 23593) = v79;
  *(_OWORD *)((char *)v20 + 23561) = v77;
  *(_OWORD *)((char *)v20 + 23617) = v515;
  long long v80 = v514[7];
  long long v81 = v514[8];
  long long v82 = v514[9];
  *(void *)((char *)v20 + 23681) = *(void *)&v514[10];
  *(_OWORD *)((char *)v20 + 23649) = v81;
  *(_OWORD *)((char *)v20 + 23665) = v82;
  *(_OWORD *)((char *)v20 + 23633) = v80;
  uint64_t v83 = *(void *)((char *)&v514[6] + 4);
  *(unsigned int *)((char *)v20 + 23697) = HIDWORD(v514[6]);
  *(void *)((char *)v20 + 23689) = v83;
  LOWORD(v83) = v493;
  *((unsigned char *)v20 + 23703) = v494;
  *(_WORD *)((char *)v20 + 23701) = v83;
  v389[4] = 0;
  long long v84 = v514[2];
  long long v85 = v514[3];
  long long v86 = v514[4];
  *(_OWORD *)((char *)v20 + 23753) = *(_OWORD *)((char *)&v514[4] + 13);
  *(_OWORD *)(v20 + 5931) = v85;
  *(_OWORD *)(v20 + 5935) = v86;
  *(_OWORD *)(v20 + 5927) = v84;
  long long v87 = v511;
  long long v88 = v512;
  *(_OWORD *)(v20 + 5958) = *(_OWORD *)((char *)v514 + 15);
  long long v89 = v514[0];
  *(_OWORD *)((char *)v20 + 23801) = v513;
  *(_OWORD *)((char *)v20 + 23817) = v89;
  *(_OWORD *)((char *)v20 + 23769) = v87;
  *(_OWORD *)((char *)v20 + 23785) = v88;
  *((unsigned char *)v389 + 160) = 0;
  *(_OWORD *)((char *)v20 + 23849) = v510;
  long long v90 = v509[38];
  *(_OWORD *)((char *)v20 + 23865) = v509[37];
  *(_OWORD *)((char *)v20 + 23881) = v90;
  long long v91 = v509[39];
  long long v92 = v509[40];
  long long v93 = v509[43];
  long long v94 = v509[41];
  *(_OWORD *)((char *)v20 + 23945) = v509[42];
  *(_OWORD *)((char *)v20 + 23961) = v93;
  *(_OWORD *)((char *)v20 + 23913) = v92;
  *(_OWORD *)((char *)v20 + 23929) = v94;
  *(_OWORD *)((char *)v20 + 23897) = v91;
  uint64_t v95 = *(void *)((char *)&v509[36] + 4);
  *(unsigned int *)((char *)v20 + 23985) = HIDWORD(v509[36]);
  *(void *)((char *)v20 + 23977) = v95;
  LOWORD(v95) = v491;
  *((unsigned char *)v20 + 23991) = v492;
  *(_WORD *)((char *)v20 + 23989) = v95;
  v389[76] = 0;
  long long v96 = v509[30];
  *(_OWORD *)(v20 + 5999) = v509[29];
  *(_OWORD *)(v20 + 6003) = v96;
  long long v97 = v509[31];
  long long v98 = v509[32];
  long long v99 = v509[33];
  long long v100 = v509[34];
  *(void *)((char *)v20 + 24090) = *(void *)((char *)&v509[34] + 14);
  *(_OWORD *)(v20 + 6015) = v99;
  *(_OWORD *)(v20 + 6019) = v100;
  *(_OWORD *)(v20 + 6007) = v97;
  *(_OWORD *)(v20 + 6011) = v98;
  *((unsigned char *)v20 + 24130) = 0;
  *(_OWORD *)((char *)v20 + 24098) = 0u;
  *(_OWORD *)((char *)v20 + 24114) = 0u;
  memcpy((char *)v20 + 24131, v509, 0x1C7uLL);
  *(void *)((char *)v20 + 24586) = *(void *)&v508[183];
  *(unsigned int *)((char *)v20 + 24594) = v508[185];
  long long v101 = *(_OWORD *)&v508[175];
  *(_OWORD *)((char *)v20 + 24758) = *(_OWORD *)&v508[171];
  *(_OWORD *)((char *)v20 + 24774) = v101;
  *(void *)((char *)v20 + 24789) = *(void *)((char *)&v508[178] + 3);
  long long v102 = *(_OWORD *)&v508[159];
  *(_OWORD *)((char *)v20 + 24694) = *(_OWORD *)&v508[155];
  *(_OWORD *)((char *)v20 + 24710) = v102;
  long long v103 = *(_OWORD *)&v508[167];
  *(_OWORD *)((char *)v20 + 24726) = *(_OWORD *)&v508[163];
  *(_OWORD *)((char *)v20 + 24742) = v103;
  long long v104 = *(_OWORD *)&v508[143];
  *(_OWORD *)((char *)v20 + 24630) = *(_OWORD *)&v508[139];
  *(_OWORD *)((char *)v20 + 24646) = v104;
  long long v105 = *(_OWORD *)&v508[151];
  *(_OWORD *)((char *)v20 + 24662) = *(_OWORD *)&v508[147];
  *(_OWORD *)((char *)v20 + 24678) = v105;
  long long v106 = *(_OWORD *)&v508[135];
  *(_OWORD *)((char *)v20 + 24598) = *(_OWORD *)&v508[131];
  *(_OWORD *)((char *)v20 + 24614) = v106;
  long long v107 = *(_OWORD *)&v508[116];
  long long v108 = *(_OWORD *)&v508[124];
  *(_OWORD *)((char *)v20 + 24829) = *(_OWORD *)&v508[120];
  *(_OWORD *)((char *)v20 + 24845) = v108;
  *(_OWORD *)((char *)v20 + 24857) = *(_OWORD *)&v508[127];
  *(_OWORD *)((char *)v20 + 24797) = *(_OWORD *)&v508[112];
  *(_OWORD *)((char *)v20 + 24813) = v107;
  *(_WORD *)((char *)v20 + 24873) = v489;
  *((unsigned char *)v20 + 24875) = v490;
  *(unsigned char *)(v390 + 100) = 0;
  *(_WORD *)((char *)v20 + 24877) = v487;
  *((unsigned char *)v20 + 24879) = v488;
  *(_DWORD *)(v390 + 104) = 0;
  *(unsigned char *)(v390 + 108) = 0;
  *(_WORD *)((char *)v20 + 24885) = v485;
  *((unsigned char *)v20 + 24887) = v486;
  *(_DWORD *)(v390 + 112) = 0;
  *(unsigned char *)(v390 + 116) = 0;
  *(_WORD *)((char *)v20 + 24893) = v483;
  *((unsigned char *)v20 + 24895) = v484;
  *(_DWORD *)(v390 + 120) = 0;
  *(unsigned char *)(v390 + 124) = 0;
  *(_WORD *)((char *)v20 + 24901) = v481;
  *((unsigned char *)v20 + 24903) = v482;
  *(_DWORD *)(v390 + 128) = 0;
  *(unsigned char *)(v390 + 132) = 0;
  *((unsigned char *)v20 + 24911) = v480;
  *(_WORD *)((char *)v20 + 24909) = v479;
  *(_DWORD *)(v390 + 136) = 0;
  *(unsigned char *)(v390 + 140) = 0;
  *((unsigned char *)v20 + 24919) = v478;
  *(_WORD *)((char *)v20 + 24917) = v477;
  *(_DWORD *)(v390 + 144) = 0;
  *(unsigned char *)(v390 + 148) = 0;
  *((unsigned char *)v20 + 24927) = v476;
  *(_WORD *)((char *)v20 + 24925) = v475;
  *(_DWORD *)(v390 + 152) = 0;
  *(unsigned char *)(v390 + 156) = 0;
  __int16 v109 = v473;
  *((unsigned char *)v20 + 24935) = v474;
  *(_WORD *)((char *)v20 + 24933) = v109;
  *(_DWORD *)(v390 + 160) = 0;
  *(unsigned char *)(v390 + 164) = 0;
  __int16 v110 = v471;
  *((unsigned char *)v20 + 24943) = v472;
  *(_WORD *)((char *)v20 + 24941) = v110;
  *(_DWORD *)(v390 + 168) = 0;
  *(unsigned char *)(v390 + 172) = 0;
  __int16 v111 = v469;
  *((unsigned char *)v20 + 24951) = v470;
  *(_WORD *)((char *)v20 + 24949) = v111;
  *(_DWORD *)(v390 + 176) = 0;
  *(unsigned char *)(v390 + 180) = 0;
  __int16 v112 = v467;
  *((unsigned char *)v20 + 24959) = v468;
  *(_WORD *)((char *)v20 + 24957) = v112;
  *(_DWORD *)(v390 + 184) = 0;
  *(unsigned char *)(v390 + 188) = 0;
  __int16 v113 = v465;
  *((unsigned char *)v20 + 24967) = v466;
  *(_WORD *)((char *)v20 + 24965) = v113;
  *(_DWORD *)(v390 + 192) = 0;
  *(unsigned char *)(v390 + 196) = 0;
  __int16 v114 = v463;
  *((unsigned char *)v20 + 24975) = v464;
  *(_WORD *)((char *)v20 + 24973) = v114;
  *(_DWORD *)(v390 + 200) = 0;
  *(unsigned char *)(v390 + 204) = 0;
  __int16 v115 = v461;
  *((unsigned char *)v20 + 24983) = v462;
  *(_WORD *)((char *)v20 + 24981) = v115;
  *(_DWORD *)(v390 + 208) = 0;
  *(unsigned char *)(v390 + 212) = 0;
  __int16 v116 = v459;
  *((unsigned char *)v20 + 24991) = v460;
  *(_WORD *)((char *)v20 + 24989) = v116;
  *(_DWORD *)(v390 + 216) = 0;
  *(unsigned char *)(v390 + 220) = 0;
  __int16 v117 = v457;
  *((unsigned char *)v20 + 24999) = v458;
  *(_WORD *)((char *)v20 + 24997) = v117;
  *(_DWORD *)(v390 + 224) = 0;
  *(unsigned char *)(v390 + 228) = 0;
  __int16 v118 = v455;
  *((unsigned char *)v20 + 25007) = v456;
  *(_WORD *)((char *)v20 + 25005) = v118;
  *(_DWORD *)(v390 + 232) = 0;
  *(unsigned char *)(v390 + 236) = 0;
  __int16 v119 = v453;
  *((unsigned char *)v20 + 25015) = v454;
  *(_WORD *)((char *)v20 + 25013) = v119;
  *(_DWORD *)(v390 + 240) = 0;
  *(unsigned char *)(v390 + 244) = 0;
  __int16 v120 = v451;
  *((unsigned char *)v20 + 25023) = v452;
  *(_WORD *)((char *)v20 + 25021) = v120;
  *(_DWORD *)(v390 + 248) = 0;
  *(unsigned char *)(v390 + 252) = 0;
  __int16 v121 = v449;
  *((unsigned char *)v20 + 25031) = v450;
  *(_WORD *)((char *)v20 + 25029) = v121;
  *(_DWORD *)(v390 + 256) = 0;
  *(unsigned char *)(v390 + 260) = 0;
  __int16 v122 = v447;
  *((unsigned char *)v20 + 25039) = v448;
  *(_WORD *)((char *)v20 + 25037) = v122;
  *(_DWORD *)(v390 + 264) = 0;
  *(unsigned char *)(v390 + 268) = 0;
  __int16 v123 = v445;
  *((unsigned char *)v20 + 25047) = v446;
  *(_WORD *)((char *)v20 + 25045) = v123;
  *(_DWORD *)(v390 + 272) = 0;
  *(unsigned char *)(v390 + 276) = 0;
  __int16 v124 = v443;
  *((unsigned char *)v20 + 25055) = v444;
  *(_WORD *)((char *)v20 + 25053) = v124;
  *(_DWORD *)(v390 + 280) = 0;
  *(unsigned char *)(v390 + 284) = 0;
  __int16 v125 = v441;
  *((unsigned char *)v20 + 25063) = v442;
  *(_WORD *)((char *)v20 + 25061) = v125;
  *(_DWORD *)(v390 + 288) = 0;
  *(unsigned char *)(v390 + 292) = 0;
  __int16 v126 = v439;
  *((unsigned char *)v20 + 25071) = v440;
  *(_WORD *)((char *)v20 + 25069) = v126;
  *(_DWORD *)(v390 + 296) = 0;
  *(unsigned char *)(v390 + 300) = 0;
  __int16 v127 = v437;
  *((unsigned char *)v20 + 25079) = v438;
  *(_WORD *)((char *)v20 + 25077) = v127;
  *(_DWORD *)(v390 + 304) = 0;
  *(unsigned char *)(v390 + 308) = 0;
  __int16 v128 = v435;
  *((unsigned char *)v20 + 25087) = v436;
  *(_WORD *)((char *)v20 + 25085) = v128;
  *(_DWORD *)(v390 + 312) = 0;
  *(unsigned char *)(v390 + 316) = 0;
  __int16 v129 = v433;
  *((unsigned char *)v20 + 25095) = v434;
  *(_WORD *)((char *)v20 + 25093) = v129;
  *(_DWORD *)(v390 + 320) = 0;
  *(unsigned char *)(v390 + 324) = 0;
  __int16 v130 = v431;
  *((unsigned char *)v20 + 25103) = v432;
  *(_WORD *)((char *)v20 + 25101) = v130;
  *(_DWORD *)(v390 + 328) = 0;
  *(unsigned char *)(v390 + 332) = 0;
  __int16 v131 = v429;
  *((unsigned char *)v20 + 25111) = v430;
  *(_WORD *)((char *)v20 + 25109) = v131;
  *(_DWORD *)(v390 + 336) = 0;
  *(unsigned char *)(v390 + 340) = 0;
  __int16 v132 = v427;
  *((unsigned char *)v20 + 25119) = v428;
  *(_WORD *)((char *)v20 + 25117) = v132;
  *(_DWORD *)(v390 + 344) = 0;
  *(unsigned char *)(v390 + 348) = 0;
  __int16 v133 = v425;
  *((unsigned char *)v20 + 25127) = v426;
  *(_WORD *)((char *)v20 + 25125) = v133;
  *(_DWORD *)(v390 + 352) = 0;
  *(unsigned char *)(v390 + 356) = 0;
  __int16 v134 = v423;
  *((unsigned char *)v20 + 25135) = v424;
  *(_WORD *)((char *)v20 + 25133) = v134;
  *(_DWORD *)(v390 + 360) = 0;
  *(unsigned char *)(v390 + 364) = 0;
  long long v135 = *(_OWORD *)&v508[103];
  long long v136 = *(_OWORD *)&v508[107];
  *(unsigned int *)((char *)v20 + 25173) = v508[111];
  *(_OWORD *)((char *)v20 + 25141) = v135;
  *(_OWORD *)((char *)v20 + 25157) = v136;
  memcpy((char *)v20 + 25177, v508, 0x199uLL);
  *(unsigned int *)((char *)v20 + 25586) = v421;
  *((_WORD *)v20 + 12795) = v422;
  *((void *)v20 + 3199) = 0;
  *((_OWORD *)v20 + 1600) = v506;
  *((_WORD *)v20 + 12808) = v507;
  memcpy((char *)v20 + 25618, v505, 0x142uLL);
  *(_DWORD *)(v383 + 774) = 0;
  long long v137 = v415;
  *(_OWORD *)(v20 + 6494) = v414;
  *(_OWORD *)(v20 + 6498) = v137;
  *((unsigned char *)v20 + 26008) = v416;
  long long v138 = v413;
  *(_OWORD *)(v20 + 6486) = v412;
  *(_OWORD *)(v20 + 6490) = v138;
  *(unsigned int *)((char *)v20 + 26009) = v420[0];
  v20[6503] = *(_DWORD *)((char *)v420 + 3);
  *((void *)v20 + 3252) = 0;
  *(unsigned char *)(v383 + 858) = 0;
  unsigned int v139 = v419[0];
  v20[6507] = *(_DWORD *)((char *)v419 + 3);
  *(unsigned int *)((char *)v20 + 26025) = v139;
  *((void *)v20 + 3254) = 0;
  *((unsigned char *)v20 + 26104) = v411;
  long long v140 = v410;
  *(_OWORD *)(v20 + 6518) = v409;
  *(_OWORD *)(v20 + 6522) = v140;
  long long v141 = v408;
  *(_OWORD *)(v20 + 6510) = v407;
  *(_OWORD *)(v20 + 6514) = v141;
  v20[6527] = *(_DWORD *)((char *)v418 + 3);
  *(unsigned int *)((char *)v20 + 26105) = v418[0];
  *((void *)v20 + 3264) = 0;
  *(unsigned char *)(v383 + 954) = 0;
  memcpy((char *)v20 + 26121, __src, 0x1498uLL);
  *(unsigned int *)((char *)v20 + 31393) = v417[0];
  v20[7849] = *(_DWORD *)((char *)v417 + 3);
  *((void *)v20 + 3925) = 0;
  *((int64x2_t *)v20 + 1963) = vdupq_n_s64(0x4066800000000000uLL);
  *((void *)v20 + 3928) = 0x3FF0000000000000;
  *((void *)v20 + 3929) = 0;
  *(_DWORD *)(v390 + 368) = 0;
  *(_OWORD *)(v390 + 336) = 0u;
  *(_OWORD *)(v390 + 352) = 0u;
  *(_OWORD *)(v390 + 304) = 0u;
  *(_OWORD *)(v390 + 320) = 0u;
  *(_OWORD *)(v390 + 272) = 0u;
  *(_OWORD *)(v390 + 288) = 0u;
  *(_OWORD *)(v390 + 240) = 0u;
  *(_OWORD *)(v390 + 256) = 0u;
  *(_OWORD *)(v390 + 208) = 0u;
  *(_OWORD *)(v390 + 224) = 0u;
  *(_OWORD *)(v390 + 176) = 0u;
  *(_OWORD *)(v390 + 192) = 0u;
  *(_OWORD *)(v390 + 144) = 0u;
  *(_OWORD *)(v390 + 160) = 0u;
  *(_OWORD *)(v390 + 112) = 0u;
  *(_OWORD *)(v390 + 128) = 0u;
  *(_OWORD *)(v390 + 80) = 0u;
  *(_OWORD *)(v390 + 96) = 0u;
  *(_OWORD *)(v390 + 48) = 0u;
  *(_OWORD *)(v390 + 64) = 0u;
  *(_OWORD *)(v390 + 16) = 0u;
  *(_OWORD *)(v390 + 32) = 0u;
  *(_OWORD *)uint64_t v390 = 0u;
  *(unsigned char *)uint64_t v390 = NK_Sample_Track_Meas((int *)v385, (_DWORD *)(v21 + 7348), (double *)(v21 + 7352), (uint64_t)v20, 0.0, v142, v143, v144);
  *(void *)(v385 + 40) = 0;
  *(_OWORD *)(v385 + 2848) = 0u;
  *(_OWORD *)(v385 + 2832) = 0u;
  *(_OWORD *)(v385 + 2816) = 0u;
  *(_OWORD *)(v385 + 2800) = 0u;
  *(_OWORD *)(v385 + 2784) = 0u;
  *(_OWORD *)(v385 + 2768) = 0u;
  memcpy(v20 + 156, (const void *)(a9 + 32), 0x150uLL);
  long long v145 = *(_OWORD *)(a9 + 800);
  long long v146 = *(_OWORD *)(a9 + 816);
  long long v147 = *(_OWORD *)(a9 + 832);
  *((_OWORD *)v20 + 1544) = *(_OWORD *)(a9 + 848);
  *((_OWORD *)v20 + 1543) = v147;
  *((_OWORD *)v20 + 1542) = v146;
  *((_OWORD *)v20 + 1541) = v145;
  long long v148 = *(_OWORD *)(a9 + 864);
  long long v149 = *(_OWORD *)(a9 + 880);
  long long v150 = *(_OWORD *)(a9 + 896);
  *((void *)v20 + 3096) = *(void *)(a9 + 912);
  *((_OWORD *)v20 + 1547) = v150;
  *((_OWORD *)v20 + 1546) = v149;
  *((_OWORD *)v20 + 1545) = v148;
  uint64_t v377 = v20 + 240;
  *((unsigned char *)v20 + 960) = *(unsigned char *)(a9 + 19);
  v20[241] = *(_DWORD *)(a9 + 12);
  unsigned int v151 = *(_DWORD *)(a10 + 1320);
  *((void *)v20 + 2840) = *(void *)(a10 + 1312);
  v20[5682] = v151;
  unsigned int v152 = *(_DWORD *)(a10 + 1332);
  *(void *)(v20 + 5683) = *(void *)(a10 + 1324);
  v20[5685] = v152;
  unsigned int v153 = *(_DWORD *)(a10 + 1344);
  *((void *)v20 + 2843) = *(void *)(a10 + 1336);
  v20[5688] = v153;
  NK_Get_Ext_CTXT(v20[1], (uint64_t)v20, v21, (_DWORD *)a10);
  v20[242] = *(_DWORD *)a10;
  int v154 = *(_DWORD *)(a10 + 52);
  if (v154 == 2)
  {
    unsigned int v155 = *(_DWORD *)(v21 + 20);
    uint64_t v156 = (uint64_t)v386;
    if (v155 - 2 <= 2)
    {
      if (*v377)
      {
        if (v155 > 3 || (int)v20[241] >= 2) {
          goto LABEL_27;
        }
      }
      else if (v155 > 3)
      {
        goto LABEL_27;
      }
      *(_DWORD *)(v21 + 20) = 4;
      int v406 = 4;
      unsigned int v158 = *(_DWORD *)(v21 + 24);
      unsigned __int16 v159 = (unsigned int *)&v406;
LABEL_26:
      v159[1] = v158;
      NK_Set_Dynamics(v159, v21 + 32);
      goto LABEL_27;
    }
LABEL_20:
    if (v154 == v155) {
      goto LABEL_27;
    }
    *(_DWORD *)(v21 + 20) = v154;
    unsigned int v158 = *(_DWORD *)(a10 + 56);
    *(_DWORD *)(v21 + 24) = v158;
    int v404 = v154;
    unsigned __int16 v159 = (unsigned int *)&v404;
    goto LABEL_26;
  }
  unsigned int v155 = *(_DWORD *)(v21 + 20);
  uint64_t v156 = (uint64_t)v386;
  if ((v154 - 5) > 3 || v155 - 5 > 3) {
    goto LABEL_20;
  }
  if (!*v377 || (int)v20[241] <= 1)
  {
    if (v155 == 5)
    {
      int v157 = 6;
    }
    else
    {
      if (v155 != 6) {
        goto LABEL_27;
      }
      int v157 = 7;
    }
    *(_DWORD *)(v21 + 20) = v157;
    int v405 = v157;
    unsigned __int16 v159 = (unsigned int *)&v405;
    unsigned int v158 = *(_DWORD *)(v21 + 24);
    goto LABEL_26;
  }
LABEL_27:
  NK_Set_XO_PN(a10, v21 + 32);
  if (!*(_DWORD *)(a9 + 48))
  {
    *(unsigned char *)(v21 + 128) = 1;
    *(_DWORD *)(v21 + 132) = 20;
  }
  if (*(unsigned char *)(v21 + 7))
  {
    *(unsigned char *)(v21 + 7) = 0;
    *(unsigned char *)(v21 + 128) = 1;
    int v160 = 33;
  }
  else
  {
    if (*(_DWORD *)(v21 + 132) != 33) {
      goto LABEL_34;
    }
    int v160 = 34;
  }
  *(_DWORD *)(v21 + 132) = v160;
LABEL_34:
  uint64_t v369 = v156 + 26864;
  NK_Check_TOW_Adjust(v21, (uint64_t)v20);
  int v161 = *(_DWORD *)(a10 + 948);
  unsigned __int16 v162 = (double *)*(unsigned __int16 *)(v21 + 18);
  if (v161 * *(_DWORD *)(v21 + 11032) > (1000 * v162) && *(double *)(a9 + 344) > 0.0) {
    NK_Decay_Speed(v162, v161, (uint64_t)(v20 + 156), v21);
  }
  NK_Predict_State((double *)v20, (double *)v20 + 78);
  double v163 = *(double *)(a9 + 208);
  if (fabs(v163) < 1.48352986)
  {
    __double2 v164 = __sincos_stret(v163);
    double v165 = 1.0 / sqrt(v164.__sinval * v164.__sinval * -0.00669437999 + 1.0);
    double v166 = v164.__cosval * (*(double *)(a9 + 224) + v165 * 6378137.0);
    if (v166 < 1.0) {
      double v166 = 1.0;
    }
    *(double *)(v21 + 27080) = v166;
    *(double *)(v21 + 27072) = *(double *)(a9 + 224) + v165 * (v165 * v165) * 6335439.33;
  }
  unsigned int v167 = *v20;
  v20[157] = v20[1];
  if (!*(unsigned char *)v369)
  {
    *(unsigned char *)uint64_t v369 = 1;
    *(_DWORD *)(v156 + 26868) = v167;
  }
  NK_Get_Ext_Meas(v167, v20[2], (_DWORD *)a10, (uint64_t)v20, v21);
  int v168 = *((unsigned __int8 *)v20 + 22992);
  v387 = (double *)(v20 + 5748);
  if (*((unsigned char *)v20 + 22992)) {
    BOOL v169 = v20[5750] - 3 < 2;
  }
  else {
    BOOL v169 = 0;
  }
  if (*(_DWORD *)(v21 + 20) <= 4u
    && (!*(unsigned char *)(v21 + 233)
     || *((unsigned char *)v20 + 22992)
     && *(unsigned char *)v375
     && (int)v20[3] >= 4
     && *((double *)v20 + 2880) <= 6250000.0
     && *((double *)v20 + 2894) <= 250000.0))
  {
    *((unsigned char *)v20 + 976) = 1;
  }
  v384 = (unsigned char *)(v156 + 8144);
  __int16 v370 = (int64x2_t *)(v20 + 6164);
  if (!*v377 || *(unsigned char *)(v156 + 26960)) {
    goto LABEL_65;
  }
  if ((int)v20[241] < 2 || *((double *)v20 + 3086) > 30000.0 || !*(_DWORD *)(v21 + 11048))
  {
    BOOL v357 = v168 == 0;
    char v170 = !v169;
    if (v357) {
      char v170 = 1;
    }
    if ((v170 & 1) != 0 || *((double *)v20 + 2880) > 900000000.0)
    {
LABEL_65:
      if (*((unsigned char *)v20 + 17) && (int)v20[3] >= 1) {
        NK_Crude_Apx_Pos(v385, v376, v21, (int *)v20, v388);
      }
    }
  }
  BOOL v363 = v169;
  NK_Transform_State((uint64_t)(v20 + 156));
  int v171 = *((unsigned __int8 *)v20 + 960);
  uint64_t v403 = *(void *)(v21 + 20);
  v365 = (double *)(v21 + 11440);
  v366 = (double *)(v21 + 11536);
  if ((NK_Init_Cov_Mat(v171, (int *)&v403, v20[3], v387, v21 + 344, v156, v21 + 11440, v21 + 11536, *(double *)(a10 + 1000), v370, (uint64_t)(v20 + 6124)) & 1) == 0)
  {
    NK_Prop_Cov_Mat(*((double *)v20 + 82), (double *)(v21 + 344));
    NK_Add_Nominal_PN(v21, (uint64_t)(v20 + 156), *((unsigned __int8 *)v20 + 600), (double *)(v21 + 32), (double *)(v21 + 344), v156, (double *)v20 + 3062);
    if (*(unsigned char *)(v21 + 128))
    {
      int v172 = *((unsigned __int8 *)v20 + 960);
      uint64_t v402 = *(void *)(v21 + 20);
      NK_Init_Cov_Mat(v172, (int *)&v402, v20[3], v387, v21 + 344, v156, (uint64_t)v365, (uint64_t)v366, *(double *)(a10 + 1000), v370, (uint64_t)(v20 + 6124));
    }
  }
  v391 = (double *)(v21 + 344);
  v373 = (double *)(v20 + 6124);
  v367 = (double *)(v20 + 156);
  bzero(v20 + 270, 0x6C0uLL);
  NK_Comp_DR_Meas(0x30u, v20[11], (unsigned __int16 *)(v385 + 1036), (double *)(v385 + 2384), (double *)(v385 + 1616), (unsigned __int16 *)(v385 + 316), (int *)(v385 + 412), (double *)(v21 + 8312), *((double *)v20 + 82), (unsigned char *)(v21 + 10424), (double *)v20 + 15, (unsigned char *)v20 + 14016);
  uint64_t v401 = *(void *)(v21 + 20);
  *((unsigned char *)v389 + 909) = NK_PrePro_SV_Meas(&v401, v388 + 33605, v385, v376, v393, a10, v372, (uint64_t)a11, v388, (char *)v21, (int *)v20);
  NK_Set_Environ_Severity(v385, a10, v21, (uint64_t)v20);
  LOBYTE(v360) = *(unsigned char *)(a10 + 65);
  NK_Set_PR_Meas_Var(v385 + 76, (uint64_t)(v20 + 716), v385 + 604, v385 + 700, v385 + 796, v385 + 844, v385 + 940, *((double *)v20 + 118), v385 + 1036, v385 + 1132, (uint64_t)v20 + 978, (unsigned int *)(v21 + 2088), v360, *(_DWORD *)(a10 + 60), 48, (uint64_t)(v20 + 824));
  int v173 = (unsigned __int8 *)v385;
  NK_Set_DO_Meas_Var(v385 + 76, (uint64_t)(v20 + 2110), v385 + 604, v385 + 700, v385 + 796, v385 + 940, v385 + 1036, v385 + 412, v385 + 1132, v385 + 316, (uint64_t)v20 + 978, 48, (uint64_t)(v20 + 2218));
  v394 = (unsigned __int8 *)(v385 + 76);
  uint64_t v364 = v385 + 604;
  NK_Set_DR_Meas_Var((_DWORD *)(v385 + 76), (unsigned __int8 *)v20 + 14016, (unsigned __int8 *)(v385 + 604), (unsigned __int8 *)(v385 + 796), (unsigned __int16 *)(v385 + 1036), 48, (uint64_t)(v20 + 3612));
  uint64_t v174 = v374;
  if (*(unsigned char *)(v156 + 10960) && *(_DWORD *)(v21 + 11040) <= 1u)
  {
    uint64_t v175 = 0;
    int v176 = (double *)(v20 + 826);
    uint64_t v177 = (unsigned char *)(v385 + 76);
    do
    {
      if (*((unsigned char *)v20 + v175 + 2864))
      {
        double v178 = *v176;
        if (*v176 >= dbl_22BB0E970[*v177 == 2]) {
          double v178 = dbl_22BB0E970[*v177 == 2];
        }
        *int v176 = v178;
      }
      ++v175;
      v176 += 3;
      v177 += 4;
    }
    while (v175 != 48);
  }
  double v179 = (double)(int)v20[11];
  double v180 = *(double *)(v21 + 10472) + v179 * 299792.458;
  *(double *)(v21 + 10472) = v180;
  double v181 = *(double *)(v21 + 8280) + v179 * 299792.458;
  *(double *)(v21 + 8280) = v181;
  double v182 = *(double *)(v21 + 8296) + v179 * 299792.458;
  *(double *)(v21 + 8296) = v182;
  Corr_Old_PR_Est(v394, *(unsigned __int8 *)(v156 + 8144), *(unsigned __int8 *)(v156 + 8146), *(unsigned __int8 *)(v156 + 8160), *(unsigned __int8 *)(v156 + 8145), 0x30u, (double *)(v21 + 7888), (const double *)(v21 + 10480), *(double *)(v21 + 8304), v180, v181, v182, (double *)(v21 + 8696), (unsigned char *)(v21 + 9848), (double *)(v21 + 10040));
  NK_Comp_PR_DO_Res(v385, v376, (double *)v388, a10, v372, v21, (uint64_t)v20);
  if (!*((unsigned char *)v20 + 768) || !*((unsigned char *)v20 + 769) || !*((unsigned char *)v20 + 770)) {
    NK_Set_Constell_Clock_Bias((double *)v394, (uint64_t)v20, v388, *(unsigned char *)(v21 + 233), (uint64_t)v391);
  }
  v382 = v20 + 3490;
  v381 = v20 + 702;
  NK_Comp_DR_Res(v385, v21, (uint64_t)v20);
  if (!*(unsigned char *)(v21 + 128)) {
    NK_Add_SV_ARes_PN_ClkDrift(v21, (uint64_t)v20, *(double *)(a10 + 120));
  }
  __int16 v368 = (unsigned int *)(v21 + 11032);
  v380 = v20 + 2096;
  NK_Reflection_Rejection_Ped(a10, v385, v21, (int *)v20);
  NK_Reduce_Num_SV(v385, v21, (uint64_t)v20, (uint64_t)a11);
  NK_Dopp_Outlier(v385, v21, (uint64_t)v20);
  NK_SV_Res_RTests_FDist(*(unsigned int *)(a10 + 60), v21, (uint64_t)v20);
  *(_WORD *)v531 = 0;
  *(void *)&v531[3472] = 0;
  v531[3480] = 0;
  memset(&v531[3400], 0, 65);
  *(void *)&v531[3568] = 0;
  v531[3576] = 0;
  *(_DWORD *)&v531[3488] = 0;
  memset(&v531[3496], 0, 65);
  bzero(&v531[8], 0xD3CuLL);
  memset(&v531[3584], 0, 24);
  NK_Least_Squares_Check();
  NK_Least_Squares_Publish_Soln((uint64_t)(v20 + 6404), (uint64_t)v531);
  memcpy((void *)(v378 + 2432), &v531[8], 0x180uLL);
  memcpy((void *)(v378 + 2816), &v531[408], 0x180uLL);
  NK_Least_Squares_Cross_Check(v394, v21, (uint64_t)v20, (double *)v531);
  if (*((unsigned char *)v20 + 31344) && (!*((unsigned char *)v20 + 768) || !*((unsigned char *)v20 + 769) || !*((unsigned char *)v20 + 770))) {
    NK_Set_Constell_Clock_Bias((double *)v394, (uint64_t)v20, v388, *(unsigned char *)(v21 + 233), (uint64_t)v391);
  }
  NK_Least_Squares_Check();
  NK_Least_Squares_Publish_Soln(v378 + 288, (uint64_t)v531);
  NK_Least_Squares_Check();
  NK_Least_Squares_Publish_Soln(v378 + 824, (uint64_t)v531);
  NK_Least_Squares_Check();
  NK_Least_Squares_Publish_Soln(v378 + 1360, (uint64_t)v531);
  NK_Least_Squares_Check();
  NK_Least_Squares_Publish_Soln(v378 + 1896, (uint64_t)v531);
  NK_SV_Meas_IVar((void *)1, (uint64_t)v394, (uint64_t)(v20 + 5008), v391, (uint64_t)v381, *((double *)v20 + 82));
  NK_SV_Meas_IVar((void *)2, (uint64_t)v394, (uint64_t)(v20 + 5008), v391, (uint64_t)v380, *((double *)v20 + 82));
  uint64_t v379 = (uint64_t)(v20 + 5008);
  NK_SV_Meas_IVar((void *)3, (uint64_t)v394, (uint64_t)(v20 + 5008), v391, (uint64_t)v382, *((double *)v20 + 82));
  NK_Bit_Sync_Check((char *)v385, v21, (uint64_t)v20, (uint64_t)a11);
  NK_Range_Chip_Check((char *)v385, v21, (uint64_t)v20, (uint64_t)a11);
  uint64_t v183 = 0;
  unsigned __int16 v184 = v20 + 5689;
  do
  {
    int v185 = (char *)v20 + v183;
    if (*((unsigned char *)v20 + v183 + 2960) && !v185[49])
    {
      v185[2960] = 0;
      --*((unsigned char *)v20 + 2811);
    }
    ++v183;
  }
  while (v183 != 48);
  unsigned int v187 = *(_DWORD *)(v21 + 20);
  unsigned int v186 = *(_DWORD *)(v21 + 24);
  if (v187 <= v186)
  {
    switch(v187)
    {
      case 0u:
        goto LABEL_231;
      case 1u:
        if (!v186) {
          break;
        }
        goto LABEL_231;
      case 2u:
        if (v186 > 1) {
          goto LABEL_231;
        }
        break;
      case 3u:
        if (v186 > 2) {
          goto LABEL_231;
        }
        break;
      case 4u:
        if (v186 - 5 < 3) {
          goto LABEL_231;
        }
        break;
      case 5u:
        if ((v186 & 0xFFFFFFFE) == 6) {
          goto LABEL_231;
        }
        break;
      case 6u:
        if (v186 != 7) {
          break;
        }
LABEL_231:
        if (*(_DWORD *)(v21 + 11032) <= *(unsigned __int16 *)(v21 + 16) && v20[242] == 1)
        {
          unsigned int v231 = *(_DWORD *)(v21 + 140);
          if (v231 >= *(_DWORD *)(v21 + 144)) {
            unsigned int v231 = *(_DWORD *)(v21 + 144);
          }
          if (v231 >= *(_DWORD *)(v21 + 148)) {
            unsigned int v231 = *(_DWORD *)(v21 + 148);
          }
          if (v231 > 0xA) {
            goto LABEL_96;
          }
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  NK_SV_Res_RTests(v385, v21, (uint64_t)v20, (uint64_t)a11);
LABEL_96:
  NK_SV_Res_RTests_Riskier_SVs(v385, (uint64_t)v20);
  uint64_t v188 = *((unsigned __int8 *)v20 + 960);
  uint64_t v400 = *(void *)(v21 + 20);
  NK_Check_Num_SV_Res(v188, &v400, *(unsigned __int8 *)(v21 + 2), *((unsigned __int8 *)v20 + 22992), v20[5750], *(_DWORD *)(v21 + 11048), (uint64_t)v381, (uint64_t)v382, *((double *)v20 + 2880), (uint64_t)v380);
  uint64_t v189 = 0;
  unsigned __int16 v190 = v20 + 3528;
  do
  {
    if (!*((unsigned char *)v190 + v189)) {
      goto LABEL_100;
    }
    unsigned int v191 = v20[v189 + 764];
    if (v191 - 1 < 0x1D) {
      goto LABEL_99;
    }
    if (v191)
    {
      EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_99:
      *(double *)&v20[2 * v189 + 4500] = *(double *)&v20[2 * v189 + 4500] + 1.0;
      *((unsigned char *)v190 + v189 + 3840) = 1;
    }
LABEL_100:
    ++v189;
  }
  while (v189 != 48);
  uint64_t v192 = a9;
  if (*v386
    || (NK_Add_SV_ARes_PN(*(unsigned int *)(a9 + 4), *(unsigned __int8 *)(a9 + 17), v385, v21, (uint64_t)v20, *(_DWORD *)(a10 + 60)), *(unsigned char *)(v21 + 128)))
  {
    int v193 = *((unsigned __int8 *)v20 + 960);
    uint64_t v399 = *(void *)(v21 + 20);
    NK_Init_Cov_Mat(v193, (int *)&v399, v20[3], v387, (uint64_t)v391, (uint64_t)v386, (uint64_t)v365, (uint64_t)v366, *(double *)(a10 + 1000), v370, (uint64_t)v373);
  }
  uint64_t v194 = v390;
  if (!*(unsigned char *)(v21 + 6) && *((unsigned __int8 *)v20 + 2811) >= 6u && !*(unsigned char *)(v21 + 233) && v20[3] - 3 <= 2)
  {
    double v195 = *((double *)v20 + 3066) * 25.0;
    *((double *)v20 + 3066) = v195;
    *(double *)(v21 + 456) = v195;
    EvLog("Nav_Kalman_Update: Freeing-up dT Synch ");
    double v196 = *((double *)v20 + 3062) * 25.0;
    *((double *)v20 + 3062) = v196;
    *(double *)(v21 + 344) = v196;
    double v197 = *((double *)v20 + 3063) * 25.0;
    *((double *)v20 + 3063) = v197;
    *(double *)(v21 + 360) = v197;
    double v198 = *((double *)v20 + 3064) * 25.0;
    *((double *)v20 + 3064) = v198;
    *(double *)(v21 + 384) = v198;
  }
  NK_Get_Ext_Time(*v20, (uint64_t)v20, v21);
  NK_DeCor_Ext_Meas(v21, (uint64_t)v20, v199);
  char v371 = NK_Tunnel_Assist(v21, (int *)v20);
  memcpy((void *)(v21 + 872), v391, 0x210uLL);
  *(_OWORD *)(v21 + 1400) = 0u;
  *(_OWORD *)(v21 + 1416) = 0u;
  *(_OWORD *)(v21 + 1432) = 0u;
  *(_OWORD *)(v21 + 1448) = 0u;
  *(_OWORD *)(v21 + 1464) = 0u;
  *(_OWORD *)(v21 + 1480) = 0u;
  v392 = (float64x2_t *)(v21 + 872);
  if (*((unsigned char *)v20 + 22776)
    && KFSt_Meas_Update(4u, 0xBu, (unsigned __int8 *)v20 + 22776, v392->f64, (_WORD *)(v21 + 10988), *((double *)v20 + 99)))
  {
    *(_DWORD *)(v390 + 24) = v20[5695];
  }
  double v200 = *((double *)v20 + 3066);
  if (v200 > 0.000000001
    && (*((double *)v20 + 3067) < 1600000000.0
     && *((double *)v20 + 3068) < 1600000000.0
     && *((double *)v20 + 3069) < 1600000000.0
     || *(unsigned char *)v387 && *((double *)v20 + 2880) < 1600000000.0)
    && ((double v201 = 0.0001, *((unsigned char *)v20 + 48) == 2)
     || *((unsigned char *)v20 + 16)
     || *((unsigned char *)v20 + 22776) && v20[5695] == 1 && *((double *)v20 + 2852) < 0.00000004)
    || *((unsigned char *)v20 + 48) && v200 > 0.9 && (double v201 = 1.0, *v377))
  {
    uint64_t v202 = *((void *)v20 + 99);
    __src[0] = 0.0;
    memset(&v533[6], 0, 168);
    memset(&v533[3], 0, 40);
    memset(v533, 0, 32);
    v533[2] = 0x3FF0000000000000uLL;
    *((void *)&v533[5] + 1) = v202;
    umeas((BOOL)v392, 0xBu, v201, (double *)v533, (double *)v531, v532, __src, 1.0e20);
    *(_DWORD *)(v390 + 24) = 2;
  }
  v362 = (unsigned __int8 *)(v20 + 5712);
  int v203 = (double *)(v21 + 872);
  if (!*((unsigned char *)v20 + 22848)) {
    goto LABEL_147;
  }
  uint64_t v204 = 0;
  int v205 = 0;
  int v206 = 0;
  int v207 = 0;
  unsigned __int16 v208 = (unsigned __int8 *)(v385 + 76);
  while (2)
  {
    if (*((unsigned char *)v20 + v204 + 2960))
    {
      unsigned int v209 = *v208;
      if (v209 > 6) {
        goto LABEL_140;
      }
      if (((1 << v209) & 0x5A) != 0)
      {
        ++v207;
        goto LABEL_141;
      }
      if (v209 == 2)
      {
        ++v206;
      }
      else
      {
        if (v209 == 5)
        {
          ++v205;
          goto LABEL_141;
        }
LABEL_140:
        EvCrt_Illegal_Default("Nav_Kalman_Update", 0x4BBu);
      }
    }
LABEL_141:
    ++v204;
    v208 += 4;
    if (v204 != 48) {
      continue;
    }
    break;
  }
  if (v207 || !(v206 | v205))
  {
    int v203 = (double *)(v21 + 872);
    BOOL v210 = KFSt_Meas_Update(0, 0xBu, v362, v392->f64, (_WORD *)(v21 + 10990), *((double *)v20 + 92) * 299792458.0);
    int v173 = (unsigned __int8 *)v385;
    uint64_t v192 = a9;
    uint64_t v194 = v390;
    uint64_t v174 = v374;
    goto LABEL_145;
  }
  int v173 = (unsigned __int8 *)v385;
  uint64_t v194 = v390;
  int v203 = (double *)(v21 + 872);
  uint64_t v174 = v374;
  if (v206)
  {
    BOOL v210 = KFSt_Meas_Update(1u, 0xBu, v362, v392->f64, (_WORD *)(v21 + 10990), *((double *)v20 + 93) * 299792458.0);
    uint64_t v192 = a9;
LABEL_145:
    unsigned __int16 v184 = v20 + 5689;
    if (v210) {
LABEL_146:
    }
      *(_DWORD *)(v194 + 28) = v184[24];
  }
  else
  {
    uint64_t v192 = a9;
    unsigned __int16 v184 = v20 + 5689;
    if (v205
      && KFSt_Meas_Update(2u, 0xBu, v362, v392->f64, (_WORD *)(v21 + 10990), *((double *)v20 + 94) * 299792458.0))
    {
      goto LABEL_146;
    }
  }
LABEL_147:
  if (*((unsigned char *)v20 + 2811))
  {
    double v211 = *v373;
    BOOL v212 = *v373 < 90000.0 && *((double *)v20 + 3063) < 90000.0;
    BOOL v213 = !*(_DWORD *)(v21 + 11048)
        && (int v222 = *(char *)(v383 + 408), v222 >= 1)
        && *(char *)(v383 + 407) >= 1
        && *(unsigned __int8 *)(v383 + 407) + v222 < 6;
    if (v212 || v213)
    {
      *((unsigned char *)v375 + 144) = 2;
      v375[37] = 1;
      NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v388);
      double v211 = *((double *)v20 + 3062);
    }
    BOOL v214 = v211 < 90000.0 && *((double *)v20 + 3064) < 90000.0;
    BOOL v215 = !*(_DWORD *)(v21 + 11048)
        && (int v223 = *(char *)(v383 + 410), v223 >= 1)
        && *(char *)(v383 + 407) >= 1
        && *(unsigned __int8 *)(v383 + 407) + v223 < 6;
    if (v214 || v215)
    {
      *((unsigned char *)v375 + 144) = 4;
      v375[37] = 4;
      NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v388);
    }
    if (*((double *)v20 + 3063) < 90000.0 && *((double *)v20 + 3064) < 90000.0)
    {
      *((unsigned char *)v375 + 144) = 4;
      v375[37] = 5;
      NK_IntConstel_TO_IntMeas((char *)v21, (uint64_t)v20, v388);
    }
  }
  if (*((unsigned char *)v184 + 164))
  {
    double v216 = *((double *)v20 + 95) * 299792458.0;
    double v217 = *((double *)v20 + 3065);
    if (v217 <= 80.8879661)
    {
      *((unsigned char *)v184 + 164) = 0;
      *((unsigned char *)v184 + 180) = 1;
      double v218 = *((double *)v20 + 2868);
      double v219 = v217 + *((double *)v20 + 2869);
      if ((v218 - v216) * (v218 - v216) > v219 * 9.0) {
        EvLog_v("Nav_Kalman_Update: WARNING: Ext ClkD %g incompatible with NK ClkD %g Unc %g", v218, v216, sqrt(v219));
      }
    }
    else if (KFSt_Meas_Update(3u, 0xBu, (unsigned __int8 *)v184 + 164, v203, (_WORD *)(v21 + 10998), v216))
    {
      *(_DWORD *)(v194 + 40) = v184[42];
    }
  }
  *((unsigned char *)v389 + 80) = NK_Map_Vector((int *)v20, v21, v192);
  if (*(unsigned char *)v387)
  {
    if (Horz_Meas_Update(5u, (double *)v20 + 100, (double *)v20 + 104, 0xBu, v387, (BOOL)v203, (_WORD *)(v21 + 11000)))
    {
      *(_DWORD *)(v194 + 48) = v184[60];
      if (*(unsigned char *)(v194 + 244) && *((double *)v20 + 2880) < 160000.0) {
        *(unsigned char *)(v194 + 252) = 1;
      }
      if (*(unsigned char *)(v194 + 276) && *((double *)v20 + 2880) < 160000.0) {
        *(unsigned char *)(v194 + 284) = 1;
      }
    }
    else
    {
      *(_DWORD *)(v194 + 248) = 3;
      if (*(unsigned char *)(v194 + 276)) {
        *(_DWORD *)(v194 + 280) = 3;
      }
      if (v184[61] - 3 <= 1) {
        *(_DWORD *)(p_NA + 696) = 2;
      }
      double v220 = *((double *)v20 + 2886) * *((double *)v20 + 2886) + *((double *)v20 + 2885) * *((double *)v20 + 2885);
      if (v220 > *((double *)v20 + 2883))
      {
        uint64_t v221 = p_NA;
        *(double *)(p_NA + 640) = v220;
        *(double *)(v221 + 648) = v220;
      }
    }
  }
  if (*(unsigned char *)v375)
  {
    if (Vert_Meas_Update(5u, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v375, v203, (_WORD *)(v21 + 11002), *((double *)v20 + 102)))
    {
      *(_DWORD *)(v194 + 52) = v375[1];
      if (!*(unsigned char *)(v194 + 236) && *(unsigned char *)(v194 + 260) && *((double *)v20 + 2894) < 160000.0) {
        *(unsigned char *)(v194 + 268) = 1;
      }
    }
    else if (*(unsigned char *)(v194 + 236))
    {
      *(unsigned char *)(v194 + 236) = 0;
      *(_DWORD *)(v194 + 232) = 3;
    }
    else if (v375[1] == 1)
    {
      *(_DWORD *)(v194 + 264) = 3;
    }
  }
  long long v224 = (unsigned __int8 *)(v375 + 50);
  if (*(unsigned char *)v184)
  {
    *((unsigned char *)v375 + 200) = 1;
    v375[51] = 1;
    v375[54] = *v20;
    *((_OWORD *)v20 + 1459) = xmmword_22BB0E980;
    *((void *)v20 + 2922) = 0x4022000000000000;
LABEL_209:
    if (Speed_Meas_Update(8u, (double *)v20 + 86, 0xBu, v224, v203, (_WORD *)(v21 + 11010), 1.0)) {
      *(_DWORD *)(v194 + 68) = v375[51];
    }
  }
  else if (*v224)
  {
    goto LABEL_209;
  }
  if (*(unsigned char *)v174)
  {
    if (*(_DWORD *)(v21 + 11116) != 3)
    {
      double v225 = *((double *)v20 + 3092);
      double v226 = 0.0;
      uint64_t v227 = 1312;
      do
      {
        double v226 = v226 + *(double *)(v21 + 8 * v227) * *(double *)(v21 + 8 * v227);
        unint64_t v228 = v227 - 1309;
        --v227;
      }
      while (v228 > 1);
      if (v225 < 45.0 && *((double *)v20 + 2927) > 0.75)
      {
        double v229 = *((double *)v20 + 118);
        if (v229 > 0.75 && *((double *)v20 + 3226) > 0.75 && sqrt(v226) > 0.5)
        {
          long double v230 = cos(v225 * 0.0174532925);
          if (GSpeed_Meas_Update(8, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v174, (BOOL)v203, (_WORD *)(v21 + 11014), v229, *(double *)(v21 + 11192), 1.0, 1.0 / v230))
          {
            *(_DWORD *)(v194 + 76) = v174[1];
          }
          else if (*(unsigned char *)(v194 + 316))
          {
            *(unsigned char *)(v194 + 316) = 0;
            *(_DWORD *)(v194 + 312) = 3;
          }
        }
      }
    }
  }
  if (*((unsigned char *)v375 + 72))
  {
    if (Vert_Meas_Update(8u, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v375 + 72, v203, (_WORD *)(v21 + 11004), -*((double *)v20 + 116)))
    {
      *(_DWORD *)(v194 + 56) = v375[19];
    }
    else if (*(unsigned char *)(v194 + 332))
    {
      *(unsigned char *)(v194 + 332) = 0;
      *(_DWORD *)(v194 + 328) = 3;
    }
  }
  if (*((unsigned char *)v174 + 72))
  {
    double v232 = *((double *)v20 + 119);
    *((double *)v20 + 2938) = v232;
    if (Track_Meas_Update(8, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v174 + 72, (BOOL)v203, (_WORD *)(v21 + 11018), v232, *((double *)v20 + 118), 1.0))
    {
      *(_DWORD *)(v194 + 84) = v174[19];
    }
    else if (*(unsigned char *)(v194 + 348))
    {
      *(unsigned char *)(v194 + 348) = 0;
      *(_DWORD *)(v194 + 344) = 3;
    }
  }
  int v234 = *(_DWORD *)(v21 + 20);
  unsigned int v233 = *(_DWORD *)(v21 + 24);
  if (v234 != v233)
  {
    switch(v234)
    {
      case 0:
        goto LABEL_257;
      case 1:
        if (v233) {
          goto LABEL_257;
        }
        break;
      case 2:
        if (v233 <= 1) {
          break;
        }
        goto LABEL_257;
      case 3:
        if (v233 <= 2) {
          break;
        }
        goto LABEL_257;
      case 4:
        if (v233 - 5 >= 3) {
          break;
        }
        goto LABEL_257;
      case 5:
        if ((v233 & 0xFFFFFFFE) != 6) {
          break;
        }
        goto LABEL_257;
      case 6:
        if (v233 != 7) {
          break;
        }
LABEL_257:
        NK_Define_Meas_Innov_Sat_Thresh((uint64_t)v20, v21, (uint64_t)v367);
        break;
      default:
        break;
    }
  }
  if (*(unsigned char *)v184 && v20[242] == 1)
  {
    uint64_t v235 = 0x3FFFFFFFFFFFFFA0;
    uint64_t v236 = 2864;
    uint64_t v237 = 8440;
    uint64_t v238 = 14016;
    do
    {
      if (*((unsigned char *)v20 + v236))
      {
        long long v239 = &v20[v235];
        double v240 = *(double *)&v20[v235 + 1304];
        if (fabs(v240) < 300.0)
        {
          double v241 = v240 * 0.5 * (v240 * 0.5);
          if (*((double *)v239 + 904) > v241) {
            double v241 = *((double *)v239 + 904);
          }
          *((double *)v239 + 904) = v241;
        }
      }
      if (*((unsigned char *)v20 + v238))
      {
        long long v242 = &v20[v235];
        double v243 = *(double *)&v20[v235 + 4092];
        if (fabs(v243) < 20.0)
        {
          double v244 = v243 * 0.5 * (v243 * 0.5);
          if (*((double *)v242 + 2298) > v244) {
            double v244 = *((double *)v242 + 2298);
          }
          *((double *)v242 + 2298) = v244;
        }
      }
      if (*((unsigned char *)v20 + v237))
      {
        long long v245 = &v20[v235];
        double v246 = *(double *)&v20[v235 + 2698];
        if (fabs(v246) < 20.0)
        {
          double v247 = v246 * 0.5 * (v246 * 0.5);
          if (*((double *)v245 + 1601) > v247) {
            double v247 = *((double *)v245 + 1601);
          }
          *((double *)v245 + 1601) = v247;
        }
      }
      ++v237;
      ++v238;
      ++v236;
      v235 += 2;
    }
    while (v235 * 4);
  }
  int v249 = *(_DWORD *)(v21 + 20);
  unsigned int v248 = *(_DWORD *)(v21 + 24);
  if (v249 != v248)
  {
    switch(v249)
    {
      case 0:
        goto LABEL_300;
      case 1:
        if (!v248) {
          goto LABEL_309;
        }
        goto LABEL_300;
      case 2:
        if (v248 <= 1) {
          goto LABEL_309;
        }
        goto LABEL_300;
      case 3:
        if (v248 <= 2) {
          goto LABEL_309;
        }
        goto LABEL_300;
      case 4:
        if (v248 - 5 >= 3) {
          goto LABEL_309;
        }
        goto LABEL_300;
      case 5:
        if ((v248 & 0xFFFFFFFE) != 6) {
          goto LABEL_309;
        }
        goto LABEL_300;
      case 6:
        if (v248 == 7)
        {
LABEL_300:
          memset_pattern16(v20 + 2998, &unk_22BB0E9A0, 0x180uLL);
          memset_pattern16(v20 + 4392, &unk_22BB0E9A0, 0x180uLL);
          if (!*(unsigned char *)(v21 + 233)
            && *(_DWORD *)(v21 + 11032) <= *(unsigned __int16 *)(v21 + 16)
            && v20[242] == 1)
          {
            unsigned int v250 = *(_DWORD *)(v21 + 140);
            if (v250 >= *(_DWORD *)(v21 + 144)) {
              unsigned int v250 = *(_DWORD *)(v21 + 144);
            }
            if (v250 >= *(_DWORD *)(v21 + 148)) {
              unsigned int v250 = *(_DWORD *)(v21 + 148);
            }
            if (v250 >= 0xB)
            {
              NK_Meas_Outlier_Check(2, *((unsigned __int8 *)v20 + 48), 0, v380, v382);
              NK_Meas_ARP_Check(2u, v394, (uint64_t)v380, v373, v366);
            }
          }
        }
        break;
      default:
        goto LABEL_309;
    }
  }
  if (*(_DWORD *)(v21 + 11032) > *(unsigned __int16 *)(v21 + 16) || v20[242] != 1) {
    goto LABEL_317;
  }
LABEL_309:
  unsigned int v251 = *(_DWORD *)(v21 + 140);
  if (v251 >= *(_DWORD *)(v21 + 144)) {
    unsigned int v251 = *(_DWORD *)(v21 + 144);
  }
  if (v251 >= *(_DWORD *)(v21 + 148)) {
    unsigned int v251 = *(_DWORD *)(v21 + 148);
  }
  if (v251 >= 0xB && (v253 = *(_DWORD *)(v21 + 20), unsigned int v252 = *(_DWORD *)(v21 + 24), v253 != v252))
  {
    BOOL v254 = 1;
    switch(v253)
    {
      case 0:
        break;
      case 1:
        BOOL v254 = v252 != 0;
        break;
      case 2:
        BOOL v354 = v252 > 1;
        goto LABEL_584;
      case 3:
        BOOL v354 = v252 > 2;
LABEL_584:
        BOOL v254 = v354;
        break;
      case 4:
        BOOL v254 = v252 - 5 < 3;
        break;
      case 5:
        BOOL v357 = (v252 & 0xFFFFFFFE) == 6;
        goto LABEL_602;
      case 6:
        BOOL v357 = v252 == 7;
LABEL_602:
        BOOL v254 = v357;
        break;
      default:
        goto LABEL_317;
    }
  }
  else
  {
LABEL_317:
    BOOL v254 = 0;
  }
  NK_SV_Meas_Update(2, (uint64_t)v394, v379, (uint64_t)v20 + 49, (uint64_t)v380, v392, v254, (float64x2_t *)v20 + 43, *((double *)v20 + 82), (uint64_t)(v20 + 6024));
  int v256 = *(_DWORD *)(v21 + 20);
  unsigned int v255 = *(_DWORD *)(v21 + 24);
  if (v256 != v255)
  {
    switch(v256)
    {
      case 0:
        goto LABEL_333;
      case 1:
        if (!v255) {
          goto LABEL_342;
        }
        goto LABEL_333;
      case 2:
        if (v255 <= 1) {
          goto LABEL_342;
        }
        goto LABEL_333;
      case 3:
        if (v255 <= 2) {
          goto LABEL_342;
        }
        goto LABEL_333;
      case 4:
        if (v255 - 5 >= 3) {
          goto LABEL_342;
        }
        goto LABEL_333;
      case 5:
        if ((v255 & 0xFFFFFFFE) != 6) {
          goto LABEL_342;
        }
        goto LABEL_333;
      case 6:
        if (v255 == 7)
        {
LABEL_333:
          if (!*(unsigned char *)(v21 + 233)
            && *(_DWORD *)(v21 + 11032) <= *(unsigned __int16 *)(v21 + 16)
            && v20[242] == 1)
          {
            unsigned int v257 = *(_DWORD *)(v21 + 140);
            if (v257 >= *(_DWORD *)(v21 + 144)) {
              unsigned int v257 = *(_DWORD *)(v21 + 144);
            }
            if (v257 >= *(_DWORD *)(v21 + 148)) {
              unsigned int v257 = *(_DWORD *)(v21 + 148);
            }
            if (v257 >= 0xB) {
              NK_Meas_ARP_Check(3u, v394, (uint64_t)v382, v373, v366);
            }
          }
        }
        break;
      default:
        goto LABEL_342;
    }
  }
  if (*(_DWORD *)(v21 + 11032) > *(unsigned __int16 *)(v21 + 16) || v20[242] != 1) {
    goto LABEL_350;
  }
LABEL_342:
  unsigned int v258 = *(_DWORD *)(v21 + 140);
  if (v258 >= *(_DWORD *)(v21 + 144)) {
    unsigned int v258 = *(_DWORD *)(v21 + 144);
  }
  if (v258 >= *(_DWORD *)(v21 + 148)) {
    unsigned int v258 = *(_DWORD *)(v21 + 148);
  }
  if (v258 >= 0xB && (v260 = *(_DWORD *)(v21 + 20), unsigned int v259 = *(_DWORD *)(v21 + 24), v260 != v259))
  {
    BOOL v261 = 1;
    switch(v260)
    {
      case 0:
        break;
      case 1:
        BOOL v261 = v259 != 0;
        break;
      case 2:
        BOOL v355 = v259 > 1;
        goto LABEL_590;
      case 3:
        BOOL v355 = v259 > 2;
LABEL_590:
        BOOL v261 = v355;
        break;
      case 4:
        BOOL v261 = v259 - 5 < 3;
        break;
      case 5:
        BOOL v358 = (v259 & 0xFFFFFFFE) == 6;
        goto LABEL_607;
      case 6:
        BOOL v358 = v259 == 7;
LABEL_607:
        BOOL v261 = v358;
        break;
      default:
        goto LABEL_350;
    }
  }
  else
  {
LABEL_350:
    BOOL v261 = 0;
  }
  NK_SV_Meas_Update(3, (uint64_t)v394, v379, (uint64_t)v20 + 49, (uint64_t)v382, v392, v261, (float64x2_t *)v20 + 43, *((double *)v20 + 82), (uint64_t)(v20 + 6024));
  NK_Update_Intermediate_Residual((void *)1, (uint64_t)v394, v21, (uint64_t)v20);
  int v263 = *(_DWORD *)(v21 + 20);
  unsigned int v262 = *(_DWORD *)(v21 + 24);
  if (v263 != v262)
  {
    switch(v263)
    {
      case 0:
        goto LABEL_366;
      case 1:
        if (!v262) {
          goto LABEL_375;
        }
        goto LABEL_366;
      case 2:
        if (v262 <= 1) {
          goto LABEL_375;
        }
        goto LABEL_366;
      case 3:
        if (v262 <= 2) {
          goto LABEL_375;
        }
        goto LABEL_366;
      case 4:
        if (v262 - 5 >= 3) {
          goto LABEL_375;
        }
        goto LABEL_366;
      case 5:
        if ((v262 & 0xFFFFFFFE) != 6) {
          goto LABEL_375;
        }
        goto LABEL_366;
      case 6:
        if (v262 == 7)
        {
LABEL_366:
          memset_pattern16(v20 + 1604, &unk_22BB0E9A0, 0x180uLL);
          if (!*(unsigned char *)(v21 + 233)
            && *(_DWORD *)(v21 + 11032) <= *(unsigned __int16 *)(v21 + 16)
            && v20[242] == 1)
          {
            unsigned int v264 = *(_DWORD *)(v21 + 140);
            if (v264 >= *(_DWORD *)(v21 + 144)) {
              unsigned int v264 = *(_DWORD *)(v21 + 144);
            }
            if (v264 >= *(_DWORD *)(v21 + 148)) {
              unsigned int v264 = *(_DWORD *)(v21 + 148);
            }
            if (v264 >= 0xB)
            {
              NK_Meas_Outlier_Check(1, *((unsigned __int8 *)v20 + 48), v381, 0, 0);
              NK_Meas_ARP_Check(1u, v394, (uint64_t)v381, v373, v365);
            }
          }
        }
        break;
      default:
        goto LABEL_375;
    }
  }
  if (*(_DWORD *)(v21 + 11032) > *(unsigned __int16 *)(v21 + 16) || v20[242] != 1) {
    goto LABEL_383;
  }
LABEL_375:
  unsigned int v265 = *(_DWORD *)(v21 + 140);
  if (v265 >= *(_DWORD *)(v21 + 144)) {
    unsigned int v265 = *(_DWORD *)(v21 + 144);
  }
  if (v265 >= *(_DWORD *)(v21 + 148)) {
    unsigned int v265 = *(_DWORD *)(v21 + 148);
  }
  if (v265 >= 0xB && (v267 = *(_DWORD *)(v21 + 20), unsigned int v266 = *(_DWORD *)(v21 + 24), v267 != v266))
  {
    long long v268 = v174;
    BOOL v269 = 1;
    switch(v267)
    {
      case 0:
        break;
      case 1:
        BOOL v269 = v266 != 0;
        break;
      case 2:
        BOOL v356 = v266 > 1;
        goto LABEL_596;
      case 3:
        BOOL v356 = v266 > 2;
LABEL_596:
        BOOL v269 = v356;
        break;
      case 4:
        BOOL v269 = v266 - 5 < 3;
        break;
      case 5:
        BOOL v359 = (v266 & 0xFFFFFFFE) == 6;
        goto LABEL_612;
      case 6:
        BOOL v359 = v266 == 7;
LABEL_612:
        BOOL v269 = v359;
        break;
      default:
        goto LABEL_383;
    }
  }
  else
  {
LABEL_383:
    long long v268 = v174;
    BOOL v269 = 0;
  }
  NK_SV_Meas_Update(1, (uint64_t)v394, v379, (uint64_t)v20 + 49, (uint64_t)v381, v392, v269, (float64x2_t *)v20 + 43, 0.0, (uint64_t)(v20 + 6024));
  *(unsigned char *)(v194 + 364) = *((unsigned char *)v389 + 409);
  NK_Reject_DO_For_Rejected_PR(v379, (uint64_t)v394, v21, (uint64_t)v20);
  *((_OWORD *)v20 + 1251) = 0u;
  int v271 = *(_DWORD *)(v21 + 20);
  unsigned int v270 = *(_DWORD *)(v21 + 24);
  if (v271 == v270) {
    goto LABEL_406;
  }
  switch(v271)
  {
    case 0:
      break;
    case 1:
      if (!v270) {
        goto LABEL_406;
      }
      break;
    case 2:
      if (v270 <= 1) {
        goto LABEL_406;
      }
      break;
    case 3:
      if (v270 <= 2) {
        goto LABEL_406;
      }
      break;
    case 4:
      if (v270 - 5 >= 3) {
        goto LABEL_406;
      }
      break;
    case 5:
      if ((v270 & 0xFFFFFFFE) != 6) {
        goto LABEL_406;
      }
      break;
    case 6:
      if (v270 != 7) {
        goto LABEL_406;
      }
      break;
    default:
      goto LABEL_406;
  }
  if (*(_DWORD *)(v21 + 11032) > *(unsigned __int16 *)(v21 + 16) || v20[242] != 1) {
    goto LABEL_406;
  }
  unsigned int v272 = *(_DWORD *)(v21 + 140);
  if (v272 >= *(_DWORD *)(v21 + 144)) {
    unsigned int v272 = *(_DWORD *)(v21 + 144);
  }
  if (v272 >= *(_DWORD *)(v21 + 148)) {
    unsigned int v272 = *(_DWORD *)(v21 + 148);
  }
  if (v272 <= 0xA) {
LABEL_406:
  }
    NK_SV_Meas_Check(v173, v21, (uint64_t)v20);
  unsigned int v273 = NK_SV_Meas_AP_Stats((void *)1, (uint64_t)v394, v21, (uint64_t)v20);
  *(unsigned char *)(v194 + 1) = v273;
  *(unsigned char *)(v194 + 2) = 0;
  if (v273)
  {
    *(unsigned char *)(v194 + 2) = v273 - 1;
    if (*(unsigned char *)(v194 + 7) && *(unsigned char *)(v194 + 12) && !*(_DWORD *)(v194 + 32)) {
      *(unsigned char *)(v194 + 2) = v273 - 2;
    }
    if (!*(unsigned char *)(v21 + 6)) {
      *(unsigned char *)(v21 + 6) = 1;
    }
  }
  if (*((double *)v20 + 355) > 10000.0 && *(unsigned char *)v387 && v20[5749] == 1)
  {
    char v274 = *((double *)v20 + 2883) >= 900000000.0 ? 1 : v371 | v363;
    if ((v274 & 1) == 0)
    {
      *((void *)v20 + 2883) = 0x41E2A05F20000000;
      int64x2_t v275 = vdupq_n_s64(0x41E2A05F20000000uLL);
      *((int64x2_t *)v20 + 1440) = v275;
      *((void *)v20 + 2884) = 0x41E2A05F20000000;
      uint64_t v276 = p_NA;
      *(int64x2_t *)(p_NA + 640) = v275;
      if (*(unsigned char *)v375)
      {
        double v277 = dbl_22BB0E990[*(_DWORD *)(v21 + 20) < 5u];
        if (*((double *)v20 + 2895) < v277)
        {
          *((double *)v20 + 2894) = v277;
          *((double *)v20 + 2895) = v277;
          *(double *)(v276 + 688) = v277;
        }
      }
      if ((int)v20[241] >= 2) {
        v20[241] = 1;
      }
      *(unsigned char *)(v21 + 128) = 1;
      *(_DWORD *)(v21 + 132) = 38;
    }
  }
  if (v273 >= 3 && *v368 >= 0x1F && *((unsigned __int8 *)v20 + 977) >= 0x1Bu)
  {
    char v278 = *(unsigned char *)v387 ? v371 | v363 : 1;
    if ((v278 & 1) == 0 && v20[5749] == 1)
    {
      *(_WORD *)(p_NA + 10) = 0;
      *(unsigned char *)v387 = 0;
      *(_DWORD *)(v194 + 248) = 20;
      *(unsigned char *)v375 = 0;
      *(_DWORD *)(v194 + 264) = 20;
      if ((int)v20[241] >= 2) {
        v20[241] = 1;
      }
      *(unsigned char *)(v21 + 128) = 1;
      *(_DWORD *)(v21 + 132) = 39;
    }
  }
  char v279 = NK_SV_Meas_AP_Stats((void *)2, (uint64_t)v394, v21, (uint64_t)v20);
  *(unsigned char *)(v194 + 3) = v279;
  *(unsigned char *)(v194 + 5) = v279;
  char v280 = NK_SV_Meas_AP_Stats((void *)3, (uint64_t)v394, v21, (uint64_t)v20);
  *(unsigned char *)(v194 + 4) = v280;
  *(unsigned char *)(v194 + 5) = *(unsigned char *)(v194 + 3) + v280;
  *(unsigned char *)(v194 + 10) = *(unsigned char *)(v194 + 9) + *(unsigned char *)(v194 + 8);
  *(unsigned char *)(v194 + 15) = *(unsigned char *)(v194 + 14) + *(unsigned char *)(v194 + 13);
  *(unsigned char *)(v194 + 20) = *(unsigned char *)(v194 + 19) + *(unsigned char *)(v194 + 18);
  int v281 = NK_VVel_Aiding_Required(v21, (uint64_t)v20, (uint64_t)(v268 + 38));
  *((unsigned char *)v268 + 152) = v281;
  if (v281
    && Vert_Meas_Update(8u, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v268 + 152, v392->f64, (_WORD *)(v21 + 11004), -*((double *)v20 + 116)))
  {
    *(_DWORD *)(v194 + 56) = v268[39];
  }
  long long v282 = (long long *)(v21 + 1400);
  int v283 = NK_AltP_Aiding_Required(v21, (uint64_t)v20, (uint64_t)(v268 + 56));
  *((unsigned char *)v268 + 224) = v283;
  if (v283
    && Vert_Meas_Update(5u, (double *)v20 + 104, 0xBu, (unsigned __int8 *)v268 + 224, v392->f64, (_WORD *)(v21 + 11002), *((double *)v20 + 102)))
  {
    *(_DWORD *)(v390 + 52) = v268[57];
  }
  *(unsigned char *)v389 = 0;
  NK_Comp_DOPS(v21, (uint64_t)v20);
  long long v284 = *v282;
  *((_OWORD *)v20 + 1575) = *(_OWORD *)(v21 + 1416);
  *((_OWORD *)v20 + 1574) = v284;
  long long v285 = *(_OWORD *)(v21 + 1432);
  long long v286 = *(_OWORD *)(v21 + 1448);
  long long v287 = *(_OWORD *)(v21 + 1464);
  *((void *)v20 + 3158) = *(void *)(v21 + 1480);
  *((_OWORD *)v20 + 1578) = v287;
  *((_OWORD *)v20 + 1577) = v286;
  *((_OWORD *)v20 + 1576) = v285;
  NK_Comp_Sol_Acc(v21, (uint64_t)v20);
  NK_Static_Filter(v21, (uint64_t)v20, a10, v192);
  long long v288 = *v282;
  *((_OWORD *)v20 + 1575) = *(_OWORD *)(v21 + 1416);
  *((_OWORD *)v20 + 1574) = v288;
  long long v289 = *(_OWORD *)(v21 + 1432);
  long long v290 = *(_OWORD *)(v21 + 1448);
  long long v291 = *(_OWORD *)(v21 + 1464);
  *((void *)v20 + 3158) = *(void *)(v21 + 1480);
  *((_OWORD *)v20 + 1578) = v291;
  *((_OWORD *)v20 + 1577) = v290;
  *((_OWORD *)v20 + 1576) = v289;
  *(_OWORD *)(v21 + 1432) = 0u;
  *(_OWORD *)(v21 + 1448) = 0u;
  *(_OWORD *)(v21 + 1464) = 0u;
  *(void *)(v21 + 1480) = 0;
  *long long v282 = 0u;
  *(_OWORD *)(v21 + 1416) = 0u;
  uint64_t v398 = *(void *)(v21 + 20);
  NK_Validate_Cor((char *)v390, (double *)v20 + 3017, (uint64_t)v373, (uint64_t)(v20 + 208), (unsigned int *)&v398, *v20, (unsigned char *)(v21 + 233), v377, (uint64_t)v386, (_WORD *)(v21 + 236), (uint64_t)a11, (uint64_t)(v20 + 6296), (double *)v20 + 3039, (double *)v20 + 3028, v383, (uint64_t)(v20 + 6318), v20 + 6340, (unsigned int *)(v383 + 198), v20 + 6342,
    v20 + 6343,
    (unsigned int *)(v383 + 210),
    v21 + 6696);
  NK_ARP_Kalman(v394, (uint64_t)v20, v21);
  if (*((double *)v20 + 3017) > 1000000000.0)
  {
    *((void *)v20 + 3148) = 0;
    *(unsigned char *)uint64_t v383 = 0;
  }
  if (!*(unsigned char *)(v390 + 12) && !*(_DWORD *)(v390 + 28) && *((unsigned char *)v375 + 144) == 2 && !v375[37]
    || *((double *)v20 + 3018) > 1000000000.0)
  {
    *((void *)v20 + 3149) = 0;
    *(unsigned char *)(v383 + 1) = 0;
  }
  if (!*(unsigned char *)(v390 + 17) && !*(_DWORD *)(v390 + 28) && *((unsigned char *)v375 + 144) == 4 && !v375[37]
    || *((double *)v20 + 3019) > 1000000000.0)
  {
    *((void *)v20 + 3150) = 0;
    *(unsigned char *)(v383 + 2) = 0;
  }
  unsigned char *v384 = *(unsigned char *)v383;
  v384[2] = *(unsigned char *)(v383 + 1);
  v384[16] = *(unsigned char *)(v383 + 2);
  v384[1] = *(unsigned char *)(v383 + 5);
  *(void *)(v21 + 10472) = *((void *)v20 + 3148);
  *(void *)(v21 + 8280) = *((void *)v20 + 3149);
  *(void *)(v21 + 8296) = *((void *)v20 + 3150);
  long long v292 = *(_OWORD *)(v20 + 6306);
  *(void *)(v21 + 10496) = *((void *)v20 + 3155);
  *(_OWORD *)(v21 + 10480) = v292;
  NK_Correct_State((double *)v20 + 3148, (unsigned char *)v383, v367);
  NK_Transform_State((uint64_t)v367);
  NK_Heading(v21, (int *)v20, *(_DWORD *)(a10 + 60));
  NK_DT_Synch_ProcNoise(v21, (uint64_t)v20);
  double v293 = *((double *)v20 + 99);
  double v294 = -0.5;
  if (v293 > 0.0) {
    double v294 = 0.5;
  }
  double v295 = v293 + v294;
  if (v295 > 2147483650.0)
  {
    int v296 = 0x7FFFFFFF;
    goto LABEL_465;
  }
  if (v295 < -2147483650.0)
  {
    int v296 = 0x80000000;
    goto LABEL_465;
  }
  int v296 = (int)v295;
  if ((int)v295)
  {
LABEL_465:
    double v297 = (double)v296;
    double v298 = (double)v296 * 0.001;
    Inc_GPS_TOW(v298, (double *)v20 + 79, (__int16 *)v20 + 323);
    *(void *)v531 = 0;
    if (!R8_EQ((const double *)v20 + 92, (const double *)v531)) {
      *((double *)v20 + 92) = *((double *)v20 + 92) + *((double *)v20 + 95) * v298;
    }
    *(void *)v531 = 0;
    if (!R8_EQ((const double *)v20 + 93, (const double *)v531)) {
      *((double *)v20 + 93) = *((double *)v20 + 93) + *((double *)v20 + 95) * v298;
    }
    *(void *)v531 = 0;
    if (!R8_EQ((const double *)v20 + 94, (const double *)v531)) {
      *((double *)v20 + 94) = *((double *)v20 + 94) + *((double *)v20 + 95) * v298;
    }
    *((double *)v20 + 99) = *((double *)v20 + 99) - v297;
  }
  unsigned int v299 = *(_DWORD *)(a10 + 948);
  unsigned int v300 = *(_DWORD *)(v383 + 198);
  unsigned int v301 = *(_DWORD *)(v383 + 210);
  uint64_t v397 = *(void *)(v21 + 20);
  unsigned int v302 = (_DWORD *)(v21 + 11028);
  NK_Set_Fix_Type((unsigned char *)v383, (double *)v20 + 3028, v390, (uint64_t)v386, v299, v300, v301, (int *)&v397, *((double *)v20 + 2880), *((double *)v20 + 2894), *(unsigned __int16 *)(v21 + 16), v371 | v363, *(_DWORD *)(v21 + 11048), v20[3], (unsigned char *)(v21 + 233), (_DWORD *)(v21 + 11028), v368, (_DWORD *)(v21 + 11024), (int *)v20 + 6147,
    (int *)v20 + 6148);
  NK_Set_TTFF(v21, (int *)v20);
  NK_Check_State(v364, v21, (uint64_t)v20);
  double v303 = *(double *)(a10 + 1000);
  uint64_t v396 = *(void *)(a10 + 52);
  NK_Limited_Reset(v21, (uint64_t)v20, &v396, v303);
  if (*((unsigned char *)v20 + 768))
  {
    uint64_t v304 = v385;
    uint64_t v305 = a12;
    goto LABEL_474;
  }
  uint64_t v304 = v385;
  uint64_t v305 = a12;
  if (*(unsigned char *)(v390 + 7))
  {
    *(void *)v531 = 0;
    if (!R8_EQ((const double *)v20 + 3148, (const double *)v531))
    {
      *((unsigned char *)v20 + 768) = 1;
      goto LABEL_474;
    }
  }
  *(void *)v531 = 0;
  if (!R8_EQ((const double *)v20 + 3148, (const double *)v531))
  {
LABEL_474:
    uint64_t v306 = (uint64_t)a11;
    goto LABEL_475;
  }
  *(void *)&v533[0] = 0;
  uint64_t v306 = (uint64_t)a11;
  if (!R8_EQ((const double *)v20 + 92, (const double *)v533)) {
    *((void *)v20 + 92) = 0;
  }
LABEL_475:
  if (!*((unsigned char *)v20 + 769))
  {
    if (*(unsigned char *)(v390 + 12) && (*(void *)v531 = 0, !R8_EQ((const double *)v20 + 3149, (const double *)v531)))
    {
      *((unsigned char *)v20 + 769) = 1;
    }
    else
    {
      *(void *)v531 = 0;
      if (R8_EQ((const double *)v20 + 3149, (const double *)v531))
      {
        *(void *)&v533[0] = 0;
        if (!R8_EQ((const double *)v20 + 93, (const double *)v533)) {
          *((void *)v20 + 93) = 0;
        }
      }
    }
  }
  if (!*((unsigned char *)v20 + 770))
  {
    if (*(unsigned char *)(v390 + 17) && (*(void *)v531 = 0, !R8_EQ((const double *)v20 + 3150, (const double *)v531)))
    {
      *((unsigned char *)v20 + 770) = 1;
    }
    else
    {
      *(void *)v531 = 0;
      if (R8_EQ((const double *)v20 + 3150, (const double *)v531))
      {
        *(void *)&v533[0] = 0;
        if (!R8_EQ((const double *)v20 + 94, (const double *)v533)) {
          *((void *)v20 + 94) = 0;
        }
      }
    }
  }
  uint64_t v395 = *(void *)(a10 + 52);
  NK_Final_Check(v21, (uint64_t)v20, (_DWORD *)a10, v306, v304, &v395, *(double *)(a10 + 992), *(double *)(a10 + 1000));
  NK_Set_Accuracy(*(_DWORD *)(a10 + 1064), v364, v21, (uint64_t)v20);
  NK_Set_TOW_Status(v21, (uint64_t)v20);
  if (*((unsigned char *)v20 + 644))
  {
    int v307 = v20[160];
    if (v307 >= 3 && (!R8_EQ((const double *)v20 + 79, (const double *)v20 + 3) || v307 != v20[3]))
    {
      LODWORD(v533[0]) = 0;
      LODWORD(v532[0]) = 0;
      *(void *)v531 = 0;
      API_Get_UTC_Cor(1, (double *)v531);
      GPS_To_Glon_Time(0, *((__int16 *)v20 + 9), *((double *)v20 + 79), *(double *)v531, (int *)v532, (int *)v533, (double *)v20 + 98);
      *((_WORD *)v20 + 389) = LOWORD(v532[0]);
      *((_WORD *)v20 + 390) = v533[0];
      *((unsigned char *)v20 + 776) = 1;
      signed int v308 = v20[160];
      if ((int)v20[193] < v308 && (*(_DWORD *)(v388 + 8444) - 2) <= 4) {
        v20[193] = v308;
      }
    }
  }
  NK_Publish_Nav_Soln(v304, (uint64_t)v20, v21, v192);
  if (*((unsigned char *)v20 + 960)) {
    *(unsigned char *)(v21 + 28) = 1;
  }
  NK_Validate_Fix(v21, (uint64_t)v20, a10);
  *(unsigned char *)uint64_t v192 = *((unsigned char *)v389 + 896);
  int v309 = *((unsigned __int8 *)v389 + 897);
  *(unsigned char *)(v192 + 1) = v309;
  *(unsigned char *)(v192 + 18) = *(unsigned char *)(v21 + 30);
  if (v309)
  {
    *(void *)(v21 + 11256) = *(void *)(v192 + 352);
    *(_DWORD *)(v21 + 11264) = *v20;
  }
  if (*v368)
  {
    if (*(unsigned __int8 *)(v390 + 373) <= 2u) {
      ++*(_DWORD *)(v21 + 11036);
    }
  }
  else
  {
    *(_DWORD *)(v21 + 11036) = 0;
  }
  if (*(double *)(v21 + 11256) < 10.0 || *(_DWORD *)(v21 + 11036) < 4u)
  {
    if (*v302 >= 0x10u)
    {
      v384[2816] = 0;
      *(_DWORD *)(v21 + 11092) = *v20;
      *(double *)(v21 + 11096) = *((double *)v20 + 95) * 299792458.0;
      *(void *)(v21 + 11104) = *((void *)v20 + 118);
    }
  }
  else
  {
    v384[2816] = 1;
  }
  unsigned int v310 = v20[243];
  if (v310 && !*(_DWORD *)(v306 + 4)) {
    *(_DWORD *)(v306 + 4) = v310;
  }
  *(void *)(v305 + 8) = *(void *)(v192 + 32);
  *(_WORD *)(v305 + 16) = *(_WORD *)(v192 + 54);
  *(unsigned char *)(v305 + 5) = *(unsigned char *)(v192 + 52);
  *(void *)(v305 + 24) = *(void *)(v192 + 40);
  *(_DWORD *)uint64_t v305 = *(_DWORD *)(v192 + 48);
  double v311 = *((double *)v20 + 3017);
  double v312 = *((double *)v20 + 3018);
  int v313 = v311 > v312;
  if (v311 > v312) {
    double v311 = *((double *)v20 + 3018);
  }
  if (v311 > *((double *)v20 + 3019)) {
    int v313 = 2;
  }
  if (v313 == 1)
  {
    uint64_t v314 = (void *)(v192 + 152);
  }
  else if (v313)
  {
    uint64_t v314 = (void *)(v192 + 160);
  }
  else
  {
    uint64_t v314 = (void *)(v192 + 144);
  }
  *(void *)(v305 + 32) = *v314;
  *(_DWORD *)(v305 + 66) = *(_DWORD *)(v192 + 186);
  *(unsigned char *)(v305 + 64) = *(unsigned char *)(v192 + 184);
  *(void *)(v305 + 72) = *(void *)(v192 + 192);
  *(_DWORD *)(v305 + 60) = *(_DWORD *)(v192 + 180);
  *(void *)(v305 + 40) = *(void *)(v192 + 168);
  *(unsigned char *)(v305 + 4) = *((unsigned char *)v20 + 16);
  double v315 = *((double *)v20 + 3088);
  if (v315 >= 9999000.0)
  {
    uint64_t v317 = (int)v20[3];
    if (v317 >= 0xC) {
      __assert_rtn("Generate_DollarG_Message", "Nav_Kalman_Update.cpp", 3126, "FALSE");
    }
    unsigned int v316 = dword_22BB0E9B0[v317];
  }
  else
  {
    unsigned int v316 = (int)fmin(v315 * 0.00000333564095, 999999999.0);
  }
  int v318 = (char *)g_CB_GDbg;
  char v319 = 36;
  uint64_t v320 = 1u;
  do
  {
    g_CB_GDbg = (uint64_t)(v318 + 1);
    char *v318 = v319;
    int v318 = (char *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
    {
      int v318 = (char *)qword_26AE54870;
      g_CB_GDbg = qword_26AE54870;
    }
    char v319 = aG_0[v320++];
  }
  while (v320 != 4);
  sprintf_2d(&g_CB_GDbg, (int)((*((double *)v20 + 79) + 0.0005) * 1000.0));
  uint64_t v321 = (unsigned char *)g_CB_GDbg++;
  unsigned char *v321 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    g_CB_GDbg = qword_26AE54870;
  }
  sprintf_1u(&g_CB_GDbg, v20[1]);
  v322 = (unsigned char *)g_CB_GDbg++;
  unsigned char *v322 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    g_CB_GDbg = qword_26AE54870;
  }
  sprintf_2d(&g_CB_GDbg, v316);
  v323 = (unsigned char *)g_CB_GDbg++;
  unsigned char *v323 = 32;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878) {
    g_CB_GDbg = qword_26AE54870;
  }
  sprintf_1u(&g_CB_GDbg, *v20);
  v324 = (unsigned char *)g_CB_GDbg++;
  unsigned char *v324 = 10;
  v325 = (unsigned char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_26AE54878)
  {
    v325 = (unsigned char *)qword_26AE54870;
    g_CB_GDbg = qword_26AE54870;
  }
  unsigned char *v325 = 0;
  GNB_Debug_Flush_Check();
  if (!*(_DWORD *)(v21 + 144))
  {
    *(_DWORD *)(v21 + 175) = *(_DWORD *)v361;
    *(_WORD *)(v21 + 179) = *(_WORD *)(v361 + 4);
  }
  v326 = (gnss::GnssAdaptDevice *)NK_Set_Aid_Data((_DWORD *)v21, (int *)v20, v21 + 272);
  int v327 = v20[160];
  if (v327 >= 1)
  {
    v326 = (gnss::GnssAdaptDevice *)Core_Save_ApxTime(*((unsigned __int8 *)v20 + 644), v327, *((_WORD *)v20 + 323), v20[157], *((double *)v20 + 79));
    int v328 = *(_DWORD *)(v388 + 8444);
    if (v328 != 3 && (v328 - 7) >= 0xFFFFFFFB)
    {
      uint64_t v329 = 0;
      LODWORD(v330) = 0;
      uint64_t v331 = p_NV;
      uint64_t v332 = *(void *)(v388 + 8456);
      *(_OWORD *)(p_NV + 160) = *(_OWORD *)(v388 + 8440);
      *(void *)(v331 + 176) = v332;
      uint64_t v333 = v331 + 160;
      __int16 v334 = -9871;
      do
      {
        int v335 = *(unsigned __int8 *)(v333 + v329) ^ HIBYTE(v334);
        __int16 v334 = -12691 * (v334 + (*(unsigned __int8 *)(v333 + v329) ^ HIBYTE(v334))) + 22719;
        uint64_t v330 = (v330 + v335);
        ++v329;
      }
      while (v329 != 24);
      *(void *)(v331 + 152) = v330;
    }
  }
  if (*(unsigned char *)(v305 + 5) && *(__int16 *)(v305 + 16) >= 1717 && (int)v20[160] >= 9 && *v20 != *(_DWORD *)(v369 + 4))
  {
    double v336 = *((double *)v20 + 79) * 1000.0;
    double v337 = -0.5;
    if (v336 > 0.0) {
      double v337 = 0.5;
    }
    double v338 = v336 + v337;
    if (v338 <= 2147483650.0)
    {
      if (v338 >= -2147483650.0) {
        int v339 = (int)v338;
      }
      else {
        int v339 = 0x80000000;
      }
    }
    else
    {
      int v339 = 0x7FFFFFFF;
    }
    uint64_t v340 = 0;
    LODWORD(v341) = 0;
    unsigned int v342 = v339 - *v20;
    uint64_t v343 = p_NV;
    uint64_t v344 = p_NV + 22856;
    *(_DWORD *)(p_NV + 22856) = v342;
    *(double *)(v344 + 4) = *v367;
    __int16 v345 = -9871;
    do
    {
      int v346 = *(unsigned __int8 *)(v344 + v340) ^ HIBYTE(v345);
      __int16 v345 = -12691 * (v345 + (*(unsigned __int8 *)(v344 + v340) ^ HIBYTE(v345))) + 22719;
      uint64_t v341 = (v341 + v346);
      ++v340;
    }
    while (v340 != 16);
    *(void *)(v343 + 22848) = v341;
  }
  int v347 = v20[241];
  if (v347 == 3)
  {
    if (*v302 && (int)v20[160] >= 3)
    {
      if (*((double *)v20 + 3093) < 10.0)
      {
        v326 = (gnss::GnssAdaptDevice *)Core_Save_Clk_Drift(1, (int)*((double *)v20 + 79) + 604800 * *((__int16 *)v20 + 323), *((double *)v20 + 95));
        *(void *)(a10 + 992) = *((void *)v20 + 95);
        double v348 = (double)*(unsigned __int16 *)(a10 + 248) * 0.000000001;
        if (!*(_WORD *)(a10 + 248)) {
          double v348 = 0.0000001;
        }
        *(double *)(a10 + 1000) = v348;
      }
      if (*((double *)v20 + 3086) < 400.0)
      {
        *(_DWORD *)(v21 + 11056) = v20[156];
        uint64_t v349 = *((void *)v20 + 102);
        *(_OWORD *)(v21 + 11064) = *((_OWORD *)v20 + 50);
        *(void *)(v21 + 11080) = v349;
      }
    }
  }
  else if (v347 <= 1)
  {
    if (*(_WORD *)(a10 + 248))
    {
      *(double *)(a10 + 1000) = (double)*(unsigned __int16 *)(a10 + 248) * 0.000000001;
    }
    else if (*v368 >= 0x385)
    {
      *(void *)(a10 + 1000) = 0x3EA0C6F7A0B5ED8ELL;
    }
  }
  uint64_t v350 = *((void *)v20 + 2840);
  *(_DWORD *)(a10 + 1320) = v20[5682];
  *(void *)(a10 + 1312) = v350;
  uint64_t v351 = *(void *)(v20 + 5683);
  *(_DWORD *)(a10 + 1332) = v20[5685];
  *(void *)(a10 + 1324) = v351;
  uint64_t v352 = *((void *)v20 + 2843);
  *(_DWORD *)(a10 + 1344) = v20[5688];
  *(void *)(a10 + 1336) = v352;
  uint64_t result = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v326);
  if (result) {
    return NK_Set_Sens_Aug_GNSS_Input((uint64_t)v20, v21, a10, v304, v376, v372, a9, a13);
  }
  return result;
}

void *plc03_01CodecUInt(void *result, uint64_t a2, size_t __n, unsigned int *a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  int v10 = (int)result;
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int __dst = 0;
  *(_DWORD *)a6 = 0;
  uint64_t v11 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a6 + 6) = v11;
  uint64_t v12 = *(unsigned __int16 *)(a5 + 8);
  unsigned int v13 = *(unsigned __int16 *)(a5 + 10);
  signed int v14 = v13 - v12;
  if (v13 < v12 || v14 < (int)__n)
  {
    if (result == 1) {
      int v15 = 59;
    }
    else {
      int v15 = 57;
    }
    goto LABEL_6;
  }
  uint64_t v19 = (void *)(*(void *)a2 + v11);
  unsigned __int8 v20 = (void *)(*(void *)a5 + v12);
  if (__n == 2)
  {
    __int16 v30 = 2;
    memcpy_s("plc03_01CodecUInt", 158, v20, v14, v19, 2uLL);
    p_dst = &__dst;
    int v22 = 159;
    unsigned int v23 = 4;
    long long v24 = (unsigned int *)v19;
    size_t v25 = 2;
  }
  else if (__n == 1)
  {
    __int16 v30 = 1;
    memcpy_s("plc03_01CodecUInt", 151, v20, v14, v19, 1uLL);
    p_dst = &__dst;
    int v22 = 152;
    unsigned int v23 = 4;
    long long v24 = (unsigned int *)v19;
    size_t v25 = 1;
  }
  else
  {
    if ((unsigned __int16)(__n - 3) > 1u)
    {
      int v15 = 55;
LABEL_6:
      *(_DWORD *)a6 = v15;
LABEL_7:
      if (*(unsigned char *)(a6 + 144)) {
        return (void *)snprintf((char *)(a6 + 16), 0x80uLL, "%c UINT B %d [%u %u] V %u", g_CodecChar[v10], __n, *a4, a4[1], __dst);
      }
      return result;
    }
    __int16 v30 = 4;
    if (result == 1)
    {
      memcpy_s("plc03_01CodecUInt", 174, &__dst, 4u, v19, __n);
      unsigned int v23 = *(unsigned __int16 *)(a5 + 10) - *(unsigned __int16 *)(a5 + 8);
      long long v24 = &__dst;
      int v22 = 175;
      p_dst = (unsigned int *)v20;
      size_t v25 = 4;
    }
    else
    {
      memcpy_s("plc03_01CodecUInt", 183, &__dst, 4u, v19, 4uLL);
      unsigned int v23 = *(unsigned __int16 *)(a5 + 10) - *(unsigned __int16 *)(a5 + 8);
      long long v24 = &__dst;
      int v22 = 186;
      p_dst = (unsigned int *)v20;
      size_t v25 = __n;
    }
  }
  uint64_t result = memcpy_s("plc03_01CodecUInt", v22, p_dst, v23, v24, v25);
  if (*(_DWORD *)a6) {
    goto LABEL_7;
  }
  unsigned int v26 = __dst;
  if (__dst >= *a4 && __dst <= a4[1])
  {
    char v27 = 1;
  }
  else
  {
    char v27 = 0;
    *(_DWORD *)a6 = 24;
  }
  __int16 v28 = v30;
  if (v10 == 1) {
    __int16 v29 = __n;
  }
  else {
    __int16 v29 = v30;
  }
  if (v10 != 1) {
    __int16 v28 = __n;
  }
  *(_WORD *)(a2 + 8) += v29;
  *(_WORD *)(a5 + 8) += v28;
  if (a7) {
    *a7 = v26;
  }
  if ((v27 & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

uint64_t plc03_06CodecFields(uint64_t result, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, uint64_t a6)
{
  int v8 = a4;
  uint64_t v11 = (void *)result;
  uint64_t v98 = *MEMORY[0x263EF8340];
  unsigned int v12 = *(unsigned __int8 *)(a6 + 148);
  if (v12 >= 9) {
    *(_DWORD *)a6 = 54;
  }
  char v94 = *(unsigned char *)(a6 + 4);
  *(unsigned char *)(a6 + 4) = 0;
  *(unsigned char *)(a6 + 148) = v12 + 1;
  if (a4)
  {
    int __str = (char *)(a6 + 16);
    uint64_t v96 = result;
    if (result == 1) {
      int v13 = 59;
    }
    else {
      int v13 = 57;
    }
    int v93 = v13;
    if (result == 1) {
      uint64_t v14 = a5;
    }
    else {
      uint64_t v14 = a2;
    }
    LODWORD(v15) = 20;
    while (1)
    {
      if (*(_DWORD *)a6) {
        goto LABEL_166;
      }
      char v16 = *(unsigned char *)(a6 + 4);
      *(unsigned char *)(a6 + 4) = v16 + 1;
      if (v11 == 1)
      {
        int v17 = *(unsigned __int16 *)(a2 + 8);
        unsigned int v18 = *a3;
        if (*(unsigned __int16 *)(a2 + 10) - v17 >= *((unsigned __int8 *)a3 + 4) || *a3 - 7 < 3) {
          goto LABEL_24;
        }
        *(_DWORD *)a6 = v15;
        *(_WORD *)(a6 + 6) = v17;
        goto LABEL_130;
      }
      if (v11) {
        break;
      }
      int v20 = *((unsigned __int8 *)a3 + 4);
      int v21 = *(unsigned __int16 *)(a5 + 8);
      unsigned int v18 = *a3;
      if (*(unsigned __int16 *)(a5 + 10) - v21 >= v20) {
        goto LABEL_24;
      }
      if (v18 == 7)
      {
        *(unsigned char *)(a6 + 4) = v16;
LABEL_67:
        __int16 v43 = *(_WORD *)(a2 + 8) + v20;
LABEL_68:
        *(_WORD *)(a2 + 8) = v43;
        goto LABEL_129;
      }
      *(_DWORD *)a6 = 57;
      *(_WORD *)(a6 + 6) = v21;
LABEL_130:
      if (!(_BYTE)--v8) {
        goto LABEL_165;
      }
    }
    unsigned int v18 = *a3;
LABEL_24:
    switch(v18)
    {
      case 0u:
        uint64_t result = (uint64_t)plc03_01CodecUInt(v11, a2, *((unsigned __int8 *)a3 + 4), a3 + 2, a5, a6, 0);
        goto LABEL_129;
      case 1u:
        signed int v22 = *((unsigned __int8 *)a3 + 4);
        __n[1] = 0;
        *(_DWORD *)a6 = 0;
        uint64_t v23 = *(unsigned __int16 *)(a2 + 8);
        *(_WORD *)(a6 + 6) = v23;
        uint64_t v24 = *(unsigned __int16 *)(a5 + 8);
        unsigned int v25 = *(unsigned __int16 *)(a5 + 10);
        int v26 = v93;
        signed int v27 = v25 - v24;
        if (v25 >= v24)
        {
          int v26 = v93;
          if (v27 >= v22)
          {
            long long v62 = (const void *)(*(void *)a2 + v23);
            int v15 = (char *)(*(void *)a5 + v24);
            switch(v22)
            {
              case 1:
                __int16 v63 = 1;
                uint64_t result = (uint64_t)memcpy_s("plc03_02CodecInt", 306, (void *)(*(void *)a5 + v24), v27, v62, 1uLL);
                unsigned int v64 = *v15;
                goto LABEL_140;
              case 2:
                __int16 v63 = 2;
                uint64_t result = (uint64_t)memcpy_s("plc03_02CodecInt", 313, (void *)(*(void *)a5 + v24), v27, v62, 2uLL);
                unsigned int v64 = *(__int16 *)v15;
                goto LABEL_140;
              case 3:
                if (v11 == 1)
                {
                  memcpy_s("plc03_02CodecInt", 328, &__n[1], 4u, v62, 3uLL);
                  if ((__n[1] & 0x800000) != 0) {
                    __n[1] |= 0xFF000000;
                  }
                  unsigned int v79 = *(unsigned __int16 *)(a5 + 10) - *(unsigned __int16 *)(a5 + 8);
                  __int16 v63 = 4;
                  int v80 = 334;
                  long long v81 = v15;
                  size_t v82 = 4;
                }
                else
                {
                  __int16 v63 = 4;
                  memcpy_s("plc03_02CodecInt", 339, &__n[1], 4u, v62, 4uLL);
                  unsigned int v79 = *(unsigned __int16 *)(a5 + 10) - *(unsigned __int16 *)(a5 + 8);
                  int v80 = 340;
                  long long v81 = v15;
                  size_t v82 = 3;
                }
                uint64_t result = (uint64_t)memcpy_s("plc03_02CodecInt", v80, v81, v79, &__n[1], v82);
                goto LABEL_148;
              case 4:
                __int16 v63 = 4;
                uint64_t result = (uint64_t)memcpy_s("plc03_02CodecInt", 347, (void *)(*(void *)a5 + v24), v27, v62, 4uLL);
                unsigned int v64 = *(_DWORD *)v15;
LABEL_140:
                __n[1] = v64;
LABEL_148:
                LODWORD(v15) = 20;
                if (*(_DWORD *)a6) {
                  goto LABEL_31;
                }
                if ((int)__n[1] < (int)a3[2] || (int)__n[1] > (int)a3[3])
                {
                  *(_DWORD *)a6 = 24;
                  if (v11 == 1) {
                    __int16 v85 = v22;
                  }
                  else {
                    __int16 v85 = v63;
                  }
                  if (v11 == 1) {
                    __int16 v86 = v63;
                  }
                  else {
                    __int16 v86 = v22;
                  }
                  *(_WORD *)(a2 + 8) += v85;
                  *(_WORD *)(a5 + 8) += v86;
                  goto LABEL_31;
                }
                if (v11 == 1) {
                  __int16 v87 = v22;
                }
                else {
                  __int16 v87 = v63;
                }
                if (v11 == 1) {
                  LOWORD(v20) = v63;
                }
                else {
                  LOWORD(v20) = v22;
                }
                *(_WORD *)(a2 + 8) += v87;
                break;
              default:
                int v26 = 55;
                goto LABEL_30;
            }
            goto LABEL_65;
          }
        }
LABEL_30:
        *(_DWORD *)a6 = v26;
LABEL_31:
        if (*(unsigned char *)(a6 + 144)) {
          uint64_t result = snprintf(__str, 0x80uLL, "%c INT B %d [%d %d] V %d");
        }
        goto LABEL_129;
      case 2u:
        int v28 = *((unsigned __int8 *)a3 + 4);
        *(_DWORD *)a6 = 0;
        uint64_t v29 = *(unsigned __int16 *)(a2 + 8);
        *(_WORD *)(a6 + 6) = v29;
        if (v28 == 1)
        {
          uint64_t v30 = *(void *)a5;
          uint64_t v31 = *(unsigned __int16 *)(a5 + 8);
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v29);
          LOBYTE(__n[1]) = *(unsigned char *)(*(void *)a2 + v29);
          if (!*((unsigned char *)a3 + 8)) {
            goto LABEL_87;
          }
          unint64_t v33 = 0;
          do
            int v34 = *(unsigned __int8 *)(*((void *)a3 + 2) + v33++);
          while (v33 < *((unsigned __int8 *)a3 + 8) && v32 != v34);
          if (v32 == v34)
          {
            unsigned int v36 = *(unsigned __int16 *)(a5 + 10);
            signed int v37 = v36 - v31;
            if (v36 >= v31 && v37 > 0)
            {
              uint64_t result = (uint64_t)memcpy_s("plc03_10CodecUIntList", 1289, (void *)(v30 + v31), v37, &__n[1], 1uLL);
              ++*(_WORD *)(a2 + 8);
              __int16 v38 = *(_WORD *)(a5 + 8) + 1;
              goto LABEL_66;
            }
            *(_DWORD *)a6 = v93;
          }
          else
          {
LABEL_87:
            *(_DWORD *)a6 = 24;
            if (*(unsigned char *)(a6 + 144)) {
              uint64_t result = snprintf(__str, 0x80uLL, "%c UINT LIST %u INV");
            }
          }
        }
        else
        {
          *(_DWORD *)a6 = 55;
          if (*(unsigned char *)(a6 + 144)) {
            uint64_t result = snprintf(__str, 0x80uLL, "%c UINT LIST B %d != 1");
          }
        }
        goto LABEL_129;
      case 3u:
        size_t v39 = *((unsigned __int16 *)a3 + 5);
        unsigned int v40 = *((unsigned __int16 *)a3 + 4);
        if (v39 == v40)
        {
          uint64_t result = (uint64_t)memcpy_s("plc03_05CodecByteStream", 785, (void *)(*(void *)a5 + *(unsigned __int16 *)(a5 + 8)), *(unsigned __int16 *)(a5 + 10) - *(unsigned __int16 *)(a5 + 8), (const void *)(*(void *)a2 + *(unsigned __int16 *)(a2 + 8)), v39);
          __int16 v41 = *(_WORD *)(a5 + 8) + *((_WORD *)a3 + 5);
          goto LABEL_47;
        }
        __n[0] = 0;
        *(void *)&__n[1] = __PAIR64__(v39, v40);
        uint64_t result = (uint64_t)plc03_01CodecUInt(v11, a2, *((unsigned __int8 *)a3 + 4), &__n[1], a5, a6, __n);
        if (!*(_DWORD *)a6)
        {
          ++*(unsigned char *)(a6 + 4);
          uint64_t v56 = *(unsigned __int16 *)(a5 + 8);
          signed int v57 = *(unsigned __int16 *)(a5 + 10) - v56;
          if (v57 >= LOWORD(__n[0]))
          {
            uint64_t result = (uint64_t)memcpy_s("plc03_05CodecByteStream", 822, (void *)(*(void *)a5 + v56), v57, (const void *)(*(void *)a2 + *(unsigned __int16 *)(a2 + 8)), __n[0]);
            __int16 v78 = *(_WORD *)(a5 + 8);
            if (v11 == 1)
            {
              *(_WORD *)(a5 + 8) = *((_WORD *)a3 + 5) + v78;
              __int16 v42 = __n[0];
              goto LABEL_48;
            }
            __int16 v41 = v78 + LOWORD(__n[0]);
LABEL_47:
            *(_WORD *)(a5 + 8) = v41;
            __int16 v42 = *((_WORD *)a3 + 5);
LABEL_48:
            __int16 v43 = *(_WORD *)(a2 + 8) + v42;
            goto LABEL_68;
          }
          *(_DWORD *)a6 = v93;
          if (*(unsigned char *)(a6 + 144)) {
            uint64_t result = snprintf(__str, 0x80uLL, "%c PLBS SPACE %d < %d");
          }
        }
        goto LABEL_129;
      case 4u:
        __n[0] = 0;
        *(void *)&__n[1] = 0xFFFFFFFF00000000;
        ++*(unsigned char *)(a6 + 148);
        uint64_t result = (uint64_t)plc03_01CodecUInt(v11, a2, *((unsigned __int8 *)a3 + 4), &__n[1], a5, a6, __n);
        if (*(_DWORD *)a6) {
          goto LABEL_128;
        }
        int v44 = *((unsigned __int8 *)a3 + 11);
        __int16 v45 = *(_WORD *)(v14 + 8);
        if (!*((unsigned char *)a3 + 11)) {
          goto LABEL_54;
        }
        char v46 = 0;
        unsigned int v47 = __n[0];
        long long v48 = (unsigned __int16 *)(*((void *)a3 + 2) + 4);
        while (__n[0] != *(v48 - 2))
        {
          --v44;
          ++v46;
          v48 += 8;
          if (!(_BYTE)v44)
          {
LABEL_54:
            *(_DWORD *)a6 = 24;
            if (*(unsigned char *)(a6 + 144))
            {
              __int16 v49 = v45;
              if (*((unsigned char *)a3 + 4) == 1) {
                uint64_t result = snprintf(__str, 0x80uLL, "%c UNION CHOICE %u('%c') INV");
              }
              else {
                uint64_t result = snprintf(__str, 0x80uLL, "%c UNION CHOICE %u INV");
              }
              __int16 v45 = v49;
            }
            goto LABEL_127;
          }
        }
        ++*(unsigned char *)(a6 + 4);
        uint64_t v75 = *(void *)(v48 + 2);
        if (v75)
        {
          *(_DWORD *)a6 = 0;
          __int16 v92 = v45;
          uint64_t result = plc03_06CodecFields(v11, a2, v75, *((unsigned __int8 *)v48 - 2), a5, a6);
          __int16 v45 = v92;
          if (*(_DWORD *)a6
            || (int v83 = *v48, v84 = (unsigned __int16)(*(_WORD *)(v14 + 8) - v92), v84 != v83)
            && ((*(_DWORD *)a6 = 56, !*(unsigned char *)(a6 + 144))
             || (uint64_t result = snprintf(__str, 0x80uLL, "%c U %d T %d != S %d\n", g_CodecChar[v96], v47, v84, v83),
                 __int16 v45 = v92,
                 *(_DWORD *)a6)))
          {
            uint64_t v76 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
            *(unsigned char *)(v76 - 1) = *(unsigned char *)(v76 - 1) & 0x3F | 0x80;
            uint64_t v77 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
            *(unsigned char *)(v77 - 1) = *(unsigned char *)(v77 - 1) & 0xC0 | v46 & 0x3F;
          }
        }
LABEL_127:
        *(_WORD *)(v14 + 8) = v45 + (*((_WORD *)a3 + 4) >> 4);
        LODWORD(v15) = 20;
        goto LABEL_128;
      case 5u:
        __n[0] = 0;
        ++*(unsigned char *)(a6 + 148);
        unsigned int v50 = *((unsigned __int8 *)a3 + 10);
        size_t v51 = *((unsigned __int8 *)a3 + 4);
        if ((a3[2] & 0xF) != v50 || *((unsigned char *)a3 + 4))
        {
          if ((v51 - 1) > 1)
          {
            *(_DWORD *)a6 = 55;
            if (!*(unsigned char *)(a6 + 144)) {
              goto LABEL_128;
            }
            uint64_t result = snprintf(__str, 0x80uLL, "%c ARR B %d L [%d %d]", g_CodecChar[v96], v51, a3[2] & 0xF, *((unsigned __int8 *)a3 + 10));
          }
          else
          {
            __n[1] = a3[2] & 0xF;
            __n[2] = v50;
            uint64_t result = (uint64_t)plc03_01CodecUInt(v11, a2, v51, &__n[1], a5, a6, __n);
          }
        }
        else
        {
          __n[0] = *((unsigned __int8 *)a3 + 10);
        }
        if (*(_DWORD *)a6) {
          goto LABEL_128;
        }
        if ((a3[2] & 0xF) != *((unsigned char *)a3 + 10)) {
          ++*(unsigned char *)(a6 + 4);
        }
        int v91 = *(unsigned __int16 *)(v14 + 8);
        if (!__n[0]) {
          goto LABEL_111;
        }
        int v65 = 0;
        int v66 = 0;
        uint64_t v67 = *((void *)a3 + 2);
        while (2)
        {
          if (!v65)
          {
            int v68 = *(unsigned __int16 *)(v14 + 8);
            uint64_t result = plc03_06CodecFields(v11, a2, v67, *((unsigned __int8 *)a3 + 11), a5, a6);
            int v65 = *(_DWORD *)a6;
            if (*(_DWORD *)a6) {
              goto LABEL_103;
            }
            int v71 = *(unsigned __int16 *)(v14 + 8) - v68;
            if (v71 == *((unsigned __int16 *)a3 + 4) >> 4)
            {
              int v65 = 0;
            }
            else
            {
              int v65 = 56;
              *(_DWORD *)a6 = 56;
              if (!*(unsigned char *)(a6 + 144)
                || (result = snprintf(__str, 0x80uLL, "%c A %d T %d != S %d\n", g_CodecChar[v96], v66, v71, *((unsigned __int16 *)a3 + 4) >> 4), (int v65 = *(_DWORD *)a6) != 0))
              {
LABEL_103:
                uint64_t v69 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
                *(unsigned char *)(v69 - 1) = *(unsigned char *)(v69 - 1) & 0x3F | 0x40;
                uint64_t v70 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
                *(unsigned char *)(v70 - 1) = *(unsigned char *)(v70 - 1) & 0xC0 | v66 & 0x3F;
              }
            }
            if (++v66 >= __n[0]) {
              break;
            }
            continue;
          }
          break;
        }
LABEL_111:
        unsigned int v72 = v91 + (unsigned __int16)((*((_WORD *)a3 + 4) >> 4) * *((unsigned __int8 *)a3 + 10));
        if (v11 == 1)
        {
          LODWORD(v15) = 20;
          if (v72 >= *(unsigned __int16 *)(a5 + 8))
          {
            *(_WORD *)(a5 + 8) = v72;
LABEL_128:
            --*(unsigned char *)(a6 + 148);
LABEL_129:
            a3 += 6;
            goto LABEL_130;
          }
        }
        else
        {
          LODWORD(v15) = 20;
          if (v72 >= *(unsigned __int16 *)(a2 + 8))
          {
            *(_WORD *)(a2 + 8) = v72;
            goto LABEL_128;
          }
        }
        *(_DWORD *)a6 = 50;
        goto LABEL_128;
      case 6u:
        int v52 = *(unsigned __int16 *)(v14 + 8);
        uint64_t result = plc03_06CodecFields(v11, a2, *((void *)a3 + 2), *((unsigned __int8 *)a3 + 11), a5, a6);
        if (!*(_DWORD *)a6 && *(unsigned __int16 *)(v14 + 8) - v52 != *((unsigned __int16 *)a3 + 4) >> 4)
        {
          *(_DWORD *)a6 = 56;
          if (*(unsigned char *)(a6 + 144)) {
            uint64_t result = snprintf(__str, 0x80uLL, "%c S T %d != S %d\n");
          }
        }
        goto LABEL_129;
      case 7u:
        *(unsigned char *)(a6 + 4) = v16;
        LOWORD(v20) = *((unsigned __int8 *)a3 + 4);
        if (v11 != 1) {
          goto LABEL_67;
        }
LABEL_65:
        __int16 v38 = *(_WORD *)(a5 + 8) + v20;
LABEL_66:
        *(_WORD *)(a5 + 8) = v38;
        goto LABEL_129;
      case 8u:
        unsigned int v53 = *((unsigned __int16 *)a3 + 4);
        __n[2] = *((unsigned __int16 *)a3 + 5);
        __n[0] = 0;
        __n[1] = v53;
        if (v11 == 1)
        {
          unsigned int v54 = *(unsigned __int16 *)(a2 + 10) - *(unsigned __int16 *)(a2 + 8);
          __n[0] = v54;
          uint64_t result = (uint64_t)plc01_02PutUInt32(v54, (int *)&__n[1], a5, a6);
          uint64_t v55 = a5;
        }
        else
        {
          uint64_t result = (uint64_t)plc02_02GetUInt32(a2, (int *)&__n[1], __n, a6);
          unsigned int v54 = __n[0];
          uint64_t v55 = a2;
        }
        __int16 v58 = *(_WORD *)(v55 + 8);
        if (v54 >= *((unsigned __int16 *)a3 + 4) && v54 <= *((unsigned __int16 *)a3 + 5)) {
          goto LABEL_85;
        }
        *(_DWORD *)a6 = 24;
        if (*(unsigned char *)(a6 + 144))
        {
          uint64_t result = snprintf(__str, 0x80uLL, "%c PLBS B 4 [%d %d] V %d", g_CodecChar[v96], *((unsigned __int16 *)a3 + 4), *((unsigned __int16 *)a3 + 5), v54);
LABEL_85:
          if (!*(_DWORD *)a6)
          {
            ++*(unsigned char *)(a6 + 4);
            uint64_t v59 = *(unsigned __int16 *)(a5 + 8);
            signed int v60 = *(unsigned __int16 *)(a5 + 10) - v59;
            unsigned int v61 = __n[0];
            if (v60 >= LOWORD(__n[0]))
            {
              uint64_t result = (uint64_t)memcpy_s("plc03_08CodecPayLoadByteStream", 1094, (void *)(*(void *)a5 + v59), v60, (const void *)(*(void *)a2 + *(unsigned __int16 *)(a2 + 8)), __n[0]);
              __int16 v73 = __n[0];
              *(_WORD *)(a5 + 8) += LOWORD(__n[0]);
              *(_WORD *)(a2 + 8) += v73;
              __int16 v74 = *((_WORD *)a3 + 5) + v58;
              if (v11 == 1) {
                *(_WORD *)(a5 + 8) = v74;
              }
              else {
                *(_WORD *)(a2 + 8) = v74;
              }
            }
            else
            {
              *(_DWORD *)a6 = v93;
              if (*(unsigned char *)(a6 + 144)) {
                uint64_t result = snprintf(__str, 0x80uLL, "%c PLBS SPACE %d < %d", g_CodecChar[v96], v60, v61);
              }
            }
          }
        }
        LODWORD(v15) = 20;
        goto LABEL_129;
      default:
        *(_DWORD *)a6 = 52;
        if (*(unsigned char *)(a6 + 144)) {
          uint64_t result = snprintf(__str, 0x80uLL, "%c TYPE %d ERR\n");
        }
        goto LABEL_129;
    }
  }
LABEL_165:
  if (*(_DWORD *)a6)
  {
LABEL_166:
    char v88 = *(unsigned char *)(a6 + 4) - 1;
    uint64_t v89 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
    *(unsigned char *)(v89 - 1) |= 0xC0u;
    uint64_t v90 = *(unsigned __int8 *)(a6 + 148) + a6 + 8;
    *(unsigned char *)(v90 - 1) = *(unsigned char *)(v90 - 1) & 0xC0 | v88 & 0x3F;
  }
  --*(unsigned char *)(a6 + 148);
  *(unsigned char *)(a6 + 4) = v94;
  return result;
}

uint64_t Get_Constell_Prn(unsigned int a1)
{
  if (a1 < 0x20) {
    return 1;
  }
  if (a1 < 0x38) {
    return 2;
  }
  if (a1 < 0x5C) {
    return 3;
  }
  if (a1 < 0x81) {
    return 4;
  }
  if (a1 < 0x8B) {
    return 5;
  }
  if (a1 < 0xB2) {
    return 6;
  }
  gn_report_assertion_failure("Get_Constell_Prn:");
  return 0;
}

uint64_t Get_Constell_Pos(unsigned int a1)
{
  if (a1 < 0x20) {
    return 1;
  }
  if (a1 < 0x38) {
    return 2;
  }
  if (a1 < 0x5C) {
    return 3;
  }
  if (a1 < 0x81) {
    return 4;
  }
  if (a1 < 0x8B) {
    return 5;
  }
  if (a1 < 0x95) {
    return 6;
  }
  gn_report_assertion_failure("Get_Constell_Pos:");
  return 0;
}

uint64_t LongPrnIdx_To_Prn(unsigned int a1, int *a2)
{
  BOOL v3 = __OFSUB__(a1, 31);
  uint64_t result = a1 - 31;
  if (((int)result < 0) ^ v3 | (result == 0))
  {
    if (a2) {
      *a2 = 1;
    }
    return a1 + 1;
  }
  else
  {
    if (a1 <= 0x37)
    {
      if (!a2) {
        return result;
      }
      int v5 = 2;
      goto LABEL_9;
    }
    uint64_t result = a1 - 91;
    if (a1 > 0x5B)
    {
      if (a1 > 0x80)
      {
        if (a1 > 0x8A)
        {
          if (a1 > 0xB1)
          {
            if (a2) {
              *a2 = 0;
            }
            gn_report_assertion_failure("LPrn_2_Prn:");
            return 0;
          }
          else
          {
            if (a2) {
              *a2 = 6;
            }
            return a1 - 19;
          }
        }
        else
        {
          if (a2) {
            *a2 = 5;
          }
          return a1 + 64;
        }
      }
      else if (a2)
      {
        int v5 = 4;
LABEL_9:
        *a2 = v5;
      }
    }
    else
    {
      if (a2) {
        *a2 = 3;
      }
      return a1 - 55;
    }
  }
  return result;
}

uint64_t LongPrnIdx_To_ShortPrnIdx(uint64_t result, _DWORD *a2)
{
  if ((result & 0x80000000) != 0)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    return 0;
  }
  if (result <= 0x1F)
  {
    if (a2) {
      *a2 = 1;
    }
    return result;
  }
  if (result <= 0x37)
  {
    if (a2) {
      *a2 = 2;
    }
    return (result - 32);
  }
  if (result <= 0x5B)
  {
    if (a2) {
      *a2 = 3;
    }
    return (result - 56);
  }
  if (result <= 0x80)
  {
    if (a2) {
      *a2 = 4;
    }
    return (result - 92);
  }
  if (result <= 0x8A)
  {
    if (a2) {
      *a2 = 5;
    }
    return (result - 129);
  }
  if (result > 0xB1)
  {
    if (a2) {
      *a2 = 0;
    }
    gn_report_assertion_failure("LPrn_2_SPrn:");
    return 0;
  }
  if (a2) {
    *a2 = 6;
  }
  return (result - 139);
}

uint64_t GNSS_Id_To_Num_Prn_Idx(int a1)
{
  unsigned __int8 v1 = a1;
  int v2 = a1;
  int v3 = BYTE2(a1);
  if (!BYTE2(a1)) {
    gn_report_assertion_failure("Id_2_NPrn: 0");
  }
  if ((v2 - 1) > 5)
  {
    uint64_t v6 = 0;
    int v7 = "Id_2_NPrn: 1";
    goto LABEL_9;
  }
  int v4 = v3 - Prn_Offset[v1];
  int v5 = Num_Prn[v2 - 1];
  uint64_t v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    uint64_t v6 = 0;
    int v7 = "Id_2_NPrn: 2";
    goto LABEL_9;
  }
  if (v6 >= 0xB2)
  {
    uint64_t v6 = 177;
    int v7 = "Id_2_NPrn: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Prn_Idx_To_GNSS_Id(int a1)
{
  int Constell_Prn = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_Id: 1";
    goto LABEL_7;
  }
  int v3 = Prn_Offset[Constell_Prn] + a1;
  int v4 = Num_Prn[Constell_Prn - 1];
  uint64_t v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    uint64_t v5 = 255;
    uint64_t v6 = "NPrn_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_Id_To_Num_Pos_Idx(int a1)
{
  unsigned __int8 v1 = a1;
  int v2 = a1;
  int v3 = BYTE2(a1);
  if (!BYTE2(a1)) {
    gn_report_assertion_failure("Id_2_NPos: 0");
  }
  if ((v2 - 1) > 5)
  {
    uint64_t v6 = 0;
    int v7 = "Id_2_NPos: 1";
    goto LABEL_9;
  }
  int v4 = v3 - Prn_Offset[v1];
  int v5 = Num_Pos[v2 - 1];
  uint64_t v6 = (v4 + v5);
  if (v4 + v5 < 0)
  {
    uint64_t v6 = 0;
    int v7 = "Id_2_NPos: 2";
    goto LABEL_9;
  }
  if (v6 >= 0x95)
  {
    uint64_t v6 = 148;
    int v7 = "Id_2_NPos: 3";
LABEL_9:
    gn_report_assertion_failure(v7);
  }
  return v6;
}

uint64_t Num_Pos_Idx_To_GNSS_Id(int a1)
{
  int Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_Id: 1";
    goto LABEL_7;
  }
  int v3 = Prn_Offset[Constell_Pos] + a1;
  int v4 = Num_Pos[Constell_Pos - 1];
  uint64_t v5 = (v3 - v4);
  if (v3 - v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_Id: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x100)
  {
    uint64_t v5 = 255;
    uint64_t v6 = "NPos_2_Id: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t GNSS_SVId_Constell_To_Num_Pos_Idx(int a1, int a2)
{
  if ((a2 - 1) > 5)
  {
    uint64_t v4 = 0;
    uint64_t v5 = "Id&C_2_NPos: 1";
    goto LABEL_7;
  }
  int v2 = a1 - Prn_Offset[a2];
  int v3 = Num_Pos[a2 - 1];
  uint64_t v4 = (v2 + v3);
  if (v2 + v3 < 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = "Id&C_2_NPos: 2";
    goto LABEL_7;
  }
  if (v4 >= 0x95)
  {
    uint64_t v4 = 148;
    uint64_t v5 = "Id&C_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v5);
  }
  return v4;
}

uint64_t Num_Pos_Idx_To_Num_Prn_Idx(int a1)
{
  int Constell_Pos = Get_Constell_Pos(a1);
  if (!Constell_Pos)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_NPrn: 1";
    goto LABEL_7;
  }
  int v3 = a1 - Num_Pos[Constell_Pos - 1];
  int v4 = Num_Prn[Constell_Pos - 1];
  uint64_t v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPos_2_NPrn: 2";
    goto LABEL_7;
  }
  if (v5 >= 0xB2)
  {
    uint64_t v5 = 177;
    uint64_t v6 = "NPos_2_NPrn: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

uint64_t Num_Prn_Idx_To_Num_Pos_Idx(int a1)
{
  int Constell_Prn = Get_Constell_Prn(a1);
  if (!Constell_Prn)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_NPos: 1";
    goto LABEL_7;
  }
  int v3 = a1 - Num_Prn[Constell_Prn - 1];
  int v4 = Num_Pos[Constell_Prn - 1];
  uint64_t v5 = (v3 + v4);
  if (v3 + v4 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = "NPrn_2_NPos: 2";
    goto LABEL_7;
  }
  if (v5 >= 0x95)
  {
    uint64_t v5 = 148;
    uint64_t v6 = "NPrn_2_NPos: 3";
LABEL_7:
    gn_report_assertion_failure(v6);
  }
  return v5;
}

char **STEU_Encode(char **a1, char a2, unsigned __int8 *a3, unint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = (unsigned char *)*a4;
  int v6 = (*(_DWORD *)a4 - (int)a3) % 3;
  if (v6)
  {
    if (v6 == 1)
    {
      *uint64_t v5 = 0;
      uint64_t v5 = (unsigned char *)(*a4 + 1);
      *a4 = (unint64_t)v5;
    }
    *uint64_t v5 = 0;
    ++*a4;
  }
  int v7 = (*a1)++;
  *int v7 = 123;
  int v8 = *a1;
  if (*a1 >= a1[3]) {
    int v8 = a1[2];
  }
  *a1 = v8 + 1;
  *int v8 = a2;
  double v9 = *a1;
  if (*a1 >= a1[3])
  {
    double v9 = a1[2];
    *a1 = v9;
  }
  v16[4] = 0;
  unint64_t v10 = *a4;
  do
  {
    unsigned int v11 = *a3;
    int v12 = (v11 >> 2) + 48;
    unsigned __int8 v13 = a3[1];
    v16[1] = ((v13 >> 4) & 0xCF | (16 * (v11 & 3))) + 48;
    LOBYTE(v11) = a3[2];
    _OWORD v16[2] = ((v11 >> 6) & 0xC3 | (4 * (v13 & 0xF))) + 48;
    _OWORD v16[3] = (v11 & 0x3F) + 48;
    uint64_t v14 = 1;
    do
    {
      *a1 = v9 + 1;
      *double v9 = v12;
      double v9 = *a1;
      if (*a1 >= a1[3])
      {
        double v9 = a1[2];
        *a1 = v9;
      }
      int v12 = v16[v14++];
    }
    while (v12);
    a3 += 3;
  }
  while ((unint64_t)a3 < v10);
  *a4 = (unint64_t)a3;

  return STEU_Add_Checksum_LF((uint64_t)a1, v8);
}

char **STEU_Add_Checksum_LF(uint64_t a1, char *a2)
{
  int v3 = *(char **)a1;
  if (*(char **)a1 == a2)
  {
    unint64_t v7 = 0;
  }
  else
  {
    unsigned __int8 v4 = 0;
    do
    {
      char v6 = *a2++;
      char v5 = v6;
      if ((unint64_t)a2 >= *(void *)(a1 + 24)) {
        a2 = *(char **)(a1 + 16);
      }
      v4 += v5;
    }
    while (a2 != v3);
    unint64_t v7 = v4;
  }
  *(void *)a1 = v3 + 1;
  *int v3 = 125;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  uint64_t result = sprintf_02x((char **)a1, v7);
  double v9 = (unsigned char *)(*(void *)a1)++;
  *double v9 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  return result;
}

char **STEU_Encode_c(char **a1, char a2, int a3, unsigned __int8 *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v5 = (*a1)++;
  *char v5 = 123;
  char v6 = *a1;
  if (*a1 >= a1[3]) {
    char v6 = a1[2];
  }
  *a1 = v6 + 1;
  *char v6 = 99;
  unint64_t v7 = *a1;
  if (*a1 >= a1[3]) {
    unint64_t v7 = a1[2];
  }
  *a1 = v7 + 1;
  *unint64_t v7 = a2;
  int v8 = *a1;
  if (*a1 >= a1[3])
  {
    int v8 = a1[2];
    *a1 = v8;
  }
  v15[4] = 0;
  double v9 = &a4[a3];
  do
  {
    unsigned int v10 = *a4;
    int v11 = (v10 >> 2) + 48;
    unsigned __int8 v12 = a4[1];
    v15[1] = ((v12 >> 4) & 0xCF | (16 * (v10 & 3))) + 48;
    LOBYTE(v10) = a4[2];
    _OWORD v15[2] = ((v10 >> 6) & 0xC3 | (4 * (v12 & 0xF))) + 48;
    v15[3] = (v10 & 0x3F) + 48;
    uint64_t v13 = 1;
    do
    {
      *a1 = v8 + 1;
      *int v8 = v11;
      int v8 = *a1;
      if (*a1 >= a1[3])
      {
        int v8 = a1[2];
        *a1 = v8;
      }
      int v11 = v15[v13++];
    }
    while (v11);
    a4 += 3;
  }
  while (a4 < v9);

  return STEU_Add_Checksum_LF((uint64_t)a1, v6);
}

char **STEU_Encode_X(char **a1, char a2, unsigned __int8 *a3, unint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v5 = (unsigned char *)*a4;
  int v6 = (*(_DWORD *)a4 - (int)a3) % 3;
  if (v6)
  {
    if (v6 == 1)
    {
      *char v5 = 0;
      char v5 = (unsigned char *)(*a4 + 1);
      *a4 = (unint64_t)v5;
    }
    *char v5 = 0;
    ++*a4;
  }
  unint64_t v7 = (*a1)++;
  *unint64_t v7 = 123;
  int v8 = *a1;
  if (*a1 >= a1[3]) {
    int v8 = a1[2];
  }
  *a1 = v8 + 1;
  *int v8 = 88;
  double v9 = *a1;
  if (*a1 >= a1[3]) {
    double v9 = a1[2];
  }
  *a1 = v9 + 1;
  *double v9 = a2;
  unsigned int v10 = *a1;
  if (*a1 >= a1[3])
  {
    unsigned int v10 = a1[2];
    *a1 = v10;
  }
  v17[4] = 0;
  unint64_t v11 = *a4;
  do
  {
    unsigned int v12 = *a3;
    int v13 = (v12 >> 2) + 48;
    unsigned __int8 v14 = a3[1];
    v17[1] = ((v14 >> 4) & 0xCF | (16 * (v12 & 3))) + 48;
    LOBYTE(v12) = a3[2];
    _OWORD v17[2] = ((v12 >> 6) & 0xC3 | (4 * (v14 & 0xF))) + 48;
    v17[3] = (v12 & 0x3F) + 48;
    uint64_t v15 = 1;
    do
    {
      *a1 = v10 + 1;
      *unsigned int v10 = v13;
      unsigned int v10 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v10 = a1[2];
        *a1 = v10;
      }
      int v13 = v17[v15++];
    }
    while (v13);
    a3 += 3;
  }
  while ((unint64_t)a3 < v11);
  *a4 = (unint64_t)a3;

  return STEU_Add_Checksum_LF((uint64_t)a1, v8);
}

uint64_t Hal04_ComputeChecksum(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    unsigned __int16 v2 = 0;
    if (!IsLoggingAllowed) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
LABEL_10:
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    return 0;
  }
  if (!a2)
  {
    int v7 = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    unsigned __int16 v2 = 0;
    if (!v7) {
      return v2;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
    goto LABEL_10;
  }
  unsigned __int16 v2 = 0;
  uint64_t v3 = a2;
  do
  {
    __int16 v4 = *a1++;
    v2 += v4;
    --v3;
  }
  while (v3);
  return v2;
}

char *SUPL_Message_Init(void)
{
  uint64_t result = (char *)operator new(0x90uLL, MEMORY[0x263F8C180]);
  if (result)
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[16] = -1;
    *((_DWORD *)result + 5) = -1;
    *((_WORD *)result + 12) = -1;
    *((_DWORD *)result + 7) = 1;
    result[32] = -1;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    result[136] = -1;
  }
  return result;
}

size_t SUPL_Message_Free(void *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a1)
  {
    unsigned __int16 v2 = (void *)a1[15];
    if (v2)
    {
      uint64_t v3 = (void *)*v2;
      if (*v2)
      {
        __int16 v4 = (void *)v3[5];
        if (v4)
        {
          v3[6] = v4;
          operator delete(v4);
        }
        char v5 = (void *)v3[2];
        if (v5)
        {
          v3[3] = v5;
          operator delete(v5);
        }
        MEMORY[0x230F4E5D0](v3, 0x1010C409FCE3EA6);
        unsigned __int16 v2 = (void *)a1[15];
      }
      *unsigned __int16 v2 = 0;
      uint64_t v6 = v2[1];
      if (v6)
      {
        int v7 = *(void **)(v6 + 192);
        if (v7)
        {
          *(void *)(v6 + 200) = v7;
          operator delete(v7);
        }
        MEMORY[0x230F4E5D0](v6, 0x1020C40D4F58230);
        unsigned __int16 v2 = (void *)a1[15];
      }
      v2[1] = 0;
      MEMORY[0x230F4E5D0]();
      a1[15] = 0;
    }
    int v8 = (ASN1T_CellInfo *)a1[16];
    if (v8)
    {
      ASN1T_CellInfo::~ASN1T_CellInfo(v8);
      MEMORY[0x230F4E5D0]();
    }
    a1[16] = 0;
    uint64_t v9 = a1[11];
    if (v9)
    {
      uint64_t v10 = *(void **)(v9 + 8);
      if (v10)
      {
        *(void *)(v9 + 16) = v10;
        operator delete(v10);
      }
      MEMORY[0x230F4E5D0](v9, 0x1010C4039DDA56CLL);
    }
    a1[11] = 0;
    uint64_t v11 = a1[13];
    if (v11)
    {
      unsigned int v12 = *(void **)(v11 + 8);
      if (v12)
      {
        *(void *)(v11 + 16) = v12;
        operator delete(v12);
      }
      MEMORY[0x230F4E5D0](v11, 0x1010C40D464F2E8);
    }
    a1[13] = 0;
    uint64_t v13 = a1[12];
    if (v13)
    {
      unsigned __int8 v14 = *(void **)v13;
      if (*(void *)v13)
      {
        *(void *)(v13 + 8) = v14;
        operator delete(v14);
      }
      MEMORY[0x230F4E5D0](v13, 0x1010C4005AEBDE9);
    }
    a1[12] = 0;
    uint64_t v15 = a1[14];
    if (v15)
    {
      uint64_t v16 = *(void **)v15;
      if (*(void *)v15)
      {
        *(void *)(v15 + 8) = v16;
        operator delete(v16);
      }
      MEMORY[0x230F4E5D0](v15, 0x1010C407D6C095DLL);
    }
    a1[14] = 0;
    uint64_t v17 = (void *)a1[8];
    if (v17)
    {
      a1[9] = v17;
      operator delete(v17);
    }
    uint64_t v18 = (void *)a1[5];
    if (v18)
    {
      a1[6] = v18;
      operator delete(v18);
    }
    JUMPOUT(0x230F4E5D0);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "SPL", 69, "SUPL_Message_Free", 513);
    return LbsOsaTrace_WriteLog(0x12u, __str, v21, 0, 1);
  }
  return result;
}

void *GNSS_Write_NMEA(void *result)
{
  if (result)
  {
    unsigned __int8 v1 = result;
    uint64_t v3 = (char *)*result;
    unsigned __int16 v2 = (char *)result[1];
    if (v2 != (char *)*result)
    {
      if ((unint64_t)v2 > *result) {
        uint64_t v3 = (char *)result[3];
      }
      unsigned __int16 v4 = (_WORD)v3 - (_WORD)v2;
      size_t result = (void *)GN_GPS_Write_NMEA((unsigned __int16)((_WORD)v3 - (_WORD)v2), v2);
      unsigned int v5 = result;
      if ((unsigned __int16)g_Enable_Nav_Debug >= 0x101u) {
        size_t result = (void *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
      }
      uint64_t v6 = (char *)(v1[1] + v5);
      v1[1] = v6;
      if ((unint64_t)v6 >= v1[3])
      {
        uint64_t v6 = (char *)v1[2];
        v1[1] = v6;
        if (v5 == v4)
        {
          size_t result = (void *)GN_GPS_Write_NMEA((unsigned __int16)(*(_WORD *)v1 - (_WORD)v6), v6);
          unsigned int v7 = result;
          if ((unsigned __int16)g_Enable_Nav_Debug >= 0x101u) {
            size_t result = (void *)GN_GPS_Write_Nav_Debug((uint64_t)result, (char *)v1[1]);
          }
          uint64_t v6 = (char *)(v1[1] + v7);
          v1[1] = v6;
        }
      }
      if (v6 == (char *)*v1)
      {
        uint64_t v8 = v1[2];
        *unsigned __int8 v1 = v8;
        v1[1] = v8;
      }
    }
  }
  return result;
}

char **NMEA_Encode(char **result, __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v937 = *MEMORY[0x263EF8340];
  if (!a2) {
    return result;
  }
  uint64_t v4 = (uint64_t)result;
  if (!result || !a3) {
    return result;
  }
  uint64_t v6 = a2;
  int v7 = *a2;
  uint64_t v934 = a3;
  if (v7 >= 1 && v7 <= ++_MergedGlobals_3)
  {
    uint64_t v8 = (*result)++;
    *uint64_t v8 = 36;
    uint64_t v9 = *result;
    if (*result >= result[3]) {
      uint64_t v9 = result[2];
    }
    char v10 = 71;
    uint64_t v11 = 1u;
    unsigned int v12 = v9;
    do
    {
      *size_t result = v12 + 1;
      *unsigned int v12 = v10;
      unsigned int v12 = *result;
      if (*result >= result[3])
      {
        unsigned int v12 = result[2];
        *size_t result = v12;
      }
      char v10 = aGpgga[v11++];
    }
    while (v11 != 7);
    sprintf_HHMMSS(result, a3);
    if (*(unsigned char *)(v934 + 318) && (unsigned int v13 = *(_DWORD *)(v934 + 296)) != 0)
    {
      sprintf_LatLon((char **)v4, *(double *)(v934 + 96), *(double *)(v934 + 104));
      unint64_t v14 = 0x323132313630uLL >> (8 * v13);
      if (v13 >= 6) {
        LOBYTE(v14) = 48;
      }
      uint64_t v15 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v15 = v14;
      uint64_t v16 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v16 = *(char **)(v4 + 16);
      }
      *(void *)uint64_t v4 = v16 + 1;
      *uint64_t v16 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v934 + 320), __dst, 0, 0);
      uint64_t v17 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v17 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_DOP(v4, *(double *)(v934 + 264));
      uint64_t v18 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v18 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v19 = *(double *)(v934 + 120) * 1000.0;
      double v20 = -0.5;
      if (v19 > 0.0) {
        double v20 = 0.5;
      }
      double v21 = v19 + v20;
      if (v21 <= 2147483650.0)
      {
        if (v21 >= -2147483650.0) {
          unsigned int v22 = (int)v21;
        }
        else {
          unsigned int v22 = 0x80000000;
        }
      }
      else
      {
        unsigned int v22 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v22, 4);
      int v26 = *(char **)v4;
      char v27 = 44;
      uint64_t v28 = 1u;
      do
      {
        *(void *)uint64_t v4 = v26 + 1;
        *int v26 = v27;
        int v26 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          int v26 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v26;
        }
        char v27 = aM[v28++];
      }
      while (v28 != 4);
      double v29 = (*(double *)(v934 + 112) - *(double *)(v934 + 120)) * 1000.0;
      double v30 = -0.5;
      if (v29 > 0.0) {
        double v30 = 0.5;
      }
      double v31 = v29 + v30;
      if (v31 <= 2147483650.0)
      {
        if (v31 >= -2147483650.0) {
          unsigned int v32 = (int)v31;
        }
        else {
          unsigned int v32 = 0x80000000;
        }
      }
      else
      {
        unsigned int v32 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v32, 4);
      unint64_t v33 = *(char **)v4;
      char v34 = 44;
      uint64_t v35 = 1u;
      do
      {
        *(void *)uint64_t v4 = v33 + 1;
        *unint64_t v33 = v34;
        unint64_t v33 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          unint64_t v33 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v33;
        }
        char v34 = aM[v35++];
      }
      while (v35 != 4);
      *(void *)uint64_t v4 = v33 + 1;
      *unint64_t v33 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(char **)v4;
      char v25 = 44;
      do
      {
        *(void *)uint64_t v4 = v24 + 1;
        *uint64_t v24 = v25;
        uint64_t v24 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v24 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v24;
        }
        char v25 = a00MM[++v23];
      }
      while (v23 != 16);
    }
    size_t result = NMEA_Add_checksum(v4, v9);
    a3 = v934;
    _MergedGlobals_3 = 0;
  }
  int v36 = v6[1];
  if (v36 >= 1 && v36 <= ++word_26AE7707A)
  {
    signed int v37 = (unsigned char *)(*(void *)v4)++;
    *signed int v37 = 36;
    __int16 v38 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      __int16 v38 = *(char **)(v4 + 16);
    }
    char v39 = 71;
    uint64_t v40 = 1u;
    __int16 v41 = v38;
    do
    {
      *(void *)uint64_t v4 = v41 + 1;
      *__int16 v41 = v39;
      __int16 v41 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        __int16 v41 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v41;
      }
      char v39 = aGpgll[v40++];
    }
    while (v40 != 7);
    int v42 = *(_DWORD *)(a3 + 296);
    if (*(unsigned char *)(a3 + 318)) {
      BOOL v43 = v42 == 0;
    }
    else {
      BOOL v43 = 1;
    }
    if (v43)
    {
      uint64_t v44 = 0;
      char v45 = 44;
      do
      {
        *(void *)uint64_t v4 = v41 + 1;
        *__int16 v41 = v45;
        __int16 v41 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          __int16 v41 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v41;
        }
        char v45 = asc_22BADF219[++v44];
      }
      while (v44 != 4);
      sprintf_HHMMSS((void *)v4, a3);
    }
    else
    {
      uint64_t v46 = a3;
      sprintf_LatLon((char **)v4, *(double *)(a3 + 96), *(double *)(a3 + 104));
      sprintf_HHMMSS((void *)v4, v46);
      if ((v42 - 1) <= 4)
      {
        unsigned int v47 = off_2648DC450[v42 - 1];
LABEL_75:
        char v48 = *v47;
        if (*v47)
        {
          __int16 v49 = *(char **)v4;
          unsigned int v50 = (unsigned __int8 *)(v47 + 1);
          do
          {
            *(void *)uint64_t v4 = v49 + 1;
            *__int16 v49 = v48;
            __int16 v49 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              __int16 v49 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v49;
            }
            int v51 = *v50++;
            char v48 = v51;
          }
          while (v51);
        }
        size_t result = NMEA_Add_checksum(v4, v38);
        word_26AE7707A = 0;
        a3 = v934;
        goto LABEL_81;
      }
    }
    unsigned int v47 = "V,N";
    goto LABEL_75;
  }
LABEL_81:
  int v52 = v6[2];
  if (v52 >= 1 && v52 <= ++word_26AE7707C)
  {
    unsigned int v53 = *(unsigned __int8 *)(a3 + 319);
    v917 = v6;
    uint64_t v919 = a4;
    if (*(unsigned char *)(a3 + 319))
    {
      unint64_t v54 = 0;
      uint64_t v923 = 0;
      int v922 = 0;
      int v933 = 0;
      int v925 = 0;
      uint64_t v55 = a3 + 6088;
      do
      {
        if (*(unsigned char *)(v55 + v54) && *(unsigned char *)(a3 + v54 + 1732))
        {
          switch(*(_DWORD *)(a3 + 4 * v54 + 324))
          {
            case 0:
            case 1:
              break;
            case 2:
              ++v925;
              break;
            case 3:
              ++HIDWORD(v923);
              break;
            case 4:
              ++v933;
              break;
            case 5:
              ++v922;
              break;
            case 6:
              LODWORD(v923) = v923 + 1;
              break;
            default:
              size_t result = (char **)EvCrt_Illegal_Default("NMEA_Encode_GSA", 0x292u);
              a3 = v934;
              unsigned int v53 = *(unsigned __int8 *)(v934 + 319);
              break;
          }
        }
        ++v54;
      }
      while (v54 < v53);
    }
    else
    {
      int v925 = 0;
      uint64_t v923 = 0;
      int v933 = 0;
      int v922 = 0;
    }
    int v56 = 0;
    if (*(unsigned char *)(a3 + 316) == 1) {
      char v57 = 77;
    }
    else {
      char v57 = 65;
    }
    char v931 = v57;
    int v58 = *(_DWORD *)(a3 + 296);
    if (!*(unsigned char *)(a3 + 318)) {
      int v58 = 0;
    }
    int v929 = v58;
    unsigned int v59 = v58 & 0xFFFFFFFE;
    if (v59 == 2) {
      char v60 = 50;
    }
    else {
      char v60 = 49;
    }
    if (v59 == 4) {
      char v61 = 51;
    }
    else {
      char v61 = v60;
    }
    uint64_t v62 = a3 + 6088;
    char v63 = 1;
    while (1)
    {
      char v927 = v63;
      for (int i = 1; i != 7; ++i)
      {
        BOOL v66 = i == 4 && v933 > 0;
        if (i == 1 || v66)
        {
          uint64_t v77 = (unsigned char *)(*(void *)v4)++;
          *uint64_t v77 = 36;
          uint64_t v76 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            uint64_t v76 = *(char **)(v4 + 16);
          }
          __int16 v78 = "GP";
          if (v927) {
            goto LABEL_152;
          }
        }
        else
        {
          BOOL v68 = i == 2 && v925 > 0;
          if ((v56 & v68 & 1) == 0)
          {
            BOOL v69 = i != 3 || SHIDWORD(v923) <= 0;
            BOOL v70 = !v69;
            if ((v56 & v70 & 1) == 0)
            {
              BOOL v71 = i != 6 || (int)v923 <= 0;
              BOOL v72 = !v71;
              if ((v56 & v72 & 1) == 0)
              {
                BOOL v73 = i != 5 || v922 <= 0;
                BOOL v74 = !v73;
                if ((v56 & v74) != 1) {
                  continue;
                }
              }
            }
          }
          uint64_t v75 = (unsigned char *)(*(void *)v4)++;
          *uint64_t v75 = 36;
          uint64_t v76 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            uint64_t v76 = *(char **)(v4 + 16);
          }
        }
        __int16 v78 = "GN";
LABEL_152:
        char v79 = *v78;
        int v80 = v76;
        if (*v78)
        {
          long long v81 = (unsigned __int8 *)(v78 + 1);
          int v80 = v76;
          do
          {
            *(void *)uint64_t v4 = v80 + 1;
            *int v80 = v79;
            int v80 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              int v80 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v80;
            }
            int v82 = *v81++;
            char v79 = v82;
          }
          while (v82);
        }
        uint64_t v83 = 0;
        char v84 = 71;
        do
        {
          *(void *)uint64_t v4 = v80 + 1;
          *int v80 = v84;
          int v80 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            int v80 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v80;
          }
          char v84 = aGsa[++v83];
        }
        while (v83 != 4);
        *(void *)uint64_t v4 = v80 + 1;
        *int v80 = v931;
        __int16 v85 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          __int16 v85 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v85 + 1;
        *__int16 v85 = 44;
        __int16 v86 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          __int16 v86 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v86 + 1;
        *__int16 v86 = v61;
        __int16 v87 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          __int16 v87 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v87 + 1;
        *__int16 v87 = 44;
        char v88 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          char v88 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v88;
        }
        if (v929)
        {
          unint64_t v89 = 0;
          int v90 = 0;
          do
          {
            if (*(unsigned char *)(v62 + v89) && *(unsigned char *)(a3 + v89 + 1732) && i == *(_DWORD *)(a3 + 4 * v89 + 324))
            {
              ++v90;
              unsigned int v91 = Encode_Nmea_Id(*(unsigned __int8 *)(a3 + v89 + 1732), i);
              sprintf_02d((void *)v4, v91);
              __int16 v92 = (unsigned char *)(*(void *)v4)++;
              *__int16 v92 = 44;
              char v88 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24))
              {
                char v88 = *(char **)(v4 + 16);
                *(void *)uint64_t v4 = v88;
              }
              a3 = v934;
            }
            if (v89 > 0x7E) {
              break;
            }
            ++v89;
          }
          while (v90 != 12);
          if (v90 <= 11)
          {
            int v93 = v90 - 12;
            do
            {
              *(void *)uint64_t v4 = v88 + 1;
              *char v88 = 44;
              char v88 = *(char **)v4;
              if (*(void *)v4 >= *(void *)(v4 + 24))
              {
                char v88 = *(char **)(v4 + 16);
                *(void *)uint64_t v4 = v88;
              }
              BOOL v94 = __CFADD__(v93++, 1);
            }
            while (!v94);
          }
          sprintf_DOP(v4, *(double *)(a3 + 280));
          uint64_t v95 = (unsigned char *)(*(void *)v4)++;
          *uint64_t v95 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf_DOP(v4, *(double *)(v934 + 264));
          uint64_t v96 = (unsigned char *)(*(void *)v4)++;
          *uint64_t v96 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf_DOP(v4, *(double *)(v934 + 272));
        }
        else
        {
          for (unsigned int j = 15; j > 1; --j)
          {
            *(void *)uint64_t v4 = v88 + 1;
            *char v88 = 44;
            char v88 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              char v88 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v88;
            }
          }
        }
        if (v56)
        {
          uint64_t v98 = (unsigned char *)(*(void *)v4)++;
          *uint64_t v98 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          int v99 = -1;
          int v100 = 1;
          switch(i)
          {
            case 0:
              break;
            case 1:
            case 2:
            case 5:
              int v100 = 0;
              int v99 = i;
              break;
            case 3:
              int v100 = 0;
              int v99 = 4;
              break;
            case 4:
              int v100 = 0;
              int v99 = 1;
              break;
            case 6:
              int v100 = 0;
              int v99 = 3;
              break;
            default:
              EvCrt_Illegal_Default("NMEA_Encode_GSA", 0x2FEu);
              int v99 = -1;
              int v100 = 1;
              break;
          }
          if (v99 >= 0) {
            unsigned int v101 = v99;
          }
          else {
            unsigned int v101 = -v99;
          }
          sprintf1da((void *)v4, v101, __dst, 0, v100);
        }
        size_t result = NMEA_Add_checksum(v4, v76);
        a3 = v934;
      }
      char v63 = 0;
      int v56 = 1;
      if ((v927 & 1) == 0)
      {
        word_26AE7707C = 0;
        uint64_t v6 = v917;
        a4 = v919;
        break;
      }
    }
  }
  int v102 = v6[3];
  if (v102 >= 1 && v102 <= ++word_26AE7707E)
  {
    long long v103 = (unsigned char *)(*(void *)v4)++;
    *long long v103 = 36;
    long long v104 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      long long v104 = *(char **)(v4 + 16);
    }
    uint64_t v105 = 0;
    char v106 = 71;
    long long v107 = v104;
    do
    {
      *(void *)uint64_t v4 = v107 + 1;
      *long long v107 = v106;
      long long v107 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v107 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v107;
      }
      char v106 = aGn[++v105];
    }
    while (v105 != 2);
    uint64_t v108 = 0;
    char v109 = 71;
    do
    {
      *(void *)uint64_t v4 = v107 + 1;
      *long long v107 = v109;
      long long v107 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        long long v107 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v107;
      }
      char v109 = aGst[++v108];
    }
    while (v108 != 4);
    sprintf_HHMMSS((void *)v4, a3);
    uint64_t v110 = v934;
    if (*(unsigned char *)(v934 + 320))
    {
      sprintf_AccEst((void *)v4, *(double *)(v934 + 248));
      uint64_t v110 = v934;
    }
    __int16 v111 = (unsigned char *)(*(void *)v4)++;
    *__int16 v111 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v110 + 200));
    __int16 v112 = (unsigned char *)(*(void *)v4)++;
    *__int16 v112 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v934 + 208));
    __int16 v113 = (unsigned char *)(*(void *)v4)++;
    *__int16 v113 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    int v114 = (int)*(double *)(v934 + 216);
    if (v114 >= 0) {
      unsigned int v115 = (int)*(double *)(v934 + 216);
    }
    else {
      unsigned int v115 = -v114;
    }
    sprintf1da((void *)v4, v115, __dst, 0, v114 >> 31);
    __int16 v116 = (unsigned char *)(*(void *)v4)++;
    *__int16 v116 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v934 + 176));
    __int16 v117 = (unsigned char *)(*(void *)v4)++;
    *__int16 v117 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v934 + 184));
    __int16 v118 = (unsigned char *)(*(void *)v4)++;
    *__int16 v118 = 44;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_AccEst((void *)v4, *(double *)(v934 + 192));
    size_t result = NMEA_Add_checksum(v4, v104);
    a3 = v934;
    word_26AE7707E = 0;
  }
  int v119 = v6[4];
  if (v119 >= 1 && v119 <= ++word_26AE77080)
  {
    size_t result = (char **)memcpy(__dst, (const void *)(a3 + 324), sizeof(__dst));
    a3 = v934;
    uint64_t v120 = *(unsigned __int8 *)(v934 + 319);
    if (*(unsigned char *)(v934 + 319))
    {
      signed int v920 = 0;
      uint64_t v921 = 0;
      uint64_t v924 = 0;
      __int16 v121 = (unsigned __int8 *)(v934 + 1732);
      __int16 v122 = __dst;
      do
      {
        if (*v121++)
        {
          switch(*v122)
          {
            case 1:
              goto LABEL_250;
            case 2:
              LODWORD(v924) = v924 + 1;
              break;
            case 3:
              ++HIDWORD(v921);
              break;
            case 4:
              *__int16 v122 = 1;
LABEL_250:
              ++HIDWORD(v924);
              break;
            case 5:
              LODWORD(v921) = v921 + 1;
              break;
            case 6:
              ++v920;
              break;
            default:
              break;
          }
        }
        ++v122;
        --v120;
      }
      while (v120);
    }
    else
    {
      uint64_t v921 = 0;
      uint64_t v924 = 0;
      signed int v920 = 0;
    }
    v918 = v6;
    unint64_t v124 = 0;
    while (1)
    {
      int v125 = 1;
      signed int v126 = HIDWORD(v924);
      switch(v124)
      {
        case 0uLL:
          goto LABEL_262;
        case 1uLL:
          int v125 = 2;
          signed int v126 = v924;
          goto LABEL_262;
        case 2uLL:
          int v125 = 3;
          signed int v126 = HIDWORD(v921);
          goto LABEL_262;
        case 3uLL:
          int v125 = 6;
          signed int v126 = v920;
          goto LABEL_262;
        case 4uLL:
          int v125 = 5;
          signed int v126 = v921;
LABEL_262:
          if (v126 < 1) {
            goto LABEL_352;
          }
          int v127 = 0;
          int v128 = 0;
          unsigned int v129 = ((v126 - 1) >> 2) + 1;
          unsigned int v130 = 1;
          unint64_t v930 = v124;
          unsigned int v926 = v129;
          signed int v928 = v126;
          break;
        default:
          goto LABEL_352;
      }
      do
      {
        __int16 v131 = (unsigned char *)(*(void *)v4)++;
        *__int16 v131 = 36;
        __int16 v132 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          __int16 v132 = *(char **)(v4 + 16);
        }
        __int16 v133 = "GN";
        if (v124 <= 4) {
          __int16 v133 = off_2648DC478[v124];
        }
        char v134 = *v133;
        long long v135 = v132;
        if (*v133)
        {
          long long v136 = (unsigned __int8 *)(v133 + 1);
          long long v135 = v132;
          do
          {
            *(void *)uint64_t v4 = v135 + 1;
            *long long v135 = v134;
            long long v135 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              long long v135 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v135;
            }
            int v137 = *v136++;
            char v134 = v137;
          }
          while (v137);
        }
        uint64_t v138 = 0;
        char v139 = 71;
        do
        {
          *(void *)uint64_t v4 = v135 + 1;
          *long long v135 = v139;
          long long v135 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            long long v135 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v135;
          }
          char v139 = aGsv[++v138];
        }
        while (v138 != 4);
        v932 = v132;
        sprintf1da((void *)v4, v129, v936, 0, 0);
        long long v140 = (unsigned char *)(*(void *)v4)++;
        *long long v140 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, v130, v936, 0, 0);
        long long v141 = (unsigned char *)(*(void *)v4)++;
        *long long v141 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_02d((void *)v4, v126);
        if (v128 <= 127)
        {
          int v142 = 0;
          int v143 = v128 - 128;
          uint64_t v144 = v934;
          do
          {
            uint64_t v145 = v144 + v128;
            if (!*(unsigned char *)(v145 + 1732) || __dst[v128] != v125)
            {
              ++v128;
              goto LABEL_327;
            }
            uint64_t v146 = v144 + 4 * v128;
            int v127 = *(_DWORD *)(v146 + 836);
            long long v147 = (unsigned char *)(*(void *)v4)++;
            *long long v147 = 44;
            if (*(void *)v4 >= *(void *)(v4 + 24)) {
              *(void *)uint64_t v4 = *(void *)(v4 + 16);
            }
            unsigned int v148 = Encode_Nmea_Id(*(unsigned __int8 *)(v145 + 1732), *(_DWORD *)(v146 + 324));
            sprintf_02d((void *)v4, v148);
            long long v149 = (unsigned char *)(*(void *)v4)++;
            *long long v149 = 44;
            long long v150 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              long long v150 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v150;
            }
            uint64_t v144 = v934;
            double v151 = *(double *)(v934 + 8 * v128 + 5064);
            if (v151 >= -5.0)
            {
              double v154 = v151 * 10.0;
              if (v154 <= 0.0) {
                double v155 = -0.5;
              }
              else {
                double v155 = 0.5;
              }
              double v156 = v154 + v155;
              if (v156 <= 2147483650.0)
              {
                if (v156 >= -2147483650.0) {
                  unsigned int v157 = (int)v156;
                }
                else {
                  unsigned int v157 = 0x80000000;
                }
              }
              else
              {
                unsigned int v157 = 0x7FFFFFFF;
              }
              sprintf_2f(v4, v157);
              unsigned int v158 = (unsigned char *)(*(void *)v4)++;
              *unsigned int v158 = 44;
              if (*(void *)v4 >= *(void *)(v4 + 24)) {
                *(void *)uint64_t v4 = *(void *)(v4 + 16);
              }
              double v159 = *(double *)(v934 + 8 * v128 + 4040) * 10.0;
              if (v159 <= 0.0) {
                double v160 = -0.5;
              }
              else {
                double v160 = 0.5;
              }
              double v161 = v159 + v160;
              if (v161 <= 2147483650.0)
              {
                if (v161 >= -2147483650.0) {
                  unsigned int v162 = (int)v161;
                }
                else {
                  unsigned int v162 = 0x80000000;
                }
              }
              else
              {
                unsigned int v162 = 0x7FFFFFFF;
              }
              sprintf_2f(v4, v162);
              unsigned int v153 = (char **)v4;
              uint64_t v144 = v934;
            }
            else
            {
              *(void *)uint64_t v4 = v150 + 1;
              *long long v150 = 44;
              unsigned int v152 = *(char **)v4;
              unsigned int v153 = (char **)(v4 + 16);
              if (*(void *)v4 < *(void *)(v4 + 24)) {
                goto LABEL_313;
              }
            }
            unsigned int v152 = *v153;
LABEL_313:
            *(void *)uint64_t v4 = v152 + 1;
            *unsigned int v152 = 44;
            if (*(void *)v4 >= *(void *)(v4 + 24)) {
              *(void *)uint64_t v4 = *(void *)(v4 + 16);
            }
            double v163 = *(double *)(v144 + 8 * v128 + 1992);
            if (v163 > 0.0)
            {
              double v164 = v163 * 10.0;
              if (v164 <= 0.0) {
                double v165 = -0.5;
              }
              else {
                double v165 = 0.5;
              }
              double v166 = v164 + v165;
              if (v166 <= 2147483650.0)
              {
                if (v166 >= -2147483650.0) {
                  unsigned int v167 = (int)v166;
                }
                else {
                  unsigned int v167 = 0x80000000;
                }
              }
              else
              {
                unsigned int v167 = 0x7FFFFFFF;
              }
              sprintf_2f(v4, v167);
              uint64_t v144 = v934;
            }
            ++v128;
            if (v142 > 2) {
              break;
            }
            ++v142;
LABEL_327:
            BOOL v94 = __CFADD__(v143++, 1);
          }
          while (!v94);
        }
        int v168 = (unsigned char *)(*(void *)v4)++;
        *int v168 = 44;
        BOOL v169 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          BOOL v169 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v169;
        }
        char v170 = 49;
        if (v127 > 64)
        {
          if (v127 <= 82)
          {
            signed int v126 = v928;
            if (v127 != 65 && v127 != 81)
            {
              if (v127 == 82)
              {
LABEL_340:
                char v170 = 50;
              }
              else
              {
LABEL_351:
                EvCrt_Illegal_Default("NMEA_Encode_GSV", 0x402u);
                BOOL v169 = *(char **)v4;
                char v170 = 48;
              }
            }
          }
          else
          {
            signed int v126 = v928;
            switch(v127)
            {
              case 'a':
LABEL_341:
                char v170 = 55;
                break;
              case 'b':
                break;
              case 'c':
                goto LABEL_340;
              case 'd':
                goto LABEL_345;
              case 'e':
LABEL_336:
                char v170 = 53;
                break;
              default:
                if (v127 != 83) {
                  goto LABEL_351;
                }
LABEL_345:
                char v170 = 51;
                break;
            }
          }
LABEL_346:
          *(void *)uint64_t v4 = v169 + 1;
          *BOOL v169 = v170;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
        }
        else
        {
          signed int v126 = v928;
          switch(v127)
          {
            case 17:
            case 33:
            case 35:
              goto LABEL_346;
            case 18:
            case 34:
            case 36:
              goto LABEL_345;
            case 19:
              goto LABEL_336;
            case 20:
              goto LABEL_341;
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
              goto LABEL_351;
            default:
              signed int v126 = v928;
              switch(v127)
              {
                case '1':
                  goto LABEL_346;
                case '2':
                  goto LABEL_345;
                case '3':
                  goto LABEL_336;
                case '4':
                  goto LABEL_341;
                default:
                  if (v127) {
                    goto LABEL_351;
                  }
                  break;
              }
              break;
          }
        }
        size_t result = NMEA_Add_checksum(v4, v932);
        unsigned int v129 = v926;
        BOOL v43 = v130++ == v926;
        a3 = v934;
        unint64_t v124 = v930;
      }
      while (!v43);
LABEL_352:
      if (++v124 == 5)
      {
        word_26AE77080 = 0;
        uint64_t v6 = v918;
        break;
      }
    }
  }
  int v171 = v6[5];
  if (v171 >= 1 && v171 <= ++word_26AE77082)
  {
    int v172 = (unsigned char *)(*(void *)v4)++;
    *int v172 = 36;
    int v173 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      int v173 = *(char **)(v4 + 16);
    }
    char v174 = 71;
    uint64_t v175 = 1u;
    int v176 = v173;
    do
    {
      *(void *)uint64_t v4 = v176 + 1;
      *int v176 = v174;
      int v176 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        int v176 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v176;
      }
      char v174 = aGprmc[v175++];
    }
    while (v175 != 7);
    sprintf_HHMMSS((void *)v4, a3);
    uint64_t v177 = v934;
    if (*(unsigned char *)(v934 + 318)) {
      int v178 = *(_DWORD *)(v934 + 296);
    }
    else {
      int v178 = 0;
    }
    if (v178)
    {
      if (v178 <= 0) {
        char v179 = 86;
      }
      else {
        char v179 = 65;
      }
      double v180 = (char *)(*(void *)v4)++;
      *double v180 = v179;
      double v181 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        double v181 = *(char **)(v4 + 16);
      }
      *(void *)uint64_t v4 = v181 + 1;
      *double v181 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_LatLon((char **)v4, *(double *)(v934 + 96), *(double *)(v934 + 104));
      double v182 = *(double *)(v934 + 128) * 1.94279547 * 1000.0;
      double v183 = -0.5;
      if (v182 > 0.0) {
        double v183 = 0.5;
      }
      double v184 = v182 + v183;
      if (v184 <= 2147483650.0)
      {
        if (v184 >= -2147483650.0) {
          unsigned int v185 = (int)v184;
        }
        else {
          unsigned int v185 = 0x80000000;
        }
      }
      else
      {
        unsigned int v185 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v185, 4);
      uint64_t v189 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v189 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v190 = *(double *)(v934 + 136) * 10.0;
      double v191 = -0.5;
      if (v190 > 0.0) {
        double v191 = 0.5;
      }
      double v192 = v190 + v191;
      if (v192 <= 2147483650.0)
      {
        if (v192 >= -2147483650.0) {
          unsigned int v193 = (int)v192;
        }
        else {
          unsigned int v193 = 0x80000000;
        }
      }
      else
      {
        unsigned int v193 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v193);
      uint64_t v194 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v194 = 44;
      unsigned int v187 = *(char **)v4;
      uint64_t v177 = v934;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v187 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v187;
      }
    }
    else
    {
      uint64_t v186 = 0;
      unsigned int v187 = *(char **)v4;
      char v188 = 86;
      do
      {
        *(void *)uint64_t v4 = v187 + 1;
        *unsigned int v187 = v188;
        unsigned int v187 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          unsigned int v187 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v187;
        }
        char v188 = aV[++v186];
      }
      while (v186 != 8);
    }
    if (*(unsigned char *)(v177 + 9))
    {
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v177 + 14));
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v934 + 12));
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v934 + 10) - 2000);
      unsigned int v187 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v187 + 1;
    *unsigned int v187 = 44;
    double v195 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      double v195 = *(char **)(v4 + 16);
    }
    *(void *)uint64_t v4 = v195 + 1;
    *double v195 = 44;
    double v196 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      double v196 = *(char **)(v4 + 16);
    }
    *(void *)uint64_t v4 = v196 + 1;
    *double v196 = 44;
    double v197 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      double v197 = *(char **)(v4 + 16);
    }
    unint64_t v198 = 0x44414441454EuLL >> (8 * v178);
    if (v178 >= 6) {
      LOBYTE(v198) = 78;
    }
    *(void *)uint64_t v4 = v197 + 1;
    *double v197 = v198;
    double v199 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      double v199 = *(char **)(v4 + 16);
    }
    uint64_t v200 = 0;
    char v201 = 44;
    do
    {
      *(void *)uint64_t v4 = v199 + 1;
      *double v199 = v201;
      double v199 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v199 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v199;
      }
      char v201 = aV_0[++v200];
    }
    while (v200 != 2);
    size_t result = NMEA_Add_checksum(v4, v173);
    word_26AE77082 = 0;
    a3 = v934;
  }
  int v202 = v6[6];
  if (v202 >= 1 && v202 <= ++word_26AE77084)
  {
    int v203 = (unsigned char *)(*(void *)v4)++;
    *int v203 = 36;
    uint64_t v204 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v204 = *(char **)(v4 + 16);
    }
    char v205 = 71;
    uint64_t v206 = 1u;
    int v207 = v204;
    do
    {
      *(void *)uint64_t v4 = v207 + 1;
      *int v207 = v205;
      int v207 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        int v207 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v207;
      }
      char v205 = aGpvtg[v206++];
    }
    while (v206 != 7);
    int v208 = *(_DWORD *)(a3 + 296);
    if (*(unsigned char *)(a3 + 318)) {
      BOOL v209 = v208 == 0;
    }
    else {
      BOOL v209 = 1;
    }
    if (v209)
    {
      char v210 = 44;
      uint64_t v211 = 1u;
      do
      {
        *(void *)uint64_t v4 = v207 + 1;
        *int v207 = v210;
        int v207 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          int v207 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v207;
        }
        char v210 = aTMNKN[v211++];
      }
      while (v211 != 14);
    }
    else
    {
      double v212 = *(double *)(a3 + 136) * 10.0;
      double v213 = -0.5;
      if (v212 > 0.0) {
        double v213 = 0.5;
      }
      double v214 = v212 + v213;
      if (v214 <= 2147483650.0)
      {
        if (v214 >= -2147483650.0) {
          unsigned int v215 = (int)v214;
        }
        else {
          unsigned int v215 = 0x80000000;
        }
      }
      else
      {
        unsigned int v215 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v215);
      double v216 = *(char **)v4;
      char v217 = 44;
      uint64_t v218 = 1u;
      do
      {
        *(void *)uint64_t v4 = v216 + 1;
        *double v216 = v217;
        double v216 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v216 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v216;
        }
        char v217 = aT_1[v218++];
      }
      while (v218 != 4);
      char v219 = 44;
      uint64_t v220 = 1u;
      do
      {
        *(void *)uint64_t v4 = v216 + 1;
        *double v216 = v219;
        double v216 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v216 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v216;
        }
        char v219 = aM[v220++];
      }
      while (v220 != 4);
      double v221 = *(double *)(v934 + 128) * 1.94279547 * 1000.0;
      double v222 = -0.5;
      if (v221 > 0.0) {
        double v222 = 0.5;
      }
      double v223 = v221 + v222;
      if (v223 <= 2147483650.0)
      {
        if (v223 >= -2147483650.0) {
          unsigned int v224 = (int)v223;
        }
        else {
          unsigned int v224 = 0x80000000;
        }
      }
      else
      {
        unsigned int v224 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v224, 4);
      double v225 = *(char **)v4;
      char v226 = 44;
      uint64_t v227 = 1u;
      do
      {
        *(void *)uint64_t v4 = v225 + 1;
        *double v225 = v226;
        double v225 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v225 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v225;
        }
        char v226 = aN_0[v227++];
      }
      while (v227 != 4);
      double v228 = *(double *)(v934 + 128) * 3.6 * 1000.0;
      double v229 = -0.5;
      if (v228 > 0.0) {
        double v229 = 0.5;
      }
      double v230 = v228 + v229;
      if (v230 <= 2147483650.0)
      {
        if (v230 >= -2147483650.0) {
          unsigned int v231 = (int)v230;
        }
        else {
          unsigned int v231 = 0x80000000;
        }
      }
      else
      {
        unsigned int v231 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v231, 4);
      double v232 = *(char **)v4;
      char v233 = 44;
      uint64_t v234 = 1u;
      do
      {
        *(void *)uint64_t v4 = v232 + 1;
        char *v232 = v233;
        double v232 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v232 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v232;
        }
        char v233 = aK[v234++];
      }
      while (v234 != 4);
      switch(v208)
      {
        case 1:
          *(void *)uint64_t v4 = v232 + 1;
          char v235 = 69;
          break;
        case 2:
        case 4:
          *(void *)uint64_t v4 = v232 + 1;
          char v235 = 65;
          break;
        case 3:
        case 5:
          *(void *)uint64_t v4 = v232 + 1;
          char v235 = 68;
          break;
        default:
          *(void *)uint64_t v4 = v232 + 1;
          char v235 = 78;
          break;
      }
      char *v232 = v235;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
    }
    size_t result = NMEA_Add_checksum(v4, v204);
    a3 = v934;
    word_26AE77084 = 0;
  }
  int v236 = v6[7];
  if (v236 >= 1 && v236 <= ++word_26AE77086)
  {
    uint64_t v237 = (unsigned char *)(*(void *)v4)++;
    *uint64_t v237 = 36;
    uint64_t v238 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      uint64_t v238 = *(char **)(v4 + 16);
    }
    uint64_t v239 = 0;
    char v240 = 71;
    double v241 = v238;
    do
    {
      *(void *)uint64_t v4 = v241 + 1;
      *double v241 = v240;
      double v241 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v241 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v241;
      }
      char v240 = aGn[++v239];
    }
    while (v239 != 2);
    uint64_t v242 = 0;
    char v243 = 90;
    do
    {
      *(void *)uint64_t v4 = v241 + 1;
      *double v241 = v243;
      double v241 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        double v241 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v241;
      }
      char v243 = aZcd[++v242];
    }
    while (v242 != 4);
    unsigned int v244 = *(_DWORD *)(a3 + 4);
    unsigned int v245 = v244 % 0x3E8;
    sprintf1da((void *)v4, v244 / 0x3E8, __dst, 0, 0);
    double v246 = (unsigned char *)(*(void *)v4)++;
    *double v246 = 46;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      *(void *)uint64_t v4 = *(void *)(v4 + 16);
    }
    sprintf_03d(v4, v245);
    uint64_t v247 = 0;
    unsigned int v248 = *(char **)v4;
    char v249 = 44;
    do
    {
      *(void *)uint64_t v4 = v248 + 1;
      char *v248 = v249;
      unsigned int v248 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v248 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v248;
      }
      char v249 = asc_22BADF2C4[++v247];
    }
    while (v247 != 2);
    size_t result = NMEA_Add_checksum(v4, v238);
    word_26AE77086 = 0;
    a3 = v934;
  }
  int v250 = v6[8];
  if (v250 >= 1 && v250 <= ++word_26AE77088)
  {
    unsigned int v251 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v251 = 36;
    unsigned int v252 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      unsigned int v252 = *(char **)(v4 + 16);
    }
    uint64_t v253 = 0;
    char v254 = 71;
    unsigned int v255 = v252;
    do
    {
      *(void *)uint64_t v4 = v255 + 1;
      *unsigned int v255 = v254;
      unsigned int v255 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v255 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v255;
      }
      char v254 = aGn[++v253];
    }
    while (v253 != 2);
    uint64_t v256 = 0;
    char v257 = 90;
    do
    {
      *(void *)uint64_t v4 = v255 + 1;
      *unsigned int v255 = v257;
      unsigned int v255 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v255 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v255;
      }
      char v257 = aZda[++v256];
    }
    while (v256 != 4);
    sprintf_HHMMSS((void *)v4, a3);
    if (*(unsigned char *)(v934 + 9))
    {
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v934 + 14));
      unsigned int v258 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v258 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v934 + 12));
      unsigned int v259 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v259 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_02d((void *)v4, *(unsigned __int16 *)(v934 + 10));
      int v260 = *(char **)v4;
    }
    else
    {
      uint64_t v261 = 0;
      int v260 = *(char **)v4;
      char v262 = 44;
      do
      {
        *(void *)uint64_t v4 = v260 + 1;
        *int v260 = v262;
        int v260 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          int v260 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v260;
        }
        char v262 = asc_22BADF2CC[++v261];
      }
      while (v261 != 2);
    }
    uint64_t v263 = 0;
    char v264 = 44;
    do
    {
      *(void *)uint64_t v4 = v260 + 1;
      *int v260 = v264;
      int v260 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        int v260 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v260;
      }
      char v264 = asc_22BADF2CC[++v263];
    }
    while (v263 != 2);
    size_t result = NMEA_Add_checksum(v4, v252);
    word_26AE77088 = 0;
    a3 = v934;
  }
  int v265 = v6[9];
  if (v265 >= 1 && v265 <= ++word_26AE7708A)
  {
    unsigned int v266 = (unsigned char *)(*(void *)v4)++;
    *unsigned int v266 = 36;
    int v267 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24)) {
      int v267 = *(char **)(v4 + 16);
    }
    char v268 = 80;
    uint64_t v269 = 1u;
    unsigned int v270 = v267;
    do
    {
      *(void *)uint64_t v4 = v270 + 1;
      *unsigned int v270 = v268;
      unsigned int v270 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        unsigned int v270 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v270;
      }
      char v268 = aPdbga[v269++];
    }
    while (v269 != 7);
    uint64_t v271 = a3;
    sprintf_HHMMSS((void *)v4, a3);
    int v272 = *(_DWORD *)(v271 + 292);
    if (v272 >= 0) {
      unsigned int v273 = *(_DWORD *)(v271 + 292);
    }
    else {
      unsigned int v273 = -v272;
    }
    sprintf1da((void *)v4, v273, __dst, 0, v272 >> 31);
    char v274 = (unsigned char *)(*(void *)v4)++;
    *char v274 = 44;
    int64x2_t v275 = *(char **)v4;
    if (*(void *)v4 >= *(void *)(v4 + 24))
    {
      int64x2_t v275 = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = v275;
    }
    int v276 = *(_DWORD *)(v934 + 296);
    if (v276)
    {
      if (v276 >= 0) {
        unsigned int v277 = *(_DWORD *)(v934 + 296);
      }
      else {
        unsigned int v277 = -v276;
      }
      sprintf1da((void *)v4, v277, __dst, 0, v276 >> 31);
      char v278 = (unsigned char *)(*(void *)v4)++;
      *char v278 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v934 + 317), __dst, 0, 0);
      char v279 = (unsigned char *)(*(void *)v4)++;
      *char v279 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(v934 + 318), __dst, 0, 0);
      char v280 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v280 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 200));
      int v281 = (unsigned char *)(*(void *)v4)++;
      *int v281 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 208));
      long long v282 = (unsigned char *)(*(void *)v4)++;
      *long long v282 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v283 = (int)*(double *)(v934 + 216);
      if (v283 >= 0) {
        unsigned int v284 = (int)*(double *)(v934 + 216);
      }
      else {
        unsigned int v284 = -v283;
      }
      sprintf1da((void *)v4, v284, __dst, 0, v283 >> 31);
      long long v285 = (unsigned char *)(*(void *)v4)++;
      *long long v285 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 192));
      long long v286 = (unsigned char *)(*(void *)v4)++;
      *long long v286 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 224));
      long long v287 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v287 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 232));
      long long v288 = (unsigned char *)(*(void *)v4)++;
      *long long v288 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 240));
      long long v289 = (unsigned char *)(*(void *)v4)++;
      *long long v289 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 152) * 1000.0);
      long long v290 = (unsigned char *)(*(void *)v4)++;
      *long long v290 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 160) * 1000000000.0);
      long long v291 = (unsigned char *)(*(void *)v4)++;
      *long long v291 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 168) * 1000000000.0);
      long long v292 = (unsigned char *)(*(void *)v4)++;
      *long long v292 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v293 = *(double *)(v934 + 144) * 1000.0;
      double v294 = -0.5;
      if (v293 > 0.0) {
        double v294 = 0.5;
      }
      double v295 = v293 + v294;
      if (v295 <= 2147483650.0)
      {
        if (v295 >= -2147483650.0) {
          unsigned int v296 = (int)v295;
        }
        else {
          unsigned int v296 = 0x80000000;
        }
      }
      else
      {
        unsigned int v296 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v296, 4);
      unsigned int v299 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v299 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v300 = *(_DWORD *)(v934 + 300);
      if (v300 >= 0) {
        unsigned int v301 = *(_DWORD *)(v934 + 300);
      }
      else {
        unsigned int v301 = -v300;
      }
      sprintf1da((void *)v4, v301, __dst, 0, v300 >> 31);
      unsigned int v302 = (unsigned char *)(*(void *)v4)++;
      *unsigned int v302 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v303 = *(_DWORD *)(v934 + 304);
      if (v303 >= 0) {
        unsigned int v304 = *(_DWORD *)(v934 + 304);
      }
      else {
        unsigned int v304 = -v303;
      }
      sprintf1da((void *)v4, v304, __dst, 0, v303 >> 31);
      uint64_t v305 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v305 = 44;
      uint64_t v306 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v306 = *(char **)(v4 + 16);
      }
      uint64_t v307 = 0;
      char v308 = 48;
      do
      {
        *(void *)uint64_t v4 = v306 + 1;
        char *v306 = v308;
        uint64_t v306 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v306 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v306;
        }
        char v308 = a0x_0[++v307];
      }
      while (v307 != 2);
      unint64_t v309 = *(unsigned int *)(v934 + 312);
      LOBYTE(__dst[0]) = hexTABLE[v309 >> 28];
      BYTE1(__dst[0]) = hexTABLE[(v309 >> 24) & 0xF];
      hex6(v4, v309, __dst, 2);
      unsigned int v310 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v310 = 44;
      double v311 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        double v311 = *(char **)(v4 + 16);
      }
      uint64_t v312 = 0;
      char v313 = 48;
      do
      {
        *(void *)uint64_t v4 = v311 + 1;
        *double v311 = v313;
        double v311 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          double v311 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v311;
        }
        char v313 = a0x_0[++v312];
      }
      while (v312 != 2);
      sprintf_03x((char **)v4, *(unsigned int *)(v934 + 288));
      uint64_t v314 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v314 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v315 = *(_DWORD *)(v934 + 308);
      if (v315 >= 0) {
        unsigned int v316 = *(_DWORD *)(v934 + 308);
      }
      else {
        unsigned int v316 = -v315;
      }
      sprintf1da((void *)v4, v316, __dst, 0, v315 >> 31);
    }
    else
    {
      char v297 = 48;
      uint64_t v298 = 1u;
      do
      {
        *(void *)uint64_t v4 = v275 + 1;
        *int64x2_t v275 = v297;
        int64x2_t v275 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          int64x2_t v275 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v275;
        }
        char v297 = a0_1[v298++];
      }
      while (v298 != 15);
    }
    size_t result = NMEA_Add_checksum(v4, v267);
    if (a4 && *(_DWORD *)a4 == *(_DWORD *)v934 && *(_DWORD *)(a4 + 4) == *(_DWORD *)(v934 + 4))
    {
      uint64_t v317 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v317 = 36;
      int v318 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        int v318 = *(char **)(v4 + 16);
      }
      char v319 = 80;
      uint64_t v320 = 1u;
      uint64_t v321 = v318;
      do
      {
        *(void *)uint64_t v4 = v321 + 1;
        char *v321 = v319;
        uint64_t v321 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v321 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v321;
        }
        char v319 = aPdbgc[v320++];
      }
      while (v320 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      v322 = *(char **)v4;
      if (*(unsigned char *)(a4 + 8))
      {
        *(void *)uint64_t v4 = v322 + 1;
        char *v322 = 65;
        v323 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v323 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v323 + 1;
        char *v323 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 9), __dst, 0, 0);
        v324 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v324 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 10), __dst, 0, 0);
        v325 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v325 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 12) / 10, 3);
        v326 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v326 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 16), __dst, 0, 0);
        int v327 = (unsigned char *)(*(void *)v4)++;
        *int v327 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 17), __dst, 0, 0);
        int v328 = (unsigned char *)(*(void *)v4)++;
        *int v328 = 44;
        v322 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v322 = *(char **)(v4 + 16);
        }
      }
      else
      {
        char v329 = 78;
        uint64_t v330 = 1u;
        do
        {
          *(void *)uint64_t v4 = v322 + 1;
          char *v322 = v329;
          v322 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v322 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v322;
          }
          char v329 = aN_1[v330++];
        }
        while (v330 != 8);
      }
      if (*(unsigned char *)(a4 + 18))
      {
        *(void *)uint64_t v4 = v322 + 1;
        char *v322 = 65;
        uint64_t v331 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          uint64_t v331 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v331 + 1;
        char *v331 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 19), __dst, 0, 0);
        uint64_t v332 = (unsigned char *)(*(void *)v4)++;
        *uint64_t v332 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 20), __dst, 0, 0);
        uint64_t v333 = (unsigned char *)(*(void *)v4)++;
        *uint64_t v333 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 24) / 10, 3);
        __int16 v334 = (unsigned char *)(*(void *)v4)++;
        *__int16 v334 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 28), __dst, 0, 0);
        int v335 = (unsigned char *)(*(void *)v4)++;
        *int v335 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 29), __dst, 0, 0);
        double v336 = (unsigned char *)(*(void *)v4)++;
        *double v336 = 44;
        v322 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v322 = *(char **)(v4 + 16);
        }
      }
      else
      {
        char v337 = 78;
        uint64_t v338 = 1u;
        do
        {
          *(void *)uint64_t v4 = v322 + 1;
          char *v322 = v337;
          v322 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v322 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v322;
          }
          char v337 = aN_1[v338++];
        }
        while (v338 != 8);
      }
      if (*(unsigned char *)(a4 + 30))
      {
        *(void *)uint64_t v4 = v322 + 1;
        char *v322 = 65;
        int v339 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          int v339 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v339 + 1;
        *int v339 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 31), __dst, 0, 0);
        uint64_t v340 = (unsigned char *)(*(void *)v4)++;
        *uint64_t v340 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 32), __dst, 0, 0);
        uint64_t v341 = (unsigned char *)(*(void *)v4)++;
        *uint64_t v341 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 36) / 10, 3);
        unsigned int v342 = (unsigned char *)(*(void *)v4)++;
        *unsigned int v342 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 40), __dst, 0, 0);
        uint64_t v343 = (unsigned char *)(*(void *)v4)++;
        *uint64_t v343 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 41), __dst, 0, 0);
      }
      else
      {
        char v344 = 78;
        uint64_t v345 = 1u;
        do
        {
          *(void *)uint64_t v4 = v322 + 1;
          char *v322 = v344;
          v322 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v322 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v322;
          }
          char v344 = aN_2[v345++];
        }
        while (v345 != 7);
      }
      NMEA_Add_checksum(v4, v318);
      int v346 = (unsigned char *)(*(void *)v4)++;
      *int v346 = 36;
      int v347 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        int v347 = *(char **)(v4 + 16);
      }
      char v348 = 80;
      uint64_t v349 = 1u;
      uint64_t v350 = v347;
      do
      {
        *(void *)uint64_t v4 = v350 + 1;
        *uint64_t v350 = v348;
        uint64_t v350 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v350 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v350;
        }
        char v348 = aPdbgd[v349++];
      }
      while (v349 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      uint64_t v351 = *(char **)v4;
      if (*(unsigned char *)(a4 + 42))
      {
        *(void *)uint64_t v4 = v351 + 1;
        *uint64_t v351 = 65;
        uint64_t v352 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          uint64_t v352 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v352 + 1;
        *uint64_t v352 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 43), __dst, 0, 0);
        long long v353 = (unsigned char *)(*(void *)v4)++;
        *long long v353 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 44), __dst, 0, 0);
        BOOL v354 = (unsigned char *)(*(void *)v4)++;
        *BOOL v354 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 48) / 10, 3);
        BOOL v355 = (unsigned char *)(*(void *)v4)++;
        *BOOL v355 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v356 = *(double *)(a4 + 56) * 100.0;
        double v357 = -0.5;
        if (v356 > 0.0) {
          double v357 = 0.5;
        }
        double v358 = v356 + v357;
        if (v358 <= 2147483650.0)
        {
          if (v358 >= -2147483650.0) {
            unsigned int v359 = (int)v358;
          }
          else {
            unsigned int v359 = 0x80000000;
          }
        }
        else
        {
          unsigned int v359 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v359, 3);
        v362 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v362 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v363 = *(double *)(a4 + 64) * 100.0;
        double v364 = -0.5;
        if (v363 > 0.0) {
          double v364 = 0.5;
        }
        double v365 = v363 + v364;
        if (v365 <= 2147483650.0)
        {
          if (v365 >= -2147483650.0) {
            unsigned int v366 = (int)v365;
          }
          else {
            unsigned int v366 = 0x80000000;
          }
        }
        else
        {
          unsigned int v366 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v366, 3);
        v367 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v367 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 72), __dst, 0, 0);
      }
      else
      {
        char v360 = 78;
        uint64_t v361 = 1u;
        do
        {
          *(void *)uint64_t v4 = v351 + 1;
          *uint64_t v351 = v360;
          uint64_t v351 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            uint64_t v351 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v351;
          }
          char v360 = aN_1[v361++];
        }
        while (v361 != 8);
      }
      NMEA_Add_checksum(v4, v347);
      __int16 v368 = (unsigned char *)(*(void *)v4)++;
      *__int16 v368 = 36;
      uint64_t v369 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        uint64_t v369 = *(char **)(v4 + 16);
      }
      char v370 = 80;
      uint64_t v371 = 1u;
      uint64_t v372 = v369;
      do
      {
        *(void *)uint64_t v4 = v372 + 1;
        *uint64_t v372 = v370;
        uint64_t v372 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v372 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v372;
        }
        char v370 = aPdbge[v371++];
      }
      while (v371 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      uint64_t v373 = 0;
      __int16 v374 = *(char **)v4;
      char v375 = 65;
      do
      {
        *(void *)uint64_t v4 = v374 + 1;
        *__int16 v374 = v375;
        __int16 v374 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          __int16 v374 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v374;
        }
        char v375 = aA[++v373];
      }
      while (v373 != 2);
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 73), __dst, 0, 0);
      uint64_t v376 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v376 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 74), __dst, 0, 0);
      uint64_t v377 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v377 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 75), __dst, 0, 0);
      uint64_t v378 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v378 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 76), __dst, 0, 0);
      uint64_t v379 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v379 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 78), __dst, 0, 0);
      v380 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v380 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 80), __dst, 0, 0);
      v381 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v381 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 82), __dst, 0, 0);
      v382 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v382 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 83), __dst, 0, 0);
      uint64_t v383 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v383 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 84), __dst, 0, 0);
      v384 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v384 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 85), __dst, 0, 0);
      unint64_t v385 = (unsigned char *)(*(void *)v4)++;
      *unint64_t v385 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v386 = *(char *)(a4 + 86);
      if (v386 >= 0) {
        unsigned int v387 = *(char *)(a4 + 86);
      }
      else {
        unsigned int v387 = -v386;
      }
      sprintf1da((void *)v4, v387, __dst, 0, (v386 >> 7) & 1);
      uint64_t v388 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v388 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 87), __dst, 0, 0);
      v389 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v389 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 88), __dst, 0, 0);
      uint64_t v390 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v390 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 89), __dst, 0, 0);
      v391 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v391 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 90), __dst, 0, 0);
      v392 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v392 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 92), __dst, 0, 0);
      uint64_t v393 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v393 = 44;
      v394 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v394 = *(char **)(v4 + 16);
      }
      uint64_t v395 = 0;
      char v396 = 82;
      do
      {
        *(void *)uint64_t v4 = v394 + 1;
        char *v394 = v396;
        v394 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v394 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v394;
        }
        char v396 = aR[++v395];
      }
      while (v395 != 2);
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 94), __dst, 0, 0);
      uint64_t v397 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v397 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 96), __dst, 0, 0);
      uint64_t v398 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v398 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 98), __dst, 0, 0);
      uint64_t v399 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v399 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 100), __dst, 0, 0);
      uint64_t v400 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v400 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 101), __dst, 0, 0);
      uint64_t v401 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v401 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 102), __dst, 0, 0);
      uint64_t v402 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v402 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 103), __dst, 0, 0);
      uint64_t v403 = (unsigned char *)(*(void *)v4)++;
      *uint64_t v403 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 104), __dst, 0, 0);
      int v404 = (unsigned char *)(*(void *)v4)++;
      *int v404 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v405 = *(double *)(a4 + 112) * 10.0;
      double v406 = -0.5;
      if (v405 > 0.0) {
        double v406 = 0.5;
      }
      double v407 = v405 + v406;
      if (v407 <= 2147483650.0)
      {
        if (v407 >= -2147483650.0) {
          unsigned int v408 = (int)v407;
        }
        else {
          unsigned int v408 = 0x80000000;
        }
      }
      else
      {
        unsigned int v408 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v408);
      long long v409 = (unsigned char *)(*(void *)v4)++;
      *long long v409 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v410 = *(double *)(a4 + 120) * 10.0;
      double v411 = -0.5;
      if (v410 > 0.0) {
        double v411 = 0.5;
      }
      double v412 = v410 + v411;
      if (v412 <= 2147483650.0)
      {
        if (v412 >= -2147483650.0) {
          unsigned int v413 = (int)v412;
        }
        else {
          unsigned int v413 = 0x80000000;
        }
      }
      else
      {
        unsigned int v413 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v413);
      long long v414 = (unsigned char *)(*(void *)v4)++;
      *long long v414 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v415 = *(double *)(a4 + 128) * 10.0;
      double v416 = -0.5;
      if (v415 > 0.0) {
        double v416 = 0.5;
      }
      double v417 = v415 + v416;
      if (v417 <= 2147483650.0)
      {
        if (v417 >= -2147483650.0) {
          unsigned int v418 = (int)v417;
        }
        else {
          unsigned int v418 = 0x80000000;
        }
      }
      else
      {
        unsigned int v418 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v418);
      v419 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v419 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v420 = *(double *)(a4 + 136) * 10.0;
      double v421 = -0.5;
      if (v420 > 0.0) {
        double v421 = 0.5;
      }
      double v422 = v420 + v421;
      if (v422 <= 2147483650.0)
      {
        if (v422 >= -2147483650.0) {
          unsigned int v423 = (int)v422;
        }
        else {
          unsigned int v423 = 0x80000000;
        }
      }
      else
      {
        unsigned int v423 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v423);
      char v424 = (unsigned char *)(*(void *)v4)++;
      *char v424 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 144), __dst, 0, 0);
      __int16 v425 = (unsigned char *)(*(void *)v4)++;
      *__int16 v425 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 145), __dst, 0, 0);
      char v426 = (unsigned char *)(*(void *)v4)++;
      *char v426 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 146), __dst, 0, 0);
      __int16 v427 = (unsigned char *)(*(void *)v4)++;
      *__int16 v427 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 147), __dst, 0, 0);
      char v428 = (unsigned char *)(*(void *)v4)++;
      *char v428 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 148), __dst, 0, 0);
      __int16 v429 = (unsigned char *)(*(void *)v4)++;
      *__int16 v429 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 149), __dst, 0, 0);
      char v430 = (unsigned char *)(*(void *)v4)++;
      *char v430 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 150), __dst, 0, 0);
      __int16 v431 = (unsigned char *)(*(void *)v4)++;
      *__int16 v431 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 151), __dst, 0, 0);
      NMEA_Add_checksum(v4, v369);
      if (*(unsigned char *)(a4 + 152)) {
        NMEA_Encode_PDBGE_Constell((char **)v4, 1, v934, a4);
      }
      uint64_t v432 = v934;
      if (*(unsigned char *)(a4 + 192))
      {
        NMEA_Encode_PDBGE_Constell((char **)v4, 5, v934, a4);
        uint64_t v432 = v934;
      }
      if (*(unsigned char *)(a4 + 232))
      {
        NMEA_Encode_PDBGE_Constell((char **)v4, 2, v934, a4);
        uint64_t v432 = v934;
      }
      if (*(unsigned char *)(a4 + 272))
      {
        NMEA_Encode_PDBGE_Constell((char **)v4, 3, v934, a4);
        uint64_t v432 = v934;
      }
      if (*(unsigned char *)(a4 + 312))
      {
        NMEA_Encode_PDBGE_Constell((char **)v4, 4, v934, a4);
        uint64_t v432 = v934;
      }
      if (*(unsigned char *)(a4 + 352))
      {
        NMEA_Encode_PDBGE_Constell((char **)v4, 6, v934, a4);
        uint64_t v432 = v934;
      }
      __int16 v433 = (unsigned char *)(*(void *)v4)++;
      *__int16 v433 = 36;
      char v434 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        char v434 = *(char **)(v4 + 16);
      }
      char v435 = 80;
      uint64_t v436 = 1u;
      __int16 v437 = v434;
      do
      {
        *(void *)uint64_t v4 = v437 + 1;
        *__int16 v437 = v435;
        __int16 v437 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          __int16 v437 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v437;
        }
        char v435 = aPdbgi[v436++];
      }
      while (v436 != 7);
      sprintf_HHMMSS((void *)v4, v432);
      uint64_t v438 = 0;
      __int16 v439 = *(char **)v4;
      char v440 = 65;
      do
      {
        *(void *)uint64_t v4 = v439 + 1;
        *__int16 v439 = v440;
        __int16 v439 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          __int16 v439 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v439;
        }
        char v440 = aA[++v438];
      }
      while (v438 != 2);
      int v441 = *(_DWORD *)(a4 + 392);
      if (v441 >= 0) {
        unsigned int v442 = *(_DWORD *)(a4 + 392);
      }
      else {
        unsigned int v442 = -v441;
      }
      sprintf1da((void *)v4, v442, __dst, 0, v441 >> 31);
      __int16 v443 = (unsigned char *)(*(void *)v4)++;
      *__int16 v443 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 396), __dst, 0, 0);
      char v444 = (unsigned char *)(*(void *)v4)++;
      *char v444 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 398), __dst, 0, 0);
      __int16 v445 = (unsigned char *)(*(void *)v4)++;
      *__int16 v445 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_2d((void *)v4, *(_DWORD *)(a4 + 400));
      char v446 = (unsigned char *)(*(void *)v4)++;
      *char v446 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      for (uint64_t k = 404; k != 410; ++k)
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + k), __dst, 0, 0);
      char v448 = (unsigned char *)(*(void *)v4)++;
      *char v448 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 410), __dst, 0, 0);
      __int16 v449 = (unsigned char *)(*(void *)v4)++;
      *__int16 v449 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v450 = *(double *)(a4 + 416) * 10.0;
      double v451 = -0.5;
      if (v450 > 0.0) {
        double v451 = 0.5;
      }
      double v452 = v450 + v451;
      if (v452 <= 2147483650.0)
      {
        if (v452 >= -2147483650.0) {
          unsigned int v453 = (int)v452;
        }
        else {
          unsigned int v453 = 0x80000000;
        }
      }
      else
      {
        unsigned int v453 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v453);
      char v454 = (unsigned char *)(*(void *)v4)++;
      *char v454 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(a4 + 424));
      __int16 v455 = (unsigned char *)(*(void *)v4)++;
      *__int16 v455 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(a4 + 432));
      char v456 = (unsigned char *)(*(void *)v4)++;
      *char v456 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(a4 + 440));
      __int16 v457 = (unsigned char *)(*(void *)v4)++;
      *__int16 v457 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 448), __dst, 0, 0);
      char v458 = (unsigned char *)(*(void *)v4)++;
      *char v458 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 449), __dst, 0, 0);
      NMEA_Add_checksum(v4, v434);
      if (*(unsigned char *)(a4 + 456)) {
        NMEA_Encode_PDBGI_Constell((char **)v4, 1, v934, (long long *)a4);
      }
      uint64_t v459 = v934;
      if (*(unsigned char *)(a4 + 576))
      {
        NMEA_Encode_PDBGI_Constell((char **)v4, 5, v934, (long long *)a4);
        uint64_t v459 = v934;
      }
      if (*(unsigned char *)(a4 + 696))
      {
        NMEA_Encode_PDBGI_Constell((char **)v4, 2, v934, (long long *)a4);
        uint64_t v459 = v934;
      }
      if (*(unsigned char *)(a4 + 816))
      {
        NMEA_Encode_PDBGI_Constell((char **)v4, 3, v934, (long long *)a4);
        uint64_t v459 = v934;
      }
      if (*(unsigned char *)(a4 + 936))
      {
        NMEA_Encode_PDBGI_Constell((char **)v4, 4, v934, (long long *)a4);
        uint64_t v459 = v934;
      }
      if (*(unsigned char *)(a4 + 1056))
      {
        NMEA_Encode_PDBGI_Constell((char **)v4, 6, v934, (long long *)a4);
        uint64_t v459 = v934;
      }
      char v460 = (unsigned char *)(*(void *)v4)++;
      *char v460 = 36;
      __int16 v461 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        __int16 v461 = *(char **)(v4 + 16);
      }
      char v462 = 80;
      uint64_t v463 = 1u;
      char v464 = v461;
      do
      {
        *(void *)uint64_t v4 = v464 + 1;
        *char v464 = v462;
        char v464 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          char v464 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v464;
        }
        char v462 = aPdbgm[v463++];
      }
      while (v463 != 7);
      sprintf_HHMMSS((void *)v4, v459);
      __int16 v465 = *(char **)v4;
      if (*(unsigned char *)(a4 + 1176))
      {
        *(void *)uint64_t v4 = v465 + 1;
        *__int16 v465 = 65;
        char v466 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          char v466 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v466 + 1;
        *char v466 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1177), __dst, 0, 0);
        __int16 v467 = (unsigned char *)(*(void *)v4)++;
        *__int16 v467 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1178), __dst, 0, 0);
        char v468 = (unsigned char *)(*(void *)v4)++;
        *char v468 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 1180) / 10, 3);
        __int16 v469 = (unsigned char *)(*(void *)v4)++;
        *__int16 v469 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1184), __dst, 0, 0);
        char v470 = (unsigned char *)(*(void *)v4)++;
        *char v470 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v471 = *(double *)(a4 + 1192) * 10.0;
        double v472 = -0.5;
        if (v471 > 0.0) {
          double v472 = 0.5;
        }
        double v473 = v471 + v472;
        if (v473 <= 2147483650.0)
        {
          if (v473 >= -2147483650.0) {
            unsigned int v474 = (int)v473;
          }
          else {
            unsigned int v474 = 0x80000000;
          }
        }
        else
        {
          unsigned int v474 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v474);
        __int16 v477 = (unsigned char *)(*(void *)v4)++;
        *__int16 v477 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v478 = *(double *)(a4 + 1200) * 10.0;
        double v479 = -0.5;
        if (v478 > 0.0) {
          double v479 = 0.5;
        }
        double v480 = v478 + v479;
        if (v480 <= 2147483650.0)
        {
          if (v480 >= -2147483650.0) {
            unsigned int v481 = (int)v480;
          }
          else {
            unsigned int v481 = 0x80000000;
          }
        }
        else
        {
          unsigned int v481 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v481);
        char v482 = (unsigned char *)(*(void *)v4)++;
        *char v482 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v483 = *(double *)(a4 + 1208) * 10.0;
        double v484 = -0.5;
        if (v483 > 0.0) {
          double v484 = 0.5;
        }
        double v485 = v483 + v484;
        if (v485 <= 2147483650.0)
        {
          if (v485 >= -2147483650.0) {
            unsigned int v486 = (int)v485;
          }
          else {
            unsigned int v486 = 0x80000000;
          }
        }
        else
        {
          unsigned int v486 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v486);
        __int16 v487 = (unsigned char *)(*(void *)v4)++;
        *__int16 v487 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1216), __dst, 0, 0);
        char v488 = (unsigned char *)(*(void *)v4)++;
        *char v488 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1218), __dst, 0, 0);
        __int16 v489 = (unsigned char *)(*(void *)v4)++;
        *__int16 v489 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1220), __dst, 0, 0);
        char v490 = (unsigned char *)(*(void *)v4)++;
        *char v490 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1221), __dst, 0, 0);
        __int16 v491 = (unsigned char *)(*(void *)v4)++;
        *__int16 v491 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1222), __dst, 0, 0);
        char v492 = (unsigned char *)(*(void *)v4)++;
        *char v492 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1223), __dst, 0, 0);
        __int16 v493 = (unsigned char *)(*(void *)v4)++;
        *__int16 v493 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1224), __dst, 0, 0);
        char v494 = (unsigned char *)(*(void *)v4)++;
        *char v494 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1225), __dst, 0, 0);
      }
      else
      {
        char v475 = 78;
        uint64_t v476 = 1u;
        do
        {
          *(void *)uint64_t v4 = v465 + 1;
          *__int16 v465 = v475;
          __int16 v465 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            __int16 v465 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v465;
          }
          char v475 = aN_3[v476++];
        }
        while (v476 != 15);
      }
      NMEA_Add_checksum(v4, v461);
      if (*(unsigned char *)(a4 + 1232)) {
        NMEA_Encode_PDBGO((char **)v4, 1, v934, (unint64_t *)a4);
      }
      uint64_t v495 = v934;
      if (*(unsigned char *)(a4 + 1280))
      {
        NMEA_Encode_PDBGO((char **)v4, 5, v934, (unint64_t *)a4);
        uint64_t v495 = v934;
      }
      if (*(unsigned char *)(a4 + 1328))
      {
        NMEA_Encode_PDBGO((char **)v4, 2, v934, (unint64_t *)a4);
        uint64_t v495 = v934;
      }
      if (*(unsigned char *)(a4 + 1376))
      {
        NMEA_Encode_PDBGO((char **)v4, 3, v934, (unint64_t *)a4);
        uint64_t v495 = v934;
      }
      if (*(unsigned char *)(a4 + 1424))
      {
        NMEA_Encode_PDBGO((char **)v4, 4, v934, (unint64_t *)a4);
        uint64_t v495 = v934;
      }
      if (*(unsigned char *)(a4 + 1472))
      {
        NMEA_Encode_PDBGO((char **)v4, 6, v934, (unint64_t *)a4);
        uint64_t v495 = v934;
      }
      char v496 = (unsigned char *)(*(void *)v4)++;
      *char v496 = 36;
      __int16 v497 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        __int16 v497 = *(char **)(v4 + 16);
      }
      char v498 = 80;
      uint64_t v499 = 1u;
      char v500 = v497;
      do
      {
        *(void *)uint64_t v4 = v500 + 1;
        *char v500 = v498;
        char v500 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          char v500 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v500;
        }
        char v498 = aPdbgp[v499++];
      }
      while (v499 != 7);
      sprintf_HHMMSS((void *)v4, v495);
      __int16 v501 = *(char **)v4;
      if (*(unsigned char *)(a4 + 1520))
      {
        *(void *)uint64_t v4 = v501 + 1;
        *__int16 v501 = 65;
        char v502 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          char v502 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v502 + 1;
        *char v502 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1521), __dst, 0, 0);
        v503 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v503 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1523), __dst, 0, 0);
        v504 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v504 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_3f(v4, *(_DWORD *)(a4 + 1524) / 10, 3);
        v505 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v505 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1528), __dst, 0, 0);
        long long v506 = (unsigned char *)(*(void *)v4)++;
        *long long v506 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1529), __dst, 0, 0);
        __int16 v507 = (unsigned char *)(*(void *)v4)++;
        *__int16 v507 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1530), __dst, 0, 0);
        v508 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v508 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v509 = *(double *)(a4 + 1536) * 10.0;
        double v510 = -0.5;
        if (v509 > 0.0) {
          double v510 = 0.5;
        }
        double v511 = v509 + v510;
        if (v511 <= 2147483650.0)
        {
          if (v511 >= -2147483650.0) {
            unsigned int v512 = (int)v511;
          }
          else {
            unsigned int v512 = 0x80000000;
          }
        }
        else
        {
          unsigned int v512 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v512);
        long long v515 = (unsigned char *)(*(void *)v4)++;
        *long long v515 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v516 = *(double *)(a4 + 1544) * 10.0;
        double v517 = -0.5;
        if (v516 > 0.0) {
          double v517 = 0.5;
        }
        double v518 = v516 + v517;
        if (v518 <= 2147483650.0)
        {
          if (v518 >= -2147483650.0) {
            unsigned int v519 = (int)v518;
          }
          else {
            unsigned int v519 = 0x80000000;
          }
        }
        else
        {
          unsigned int v519 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v519);
        v520 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v520 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v521 = *(double *)(a4 + 1552) * 10.0;
        double v522 = -0.5;
        if (v521 > 0.0) {
          double v522 = 0.5;
        }
        double v523 = v521 + v522;
        if (v523 <= 2147483650.0)
        {
          if (v523 >= -2147483650.0) {
            unsigned int v524 = (int)v523;
          }
          else {
            unsigned int v524 = 0x80000000;
          }
        }
        else
        {
          unsigned int v524 = 0x7FFFFFFF;
        }
        sprintf_2f(v4, v524);
        long long v525 = (unsigned char *)(*(void *)v4)++;
        *long long v525 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v526 = *(_DWORD *)(a4 + 1560);
        if (v526 >= 0) {
          unsigned int v527 = *(_DWORD *)(a4 + 1560);
        }
        else {
          unsigned int v527 = -v526;
        }
        sprintf1da((void *)v4, v527, __dst, 0, v526 >> 31);
        v528 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v528 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v529 = *(_DWORD *)(a4 + 1564);
        if (v529 >= 0) {
          unsigned int v530 = *(_DWORD *)(a4 + 1564);
        }
        else {
          unsigned int v530 = -v529;
        }
        sprintf1da((void *)v4, v530, __dst, 0, v529 >> 31);
        v531 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v531 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1568), __dst, 0, 0);
        v532 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v532 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1570), __dst, 0, 0);
        v533 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v533 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1522), __dst, 0, 0);
      }
      else
      {
        char v513 = 78;
        uint64_t v514 = 1u;
        do
        {
          *(void *)uint64_t v4 = v501 + 1;
          *__int16 v501 = v513;
          __int16 v501 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            __int16 v501 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v501;
          }
          char v513 = aN_3[v514++];
        }
        while (v514 != 15);
      }
      NMEA_Add_checksum(v4, v497);
      v534 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v534 = 36;
      v535 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v535 = *(char **)(v4 + 16);
      }
      char v536 = 80;
      uint64_t v537 = 1u;
      uint64_t v538 = v535;
      do
      {
        *(void *)uint64_t v4 = v538 + 1;
        *uint64_t v538 = v536;
        uint64_t v538 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          uint64_t v538 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v538;
        }
        char v536 = aPdbgs[v537++];
      }
      while (v537 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      v539 = *(char **)v4;
      if (*(unsigned char *)(a4 + 1572))
      {
        *(void *)uint64_t v4 = v539 + 1;
        char *v539 = 65;
        v540 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v540 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v540 + 1;
        char *v540 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1573), __dst, 0, 0);
        v541 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v541 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1574), __dst, 0, 0);
        v542 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v542 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1575), __dst, 0, 0);
      }
      else
      {
        uint64_t v543 = 0;
        char v544 = 78;
        do
        {
          *(void *)uint64_t v4 = v539 + 1;
          char *v539 = v544;
          v539 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v539 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v539;
          }
          char v544 = aN_4[++v543];
        }
        while (v543 != 4);
      }
      NMEA_Add_checksum(v4, v535);
      v545 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v545 = 36;
      v546 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v546 = *(char **)(v4 + 16);
      }
      char v547 = 80;
      uint64_t v548 = 1u;
      v549 = v546;
      do
      {
        *(void *)uint64_t v4 = v549 + 1;
        char *v549 = v547;
        v549 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v549 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v549;
        }
        char v547 = aPdbgf[v548++];
      }
      while (v548 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      v550 = *(char **)v4;
      if (*(unsigned char *)(a4 + 1576))
      {
        *(void *)uint64_t v4 = v550 + 1;
        char *v550 = 65;
        v551 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v551 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v551 + 1;
        char *v551 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1577), __dst, 0, 0);
        v552 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v552 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1578), __dst, 0, 0);
        v553 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v553 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v554 = *(_DWORD *)(a4 + 1580);
        if (v554 >= 0) {
          unsigned int v555 = *(_DWORD *)(a4 + 1580);
        }
        else {
          unsigned int v555 = -v554;
        }
        sprintf1da((void *)v4, v555, __dst, 0, v554 >> 31);
        v556 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v556 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v557 = *(double *)(a4 + 1584) * 100.0;
        double v558 = -0.5;
        if (v557 > 0.0) {
          double v558 = 0.5;
        }
        double v559 = v557 + v558;
        if (v559 <= 2147483650.0)
        {
          if (v559 >= -2147483650.0) {
            unsigned int v560 = (int)v559;
          }
          else {
            unsigned int v560 = 0x80000000;
          }
        }
        else
        {
          unsigned int v560 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v560, 3);
        v563 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v563 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v564 = *(double *)(a4 + 1592) * 100.0;
        double v565 = -0.5;
        if (v564 > 0.0) {
          double v565 = 0.5;
        }
        double v566 = v564 + v565;
        if (v566 <= 2147483650.0)
        {
          if (v566 >= -2147483650.0) {
            unsigned int v567 = (int)v566;
          }
          else {
            unsigned int v567 = 0x80000000;
          }
        }
        else
        {
          unsigned int v567 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v567, 3);
      }
      else
      {
        char v561 = 78;
        uint64_t v562 = 1u;
        do
        {
          *(void *)uint64_t v4 = v550 + 1;
          char *v550 = v561;
          v550 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v550 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v550;
          }
          char v561 = aN_2[v562++];
        }
        while (v562 != 7);
      }
      NMEA_Add_checksum(v4, v546);
      v568 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v568 = 36;
      v569 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v569 = *(char **)(v4 + 16);
      }
      char v570 = 80;
      uint64_t v571 = 1u;
      v572 = v569;
      do
      {
        *(void *)uint64_t v4 = v572 + 1;
        char *v572 = v570;
        v572 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v572 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v572;
        }
        char v570 = aPdbgt[v571++];
      }
      while (v571 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      sprintf_1u((void *)v4, *(_DWORD *)(a4 + 1672));
      v573 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v573 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_1u((void *)v4, *(_DWORD *)(a4 + 1676));
      v574 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v574 = 44;
      v575 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v575 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v575;
      }
      if (*(unsigned char *)(a4 + 1680))
      {
        int v576 = *(__int16 *)(a4 + 1682);
        if (v576 >= 0) {
          unsigned int v577 = *(__int16 *)(a4 + 1682);
        }
        else {
          unsigned int v577 = -v576;
        }
        sprintf1da((void *)v4, v577, __dst, 0, (v576 >> 15) & 1);
        v578 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v578 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v579 = *(double *)(a4 + 1688) * 1000.0;
        double v580 = -0.5;
        if (v579 > 0.0) {
          double v580 = 0.5;
        }
        double v581 = v579 + v580;
        if (v581 <= 2147483650.0)
        {
          if (v581 >= -2147483650.0) {
            unsigned int v582 = (int)v581;
          }
          else {
            unsigned int v582 = 0x80000000;
          }
        }
        else
        {
          unsigned int v582 = 0x7FFFFFFF;
        }
        sprintf_4f(v4, v582, 4);
        v585 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v585 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v586 = *(double *)(a4 + 1696) * 1000.0;
        double v587 = -0.5;
        if (v586 > 0.0) {
          double v587 = 0.5;
        }
        double v588 = v586 + v587;
        if (v588 <= 2147483650.0)
        {
          if (v588 >= -2147483650.0) {
            unsigned int v589 = (int)v588;
          }
          else {
            unsigned int v589 = 0x80000000;
          }
        }
        else
        {
          unsigned int v589 = 0x7FFFFFFF;
        }
        sprintf_4f(v4, v589, 4);
        v590 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v590 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_1u((void *)v4, *(_DWORD *)(a4 + 1704));
        v591 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v591 = 44;
        v575 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v575 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v575;
        }
      }
      else
      {
        uint64_t v583 = 0;
        char v584 = 44;
        do
        {
          *(void *)uint64_t v4 = v575 + 1;
          char *v575 = v584;
          v575 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v575 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v575;
          }
          char v584 = asc_22BADF219[++v583];
        }
        while (v583 != 4);
      }
      if (*(unsigned char *)(a4 + 1708))
      {
        int v592 = *(_DWORD *)(a4 + 1712);
        if (v592 >= 0) {
          unsigned int v593 = *(_DWORD *)(a4 + 1712);
        }
        else {
          unsigned int v593 = -v592;
        }
        sprintf1da((void *)v4, v593, __dst, 0, v592 >> 31);
        v594 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v594 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf_1u((void *)v4, *(_DWORD *)(a4 + 1716));
        v595 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v595 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
      }
      else
      {
        uint64_t v596 = 0;
        char v597 = 44;
        do
        {
          *(void *)uint64_t v4 = v575 + 1;
          char *v575 = v597;
          v575 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v575 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v575;
          }
          char v597 = asc_22BADF2CC[++v596];
        }
        while (v596 != 2);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1720), __dst, 0, 0);
      v598 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v598 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1721), __dst, 0, 0);
      v599 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v599 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v600 = *(double *)(a4 + 1728) * 1000.0;
      double v601 = -0.5;
      if (v600 > 0.0) {
        double v601 = 0.5;
      }
      double v602 = v600 + v601;
      if (v602 <= 2147483650.0)
      {
        if (v602 >= -2147483650.0) {
          unsigned int v603 = (int)v602;
        }
        else {
          unsigned int v603 = 0x80000000;
        }
      }
      else
      {
        unsigned int v603 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v603, 4);
      v604 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v604 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v605 = *(__int16 *)(a4 + 1736);
      if (v605 >= 0) {
        unsigned int v606 = *(__int16 *)(a4 + 1736);
      }
      else {
        unsigned int v606 = -v605;
      }
      sprintf1da((void *)v4, v606, __dst, 0, (v605 >> 15) & 1);
      v607 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v607 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1738), __dst, 0, 0);
      v608 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v608 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v609 = *(double *)(a4 + 1744) * 1000.0;
      double v610 = -0.5;
      if (v609 > 0.0) {
        double v610 = 0.5;
      }
      double v611 = v609 + v610;
      if (v611 <= 2147483650.0)
      {
        if (v611 >= -2147483650.0) {
          unsigned int v612 = (int)v611;
        }
        else {
          unsigned int v612 = 0x80000000;
        }
      }
      else
      {
        unsigned int v612 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v612, 4);
      v613 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v613 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v614 = *(__int16 *)(a4 + 1752);
      if (v614 >= 0) {
        unsigned int v615 = *(__int16 *)(a4 + 1752);
      }
      else {
        unsigned int v615 = -v614;
      }
      sprintf1da((void *)v4, v615, __dst, 0, (v614 >> 15) & 1);
      v616 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v616 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v617 = *(__int16 *)(a4 + 1754);
      if (v617 >= 0) {
        unsigned int v618 = *(__int16 *)(a4 + 1754);
      }
      else {
        unsigned int v618 = -v617;
      }
      sprintf1da((void *)v4, v618, __dst, 0, (v617 >> 15) & 1);
      v619 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v619 = 44;
      v620 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v620 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v620;
      }
      if (*(unsigned char *)(a4 + 1756))
      {
        int v621 = *(char *)(a4 + 1757);
        if (v621 >= 0) {
          unsigned int v622 = *(char *)(a4 + 1757);
        }
        else {
          unsigned int v622 = -v621;
        }
        sprintf1da((void *)v4, v622, __dst, 0, (v621 >> 7) & 1);
        v623 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v623 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v624 = *(char *)(a4 + 1758);
        if (v624 >= 0) {
          unsigned int v625 = *(char *)(a4 + 1758);
        }
        else {
          unsigned int v625 = -v624;
        }
        sprintf1da((void *)v4, v625, __dst, 0, (v624 >> 7) & 1);
        v626 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v626 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v627 = *(__int16 *)(a4 + 1760);
        if (v627 >= 0) {
          unsigned int v628 = *(__int16 *)(a4 + 1760);
        }
        else {
          unsigned int v628 = -v627;
        }
        sprintf1da((void *)v4, v628, __dst, 0, (v627 >> 15) & 1);
        v629 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v629 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v630 = *(char *)(a4 + 1762);
        if (v630 >= 0) {
          unsigned int v631 = *(char *)(a4 + 1762);
        }
        else {
          unsigned int v631 = -v630;
        }
        sprintf1da((void *)v4, v631, __dst, 0, (v630 >> 7) & 1);
        v632 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v632 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v633 = *(char *)(a4 + 1763);
        if (v633 >= 0) {
          unsigned int v634 = *(char *)(a4 + 1763);
        }
        else {
          unsigned int v634 = -v633;
        }
        sprintf1da((void *)v4, v634, __dst, 0, (v633 >> 7) & 1);
        v635 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v635 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v636 = *(__int16 *)(a4 + 1764);
        if (v636 >= 0) {
          unsigned int v637 = *(__int16 *)(a4 + 1764);
        }
        else {
          unsigned int v637 = -v636;
        }
        sprintf1da((void *)v4, v637, __dst, 0, (v636 >> 15) & 1);
        v638 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v638 = 44;
        v620 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v620 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v620;
        }
      }
      else
      {
        char v639 = 44;
        uint64_t v640 = 1u;
        do
        {
          *(void *)uint64_t v4 = v620 + 1;
          char *v620 = v639;
          v620 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v620 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v620;
          }
          char v639 = asc_22BADF38B[v640++];
        }
        while (v640 != 7);
      }
      int v641 = *(__int16 *)(a4 + 1766);
      if (*(_WORD *)(a4 + 1766))
      {
        if (v641 >= 0) {
          unsigned int v642 = *(__int16 *)(a4 + 1766);
        }
        else {
          unsigned int v642 = -v641;
        }
        sprintf1da((void *)v4, v642, __dst, 0, (v641 >> 15) & 1);
        v620 = *(char **)v4;
      }
      *(void *)uint64_t v4 = v620 + 1;
      char *v620 = 44;
      v643 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v643 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v643;
      }
      int v644 = *(__int16 *)(a4 + 1768);
      if (*(_WORD *)(a4 + 1768))
      {
        if (v644 >= 0) {
          unsigned int v645 = *(__int16 *)(a4 + 1768);
        }
        else {
          unsigned int v645 = -v644;
        }
        sprintf1da((void *)v4, v645, __dst, 0, (v644 >> 15) & 1);
        v643 = *(char **)v4;
      }
      *(void *)uint64_t v4 = v643 + 1;
      char *v643 = 44;
      v646 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v646 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v646;
      }
      int v647 = *(__int16 *)(a4 + 1770);
      if (*(_WORD *)(a4 + 1770))
      {
        if (v647 >= 0) {
          unsigned int v648 = *(__int16 *)(a4 + 1770);
        }
        else {
          unsigned int v648 = -v647;
        }
        sprintf1da((void *)v4, v648, __dst, 0, (v647 >> 15) & 1);
        v646 = *(char **)v4;
      }
      *(void *)uint64_t v4 = v646 + 1;
      char *v646 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v649 = *(__int16 *)(a4 + 1772);
      if (*(_WORD *)(a4 + 1772))
      {
        if (v649 >= 0) {
          unsigned int v650 = *(__int16 *)(a4 + 1772);
        }
        else {
          unsigned int v650 = -v649;
        }
        sprintf1da((void *)v4, v650, __dst, 0, (v649 >> 15) & 1);
      }
      NMEA_Add_checksum(v4, v569);
      v651 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v651 = 36;
      v652 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v652 = *(char **)(v4 + 16);
      }
      char v653 = 80;
      uint64_t v654 = 1u;
      v655 = v652;
      do
      {
        *(void *)uint64_t v4 = v655 + 1;
        char *v655 = v653;
        v655 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v655 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v655;
        }
        char v653 = aPdbgv[v654++];
      }
      while (v654 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      v656 = *(char **)v4;
      if (*(unsigned char *)(a4 + 1600))
      {
        *(void *)uint64_t v4 = v656 + 1;
        char *v656 = 65;
        v657 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v657 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v657 + 1;
        char *v657 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1601), __dst, 0, 0);
        v658 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v658 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1602), __dst, 0, 0);
        v659 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v659 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v660 = *(double *)(a4 + 1608) * 100.0;
        double v661 = -0.5;
        if (v660 > 0.0) {
          double v661 = 0.5;
        }
        double v662 = v660 + v661;
        if (v662 <= 2147483650.0)
        {
          if (v662 >= -2147483650.0) {
            unsigned int v663 = (int)v662;
          }
          else {
            unsigned int v663 = 0x80000000;
          }
        }
        else
        {
          unsigned int v663 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v663, 3);
        v666 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v666 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v667 = *(double *)(a4 + 1616) * 100.0;
        double v668 = -0.5;
        if (v667 > 0.0) {
          double v668 = 0.5;
        }
        double v669 = v667 + v668;
        if (v669 <= 2147483650.0)
        {
          if (v669 >= -2147483650.0) {
            unsigned int v670 = (int)v669;
          }
          else {
            unsigned int v670 = 0x80000000;
          }
        }
        else
        {
          unsigned int v670 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v670, 3);
        v671 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v671 = 44;
        v656 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v656 = *(char **)(v4 + 16);
        }
      }
      else
      {
        char v664 = 78;
        uint64_t v665 = 1u;
        do
        {
          *(void *)uint64_t v4 = v656 + 1;
          char *v656 = v664;
          v656 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v656 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v656;
          }
          char v664 = aN_2[v665++];
        }
        while (v665 != 7);
      }
      if (*(unsigned char *)(a4 + 1624))
      {
        *(void *)uint64_t v4 = v656 + 1;
        char *v656 = 65;
        v672 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v672 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v672 + 1;
        char *v672 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1625), __dst, 0, 0);
        v673 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v673 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1626), __dst, 0, 0);
        v674 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v674 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v675 = *(double *)(a4 + 1632) * 100.0;
        double v676 = -0.5;
        if (v675 > 0.0) {
          double v676 = 0.5;
        }
        double v677 = v675 + v676;
        if (v677 <= 2147483650.0)
        {
          if (v677 >= -2147483650.0) {
            unsigned int v678 = (int)v677;
          }
          else {
            unsigned int v678 = 0x80000000;
          }
        }
        else
        {
          unsigned int v678 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v678, 3);
        v681 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v681 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v682 = *(double *)(a4 + 1640) * 100.0;
        double v683 = -0.5;
        if (v682 > 0.0) {
          double v683 = 0.5;
        }
        double v684 = v682 + v683;
        if (v684 <= 2147483650.0)
        {
          if (v684 >= -2147483650.0) {
            unsigned int v685 = (int)v684;
          }
          else {
            unsigned int v685 = 0x80000000;
          }
        }
        else
        {
          unsigned int v685 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v685, 3);
        v686 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v686 = 44;
        v656 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v656 = *(char **)(v4 + 16);
        }
      }
      else
      {
        char v679 = 78;
        uint64_t v680 = 1u;
        do
        {
          *(void *)uint64_t v4 = v656 + 1;
          char *v656 = v679;
          v656 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v656 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v656;
          }
          char v679 = aN_2[v680++];
        }
        while (v680 != 7);
      }
      if (*(unsigned char *)(a4 + 1648))
      {
        *(void *)uint64_t v4 = v656 + 1;
        char *v656 = 65;
        v687 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v687 = *(char **)(v4 + 16);
        }
        *(void *)uint64_t v4 = v687 + 1;
        char *v687 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1649), __dst, 0, 0);
        v688 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v688 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1650), __dst, 0, 0);
        v689 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v689 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v690 = *(double *)(a4 + 1656) * 100.0;
        double v691 = -0.5;
        if (v690 > 0.0) {
          double v691 = 0.5;
        }
        double v692 = v690 + v691;
        if (v692 <= 2147483650.0)
        {
          if (v692 >= -2147483650.0) {
            unsigned int v693 = (int)v692;
          }
          else {
            unsigned int v693 = 0x80000000;
          }
        }
        else
        {
          unsigned int v693 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v693, 3);
        v696 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v696 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        double v697 = *(double *)(a4 + 1664) * 100.0;
        double v698 = -0.5;
        if (v697 > 0.0) {
          double v698 = 0.5;
        }
        double v699 = v697 + v698;
        if (v699 <= 2147483650.0)
        {
          if (v699 >= -2147483650.0) {
            unsigned int v700 = (int)v699;
          }
          else {
            unsigned int v700 = 0x80000000;
          }
        }
        else
        {
          unsigned int v700 = 0x7FFFFFFF;
        }
        sprintf_3f(v4, v700, 3);
        v701 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v701 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
      }
      else
      {
        char v694 = 78;
        uint64_t v695 = 1u;
        do
        {
          *(void *)uint64_t v4 = v656 + 1;
          char *v656 = v694;
          v656 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v656 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v656;
          }
          char v694 = aN_5[v695++];
        }
        while (v695 != 6);
      }
      NMEA_Add_checksum(v4, v652);
      v702 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v702 = 36;
      v703 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v703 = *(char **)(v4 + 16);
      }
      char v704 = 80;
      uint64_t v705 = 1u;
      v706 = v703;
      do
      {
        *(void *)uint64_t v4 = v706 + 1;
        char *v706 = v704;
        v706 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v706 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v706;
        }
        char v704 = aPdbgx[v705++];
      }
      while (v705 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      double v707 = *(double *)(a4 + 1776) * 100.0;
      double v708 = -0.5;
      if (v707 > 0.0) {
        double v708 = 0.5;
      }
      double v709 = v707 + v708;
      if (v709 <= 2147483650.0)
      {
        if (v709 >= -2147483650.0) {
          unsigned int v710 = (int)v709;
        }
        else {
          unsigned int v710 = 0x80000000;
        }
      }
      else
      {
        unsigned int v710 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v710, 3);
      v711 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v711 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v712 = *(double *)(a4 + 1784) * 100.0;
      double v713 = -0.5;
      if (v712 > 0.0) {
        double v713 = 0.5;
      }
      double v714 = v712 + v713;
      if (v714 <= 2147483650.0)
      {
        if (v714 >= -2147483650.0) {
          unsigned int v715 = (int)v714;
        }
        else {
          unsigned int v715 = 0x80000000;
        }
      }
      else
      {
        unsigned int v715 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v715, 3);
      v716 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v716 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v717 = *(double *)(a4 + 1792) * 100.0;
      double v718 = -0.5;
      if (v717 > 0.0) {
        double v718 = 0.5;
      }
      double v719 = v717 + v718;
      if (v719 <= 2147483650.0)
      {
        if (v719 >= -2147483650.0) {
          unsigned int v720 = (int)v719;
        }
        else {
          unsigned int v720 = 0x80000000;
        }
      }
      else
      {
        unsigned int v720 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v720, 3);
      v721 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v721 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v722 = *(double *)(a4 + 1800) * 100.0;
      double v723 = -0.5;
      if (v722 > 0.0) {
        double v723 = 0.5;
      }
      double v724 = v722 + v723;
      if (v724 <= 2147483650.0)
      {
        if (v724 >= -2147483650.0) {
          unsigned int v725 = (int)v724;
        }
        else {
          unsigned int v725 = 0x80000000;
        }
      }
      else
      {
        unsigned int v725 = 0x7FFFFFFF;
      }
      sprintf_3f(v4, v725, 3);
      v726 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v726 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v727 = *(double *)(a4 + 1808) * 1000.0;
      double v728 = -0.5;
      if (v727 > 0.0) {
        double v728 = 0.5;
      }
      double v729 = v727 + v728;
      if (v729 <= 2147483650.0)
      {
        if (v729 >= -2147483650.0) {
          unsigned int v730 = (int)v729;
        }
        else {
          unsigned int v730 = 0x80000000;
        }
      }
      else
      {
        unsigned int v730 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v730, 4);
      v731 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v731 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v732 = *(double *)(a4 + 1816) * 1000.0;
      double v733 = -0.5;
      if (v732 > 0.0) {
        double v733 = 0.5;
      }
      double v734 = v732 + v733;
      if (v734 <= 2147483650.0)
      {
        if (v734 >= -2147483650.0) {
          unsigned int v735 = (int)v734;
        }
        else {
          unsigned int v735 = 0x80000000;
        }
      }
      else
      {
        unsigned int v735 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v735, 4);
      v736 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v736 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v737 = *(double *)(a4 + 1824) * 1000.0;
      double v738 = -0.5;
      if (v737 > 0.0) {
        double v738 = 0.5;
      }
      double v739 = v737 + v738;
      if (v739 <= 2147483650.0)
      {
        if (v739 >= -2147483650.0) {
          unsigned int v740 = (int)v739;
        }
        else {
          unsigned int v740 = 0x80000000;
        }
      }
      else
      {
        unsigned int v740 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v740, 4);
      v741 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v741 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v742 = *(double *)(a4 + 1832) * 1000.0;
      double v743 = -0.5;
      if (v742 > 0.0) {
        double v743 = 0.5;
      }
      double v744 = v742 + v743;
      if (v744 <= 2147483650.0)
      {
        if (v744 >= -2147483650.0) {
          unsigned int v745 = (int)v744;
        }
        else {
          unsigned int v745 = 0x80000000;
        }
      }
      else
      {
        unsigned int v745 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v745, 4);
      v746 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v746 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v747 = *(double *)(a4 + 1840) * 1000.0;
      double v748 = -0.5;
      if (v747 > 0.0) {
        double v748 = 0.5;
      }
      double v749 = v747 + v748;
      if (v749 <= 2147483650.0)
      {
        if (v749 >= -2147483650.0) {
          unsigned int v750 = (int)v749;
        }
        else {
          unsigned int v750 = 0x80000000;
        }
      }
      else
      {
        unsigned int v750 = 0x7FFFFFFF;
      }
      sprintf_4f(v4, v750, 4);
      v751 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v751 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v752 = *(double *)(a4 + 1848) * 10.0;
      double v753 = -0.5;
      if (v752 > 0.0) {
        double v753 = 0.5;
      }
      double v754 = v752 + v753;
      if (v754 <= 2147483650.0)
      {
        if (v754 >= -2147483650.0) {
          unsigned int v755 = (int)v754;
        }
        else {
          unsigned int v755 = 0x80000000;
        }
      }
      else
      {
        unsigned int v755 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v755);
      v756 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v756 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v757 = *(double *)(a4 + 1856) * 10.0;
      double v758 = -0.5;
      if (v757 > 0.0) {
        double v758 = 0.5;
      }
      double v759 = v757 + v758;
      if (v759 <= 2147483650.0)
      {
        if (v759 >= -2147483650.0) {
          unsigned int v760 = (int)v759;
        }
        else {
          unsigned int v760 = 0x80000000;
        }
      }
      else
      {
        unsigned int v760 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v760);
      v761 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v761 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v762 = *(double *)(a4 + 1864) * 10.0;
      double v763 = -0.5;
      if (v762 > 0.0) {
        double v763 = 0.5;
      }
      double v764 = v762 + v763;
      if (v764 <= 2147483650.0)
      {
        if (v764 >= -2147483650.0) {
          unsigned int v765 = (int)v764;
        }
        else {
          unsigned int v765 = 0x80000000;
        }
      }
      else
      {
        unsigned int v765 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v765);
      v766 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v766 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v767 = *(double *)(a4 + 1872) * 10.0;
      double v768 = -0.5;
      if (v767 > 0.0) {
        double v768 = 0.5;
      }
      double v769 = v767 + v768;
      if (v769 <= 2147483650.0)
      {
        if (v769 >= -2147483650.0) {
          unsigned int v770 = (int)v769;
        }
        else {
          unsigned int v770 = 0x80000000;
        }
      }
      else
      {
        unsigned int v770 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v770);
      v771 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v771 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v772 = *(double *)(a4 + 1880) * 10.0;
      double v773 = -0.5;
      if (v772 > 0.0) {
        double v773 = 0.5;
      }
      double v774 = v772 + v773;
      if (v774 <= 2147483650.0)
      {
        if (v774 >= -2147483650.0) {
          unsigned int v775 = (int)v774;
        }
        else {
          unsigned int v775 = 0x80000000;
        }
      }
      else
      {
        unsigned int v775 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v775);
      v776 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v776 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v777 = *(double *)(a4 + 1888) * 10.0;
      double v778 = -0.5;
      if (v777 > 0.0) {
        double v778 = 0.5;
      }
      double v779 = v777 + v778;
      if (v779 <= 2147483650.0)
      {
        if (v779 >= -2147483650.0) {
          unsigned int v780 = (int)v779;
        }
        else {
          unsigned int v780 = 0x80000000;
        }
      }
      else
      {
        unsigned int v780 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v780);
      v781 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v781 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v782 = *(double *)(a4 + 1896) * 10.0;
      double v783 = -0.5;
      if (v782 > 0.0) {
        double v783 = 0.5;
      }
      double v784 = v782 + v783;
      if (v784 <= 2147483650.0)
      {
        if (v784 >= -2147483650.0) {
          unsigned int v785 = (int)v784;
        }
        else {
          unsigned int v785 = 0x80000000;
        }
      }
      else
      {
        unsigned int v785 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v785);
      v786 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v786 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1904), __dst, 0, 0);
      v787 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v787 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v788 = *(double *)(a4 + 1912) * 10.0;
      double v789 = -0.5;
      if (v788 > 0.0) {
        double v789 = 0.5;
      }
      double v790 = v788 + v789;
      if (v790 <= 2147483650.0)
      {
        if (v790 >= -2147483650.0) {
          unsigned int v791 = (int)v790;
        }
        else {
          unsigned int v791 = 0x80000000;
        }
      }
      else
      {
        unsigned int v791 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v791);
      v792 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v792 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v793 = *(double *)(a4 + 1920) * 10.0;
      double v794 = -0.5;
      if (v793 > 0.0) {
        double v794 = 0.5;
      }
      double v795 = v793 + v794;
      if (v795 <= 2147483650.0)
      {
        if (v795 >= -2147483650.0) {
          unsigned int v796 = (int)v795;
        }
        else {
          unsigned int v796 = 0x80000000;
        }
      }
      else
      {
        unsigned int v796 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v796);
      v797 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v797 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v798 = *(double *)(a4 + 1928) * 10.0;
      double v799 = -0.5;
      if (v798 > 0.0) {
        double v799 = 0.5;
      }
      double v800 = v798 + v799;
      if (v800 <= 2147483650.0)
      {
        if (v800 >= -2147483650.0) {
          unsigned int v801 = (int)v800;
        }
        else {
          unsigned int v801 = 0x80000000;
        }
      }
      else
      {
        unsigned int v801 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v801);
      v802 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v802 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v803 = *(double *)(a4 + 1936) * 10.0;
      double v804 = -0.5;
      if (v803 > 0.0) {
        double v804 = 0.5;
      }
      double v805 = v803 + v804;
      if (v805 <= 2147483650.0)
      {
        if (v805 >= -2147483650.0) {
          unsigned int v806 = (int)v805;
        }
        else {
          unsigned int v806 = 0x80000000;
        }
      }
      else
      {
        unsigned int v806 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v806);
      v807 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v807 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v808 = *(double *)(v934 + 48) * 1000000000.0 * 10.0;
      double v809 = -0.5;
      if (v808 > 0.0) {
        double v809 = 0.5;
      }
      double v810 = v808 + v809;
      if (v810 <= 2147483650.0)
      {
        if (v810 >= -2147483650.0) {
          unsigned int v811 = (int)v810;
        }
        else {
          unsigned int v811 = 0x80000000;
        }
      }
      else
      {
        unsigned int v811 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v811);
      v812 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v812 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 160) * 1000000000.0);
      v813 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v813 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      double v814 = *(double *)(v934 + 56) * 1000000000.0 * 10.0;
      double v815 = -0.5;
      if (v814 > 0.0) {
        double v815 = 0.5;
      }
      double v816 = v814 + v815;
      if (v816 <= 2147483650.0)
      {
        if (v816 >= -2147483650.0) {
          unsigned int v817 = (int)v816;
        }
        else {
          unsigned int v817 = 0x80000000;
        }
      }
      else
      {
        unsigned int v817 = 0x7FFFFFFF;
      }
      sprintf_2f(v4, v817);
      v818 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v818 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_AccEst((void *)v4, *(double *)(v934 + 168) * 1000000000.0);
      NMEA_Add_checksum(v4, v703);
      v819 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v819 = 36;
      v820 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v820 = *(char **)(v4 + 16);
      }
      char v821 = 80;
      uint64_t v822 = 1u;
      v823 = v820;
      do
      {
        *(void *)uint64_t v4 = v823 + 1;
        char *v823 = v821;
        v823 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v823 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v823;
        }
        char v821 = aPdbgy[v822++];
      }
      while (v822 != 7);
      sprintf_HHMMSS((void *)v4, v934);
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1944), __dst, 0, 0);
      v824 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v824 = 46;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1946), __dst, 0, 0);
      v825 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v825 = 46;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_2d((void *)v4, *(unsigned __int8 *)(a4 + 1947));
      v826 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v826 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 1948), __dst, 0, 0);
      v827 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v827 = 46;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf_2d((void *)v4, *(unsigned __int8 *)(a4 + 1950));
      v828 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v828 = 46;
      v829 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v829 = *(char **)(v4 + 16);
      }
      char v830 = *(unsigned char *)(a4 + 1951);
      *(void *)uint64_t v4 = v829 + 1;
      char *v829 = v830;
      v831 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v831 = *(char **)(v4 + 16);
      }
      *(void *)uint64_t v4 = v831 + 1;
      char *v831 = 46;
      v832 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24))
      {
        v832 = *(char **)(v4 + 16);
        *(void *)uint64_t v4 = v832;
      }
      char v833 = *(unsigned char *)(a4 + 1952);
      if (v833)
      {
        v834 = (unsigned __int8 *)(a4 + 1953);
        do
        {
          *(void *)uint64_t v4 = v832 + 1;
          char *v832 = v833;
          v832 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v832 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v832;
          }
          int v835 = *v834++;
          char v833 = v835;
        }
        while (v835);
      }
      *(void *)uint64_t v4 = v832 + 1;
      char *v832 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v836 = *(_DWORD *)(a4 + 1960);
      if (v836 >= 0) {
        unsigned int v837 = *(_DWORD *)(a4 + 1960);
      }
      else {
        unsigned int v837 = -v836;
      }
      sprintf1da((void *)v4, v837, __dst, 0, v836 >> 31);
      v838 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v838 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v839 = *(_DWORD *)(a4 + 1964);
      if (v839 >= 0) {
        unsigned int v840 = *(_DWORD *)(a4 + 1964);
      }
      else {
        unsigned int v840 = -v839;
      }
      sprintf1da((void *)v4, v840, __dst, 0, v839 >> 31);
      v841 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v841 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1968), __dst, 0, 0);
      v842 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v842 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1969), __dst, 0, 0);
      v843 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v843 = 44;
      v844 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v844 = *(char **)(v4 + 16);
      }
      uint64_t v845 = 0;
      char v846 = 48;
      do
      {
        *(void *)uint64_t v4 = v844 + 1;
        char *v844 = v846;
        v844 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v844 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v844;
        }
        char v846 = a0x_0[++v845];
      }
      while (v845 != 2);
      sprintf_1X((char **)v4, *(unsigned __int8 *)(a4 + 1970));
      v847 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v847 = 44;
      v848 = *(char **)v4;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        v848 = *(char **)(v4 + 16);
      }
      uint64_t v849 = 0;
      char v850 = 48;
      do
      {
        *(void *)uint64_t v4 = v848 + 1;
        char *v848 = v850;
        v848 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24))
        {
          v848 = *(char **)(v4 + 16);
          *(void *)uint64_t v4 = v848;
        }
        char v850 = a0x_0[++v849];
      }
      while (v849 != 2);
      sprintf_1X((char **)v4, *(unsigned __int8 *)(a4 + 1971));
      v851 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v851 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 1972), __dst, 0, 0);
      v852 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v852 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      nzet(v4, 0xAu, __dst, 0, 0, 0);
      v853 = (unsigned char *)(*(void *)v4)++;
      unsigned char *v853 = 44;
      if (*(void *)v4 >= *(void *)(v4 + 24)) {
        *(void *)uint64_t v4 = *(void *)(v4 + 16);
      }
      int v854 = *(_DWORD *)(a4 + 1980) - *(_DWORD *)(a4 + 1976);
      if (v854 >= 0) {
        unsigned int v855 = *(_DWORD *)(a4 + 1980) - *(_DWORD *)(a4 + 1976);
      }
      else {
        unsigned int v855 = *(_DWORD *)(a4 + 1976) - *(_DWORD *)(a4 + 1980);
      }
      sprintf1da((void *)v4, v855, __dst, 0, v854 >> 31);
      for (uint64_t m = 1984; m != 2020; m += 4)
      {
        v857 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v857 = 44;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          *(void *)uint64_t v4 = *(void *)(v4 + 16);
        }
        int v858 = *(_DWORD *)(a4 + m) - *(_DWORD *)(a4 + 1976);
        if (v858 >= 0) {
          unsigned int v859 = *(_DWORD *)(a4 + m) - *(_DWORD *)(a4 + 1976);
        }
        else {
          unsigned int v859 = *(_DWORD *)(a4 + 1976) - *(_DWORD *)(a4 + m);
        }
        sprintf1da((void *)v4, v859, __dst, 0, v858 >> 31);
      }
      size_t result = NMEA_Add_checksum(v4, v820);
      if (*(unsigned char *)(a4 + 2023) || *(unsigned char *)(a4 + 2076) || *(unsigned char *)(a4 + 2089))
      {
        v860 = (unsigned char *)(*(void *)v4)++;
        unsigned char *v860 = 36;
        v861 = *(char **)v4;
        if (*(void *)v4 >= *(void *)(v4 + 24)) {
          v861 = *(char **)(v4 + 16);
        }
        char v862 = 80;
        uint64_t v863 = 1u;
        v864 = v861;
        do
        {
          *(void *)uint64_t v4 = v864 + 1;
          char *v864 = v862;
          v864 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v864 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v864;
          }
          char v862 = aPdbgg[v863++];
        }
        while (v863 != 7);
        sprintf_HHMMSS((void *)v4, v934);
        if (*(unsigned char *)(a4 + 2089))
        {
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2078), __dst, 0, 0);
          if (*(unsigned __int8 *)(a4 + 2080) >= 0x63u) {
            unsigned int v865 = 99;
          }
          else {
            unsigned int v865 = *(unsigned __int8 *)(a4 + 2080);
          }
          sprintf_02d((void *)v4, v865);
          v866 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v866 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2082), __dst, 0, 0);
          if (*(unsigned __int8 *)(a4 + 2084) >= 0x63u) {
            unsigned int v867 = 99;
          }
          else {
            unsigned int v867 = *(unsigned __int8 *)(a4 + 2084);
          }
          sprintf_02d((void *)v4, v867);
          v868 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v868 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2086), __dst, 0, 0);
          if (*(unsigned __int16 *)(a4 + 2086) >= 0x63u) {
            unsigned int v869 = 99;
          }
          else {
            unsigned int v869 = *(unsigned __int16 *)(a4 + 2086);
          }
          sprintf_02d((void *)v4, v869);
          v870 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v870 = 44;
          v871 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v871 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v871;
          }
        }
        else
        {
          v871 = *(char **)v4;
          char v872 = 44;
          uint64_t v873 = 1u;
          do
          {
            *(void *)uint64_t v4 = v871 + 1;
            char *v871 = v872;
            v871 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              v871 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v871;
            }
            char v872 = asc_22BADF401[v873++];
          }
          while (v873 != 4);
        }
        if (*(unsigned char *)(a4 + 2023))
        {
          uint64_t v874 = 0;
          char v875 = 66;
          do
          {
            *(void *)uint64_t v4 = v871 + 1;
            char *v871 = v875;
            v871 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              v871 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v871;
            }
            char v875 = aB[++v874];
          }
          while (v874 != 2);
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2020), __dst, 0, 0);
          if (*(unsigned __int8 *)(a4 + 2022) >= 0x63u) {
            unsigned int v876 = 99;
          }
          else {
            unsigned int v876 = *(unsigned __int8 *)(a4 + 2022);
          }
          sprintf_02d((void *)v4, v876);
        }
        else if (*(unsigned char *)(a4 + 2076))
        {
          uint64_t v877 = 0;
          char v878 = 69;
          do
          {
            *(void *)uint64_t v4 = v871 + 1;
            char *v871 = v878;
            v871 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              v871 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v871;
            }
            char v878 = aE_0[++v877];
          }
          while (v877 != 2);
          sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 2024), __dst, 0, 0);
          v879 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v879 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int8 *)(a4 + 2025), __dst, 0, 0);
          v880 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v880 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2026), __dst, 0, 0);
          v881 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v881 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2028), __dst, 0, 0);
          v882 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v882 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2030), __dst, 0, 0);
          v883 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v883 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2032), __dst, 0, 0);
          v884 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v884 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2034), __dst, 0, 0);
          v885 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v885 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          if (*(unsigned __int8 *)(a4 + 2056) >= 0x63u) {
            unsigned int v886 = 99;
          }
          else {
            unsigned int v886 = *(unsigned __int8 *)(a4 + 2056);
          }
          sprintf_02d((void *)v4, v886);
          if (*(unsigned __int8 *)(a4 + 2057) >= 0x63u) {
            unsigned int v887 = 99;
          }
          else {
            unsigned int v887 = *(unsigned __int8 *)(a4 + 2057);
          }
          sprintf_02d((void *)v4, v887);
          if (*(unsigned __int8 *)(a4 + 2058) >= 0x63u) {
            unsigned int v888 = 99;
          }
          else {
            unsigned int v888 = *(unsigned __int8 *)(a4 + 2058);
          }
          sprintf_02d((void *)v4, v888);
          if (*(unsigned __int8 *)(a4 + 2059) >= 0x63u) {
            unsigned int v889 = 99;
          }
          else {
            unsigned int v889 = *(unsigned __int8 *)(a4 + 2059);
          }
          sprintf_02d((void *)v4, v889);
          if (*(unsigned __int8 *)(a4 + 2060) >= 0x63u) {
            unsigned int v890 = 99;
          }
          else {
            unsigned int v890 = *(unsigned __int8 *)(a4 + 2060);
          }
          sprintf_02d((void *)v4, v890);
          v891 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v891 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2038), __dst, 0, 0);
          v892 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v892 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2042), __dst, 0, 0);
          v893 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v893 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2044), __dst, 0, 0);
          v894 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v894 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          if (*(unsigned __int8 *)(a4 + 2062) >= 0x63u) {
            unsigned int v895 = 99;
          }
          else {
            unsigned int v895 = *(unsigned __int8 *)(a4 + 2062);
          }
          sprintf_02d((void *)v4, v895);
          if (*(unsigned __int8 *)(a4 + 2064) >= 0x63u) {
            unsigned int v896 = 99;
          }
          else {
            unsigned int v896 = *(unsigned __int8 *)(a4 + 2064);
          }
          sprintf_02d((void *)v4, v896);
          if (*(unsigned __int8 *)(a4 + 2065) >= 0x63u) {
            unsigned int v897 = 99;
          }
          else {
            unsigned int v897 = *(unsigned __int8 *)(a4 + 2065);
          }
          sprintf_02d((void *)v4, v897);
          v898 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v898 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2048), __dst, 0, 0);
          v899 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v899 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2050), __dst, 0, 0);
          v900 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v900 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2052), __dst, 0, 0);
          v901 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v901 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          sprintf1da((void *)v4, *(unsigned __int16 *)(a4 + 2054), __dst, 0, 0);
          v902 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v902 = 44;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            *(void *)uint64_t v4 = *(void *)(v4 + 16);
          }
          if (*(unsigned __int8 *)(a4 + 2067) >= 0x63u) {
            unsigned int v903 = 99;
          }
          else {
            unsigned int v903 = *(unsigned __int8 *)(a4 + 2067);
          }
          sprintf_02d((void *)v4, v903);
          if (*(unsigned __int8 *)(a4 + 2068) >= 0x63u) {
            unsigned int v904 = 99;
          }
          else {
            unsigned int v904 = *(unsigned __int8 *)(a4 + 2068);
          }
          sprintf_02d((void *)v4, v904);
          if (*(unsigned __int8 *)(a4 + 2069) >= 0x63u) {
            unsigned int v905 = 99;
          }
          else {
            unsigned int v905 = *(unsigned __int8 *)(a4 + 2069);
          }
          sprintf_02d((void *)v4, v905);
          if (*(unsigned __int8 *)(a4 + 2070) >= 0x63u) {
            unsigned int v906 = 99;
          }
          else {
            unsigned int v906 = *(unsigned __int8 *)(a4 + 2070);
          }
          sprintf_02d((void *)v4, v906);
          v907 = (unsigned char *)(*(void *)v4)++;
          unsigned char *v907 = 44;
          v908 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24)) {
            v908 = *(char **)(v4 + 16);
          }
          uint64_t v909 = 0;
          char v910 = 48;
          do
          {
            *(void *)uint64_t v4 = v908 + 1;
            char *v908 = v910;
            v908 = *(char **)v4;
            if (*(void *)v4 >= *(void *)(v4 + 24))
            {
              v908 = *(char **)(v4 + 16);
              *(void *)uint64_t v4 = v908;
            }
            char v910 = a0x_0[++v909];
          }
          while (v909 != 2);
          unint64_t v911 = *(unsigned int *)(a4 + 2072);
          LOBYTE(__dst[0]) = hexTABLE[v911 >> 28];
          BYTE1(__dst[0]) = hexTABLE[(v911 >> 24) & 0xF];
          hex6(v4, v911, __dst, 2);
        }
        size_t result = NMEA_Add_checksum(v4, v861);
      }
      uint64_t v912 = v934;
      if (*(unsigned char *)(a4 + 2208))
      {
        size_t result = NMEA_Encode_PDBGR((char **)v4, v934, a4);
        uint64_t v912 = v934;
      }
      if (*(unsigned char *)(a4 + 2106)) {
        size_t result = NMEA_Encode_PDBGN((char **)v4, v912, (unsigned __int16 *)a4);
      }
      char v913 = *(unsigned char *)(a4 + 2212);
      if (v913)
      {
        v914 = *(char **)v4;
        v915 = (unsigned __int8 *)(a4 + 2213);
        do
        {
          *(void *)uint64_t v4 = v914 + 1;
          char *v914 = v913;
          v914 = *(char **)v4;
          if (*(void *)v4 >= *(void *)(v4 + 24))
          {
            v914 = *(char **)(v4 + 16);
            *(void *)uint64_t v4 = v914;
          }
          int v916 = *v915++;
          char v913 = v916;
        }
        while (v916);
      }
    }
    word_26AE7708A = 0;
  }
  return result;
}

void *NMEA_Encode_PDBGE_Constell(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v7 = (*a1)++;
  *int v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = 80;
  uint64_t v10 = 1u;
  uint64_t v11 = v8;
  do
  {
    *a1 = v11 + 1;
    *uint64_t v11 = v9;
    uint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v9 = aPdbge[v10++];
  }
  while (v10 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      unsigned int v12 = (unsigned __int16 *)(a4 + 154);
      unsigned int v13 = (unsigned __int8 *)(a4 + 156);
      unint64_t v14 = (unsigned __int16 *)(a4 + 158);
      uint64_t v15 = (unsigned __int16 *)(a4 + 160);
      uint64_t v16 = (unsigned __int16 *)(a4 + 162);
      uint64_t v17 = (unsigned __int16 *)(a4 + 164);
      uint64_t v18 = (unsigned __int16 *)(a4 + 166);
      double v19 = (unsigned __int8 *)(a4 + 168);
      double v20 = (unsigned __int8 *)(a4 + 169);
      double v21 = (double *)(a4 + 176);
      unsigned int v22 = (double *)(a4 + 184);
      uint64_t v23 = "G,";
      goto LABEL_21;
    case 2:
      unsigned int v12 = (unsigned __int16 *)(a4 + 234);
      unsigned int v13 = (unsigned __int8 *)(a4 + 236);
      unint64_t v14 = (unsigned __int16 *)(a4 + 238);
      uint64_t v15 = (unsigned __int16 *)(a4 + 240);
      uint64_t v16 = (unsigned __int16 *)(a4 + 242);
      uint64_t v17 = (unsigned __int16 *)(a4 + 244);
      uint64_t v18 = (unsigned __int16 *)(a4 + 246);
      double v19 = (unsigned __int8 *)(a4 + 248);
      double v20 = (unsigned __int8 *)(a4 + 249);
      double v21 = (double *)(a4 + 256);
      unsigned int v22 = (double *)(a4 + 264);
      uint64_t v23 = "R,";
      goto LABEL_21;
    case 3:
      unsigned int v12 = (unsigned __int16 *)(a4 + 274);
      unsigned int v13 = (unsigned __int8 *)(a4 + 276);
      unint64_t v14 = (unsigned __int16 *)(a4 + 278);
      uint64_t v15 = (unsigned __int16 *)(a4 + 280);
      uint64_t v16 = (unsigned __int16 *)(a4 + 282);
      uint64_t v17 = (unsigned __int16 *)(a4 + 284);
      uint64_t v18 = (unsigned __int16 *)(a4 + 286);
      double v19 = (unsigned __int8 *)(a4 + 288);
      double v20 = (unsigned __int8 *)(a4 + 289);
      double v21 = (double *)(a4 + 296);
      unsigned int v22 = (double *)(a4 + 304);
      uint64_t v23 = "E,";
      goto LABEL_21;
    case 4:
      unsigned int v12 = (unsigned __int16 *)(a4 + 314);
      unsigned int v13 = (unsigned __int8 *)(a4 + 316);
      unint64_t v14 = (unsigned __int16 *)(a4 + 318);
      uint64_t v15 = (unsigned __int16 *)(a4 + 320);
      uint64_t v16 = (unsigned __int16 *)(a4 + 322);
      uint64_t v17 = (unsigned __int16 *)(a4 + 324);
      uint64_t v18 = (unsigned __int16 *)(a4 + 326);
      double v19 = (unsigned __int8 *)(a4 + 328);
      double v20 = (unsigned __int8 *)(a4 + 329);
      double v21 = (double *)(a4 + 336);
      unsigned int v22 = (double *)(a4 + 344);
      uint64_t v23 = "C,";
      goto LABEL_21;
    case 5:
      unsigned int v12 = (unsigned __int16 *)(a4 + 194);
      unsigned int v13 = (unsigned __int8 *)(a4 + 196);
      unint64_t v14 = (unsigned __int16 *)(a4 + 198);
      uint64_t v15 = (unsigned __int16 *)(a4 + 200);
      uint64_t v16 = (unsigned __int16 *)(a4 + 202);
      uint64_t v17 = (unsigned __int16 *)(a4 + 204);
      uint64_t v18 = (unsigned __int16 *)(a4 + 206);
      double v19 = (unsigned __int8 *)(a4 + 208);
      double v20 = (unsigned __int8 *)(a4 + 209);
      double v21 = (double *)(a4 + 216);
      unsigned int v22 = (double *)(a4 + 224);
      uint64_t v23 = "Q,";
      goto LABEL_21;
    case 6:
      unsigned int v12 = (unsigned __int16 *)(a4 + 354);
      unsigned int v13 = (unsigned __int8 *)(a4 + 356);
      unint64_t v14 = (unsigned __int16 *)(a4 + 358);
      uint64_t v15 = (unsigned __int16 *)(a4 + 360);
      uint64_t v16 = (unsigned __int16 *)(a4 + 362);
      uint64_t v17 = (unsigned __int16 *)(a4 + 364);
      uint64_t v18 = (unsigned __int16 *)(a4 + 366);
      double v19 = (unsigned __int8 *)(a4 + 368);
      double v20 = (unsigned __int8 *)(a4 + 369);
      double v21 = (double *)(a4 + 376);
      unsigned int v22 = (double *)(a4 + 384);
      uint64_t v23 = "S,";
LABEL_21:
      double v28 = *v21;
      unsigned int v29 = *v20;
      unsigned int v30 = *v19;
      unsigned int v31 = *v18;
      unsigned int v32 = *v17;
      unsigned int v33 = *v16;
      unsigned int v34 = *v15;
      unsigned int v35 = *v14;
      unsigned int v36 = *v13;
      unsigned int v37 = *v12;
      double v38 = *v22;
      char v39 = *v23;
      if (*v23)
      {
        uint64_t v40 = *a1;
        __int16 v41 = (unsigned __int8 *)(v23 + 1);
        do
        {
          *a1 = v40 + 1;
          *uint64_t v40 = v39;
          uint64_t v40 = *a1;
          if (*a1 >= a1[3])
          {
            uint64_t v40 = a1[2];
            *a1 = v40;
          }
          int v42 = *v41++;
          char v39 = v42;
        }
        while (v42);
      }
      sprintf1da(a1, v37, v59, 0, 0);
      BOOL v43 = (*a1)++;
      *BOOL v43 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v36, v59, 0, 0);
      uint64_t v44 = (*a1)++;
      char *v44 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v35, v59, 0, 0);
      char v45 = (*a1)++;
      *char v45 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v34, v59, 0, 0);
      uint64_t v46 = (*a1)++;
      *uint64_t v46 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v33, v59, 0, 0);
      unsigned int v47 = (*a1)++;
      *unsigned int v47 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v32, v59, 0, 0);
      char v48 = (*a1)++;
      *char v48 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v31, v59, 0, 0);
      __int16 v49 = (*a1)++;
      *__int16 v49 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v30, v59, 0, 0);
      unsigned int v50 = (*a1)++;
      *unsigned int v50 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v29, v59, 0, 0);
      int v51 = (*a1)++;
      *int v51 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v52 = -0.5;
      if (v28 * 100.0 > 0.0) {
        double v52 = 0.5;
      }
      double v53 = v28 * 100.0 + v52;
      if (v53 <= 2147483650.0)
      {
        if (v53 >= -2147483650.0) {
          unsigned int v54 = (int)v53;
        }
        else {
          unsigned int v54 = 0x80000000;
        }
      }
      else
      {
        unsigned int v54 = 0x7FFFFFFF;
      }
      sprintf_3f((uint64_t)a1, v54, 3);
      uint64_t v55 = (*a1)++;
      *uint64_t v55 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v56 = -0.5;
      if (v38 * 100.0 > 0.0) {
        double v56 = 0.5;
      }
      double v57 = v38 * 100.0 + v56;
      if (v57 <= 2147483650.0)
      {
        if (v57 >= -2147483650.0) {
          unsigned int v58 = (int)v57;
        }
        else {
          unsigned int v58 = 0x80000000;
        }
      }
      else
      {
        unsigned int v58 = 0x7FFFFFFF;
      }
      sprintf_3f((uint64_t)a1, v58, 3);
      size_t result = NMEA_Add_checksum((uint64_t)a1, v8);
      break;
    default:
      uint64_t v24 = *a1;
      char v25 = 45;
      uint64_t v26 = 1u;
      do
      {
        *a1 = v24 + 1;
        *uint64_t v24 = v25;
        uint64_t v24 = *a1;
        if (*a1 >= a1[3])
        {
          uint64_t v24 = a1[2];
          *a1 = v24;
        }
        char v25 = asc_22BADF301[v26++];
      }
      while (v26 != 14);
      NMEA_Add_checksum((uint64_t)a1, v8);
      size_t result = EvCrt_Illegal_Default("NMEA_Encode_PDBGE_Constell", 0x611u);
      break;
  }
  return result;
}

void *NMEA_Encode_PDBGI_Constell(char **a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  int v7 = (*a1)++;
  *int v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = 80;
  uint64_t v10 = 1u;
  uint64_t v11 = v8;
  do
  {
    *a1 = v11 + 1;
    *uint64_t v11 = v9;
    uint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v9 = aPdbgi[v10++];
  }
  while (v10 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      unsigned int v12 = (long long *)((char *)a4 + 456);
      unsigned int v13 = "G,";
      goto LABEL_21;
    case 2:
      unsigned int v12 = (long long *)((char *)a4 + 696);
      unsigned int v13 = "R,";
      goto LABEL_21;
    case 3:
      unsigned int v12 = a4 + 51;
      unsigned int v13 = "E,";
      goto LABEL_21;
    case 4:
      unsigned int v12 = (long long *)((char *)a4 + 936);
      unsigned int v13 = "C,";
      goto LABEL_21;
    case 5:
      unsigned int v12 = a4 + 36;
      unsigned int v13 = "Q,";
      goto LABEL_21;
    case 6:
      unsigned int v12 = a4 + 66;
      unsigned int v13 = "S,";
LABEL_21:
      long long v18 = v12[5];
      long long v71 = v12[4];
      long long v72 = v18;
      long long v73 = v12[6];
      uint64_t v74 = *((void *)v12 + 14);
      long long v19 = v12[1];
      long long v68 = *v12;
      long long v69 = v19;
      long long v20 = v12[3];
      v70[0] = v12[2];
      v70[1] = v20;
      char v21 = *v13;
      if (*v13)
      {
        unsigned int v22 = *a1;
        uint64_t v23 = (unsigned __int8 *)(v13 + 1);
        do
        {
          *a1 = v22 + 1;
          *unsigned int v22 = v21;
          unsigned int v22 = *a1;
          if (*a1 >= a1[3])
          {
            unsigned int v22 = a1[2];
            *a1 = v22;
          }
          int v24 = *v23++;
          char v21 = v24;
        }
        while (v24);
      }
      sprintf1da(a1, BYTE1(v68), v75, 0, 0);
      char v25 = (*a1)++;
      *char v25 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE2(v68), v75, 0, 0);
      uint64_t v26 = (*a1)++;
      *uint64_t v26 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE3(v68), v75, 0, 0);
      char v27 = (*a1)++;
      *char v27 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE4(v68), v75, 0, 0);
      double v28 = (*a1)++;
      *double v28 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE6(v68), v75, 0, 0);
      unsigned int v29 = (*a1)++;
      *unsigned int v29 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE7(v68), v75, 0, 0);
      unsigned int v30 = (*a1)++;
      *unsigned int v30 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE8(v68), v75, 0, 0);
      unsigned int v31 = (*a1)++;
      *unsigned int v31 = 44;
      unsigned int v32 = *a1;
      if (*a1 >= a1[3]) {
        unsigned int v32 = a1[2];
      }
      for (uint64_t i = 0; i != 16; ++i)
      {
        char v34 = *(unsigned char *)(((unint64_t)&v68 | 9) + i);
        if (v34)
        {
          *a1 = v32 + 1;
          *unsigned int v32 = v34;
          unsigned int v32 = *a1;
          if (*a1 >= a1[3])
          {
            unsigned int v32 = a1[2];
            *a1 = v32;
          }
        }
      }
      *a1 = v32 + 1;
      *unsigned int v32 = 44;
      unsigned int v35 = *a1;
      if (*a1 >= a1[3]) {
        unsigned int v35 = a1[2];
      }
      for (uint64_t j = 0; j != 16; ++j)
      {
        char v37 = *((unsigned char *)&v69 + j + 9);
        if (v37)
        {
          *a1 = v35 + 1;
          *unsigned int v35 = v37;
          unsigned int v35 = *a1;
          if (*a1 >= a1[3])
          {
            unsigned int v35 = a1[2];
            *a1 = v35;
          }
        }
      }
      *a1 = v35 + 1;
      *unsigned int v35 = 44;
      double v38 = *a1;
      if (*a1 >= a1[3]) {
        double v38 = a1[2];
      }
      for (uint64_t k = 0; k != 16; ++k)
      {
        char v40 = *((unsigned char *)v70 + k + 9);
        if (v40)
        {
          *a1 = v38 + 1;
          *double v38 = v40;
          double v38 = *a1;
          if (*a1 >= a1[3])
          {
            double v38 = a1[2];
            *a1 = v38;
          }
        }
      }
      *a1 = v38 + 1;
      *double v38 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v41 = -0.5;
      if (*(double *)&v71 * 10.0 > 0.0) {
        double v41 = 0.5;
      }
      double v42 = *(double *)&v71 * 10.0 + v41;
      if (v42 <= 2147483650.0)
      {
        if (v42 >= -2147483650.0) {
          unsigned int v43 = (int)v42;
        }
        else {
          unsigned int v43 = 0x80000000;
        }
      }
      else
      {
        unsigned int v43 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v43);
      uint64_t v44 = (*a1)++;
      char *v44 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v45 = -0.5;
      if (*((double *)&v71 + 1) * 10.0 > 0.0) {
        double v45 = 0.5;
      }
      double v46 = *((double *)&v71 + 1) * 10.0 + v45;
      if (v46 <= 2147483650.0)
      {
        if (v46 >= -2147483650.0) {
          unsigned int v47 = (int)v46;
        }
        else {
          unsigned int v47 = 0x80000000;
        }
      }
      else
      {
        unsigned int v47 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v47);
      char v48 = (*a1)++;
      *char v48 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v49 = -0.5;
      if (*(double *)&v72 * 10.0 > 0.0) {
        double v49 = 0.5;
      }
      double v50 = *(double *)&v72 * 10.0 + v49;
      if (v50 <= 2147483650.0)
      {
        if (v50 >= -2147483650.0) {
          unsigned int v51 = (int)v50;
        }
        else {
          unsigned int v51 = 0x80000000;
        }
      }
      else
      {
        unsigned int v51 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v51);
      double v52 = (*a1)++;
      *double v52 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v53 = -0.5;
      if (*((double *)&v72 + 1) * 10.0 > 0.0) {
        double v53 = 0.5;
      }
      double v54 = *((double *)&v72 + 1) * 10.0 + v53;
      if (v54 <= 2147483650.0)
      {
        if (v54 >= -2147483650.0) {
          unsigned int v55 = (int)v54;
        }
        else {
          unsigned int v55 = 0x80000000;
        }
      }
      else
      {
        unsigned int v55 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v55);
      double v56 = (*a1)++;
      *double v56 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v57 = -0.5;
      if (*(double *)&v73 * 10.0 > 0.0) {
        double v57 = 0.5;
      }
      double v58 = *(double *)&v73 * 10.0 + v57;
      if (v58 <= 2147483650.0)
      {
        if (v58 >= -2147483650.0) {
          unsigned int v59 = (int)v58;
        }
        else {
          unsigned int v59 = 0x80000000;
        }
      }
      else
      {
        unsigned int v59 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v59);
      uint64_t v60 = (*a1)++;
      *uint64_t v60 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      double v61 = -0.5;
      if (*((double *)&v73 + 1) * 10.0 > 0.0) {
        double v61 = 0.5;
      }
      double v62 = *((double *)&v73 + 1) * 10.0 + v61;
      if (v62 <= 2147483650.0)
      {
        if (v62 >= -2147483650.0) {
          unsigned int v63 = (int)v62;
        }
        else {
          unsigned int v63 = 0x80000000;
        }
      }
      else
      {
        unsigned int v63 = 0x7FFFFFFF;
      }
      sprintf_2f((uint64_t)a1, v63);
      unsigned int v64 = (*a1)++;
      *unsigned int v64 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, v74, v75, 0, 0);
      int v65 = (*a1)++;
      *int v65 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE1(v74), v75, 0, 0);
      BOOL v66 = (*a1)++;
      *BOOL v66 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      sprintf1da(a1, BYTE2(v74), v75, 0, 0);
      uint64_t v67 = (*a1)++;
      *uint64_t v67 = 44;
      if (*a1 >= a1[3]) {
        *a1 = a1[2];
      }
      size_t result = NMEA_Add_checksum((uint64_t)a1, v8);
      break;
    default:
      unint64_t v14 = *a1;
      char v15 = 45;
      uint64_t v16 = 1u;
      do
      {
        *a1 = v14 + 1;
        *unint64_t v14 = v15;
        unint64_t v14 = *a1;
        if (*a1 >= a1[3])
        {
          unint64_t v14 = a1[2];
          *a1 = v14;
        }
        char v15 = asc_22BADF331[v16++];
      }
      while (v16 != 16);
      NMEA_Add_checksum((uint64_t)a1, v8);
      size_t result = EvCrt_Illegal_Default("NMEA_Encode_PDBGI_Constell", 0x6D6u);
      break;
  }
  return result;
}

void *NMEA_Encode_PDBGO(char **a1, int a2, uint64_t a3, unint64_t *a4)
{
  int v7 = (*a1)++;
  *int v7 = 36;
  uint64_t v8 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v8 = a1[2];
  }
  char v9 = 80;
  uint64_t v10 = 1u;
  uint64_t v11 = v8;
  do
  {
    *a1 = v11 + 1;
    *uint64_t v11 = v9;
    uint64_t v11 = *a1;
    if (*a1 >= a1[3])
    {
      uint64_t v11 = a1[2];
      *a1 = v11;
    }
    char v9 = aPdbgo[v10++];
  }
  while (v10 != 7);
  sprintf_HHMMSS(a1, a3);
  switch(a2)
  {
    case 1:
      unsigned int v12 = a4 + 155;
      unsigned int v13 = a4 + 156;
      unint64_t v14 = a4 + 157;
      char v15 = a4 + 158;
      uint64_t v16 = a4 + 159;
      uint64_t v17 = "G,";
      goto LABEL_21;
    case 2:
      unsigned int v12 = a4 + 167;
      unsigned int v13 = a4 + 168;
      unint64_t v14 = a4 + 169;
      char v15 = a4 + 170;
      uint64_t v16 = a4 + 171;
      uint64_t v17 = "R,";
      goto LABEL_21;
    case 3:
      unsigned int v12 = a4 + 173;
      unsigned int v13 = a4 + 174;
      unint64_t v14 = a4 + 175;
      char v15 = a4 + 176;
      uint64_t v16 = a4 + 177;
      uint64_t v17 = "E,";
      goto LABEL_21;
    case 4:
      unsigned int v12 = a4 + 179;
      unsigned int v13 = a4 + 180;
      unint64_t v14 = a4 + 181;
      char v15 = a4 + 182;
      uint64_t v16 = a4 + 183;
      uint64_t v17 = "C,";
      goto LABEL_21;
    case 5:
      unsigned int v12 = a4 + 161;
      unsigned int v13 = a4 + 162;
      unint64_t v14 = a4 + 163;
      char v15 = a4 + 164;
      uint64_t v16 = a4 + 165;
      uint64_t v17 = "Q,";
      goto LABEL_21;
    case 6:
      unsigned int v12 = a4 + 185;
      unsigned int v13 = a4 + 186;
      unint64_t v14 = a4 + 187;
      char v15 = a4 + 188;
      uint64_t v16 = a4 + 189;
      uint64_t v17 = "S,";
LABEL_21:
      unint64_t v22 = *v15;
      unint64_t v23 = *v14;
      unint64_t v24 = *v13;
      unint64_t v25 = *v12;
      unint64_t v26 = *v16;
      char v27 = *v17;
      double v28 = *a1;
      if (*v17)
      {
        unsigned int v29 = (unsigned __int8 *)(v17 + 1);
        do
        {
          *a1 = v28 + 1;
          *double v28 = v27;
          double v28 = *a1;
          if (*a1 >= a1[3])
          {
            double v28 = a1[2];
            *a1 = v28;
          }
          int v30 = *v29++;
          char v27 = v30;
        }
        while (v30);
      }
      uint64_t v31 = 0;
      char v32 = 66;
      do
      {
        *a1 = v28 + 1;
        *double v28 = v32;
        double v28 = *a1;
        if (*a1 >= a1[3])
        {
          double v28 = a1[2];
          *a1 = v28;
        }
        char v32 = aB[++v31];
      }
      while (v31 != 2);
      if (v25)
      {
        uint64_t v33 = 0;
        char v34 = 48;
        do
        {
          *a1 = v28 + 1;
          *double v28 = v34;
          double v28 = *a1;
          if (*a1 >= a1[3])
          {
            double v28 = a1[2];
            *a1 = v28;
          }
          char v34 = a0x_0[++v33];
        }
        while (v33 != 2);
        sprintf_1X(a1, v25);
        double v28 = *a1;
      }
      *a1 = v28 + 1;
      *double v28 = 44;
      unsigned int v35 = *a1;
      if (*a1 >= a1[3]) {
        unsigned int v35 = a1[2];
      }
      if (v23)
      {
        uint64_t v36 = 0;
        char v37 = 48;
        do
        {
          *a1 = v35 + 1;
          *unsigned int v35 = v37;
          unsigned int v35 = *a1;
          if (*a1 >= a1[3])
          {
            unsigned int v35 = a1[2];
            *a1 = v35;
          }
          char v37 = a0x_0[++v36];
        }
        while (v36 != 2);
        sprintf_1X(a1, v23);
        unsigned int v35 = *a1;
      }
      *a1 = v35 + 1;
      *unsigned int v35 = 44;
      double v38 = *a1;
      if (*a1 >= a1[3]) {
        double v38 = a1[2];
      }
      if (v22)
      {
        uint64_t v39 = 0;
        char v40 = 48;
        do
        {
          *a1 = v38 + 1;
          *double v38 = v40;
          double v38 = *a1;
          if (*a1 >= a1[3])
          {
            double v38 = a1[2];
            *a1 = v38;
          }
          char v40 = a0x_0[++v39];
        }
        while (v39 != 2);
        sprintf_1X(a1, v22);
        double v38 = *a1;
      }
      *a1 = v38 + 1;
      *double v38 = 44;
      double v41 = *a1;
      if (*a1 >= a1[3]) {
        double v41 = a1[2];
      }
      uint64_t v42 = 0;
      char v43 = 69;
      do
      {
        *a1 = v41 + 1;
        *double v41 = v43;
        double v41 = *a1;
        if (*a1 >= a1[3])
        {
          double v41 = a1[2];
          *a1 = v41;
        }
        char v43 = aE_0[++v42];
      }
      while (v42 != 2);
      if (v24)
      {
        uint64_t v44 = 0;
        char v45 = 48;
        do
        {
          *a1 = v41 + 1;
          *double v41 = v45;
          double v41 = *a1;
          if (*a1 >= a1[3])
          {
            double v41 = a1[2];
            *a1 = v41;
          }
          char v45 = a0x_0[++v44];
        }
        while (v44 != 2);
        sprintf_1X(a1, v24);
        double v41 = *a1;
      }
      *a1 = v41 + 1;
      *double v41 = 44;
      double v46 = *a1;
      if (*a1 >= a1[3]) {
        double v46 = a1[2];
      }
      uint64_t v47 = 0;
      char v48 = 82;
      do
      {
        *a1 = v46 + 1;
        *double v46 = v48;
        double v46 = *a1;
        if (*a1 >= a1[3])
        {
          double v46 = a1[2];
          *a1 = v46;
        }
        char v48 = aR[++v47];
      }
      while (v47 != 2);
      if (v26)
      {
        uint64_t v49 = 0;
        char v50 = 48;
        do
        {
          *a1 = v46 + 1;
          *double v46 = v50;
          double v46 = *a1;
          if (*a1 >= a1[3])
          {
            double v46 = a1[2];
            *a1 = v46;
          }
          char v50 = a0x_0[++v49];
        }
        while (v49 != 2);
        sprintf_1X(a1, v26);
      }
      size_t result = NMEA_Add_checksum((uint64_t)a1, v8);
      break;
    default:
      long long v18 = *a1;
      char v19 = 45;
      uint64_t v20 = 1u;
      do
      {
        *a1 = v18 + 1;
        *long long v18 = v19;
        long long v18 = *a1;
        if (*a1 >= a1[3])
        {
          long long v18 = a1[2];
          *a1 = v18;
        }
        char v19 = aBER[v20++];
      }
      while (v20 != 12);
      NMEA_Add_checksum((uint64_t)a1, v8);
      size_t result = EvCrt_Illegal_Default("NMEA_Encode_PDBGO", 0x77Eu);
      break;
  }
  return result;
}

char **NMEA_Encode_PDBGR(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unsigned int v5 = (*a1)++;
  *unsigned int v5 = 36;
  uint64_t v6 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v6 = a1[2];
  }
  char v7 = 80;
  uint64_t v8 = 1u;
  char v9 = v6;
  do
  {
    *a1 = v9 + 1;
    *char v9 = v7;
    char v9 = *a1;
    if (*a1 >= a1[3])
    {
      char v9 = a1[2];
      *a1 = v9;
    }
    char v7 = aPdbgr[v8++];
  }
  while (v8 != 7);
  sprintf_HHMMSS(a1, a2);
  sprintf_1u(a1, *(_DWORD *)(a3 + 2108));
  uint64_t v10 = (*a1)++;
  *uint64_t v10 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf_1u(a1, *(_DWORD *)(a3 + 2112));
  uint64_t v11 = (*a1)++;
  *uint64_t v11 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2116), v42, 0, 0);
  unsigned int v12 = (*a1)++;
  *unsigned int v12 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2118), v42, 0, 0);
  unsigned int v13 = (*a1)++;
  *unsigned int v13 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2120), v42, 0, 0);
  unint64_t v14 = (*a1)++;
  *unint64_t v14 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2122), v42, 0, 0);
  char v15 = (*a1)++;
  *char v15 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2124), v42, 0, 0);
  uint64_t v16 = (*a1)++;
  *uint64_t v16 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2128), v42, 0, 0);
  uint64_t v17 = (*a1)++;
  *uint64_t v17 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2126), v42, 0, 0);
  long long v18 = (*a1)++;
  *long long v18 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2130), v42, 0, 0);
  char v19 = (*a1)++;
  *char v19 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, *(unsigned __int16 *)(a3 + 2132), v42, 0, 0);
  uint64_t v20 = (*a1)++;
  *uint64_t v20 = 44;
  char v21 = *a1;
  if (*a1 >= a1[3]) {
    char v21 = a1[2];
  }
  uint64_t v22 = 0;
  unsigned int v23 = 1;
  do
  {
    *a1 = v21 + 1;
    *char v21 = 82;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, v23, v42, 0, v23 >> 31);
    unint64_t v24 = (*a1)++;
    *unint64_t v24 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf_1u(a1, *(_DWORD *)(a3 + v22 + 2136));
    unint64_t v25 = (*a1)++;
    *unint64_t v25 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2140), v42, 0, 0);
    unint64_t v26 = (*a1)++;
    *unint64_t v26 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int16 *)(a3 + v22 + 2142), v42, 0, 0);
    char v27 = (*a1)++;
    *char v27 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2144), v42, 0, 0);
    double v28 = (*a1)++;
    *double v28 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2145), v42, 0, 0);
    unsigned int v29 = (*a1)++;
    *unsigned int v29 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2146), v42, 0, 0);
    int v30 = (*a1)++;
    *int v30 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2147), v42, 0, 0);
    uint64_t v31 = (*a1)++;
    *uint64_t v31 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int16 *)(a3 + v22 + 2148), v42, 0, 0);
    char v32 = (*a1)++;
    *char v32 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2150), v42, 0, 0);
    uint64_t v33 = (*a1)++;
    *uint64_t v33 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2151), v42, 0, 0);
    char v34 = (*a1)++;
    *char v34 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2152), v42, 0, 0);
    unsigned int v35 = (*a1)++;
    *unsigned int v35 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2153), v42, 0, 0);
    uint64_t v36 = (*a1)++;
    *uint64_t v36 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int16 *)(a3 + v22 + 2154), v42, 0, 0);
    char v37 = (*a1)++;
    *char v37 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2156), v42, 0, 0);
    double v38 = (*a1)++;
    *double v38 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2157), v42, 0, 0);
    uint64_t v39 = (*a1)++;
    *uint64_t v39 = 44;
    if (*a1 >= a1[3]) {
      *a1 = a1[2];
    }
    sprintf1da(a1, *(unsigned __int8 *)(a3 + v22 + 2158), v42, 0, 0);
    char v40 = (*a1)++;
    *char v40 = 44;
    char v21 = *a1;
    if (*a1 >= a1[3])
    {
      char v21 = a1[2];
      *a1 = v21;
    }
    v22 += 24;
    ++v23;
  }
  while (v22 != 72);

  return NMEA_Add_checksum((uint64_t)a1, v6);
}

char **NMEA_Encode_PDBGN(char **a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v5 = (*a1)++;
  *unsigned int v5 = 36;
  uint64_t v6 = *a1;
  if (*a1 >= a1[3]) {
    uint64_t v6 = a1[2];
  }
  char v7 = 80;
  uint64_t v8 = 1u;
  char v9 = v6;
  do
  {
    *a1 = v9 + 1;
    *char v9 = v7;
    char v9 = *a1;
    if (*a1 >= a1[3])
    {
      char v9 = a1[2];
      *a1 = v9;
    }
    char v7 = aPdbgn[v8++];
  }
  while (v8 != 7);
  sprintf_HHMMSS(a1, a2);
  sprintf1da(a1, a3[1046], v17, 0, 0);
  uint64_t v10 = (*a1)++;
  *uint64_t v10 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1047], v17, 0, 0);
  uint64_t v11 = (*a1)++;
  *uint64_t v11 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1048], v17, 0, 0);
  unsigned int v12 = (*a1)++;
  *unsigned int v12 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1049], v17, 0, 0);
  unsigned int v13 = (*a1)++;
  *unsigned int v13 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1050], v17, 0, 0);
  unint64_t v14 = (*a1)++;
  *unint64_t v14 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1051], v17, 0, 0);
  char v15 = (*a1)++;
  *char v15 = 44;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
  sprintf1da(a1, a3[1052], v17, 0, 0);

  return NMEA_Add_checksum((uint64_t)a1, v6);
}

uint64_t sprintf_LatLon(char **a1, double a2, double a3)
{
  int v6 = (int)a2;
  double v7 = fabs((a2 - (double)(int)a2) * 60.0);
  if (v6 >= 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = -v6;
  }
  double v9 = v7 * 1000000.0;
  double v10 = -0.5;
  if (v9 > 0.0) {
    double v10 = 0.5;
  }
  double v11 = v9 + v10;
  if (v11 > 2147483650.0)
  {
    sprintf_02d(a1, v8);
    signed int v12 = 0x7FFFFFFF;
    goto LABEL_13;
  }
  if (v11 >= -2147483650.0)
  {
    signed int v12 = (int)v11;
    sprintf_02d(a1, v8);
    if (v12 >= 10000000) {
      goto LABEL_13;
    }
  }
  else
  {
    sprintf_02d(a1, v8);
    signed int v12 = 0x80000000;
  }
  unsigned int v13 = (*a1)++;
  *unsigned int v13 = 48;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
LABEL_13:
  sprintf_7f((uint64_t)a1, v12, 7);
  unint64_t v14 = ",N,";
  if (a2 < 0.0) {
    unint64_t v14 = ",S,";
  }
  char v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = (unsigned __int8 *)(v14 + 1);
    do
    {
      *a1 = v16 + 1;
      *uint64_t v16 = v15;
      uint64_t v16 = *a1;
      if (*a1 >= a1[3])
      {
        uint64_t v16 = a1[2];
        *a1 = v16;
      }
      int v18 = *v17++;
      char v15 = v18;
    }
    while (v18);
  }
  double v19 = fabs((a3 - (double)(int)a3) * 60.0);
  if ((int)a3 >= 0) {
    unsigned int v20 = (int)a3;
  }
  else {
    unsigned int v20 = -(int)a3;
  }
  double v21 = v19 * 1000000.0;
  double v22 = -0.5;
  if (v21 > 0.0) {
    double v22 = 0.5;
  }
  double v23 = v21 + v22;
  if (v23 > 2147483650.0)
  {
    sprintf_03d((uint64_t)a1, v20);
    signed int v24 = 0x7FFFFFFF;
    goto LABEL_32;
  }
  if (v23 >= -2147483650.0)
  {
    signed int v24 = (int)v23;
    sprintf_03d((uint64_t)a1, v20);
    if (v24 >= 10000000) {
      goto LABEL_32;
    }
  }
  else
  {
    sprintf_03d((uint64_t)a1, v20);
    signed int v24 = 0x80000000;
  }
  unint64_t v25 = (*a1)++;
  *unint64_t v25 = 48;
  if (*a1 >= a1[3]) {
    *a1 = a1[2];
  }
LABEL_32:
  uint64_t result = sprintf_7f((uint64_t)a1, v24, 7);
  char v27 = ",E,";
  if (a3 < 0.0) {
    char v27 = ",W,";
  }
  char v28 = *v27;
  if (*v27)
  {
    unsigned int v29 = *a1;
    int v30 = (unsigned __int8 *)(v27 + 1);
    do
    {
      *a1 = v29 + 1;
      *unsigned int v29 = v28;
      unsigned int v29 = *a1;
      if (*a1 >= a1[3])
      {
        unsigned int v29 = a1[2];
        *a1 = v29;
      }
      int v31 = *v30++;
      char v28 = v31;
    }
    while (v31);
  }
  return result;
}

void *sprintf_HHMMSS(void *result, uint64_t a2)
{
  unsigned __int16 v2 = result;
  if (*(unsigned char *)(a2 + 8))
  {
    sprintf_02d(result, *(unsigned __int16 *)(a2 + 16));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 18));
    sprintf_02d(v2, *(unsigned __int16 *)(a2 + 20));
    uint64_t v4 = (unsigned char *)(*v2)++;
    *uint64_t v4 = 46;
    if (*v2 >= v2[3]) {
      *unsigned __int16 v2 = v2[2];
    }
    uint64_t result = (void *)sprintf_03d((uint64_t)v2, *(unsigned __int16 *)(a2 + 22));
  }
  unsigned int v5 = (unsigned char *)(*v2)++;
  *unsigned int v5 = 44;
  if (*v2 >= v2[3]) {
    *unsigned __int16 v2 = v2[2];
  }
  return result;
}

char **NMEA_Add_checksum(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char **)a1 == a2)
  {
    unint64_t v5 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      int v4 = *a2;
      if (v4 == 32)
      {
        LOBYTE(v4) = 48;
        *a2 = 48;
      }
      if ((unint64_t)++a2 >= *(void *)(a1 + 24)) {
        a2 = *(unsigned char **)(a1 + 16);
      }
      v3 ^= v4;
    }
    while (a2 != *(unsigned char **)a1);
    unint64_t v5 = v3;
  }
  *(void *)a1 = a2 + 1;
  *a2 = 42;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  uint64_t result = sprintf_02x((char **)a1, v5);
  double v7 = (unsigned char *)(*(void *)a1)++;
  *double v7 = 10;
  if (*(void *)a1 >= *(void *)(a1 + 24)) {
    *(void *)a1 = *(void *)(a1 + 16);
  }
  return result;
}

uint64_t sprintf_DOP(uint64_t result, double a2)
{
  if (a2 < 99.0)
  {
    double v2 = a2 * 100.0;
    double v3 = -0.5;
    if (v2 > 0.0) {
      double v3 = 0.5;
    }
    double v4 = v2 + v3;
    if (v4 <= 2147483650.0)
    {
      if (v4 >= -2147483650.0) {
        unsigned int v5 = (int)v4;
      }
      else {
        unsigned int v5 = 0x80000000;
      }
    }
    else
    {
      unsigned int v5 = 0x7FFFFFFF;
    }
    return sprintf_3f(result, v5, 3);
  }
  return result;
}

void *sprintf_AccEst(void *result, double a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 < 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          double v14 = a2 * 1000.0;
          double v15 = -0.5;
          if (v14 > 0.0) {
            double v15 = 0.5;
          }
          double v16 = v14 + v15;
          if (v16 <= 2147483650.0)
          {
            if (v16 >= -2147483650.0) {
              unsigned int v17 = (int)v16;
            }
            else {
              unsigned int v17 = 0x80000000;
            }
          }
          else
          {
            unsigned int v17 = 0x7FFFFFFF;
          }
          return (void *)sprintf_4f((uint64_t)result, v17, 4);
        }
        else
        {
          double v9 = a2 * 100.0;
          double v10 = -0.5;
          if (v9 > 0.0) {
            double v10 = 0.5;
          }
          double v11 = v9 + v10;
          if (v11 <= 2147483650.0)
          {
            if (v11 >= -2147483650.0) {
              unsigned int v12 = (int)v11;
            }
            else {
              unsigned int v12 = 0x80000000;
            }
          }
          else
          {
            unsigned int v12 = 0x7FFFFFFF;
          }
          return (void *)sprintf_3f((uint64_t)result, v12, 3);
        }
      }
      else
      {
        double v5 = a2 * 10.0;
        double v6 = -0.5;
        if (v5 > 0.0) {
          double v6 = 0.5;
        }
        double v7 = v5 + v6;
        if (v7 <= 2147483650.0)
        {
          if (v7 >= -2147483650.0) {
            unsigned int v8 = (int)v7;
          }
          else {
            unsigned int v8 = 0x80000000;
          }
        }
        else
        {
          unsigned int v8 = 0x7FFFFFFF;
        }
        return (void *)sprintf_2f((uint64_t)result, v8);
      }
    }
    else
    {
      double v2 = -0.5;
      if (a2 > 0.0) {
        double v2 = 0.5;
      }
      double v3 = v2 + a2;
      if (v3 <= 2147483650.0)
      {
        if (v3 >= -2147483650.0) {
          int v4 = (int)v3;
        }
        else {
          int v4 = 0x80000000;
        }
      }
      else
      {
        int v4 = 0x7FFFFFFF;
      }
      if (v4 >= 0) {
        unsigned int v13 = v4;
      }
      else {
        unsigned int v13 = -v4;
      }
      return sprintf1da(result, v13, v18, 0, v4 >> 31);
    }
  }
  return result;
}

void ECEF2Geo(double *a1, uint64_t a2, uint64_t a3)
{
  v25[3] = *(double *)MEMORY[0x263EF8340];
  double v5 = *a1;
  if (*(_WORD *)a2)
  {
    double v6 = v5 + *(double *)(a2 + 48);
    double v7 = a1[1];
    double v8 = a1[2];
    double v9 = v7 + *(double *)(a2 + 56);
    double v10 = v8 + *(double *)(a2 + 64);
    if (*(unsigned char *)(a2 + 2))
    {
      uint64_t v11 = 0;
      unsigned int v12 = (double *)(a2 + 88);
      do
      {
        double v13 = v7 * *(v12 - 1) + *(v12 - 2) * v5;
        double v14 = *v12;
        v12 += 3;
        v25[v11++] = v13 + v14 * v8;
      }
      while (v11 != 3);
      double v5 = v6 + v25[0];
      double v9 = v9 + v25[1];
      double v10 = v10 + v25[2];
    }
    else
    {
      double v5 = v5 + *(double *)(a2 + 48);
    }
  }
  else
  {
    double v9 = a1[1];
    double v10 = a1[2];
  }
  double v15 = v9 * v9 + v5 * v5;
  double v16 = *(double *)(a2 + 24);
  double v17 = 1.0 / *(double *)(a2 + 16);
  double v18 = v15 * v17;
  double v19 = v10 * v10 * v17;
  int v22 = 3;
  do
  {
    double v20 = *(double *)(a2 + 32);
    double v21 = *(double *)(a2 + 40) * v19;
    double v16 = v16
        - ((v21 + v21) * (v16 * (v16 * v16))
         + v21 * (v16 * v16) * (v16 * v16)
         + (v18 + v21 - v20) * (v16 * v16)
         + v20 * -2.0 * v16
         - v20)
        / (v20 * -2.0
         + (v21 + v21) * 3.0 * (v16 * v16)
         + v21 * 4.0 * (v16 * (v16 * v16))
         + (v18 + v21 - v20 + v18 + v21 - v20) * v16);
    --v22;
  }
  while (v22);
  double v23 = v16 + 1.0;
  if (fabs(v5) >= 0.001 || fabs(v9) >= 0.001)
  {
    *(long double *)(a3 + 8) = atan2(v9, v5);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    double v24 = 0.0;
    if (fabs(v10) < 0.001) {
      goto LABEL_16;
    }
  }
  double v24 = atan2(v10 * v23, sqrt(v15));
LABEL_16:
  *(double *)a3 = v24;
  *(double *)(a3 + 16) = *(double *)(a2 + 8)
                       * (sqrt(v19 + v18 / (v23 * v23))
                        * (1.0 - v16 * *(double *)(a2 + 40) / *(double *)(a2 + 24)));
}

BOOL NK_Body_Frame_Meas(unsigned int a1, double *a2, const double *a3, const double (*a4)[3], double a5, unsigned int a6, double *a7)
{
  v29[33] = *(double *)MEMORY[0x263EF8340];
  double v10 = &v27[2];
  ECEF2FSD_RotM(a4, a5, (double (*)[3])v27);
  uint64_t v11 = 0;
  double v12 = *a2;
  double v13 = a2[1];
  double v14 = a2[2];
  do
  {
    double v15 = *(v10 - 1) * v13 + *(v10 - 2) * v12;
    double v16 = *v10;
    v10 += 3;
    v27[v11 + 9] = v15 + v16 * v14;
    ++v11;
  }
  while (v11 != 3);
  uint64_t v17 = 0;
  double v24 = 0.0;
  double v18 = &v27[2];
  do
  {
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    uint64_t v19 = *((void *)v18 - 1);
    *((double *)v25 + a1) = *(v18 - 2);
    *((void *)v25 + a1 + 1) = v19;
    uint64_t v20 = *(void *)v18;
    v18 += 3;
    *((void *)&v25[1] + a1) = v20;
    *((double *)v25 + a6) = v27[v17 + 9];
    BOOL result = umeas((BOOL)a7, a6, a3[v17++], (double *)v25, v29, v28, &v24, 1.0e20);
  }
  while (v17 != 3);
  return result;
}

uint64_t NK_Static_Filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v128[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 11116;
  uint64_t v8 = a2 + 22720;
  unsigned int v9 = *(_DWORD *)(a1 + 11032);
  if (v9 <= *(unsigned __int16 *)(a1 + 16) && *(_DWORD *)(a2 + 968) == 1)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 140);
    if (v10 >= *(_DWORD *)(a1 + 144)) {
      unsigned int v10 = *(_DWORD *)(a1 + 144);
    }
    if (v10 >= *(_DWORD *)(a1 + 148)) {
      unsigned int v10 = *(_DWORD *)(a1 + 148);
    }
    BOOL v116 = v10 > 0xA;
  }
  else
  {
    BOOL v116 = 0;
  }
  memcpy(__dst, (const void *)(a1 + 872), sizeof(__dst));
  uint64_t v11 = 0;
  double v12 = *(double *)(a2 + 688) - *(double *)&__dst[37];
  double v13 = *(double *)(a2 + 696) - *((double *)&__dst[37] + 1);
  double v14 = *(double *)(a2 + 704) - *(double *)&__dst[38];
  unsigned int v115 = (double *)(a2 + 832);
  double v15 = (double *)(a2 + 848);
  do
  {
    double v16 = v13 * *(v15 - 1) + *(v15 - 2) * v12;
    double v17 = *v15;
    v15 += 3;
    *(double *)&v128[v11++] = v16 + v17 * v14;
  }
  while (v11 != 3);
  double v19 = *(double *)v128;
  double v18 = *(double *)&v128[1];
  double v20 = sqrt(v18 * v18 + v19 * v19);
  double v21 = *(double *)(a2 + 24200);
  double v22 = *(double *)(a2 + 24208);
  *(double *)(a1 + 11128) = v20;
  *(double *)(a1 + 11152) = *(double *)(a1 + 11152) * 0.6 + v20 * 0.4;
  double v23 = 4.0;
  if (v20 < 8.0)
  {
    double v23 = 2.0;
    if (v20 >= 6.0) {
      double v23 = 3.0;
    }
  }
  double v24 = v21 + v22;
  double v25 = *(double *)(a1 + 11144);
  if (*(_DWORD *)(a1 + 11028) >= 3u
    && (v20 > v25 ? (BOOL v26 = v23 * v23 <= v24) : (BOOL v26 = 1), !v26 ? (_ZF = *(unsigned char *)(a1 + 233) == 0) : (_ZF = 0), _ZF))
  {
    double v28 = 10.0;
    if (v20 <= 10.0)
    {
      double v32 = v25 + 0.5;
      if (v20 > v32 && v20 < 8.0) {
        double v28 = v32;
      }
      else {
        double v28 = v20;
      }
    }
  }
  else
  {
    double v28 = 6.0;
    if (v20 <= 6.0 || v25 >= 6.0)
    {
      if (*(_DWORD *)(a1 + 11116) == 3)
      {
        double v30 = v25 + -0.003;
        double v28 = v20;
        if (v20 > v25 + -0.003) {
          goto LABEL_40;
        }
        double v31 = 0.003;
      }
      else
      {
        double v30 = v25 + -0.01;
        double v28 = v20;
        if (v20 > v25 + -0.01) {
          goto LABEL_40;
        }
        double v31 = 0.01;
      }
      BOOL v26 = v25 <= v31;
      double v28 = *(double *)(a1 + 11144);
      if (!v26) {
        double v28 = v30;
      }
    }
  }
LABEL_40:
  *(double *)(a1 + 11144) = v28;
  int v34 = *(_DWORD *)(v8 + 16);
  if (v34 == 1 && *(_DWORD *)(v8 + 12) != 1)
  {
    int v35 = *(unsigned __int8 *)(v7 + 46);
  }
  else
  {
    *(unsigned char *)(v7 + 45) = v28 <= 4.0;
    int v35 = v28 > 4.0;
    *(unsigned char *)(v7 + 46) = v35;
    if (v34 != 1)
    {
      if (v28 > 4.0) {
        int v36 = 8;
      }
      else {
        int v36 = 4;
      }
      *(_DWORD *)(v8 + 12) = v36;
      *(_DWORD *)(v8 + 16) = 0;
    }
  }
  LOBYTE(v37) = *(_DWORD *)(v8 + 4) == 1 && *(unsigned char *)(v8 + 36) != 0;
  unsigned int v38 = *(_DWORD *)(a1 + 11268);
  if (v38 == 20)
  {
    unsigned int v38 = 19;
    *(_DWORD *)(a1 + 11268) = 19;
  }
  else if (!v38)
  {
    *(_OWORD *)(a1 + 11400) = 0u;
    *(_OWORD *)(a1 + 11416) = 0u;
    *(_OWORD *)(a1 + 11368) = 0u;
    *(_OWORD *)(a1 + 11384) = 0u;
    *(_OWORD *)(a1 + 11336) = 0u;
    *(_OWORD *)(a1 + 11352) = 0u;
    *(_OWORD *)(a1 + 11304) = 0u;
    *(_OWORD *)(a1 + 11320) = 0u;
    *(_OWORD *)(a1 + 11272) = 0u;
    *(_OWORD *)(a1 + 11288) = 0u;
    goto LABEL_57;
  }
  uint64_t v39 = v38;
  do
  {
    *(void *)(a1 + 11272 + 8 * v39) = *(void *)(a1 + 8 * (v39 - 1) + 11272);
    --v39;
  }
  while (v39);
LABEL_57:
  double v40 = dbl_22BB0EAF0[v35 == 0];
  *(void *)(a1 + 11272) = *(void *)(a2 + 944);
  uint64_t v41 = v38 + 1;
  *(_DWORD *)(a1 + 11268) = v41;
  long long v42 = *(_OWORD *)(a1 + 11384);
  _OWORD v126[6] = *(_OWORD *)(a1 + 11368);
  v126[7] = v42;
  long long v43 = *(_OWORD *)(a1 + 11416);
  v126[8] = *(_OWORD *)(a1 + 11400);
  v126[9] = v43;
  long long v44 = *(_OWORD *)(a1 + 11320);
  v126[2] = *(_OWORD *)(a1 + 11304);
  v126[3] = v44;
  long long v45 = *(_OWORD *)(a1 + 11352);
  v126[4] = *(_OWORD *)(a1 + 11336);
  v126[5] = v45;
  long long v46 = *(_OWORD *)(a1 + 11288);
  v126[0] = *(_OWORD *)(a1 + 11272);
  v126[1] = v46;
  uint64_t result = (uint64_t)VecSortAscR8((double *)v126, 0, v38);
  unsigned int v48 = v41 >> 1;
  if (v41)
  {
    double v49 = *((double *)v126 + v48);
  }
  else
  {
    if (!v41)
    {
      double v51 = 0.0;
      goto LABEL_71;
    }
    double v49 = (*((double *)v126 + v48 - 1) + *((double *)v126 + v48)) * 0.5;
  }
  char v50 = (double *)(a1 + 11272);
  double v51 = 0.0;
  uint64_t v52 = v41;
  do
  {
    double v53 = *v50++;
    double v54 = v53;
    if (v53 > v49 * 4.3512 && v49 > 1.0 && v41 == 20) {
      double v54 = v49;
    }
    double v51 = v51 + v54;
    --v52;
  }
  while (v52);
LABEL_71:
  double v57 = v40 * 1.5;
  *(double *)(a1 + 11432) = v51 / (double)v41;
  if (v20 >= 3.0 || v24 >= v57 * 3.0 * (v57 * 3.0))
  {
    *(_WORD *)(v7 + 48) = 0;
    BOOL v60 = v116;
    goto LABEL_134;
  }
  int v58 = *(unsigned __int16 *)(v7 + 48);
  if (v58 == 5)
  {
    unsigned __int16 v61 = 4;
    *(_WORD *)(v7 + 48) = 4;
    goto LABEL_80;
  }
  if (!*(_WORD *)(v7 + 48))
  {
    int v59 = 0;
    *(_WORD *)(a1 + 11184) = 0;
    *(void *)(a1 + 11176) = 0;
    *(void *)(a1 + 11168) = 0;
    goto LABEL_82;
  }
  unsigned __int16 v61 = *(_WORD *)(v7 + 48);
  if ((__int16)v58 >= 1)
  {
LABEL_80:
    int v59 = 0;
    int v58 = 0;
    uint64_t v62 = v61 - 1;
    unsigned int v63 = (_WORD *)(a1 + 2 * v61 + 11176);
    do
    {
      uint64_t v64 = a1 + 2 * v62;
      int v65 = *(__int16 *)(v64 + 11166);
      *(v63 - 5) = *(_WORD *)(v64 + 11166);
      LODWORD(v64) = *(__int16 *)(v64 + 11176);
      *v63-- = v64;
      v58 += v65;
      v59 += v64;
      unint64_t v66 = v62-- + 1;
    }
    while (v66 > 1);
    goto LABEL_82;
  }
  int v58 = 0;
  int v59 = 0;
LABEL_82:
  double v67 = -0.5;
  if (v19 * 1000.0 <= 0.0) {
    double v68 = -0.5;
  }
  else {
    double v68 = 0.5;
  }
  double v69 = v19 * 1000.0 + v68;
  if (v69 <= 2147483650.0)
  {
    if (v69 >= -2147483650.0) {
      int v70 = (int)v69;
    }
    else {
      LOWORD(v70) = 0;
    }
  }
  else
  {
    LOWORD(v70) = -1;
  }
  *(_WORD *)(v7 + 50) = v70;
  if (v18 * 1000.0 > 0.0) {
    double v67 = 0.5;
  }
  double v71 = v18 * 1000.0 + v67;
  if (v71 <= 2147483650.0)
  {
    if (v71 >= -2147483650.0) {
      int v72 = (int)v71;
    }
    else {
      LOWORD(v72) = 0;
    }
  }
  else
  {
    LOWORD(v72) = -1;
  }
  *(_WORD *)(v7 + 60) = v72;
  __int16 v73 = *(_WORD *)(v7 + 48) + 1;
  *(_WORD *)(v7 + 48) = v73;
  if ((v37 & 1) == 0)
  {
    signed int v74 = ((v58 + (__int16)v70) * (v58 + (__int16)v70) + (v59 + (__int16)v72) * (v59 + (__int16)v72))
        / (v73 * v73);
    if (v73 < 5)
    {
      if (v73 < 3)
      {
        BOOL v79 = 0;
        goto LABEL_124;
      }
    }
    else
    {
      double v75 = -0.5;
      if (v57 * 1000.0 > 0.0) {
        double v75 = 0.5;
      }
      double v76 = v57 * 1000.0 + v75;
      if (v76 <= 2147483650.0)
      {
        double v80 = -2147483650.0;
        if (v76 > -2147483650.0) {
          double v80 = v76;
        }
        int v77 = (int)v80;
        if (v76 < -2147483650.0) {
          int v78 = 0x80000000;
        }
        else {
          int v78 = (int)v76;
        }
      }
      else
      {
        int v77 = 0x7FFFFFFF;
        int v78 = 0x7FFFFFFF;
      }
      if (v74 < v78 * v77)
      {
        BOOL v79 = 1;
LABEL_124:
        int v37 = v24 * 9.0 + v20 * v20 < dbl_22BB0EB00[v35 == 0] || v79;
        if (v20 * v20 > v24 * 9.0) {
          int v37 = 0;
        }
        goto LABEL_129;
      }
    }
    double v81 = -0.5;
    if (v40 * 1000.0 > 0.0) {
      double v81 = 0.5;
    }
    double v82 = v40 * 1000.0 + v81;
    if (v82 <= 2147483650.0)
    {
      double v85 = -2147483650.0;
      if (v82 > -2147483650.0) {
        double v85 = v40 * 1000.0 + v81;
      }
      int v83 = (int)v85;
      if (v82 < -2147483650.0) {
        int v84 = 0x80000000;
      }
      else {
        int v84 = (int)v82;
      }
    }
    else
    {
      int v83 = 0x7FFFFFFF;
      int v84 = 0x7FFFFFFF;
    }
    BOOL v79 = v74 < v84 * v83;
    goto LABEL_124;
  }
  int v37 = 1;
LABEL_129:
  BOOL v60 = v116;
  if (*(_DWORD *)(v8 + 4) != 1)
  {
    if (v37) {
      int v86 = 2;
    }
    else {
      int v86 = 3;
    }
    *(_DWORD *)uint64_t v8 = v86;
    *(_DWORD *)(v8 + 4) = 0;
  }
LABEL_134:
  switch(*(_DWORD *)v7)
  {
    case 0:
      char v87 = !v60;
      if (v20 > 2.0) {
        char v87 = 1;
      }
      if ((v87 & 1) == 0)
      {
        int v88 = 1;
        goto LABEL_160;
      }
      break;
    case 1:
      int v89 = *(_DWORD *)(a1 + 11120);
      *(_DWORD *)(a1 + 11120) = v89 + 1;
      if (v9 || v20 > 3.0)
      {
        *(void *)uint64_t v7 = 0;
      }
      else if (v89 >= 1)
      {
        *(_DWORD *)uint64_t v7 = 2;
        goto LABEL_144;
      }
      break;
    case 2:
LABEL_144:
      if (v9 || v20 > 3.0) {
        goto LABEL_157;
      }
      char v90 = v37 ^ 1;
      if (v20 <= v40) {
        char v90 = 0;
      }
      if ((v90 & 1) == 0)
      {
        *(_DWORD *)(a1 + 11116) = 3;
        goto LABEL_156;
      }
      break;
    case 3:
      if (v9 || v20 > 3.0)
      {
LABEL_157:
        *(void *)(a1 + 11116) = 0;
      }
      else
      {
        if (v20 > v57) {
          goto LABEL_159;
        }
        char v91 = v37 ^ 1;
        if (v20 <= v40) {
          char v91 = 0;
        }
        if (v91)
        {
LABEL_159:
          int v88 = 2;
LABEL_160:
          *(_DWORD *)uint64_t v7 = v88;
        }
        else
        {
LABEL_156:
          *(_DWORD *)(a1 + 11136) = *(_DWORD *)a2;
        }
      }
      break;
    default:
      uint64_t result = gn_report_assertion_failure("switch/case error NK_Static_Filter.c");
      break;
  }
  if (*(unsigned char *)(v7 + 45)) {
    char v92 = 1;
  }
  else {
    char v92 = v37;
  }
  if ((v92 & 1) != 0 || *(unsigned char *)(v7 + 46) && v20 < 3.0 && v24 < 4.0 && *(_DWORD *)(a1 + 11028) >= 3u)
  {
    LOBYTE(v119.f64[0]) = 0;
    LODWORD(v121) = 0;
    LOBYTE(v117) = 0;
    if (Core_Get_Static_Status((unsigned __int8 *)&v117))
    {
      char v94 = v117 < 0xAu ? 1 : v37;
      if ((v94 & 1) == 0)
      {
        EvLog_nd("NKSF:  Static override", 2, v93, v117, *(unsigned int *)(a1 + 11116));
        *(_DWORD *)(a1 + 11116) = 3;
        *(_DWORD *)(a1 + 11136) = *(_DWORD *)a2;
      }
    }
    uint64_t result = Core_Get_Ped_Status(&v121, &v119);
    if (result)
    {
      uint64_t v96 = v117;
      if (LODWORD(v121) == 2 && v117 > 2u)
      {
LABEL_178:
        if (*(unsigned char *)(v7 + 46))
        {
          *(_WORD *)(v7 + 45) = 1;
          *(double *)(a1 + 11144) = v20;
          *(_DWORD *)(a1 + 20) = 2;
          uint64_t result = (uint64_t)EvLog_nd("NKSF:  PED_STOPPED:  Car -> Ped override", 2, v95, v96, LOBYTE(v119.f64[0]));
        }
        *(_DWORD *)(a1 + 11116) = 3;
        *(_DWORD *)(a1 + 11136) = *(_DWORD *)a2;
      }
      else
      {
        switch(LODWORD(v121))
        {
          case 0:
            break;
          case 1:
            goto LABEL_178;
          case 2:
            if (*(unsigned char *)(v7 + 46))
            {
              *(_WORD *)(v7 + 45) = 1;
              *(double *)(a1 + 11144) = v20;
              *(_DWORD *)(a1 + 20) = 2;
              uint64_t result = (uint64_t)EvLog_nd("NKSF:  PED_WALKING:  Car -> Ped override", 2, v95, v96, LOBYTE(v119.f64[0]));
            }
            *(_DWORD *)uint64_t v7 = 2;
            break;
          case 3:
            if (*(unsigned char *)(v7 + 45)) {
              uint64_t result = (uint64_t)EvLog_nd("NKSF:  PED_NOT_PED:  Ped -> Car indication", 2, v95, v117, LOBYTE(v119.f64[0]));
            }
            break;
          default:
            uint64_t result = (uint64_t)EvCrt_Illegal_Default("NK_Static_Filter", 0x240u);
            break;
        }
      }
    }
  }
  BOOL v97 = *(unsigned char *)(a3 + 66) == 4 && v60;
  if (!v97 || *(_DWORD *)v7 != 3 && (*(_DWORD *)v7 != 2 || !*(unsigned char *)(v7 + 46)))
  {
    *(unsigned char *)(v7 + 44) = 0;
    return result;
  }
  LOWORD(v119.f64[0]) = 0;
  v123[0] = 0;
  uint64_t v122 = 0;
  memset(&v123[4], 0, 32);
  long long v124 = 0u;
  int v125 = 0;
  *(void *)&v123[8] = *(void *)(a2 + 816);
  *(void *)&v123[16] = 0x4010000000000000;
  HIDWORD(v121) = 2;
  LOBYTE(v121) = 1;
  *(void *)((char *)&v124 + 4) = 0x412E848000000000;
  uint64_t result = Vert_Meas_Update(5u, v115, 0xBu, (unsigned __int8 *)&v121, (double *)__dst, &v119, *(double *)&v123[8]);
  int v98 = *(_DWORD *)(a1 + 11248);
  if (v98 && *(unsigned char *)(v7 + 46) && *(_DWORD *)(a1 + 11028))
  {
    v98 += *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 11248) = v98;
  }
  if (!*(unsigned char *)(v8 + 36))
  {
    double v121 = 0.0;
    uint64_t v122 = 0;
    *(void *)__int16 v123 = 0;
    __asm { FMOV            V0.2D, #4.0 }
    long long v117 = _Q0;
    uint64_t v118 = 0x4010000000000000;
    if (v98 && *(_DWORD *)a2 - v98 <= 30000)
    {
      uint64_t v102 = 11240;
    }
    else
    {
      if (*(int *)(a1 + 11188) < 2 || *(_DWORD *)a2 - *(_DWORD *)(a1 + 11208) > 30000)
      {
        char v104 = 0;
        long long v103 = (double *)(a2 + 952);
LABEL_206:
        uint64_t v105 = 0;
        double v106 = *v103;
        *(unsigned char *)(v7 + 44) = v104;
        float64x2_t v107 = *(float64x2_t *)(a2 + 688);
        float64x2_t v119 = vsubq_f64(v107, (float64x2_t)__dst[37]);
        double v108 = *(double *)(a2 + 704);
        double v120 = v108 - *(double *)&__dst[38];
        do
        {
          *(double *)&v123[8 * v105] = *((double *)&v119 + v105 + 2) - *(double *)(a4 + 112 + 8 * v105);
          unint64_t v109 = v105 + 3;
          --v105;
        }
        while (v109 > 1);
        uint64_t v110 = 0;
        float64x2_t v119 = v107;
        double v120 = v108;
        do
        {
          *(double *)&v123[8 * v110] = *((double *)&v119 + v110 + 2) - *(double *)(a4 + 112 + 8 * v110);
          unint64_t v111 = v110 + 3;
          --v110;
        }
        while (v111 > 1);
        uint64_t result = NK_Body_Frame_Meas(8u, &v121, (const double *)&v117, (const double (*)[3])v115, v106 * 0.0174532925, 0xBu, (double *)__dst);
        goto LABEL_211;
      }
      uint64_t v102 = 11192;
    }
    long long v103 = (double *)(a1 + v102);
    char v104 = 1;
    goto LABEL_206;
  }
LABEL_211:
  *(void *)(a1 + 1480) = *(void *)&__dst[38];
  long long v112 = __dst[36];
  *(_OWORD *)(a1 + 1432) = __dst[35];
  *(_OWORD *)(a1 + 1448) = v112;
  *(_OWORD *)(a1 + 1464) = __dst[37];
  long long v113 = __dst[34];
  *(_OWORD *)(a1 + 1400) = __dst[33];
  *(_OWORD *)(a1 + 1416) = v113;
  return result;
}

double *Comp_GSpeed_Partial(double a1, double a2, double *result, double *a4)
{
  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    double v10 = 1.0 / sqrt(a1 * a1 + a2 * a2);
    *a4 = v10 * (*result * a1 + result[3] * a2);
    a4[1] = v10 * (result[1] * a1 + result[4] * a2);
    double v9 = v10 * (result[2] * a1);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    double v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

void AzEl_RadDeg(uint64_t a1, uint64_t a2)
{
  long double v4 = asin(*(long double *)(a2 + 8));
  *(long double *)(a2 + 24) = v4;
  *(long double *)(a2 + 32) = v4 * 57.2957795;
  *(_DWORD *)a2 = (int)(v4 * 57.2957795 + 0.5) - (v4 * 57.2957795 < -0.5);
  long double v5 = *(double *)(a1 + 8);
  long double v6 = *(double *)(a1 + 16);
  if (fabs(v5) > 0.00001 || fabs(v6) > 0.00001)
  {
    double v8 = atan2(v5, v6);
    double v9 = v8 * 57.2957795;
    if (v8 * 57.2957795 < 0.0) {
      double v9 = v8 * 57.2957795 + 360.0;
    }
    *(double *)(a1 + 24) = v8;
    *(double *)(a1 + 32) = v9;
    int v7 = (int)(v9 + 0.5);
    if (v7 == 360) {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)a1 = v7;
}

uint64_t MGen_Init(int64x2_t *a1)
{
  InitIMUGen((uint64_t)a1);
  a1[59].i64[1] = 0xFFEFFFFFFFFFFFFFLL;
  a1[60] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  double v2 = 0.0;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, a1[61].i32, 0.0);
  MotionCtxGen_Init((uint64_t)a1[63].i64);
  a1[93].i8[12] = 0;
  a1[93].i32[2] = 0;
  a1[107].i32[2] = 0;
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    uint64_t v3 = mach_continuous_time();
    if (g_TCU) {
      double v2 = *(double *)(g_TCU + 8);
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "MGen_Init", 61, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), v2, "MeasGen Init process done ");
  }
  return 1;
}

uint64_t MGen_generateMeas(const char *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v12 = *(double *)(g_TCU + 8);
    }
    else {
      double v12 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "MGen_generateMeas", 82, v11, v12, "generate measurements");
  }
  GnssGen_run(a4 + 1496, a3, (uint64_t)a2, a5, (uint64_t)a1, a6);
  MotionCtxGen_Run(a4 + 1008, a3, (uint64_t)a2, a5, (uint64_t)a1);
  uint64_t v13 = IMUGen_run((unsigned __int8 *)a4, a3, a2, a5, a1, a4 + 1008);
  DEMGen_run((double *)(a4 + 952), a3, (uint64_t)a2, a5, (uint64_t)a1);
  MAPGen_run((double *)(a4 + 960), a3, (uint64_t)a2, a5, (uint64_t)a1);
  POSGen_run(a4 + 968, a3, (uint64_t)a2, a5, (uint64_t)a1);
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    uint64_t v14 = mach_continuous_time();
    if (g_TCU) {
      double v15 = *(double *)(g_TCU + 8);
    }
    else {
      double v15 = 0.0;
    }
    LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f %s", "MGen_generateMeas", 124, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), v15, "generate measurements done");
  }
  return v13;
}

void Hal02_RouteZxPkt(unsigned __int8 *a1, size_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
LABEL_11:
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    return;
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
    goto LABEL_11;
  }
  unsigned int v4 = a1[2];
  if (v4 > 0x4C)
  {
    switch(a1[2])
    {
      case 'O':
        if ((a1[3] | 4) == 0x54) {
          goto LABEL_26;
        }
        break;
      case 'T':
      case 'V':
      case 'X':
        goto LABEL_5;
      default:
        goto LABEL_26;
    }
    return;
  }
  if (v4 != 66)
  {
    if (v4 != 68)
    {
      if (v4 == 73)
      {
        Hal29_HandleCpAgentResponse(a1, a2);
        return;
      }
      goto LABEL_26;
    }
    int v8 = a1[3];
    if ((dword_26AE023BC - 2472) < 2 || dword_26AE023BC == 1107)
    {
      if (v8 != 77 && v8 != 70) {
        goto LABEL_43;
      }
    }
    else
    {
      if (dword_26AE023C0 != 4 || dword_26AE023BC != 3431 || (void)xmmword_26AE023AC != 0x100000002)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnssHw\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "HAL", 87, "Hal02_CheckDebugConfigMsg", 515);
          LbsOsaTrace_WriteLog(0xDu, __str, v11, 2, 1);
        }
        goto LABEL_43;
      }
      unsigned int v9 = v8 - 68;
      if (v9 > 8 || ((1 << v9) & 0x121) == 0)
      {
LABEL_43:
        if (dword_26AE023C0 == 4
          && dword_26AE023BC == 3431
          && (void)xmmword_26AE023AC == 0x100000002
          && (unsigned int v12 = a1[3] - 67, v12 <= 0x17)
          && ((1 << v12) & 0x812021) != 0)
        {
          size_t v13 = (unsigned __int16)(a2 - 2);
        }
        else
        {
          size_t v13 = a2;
        }
        GnssDbgMgr_WriteLog(v13, a1);
        return;
      }
    }
LABEL_5:
    long double v5 = (void (*)(size_t, unsigned __int8 *))g_CbList;
    if (!g_CbList) {
      return;
    }
LABEL_27:
    v5(a2, a1);
    return;
  }
  int v7 = a1[3];
  if (v7 == 83)
  {
LABEL_26:
    long double v5 = (void (*)(size_t, unsigned __int8 *))qword_26AE6D250;
    if (!qword_26AE6D250) {
      return;
    }
    goto LABEL_27;
  }
  if (v7 == 66) {
    goto LABEL_5;
  }

  Hal02_HandleResp(a1, a2);
}

size_t Hal02_07ChipRead(void)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: transPrep success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 68, "Hal02_07ChipRead");
    LbsOsaTrace_WriteLog(0xDu, __str, v1, 5, 1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 48))(gp_Comm))
  {
    do
    {
      unsigned int Data = Hal_CommsItfReadData((unsigned __int8 *)g_ReadBuffer, 0x1800u);
      if (Data)
      {
        unsigned int v3 = Data;
        if ((Data & 0x80000000) != 0) {
          goto LABEL_14;
        }
        if (Data > 0x1800)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v4 = mach_continuous_time();
            unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NumOfBytesRead,%u,Maxbufsize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal02_07ChipRead", 772, v3, 6144);
            LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
          }
          memset_s(g_ReadBuffer, 0x1800uLL, 0, 0x1800uLL);
        }
        else
        {
          Hal02_06ParsezxPacket(g_ReadBuffer, (unsigned __int16)Data);
        }
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)gp_Comm + 48))(gp_Comm) & 1) != 0);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "Hal02_07ChipRead", 1281);
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
  }
LABEL_14:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RdrThrd exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal02_07ChipRead");
    return LbsOsaTrace_WriteLog(0xDu, __str, v10, 4, 1);
  }
  return result;
}

char *Hal02_06ParsezxPacket(char *result, size_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!result)
  {
    size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__n_4, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    return (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v5, 0, 1);
  }
  if (!a2)
  {
    size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__n_4, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v5 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
    return (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v5, 0, 1);
  }
  unsigned int v3 = result;
  if (_MergedGlobals_4)
  {
    memcpy_s("Hal02_06ParsezxPacket", 355, &g_ProccessBuff, 0x2000u, &unk_26AE77098, (unsigned __int16)_MergedGlobals_4);
    size_t result = (char *)memcpy_s("Hal02_06ParsezxPacket", 356, (char *)&g_ProccessBuff + (unsigned __int16)_MergedGlobals_4, 0x2000 - (unsigned __int16)_MergedGlobals_4, v3, a2);
    __int16 v4 = _MergedGlobals_4;
    unsigned int v3 = (char *)&g_ProccessBuff;
  }
  else
  {
    __int16 v4 = 0;
  }
  __uint64_t n = v4 + a2;
  _MergedGlobals_4 = 0;
  unsigned __int16 __n_2 = 0;
  if (!(v4 + (_WORD)a2)) {
    return result;
  }
  uint64_t v6 = "Hal02_06ParsezxPacket";
  unsigned __int16 v7 = (double *)&g_Crc32_RemTable[230];
  int v8 = (char *)&xmmword_26AE76FF8 + 8;
  while (1)
  {
    uint64_t v9 = (unsigned __int8 *)&v3[__n_2];
    if (__n <= 7u)
    {
      size_t v37 = __n;
      int v38 = 375;
      uint64_t v39 = &v3[__n_2];
      goto LABEL_57;
    }
    if (*v9 != 122 || v9[1] != 120)
    {
      size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
      if (result)
      {
        bzero(__n_4, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: 0x%02x,0x%02x\n", (unint64_t)(v7[61] * (double)v15), "HAL", 68, v6, *v9, v9[1]);
        size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v16, 5, 1);
      }
      ++__n_2;
      --__n;
      ++dword_26AE77094;
      HIDWORD(v17) = 652835029 * dword_26AE77094;
      LODWORD(v17) = 652835029 * dword_26AE77094;
      if ((v17 >> 3) <= 0x418937)
      {
        size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
        if (result)
        {
          bzero(__n_4, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx Err,%u\n", (unint64_t)(v7[61] * (double)v18), "HAL", 87, v6, 770, dword_26AE77094);
          size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v19, 2, 1);
        }
      }
      goto LABEL_29;
    }
    int v10 = v9[5];
    int v11 = v9[6];
    if (v9[7] == (v9[3] + v9[2] + v9[4] + v10 + v11)) {
      break;
    }
    size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
    if (result)
    {
      bzero(__n_4, 0x410uLL);
      unint64_t v20 = (unint64_t)(v7[61] * (double)mach_continuous_time());
      ++*((_DWORD *)v8 + 36);
      unsigned __int16 v14 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx rcvd,0x%02x,computed,0x%02x,Pktloss,%u\n", v20, "HAL");
      goto LABEL_27;
    }
LABEL_28:
    ++__n_2;
    --__n;
LABEL_29:
    if (!__n) {
      return result;
    }
  }
  unsigned int v12 = v10 | (v11 << 8);
  if (v12 >= 0x7F8)
  {
    size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
    if (result)
    {
      bzero(__n_4, 0x410uLL);
      unint64_t v13 = (unint64_t)(v7[61] * (double)mach_continuous_time());
      ++*((_DWORD *)v8 + 36);
      unsigned __int16 v14 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx len,%u,Pktloss,%u\n", v13);
LABEL_27:
      size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v14, 2, 1);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  double v21 = v7;
  double v22 = v6;
  unsigned __int16 v23 = v12 + 9;
  int v24 = 4 - ((v12 + 9) & 3);
  if (((v12 + 9) & 3) != 0) {
    int v25 = 4 - ((v12 + 9) & 3);
  }
  else {
    int v25 = 0;
  }
  if (v25 + v23 <= __n)
  {
    if (v3[v12 + 8 + (unint64_t)__n_2] == 10)
    {
      if (dword_26AE77094)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
        {
          bzero(__n_4, 0x410uLL);
          uint64_t v26 = mach_continuous_time();
          unsigned __int16 v27 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: zx pkt recd ,prev invalid data,%u\n", (unint64_t)(v21[61] * (double)v26), "HAL", 68, v22, dword_26AE77094);
          LbsOsaTrace_WriteLog(0xDu, __n_4, v27, 5, 1);
        }
        dword_26AE77094 = 0;
      }
      if (g_RouteZxData)
      {
        size_t result = (char *)g_RouteZxData((unsigned __int8 *)&v3[__n_2], v23);
      }
      else
      {
        size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
        if (result)
        {
          bzero(__n_4, 0x410uLL);
          uint64_t v32 = mach_continuous_time();
          unsigned __int16 v33 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: RouteZxData is NULL\n", (unint64_t)(v21[61] * (double)v32), "HAL", 87, v22);
          size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v33, 2, 1);
        }
      }
      if (((v12 + 9) & 3) != 0)
      {
        int v34 = &v3[v23];
        while (v34[__n_2] != 122)
        {
          ++v34;
          if (!--v24)
          {
            uint64_t v6 = v22;
            unsigned __int16 v7 = v21;
            goto LABEL_55;
          }
        }
        size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
        LOBYTE(v25) = 0;
        uint64_t v6 = v22;
        unsigned __int16 v7 = v21;
        if (result)
        {
          bzero(__n_4, 0x410uLL);
          uint64_t v35 = mach_continuous_time();
          unsigned __int16 v36 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: Msg not 4byte aligned zx%c%c%c\n", (unint64_t)(v21[61] * (double)v35), "HAL", 87, v6, v3[__n_2], v3[__n_2 + 1], v3[__n_2 + 2]);
          size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v36, 2, 1);
          LOBYTE(v25) = 0;
        }
      }
      else
      {
        LOBYTE(v25) = 0;
        uint64_t v6 = v22;
        unsigned __int16 v7 = v21;
      }
LABEL_55:
      __uint64_t n = __n - (v12 + v25) - 9;
      __n_2 += v23 + v25;
      int v8 = (unsigned char *)(&xmmword_26AE76FF8 + 8);
    }
    else
    {
      size_t result = (char *)LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
      uint64_t v6 = v22;
      unsigned __int16 v7 = v21;
      int v8 = (char *)&xmmword_26AE76FF8 + 8;
      if (result)
      {
        bzero(__n_4, 0x410uLL);
        double v28 = v21[61] * (double)mach_continuous_time();
        int v29 = v3[__n_2 + 2];
        int v30 = v3[__n_2 + 3];
        unsigned __int16 v31 = snprintf(__n_4, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,Pktloss,%u\n", (unint64_t)v28, "HAL", 87, v6, 782, v29, v30, ++dword_26AE77090);
        size_t result = (char *)LbsOsaTrace_WriteLog(0xDu, __n_4, v31, 2, 1);
      }
      ++__n_2;
      --__n;
    }
    goto LABEL_29;
  }
  uint64_t v39 = &v3[__n_2];
  size_t v37 = __n;
  int v38 = 431;
LABEL_57:
  size_t result = (char *)memcpy_s("Hal02_06ParsezxPacket", v38, &unk_26AE77098, 0x800u, v39, v37);
  _MergedGlobals_4 = __n;
  return result;
}

void Hal02_AsyncReadCb(char *a1, size_t a2)
{
  int v2 = a2;
  unsigned int v3 = (unsigned __int8 *)a1;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 > 0x1800)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_RxBufferSize %u,processing %u bytes\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal02_AsyncReadCb", 772, v2, 6144);
      LbsOsaTrace_WriteLog(0xDu, __str, v5, 2, 1);
    }
    a1 = (char *)v3;
    a2 = 6144;
  }
  else
  {
    a2 = (unsigned __int16)a2;
  }
  Hal02_06ParsezxPacket(a1, a2);
  if (v3) {
    free(v3);
  }
}

uint64_t Hal02_DeInitParser(void)
{
  uint64_t result = memset_s(&unk_26AE77098, 0x800uLL, 0, 0x800uLL);
  _MergedGlobals_4 = 0;
  g_RouteZxunsigned int Data = (uint64_t (*)(unsigned __int8 *, unsigned __int16))Hal02_RouteZxPkt;
  return result;
}

void Hal02_SetProdRouteZxData(void)
{
  g_RouteZxunsigned int Data = (uint64_t (*)(unsigned __int8 *, unsigned __int16))Hal02_RouteZxPktProd;
}

void Hal02_RouteZxPktProd(unsigned __int8 *a1, size_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx data\n");
    goto LABEL_7;
  }
  if (a2 <= 7)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx len\n");
LABEL_7:
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    return;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Data,MC,%c,MID,%c,MIDX,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 68, "Hal02_RouteZxPktProd", a1[2], a1[3], a1[4]);
    LbsOsaTrace_WriteLog(0xDu, __str, v6, 5, 1);
  }
  int v7 = a1[2];
  if (v7 == 73)
  {
    Hal29_HandleCpAgentResponse(a1, a2);
  }
  else if (v7 == 66)
  {
    Hal02_HandleResp(a1, a2);
  }
  else if (g_CbList)
  {
    g_CbList(a2, a1);
  }
}

void Hal02_HandleResp(unsigned __int8 *a1, size_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((Hal11_HandleEvent(a1[3], a1, a2) & 1) == 0)
  {
    switch(g_HalState)
    {
      case 0:
      case 1:
      case 13:
      case 14:
      case 15:
        return;
      case 2:
      case 3:
        Hal17_HandleReset(a1, a2);
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        Hal19_HandlePatchResp(a1, a2);
        break;
      case 9:
      case 10:
        Hal15_HandleRevResp(a1, a2);
        break;
      case 11:
        Hal18_HandleBaudResp(a1, a2);
        break;
      case 12:
        Hal19_HandleBufferResp((uint64_t)a1, a2);
        break;
      case 16:
        Hal29_HandleCpAgentResponse(a1, a2);
        break;
      case 17:
        Hal26_HandleConfigureUartLpRes(a1, a2);
        break;
      case 18:
        Hal32_HandlPowerReportRsp(a1, a2);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v4 = mach_continuous_time();
          unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx State,%u,MC,%c,MID,%c,MIDE,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 87, "Hal02_HandleResp", 262, g_HalState, a1[2], a1[3], a1[4]);
          LbsOsaTrace_WriteLog(0xDu, __str, v5, 2, 1);
        }
        break;
    }
  }
}

uint64_t GN_AGLON_Set_Eph_El(char *a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Eph_El");
  if (result)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 5u) {
      EvLog_v("GN_AGLON_Set_Eph_El: %2d %2d %2d %4d %d %2d  %2d %d %d %d  %9d %9d %9d  %8d %8d %8d  %3d %3d %3d  %3d %8d %5d  %d", *a1, a1[1], a1[2], *((unsigned __int16 *)a1 + 2), a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 6), *((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8), a1[36], a1[37],
    }
        a1[38],
        a1[39],
        *((_DWORD *)a1 + 10),
        *((__int16 *)a1 + 22),
        a1[46]);
    char v3 = *a1;
    if ((*a1 - 25) <= 0xE7u)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloN = %d <%d or >%d, Out of range!");
      return 0;
    }
    unsigned int v4 = a1[2];
    if (v4 - 96 <= 0xFFFFFFA0)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloTb = %d <1 or >95, Out of range!");
      return 0;
    }
    unsigned int v5 = *((unsigned __int16 *)a1 + 2);
    if (v5 >= 0x5B6)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloNT = %d >%d, Out of range!");
      return 0;
    }
    unsigned int v6 = a1[6];
    if (v6 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloLuint64_t n = %d >1, Out of range!");
      return 0;
    }
    unsigned int v7 = a1[7];
    if (v7 >= 0x10)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloFT = %d >15, Out of range!");
      return 0;
    }
    unsigned int v8 = a1[8];
    if (v8 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloEuint64_t n = %d >31, Out of range!");
      return 0;
    }
    unsigned int v9 = a1[9];
    if (v9 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloP1 = %d <0 or >3, Out of range!");
      return 0;
    }
    unsigned int v10 = a1[11];
    if (v10 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloM = %d <0 or >3, Out of range!");
      return 0;
    }
    int v11 = *((_DWORD *)a1 + 3);
    if ((v11 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloX = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v12 = *((_DWORD *)a1 + 4);
    if ((v12 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloY = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v13 = *((_DWORD *)a1 + 5);
    if ((v13 - 0x4000000) >> 27 != 31)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZ = %d <-2^26 or >=2^26, Out of range!");
      return 0;
    }
    int v14 = *((_DWORD *)a1 + 6);
    if ((v14 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v15 = *((_DWORD *)a1 + 7);
    if ((v15 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    int v16 = *((_DWORD *)a1 + 8);
    if ((v16 - 0x800000) >> 24 != 255)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdot = %d <-2^23 or >=2^23, Out of range!");
      return 0;
    }
    char v17 = a1[36];
    if ((v17 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloXdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v18 = a1[37];
    if ((v18 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloYdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v19 = a1[38];
    if ((v19 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloZdotdot = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    char v20 = a1[39];
    if ((v20 - 16) <= 0xDFu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^4 or >=2^4, Out of range!");
      return 0;
    }
    int v21 = *((_DWORD *)a1 + 10);
    if ((v21 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloDeltaTau = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    __int16 v22 = *((_WORD *)a1 + 22);
    if ((unsigned __int16)((unsigned __int16)(v22 - 1024) >> 11) <= 0x1Eu)
    {
      EvCrt_v("GN_AGLON_Set_Eph_El: FAILED: gloGamma = %d <-2^10 or >=2^10, Out of range!");
      return 0;
    }
    int v23 = a1[1];
    if ((a1[1] - 7) < 0xF2u) {
      int v23 = 2139062143;
    }
    int v27 = v23;
    if (a1[46]) {
      int v24 = 5;
    }
    else {
      int v24 = 3;
    }
    int v25 = 0;
    int v26 = v24;
    char v28 = v3;
    char v29 = v4;
    __int16 v31 = v5;
    BOOL v34 = v6 != 0;
    char v36 = v7;
    char v37 = v8;
    char v38 = v9;
    char v39 = a1[10];
    char v40 = v10;
    int v41 = v11;
    int v42 = v12;
    int v43 = v13;
    int v44 = v14;
    int v45 = v15;
    int v46 = v16;
    char v47 = v17;
    char v48 = v18;
    char v49 = v19;
    char v50 = v20;
    int v51 = v21;
    __int16 v52 = v22;
    char v33 = 0;
    char v35 = 0;
    __int16 v32 = v6 != 0;
    __int16 v30 = 1500 * (v4 & 3) + 10000 * (v4 >> 2);
    memset(v57, 0, 62);
    GLON_EphInt2Bin((uint64_t)&v25, (uint64_t)v57);
    uint64_t v53 = 0;
    *(_OWORD *)&void v56[4] = 0u;
    BYTE4(v53) = BYTE8(v57[0]);
    long long v54 = *(_OWORD *)((char *)v57 + 12);
    long long v55 = *(_OWORD *)((char *)&v57[1] + 12);
    *(_OWORD *)double v56 = *(_OWORD *)((char *)&v57[2] + 12);
    v56[16] = v26 == 5;
    return GN_AGLON_Set_Eph(*a1, (uint64_t)&v53);
  }
  return result;
}

const char *TCU_UpdateTime(const char *result, unsigned int a2, int a3, char a4, int a5, unsigned int a6, double a7)
{
  int v14 = (char *)result;
  double v15 = (double)a6;
  unsigned int v16 = *((_DWORD *)result + 19);
  double v17 = (double)a6 + (double)v16 * 4294967300.0 - *((double *)result + 4);
  if (v17 < 0.0 && v17 + 4294967300.0 < 1500.0)
  {
    *((_DWORD *)result + 19) = v16 + 1;
    __int16 v18 = g_FPE_LogSeverity;
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v20 = *(double *)(g_TCU + 8);
      }
      else {
        double v20 = 0.0;
      }
      uint64_t result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f TTick wraparound", "TCU_WrapDetectAndFix", 96, v19, v20);
      __int16 v18 = g_FPE_LogSeverity;
    }
    if ((v18 & 0x200) != 0) {
      uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKWt", "$PFPEX");
    }
  }
  LODWORD(v7) = *((_DWORD *)v14 + 19);
  if (a3 == 11)
  {
    double v21 = a7 - *((double *)v14 + 1);
    if (v21 < 0.0)
    {
      __int16 v22 = g_FPE_LogSeverity;
      if (v21 + 604800.0 >= 1.5)
      {
        if ((g_FPE_LogSeverity & 2) != 0)
        {
          unint64_t v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v26 = *(double *)(g_TCU + 8);
          }
          else {
            double v26 = 0.0;
          }
          uint64_t result = LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f CLK_CHK: setting time in the past TOW = %f, prevTOW = %f", "TCU_CheckInputs", 438, v25, v26, a7, *((double *)v14 + 1));
        }
      }
      else
      {
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v24 = *(double *)(g_TCU + 8);
          }
          else {
            double v24 = 0.0;
          }
          uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLK_CHK: TOW wraparound: %f --> %f", "TCU_CheckInputs", 433, v23, v24, *((double *)v14 + 1), a7);
          __int16 v22 = g_FPE_LogSeverity;
        }
        if ((v22 & 0x200) != 0) {
          uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKW2,%d,%d", "$PFPEX", a6, a2);
        }
      }
    }
  }
  double v27 = *((double *)v14 + 4);
  if (v15 - v27 >= 0.0)
  {
    if (v27 > 0.0 && v15 - v27 > 1500.0)
    {
      __int16 v30 = g_FPE_LogSeverity;
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v31 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v32 = *(double *)(g_TCU + 8);
        }
        else {
          double v32 = 0.0;
        }
        uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLK_CHK: TTICK jumped by more than 1500ms: %0.0f --> %d", "TCU_CheckInputs", 451, v31, v32, *((double *)v14 + 4), a6);
        __int16 v30 = g_FPE_LogSeverity;
      }
      if ((v30 & 0x200) != 0) {
        uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKW4,%.1f,%.3f", "$PFPEX", v15 - *((double *)v14 + 4), a7);
      }
    }
  }
  else if ((g_FPE_LogSeverity & 4) != 0)
  {
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v29 = *(double *)(g_TCU + 8);
    }
    else {
      double v29 = 0.0;
    }
    uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLK_CHK: TTICK in the past: %d prevTTICK = %f (TOW = %0.0f)", "TCU_CheckInputs", 447, v28, v29, a6, *((double *)v14 + 4), a7);
  }
  double v33 = (double)a2 - (double)*(unsigned int *)v14;
  if (v33 >= 0.0)
  {
    if (*(_DWORD *)v14 && v33 > 1500.0)
    {
      double v34 = v33 * 0.001;
      __int16 v35 = g_FPE_LogSeverity;
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        unint64_t v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v37 = *(double *)(g_TCU + 8);
        }
        else {
          double v37 = 0.0;
        }
        uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLK_CHK: OS time jumped by more than 1500ms: %d --> %d (%0.0f) (TOW = %0.0f)", "TCU_CheckInputs", 465, v36, v37, *(_DWORD *)v14, a2, v34, a7);
        __int16 v35 = g_FPE_LogSeverity;
      }
      if ((v35 & 0x200) != 0) {
        uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKW6,%.1f,%.3f", "$PFPEX", v33, a7);
      }
      if (v34 > 86400.0 && (g_FPE_LogSeverity & 2) != 0)
      {
        mach_continuous_time();
        uint64_t result = LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f CLK_CHK: OS time jumped by more 1day: %0.0f (TOW = %0.0f)");
      }
    }
  }
  else if ((g_FPE_LogSeverity & 2) != 0)
  {
    mach_continuous_time();
    uint64_t result = LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f CLK_CHK: OS time in the past: %d prevOS = %d (TOW = %0.0f)");
  }
  double v38 = v15 + (double)v7 * 4294967300.0;
  if (a3 == 11 && *((double *)v14 + 1) > a7) {
    ++*((_DWORD *)v14 + 18);
  }
  *((double *)v14 + 5) = v38 * 0.001;
  double v39 = *((double *)v14 + 7);
  double v40 = (double)(int)(a6 - a2) - v39;
  unsigned int v41 = *((_DWORD *)v14 + 22);
  double v42 = v40;
  if (v41) {
    double v42 = *((double *)v14 + 12);
  }
  if (v42 >= v40) {
    double v40 = v42;
  }
  *((double *)v14 + 12) = v40;
  if (v41 < 0x32)
  {
    unsigned int v47 = v41 + 1;
  }
  else
  {
    double v43 = *((double *)v14 + 12);
    if (v43 >= 2.0) {
      double v43 = 2.0;
    }
    if (v43 > -2.0) {
      double v44 = v43;
    }
    else {
      double v44 = -2.0;
    }
    *((double *)v14 + 7) = v39 + v44;
    if (v44 != 0.0 && (g_FPE_LogSeverity & 8) != 0)
    {
      unint64_t v45 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v46 = *(double *)(g_TCU + 8);
      }
      else {
        double v46 = 0.0;
      }
      uint64_t result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f OS to TTICK fixed by %ff ms", "TCU_SetOsToTtick", 315, v45, v46, v44);
    }
    unsigned int v47 = 0;
  }
  *((_DWORD *)v14 + 22) = v47;
  if (v39 != *((double *)v14 + 7))
  {
    __int16 v48 = g_FPE_LogSeverity;
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v49 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v50 = *(double *)(g_TCU + 8);
      }
      else {
        double v50 = 0.0;
      }
      uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLK_CHK', 'OS2TTICK_ms changed by %f ms", "TCU_SetOsToTtick", 326, v49, v50, *((double *)v14 + 7) - v39);
      __int16 v48 = g_FPE_LogSeverity;
    }
    if ((v48 & 0x200) != 0) {
      uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKW3,%.1f,%.3f", "$PFPEX", *((double *)v14 + 7) - v39, *((double *)v14 + 1));
    }
  }
  int v51 = *((_DWORD *)v14 + 18);
  char v52 = v14[24];
  if (a3 == 11 || !v14[24])
  {
    *((_WORD *)v14 + 13) = a5;
    *((double *)v14 + 6) = (double)(604800 * v51) + a7 - (double)a2 * 0.001;
    *((double *)v14 + 8) = -(a7 - v38 * 0.001);
  }
  else
  {
    char v52 = 1;
  }
  *(_DWORD *)int v14 = a2;
  *((double *)v14 + 4) = v38;
  *((double *)v14 + 1) = a7;
  *((_DWORD *)v14 + 5) = a3;
  v14[16] = a4;
  v14[24] = v52 | (a3 == 11);
  if ((g_FPE_LogSeverity & 8) != 0)
  {
    unint64_t v53 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v54 = *(double *)(g_TCU + 8);
    }
    else {
      double v54 = 0.0;
    }
    return LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f $LCMSG: TCU = {gpsWeekNo:%d, gpsTOW:%f, OsTime:%d, gpsTOW_stat:%d, OsToGps:%f, gpsWeekFromInit:%u, ttickMs:%f, OsTimeMs:%u, OsToTtickMs:%f}", "TCU_UpdateTime", 189, v53, v54, a5, a7, a2, a3, *((double *)v14 + 6), *((_DWORD *)v14 + 18), v38, a2, *((double *)v14 + 7));
  }
  return result;
}

const char *TCU_ConvertOStimeToTTICKtime(const char *result, unsigned int a2, double *a3)
{
  double v4 = (*((double *)result + 7) + (double)a2) * 0.001;
  *a3 = v4;
  double v5 = v4 - *((double *)result + 5);
  if (v5 <= 2147483.65)
  {
    if (v5 >= -2147483.65) {
      return result;
    }
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v10 = *(double *)(g_TCU + 8);
      }
      else {
        double v10 = 0.0;
      }
      uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f CLOCK:OS time conversion fix2", "TCU_ConvertOStimeToTTICKtime", 220, v9, v10);
      double v4 = *a3;
    }
    double v11 = 4294967.3;
  }
  else
  {
    if ((g_FPE_LogSeverity & 8) != 0)
    {
      unsigned int v6 = result;
      unint64_t v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      if (g_TCU) {
        double v8 = *(double *)(g_TCU + 8);
      }
      else {
        double v8 = 0.0;
      }
      uint64_t result = LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f CLOCK:OS time wraparround fix1: %0.3f --> %0.3f ", "TCU_ConvertOStimeToTTICKtime", 215, v7, v8, *((double *)v6 + 7) * 0.001, (*((double *)v6 + 7) + -4294967300.0) * 0.001);
      double v4 = *a3;
    }
    double v11 = -4294967.3;
  }
  *a3 = v4 + v11;
  return result;
}

const char *TCU_GetOutTime(const char *result, void *a2)
{
  char v3 = result;
  *a2 = *((void *)result + 5);
  double v4 = *((double *)result + 10);
  if (v4 <= 0.0) {
    goto LABEL_21;
  }
  double v5 = *((double *)result + 5);
  double v6 = v5 - v4;
  if (v5 - v4 <= 1.5) {
    goto LABEL_21;
  }
  double v7 = *((double *)result + 8);
  double v8 = v5 - v7;
  __int16 v9 = *((_WORD *)result + 13);
  double v10 = 604800.0;
  if (v8 >= 604800.0)
  {
    __int16 v11 = 1;
    double v12 = -604800.0;
    goto LABEL_7;
  }
  if (v8 < 0.0)
  {
    __int16 v11 = -1;
    double v12 = 604800.0;
LABEL_7:
    double v8 = v8 + v12;
    __int16 v13 = v11 + v9;
    goto LABEL_9;
  }
  __int16 v13 = *((_WORD *)result + 13);
LABEL_9:
  double v14 = v4 - v7;
  if (v4 - v7 >= 604800.0)
  {
    __int16 v15 = 1;
    double v10 = -604800.0;
    goto LABEL_13;
  }
  if (v14 < 0.0)
  {
    __int16 v15 = -1;
LABEL_13:
    double v14 = v14 + v10;
    v9 += v15;
  }
  __int16 v16 = g_FPE_LogSeverity;
  if ((g_FPE_LogSeverity & 4) != 0)
  {
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU) {
      double v18 = *(double *)(g_TCU + 8);
    }
    else {
      double v18 = 0.0;
    }
    uint64_t result = LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f %0.1f seconds passed from last output. TOW: %0.3f --> %0.3f, WeekNo: %d --> %d", "TCU_GetOutTime", 408, v17, v18, v6, v14, v8, v9, v13);
    __int16 v16 = g_FPE_LogSeverity;
  }
  if ((v16 & 0x200) != 0) {
    uint64_t result = LC_LOG_NMEA_GENERIC("%s,CLKW1,%.1f,%.1f,%.1f", "$PFPEX", v6, v14, v8);
  }
LABEL_21:
  *((void *)v3 + 10) = *a2;
  return result;
}

double BDS_AlmInt2Real(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 11) << 12;
  uint64_t v2 = *(void *)(a1 + 12);
  v3.i64[0] = v2;
  v3.i64[1] = HIDWORD(v2);
  float64x2_t v4 = vmulq_f64(vcvtq_f64_u64(v3), (float64x2_t)xmmword_22BB0EB30);
  uint64_t v5 = *(void *)(a1 + 20);
  v3.i64[0] = (int)v5;
  v3.i64[1] = SHIDWORD(v5);
  *(float64x2_t *)(a2 + 16) = v4;
  *(float64x2_t *)(a2 + 32) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)vdupq_n_s64(0x3E9921FB54442D28uLL));
  v4.f64[0] = *(float64_t *)(a1 + 28);
  v3.i64[0] = SLODWORD(v4.f64[0]);
  v3.i64[1] = SHIDWORD(v4.f64[0]);
  *(float64x2_t *)(a2 + 48) = vmulq_f64(vcvtq_f64_s64((int64x2_t)v3), (float64x2_t)xmmword_22BB0EB40);
  v4.f64[0] = (double)*(__int16 *)(a1 + 36) * 0.00000599211245;
  double v6 = (double)*(__int16 *)(a1 + 38) * 0.000000953674316;
  *(_WORD *)(a2 + 8) = *(_WORD *)(a1 + 8);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 42);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 10);
  *(float64_t *)(a2 + 64) = v4.f64[0];
  *(double *)(a2 + 72) = v6;
  double result = (double)*(__int16 *)(a1 + 40) * 3.63797881e-12;
  *(double *)(a2 + 80) = result;
  return result;
}

void SuplState::SuplState(SuplState *this)
{
  *(void *)this = &unk_26DF18BB8;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 255;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  uint64_t Instance = SuplVersionNegotiation::GetInstance(this);
  int v3 = atomic_load((unsigned __int8 *)(Instance + 1));
  BOOL v4 = v3 == 255;
  uint64_t v5 = 1;
  if (v4) {
    uint64_t v5 = 2;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(Instance + v5));
  *((_WORD *)this + 16) = -1;
  *((unsigned char *)this + 26) = v6;
  *(_WORD *)((char *)this + 27) = 0;
  *((void *)this + 5) = 0;
  ASN1T_SessionID::ASN1T_SessionID((SuplState *)((char *)this + 48));
}

void sub_22B942C24(_Unwind_Exception *a1)
{
  ASN1T_UlpMessage::~ASN1T_UlpMessage(v1);
  _Unwind_Resume(a1);
}

void SuplState::~SuplState(SuplState *this)
{
  *(void *)this = &unk_26DF18BB8;
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 31);
  if (v5)
  {
    *((void *)this + 32) = v5;
    operator delete(v5);
  }
  ASN1T_SETId::U::~U((SuplState *)((char *)this + 72));
  ASN1T_UlpMessage::~ASN1T_UlpMessage((SuplState *)((char *)this + 32));
}

uint64_t SuplState::UpdateState(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 3, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Current State,%u -> New State,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "SPL", 77, "UpdateState", *(unsigned __int8 *)(a1 + 16), a2);
      uint64_t result = LbsOsaTrace_WriteLog(0x12u, __str, v8, 3, 1);
    }
    if (*(unsigned __int8 *)(a1 + 16) != a2)
    {
      switch(a2)
      {
        case 0:
          __int16 v9 = (SuplState *)operator new(0x168uLL, MEMORY[0x263F8C180]);
          if (v9)
          {
            double v10 = v9;
            SuplState::SuplState(v9);
            __int16 v11 = (uint64_t (**)(void *))&unk_26DF18D70;
            *(void *)double v10 = &unk_26DF18D70;
            uint64_t v12 = *(void *)(a3 + 424);
            if (v12)
            {
              (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              __int16 v11 = *(uint64_t (***)(void *))v10;
            }
            uint64_t v13 = *(void *)(a3 + 416);
            *(void *)(a3 + 416) = v10;
            *(void *)(a3 + 424) = v13;
            *((void *)v10 + 1) = a3;
            uint64_t result = ((uint64_t (**)(SuplState *))v11)[3](v10);
          }
          else
          {
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
            if (result) {
              goto LABEL_46;
            }
          }
          break;
        case 2:
          __int16 v16 = (SuplResponseRecd *)operator new(0x178uLL, MEMORY[0x263F8C180]);
          if (v16)
          {
            unint64_t v17 = v16;
            SuplResponseRecd::SuplResponseRecd(v16);
            LcsTimer::Stop((LcsTimer *)(a3 + 392));
            uint64_t v18 = *(void *)(a3 + 424);
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
            goto LABEL_34;
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
          if (result) {
            goto LABEL_46;
          }
          break;
        case 4:
          unint64_t v19 = (SuplState *)operator new(0x170uLL, MEMORY[0x263F8C180]);
          if (v19)
          {
            unint64_t v17 = v19;
            SuplState::SuplState(v19);
            *(void *)unint64_t v17 = &unk_26DF1AF60;
            *((unsigned char *)v17 + 16) = 4;
            *((unsigned char *)v17 + 360) = 0;
            SuplSession::UpdateTimer((unsigned char *)a3, 4);
            uint64_t v20 = *(void *)(a3 + 424);
            if (v20) {
              (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
            }
            goto LABEL_34;
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
          if (result) {
            goto LABEL_46;
          }
          break;
        case 5:
          double v21 = (SuplPosRecd *)operator new(0x170uLL, MEMORY[0x263F8C180]);
          if (v21)
          {
            unint64_t v17 = v21;
            SuplPosRecd::SuplPosRecd(v21);
            LcsTimer::Stop((LcsTimer *)(a3 + 392));
            uint64_t v22 = *(void *)(a3 + 424);
            if (v22) {
              (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            }
            goto LABEL_34;
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
          if (result) {
            goto LABEL_46;
          }
          break;
        case 6:
          unint64_t v23 = (SuplState *)operator new(0x170uLL, MEMORY[0x263F8C180]);
          if (v23)
          {
            unint64_t v17 = v23;
            SuplState::SuplState(v23);
            *(void *)unint64_t v17 = &unk_26DF1AF60;
            *((unsigned char *)v17 + 16) = 4;
            *((unsigned char *)v17 + 360) = 0;
            SuplSession::UpdateTimer((unsigned char *)a3, 6);
            uint64_t v24 = *(void *)(a3 + 424);
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
            goto LABEL_34;
          }
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
          if (result) {
            goto LABEL_46;
          }
          break;
        case 7:
          unint64_t v25 = (SuplEndRecd *)operator new(0x190uLL, MEMORY[0x263F8C180]);
          if (v25)
          {
            unint64_t v17 = v25;
            SuplEndRecd::SuplEndRecd(v25);
            LcsTimer::Stop((LcsTimer *)(a3 + 392));
            uint64_t v26 = *(void *)(a3 + 424);
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
LABEL_34:
            uint64_t v27 = *(void *)(a3 + 416);
            *(void *)(a3 + 416) = v17;
            *(void *)(a3 + 424) = v27;
            *((void *)v17 + 1) = a3;
            uint64_t result = (*(uint64_t (**)(SuplResponseRecd *))(*(void *)v17 + 24))(v17);
          }
          else
          {
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
            if (result)
            {
LABEL_46:
              bzero(__str, 0x410uLL);
              uint64_t v28 = mach_continuous_time();
              unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "SPL", 69, "UpdateState", 1537);
              uint64_t result = LbsOsaTrace_WriteLog(0x12u, __str, v29, 0, 1);
            }
          }
          break;
        default:
          uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
          if (result) {
            goto LABEL_11;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if (result)
    {
LABEL_11:
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "UpdateState", 515);
      return LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
    }
  }
  return result;
}

void sub_22B943648(_Unwind_Exception *a1)
{
  MEMORY[0x230F4E5C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t SuplState::ProcessSuplMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v9[0] = &__p;
  v9[1] = 0;
  char v10 = 0;
  v5[0] = v9;
  v5[1] = a1 + 24;
  int v3 = SuplMessage::Decode((SuplMessage *)v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_22B94374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SuplState::SendSuplMessage(SuplProvider *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1))
  {
    uint64_t Instance = (LcsSuplGlueLayer *)SuplProvider::GetInstance(a1);
    int v3 = *(_DWORD *)(*((void *)a1 + 1) + 376);
    return SuplProvider::SendSuplPdu(Instance, v3);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "SendSuplMessage", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    return 0;
  }
}

const char *LVLR_Init(uint64_t a1)
{
  *(void *)a1 = 0x4014000000000000;
  *(_DWORD *)(a1 + 20) = 0;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 24), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 56), 0.0);
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0xC08F380000000000;
  *(void *)(a1 + 352) = 0xC08F380000000000;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 312) = 0x3F847AE147AE147BLL;
  *(void *)(a1 + 104) = 0x3FCA5373D0C8EF30;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 112), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 144), 0.0);
  *(_DWORD *)(a1 + 176) = 0;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 184), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 216), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 248), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 280), 0.0);
  *(_OWORD *)(a1 + 320) = xmmword_22BB0EB70;
  *(void *)(a1 + 336) = 0x4014000000000000;
  *(_DWORD *)(a1 + 344) = (5.0 / *(double *)(a1 + 312));
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 360), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 392), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 424), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 456), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 488), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 520), 0.0);
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 552), 0.0);

  return Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 584), 0.0);
}

void LVLR_GetLevelerOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 344))
  {
    Add_Mat(3, (int *)(a1 + 184), 3, (int *)(a1 + 216), (const char *)3, (int *)a2);
    Mult_Mat_scalar(0.5, 3, (int *)a2, (const char *)3, (int *)a2);
    Add_Mat(3, (int *)(a1 + 248), 3, (int *)(a1 + 280), (const char *)3, (int *)(a2 + 32));
    Mult_Mat_scalar(0.5, 3, (int *)(a2 + 32), (const char *)3, (int *)(a2 + 32));
    *(_DWORD *)(a2 + 64) = 1;
    memset(v5, 0, sizeof(v5));
    Sub_Mat(3, (int *)(a1 + 216), 3, (int *)(a1 + 184), (const char *)3, (int *)v5);
    Max_Mat_Scalar(*(double *)(a1 + 320), 3, (int *)v5, (const char *)3, (int *)v5);
    memset(v4, 0, sizeof(v4));
    Sub_Mat(3, (int *)(a1 + 280), 3, (int *)(a1 + 248), (const char *)3, (int *)v4);
    Max_Mat_Scalar(*(double *)(a1 + 328), 3, (int *)v4, (const char *)3, (int *)v4);
    Mult_Mat_scalar(0.5, 3, (int *)v5, (const char *)3, (int *)(a2 + 72));
    ElMult_Mat_Mat(3, (int *)(a2 + 72), 3, (int *)(a2 + 72), (const char *)3, (int *)(a2 + 72));
    ElMult_Mat_Mat(3, (int *)v4, 3, (int *)v4, (const char *)3, (int *)(a2 + 104));
  }
  else
  {
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)a2, 0.0);
    *(_DWORD *)(a2 + 64) = 0;
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a2 + 32), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a2 + 72), -999.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a2 + 104), -999.0);
  }
  *(int8x16_t *)(a2 + 136) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
}

void LVLR_Run(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 8) == 6)
  {
    *(void *)(a1 + 352) = *(void *)a2;
  }
  else
  {
    double v3 = *(double *)(a1 + 352);
    BOOL v4 = (int *)(a2 + 16);
    uint64_t v5 = (int *)(a2 + 48);
    double v6 = *(double *)a2;
    ++*(_DWORD *)(a1 + 20);
    Add_Mat(3, (int *)(a1 + 24), 3, (int *)(a2 + 16), (const char *)3, (int *)(a1 + 24));
    Add_Mat(3, (int *)(a1 + 56), 3, v5, (const char *)3, (int *)(a1 + 56));
    long long v28 = 0u;
    *(_OWORD *)unsigned __int16 v29 = 0u;
    Mult_Mat_scalar(1.0 / (double)*(unsigned int *)(a1 + 20), 3, (int *)(a1 + 24), (const char *)3, (int *)&v28);
    double v8 = v29[1];
    double v7 = v29[0];
    double v9 = sqrt(v29[1] * v29[1] + v29[0] * v29[0]);
    if (fabs(v9) <= 1.0e-30)
    {
      if (g_FPE_LogSeverity)
      {
        unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v11 = *(double *)(g_TCU + 8);
        }
        else {
          double v11 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to divide by number %e that is smaller than eps=%e", "LVLR_calcRollPitch", 118, v10, v11, v9, 1.0e-30);
        double v8 = v29[1];
        double v7 = v29[0];
      }
      g_FPE_AssertFlag = 1;
      double v9 = 1.0;
    }
    *(long double *)(a1 + 88) = atan(*((double *)&v28 + 1) / v9);
    *(long double *)(a1 + 96) = atan2(-v7, -v8);
    double v12 = *(double *)(a1 + 8);
    if (v12 == -999.0)
    {
      *(double *)(a1 + 8) = v6 + -0.01;
      Copy_Mat(3, v5, (const char *)3, (int *)(a1 + 184));
      Copy_Mat(3, v5, (const char *)3, (int *)(a1 + 216));
      Copy_Mat(3, v5, (const char *)3, (int *)(a1 + 112));
      Copy_Mat(3, v4, (const char *)3, (int *)(a1 + 248));
      Copy_Mat(3, v4, (const char *)3, (int *)(a1 + 280));
      Copy_Mat(3, v4, (const char *)3, (int *)(a1 + 144));
      double v12 = *(double *)(a1 + 8);
    }
    double v13 = v6 - v12;
    long long v28 = 0u;
    *(_OWORD *)unsigned __int16 v29 = 0u;
    Abs_Mat(3, v5, (const char *)3, (int *)&v28);
    if (Any_Mat_Greater_Than(0.7, 3, (int *)&v28))
    {
      LVLR_resetFilters(a1);
      LODWORD(v26) = 0;
      double v14 = Max_Vec(3, (uint64_t)&v28, &v26);
      if ((g_FPE_LogSeverity & 4) != 0)
      {
        double v15 = v14;
        unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU) {
          double v17 = *(double *)(g_TCU + 8);
        }
        else {
          double v17 = 0.0;
        }
        LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Resetting Leveler due to large movement on Gyro # %d, Mag = %3.1f, seconds since leveler started =  %6.2f", "LVLR_Run", 221, v16, v17, v26 + 1, v15, v13);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 176);
      Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 112), 0.0);
      Add_Mat_ScalarMult(1.97881827, 3, (int *)(a1 + 112), 3, (int *)(a1 + 488), (const char *)3, (int *)(a1 + 112));
      Add_Mat_ScalarMult(-0.979519649, 3, (int *)(a1 + 112), 3, (int *)(a1 + 520), (const char *)3, (int *)(a1 + 112));
      Add_Mat_ScalarMult(1.27485269, 3, (int *)(a1 + 112), 3, v5, (const char *)3, (int *)(a1 + 112));
      Add_Mat_ScalarMult(-2.0, 3, (int *)(a1 + 112), 3, (int *)(a1 + 360), (const char *)3, (int *)(a1 + 112));
      Add_Mat_ScalarMult(1.13919655, 3, (int *)(a1 + 112), 3, (int *)(a1 + 392), (const char *)3, (int *)(a1 + 112));
      Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 144), 0.0);
      Add_Mat_ScalarMult(1.97881827, 3, (int *)(a1 + 144), 3, (int *)(a1 + 552), (const char *)3, (int *)(a1 + 144));
      Add_Mat_ScalarMult(-0.979519649, 3, (int *)(a1 + 144), 3, (int *)(a1 + 584), (const char *)3, (int *)(a1 + 144));
      Add_Mat_ScalarMult(1.27485269, 3, (int *)(a1 + 144), 3, v4, (const char *)3, (int *)(a1 + 144));
      Add_Mat_ScalarMult(-2.0, 3, (int *)(a1 + 144), 3, (int *)(a1 + 424), (const char *)3, (int *)(a1 + 144));
      Add_Mat_ScalarMult(1.13919655, 3, (int *)(a1 + 144), 3, (int *)(a1 + 456), (const char *)3, (int *)(a1 + 144));
      if (*(_DWORD *)(a1 + 20) >= 0xC8u)
      {
        long long v26 = 0u;
        long long v27 = 0u;
        Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 112), (const char *)3, (int *)&v26);
        memset(v25, 0, sizeof(v25));
        Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 144), (const char *)3, (int *)v25);
        Min_Mat_Mat(3, (int *)&v26, 3, (int *)(a1 + 184), (const char *)3, (int *)(a1 + 184));
        Min_Mat_Mat(3, (int *)v25, 3, (int *)(a1 + 248), (const char *)3, (int *)(a1 + 248));
        Max_Mat_Mat(3, (int *)&v26, 3, (int *)(a1 + 216), (const char *)3, (int *)(a1 + 216));
        Max_Mat_Mat(3, (int *)v25, 3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 280));
      }
      double v18 = v3 + 0.51;
      long long v26 = 0u;
      long long v27 = 0u;
      Sub_Mat(3, (int *)(a1 + 216), 3, (int *)(a1 + 184), (const char *)3, (int *)&v26);
      if (Any_Mat_Greater_Than(*(double *)(a1 + 320), 3, (int *)&v26))
      {
        if (v18 < v6 && v6 - *(double *)(a1 + 8) > 5.0)
        {
          LVLR_resetFilters(a1);
          *(double *)(a1 + 320) = fmin(*(double *)(a1 + 320) * 1.05, 0.05);
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            unint64_t v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v20 = *(double *)(g_TCU + 8);
            }
            else {
              double v20 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Resetting Leveler due to Gyro violation Min/Max bounds, seconds since leveler started =  %6.2f", "LVLR_Run", 285, v19, v20, v13);
          }
        }
      }
      Sub_Mat(3, (int *)(a1 + 280), 3, (int *)(a1 + 248), (const char *)3, (int *)&v26);
      if (Any_Mat_Greater_Than(*(double *)(a1 + 328), 3, (int *)&v26))
      {
        if (v18 < v6 && v6 - *(double *)(a1 + 8) > 5.0)
        {
          LVLR_resetFilters(a1);
          *(double *)(a1 + 328) = fmin(*(double *)(a1 + 328) * 1.05, 1.0);
          if ((g_FPE_LogSeverity & 4) != 0)
          {
            unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            if (g_TCU) {
              double v22 = *(double *)(g_TCU + 8);
            }
            else {
              double v22 = 0.0;
            }
            LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Resetting Leveler due to Accel violation of Min/Max bounds, seconds since leveler started =  %6.2f", "LVLR_Run", 296, v21, v22, v13);
          }
        }
      }
      if ((*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 344) || v6 - *(double *)(a1 + 8) > 600.0) && !*(unsigned char *)(a1 + 16))
      {
        if (v18 < v6)
        {
          if ((g_FPE_LogSeverity & 8) != 0)
          {
            mach_continuous_time();
            LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f leveling ready due to threshold after %f seconds");
          }
        }
        else if ((g_FPE_LogSeverity & 8) != 0)
        {
          mach_continuous_time();
          LC_LOG_SEVERITY_GENERIC("DBG:[%s() #%d] TT = %d, %0.3f leveling ready due to stop after %f seconds");
        }
        if (v6 - *(double *)(a1 + 8) > 600.0 && (g_FPE_LogSeverity & 4) != 0)
        {
          unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU) {
            double v24 = *(double *)(g_TCU + 8);
          }
          else {
            double v24 = 0.0;
          }
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f Leveler worked for %f sec and could not finish successfully. Giving up and trying to work as is", "LVLR_Run", 325, v23, v24, v6 - *(double *)(a1 + 8));
        }
        *(unsigned char *)(a1 + 16) = 1;
      }
    }
    Copy_Mat(3, (int *)(a1 + 360), (const char *)3, (int *)(a1 + 392));
    Copy_Mat(3, (int *)(a1 + 424), (const char *)3, (int *)(a1 + 456));
    Copy_Mat(3, v5, (const char *)3, (int *)(a1 + 360));
    Copy_Mat(3, v4, (const char *)3, (int *)(a1 + 424));
    Copy_Mat(3, (int *)(a1 + 488), (const char *)3, (int *)(a1 + 520));
    Copy_Mat(3, (int *)(a1 + 552), (const char *)3, (int *)(a1 + 584));
    Copy_Mat(3, (int *)(a1 + 112), (const char *)3, (int *)(a1 + 488));
    Copy_Mat(3, (int *)(a1 + 144), (const char *)3, (int *)(a1 + 552));
  }
}

void LVLR_resetFilters(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 176) = 0;
  Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 112), (const char *)3, (int *)(a1 + 184));
  Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 112), (const char *)3, (int *)(a1 + 216));
  Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 144), (const char *)3, (int *)(a1 + 248));
  Mult_Mat_scalar(0.00169824365, 3, (int *)(a1 + 144), (const char *)3, (int *)(a1 + 280));
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t gn_report_assertion_failure(const char *a1)
{
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_26AE66D58 + 1));
  uint64_t v2 = (void *)*((void *)&xmmword_26AE66D58 + 1);
  double v3 = (unsigned char *)(**((void **)&xmmword_26AE66D58 + 1))++;
  *double v3 = 10;
  if (*v2 >= v2[3]) {
    *uint64_t v2 = v2[2];
  }
  EvCrt_v(" ***** ASSERT FAILED ***** %s", a1);
  BOOL v4 = (void *)*((void *)&xmmword_26AE66D58 + 1);
  uint64_t v5 = (unsigned char *)(**((void **)&xmmword_26AE66D58 + 1))++;
  *uint64_t v5 = 10;
  if (*v4 >= v4[3]) {
    *BOOL v4 = v4[2];
  }
  uint64_t v6 = *((void *)&xmmword_26AE66D58 + 1);

  return GNSS_Event_Log_Ctl(v6);
}

uint64_t NK_SV_Meas_Update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, int a7, float64x2_t *a8, double a9, uint64_t a10)
{
  double v12 = a9;
  char v13 = 0;
  uint64_t v111 = *MEMORY[0x263EF8340];
  int v72 = (double *)(a10 + 16);
  __int16 v73 = (double *)(a10 + 24);
  char v14 = 1;
  int v88 = (void *)result;
  int v66 = result;
  do
  {
    uint64_t v15 = 0;
    unsigned int v77 = 0;
    unsigned int v78 = 0;
    char v16 = v14;
    unsigned __int8 v82 = v14 ^ 1;
    char v63 = v14;
    char v64 = v13;
    do
    {
      if (!*(unsigned char *)(a5 + v15 + 152)) {
        goto LABEL_70;
      }
      if ((v16 & 1) != 0 && (int v17 = *(_DWORD *)(a5 + 4 * v15 + 248), (v17 - 1) >= 0x1D))
      {
        if (!v17) {
          goto LABEL_8;
        }
        uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        if ((v13 & 1) == 0) {
          goto LABEL_70;
        }
      }
      else if ((v13 & 1) == 0)
      {
        goto LABEL_70;
      }
      int v18 = *(_DWORD *)(a5 + 4 * v15 + 248);
      if ((v18 - 1) < 0x1D) {
        goto LABEL_8;
      }
      if (v18)
      {
        EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_8:
        long long v96 = 0u;
        memset(v95, 0, sizeof(v95));
        memset(v94, 0, sizeof(v94));
        uint64_t v93 = 0;
        memset(v92, 0, sizeof(v92));
        double v89 = 0.0;
        bzero(__dst, 0x270uLL);
        char v19 = 0;
        uint64_t v86 = a3 + 56 * v15;
        char v87 = (unsigned __int8 *)(a5 + v15 + 200);
        uint64_t v20 = a5 + 8 * v15;
        int v84 = (double *)(v20 + 4040);
        double v85 = (void *)(v20 + 2024);
        unint64_t v21 = (_DWORD *)(a5 + 4 * v15 + 248);
        double v22 = 1.0;
        BOOL v79 = (double *)(v20 + 3608);
        int v80 = v15;
        char v23 = 1;
        uint64_t v75 = v15;
        int v83 = (unsigned __int8 *)(a2 + 4 * v15);
        while (2)
        {
          double v24 = 1.0e20;
          if ((((v19 & 1) == 0) & v82) == 0) {
            double v24 = *(double *)(a5 + 8);
          }
          NK_Obs_Equ_SV(v88, *v87, *v83, v86, (uint64_t)v95, v12);
          if (a7)
          {
            NK_SV_Meas_Innov_Sat((double *)v95, v80, (int)v88, a5, a6->f64, v24);
            double v22 = *v79;
          }
          *((void *)&v96 + 1) = *v85;
          if (v23) {
            memcpy(__dst, a6, sizeof(__dst));
          }
          uint64_t result = umeas((BOOL)a6, 0xBu, v22 * *v84, (double *)v95, (double *)v94, (double *)v92, &v89, v24);
          if ((((v19 & 1) == 0) & v82) != 0)
          {
            *unint64_t v21 = 0;
            if (v89 < 0.0)
            {
              uint64_t result = gn_report_assertion_failure("NK_SV_Meas_Update:  Edit add-back failed !");
              goto LABEL_23;
            }
LABEL_29:
            if ((v19 & 1) == 0 && *(unsigned char *)a10)
            {
              float64x2_t v76 = vsubq_f64(*a8, a6[37]);
              float64x2_t v109 = v76;
              double v26 = a8[1].f64[0] - a6[38].f64[0];
              double v110 = v26;
              double v27 = 0.0;
              uint64_t v28 = 2;
              do
              {
                double v27 = v27 + v109.f64[v28] * v109.f64[v28];
                unint64_t v29 = v28-- + 1;
              }
              while (v29 > 1);
              double v30 = sqrt(v27);
              double v31 = *v73;
              double v32 = *v72;
              double v33 = *v72 - v30;
              double v34 = v30 - *v73;
              if (v33 > 0.001)
              {
                double v35 = v30 - *v73;
                goto LABEL_37;
              }
              if (v34 <= 0.001)
              {
                char v19 = 0;
              }
              else
              {
                double v35 = -v33;
                double v33 = v30 - *v73;
LABEL_37:
                switch(v88)
                {
                  case 3:
                    ++*(unsigned char *)(a10 + 33);
                    break;
                  case 2:
                    ++*(unsigned char *)(a10 + 34);
                    break;
                  case 1:
                    ++*(unsigned char *)(a10 + 32);
                    break;
                }
                *(double *)&uint64_t v108 = 1.0;
                long long v107 = xmmword_22BB0EBB8;
                double v71 = (v31 - v32) / v33;
                ud2var((uint64_t)a6, 0xBu, 9, 3u, (double *)&v107);
                uint64_t v36 = 0;
                double v37 = *((double *)&v107 + 1);
                double v69 = *(double *)&v108;
                double v70 = *(double *)&v107;
                uint64_t v105 = 0;
                memset(v104, 0, sizeof(v104));
                do
                {
                  *(double *)((char *)&v104[4] + v36 * 8) = v109.f64[v36] / v30;
                  ++v36;
                }
                while (v36 != 3);
                double v38 = vmuld_lane_f64(v76.f64[1], v76, 1) * v37;
                *(void *)&double v68 = *(_OWORD *)&vmulq_f64(v76, v76);
                double v106 = v35;
                bzero(v103, 0x210uLL);
                ud2cov(a6->f64, v103, 0xBu);
                unint64_t v39 = 0;
                double v102 = 0.0;
                long long v101 = 0u;
                memset(v100, 0, sizeof(v100));
                do
                {
                  unint64_t v40 = 0;
                  double v41 = *((double *)v100 + v39);
                  unint64_t v42 = v39 + 1;
                  do
                  {
                    unint64_t v43 = v40 + 1;
                    double v44 = *((double *)v104 + v40);
                    if (v40 < v39)
                    {
                      unint64_t v45 = v40 + (((v39 + 1) * v39) >> 1);
                    }
                    else
                    {
                      unint64_t v43 = v40 + 1;
                      unint64_t v45 = v39 + ((unint64_t)((v40 + 1) * v40) >> 1);
                    }
                    double v41 = v41 + v103[v45] * v44;
                    unint64_t v40 = v43;
                  }
                  while (v43 != 11);
                  *((double *)v100 + v39++) = v41;
                }
                while (v42 != 11);
                uint64_t v46 = 0;
                double v47 = 0.0;
                do
                {
                  double v47 = v47 + *(double *)((char *)v104 + v46) * *(double *)((char *)v100 + v46);
                  v46 += 8;
                }
                while (v46 != 88);
                double v48 = v71 * ((v38 + v68 * v70 + v26 * v26 * v69) / (v30 * v30));
                double v49 = v35
                    * v35
                    * (*((double *)&v101 + 1) * *((double *)&v101 + 1)
                     + *(double *)&v101 * *(double *)&v101
                     + v102 * v102);
                double v50 = v35 * ((v76.f64[1] * *((double *)&v101 + 1) + *(double *)&v101 * v76.f64[0] + v102 * v26) * -2.0);
                int v51 = (double *)(a10 + 24);
                if (v34 <= 0.001) {
                  int v51 = (double *)(a10 + 16);
                }
                double v52 = (v30 * v30 - *v51 * *v51) * (v49 * -4.0) + v50 * v50;
                if (v52 >= 0.0)
                {
                  double v54 = sqrt(v52);
                  double v55 = 0.0;
                  double v56 = 0.0;
                  double v12 = a9;
                  if (vabdd_f64(v54, v50) > 0.01) {
                    double v56 = (v49 + v49) / (v54 - v50);
                  }
                  double v57 = -v50;
                  if (vabdd_f64(v57, v54) > 0.01) {
                    double v55 = (v49 + v49) / (v57 - v54);
                  }
                  if (v56 <= v55) {
                    double v58 = v55;
                  }
                  else {
                    double v58 = v56;
                  }
                  BOOL v59 = v58 <= v47;
                  BOOL v53 = v58 > v47;
                  double v60 = v58 - v47;
                  if (!v59) {
                    double v48 = v60;
                  }
                }
                else
                {
                  BOOL v53 = 0;
                  double v12 = a9;
                }
                memcpy(a6, __dst, 0x270uLL);
                double v90 = 0.0;
                memset(v99, 0, sizeof(v99));
                uint64_t v98 = 0;
                memset(v97, 0, sizeof(v97));
                umeas((BOOL)a6, 0xBu, v48, (double *)v104, (double *)v99, (double *)v97, &v90, 1.0e20);
                char v19 = 1;
                *(unsigned char *)(a10 + 1) = 1;
                uint64_t result = (uint64_t)EvLog_v("NK_Apply_Speed_Constraint: Speed_C applied, Upper_Limit = %g, Lower_Limit = %g, PreconstrainedSpeed = %g, Optimal constraint applied? = %d", *(double *)(a10 + 24), *(double *)(a10 + 16), v30, v53);
              }
LABEL_26:
              char v25 = v23 & v19;
              char v23 = 0;
              if ((v25 & 1) == 0)
              {
                char v16 = v63;
                char v13 = v64;
                uint64_t v15 = v75;
                goto LABEL_70;
              }
              continue;
            }
LABEL_24:
            if (v19) {
              char v19 = 0;
            }
            goto LABEL_26;
          }
          break;
        }
        if (v89 >= 0.0)
        {
          v78 += *(unsigned __int8 *)(a4 + v75);
        }
        else
        {
          ++v77;
          --*(unsigned char *)(a5 + 3);
          ++*(unsigned char *)(a5 + 4);
          if ((v19 & 1) == 0)
          {
            *unint64_t v21 = 21;
            goto LABEL_24;
          }
          *unint64_t v21 = 22;
          memcpy(a6, __dst, 0x270uLL);
          uint64_t result = (uint64_t)EvLog_v("NK_SV_Meas_Update: Speed constraint edit info: Chan num: %d, Obs Type: %d", v80, v66);
        }
LABEL_23:
        if ((*v21 - 1) >= 0x1D)
        {
          if (!*v21) {
            goto LABEL_29;
          }
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
        }
        goto LABEL_24;
      }
LABEL_70:
      ++v15;
    }
    while (v15 != 48);
    if (!v77 || v78 >= 5 && (v77 < 2 || v78 != 5)) {
      break;
    }
    uint64_t result = (uint64_t)EvLog_v("NK_SV_Meas_Update: Edits unreliable-repeating to add back edits, Obs Type = %d , Num Eph Added = %d, Num rejected = %d", v88, v78, v77);
    char v14 = 0;
    char v13 = 1;
  }
  while ((v16 & 1) != 0);
  return result;
}

uint64_t NK_Reduce_Num_SV(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v70 = *MEMORY[0x263EF8340];
  double v7 = (unsigned char *)(a3 + 13963);
  double v8 = (unsigned char *)(a3 + 8387);
  uint16x8_t v9 = (uint16x8_t)vdupq_n_s16(0x630u);
  v10.i64[0] = 0x6000600060006;
  v10.i64[1] = 0x6000600060006;
  uint16x8_t v11 = (uint16x8_t)vdupq_n_s16(0xCCCDu);
  memset(v69, 0, 192);
  v12.i64[0] = 0x32003200320032;
  v12.i64[1] = 0x32003200320032;
  int8x16_t v13 = (int8x16_t)vdupq_n_s16(0x3B6u);
  do
  {
    int16x8_t v14 = *(int16x8_t *)(a3 + 504 + v6 * 16);
    int8x16_t v15 = (int8x16_t)vcgtq_u16((uint16x8_t)v14, v9);
    uint16x8_t v16 = (uint16x8_t)vmulq_s16(v14, v10);
    *(int8x16_t *)((char *)&v69[v6 + 12] + 8) = vbslq_s8(v15, v13, (int8x16_t)vmaxq_u16(vshrq_n_u16((uint16x8_t)vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v11.i8), (int16x8_t)vmull_high_u16(v16, v11)), 3uLL), v12));
    ++v6;
  }
  while (v6 != 6);
  if (!*(_DWORD *)(a3 + 968))
  {
    uint64_t v38 = 0;
    uint64_t v39 = result + 1132;
    do
    {
      uint64_t result = Is_Legal(*(_DWORD *)(v39 + 4 * v38 - 1056));
      if (result)
      {
        int v40 = *((_DWORD *)v69 + v38);
        if ((v40 - 1) >= 0x1D)
        {
          if (v40)
          {
            uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else if (*(unsigned __int16 *)(v39 + 2 * v38) > *((unsigned __int16 *)&v69[12] + v38 + 4))
          {
            *((_DWORD *)v69 + v38) = 5;
          }
        }
      }
      ++v38;
    }
    while (v38 != 48);
LABEL_34:
    if (*(_DWORD *)(a3 + 968) == 1)
    {
      if (*(unsigned char *)(a2 + 11162))
      {
        uint64_t v30 = 0;
        int v31 = 0;
        unsigned int v32 = 0;
        int v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = v5 + 604;
        do
        {
          if (*(unsigned char *)(a3 + 2960 + v30))
          {
            int v36 = *((_DWORD *)v69 + v30);
            if ((v36 - 1) >= 0x1D)
            {
              if (v36)
              {
                int v65 = v31;
                unsigned int v61 = v34;
                uint64_t v63 = v35;
                uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                uint64_t v35 = v63;
                unsigned int v34 = v61;
                int v31 = v65;
              }
              else
              {
                ++v34;
                unsigned int v37 = *(unsigned __int8 *)(v35 + v30);
                if (v37 < 0xD) {
                  ++v33;
                }
                if (v37 > 0xE) {
                  ++v32;
                }
                if (v37 > 0x11) {
                  ++v31;
                }
              }
            }
          }
          ++v30;
        }
        while (v30 != 48);
        if (v33 && (v34 < 3 || v34 - v33 >= 5 && (v32 > 1 || v31)))
        {
          for (uint64_t i = 0; i != 48; ++i)
          {
            if (*(unsigned char *)(a3 + 2960 + i) && *(unsigned __int8 *)(v5 + 604 + i) <= 0xCu) {
              *((_DWORD *)v69 + i) = 7;
            }
          }
        }
      }
      if (*(_DWORD *)(a3 + 968) == 1)
      {
        uint64_t v42 = 0;
        unsigned int v43 = 0;
        double v44 = (unsigned __int16 *)(v5 + 844);
        uint64_t v45 = a2 + 7744;
        do
        {
          if (*(unsigned char *)(a3 + 2960 + v42))
          {
            int v46 = *((_DWORD *)v69 + v42);
            if ((v46 - 1) >= 0x1D)
            {
              if (v46)
              {
                unsigned int v67 = v43;
                uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                unsigned int v43 = v67;
              }
              else if (*(_WORD *)(v45 + 2 * v42) {
                     && *v44 >= 0xC8u
              }
                     && v44[48] >= 0xC8u
                     && *(unsigned __int8 *)(v5 + v42 + 604) - *(unsigned __int8 *)(v5 + v42 + 700) > 2)
              {
                ++v43;
              }
            }
          }
          ++v42;
          ++v44;
        }
        while (v42 != 48);
        if (v43 <= 2)
        {
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          do
          {
            if (*(unsigned char *)(a3 + 2960 + v47))
            {
              int v49 = *((_DWORD *)v69 + v47);
              if ((v49 - 1) >= 0x1D)
              {
                if (v49)
                {
                  uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                }
                else
                {
                  if (*(unsigned __int8 *)(v5 + 604 + v47) > 0xDu || (int)v48 > 1) {
                    goto LABEL_103;
                  }
                  v68[v48++] = v47;
                }
              }
            }
            ++v47;
          }
          while (v47 != 48);
          if ((int)v48 >= 1)
          {
            uint64_t v51 = 1;
            if (v48 != 1) {
              uint64_t v51 = 2;
            }
            double v52 = v68;
            do
            {
              uint64_t v53 = *v52++;
              *((_DWORD *)v69 + v53) = 9;
              --v51;
            }
            while (v51);
          }
        }
      }
    }
    goto LABEL_103;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v21 = a2 + 7744;
  uint64_t v22 = result + 1132;
  uint64_t v23 = a3 + 2960;
  do
  {
    if (*(unsigned char *)(v23 + v17))
    {
      int v24 = *((_DWORD *)v69 + v17);
      if ((v24 - 1) >= 0x1D)
      {
        if (v24)
        {
          uint64_t v62 = v21;
          uint64_t v64 = v5;
          int v60 = v18;
          uint64_t v25 = v19;
          uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          uint64_t v19 = v25;
          uint64_t v21 = v62;
          uint64_t v5 = v64;
          int v18 = v60;
        }
        else if (*(unsigned __int16 *)(v22 + 2 * v17) >= *((unsigned __int16 *)&v69[12] + v17 + 4))
        {
          ++v18;
        }
        else
        {
          ++v20;
          if (*(_WORD *)(v21 + 2 * v17)) {
            uint64_t v19 = (v19 + 1);
          }
          else {
            uint64_t v19 = v19;
          }
        }
      }
    }
    ++v17;
  }
  while (v17 != 48);
  if (v19 <= 3 && v18)
  {
    for (uint64_t j = 0; j != 48; ++j)
    {
      if (*(unsigned char *)(a3 + 2960 + j)
        && *(unsigned __int16 *)(v5 + 1132 + 2 * j) > *((unsigned __int16 *)&v69[12] + j + 4))
      {
        *((_DWORD *)v69 + j) = 6;
      }
    }
  }
  if (v20 || !v18) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(a3 + 968) == 1)
  {
    if (*(unsigned char *)(a2 + 11162))
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      while (1)
      {
        uint64_t result = Is_Legal(*(_DWORD *)(v5 + v27 + 76));
        if (result)
        {
          if (*(unsigned __int16 *)(a3 + 504 + 2 * v28) >= 0x28Bu)
          {
            unsigned int v29 = *((unsigned __int16 *)&v69[12] + v28 + 4);
LABEL_32:
            *(unsigned char *)(a4 + 365 + v28) |= 1u;
            *(_DWORD *)(a4 + 416 + 4 * v28) = *(_DWORD *)a3;
            uint64_t result = (uint64_t)EvLog_v("ChanReset %d : NKRNSV %d %d   %x %d   %d > %d ", v28, *(unsigned __int8 *)(v5 + v27 + 78), *(unsigned __int8 *)(v5 + v27 + 76), *(unsigned __int16 *)(v5 + 2 * v28 + 316), *(unsigned __int8 *)(v5 + v28 + 604), *(unsigned __int16 *)(v5 + 2 * v28 + 1132), v29);
            goto LABEL_33;
          }
          unsigned int v29 = *((unsigned __int16 *)&v69[12] + v28 + 4);
          if (*(unsigned __int16 *)(v5 + 2 * v28 + 1132) > v29) {
            goto LABEL_32;
          }
        }
LABEL_33:
        ++v28;
        v27 += 4;
        if (v28 == 48) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_103:
  uint64_t v54 = 0;
  uint64_t v55 = a3 + 14112;
  double v56 = (_DWORD *)(a3 + 8632);
  uint64_t v57 = a3 + 8536;
  do
  {
    int v58 = *((_DWORD *)v69 + v54);
    if ((v58 - 1) >= 0x1D)
    {
      if (!v58) {
        goto LABEL_111;
      }
      uint64_t result = (uint64_t)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
    }
    if (*(unsigned char *)(a3 + v54 + 2960))
    {
      *(unsigned char *)(a3 + v54 + 2960) = 0;
      --*(unsigned char *)(a3 + 2811);
      ++*(unsigned char *)(a3 + 2812);
      *(_DWORD *)(a3 + 4 * v54 + 3056) = v58;
    }
    if (*(unsigned char *)(v57 + v54))
    {
      *(unsigned char *)(v57 + v54) = 0;
      --*v8;
      ++v8[1];
      *double v56 = v58;
    }
    if (*(unsigned char *)(v55 + v54))
    {
      *(unsigned char *)(v55 + v54) = 0;
      --*v7;
      ++v7[1];
      v56[1394] = v58;
    }
LABEL_111:
    ++v54;
    ++v56;
  }
  while (v54 != 48);
  return result;
}

unsigned __int16 *plc01_01DecHeader(unsigned __int16 *result, unsigned char *a2, unsigned __int16 *a3, uint64_t a4)
{
  if (result[5] > 7u)
  {
    uint64_t v6 = result;
    double v7 = *(unsigned char **)result;
    *a2 = *(unsigned char *)(*(void *)result + 2);
    a2[1] = v7[3];
    a2[2] = v7[4];
    uint64_t result = (unsigned __int16 *)memcpy_s("plc01_01DecHeader", 85, a3, 2u, v7 + 5, 2uLL);
    unsigned int v9 = *a3;
    if (v9 >= 0x7F8)
    {
      *(_DWORD *)a4 = 7;
      if (*(unsigned char *)(a4 + 144)) {
        uint64_t result = (unsigned __int16 *)snprintf((char *)(a4 + 16), 0x80uLL, "D HDR PL %d > %d", v9, 2039);
      }
    }
    v8.i32[0] = *(_DWORD *)(*(void *)v6 + 2);
    if (*(unsigned __int8 *)(*(void *)v6 + 7) != (vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v8))
                                                                      + *(unsigned char *)(*(void *)v6 + 6)))
      *(_DWORD *)a4 = 3;
    int v6[4] = 8;
  }
  else
  {
    *(_DWORD *)a4 = 6;
  }
  return result;
}

void *plc01_02PutUInt32(unsigned int a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int __src = a1;
  *(_DWORD *)a4 = 0;
  uint64_t result = memcpy_s("plc01_02PutUInt32", 134, (void *)(*(void *)a3 + *(unsigned __int16 *)(a3 + 8)), *(unsigned __int16 *)(a3 + 10) - *(unsigned __int16 *)(a3 + 8), &__src, 4uLL);
  *(_WORD *)(a3 + 8) += 4;
  int v8 = __src;
  int v9 = *a2;
  if (__src < *a2 || __src > a2[1])
  {
    *(_DWORD *)a4 = 24;
    if (*(unsigned char *)(a4 + 144)) {
      return (void *)snprintf((char *)(a4 + 16), 0x80uLL, "P INT B 4 [%d %d] V %d", v9, a2[1], v8);
    }
  }
  return result;
}

uint64_t lsim22_02HandleEaApiStatus(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim22_02HandleEaApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  BOOL v4 = gnssOsa_Calloc("lsim22_02HandleEaApiStatus", 56, 1, 0xCuLL);
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (v4)
  {
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EAAPI_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim22_02HandleEaApiStatus");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
    if (g_GnsEaCallback)
    {
      *(void *)BOOL v4 = *(void *)(a1 + 12);
      _OWORD v4[2] = *(_DWORD *)(a1 + 20);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>EaCB,Api,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim22_02HandleEaApiStatus", v4[1], *v4, v4[2]);
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
      }
      g_GnsEaCallback(0, 12, v4);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim22_02HandleEaApiStatus", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
    }
    free(v4);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  }
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim22_02HandleEaApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  return 0;
}

size_t lsim22_03EaCbInit(size_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsEaCallback)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim22_03EaCbInit", 513);
      uint64_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsEaCallbacuint64_t k = v1;
    return result;
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim22_03EaCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

uint64_t GNS_EaInitialize(uint64_t a1)
{
  uint64_t v2 = gnssOsa_Calloc("GNS_EaInitialize", 116, 1, 0x18uLL);
  if (!v2) {
    return 6;
  }
  v2[3] = 7;
  *((void *)v2 + 2) = a1;
  AgpsSendFsmMsg(131, 131, 8635139, v2);
  return 1;
}

uint64_t GNS_EaWgs84RefPos(int a1, long long *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaWgs84RefPos");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Wgs84RefPos\n");
    goto LABEL_35;
  }
  if ((*((_DWORD *)a2 + 17) - 5) >= 3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Source,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 87, "GNS_EaWgs84RefPos", 515, *((_DWORD *)a2 + 17));
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_37;
  }
  if (*((_DWORD *)a2 + 16) >= 5u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v29);
    goto LABEL_35;
  }
  double v6 = *((double *)a2 + 1);
  if (v6 > 90.0 || v6 < -90.0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
    goto LABEL_35;
  }
  double v7 = *((double *)a2 + 2);
  if (v7 > 180.0 || v7 < -180.0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
    goto LABEL_35;
  }
  if (*((unsigned char *)a2 + 42))
  {
    double v8 = *((double *)a2 + 6);
    if (v8 > 100000.0 || v8 < -100000.0)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
        goto LABEL_36;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Height,%f\n");
LABEL_35:
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
LABEL_36:
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 2;
      }
LABEL_37:
      bzero(__str, 0x410uLL);
      unint64_t v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v23, "LSM", 73, "GNS_EaWgs84RefPos");
      LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
      return 2;
    }
  }
  if (*((unsigned __int16 *)a2 + 20) - 181 <= 0xFE96)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:RmsSemiMajBrg,%d\n", v28);
    goto LABEL_35;
  }
  uint64_t v12 = (char *)gnssOsa_Calloc("GNS_EaWgs84RefPos", 246, 1, 0x70uLL);
  if (v12)
  {
    unsigned __int16 v13 = v12;
    *((_DWORD *)v12 + 3) = a1;
    *((_DWORD *)v12 + 4) = 1;
    long long v14 = *a2;
    *(_OWORD *)(v12 + 40) = a2[1];
    *(_OWORD *)(v12 + 24) = v14;
    long long v15 = a2[2];
    long long v16 = a2[3];
    long long v17 = a2[4];
    *((_DWORD *)v12 + 26) = *((_DWORD *)a2 + 20);
    *(_OWORD *)(v12 + 88) = v17;
    *(_OWORD *)(v12 + 72) = v16;
    *(_OWORD *)(v12 + 56) = v15;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GNS_EaWgs84RefPos", *((_DWORD *)v13 + 4), *((_DWORD *)v13 + 3));
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v13);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "GNS_EaWgs84RefPos");
      uint64_t v22 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v26 = mach_continuous_time();
      unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "GNS_EaWgs84RefPos");
      LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
    }
    return 6;
  }
  return v22;
}

uint64_t GNS_EaDevMovState(int a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaDevMovState");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:DMS\n");
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:MovState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_EaDevMovState", 515, *((_DWORD *)a2 + 1));
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:MovReliab,%u\n", v22);
LABEL_19:
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
LABEL_20:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
LABEL_21:
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_EaDevMovState");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    return 2;
  }
  double v6 = gnssOsa_Calloc("GNS_EaDevMovState", 336, 1, 0x70uLL);
  if (v6)
  {
    double v7 = v6;
    v6[3] = a1;
    int v6[4] = 2;
    uint64_t v8 = *a2;
    v6[8] = *((_DWORD *)a2 + 2);
    *((void *)v6 + 3) = v8;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EaDevMovState", v7[4], v7[3]);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v7);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EaDevMovState");
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "GNS_EaDevMovState");
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    return 6;
  }
  return v13;
}

uint64_t GNS_EaSpeedConstraint(int a1, long long *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaSpeedConstraint");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a2)
  {
    double v6 = (char *)gnssOsa_Calloc("GNS_EaSpeedConstraint", 393, 1, 0x70uLL);
    if (v6)
    {
      double v7 = v6;
      *((_DWORD *)v6 + 3) = a1;
      *((_DWORD *)v6 + 4) = 8;
      long long v8 = *a2;
      *((void *)v6 + 5) = *((void *)a2 + 2);
      *(_OWORD *)(v6 + 24) = v8;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EaSpeedConstraint", *((_DWORD *)v7 + 4), *((_DWORD *)v7 + 3));
        LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8781827, v7);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EaSpeedConstraint");
        uint64_t v13 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GNS_EaSpeedConstraint");
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
      }
      return 6;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:SpdC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "GNS_EaSpeedConstraint", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_EaSpeedConstraint");
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    return 2;
  }
  return v13;
}

uint64_t GNS_EaAlongTrackVel(int a1, long long *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaAlongTrackVel");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a2)
  {
    double v6 = (char *)gnssOsa_Calloc("GNS_EaAlongTrackVel", 449, 1, 0x70uLL);
    if (v6)
    {
      double v7 = v6;
      *((_DWORD *)v6 + 3) = a1;
      *((_DWORD *)v6 + 4) = 9;
      long long v8 = *a2;
      *((void *)v6 + 5) = *((void *)a2 + 2);
      *(_OWORD *)(v6 + 24) = v8;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EaAlongTrackVel", *((_DWORD *)v7 + 4), *((_DWORD *)v7 + 3));
        LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8781827, v7);
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EaAlongTrackVel");
      uint64_t v13 = 1;
      int v14 = 4;
      goto LABEL_11;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_EaAlongTrackVel");
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    return 6;
  }
  else
  {
    uint64_t v13 = 2;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:AlongTrackVel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_EaAlongTrackVel", 513);
      int v14 = 2;
LABEL_11:
      LbsOsaTrace_WriteLog(0xCu, __str, v12, v14, 1);
    }
  }
  return v13;
}

uint64_t GNS_EaUsrActCtxt(int a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaUsrActCtxt");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:UAC\n");
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 1) >= 0xCu)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Ctxt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_EaUsrActCtxt", 515, *((_DWORD *)a2 + 1));
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Reliab,%u\n", v22);
LABEL_19:
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
LABEL_20:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
LABEL_21:
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_EaUsrActCtxt");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    return 2;
  }
  double v6 = gnssOsa_Calloc("GNS_EaUsrActCtxt", 672, 1, 0x70uLL);
  if (v6)
  {
    double v7 = v6;
    v6[3] = a1;
    int v6[4] = 3;
    uint64_t v8 = *a2;
    v6[8] = *((_DWORD *)a2 + 2);
    *((void *)v6 + 3) = v8;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EaUsrActCtxt", v7[4], v7[3]);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v7);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EaUsrActCtxt");
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "GNS_EaUsrActCtxt");
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    return 6;
  }
  return v13;
}

uint64_t GNS_EaFixedInVehicle(int a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaFixedInVehicle");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:FIV\n");
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 1) >= 4u)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:FivInd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "GNS_EaFixedInVehicle", 515, *((_DWORD *)a2 + 1));
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
    goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 2) >= 4u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_20;
    }
    bzero(__str, 0x410uLL);
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:FIVReliab,%u\n", v22);
LABEL_19:
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
LABEL_20:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 2;
    }
LABEL_21:
    bzero(__str, 0x410uLL);
    unint64_t v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "GNS_EaFixedInVehicle");
    LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    return 2;
  }
  double v6 = gnssOsa_Calloc("GNS_EaFixedInVehicle", 761, 1, 0x70uLL);
  if (v6)
  {
    double v7 = v6;
    v6[3] = a1;
    int v6[4] = 4;
    uint64_t v8 = *a2;
    v6[8] = *((_DWORD *)a2 + 2);
    *((void *)v6 + 3) = v8;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_EaFixedInVehicle", v7[4], v7[3]);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v7);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_EaFixedInVehicle");
      uint64_t v13 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "GNS_EaFixedInVehicle");
      LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
    }
    return 6;
  }
  return v13;
}

uint64_t GNS_EaSigEnvSev(int a1, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaSigEnvSev");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a2 >= 8)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:SES,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "GNS_EaSigEnvSev", 515, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_EaSigEnvSev");
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
    }
    return 2;
  }
  else
  {
    double v6 = gnssOsa_Calloc("GNS_EaSigEnvSev", 831, 1, 0x70uLL);
    if (v6)
    {
      double v7 = v6;
      v6[3] = a1;
      int v6[4] = 5;
      v6[6] = a2;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_EaSigEnvSev", v7[4], v7[3]);
        LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
      }
      AgpsSendFsmMsg(131, 134, 8781827, v7);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_EaSigEnvSev");
        uint64_t v12 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GNS_EaSigEnvSev");
        LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
      }
      return 6;
    }
  }
  return v12;
}

uint64_t GNS_EaAltitude(int a1, long long *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaAltitude");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Alt\n");
      goto LABEL_13;
    }
LABEL_14:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_EaAltitude");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    return 2;
  }
  double v6 = *((double *)a2 + 1);
  if (v6 > 100000.0 || v6 < -100000.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if (*((double *)a2 + 2) > 100000.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:RMSAltitude,%f\n");
LABEL_13:
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  if (*((_DWORD *)a2 + 6) >= 5u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_14;
    }
    bzero(__str, 0x410uLL);
    unint64_t v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Trust,%u\n", v21);
    goto LABEL_13;
  }
  uint64_t v12 = (char *)gnssOsa_Calloc("GNS_EaAltitude", 927, 1, 0x70uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    *((_DWORD *)v12 + 3) = a1;
    *((_DWORD *)v12 + 4) = 6;
    long long v14 = *a2;
    *(_OWORD *)(v12 + 36) = *(long long *)((char *)a2 + 12);
    *(_OWORD *)(v12 + 24) = v14;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_EaAltitude", *((_DWORD *)v13 + 4), *((_DWORD *)v13 + 3));
      LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v13);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "GNS_EaAltitude");
      uint64_t v10 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "GNS_EaAltitude");
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
    }
    return 6;
  }
  return v10;
}

uint64_t GNS_EaMapVectorSeg(int a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_EaMapVectorSeg");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:MapVecSeg\n");
      goto LABEL_28;
    }
LABEL_29:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_EaMapVectorSeg");
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
    return 2;
  }
  double v6 = *(double *)(a2 + 8);
  if (v6 > 90.0 || v6 < -90.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Latitude,%f\n");
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  double v7 = *(double *)(a2 + 16);
  if (v7 > 180.0 || v7 < -180.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Longitude,%f\n");
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*(unsigned char *)(a2 + 32))
  {
    double v8 = *(double *)(a2 + 24);
    if (v8 > 100000.0 || v8 < -100000.0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Altitude,%f\n");
        goto LABEL_28;
      }
      goto LABEL_29;
    }
  }
  if (*(double *)(a2 + 40) > 360.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Direction,%f\n");
LABEL_28:
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (*(double *)(a2 + 48) > 100000.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Length,%f\n");
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*(double *)(a2 + 56) > 100000.0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EXTA:Width,%f\n");
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  long long v14 = (char *)gnssOsa_Calloc("GNS_EaMapVectorSeg", 1045, 1, 0x70uLL);
  if (v14)
  {
    uint64_t v15 = v14;
    *((_DWORD *)v14 + 3) = a1;
    *((_DWORD *)v14 + 4) = 7;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 16);
    long long v17 = *(_OWORD *)(a2 + 32);
    long long v18 = *(_OWORD *)(a2 + 48);
    *(void *)(v14 + 85) = *(void *)(a2 + 61);
    *(_OWORD *)(v14 + 72) = v18;
    *(_OWORD *)(v14 + 56) = v17;
    *(_OWORD *)(v14 + 40) = v16;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_EADATA_IND =>GNC Type,%u,Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "LSM", 73, "GNS_EaMapVectorSeg", *((_DWORD *)v15 + 4), *((_DWORD *)v15 + 3));
      LbsOsaTrace_WriteLog(0xCu, __str, v20, 4, 1);
    }
    AgpsSendFsmMsg(131, 134, 8781827, v15);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 73, "GNS_EaMapVectorSeg");
      uint64_t v12 = 1;
      LbsOsaTrace_WriteLog(0xCu, __str, v22, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v23 = mach_continuous_time();
      unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 73, "GNS_EaMapVectorSeg");
      LbsOsaTrace_WriteLog(0xCu, __str, v24, 4, 1);
    }
    return 6;
  }
  return v12;
}

size_t lsim09_04SendConnApiStatus(int a1, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim09_04SendConnApiStatus");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  double v8 = gnssOsa_Calloc("lsim09_04SendConnApiStatus", 190, 1, 0x118uLL);
  if (v8)
  {
    unsigned __int16 v9 = v8;
    v8[1] = a3;
    v8[2] = a2;
    *double v8 = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>DcCB,Api,%u,Status,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim09_04SendConnApiStatus", a3, a2, a1);
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
    GNS_ExecuteDcCb(3, 280, (uint64_t)v9);
    free(v9);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "lsim09_04SendConnApiStatus");
    return LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
  }
  return result;
}

size_t GNS_ExecuteDcCb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_ExecuteDcCb");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsDcCallback)
  {
    g_GnsDcCallback(a1, a2, a3);
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "GNS_ExecuteDcCb");
    int v11 = 4;
  }
  else
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "GNS_ExecuteDcCb", 258);
    int v11 = 2;
  }
  return LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
}

uint64_t lsim09_21TcpIpConnectCnf(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim09_21TcpIpConnectCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (g_GnsDcCallback)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_TCPIP_CONNECT_CNF,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim09_21TcpIpConnectCnf", *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
      }
      unint64_t v6 = 0;
      BOOL v7 = 1;
      double v8 = (_DWORD *)&qword_26AE534C8 + 1;
      do
      {
        if (*((unsigned char *)v8 - 16) && *(v8 - 1) == 0x7FFF && *v8 == 1) {
          break;
        }
        BOOL v7 = v6 < 4;
        v8 += 6;
        ++v6;
      }
      while (v6 != 5);
      if (v7 && (lsim12_02StopTimer(0x7FFF, 1) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ConnectTimerStopFailed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "lsim09_21TcpIpConnectCnf");
        LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
      }
      uint64_t v11 = 0;
      char v12 = 1;
      while (1)
      {
        char v13 = v12;
        uint64_t v14 = &g_SuplInstance[74 * v11];
        int v16 = v14[2];
        uint64_t v15 = v14 + 2;
        if (v16 == 2) {
          break;
        }
        char v12 = 0;
        uint64_t v11 = 1;
        if ((v13 & 1) == 0) {
          goto LABEL_27;
        }
      }
      uint64_t v19 = &g_SuplInstance[74 * v11];
      if (!*((unsigned char *)v19 + 281))
      {
LABEL_27:
        lsim09_04SendConnApiStatus(*(_DWORD *)(a1 + 12), 4, 2);
        lsim09_02TcpIpDisconnectReq(*(_DWORD *)(a1 + 12));
        goto LABEL_31;
      }
      if (GN_SUPL_Connect_Ind_In(*v19, 6))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v20 = mach_continuous_time();
          unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 68, "lsim09_21TcpIpConnectCnf", *v19);
          LbsOsaTrace_WriteLog(0xCu, __str, v21, 5, 1);
        }
        GN_SUPL_Handler();
        int v22 = 1;
      }
      else
      {
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
        int v22 = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In failed,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 87, "lsim09_21TcpIpConnectCnf", *v19);
          LbsOsaTrace_WriteLog(0xCu, __str, v25, 2, 1);
          int v22 = 0;
        }
      }
      *uint64_t v15 = 3;
      lsim09_04SendConnApiStatus(*(_DWORD *)(a1 + 12), v22, 2);
LABEL_31:
      uint64_t v26 = 0;
      char v27 = 1;
      while (1)
      {
        char v28 = v27;
        if (g_SuplInstance[74 * v26 + 2] == 1) {
          break;
        }
        char v27 = 0;
        uint64_t v26 = 1;
        if ((v28 & 1) == 0) {
          goto LABEL_40;
        }
      }
      if (BYTE1(g_SuplInstance[74 * v26 + 70])
        && strnlen((const char *)&g_SuplInstance[74 * v26 + 3] + 1, 0x100uLL))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PendingConn Found,SuplHandle,%u,SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "LSM", 73, "lsim09_21TcpIpConnectCnf", g_SuplInstance[74 * v26], v26);
          LbsOsaTrace_WriteLog(0xCu, __str, v30, 4, 1);
        }
        lsim09_11EstablishTcpIpSession(v26);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 87, "lsim09_21TcpIpConnectCnf", 258, *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(0xCu, __str, v18, 2, 1);
    }
  }
LABEL_40:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v31 = mach_continuous_time();
    unsigned __int16 v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "LSM", 73, "lsim09_21TcpIpConnectCnf");
    LbsOsaTrace_WriteLog(0xCu, __str, v32, 4, 1);
  }
  return 0;
}

size_t lsim09_02TcpIpDisconnectReq(int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim09_02TcpIpDisconnectReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  memset_s(__s, 0x118uLL, 0, 0x118uLL);
  __s[0] = 1;
  __s[1] = a1;
  __s[2] = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LINK_REQ =>DcCB,CLOSE,SuplHandle,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim09_02TcpIpDisconnectReq", a1, 0);
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  GNS_ExecuteDcCb(0, 280, (uint64_t)__s);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim09_02TcpIpDisconnectReq");
    return LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
  }
  return result;
}

void lsim09_11EstablishTcpIpSession(int a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)gnssOsa_Calloc("lsim09_11EstablishTcpIpSession", 263, 1, 0x114uLL);
  if (v2)
  {
    unsigned __int16 v3 = v2;
    uint64_t v4 = &g_SuplInstance[74 * a1];
    *(_DWORD *)uint64_t v2 = *v4;
    *((_DWORD *)v2 + 1) = (dword_26AE537A4 >> 13) & 1;
    v2[8] = *((unsigned char *)v4 + 12);
    *((_WORD *)v2 + 137) = *((_WORD *)v4 + 139);
    *((_DWORD *)v2 + 67) = v4[68];
    v2[272] = strnlen((const char *)v4 + 13, 0x100uLL);
    strncpy(v3 + 9, (const char *)v4 + 13, 0x100uLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%p,SuplInstanceIndex,%u,Secure,%u,AddrType,%u,Port,%d,Addr,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "LSM", 73, "lsim09_11EstablishTcpIpSession", &g_SuplInstance[74 * a1], a1, *((_DWORD *)v3 + 1), *((_DWORD *)v3 + 67), *((unsigned __int16 *)v3 + 137), v3 + 9);
      LbsOsaTrace_WriteLog(0xCu, __str, v6, 4, 1);
    }
    g_SuplInstance[74 * a1 + 2] = 2;
    int v7 = *v4;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim09_01TcpIpConnectReq");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    memset_s(&__s, 0x118uLL, 0, 0x118uLL);
    int __s = 0;
    v17[0] = v7;
    memcpy_s("lsim09_01TcpIpConnectReq", 122, v17, 0x114u, v3, 0x114uLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LINK_REQ =>DcCB,OPEN,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "lsim09_01TcpIpConnectReq", v7);
      LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
    }
    GNS_ExecuteDcCb(0, 280, (uint64_t)&__s);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim09_01TcpIpConnectReq");
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
    }
    if ((lsim12_01StartTimer((uint64_t)lsim09_26HandleConnectTimerExpiry, 0x7FFF, 0x7530u, 1) & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConnTmr,SuplHandle,%u,SuplSessionIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim09_11EstablishTcpIpSession", 1544, *v4, a1);
        LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
      }
    }
    free(v3);
  }
}

uint64_t lsim09_22TcpIpConnectErr(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim09_22TcpIpConnectErr");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (!a1) {
    goto LABEL_39;
  }
  if (!g_GnsDcCallback)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 87, "lsim09_22TcpIpConnectErr", 258, *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
    }
    goto LABEL_39;
  }
  unint64_t v4 = 0;
  BOOL v5 = 1;
  unsigned __int16 v6 = (_DWORD *)&qword_26AE534C8 + 1;
  do
  {
    if (*((unsigned char *)v6 - 16) && *(v6 - 1) == 0x7FFF && *v6 == 1) {
      break;
    }
    BOOL v5 = v4 < 4;
    v6 += 6;
    ++v4;
  }
  while (v4 != 5);
  if (v5 && (lsim12_02StopTimer(0x7FFF, 1) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ConnectTimerStopFailed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 87, "lsim09_22TcpIpConnectErr");
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_TCPIP_CONNECT_ERR,ErrorType,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim09_22TcpIpConnectErr", *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  uint64_t v11 = 0;
  char v12 = 1;
  while (1)
  {
    char v13 = v12;
    uint64_t v14 = &g_SuplInstance[74 * v11];
    int v16 = v14[2];
    unsigned __int16 v15 = v14 + 2;
    if (v16 == 2) {
      break;
    }
    char v12 = 0;
    uint64_t v11 = 1;
    if ((v13 & 1) == 0)
    {
      int v17 = 4;
      goto LABEL_30;
    }
  }
  if (!BYTE1(g_SuplInstance[74 * v11 + 70]))
  {
LABEL_29:
    int v17 = 0;
    goto LABEL_30;
  }
  int PpduCodeFromDcStatus = lsim09_05GetPpduCodeFromDcStatus(*(_DWORD *)(a1 + 16));
  *unsigned __int16 v15 = 0;
  unsigned __int16 v21 = &g_SuplInstance[74 * v11];
  if (!GN_SUPL_Connect_Ind_In(*v21, PpduCodeFromDcStatus))
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    int v17 = 0;
    if (!IsLoggingAllowed) {
      goto LABEL_30;
    }
    bzero(__str, 0x410uLL);
    uint64_t v25 = mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In failed,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 87, "lsim09_22TcpIpConnectErr", *v21);
    LbsOsaTrace_WriteLog(0xCu, __str, v26, 2, 1);
    goto LABEL_29;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 68, "lsim09_22TcpIpConnectErr", *v21);
    LbsOsaTrace_WriteLog(0xCu, __str, v23, 5, 1);
  }
  GN_SUPL_Handler();
  int v17 = 1;
LABEL_30:
  lsim09_04SendConnApiStatus(*(_DWORD *)(a1 + 12), v17, 2);
  uint64_t v27 = 0;
  char v28 = 1;
  while (1)
  {
    char v29 = v28;
    if (g_SuplInstance[74 * v27 + 2] == 1) {
      break;
    }
    char v28 = 0;
    uint64_t v27 = 1;
    if ((v29 & 1) == 0) {
      goto LABEL_39;
    }
  }
  if (BYTE1(g_SuplInstance[74 * v27 + 70])
    && strnlen((const char *)&g_SuplInstance[74 * v27 + 3] + 1, 0x100uLL))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v30 = mach_continuous_time();
      unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PendingConn Found,SuplHandle,%u,SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim09_22TcpIpConnectErr", g_SuplInstance[74 * v27], v27);
      LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
    }
    lsim09_11EstablishTcpIpSession(v27);
  }
LABEL_39:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v32 = mach_continuous_time();
    unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "LSM", 73, "lsim09_22TcpIpConnectErr");
    LbsOsaTrace_WriteLog(0xCu, __str, v33, 4, 1);
  }
  return 0;
}

uint64_t lsim09_05GetPpduCodeFromDcStatus(unsigned int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1 < 0x10) {
    return dword_22BB0EBD8[a1];
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
    return 1;
  }
  bzero(__str, 0x410uLL);
  uint64_t v3 = mach_continuous_time();
  unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 87, "lsim09_05GetPpduCodeFromDcStatus", 515, a1);
  uint64_t v2 = 1;
  LbsOsaTrace_WriteLog(0xCu, __str, v4, 2, 1);
  return v2;
}

uint64_t lsim09_23TcpIpDisconnectInd(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim09_23TcpIpDisconnectInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (g_GnsDcCallback)
    {
      uint64_t v4 = 0;
      char v5 = 1;
      while (1)
      {
        char v6 = v5;
        if (g_SuplInstance[74 * v4] == *(_DWORD *)(a1 + 12)) {
          break;
        }
        char v5 = 0;
        uint64_t v4 = 1;
        if ((v6 & 1) == 0)
        {
          LOBYTE(v4) = -1;
          break;
        }
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v9 = mach_continuous_time();
        unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_TCPIP_DISCONNECT_IND,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim09_23TcpIpDisconnectInd", *(_DWORD *)(a1 + 12));
        LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
      }
      unint64_t v11 = 0;
      BOOL v12 = 1;
      char v13 = (_DWORD *)&qword_26AE534C8 + 1;
      do
      {
        if (*((unsigned char *)v13 - 16) && *(v13 - 1) == 0xFFFF && *v13 == 2) {
          break;
        }
        BOOL v12 = v11 < 4;
        v13 += 6;
        ++v11;
      }
      while (v11 != 5);
      if (v12 && (lsim12_02StopTimer(0xFFFF, 2) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DisconnectTimerStopFailed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim09_23TcpIpDisconnectInd");
        LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
      }
      int v16 = *(_DWORD *)(a1 + 12);
      if ((_BYTE)v4 == 0xFF)
      {
        int v23 = 4;
      }
      else
      {
        int v17 = &g_SuplInstance[74 * v4];
        if (*v17 == v16
          && BYTE1(g_SuplInstance[74 * v4 + 70])
          && ((v18 = g_SuplInstance[74 * v4 + 2], v18 != 5) ? (BOOL v19 = v18 == 3) : (BOOL v19 = 1), v19))
        {
          int PpduCodeFromDcStatus = lsim09_05GetPpduCodeFromDcStatus(*(_DWORD *)(a1 + 16));
          if (GN_SUPL_Disconnect_Ind_In(*v17, PpduCodeFromDcStatus))
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v21 = mach_continuous_time();
              unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Disconnect_Ind_In successful,SuplHandle,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 68, "lsim09_23TcpIpDisconnectInd", *v17, PpduCodeFromDcStatus);
              LbsOsaTrace_WriteLog(0xCu, __str, v22, 5, 1);
            }
            GN_SUPL_Handler();
            int v23 = 1;
          }
          else
          {
            int v23 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v24 = mach_continuous_time();
              unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Disconnect_Ind_In failed,SuplHandle,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "LSM", 87, "lsim09_23TcpIpDisconnectInd", *v17, PpduCodeFromDcStatus);
              LbsOsaTrace_WriteLog(0xCu, __str, v25, 2, 1);
              int v23 = 0;
            }
          }
          lsim05_34DeleteSuplContext(v4);
          int v16 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          int v23 = 14;
        }
        g_SuplInstance[74 * v4 + 2] = 0;
      }
      lsim09_04SendConnApiStatus(v16, v23, 2);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataConn,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 87, "lsim09_23TcpIpDisconnectInd", 258, *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(0xCu, __str, v8, 2, 1);
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v26 = mach_continuous_time();
    unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "LSM", 73, "lsim09_23TcpIpDisconnectInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v27, 4, 1);
  }
  return 0;
}

size_t lsim09_26HandleConnectTimerExpiry(int a1, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim09_26HandleConnectTimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1 != 0x7FFF || a2 != 1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      goto LABEL_36;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Unexpected TimerId,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "lsim09_26HandleConnectTimerExpiry", a1, a2);
    int v11 = 2;
    goto LABEL_35;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  while (g_SuplInstance[74 * v6 + 2] != 2)
  {
    char v8 = v7;
    char v7 = 0;
    uint64_t v6 = 1;
    if ((v8 & 1) == 0) {
      goto LABEL_36;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 73, "lsim09_13HandleTcpConnectionFailure");
    LbsOsaTrace_WriteLog(0xCu, __str, v13, 4, 1);
  }
  uint64_t v14 = 0;
  char v15 = 1;
  while (1)
  {
    char v16 = v15;
    int v17 = &g_SuplInstance[74 * v14];
    int v19 = v17[2];
    int v18 = v17 + 2;
    if (v19 == 2) {
      break;
    }
    char v15 = 0;
    uint64_t v14 = 1;
    if ((v16 & 1) == 0) {
      goto LABEL_26;
    }
  }
  uint64_t v20 = &g_SuplInstance[74 * v14];
  if (GN_SUPL_Connect_Ind_In(*v20, 17))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In successful,SuplHandle,%u,PendIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "LSM", 68, "lsim09_13HandleTcpConnectionFailure", *v20, v14);
      LbsOsaTrace_WriteLog(0xCu, __str, v22, 5, 1);
    }
    GN_SUPL_Handler();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Connect_Ind_In failed,SuplHandle,%u,PendIndex,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "LSM", 87, "lsim09_13HandleTcpConnectionFailure", *v20, v14);
    LbsOsaTrace_WriteLog(0xCu, __str, v24, 2, 1);
  }
  if (g_SuplInstance[74 * v14 + 71] == 2) {
    lsim05_34DeleteSuplContext(v14);
  }
  *int v18 = 0;
LABEL_26:
  uint64_t v25 = 0;
  char v26 = 1;
  while (1)
  {
    char v27 = v26;
    if (g_SuplInstance[74 * v25 + 2] == 1) {
      break;
    }
    char v26 = 0;
    uint64_t v25 = 1;
    if ((v27 & 1) == 0) {
      goto LABEL_33;
    }
  }
  if (BYTE1(g_SuplInstance[74 * v25 + 70])
    && strnlen((const char *)&g_SuplInstance[74 * v25 + 3] + 1, 0x100uLL))
  {
    lsim09_11EstablishTcpIpSession(v25);
  }
LABEL_33:
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v28 = mach_continuous_time();
    size_t v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "LSM", 73, "lsim09_13HandleTcpConnectionFailure");
    int v11 = 4;
LABEL_35:
    LbsOsaTrace_WriteLog(0xCu, __str, v10, v11, 1);
  }
LABEL_36:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "LSM", 73, "lsim09_26HandleConnectTimerExpiry");
    return LbsOsaTrace_WriteLog(0xCu, __str, v31, 4, 1);
  }
  return result;
}

size_t lsim09_27HandleDisconnectTimerExpiry(int a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim09_27HandleDisconnectTimerExpiry");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1 == 0xFFFF && a2 == 2)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    while (1)
    {
      char v8 = v7;
      if (g_SuplInstance[74 * v6 + 2] == 5) {
        break;
      }
      char v7 = 0;
      uint64_t v6 = 1;
      if ((v8 & 1) == 0) {
        goto LABEL_19;
      }
    }
    int v11 = &g_SuplInstance[74 * v6];
    if (*((unsigned char *)v11 + 281))
    {
      if (GN_SUPL_Disconnect_Ind_In(*v11, 17))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v12 = mach_continuous_time();
          unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Disconnect_Ind_In Successful,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 68, "lsim09_12TcpIpDisconnectProcess", *v11);
          LbsOsaTrace_WriteLog(0xCu, __str, v13, 5, 1);
        }
        GN_SUPL_Handler();
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Disconnect_Ind_In failed,SuplHandle,%u,SuplInstanceIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim09_12TcpIpDisconnectProcess", *v11, v6);
        LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
      }
      lsim09_02TcpIpDisconnectReq(*v11);
      lsim05_34DeleteSuplContext(v6);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Unexpected TimerId,%u,Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "lsim09_27HandleDisconnectTimerExpiry", a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
  }
LABEL_19:
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim09_27HandleDisconnectTimerExpiry");
    return LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
  }
  return result;
}

uint64_t lsim09_31DisconnectSuplSession(int a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 > 1 || (uint64_t v1 = &g_SuplInstance[74 * a1], !*((unsigned char *)v1 + 281)))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInstanceIndex,%u\n", v8);
    return LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
  }
  lsim09_02TcpIpDisconnectReq(*v1);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 73, "lsim09_31DisconnectSuplSession", *v1);
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 4, 1);
  }
  g_SuplInstance[74 * a1 + 2] = 5;
  uint64_t result = lsim12_01StartTimer((uint64_t)lsim09_27HandleDisconnectTimerExpiry, 0xFFFF, 0x7D0u, 2);
  if ((result & 1) == 0)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DisConnTmr,SuplHandle,%u,SuplSessionIndex,%u\n", v6);
      return LbsOsaTrace_WriteLog(0xCu, __str, v7, 2, 1);
    }
  }
  return result;
}

void lsim09_32ConnectSUPLSession(int a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = &g_SuplInstance[74 * a1];
  if (v2[2] == 3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    size_t v4 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInstanceIndex,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 87, "lsim09_32ConnectSUPLSession", 2053, a1);
    int v5 = 2;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
    while (g_SuplInstance[74 * v6 + 2] != 2)
    {
      char v8 = v7;
      char v7 = 0;
      uint64_t v6 = 1;
      if ((v8 & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v9 = mach_continuous_time();
          unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim09_32ConnectSUPLSession", *v2);
          LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
        }
        lsim09_11EstablishTcpIpSession(a1);
        return;
      }
    }
    v2[2] = 1;
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v4 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Waiting for pending connections\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim09_32ConnectSUPLSession");
    int v5 = 4;
  }
  LbsOsaTrace_WriteLog(0xCu, __str, v4, v5, 1);
}

size_t lsim09_33SendDataReq(int a1, unsigned __int8 *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim09_33SendDataReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  memset_s(&__s, 0x118uLL, 0, 0x118uLL);
  int __s = a1;
  uint64_t v14 = a2;
  int v15 = a3;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SEND_DATA =>DcCB,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim09_33SendDataReq", a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  GNS_ExecuteDcCb(1, 24, (uint64_t)&__s);
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "lsim09_33SendDataReq");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

void lsim09_34SendClientSlpInfo(void)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)&__src[60] + 1) = 0u;
  *(_OWORD *)((char *)&__src[56] + 1) = 0u;
  *(_OWORD *)((char *)&__src[52] + 1) = 0u;
  *(_OWORD *)((char *)&__src[48] + 1) = 0u;
  *(_OWORD *)((char *)&__src[44] + 1) = 0u;
  *(_OWORD *)((char *)&__src[40] + 1) = 0u;
  *(_OWORD *)((char *)&__src[36] + 1) = 0u;
  *(_OWORD *)((char *)&__src[32] + 1) = 0u;
  *(_OWORD *)((char *)&__src[28] + 1) = 0u;
  *(_OWORD *)((char *)&__src[24] + 1) = 0u;
  *(_OWORD *)((char *)&__src[20] + 1) = 0u;
  *(_OWORD *)((char *)&__src[16] + 1) = 0u;
  *(_OWORD *)((char *)&__src[12] + 1) = 0u;
  *(_OWORD *)((char *)&__src[8] + 1) = 0u;
  *(_OWORD *)((char *)&__src[4] + 1) = 0u;
  *(_OWORD *)((char *)__src + 1) = 0u;
  if (!byte_26AE5322D)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfo\n");
LABEL_12:
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 2, 1);
    return;
  }
  if (!byte_26AE5322E) {
    return;
  }
  uint64_t v0 = 0;
  char v1 = byte_26AE53231;
  for (char i = 1; ; char i = 0)
  {
    char v3 = i;
    if (*((unsigned __int8 *)&g_LsimUserConfig + 268 * v0) == byte_26AE53231) {
      break;
    }
    uint64_t v0 = 1;
    if ((v3 & 1) == 0) {
      return;
    }
  }
  size_t v5 = strnlen((const char *)&g_LsimUserConfig + 268 * v0 + 8, 0x100uLL);
  if (v5 >= 0x100)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimSlpAddrLen,%u\n", v10);
    goto LABEL_12;
  }
  int v6 = *((_DWORD *)&g_LsimUserConfig + 67 * v0 + 1);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    LOBYTE(__src[0]) = v1;
    __src[65] = v6;
    LOBYTE(__src[66]) = v5;
    HIWORD(__src[66]) = *((_WORD *)&g_LsimUserConfig + 134 * v0 + 132);
    strncpy_s((char *)__src + 1, 0x100u, (const char *)&g_LsimUserConfig + 268 * v0 + 8, v5);
    memset_s(__s, 0x118uLL, 0, 0x118uLL);
    memcpy(__s, __src, 0x10CuLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SLP_INFO =>DcCB,Addr,%s,Port,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim09_34SendClientSlpInfo", (const char *)__src + 1, HIWORD(__src[66]));
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
    }
    GNS_ExecuteDcCb(2, 268, (uint64_t)__s);
  }
}

size_t lsim09_41DcCbInit(size_t result)
{
  char v1 = (uint64_t (*)(void, void, void))result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result) {
    goto LABEL_2;
  }
  if (g_GnsDcCallback)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim09_41DcCbInit", 513);
      size_t result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsDcCallbacuint64_t k = v1;
    return result;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim09_41DcCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

void lsim09_50ConnMgmtDeInit(void)
{
  unint64_t v0 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  BOOL v1 = 1;
  uint64_t v2 = (_DWORD *)&qword_26AE534C8 + 1;
  do
  {
    if (*((unsigned char *)v2 - 16) && *(v2 - 1) == 0x7FFF && *v2 == 1) {
      break;
    }
    BOOL v1 = v0 < 4;
    v2 += 6;
    ++v0;
  }
  while (v0 != 5);
  if (v1 && (lsim12_02StopTimer(0x7FFF, 1) & 1) == 0 && LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v3 = mach_continuous_time();
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ConnectTimerStopFailed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 87, "lsim09_50ConnMgmtDeInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 2, 1);
  }
  unint64_t v5 = 0;
  BOOL v6 = 1;
  uint64_t v7 = (_DWORD *)&qword_26AE534C8 + 1;
  do
  {
    if (*((unsigned char *)v7 - 16) && *(v7 - 1) == 0xFFFF && *v7 == 2) {
      break;
    }
    BOOL v6 = v5 < 4;
    v7 += 6;
    ++v5;
  }
  while (v5 != 5);
  if (v6 && (lsim12_02StopTimer(0xFFFF, 2) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DisconnectTimerStopFailed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "lsim09_50ConnMgmtDeInit");
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
    }
  }
}

BOOL GNS_DcInitialize(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_DcInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  unsigned __int16 v4 = gnssOsa_Calloc("GNS_DcInitialize", 999, 1, 0x18uLL);
  unint64_t v5 = v4;
  if (v4)
  {
    v4[3] = 6;
    *((void *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_DcInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

uint64_t GNS_DcSuplInit(unsigned __int8 *a1, size_t a2, char a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_DcSuplInit");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a1 && (a2 - 0x10000) > 0xFFFF0000)
  {
    uint64_t v8 = gnssOsa_Calloc("GNS_DcSuplInit", 1044, 1, 0x20uLL);
    if (v8)
    {
      unsigned __int16 v9 = v8;
      uint64_t v10 = gnssOsa_Calloc("GNS_DcSuplInit", 1053, 1, a2);
      void v9[2] = v10;
      if (v10)
      {
        memcpy_s("GNS_DcSuplInit", 1064, v10, a2, a1, a2);
        *((_DWORD *)v9 + 3) = a2;
        *((unsigned char *)v9 + 24) = a3;
        AgpsSendFsmMsg(131, 131, 8621827, v9);
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_DcSuplInit");
        uint64_t v13 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
        return v13;
      }
      free(v9);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v18 = mach_continuous_time();
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "LSM", 73, "GNS_DcSuplInit");
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    }
    return 6;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pdu,Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "GNS_DcSuplInit", 513, a2);
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_DcSuplInit");
      LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
    }
    return 2;
  }
}

uint64_t GNS_DcSuplPdu(int a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_DcSuplPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (a2 && (a3 - 0x10000) > 0xFFFF0000)
  {
    uint64_t v8 = gnssOsa_Calloc("GNS_DcSuplPdu", 1103, 1, 0x20uLL);
    if (v8)
    {
      unsigned __int16 v9 = v8;
      v8[3] = a1;
      uint64_t v10 = gnssOsa_Calloc("GNS_DcSuplPdu", 1112, 1, a3);
      *((void *)v9 + 3) = v10;
      if (v10)
      {
        memcpy_s("GNS_DcSuplPdu", 1124, v10, a3, a2, a3);
        void v9[4] = a3;
        AgpsSendFsmMsg(131, 131, 8622595, v9);
        if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
          return 1;
        }
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_DcSuplPdu");
        uint64_t v13 = 1;
        LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
        return v13;
      }
      free(v9);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        goto LABEL_17;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
LABEL_17:
      bzero(__str, 0x410uLL);
      unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v18, "LSM", 73, "GNS_DcSuplPdu");
      LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    }
    return 6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pdu,Length,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "GNS_DcSuplPdu", 513, a3, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v15, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_DcSuplPdu");
    LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
  }
  return 2;
}

uint64_t GNS_DcLinkRsp(int a1, int a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_DcLinkRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplHandle,%u,RespType,%u,ErrType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_DcLinkRsp", a2, a1, a3);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  if ((a1 - 2) < 3)
  {
    uint64_t v10 = gnssOsa_Calloc("GNS_DcLinkRsp", 1202, 1, 0x14uLL);
    uint64_t v11 = v10;
    if (v10)
    {
      *((_DWORD *)v10 + 3) = a2;
      *((_DWORD *)v10 + 4) = a3;
      int v12 = 8622339;
      goto LABEL_14;
    }
LABEL_17:
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, (int)v11)) {
      return 6;
    }
LABEL_18:
    bzero(__str, 0x410uLL);
    unint64_t v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v18, "LSM", 73, "GNS_DcLinkRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v19, 4, 1);
    return 6;
  }
  if (a1 == 1)
  {
    uint64_t v14 = gnssOsa_Calloc("GNS_DcLinkRsp", 1181, 1, 0x14uLL);
    uint64_t v11 = v14;
    if (!v14) {
      goto LABEL_17;
    }
    *((_DWORD *)v14 + 3) = a2;
    *((_DWORD *)v14 + 4) = a3;
    int v12 = 8622082;
LABEL_14:
    AgpsSendFsmMsg(131, 131, v12, v11);
    if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v15 = mach_continuous_time();
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_DcLinkRsp");
    uint64_t v17 = 1;
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
    return v17;
  }
  if (!a1)
  {
    uint64_t v13 = gnssOsa_Calloc("GNS_DcLinkRsp", 1162, 1, 0x10uLL);
    uint64_t v11 = v13;
    if (!v13)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0)) {
        return 6;
      }
      goto LABEL_18;
    }
    *((_DWORD *)v13 + 3) = a2;
    int v12 = 8622081;
    goto LABEL_14;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespType,%u,SuplHandle,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 87, "GNS_DcLinkRsp", 515, a1, a2);
    LbsOsaTrace_WriteLog(0xCu, __str, v21, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v22 = mach_continuous_time();
    unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "LSM", 73, "GNS_DcLinkRsp");
    LbsOsaTrace_WriteLog(0xCu, __str, v23, 4, 1);
  }
  return 2;
}

uint64_t CUCFGetNumOfDigits(unint64_t a1)
{
  if (a1 >= 0xA)
  {
    if (a1 >= 0x64)
    {
      if (a1 >= 0x3E8)
      {
        if (a1 >> 4 >= 0x271)
        {
          if (a1 >> 5 >= 0xC35)
          {
            if (a1 >= 0xF4240)
            {
              if (a1 >= 0x989680)
              {
                if (a1 >= 0x5F5E100)
                {
                  if (a1 < 0x3B9ACA00) {
                    return 9;
                  }
                  else {
                    return 10;
                  }
                }
                else
                {
                  return 8;
                }
              }
              else
              {
                return 7;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 5;
          }
        }
        else
        {
          return 4;
        }
      }
      else
      {
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    return 1;
  }
}

uint64_t CUCFGetOpenTypeObject(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  for (char i = (unsigned __int8 **)(a2 + 24); ; char i = (unsigned __int8 **)(v9 + 3))
  {
    unsigned __int16 v9 = *i;
    int v10 = **i;
    if (v10 != 96 && v10 != 160 && v10 != 128) {
      break;
    }
  }
  switch(v10 & 0x1F)
  {
    case 1:
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v16 = *(void *)(a2 + 40);
      do
      {
        if (*(void *)(v6 + 16) == *a3) {
          goto LABEL_87;
        }
        v6 += 32;
        --v16;
      }
      while (v16);
      goto LABEL_17;
    case 2:
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v16 = *(void *)(a2 + 40);
      while (*(_DWORD *)a3 != *(void *)(v6 + 16))
      {
        v6 += 32;
        if (!--v16) {
          goto LABEL_17;
        }
      }
      goto LABEL_87;
    case 3:
      uint64_t v43 = a2;
      double v44 = a4;
      if (!v7) {
        goto LABEL_16;
      }
      uint64_t v17 = (const void *)*((void *)a3 + 1);
      size_t v18 = *(unsigned int *)a3;
      do
      {
        unsigned __int16 v19 = *(const void **)(v6 + 16);
        if (v19)
        {
          int v20 = strnlen(*(const char **)(v6 + 16), 0x400uLL);
          if (v18 == v20)
          {
            if (!v20) {
              goto LABEL_69;
            }
            if (v18)
            {
              unsigned __int16 v21 = MMSAlloc(a1, v18);
              memcpy_s("posp_memcpy", 29, v21, v18, v19, v18);
              for (uint64_t j = 0; j != v18; ++j)
                *((unsigned char *)v21 + j) -= 48;
              if (v17 && v21)
              {
                int v23 = memcmp(v21, v17, v18);
                MMSFree(a1, v21, (void *)v18);
                if (!v23) {
                  goto LABEL_69;
                }
              }
              else
              {
                MMSFree(a1, v21, (void *)v18);
              }
            }
          }
        }
        v6 += 32;
        --v7;
      }
      while (v7);
      goto LABEL_16;
    case 4:
      uint64_t v43 = a2;
      double v44 = a4;
      if (!v7) {
        goto LABEL_16;
      }
      __s2 = (void *)*((void *)a3 + 1);
      size_t v24 = *(unsigned int *)a3;
      break;
    case 5:
      goto LABEL_70;
    case 6:
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v43 = a2;
      double v44 = a4;
      while (1)
      {
        unsigned int v37 = (void *)(*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
        BOOL v38 = CUCFEqualObjectOBJECT_IDENTIFIER(v37, (uint64_t ***)a3);
        CUCFFreeObject(a1, v9, (uint64_t)v37);
        if (v38) {
          break;
        }
        v6 += 32;
        if (!--v7) {
          goto LABEL_16;
        }
      }
      a4 = v44;
      uint64_t v41 = *(void *)(v43 + 40);
      goto LABEL_89;
    case 0xA:
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v16 = *(void *)(a2 + 40);
      while (*(void *)(v6 + 16) != *(_DWORD *)a3)
      {
        v6 += 32;
        if (!--v16) {
          goto LABEL_17;
        }
      }
LABEL_87:
      uint64_t v41 = *(void *)(a2 + 40);
      uint64_t v7 = v16;
LABEL_89:
      *a4 = v41 - v7;
      return v6;
    case 0x12:
    case 0x13:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1A:
      uint64_t v11 = (const void *)(*(void *)a3 + 1);
      uint64_t v43 = a2;
      double v44 = a4;
      if (*(void *)a3)
      {
        uint64_t v12 = (int)strnlen(*(const char **)a3, 0x400uLL) - 1;
        if (!v7) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v12 = -2;
        if (!v7) {
          goto LABEL_16;
        }
      }
      while (1)
      {
        uint64_t v13 = *(const void **)(v6 + 16);
        if (v13)
        {
          unsigned int v14 = strnlen(*(const char **)(v6 + 16), 0x400uLL);
          if (v12 == v14 && (!v14 || !memcmp(v13, v11, v14))) {
            break;
          }
        }
        v6 += 32;
        if (!--v7) {
          goto LABEL_16;
        }
      }
LABEL_69:
      a2 = v43;
      a4 = v44;
LABEL_70:
      *a4 = *(void *)(a2 + 40) - v7;
      if (!v7) {
        return 0;
      }
      return v6;
    default:
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v43 = a2;
      double v44 = a4;
      do
      {
        uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
        int v40 = CUCFEqualObject(a1, v9, v39, (uint64_t ***)a3);
        CUCFFreeObject(a1, v9, (uint64_t)v39);
        if (v40)
        {
          void *v44 = *(void *)(v43 + 40) - v7;
          return v6;
        }
        v6 += 32;
        --v7;
      }
      while (v7);
LABEL_16:
      a4 = v44;
      uint64_t v7 = *(void *)(v43 + 40);
LABEL_17:
      *a4 = v7;
      return 0;
  }
  while (1)
  {
    uint64_t v25 = *(void *)(v6 + 16);
    if (v25) {
      int v26 = strnlen(*(const char **)(v6 + 16), 0x400uLL);
    }
    else {
      int v26 = -1;
    }
    if (v24 == (v26 + 1) >> 1)
    {
      if ((v26 + 1) < 2) {
        goto LABEL_69;
      }
      if (v24)
      {
        char v27 = MMSAlloc(a1, v24);
        uint64_t v28 = v27;
        unint64_t v29 = 0;
        uint64_t v30 = v27;
        do
        {
          unsigned int v31 = *(unsigned __int8 *)(v25 + v29);
          if (v31 >= 0x41) {
            char v32 = 9;
          }
          else {
            char v32 = 0;
          }
          char v33 = v32 + v31;
          *uint64_t v30 = 16 * v33;
          unsigned int v34 = *(unsigned __int8 *)(v25 + v29 + 1);
          if (v34 >= 0x41) {
            char v35 = -55;
          }
          else {
            char v35 = -48;
          }
          *v30++ = (v35 + v34) | (16 * v33);
          v29 += 2;
        }
        while (v29 < 2 * v24);
        if (__s2 && v27)
        {
          int v36 = memcmp(v27, __s2, v24);
          MMSFree(a1, v28, (void *)v24);
          if (!v36) {
            goto LABEL_69;
          }
          goto LABEL_67;
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      MMSFree(a1, v28, (void *)v24);
    }
LABEL_67:
    v6 += 32;
    if (!--v7) {
      goto LABEL_16;
    }
  }
}

BOOL CUCFEqualObjectOBJECT_IDENTIFIER(void *a1, uint64_t ***a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *((unsigned int *)a2 + 4);
  if (v2 != v3) {
    return 0;
  }
  if (v3)
  {
    BOOL v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = v7;
      unsigned __int16 v9 = *a2;
      if (*a2)
      {
        while (--v8)
        {
          unsigned __int16 v9 = (uint64_t **)*v9;
          if (!v9) {
            goto LABEL_9;
          }
        }
        uint64_t v6 = *((int *)v9 + 2);
      }
LABEL_9:
      if (*(void *)(*a1 + 8 * v5) != v6) {
        break;
      }
      ++v5;
      ++v7;
      BOOL v4 = v5 >= v2;
    }
    while (v5 != v2);
  }
  else
  {
    return 1;
  }
  return v4;
}

void CUCFFreeObject(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  while (1)
  {
    unsigned int v5 = *(unsigned __int8 *)a2;
    if (v5 > 0x70)
    {
      if (v5 != 128 && v5 != 160)
      {
        if (v5 != 113)
        {
LABEL_35:
          CUCFErrorHandler(a1, 16);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if (*(unsigned __int8 *)a2 <= 0x59u)
    {
      if (*(unsigned __int8 *)a2 > 0x3Fu)
      {
        switch(*(unsigned char *)a2)
        {
          case '@':
LABEL_15:
            CUCFFreeObject(a1, *(void *)(a2[4] + 32 * *(void *)(a3 + 8)));
LABEL_40:
            a1 = v4;
            uint64_t v6 = (void *)a3;
            uint64_t v7 = 16;
            goto LABEL_26;
          case 'A':
            goto LABEL_35;
          case 'B':
LABEL_19:
            uint64_t v6 = (void *)a3;
            uint64_t v7 = 4;
            goto LABEL_26;
          case 'C':
          case 'D':
            goto LABEL_23;
          default:
            if (v5 - 82 >= 2 && v5 != 86) {
              goto LABEL_35;
            }
            goto LABEL_23;
        }
      }
      switch(*(unsigned char *)a2)
      {
        case 1:
          uint64_t v6 = (void *)a3;
          uint64_t v7 = 1;
          goto LABEL_26;
        case 2:
          goto LABEL_19;
        case 3:
        case 4:
        case 0x12:
        case 0x13:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x1A:
          goto LABEL_23;
        case 5:
          return;
        case 6:
          MMSFree(a1, *(void **)a3, (void *)(8 * *(void *)(a3 + 8)));
          goto LABEL_40;
        case 7:
        case 8:
        case 9:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x14:
        case 0x15:
        case 0x19:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
          goto LABEL_35;
        case 0xA:
          uint64_t v6 = (void *)a3;
          uint64_t v7 = 8;
          goto LABEL_26;
        case 0x10:
        case 0x11:
          CUCFFreeObjectStruct(a1, a2, a3);
          break;
        case 0x20:
          goto LABEL_15;
        default:
          if (v5 == 48 || v5 == 49) {
            goto LABEL_31;
          }
          goto LABEL_35;
      }
      return;
    }
    if (v5 != 96) {
      break;
    }
LABEL_8:
    a2 = (void *)a2[3];
  }
  if (v5 != 90)
  {
    if (v5 != 112) {
      goto LABEL_35;
    }
LABEL_31:
    CUCFFreeObjectSEQUENCE_OF(a1, (uint64_t)a2, a3);
    return;
  }
LABEL_23:
  if (!*(unsigned char *)(a3 + 16)) {
    MMSFree(a1, *(void **)a3, *(void **)(a3 + 8));
  }
  a1 = v4;
  uint64_t v6 = (void *)a3;
  uint64_t v7 = 24;
LABEL_26:

  MMSFree(a1, v6, (void *)v7);
}

uint64_t CUCFEqualObject(uint64_t a1, void *a2, void *a3, uint64_t ***a4)
{
  uint64_t v7 = a1;
  v43[1] = *(void **)MEMORY[0x263EF8340];
  unsigned int v8 = *(unsigned __int8 *)a2;
  if (v8 <= 0x3F)
  {
    switch(*(unsigned char *)a2)
    {
      case 1:
        int v19 = *(unsigned __int8 *)a4;
        int v20 = *(unsigned __int8 *)a3;
        return v20 == v19;
      case 2:
        goto LABEL_35;
      case 3:
        goto LABEL_36;
      case 4:
        goto LABEL_40;
      case 5:
        return 1;
      case 6:
        uint64_t result = CUCFEqualObjectOBJECT_IDENTIFIER(a3, a4);
        if (result) {
          return 1;
        }
        return result;
      case 7:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x14:
      case 0x15:
      case 0x19:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        goto LABEL_73;
      case 0xA:
        return *a3 == *(_DWORD *)a4;
      case 0x10:
      case 0x11:
        v43[0] = *(void **)a3;
        return (!a2[7] || CUCFEqualObjectStructComps(a1, a2, 1, v43, (uint64_t)a4))
            && (!a2[8] || CUCFEqualObjectStructComps(v7, a2, 2, v43, (uint64_t)a4))
            && (!a2[9] || CUCFEqualObjectStructComps(v7, a2, 3, v43, (uint64_t)a4));
      case 0x12:
      case 0x13:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x1A:
        unsigned __int16 v9 = (void *)*a3;
        uint64_t v10 = a3[1];
        uint64_t v11 = *a4;
        if (*a4)
        {
          uint64_t v12 = (int)strnlen((const char *)*a4, 0x400uLL) - 1;
          if (!v9) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = -2;
          if (!v9) {
            return 0;
          }
        }
        return !memcmp(v9, (char *)v11 + 1, v12) && v10 == v12;
      case 0x20:
        switch(*(_DWORD *)(a2[1] + 40))
        {
          case 1:
            int v35 = *(unsigned __int8 *)a4;
            break;
          case 2:
            int v35 = *(__int16 *)a4;
            break;
          default:
            int v35 = *(_DWORD *)a4;
            break;
        }
        uint64_t v41 = a2[5];
        if (!v41) {
          return 0;
        }
        uint64_t v42 = (void *)(a2[4] + 24);
        break;
      default:
        if (v8 == 48) {
          goto LABEL_70;
        }
        if (v8 == 49) {
          goto LABEL_48;
        }
        goto LABEL_73;
    }
    while (*((unsigned char *)v42 - 8) == 5 || *v42 != v35)
    {
      uint64_t result = 0;
      v42 += 4;
      if (!--v41) {
        return result;
      }
    }
    if (a3[1] == v35)
    {
      uint64_t v17 = *(v42 - 3);
      goto LABEL_120;
    }
    return 0;
  }
  if (*(unsigned __int8 *)a2 <= 0x5Fu)
  {
    switch(*(unsigned char *)a2)
    {
      case '@':
        uint64_t v13 = (uint64_t *)a2[4];
        uint64_t v14 = a2[5];
        switch(*(_DWORD *)(a2[1] + 40))
        {
          case 1:
            int v15 = *(unsigned __int8 *)a4;
            break;
          case 2:
            int v15 = *(__int16 *)a4;
            break;
          default:
            int v15 = *(_DWORD *)a4;
            break;
        }
        if (!v14) {
          return 0;
        }
        break;
      case 'A':
        goto LABEL_73;
      case 'B':
LABEL_35:
        int v19 = *(_DWORD *)a4;
        int v20 = *(_DWORD *)a3;
        return v20 == v19;
      case 'C':
LABEL_36:
        size_t v21 = a3[1];
        if (v21 != *(_DWORD *)a4) {
          return 0;
        }
        uint64_t result = 0;
        uint64_t v22 = a4[1];
        if (!v22) {
          return result;
        }
        int v23 = (void *)*a3;
        if (!*a3) {
          return result;
        }
        return !memcmp(v23, v22, v21);
      case 'D':
LABEL_40:
        if (a3[1] != *(_DWORD *)a4) {
          return 0;
        }
        uint64_t result = 0;
        uint64_t v22 = a4[1];
        if (!v22) {
          return result;
        }
        int v23 = (void *)*a3;
        if (!*a3) {
          return result;
        }
        size_t v21 = a3[1];
        return !memcmp(v23, v22, v21);
      default:
        JUMPOUT(0);
    }
    while (v13[3] != v15)
    {
      uint64_t result = 0;
      v13 += 4;
      if (!--v14) {
        return result;
      }
    }
    if (a3[1] == v15)
    {
      uint64_t v17 = *v13;
LABEL_120:
      a1 = v7;
LABEL_33:
      uint64_t result = CUCFEqualObject(a1, v17);
      if (!result) {
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(unsigned __int8 *)a2 > 0x70u)
  {
    if (v8 != 113)
    {
      if (v8 != 128 && v8 != 160) {
        goto LABEL_73;
      }
LABEL_32:
      uint64_t v17 = a2[3];
      goto LABEL_33;
    }
LABEL_48:
    rsize_t v24 = *((unsigned int *)a4 + 4);
    if (a3[1] == v24)
    {
      uint64_t v25 = MMSAlloc(a1, *((unsigned int *)a4 + 4));
      memset_s(v25, v24, 0, v24);
      if (!v24)
      {
LABEL_69:
        MMSFree(v7, v25, (void *)v24);
        return 1;
      }
      for (uint64_t i = 0; i != v24; ++i)
      {
        char v27 = *a4;
        if (*a4)
        {
          uint64_t v28 = 0;
          while (1)
          {
            uint64_t v29 = (uint64_t)v27[1];
            if (v29 >= 1) {
              break;
            }
LABEL_58:
            char v27 = (uint64_t **)*v27;
            if (!v27) {
              goto LABEL_59;
            }
          }
          uint64_t v30 = v29 + v28;
          while (i != v28)
          {
            ++v28;
            if (!--v29)
            {
              uint64_t v28 = v30;
              goto LABEL_58;
            }
          }
        }
LABEL_59:
        uint64_t v31 = 0;
        while (*((unsigned char *)v25 + v31) || !CUCFEqualObject(v7, a2[3]))
        {
          if (v24 == ++v31) {
            goto LABEL_65;
          }
        }
        *((unsigned char *)v25 + v31) = 1;
LABEL_65:
        ;
      }
      uint64_t v32 = 0;
      while (*((unsigned char *)v25 + v32))
      {
        if (v24 == ++v32) {
          goto LABEL_69;
        }
      }
      MMSFree(v7, v25, (void *)v24);
    }
    return 0;
  }
  if (v8 == 96) {
    goto LABEL_32;
  }
  if (v8 != 112)
  {
LABEL_73:
    CUCFErrorHandler(a1, 16);
    return 1;
  }
LABEL_70:
  int v33 = *(_DWORD *)a2[1];
  if (v33 == 181)
  {
    uint64_t v34 = *((unsigned int *)a4 + 4);
  }
  else
  {
    if (v33 != 182)
    {
      CUCFErrorHandler(a1, 15);
      return !a3[1];
    }
    uint64_t v34 = *(int *)a4;
  }
  if (a3[1] != v34) {
    return 0;
  }
  if (!v34) {
    return 1;
  }
  uint64_t v36 = 0;
  for (uint64_t j = 1; ; ++j)
  {
    int v38 = *(_DWORD *)a2[1];
    if (v38 != 182)
    {
      if (v38 == 181)
      {
        uint64_t v39 = *a4;
        for (k = j; v39; uint64_t v39 = (uint64_t **)*v39)
        {
          if (!--k) {
            break;
          }
        }
      }
      else
      {
        CUCFErrorHandler(v7, 15);
      }
    }
    uint64_t result = CUCFEqualObject(v7, a2[3]);
    if (!result) {
      break;
    }
    if (++v36 == v34) {
      return 1;
    }
  }
  return result;
}

void SDLFinalizeValue(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v6 = *a2;
      if (v6 <= 0x70) {
        break;
      }
      if (v6 != 128 && v6 != 160)
      {
        if (v6 == 113) {
          goto LABEL_42;
        }
        return;
      }
LABEL_7:
      a2 = (unsigned __int8 *)*((void *)a2 + 3);
    }
    if (*a2 <= 0x3Fu) {
      break;
    }
    if (v6 == 96) {
      goto LABEL_7;
    }
    if (v6 != 64)
    {
      if (v6 != 112) {
        return;
      }
LABEL_46:
      int v20 = **((_DWORD **)a2 + 1);
      if (v20 == 181)
      {
        uint64_t v21 = a3[4];
        if (!a3[4]) {
          return;
        }
      }
      else
      {
        if (v20 != 182)
        {
          CUCFErrorHandler(a1, 15);
          return;
        }
        uint64_t v21 = *a3;
        if (!*a3) {
          return;
        }
      }
      uint64_t v22 = 0;
      uint64_t v23 = 1;
      while (2)
      {
        uint64_t v24 = *((void *)a2 + 1);
        if (*(_DWORD *)v24 == 182)
        {
          char v27 = (char *)a3 + *(unsigned int *)(v24 + 36) + v22 * *(unsigned int *)(*(void *)(v24 + 24) + 8);
          goto LABEL_61;
        }
        if (*(_DWORD *)v24 == 181)
        {
          uint64_t v25 = *(void **)a3;
          uint64_t v26 = v23;
          if (*(void *)a3)
          {
            while (--v26)
            {
              uint64_t v25 = (void *)*v25;
              if (!v25) {
                goto LABEL_60;
              }
            }
            char v27 = (char *)v25 + *(unsigned int *)(v24 + 36);
LABEL_61:
            SDLFinalizeValue(a1, *((void *)a2 + 3), v27);
            ++v22;
            ++v23;
            if (v22 == v21) {
              return;
            }
            continue;
          }
        }
        else
        {
          CUCFErrorHandler(a1, 15);
        }
        break;
      }
LABEL_60:
      char v27 = 0;
      goto LABEL_61;
    }
    uint64_t v7 = *((void *)a2 + 1);
    unsigned int v8 = (unsigned __int8 **)*((void *)a2 + 4);
    uint64_t v10 = *((void *)a2 + 5);
    switch(*(_DWORD *)(v7 + 40))
    {
      case 1:
        int v11 = *(unsigned __int8 *)a3;
        break;
      case 2:
        int v11 = *(__int16 *)a3;
        break;
      default:
        int v11 = *a3;
        break;
    }
    if (!v10) {
      return;
    }
    while (v8[3] != (unsigned __int8 *)v11)
    {
      v8 += 4;
      if (!--v10) {
        return;
      }
    }
LABEL_29:
    a3 = (int *)((char *)a3 + *(unsigned int *)(v7 + 36));
    a2 = *v8;
  }
  if (*a2 <= 0x2Fu)
  {
    if (v6 - 16 < 2)
    {
      uint64_t v13 = *((void *)a2 + 7);
      if (v13) {
        SDLFinalizeValueStructComps(a1, (uint64_t)a2, *((void *)a2 + 3), v13, (uint64_t)a3, 1);
      }
      uint64_t v14 = *((void *)a2 + 8);
      if (v14) {
        SDLFinalizeValueStructComps(a1, (uint64_t)a2, *((void *)a2 + 4), v14, (uint64_t)a3, 0);
      }
      uint64_t v15 = *((void *)a2 + 9);
      if (v15)
      {
        uint64_t v16 = *((void *)a2 + 5);
        SDLFinalizeValueStructComps(a1, (uint64_t)a2, v16, v15, (uint64_t)a3, 1);
      }
      return;
    }
    if (v6 != 32) {
      return;
    }
    uint64_t v7 = *((void *)a2 + 1);
    unsigned int v8 = (unsigned __int8 **)*((void *)a2 + 4);
    switch(*(_DWORD *)(v7 + 40))
    {
      case 1:
        int v9 = *(unsigned __int8 *)a3;
        break;
      case 2:
        int v9 = *(__int16 *)a3;
        break;
      default:
        int v9 = *a3;
        break;
    }
    uint64_t v12 = *((void *)a2 + 5);
    if (!v12) {
      return;
    }
    while (*((unsigned char *)v8 + 16) == 5 || v8[3] != (unsigned __int8 *)v9)
    {
      v8 += 4;
      if (!--v12) {
        return;
      }
    }
    goto LABEL_29;
  }
  if (v6 == 48) {
    goto LABEL_46;
  }
  if (v6 == 49)
  {
LABEL_42:
    uint64_t v17 = *(int **)a3;
    uint64_t v18 = *((void *)a2 + 1);
    memset_s(a3, 0x18uLL, 0, 0x18uLL);
    *((unsigned char *)a3 + 20) = 8;
    if (v17)
    {
      do
      {
        SDLFinalizeValue(a1, *((void *)a2 + 3), v17 + 4);
        GenBag_Incl2(v17 + 4, (char *)a3, v18);
        GenericFreeSort((void *)v17 + 2, *(void *)(v18 + 24));
        int v19 = *(int **)v17;
        free(v17);
        uint64_t v17 = v19;
      }
      while (v19);
    }
  }
}

uint64_t SDLFinalizeValueStructComps(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = result;
  int v11 = (uint64_t *)(a3 + 24);
  do
  {
    unsigned int v12 = *((unsigned __int8 *)v11 - 8);
    if (v12 < 2)
    {
      if (a6)
      {
        uint64_t v14 = *(void *)(*(void *)(a2 + 8) + 24);
        uint64_t v15 = *v11;
      }
      else
      {
LABEL_11:
        if (!a5) {
          goto LABEL_14;
        }
LABEL_12:
        uint64_t v14 = *(void *)(*(void *)(a2 + 8) + 24);
        uint64_t v15 = *v11;
        if (*(unsigned char *)(a5 + **(unsigned int **)(v14 + 24 * *v11 + 16)) != 1) {
          goto LABEL_14;
        }
      }
      uint64_t result = SDLFinalizeValue(v10, *(v11 - 3), a5 + *(unsigned int *)(v14 + 24 * v15 + 8));
      goto LABEL_14;
    }
    if (v12 == 2) {
      goto LABEL_11;
    }
    if (v12 == 3 && a5 != 0) {
      goto LABEL_12;
    }
LABEL_14:
    v11 += 4;
    --a4;
  }
  while (a4);
  return result;
}

void CUCFFreeObjectStruct(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v6 = (void *)a2[3];
  uint64_t v7 = *(void **)a3;
  unint64_t v8 = a2[7];
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      if (*v7)
      {
        CUCFFreeObject(a1, *v6);
        unint64_t v8 = a2[7];
      }
      v6 += 4;
      ++v7;
    }
  }
  unint64_t v10 = a2[8];
  if (v10)
  {
    unint64_t v11 = 0;
    unsigned int v12 = (unsigned __int8 *)(a2[4] + 16);
    do
    {
      if (*v7)
      {
        CUCFFreeObject(a1, *((void *)v12 - 2));
        unint64_t v10 = a2[8];
      }
      int v13 = *v12;
      v12 += 32;
      v7 += v13 != 4;
      ++v11;
    }
    while (v11 < v10);
  }
  else if (!v6)
  {
    goto LABEL_18;
  }
  unint64_t v14 = a2[9];
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = (void *)a2[5];
    do
    {
      if (v7[v15])
      {
        CUCFFreeObject(a1, *v16);
        unint64_t v14 = a2[9];
      }
      v16 += 4;
      ++v15;
    }
    while (v15 < v14);
  }
LABEL_18:
  MMSFree(a1, *(void **)a3, (void *)(8 * *(void *)(a3 + 8)));

  MMSFree(a1, (void *)a3, (void *)0x10);
}

void CUCFFreeObjectSEQUENCE_OF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8))
  {
    unint64_t v6 = 0;
    do
    {
      CUCFFreeObject(a1, *(void *)(a2 + 24));
      ++v6;
      unint64_t v7 = *(void *)(a3 + 8);
    }
    while (v6 < v7);
    unint64_t v8 = (void *)(8 * v7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  MMSFree(a1, *(void **)a3, v8);

  MMSFree(a1, (void *)a3, (void *)0x10);
}

BOOL CUCFEqualObjectStructComps(uint64_t a1, void *a2, int a3, void **a4, uint64_t a5)
{
  unsigned int v5 = a2 + 4;
  unint64_t v6 = a2 + 8;
  unint64_t v7 = a2 + 5;
  unint64_t v8 = a2 + 9;
  if (a3 == 1)
  {
    unint64_t v7 = a2 + 3;
    unint64_t v8 = a2 + 7;
  }
  if (a3 != 2)
  {
    unsigned int v5 = v7;
    unint64_t v6 = v8;
  }
  unint64_t v9 = *v6;
  if (*v6)
  {
    BOOL v15 = 0;
    uint64_t v16 = 0;
    for (unint64_t i = (void *)(*v5 + 24); ; i += 4)
    {
      unsigned int v18 = *((unsigned __int8 *)i - 8);
      if (v18 < 2) {
        break;
      }
      if (v18 == 2) {
        goto LABEL_13;
      }
      if (v18 == 3)
      {
        if (!a5) {
          goto LABEL_11;
        }
LABEL_14:
        int v19 = *a4;
        if (*(unsigned char *)(a5 + **(unsigned int **)(*(void *)(a2[1] + 24) + 24 * *i + 16)) == 1)
        {
          if (!*v19) {
            return v15;
          }
          uint64_t v20 = *(i - 3);
LABEL_20:
          if (!CUCFEqualObject(a1, v20)) {
            return v15;
          }
          goto LABEL_21;
        }
        goto LABEL_17;
      }
LABEL_21:
      ++*a4;
      BOOL v15 = ++v16 >= v9;
      if (v9 == v16) {
        return v15;
      }
    }
    if (a3 != 2)
    {
      uint64_t v20 = *(i - 3);
      goto LABEL_20;
    }
LABEL_13:
    if (a5) {
      goto LABEL_14;
    }
LABEL_11:
    int v19 = *a4;
LABEL_17:
    if (*v19) {
      return v15;
    }
    goto LABEL_21;
  }
  return 1;
}

uint64_t BDS_EphReal2Kep(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)result;
  uint64_t v2 = *(void *)(result + 40);
  *(void *)(a2 + 160) = *(void *)(result + 24);
  *(void *)(a2 + 168) = v2;
  long long v3 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a2 + 176) = v3;
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(a2 + 192) = *(void *)(result + 64);
  *(void *)(a2 + 200) = v4;
  *(void *)(a2 + 208) = *(void *)(result + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 144);
  double v5 = *(double *)(result + 168) * 0.000000001;
  *(void *)(a2 + 48) = *(void *)(result + 160);
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = *(double *)(result + 176) * 0.000000001;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 96) = *(void *)(result + 88);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(result + 96);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(result + 128);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(result + 112);
  *(void *)(a2 + 152) = *(void *)(result + 72);
  int v7 = *(_DWORD *)(result + 16);
  unsigned int v6 = *(_DWORD *)(result + 20);
  int v8 = v6 + 14;
  *(_DWORD *)(a2 + 20) = v6 + 14;
  *(_DWORD *)(a2 + 24) = v7 + 14;
  __int16 v9 = *(_WORD *)(result + 8);
  *(_WORD *)(a2 + 18) = v9 + 1356;
  if (v7 + 14 <= 604799)
  {
    if (v8 <= 604800) {
      goto LABEL_7;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 24) = v7 - 604786;
    if (v8 <= 604799) {
      goto LABEL_6;
    }
  }
  *(_DWORD *)(a2 + 20) = v6 - 604786;
LABEL_6:
  *(_WORD *)(a2 + 18) = v9 + 1357;
LABEL_7:
  *(double *)(a2 + 176) = *(double *)&v3 + 0.0010208961;
  *(_WORD *)(a2 + 16) = v6 / 0xE10 + 1;
  *(unsigned char *)(a2 + 14) = 0;
  int v10 = *(unsigned __int8 *)(result + 11);
  if (v10 == 15) {
    LOBYTE(v10) = 14;
  }
  *(unsigned char *)(a2 + 15) = v10;
  *(_DWORD *)(a2 + 8) = 4;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(result + 10);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(result + 12);
  return result;
}

double *rnk1_core(double *result, unsigned int a2, double a3, double *a4, int *a5)
{
  *a5 = 0;
  if (a2 >= 2)
  {
    double v5 = result - 1;
    unsigned int v6 = (a2 + a2 * a2) >> 1;
    uint64_t v7 = a2;
    unsigned int v8 = v6 - a2 + 1;
    uint64_t v9 = 1 - a2;
    while (1)
    {
      double v10 = a4[v7 - 1];
      double v11 = v5[v6];
      double v12 = v11 + a3 * v10 * v10;
      if (v12 <= 6.0e-38) {
        break;
      }
      double v13 = a3 * v10 / v12;
      double v14 = v11 / v12;
      v5[v6] = v12;
      double v15 = -v10;
      uint64_t v16 = 0;
      uint64_t v17 = v7 - 1;
      if (v11 / v12 >= 0.0625)
      {
        do
        {
          double v20 = a4[v16] + v15 * v5[v8 + v16];
          a4[v16] = v20;
          v5[v8 + v16] = v5[v8 + v16] + v13 * v20;
          ++v16;
        }
        while (v17 != v16);
      }
      else
      {
        do
        {
          double v18 = a4[v16];
          double v19 = v5[v8 + v16];
          v5[v8 + v16] = v13 * v18 + v19 * v14;
          a4[v16++] = v18 + v15 * v19;
        }
        while (v17 != v16);
      }
      a3 = a3 * v14;
      v6 -= v7--;
      v8 += v9++;
      if ((v7 & 0xFFFFFFFE) == 0) {
        goto LABEL_15;
      }
    }
    if (v12 < 0.0)
    {
      *a5 = v7;
      return result;
    }
    *a5 = -1;
    if (v7)
    {
      uint64_t v7 = v7;
      do
      {
        v5[v8++] = 0.0;
        --v7;
      }
      while (v7);
    }
  }
LABEL_15:
  *uint64_t result = *result + a3 * *a4 * *a4;
  return result;
}

BOOL NK_PrePro_SV_Meas(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, int *a11)
{
  v187[3] = *(double *)MEMORY[0x263EF8340];
  int v168 = a11 + 3490;
  int v171 = a11 + 2096;
  memset(v186, 0, sizeof(v186));
  int v17 = a10[233];
  BOOL v164 = !a10[233]
      && a10[8273]
      && a10[8272]
      && !*((_WORD *)a10 + 118)
      && *((unsigned char *)a11 + 16)
      && a11[2] < *((unsigned __int16 *)a10 + 4)
      && *a1 < 6u;
  uint64_t v18 = 0;
  uint64_t v19 = a3 + 316;
  do
  {
    if (*(_DWORD *)(v19 + 4 * v18 - 240))
    {
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2 * v18);
      if (v20 >= 0x1000)
      {
        unsigned int v21 = 1 << ((v20 >> 12) - 1);
        if (v21 >= 0x800) {
          unsigned int v21 = 2048;
        }
        if ((v20 & 0x300) != 0) {
          __int16 v22 = (5 * v21) >> 2;
        }
        else {
          __int16 v22 = v21;
        }
        *((_WORD *)a11 + v18 + 252) = v22;
      }
    }
    ++v18;
  }
  while (v18 != 48);
  int v178 = a10 + 7172;
  uint64_t v175 = a11 + 5748;
  if (!*((unsigned char *)a11 + 22992))
  {
LABEL_25:
    char v169 = 0;
    goto LABEL_26;
  }
  if ((a11[5750] - 3) >= 2)
  {
    if (a11[5749] == 1)
    {
      double v23 = *((double *)a11 + 2877);
      double v24 = *((double *)a11 + 2878);
      double v183 = v23;
      double v184 = v24;
      if (*((unsigned char *)a11 + 23120)) {
        uint64_t v25 = *((void *)a11 + 2893);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v185 = v25;
      Geo2ECEF((uint64_t)&v183, (uint64_t)&WGS84_Datum, v187);
      __double2 v71 = __sincos_stret(v23);
      __double2 v72 = __sincos_stret(v24);
      char v169 = 0;
      double v13 = -v71.__sinval;
      double v11 = -(v71.__cosval * v72.__cosval);
      double v12 = -(v71.__cosval * v72.__sinval);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  char v169 = 1;
LABEL_26:
  uint64_t v26 = 0;
  unsigned int v173 = 0;
  int v176 = v17 != 0;
  char v174 = (_DWORD *)(a4 + 26872);
  double v27 = 0.0;
  uint64_t v170 = a4;
  uint64_t v179 = a7;
  do
  {
    uint64_t v28 = (uint64_t)a11 + 2 * v26;
    uint64_t v29 = (__int16 *)(v28 + 25380);
    *(_WORD *)(v28 + 25380) = -1;
    uint64_t v30 = (unsigned __int16 *)(v28 + 25476);
    *(_WORD *)(v28 + 25476) = -1;
    uint64_t v31 = a3 + 4 * v26;
    int v34 = *(_DWORD *)(v31 + 76);
    uint64_t v32 = (unsigned __int8 *)(v31 + 76);
    int v33 = v34;
    if (Is_Legal(v34))
    {
      if (v33 == 6)
      {
        *uint64_t v29 = GNSS_Id_To_Num_Prn_Idx(v33);
        int v35 = v174;
        for (uint64_t i = 139; i != 149; ++i)
        {
          LOWORD(v37) = i;
          *uint64_t v30 = i;
          if (*v35 == 1 && *((unsigned __int8 *)v35 - 4) == v32[2])
          {
            *((unsigned char *)v186 + v26) = 1;
            goto LABEL_38;
          }
          v35 += 48;
        }
        if (!*((unsigned char *)v186 + v26)) {
          goto LABEL_43;
        }
LABEL_38:
        if (*(int *)(a3 + 4 * v26 + 412) <= 9)
        {
          *((unsigned char *)v186 + v26) = 0;
          goto LABEL_43;
        }
        unsigned int v37 = (unsigned __int16)v37;
      }
      else
      {
        *((unsigned char *)v186 + v26) = 1;
        *uint64_t v29 = GNSS_Id_To_Num_Prn_Idx(v33);
        unsigned __int16 v38 = GNSS_Id_To_Num_Pos_Idx(*(_DWORD *)v32);
        *uint64_t v30 = v38;
        if (*(int *)(a3 + 4 * v26 + 412) < 10) {
          goto LABEL_43;
        }
        unsigned int v37 = v38;
      }
      if (v37 >= 0x95) {
        gn_report_assertion_failure("NKPP: SVindexST");
      }
    }
LABEL_43:
    int v39 = *(_DWORD *)v32;
    if (Is_Legal(*(_DWORD *)v32)
      && *(int *)(a3 + 4 * v26 + 412) >= 10
      && (unsigned int v40 = (__int16)*v30, (v40 & 0x80000000) == 0)
      && *((unsigned char *)v186 + v26))
    {
      uint64_t v41 = a4 + 192 * v40;
      if (!*v175) {
        goto LABEL_67;
      }
      char v42 = v169;
      if (a11[5749] != 1) {
        char v42 = 1;
      }
      if ((v42 & 1) == 0 && v39 == 1)
      {
        unsigned int v43 = *(unsigned __int8 *)(a3 + v26 + 604);
        uint64_t v44 = v179;
        if (v43 >= 0x1A && *(unsigned __int8 *)(a3 + v26 + 700) + 3 <= v43 && *(int *)(v41 + 184) >= 1)
        {
          for (uint64_t j = 0; j != 3; ++j)
            *(double *)((char *)&v183 + j * 8) = *(double *)(v41 + j * 8) - v187[j];
          double v46 = 0.0;
          uint64_t v47 = 2;
          do
          {
            double v46 = v46 + *(&v183 + v47) * *(&v183 + v47);
            unint64_t v48 = v47-- + 1;
          }
          while (v48 > 1);
          uint64_t v49 = 0;
          double v50 = 1.0 / sqrt(v46);
          do
          {
            *(double *)((char *)&v180 + v49) = v50 * *(double *)((char *)&v183 + v49);
            v49 += 8;
          }
          while (v49 != 24);
          if (v27 > -(v12 * v181 + v180 * v11 + v182 * v13)) {
            double v27 = -(v12 * v181 + v180 * v11 + v182 * v13);
          }
        }
      }
      else
      {
LABEL_67:
        uint64_t v44 = v179;
      }
      uint64_t v51 = *v29;
      ++*((unsigned char *)a11 + 25148);
      ++*((unsigned char *)a11 + *v32 + 25151);
      int v53 = *(_DWORD *)(v41 + 184);
      double v52 = (_DWORD *)(v41 + 184);
      if (v53 == 1)
      {
        ++*((unsigned char *)a11 + 25150);
        ++*((unsigned char *)a11 + *v32 + 25158);
      }
      int v54 = *(char *)(v44 + v51);
      if (v54 != -99)
      {
        uint64_t v55 = &a10[40 * v26];
        if (*((_DWORD *)v55 + 522) != v54)
        {
          *((_DWORD *)v55 + 522) = v54;
          double v56 = (__double2 *)&a10[40 * v26];
          v56[132].__double cosval = (double)v54;
          double v57 = (double)v54 * 0.0174532925;
          v56[132].__sinval = v57;
          v56[131] = __sincos_stret(v57);
        }
      }
      BOOL v59 = v54 >= -5 || *v52 == 0 || v54 == -99;
      int v60 = !v59;
      unsigned int v61 = v173;
      if (!v59) {
        unsigned int v61 = v173 + 1;
      }
      unsigned int v173 = v61;
      v176 |= v60;
      if (a10[3] + 4 <= *(unsigned __int8 *)(a3 + v26 + 604)) {
        ++*((unsigned char *)a11 + 25149);
      }
      a4 = v170;
    }
    else
    {
      uint64_t v44 = v179;
    }
    ++v26;
  }
  while (v26 != 48);
  if (!*v175) {
    goto LABEL_118;
  }
  char v62 = v169;
  if (a11[5749] != 1) {
    char v62 = 1;
  }
  if ((v62 & 1) != 0 || v27 >= -0.258819045) {
    goto LABEL_118;
  }
  *(_WORD *)(p_NA + 10) = 0;
  *uint64_t v175 = 0;
  a11[6256] = 25;
  *((unsigned char *)a11 + 23120) = 0;
  a11[6260] = 25;
  EvLog_v("NK_PrePro_SV: Tracked SV Elev too negative, Clearing Not Trusted Ext Ref Pos");
  uint64_t v63 = *(void *)(p_api + 48);
  if (!*(unsigned char *)(v63 + 5))
  {
    unsigned int v70 = 0;
    int v66 = 0;
    char v67 = 1;
    uint64_t v64 = a10;
    uint64_t v65 = a9;
    goto LABEL_102;
  }
  uint64_t v64 = a10;
  uint64_t v65 = a9;
  if (*(int *)v63 < 3)
  {
    unsigned int v70 = 0;
    int v66 = 0;
LABEL_101:
    char v67 = 1;
    goto LABEL_102;
  }
  int v66 = (int)*(double *)(v63 + 24) + 604800 * *(__int16 *)(v63 + 16);
  if (!v66)
  {
    unsigned int v70 = 0;
    goto LABEL_101;
  }
  char v67 = 0;
  int v68 = v66 + 10800;
  int v69 = v68 / 86400;
  int v66 = v68 % 86400;
  unsigned int v70 = v69
      - 1461 * (((22967 * (__int16)(v69 - 5839)) >> 25) + ((22967 * (__int16)(v69 - 5839)) >> 31))
      - 5838;
LABEL_102:
  uint64_t v73 = 0;
  double v183 = 0.0;
  double v184 = 0.0;
  signed int v74 = (_DWORD *)(v65 + 11280);
  uint64_t v185 = 0;
  do
  {
    if ((v67 & 1) != 0 || !*(unsigned char *)(*(void *)(v65 + 16272) + v73))
    {
      int v77 = *(_DWORD *)(v65 + 16336 + 4 * v73);
      if (v77 != 2139062143)
      {
        int v78 = v77 + 7;
        BOOL v79 = (int *)(v65 + 4 * v78 + 16432);
        uint64_t v80 = *v79;
        if (v80 != 2139062143 && !*((unsigned char *)&v183 + v80 - 1))
        {
          *BOOL v79 = 2139062143;
          *(_DWORD *)(v65 + 4 * v78 + 16488) = 0;
        }
      }
    }
    else
    {
      unsigned int v75 = (*v74 >> 26) & 0xFFFFF83F | ((*(v74 - 1) & 0x1F) << 6);
      if ((int)(v75 - v70) > 730) {
        v70 += 1461;
      }
      int v76 = v66 - 900 * (*((_WORD *)v74 - 15) & 0x7F) + 86400 * (v70 - v75);
      if (v76 < 0) {
        int v76 = -v76;
      }
      if (v76 <= 0x707) {
        *((unsigned char *)&v183 + v73) = 1;
      }
    }
    ++v73;
    v74 += 16;
  }
  while (v73 != 24);
  if (!v64[128])
  {
    a10[128] = 1;
    *((_DWORD *)a10 + 33) = 92;
    *((unsigned char *)a11 + 960) = 0;
    a10[233] = 1;
    *(unsigned char *)(v44 + 535) = 1;
  }
LABEL_118:
  if (v173 && *((unsigned char *)a11 + 960))
  {
    if (*v175 && a11[5749] == 1)
    {
      double v81 = Horiz_Diff_Sqd((double *)a11 + 100, (const double *)a11 + 2877);
      unsigned __int8 v82 = a10;
      if (v81 <= 2500000000.0)
      {
LABEL_123:
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        double v85 = v82 + 6696;
        do
        {
          int v86 = *(_DWORD *)(a3 + v83 + 76);
          if (Is_Legal(v86))
          {
            int v87 = GNSS_Id_To_Num_Prn_Idx(v86);
            int v88 = *(char *)(v179 + v87);
            uint64_t v89 = a3 + 4 * v84;
            BOOL v90 = *(int *)(v89 + 412) >= 10 && v88 <= -6;
            if (v90 && v88 != -99)
            {
              v85[v84] = 0;
              if ((v169 & 1) != 0 || *(unsigned __int8 *)(a3 + 604 + v84) <= 0x18u)
              {
                *(unsigned char *)(a8 + v84 + 365) |= 1u;
                *(_DWORD *)(a8 + 416 + 4 * v84) = *a11;
                EvCrt_v("ChanReset %d : NKPrePro1  SV %2d %d %2d  QI %2d  Elev%2d", v84, *(unsigned __int8 *)(a3 + v83 + 78), *(unsigned __int8 *)(a3 + v83 + 76), v87, *(_DWORD *)(v89 + 412), v88);
              }
            }
          }
          ++v84;
          v83 += 4;
        }
        while (v84 != 48);
        goto LABEL_138;
      }
    }
    else
    {
      unsigned __int8 v82 = a10;
      if (v173 < 2) {
        goto LABEL_123;
      }
    }
    v82[128] = 1;
    *((_DWORD *)v82 + 33) = 97;
    *((unsigned char *)a11 + 960) = 0;
    v82[233] = 1;
    *(unsigned char *)(v179 + 535) = 1;
  }
LABEL_138:
  uint64_t v91 = 0;
  char v92 = a11 + 3504;
  uint64_t v93 = a11 + 2110;
  char v94 = a10 + 7360;
  uint64_t v95 = 25380;
  uint64_t v96 = 844;
  while (2)
  {
    uint64_t v97 = a3 + 4 * v91;
    int v98 = *(_DWORD *)(v97 + 76);
    BOOL v100 = Is_Legal(v98)
        && (int v99 = GNSS_Id_To_Num_Prn_Idx(v98), !*(unsigned char *)(a6 + v99 + 253))
        && *(unsigned char *)(a2 + v99) != 0;
    long long v101 = &v94[v91];
    if (*(_DWORD *)(v97 + 76) == *(_DWORD *)&v94[4 * v91])
    {
      *((unsigned char *)a11 + v91 + 3248) = v101[2536];
      *((unsigned char *)v93 + v91 + 384) = v101[2584];
      *((unsigned char *)v92 + v91 + 384) = v101[2632];
    }
    else
    {
      v101[2536] = 0;
      v101[2584] = 0;
      v101[2632] = 0;
    }
    int v102 = *(_DWORD *)(a3 + 4 * v91 + 412);
    if (v102 < 11 || (unsigned int v103 = *(unsigned __int8 *)(a3 + v91 + 604), v103 < a10[3]))
    {
      *((unsigned char *)a11 + v91 + 2864) = 0;
      goto LABEL_148;
    }
    int v104 = !v100;
    if (*(unsigned __int16 *)(a3 + v96) < *((unsigned __int16 *)a10 + 5)) {
      int v104 = 1;
    }
    if (((v104 | v176) & 1) == 0)
    {
      if (v103 > 0x23 || (int v105 = *(char *)(v179 + *(__int16 *)((char *)a11 + v95)), v105 == -99))
      {
        *((unsigned char *)a11 + v91 + 2864) = 1;
        goto LABEL_161;
      }
      int v107 = *a10;
      *((unsigned char *)a11 + v91 + 2864) = v105 >= v107;
      if (v105 < v107) {
        goto LABEL_148;
      }
LABEL_161:
      ++*((unsigned char *)a11 + 2808);
      if (*((unsigned char *)a11 + v91 + 1176)) {
        ++*((unsigned char *)a11 + 2809);
      }
      char v106 = !v164;
      if (v102 < 0xF) {
        char v106 = 1;
      }
      if (v106)
      {
        if (v102 < 0xD) {
          goto LABEL_149;
        }
      }
      else if (*(unsigned __int8 *)(a3 + v91 + 604) >= a10[4] {
             && *(unsigned __int16 *)(a3 + v96 + 192) >= *((unsigned __int16 *)a10 + 7)
      }
             && v94[v91 + 480]
             && v94[v91 + 3064]
             && *(_DWORD *)(v97 + 76) == *(_DWORD *)&v94[4 * v91]
             && *(unsigned __int16 *)(v170 + 192 * *(__int16 *)((char *)a11 + v95 + 96) + 166) == *(unsigned __int16 *)&v94[2 * v91 + 384]
             && *(_DWORD *)(v170 + 192 * *(__int16 *)((char *)a11 + v95 + 96) + 184) == 1
             && *((unsigned char *)v92 + v91))
      {
        *((unsigned char *)v92 + v91) = 1;
        ++*v168;
        if (*((unsigned char *)a11 + v91 + 1224)) {
          ++*((unsigned char *)a11 + 13961);
        }
        goto LABEL_150;
      }
      if (*(unsigned __int16 *)(a3 + v96 + 96) >= *((unsigned __int16 *)a10 + 6))
      {
        *((unsigned char *)v93 + v91) = 1;
        ++*v171;
        if (*((unsigned char *)a11 + v91 + 1224)) {
          ++*((unsigned char *)a11 + 8385);
        }
      }
      goto LABEL_149;
    }
    *((unsigned char *)a11 + v91 + 2864) = v104 ^ 1;
    if ((v104 & 1) == 0) {
      goto LABEL_161;
    }
LABEL_148:
    *((unsigned char *)v93 + v91) = 0;
LABEL_149:
    *((unsigned char *)v92 + v91) = 0;
LABEL_150:
    ++v91;
    v95 += 2;
    v96 += 2;
    if (v91 != 48) {
      continue;
    }
    break;
  }
  uint64_t v108 = a11 + 3490;
  float64x2_t v109 = a11 + 2096;
  if (*a1 >= 2u)
  {
    if (*((unsigned __int8 *)a11 + 2809) <= 3u && *((unsigned __int8 *)a11 + 2808) >= 4u)
    {
      *((unsigned char *)a11 + 2809) = 0;
      *(_OWORD *)(a11 + 294) = 0u;
      *(_OWORD *)(a11 + 298) = 0u;
      *(_OWORD *)(a11 + 302) = 0u;
    }
    if (*((unsigned __int8 *)a11 + 13961) + *((unsigned __int8 *)a11 + 8385) <= 3
      && *v168 + *v171 >= 4)
    {
      *((unsigned char *)a11 + 8385) = 0;
      *((unsigned char *)a11 + 13961) = 0;
      *(_OWORD *)(a11 + 306) = 0u;
      *(_OWORD *)(a11 + 310) = 0u;
      *(_OWORD *)(a11 + 314) = 0u;
    }
  }
  if (*((_WORD *)a10 + 118) && *v171) {
    --*((_WORD *)a10 + 118);
  }
  unsigned int v110 = a10[2];
  if (a10[2])
  {
    if (*((unsigned __int8 *)a11 + 2809) >= v110)
    {
      if ((unsigned __int16)g_Enable_Event_Log >= 2u) {
        EvLog_v("NK_PrePro_SV_Meas: Setting ranges without diff corrn unavailable");
      }
      uint64_t v111 = 0;
      long long v112 = (unsigned __int8 *)(a3 + 78);
      do
      {
        if (!*((unsigned char *)a11 + v111 + 1176))
        {
          *((unsigned char *)a11 + v111 + 2864) = 0;
          if ((unsigned __int16)g_Enable_Event_Log >= 4u) {
            EvLog_v("NK_PrePro_SV_Meas: Remove %d %d %d", v111, *(v112 - 2), *v112);
          }
        }
        ++v111;
        v112 += 4;
      }
      while (v111 != 48);
      unsigned int v110 = a10[2];
      uint64_t v108 = a11 + 3490;
      float64x2_t v109 = a11 + 2096;
    }
    if (*((unsigned __int8 *)v108 + 1) + *((unsigned __int8 *)v109 + 1) >= v110)
    {
      for (uint64_t k = 0; k != 48; ++k)
      {
        if (!*((unsigned char *)a11 + k + 1224))
        {
          *((unsigned char *)a11 + k + 8440) = 0;
          *((unsigned char *)a11 + k + 14016) = 0;
        }
      }
    }
  }
  unsigned int v114 = a10[1];
  if (v114 <= 0x2F)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 2u)
    {
      EvLog_v("NK_PrePro_SV_Meas:  Decimating range avail %d %d", a10[1], 48);
      unsigned int v114 = a10[1];
    }
    unsigned int v115 = *((unsigned __int8 *)a11 + 2808);
    if (v115 > v114)
    {
      do
      {
        uint64_t v116 = 0;
        int v117 = 0;
        __int16 v118 = 91;
        do
        {
          if (*((unsigned char *)a11 + v116 + 2864))
          {
            int v119 = *(char *)(v179 + *((__int16 *)a11 + v116 + 12690));
            BOOL v120 = v118 <= v119;
            if (v118 >= v119) {
              __int16 v118 = *(char *)(v179 + *((__int16 *)a11 + v116 + 12690));
            }
            if (!v120) {
              int v117 = v116;
            }
          }
          ++v116;
        }
        while (v116 != 48);
        uint64_t v121 = v117;
        if ((unsigned __int16)g_Enable_Event_Log >= 2u)
        {
          EvLog_v("NK_PrePro_SV_Meas:  Low Elev %d %d %d", v117, *(unsigned __int8 *)(a3 + 2 + 4 * v117 + 76), v118);
          unsigned int v115 = *((unsigned __int8 *)a11 + 2808);
          LOBYTE(v114) = a10[1];
        }
        *((unsigned char *)a11 + v121 + 2864) = 0;
        *((unsigned char *)a11 + 2808) = --v115;
      }
      while (v115 > v114);
    }
  }
  uint64_t v122 = 0;
  __int16 v123 = a11 + 3504;
  do
  {
    int v124 = *(_DWORD *)(a3 + 76 + 4 * v122);
    if (Is_Legal(v124))
    {
      uint64_t v125 = *(char *)(a5 + (int)GNSS_Id_To_Num_Prn_Idx(v124) + 3996);
      if ((v125 & 0x8000000000000000) == 0
        && *(unsigned char *)(a5 + 48 * v125 + 64)
        && *((unsigned char *)v123 + v122)
        && fabs(*(double *)&a11[2 * v122 + 30] / (*((double *)a11 + 82) * 0.190293673)+ (double)*(__int16 *)(a5 + 48 * v125 + 82)) > 15.0)
      {
        *((unsigned char *)v123 + v122) = 0;
        *((unsigned char *)a11 + v122 + 8440) = 1;
      }
    }
    ++v122;
  }
  while (v122 != 48);
  uint64_t v126 = 0;
  int v127 = 0;
  int v128 = 0;
  int v129 = 0;
  int v130 = 0;
  int v131 = 0;
  int v132 = 0;
  uint64_t v133 = 0;
  *((_WORD *)a11 + 1404) = 0;
  *(_WORD *)int v171 = 0;
  *(_WORD *)int v168 = 0;
  *((unsigned char *)a11 + 977) = 0;
  char v134 = a11 + 3504;
  long long v135 = a11 + 2110;
  long long v136 = (unsigned __int16 *)(a3 + 1036);
  while (2)
  {
    if (!*((unsigned char *)a11 + v133 + 2864))
    {
      *((unsigned char *)v135 + v133) = 0;
      *((unsigned char *)v134 + v133) = 0;
LABEL_246:
      uint64_t v137 = v126;
      goto LABEL_247;
    }
    *((unsigned char *)a11 + 2808) = ++v132;
    if (*((unsigned char *)a11 + v133 + 1176)) {
      *((unsigned char *)a11 + 2809) = ++v131;
    }
    if (*((unsigned char *)v135 + v133))
    {
      *int v171 = ++v130;
      if (*((unsigned char *)a11 + v133 + 1224)) {
        *((unsigned char *)a11 + 8385) = ++v129;
      }
    }
    else if (*((unsigned char *)v134 + v133))
    {
      *int v168 = ++v128;
      if (*((unsigned char *)a11 + v133 + 1224)) {
        *((unsigned char *)a11 + 13961) = ++v127;
      }
    }
    uint64_t v137 = *(unsigned __int8 *)(a3 + v133 + 604);
    if (v137 <= v126) {
      goto LABEL_246;
    }
    *((unsigned char *)a11 + 977) = v137;
    if (v137 >= *v178
      && (*v136 > 0x64u || *(v136 - 48) >= 0x259u)
      && *(unsigned __int8 *)(a3 + v133 + 700) + 6 <= *(unsigned __int8 *)(a3 + v133 + 604))
    {
      *int v178 = v137;
      *((_DWORD *)a10 + 1792) = *a11;
    }
LABEL_247:
    ++v133;
    ++v136;
    uint64_t v126 = v137;
    if (v133 != 48) {
      continue;
    }
    break;
  }
  unsigned int v138 = *v178;
  if (v138 >= 0x13)
  {
    int v139 = *a11;
    if (*a11 - *((_DWORD *)a10 + 1792) >= 20001)
    {
      LOBYTE(v138) = v138 - 1;
      *int v178 = v138;
      *((_DWORD *)a10 + 1792) = v139;
    }
  }
  uint64_t v140 = 0;
  unsigned int v141 = (v138 - 10);
  if (v141 <= 0x22) {
    unsigned int v141 = 34;
  }
  uint64_t v142 = a3 + 604;
  do
  {
    BOOL v143 = *(int *)(v142 + 4 * v140 - 192) >= 10 && *(unsigned __int8 *)(v142 + v140) >= v141;
    *((unsigned char *)a11 + v140++ + 1026) = v143;
  }
  while (v140 != 48);
  uint64_t v144 = 0;
  uint64_t v145 = (int *)(a3 + 76);
  do
  {
    unsigned int v146 = *(unsigned __int8 *)v145;
    BOOL v90 = v146 > 5;
    int v147 = (1 << v146) & 0x3A;
    if (!v90 && v147 != 0)
    {
      char v149 = *(unsigned char *)(v179 + (int)GNSS_Id_To_Num_Prn_Idx(*v145));
      int v150 = *v178;
      if ((v149 - 48) >= 0xCAu)
      {
        v150 -= (50 - v149) / 3u;
        if (v150 <= 2) {
          LOBYTE(v150) = 2;
        }
      }
      *((unsigned char *)a11 + v144 + 978) = v150 - 2;
    }
    ++v144;
    ++v145;
  }
  while (v144 != 48);
  uint64_t v151 = 0;
  *(int *)((char *)a11 + 25575) = 0;
  a11[6393] = 0;
  unsigned int v152 = (unsigned __int8 *)(a3 + 76);
  do
  {
    if (*((unsigned char *)a11 + v151 + 2864)
      && (*((__int16 *)a11 + v151 + 12738) & 0x80000000) == 0
      && *(_DWORD *)(v170 + 192 * *((unsigned __int16 *)a11 + v151 + 12738) + 184) == 1)
    {
      ++*((unsigned char *)a11 + *v152 + 25572);
    }
    ++v151;
    v152 += 4;
  }
  while (v151 != 48);
  uint64_t v153 = 0x4415AF1D78B58C40;
  if (!a10[233])
  {
    unsigned int v154 = a1[1];
    if (*a1 == v154)
    {
LABEL_276:
      uint64_t v153 = 0x4042000000000000;
    }
    else
    {
      switch(*a1)
      {
        case 0:
          break;
        case 1:
          if (!v154) {
            goto LABEL_276;
          }
          break;
        case 2:
          if (v154 <= 1) {
            goto LABEL_276;
          }
          break;
        case 3:
          if (v154 <= 2) {
            goto LABEL_276;
          }
          break;
        case 4:
          if (v154 - 5 >= 3) {
            goto LABEL_276;
          }
          break;
        case 5:
          if ((v154 & 0xFFFFFFFE) != 6) {
            goto LABEL_276;
          }
          break;
        case 6:
          if (v154 != 7) {
            goto LABEL_276;
          }
          break;
        default:
          goto LABEL_276;
      }
    }
  }
  *((void *)a11 + 352) = v153;
  *((void *)a11 + 1049) = v153;
  *((void *)a11 + 1746) = v153;
  double v155 = *((double *)a10 + 1361);
  if (v155 < 1.0)
  {
    uint64_t v156 = 0x3FF0000000000000;
    goto LABEL_281;
  }
  if (v155 <= 10.0)
  {
    *((double *)a11 + 357) = v155;
  }
  else
  {
    uint64_t v156 = 0x4024000000000000;
LABEL_281:
    *((void *)a11 + 357) = v156;
  }
  double v157 = *((double *)a10 + 1364);
  if (v157 < 1.0)
  {
    uint64_t v158 = 0x3FF0000000000000;
    goto LABEL_287;
  }
  if (v157 <= 10.0)
  {
    *((double *)a11 + 1054) = v157;
  }
  else
  {
    uint64_t v158 = 0x4024000000000000;
LABEL_287:
    *((void *)a11 + 1054) = v158;
  }
  double v159 = *((double *)a10 + 1367);
  if (v159 < 1.0)
  {
    uint64_t v160 = 0x3FF0000000000000;
    goto LABEL_293;
  }
  if (v159 <= 10.0)
  {
    *((double *)a11 + 1751) = v159;
  }
  else
  {
    uint64_t v160 = 0x4024000000000000;
LABEL_293:
    *((void *)a11 + 1751) = v160;
  }
  if (*((unsigned char *)a11 + 2808))
  {
    int v161 = 0;
    goto LABEL_299;
  }
  int v162 = *((_DWORD *)a10 + 38);
  if ((v162 & 0x80000000) == 0)
  {
    int v161 = v162 + 1;
LABEL_299:
    *((_DWORD *)a10 + 38) = v161;
  }
  return *((unsigned char *)a11 + 2809) != 0;
}

void gnssDataMgt_Init(void)
{
  g_CbList = Gnm_ReceiveData;
  off_26AE6D248 = Hal00_06ReadBufNtf;
  qword_26AE6D258 = (uint64_t)GnssDbgMgr_WriteLog;
  qword_26AE6D250 = (uint64_t)GncP02_10DataIndFromMECB;
}

void *gnssDataMgtProduction_Init(void *result)
{
  g_CbList = result;
  off_26AE6D248 = (uint64_t (*)(void, void))Hal00_06ReadBufNtf;
  return result;
}

void *gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(gnss::GnssAdaptDevice *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Init Status,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 65, "Ga07_04DeviceInitRespHndlr", a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 1, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, (uint64_t)this + 56);
  gnss::GnssAdaptDevice::Ga07_06SetDefaultState(this, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)__str);
  if (a2) {
    int v6 = 1;
  }
  else {
    int v6 = 8;
  }
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse((uint64_t)this, v6, (uint64_t)v8, (uint64_t)"Ga07_04DeviceInitRespHndlr");
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](__str);
}

void sub_22B950430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void gnss::GnssAdaptDevice::Ga07_06SetDefaultState(gnss::GnssAdaptDevice *this, char a2)
{
  uint64_t v2 = this;
  uint64_t v6 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 88) = a2;
  *(_WORD *)((char *)this + 89) = 0;
  *((unsigned char *)this + 92) = 0;
  uint64_t v4 = (char *)this + 280;
  int v5 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v4, 8uLL);
  *((unsigned char *)v2 + 1024) = 0;
  *((void *)v2 + 13) = 130861;
  *((void *)v2 + 14) = 0;
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)v2 + 184, *((void **)v2 + 24));
  *((void *)v2 + 23) = (char *)v2 + 192;
  *((void *)v2 + 24) = 0;
  long long v3 = (void *)*((void *)v2 + 30);
  uint64_t v2 = (gnss::GnssAdaptDevice *)((char *)v2 + 240);
  *((void *)v2 - 5) = 0;
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)v2 - 8, v3);
  *((void *)v2 - 1) = v2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)v2 + 16, *((void **)v2 + 3));
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = (char *)v2 + 24;
}

void sub_22B95052C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *gnss::GnssAdaptDevice::Ga07_07AdaptResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice20Ga07_07AdaptResponseENS_6ResultENSt3__18functionIFvS1_EEEPKc_block_invoke;
  block[3] = &__block_descriptor_tmp_10_0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  int v10 = a2;
  void v9[4] = a4;
  dispatch_async(v6, block);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v9);
}

void gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(uint64_t a1, char a2, int a3, char *__src)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (__src)
  {
    long long v34 = 0u;
    memset(v35, 0, 26);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)int __str = 0u;
    long long v27 = 0u;
    memcpy_s("Ga07_05HandleGnssHwStatusInd", 110, __str, 0xAAu, __src, 0xAAuLL);
    long long v7 = *(_OWORD *)(__src + 130);
    *(_OWORD *)&v23[69] = *(_OWORD *)(__src + 114);
    *(_OWORD *)&v23[77] = v7;
    *(_OWORD *)double v24 = *(_OWORD *)(__src + 146);
    long long v8 = *(_OWORD *)(__src + 66);
    *(_OWORD *)&v23[37] = *(_OWORD *)(__src + 50);
    *(_OWORD *)&v23[45] = v8;
    long long v9 = *(_OWORD *)(__src + 98);
    *(_OWORD *)&v23[53] = *(_OWORD *)(__src + 82);
    *(_OWORD *)&v23[61] = v9;
    *(void *)&v24[14] = *((void *)__src + 20);
    *(_OWORD *)&v23[13] = *(_OWORD *)(__src + 2);
    *(_OWORD *)&v23[21] = *(_OWORD *)(__src + 18);
    *(_OWORD *)&v23[29] = *(_OWORD *)(__src + 34);
    int v10 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    long long v21 = v33;
    long long v22 = v34;
    *(_OWORD *)double v23 = v35[0];
    *(_OWORD *)&v23[5] = *(_OWORD *)((char *)v35 + 10);
    long long v17 = v29;
    long long v18 = v30;
    long long v19 = v31;
    long long v20 = v32;
    long long v14 = *(_OWORD *)__str;
    long long v15 = v27;
    block[2] = ___ZN4gnss15GnssAdaptDevice28Ga07_05HandleGnssHwStatusIndE11e_Gnm_ErrorjP17s_Gnm_ReadyStatus_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    void block[4] = a1;
    char v25 = a2;
    long long v16 = v28;
    dispatch_async(v10, block);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx p_InitStatus\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga07_05HandleGnssHwStatusInd", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
  }
}

void *___ZN4gnss15GnssAdaptDevice28Ga07_05HandleGnssHwStatusIndE11e_Gnm_ErrorjP17s_Gnm_ReadyStatus_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v3 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v4 = 84;
    if (!*(unsigned char *)(a1 + 40)) {
      uint64_t v4 = 70;
    }
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Res,%u,HwStatus,%c,HWInitStatus,%hhu\n", (unint64_t)v3, "ADP", 65, "Ga07_05HandleGnssHwStatusInd_block_invoke", *(unsigned __int8 *)(a1 + 376), v4, *(unsigned __int8 *)(a1 + 41));
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 1, 1);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_24;
    }
LABEL_25:
    int v35 = (gnss::GnssAdaptDevice *)v2;
    int v36 = 0;
    return gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(v35, v36);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Patch dnld completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 65, "Ga07_05HandleGnssHwStatusInd_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 1, 1);
  }
  *(void *)&unsigned char v44[14] = *(void *)(a1 + 368);
  long long v8 = *(_OWORD *)(a1 + 226);
  v43[0] = *(_OWORD *)(a1 + 210);
  v43[1] = v8;
  long long v9 = *(_OWORD *)(a1 + 242);
  long long v10 = *(_OWORD *)(a1 + 322);
  long long v11 = *(_OWORD *)(a1 + 354);
  unsigned __int8 v43[8] = *(_OWORD *)(a1 + 338);
  *(_OWORD *)uint64_t v44 = v11;
  long long v12 = *(_OWORD *)(a1 + 258);
  long long v13 = *(_OWORD *)(a1 + 274);
  v43[2] = v9;
  v43[3] = v12;
  long long v14 = *(_OWORD *)(a1 + 290);
  long long v15 = *(_OWORD *)(a1 + 306);
  void v43[4] = v13;
  v43[5] = v14;
  v43[6] = v15;
  v43[7] = v10;
  gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo((gnss::GnssAdaptDevice *)v2, (const char *)v43);
  char v46 = 2;
  v50[0] = 0;
  *(void *)((char *)v50 + 5) = 0;
  uint64_t v47 = 0;
  v49[0] = 0;
  uint64_t v48 = 0;
  *(void *)((char *)v49 + 7) = 0;
  uint64_t v16 = 62;
  memset(v45, 0, sizeof(v45));
  do
  {
    long long v17 = &v45[v16];
    *(_DWORD *)(v17 + 255) = 0;
    *((_OWORD *)v17 + 14) = 0uLL;
    *((_OWORD *)v17 + 15) = 0uLL;
    *((_OWORD *)v17 + 12) = 0uLL;
    *((_OWORD *)v17 + 13) = 0uLL;
    *((_OWORD *)v17 + 10) = 0uLL;
    *((_OWORD *)v17 + 11) = 0uLL;
    *((_OWORD *)v17 + 8) = 0uLL;
    *((_OWORD *)v17 + 9) = 0uLL;
    *((_OWORD *)v17 + 6) = 0uLL;
    *((_OWORD *)v17 + 7) = 0uLL;
    *((_OWORD *)v17 + 4) = 0uLL;
    *((_OWORD *)v17 + 5) = 0uLL;
    *((_OWORD *)v17 + 2) = 0uLL;
    *((_OWORD *)v17 + 3) = 0uLL;
    v16 += 262;
    *(_OWORD *)long long v17 = 0uLL;
    *((_OWORD *)v17 + 1) = 0uLL;
    *((_WORD *)v17 + 130) = -1;
  }
  while (v17 + 262 != (unsigned char *)v51);
  *(_DWORD *)uint64_t v51 = 0;
  uint64_t v52 = 0;
  memset(&v51[3], 0, 15);
  *(_DWORD *)&v45[8] = 2048;
  HalExtensions = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v2);
  v51[9] = (*(uint64_t (**)(void *))(*(void *)HalExtensions + 16))(HalExtensions);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v19 = mach_continuous_time();
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsWeekFromBuild,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 73, "Ga07_21SetUserConfig", v51[9]);
    LbsOsaTrace_WriteLog(0x18u, __str, v20, 4, 1);
  }
  if (Gnm_SetUserConfig((uint64_t)v45))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUserConfig Failed,%u\n", v40);
LABEL_24:
      LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  long long v22 = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v2);
  double v23 = (*(double (**)(void *))(*(void *)v22 + 96))(v22);
  double v25 = v24;
  double v27 = v26;
  double v29 = v28;
  bzero(v45, 0x20EuLL);
  *(_DWORD *)uint64_t v45 = 4096;
  *(double *)&v50[60] = v23;
  *(double *)&v50[61] = v25;
  *(double *)&v50[62] = v27;
  *(double *)&v50[63] = v29;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v30 = mach_continuous_time();
    unsigned __int16 v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MarginBeidouB1,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 73, "Ga07_22SetPltfrmConfig", v29);
    LbsOsaTrace_WriteLog(0x18u, __str, v31, 4, 1);
  }
  int v32 = Gnm_SetPlatformConfig((int *)v45);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SignalThreshold,%f,MarginGpsL1,%f,MarginGalileoE1,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 73, "Ga07_22SetPltfrmConfig", v23, v25, v27);
    LbsOsaTrace_WriteLog(0x18u, __str, v34, 4, 1);
  }
  if (v32)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v41 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetPltfmCfg XCOR Failed,%u\n", v41);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if ((gnss::GnssAdaptDevice::Ga01_06SetDefaultSideBandConfig((gnss::GnssAdaptDevice *)v2) & 1) == 0) {
    goto LABEL_25;
  }
  if (*(unsigned char *)(v2 + 90))
  {
    if (Gnm_ClearGNSSCache(0x10000))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
        goto LABEL_25;
      }
      bzero(__str, 0x410uLL);
      unint64_t v42 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache on reset,%u\n", v42);
      goto LABEL_24;
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 1032), 0x1F4u))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
        goto LABEL_25;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache\n");
      goto LABEL_24;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v38 = mach_continuous_time();
    unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Device Init success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 73, "Ga07_05HandleGnssHwStatusInd_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v39, 4, 1);
  }
  int v35 = (gnss::GnssAdaptDevice *)v2;
  int v36 = 1;
  return gnss::GnssAdaptDevice::Ga07_04DeviceInitRespHndlr(v35, v36);
}

size_t ___ZN4gnss15GnssAdaptDevice20Ga07_07AdaptResponseENS_6ResultENSt3__18functionIFvS1_EEEPKc_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  size_t result = std::function<void ()(gnss::Result)>::operator()(a1 + 32, *(_DWORD *)(a1 + 72));
  if (*(void *)(a1 + 64))
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga07_07AdaptResponse_block_invoke", *(const char **)(a1 + 64), *(_DWORD *)(a1 + 72));
      return LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
    }
  }
  return result;
}

void *gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v7 = gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(a1, a2);
  long long v8 = *(NSObject **)(a1 + 296);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice28Ga07_09AdaptGnmEarlyResponseE11e_Gnm_ErrorNSt3__18functionIFvNS_6ResultEEEEPKc_block_invoke;
  block[3] = &__block_descriptor_tmp_13_0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  int v12 = v7;
  v11[4] = a4;
  dispatch_async(v8, block);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v11);
}

uint64_t gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 0xF) {
    return dword_22BB0EC30[(char)a2];
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No match,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "Ga07_12MapGnmRespToGnssResult", 257, a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 2, 1);
  }
  return 7;
}

size_t ___ZN4gnss15GnssAdaptDevice28Ga07_09AdaptGnmEarlyResponseE11e_Gnm_ErrorNSt3__18functionIFvNS_6ResultEEEEPKc_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  size_t result = std::function<void ()(gnss::Result)>::operator()(a1 + 32, *(_DWORD *)(a1 + 72));
  if (*(void *)(a1 + 64))
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v3 = mach_continuous_time();
      unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga07_09AdaptGnmEarlyResponse_block_invoke", *(const char **)(a1 + 64), *(_DWORD *)(a1 + 72));
      return LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
    }
  }
  return result;
}

void *gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(uint64_t a1, char a2, uint64_t a3)
{
  void v8[4] = *MEMORY[0x263EF8340];
  char v5 = a2;
  std::pair<e_Gnm_Api,gnss::s_StatusCB>::pair[abi:ne180100]<e_Gnm_Api&,gnss::s_StatusCB&,0>(v6, &v5, a3);
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__emplace_unique_key_args<e_Gnm_Api,std::pair<e_Gnm_Api,gnss::s_StatusCB>>(a1 + 232, v6, v6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7);
}

void sub_22B951490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Type,%u,resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga07_11HandleGnmStatusResponses", a3, a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v8 = a1 + 240;
  uint64_t v9 = *(void *)(a1 + 240);
  if (!v9) {
    goto LABEL_37;
  }
  uint64_t v10 = a1 + 240;
  uint64_t v11 = *(void *)(a1 + 240);
  do
  {
    unsigned int v12 = *(unsigned __int8 *)(v11 + 32);
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      long long v14 = (uint64_t *)v11;
    }
    else {
      long long v14 = (uint64_t *)(v11 + 8);
    }
    if (v13) {
      uint64_t v10 = v11;
    }
    uint64_t v11 = *v14;
  }
  while (*v14);
  if (v10 != v8 && *(unsigned __int8 *)(v10 + 32) <= a3)
  {
    uint64_t v18 = a1 + 240;
    do
    {
      unsigned int v19 = *(unsigned __int8 *)(v9 + 32);
      BOOL v20 = v19 >= a3;
      if (v19 >= a3) {
        unsigned __int16 v21 = (uint64_t *)v9;
      }
      else {
        unsigned __int16 v21 = (uint64_t *)(v9 + 8);
      }
      if (v20) {
        uint64_t v18 = v9;
      }
      uint64_t v9 = *v21;
    }
    while (*v21);
    if (v18 == v8 || *(unsigned __int8 *)(v18 + 32) > a3) {
      uint64_t v18 = a1 + 240;
    }
    std::function<void ()(gnss::Result)>::operator=(v24, v18 + 40);
    std::function<void ()(gnss::Result)>::operator=(v26, v18 + 72);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::erase((uint64_t **)(a1 + 232), (uint64_t *)v10);
    if (v25)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v24);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(a1, a2, (uint64_t)v23, (uint64_t)"Ga07_11HandleGnmStatusResponses");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v23);
    }
    if (v27)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v26);
      gnss::GnssAdaptDevice::Ga07_09AdaptGnmEarlyResponse(a1, a2, (uint64_t)v22, (uint64_t)"Ga07_11HandleGnmStatusResponses");
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v22);
    }
    if (a2 && a3 == 18) {
      *(unsigned char *)(a1 + 92) = 0;
    }
  }
  else
  {
LABEL_37:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v15 = mach_continuous_time();
      unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GnmLUT Handle not found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga07_11HandleGnmStatusResponses");
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
    }
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v26);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v24);
}

void sub_22B951788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void *gnss::GnssAdaptDevice::Ga07_13AddRespHndlToGnsLUT(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6[4] = *MEMORY[0x263EF8340];
  unsigned int v5 = a2;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>((uint64_t **)(a1 + 256), &v5, &v5);
  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v6);
}

void sub_22B951858(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gnss::GnssAdaptDevice::Ga07_14RemoveRespHndlFromGnsLut(gnss::GnssAdaptDevice *this, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)*((void *)this + 33);
  if (!v2) {
    goto LABEL_12;
  }
  unsigned int v5 = (uint64_t **)((char *)this + 256);
  uint64_t v6 = (char *)this + 264;
  unsigned __int16 v7 = (uint64_t *)v6;
  do
  {
    unsigned int v8 = *((_DWORD *)v2 + 8);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (char **)v2;
    }
    else {
      uint64_t v10 = (char **)(v2 + 8);
    }
    if (v9) {
      unsigned __int16 v7 = (uint64_t *)v2;
    }
    uint64_t v2 = *v10;
  }
  while (*v10);
  if (v7 != (uint64_t *)v6 && *((_DWORD *)v7 + 8) <= a2)
  {
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__remove_node_pointer(v5, v7);
    std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v7 + 5);
    operator delete(v7);
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNS Key deleted from LUT,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga07_14RemoveRespHndlFromGnsLut", a2);
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
  }
  else
  {
LABEL_12:
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GnsLUT Handle\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 87, "Ga07_14RemoveRespHndlFromGnsLut", 770);
      return LbsOsaTrace_WriteLog(0x18u, __str, v13, 2, 1);
    }
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(uint64_t a1, unsigned int a2, uint64_t a3, const char *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v6 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(a1, a2);
  size_t result = std::function<void ()(gnss::Result)>::operator()(a3, v6);
  if (a4)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s: Result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga07_15AdaptGnsEarlyResponse", a4, v6);
      return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    }
  }
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 < 0xF) {
    return dword_22BB0EC6C[a2];
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No match,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 87, "Ga07_16MapGnsRespToGnssResult", 770, a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 2, 1);
  }
  return 7;
}

void gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse(gnss::GnssAdaptDevice *a1, uint64_t a2, uint64_t a3, int a4)
{
  char v5 = (char)a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (!DeviceInstance)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v14 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Device Instance\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga07_17RegisterGnmStatusResponse", 513);
    int v16 = 0;
    goto LABEL_18;
  }
  uint64_t v7 = DeviceInstance;
  if ((a4 - 15) >= 2)
  {
    if (a4 == 14) {
      goto LABEL_10;
    }
    if (a4 != 1)
    {
LABEL_13:
      unsigned __int16 v13 = *(NSObject **)(v7 + 288);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN4gnss15GnssAdaptDevice32Ga07_17RegisterGnmStatusResponseE11e_Gnm_Errorbj9e_Gnm_Api_block_invoke;
      block[3] = &__block_descriptor_tmp_22;
      void block[4] = v7;
      char v19 = v5;
      char v20 = a4;
      dispatch_async(v13, block);
      return;
    }
  }
  if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(DeviceInstance + 1032))
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CtrlReqSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 87, "Ga07_17RegisterGnmStatusResponse", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 2, 1);
  }
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v7 + 91));
  if ((v10 & 1) == 0)
  {
    if (a4 == 14)
    {
LABEL_10:
      if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(v7 + 1032)))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v11 = mach_continuous_time();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CtrlReqSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 87, "Ga07_17RegisterGnmStatusResponse", 257);
          LbsOsaTrace_WriteLog(0x18u, __str, v12, 2, 1);
        }
      }
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  atomic_store(0, (unsigned __int8 *)(v7 + 91));
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    size_t v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Internal resp. ignored\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "Ga07_17RegisterGnmStatusResponse");
    int v16 = 4;
LABEL_18:
    LbsOsaTrace_WriteLog(0x18u, __str, v15, v16, 1);
  }
}

void *___ZN4gnss15GnssAdaptDevice32Ga07_17RegisterGnmStatusResponseE11e_Gnm_Errorbj9e_Gnm_Api_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 41);

  return gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v3, v4);
}

uint64_t gnss::GnssAdaptDevice::Ga07_23GetBbResetReasonStr@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_28_7);
  if (a1 >= 0xA) {
    unsigned int v4 = "eOTHER";
  }
  else {
    unsigned int v4 = off_2648DC4E0[(char)a1];
  }
  return MEMORY[0x230F4E3E0](a2, v4);
}

void sub_22B952074(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::pair<e_Gnm_Api,gnss::s_StatusCB>::pair[abi:ne180100]<e_Gnm_Api&,gnss::s_StatusCB&,0>(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 40);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 8), a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v5, a3 + 32);
  return a1;
}

void sub_22B95211C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__emplace_unique_key_args<e_Gnm_Api,std::pair<e_Gnm_Api,gnss::s_StatusCB>>(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  v10[3] = *(uint64_t **)MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t **)(a1 + 8);
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        unsigned int v8 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v8) {
          break;
        }
        unsigned int v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      unsigned int v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__construct_node<std::pair<e_Gnm_Api,gnss::s_StatusCB>>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__construct_node<std::pair<e_Gnm_Api,gnss::s_StatusCB>>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  v6[32] = *a2;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v6 + 40), (uint64_t)(a2 + 8));
  uint64_t result = std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v6 + 72), (uint64_t)(a2 + 40));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_22B9523E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unsigned int v3 = (uint64_t *)v2[2];
      unsigned int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned __int16 v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned __int16 v9 = (uint64_t **)v2[1];
            unsigned __int8 v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              double v10[2] = (uint64_t)v2;
              unsigned int v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned __int16 v9 = v2;
            v2[2] = (uint64_t)v9;
            unsigned int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unsigned int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unsigned int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::function<void ()(gnss::Result)>>>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x48uLL);
    v13[1] = v6;
    *((_DWORD *)v11 + 8) = *a3;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v11 + 5), (uint64_t)(a3 + 2));
    char v14 = 1;
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2 + 5);
    }
    operator delete(v2);
  }
}

void GnssDbgMgr_HandleStackDump(unsigned int a1, unsigned __int8 *a2, int a3, char *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  memset(__s, 0, 300);
  time_t v26 = 0;
  time(&v26);
  unsigned int v4 = localtime(&v26);
  if (v4)
  {
    uint64_t v5 = v4;
    if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeStamp: %d.%02d.%02d %02d:%02d:%02d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "EXP", 69, "GnssDbgMgr_HandleStackDump", v5->tm_year, v5->tm_mon, v5->tm_mday, v5->tm_hour, v5->tm_min, v5->tm_sec);
      LbsOsaTrace_WriteLog(0x17u, __str, v7, 0, 1);
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ================================================================\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "EXP", 69, "GnssDbgMgr_HandleStackDump");
    LbsOsaTrace_WriteLog(0x17u, __str, v9, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Raw ZX Dump of Exception Message:\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "EXP", 69, "GnssDbgMgr_HandleStackDump");
    LbsOsaTrace_WriteLog(0x17u, __str, v11, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ======================================\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "EXP", 69, "GnssDbgMgr_HandleStackDump");
    LbsOsaTrace_WriteLog(0x17u, __str, v13, 0, 1);
  }
  if (a1)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    do
    {
      if (v14 && !((unsigned __int16)v14 % 0x50u))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "EXP", 69, "GnssDbgMgr_HandleStackDump", __s);
          LbsOsaTrace_WriteLog(0x17u, __str, v17, 0, 1);
        }
        memset_s(__s, 0x12CuLL, 0, 0x12CuLL);
        int v15 = 0;
      }
      if (a1 - 1 == v14)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v18 = mach_continuous_time();
          unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "EXP", 69, "GnssDbgMgr_HandleStackDump", __s);
          LbsOsaTrace_WriteLog(0x17u, __str, v19, 0, 1);
        }
      }
      else
      {
        v15 += snprintf(&__s[(unsigned __int16)v15], 300 - (unsigned __int16)v15, "%02X ", a2[v14]);
      }
      ++v14;
    }
    while (a1 != v14);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x17u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v20 = mach_continuous_time();
    unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ======================================\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "EXP", 69, "GnssDbgMgr_HandleStackDump");
    LbsOsaTrace_WriteLog(0x17u, __str, v21, 0, 1);
  }
  if (a4)
  {
    if (a3) {
      gnssOsa_ReportExcp(a4, a2, a1);
    }
  }
}

uint64_t SV_State_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list(a1, "SV_State_Update_Wrapper: Entry");
  if (*(_DWORD *)a1 != 7)
  {
    GPS_State_Update(*(void *)(a1 + 192), *(void *)(a1 + 248), *(void *)(a1 + 48), *(void **)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 72), *(void *)(a1 + 88), *(void *)(a1 + 96));
    GLON_State_Update(*(double **)(a1 + 192), *(void *)(a1 + 248), *(void *)(a1 + 48), *(int **)(a1 + 56), *(void *)(a1 + 72), *(void *)(a1 + 96));
  }

  return GNSS_Validate_p_list(a1, "SV_State_Update_Wrapper:  Exit");
}

uint64_t asn1PD_SuplNotificationType(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  unsigned __int8 v10 = 0;
  if (BitFromBuffer) {
    uint64_t v8 = Asn1Coder::DecodeEnumerationExtension(a1, &v10);
  }
  else {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 4u, &v10);
  }
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (v10 > 4u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = 4;
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  *a2 = v10;
  return v5;
}

uint64_t asn1PD_EncodingType(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v10 = 0;
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  if (BitFromBuffer) {
    uint64_t v8 = Asn1Coder::DecodeEnumerationExtension(a1, &v10);
  }
  else {
    uint64_t v8 = Asn1Coder::DecodeInteger(a1, 0, 2u, &v10);
  }
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (v10 > 2u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = 4;
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  *a2 = v10;
  return v5;
}

uint64_t asn1PD_FormatIndicator(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  unsigned __int8 v11 = 0;
  if (v5)
  {
    SuplAsn1Logger::TraceError(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
LABEL_7:
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 12);
    unsigned int v9 = v5;
    goto LABEL_8;
  }
  if (BitFromBuffer) {
    uint64_t v6 = Asn1Coder::DecodeEnumerationExtension(a1, &v11);
  }
  else {
    uint64_t v6 = Asn1Coder::DecodeInteger(a1, 0, 7u, &v11);
  }
  uint64_t v5 = v6;
  if (v6) {
    goto LABEL_7;
  }
  if (v11 <= 7u)
  {
    uint64_t v5 = 0;
    *a2 = v11;
    return v5;
  }
  uint64_t v5 = 4;
  *(unsigned char *)(a1 + 16) = 4;
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v9 = 4;
LABEL_8:
  SuplAsn1Logger::TraceError(v9, v7, v8);
  return v5;
}

uint64_t asn1PD_SLPMode(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned __int8 v7 = 0;
  uint64_t v4 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v7);
  if (v7 >= 2u)
  {
    uint64_t v5 = 4;
    *(unsigned char *)(a1 + 16) = 4;
    SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    uint64_t v5 = v4;
    *a2 = v7;
    if (!v4) {
      return v5;
    }
  }
  SuplAsn1Logger::TraceError(v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v5;
}

uint64_t asn1PD_MAC(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x40u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_KeyIdentity(uint64_t a1, unint64_t *a2)
{
  Asn1Coder::GetBitStringFromBuffer(a1, 0x80u, a2, 0);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v3;
}

uint64_t asn1PD_Notification_requestorId(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  Asn1Coder::DecodeInteger(a1, 1, 0x32u, &v6);
  Asn1Coder::GetBitStringFromBuffer(a1, 8 * v6, a2, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_Notification_clientName(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  Asn1Coder::DecodeInteger(a1, 1, 0x32u, &v6);
  Asn1Coder::GetBitStringFromBuffer(a1, 8 * v6, a2, 0);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  return v4;
}

uint64_t asn1PD_Notification(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 3) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 4) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v8 = asn1PD_SuplNotificationType(a1, (unsigned __int8 *)(a2 + 5));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v8 = asn1PD_EncodingType(a1, (unsigned __int8 *)(a2 + 6));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v8 = asn1PD_Notification_requestorId(a1, (unint64_t *)(a2 + 8));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    uint64_t v8 = asn1PD_FormatIndicator(a1, (unsigned __int8 *)(a2 + 32));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 3))
  {
    uint64_t v8 = asn1PD_Notification_clientName(a1, (unint64_t *)(a2 + 40));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 4))
  {
    uint64_t v8 = asn1PD_FormatIndicator(a1, (unsigned __int8 *)(a2 + 64));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = asn1PD_Notification_VER2(a1, a2);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v5;
}

void ASN1T_SUPLINIT::ASN1T_SUPLINIT(ASN1T_SUPLINIT *this)
{
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *(_WORD *)((char *)this + 13) = -1;
  *((unsigned char *)this + 40) = -1;
  *((_WORD *)this + 36) = 255;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 80) = -1;
  *((void *)this + 22) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 70) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((unsigned char *)this + 360) = -1;
  *(void *)((char *)this + 460) = 0;
  *(void *)((char *)this + 452) = 0;
  *(_DWORD *)((char *)this + 467) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 61) = 0;
  *((_DWORD *)this + 128) = 0;
  *((void *)this + 65) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 66) = 0;
  *((unsigned char *)this + 544) = 0;
  *((_DWORD *)this + 138) = 0;
  *((_WORD *)this + 278) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 433) = 0u;
  *((_WORD *)this + 2) = 2304;
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 184) = 0;
}

uint64_t asn1PD_SUPLINIT(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  int v9 = BitFromBuffer;
  *(unsigned char *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 3) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 4) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v8 = asn1PD_PosMethod(a1, (unsigned __int8 *)(a2 + 5));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v8 = asn1PD_Notification(a1, a2 + 8);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v8 = asn1PD_SLPAddress(a1, a2 + 80);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    uint64_t v8 = asn1PD_QoP(a1, a2 + 168);
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  uint64_t v8 = asn1PD_SLPMode(a1, (unsigned __int8 *)(a2 + 184));
  if (v8)
  {
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 3))
  {
    uint64_t v8 = asn1PD_MAC(a1, (unint64_t *)(a2 + 192));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a2 + 4))
  {
    uint64_t v8 = asn1PD_KeyIdentity(a1, (unint64_t *)(a2 + 216));
    if (v8)
    {
      uint64_t v5 = v8;
      int v6 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!v9) {
    return 0;
  }
  uint64_t v8 = asn1PD_SUPLINIT_VER2(a1, a2);
  uint64_t v5 = v8;
  if (v8)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v5;
}

double Register_PatchFunc_2_1(uint64_t a1)
{
  *(void *)a1 = Get_PatchContent_CpCpuPtc;
  *(void *)(a1 + 8) = Get_PatchContent_CpCpuSsf;
  *(void *)(a1 + 24) = Get_PatchContent_MECpuNormPtc;
  *(void *)(a1 + 32) = Get_PatchContent_MECpuSsf;
  *(void *)(a1 + 64) = Get_PatchContent_Config;
  *(void *)(a1 + 88) = 0x41400002E70;
  *(void *)&double result = 0x83AB00024100;
  *(void *)(a1 + 100) = 0x83AB00024100;
  *(_DWORD *)(a1 + 120) = 1092;
  return result;
}

void *Get_PatchContent_CpCpuPtc(void *result, unsigned int a2, size_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = result;
  switch(a2 / 0x7F2)
  {
    case 0u:
      memcpy(__dst, &unk_22BB0ECB8, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_0";
      int v6 = 38;
      goto LABEL_8;
    case 1u:
      memcpy(__dst, &unk_22BB0F4AA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_1";
      int v6 = 46;
      goto LABEL_8;
    case 2u:
      memcpy(__dst, "Lplp", sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_2";
      int v6 = 54;
      goto LABEL_8;
    case 3u:
      memcpy(__dst, &unk_22BB1048E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_3";
      int v6 = 62;
      goto LABEL_8;
    case 4u:
      memcpy(__dst, &unk_22BB10C80, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_4";
      int v6 = 70;
      goto LABEL_8;
    case 5u:
      memcpy(__dst, &unk_22BB11472, 0x6B6uLL);
      uint64_t v5 = "Get_PatchContent_CpCpuPtc_5";
      int v6 = 78;
LABEL_8:
      double result = memcpy_s(v5, v6, v4, a3, __dst, a3);
      break;
    default:
      return result;
  }
  return result;
}

void *Get_PatchContent_CpCpuSsf(void *result, unsigned int a2, size_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 <= 0x7F1)
  {
    uint64_t v4 = result;
    memcpy(__dst, &unk_22BB11B28, sizeof(__dst));
    return memcpy_s("Get_PatchContent_CpCpuSsf_0", 114, v4, a3, __dst, a3);
  }
  return result;
}

void *Get_PatchContent_MECpuNormPtc(void *result, unsigned int a2, size_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = result;
  switch(a2 / 0x7F2)
  {
    case 0u:
      memcpy(__dst, &unk_22BB11F3C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_0";
      int v6 = 135;
      goto LABEL_75;
    case 1u:
      memcpy(__dst, &unk_22BB1272E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_1";
      int v6 = 143;
      goto LABEL_75;
    case 2u:
      memcpy(__dst, &unk_22BB12F20, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_2";
      int v6 = 151;
      goto LABEL_75;
    case 3u:
      memcpy(__dst, &unk_22BB13712, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_3";
      int v6 = 159;
      goto LABEL_75;
    case 4u:
      memcpy(__dst, &unk_22BB13F04, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_4";
      int v6 = 167;
      goto LABEL_75;
    case 5u:
      memcpy(__dst, &unk_22BB146F6, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_5";
      int v6 = 175;
      goto LABEL_75;
    case 6u:
      memcpy(__dst, &unk_22BB14EE8, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_6";
      int v6 = 183;
      goto LABEL_75;
    case 7u:
      memcpy(__dst, &unk_22BB156DA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_7";
      int v6 = 191;
      goto LABEL_75;
    case 8u:
      memcpy(__dst, &unk_22BB15ECC, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_8";
      int v6 = 199;
      goto LABEL_75;
    case 9u:
      memcpy(__dst, &unk_22BB166BE, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_9";
      int v6 = 207;
      goto LABEL_75;
    case 0xAu:
      memcpy(__dst, &unk_22BB16EB0, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_10";
      int v6 = 215;
      goto LABEL_75;
    case 0xBu:
      memcpy(__dst, &unk_22BB176A2, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_11";
      int v6 = 223;
      goto LABEL_75;
    case 0xCu:
      memcpy(__dst, &unk_22BB17E94, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_12";
      int v6 = 231;
      goto LABEL_75;
    case 0xDu:
      memcpy(__dst, &unk_22BB18686, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_13";
      int v6 = 239;
      goto LABEL_75;
    case 0xEu:
      memcpy(__dst, &unk_22BB18E78, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_14";
      int v6 = 247;
      goto LABEL_75;
    case 0xFu:
      memcpy(__dst, &unk_22BB1966A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_15";
      int v6 = 255;
      goto LABEL_75;
    case 0x10u:
      memcpy(__dst, &unk_22BB19E5C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_16";
      int v6 = 263;
      goto LABEL_75;
    case 0x11u:
      memcpy(__dst, &unk_22BB1A64E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_17";
      int v6 = 271;
      goto LABEL_75;
    case 0x12u:
      memcpy(__dst, &unk_22BB1AE40, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_18";
      int v6 = 279;
      goto LABEL_75;
    case 0x13u:
      memcpy(__dst, &unk_22BB1B632, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_19";
      int v6 = 287;
      goto LABEL_75;
    case 0x14u:
      memcpy(__dst, &unk_22BB1BE24, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_20";
      int v6 = 295;
      goto LABEL_75;
    case 0x15u:
      memcpy(__dst, &unk_22BB1C616, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_21";
      int v6 = 303;
      goto LABEL_75;
    case 0x16u:
      memcpy(__dst, &unk_22BB1CE08, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_22";
      int v6 = 311;
      goto LABEL_75;
    case 0x17u:
      memcpy(__dst, &unk_22BB1D5FA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_23";
      int v6 = 319;
      goto LABEL_75;
    case 0x18u:
      memcpy(__dst, &unk_22BB1DDEC, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_24";
      int v6 = 327;
      goto LABEL_75;
    case 0x19u:
      memcpy(__dst, &unk_22BB1E5DE, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_25";
      int v6 = 335;
      goto LABEL_75;
    case 0x1Au:
      memcpy(__dst, &unk_22BB1EDD0, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_26";
      int v6 = 343;
      goto LABEL_75;
    case 0x1Bu:
      memcpy(__dst, &unk_22BB1F5C2, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_27";
      int v6 = 351;
      goto LABEL_75;
    case 0x1Cu:
      memcpy(__dst, &unk_22BB1FDB4, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_28";
      int v6 = 359;
      goto LABEL_75;
    case 0x1Du:
      memcpy(__dst, &unk_22BB205A6, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_29";
      int v6 = 367;
      goto LABEL_75;
    case 0x1Eu:
      memcpy(__dst, &unk_22BB20D98, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_30";
      int v6 = 375;
      goto LABEL_75;
    case 0x1Fu:
      memcpy(__dst, &unk_22BB2158A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_31";
      int v6 = 383;
      goto LABEL_75;
    case 0x20u:
      memcpy(__dst, &unk_22BB21D7C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_32";
      int v6 = 391;
      goto LABEL_75;
    case 0x21u:
      memcpy(__dst, &unk_22BB2256E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_33";
      int v6 = 399;
      goto LABEL_75;
    case 0x22u:
      memcpy(__dst, &unk_22BB22D60, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_34";
      int v6 = 407;
      goto LABEL_75;
    case 0x23u:
      memcpy(__dst, &unk_22BB23552, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_35";
      int v6 = 415;
      goto LABEL_75;
    case 0x24u:
      memcpy(__dst, &unk_22BB23D44, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_36";
      int v6 = 423;
      goto LABEL_75;
    case 0x25u:
      memcpy(__dst, &unk_22BB24536, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_37";
      int v6 = 431;
      goto LABEL_75;
    case 0x26u:
      memcpy(__dst, &unk_22BB24D28, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_38";
      int v6 = 439;
      goto LABEL_75;
    case 0x27u:
      memcpy(__dst, &unk_22BB2551A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_39";
      int v6 = 447;
      goto LABEL_75;
    case 0x28u:
      memcpy(__dst, &unk_22BB25D0C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_40";
      int v6 = 455;
      goto LABEL_75;
    case 0x29u:
      memcpy(__dst, &unk_22BB264FE, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_41";
      int v6 = 463;
      goto LABEL_75;
    case 0x2Au:
      memcpy(__dst, &unk_22BB26CF0, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_42";
      int v6 = 471;
      goto LABEL_75;
    case 0x2Bu:
      memcpy(__dst, &unk_22BB274E2, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_43";
      int v6 = 479;
      goto LABEL_75;
    case 0x2Cu:
      memcpy(__dst, &unk_22BB27CD4, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_44";
      int v6 = 487;
      goto LABEL_75;
    case 0x2Du:
      memcpy(__dst, &unk_22BB284C6, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_45";
      int v6 = 495;
      goto LABEL_75;
    case 0x2Eu:
      memcpy(__dst, &unk_22BB28CB8, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_46";
      int v6 = 503;
      goto LABEL_75;
    case 0x2Fu:
      memcpy(__dst, &unk_22BB294AA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_47";
      int v6 = 511;
      goto LABEL_75;
    case 0x30u:
      memcpy(__dst, &unk_22BB29C9C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_48";
      int v6 = 519;
      goto LABEL_75;
    case 0x31u:
      memcpy(__dst, &unk_22BB2A48E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_49";
      int v6 = 527;
      goto LABEL_75;
    case 0x32u:
      memcpy(__dst, &unk_22BB2AC80, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_50";
      int v6 = 535;
      goto LABEL_75;
    case 0x33u:
      memcpy(__dst, &unk_22BB2B472, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_51";
      int v6 = 543;
      goto LABEL_75;
    case 0x34u:
      memcpy(__dst, &unk_22BB2BC64, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_52";
      int v6 = 551;
      goto LABEL_75;
    case 0x35u:
      memcpy(__dst, &unk_22BB2C456, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_53";
      int v6 = 559;
      goto LABEL_75;
    case 0x36u:
      memcpy(__dst, &unk_22BB2CC48, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_54";
      int v6 = 567;
      goto LABEL_75;
    case 0x37u:
      memcpy(__dst, &unk_22BB2D43A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_55";
      int v6 = 575;
      goto LABEL_75;
    case 0x38u:
      memcpy(__dst, &unk_22BB2DC2C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_56";
      int v6 = 583;
      goto LABEL_75;
    case 0x39u:
      memcpy(__dst, &unk_22BB2E41E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_57";
      int v6 = 591;
      goto LABEL_75;
    case 0x3Au:
      memcpy(__dst, &unk_22BB2EC10, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_58";
      int v6 = 599;
      goto LABEL_75;
    case 0x3Bu:
      memcpy(__dst, &unk_22BB2F402, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_59";
      int v6 = 607;
      goto LABEL_75;
    case 0x3Cu:
      memcpy(__dst, &unk_22BB2FBF4, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_60";
      int v6 = 615;
      goto LABEL_75;
    case 0x3Du:
      memcpy(__dst, &unk_22BB303E6, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_61";
      int v6 = 623;
      goto LABEL_75;
    case 0x3Eu:
      memcpy(__dst, &unk_22BB30BD8, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_62";
      int v6 = 631;
      goto LABEL_75;
    case 0x3Fu:
      memcpy(__dst, &unk_22BB313CA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_63";
      int v6 = 639;
      goto LABEL_75;
    case 0x40u:
      memcpy(__dst, &unk_22BB31BBC, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_64";
      int v6 = 647;
      goto LABEL_75;
    case 0x41u:
      memcpy(__dst, &unk_22BB323AE, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_65";
      int v6 = 655;
      goto LABEL_75;
    case 0x42u:
      memcpy(__dst, &unk_22BB32BA0, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_66";
      int v6 = 663;
      goto LABEL_75;
    case 0x43u:
      memcpy(__dst, &unk_22BB33392, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_67";
      int v6 = 671;
      goto LABEL_75;
    case 0x44u:
      memcpy(__dst, &unk_22BB33B84, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_68";
      int v6 = 679;
      goto LABEL_75;
    case 0x45u:
      memcpy(__dst, &unk_22BB34376, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_69";
      int v6 = 687;
      goto LABEL_75;
    case 0x46u:
      memcpy(__dst, &unk_22BB34B68, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_70";
      int v6 = 695;
      goto LABEL_75;
    case 0x47u:
      memcpy(__dst, &unk_22BB3535A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_71";
      int v6 = 703;
      goto LABEL_75;
    case 0x48u:
      memcpy(__dst, "331133331", 0x4F0uLL);
      uint64_t v5 = "Get_PatchContent_MECpuNormPtc_72";
      int v6 = 711;
LABEL_75:
      double result = memcpy_s(v5, v6, v4, a3, __dst, a3);
      break;
    default:
      return result;
  }
  return result;
}

void *Get_PatchContent_MECpuSsf(void *result, unsigned int a2, size_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = result;
  switch(a2 / 0x7F2)
  {
    case 0u:
      memcpy(__dst, &unk_22BB3603C, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_0";
      int v6 = 948;
      goto LABEL_19;
    case 1u:
      memcpy(__dst, &unk_22BB3682E, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_1";
      int v6 = 956;
      goto LABEL_19;
    case 2u:
      memcpy(__dst, &unk_22BB37020, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_2";
      int v6 = 964;
      goto LABEL_19;
    case 3u:
      memcpy(__dst, &unk_22BB37812, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_3";
      int v6 = 972;
      goto LABEL_19;
    case 4u:
      memcpy(__dst, &unk_22BB38004, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_4";
      int v6 = 980;
      goto LABEL_19;
    case 5u:
      memcpy(__dst, &unk_22BB387F6, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_5";
      int v6 = 988;
      goto LABEL_19;
    case 6u:
      memcpy(__dst, &unk_22BB38FE8, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_6";
      int v6 = 996;
      goto LABEL_19;
    case 7u:
      memcpy(__dst, &unk_22BB397DA, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_7";
      int v6 = 1004;
      goto LABEL_19;
    case 8u:
      memcpy(__dst, &unk_22BB39FCC, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_8";
      int v6 = 1012;
      goto LABEL_19;
    case 9u:
      memcpy(__dst, &unk_22BB3A7BE, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_9";
      int v6 = 1020;
      goto LABEL_19;
    case 0xAu:
      memcpy(__dst, "ved\b", sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_10";
      int v6 = 1028;
      goto LABEL_19;
    case 0xBu:
      memcpy(__dst, &unk_22BB3B7A2, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_11";
      int v6 = 1036;
      goto LABEL_19;
    case 0xCu:
      memcpy(__dst, &unk_22BB3BF94, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_12";
      int v6 = 1044;
      goto LABEL_19;
    case 0xDu:
      memcpy(__dst, &unk_22BB3C786, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_13";
      int v6 = 1052;
      goto LABEL_19;
    case 0xEu:
      memcpy(__dst, &unk_22BB3CF78, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_14";
      int v6 = 1060;
      goto LABEL_19;
    case 0xFu:
      memcpy(__dst, &unk_22BB3D76A, sizeof(__dst));
      uint64_t v5 = "Get_PatchContent_MECpuSsf_15";
      int v6 = 1068;
      goto LABEL_19;
    case 0x10u:
      memcpy(__dst, &unk_22BB3DF5C, 0x48BuLL);
      uint64_t v5 = "Get_PatchContent_MECpuSsf_16";
      int v6 = 1076;
LABEL_19:
      double result = memcpy_s(v5, v6, v4, a3, __dst, a3);
      break;
    default:
      return result;
  }
  return result;
}

void *Get_PatchContent_Config(void *result, unsigned int a2, size_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 <= 0x7F1)
  {
    uint64_t v4 = result;
    memcpy(__dst, &unk_22BB3E3E7, sizeof(__dst));
    return memcpy_s("Get_PatchContent_Config_0", 1145, v4, a3, __dst, a3);
  }
  return result;
}

unsigned __int8 *NK_SV_Meas_Check(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  char v5 = 0;
  char v6 = 0;
  v77[6] = *(double *)MEMORY[0x263EF8340];
  double v69 = 0.0;
  uint64_t v7 = 48;
  uint64_t v8 = (_DWORD *)a3;
  int v9 = (unsigned char *)a3;
  do
  {
    if (v9[2960])
    {
      int v10 = v8[764];
      if ((v10 - 1) >= 0x1D)
      {
        if (!v10) {
          goto LABEL_5;
        }
        double result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
      }
      ++v5;
    }
LABEL_5:
    if (v9[8536])
    {
      int v11 = v8[2158];
      if ((v11 - 1) < 0x1D) {
        goto LABEL_10;
      }
      if (v11)
      {
LABEL_16:
        double result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_10:
        ++v6;
        goto LABEL_11;
      }
    }
    if (!v9[14112]) {
      goto LABEL_11;
    }
    int v12 = v8[3552];
    if ((v12 - 1) < 0x1D) {
      goto LABEL_10;
    }
    if (v12) {
      goto LABEL_16;
    }
LABEL_11:
    ++v9;
    ++v8;
    --v7;
  }
  while (v7);
  v73[0] = v5;
  v73[1] = v6;
  double v13 = 0.0;
  uint64_t v14 = 182;
  do
  {
    double v13 = v13 + *(double *)(a2 + 8 * v14) * *(double *)(a2 + 8 * v14);
    unint64_t v15 = v14 - 179;
    --v14;
  }
  while (v15 > 1);
  uint64_t v16 = 0;
  int v66 = 0;
  unsigned __int16 v17 = (double *)(a2 + 872);
  unsigned int v64 = sqrt(v13) >> 3;
  while (1)
  {
    do
    {
      if (v16 == (void *)2)
      {
        BOOL v18 = 1;
        uint64_t v19 = a3 + 13960;
      }
      else
      {
        v72[(void)v16] = 0;
        *(&v70 + (void)v16) = -1;
        uint64_t v20 = &v77[3 * (void)v16];
        BOOL v18 = v16 == (void *)1;
        if (v16 == (void *)1) {
          uint64_t v19 = a3 + 8384;
        }
        else {
          uint64_t v19 = a3 + 2808;
        }
        *uint64_t v20 = 0.0;
        v20[1] = 0.0;
      }
      uint64_t v21 = 0;
      uint64_t v16 = (void *)((char *)v16 + 1);
      uint64_t v22 = &v77[3 * v18];
      char v67 = v22 + 1;
      BOOL v68 = v18;
      do
      {
        if (*(unsigned char *)(v19 + v21 + 152))
        {
          NK_Obs_Equ_SV(v16, *(unsigned __int8 *)(v19 + v21 + 200), v4[4 * v21 + 76], a3 + 56 * v21 + 20032, (uint64_t)v76, *(double *)(a3 + 656));
          uint64_t v23 = 0;
          double v24 = *(double *)(v19 + 8 * v21 + 2024);
          double v25 = 0.0;
          do
          {
            double v25 = v25 + v76[v23] * *(double *)(a2 + 1400 + v23 * 8);
            ++v23;
          }
          while (v23 != 11);
          double v26 = v24 - v25;
          uint64_t v27 = (double *)(v19 + 8 * v21);
          v27[601] = v24 - v25;
          double v28 = v27[505];
          double result = (unsigned __int8 *)invtst(v17, v76, 0xBu, v28, v24 - v25, 16.0, &v69);
          double v29 = v28 + v28 - fabs(v69);
          double v69 = v29;
          double v30 = v27[505] * 0.1;
          if (v29 >= v30)
          {
            double v30 = v29;
          }
          else if (v29 < 0.0)
          {
            double v69 = 0.0;
            double v29 = 0.0;
          }
          v27[649] = v29;
          int v31 = *(_DWORD *)(v19 + 4 * v21 + 248);
          if ((v31 - 1) >= 0x1D)
          {
            if (v31)
            {
              double result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            }
            else
            {
              if (*(unsigned char *)(a3 + v21 + 49)) {
                ++v72[v68];
              }
              double v32 = v26 * v26 / v30;
              if (v32 > *v22 || *(&v70 + v68) == 255)
              {
                *char v67 = *v22;
                *uint64_t v22 = v32;
                v22[2] = v32;
                *(&v70 + v68) = v21;
              }
              else if (v32 > *v67)
              {
                *char v67 = v32;
              }
              if (v32 > 16.0)
              {
                int v33 = v66;
                if (!*(unsigned char *)(a2 + 233)) {
                  int v33 = v66 + 1;
                }
                int v66 = v33;
              }
            }
          }
        }
        ++v21;
      }
      while (v21 != 48);
    }
    while (v16 != (void *)3);
    if (!v66)
    {
      if (!*(unsigned char *)(a2 + 233)) {
        return result;
      }
      double v36 = v77[0];
      unsigned int v37 = v72[0];
      BOOL v38 = v77[0] > 100.0 && v72[0] >= 6u;
      uint64_t v39 = a3 + 3056;
      if (v38 && v4[v70 + 604] <= 0x1Fu && v64 <= 0x270)
      {
        uint64_t v40 = 0;
        int v41 = 0;
        do
        {
          if (*(unsigned char *)(v39 + v40 - 96))
          {
            int v42 = *(_DWORD *)(v39 + 4 * v40);
            if ((v42 - 1) >= 0x1D)
            {
              if (v42)
              {
                double result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
                uint64_t v39 = a3 + 3056;
              }
              else if (v4[v40 + 604] >= 0x21u && ++v41 > 4)
              {
                uint64_t v35 = 0;
                int v34 = 0;
                int v55 = 1;
                uint64_t v56 = a3 + 2808;
                goto LABEL_97;
              }
            }
          }
        }
        while (++v40 != 48);
      }
      if (v36 <= 2500.0 || v37 < 5) {
        return result;
      }
      int v44 = *(unsigned __int8 *)(a2 + 234);
      if (*(unsigned char *)(a2 + 234))
      {
        if (v36 <= 1000000.0 || v44 != 1)
        {
          *(unsigned char *)(a2 + 234) = v44 - 1;
          return result;
        }
      }
      int v34 = 0;
      uint64_t v35 = 0;
      *(unsigned char *)(a2 + 234) = 4;
      goto LABEL_83;
    }
    if (v77[0] > v77[3])
    {
      int v34 = 0;
      uint64_t v35 = 0;
LABEL_83:
      uint64_t v46 = 1;
      uint64_t v56 = a3 + 2808;
      goto LABEL_87;
    }
    if (!*(unsigned char *)(a3 + v71 + 8536)) {
      goto LABEL_86;
    }
    int v47 = *(_DWORD *)(a3 + 4 * v71 + 8632);
    if ((v47 - 1) < 0x1D) {
      goto LABEL_86;
    }
    if (v47)
    {
      double result = (unsigned __int8 *)EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
LABEL_86:
      uint64_t v46 = 0;
      int v34 = 2;
      uint64_t v35 = 1;
      uint64_t v56 = a3 + 13960;
      goto LABEL_87;
    }
    uint64_t v46 = 0;
    int v34 = 1;
    uint64_t v35 = 1;
    uint64_t v56 = a3 + 8384;
LABEL_87:
    if (*(unsigned char *)(a2 + 233)) {
      return result;
    }
    if (v73[v35] > 2u) {
      break;
    }
    unsigned int v48 = v72[v35];
    if (v48 < 6)
    {
      if (v48 != 5) {
        break;
      }
      double v50 = v77[3 * v35];
    }
    else
    {
      uint64_t v49 = &v77[3 * v35];
      double v50 = *v49;
      if (*v49 > v49[1] * 1.1) {
        goto LABEL_96;
      }
    }
    if (v50 <= 225.0 || v50 <= v77[3 * v35 + 1] * 9.0) {
      break;
    }
LABEL_96:
    int v55 = 0;
LABEL_97:
    uint64_t v51 = *(&v70 + v35);
    NK_Obs_Equ_SV((void *)(v34 + 1), *(unsigned __int8 *)(v56 + v51 + 200), v4[4 * v51 + 76], a3 + 56 * v51 + 20032, (uint64_t)v76, *(double *)(a3 + 656));
    uint64_t v52 = v56 + 8 * v51;
    v76[11] = *(double *)(v52 + 2024);
    double result = (unsigned __int8 *)umeas((BOOL)v17, 0xBu, -*(double *)(v52 + 4040), v76, v75, v74, &v69, 1.0e20);
    ++v73[v35];
    int v53 = (_DWORD *)(v56 + 4 * v51 + 248);
    if (v55)
    {
      *int v53 = 25;
      --*(unsigned char *)(v56 + 3);
      ++*(unsigned char *)(v56 + 4);
    }
    else
    {
      *int v53 = 26;
      --*(unsigned char *)(v56 + 3);
      ++*(unsigned char *)(v56 + 4);
      if (v77[3 * v35] <= v77[3 * v35 + 1] * 16.0 || v77[3 * v35 + 2] <= 16.0)
      {
        uint64_t v54 = *(&v70 + v35);
        if ((!v35 || fabs(*(double *)(v56 + 8 * v54 + 4808)) <= 7.0) && v4[v54 + 700] - v4[v54 + 604] < -3) {
          goto LABEL_105;
        }
      }
    }
    *(unsigned char *)(a2 + *(&v70 + v35) + 6696) = 0;
LABEL_105:
    uint64_t v16 = 0;
    int v66 = 0;
    if (((*(unsigned char *)(a2 + 233) == 0) & ~v55) == 0) {
      return result;
    }
  }
  double v57 = v77[3 * v35];
  if (v57 <= 144.0 || v57 <= v77[3 * v35 + 1] + v77[3 * v35 + 1])
  {
    double v58 = 0.0277777778;
    if (!*(_DWORD *)(a3 + 968)) {
      double v58 = 0.25;
    }
    double v59 = v57 * v58;
    uint64_t v60 = a3 + 8 * v35;
    if (v59 > *(double *)(v60 + 20016)) {
      *(double *)(v60 + 20016) = v59;
    }
    double v61 = v77[3 * v46];
    if (v61 > 16.0)
    {
      double v62 = v58 * v61;
      uint64_t v63 = a3 + 8 * v46;
      if (v62 > *(double *)(v63 + 20016)) {
        *(double *)(v63 + 20016) = v62;
      }
    }
  }
  return result;
}

uint64_t Get_QZSS_Kep_Almanac(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)result;
  int v2 = *(_DWORD *)(result + 12);
  double v3 = (double)(unsigned __int16)v2 * 0.000000476837158;
  *(_DWORD *)(a2 + 20) = (*(_DWORD *)(result + 16) >> 4) & 0xFF000;
  int32x2_t v4 = vshr_n_s32((int32x2_t)vshl_u32(*(uint32x2_t *)(result + 16), (uint32x2_t)0x800000010), 0x10uLL);
  v5.i64[0] = v4.i32[0];
  v5.i64[1] = v4.i32[1];
  float64x2_t v6 = vmulq_f64(vcvtq_f64_s64(v5), (float64x2_t)xmmword_22BB3E870);
  char v7 = BYTE4(*(void *)(result + 16));
  double v8 = (double)(*(_DWORD *)(result + 24) & 0xFFFFFF) * 0.00048828125;
  int32x2_t v9 = vshl_n_s32(*(int32x2_t *)(result + 28), 8uLL);
  v5.i64[0] = v9.i32[0];
  v5.i64[1] = v9.i32[1];
  unsigned int v10 = *(_DWORD *)(result + 40);
  double v11 = (double)(int)(*(_DWORD *)(result + 36) << 8);
  *(float64x2_t *)(a2 + 80) = vmulq_f64(vcvtq_f64_s64(v5), (float64x2_t)vdupq_n_s64(0x3E1921FB54442D28uLL));
  *(double *)(a2 + 64) = v11 * 0.00000000146291808;
  *(double *)(a2 + 72) = v8;
  *(_WORD *)(a2 + 16) = *(_WORD *)(result + 10);
  *(unsigned char *)(a2 + 12) = BYTE2(v2) | 0xC0;
  *(double *)(a2 + 32) = (double)(int)((__int16)v10 & 0xFFFFFFE0) * 1.13686838e-13;
  *(double *)(a2 + 40) = v3;
  *(float64x2_t *)(a2 + 48) = v6;
  *(unsigned char *)(a2 + 13) = v7 & 0x1F;
  *(double *)(a2 + 24) = (double)(__int16)((v10 >> 8) & 0xFF00 | (32 * ((v10 >> 2) & 7))) * 0.0000000298023224;
  if ((BYTE2(v2) | 0xC0u) <= 0xC6)
  {
    *(double *)(a2 + 40) = v3 + 0.06;
    *(double *)(a2 + 48) = v6.f64[0] + 0.785398163;
  }
  *(_DWORD *)(a2 + 8) = 5;
  return result;
}

uint64_t IuiMsSuplPosReq(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 && *(_DWORD *)a2 && *(void *)(a2 + 8))
  {
    SuplRrlpExecutePosReq((unsigned int *)a2);
    double v3 = *(void **)(a2 + 8);
    if (v3) {
      free(v3);
    }
    char v4 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 69, "IuiMsSuplPosReq", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v6, 0, 1);
    }
    return -5;
  }
  return v4;
}

uint64_t IuiMsSuplPosTrigger(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 && (v3 = *a2, v3) && (char v4 = (const void *)*((void *)a2 + 1)) != 0)
  {
    lpp_t_supl_pos_trigger(a2[5], *((unsigned char *)a2 + 24), v3, v4);
    uint64_t v5 = (void *)*((void *)a2 + 1);
    if (v5) {
      free(v5);
    }
    char v6 = 0;
    *((void *)a2 + 1) = 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "IuiMsSuplPosTrigger", 513);
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    }
    return -5;
  }
  return v6;
}

uint64_t IuiMsSuplIndicateSessionEnd(unsigned int a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t session_info = gps_find_session_info(a2);
  if (!session_info)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", v11);
LABEL_13:
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    }
    return -1;
  }
  uint64_t v4 = session_info;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessionID,%u,Protocol,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 65, "IuiMsSuplIndicateSessionEnd", a2, *(_DWORD *)(v4 + 8));
    LbsOsaTrace_WriteLog(0x13u, __str, v6, 1, 1);
  }
  int v7 = *(_DWORD *)(v4 + 8);
  if (v7 == 2)
  {
    lpp_t_supl_session_end_ind(a2);
    return 0;
  }
  if (v7)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx POS Protocol\n");
      goto LABEL_13;
    }
    return -1;
  }
  SuplRrlpSessionEnd();
  return 0;
}

size_t Hal29_HandleGcdStatusRsp(unsigned __int8 *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GCD Status rcvd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 68, "Hal29_HandleGcdStatusRsp");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 5, 1);
  }
  g_IResponseStatus = a1[8];
  size_t result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      unint64_t v5 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v6 = __error();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v5, "HAL", 69, "Hal29_HandleGcdStatusRsp", 1542, *v6);
      return LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
    }
  }
  return result;
}

void Hal29_HandleSoftResetMsg(unsigned __int8 *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal29_HandleSoftResetMsg", a1[8]);
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  _MergedGlobals_5 = a1[8];
  if (_MergedGlobals_5 != 3)
  {
    if (_MergedGlobals_5 == 2)
    {
      if (byte_26AE77899 == 1)
      {
        if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem)
          && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          unint64_t v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          unint64_t v11 = __error();
          unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v10, "HAL", 69, "Hal29_HandleSoftResetMsg", 1542, *v11);
          LbsOsaTrace_WriteLog(0xDu, __str, v12, 0, 1);
        }
      }
      else if (g_HalCallbacks)
      {
        g_HalCallbacks(11);
      }
      uint64_t v14 = gnssOsa_Calloc("Hal29_HandleSoftResetMsg", 82, 1, 0x10uLL);
      if (v14)
      {
        v14[12] = 77;
        AgpsSendFsmMsg(129, 129, 8457984, v14);
      }
      return;
    }
    if (_MergedGlobals_5 == 1)
    {
      if ((byte_26AE77899 & 1) == 0)
      {
        uint64_t v4 = (void (*)(uint64_t))g_HalCallbacks;
        if (g_HalCallbacks)
        {
          uint64_t v5 = 10;
LABEL_22:
          v4(v5);
          return;
        }
      }
      return;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx resp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "HAL", 87, "Hal29_HandleSoftResetMsg", 515, a1[8]);
    int v9 = 2;
LABEL_19:
    LbsOsaTrace_WriteLog(0xDu, __str, v8, v9, 1);
    return;
  }
  if (byte_26AE77899 != 1)
  {
    uint64_t v4 = (void (*)(uint64_t))g_HalCallbacks;
    if (!g_HalCallbacks) {
      return;
    }
    uint64_t v5 = 12;
    goto LABEL_22;
  }
  if (!gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem)
    && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = __error();
    size_t v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v6, "HAL", 69, "Hal29_HandleSoftResetMsg", 1542, *v7);
    int v9 = 0;
    goto LABEL_19;
  }
}

void Hal29_HandleCpAgentResponse(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = 513;
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v2 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_7;
  }
  if (a2 <= 7)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v9 = 515;
    unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v2 = "%10u %s%c %s: #%04hx len\n";
    goto LABEL_7;
  }
  if (a1[4] == 67)
  {
    int v5 = a1[3];
    if (v5 == 84)
    {
      Hal29_HandleSoftResetMsg(a1);
    }
    else if (v5 == 82)
    {
      Hal29_HandleGcdStatusRsp(a1);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      uint64_t v9 = 515;
      uint64_t v10 = a1[3];
      unint64_t v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7);
      uint64_t v2 = "%10u %s%c %s: #%04hx MsgId,%u\n";
LABEL_7:
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, v2, v8, "HAL", 69, "Hal29_HandleCpAgentResponse", v9, v10);
LABEL_8:
      LbsOsaTrace_WriteLog(0xDu, __str, v3, 0, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MC,%u,MID,%u,MIDX,%u\n", v6, "HAL");
    goto LABEL_8;
  }
}

uint64_t Hal29_GetGcdStatus(void)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v16 = 0xFF0000437349787ALL;
  char v17 = 10;
  g_HalState = 16;
  if ((int)Hal22_ZxSendToChip(v16, 9uLL) <= 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v4 = mach_continuous_time();
      unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GCD status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 69, "Hal29_GetGcdStatus", 1282);
      LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
    }
    return 4294967289;
  }
  else
  {
    char v0 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
    if (v0 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 69, "Hal29_GetGcdStatus", 1543);
        LbsOsaTrace_WriteLog(0xDu, __str, v7, 0, 1);
      }
      return 4294967287;
    }
    else
    {
      if (!v0)
      {
        if (g_IResponseStatus == 5)
        {
          int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
          uint64_t result = 0;
          if (!IsLoggingAllowed) {
            return result;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,InActive\n");
        }
        else
        {
          if (g_IResponseStatus != 6)
          {
            int v13 = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
            uint64_t result = 0;
            if (!v13) {
              return result;
            }
            bzero(__str, 0x410uLL);
            uint64_t v14 = mach_continuous_time();
            size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,Unk,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 87, "Hal29_GetGcdStatus", g_IResponseStatus);
            int v12 = 2;
            goto LABEL_22;
          }
          int v1 = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
          uint64_t result = 0;
          if (!v1) {
            return result;
          }
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,Active\n");
        }
        size_t v11 = v3;
        int v12 = 4;
LABEL_22:
        LbsOsaTrace_WriteLog(0xDu, __str, v11, v12, 1);
        return 0;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 69, "Hal29_GetGcdStatus", 1541);
        LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
      }
      return 4294967285;
    }
  }
}

uint64_t Hal29_ReqGnssSoftReset(void)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)char v17 = 0x437449787ALL;
  char v18 = 10;
  byte_26AE77899 = 1;
  if ((int)Hal22_ZxSendToChip(v17, 9uLL) > 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: waiting for response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "HAL", 73, "Hal29_ReqGnssSoftReset");
      LbsOsaTrace_WriteLog(0xDu, __str, v1, 4, 1);
    }
    char v2 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x258u);
    if (v2 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v10 = 1543;
LABEL_17:
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v9, "HAL", 69, "Hal29_ReqGnssSoftReset", v10);
        LbsOsaTrace_WriteLog(0xDu, __str, v11, 0, 1);
      }
    }
    else
    {
      if (!v2)
      {
        if (_MergedGlobals_5 == 3)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v12 = mach_continuous_time();
            unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 69, "Hal29_ReqGnssSoftReset", 1290);
            LbsOsaTrace_WriteLog(0xDu, __str, v13, 0, 1);
          }
          uint64_t result = 4294967286;
        }
        else if (_MergedGlobals_5 == 2)
        {
          int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
          uint64_t result = 0;
          if (IsLoggingAllowed)
          {
            bzero(__str, 0x410uLL);
            uint64_t v5 = mach_continuous_time();
            unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 73, "Hal29_ReqGnssSoftReset", 1289);
            LbsOsaTrace_WriteLog(0xDu, __str, v6, 4, 1);
            uint64_t result = 0;
          }
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v14 = mach_continuous_time();
            unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Resp,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal29_ReqGnssSoftReset", 1290, _MergedGlobals_5);
            LbsOsaTrace_WriteLog(0xDu, __str, v15, 0, 1);
          }
          uint64_t result = 4294967288;
        }
        goto LABEL_19;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        int v10 = 1541;
        goto LABEL_17;
      }
    }
    uint64_t result = 4294967287;
LABEL_19:
    byte_26AE77899 = 0;
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 69, "Hal29_ReqGnssSoftReset", 1282);
    LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
  }
  return 4294967289;
}

void GLON_Alm_Calc_SemiMaj(uint64_t a1)
{
  double v3 = *(double *)(a1 + 56);
  long double v2 = *(double *)(a1 + 64);
  long double v4 = sin(*(double *)(a1 + 32) + 1.09955743);
  long double v5 = v4 * v4 * -2.5 + 2.0;
  double v6 = 1.0 - v3 * v3;
  long double v7 = cos(v2);
  double v8 = (v3 * v7 + 1.0) * ((v3 * v7 + 1.0) * (v3 * v7 + 1.0)) / v6
     + v5 * (v6 * sqrt(v6) / ((v3 * v7 + 1.0) * (v3 * v7 + 1.0)));
  double v9 = *(double *)(a1 + 40) + 43200.0;
  double v10 = 26000.0;
  do
  {
    double v11 = v10;
    double v10 = (v9 * 0.159154943 * (v9 * 0.159154943) * 398600.44 / (v10 * v10) + v10 * 2.0) * 0.333333333;
  }
  while (vabdd_f64(v10, v11) > 0.000001);
  double v12 = v8 * 1.5 * -0.00108262575;
  do
  {
    double v13 = v9 / (v12 * (6378.136 / (v6 * v10) * (6378.136 / (v6 * v10))) + 1.0) * 0.159154943;
    double v14 = v13 * v13 * 398600.44;
    double v15 = 26000.0;
    do
    {
      double v16 = v15;
      double v15 = (v14 / (v15 * v15) + v15 * 2.0) * 0.333333333;
    }
    while (vabdd_f64(v15, v16) > 0.000001);
    BOOL v17 = vabdd_f64(v15, v10) <= 0.001;
    double v10 = v15;
  }
  while (!v17);
}

uint64_t NK_Set_PR_Meas_Var(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, int a13, unsigned int a14, int a15, uint64_t a16)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  double v44 = 1.0;
  if (a15 >= 1)
  {
    uint64_t v19 = result;
    uint64_t v20 = 0;
    unsigned int v45 = 0;
    double v22 = (1.0 - a8 / 20.0) * (1.0 - a8 / 20.0);
    double v38 = (10.0 - a8) * 0.1275;
    double v23 = v38 + v22;
    BOOL v24 = v38 + v22 <= 1.0;
    if (v38 + v22 > 1.0) {
      double v25 = 1.0;
    }
    else {
      double v25 = v38 + v22;
    }
    if (v23 < 0.0) {
      BOOL v24 = 0;
    }
    if (a8 > 6.0)
    {
      double v26 = v38 + v22;
    }
    else
    {
      BOOL v24 = 1;
      double v26 = 1.0;
    }
    if (a8 <= 10.0)
    {
      double v27 = v26;
    }
    else
    {
      BOOL v24 = 1;
      double v27 = (1.0 - a8 / 20.0) * (1.0 - a8 / 20.0);
    }
    if (a8 > 20.0) {
      BOOL v24 = 1;
    }
    double v28 = (double *)(a16 + 8);
    if (a8 <= 20.0) {
      double v29 = v27;
    }
    else {
      double v29 = 0.0;
    }
    BOOL v39 = v24;
    do
    {
      if (*(unsigned char *)(a2 + v20))
      {
        uint64_t result = NK_Get_PR_Meas_Var(*(_DWORD *)(v19 + 4 * v20), 0, *(unsigned __int8 *)(a3 + v20), *(unsigned __int8 *)(a4 + v20), *(unsigned __int8 *)(a5 + v20), *(unsigned __int16 *)(a6 + 2 * v20), *(unsigned __int16 *)(a7 + 2 * v20), 0, *(_WORD *)(a10 + 2 * v20), *(unsigned char *)(a11 + v20), *a12, a14, &v44, &v45);
        double v30 = (double)v45;
        double v31 = (double)(result - v45);
        *(v28 - 1) = (double)v45;
        *double v28 = v31;
        double v32 = (double)result;
        v28[1] = (double)result;
        if (a14 >= 6)
        {
          if (a14 - 6 > 1)
          {
            uint64_t result = (uint64_t)EvCrt_Illegal_Default("NK_Set_PR_Meas_Var", 0x150u);
          }
          else if ((int)*a12 < 45)
          {
            double v33 = v29;
            if (!v39)
            {
              uint64_t result = (uint64_t)EvLog_v("NK_Set_PR_Meas_Var: Out of bound Elev_Deweighting_SF: %g Inverse_Parabola_Component: %g Linear_Component: %g GSpeed: %g Elev: %d", v23, (1.0 - a8 / 20.0) * (1.0 - a8 / 20.0), v38, a8, *a12);
              double v33 = v25;
              if (v25 < 0.0) {
                double v33 = 0.0;
              }
            }
            if (v44 > 1.0)
            {
              double v32 = (double)(v32 / v44);
              double v30 = (double)(v30 / v44);
            }
            double v34 = v33 * (v44 + -1.0) + 1.0;
            unsigned int v45 = (v34 * v30);
            double v35 = (double)v45;
            double v36 = (double)((v34 * v32) - v45);
            *(v28 - 1) = (double)v45;
            *double v28 = v36;
            if (dword_26AE6D828 == 1 && *(unsigned __int8 *)(a3 + v20) <= 0x15u)
            {
              double v37 = v34 * v34;
              *(v28 - 1) = v37 * v35;
              *double v28 = v37 * v36;
            }
          }
        }
      }
      ++v20;
      v28 += 3;
      a12 += 10;
    }
    while (a15 != v20);
  }
  return result;
}

uint64_t NK_Get_PR_Meas_Var(char a1, uint64_t a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned __int16 a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, double *a13, _DWORD *a14)
{
  int v19 = a3 - a5;
  NK_Interp_Var_Table((uint64_t)&PR_Meas_Var_Table, 16, a3 - a5);
  unsigned int v21 = v20;
  if (a9 >= 6u)
  {
    NK_Interp_Var_Table((uint64_t)&DO_Meas_Var_Table, 16, v19);
    v21 += ((double)a9 * 0.01 * 4.0 * v22 * 0.01);
  }
  *a14 = v21;
  NK_Interp_Var_Table((uint64_t)&PR_Lock_Time_Scale_Table, 4, a3);
  double v24 = v23 * 0.001;
  unsigned int v25 = (int)(v24 * (double)a7);
  double v26 = v24 * (double)a6;
  int v27 = (int)v26;
  unsigned int v28 = v21;
  if (v25 <= 0x18F)
  {
    if (v25 < 0x1F)
    {
      double v29 = &PR_FreqCode_Lock_Table;
      int v30 = 4;
      unsigned int v25 = (int)v26;
    }
    else
    {
      double v29 = &PR_Freq_Lock_Table;
      int v30 = 3;
    }
    NK_Interp_Var_Table((uint64_t)v29, v30, v25);
    unsigned int v28 = v21 + v31;
  }
  NK_Interp_Var_Table((uint64_t)&PR_Code_Lock_Table, 11, v27);
  int v33 = (9 * (a10 - a3 - 3) + 25) * (a10 - a3 - 3);
  if (a10 - a3 <= 3) {
    int v33 = 0;
  }
  if (a4 - a3 <= -6) {
    int v34 = 0;
  }
  else {
    int v34 = 5 * (a4 - a3 + 6) * (a4 - a3 + 6) * (a4 - a3 + 6);
  }
  unsigned int v35 = v33 + v34 + v28 + (int)v32;
  if (v35 >= 0xF424) {
    uint64_t v36 = 62500;
  }
  else {
    uint64_t v36 = v35;
  }
  double v37 = 1.0;
  if (a12 < 6) {
    goto LABEL_17;
  }
  if (a12 - 6 >= 2)
  {
    EvCrt_Illegal_Default("NK_Get_PR_Meas_Var", 0x269u);
    goto LABEL_17;
  }
  *a13 = 1.0;
  if (a11 <= 0x2C)
  {
    int v39 = 51 * (45 - a11) + 256;
    uint64_t v36 = (v36 * v39) >> 8;
    *a14 = (v21 * v39) >> 8;
    double v37 = (double)v39 * 0.00390625;
LABEL_17:
    *a13 = v37;
  }
  if (a1 == 2)
  {
    uint64_t v36 = (4 * v36 + 9);
    *a14 = (4 * *a14) | 1;
  }
  return v36;
}

uint64_t NK_Interp_Var_Table(uint64_t result, int a2, int a3)
{
  if (*(unsigned __int16 *)(result + 2) < a3 && *(unsigned __int16 *)(result + 4 * (a2 - 1) + 2) > a3)
  {
    unsigned __int16 v3 = 1;
    if (a2 >= 3)
    {
      do
      {
        if (*(unsigned __int16 *)(result + 4 * v3 + 2) >= a3) {
          break;
        }
        ++v3;
      }
      while (a2 - 1 > v3);
    }
  }
  return result;
}

uint64_t NK_Set_DO_Meas_Var(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13)
{
  v25[1] = *(double *)MEMORY[0x263EF8340];
  if (a12 >= 1)
  {
    uint64_t v16 = result;
    uint64_t v17 = 0;
    char v18 = (double *)(a13 + 16);
    do
    {
      if (*(unsigned char *)(a2 + v17))
      {
        v25[0] = 0.0;
        uint64_t result = NK_Get_DO_Meas_Var(*(_DWORD *)(v16 + 4 * v17), *(unsigned __int8 *)(a3 + v17), *(unsigned __int8 *)(a4 + v17), *(unsigned __int8 *)(a5 + v17), *(unsigned __int16 *)(a6 + 2 * v17), *(unsigned __int16 *)(a7 + 2 * v17), *(_DWORD *)(a8 + 4 * v17), *(unsigned __int16 *)(a9 + 2 * v17), *(_WORD *)(a10 + 2 * v17), v25);
        double v20 = v19 - v25[0];
        *(v18 - 2) = v25[0];
        *(v18 - 1) = v20;
        *char v18 = v19;
      }
      ++v17;
      v18 += 3;
    }
    while (a12 != v17);
  }
  return result;
}

uint64_t NK_Get_DO_Meas_Var(int a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7, uint64_t a8, __int16 a9, double *a10)
{
  NK_Interp_Var_Table((uint64_t)&DO_Meas_Var_Table, 16, a2 - a4);
  double v16 = v15 * 0.01;
  *a10 = v15 * 0.01;
  NK_Interp_Var_Table((uint64_t)&DO_Lock_Time_Scale_Table, 4, a2);
  uint64_t result = NK_Interp_Var_Table((uint64_t)&DO_Freq_Lock_Table, 7, ((double)a5 / v17));
  if (a7 >= 15) {
    uint64_t result = NK_Interp_Var_Table((uint64_t)&DO_Carr_Lock_Table, 6, a6);
  }
  if (a1 == 2)
  {
    double v19 = 4.0;
    if ((a9 & 0x200) == 0) {
      goto LABEL_8;
    }
  }
  if (a1 == 4 && (*(void *)&a1 & 0xFE0000uLL) >> 17 <= 2)
  {
    double v19 = 81.0;
LABEL_8:
    *a10 = v16 * v19;
  }
  return result;
}

void NK_Set_DR_Meas_Var(_DWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int16 *a5, int a6, uint64_t a7)
{
  v17[1] = *(double *)MEMORY[0x263EF8340];
  if (a6 >= 1)
  {
    uint64_t v12 = a6;
    double v13 = (double *)(a7 + 16);
    do
    {
      if (*a2++)
      {
        v17[0] = 0.0;
        double DR_Meas_Var = NK_Get_DR_Meas_Var(*a1, *a3, *a4, *a5, v17);
        double v16 = DR_Meas_Var - v17[0];
        *(v13 - 2) = v17[0];
        *(v13 - 1) = v16;
        *double v13 = DR_Meas_Var;
      }
      v13 += 3;
      ++a5;
      ++a4;
      ++a3;
      ++a1;
      --v12;
    }
    while (v12);
  }
}

double NK_Get_DR_Meas_Var(char a1, int a2, int a3, int a4, double *a5)
{
  NK_Interp_Var_Table((uint64_t)&DR_Meas_Var_Table, 10, a2 - a3);
  double v9 = v8 * 0.000001;
  *a5 = v8 * 0.000001;
  NK_Interp_Var_Table((uint64_t)&DR_Carr_Lock_Table, 5, a4);
  double v11 = v10 * 0.000001;
  if (a1 == 2)
  {
    double v9 = v9 + 0.000225;
    *a5 = v9;
    double v11 = v11 + 0.000225;
  }
  return v9 + v11;
}

uint64_t gps_set_gnss_assist_data_error_req(unsigned int a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (gps_find_session_info(*(_DWORD *)(a2 + 8)))
  {
    if (a1 - 1 >= 4)
    {
      if (a1)
      {
        a1 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v10 = mach_continuous_time();
          size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Server Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "gps_set_gnss_assist_data_error_req", 2307);
          int v6 = 0;
          goto LABEL_10;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        size_t v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Server Error not present\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "PSP", 87, "gps_set_gnss_assist_data_error_req", 2307);
        int v6 = 2;
LABEL_10:
        LbsOsaTrace_WriteLog(0x13u, __str, v5, v6, 1);
        a1 = 0;
      }
    }
    return GNS_AsstServerError(*(_DWORD *)(a2 + 8), 3, a1, 0);
  }
  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "gps_set_gnss_assist_data_error_req", 2052, *(_DWORD *)(a2 + 8));
    return LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
  }
  return result;
}

size_t gps_set_gps_time(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (gps_find_session_info(*(_DWORD *)(a3 + 8)))
  {
    size_t v5 = gnssOsa_Calloc("gps_set_gps_time", 204, 1, 0x7CuLL);
    if (v5)
    {
      int v6 = v5;
      *(_DWORD *)size_t v5 = *(_DWORD *)(a1 + 4);
      v5[6] = *(_WORD *)a1;
      *((_DWORD *)v5 + 30) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned int v7 = *(unsigned __int8 *)(a1 + 8);
      if (v7 == 255) {
        LOWORD(v8) = -1;
      }
      else {
        int v8 = (int)((pow(1.18, (double)v7) + -1.0) * 0.0022 * 0.000333333333);
      }
      v6[2] = v8;
      *((_DWORD *)v6 + 4) = -1;
      *((_DWORD *)v6 + 2) = 0x7FFFFFFF;
      uint64_t v15 = *(unsigned __int8 *)(a1 + 60);
      *((unsigned char *)v6 + 20) = v15;
      if (v15)
      {
        double v16 = v6 + 13;
        uint64_t v17 = a1 + 68;
        do
        {
          *((unsigned char *)v16 - 4) = *(unsigned char *)(v17 - 6);
          *((unsigned char *)v16 - 3) = *(unsigned char *)(v17 - 2);
          *(v16 - 1) = *(_WORD *)(v17 - 1);
          *double v16 = *(_WORD *)(v17 - 4);
          v16 += 3;
          v17 += 8;
          --v15;
        }
        while (v15);
        unint64_t v18 = 0;
        double v19 = v6 + 13;
        do
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v20 = mach_continuous_time();
            unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Index,%zu,Satid,%u,antiSpoof,%u,Alert,%u,tlmRes,%u,tlmWord,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 65, "gps_set_gps_time", v18, *((unsigned __int8 *)v19 - 4), *((unsigned __int8 *)v19 - 3), *((unsigned __int8 *)v19 - 2), *((unsigned __int8 *)v19 - 1), *v19);
            LbsOsaTrace_WriteLog(0x13u, __str, v21, 1, 1);
          }
          ++v18;
          v19 += 3;
        }
        while (v18 < *((unsigned __int8 *)v6 + 20));
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: gpsTow,%u,GpsTowUnc,%u,RefDeltaCellTime,%u,GpsWeek,%u,RefCellTimeUnc,%u,NumTowAssist,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "PSP", 65, "gps_set_gps_time", *(_DWORD *)v6, (unsigned __int16)v6[2], *((_DWORD *)v6 + 2), (unsigned __int16)v6[6], *((_DWORD *)v6 + 4), *((unsigned __int8 *)v6 + 20));
        LbsOsaTrace_WriteLog(0x13u, __str, v23, 1, 1);
      }
      if ((unsigned __int16)(v6[2] + 1) > 0x3DCu || (*((_DWORD *)v6 + 4) + 1) >= 0x2D2E65)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ref time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "PSP", 69, "posp_utils_checkGpsRefTime", 772);
          LbsOsaTrace_WriteLog(0x13u, __str, v25, 0, 1);
        }
      }
      else
      {
        GNS_AsstGpsRefTime(*(_DWORD *)(a3 + 8), 3u, (long long *)v6, 0);
        SendStatusReport(*(_DWORD *)(a3 + 8), 35, 0, (long long *)v6, 0, 255);
      }
      free(v6);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v13 = mach_continuous_time();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "gps_set_gps_time", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
    }
    size_t result = *(void *)(a1 + 192);
    if (result) {
      size_t result = MEMORY[0x230F4E5A0](result, 0x1000C805076FDFDLL);
    }
    *(void *)(a1 + 192) = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (v9) {
      MEMORY[0x230F4E5A0](v9, 0x1000C805076FDFDLL);
    }
    *(void *)(a1 + 192) = 0;
    size_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 69, "gps_set_gps_time", 2052, *(_DWORD *)(a3 + 8));
      return LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
    }
  }
  return result;
}

uint64_t gps_set_based_aid(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!gps_find_session_info(*(_DWORD *)(a3 + 8)))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_33;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n");
LABEL_30:
    LbsOsaTrace_WriteLog(0x13u, __str, v26, 0, 1);
    goto LABEL_33;
  }
  if (!*a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_33;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Zero Satellites\n");
    goto LABEL_30;
  }
  size_t v5 = gnssOsa_Calloc("gps_set_based_aid", 491, 1, 84 * *a1);
  if (!v5)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      goto LABEL_33;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_30;
  }
  int v6 = v5;
  if (*a1)
  {
    unint64_t v7 = 0;
    int v30 = v5;
    int v8 = v5 + 20;
    uint64_t v9 = 96;
    do
    {
      uint64_t v10 = *((void *)a1 + 1) + v9;
      *((unsigned char *)v8 - 80) = *(unsigned char *)(v10 - 96);
      *(_WORD *)((char *)v8 - 79) = *(_WORD *)(v10 - 92);
      unsigned int v11 = *(unsigned __int8 *)(v10 - 90);
      if (v11 >= 0x3F) {
        LOBYTE(v11) = 63;
      }
      *((unsigned char *)v8 - 77) = v11;
      *((unsigned char *)v8 - 76) = *(unsigned char *)(v10 - 86);
      *((_WORD *)v8 - 37) = *(_WORD *)(v10 - 88);
      *((_WORD *)v8 - 36) = *(_WORD *)(v10 - 66);
      *(_OWORD *)(v8 - 17) = *(_OWORD *)(v10 - 84);
      int v12 = *(__int16 *)(v10 - 68);
      *((unsigned char *)v8 - 52) = *(_WORD *)(v10 - 68);
      *((unsigned char *)v8 - 51) = *(unsigned char *)(v10 - 64);
      if (v12 > 127)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v13 = mach_continuous_time();
          unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephem_tgd,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "gps_set_based_aid", 772, *(__int16 *)(*((void *)a1 + 1) + v9 - 68));
          LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
        }
      }
      else
      {
        *((unsigned char *)v8 - 52) = v12;
      }
      int v15 = *(__int16 *)(*((void *)a1 + 1) + v9 - 64);
      if (v15 > 127)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v16 = mach_continuous_time();
          unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephem_af2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "gps_set_based_aid", 772, *(__int16 *)(*((void *)a1 + 1) + v9 - 64));
          LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
        }
      }
      else
      {
        *((unsigned char *)v8 - 51) = v15;
      }
      unint64_t v18 = (_WORD *)(*((void *)a1 + 1) + v9);
      *((_WORD *)v8 - 25) = *(v18 - 31);
      *((void *)v8 - 6) = *(void *)(v18 - 30);
      *(v8 - 10) = *((_DWORD *)v18 - 13);
      *((_WORD *)v8 - 18) = *(v18 - 24);
      *((_WORD *)v8 - 17) = *(v18 - 20);
      *(v8 - 8) = *((_DWORD *)v18 - 11);
      *(v8 - 7) = *((_DWORD *)v18 - 9);
      *((_WORD *)v8 - 12) = *(v18 - 16);
      *((unsigned char *)v8 - 22) = *((unsigned char *)v18 - 30);
      *((unsigned char *)v8 - 21) = *((unsigned char *)v18 - 29);
      *((_WORD *)v8 - 10) = *(v18 - 14);
      *((_WORD *)v8 - 9) = *(v18 - 10);
      *(v8 - 4) = *((_DWORD *)v18 - 6);
      *(v8 - 3) = *((_DWORD *)v18 - 4);
      *((_WORD *)v8 - 4) = *v18;
      *((_WORD *)v8 - 3) = *(v18 - 6);
      *(void *)(v8 - 1) = *((void *)v18 - 1);
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v19 = mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SatId,%u,EphemCodeOnL2,%u,EphemURA,%u,EphemSvHealth,%u,Epheml2pFlag,%u,EphemIodc,%u,EphemToc,%u,Reserved1,%u,Reserved2,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 65, "gps_set_based_aid", *((unsigned __int8 *)v8 - 80), *((unsigned __int8 *)v8 - 79), *((unsigned __int8 *)v8 - 78), *((unsigned __int8 *)v8 - 77), *((unsigned __int8 *)v8 - 76), *((unsigned __int16 *)v8 - 37), *((unsigned __int16 *)v8 - 36), *(v8 - 17), *(v8 - 16));
        LbsOsaTrace_WriteLog(0x13u, __str, v20, 1, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v21 = mach_continuous_time();
        unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Reserved3,%u,Reserved4,%u,EphemTgd,%d,EphemAf2,%d,EphemAf1,%d,EphemAf0,%d,EphemCrs,%d,EphemDeltaN,%d,EphemMo,%d,EphemCuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "PSP", 65, "gps_set_based_aid", *(v8 - 15), *(v8 - 14), *((char *)v8 - 52), *((char *)v8 - 51), *((__int16 *)v8 - 25), *(v8 - 12), *((__int16 *)v8 - 22), *((__int16 *)v8 - 21), *(v8 - 10), *((__int16 *)v8 - 18));
        LbsOsaTrace_WriteLog(0x13u, __str, v22, 1, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EphemCus,%d,Epheme,%u,EphemAPowerhalf,%u,EphemToe,%u,EphemFitFlag,%u,EphemAODO,%u,EphemCic,%d,EphemCis,%d,EphemOmegaA0,%d,EphemIo,%d,EphemIdot,%d,EphemCrc,%d,EphemW,%d,EphemOmegaAdot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "PSP", 65, "gps_set_based_aid", *((__int16 *)v8 - 17), *(v8 - 8), *(v8 - 7), *((unsigned __int16 *)v8 - 12), *((unsigned __int8 *)v8 - 22), *((unsigned __int8 *)v8 - 21), *((__int16 *)v8 - 10), *((__int16 *)v8 - 9), *(v8 - 4), *(v8 - 3), *((__int16 *)v8 - 4),
                *((__int16 *)v8 - 3),
                *(v8 - 1),
                *v8);
        LbsOsaTrace_WriteLog(0x13u, __str, v24, 1, 1);
      }
      ++v7;
      unint64_t v25 = *a1;
      v8 += 21;
      v9 += 100;
    }
    while (v7 < v25);
    int v6 = v30;
  }
  else
  {
    LODWORD(v25) = 0;
  }
  GNS_AsstGpsNavModel(*(_DWORD *)(a3 + 8), 3, v25, v6, 0);
  SendStatusReport(*(_DWORD *)(a3 + 8), 37, 0, 0, 0, 255);
  free(v6);
LABEL_33:
  uint64_t v29 = *((void *)a1 + 1);
  unsigned int v28 = a1 + 8;
  uint64_t result = v29;
  if (v29) {
    uint64_t result = MEMORY[0x230F4E5A0](result, 0x1000C80A2FAA732);
  }
  *unsigned int v28 = 0;
  return result;
}

uint64_t gps_set_almanac_aid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!gps_find_session_info(*(_DWORD *)(a3 + 8)))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 69, "gps_set_almanac_aid", 2052);
      LbsOsaTrace_WriteLog(0x13u, __str, v15, 0, 1);
    }
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a1 + 2))
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Zero Satellites\n");
    return LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
  }
  unint64_t v18 = (unsigned __int8 *)gnssOsa_Calloc("gps_set_almanac_aid", 597, 1, 36 * *(unsigned __int8 *)(a1 + 2));
  if (!v18)
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
  }
  if (*(unsigned char *)(a1 + 2))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 30;
    int v6 = v18;
    do
    {
      unint64_t v7 = (_WORD *)(*(void *)(a1 + 8) + v5);
      *int v6 = *((unsigned char *)v7 - 30);
      v6[1] = -1;
      *((_WORD *)v6 + 2) = *(v7 - 14);
      v6[6] = *((unsigned char *)v7 - 26);
      v6[7] = *((unsigned char *)v7 - 20);
      *((_WORD *)v6 + 4) = *(v7 - 12);
      *(_OWORD *)(v6 + 12) = *(_OWORD *)(v7 - 9);
      *((_WORD *)v6 + 14) = *(v7 - 11);
      *((_WORD *)v6 + 15) = *(v7 - 1);
      *((_WORD *)v6 + 16) = *v7;
      v6[2] = *(unsigned char *)a1;
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SatId,%u,DataId,%u,AlmanacWNA,%u,AlmanacE,%u,AlmanacToa,%u,AlmanacSVhealth,%u,AlmanacDeltai,%d,AlmanacAsqrt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 65, "gps_set_almanac_aid", *v6, v6[1], v6[2], *((unsigned __int16 *)v6 + 2), v6[6], v6[7], *((__int16 *)v6 + 4), *((_DWORD *)v6 + 3));
        LbsOsaTrace_WriteLog(0x13u, __str, v9, 1, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AlmanacOmega0,%d,AlmanacOmega,%d,AlmanacM0,%d,AlmanacOmegaDot,%d,AlmanacAF0,%d,AlmanacAF1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 65, "gps_set_almanac_aid", *((_DWORD *)v6 + 4), *((_DWORD *)v6 + 5), *((_DWORD *)v6 + 6), *((__int16 *)v6 + 14), *((__int16 *)v6 + 15), *((__int16 *)v6 + 16));
        LbsOsaTrace_WriteLog(0x13u, __str, v11, 1, 1);
      }
      ++v4;
      v6 += 36;
      v5 += 32;
    }
    while (v4 < *(unsigned __int8 *)(a1 + 2));
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Almanac received in POSP but not injected to HSW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 73, "gps_set_almanac_aid");
    LbsOsaTrace_WriteLog(0x13u, __str, v13, 4, 1);
  }
  free(v18);
LABEL_16:
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = MEMORY[0x230F4E5A0](result, 0x1000C800FACD818);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void gps_set_gnss_ref_loc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!gps_find_session_info(*(_DWORD *)(a4 + 8)))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n");
LABEL_15:
    LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    return;
  }
  int v6 = gnssOsa_Calloc("gps_set_gnss_ref_loc", 660, 1, 0x34uLL);
  if (!v6)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_15;
  }
  unint64_t v7 = v6;
  v6[1] = 1;
  if (*(_WORD *)(a1 + 18) != 9)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    unint64_t v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape,%u\n", v20);
    goto LABEL_15;
  }
  v6[3] = 16;
  void v6[5] = *(_DWORD *)(a1 + 24) & 0x7FFFFF;
  v6[6] = *(_DWORD *)(a1 + 32);
  if (*(unsigned char *)(a1 + 20)) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  int v6[4] = v8;
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 >> 16)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v11 = mach_continuous_time();
      unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx altitude,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 69, "gps_set_gnss_ref_loc", 772, *(void *)(a1 + 40));
      LbsOsaTrace_WriteLog(0x13u, __str, v12, 0, 1);
    }
  }
  else
  {
    *((_WORD *)v6 + 14) = v9;
  }
  if ((*(void *)(a1 + 40) & 0x8000) != 0) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  v7[9] = v13;
  unsigned int v14 = *(unsigned __int8 *)(a1 + 36);
  if (v14 <= 0x45) {
    LOBYTE(v14) = 69;
  }
  *((unsigned char *)v7 + 30) = v14;
  unsigned int v15 = *(unsigned __int8 *)(a1 + 37);
  if (v15 <= 0x45) {
    LOBYTE(v15) = 69;
  }
  *((unsigned char *)v7 + 31) = v15;
  *((unsigned char *)v7 + 32) = *(unsigned char *)(a1 + 38);
  *((_WORD *)v7 + 20) = *(_WORD *)(a1 + 48);
  v7[2] = 2;
  v7[12] = 3;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Shape Type is Ellipsoid Point Uncertain Altitude\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 73, "gps_set_gnss_ref_loc");
    LbsOsaTrace_WriteLog(0x13u, __str, v17, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 1))
  {
    bzero(__str, 0x410uLL);
    uint64_t v18 = mach_continuous_time();
    unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%u,v_FixType,%u,v_ShapeType,%u,v_SignOfLat,%u,v_Latitude,%u,v_Longitude,%d,v_Altitude,%u,v_UncertSemiMajor,%u,v_UncertSemiMinor,%u,v_AxisBearing,%u,v_DirectOfAlt,%u,v_UncertAltitude,%u,v_Confidence,%u,v_IncludedAngle,%u,v_OffsetAngle,%u,v_InnerRadius,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 73, "gps_set_gnss_ref_loc", v7[1], v7[2], v7[3], v7[4], v7[5], v7[6], *((unsigned __int16 *)v7 + 14), *((unsigned __int8 *)v7 + 30), *((unsigned __int8 *)v7 + 31), *((unsigned __int8 *)v7 + 32),
            v7[9],
            *((unsigned __int8 *)v7 + 40),
            *((unsigned __int8 *)v7 + 41),
            *((unsigned __int8 *)v7 + 42),
            *((unsigned __int8 *)v7 + 43),
            v7[11]);
    LbsOsaTrace_WriteLog(0x13u, __str, v19, 4, 1);
  }
  GNS_AsstRefPos(*(_DWORD *)(a4 + 8), 4u, (long long *)v7, 0);
  SendStatusReport(*(_DWORD *)(a4 + 8), 36, 0, 0, (long long *)v7, 255);
  free(v7);
}

void gps_set_gps_real_time_integrity(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 8))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RTI data\n");
LABEL_23:
    LbsOsaTrace_WriteLog(0x13u, __str, v13, 0, 1);
    return;
  }
  if (!gps_find_session_info(*(_DWORD *)(a2 + 8)))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "PSP", 69, "gps_set_gps_real_time_integrity", 2052);
      LbsOsaTrace_WriteLog(0x13u, __str, v15, 0, 1);
    }
    goto LABEL_18;
  }
  unint64_t v4 = (long long *)gnssOsa_Calloc("gps_set_gps_real_time_integrity", 781, 1, 0x11uLL);
  if (!v4)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_23;
  }
  uint64_t v5 = v4;
  *(unsigned char *)unint64_t v4 = *(unsigned char *)a1;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: numOfSats,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 65, "gps_set_gps_real_time_integrity", *(unsigned __int8 *)v5);
    LbsOsaTrace_WriteLog(0x13u, __str, v7, 1, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: badSvId List\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 65, "gps_set_gps_real_time_integrity");
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 1, 1);
  }
  if (*(unsigned char *)v5)
  {
    unint64_t v10 = 0;
    do
    {
      *((unsigned char *)v5 + v10 + 1) = *(unsigned char *)(*(void *)(a1 + 8) + v10);
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: svID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "PSP", 65, "gps_set_gps_real_time_integrity", *((unsigned __int8 *)v5 + v10 + 1));
        LbsOsaTrace_WriteLog(0x13u, __str, v12, 1, 1);
      }
      ++v10;
    }
    while (v10 < *(unsigned __int8 *)v5);
  }
  GNS_AsstGpsRti(*(_DWORD *)(a2 + 8), 3, v5, 0);
  free(v5);
LABEL_18:
  uint64_t v16 = *(void **)(a1 + 8);
  if (v16) {
    free(v16);
  }
  *(void *)(a1 + 8) = 0;
}

void gps_set_gps_utc_model(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (gps_find_session_info(*(_DWORD *)(a2 + 8)))
  {
    unint64_t v4 = (uint64_t *)gnssOsa_Calloc("gps_set_gps_utc_model", 826, 1, 0x10uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      *unint64_t v4 = *(void *)a1;
      *((unsigned char *)v4 + 13) = *(unsigned char *)(a1 + 13);
      *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
      *((unsigned char *)v4 + 12) = *(unsigned char *)(a1 + 12);
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UtcA1,%d,UtcA0,%d,UtcTot,%u,UtcWnT,%u,UtcDeltaTLs,%d,UtcWnLsf,%u,UtcDn,%d,UtcDeltaTLsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 65, "gps_set_gps_utc_model", *(_DWORD *)v5, *((_DWORD *)v5 + 1), *((unsigned __int8 *)v5 + 8), *((unsigned __int8 *)v5 + 9), *((char *)v5 + 10), *((unsigned __int8 *)v5 + 11), *((char *)v5 + 12), *((char *)v5 + 13));
        LbsOsaTrace_WriteLog(0x13u, __str, v7, 1, 1);
      }
      GNS_AsstGpsUtcModel(*(_DWORD *)(a2 + 8), 3, v5, 0);
      free(v5);
      return;
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0)) {
      return;
    }
    bzero(__str, 0x410uLL);
    uint64_t v13 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "gps_set_gps_utc_model", 1537);
    int v12 = 0;
LABEL_12:
    LbsOsaTrace_WriteLog(0x13u, __str, v11, v12, 1);
    return;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 69, "gps_set_gps_utc_model", 2052);
    LbsOsaTrace_WriteLog(0x13u, __str, v9, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "gps_set_gps_utc_model");
    int v12 = 5;
    goto LABEL_12;
  }
}

void gps_set_gnss_iono_model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (gps_find_session_info(*(_DWORD *)(a4 + 8)))
  {
    uint64_t v6 = (char *)gnssOsa_Calloc("gps_set_gnss_iono_model", 871, 1, 8uLL);
    if (v6)
    {
      unsigned __int16 v7 = v6;
      *(void *)uint64_t v6 = *(void *)(a1 + 2);
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: alpha0,%d,alpha1,%d,alpha2,%d,alpha3,%d,beta0,%d,beta1,%d,beta2,%d,beta3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 65, "gps_set_gnss_iono_model", *v7, v7[1], v7[2], v7[3], v7[4], v7[5], v7[6], v7[7]);
        LbsOsaTrace_WriteLog(0x13u, __str, v9, 1, 1);
      }
      GNS_AsstGpsIonoModel(*(_DWORD *)(a4 + 8), 3, v7, 0);
      free(v7);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 69, "gps_set_gnss_iono_model", 2052);
    LbsOsaTrace_WriteLog(0x13u, __str, v11, 0, 1);
  }
}

uint64_t gps_gnss_start_auto_mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t session_info = gps_find_session_info(*(_DWORD *)(a4 + 8));
  if (session_info)
  {
    *(unsigned char *)(session_info + 5) = *(unsigned char *)(session_info + 5) & 0xF8 | 1;
    *(_WORD *)(session_info + 12) = *(_WORD *)(a2 + 36);
    sendPositionReq();
    return 4;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "gps_gnss_start_auto_mode", 2052);
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    }
    return 5;
  }
}

void sendPositionReq()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v2 = v1;
  int v4 = v3;
  int v6 = v5;
  uint64_t v7 = (unsigned __int16 *)v0;
  uint64_t v45 = *MEMORY[0x263EF8340];
  unsigned __int16 v8 = gnssOsa_Calloc("sendPositionReq", 991, 1, 0x28uLL);
  if (!v8) {
    return;
  }
  unsigned __int16 v9 = v8;
  if (v4 == 1 || v4 == 4) {
    int v11 = 3;
  }
  else {
    int v11 = 1;
  }
  v8[3] = 1000 * *v7;
  void v8[4] = v11;
  *((_WORD *)v8 + 2) = 1;
  *(_DWORD *)((char *)v8 + 6) = -1;
  v8[7] = 0;
  v8[8] = 0;
  if (v4 == 1)
  {
    int v12 = 3;
  }
  else
  {
    if (v4 != 4)
    {
      if (v4 == 2) {
        *unsigned __int16 v8 = 1;
      }
      goto LABEL_40;
    }
    int v12 = 2;
  }
  *unsigned __int16 v8 = v12;
  unsigned int v13 = *((_DWORD *)v7 + 1);
  if (v13 != -1)
  {
    if (v13) {
      unsigned int v13 = (int)(log((double)v13 / 10.0 + 1.0) * 10.5 + 0.5);
    }
    *((unsigned char *)v9 + 6) = v13;
  }
  int v14 = *((unsigned __int8 *)v7 + 11);
  if (v14 != 255) {
    *((unsigned char *)v9 + 7) = v14;
  }
  if (*((unsigned char *)v7 + 12) == 1)
  {
    unsigned int v15 = *((_DWORD *)v7 + 4);
    if (v15 != -1)
    {
      if (v15) {
        unsigned int v15 = (int)(log((double)v15 / 10.0 + 1.0) * 10.5 + 0.5);
      }
      *((unsigned char *)v9 + 8) = v15;
    }
    int v16 = *((unsigned __int8 *)v7 + 20);
    if (v16 != 255) {
      *((unsigned char *)v9 + 9) = v16;
    }
  }
  if (*((unsigned char *)v7 + 9) == 1)
  {
    int v17 = *((unsigned __int8 *)v7 + 33);
    if (v17 != 255)
    {
      int v18 = v17 & 0xF;
      if (v18) {
        v9[7] = v18;
      }
    }
  }
  int v19 = *((unsigned __int8 *)v7 + 32);
  if (*((unsigned char *)v7 + 32) && v19 != 255)
  {
    if ((v19 & 0xB7) != 0)
    {
      if ((v19 & 1) == 0) {
        goto LABEL_35;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v40 = mach_continuous_time();
        unsigned __int16 v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Shape,%u not supported\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "PSP", 69, "sendPositionReq", 770, *((unsigned __int8 *)v7 + 32));
        LbsOsaTrace_WriteLog(0x13u, __str, v41, 0, 1);
      }
      *(void *)int __str = 0;
      memset_s(&v43, 0x285A0uLL, 0, 0x285A0uLL);
      *(void *)int __str = 0x285A000000004;
      uint64_t v44 = 0x200000001;
      int v43 = v6;
      Process_POSP_Response((unsigned __int8 *)__str);
      LOBYTE(v19) = *((unsigned char *)v7 + 32);
      if ((v19 & 1) == 0)
      {
LABEL_35:
        if ((v19 & 2) == 0) {
          goto LABEL_36;
        }
        goto LABEL_71;
      }
    }
    v9[8] |= 1u;
    if ((v19 & 2) == 0)
    {
LABEL_36:
      if ((v19 & 4) == 0) {
        goto LABEL_37;
      }
      goto LABEL_72;
    }
LABEL_71:
    v9[8] |= 2u;
    if ((v19 & 4) == 0)
    {
LABEL_37:
      if ((v19 & 0x10) == 0) {
        goto LABEL_38;
      }
      goto LABEL_73;
    }
LABEL_72:
    v9[8] |= 4u;
    if ((v19 & 0x10) == 0)
    {
LABEL_38:
      if ((v19 & 0x20) == 0) {
        goto LABEL_40;
      }
LABEL_39:
      v9[8] |= 0x10u;
      goto LABEL_40;
    }
LABEL_73:
    v9[8] |= 8u;
    if ((v19 & 0x20) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_40:
  if (v7[18])
  {
    *((unsigned char *)v9 + 36) = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: AGPS constellation requested\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 73, "sendPositionReq");
      LbsOsaTrace_WriteLog(0x13u, __str, v21, 4, 1);
    }
  }
  if (*((unsigned char *)v7 + 21) == 1)
  {
    *((unsigned char *)v9 + 37) = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UE can request for additional assistance data\n");
LABEL_48:
      LbsOsaTrace_WriteLog(0x13u, __str, v22, 4, 1);
    }
  }
  else
  {
    *((unsigned char *)v9 + 37) = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UE cannot request for additional assistance data\n");
      goto LABEL_48;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v23 = mach_continuous_time();
    unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: v_LocInfoType,%u,v_LocShapeTypes,%u,v_VelReqType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "PSP", 65, "sendPositionReq", *v9, v9[8], v9[7]);
    LbsOsaTrace_WriteLog(0x13u, __str, v24, 1, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v25 = mach_continuous_time();
    unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReportingAmount,%u,HorAccuracy,%u,HorAccConfidence,%u,VertAccuracy,%u,VertAccConfidence,%u,RespTime,%u,posReportType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "PSP", 65, "sendPositionReq", *((unsigned __int16 *)v9 + 2), *((unsigned __int8 *)v9 + 6), *((unsigned __int8 *)v9 + 7), *((unsigned __int8 *)v9 + 8), *((unsigned __int8 *)v9 + 9), v9[3], v9[4]);
    LbsOsaTrace_WriteLog(0x13u, __str, v26, 1, 1);
  }
  uint64_t session_info = gps_find_session_info(v6);
  uint64_t v28 = session_info;
  if (session_info)
  {
    *(unsigned char *)(session_info + 16) = 1;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v29 = mach_continuous_time();
    unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "PSP", 69, "sendPositionReq", 2052);
    LbsOsaTrace_WriteLog(0x13u, __str, v30, 0, 1);
  }
  int v31 = GNS_PospLocReq(v6, (uint64_t)v9, v2 != 0);
  if (v31 != 1)
  {
    int v32 = v31;
    *(void *)int __str = 0;
    memset_s(&v43, 0x285A0uLL, 0, 0x285A0uLL);
    *(void *)int __str = 0x285A000000004;
    LODWORD(v44) = 1;
    HIDWORD(v44) = v32;
    int v43 = v6;
    Process_POSP_Response((unsigned __int8 *)__str);
  }
  int v33 = *v9 - 1;
  if (v33 >= 3)
  {
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    int v34 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v36 = mach_continuous_time();
      unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "PSP", 69, "sendPositionReq", 770, *v9);
      LbsOsaTrace_WriteLog(0x13u, __str, v37, 0, 1);
      int v34 = 0;
    }
  }
  else
  {
    int v34 = dword_22BB3EA58[v33];
  }
  SendStatusReport(v6, v34, 0, 0, 0, *((unsigned __int8 *)v9 + 6));
  if (v28)
  {
    long long v38 = *(_OWORD *)v9;
    long long v39 = *((_OWORD *)v9 + 1);
    *(void *)(v28 + 51) = *(void *)((char *)v9 + 31);
    *(_OWORD *)(v28 + 36) = v39;
    *(_OWORD *)(v28 + 20) = v38;
    *(_DWORD *)(v28 + 60) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  }
  free(v9);
}

uint64_t gps_gnss_start_based_mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t session_info = gps_find_session_info(*(_DWORD *)(a4 + 8));
  if (session_info)
  {
    *(unsigned char *)(session_info + 5) = *(unsigned char *)(session_info + 5) & 0xF8 | 4;
    *(_WORD *)(session_info + 12) = *(_WORD *)(a2 + 36);
    uint64_t v6 = 4;
    sendPositionReq();
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 69, "gps_gnss_start_based_mode", 2052);
      LbsOsaTrace_WriteLog(0x13u, __str, v8, 0, 1);
    }
    return 5;
  }
  return v6;
}

void GncP05_23SetFixInterval(unsigned int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1 <= 0x64) {
    unsigned int v1 = 100;
  }
  else {
    unsigned int v1 = a1;
  }
  if (v1 != (unsigned __int16)g_GncPConfig)
  {
    if (v1 < 0x10000)
    {
      if (GN_GPS_Set_FixInterval((unsigned __int16)v1))
      {
        g_GncPConfig = v1;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v4 = mach_continuous_time();
          unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MEUpdtInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP05_23SetFixInterval", v1);
          LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
        }
        GncP03_12SendUpdtCfg(0, (unsigned __int16 *)&g_GncPConfig);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FixInterval OutofRange,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP05_23SetFixInterval", v1);
      LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
    }
  }
}

uint64_t GncP05_25ChkDeRegGnssServReqd(void)
{
  uint64_t result = 0;
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_HwType <= 2471)
  {
    if (g_HwType == 848) {
      return result;
    }
    if (g_HwType != 1107) {
      goto LABEL_9;
    }
    return 1;
  }
  if ((g_HwType - 2472) < 2) {
    return 1;
  }
  if (g_HwType == 3431) {
    return result;
  }
LABEL_9:
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HwType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP05_25ChkDeRegGnssServReqd", 770, g_HwType);
    LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
    return 0;
  }
  return result;
}

size_t GncP05_30InitConfig(void)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(_DWORD *)&word_26ADFF91E = 0;
  *(_DWORD *)((char *)&word_26ADFF920 + 1) = 0;
  g_GncPConfig = 1000;
  byte_26ADFF925 = 0;
  *(_DWORD *)&word_26ADFF926 = 129892352;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v0 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    uint64_t v1 = 84;
    if (!byte_26ADFF923) {
      uint64_t v1 = 70;
    }
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FixIntMs,%u,MeasDelayMs,%u,SleepTOSec,%u,StartMode,%hhu,DutyCycle,%c\n", (unint64_t)v0, "GNC", 73, "GncP05_30InitConfig", (unsigned __int16)g_GncPConfig, (unsigned __int16)word_26ADFF91E, (unsigned __int16)word_26ADFF920, byte_26ADFF922, v1);
    LbsOsaTrace_WriteLog(8u, __str, v2, 4, 1);
  }
  long long v4 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 16);
  long long v3 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 32);
  long long v11 = **((_OWORD **)&xmmword_26AE66D08 + 1);
  long long v12 = v4;
  long long v13 = v3;
  long long v6 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 64);
  long long v5 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 80);
  long long v7 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 48);
  uint64_t v17 = *(void *)(*((void *)&xmmword_26AE66D08 + 1) + 96);
  long long v15 = v6;
  long long v16 = v5;
  long long v14 = v7;
  EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (double *)&v11);
  GncP05_22UpdatePeLogCfg(&v11);
  LOWORD(v14) = 1;
  LOBYTE(v12) = 1;
  size_t result = GN_GPS_Set_Config((uint64_t)&v11);
  if ((result & 1) == 0)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PE SetConfig failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "GncP05_30InitConfig");
      return LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
    }
  }
  return result;
}

size_t GncP05_22UpdatePeLogCfg(_WORD *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSSConfig\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP05_22UpdatePeLogCfg", 513);
      return LbsOsaTrace_WriteLog(8u, __str, v6, 2, 1);
    }
    return result;
  }
  unsigned __int8 v13 = 0;
  int v2 = dword_26AE6D0F8;
  if (LbsOsaTrace_GetModuleConfig((uint64_t)__str, 2u))
  {
    a1[25] = 0;
    if (v2 == 1)
    {
      if ((v13 & 8) != 0)
      {
        __int16 v3 = 4;
      }
      else
      {
        if ((v13 & 4) == 0) {
          goto LABEL_11;
        }
        __int16 v3 = 3;
      }
      a1[25] = v3;
    }
  }
LABEL_11:
  unsigned __int8 v13 = 0;
  if (LbsOsaTrace_GetModuleConfig((uint64_t)__str, 0))
  {
    if (v13) {
      BOOL v7 = v2 == 1;
    }
    else {
      BOOL v7 = 0;
    }
    __int16 v8 = v7;
    a1[26] = v8;
  }
  unsigned __int8 v13 = 0;
  if (LbsOsaTrace_GetModuleConfig((uint64_t)__str, 1u))
  {
    uint64_t v9 = a1 + 18;
    if (v13 && v2 == 1)
    {
      *uint64_t v9 = 0x101010101010101;
      a1[22] = 257;
    }
    else
    {
      a1[22] = 0;
      *uint64_t v9 = 0;
    }
  }
  unsigned __int8 v13 = 0;
  if (LbsOsaTrace_GetModuleConfig((uint64_t)__str, 3u))
  {
    a1[27] = 0;
    if ((v13 & 8) != 0 && v2 == 1 || (v13 & 4) != 0 && v2 == 1)
    {
      __int16 v10 = 5;
LABEL_30:
      a1[27] = v10;
      goto LABEL_31;
    }
    __int16 v10 = 1;
    if ((v13 & 1) != 0 || ((v2 == 1) & (v13 >> 1)) != 0) {
      goto LABEL_30;
    }
  }
LABEL_31:
  unsigned __int8 v13 = 0;
  size_t result = LbsOsaTrace_GetModuleConfig((uint64_t)__str, 7u);
  if (result)
  {
    a1[28] = 0;
    if (v2 == 1)
    {
      if ((v13 & 8) != 0)
      {
        __int16 v11 = 543;
      }
      else if ((v13 & 4) != 0)
      {
        __int16 v11 = 535;
      }
      else if ((v13 & 2) != 0)
      {
        __int16 v11 = 519;
      }
      else
      {
        if ((v13 & 1) == 0) {
          return result;
        }
        __int16 v11 = 515;
      }
      a1[28] = v11;
    }
  }
  return result;
}

uint64_t GncP05_60HandleCfgUpdate(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_33;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND,CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP05_60HandleCfgUpdate", *(_DWORD *)(a1 + 12));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (v4 < 0x400)
  {
    if ((v4 & 4) != 0)
    {
      word_26ADFF920 = *(unsigned __int8 *)(a1 + 30);
      if (*(unsigned __int16 *)(a1 + 28) <= 0xFAu) {
        word_26ADFF91E = *(_WORD *)(a1 + 28);
      }
    }
    if ((v4 & 8) != 0) {
      byte_26ADFF922 = *(unsigned char *)(a1 + 22);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      uint64_t v10 = 84;
      if (!byte_26ADFF923) {
        uint64_t v10 = 70;
      }
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FixIntMs,%u,MeasDelayMs,%u,SleepTOSec,%u,StartMode,%hhu,DutyCycle,%c\n", (unint64_t)v9, "GNC", 73, "GncP05_60HandleCfgUpdate", (unsigned __int16)g_GncPConfig, (unsigned __int16)word_26ADFF91E, (unsigned __int16)word_26ADFF920, byte_26ADFF922, v10);
      LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
    }
    long long v13 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 16);
    long long v12 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 32);
    long long v28 = **((_OWORD **)&xmmword_26AE66D08 + 1);
    long long v29 = v13;
    long long v30 = v12;
    long long v15 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 64);
    long long v14 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 80);
    long long v16 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 48);
    uint64_t v34 = *(void *)(*((void *)&xmmword_26AE66D08 + 1) + 96);
    long long v32 = v15;
    long long v33 = v14;
    long long v31 = v16;
    EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (double *)&v28);
    int v18 = *(_DWORD *)(a1 + 12);
    if (v18)
    {
      int v19 = *(unsigned __int8 *)(a1 + 17);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      DWORD1(v28) = v19;
    }
    if ((v18 & 0x40) != 0)
    {
      GncP05_22UpdatePeLogCfg(&v28);
      int v18 = *(_DWORD *)(a1 + 12);
    }
    if ((v18 & 2) != 0)
    {
      unsigned int v21 = *(unsigned __int8 *)(a1 + 32);
      BYTE2(v29) = v21 & 1;
      v17.i64[0] = *(void *)&vshl_u16((uint16x4_t)vdup_n_s16(v21), (uint16x4_t)0xFFFAFFFEFFFCFFFBLL) & 0xFF01FF01FF01FF01;
      *(_DWORD *)((char *)&v29 + 3) = vmovn_s16(v17).u32[0];
      BYTE7(v29) = (v21 & 2) != 0;
      if ((v18 & 4) == 0)
      {
LABEL_24:
        if ((v18 & 0x100) == 0) {
          goto LABEL_25;
        }
        goto LABEL_40;
      }
    }
    else if ((v18 & 4) == 0)
    {
      goto LABEL_24;
    }
    unsigned int v22 = *(unsigned __int8 *)(a1 + 26);
    if (v22 <= 1) {
      LOBYTE(v30) = v22 != 0;
    }
    BYTE14(v30) = *(unsigned char *)(a1 + 27);
    if ((v18 & 0x100) == 0)
    {
LABEL_25:
      if ((v18 & 0x10) == 0) {
        goto LABEL_26;
      }
      goto LABEL_44;
    }
LABEL_40:
    long long v23 = *(_OWORD *)(a1 + 56);
    v27[0] = *(_OWORD *)(a1 + 40);
    v27[1] = v23;
    if ((GN_GPS_Set_CrossCorr_Params((double *)v27) & 1) == 0
      && LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v24 = mach_continuous_time();
      unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PE SetCrossCorr failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 69, "GncP05_60HandleCfgUpdate");
      LbsOsaTrace_WriteLog(8u, __str, v25, 0, 1);
    }
    int v18 = *(_DWORD *)(a1 + 12);
    if ((v18 & 0x10) == 0)
    {
LABEL_26:
      if ((v18 & 0x20) == 0) {
        goto LABEL_27;
      }
      goto LABEL_45;
    }
LABEL_44:
    DWORD2(v28) = *(unsigned __int8 *)(a1 + 18);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 20);
    BYTE13(v29) = (v26 & 2) != 0;
    BYTE8(v29) = v26 & 1;
    v17.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v26) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFEFFFCFFFBLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)((char *)&v29 + 9) = vmovn_s16(v17).u32[0];
    if ((v18 & 0x20) == 0)
    {
LABEL_27:
      if ((v18 & 0x80) == 0) {
        goto LABEL_28;
      }
      goto LABEL_46;
    }
LABEL_45:
    BYTE14(v29) = *(unsigned char *)(a1 + 23);
    WORD6(v31) = *(_WORD *)(a1 + 24);
    byte_26ADFF924 = BYTE14(v29);
    word_26ADFF926 = WORD6(v31);
    if ((v18 & 0x80) == 0)
    {
LABEL_28:
      if ((v18 & 0x200) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
LABEL_46:
    HIWORD(v31) = *(_WORD *)(a1 + 34);
    word_26ADFF928 = HIWORD(v31);
    if ((v18 & 0x200) == 0)
    {
LABEL_30:
      if ((GN_GPS_Set_Config((uint64_t)&v28) & 1) != 0 || !LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0)) {
        return 0;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PE SetConfig failed\n");
LABEL_33:
      size_t v6 = v8;
      int v7 = 0;
      goto LABEL_34;
    }
LABEL_29:
    BYTE1(v34) = *(unsigned char *)(a1 + 72);
    goto LABEL_30;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    size_t v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 87, "GncP05_60HandleCfgUpdate", 515, *(_DWORD *)(a1 + 12));
    int v7 = 2;
LABEL_34:
    LbsOsaTrace_WriteLog(8u, __str, v6, v7, 1);
  }
  return 0;
}

uint64_t GncP05_62GetPlcHwType(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (g_HwType <= 2471)
  {
    if (g_HwType == 848) {
      return 5;
    }
    if (g_HwType == 1107) {
      return 2;
    }
  }
  else
  {
    switch(g_HwType)
    {
      case 2472:
        return 3;
      case 2473:
        return 4;
      case 3431:
        return 1;
    }
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HwType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 87, "GncP05_62GetPlcHwType", 770, g_HwType);
    LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
    return 0;
  }
  return result;
}

uint64_t GncP05_61HandleHwTypeInd(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_TYPE_IND,HwType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP05_61HandleHwTypeInd", *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    g_HwType = *(_DWORD *)(a1 + 12);
    long long v5 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 16);
    long long v4 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 32);
    v18[0] = **((_OWORD **)&xmmword_26AE66D08 + 1);
    v18[1] = v5;
    _OWORD v18[2] = v4;
    long long v7 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 64);
    long long v6 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 80);
    long long v8 = *(_OWORD *)(*((void *)&xmmword_26AE66D08 + 1) + 48);
    uint64_t v19 = *(void *)(*((void *)&xmmword_26AE66D08 + 1) + 96);
    _OWORD v18[4] = v7;
    v18[5] = v6;
    unsigned char v18[3] = v8;
    EvLog_GN_GNSS_Config("GN_GPS_Get_Config: ", (double *)v18);
    int v9 = 1;
    if (g_HwType <= 2471)
    {
      if (g_HwType == 848) {
        goto LABEL_13;
      }
      if (g_HwType != 1107)
      {
LABEL_22:
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
          return 0;
        }
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        size_t v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HwType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP05_24SetSleepCmdCfg", 770, g_HwType);
        int v14 = 2;
        goto LABEL_20;
      }
    }
    else if ((g_HwType - 2472) >= 2)
    {
      if (g_HwType != 3431) {
        goto LABEL_22;
      }
LABEL_13:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EnablecSMsgToME,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 73, "GncP05_24SetSleepCmdCfg", v9);
        LbsOsaTrace_WriteLog(8u, __str, v12, 4, 1);
      }
      if (BYTE2(v19) != v9)
      {
        BYTE2(v19) = v9;
        if ((GN_GPS_Set_Config((uint64_t)v18) & 1) == 0)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PE SetConfig failed\n");
            goto LABEL_19;
          }
        }
      }
      return 0;
    }
    int v9 = 0;
    goto LABEL_13;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_19:
    size_t v13 = v10;
    int v14 = 0;
LABEL_20:
    LbsOsaTrace_WriteLog(8u, __str, v13, v14, 1);
  }
  return 0;
}

uint64_t NK_Get_Ext_CTXT(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v40 = 0;
  uint64_t v39 = 0;
  uint64_t v8 = a3 + 11161;
  uint64_t v9 = a2 + 24924;
  int v38 = 0;
  uint64_t v37 = 0;
  uint64_t v10 = a2 + 22720;
  int v36 = 0;
  uint64_t v35 = 0;
  if (Core_Get_ExtA_UAC(43200000, (uint64_t)&v37))
  {
    *(unsigned char *)(v9 + 16) = 1;
    int v11 = v38;
    int v12 = a1 - v37;
    *(_DWORD *)(v9 + 28) = a1 - v37;
    if (v11 && v12 >= -1000)
    {
      unsigned int v13 = HIDWORD(v37);
      *(_DWORD *)(v10 + 20) = v11;
      *(_DWORD *)(v10 + 12) = v13;
      *(_DWORD *)(v10 + 16) = 1;
      if (v13 > 0xB)
      {
        *(unsigned char *)(v9 + 24) = 0;
        *(_DWORD *)(v9 + 20) = 6;
        EvCrt_Illegal_Default("NK_Get_Ext_CTXT", 0xA7u);
        unsigned int v13 = *(_DWORD *)(v10 + 12);
        goto LABEL_8;
      }
      if (((1 << v13) & 0x7C) != 0)
      {
        *(_WORD *)uint64_t v8 = 1;
        *(unsigned char *)(v9 + 24) = 1;
        double v18 = *(double *)(a2 + 944);
        if (v18 <= 4.0)
        {
          if (v18 <= 8.0) {
            goto LABEL_29;
          }
        }
        else if (v18 <= 8.0 && *(double *)(a2 + 24712) > 2.0)
        {
          goto LABEL_29;
        }
        *(_WORD *)uint64_t v8 = 256;
        *(unsigned char *)(v9 + 24) = 0;
        *(_DWORD *)(v9 + 20) = 4;
        goto LABEL_29;
      }
      if (((1 << v13) & 0xF80) != 0)
      {
        *(_WORD *)uint64_t v8 = 256;
        *(unsigned char *)(v9 + 24) = 1;
LABEL_8:
        if (v13 == 10 && *(_DWORD *)(v10 + 20) == 3)
        {
          if ((*(_DWORD *)(a3 + 20) - 5) < 4) {
            goto LABEL_32;
          }
          a4[13] = 5;
          *(_DWORD *)(a3 + 20) = 5;
          int v14 = a4[14];
          *(_DWORD *)(a3 + 24) = v14;
          v34[0] = 5;
          v34[1] = v14;
          uint64_t v15 = a3 + 32;
          uint64_t v16 = v34;
LABEL_31:
          NK_Set_Dynamics(v16, v15);
          goto LABEL_32;
        }
LABEL_29:
        if (*(_DWORD *)(a3 + 20) < 5u) {
          goto LABEL_32;
        }
        a4[13] = 2;
        *(_DWORD *)(a3 + 20) = 4;
        int v21 = *(_DWORD *)(a3 + 24);
        v33[0] = 4;
        v33[1] = v21;
        uint64_t v15 = a3 + 32;
        uint64_t v16 = v33;
        goto LABEL_31;
      }
      *(unsigned char *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 20) = 5;
      double v19 = *(double *)(a2 + 944);
      if (v19 <= 4.0)
      {
        if (v19 <= 8.0)
        {
LABEL_25:
          double v20 = *(double *)(a3 + 11144);
          *(unsigned char *)(v8 + 1) = v20 > 4.0;
          *(unsigned char *)uint64_t v8 = v20 <= 4.0;
          goto LABEL_29;
        }
      }
      else if (v19 <= 8.0 && *(double *)(a2 + 24712) > 2.0)
      {
        goto LABEL_25;
      }
      *(_WORD *)uint64_t v8 = 256;
      goto LABEL_29;
    }
    *(unsigned char *)(v9 + 24) = 0;
    if (v11) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)(v9 + 20) = v17;
  }
LABEL_32:
  *(unsigned char *)(v10 + 36) = 0;
  if (Core_Get_ExtA_DMS(43200000, (uint64_t)&v39))
  {
    *(unsigned char *)uint64_t v9 = 1;
    int v22 = a1 - v37;
    *(_DWORD *)(v9 + 12) = a1 - v37;
    int v23 = v40;
    if (v40 && v22 >= -1000)
    {
      int v24 = HIDWORD(v39);
      *(_DWORD *)(v10 + 8) = v40;
      *(_DWORD *)uint64_t v10 = v24;
      *(_DWORD *)(v10 + 4) = 1;
      if (v24 == 1)
      {
        *(unsigned char *)(v10 + 36) = 1;
        *(_DWORD *)(a3 + 11116) = 3;
        *(_DWORD *)(a3 + 11136) = *(_DWORD *)a2;
      }
      *(unsigned char *)(v9 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      if (v23) {
        int v25 = 2;
      }
      else {
        int v25 = 1;
      }
      *(_DWORD *)(v9 + 4) = v25;
    }
  }
  uint64_t result = Core_Get_ExtA_FIV_Ind(43200000, (uint64_t)&v35);
  if (result)
  {
    *(unsigned char *)(v9 + 32) = 1;
    int v27 = a1 - v37;
    *(_DWORD *)(v9 + 44) = a1 - v37;
    int v28 = v36;
    if (v36 && v27 >= -1000)
    {
      int v29 = HIDWORD(v35);
      *(_DWORD *)(v10 + 32) = v36;
      *(_DWORD *)(v10 + 24) = v29;
      *(_DWORD *)(v10 + 28) = 1;
      *(unsigned char *)(v9 + 40) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 40) = 0;
      if (v28) {
        int v30 = 2;
      }
      else {
        int v30 = 1;
      }
      *(_DWORD *)(v9 + 36) = v30;
    }
  }
  int v31 = *(_DWORD *)(v10 + 24);
  if (v31 != 3 || *(_DWORD *)(v10 + 32) != 3)
  {
    if (*(_DWORD *)v10 == 1 && *(_DWORD *)(v10 + 8) == 3)
    {
      int v32 = 1;
      goto LABEL_62;
    }
    if (*(unsigned char *)v8)
    {
      int v32 = 2;
      goto LABEL_62;
    }
    if (!*(unsigned char *)(v8 + 1)) {
      return result;
    }
    if (v31 != 3 || *(_DWORD *)(v10 + 32) != 3)
    {
      int v32 = 3;
      goto LABEL_62;
    }
  }
  int v32 = 4;
LABEL_62:
  a4[12] = v32;
  return result;
}

size_t Gnm_Init(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm_Init");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  uint64_t v2 = gnssOsa_Calloc("Gnm_Init", 67, 1, 0xCuLL);
  if (v2)
  {
    AgpsSendFsmMsg(128, 128, 8388611, v2);
    LODWORD(v2) = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, (int)v2);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_Init");
    return LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  return result;
}

size_t Gnm_Deinit(void)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm_Deinit");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  uint64_t v2 = gnssOsa_Calloc("Gnm_Deinit", 97, 1, 0xCuLL);
  if (v2)
  {
    AgpsSendFsmMsg(128, 128, 8388867, v2);
    LODWORD(v2) = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, (int)v2);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_Deinit");
    return LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  return result;
}

void Gnm_DestMissingHandler(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 <= 8594434)
  {
    if (v4 != 8391939)
    {
      if (v4 == 8393475)
      {
LABEL_11:
        long long v6 = *(void **)(a1 + 16);
        if (v6) {
          free(v6);
        }
        *(void *)(a1 + 16) = 0;
        return;
      }
      int v5 = 8403200;
      goto LABEL_10;
    }
LABEL_32:
    uint64_t v16 = *(void **)(a1 + 64);
    if (v16) {
      free(v16);
    }
    *(void *)(a1 + 64) = 0;
    return;
  }
  if (v4 == 8594435)
  {
    uint64_t v9 = *(void **)(a1 + 16);
    if (v9) {
      free(v9);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v10 = *(void **)(a1 + 24);
    if (v10) {
      free(v10);
    }
    *(void *)(a1 + 24) = 0;
    return;
  }
  if (v4 == 8596739)
  {
    int v11 = *(void **)(a1 + 24);
    if (v11) {
      free(v11);
    }
    *(void *)(a1 + 24) = 0;
    int v12 = *(void **)(a1 + 32);
    if (v12) {
      free(v12);
    }
    *(void *)(a1 + 32) = 0;
    unsigned int v13 = *(void **)(a1 + 40);
    if (v13) {
      free(v13);
    }
    *(void *)(a1 + 40) = 0;
    int v14 = *(void **)(a1 + 48);
    if (v14) {
      free(v14);
    }
    *(void *)(a1 + 48) = 0;
    uint64_t v15 = *(void **)(a1 + 56);
    if (v15) {
      free(v15);
    }
    *(void *)(a1 + 56) = 0;
    goto LABEL_32;
  }
  int v5 = 8787456;
LABEL_10:
  if (v4 == v5) {
    goto LABEL_11;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No handling required Msg,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_DestMissingHandler", *(_DWORD *)(a1 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
}

uint64_t Gnm_ClearGNSSCache(int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_ClearGNSSCache");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  int v4 = gnssOsa_Calloc("Gnm_ClearGNSSCache", 298, 1, 0x10uLL);
  if (v4)
  {
    int v5 = v4;
    v4[3] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FieldsToDel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 77, "Gnm_ClearGNSSCache", v5[3]);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 3, 1);
    }
    AgpsSendFsmMsg(128, 128, 8389379, v5);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_ClearGNSSCache");
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_ClearGNSSCache");
      LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
    }
    return 5;
  }
  return result;
}

uint64_t Gnm_SetUserConfig(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_SetUserConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  int v4 = (char *)gnssOsa_Calloc("Gnm_SetUserConfig", 343, 1, 0x288uLL);
  if (v4)
  {
    int v5 = v4;
    if (a1)
    {
      *((_DWORD *)v4 + 3) = *(_DWORD *)a1;
      *((_DWORD *)v4 + 7) = *(_DWORD *)(a1 + 4);
      int v6 = *(_DWORD *)(a1 + 8);
      *((_DWORD *)v4 + 8) = v6;
      if (v6)
      {
        v4[36] = *(unsigned char *)(a1 + 12);
        if ((v6 & 2) == 0)
        {
LABEL_7:
          if ((v6 & 4) == 0) {
            goto LABEL_8;
          }
          goto LABEL_26;
        }
      }
      else if ((v6 & 2) == 0)
      {
        goto LABEL_7;
      }
      v4[38] = *(unsigned char *)(a1 + 13);
      if ((v6 & 4) == 0)
      {
LABEL_8:
        if ((v6 & 8) == 0) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }
LABEL_26:
      v4[37] = *(unsigned char *)(a1 + 14);
      if ((v6 & 8) == 0)
      {
LABEL_9:
        if ((v6 & 0x200) == 0) {
          goto LABEL_10;
        }
        goto LABEL_28;
      }
LABEL_27:
      v4[39] = *(unsigned char *)(a1 + 15);
      if ((v6 & 0x200) == 0)
      {
LABEL_10:
        if ((v6 & 0x800) == 0) {
          goto LABEL_11;
        }
        goto LABEL_29;
      }
LABEL_28:
      *((_DWORD *)v4 + 10) = *(_DWORD *)(a1 + 600);
      if ((v6 & 0x800) == 0)
      {
LABEL_11:
        if ((v6 & 0x400) == 0) {
          goto LABEL_12;
        }
        goto LABEL_30;
      }
LABEL_29:
      *((_WORD *)v4 + 22) = *(_WORD *)(a1 + 604);
      if ((v6 & 0x400) == 0)
      {
LABEL_12:
        if ((v6 & 0x1000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_31;
      }
LABEL_30:
      v4[46] = *(unsigned char *)(a1 + 606);
      if ((v6 & 0x1000) == 0)
      {
LABEL_13:
        if ((v6 & 0x10) == 0) {
          goto LABEL_14;
        }
        goto LABEL_32;
      }
LABEL_31:
      *((void *)v4 + 6) = *(void *)(a1 + 608);
      if ((v6 & 0x10) == 0)
      {
LABEL_14:
        if ((v6 & 0x20) == 0) {
          goto LABEL_43;
        }
        goto LABEL_33;
      }
LABEL_32:
      long long v14 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v4 + 70) = *(_OWORD *)(a1 + 30);
      *(_OWORD *)(v4 + 56) = v14;
      if ((*(_DWORD *)(a1 + 8) & 0x20) == 0)
      {
LABEL_43:
        if ((*(unsigned char *)(a1 + 8) & 0x40) != 0)
        {
          *((_DWORD *)v5 + 161) = *(_DWORD *)(a1 + 592);
          *((_DWORD *)v5 + 157) = *(_DWORD *)(a1 + 596);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v24 = mach_continuous_time();
          unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CfgMskValid,%u,CfgMsk,%u,CfgMsk2,%u,SUPLCfgValid,%u,SUPLCfgMsk,%u,SUPLCfgMsk2,%u,CPCfgMskValid,%u,CPCfgMsk,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm_SetUserConfig", *((_DWORD *)v5 + 3), *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 8), *((_DWORD *)v5 + 160), *((_DWORD *)v5 + 22), *((_DWORD *)v5 + 23), *((_DWORD *)v5 + 161), *((_DWORD *)v5 + 157));
          LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
        }
        AgpsSendFsmMsg(128, 128, 8389891, v5);
        int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
        uint64_t result = 0;
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          uint64_t v27 = mach_continuous_time();
          unsigned __int16 v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNM", 73, "Gnm_SetUserConfig");
          LbsOsaTrace_WriteLog(0xBu, __str, v28, 4, 1);
          return 0;
        }
        return result;
      }
LABEL_33:
      *((_DWORD *)v4 + 160) = *(_DWORD *)(a1 + 48);
      *((_DWORD *)v4 + 22) = *(_DWORD *)(a1 + 52);
      int v15 = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v4 + 23) = v15;
      if (v15) {
        v4[96] = *(unsigned char *)(a1 + 60);
      }
      uint64_t v16 = 0;
      char v17 = 1;
      do
      {
        char v18 = v17;
        if ((v5[92] & 4) != 0)
        {
          uint64_t v19 = 262 * v16;
          uint64_t v20 = a1 + v19;
          int v21 = &v5[v19];
          v21[355] = *(unsigned char *)(a1 + v19 + 319);
          size_t v22 = *(unsigned __int8 *)(a1 + v19 + 320);
          v21[356] = v22;
          memcpy_s("Gnm_SetUserConfig", 429, &v5[v19 + 99], 0x100u, (const void *)(a1 + v19 + 63), v22);
          *((_WORD *)v21 + 179) = *(_WORD *)(v20 + 322);
          v21[98] = *(unsigned char *)(v20 + 62);
        }
        char v17 = 0;
        uint64_t v16 = 1;
      }
      while ((v18 & 1) != 0);
      int v23 = *((_DWORD *)v5 + 23);
      if ((v23 & 0x40) != 0) {
        *((_WORD *)v5 + 311) = *(_WORD *)(a1 + 586);
      }
      if ((v23 & 0x100) != 0) {
        *((_WORD *)v5 + 312) = *(_WORD *)(a1 + 588);
      }
      goto LABEL_43;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm_SetUserConfig", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_SetUserConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
    }
    free(v5);
    return 1;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_SetUserConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    return 5;
  }
}

uint64_t Gnm_SetPlatformConfig(int *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_SetPlatformConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm_SetPlatformConfig", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
      goto LABEL_14;
    }
    return 1;
  }
  int v4 = (char *)gnssOsa_Calloc("Gnm_SetPlatformConfig", 547, 1, 0x170uLL);
  if (v4)
  {
    int v5 = v4;
    int v6 = *a1;
    if ((*a1 & 0x40) != 0 && (int)strnlen((const char *)a1 + 280, 0xF0uLL) >= 240)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v7 = mach_continuous_time();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DevName\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm_SetPlatformConfig", 515);
        LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
      }
      free(v5);
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
LABEL_14:
        bzero(__str, 0x410uLL);
        unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v11, "GNM", 73, "Gnm_SetPlatformConfig");
        uint64_t v13 = 1;
        LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
        return v13;
      }
      return 1;
    }
    *((_DWORD *)v5 + 7) = v6;
    *((_WORD *)v5 + 28) = *((_WORD *)a1 + 14);
    uint64_t v14 = *(void *)(a1 + 1);
    *((_DWORD *)v5 + 10) = a1[3];
    *((void *)v5 + 4) = v14;
    uint64_t v15 = *((void *)a1 + 2);
    *((_DWORD *)v5 + 13) = a1[6];
    *(void *)(v5 + 44) = v15;
    *((_DWORD *)v5 + 15) = a1[69];
    *((_DWORD *)v5 + 76) = a1[130];
    *((_WORD *)v5 + 154) = *((_WORD *)a1 + 262);
    *((_WORD *)v5 + 29) = *((_WORD *)a1 + 15);
    long long v16 = *((_OWORD *)a1 + 34);
    *(_OWORD *)(v5 + 328) = *((_OWORD *)a1 + 33);
    *(_OWORD *)(v5 + 344) = v16;
    memcpy_s("Gnm_SetPlatformConfig", 584, v5 + 64, 0xF0u, a1 + 70, 0xF0uLL);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v17 = mach_continuous_time();
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CfgMsk,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm_SetPlatformConfig", *((_DWORD *)v5 + 7));
      LbsOsaTrace_WriteLog(0xBu, __str, v18, 4, 1);
    }
    AgpsSendFsmMsg(128, 128, 8390147, v5);
    uint64_t v13 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm_SetPlatformConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v21 = mach_continuous_time();
      unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm_SetPlatformConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
    }
    return 5;
  }
  return v13;
}

uint64_t Gnm_SetTaLogConfig(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 68, "Gnm_SetTaLogConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 5, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_SetTaLogConfig", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 68, "Gnm_SetTaLogConfig");
    uint64_t v5 = 1;
    goto LABEL_13;
  }
  int v4 = gnssOsa_Calloc("Gnm_SetTaLogConfig", 672, 1, 0x24uLL);
  if (!v4)
  {
    uint64_t v5 = 5;
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0)) {
      return v5;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 68, "Gnm_SetTaLogConfig");
LABEL_13:
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 5, 1);
    return v5;
  }
  v4[6] = *(_DWORD *)a1;
  *((unsigned char *)v4 + 28) = *(unsigned char *)(a1 + 4);
  AgpsSendFsmMsg(128, 128, 8404483, v4);
  uint64_t v5 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 68, "Gnm_SetTaLogConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 5, 1);
    return 0;
  }
  return v5;
}

uint64_t Gnm_RegisterApiStatusCb(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_RegisterApiStatusCb");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    int v4 = gnssOsa_Calloc("Gnm_RegisterApiStatusCb", 770, 1, 0x28uLL);
    if (v4)
    {
      _OWORD v4[2] = a1;
      AgpsSendFsmMsg(128, 128, 8391427, v4);
      uint64_t v5 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_RegisterApiStatusCb");
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
        return 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_RegisterApiStatusCb");
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
      }
      return 5;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_RegisterApiStatusCb", 258);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterApiStatusCb");
      uint64_t v5 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v5;
}

uint64_t Gnm_RegisterPeriodicFix(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterPeriodicFix");
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u,OutputType,%u,PosParam Timeout,%u,AgeLimit,%u,FixIntvl,%u,StartTime,%u,StopTime,%u,NumFix,%u,HorizAcc,%u,VerAcc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 77, "Gnm_RegisterPeriodicFix", a1, a4, *a5, a5[1], a5[2], a5[3], a5[4], *((unsigned __int16 *)a5 + 10), *((unsigned __int16 *)a5 + 11), *((unsigned __int16 *)a5 + 12));
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 3, 1);
  }
  if (!a3)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    uint64_t v40 = 258;
    unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v17 = "%10u %s%c %s: #%04hx\n";
    goto LABEL_15;
  }
  int v14 = (2 * a4) & 8 | (a4 >> 1) & 1;
  if (!v14)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    uint64_t v40 = 514;
    uint64_t v41 = a4;
    unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v17 = "%10u %s%c %s: #%04hx OutputMask,%x\n";
    goto LABEL_15;
  }
  unsigned int v15 = a5[2];
  if (v15 && v15 - 604800001 < 0xDBF37C63)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_17;
    }
    bzero(__str, 0x410uLL);
    uint64_t v16 = mach_continuous_time();
    uint64_t v40 = 514;
    uint64_t v41 = a5[2];
    unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16);
    uint64_t v17 = "%10u %s%c %s: #%04hx FixRate,%u\n";
    goto LABEL_15;
  }
  if (*((_WORD *)a5 + 10) == 1)
  {
    if (*a5 - 3600001 < 0xFFC91567)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v23 = mach_continuous_time();
        uint64_t v40 = 514;
        uint64_t v41 = *a5;
        unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23);
        uint64_t v17 = "%10u %s%c %s: #%04hx TimeOut,%u\n";
LABEL_15:
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, v17, v39, "GNM", 87, "Gnm_RegisterPeriodicFix", v40, v41, v42);
LABEL_16:
        LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (a5[1] >= 0x5265C01)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v24 = mach_continuous_time();
        uint64_t v40 = 514;
        uint64_t v41 = a5[1];
        unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24);
        uint64_t v17 = "%10u %s%c %s: #%04hx Agelimit,%u\n";
        goto LABEL_15;
      }
LABEL_17:
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
        return 1;
      }
      bzero(__str, 0x410uLL);
      uint64_t v19 = mach_continuous_time();
      unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm_RegisterPeriodicFix");
      uint64_t v21 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
      return v21;
    }
  }
  unsigned int v26 = a5[3];
  unsigned int v25 = a5[4];
  if (v25 < v26)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartTime,%u,StopTime,%u\n", v27);
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (v26 >= 0x28DE81)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v28 = mach_continuous_time();
      uint64_t v40 = 514;
      uint64_t v41 = a5[3];
      unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28);
      uint64_t v17 = "%10u %s%c %s: #%04hx StartTime,%u\n";
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  if (v25 >= 0xACB480)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v29 = mach_continuous_time();
      uint64_t v40 = 514;
      uint64_t v41 = a5[4];
      unint64_t v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29);
      uint64_t v17 = "%10u %s%c %s: #%04hx StopTime,%u\n";
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  uint64_t v30 = (char *)gnssOsa_Calloc("Gnm_RegisterPeriodicFix", 904, 1, 0x48uLL);
  if (v30)
  {
    int v31 = v30;
    if (Gnm05_55AssignAppInfo(a2, (uint64_t)(v30 + 64)))
    {
      *((_DWORD *)v31 + 3) = a1;
      *((void *)v31 + 2) = a3;
      v31[56] = 1;
      int v32 = *((unsigned __int16 *)a5 + 10);
      if (v32 == 1)
      {
        *((void *)v31 + 3) = *(void *)a5;
      }
      else
      {
        *((void *)v31 + 3) = 0;
        if (v32)
        {
          *((_DWORD *)v31 + 9) = a5[3];
          unsigned int v35 = a5[4];
LABEL_48:
          *((_DWORD *)v31 + 10) = v35;
          *((_WORD *)v31 + 22) = v32;
          int v36 = a5[2];
          if (!v36) {
            int v36 = 1000;
          }
          *((_DWORD *)v31 + 8) = v36;
          v31[48] = v14;
          v31[54] = 2;
          *(_DWORD *)(v31 + 50) = *(unsigned int *)((char *)a5 + 22);
          AgpsSendFsmMsg(128, 128, 8391939, v31);
          uint64_t v21 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v37 = mach_continuous_time();
            unsigned __int16 v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNM", 73, "Gnm_RegisterPeriodicFix");
            LbsOsaTrace_WriteLog(0xBu, __str, v38, 4, 1);
            return 0;
          }
          return v21;
        }
      }
      unsigned int v35 = 0;
      *((_DWORD *)v31 + 9) = 0;
      goto LABEL_48;
    }
    free(v31);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v33 = mach_continuous_time();
    unsigned __int16 v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNM", 73, "Gnm_RegisterPeriodicFix");
    LbsOsaTrace_WriteLog(0xBu, __str, v34, 4, 1);
  }
  return 5;
}

uint64_t Gnm_RegisterNmeaUpdates(int a1, const void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_RegisterNmeaUpdates");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NMEAMask,%u,CB,%p\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_RegisterNmeaUpdates", a1, a2);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  if (a1 || !a2)
  {
    unsigned __int16 v13 = gnssOsa_Calloc("Gnm_RegisterNmeaUpdates", 1008, 1, 0x20uLL);
    if (v13)
    {
      void v13[2] = a2;
      *((_WORD *)v13 + 12) = a1;
      AgpsSendFsmMsg(128, 128, 8407552, v13);
      uint64_t v12 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v14 = mach_continuous_time();
        unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm_RegisterNmeaUpdates");
        LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
        return 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm_RegisterNmeaUpdates");
        LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
      }
      return 5;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NMEAMask,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_RegisterNmeaUpdates", 514, 0);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterNmeaUpdates");
      uint64_t v12 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v12;
}

uint64_t Gnm_StopPosnReq(int a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_StopPosnReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("Gnm_StopPosnReq", 1048, 1, 0x10uLL);
  if (v4)
  {
    v4[3] = a1;
    AgpsSendFsmMsg(128, 128, 8391683, v4);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_StopPosnReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm_StopPosnReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    return 5;
  }
  return result;
}

uint64_t Gnm_HwInitialize(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_HwInitialize");
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (a3)
  {
    unsigned __int16 v10 = gnssOsa_Calloc("Gnm_HwInitialize", 1145, 1, 0x20uLL);
    if (v10)
    {
      v10[12] = a1;
      v10[13] = a2;
      *((void *)v10 + 2) = a3;
      *((void *)v10 + 3) = a4;
      AgpsSendFsmMsg(128, 128, 8403456, v10);
      uint64_t v11 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_HwInitialize");
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
        return 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm_HwInitialize");
        LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
      }
      return 5;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitStatusCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm_HwInitialize", 258);
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm_HwInitialize");
      uint64_t v11 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v11;
}

size_t Gnm_HalStartCnf(int a1, _DWORD *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_HalStartCnf");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CBType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_HalStartCnf", a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    switch(a1)
    {
      case 1:
        uint64_t v14 = a2;
        char v15 = 0;
        goto LABEL_19;
      case 2:
        uint64_t v14 = a2;
        char v15 = 1;
LABEL_19:
        Gnm00_01HandleRevInfo(v14, v15);
        break;
      case 3:
        int v18 = *a2;
        if (*a2 == 1 || v18 == 3)
        {
          uint64_t v21 = gnssOsa_Calloc("Gnm00_02HandleInitStatus", 1270, 1, 0x10uLL);
          if (v21)
          {
            uint64_t v22 = v21;
            int v23 = a2[1];
            if ((v23 - 3) < 0x13)
            {
              *((unsigned char *)v21 + 12) = v23 - 1;
              int v20 = 8402688;
              unsigned __int16 v19 = v21;
              goto LABEL_31;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v26 = mach_continuous_time();
              unsigned __int16 v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FailStep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 87, "Gnm00_03MapInitFailReason", 515, v23);
              LbsOsaTrace_WriteLog(0xBu, __str, v27, 2, 1);
            }
            free(v22);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
            goto LABEL_42;
          }
        }
        else if (v18 == 2)
        {
          unsigned __int16 v19 = gnssOsa_Calloc("Gnm00_02HandleInitStatus", 1252, 1, 0xCuLL);
          if (v19)
          {
            int v20 = 8392961;
LABEL_31:
            AgpsSendFsmMsg(128, 128, v20, v19);
            break;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
            goto LABEL_42;
          }
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v24 = mach_continuous_time();
            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 87, "Gnm00_02HandleInitStatus", 515, *a2);
            LbsOsaTrace_WriteLog(0xBu, __str, v25, 2, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
          {
LABEL_42:
            bzero(__str, 0x410uLL);
            unint64_t v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            size_t v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v28, "GNM", 73, "Gnm00_02HandleInitStatus");
            int v13 = 4;
            goto LABEL_16;
          }
        }
        break;
      case 4:
      case 5:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CBType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_HalStartCnf", 1028, a1);
          LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
        }
        size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
        if (result) {
          goto LABEL_21;
        }
        return result;
      default:
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
          break;
        }
        bzero(__str, 0x410uLL);
        unint64_t v29 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CBType,%u\n", v29);
        goto LABEL_15;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_15:
    size_t v12 = v11;
    int v13 = 2;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
LABEL_21:
    bzero(__str, 0x410uLL);
    unint64_t v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v16, "GNM", 73, "Gnm_HalStartCnf");
    return LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  return result;
}

void Gnm00_01HandleRevInfo(_DWORD *a1, char a2)
{
  if (*a1 == 4)
  {
    uint64_t v4 = (char *)gnssOsa_Calloc("Gnm00_01HandleRevInfo", 1180, 1, 0xC4uLL);
    if (v4)
    {
      unsigned __int16 v5 = v4;
      v4[192] = a2;
      memcpy_s("Gnm00_01HandleRevInfo", 1188, v4 + 12, 0xB4u, a1 + 1, 0xB4uLL);
      AgpsSendFsmMsg(128, 128, 8392707, v5);
    }
  }
}

size_t Gnm_ReceiveData(size_t a1, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm_ReceiveData");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 5, 1);
  }
  uint64_t v6 = gnssOsa_Calloc("Gnm_ReceiveData", 1387, 1, 0x20uLL);
  if (v6)
  {
    unsigned __int16 v7 = v6;
    uint64_t v8 = gnssOsa_Calloc("Gnm_ReceiveData", 1395, 1, a1);
    v7[2] = v8;
    if (v8)
    {
      memcpy_s("Gnm_ReceiveData", 1403, v8, a1, a2, a1);
      *((_WORD *)v7 + 12) = a1;
      AgpsSendFsmMsg(128, 128, 8393475, v7);
    }
    else
    {
      free(v7);
    }
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v10 = mach_continuous_time();
    unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 68, "Gnm_ReceiveData");
    return LbsOsaTrace_WriteLog(0xBu, __str, v11, 5, 1);
  }
  return result;
}

size_t Gnm_HardwareStatusNotif (int a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_HardwareStatusNotif");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("Gnm_HardwareStatusNotif", 1429, 1, 0x10uLL);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    *((_DWORD *)v4 + 3) = a1;
    if (a1 == 8) {
      GncP16_51MEPowerStateInd(7);
    }
    AgpsSendFsmMsg(128, 128, 8393731, v5);
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (result)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_HardwareStatusNotif");
    return LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
  }
  return result;
}

size_t Gnm_HalStopCnf(int a1, _DWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm_HalStopCnf");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_12;
    }
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_11;
  }
  if ((a1 - 1) < 3) {
    goto LABEL_7;
  }
  if (a1 != 4)
  {
    if (a1 != 5)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
LABEL_12:
        size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
        if (!result) {
          return result;
        }
        goto LABEL_13;
      }
      goto LABEL_8;
    }
LABEL_7:
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_12;
    }
LABEL_8:
    bzero(__str, 0x410uLL);
    unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CBType,%u\n", v6);
LABEL_11:
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    goto LABEL_12;
  }
  unsigned __int16 v11 = gnssOsa_Calloc("Gnm_HalStopCnf", 1501, 1, 0x10uLL);
  int v12 = (int)v11;
  if (v11)
  {
    v11[12] = *a2 == 6;
    AgpsSendFsmMsg(128, 128, 8393217, v11);
    int v12 = 0;
  }
  size_t result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, v12);
  if (result)
  {
LABEL_13:
    bzero(__str, 0x410uLL);
    unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v9, "GNM", 73, "Gnm_HalStopCnf");
    return LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
  }
  return result;
}

uint64_t Gnm_SetSideBandConfig(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm_SetSideBandConfig");
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if ((a1 & 0x80) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    uint64_t v23 = 514;
    uint64_t v24 = a1;
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx ReqId,%u\n";
    goto LABEL_83;
  }
  if ((a2 - 0x2000) <= 0xFFFFE000)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unint64_t v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X\n";
    goto LABEL_83;
  }
  if ((a2 & 1) != 0 && a3 >= 3u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = a3;
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,LegacyFta,%u\n";
LABEL_82:
    unint64_t v22 = v11;
LABEL_83:
    unsigned __int16 v16 = snprintf(__str, 0x40FuLL, v10, v22, "GNM", 87, "Gnm_SetSideBandConfig", v23, v24, v25);
    LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
LABEL_84:
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0)) {
      return 1;
    }
    bzero(__str, 0x410uLL);
    uint64_t v17 = mach_continuous_time();
    unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 73, "Gnm_SetSideBandConfig");
    uint64_t v13 = 1;
    LbsOsaTrace_WriteLog(0xBu, __str, v18, 4, 1);
    return v13;
  }
  if ((a2 & 2) != 0 && (a3 & 0xFE00) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE1(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,EFreqAid,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 4) != 0 && (a3 & 0xFE0000) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE2(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,StaticSpurCan,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 8) != 0 && (a3 & 0xFE000000) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE3(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,DynamicSpurCan,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x10) != 0 && (a3 & 0xFE00000000) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE4(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,JammerDetect,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x20) != 0 && BYTE5(a3) >= 3u)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE5(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,LegacyBlnk,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x40) != 0 && (a3 & 0xFE000000000000) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE6(a3);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,EBlankGpsGalBds3,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x80) != 0 && a3 >> 57)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v24 = a2;
    uint64_t v25 = HIBYTE(a3);
    uint64_t v23 = 514;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,EBlankGlo,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x100) != 0 && (a4 & 0xFE) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = a4;
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,EBlankBds2,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x200) != 0 && (a4 & 0xFE00) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE1(a4);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,ForceFilter,%u\n";
    goto LABEL_82;
  }
  if ((a2 & 0x400) != 0 && (a4 & 0xF00000) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = BYTE2(a4);
    uint64_t v23 = 514;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,GpsGalBds3FilterMsk,0x%X\n";
    goto LABEL_82;
  }
  if ((a2 & 0x800) != 0 && (BYTE3(a4) > 0xFu || ((a4 >> 24) & 5) != 0))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v24 = a2;
    uint64_t v25 = BYTE3(a4);
    uint64_t v23 = 514;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,GloFilterMsk,0x%X\n";
    goto LABEL_82;
  }
  if ((a2 & 0x1000) != 0 && (BYTE4(a4) > 0xFu || (a4 & 0x100000000) != 0))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v24 = a2;
    uint64_t v25 = BYTE4(a4);
    uint64_t v23 = 514;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx CfgValMask,0x%X,Bds2FilterMsk,0x%X\n";
    goto LABEL_82;
  }
  if ((a2 & 0x20) != 0
    && (a3 & 0xFF0000000000) == 0x10000000000
    && ((((a3 & 0xFF000000000000) == 0x1000000000000) & (a2 >> 6)) != 0
     || ((HIBYTE(a3) == 1) & (a2 >> 7)) != 0
     || (a2 & 0x100) != 0 && a4 == 1
     || (a2 & 0x400) != 0 && (a4 & 0xFF0000) != 0
     || (a2 & 0x800) != 0 && (a4 & 0xFF000000) != 0
     || (a2 & 0x1000) != 0 && (a4 & 0xFF00000000) != 0
     || (a2 & 0x200) != 0 && (a4 & 0xFF00) == 0x100))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      goto LABEL_84;
    }
    bzero(__str, 0x410uLL);
    unint64_t v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    uint64_t v25 = 1;
    uint64_t v23 = 515;
    uint64_t v24 = a2;
    unsigned __int16 v10 = "%10u %s%c %s: #%04hx BLANKING EN Conflict,CfgValMask,0x%X,LegacyBlnk,%u\n";
    goto LABEL_82;
  }
  int v12 = (char *)gnssOsa_Calloc("Gnm_SetSideBandConfig", 1695, 1, 0x24uLL);
  if (v12)
  {
    v12[12] = a1;
    *(void *)(v12 + 20) = a3;
    *((_DWORD *)v12 + 7) = a4;
    v12[32] = BYTE4(a4);
    *((_DWORD *)v12 + 4) = a2;
    AgpsSendFsmMsg(128, 128, 8407043, v12);
    uint64_t v13 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm_SetSideBandConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v20 = mach_continuous_time();
      unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm_SetSideBandConfig");
      LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
    }
    return 5;
  }
  return v13;
}

uint64_t Gnm_RegisterPowerReportCb(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_RegisterPowerReportCb");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    uint64_t v4 = gnssOsa_Calloc("Gnm_RegisterPowerReportCb", 1786, 1, 0x28uLL);
    if (v4)
    {
      v4[3] = a1;
      AgpsSendFsmMsg(128, 128, 8391427, v4);
      uint64_t v5 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v6 = mach_continuous_time();
        unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm_RegisterPowerReportCb");
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
        return 0;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm_RegisterPowerReportCb");
        LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
      }
      return 5;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v8 = mach_continuous_time();
      unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm_RegisterPowerReportCb", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v9, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm_RegisterPowerReportCb");
      uint64_t v5 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    else
    {
      return 1;
    }
  }
  return v5;
}

uint64_t Gnm_SetPowerReport(char a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm_SetPowerReport");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  uint64_t v4 = gnssOsa_Calloc("Gnm_SetPowerReport", 1827, 1, 0x10uLL);
  if (v4)
  {
    v4[12] = a1;
    AgpsSendFsmMsg(128, 128, 8406528, v4);
    int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    uint64_t result = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 73, "Gnm_SetPowerReport");
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm_SetPowerReport");
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    return 5;
  }
  return result;
}

uint64_t Hal22_InitializeConn(void)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  g_CommsNtfCb = (uint64_t)Hal22_TransportAdaptNtf;
  if (g_IsProdMode) {
    Hal02_SetProdRouteZxData();
  }
  if (gp_Comm && (*(unsigned int (**)(uint64_t))(*(void *)gp_Comm + 72))(gp_Comm))
  {
    if (!Hal_SetReadCbAsync((void (*)(unsigned __int8 *, unsigned int))Hal02_AsyncReadCb)) {
      return 0xFFFFFFFFLL;
    }
    char v0 = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v1 = mach_continuous_time();
      unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Read Cb set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "HAL", 65, "Hal22_InitializeConn");
      LbsOsaTrace_WriteLog(0xDu, __str, v2, 1, 1);
    }
  }
  else
  {
    char v0 = 0;
  }
  if (!Hal_CommsItfInitialize()) {
    return 0xFFFFFFFFLL;
  }
  if ((g_HwProduct & 0xFFFFFFFB) == 0)
  {
    int v15 = 1;
    *(void *)uint64_t v33 = 0x7F7F7F7F00000000;
    while (1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v16 = mach_continuous_time();
        unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: iter,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "HAL", 73, "Hal22_CheckAutoBaud", v15);
        LbsOsaTrace_WriteLog(0xDu, __str, v17, 4, 1);
      }
      if (Hal_CommsItfWriteData(v33, 8) == 8) {
        break;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
LABEL_45:
        LbsOsaTrace_WriteLog(0xDu, __str, v20, 0, 1);
      }
LABEL_46:
      if (++v15 == 4) {
        return 0xFFFFFFFFLL;
      }
    }
    usleep(0x2710u);
    int Data = Hal_CommsItfReadData(v32, 8u);
    if (Data != 8)
    {
      LODWORD(v21) = Data;
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v22 = mach_continuous_time();
        unsigned __int16 v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "HAL", 65, "Hal22_CheckAutoBaud", 1310);
        LbsOsaTrace_WriteLog(0xDu, __str, v23, 1, 1);
      }
      if ((int)v21 >= 1)
      {
        uint64_t v21 = v21;
        uint64_t v24 = v32;
        do
        {
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v25 = mach_continuous_time();
            unsigned __int16 v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: 0X%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "HAL", 68, "Hal22_CheckAutoBaud", *v24);
            LbsOsaTrace_WriteLog(0xDu, __str, v26, 5, 1);
          }
          ++v24;
          --v21;
        }
        while (v21);
      }
      goto LABEL_46;
    }
    uint64_t v19 = 0;
    while (v32[v19] == 77)
    {
      if (++v19 == 8)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v29 = mach_continuous_time();
          unsigned __int16 v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "HAL", 65, "Hal22_CheckAutoBaud", 1309);
          LbsOsaTrace_WriteLog(0xDu, __str, v30, 1, 1);
        }
        goto LABEL_11;
      }
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0)) {
      goto LABEL_46;
    }
    bzero(__str, 0x410uLL);
    unint64_t v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx resp,%c\n", v27);
    goto LABEL_45;
  }
LABEL_11:
  if (!gnssOsa_SemInit((dispatch_semaphore_s **)&g_HandleAckSem, 0))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      unint64_t v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      unsigned __int16 v13 = __error();
      unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v12, "HAL", 69, "Hal22_InitializeConn", 1539, *v13);
      LbsOsaTrace_WriteLog(0xDu, __str, v14, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  if ((v0 & 1) == 0)
  {
    if (!gnssOsa_CreateThread("Hal22_InitializeConn", 150, (_opaque_pthread_t **)&g_HalRdrThrd, 0, (void *(__cdecl *)(void *))Hal02_07ChipRead, 0, 0, 0, 99))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v4 = __error();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RdrThrd err,%d\n", v3, "HAL", 69, "Hal22_InitializeConn", 1554, *v4);
        LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
      }
      if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)&g_HandleAckSem)
        && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        unint64_t v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        uint64_t v7 = __error();
        unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v6, "HAL", 69, "Hal22_InitializeConn", 1540, *v7);
        LbsOsaTrace_WriteLog(0xDu, __str, v8, 0, 1);
      }
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v9 = mach_continuous_time();
      unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RdrThrd ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 65, "Hal22_InitializeConn");
      LbsOsaTrace_WriteLog(0xDu, __str, v10, 1, 1);
    }
  }
  Hal26_InitLowPowerContext();
  return 0;
}

uint64_t Hal22_TransportAdaptNtf(uint64_t result)
{
  int v1 = result;
  uint64_t v10 = *MEMORY[0x263EF8340];
  switch((int)result)
  {
    case 0:
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v2 = mach_continuous_time();
        size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ntf TransErr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 69, "Hal22_TransportAdaptNtf", 1302);
        int v4 = 0;
        goto LABEL_12;
      }
      break;
    case 1:
      return result;
    case 2:
      if (off_26AE6D3C8)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v6 = mach_continuous_time();
          unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 68, "Hal22_TransportAdaptNtf", 1315);
          LbsOsaTrace_WriteLog(0xDu, __str, v7, 5, 1);
        }
        uint64_t result = off_26AE6D3C8(1);
      }
      break;
    case 3:
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 5, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "HAL", 68, "Hal22_TransportAdaptNtf", 1316);
        int v4 = 5;
        goto LABEL_12;
      }
      break;
    default:
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        size_t v3 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NtfType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 87, "Hal22_TransportAdaptNtf", 515, v1);
        int v4 = 2;
LABEL_12:
        uint64_t result = LbsOsaTrace_WriteLog(0xDu, __str, v3, v4, 1);
      }
      break;
  }
  return result;
}

size_t Hal22_DeInitializeConn(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  Hal_CommsItfDeInitialize();
  if (pthread_join((pthread_t)g_HalRdrThrd, 0) && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v0 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v1 = __error();
    unsigned __int16 v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RdrThrd err,%d\n", v0, "HAL", 69, "Hal22_DeInitializeConn", 1555, *v1);
    LbsOsaTrace_WriteLog(0xDu, __str, v2, 0, 1);
  }
  if (!gnssOsa_DeinitCountingSem((dispatch_object_t *)&g_HandleAckSem)
    && LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    unint64_t v3 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    int v4 = __error();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HandleAckSem err,%d\n", v3, "HAL", 69, "Hal22_DeInitializeConn", 1540, *v4);
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 0, 1);
  }
  Hal02_DeInitParser();
  size_t result = Hal26_DeInitLowPowerContext();
  g_HalState = 1;
  return result;
}

uint64_t Hal22_ZxSendToChip(unsigned __int8 *a1, size_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 >= 0x801)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx inpLen\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 87, "Hal22_ZxSendToChip", 514);
      LbsOsaTrace_WriteLog(0xDu, __str, v3, 2, 1);
    }
    goto LABEL_25;
  }
  size_t v4 = a2;
  BOOL v7 = (a2 & 3) != 0 && (g_HwProduct - 1) < 3;
  if (v7)
  {
    size_t v8 = (a2 & 0xFFFC) + 4;
    uint64_t v9 = (unsigned __int8 *)gnssOsa_Calloc("Hal22_ZxSendToChip", 223, 1, v8);
    if (!v9)
    {
LABEL_25:
      LOWORD(v4) = -1;
      return (__int16)v4;
    }
    uint64_t v10 = v9;
    memcpy_s("Hal22_ZxSendToChip", 227, v9, v8, a1, v4);
    size_t v4 = v8;
    a1 = v10;
  }
  for (unsigned int i = 0; i < 3; i += (v12 >> 15) + 1)
  {
    unsigned __int16 v12 = Hal_CommsItfWriteData(a1, v4);
    if (v4 == (__int16)v12)
    {
      char v17 = !v7;
      if (!a1) {
        char v17 = 1;
      }
      if ((v17 & 1) == 0) {
        free(a1);
      }
      return (__int16)v4;
    }
  }
  LODWORD(v4) = v12;
  char v13 = !v7;
  if (!a1) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0) {
    free(a1);
  }
  if (v4 == 0xFFFF)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v14 = mach_continuous_time();
      unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Hw transport fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal22_ZxSendToChip", 1282);
      LbsOsaTrace_WriteLog(0xDu, __str, v15, 0, 1);
    }
    if (g_HalCallbacks) {
      g_HalCallbacks(9);
    }
    goto LABEL_25;
  }
  return (__int16)v4;
}

uint64_t Hal22_GetHwRevisionAfterInit(int *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "HAL", 73, "Hal22_GetHwRevisionAfterInit");
    LbsOsaTrace_WriteLog(0xDu, __str, v3, 4, 1);
  }
  uint64_t result = Hal15_ReadHwRevision(80);
  if (result)
  {
    int v5 = 16;
LABEL_9:
    *a1 = v5;
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 73, "Hal22_GetHwRevisionAfterInit", 1285);
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 4, 1);
  }
  uint64_t result = Hal15_ReadHwRevision(77);
  if (result)
  {
    int v5 = 17;
    goto LABEL_9;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v9 = mach_continuous_time();
    unsigned __int16 v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "HAL", 73, "Hal22_GetHwRevisionAfterInit", 1285);
    LbsOsaTrace_WriteLog(0xDu, __str, v10, 4, 1);
    return 0;
  }
  return result;
}

uint64_t Hal22_GetHwRevision(int *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = Hal15_ReadHwRevision(80);
  if (result)
  {
    int v3 = 16;
LABEL_7:
    *a1 = v3;
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "HAL", 73, "Hal22_GetHwRevision", 1285);
    LbsOsaTrace_WriteLog(0xDu, __str, v5, 4, 1);
  }
  uint64_t result = Hal15_ReadHwRevision(77);
  if (result)
  {
    int v3 = 17;
    goto LABEL_7;
  }
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
  uint64_t result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "HAL", 73, "Hal22_GetHwRevision", 1285);
    LbsOsaTrace_WriteLog(0xDu, __str, v8, 4, 1);
    return 0;
  }
  return result;
}

void GncP19_01ResetCB(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = gnssOsa_Calloc("GncP19_01ResetCB", 51, 1, 0x10uLL);
  if (v2)
  {
    int v3 = v2;
    if (a1 == 7) {
      int v4 = 7;
    }
    else {
      int v4 = 8;
    }
    v2[3] = v4;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HOST_RESET_CB_IND =>GNCP Stat,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP19_01ResetCB", v3[3]);
      LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
    }
    AgpsSendFsmMsg(134, 134, 8790531, v3);
  }
}

void GncP19_02TrigHWReset(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v0 = gnssOsa_Calloc("GncP19_02TrigHWReset", 78, 1, 0x10uLL);
  if (v0)
  {
    int v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_RESET_REQ =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_02TrigHWReset");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8784896, v1);
  }
}

uint64_t GncP19_03HandleResetStatusInd(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HOST_RESET_CB_IND Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_03HandleResetStatusInd", *(_DWORD *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if (g_MEResetInfo == 1)
    {
      if (AgpsFsmStopTimer(8790022) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP19_03HandleResetStatusInd", 1545);
        LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      }
      g_MEResetInfo = 0;
    }
    if (*(_DWORD *)(a1 + 12) == 7)
    {
      GncP16_28UpdateStateResetStatus(1);
    }
    else
    {
      GncP16_28UpdateStateResetStatus(2);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWError\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP19_03HandleResetStatusInd", 1306);
        LbsOsaTrace_WriteLog(8u, __str, v9, 0, 1);
      }
      GncP19_02TrigHWReset();
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 69, "GncP19_03HandleResetStatusInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v7, 0, 1);
  }
  return 0;
}

void GncP19_04MEResetTimerExpiry(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gnss BBReset NoResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP19_04MEResetTimerExpiry", 1305);
    LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
  }
  if (g_MEResetInfo == 1)
  {
    g_MEResetInfo = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HWError\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP19_04MEResetTimerExpiry", 1306);
      LbsOsaTrace_WriteLog(8u, __str, v3, 0, 1);
    }
    GncP19_02TrigHWReset();
    GncP16_28UpdateStateResetStatus(3);
  }
}

uint64_t GncP19_05HandleHWStatusInd(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_HW_STATUS_IND Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP19_05HandleHWStatusInd", *(unsigned __int8 *)(a1 + 12));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if (g_MEResetInfo == 1)
    {
      if (AgpsFsmStopTimer(8790022) && LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v4 = mach_continuous_time();
        unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP19_05HandleHWStatusInd", 1545);
        LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      }
      g_MEResetInfo = 0;
    }
    int v6 = *(unsigned __int8 *)(a1 + 12);
    if (v6 == 2)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HW Reset ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "GncP19_05HandleHWStatusInd");
        LbsOsaTrace_WriteLog(8u, __str, v11, 0, 1);
      }
      int v7 = 3;
    }
    else if (v6 == 1)
    {
      int v7 = 5;
    }
    else
    {
      int v7 = 4;
    }
    GncP16_28UpdateStateResetStatus(v7);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "GncP19_05HandleHWStatusInd", 517);
    LbsOsaTrace_WriteLog(8u, __str, v9, 0, 1);
  }
  return 0;
}

void GncP19_09CommsLPAckCB(int a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v2 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (a1) {
      uint64_t v3 = 84;
    }
    else {
      uint64_t v3 = 70;
    }
    unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%c\n", (unint64_t)v2, "GNC", 73, "GncP19_09CommsLPAckCB", v3);
    LbsOsaTrace_WriteLog(8u, __str, v4, 4, 1);
  }
  GncP04_19SendPosEvntResp(3);
}

void GncP19_10SndMEInActiveInd(void)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v0 = mach_continuous_time();
    unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNCP=>HAL ME Inactivity Ind\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "GncP19_10SndMEInActiveInd");
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  Hal_NotifyMEInActiveStat((void (*)(BOOL))GncP19_09CommsLPAckCB);
}

uint64_t GncP08_03HandleHardReset(void)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (g_MEResetInfo == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v0 = mach_continuous_time();
      unsigned __int16 v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW Error\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 69, "GncP08_03HandleHardReset", 1306);
      LbsOsaTrace_WriteLog(8u, __str, v1, 0, 1);
    }
    GncP19_02TrigHWReset();
  }
  else
  {
    g_MEResetInfo = 1;
    GncP16_28UpdateStateResetStatus(0);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ME GNSSBBReset Trig\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 69, "GncP08_03HandleHardReset", 1303);
      LbsOsaTrace_WriteLog(8u, __str, v3, 0, 1);
    }
    Hal_GnssBaseBandReset((uint64_t)GncP19_01ResetCB);
    if ((g_MEResetInfo & 1) == 0)
    {
      if (AgpsFsmStartTimer(0x862006u, 0x2BCu))
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v4 = mach_continuous_time();
          unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP08_03HandleHardReset", 1544, 700);
          LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
        }
      }
      else
      {
        g_MEResetInfo = 1;
      }
    }
  }
  return 1;
}

double *NK_Decay_Speed(double *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = 1000 * result;
  unsigned int v5 = *(_DWORD *)(a4 + 11032);
  if (v5 * a2 > 1000 * (int)result)
  {
    double v8 = *(double *)(a3 + 312);
    if (result && v5 <= 0x3E7 && v8 > 0.001)
    {
      double v9 = 1.0
         - (double)(v5 * a2 - 1000 * result)
         * (double)(v5 * a2 - 1000 * result)
         / ((double)(v5 * a2 + v4)
          * (double)(v5 * a2 + v4));
      int v10 = *(_DWORD *)(a4 + 11024);
      if (v10) {
        double v9 = v9
      }
           / (1.0
            - (double)(v10 * a2 - v4)
            * (double)(v10 * a2 - v4)
            / ((double)(v10 * a2 + v4)
             * (double)(v10 * a2 + v4)));
      double v11 = v9 * v9;
      *(_DWORD *)(a4 + 11024) = v5;
      uint64_t v12 = 10;
      do
      {
        *(double *)(a3 + 8 * v12) = v11 * *(double *)(a3 + 8 * v12);
        unint64_t v13 = v12 - 7;
        --v12;
      }
      while (v13 > 1);
      double v8 = *(double *)(a3 + 312);
      double v14 = *(double *)(a4 + 296) - v8 * v11;
    }
    else
    {
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      double v14 = *(double *)(a4 + 296);
    }
    if (v8 > *(double *)(a4 + 104))
    {
      uint64_t v15 = 0;
      int v16 = 0;
      double v17 = v14 * v14 * 0.0555555556;
      long long v18 = 0uLL;
      do
      {
        v21[2] = v18;
        _OWORD v21[3] = v18;
        v21[0] = v18;
        v21[1] = v18;
        void v21[4] = *(_OWORD *)(a3 + v15 + 208);
        uint64_t v22 = *(void *)(a3 + v15 + 224);
        if (v15 == 48) {
          double v17 = v17 * *(double *)(a4 + 120);
        }
        int v19 = 0;
        int v20 = 0;
        if (v17 > 0.0)
        {
          uint64_t result = rnk1_core((double *)(a4 + 344), 0xBu, v17, (double *)v21, &v20);
          long long v18 = 0uLL;
          int v19 = v20;
        }
        if (v19) {
          ++v16;
        }
        v15 += 24;
      }
      while (v15 != 72);
      if (v16)
      {
        *(_DWORD *)(a4 + 132) = 11;
        *(unsigned char *)(a4 + 128) = 1;
      }
    }
  }
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga24_01SendDataToChip(gnssTest::GnssAdaptDeviceTest *this, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    unsigned __int16 v3 = (void (*)(uint64_t, unsigned __int8 *))off_26AE6D248;
    if (off_26AE6D248)
    {
      v3(a2, a3);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v4 = mach_continuous_time();
    unsigned __int16 v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid write PL\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga24_01SendDataToChip", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
}

void gnssTest::GnssAdaptDeviceTest::Ga24_02GetHalConnStatus(gnssTest::GnssAdaptDeviceTest *a1, int *a2)
{
  int v3 = (int)a1;
  uint64_t v23 = *MEMORY[0x263EF8340];
  GnssAdaptDeviceTestuint64_t Instance = gnssTest::GnssAdaptDeviceTest::Ga21_06GetGnssAdaptDeviceTestInstance(a1);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v5 = mach_continuous_time();
    unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga24_03DeviceStatusRspHndlr");
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  if (a2)
  {
    int v7 = *a2;
    double v8 = *(NSObject **)(GnssAdaptDeviceTestInstance + 56);
    *(void *)int __str = MEMORY[0x263EF8330];
    uint64_t v17 = 0x40000000;
    long long v18 = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke;
    int v19 = &__block_descriptor_tmp_13;
    uint64_t v20 = GnssAdaptDeviceTestInstance;
    int v21 = v3;
    int v22 = v7;
    dispatch_async(v8, __str);
  }
  else
  {
    double v9 = *(NSObject **)(GnssAdaptDeviceTestInstance + 72);
    *(void *)int __str = MEMORY[0x263EF8330];
    uint64_t v17 = 0x40000000;
    long long v18 = ___ZN8gnssTest19GnssAdaptDeviceTest30Ga21_08UpdateGnssTestDevStatusEb_block_invoke;
    int v19 = &__block_descriptor_tmp_62;
    uint64_t v20 = GnssAdaptDeviceTestInstance;
    LOBYTE(v21) = 0;
    dispatch_sync(v9, __str);
    std::string::basic_string[abi:ne180100]<0>(__p, "Ga24_03DeviceStatusRspHndlr");
    gnssTest::GnssAdaptDeviceTest::Ga22_09ReportInitStatus(GnssAdaptDeviceTestInstance, (uint64_t)__p, 8);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v10 = mach_continuous_time();
      unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CBType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga24_03DeviceStatusRspHndlr", 769, v3);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v12 = mach_continuous_time();
      unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga24_03DeviceStatusRspHndlr");
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
    }
  }
}

void sub_22B962B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v3 = mach_continuous_time();
        unsigned __int16 v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Read Rev. before init\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 73, "Ga24_03DeviceStatusRspHndlr_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v4, 4, 1);
      }
      break;
    case 2:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v12 = mach_continuous_time();
        unsigned __int16 v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Init Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 65, "Ga24_03DeviceStatusRspHndlr_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v13, 1, 1);
      }
      if (*(_DWORD *)(a1 + 44) == 4)
      {
        double v14 = *(NSObject **)(v2 + 48);
        v21[0] = MEMORY[0x263EF8330];
        v21[1] = 0x40000000;
        v21[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke_2;
        _OWORD v21[3] = &__block_descriptor_tmp_4;
        void v21[4] = v2;
        dispatch_async(v14, v21);
      }
      break;
    case 3:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v5 = mach_continuous_time();
        unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Init status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 65, "Ga24_03DeviceStatusRspHndlr_block_invoke", *(_DWORD *)(a1 + 44));
        LbsOsaTrace_WriteLog(0x18u, __str, v6, 1, 1);
      }
      if (*(_DWORD *)(a1 + 44) == 2)
      {
        int v7 = *(NSObject **)(v2 + 72);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke_3;
        block[3] = &__block_descriptor_tmp_9_0;
        void block[4] = v2;
        dispatch_sync(v7, block);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v8 = mach_continuous_time();
          unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Patch Dwld Successful\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 65, "Ga24_03DeviceStatusRspHndlr_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v9, 1, 1);
        }
      }
      else
      {
        uint64_t v17 = *(NSObject **)(v2 + 72);
        *(void *)int __str = MEMORY[0x263EF8330];
        uint64_t v23 = 0x40000000;
        uint64_t v24 = ___ZN8gnssTest19GnssAdaptDeviceTest30Ga21_08UpdateGnssTestDevStatusEb_block_invoke;
        uint64_t v25 = &__block_descriptor_tmp_62;
        uint64_t v26 = v2;
        char v27 = 0;
        dispatch_sync(v17, __str);
        std::string::basic_string[abi:ne180100]<0>(__p, "Ga24_03DeviceStatusRspHndlr_block_invoke");
        gnssTest::GnssAdaptDeviceTest::Ga22_09ReportInitStatus(v2, (uint64_t)__p, 8);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      break;
    case 4:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v15 = mach_continuous_time();
        unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: De-Init Completed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 65, "Ga24_03DeviceStatusRspHndlr_block_invoke");
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 1, 1);
      }
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v10 = mach_continuous_time();
        unsigned __int16 v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Init CB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga24_03DeviceStatusRspHndlr_block_invoke", 515);
        LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
      }
      break;
  }
}

void sub_22B963068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  gnssTest::GnssAdaptDeviceTest::Ga22_01TriggerProdIndReq((NSObject **)v1);
  gnssTest::GnssAdaptDeviceTest::Ga22_03TriggerCpMeRomCsReq((NSObject **)v1);
  if (gnssTest::GnssAdaptDeviceTest::Ga22_08InjectLtlTable((gnssTest::GnssAdaptDeviceTest *)v1) != 1
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Inject Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 87, "Ga24_03DeviceStatusRspHndlr_block_invoke_2", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 2, 1);
  }
  int StatusCode = gnssTest::GnssAdaptDeviceTest::Ga22_34GetStatusCode((gnssTest::GnssAdaptDeviceTest *)v1);
  uint64_t v5 = *(NSObject **)(v1 + 72);
  *(void *)int __str = MEMORY[0x263EF8330];
  uint64_t v9 = 0x40000000;
  uint64_t v10 = ___ZN8gnssTest19GnssAdaptDeviceTest30Ga21_08UpdateGnssTestDevStatusEb_block_invoke;
  unsigned __int16 v11 = &__block_descriptor_tmp_62;
  uint64_t v12 = v1;
  BOOL v13 = StatusCode == 1;
  dispatch_sync(v5, __str);
  std::string::basic_string[abi:ne180100]<0>(__p, "Ga24_03DeviceStatusRspHndlr_block_invoke_2");
  gnssTest::GnssAdaptDeviceTest::Ga22_09ReportInitStatus(v1, (uint64_t)__p, StatusCode);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22B963240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest27Ga24_03DeviceStatusRspHndlrE12e_HAL_CbTypeP11u_HAL_CBRsp_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 128) = 0;
  return result;
}

void gnssTest::GnssAdaptDeviceTest::Ga24_04ReceiveProdData(gnssTest::GnssAdaptDeviceTest *this, const void *a2, unsigned __int8 *a3)
{
  unsigned int v4 = this;
  uint64_t v19 = *MEMORY[0x263EF8340];
  GnssAdaptDeviceTestuint64_t Instance = gnssTest::GnssAdaptDeviceTest::Ga21_06GetGnssAdaptDeviceTestInstance(this);
  if (v4 && a2)
  {
    uint64_t v6 = GnssAdaptDeviceTestInstance;
    *(void *)int __str = 0;
    uint64_t v12 = __str;
    uint64_t v13 = 0x4002000000;
    uint64_t v14 = __Block_byref_object_copy__1;
    uint64_t v15 = __Block_byref_object_dispose__1;
    unsigned __int16 v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v16, a2, (uint64_t)a2 + v4, v4);
    char v7 = *(NSObject **)(v6 + 56);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest21Ga24_05HandleZxPacketEPht_block_invoke;
    block[3] = &unk_2648DC5C0;
    void block[4] = __str;
    void block[5] = v6;
    dispatch_async(v7, block);
    _Block_object_dispose(__str, 8);
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx rawData or len\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga24_05HandleZxPacket", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
}

__n128 __Block_byref_object_copy__1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN8gnssTest19GnssAdaptDeviceTest21Ga24_05HandleZxPacketEPht_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  __p = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  memset(&v30, 0, sizeof(v30));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 48) - *(void *)(v3 + 40));
  gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(v2 + 140, &__p, &v30);
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    uint64_t v6 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ZxSize,%lu,ZxRsp,%s\n", (unint64_t)v4, "ADP", 73, "Ga24_05HandleZxPacket_block_invoke", size, (const char *)v6);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
  }
  switch(gnssTest::ZxFactoryHandler::Ga23_01GetZxTestType(v2 + 140, (unsigned __int8 **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (char *)&v26))
  {
    case 0u:
      if (v26 > 0x14u)
      {
        if (v26 == 21)
        {
          gnssTest::GnssAdaptDeviceTest::Ga22_20HandleMePowerModeRsp((NSObject **)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
        }
        else if (v26 == 22)
        {
          gnssTest::GnssAdaptDeviceTest::Ga22_26HandleTimeMarkRsp((NSObject **)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
        }
        else if (v26 != 255)
        {
LABEL_30:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v13 = mach_continuous_time();
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeTestType,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga24_05HandleZxPacket_block_invoke", 515, 0);
            LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
          }
        }
      }
      else
      {
        int v8 = 1;
        switch((char)v26)
        {
          case 0:
          case 3:
          case 4:
            goto LABEL_47;
          case 1:
            *(void *)int __str = 0;
            int v32 = __str;
            uint64_t v33 = 0x2000000000;
            char v34 = 0;
            unsigned __int16 v9 = *(NSObject **)(v2 + 72);
            block[0] = MEMORY[0x263EF8330];
            block[1] = 0x40000000;
            block[2] = ___ZN8gnssTest19GnssAdaptDeviceTest21Ga24_05HandleZxPacketEPht_block_invoke_2;
            block[3] = &unk_2648DC598;
            void block[4] = __str;
            void block[5] = v2;
            dispatch_sync(v9, block);
            unsigned int v10 = v32[24];
            if (v10 < 2) {
              gnssTest::GnssAdaptDeviceTest::Ga22_15HandleCwModulatedRsp((NSObject **)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40, v10);
            }
            _Block_object_dispose(__str, 8);
            break;
          case 2:
            goto LABEL_26;
          case 5:
            gnssTest::GnssAdaptDeviceTest::Ga22_13HandleLtlRsp(v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
            break;
          default:
            goto LABEL_30;
        }
      }
      break;
    case 1u:
      if (v26 <= 15)
      {
        int v8 = 0;
        switch(v26)
        {
          case 1:
          case 4:
          case 8:
            goto LABEL_47;
          case 2:
LABEL_26:
            gnssTest::GnssAdaptDeviceTest::Ga22_04HandleCpMeRomCsRsp(v2, *(void *)(*(void *)(a1 + 32) + 8) + 40, v8);
            break;
          default:
            goto LABEL_45;
        }
      }
      else if (((v26 - 16) > 0x30 || ((1 << (v26 - 16)) & 0x1000000010001) == 0) {
             && v26 != 128
      }
             && v26 != 1024)
      {
LABEL_45:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          uint64_t v23 = mach_continuous_time();
          unsigned __int16 v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpTestType,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga24_05HandleZxPacket_block_invoke", 257, 1);
          LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
        }
      }
      break;
    case 2u:
      switch((char)v26)
      {
        case 0:
          gnssTest::GnssAdaptDeviceTest::Ga22_02HandleProdIndicationRsp(v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
          break;
        case 1:
          gnssTest::GnssAdaptDeviceTest::Ga22_17HandleCommPingRsp((NSObject **)v2, (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
          break;
        case 2:
          gnssTest::GnssAdaptDeviceTest::Ga22_22HandleApSignalGpioRsp(v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
          break;
        case 3:
          if (!gnssOsa_SemRelease(*(dispatch_semaphore_t *)(v2 + 80))
            && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v17 = mach_continuous_time();
            double v18 = *(double *)&g_MacClockTicksToMsRelation;
            uint64_t v19 = __error();
            unsigned __int16 v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx m_HandleSem,%d\n", (unint64_t)(v18 * (double)v17), "ADP", 87, "Ga24_05HandleZxPacket_block_invoke", 1542, *v19);
            LbsOsaTrace_WriteLog(0x18u, __str, v20, 2, 1);
          }
          break;
        default:
          if (v26 == 255)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v15 = mach_continuous_time();
              unsigned __int16 v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Zx mesg resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga24_05HandleZxPacket_block_invoke", 770);
              LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v21 = mach_continuous_time();
            unsigned __int16 v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GenMsgType,%uuh\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "Ga24_05HandleZxPacket_block_invoke", 770, v26);
            LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
          }
          break;
      }
      break;
    case 3u:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v11 = mach_continuous_time();
        unsigned __int16 v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Unknown Zx Msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga24_05HandleZxPacket_block_invoke", 770);
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
      }
      break;
    default:
      break;
  }
LABEL_47:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_22B963CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN8gnssTest19GnssAdaptDeviceTest21Ga24_05HandleZxPacketEPht_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 136);
  return result;
}

uint64_t GncP03_03EncSendGMH(unsigned int a1, unsigned int a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int16 v23 = 0;
  int v28 = 0;
  char v29 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  memset_s(&g_GncPTxStream, 0x800uLL, 0, 0x800uLL);
  v24[0] = a1;
  v24[1] = a2;
  unsigned __int8 v25 = a3;
  char IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
  int PlcHwType = GncP05_62GetPlcHwType();
  plc00_05EncodeMsg(0, v24, a4, (uint64_t)&g_GncPTxStream, 2048, &v23, (uint64_t)&v28, PlcHwType);
  if (v28)
  {
    if (IsLoggingAllowed)
    {
      if (!plc00_15GetExtErrAsString(&v28, __s, 0x104uLL) || !LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0)) {
        return 0;
      }
      bzero(__str, 0x410uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v21 = v25;
      unsigned __int16 v22 = __s;
      uint64_t v19 = a1;
      uint64_t v20 = a2;
      unsigned int v10 = "%10u %s%c %s: #%04hx MC,%c,MID,%c,MIDE,%u,Err,%s\n";
    }
    else
    {
      int v16 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      uint64_t result = 0;
      if (!v16) {
        return result;
      }
      bzero(__str, 0x410uLL);
      unint64_t v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      uint64_t v20 = a2;
      uint64_t v21 = v25;
      uint64_t v19 = a1;
      unsigned int v10 = "%10u %s%c %s: #%04hx MC,%c,MID,%c,MIDE,%u\n";
    }
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, v10, v9, "GNC", 87, "GncP03_03EncSendGMH", 775, v19, v20, v21, v22);
  }
  else
  {
    uint64_t v11 = v23;
    if (v23 > 8u)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v17 = mach_continuous_time();
        unsigned __int16 v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNCP=>ME %x,%x,%x,%x,%x,%x,%x,%x\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP03_03EncSendGMH", g_GncPTxStream, byte_26AE78919, byte_26AE7891A, byte_26AE7891B, byte_26AE7891C, byte_26AE7891D, byte_26AE7891E, byte_26AE7891F);
        LbsOsaTrace_WriteLog(8u, __str, v18, 5, 1);
      }
      if (off_26AE6D248)
      {
        off_26AE6D248(v11, &g_GncPTxStream);
        return v11;
      }
      return 0;
    }
    int v12 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    bzero(__str, 0x410uLL);
    unint64_t v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    unsigned __int16 v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Encoded,%u,Min,%u\n", v14);
  }
  LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
  return 0;
}

void GncP03_10SndNewUpdtSM(void)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v0 = gnssOsa_Calloc("GncP03_10SndNewUpdtSM", 140, 1, 0x10uLL);
  if (v0)
  {
    uint64_t v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v2 = mach_continuous_time();
      unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP03_10SndNewUpdtSM");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(134, 130, 8790787, v1);
  }
}

void GncP03_12SendUpdtCfg(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  double v4 = (unsigned __int8 *)gnssOsa_Calloc("GncP03_12SendUpdtCfg", 162, 1, 0x14uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    if (a1)
    {
      *((_WORD *)v4 + 7) = *a1;
      v4[12] |= 1u;
    }
    if (a2)
    {
      *((_WORD *)v4 + 8) = *a2;
      v4[12] |= 2u;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDT_IND =>GNCS ValidMask,%u,NmeaMask,%u,UpdtInt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP03_12SendUpdtCfg", v5[12], *((unsigned __int16 *)v5 + 7), *((unsigned __int16 *)v5 + 8));
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(134, 130, 8791043, v5);
  }
}

void GncP03_13SendStopFWActResp(char a1, char a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  double v4 = gnssOsa_Calloc("GncP03_13SendStopFWActResp", 195, 1, 0x10uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    v4[12] = a2;
    v4[13] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_STOP_FW_ACTIVE_RSP =>GNM Activity,%hhu,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP03_13SendStopFWActResp", v5[12], v5[13]);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8785668, v5);
  }
}

size_t GncP03_14SendDeRegGnssReq(int a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (g_DeRegGnssCount >= 4u)
  {
    snprintf(__str, 0x400uLL, "ASSERT: %s %d Max Attempts De-Register GNSS", "GncP03_14SendDeRegGnssReq", 221);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__s, 0x410uLL);
      uint64_t v7 = mach_continuous_time();
      unsigned __int16 v8 = snprintf((char *)__s, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "OSA", 69, "GncP03_14SendDeRegGnssReq", __str);
      LbsOsaTrace_WriteLog(0xEu, (char *)__s, v8, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GncP03_14SendDeRegGnssReq", "gncpe03Tx.cpp", 222, "false && \"De-Register GNSS Failed\"");
  }
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  __s[0] = a1;
  __s[1] = a2;
  size_t result = GncP03_03EncSendGMH(0x42u, 0x73u, 0x50u, (uint64_t)__s);
  if (result)
  {
    ++g_DeRegGnssCount;
    size_t result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v5 = mach_continuous_time();
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SleepTO,%u,ExpSleepDur,%u,Attempt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP03_14SendDeRegGnssReq", a1, a2, g_DeRegGnssCount);
      return LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
    }
  }
  return result;
}

uint64_t Encode_SVid_STE(uint64_t result, uint64_t a2, char *a3)
{
  char v4 = 0;
  switch((int)result)
  {
    case 0:
      goto LABEL_12;
    case 1:
      char v4 = 1;
      goto LABEL_16;
    case 2:
      size_t result = (a2 + 8);
      char v4 = 4;
      if (!a3) {
        return result;
      }
      goto LABEL_13;
    case 3:
      size_t result = (a2 + 64);
      char v4 = 5;
      if (!a3) {
        return result;
      }
      goto LABEL_13;
    case 4:
      size_t result = (a2 + 128);
      char v4 = 6;
      if (!a3) {
        return result;
      }
      goto LABEL_13;
    case 5:
      char v4 = 3;
      size_t result = a2;
LABEL_12:
      if (a3) {
        goto LABEL_13;
      }
      return result;
    case 6:
      char v4 = 2;
LABEL_16:
      size_t result = a2;
      if (!a3) {
        return result;
      }
      goto LABEL_13;
    default:
      EvCrt_Illegal_Default("Encode_SVid_STE", 0x60u);
      size_t result = 0;
      char v4 = 0;
      if (!a3) {
        return result;
      }
LABEL_13:
      *a3 = v4;
      return result;
  }
}

uint64_t Decode_SVid_STE(uint64_t a1, int a2, int *a3)
{
  *a3 = 0;
  if (a2 == 1 && (a1 - 1) <= 0x1Fu)
  {
    int v3 = 1;
LABEL_10:
    *a3 = v3;
    return a1;
  }
  if (a2 == 2 && (a1 - 120) <= 0x26u)
  {
    int v3 = 6;
    goto LABEL_10;
  }
  if (a2 == 3 && (a1 + 63) <= 9u)
  {
    int v3 = 5;
    goto LABEL_10;
  }
  if (a2 == 4 && (a1 - 1) <= 0xDu)
  {
    *a3 = 2;
    return (a1 - 8);
  }
  else if (a2 == 5 && (a1 - 65) <= 0x23u)
  {
    *a3 = 3;
    return (a1 - 64);
  }
  else
  {
    uint64_t v4 = 0;
    if (a2 == 6 && (a1 + 127) <= 0x24u)
    {
      *a3 = 4;
      return (a1 - 128);
    }
  }
  return v4;
}

uint64_t FN_GNSS_To_Nav_Soln(uint64_t a1, uint64_t a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  memset(__src, 0, sizeof(__src));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  uint64_t v21 = 0;
  memset(v22, 0, 14);
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 14) = *(void *)((char *)v22 + 6);
  *(_WORD *)(a2 + 22) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  memcpy((void *)(a2 + 25), __src, 0x120uLL);
  *(_OWORD *)(a2 + 313) = 0u;
  *(_OWORD *)(a2 + 329) = 0u;
  *(_OWORD *)(a2 + 345) = 0u;
  *(_OWORD *)(a2 + 361) = 0u;
  *(_OWORD *)(a2 + 377) = 0u;
  *(_OWORD *)(a2 + 393) = 0u;
  *(_OWORD *)(a2 + 409) = 0u;
  *(_OWORD *)(a2 + 425) = 0u;
  *(_OWORD *)(a2 + 441) = 0u;
  *(_OWORD *)(a2 + 457) = 0u;
  *(_OWORD *)(a2 + 473) = 0u;
  *(_OWORD *)(a2 + 489) = 0u;
  *(_OWORD *)(a2 + 505) = 0u;
  *(_OWORD *)(a2 + 521) = 0u;
  *(_OWORD *)(a2 + 537) = 0u;
  *(unsigned char *)(a2 + 553) = 0;
  memcpy((void *)(a2 + 554), v19, 0x198uLL);
  *(_OWORD *)(a2 + 962) = *(_OWORD *)((char *)&v18[1] + 8);
  *(void *)(a2 + 978) = *((void *)&v18[2] + 1);
  *(_OWORD *)(a2 + 986) = v18[0];
  *(void *)(a2 + 1002) = *(void *)&v18[1];
  *(_DWORD *)(a2 + 1010) = 0;
  *(_WORD *)(a2 + 1014) = 0;
  *(int32x2_t *)a2 = vrev64_s32(*(int32x2_t *)(a1 + 32));
  *(void *)(a2 + 8) = *(void *)(a1 + 40);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 52);
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 54);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 1);
  long long v4 = *(_OWORD *)(a1 + 208);
  *(void *)(a2 + 208) = *(void *)(a1 + 224);
  *(_OWORD *)(a2 + 192) = v4;
  long long v5 = *(_OWORD *)(a1 + 320);
  *(void *)(a2 + 232) = *(void *)(a1 + 336);
  *(_OWORD *)(a2 + 216) = v5;
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 344);
  *(void *)(a2 + 256) = *(void *)(a1 + 360);
  *(void *)(a2 + 28) = *(void *)(a1 + 4);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)(a1 + 912);
  long long v8 = *(_OWORD *)(a1 + 880);
  long long v7 = *(_OWORD *)(a1 + 896);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 864);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(void *)(a2 + 152) = v6;
  long long v9 = *(_OWORD *)(a1 + 800);
  long long v10 = *(_OWORD *)(a1 + 816);
  long long v11 = *(_OWORD *)(a1 + 848);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a2 + 56) = v10;
  *(_OWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 88) = v11;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 160);
  long long v12 = *(_OWORD *)(a1 + 1496);
  long long v13 = *(_OWORD *)(a1 + 1528);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 1512);
  *(_OWORD *)(a2 + 296) = v13;
  *(_OWORD *)(a2 + 264) = v12;
  *(_WORD *)(a2 + 552) = *(_WORD *)(a1 + 462);
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(a1 + 468);
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 484);
  *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 500);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 516);
  *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 532);
  *(_OWORD *)(a2 + 392) = *(_OWORD *)(a1 + 548);
  *(_OWORD *)(a2 + 408) = *(_OWORD *)(a1 + 580);
  *(_OWORD *)(a2 + 424) = *(_OWORD *)(a1 + 596);
  *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 612);
  *(_OWORD *)(a2 + 456) = *(_OWORD *)(a1 + 628);
  *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 660);
  *(_OWORD *)(a2 + 488) = *(_OWORD *)(a1 + 676);
  *(_OWORD *)(a2 + 504) = *(_OWORD *)(a1 + 692);
  *(_OWORD *)(a2 + 520) = *(_OWORD *)(a1 + 708);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(a1 + 724);
  memcpy((void *)(a2 + 560), (const void *)(a1 + 1592), 0x180uLL);
  long long v14 = *(_OWORD *)(a1 + 1976);
  *(void *)(a2 + 960) = *(void *)(a1 + 1992);
  *(_OWORD *)(a2 + 944) = v14;
  uint64_t v15 = *(void *)(a1 + 2016);
  *(_OWORD *)(a2 + 968) = *(_OWORD *)(a1 + 2000);
  *(void *)(a2 + 984) = v15;
  uint64_t v16 = *(void *)(a1 + 2040);
  *(_OWORD *)(a2 + 992) = *(_OWORD *)(a1 + 2024);
  *(void *)(a2 + 1008) = v16;
  return 1;
}

void GNSS_HL_Data_Bases_Clear()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  bzero(*(void **)(v0 + 32), 0xD38uLL);
  bzero(__src, 0x18D8uLL);
  *(void *)((char *)&__src[3] + 4) = 0x500000002;
  uint64_t v2 = 60;
  do
  {
    int v3 = (char *)__src + v2;
    *(_DWORD *)int v3 = 0;
    v3[4] = 0;
    *(_OWORD *)(v3 + 8) = 0uLL;
    *(_OWORD *)(v3 + 24) = 0uLL;
    *(void *)(v3 + 37) = 0;
    v2 += 48;
  }
  while (v3 + 48 != (char *)&__src[249] + 12);
  *((void *)&__src[397] + 1) = 0;
  bzero((char *)&__src[249] + 12, 0x85DuLL);
  *(_OWORD *)((char *)&__src[387] + 5) = 0u;
  *(_OWORD *)((char *)&__src[385] + 12) = 0u;
  *(_OWORD *)((char *)&__src[386] + 12) = 0u;
  *(_OWORD *)((char *)&__src[383] + 12) = 0u;
  *(_OWORD *)((char *)&__src[384] + 12) = 0u;
  *(_OWORD *)((char *)&__src[388] + 8) = 0u;
  *(_OWORD *)((char *)&__src[389] + 8) = 0u;
  *(_OWORD *)((char *)&__src[390] + 8) = 0u;
  *(_OWORD *)((char *)&__src[391] + 8) = 0u;
  *(_OWORD *)((char *)&__src[392] + 8) = 0u;
  *(_OWORD *)((char *)&__src[393] + 8) = 0u;
  *(_OWORD *)((char *)&__src[394] + 8) = 0u;
  *(_OWORD *)((char *)&__src[395] + 8) = 0u;
  *(_OWORD *)((char *)&__src[396] + 7) = 0u;
  uint64_t v4 = *(void *)(v0 + 40);
  long long v5 = __src[0];
  long long v6 = __src[1];
  long long v7 = __src[2];
  *(_DWORD *)(v4 + 48) = __src[3];
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)uint64_t v4 = v5;
  *(void *)(v4 + 52) = *(void *)((char *)&__src[3] + 4);
  memcpy((void *)(v4 + 60), (char *)&__src[3] + 12, 0x18A4uLL);
  bzero(*(void **)(v0 + 64), 0x260uLL);
  memset(__src, 0, 357);
  memset(v66, 0, sizeof(v66));
  memset(v65, 0, sizeof(v65));
  uint64_t v8 = *(void *)(v0 + 72);
  *(_DWORD *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)(v8 + 52) = 0x500000002;
  *(void *)(v8 + 60) = 0;
  *(void *)(v8 + 66) = 0;
  memcpy((void *)(v8 + 74), __src, 0x165uLL);
  *(_OWORD *)(v8 + 431) = 0u;
  *(_OWORD *)(v8 + 447) = 0u;
  *(_OWORD *)(v8 + 463) = 0u;
  *(_OWORD *)(v8 + 479) = 0u;
  *(_OWORD *)(v8 + 495) = 0u;
  *(_OWORD *)(v8 + 511) = 0u;
  *(_OWORD *)(v8 + 527) = 0u;
  *(_OWORD *)(v8 + 543) = 0u;
  *(_OWORD *)(v8 + 559) = 0u;
  *(_OWORD *)(v8 + 575) = 0u;
  *(_OWORD *)(v8 + 591) = 0u;
  *(_OWORD *)(v8 + 607) = 0u;
  *(_OWORD *)(v8 + 623) = 0u;
  *(_OWORD *)(v8 + 639) = 0u;
  *(_DWORD *)(v8 + 654) = 0;
  long long v9 = *(_OWORD *)&v66[16];
  *(_OWORD *)(v8 + 658) = *(_OWORD *)v66;
  *(_OWORD *)(v8 + 674) = v9;
  long long v10 = *(_OWORD *)&v66[32];
  long long v11 = *(_OWORD *)&v66[48];
  long long v12 = *(_OWORD *)&v66[80];
  *(_OWORD *)(v8 + 722) = *(_OWORD *)&v66[64];
  *(_OWORD *)(v8 + 738) = v12;
  *(_OWORD *)(v8 + 690) = v10;
  *(_OWORD *)(v8 + 706) = v11;
  long long v13 = *(_OWORD *)&v66[96];
  long long v14 = *(_OWORD *)&v66[112];
  long long v15 = *(_OWORD *)&v66[144];
  *(_OWORD *)(v8 + 786) = *(_OWORD *)&v66[128];
  *(_OWORD *)(v8 + 802) = v15;
  *(_OWORD *)(v8 + 754) = v13;
  *(_OWORD *)(v8 + 770) = v14;
  long long v16 = *(_OWORD *)&v66[160];
  long long v17 = *(_OWORD *)&v66[176];
  long long v18 = *(_OWORD *)&v66[192];
  long long v19 = *(_OWORD *)&v66[208];
  *(void *)(v8 + 882) = *(void *)&v66[224];
  *(_OWORD *)(v8 + 850) = v18;
  *(_OWORD *)(v8 + 866) = v19;
  *(_OWORD *)(v8 + 818) = v16;
  *(_OWORD *)(v8 + 834) = v17;
  long long v20 = *(_OWORD *)&v65[112];
  *(_OWORD *)(v8 + 986) = *(_OWORD *)&v65[96];
  *(_OWORD *)(v8 + 1002) = v20;
  *(void *)(v8 + 1015) = *(void *)&v65[125];
  long long v21 = *(_OWORD *)&v65[48];
  *(_OWORD *)(v8 + 922) = *(_OWORD *)&v65[32];
  *(_OWORD *)(v8 + 938) = v21;
  long long v22 = *(_OWORD *)&v65[80];
  *(_OWORD *)(v8 + 954) = *(_OWORD *)&v65[64];
  *(_OWORD *)(v8 + 970) = v22;
  long long v23 = *(_OWORD *)&v65[16];
  *(_OWORD *)(v8 + 890) = *(_OWORD *)v65;
  *(_OWORD *)(v8 + 906) = v23;
  *(_OWORD *)(v8 + 1116) = 0u;
  *(_OWORD *)(v8 + 1087) = 0u;
  *(_OWORD *)(v8 + 1103) = 0u;
  *(_OWORD *)(v8 + 1055) = 0u;
  *(_OWORD *)(v8 + 1071) = 0u;
  *(_OWORD *)(v8 + 1023) = 0u;
  *(_OWORD *)(v8 + 1039) = 0u;
  *(_WORD *)(v8 + 1132) = 1;
  *(unsigned char *)(v8 + 1134) = 1;
  *(_OWORD *)(v8 + 1135) = 0u;
  *(_OWORD *)(v8 + 1151) = 0u;
  *(_OWORD *)(v8 + 1167) = 0u;
  *(_OWORD *)(v8 + 1183) = 0u;
  *(_OWORD *)(v8 + 1199) = 0u;
  *(_OWORD *)(v8 + 1215) = 0u;
  *(_OWORD *)(v8 + 1231) = 0u;
  *(_OWORD *)(v8 + 1247) = 0u;
  *(_OWORD *)(v8 + 1263) = 0u;
  *(_OWORD *)(v8 + 1279) = 0u;
  *(_OWORD *)(v8 + 1295) = 0u;
  *(_OWORD *)(v8 + 1311) = 0u;
  *(_OWORD *)(v8 + 1327) = 0u;
  *(_OWORD *)(v8 + 1343) = 0u;
  *(_OWORD *)(v8 + 1359) = 0u;
  *(_OWORD *)(v8 + 1375) = 0u;
  *(_OWORD *)(v8 + 1391) = 0u;
  *(_OWORD *)(v8 + 1407) = 0u;
  *(_OWORD *)(v8 + 1423) = 0u;
  *(_OWORD *)(v8 + 1439) = 0u;
  *(_OWORD *)(v8 + 1455) = 0u;
  *(_OWORD *)(v8 + 1471) = 0u;
  *(_OWORD *)(v8 + 1487) = 0u;
  *(_OWORD *)(v8 + 1503) = 0u;
  *(_OWORD *)(v8 + 1519) = 0u;
  *(_OWORD *)(v8 + 1535) = 0u;
  *(_OWORD *)(v8 + 1551) = 0u;
  *(_OWORD *)(v8 + 1564) = 0u;
  unsigned __int16 v24 = __src;
  bzero(__src, 0x6FC0uLL);
  uint64_t v25 = 149;
  do
  {
    *((_DWORD *)v24 + 46) = 0;
    *unsigned __int16 v24 = 0uLL;
    v24[1] = 0uLL;
    unsigned __int8 v24[2] = 0uLL;
    void v24[3] = 0uLL;
    void v24[4] = 0uLL;
    _OWORD v24[5] = 0uLL;
    v24[6] = 0uLL;
    v24[7] = 0uLL;
    v24[8] = 0uLL;
    v24[9] = 0uLL;
    v24[10] = 0uLL;
    *(void *)((char *)v24 + 173) = 0;
    v24 += 12;
    --v25;
  }
  while (v25);
  memset(&__src[1788], 0, 24);
  memcpy(*(void **)(v0 + 96), __src, 0x6FD8uLL);
  bzero(__src, 0x1D28uLL);
  uint64_t v26 = 32;
  do
  {
    char v27 = (char *)__src + v26;
    *(void *)char v27 = 0;
    *((_WORD *)v27 + 4) = 0;
    *(void *)(v27 + 12) = 0;
    *((_WORD *)v27 + 10) = 0;
    *((void *)v27 + 6) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = 0;
    v26 += 56;
    *((_WORD *)v27 + 20) = 0;
  }
  while (v27 + 56 != (char *)&__src[170]);
  for (uint64_t i = 2720; i != 4448; i += 36)
  {
    char v29 = (char *)__src + i;
    v29[32] = 0;
    *(_OWORD *)char v29 = 0uLL;
    *((_OWORD *)v29 + 1) = 0uLL;
  }
  uint64_t v30 = -960;
  do
  {
    long long v31 = (char *)__src + v30;
    *((_WORD *)v31 + 2712) = 0;
    *((_OWORD *)v31 + 338) = 0uLL;
    v30 += 20;
  }
  while (v30);
  uint64_t v32 = 0xFFFFFFFFFFFFF80;
  do
  {
    *(void *)&__src[v32 + 466] = 0;
    *(void *)((char *)&__src[v32 + 466] + 6) = 0;
    ++v32;
  }
  while (v32 * 16);
  LOWORD(__src[466]) = 0;
  DWORD1(__src[466]) = 0;
  memcpy(*(void **)(v0 + 16), __src, 0x1D28uLL);
  bzero(__src, 0xA80uLL);
  for (uint64_t j = 0; j != 2688; j += 56)
  {
    long long v34 = (char *)__src + j;
    *(_DWORD *)long long v34 = 0;
    v34[52] = 0;
  }
  memset(&__src[168], 0, 24);
  memcpy(*(void **)(v0 + 24), __src, 0xA98uLL);
  bzero(__src, 0x9A30uLL);
  uint64_t v35 = 0xFFFFFFFFFFFFFA0;
  do
  {
    long long v36 = (_OWORD *)((char *)&__src[v35 + 797] + 8);
    *(_OWORD *)((char *)v36 + 46) = 0uLL;
    v36[1] = 0uLL;
    v36[2] = 0uLL;
    *long long v36 = 0uLL;
    v35 += 4;
  }
  while (v35 * 16);
  bzero((char *)&__src[797] + 8, 0xA20uLL);
  uint64_t v37 = 15352;
  do
  {
    unsigned __int16 v38 = (char *)__src + v37;
    *(void *)unsigned __int16 v38 = 0;
    *((_WORD *)v38 + 4) = 0;
    *(void *)(v38 + 12) = 0;
    *(void *)(v38 + 28) = 0;
    *(void *)(v38 + 20) = 0;
    v37 += 36;
  }
  while (v38 + 36 != (char *)&__src[1013] + 8);
  *((void *)&__src[1013] + 1) = 0;
  LOWORD(__src[1014]) = 0;
  DWORD1(__src[1014]) = 0;
  BYTE8(__src[1014]) = 0;
  HIDWORD(__src[1014]) = 0;
  LOBYTE(__src[1015]) = 0;
  *(_OWORD *)((char *)&__src[1015] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1016] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1017] + 8) = 0u;
  BYTE8(__src[1018]) = 0;
  memset(&__src[1019], 0, 432);
  uint64_t v39 = -3168;
  do
  {
    uint64_t v40 = (_OWORD *)((char *)__src + v39);
    v40[1248] = 0uLL;
    v40[1247] = 0uLL;
    v40[1246] = 0uLL;
    v40[1245] = 0uLL;
    v40[1244] = 0uLL;
    *(void *)((char *)&__src[1248] + v39 + 15) = 0;
    v39 += 88;
  }
  while (v39);
  uint64_t v41 = -3168;
  do
  {
    uint64_t v42 = (_OWORD *)((char *)__src + v41);
    v42[1446] = 0uLL;
    v42[1445] = 0uLL;
    v42[1444] = 0uLL;
    v42[1443] = 0uLL;
    v42[1442] = 0uLL;
    *(void *)((char *)&__src[1446] + v41 + 15) = 0;
    v41 += 88;
  }
  while (v41);
  uint64_t v43 = -1296;
  do
  {
    uint64_t v44 = (char *)__src + v43;
    *((_OWORD *)v44 + 1524) = 0uLL;
    *((_OWORD *)v44 + 1523) = 0uLL;
    *(_DWORD *)((char *)&__src[1524] + v43 + 15) = 0;
    v43 += 36;
  }
  while (v43);
  uint64_t v45 = 0;
  *(void *)((char *)&__src[1523] + 6) = 0;
  *(void *)&__src[1523] = 0;
  memset(&__src[1524], 0, 30);
  memset(&__src[1526], 0, 104);
  do
  {
    *(_DWORD *)((char *)&__src[1538] + v45 + 8) = 0;
    uint64_t v46 = (_OWORD *)((char *)__src + v45);
    int v47 = (char *)&__src[1532] + v45 + 8;
    *(_OWORD *)int v47 = 0uLL;
    unsigned int v48 = (char *)&__src[1534] + v45;
    *(void *)(v47 + 15) = 0;
    v46[1534] = 0uLL;
    v46[1535] = 0uLL;
    v46[1536] = 0uLL;
    v46[1537] = 0uLL;
    v45 += 100;
    *(void *)(v48 + 62) = 0;
  }
  while (v45 != 3700);
  uint64_t v49 = -3700;
  do
  {
    *(_DWORD *)((char *)&__src[2001] + v49) = 0;
    *(_OWORD *)((char *)&__src[1995] + v49) = 0uLL;
    double v50 = (char *)&__src[1996] + v49 + 8;
    *(void *)((char *)&__src[1995] + v49 + 15) = 0;
    *(_OWORD *)double v50 = 0uLL;
    *((_OWORD *)v50 + 1) = 0uLL;
    *((_OWORD *)v50 + 2) = 0uLL;
    *((_OWORD *)v50 + 3) = 0uLL;
    *(void *)(v50 + 62) = 0;
    v49 += 100;
  }
  while (v49);
  *((void *)&__src[2466] + 1) = 0;
  bzero(&__src[1995], 0x747uLL);
  bzero((char *)&__src[2111] + 8, 0x1629uLL);
  memcpy(*(void **)(v0 + 56), __src, 0x9A30uLL);
  *(_DWORD *)int v66 = 0;
  v66[25] = 0;
  memset(__src, 0, 51);
  memset(v65, 0, 24);
  *(void *)&v66[4] = 0;
  *(void *)&v66[17] = 0;
  *(void *)&v66[12] = 0;
  *(_OWORD *)((char *)&__src[3] + 12) = 0u;
  *(_OWORD *)((char *)&__src[3] + 3) = 0u;
  uint64_t v51 = *(void *)(v0 + 80);
  *(void *)uint64_t v51 = 0;
  *(void *)(v51 + 8) = 0;
  *(_DWORD *)(v51 + 16) = 0;
  *(void *)(v51 + 20) = 0x500000002;
  *(_OWORD *)(v51 + 32) = *(_OWORD *)&v66[4];
  *(void *)(v51 + 46) = *(void *)&v66[18];
  *(_OWORD *)(v51 + 70) = 0u;
  *(_OWORD *)(v51 + 86) = 0u;
  *(_OWORD *)(v51 + 102) = 0u;
  *(_OWORD *)(v51 + 118) = 0u;
  *(_OWORD *)(v51 + 134) = 0u;
  *(_OWORD *)(v51 + 150) = 0u;
  *(_OWORD *)(v51 + 166) = 0u;
  *(_OWORD *)(v51 + 182) = 0u;
  *(_OWORD *)(v51 + 198) = 0u;
  *(_OWORD *)(v51 + 214) = 0u;
  *(_OWORD *)(v51 + 230) = 0u;
  *(_OWORD *)(v51 + 262) = 0u;
  *(_OWORD *)(v51 + 278) = 0u;
  *(_OWORD *)(v51 + 54) = 0u;
  *(_OWORD *)(v51 + 294) = 0u;
  *(_OWORD *)(v51 + 310) = 0u;
  *(_OWORD *)(v51 + 326) = 0u;
  *(_OWORD *)(v51 + 342) = 0u;
  *(_OWORD *)(v51 + 358) = 0u;
  *(_OWORD *)(v51 + 373) = 0u;
  long long v52 = __src[3];
  *(_OWORD *)(v51 + 421) = __src[2];
  *(_OWORD *)(v51 + 437) = v52;
  *(_OWORD *)(v51 + 449) = *(_OWORD *)((char *)&__src[3] + 12);
  long long v53 = __src[1];
  *(_OWORD *)(v51 + 389) = __src[0];
  *(_OWORD *)(v51 + 405) = v53;
  *(_OWORD *)(v51 + 246) = 0u;
  bzero((void *)(v51 + 465), 0x5F9uLL);
  *(_OWORD *)(v51 + 1994) = *(_OWORD *)v65;
  *(void *)(v51 + 2010) = *(void *)&v65[16];
  *(_OWORD *)(v51 + 2018) = 0u;
  *(void *)(v51 + 2034) = 0;
  *(_DWORD *)int v66 = 0;
  v66[25] = 0;
  memset(__src, 0, 76);
  memset(v65, 0, 24);
  *(void *)&v66[4] = 0;
  *(void *)&v66[17] = 0;
  *(void *)&v66[12] = 0;
  uint64_t v54 = *(void *)(v0 + 88);
  *(void *)uint64_t v54 = 0;
  *(void *)(v54 + 8) = 0;
  *(_DWORD *)(v54 + 16) = 0;
  *(void *)(v54 + 20) = 0x500000002;
  *(_OWORD *)(v54 + 32) = *(_OWORD *)&v66[4];
  *(void *)(v54 + 46) = *(void *)&v66[18];
  *(_OWORD *)(v54 + 70) = 0u;
  *(_OWORD *)(v54 + 86) = 0u;
  *(_OWORD *)(v54 + 102) = 0u;
  *(_OWORD *)(v54 + 118) = 0u;
  *(_OWORD *)(v54 + 134) = 0u;
  *(_OWORD *)(v54 + 150) = 0u;
  *(_OWORD *)(v54 + 166) = 0u;
  *(_OWORD *)(v54 + 182) = 0u;
  *(_OWORD *)(v54 + 198) = 0u;
  *(_OWORD *)(v54 + 214) = 0u;
  *(_OWORD *)(v54 + 230) = 0u;
  *(_OWORD *)(v54 + 262) = 0u;
  *(_OWORD *)(v54 + 278) = 0u;
  *(_OWORD *)(v54 + 54) = 0u;
  *(_OWORD *)(v54 + 294) = 0u;
  *(_OWORD *)(v54 + 310) = 0u;
  *(_OWORD *)(v54 + 326) = 0u;
  *(_OWORD *)(v54 + 342) = 0u;
  *(_OWORD *)(v54 + 358) = 0u;
  *(_OWORD *)(v54 + 373) = 0u;
  long long v55 = __src[3];
  *(_OWORD *)(v54 + 421) = __src[2];
  *(_OWORD *)(v54 + 437) = v55;
  *(_OWORD *)(v54 + 449) = *(_OWORD *)((char *)&__src[3] + 12);
  long long v56 = __src[1];
  *(_OWORD *)(v54 + 389) = __src[0];
  *(_OWORD *)(v54 + 405) = v56;
  *(_OWORD *)(v54 + 246) = 0u;
  bzero((void *)(v54 + 465), 0x5F9uLL);
  *(_OWORD *)(v54 + 1994) = *(_OWORD *)v65;
  *(void *)(v54 + 2010) = *(void *)&v65[16];
  *(_OWORD *)(v54 + 2018) = 0u;
  *(void *)(v54 + 2034) = 0;
  memset(v66, 0, 35);
  LODWORD(__src[0]) = 0;
  WORD2(__src[0]) = 0;
  bzero((char *)__src + 6, 0x48CuLL);
  uint64_t v57 = *(void *)(v0 + 104);
  *(void *)uint64_t v57 = 0;
  *(void *)(v57 + 8) = 0;
  *(_WORD *)(v57 + 16) = 0;
  long long v58 = *(_OWORD *)&v66[16];
  *(_OWORD *)(v57 + 18) = *(_OWORD *)v66;
  *(_OWORD *)(v57 + 34) = v58;
  *(_DWORD *)(v57 + 49) = *(_DWORD *)&v66[31];
  *(unsigned char *)(v57 + 53) = 0;
  *(_DWORD *)(v57 + 54) = 0;
  memcpy((void *)(v57 + 58), __src, 0x492uLL);
  bzero((void *)(v57 + 1228), 0x754uLL);
  bzero(*(void **)(v0 + 112), 0xD820uLL);
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v59))
  {
    uint64_t v60 = *(void *)(v0 + 128);
    *(void *)(v60 + 288) = 0;
    *(_OWORD *)(v60 + 256) = 0u;
    *(_OWORD *)(v60 + 272) = 0u;
    *(_OWORD *)(v60 + 224) = 0u;
    *(_OWORD *)(v60 + 240) = 0u;
    *(_OWORD *)(v60 + 192) = 0u;
    *(_OWORD *)(v60 + 208) = 0u;
    *(_OWORD *)(v60 + 160) = 0u;
    *(_OWORD *)(v60 + 176) = 0u;
    *(_OWORD *)(v60 + 128) = 0u;
    *(_OWORD *)(v60 + 144) = 0u;
    *(_OWORD *)(v60 + 96) = 0u;
    *(_OWORD *)(v60 + 112) = 0u;
    *(_OWORD *)(v60 + 64) = 0u;
    *(_OWORD *)(v60 + 80) = 0u;
    *(_OWORD *)(v60 + 32) = 0u;
    *(_OWORD *)(v60 + 48) = 0u;
    *(_OWORD *)uint64_t v60 = 0u;
    *(_OWORD *)(v60 + 16) = 0u;
    bzero(__src, 0x2068uLL);
    uint64_t v61 = 1208;
    do
    {
      double v62 = (char *)__src + v61;
      *(_DWORD *)double v62 = 0;
      v62[4] = 0;
      *(_OWORD *)(v62 + 8) = 0uLL;
      *(_OWORD *)(v62 + 24) = 0uLL;
      *(_OWORD *)(v62 + 40) = 0uLL;
      *(_OWORD *)(v62 + 56) = 0uLL;
      *(_OWORD *)(v62 + 72) = 0uLL;
      *(_OWORD *)(v62 + 88) = 0uLL;
      *(_OWORD *)(v62 + 97) = 0uLL;
      v61 += 144;
      *((void *)v62 + 15) = 0;
      *((void *)v62 + 16) = 0;
      *(_DWORD *)(v62 + 135) = 0;
    }
    while (v62 + 144 != (char *)&__src[507] + 8);
    *(_OWORD *)((char *)&__src[517] + 4) = 0u;
    *(_OWORD *)((char *)&__src[515] + 8) = 0u;
    *(_OWORD *)((char *)&__src[516] + 8) = 0u;
    *(_OWORD *)((char *)&__src[513] + 8) = 0u;
    *(_OWORD *)((char *)&__src[514] + 8) = 0u;
    *(_OWORD *)((char *)&__src[511] + 8) = 0u;
    *(_OWORD *)((char *)&__src[512] + 8) = 0u;
    *(_OWORD *)((char *)&__src[509] + 8) = 0u;
    *(_OWORD *)((char *)&__src[510] + 8) = 0u;
    *(_OWORD *)((char *)&__src[507] + 8) = 0u;
    *(_OWORD *)((char *)&__src[508] + 8) = 0u;
    memcpy(*(void **)(v0 + 120), __src, 0x2064uLL);
    uint64_t v63 = *(_OWORD **)(v0 + 136);
    *(_OWORD *)((char *)v63 + 91) = 0u;
    v63[4] = 0u;
    v63[5] = 0u;
    v63[2] = 0u;
    v63[3] = 0u;
    *uint64_t v63 = 0u;
    v63[1] = 0u;
    bzero(*(void **)(v0 + 144), 0x3F8uLL);
    bzero(*(void **)(v0 + 152), 0x2804uLL);
  }
  bzero(*(void **)(v0 + 304), 0x18C8uLL);
  bzero(*(void **)(v0 + 312), 0x30A8uLL);
}

double GNSS_HL_Data_Bases_Init()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(v0 + 8) + 16) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                             * (double)mach_continuous_time());
  Init_DB_SV_Nav_Mess(*(void *)(v0 + 56));
  uint64_t v1 = *(int **)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 48);
  int v3 = *v1;
  LODWORD(v1) = v1[4];
  *(_DWORD *)uint64_t v2 = 0;
  *(_WORD *)(v2 + 4) = 0;
  *(_DWORD *)(v2 + 8) = v3;
  *(_DWORD *)(v2 + 12) = v1;
  *(_WORD *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 48) = -1;
  *(_WORD *)(v2 + 52) = -1;
  *(_DWORD *)(v2 + 66) = 0;
  *(void *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 0;
  *(void *)(v2 + 54) = 0;
  *(_DWORD *)(v2 + 61) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 100) = v3;
  uint64_t v4 = *(void *)(v0 + 32);
  *(_WORD *)(v4 + 176) = -25187;
  *(void *)&long long v5 = 0x9D9D9D9D9D9D9D9DLL;
  *((void *)&v5 + 1) = 0x9D9D9D9D9D9D9D9DLL;
  *(_OWORD *)(v4 + 144) = v5;
  *(_OWORD *)(v4 + 160) = v5;
  *(_OWORD *)(v4 + 112) = v5;
  *(_OWORD *)(v4 + 128) = v5;
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)uint64_t v4 = v5;
  memset_pattern16((void *)(v4 + 178), &memset_pattern, 0x164uLL);
  *(unsigned char *)(v4 + 534) = 0;
  Init_DB_Sys_Status(*(void *)(v0 + 72));
  Init_DB_Nav_Soln(*(void *)(v0 + 48), *(void *)(v0 + 72), *(void *)(v0 + 88));
  memcpy(*(void **)(v0 + 80), *(const void **)(v0 + 88), 0x800uLL);
  Init_DB_Acq_Aid_Table(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 40));
  inited = (gnss::GnssAdaptDevice *)Init_DB_Sensor(*(void *)(v0 + 112));
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(inited))
  {
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 136);
    *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 + 948);
    *(unsigned char *)(v9 + 6) = *(unsigned char *)(v8 + 43);
    *(_WORD *)(v9 + 4) = g_Enable_LCD_Debug;
    GN_GPS_Get_LibVersion((char *)(v9 + 7));
    long long v10 = *(void **)(v0 + 120);
    bzero(v14, 0x2068uLL);
    uint64_t v11 = 1208;
    do
    {
      long long v12 = (char *)v14 + v11;
      *(_DWORD *)long long v12 = 0;
      void v12[4] = 0;
      *(_OWORD *)(v12 + 8) = 0uLL;
      *(_OWORD *)(v12 + 24) = 0uLL;
      *(_OWORD *)(v12 + 40) = 0uLL;
      *(_OWORD *)(v12 + 56) = 0uLL;
      *(_OWORD *)(v12 + 72) = 0uLL;
      *(_OWORD *)(v12 + 88) = 0uLL;
      *(_OWORD *)(v12 + 97) = 0uLL;
      v11 += 144;
      *((void *)v12 + 15) = 0;
      *((void *)v12 + 16) = 0;
      *(_DWORD *)(v12 + 135) = 0;
    }
    while (v12 + 144 != (char *)&v14[507] + 8);
    *(_OWORD *)((char *)&v14[517] + 4) = 0u;
    *(_OWORD *)((char *)&v14[515] + 8) = 0u;
    *(_OWORD *)((char *)&v14[516] + 8) = 0u;
    *(_OWORD *)((char *)&v14[513] + 8) = 0u;
    *(_OWORD *)((char *)&v14[514] + 8) = 0u;
    *(_OWORD *)((char *)&v14[511] + 8) = 0u;
    *(_OWORD *)((char *)&v14[512] + 8) = 0u;
    *(_OWORD *)((char *)&v14[509] + 8) = 0u;
    *(_OWORD *)((char *)&v14[510] + 8) = 0u;
    *(_OWORD *)((char *)&v14[507] + 8) = 0u;
    *(_OWORD *)((char *)&v14[508] + 8) = 0u;
    memcpy(v10, v14, 0x2064uLL);
    Init_DB_SA_Assistance(*(void *)(v0 + 328), *(void *)(v0 + 128));
    uint64_t v13 = *(void *)(v0 + 144);
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, 410);
    memset(&v14[519], 0, 48);
    memcpy((void *)v13, v15, 0x138uLL);
    *(_OWORD *)(v13 + 312) = 0u;
    *(_OWORD *)(v13 + 328) = 0u;
    *(_OWORD *)(v13 + 344) = 0u;
    *(_OWORD *)(v13 + 360) = 0u;
    *(_OWORD *)(v13 + 376) = 0u;
    *(_OWORD *)(v13 + 392) = 0u;
    *(_OWORD *)(v13 + 408) = 0u;
    *(_OWORD *)(v13 + 424) = 0u;
    *(_OWORD *)(v13 + 440) = 0u;
    *(_OWORD *)(v13 + 456) = 0u;
    *(_OWORD *)(v13 + 472) = 0u;
    *(_OWORD *)(v13 + 488) = 0u;
    *(_OWORD *)(v13 + 504) = 0u;
    *(_OWORD *)(v13 + 520) = 0u;
    *(_OWORD *)(v13 + 536) = 0u;
    memcpy((void *)(v13 + 552), v14, 0x19AuLL);
    *(_OWORD *)(v13 + 962) = *(_OWORD *)((char *)&v14[520] + 8);
    *(void *)(v13 + 978) = *((void *)&v14[521] + 1);
    double result = *(double *)&v14[519];
    *(_OWORD *)(v13 + 986) = v14[519];
    *(void *)(v13 + 1002) = *(void *)&v14[520];
    *(_DWORD *)(v13 + 1010) = 0;
    *(_WORD *)(v13 + 1014) = 0;
  }
  return result;
}

double GNSS_HL_Data_Bases_Init_NV()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(v0 + 8) + 16) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                             * (double)mach_continuous_time());
  Init_DB_SV_Nav_Mess_NV(*(void *)(v0 + 56));
  Init_DB_Time_Sync_NV(*(int **)(v0 + 8), *(int **)(v0 + 48), *(_DWORD **)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 32);
  *(_WORD *)(v1 + 176) = -25187;
  *(void *)&long long v2 = 0x9D9D9D9D9D9D9D9DLL;
  *((void *)&v2 + 1) = 0x9D9D9D9D9D9D9D9DLL;
  *(_OWORD *)(v1 + 144) = v2;
  *(_OWORD *)(v1 + 160) = v2;
  *(_OWORD *)(v1 + 112) = v2;
  *(_OWORD *)(v1 + 128) = v2;
  *(_OWORD *)(v1 + 80) = v2;
  *(_OWORD *)(v1 + 96) = v2;
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = v2;
  *(_OWORD *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)uint64_t v1 = v2;
  memset_pattern16((void *)(v1 + 178), &memset_pattern, 0x164uLL);
  *(unsigned char *)(v1 + 534) = 0;
  Init_DB_Sys_Status_NV(*(void *)(v0 + 48), *(void *)(v0 + 72));
  Init_DB_Nav_Soln(*(void *)(v0 + 48), *(void *)(v0 + 72), *(void *)(v0 + 88));
  memcpy(*(void **)(v0 + 80), *(const void **)(v0 + 88), 0x800uLL);
  Init_DB_Acq_Aid_Table(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 40));
  inited = (gnss::GnssAdaptDevice *)Init_DB_Sensor(*(void *)(v0 + 112));
  if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(inited))
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 136);
    *(_DWORD *)uint64_t v6 = *(_DWORD *)(v5 + 948);
    *(unsigned char *)(v6 + 6) = *(unsigned char *)(v5 + 43);
    *(_WORD *)(v6 + 4) = g_Enable_LCD_Debug;
    GN_GPS_Get_LibVersion((char *)(v6 + 7));
    long long v7 = *(void **)(v0 + 120);
    bzero(v11, 0x2068uLL);
    uint64_t v8 = 1208;
    do
    {
      uint64_t v9 = (char *)v11 + v8;
      *(_DWORD *)uint64_t v9 = 0;
      void v9[4] = 0;
      *(_OWORD *)(v9 + 8) = 0uLL;
      *(_OWORD *)(v9 + 24) = 0uLL;
      *(_OWORD *)(v9 + 40) = 0uLL;
      *(_OWORD *)(v9 + 56) = 0uLL;
      *(_OWORD *)(v9 + 72) = 0uLL;
      *(_OWORD *)(v9 + 88) = 0uLL;
      *(_OWORD *)(v9 + 97) = 0uLL;
      v8 += 144;
      *((void *)v9 + 15) = 0;
      *((void *)v9 + 16) = 0;
      *(_DWORD *)(v9 + 135) = 0;
    }
    while (v9 + 144 != (char *)&v11[507] + 8);
    *(_OWORD *)((char *)&v11[517] + 4) = 0u;
    *(_OWORD *)((char *)&v11[515] + 8) = 0u;
    *(_OWORD *)((char *)&v11[516] + 8) = 0u;
    *(_OWORD *)((char *)&v11[513] + 8) = 0u;
    *(_OWORD *)((char *)&v11[514] + 8) = 0u;
    *(_OWORD *)((char *)&v11[511] + 8) = 0u;
    *(_OWORD *)((char *)&v11[512] + 8) = 0u;
    *(_OWORD *)((char *)&v11[509] + 8) = 0u;
    *(_OWORD *)((char *)&v11[510] + 8) = 0u;
    *(_OWORD *)((char *)&v11[507] + 8) = 0u;
    *(_OWORD *)((char *)&v11[508] + 8) = 0u;
    memcpy(v7, v11, 0x2064uLL);
    Init_DB_SA_Assistance(*(void *)(v0 + 328), *(void *)(v0 + 128));
    uint64_t v10 = *(void *)(v0 + 144);
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, 410);
    memset(&v11[519], 0, 48);
    memcpy((void *)v10, v12, 0x138uLL);
    *(_OWORD *)(v10 + 312) = 0u;
    *(_OWORD *)(v10 + 328) = 0u;
    *(_OWORD *)(v10 + 344) = 0u;
    *(_OWORD *)(v10 + 360) = 0u;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *(_OWORD *)(v10 + 408) = 0u;
    *(_OWORD *)(v10 + 424) = 0u;
    *(_OWORD *)(v10 + 440) = 0u;
    *(_OWORD *)(v10 + 456) = 0u;
    *(_OWORD *)(v10 + 472) = 0u;
    *(_OWORD *)(v10 + 488) = 0u;
    *(_OWORD *)(v10 + 504) = 0u;
    *(_OWORD *)(v10 + 520) = 0u;
    *(_OWORD *)(v10 + 536) = 0u;
    memcpy((void *)(v10 + 552), v11, 0x19AuLL);
    *(_OWORD *)(v10 + 962) = *(_OWORD *)((char *)&v11[520] + 8);
    *(void *)(v10 + 978) = *((void *)&v11[521] + 1);
    double result = *(double *)&v11[519];
    *(_OWORD *)(v10 + 986) = v11[519];
    *(void *)(v10 + 1002) = *(void *)&v11[520];
    *(_DWORD *)(v10 + 1010) = 0;
    *(_WORD *)(v10 + 1014) = 0;
  }
  return result;
}

double GNSS_HL_Data_Bases_TimeSynch(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = (int *)a1[1];
  uint64_t v6 = a1[10];
  uint64_t v5 = a1[11];
  if (*(_DWORD *)(v3 + 8)) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBts TTick not 0");
  }
  if (!*(_DWORD *)(v3 + 12)) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBts OS_Time_ms = 0");
  }
  if (!*v4) {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBtt TTicuint64_t k = 0");
  }
  uint64_t v7 = v4[4];
  if (!v7)
  {
    gn_report_assertion_failure("GNSS_HL_Data_Bases_TimeSynch: DBtt OS_Time_ms = 0");
    uint64_t v7 = v4[4];
  }
  uint64_t v8 = *(unsigned int *)(v3 + 12);
  if (v7 < v8)
  {
    EvLog_nd("GNSS_HL_Data_Bases_TimeSynch: WARNING - DBtt behind DBts", 2, a3, v7, v8);
    LODWORD(v8) = *(_DWORD *)(v3 + 12);
  }
  int v9 = *(_DWORD *)(v3 + 8);
  int v10 = *(_DWORD *)v3;
  if (*(int *)v3 < 1) {
    int v11 = *v4;
  }
  else {
    int v11 = v8 - v4[4] + *v4;
  }
  *(_DWORD *)(v3 + 8) = v11;
  int v13 = v4[3];
  int v12 = v4[4];
  *(_DWORD *)(v3 + 12) = v12;
  EvLog_v("GNSS_HL_Data_Bases_TimeSynch: ts %d %g %u %u orig %u %u  ns %u %u tt %u %u %u", v10, *(double *)(v3 + 24), v11, v12, v9, v8, *(_DWORD *)(v6 + 32), *(_DWORD *)(v6 + 36), *v4, v12, v13);
  if (!*(_DWORD *)(v6 + 32))
  {
    double result = *(double *)(v3 + 8);
    *(double *)(v6 + 32) = result;
  }
  if (!*(_DWORD *)(v5 + 32))
  {
    double result = *(double *)(v3 + 8);
    *(double *)(v5 + 32) = result;
  }
  return result;
}

void GM_Set_MSec_TOT_SSS(uint64_t a1, double a2, double a3, double a4)
{
}

void GM_Set_MSec_TOW_NSSS(uint64_t a1, uint64_t a2, double *a3, int *a4, double a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 4))
  {
    long long v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)long long v22 = *(_OWORD *)a1;
    long long v23 = v9;
    long long v24 = *(_OWORD *)(a1 + 32);
    uint64_t v25 = *(void *)(a1 + 48);
    GM_Aid_NSSS_Meas(a2, 0, (int *)v22);
    double v10 = *a3;
    double v11 = Comp_Sig_TOT(*(int *)v22, *(int *)&v22[2], v22[4], *a3, a5);
    LOWORD(v12) = *(_WORD *)(a2 + 16);
    double v13 = (double)v12;
    double v14 = 0.5;
    double v15 = v13 * 0.5 + v11 * 1000.0;
    if (v15 <= 0.0) {
      double v16 = -0.5;
    }
    else {
      double v16 = 0.5;
    }
    double v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0) {
        double v18 = (double)(int)v17 * 0.001;
      }
      else {
        double v18 = -2147483.65;
      }
    }
    else
    {
      double v18 = 2147483.65;
    }
    double v19 = (v18 - v10) * 1000.0;
    if (v19 <= 0.0) {
      double v14 = -0.5;
    }
    double v20 = v19 + v14;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0) {
        int v21 = (int)v20;
      }
      else {
        int v21 = 0x80000000;
      }
    }
    else
    {
      int v21 = 0x7FFFFFFF;
    }
    *a4 = v21;
    *a3 = v18;
  }
}

uint64_t SV_Data_Decode_Update_Wrapper(uint64_t a1)
{
  GNSS_Validate_p_list(a1, "SV_Data_Decode_Update_Wrapper: Entry");
  SV_Data_Decode(*(char **)(a1 + 184), *(void *)(a1 + 240), *(_DWORD **)(a1 + 24), *(void *)(a1 + 72), *(void *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 56));

  return GNSS_Validate_p_list(a1, "SV_Data_Decode_Update_Wrapper:  Exit");
}

void *GM_Cross_Check_Meas_Aiding(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = 0x1FFFFFFFFFFFFEE0;
  uint64_t v4 = 216;
  uint64_t v5 = 4428;
  uint64_t v6 = 4438;
  uint64_t v7 = 6796;
  do
  {
    if (*((unsigned char *)v1 + v5))
    {
      if (*(int *)((char *)v1 + v7) >= 10)
      {
        unsigned int v8 = *((unsigned __int8 *)v1 + v6);
        if (v8 >= 2)
        {
          if (v8 == 2) {
            unsigned int v9 = 5;
          }
          else {
            unsigned int v9 = 3;
          }
          if ((*(_WORD *)((unsigned char *)v1 + v2 + 8) & 0x300) != 0) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0x7FFFLL;
          }
          BOOL v11 = (*(_WORD *)((unsigned char *)v1 + v2 + 8) & 0x100) == 0 && (*(_WORD *)((unsigned char *)v1 + v2 + 8) & 0x300) != 0;
          unint64_t v12 = &v1[v3];
          int v13 = LODWORD(v1[v4]) - HIDWORD(v1[v3 + 844]);
          if (v13 < 28800)
          {
            if (v13 <= -28801) {
              v13 += 57600 * ((28800 - v13) / 57600);
            }
          }
          else
          {
            int v13 = (v13 + 28800) % 57600 - 28800;
          }
          uint64_t v14 = *((char *)v1 + v2 + 2);
          uint64_t v15 = (uint64_t)&v1[v3];
          double result = (void *)*((unsigned int *)v12 + 1690);
          uint64_t v16 = *((unsigned __int16 *)v12 + 3377);
          uint64_t v17 = HIDWORD(v1[v4]);
          int v18 = v17 - result + 1534500 * v13;
          if (v18 < 0) {
            int v19 = -511;
          }
          else {
            int v19 = 511;
          }
          int v20 = (v19 + v18) / 1023;
          if (!v11) {
            v20 %= 20;
          }
          int v21 = v18 % 1023;
          unsigned int v22 = v21 + 1023;
          if (v21 >= -510) {
            unsigned int v22 = v21;
          }
          if (v21 <= 511) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = (v21 - 1023);
          }
          unsigned int v24 = v20 + 20;
          if (v20 >= -9) {
            unsigned int v24 = v20;
          }
          if (v20 <= 10) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = (v20 - 20);
          }
          if ((int)v23 >= 0) {
            unsigned int v26 = v23;
          }
          else {
            unsigned int v26 = -(int)v23;
          }
          unsigned int v27 = (unsigned __int16)g_Enable_Event_Log;
          if (v26 > v16 && (unsigned __int16)g_Enable_Event_Log >= 3u)
          {
            uint64_t v31 = HIDWORD(v1[v4]);
            uint64_t v32 = result;
            BOOL v33 = v11;
            EvLog_nd("GMCCMA: PR MAX chips ", 6, v15, (*((_DWORD *)v1 + 1692) - *(_DWORD *)(v15 + 6728)), v14, v17, result, v23, v16);
            uint64_t v15 = (uint64_t)&v1[v3];
            uint64_t v17 = v31;
            double result = v32;
            BOOL v11 = v33;
            unsigned int v27 = (unsigned __int16)g_Enable_Event_Log;
          }
          if ((int)v25 >= 0) {
            unsigned int v29 = v25;
          }
          else {
            unsigned int v29 = -(int)v25;
          }
          if (v29 > v10 && v27 >= 3) {
            double result = EvLog_nd("GMCCMA: PR MAX ms ", 7, v15, (*((_DWORD *)v1 + 1692) - *(_DWORD *)(v15 + 6728)), v14, v17, result, v25, v10, v11);
          }
        }
      }
    }
    v2 += 36;
    v4 += 7;
    v3 += 6;
    v6 += 48;
    v7 += 4;
    v5 += 48;
  }
  while (v2 != 1728);
  return result;
}

uint64_t GLON_Calc_State_Table_Eph(__int16 a1, __int16 a2, int a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v9 = *(_DWORD *)(a4 + 12) / 900;
  if (*(_DWORD *)(a5 + 184) == 1 && *(_WORD *)(a5 + 166) == v9)
  {
    int v10 = *(_DWORD *)(a5 + 168);
  }
  else
  {
    *(_OWORD *)(a5 + 172) = 0u;
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 160) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 128) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(void *)a5 = *(void *)(a4 + 24);
    *(void *)(a5 + 8) = *(void *)(a4 + 48);
    *(void *)(a5 + 16) = *(void *)(a4 + 72);
    *(void *)(a5 + 24) = *(void *)(a4 + 32);
    *(void *)(a5 + 32) = *(void *)(a4 + 56);
    *(void *)(a5 + 40) = *(void *)(a4 + 80);
    *(void *)(a5 + 48) = *(void *)(a4 + 40);
    *(void *)(a5 + 56) = *(void *)(a4 + 64);
    *(void *)(a5 + 64) = *(void *)(a4 + 88);
    *(void *)(a5 + 80) = 0;
    *(void *)(a5 + 88) = 0;
    *(void *)(a5 + 72) = 0;
    int v10 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a5 + 168) = v10;
    *(_WORD *)(a5 + 172) = *(_WORD *)(a4 + 126);
    *(_WORD *)(a5 + 166) = v9;
    *(_DWORD *)(a5 + 184) = 1;
    *(_DWORD *)(a5 + 176) = 2;
    *(unsigned char *)(a5 + 180) = *(unsigned char *)(a4 + 20);
    *(double *)(a5 + 112) = gloURA_table[*(unsigned __int8 *)(a4 + 125)];
  }
  __int16 v11 = 0;
  *(void *)unsigned int v26 = 0;
  double v27 = 0.0;
  v28[0] = (double *)a5;
  v28[1] = (double *)(a5 + 24);
  unsigned int v29 = (double *)(a5 + 48);
  int v30 = v10;
  double v25 = 0.0;
  do
  {
    int v12 = a3 - v30 + 86400;
    if (a3 - v30 >= -43200) {
      int v12 = a3 - v30;
    }
    if (a3 - v30 <= 43199) {
      int v13 = v12;
    }
    else {
      int v13 = a3 - v30 - 86400;
    }
    if (v13 <= -120) {
      int v13 = -120;
    }
    if (v13 >= 120) {
      int v14 = 120;
    }
    else {
      int v14 = v13;
    }
    *(void *)(a5 + 48) = *(void *)(a4 + 40);
    *(void *)(a5 + 56) = *(void *)(a4 + 64);
    *(void *)(a5 + 64) = *(void *)(a4 + 88);
    if (v14)
    {
      GLON_RungeKutta4(v28, v14);
      ++v11;
    }
    else
    {
      GLON_RK_CalcAccel(v28, v29);
    }
    if (v14 >= 0) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = -v14;
    }
  }
  while (v15 > 0x3C);
  *a6 += v11;
  *(_DWORD *)(a5 + 168) = a3;
  *(_WORD *)(a5 + 172) = a2;
  *(_WORD *)(a5 + 174) = a1;
  API_Get_UTC_Cor(1, &v27);
  uint64_t result = Glon_To_GPS_Time(*(__int16 *)(a5 + 174), *(__int16 *)(a5 + 172), (double)*(int *)(a5 + 168), v27, &v26[1], v26, &v25);
  *(_DWORD *)(a5 + 160) = (int)v25;
  *(_WORD *)(a5 + 164) = LOWORD(v26[0]) + (LOWORD(v26[1]) << 10);
  int v17 = a3 - *(_DWORD *)(a4 + 12);
  int v18 = v17 + 86400;
  if (v17 >= -43200) {
    int v18 = a3 - *(_DWORD *)(a4 + 12);
  }
  if (v17 <= 43199) {
    int v19 = v18;
  }
  else {
    int v19 = v17 - 86400;
  }
  double v20 = *(double *)(a4 + 104);
  *(double *)(a5 + 96) = -(*(double *)(a4 + 96) + v20 * (double)v19);
  if (v19 < 0) {
    int v19 = -v19;
  }
  if (v19 >= 0x385)
  {
    double v21 = (double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778)) * 7.33333333
        + (double)v19 * 0.000277777778 * ((double)v19 * 0.000277777778) * -2.0;
    *(double *)(a5 + 112) = gloURA_table[*(unsigned __int8 *)(a4 + 125)] + v21 * v21;
  }
  *(double *)(a5 + 104) = v20;
  return result;
}

uint64_t NK_Set_TOW_Status(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 22776)
    || (double v2 = *(double *)(a2 + 22816), v2 > 900.0)
    || *(_DWORD *)(result + 11048)
    || *(unsigned char *)(a2 + 2811)
    || !*(unsigned char *)(result + 128))
  {
    double v3 = *(double *)(a2 + 24224);
    if (v3 >= *(double *)(a2 + 24232)) {
      double v3 = *(double *)(a2 + 24232);
    }
    double v4 = *(double *)(a2 + 24240);
    if (v3 < v4) {
      double v4 = v3;
    }
    int v5 = *(_DWORD *)(result + 11048);
    if (v5 || (double v6 = 0.0, *(int *)(a2 + 12) >= 9)) {
      double v6 = v4 * 1.11265006e-17;
    }
    if (!*(unsigned char *)(a2 + 16)) {
      double v6 = v6 + *(double *)(a2 + 24256) * 0.000001;
    }
    double v7 = sqrt(v6);
    if (v7 <= 200.0)
    {
      double v10 = v7 * 1000000.0;
      double v11 = -0.5;
      if (v10 > 0.0) {
        double v11 = 0.5;
      }
      double v12 = v10 + v11;
      if (v12 <= 2147483650.0)
      {
        if (v12 >= -2147483650.0) {
          int v9 = (int)v12;
        }
        else {
          int v9 = 0x80000000;
        }
      }
      else
      {
        int v9 = 0x7FFFFFFF;
      }
      unsigned __int8 v13 = 11;
      while (g_TOW_Stat_Upgrade_us_Sigma_Table[v13] < v9)
      {
        if (--v13 <= 1u)
        {
          int v8 = 1;
          goto LABEL_28;
        }
      }
      int v8 = v13;
    }
    else
    {
      int v8 = 0;
      int v9 = 0x7FFFFFFF;
    }
LABEL_28:
    int v14 = *(_DWORD *)(a2 + 12);
    if (v14 < v8)
    {
      char v15 = *(unsigned char *)(a2 + 22848);
      if (v15) {
        char v15 = *(double *)(a2 + 22888) < 900000000.0;
      }
      if (v8 == 11)
      {
        if (*(unsigned char *)(result + 128)) {
          goto LABEL_37;
        }
        if (*(double *)(a2 + 24752) <= 30000.0) {
          char v15 = 1;
        }
        if ((v15 & 1) == 0) {
LABEL_37:
        }
          int v8 = 9;
        else {
          int v8 = 11;
        }
      }
      *(_DWORD *)(a2 + 12) = v8;
      int v14 = v8;
    }
    if (v5 && !*(unsigned char *)(result + 128))
    {
      uint64_t v16 = 1;
      while (g_TOW_Stat_Degrade_us_Sigma_Table[v16] >= v9)
      {
        if (++v16 == 12)
        {
          LODWORD(v16) = 0;
          break;
        }
      }
      if (v14 != 11 || v9 <= 1700) {
        int v18 = 11;
      }
      else {
        int v18 = 10;
      }
      if (v9 < 3001) {
        LODWORD(v16) = v18;
      }
      if (v14 > (int)v16)
      {
        *(_DWORD *)(a2 + 12) = v16;
        int v14 = v16;
      }
    }
  }
  else
  {
    *(_WORD *)(a2 + 646) = *(_WORD *)(a2 + 22758);
    double v19 = *(double *)(a2 + 22760);
    double v20 = -0.5;
    if (v19 * 1000.0 > 0.0) {
      double v20 = 0.5;
    }
    double v21 = v19 * 1000.0 + v20;
    if (v21 <= 2147483650.0)
    {
      if (v21 >= -2147483650.0) {
        double v22 = (double)(int)v21 * 0.001;
      }
      else {
        double v22 = -2147483.65;
      }
    }
    else
    {
      double v22 = 2147483.65;
    }
    *(double *)(a2 + 632) = v22;
    if (*(unsigned char *)(a2 + 22848))
    {
      *(double *)(a2 + 736) = v22 - v19;
      *(double *)(a2 + 24696) = fmin(sqrt(*(double *)(a2 + 22888)), 9999000.0);
    }
    *(double *)(a2 + 24704) = fmin(sqrt(v2) * 299792.458, 9999000.0);
    if (v2 <= 0.0225)
    {
      int v14 = 11;
    }
    else if (v2 <= 0.5625)
    {
      int v14 = 10;
    }
    else if (v2 <= 9.0)
    {
      int v14 = 9;
    }
    else if (v2 <= 100.0)
    {
      int v14 = 8;
    }
    else
    {
      int v14 = 7;
    }
    *(_DWORD *)(a2 + 12) = v14;
  }
  *(_DWORD *)(a2 + 640) = v14;
  return result;
}

BOOL SuplInitRecdVer2::GetRequestedGNSSList(SuplInitRecdVer2 *this)
{
  if (!*(unsigned char *)(*(void *)(*(void *)this + 16) + 246)) {
    return 0;
  }
  SuplUtils::GetInstance(this);
  return *(unsigned char *)(*(void *)(*(void *)this + 16) + 552) != 0;
}

char *NK_Bit_Sync_Check(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 233) && *(_DWORD *)(a3 + 12) == 11 && *(double *)(a3 + 24752) < 149896.229)
  {
    uint64_t v6 = 0;
    double v7 = (unsigned __int8 *)(result + 78);
    uint64_t v8 = a4 + 416;
    uint64_t v9 = a2 + 6696;
    double v10 = result + 316;
    do
    {
      if (*(unsigned char *)(a3 + v6 + 2960))
      {
        if ((~*(unsigned __int16 *)&v10[2 * v6] & 0x300) == 0)
        {
          uint64_t v11 = a3 + 2960 + 8 * v6;
          if (fabs(*(double *)(v11 + 1872)) > 149896.229)
          {
            if (*(unsigned char *)(a3 + v6 + 49))
            {
              *(unsigned char *)(a3 + v6 + 2960) = 0;
              *(_DWORD *)(a3 + 4 * v6 + 3056) = 12;
              --*(unsigned char *)(a3 + 2811);
              ++*(unsigned char *)(a3 + 2812);
              *(unsigned char *)(v9 + v6) = 0;
              *(unsigned char *)(a4 + v6 + 365) |= 1u;
              *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)a3;
              double v12 = *(double *)(v11 + 1872);
              if (v12 <= 0.0) {
                double v13 = -0.5;
              }
              else {
                double v13 = 0.5;
              }
              double v14 = v12 + v13;
              if (v14 <= 2147483650.0)
              {
                if (v14 >= -2147483650.0) {
                  int v15 = (int)v14;
                }
                else {
                  int v15 = 0x80000000;
                }
              }
              else
              {
                int v15 = 0x7FFFFFFF;
              }
              uint64_t result = EvCrt_v("ChanReset %d : NKBSC %d %d   %d", v6, *v7, *(v7 - 2), v15);
            }
          }
        }
      }
      ++v6;
      v7 += 4;
    }
    while (v6 != 48);
  }
  return result;
}

uint64_t Gnm26_03SendXRestoreFixedMeCalib(const void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v3, "XmM", sizeof(v3));
  memcpy(__s, a1, sizeof(__s));
  return Gnm07_06EncodeNSend(v3, (uint64_t)__s, "Restore NV,m");
}

uint64_t Gnm26_04SendXRestoreVariableMeNv(const void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v3, "XvM", sizeof(v3));
  memcpy(__s, a1, sizeof(__s));
  return Gnm07_06EncodeNSend(v3, (uint64_t)__s, "Restore NV,v");
}

uint64_t Gnm26_12SendXBkupMeAck(_DWORD *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset_s(__s, 0x7FCuLL, 0, 0x7FCuLL);
  qmemcpy(v3, "XeM", sizeof(v3));
  __s[0] = *a1;
  return Gnm07_06EncodeNSend(v3, (uint64_t)__s, "Backup NV Ack,e");
}

void *Gnm26_21HandleXMessages(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 1);
  if (v4 <= 0x50)
  {
    if (v4 == 69)
    {
      if ((Gnm29_04BackupMeNv((uint64_t)a1) & 1) == 0)
      {
        *(_WORD *)&__str[2] = 0;
        __str[0] = 71;
        __str[1] = *a1;
        Gnm26_12SendXBkupMeAck(__str);
      }
      return 0;
    }
    if (v4 == 77)
    {
      return Gnm27_22HandleFixedMeRestoreAck(a1);
    }
    goto LABEL_15;
  }
  if (v4 != 86)
  {
    if (v4 == 81)
    {
      Gnm25_15HandleReqRestoreNv(*a1);
      return 0;
    }
LABEL_15:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm26_21HandleXMessages", 778, *(unsigned __int8 *)(a2 + 1));
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    }
    return 0;
  }

  return Gnm29_02HandleMeNvRestoreAck(a1);
}

uint64_t Gnm54_01HandleSetPowerRpt(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_POWER_REPORT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm54_01HandleSetPowerRpt");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(unsigned char *)(a1 + 12)) {
        uint64_t v5 = 89;
      }
      else {
        uint64_t v5 = 78;
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%c\n", (unint64_t)v4, "GNM", 73, "Gnm54_01HandleSetPowerRpt", v5);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
    }
    Hal_SetPowerReportStatus(*(unsigned char *)(a1 + 12), (uint64_t)Gnm54_02PowerRpt);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm54_01HandleSetPowerRpt", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
  }
  return 0;
}

void Gnm54_02PowerRpt(int a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a1 == 5)
    {
      char v3 = *a2;
      double v4 = gnssOsa_Calloc("Gnm54_02PowerRpt", 62, 1, 0x10uLL);
      if (v4)
      {
        if ((v3 & 2) != 0) {
          char v5 = 0;
        }
        else {
          char v5 = 11;
        }
        v4[12] = v5;
        v4[13] = v3 & 1;
        AgpsSendFsmMsg(128, 128, 8406784, v4);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CBType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm54_02PowerRpt", 1028, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
    }
  }
}

uint64_t Gnm54_03HandleSetPowerRptRsp(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_POWER_REPORT_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm54_03HandleSetPowerRptRsp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    g_PowerRepEnbStatus = *(unsigned char *)(a1 + 13);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      double v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (g_PowerRepEnbStatus) {
        uint64_t v5 = 89;
      }
      else {
        uint64_t v5 = 78;
      }
      unsigned __int16 v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PowerReportEnabled,%c\n", (unint64_t)v4, "GNM", 73, "Gnm54_03HandleSetPowerRptRsp", v5);
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
    }
    Gnm11_00ApiStatusCB(*(unsigned __int8 *)(a1 + 12), 0, 0, 15);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v7 = mach_continuous_time();
    unsigned __int16 v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm54_03HandleSetPowerRptRsp", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 0, 1);
  }
  return 0;
}

uint64_t Gnm54_04HandlePowRepData(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    uint64_t v2 = mach_continuous_time();
    unsigned __int16 v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_POW_REP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm54_04HandlePowRepData");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!g_PowerRepEnbStatus)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v8 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerRep ReqDisabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 87, "Gnm54_04HandlePowRepData", 1028);
    int v10 = 2;
LABEL_15:
    LbsOsaTrace_WriteLog(0xBu, __str, v9, v10, 1);
    return 0;
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0)) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v11 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm54_04HandlePowRepData", 517);
    int v10 = 0;
    goto LABEL_15;
  }
  double v4 = qword_26AE66D88;
  int IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if (!v4)
  {
    if (!IsLoggingAllowed) {
      return 0;
    }
    bzero(__str, 0x410uLL);
    uint64_t v12 = mach_continuous_time();
    size_t v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerReport\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm54_04HandlePowRepData", 258);
    int v10 = 4;
    goto LABEL_15;
  }
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    uint64_t v6 = mach_continuous_time();
    unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: BBtick,%u,MeasIntvl,%ums,ActiveIntvl,%ums,Power,%fmW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm54_04HandlePowRepData", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(double *)(a1 + 24));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  *(void *)int __str = *(void *)(a1 + 12);
  int v15 = *(_DWORD *)(a1 + 20);
  uint64_t v16 = *(void *)(a1 + 24);
  qword_26AE66D88(0, __str);
  return 0;
}

uint64_t pos_protocol_PpduCallback(unsigned int a1, size_t a2, const void *a3)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    memset_s((char *)&v89 + 8, 0x60uLL, 0, 0x60uLL);
    memset_s((char *)&v89 + 8, 0x60uLL, 0, 0x60uLL);
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      uint64_t v6 = mach_continuous_time();
      unsigned __int16 v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 73, "pos_protocol_PpduCallback", a1);
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 4, 1);
    }
    if (a1 > 4)
    {
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
      if (result)
      {
        bzero(__str, 0x410uLL);
        uint64_t v18 = mach_continuous_time();
        unsigned __int16 v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "PSP", 69, "pos_protocol_PpduCallback", 770);
        return LbsOsaTrace_WriteLog(0x13u, __str, v19, 0, 1);
      }
    }
    else
    {
      *(void *)&long long v89 = __PAIR64__(a2, a1);
      memcpy_s("pos_protocol_PpduCallback", 62, (char *)&v89 + 8, a2, a3, a2);
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v8 = mach_continuous_time();
        unsigned __int16 v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "PSP", 68, "Process_PPDU_Request");
        LbsOsaTrace_WriteLog(0x13u, __str, v9, 5, 1);
      }
      switch(a1)
      {
        case 0u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v10 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if (BYTE9(v89)) {
              uint64_t v11 = 84;
            }
            else {
              uint64_t v11 = 70;
            }
            if (BYTE8(v89)) {
              uint64_t v12 = 84;
            }
            else {
              uint64_t v12 = 70;
            }
            if (BYTE10(v89)) {
              uint64_t v13 = 84;
            }
            else {
              uint64_t v13 = 70;
            }
            unsigned __int16 v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GPS,Autonomous,%c,Assisted,%c,Based,%c\n", (unint64_t)v10, "PSP", 77, "TracePPDUContents", v13, v12, v11);
            LbsOsaTrace_WriteLog(0x13u, __str, v14, 3, 1);
          }
          break;
        case 1u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v22 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((_BYTE)v90) {
              uint64_t v23 = 84;
            }
            else {
              uint64_t v23 = 70;
            }
            if (BYTE1(v90)) {
              uint64_t v24 = 84;
            }
            else {
              uint64_t v24 = 70;
            }
            unsigned __int16 v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Active Session PDUSize,%u,TypeOfPayload,%u,Handle,%u,isEmergency,%c,isLogsDisabled,%c,sessionType,%u\n", (unint64_t)v22, "PSP", 77, "TracePPDUContents", LOWORD(v94[0]), __src, DWORD2(v89), v24, v23, HIDWORD(v89));
            LbsOsaTrace_WriteLog(0x13u, __str, v25, 3, 1);
          }
          PPDU_TraceBuffer((uint64_t)v94[1], LOWORD(v94[0]));
          break;
        case 2u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v26 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((_BYTE)v90) {
              uint64_t v27 = 84;
            }
            else {
              uint64_t v27 = 70;
            }
            if (BYTE1(v90)) {
              uint64_t v28 = 84;
            }
            else {
              uint64_t v28 = 70;
            }
            unsigned __int16 v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Request Capabilities payloadType,%u,Handle,%u,isEmergency,%c,isLogsDisabled,%c,sessionType,%u\n", (unint64_t)v26, "PSP", 77, "TracePPDUContents", HIDWORD(v93), DWORD2(v89), v28, v27, HIDWORD(v89));
            LbsOsaTrace_WriteLog(0x13u, __str, v29, 3, 1);
          }
          break;
        case 3u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v30 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((_BYTE)v90) {
              uint64_t v31 = 84;
            }
            else {
              uint64_t v31 = 70;
            }
            if (BYTE1(v90)) {
              uint64_t v32 = 84;
            }
            else {
              uint64_t v32 = 70;
            }
            unsigned __int16 v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Assistance Data payloadType,%u,Handle,%u,isEmergency,%c,isLogsDisabled,%c,sessionType,%u\n", (unint64_t)v30, "PSP", 77, "TracePPDUContents", HIDWORD(v93), DWORD2(v89), v32, v31, HIDWORD(v89));
            LbsOsaTrace_WriteLog(0x13u, __str, v33, 3, 1);
          }
          break;
        case 4u:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            double v34 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((_BYTE)v90) {
              uint64_t v35 = 84;
            }
            else {
              uint64_t v35 = 70;
            }
            if (BYTE1(v90)) {
              uint64_t v36 = 84;
            }
            else {
              uint64_t v36 = 70;
            }
            unsigned __int16 v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Handle,%u,isEmergency,%c,isLoggingDisabled,%c,sessionType,%u,sessionCode,%u\n", (unint64_t)v34, "PSP", 77, "TracePPDUContents", DWORD2(v89), v36, v35, HIDWORD(v89), DWORD1(v90));
            LbsOsaTrace_WriteLog(0x13u, __str, v37, 3, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 1))
          {
            bzero(__str, 0x410uLL);
            uint64_t v38 = mach_continuous_time();
            unsigned __int16 v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%u,long,%d,Alt,%u,status,%u,fixType,%u,shape,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "PSP", 73, "TracePPDUContents", HIDWORD(v91), v92, WORD2(v92), HIDWORD(v90), v91, DWORD1(v91));
            LbsOsaTrace_WriteLog(0x13u, __str, v39, 4, 1);
          }
          break;
        default:
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            uint64_t v20 = mach_continuous_time();
            unsigned __int16 v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msg type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 69, "TracePPDUContents", 770, a1);
            LbsOsaTrace_WriteLog(0x13u, __str, v21, 0, 1);
          }
          break;
      }
      int v98 = -1;
      __int16 v96 = 1793;
      uint64_t v40 = operator new(0x68uLL, MEMORY[0x263F8C180]);
      if (v40)
      {
        uint64_t v41 = v40;
        *uint64_t v40 = 4;
        uint64_t v42 = (int *)(v40 + 1);
        memset_s(v40 + 1, 0x60uLL, 0, 0x60uLL);
        long long v43 = v92;
        long long v44 = *(_OWORD *)v94;
        *((_OWORD *)v41 + 4) = v93;
        *((_OWORD *)v41 + 5) = v44;
        long long v45 = v90;
        long long v46 = v91;
        *(_OWORD *)uint64_t v41 = v89;
        *((_OWORD *)v41 + 1) = v45;
        uint64_t v97 = v41;
        v41[12] = __src;
        *((_OWORD *)v41 + 2) = v46;
        *((_OWORD *)v41 + 3) = v43;
        switch((int)v89)
        {
          case 0:
            goto LABEL_64;
          case 1:
            int v98 = *((_DWORD *)v41 + 2);
            size_t v58 = *((__int16 *)v41 + 40);
            if ((int)v58 < 1)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v66 = mach_continuous_time();
                unsigned __int16 v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PDU\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "PSP", 69, "Process_PPDU_Request", 770);
                LbsOsaTrace_WriteLog(0x13u, __str, v67, 0, 1);
              }
              MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
              if (!result) {
                return result;
              }
            }
            else
            {
              double v59 = gnssOsa_Calloc("Process_PPDU_Request", 116, 1, *((unsigned __int16 *)v41 + 40));
              if (v59)
              {
                memcpy_s("Process_PPDU_Request", 126, v59, v58, (const void *)v41[11], v58);
                v41[11] = v59;
                goto LABEL_64;
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v68 = mach_continuous_time();
                unsigned __int16 v69 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Active session PDU\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v68), "PSP", 69, "Process_PPDU_Request", 1537);
                LbsOsaTrace_WriteLog(0x13u, __str, v69, 0, 1);
              }
              MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
              if (!result) {
                return result;
              }
            }
            goto LABEL_135;
          case 2:
          case 4:
            int v98 = *v42;
            goto LABEL_64;
          case 3:
            int v98 = *v42;
            if (!v94[0]) {
              goto LABEL_93;
            }
            uint64_t v60 = gnssOsa_Calloc("Process_PPDU_Request", 144, 1, 0x38uLL);
            v41[10] = v60;
            if (v60)
            {
              *(void *)(v41[10] + 8) = gnssOsa_Calloc("Process_PPDU_Request", 149, 1, 8uLL);
              uint64_t v61 = (const void *)*((void *)v94[0] + 1);
              if (v61)
              {
                memcpy_s("Process_PPDU_Request", 154, *(void **)(v41[10] + 8), 8u, v61, 8uLL);
                if (!*((void *)v94[0] + 2) || !*(unsigned char *)(*((void *)v94[0] + 1) + 3)) {
                  goto LABEL_93;
                }
                *(void *)(v41[10] + 16) = gnssOsa_Calloc("Process_PPDU_Request", 168, 1, 0xD8uLL);
                double v62 = *(void **)(v41[10] + 16);
                if (v62)
                {
                  memcpy_s("Process_PPDU_Request", 173, v62, 0xD8u, *((const void **)v94[0] + 2), 0xD8uLL);
LABEL_93:
                  if (__src)
                  {
                    uint64_t v63 = gnssOsa_Calloc("Process_PPDU_Request", 197, 1, 0x14uLL);
                    v41[12] = v63;
                    if (!v63)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        uint64_t v75 = mach_continuous_time();
                        unsigned __int16 v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location ID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 69, "Process_PPDU_Request", 1537);
                        LbsOsaTrace_WriteLog(0x13u, __str, v76, 0, 1);
                      }
                      uint64_t v77 = v41[10];
                      int v78 = *(void **)(v77 + 16);
                      if (v78)
                      {
                        free(v78);
                        uint64_t v77 = v41[10];
                      }
                      *(void *)(v77 + 16) = 0;
                      uint64_t v79 = v41[10];
                      uint64_t v80 = *(void **)(v79 + 8);
                      if (v80)
                      {
                        free(v80);
                        uint64_t v79 = v41[10];
                      }
                      *(void *)(v79 + 8) = 0;
                      double v81 = (void *)v41[10];
                      if (v81) {
                        free(v81);
                      }
                      v41[10] = 0;
                      return MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
                    }
                    memcpy_s("Process_PPDU_Request", 202, v63, 0x14u, __src, 0x14uLL);
                  }
LABEL_64:
                  if (SuplPospPostMessage((unsigned __int8 *)&v96) && v89 == 3)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      uint64_t v47 = mach_continuous_time();
                      unsigned __int16 v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Request Assistance Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "PSP", 69, "Process_PPDU_Request", 1548);
                      LbsOsaTrace_WriteLog(0x13u, __str, v48, 0, 1);
                    }
                    uint64_t v49 = v97;
                    double v50 = (void *)v97[12];
                    if (v50)
                    {
                      free(v50);
                      uint64_t v49 = v97;
                    }
                    v49[12] = 0;
                    uint64_t v51 = v49[10];
                    long long v52 = *(void **)(v51 + 16);
                    if (v52)
                    {
                      free(v52);
                      uint64_t v49 = v97;
                      uint64_t v51 = v97[10];
                    }
                    *(void *)(v51 + 16) = 0;
                    uint64_t v53 = v49[10];
                    uint64_t v54 = *(void **)(v53 + 8);
                    if (v54)
                    {
                      free(v54);
                      uint64_t v49 = v97;
                      uint64_t v53 = v97[10];
                    }
                    *(void *)(v53 + 8) = 0;
                    long long v55 = (void *)v49[10];
                    if (v55)
                    {
                      free(v55);
                      uint64_t v49 = v97;
                    }
                    v49[10] = 0;
                    MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
                  }
                  uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
                  if (!result) {
                    return result;
                  }
                  goto LABEL_135;
                }
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v82 = mach_continuous_time();
                  unsigned __int16 v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Asst Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "PSP", 69, "Process_PPDU_Request", 1537);
                  LbsOsaTrace_WriteLog(0x13u, __str, v83, 0, 1);
                }
                uint64_t v84 = v41[10];
                double v85 = *(void **)(v84 + 8);
                if (v85)
                {
                  free(v85);
                  uint64_t v84 = v41[10];
                }
                *(void *)(v84 + 8) = 0;
                int v86 = (void *)v41[10];
                if (v86) {
                  free(v86);
                }
                v41[10] = 0;
                MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
                uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
                if (!result) {
                  return result;
                }
              }
              else
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  uint64_t v72 = mach_continuous_time();
                  unsigned __int16 v73 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Generic Asst Req\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "PSP", 69, "Process_PPDU_Request", 1537);
                  LbsOsaTrace_WriteLog(0x13u, __str, v73, 0, 1);
                }
                signed int v74 = (void *)v41[10];
                if (v74) {
                  free(v74);
                }
                v41[10] = 0;
                MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
                uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
                if (!result) {
                  return result;
                }
              }
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                uint64_t v70 = mach_continuous_time();
                unsigned __int16 v71 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gen Asst Data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "PSP", 69, "Process_PPDU_Request", 1537);
                LbsOsaTrace_WriteLog(0x13u, __str, v71, 0, 1);
              }
              MEMORY[0x230F4E5D0](v41, 0x1032C4083C19586);
              uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
              if (!result) {
                return result;
              }
            }
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              uint64_t v64 = mach_continuous_time();
              unsigned __int16 v65 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx msg type\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v64), "PSP", 69, "Process_PPDU_Request", 770);
              LbsOsaTrace_WriteLog(0x13u, __str, v65, 0, 1);
            }
            uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
            if (result) {
              goto LABEL_135;
            }
            return result;
        }
        goto LABEL_135;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        uint64_t v56 = mach_continuous_time();
        unsigned __int16 v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PPDU Msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "PSP", 69, "Process_PPDU_Request", 1537);
        LbsOsaTrace_WriteLog(0x13u, __str, v57, 0, 1);
      }
      uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
      if (result)
      {
LABEL_135:
        bzero(__str, 0x410uLL);
        uint64_t v87 = mach_continuous_time();
        unsigned __int16 v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "PSP", 68, "Process_PPDU_Request");
        return LbsOsaTrace_WriteLog(0x13u, __str, v88, 5, 1);
      }
    }
  }
  else
  {
    uint64_t result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
    if (result)
    {
      bzero(__str, 0x410uLL);
      uint64_t v16 = mach_continuous_time();
      unsigned __int16 v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx length,%d or msg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "pos_protocol_PpduCallback", 513, a2);
      return LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
    }
  }
  return result;
}